
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00025574  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002e4  20000000  00025574  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005324  200002f0  00025870  000402f0  2**4
                  ALLOC
  3 .stack        00002004  20005614  0002ab94  000402f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0004030c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000f7df2  00000000  00000000  00040365  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000f2d5  00000000  00000000  00138157  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000113fb  00000000  00000000  0014742c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002fb0  00000000  00000000  00158827  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002c68  00000000  00000000  0015b7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00026f48  00000000  00000000  0015e43f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0004dfc0  00000000  00000000  00185387  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000b8390  00000000  00000000  001d3347  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000b2e8  00000000  00000000  0028b6d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 76 00 20 8d 6a 01 00 85 6b 01 00 85 6b 01 00     .v. .j...k...k..
	...
      2c:	21 5c 00 00 00 00 00 00 00 00 00 00 41 5d 00 00     !\..........A]..
      3c:	89 5d 00 00 85 6b 01 00 85 6b 01 00 85 6b 01 00     .]...k...k...k..
      4c:	dd 2b 01 00 09 21 01 00 85 6b 01 00 61 04 00 00     .+...!...k..a...
      5c:	85 6b 01 00 a5 05 00 00 81 32 01 00 99 32 01 00     .k.......2...2..
      6c:	b1 32 01 00 c9 32 01 00 e1 32 01 00 f9 32 01 00     .2...2...2...2..
      7c:	d5 69 01 00 e9 69 01 00 fd 69 01 00 0d 39 00 00     .i...i...i...9..
      8c:	21 39 00 00 35 39 00 00 00 00 00 00 00 00 00 00     !9..59..........
      9c:	e9 02 00 00 85 6b 01 00 25 04 00 00 85 6b 01 00     .....k..%....k..
      ac:	85 6b 01 00 00 00 00 00                             .k......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002f0 	.word	0x200002f0
      d4:	00000000 	.word	0x00000000
      d8:	00025574 	.word	0x00025574

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002f4 	.word	0x200002f4
     108:	00025574 	.word	0x00025574
     10c:	00025574 	.word	0x00025574
     110:	00000000 	.word	0x00000000

00000114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	681b      	ldr	r3, [r3, #0]
     120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     122:	68fb      	ldr	r3, [r7, #12]
     124:	7e5b      	ldrb	r3, [r3, #25]
     126:	b2db      	uxtb	r3, r3
     128:	b25b      	sxtb	r3, r3
     12a:	2b00      	cmp	r3, #0
     12c:	da01      	bge.n	132 <adc_is_syncing+0x1e>
		return true;
     12e:	2301      	movs	r3, #1
     130:	e000      	b.n	134 <adc_is_syncing+0x20>
	}

	return false;
     132:	2300      	movs	r3, #0
}
     134:	0018      	movs	r0, r3
     136:	46bd      	mov	sp, r7
     138:	b004      	add	sp, #16
     13a:	bd80      	pop	{r7, pc}

0000013c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     13c:	b580      	push	{r7, lr}
     13e:	b084      	sub	sp, #16
     140:	af00      	add	r7, sp, #0
     142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     144:	687b      	ldr	r3, [r7, #4]
     146:	681b      	ldr	r3, [r3, #0]
     148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	687b      	ldr	r3, [r7, #4]
     14e:	0018      	movs	r0, r3
     150:	4b0b      	ldr	r3, [pc, #44]	; (180 <adc_start_conversion+0x44>)
     152:	4798      	blx	r3
     154:	1e03      	subs	r3, r0, #0
     156:	d1f9      	bne.n	14c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     158:	68fb      	ldr	r3, [r7, #12]
     15a:	7b1b      	ldrb	r3, [r3, #12]
     15c:	b2db      	uxtb	r3, r3
     15e:	2202      	movs	r2, #2
     160:	4313      	orrs	r3, r2
     162:	b2da      	uxtb	r2, r3
     164:	68fb      	ldr	r3, [r7, #12]
     166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     168:	46c0      	nop			; (mov r8, r8)
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	0018      	movs	r0, r3
     16e:	4b04      	ldr	r3, [pc, #16]	; (180 <adc_start_conversion+0x44>)
     170:	4798      	blx	r3
     172:	1e03      	subs	r3, r0, #0
     174:	d1f9      	bne.n	16a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     176:	46c0      	nop			; (mov r8, r8)
     178:	46bd      	mov	sp, r7
     17a:	b004      	add	sp, #16
     17c:	bd80      	pop	{r7, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00000115 	.word	0x00000115

00000184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     184:	b580      	push	{r7, lr}
     186:	b084      	sub	sp, #16
     188:	af00      	add	r7, sp, #0
     18a:	6078      	str	r0, [r7, #4]
     18c:	000a      	movs	r2, r1
     18e:	1cfb      	adds	r3, r7, #3
     190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     192:	687b      	ldr	r3, [r7, #4]
     194:	681b      	ldr	r3, [r3, #0]
     196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     198:	68fb      	ldr	r3, [r7, #12]
     19a:	1cfa      	adds	r2, r7, #3
     19c:	7812      	ldrb	r2, [r2, #0]
     19e:	759a      	strb	r2, [r3, #22]
}
     1a0:	46c0      	nop			; (mov r8, r8)
     1a2:	46bd      	mov	sp, r7
     1a4:	b004      	add	sp, #16
     1a6:	bd80      	pop	{r7, pc}

000001a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b084      	sub	sp, #16
     1ac:	af00      	add	r7, sp, #0
     1ae:	0002      	movs	r2, r0
     1b0:	1dfb      	adds	r3, r7, #7
     1b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     1b4:	1dfb      	adds	r3, r7, #7
     1b6:	781a      	ldrb	r2, [r3, #0]
     1b8:	4b47      	ldr	r3, [pc, #284]	; (2d8 <_adc_interrupt_handler+0x130>)
     1ba:	0092      	lsls	r2, r2, #2
     1bc:	58d3      	ldr	r3, [r2, r3]
     1be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     1c0:	68fb      	ldr	r3, [r7, #12]
     1c2:	681b      	ldr	r3, [r3, #0]
     1c4:	7e1b      	ldrb	r3, [r3, #24]
     1c6:	b2da      	uxtb	r2, r3
     1c8:	68fb      	ldr	r3, [r7, #12]
     1ca:	681b      	ldr	r3, [r3, #0]
     1cc:	7ddb      	ldrb	r3, [r3, #23]
     1ce:	b2db      	uxtb	r3, r3
     1d0:	4013      	ands	r3, r2
     1d2:	b2db      	uxtb	r3, r3
     1d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     1d6:	68bb      	ldr	r3, [r7, #8]
     1d8:	2201      	movs	r2, #1
     1da:	4013      	ands	r3, r2
     1dc:	d045      	beq.n	26a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     1de:	68fb      	ldr	r3, [r7, #12]
     1e0:	681b      	ldr	r3, [r3, #0]
     1e2:	2201      	movs	r2, #1
     1e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	68fb      	ldr	r3, [r7, #12]
     1ea:	0018      	movs	r0, r3
     1ec:	4b3b      	ldr	r3, [pc, #236]	; (2dc <_adc_interrupt_handler+0x134>)
     1ee:	4798      	blx	r3
     1f0:	1e03      	subs	r3, r0, #0
     1f2:	d1f9      	bne.n	1e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	695b      	ldr	r3, [r3, #20]
     1f8:	1c99      	adds	r1, r3, #2
     1fa:	68fa      	ldr	r2, [r7, #12]
     1fc:	6151      	str	r1, [r2, #20]
     1fe:	68fa      	ldr	r2, [r7, #12]
     200:	6812      	ldr	r2, [r2, #0]
     202:	8b52      	ldrh	r2, [r2, #26]
     204:	b292      	uxth	r2, r2
     206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     208:	68fb      	ldr	r3, [r7, #12]
     20a:	8b1b      	ldrh	r3, [r3, #24]
     20c:	b29b      	uxth	r3, r3
     20e:	3b01      	subs	r3, #1
     210:	b29b      	uxth	r3, r3
     212:	68fa      	ldr	r2, [r7, #12]
     214:	1c19      	adds	r1, r3, #0
     216:	8311      	strh	r1, [r2, #24]
     218:	2b00      	cmp	r3, #0
     21a:	d008      	beq.n	22e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
     21c:	68fb      	ldr	r3, [r7, #12]
     21e:	7f5b      	ldrb	r3, [r3, #29]
     220:	2b00      	cmp	r3, #0
     222:	d022      	beq.n	26a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     224:	68fb      	ldr	r3, [r7, #12]
     226:	0018      	movs	r0, r3
     228:	4b2d      	ldr	r3, [pc, #180]	; (2e0 <_adc_interrupt_handler+0x138>)
     22a:	4798      	blx	r3
     22c:	e01d      	b.n	26a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     22e:	68fb      	ldr	r3, [r7, #12]
     230:	2101      	movs	r1, #1
     232:	0018      	movs	r0, r3
     234:	4b2b      	ldr	r3, [pc, #172]	; (2e4 <_adc_interrupt_handler+0x13c>)
     236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     238:	68fb      	ldr	r3, [r7, #12]
     23a:	7f1b      	ldrb	r3, [r3, #28]
     23c:	b2db      	uxtb	r3, r3
     23e:	2b05      	cmp	r3, #5
     240:	d113      	bne.n	26a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
     242:	68fb      	ldr	r3, [r7, #12]
     244:	2200      	movs	r2, #0
     246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     248:	68fb      	ldr	r3, [r7, #12]
     24a:	7edb      	ldrb	r3, [r3, #27]
     24c:	001a      	movs	r2, r3
     24e:	2301      	movs	r3, #1
     250:	4013      	ands	r3, r2
     252:	d00a      	beq.n	26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     254:	68fb      	ldr	r3, [r7, #12]
     256:	7e9b      	ldrb	r3, [r3, #26]
     258:	001a      	movs	r2, r3
     25a:	2301      	movs	r3, #1
     25c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     25e:	d004      	beq.n	26a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     260:	68fb      	ldr	r3, [r7, #12]
     262:	689b      	ldr	r3, [r3, #8]
     264:	68fa      	ldr	r2, [r7, #12]
     266:	0010      	movs	r0, r2
     268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     26a:	68bb      	ldr	r3, [r7, #8]
     26c:	2204      	movs	r2, #4
     26e:	4013      	ands	r3, r2
     270:	d014      	beq.n	29c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     272:	68fb      	ldr	r3, [r7, #12]
     274:	681b      	ldr	r3, [r3, #0]
     276:	2204      	movs	r2, #4
     278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     27a:	68fb      	ldr	r3, [r7, #12]
     27c:	7edb      	ldrb	r3, [r3, #27]
     27e:	001a      	movs	r2, r3
     280:	2302      	movs	r3, #2
     282:	4013      	ands	r3, r2
     284:	d00a      	beq.n	29c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     286:	68fb      	ldr	r3, [r7, #12]
     288:	7e9b      	ldrb	r3, [r3, #26]
     28a:	001a      	movs	r2, r3
     28c:	2302      	movs	r3, #2
     28e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     290:	d004      	beq.n	29c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     292:	68fb      	ldr	r3, [r7, #12]
     294:	68db      	ldr	r3, [r3, #12]
     296:	68fa      	ldr	r2, [r7, #12]
     298:	0010      	movs	r0, r2
     29a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     29c:	68bb      	ldr	r3, [r7, #8]
     29e:	2202      	movs	r2, #2
     2a0:	4013      	ands	r3, r2
     2a2:	d014      	beq.n	2ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     2a4:	68fb      	ldr	r3, [r7, #12]
     2a6:	681b      	ldr	r3, [r3, #0]
     2a8:	2202      	movs	r2, #2
     2aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2ac:	68fb      	ldr	r3, [r7, #12]
     2ae:	7edb      	ldrb	r3, [r3, #27]
     2b0:	001a      	movs	r2, r3
     2b2:	2304      	movs	r3, #4
     2b4:	4013      	ands	r3, r2
     2b6:	d00a      	beq.n	2ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     2b8:	68fb      	ldr	r3, [r7, #12]
     2ba:	7e9b      	ldrb	r3, [r3, #26]
     2bc:	001a      	movs	r2, r3
     2be:	2304      	movs	r3, #4
     2c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     2c2:	d004      	beq.n	2ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     2c4:	68fb      	ldr	r3, [r7, #12]
     2c6:	691b      	ldr	r3, [r3, #16]
     2c8:	68fa      	ldr	r2, [r7, #12]
     2ca:	0010      	movs	r0, r2
     2cc:	4798      	blx	r3
		}
	}
}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	46bd      	mov	sp, r7
     2d2:	b004      	add	sp, #16
     2d4:	bd80      	pop	{r7, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	20004190 	.word	0x20004190
     2dc:	00000115 	.word	0x00000115
     2e0:	0000013d 	.word	0x0000013d
     2e4:	00000185 	.word	0x00000185

000002e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     2ec:	2000      	movs	r0, #0
     2ee:	4b02      	ldr	r3, [pc, #8]	; (2f8 <ADC_Handler+0x10>)
     2f0:	4798      	blx	r3
}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	46bd      	mov	sp, r7
     2f6:	bd80      	pop	{r7, pc}
     2f8:	000001a9 	.word	0x000001a9

000002fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	b082      	sub	sp, #8
     300:	af00      	add	r7, sp, #0
     302:	0002      	movs	r2, r0
     304:	1dfb      	adds	r3, r7, #7
     306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     308:	4a07      	ldr	r2, [pc, #28]	; (328 <system_interrupt_disable+0x2c>)
     30a:	1dfb      	adds	r3, r7, #7
     30c:	781b      	ldrb	r3, [r3, #0]
     30e:	0019      	movs	r1, r3
     310:	231f      	movs	r3, #31
     312:	400b      	ands	r3, r1
     314:	2101      	movs	r1, #1
     316:	4099      	lsls	r1, r3
     318:	000b      	movs	r3, r1
     31a:	0019      	movs	r1, r3
     31c:	2380      	movs	r3, #128	; 0x80
     31e:	50d1      	str	r1, [r2, r3]
}
     320:	46c0      	nop			; (mov r8, r8)
     322:	46bd      	mov	sp, r7
     324:	b002      	add	sp, #8
     326:	bd80      	pop	{r7, pc}
     328:	e000e100 	.word	0xe000e100

0000032c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
     32c:	b580      	push	{r7, lr}
     32e:	b084      	sub	sp, #16
     330:	af00      	add	r7, sp, #0
     332:	0002      	movs	r2, r0
     334:	1dfb      	adds	r3, r7, #7
     336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
     338:	1dfb      	adds	r3, r7, #7
     33a:	781a      	ldrb	r2, [r3, #0]
     33c:	4b37      	ldr	r3, [pc, #220]	; (41c <_dac_interrupt_handler+0xf0>)
     33e:	0092      	lsls	r2, r2, #2
     340:	58d3      	ldr	r3, [r2, r3]
     342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
     344:	68fb      	ldr	r3, [r7, #12]
     346:	681b      	ldr	r3, [r3, #0]
     348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
     34a:	68bb      	ldr	r3, [r7, #8]
     34c:	799b      	ldrb	r3, [r3, #6]
     34e:	b2db      	uxtb	r3, r3
     350:	001a      	movs	r2, r3
     352:	2301      	movs	r3, #1
     354:	4013      	ands	r3, r2
     356:	d00e      	beq.n	376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
     358:	68bb      	ldr	r3, [r7, #8]
     35a:	2201      	movs	r2, #1
     35c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
     35e:	68fb      	ldr	r3, [r7, #12]
     360:	3314      	adds	r3, #20
     362:	2b00      	cmp	r3, #0
     364:	d007      	beq.n	376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
     366:	68fb      	ldr	r3, [r7, #12]
     368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
     36a:	2b00      	cmp	r3, #0
     36c:	d003      	beq.n	376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
     36e:	68fb      	ldr	r3, [r7, #12]
     370:	699b      	ldr	r3, [r3, #24]
     372:	2000      	movs	r0, #0
     374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
     376:	68bb      	ldr	r3, [r7, #8]
     378:	799b      	ldrb	r3, [r3, #6]
     37a:	b2db      	uxtb	r3, r3
     37c:	001a      	movs	r2, r3
     37e:	2302      	movs	r3, #2
     380:	4013      	ands	r3, r2
     382:	d047      	beq.n	414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     384:	68bb      	ldr	r3, [r7, #8]
     386:	2202      	movs	r2, #2
     388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
     38a:	68fb      	ldr	r3, [r7, #12]
     38c:	899b      	ldrh	r3, [r3, #12]
     38e:	b29b      	uxth	r3, r3
     390:	2b00      	cmp	r3, #0
     392:	d033      	beq.n	3fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
     394:	68fb      	ldr	r3, [r7, #12]
     396:	689a      	ldr	r2, [r3, #8]
     398:	68fb      	ldr	r3, [r7, #12]
     39a:	89db      	ldrh	r3, [r3, #14]
     39c:	b29b      	uxth	r3, r3
     39e:	1c59      	adds	r1, r3, #1
     3a0:	b288      	uxth	r0, r1
     3a2:	68f9      	ldr	r1, [r7, #12]
     3a4:	81c8      	strh	r0, [r1, #14]
     3a6:	005b      	lsls	r3, r3, #1
     3a8:	18d3      	adds	r3, r2, r3
     3aa:	881b      	ldrh	r3, [r3, #0]
     3ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
     3ae:	68bb      	ldr	r3, [r7, #8]
     3b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
     3b2:	68fb      	ldr	r3, [r7, #12]
     3b4:	899b      	ldrh	r3, [r3, #12]
     3b6:	b29b      	uxth	r3, r3
     3b8:	3b01      	subs	r3, #1
     3ba:	b29a      	uxth	r2, r3
     3bc:	68fb      	ldr	r3, [r7, #12]
     3be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
     3c0:	68fb      	ldr	r3, [r7, #12]
     3c2:	899b      	ldrh	r3, [r3, #12]
     3c4:	b29b      	uxth	r3, r3
     3c6:	2b00      	cmp	r3, #0
     3c8:	d118      	bne.n	3fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
     3ca:	68fb      	ldr	r3, [r7, #12]
     3cc:	2220      	movs	r2, #32
     3ce:	2100      	movs	r1, #0
     3d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
     3d2:	68bb      	ldr	r3, [r7, #8]
     3d4:	2202      	movs	r2, #2
     3d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
     3d8:	68bb      	ldr	r3, [r7, #8]
     3da:	2202      	movs	r2, #2
     3dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
     3de:	2019      	movs	r0, #25
     3e0:	4b0f      	ldr	r3, [pc, #60]	; (420 <_dac_interrupt_handler+0xf4>)
     3e2:	4798      	blx	r3

				if ((module->callback) &&
     3e4:	68fb      	ldr	r3, [r7, #12]
     3e6:	3314      	adds	r3, #20
     3e8:	2b00      	cmp	r3, #0
     3ea:	d007      	beq.n	3fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
     3ec:	68fb      	ldr	r3, [r7, #12]
     3ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
     3f0:	2b00      	cmp	r3, #0
     3f2:	d003      	beq.n	3fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
     3f4:	68fb      	ldr	r3, [r7, #12]
     3f6:	69db      	ldr	r3, [r3, #28]
     3f8:	2000      	movs	r0, #0
     3fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
     3fc:	68fb      	ldr	r3, [r7, #12]
     3fe:	3314      	adds	r3, #20
     400:	2b00      	cmp	r3, #0
     402:	d007      	beq.n	414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
     404:	68fb      	ldr	r3, [r7, #12]
     406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
     408:	2b00      	cmp	r3, #0
     40a:	d003      	beq.n	414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
     40c:	68fb      	ldr	r3, [r7, #12]
     40e:	695b      	ldr	r3, [r3, #20]
     410:	2000      	movs	r0, #0
     412:	4798      	blx	r3
		}
	}
}
     414:	46c0      	nop			; (mov r8, r8)
     416:	46bd      	mov	sp, r7
     418:	b004      	add	sp, #16
     41a:	bd80      	pop	{r7, pc}
     41c:	20004194 	.word	0x20004194
     420:	000002fd 	.word	0x000002fd

00000424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     424:	b580      	push	{r7, lr}
     426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
     428:	2000      	movs	r0, #0
     42a:	4b02      	ldr	r3, [pc, #8]	; (434 <DAC_Handler+0x10>)
     42c:	4798      	blx	r3
}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	46bd      	mov	sp, r7
     432:	bd80      	pop	{r7, pc}
     434:	0000032d 	.word	0x0000032d

00000438 <system_interrupt_enter_critical_section>:
{
     438:	b580      	push	{r7, lr}
     43a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     43c:	4b02      	ldr	r3, [pc, #8]	; (448 <system_interrupt_enter_critical_section+0x10>)
     43e:	4798      	blx	r3
}
     440:	46c0      	nop			; (mov r8, r8)
     442:	46bd      	mov	sp, r7
     444:	bd80      	pop	{r7, pc}
     446:	46c0      	nop			; (mov r8, r8)
     448:	00011d69 	.word	0x00011d69

0000044c <system_interrupt_leave_critical_section>:
{
     44c:	b580      	push	{r7, lr}
     44e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     450:	4b02      	ldr	r3, [pc, #8]	; (45c <system_interrupt_leave_critical_section+0x10>)
     452:	4798      	blx	r3
}
     454:	46c0      	nop			; (mov r8, r8)
     456:	46bd      	mov	sp, r7
     458:	bd80      	pop	{r7, pc}
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	00011dbd 	.word	0x00011dbd

00000460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     460:	b580      	push	{r7, lr}
     462:	b086      	sub	sp, #24
     464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
     466:	4b49      	ldr	r3, [pc, #292]	; (58c <DMAC_Handler+0x12c>)
     468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     46a:	4b49      	ldr	r3, [pc, #292]	; (590 <DMAC_Handler+0x130>)
     46c:	8c1b      	ldrh	r3, [r3, #32]
     46e:	b29b      	uxth	r3, r3
     470:	b2da      	uxtb	r2, r3
     472:	2317      	movs	r3, #23
     474:	18fb      	adds	r3, r7, r3
     476:	210f      	movs	r1, #15
     478:	400a      	ands	r2, r1
     47a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     47c:	2317      	movs	r3, #23
     47e:	18fb      	adds	r3, r7, r3
     480:	781a      	ldrb	r2, [r3, #0]
     482:	4b44      	ldr	r3, [pc, #272]	; (594 <DMAC_Handler+0x134>)
     484:	0092      	lsls	r2, r2, #2
     486:	58d3      	ldr	r3, [r2, r3]
     488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     48a:	4a41      	ldr	r2, [pc, #260]	; (590 <DMAC_Handler+0x130>)
     48c:	693b      	ldr	r3, [r7, #16]
     48e:	781b      	ldrb	r3, [r3, #0]
     490:	210f      	movs	r1, #15
     492:	400b      	ands	r3, r1
     494:	b2d9      	uxtb	r1, r3
     496:	233f      	movs	r3, #63	; 0x3f
     498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
     49a:	493d      	ldr	r1, [pc, #244]	; (590 <DMAC_Handler+0x130>)
     49c:	230f      	movs	r3, #15
     49e:	18fb      	adds	r3, r7, r3
     4a0:	224e      	movs	r2, #78	; 0x4e
     4a2:	5c8a      	ldrb	r2, [r1, r2]
     4a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     4a6:	693b      	ldr	r3, [r7, #16]
     4a8:	781b      	ldrb	r3, [r3, #0]
     4aa:	4a3b      	ldr	r2, [pc, #236]	; (598 <DMAC_Handler+0x138>)
     4ac:	011b      	lsls	r3, r3, #4
     4ae:	18d3      	adds	r3, r2, r3
     4b0:	3302      	adds	r3, #2
     4b2:	881b      	ldrh	r3, [r3, #0]
     4b4:	b29b      	uxth	r3, r3
     4b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     4b8:	693b      	ldr	r3, [r7, #16]
     4ba:	781b      	ldrb	r3, [r3, #0]
     4bc:	4a37      	ldr	r2, [pc, #220]	; (59c <DMAC_Handler+0x13c>)
     4be:	011b      	lsls	r3, r3, #4
     4c0:	18d3      	adds	r3, r2, r3
     4c2:	3302      	adds	r3, #2
     4c4:	881b      	ldrh	r3, [r3, #0]
     4c6:	b29b      	uxth	r3, r3
     4c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
     4ca:	68ba      	ldr	r2, [r7, #8]
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	1ad2      	subs	r2, r2, r3
     4d0:	693b      	ldr	r3, [r7, #16]
     4d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     4d4:	230f      	movs	r3, #15
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	781b      	ldrb	r3, [r3, #0]
     4da:	2201      	movs	r2, #1
     4dc:	4013      	ands	r3, r2
     4de:	d016      	beq.n	50e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     4e0:	4a2b      	ldr	r2, [pc, #172]	; (590 <DMAC_Handler+0x130>)
     4e2:	234e      	movs	r3, #78	; 0x4e
     4e4:	2101      	movs	r1, #1
     4e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     4e8:	693b      	ldr	r3, [r7, #16]
     4ea:	2210      	movs	r2, #16
     4ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     4ee:	693b      	ldr	r3, [r7, #16]
     4f0:	7c1b      	ldrb	r3, [r3, #16]
     4f2:	001a      	movs	r2, r3
     4f4:	2301      	movs	r3, #1
     4f6:	4013      	ands	r3, r2
     4f8:	d042      	beq.n	580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     4fa:	693b      	ldr	r3, [r7, #16]
     4fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     4fe:	2b00      	cmp	r3, #0
     500:	d03e      	beq.n	580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     502:	693b      	ldr	r3, [r7, #16]
     504:	685b      	ldr	r3, [r3, #4]
     506:	693a      	ldr	r2, [r7, #16]
     508:	0010      	movs	r0, r2
     50a:	4798      	blx	r3
     50c:	e038      	b.n	580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     50e:	230f      	movs	r3, #15
     510:	18fb      	adds	r3, r7, r3
     512:	781b      	ldrb	r3, [r3, #0]
     514:	2202      	movs	r2, #2
     516:	4013      	ands	r3, r2
     518:	d016      	beq.n	548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     51a:	4a1d      	ldr	r2, [pc, #116]	; (590 <DMAC_Handler+0x130>)
     51c:	234e      	movs	r3, #78	; 0x4e
     51e:	2102      	movs	r1, #2
     520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
     522:	693b      	ldr	r3, [r7, #16]
     524:	2200      	movs	r2, #0
     526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     528:	693b      	ldr	r3, [r7, #16]
     52a:	7c1b      	ldrb	r3, [r3, #16]
     52c:	001a      	movs	r2, r3
     52e:	2302      	movs	r3, #2
     530:	4013      	ands	r3, r2
     532:	d025      	beq.n	580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     534:	693b      	ldr	r3, [r7, #16]
     536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     538:	2b00      	cmp	r3, #0
     53a:	d021      	beq.n	580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     53c:	693b      	ldr	r3, [r7, #16]
     53e:	689b      	ldr	r3, [r3, #8]
     540:	693a      	ldr	r2, [r7, #16]
     542:	0010      	movs	r0, r2
     544:	4798      	blx	r3
     546:	e01b      	b.n	580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     548:	230f      	movs	r3, #15
     54a:	18fb      	adds	r3, r7, r3
     54c:	781b      	ldrb	r3, [r3, #0]
     54e:	2204      	movs	r2, #4
     550:	4013      	ands	r3, r2
     552:	d015      	beq.n	580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     554:	4a0e      	ldr	r2, [pc, #56]	; (590 <DMAC_Handler+0x130>)
     556:	234e      	movs	r3, #78	; 0x4e
     558:	2104      	movs	r1, #4
     55a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
     55c:	693b      	ldr	r3, [r7, #16]
     55e:	2206      	movs	r2, #6
     560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     562:	693b      	ldr	r3, [r7, #16]
     564:	7c1b      	ldrb	r3, [r3, #16]
     566:	001a      	movs	r2, r3
     568:	2304      	movs	r3, #4
     56a:	4013      	ands	r3, r2
     56c:	d008      	beq.n	580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     56e:	693b      	ldr	r3, [r7, #16]
     570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     572:	2b00      	cmp	r3, #0
     574:	d004      	beq.n	580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     576:	693b      	ldr	r3, [r7, #16]
     578:	68db      	ldr	r3, [r3, #12]
     57a:	693a      	ldr	r2, [r7, #16]
     57c:	0010      	movs	r0, r2
     57e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
     580:	4b07      	ldr	r3, [pc, #28]	; (5a0 <DMAC_Handler+0x140>)
     582:	4798      	blx	r3
}
     584:	46c0      	nop			; (mov r8, r8)
     586:	46bd      	mov	sp, r7
     588:	b006      	add	sp, #24
     58a:	bd80      	pop	{r7, pc}
     58c:	00000439 	.word	0x00000439
     590:	41004800 	.word	0x41004800
     594:	20000360 	.word	0x20000360
     598:	200041a0 	.word	0x200041a0
     59c:	20000310 	.word	0x20000310
     5a0:	0000044d 	.word	0x0000044d

000005a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     5a4:	b580      	push	{r7, lr}
     5a6:	b082      	sub	sp, #8
     5a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
     5aa:	4b15      	ldr	r3, [pc, #84]	; (600 <EVSYS_Handler+0x5c>)
     5ac:	691b      	ldr	r3, [r3, #16]
     5ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     5b0:	4b14      	ldr	r3, [pc, #80]	; (604 <EVSYS_Handler+0x60>)
     5b2:	699b      	ldr	r3, [r3, #24]
     5b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
     5b6:	4b12      	ldr	r3, [pc, #72]	; (600 <EVSYS_Handler+0x5c>)
     5b8:	689a      	ldr	r2, [r3, #8]
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	431a      	orrs	r2, r3
     5be:	4b10      	ldr	r3, [pc, #64]	; (600 <EVSYS_Handler+0x5c>)
     5c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     5c2:	4b10      	ldr	r3, [pc, #64]	; (604 <EVSYS_Handler+0x60>)
     5c4:	4a10      	ldr	r2, [pc, #64]	; (608 <EVSYS_Handler+0x64>)
     5c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     5c8:	e008      	b.n	5dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
     5ca:	687b      	ldr	r3, [r7, #4]
     5cc:	685a      	ldr	r2, [r3, #4]
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	681b      	ldr	r3, [r3, #0]
     5d2:	0018      	movs	r0, r3
     5d4:	4790      	blx	r2
		current_hook = current_hook->next;
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	689b      	ldr	r3, [r3, #8]
     5da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	2b00      	cmp	r3, #0
     5e0:	d1f3      	bne.n	5ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     5e2:	4b07      	ldr	r3, [pc, #28]	; (600 <EVSYS_Handler+0x5c>)
     5e4:	68db      	ldr	r3, [r3, #12]
     5e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
     5e8:	4b05      	ldr	r3, [pc, #20]	; (600 <EVSYS_Handler+0x5c>)
     5ea:	689b      	ldr	r3, [r3, #8]
     5ec:	683a      	ldr	r2, [r7, #0]
     5ee:	43d2      	mvns	r2, r2
     5f0:	401a      	ands	r2, r3
     5f2:	4b03      	ldr	r3, [pc, #12]	; (600 <EVSYS_Handler+0x5c>)
     5f4:	609a      	str	r2, [r3, #8]
}
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	46bd      	mov	sp, r7
     5fa:	b002      	add	sp, #8
     5fc:	bd80      	pop	{r7, pc}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	20000000 	.word	0x20000000
     604:	42000400 	.word	0x42000400
     608:	0f0fffff 	.word	0x0f0fffff

0000060c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     60c:	b580      	push	{r7, lr}
     60e:	b082      	sub	sp, #8
     610:	af00      	add	r7, sp, #0
     612:	0002      	movs	r2, r0
     614:	6039      	str	r1, [r7, #0]
     616:	1dfb      	adds	r3, r7, #7
     618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     61a:	1dfb      	adds	r3, r7, #7
     61c:	781b      	ldrb	r3, [r3, #0]
     61e:	2b01      	cmp	r3, #1
     620:	d00a      	beq.n	638 <system_apb_clock_set_mask+0x2c>
     622:	2b02      	cmp	r3, #2
     624:	d00f      	beq.n	646 <system_apb_clock_set_mask+0x3a>
     626:	2b00      	cmp	r3, #0
     628:	d114      	bne.n	654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     62a:	4b0e      	ldr	r3, [pc, #56]	; (664 <system_apb_clock_set_mask+0x58>)
     62c:	4a0d      	ldr	r2, [pc, #52]	; (664 <system_apb_clock_set_mask+0x58>)
     62e:	6991      	ldr	r1, [r2, #24]
     630:	683a      	ldr	r2, [r7, #0]
     632:	430a      	orrs	r2, r1
     634:	619a      	str	r2, [r3, #24]
			break;
     636:	e00f      	b.n	658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     638:	4b0a      	ldr	r3, [pc, #40]	; (664 <system_apb_clock_set_mask+0x58>)
     63a:	4a0a      	ldr	r2, [pc, #40]	; (664 <system_apb_clock_set_mask+0x58>)
     63c:	69d1      	ldr	r1, [r2, #28]
     63e:	683a      	ldr	r2, [r7, #0]
     640:	430a      	orrs	r2, r1
     642:	61da      	str	r2, [r3, #28]
			break;
     644:	e008      	b.n	658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     646:	4b07      	ldr	r3, [pc, #28]	; (664 <system_apb_clock_set_mask+0x58>)
     648:	4a06      	ldr	r2, [pc, #24]	; (664 <system_apb_clock_set_mask+0x58>)
     64a:	6a11      	ldr	r1, [r2, #32]
     64c:	683a      	ldr	r2, [r7, #0]
     64e:	430a      	orrs	r2, r1
     650:	621a      	str	r2, [r3, #32]
			break;
     652:	e001      	b.n	658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     654:	2317      	movs	r3, #23
     656:	e000      	b.n	65a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     658:	2300      	movs	r3, #0
}
     65a:	0018      	movs	r0, r3
     65c:	46bd      	mov	sp, r7
     65e:	b002      	add	sp, #8
     660:	bd80      	pop	{r7, pc}
     662:	46c0      	nop			; (mov r8, r8)
     664:	40000400 	.word	0x40000400

00000668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
     668:	b580      	push	{r7, lr}
     66a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
     66c:	2102      	movs	r1, #2
     66e:	2002      	movs	r0, #2
     670:	4b07      	ldr	r3, [pc, #28]	; (690 <_system_events_init+0x28>)
     672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     674:	4b07      	ldr	r3, [pc, #28]	; (694 <_system_events_init+0x2c>)
     676:	2201      	movs	r2, #1
     678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	4b05      	ldr	r3, [pc, #20]	; (694 <_system_events_init+0x2c>)
     67e:	781b      	ldrb	r3, [r3, #0]
     680:	b2db      	uxtb	r3, r3
     682:	001a      	movs	r2, r3
     684:	2301      	movs	r3, #1
     686:	4013      	ands	r3, r2
     688:	d1f8      	bne.n	67c <_system_events_init+0x14>
	}
}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	46bd      	mov	sp, r7
     68e:	bd80      	pop	{r7, pc}
     690:	0000060d 	.word	0x0000060d
     694:	42000400 	.word	0x42000400

00000698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     698:	b580      	push	{r7, lr}
     69a:	b084      	sub	sp, #16
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	681b      	ldr	r3, [r3, #0]
     6a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	69db      	ldr	r3, [r3, #28]
     6aa:	2207      	movs	r2, #7
     6ac:	4013      	ands	r3, r2
     6ae:	1e5a      	subs	r2, r3, #1
     6b0:	4193      	sbcs	r3, r2
     6b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     6b4:	0018      	movs	r0, r3
     6b6:	46bd      	mov	sp, r7
     6b8:	b004      	add	sp, #16
     6ba:	bd80      	pop	{r7, pc}

000006bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b082      	sub	sp, #8
     6c0:	af00      	add	r7, sp, #0
     6c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	0018      	movs	r0, r3
     6ca:	4b04      	ldr	r3, [pc, #16]	; (6dc <_i2c_master_wait_for_sync+0x20>)
     6cc:	4798      	blx	r3
     6ce:	1e03      	subs	r3, r0, #0
     6d0:	d1f9      	bne.n	6c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	46bd      	mov	sp, r7
     6d6:	b002      	add	sp, #8
     6d8:	bd80      	pop	{r7, pc}
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	00000699 	.word	0x00000699

000006e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     6e0:	b580      	push	{r7, lr}
     6e2:	b084      	sub	sp, #16
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6e8:	687b      	ldr	r3, [r7, #4]
     6ea:	681b      	ldr	r3, [r3, #0]
     6ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6ee:	68fb      	ldr	r3, [r7, #12]
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	011b      	lsls	r3, r3, #4
     6f4:	0fdb      	lsrs	r3, r3, #31
     6f6:	b2db      	uxtb	r3, r3
     6f8:	001a      	movs	r2, r3
     6fa:	230b      	movs	r3, #11
     6fc:	18fb      	adds	r3, r7, r3
     6fe:	1e51      	subs	r1, r2, #1
     700:	418a      	sbcs	r2, r1
     702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     704:	2308      	movs	r3, #8
     706:	18fb      	adds	r3, r7, r3
     708:	687a      	ldr	r2, [r7, #4]
     70a:	8b52      	ldrh	r2, [r2, #26]
     70c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     70e:	687b      	ldr	r3, [r7, #4]
     710:	8b9b      	ldrh	r3, [r3, #28]
     712:	b29a      	uxth	r2, r3
     714:	2308      	movs	r3, #8
     716:	18fb      	adds	r3, r7, r3
     718:	2108      	movs	r1, #8
     71a:	1879      	adds	r1, r7, r1
     71c:	8809      	ldrh	r1, [r1, #0]
     71e:	1a8a      	subs	r2, r1, r2
     720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     722:	687b      	ldr	r3, [r7, #4]
     724:	8b9b      	ldrh	r3, [r3, #28]
     726:	b29b      	uxth	r3, r3
     728:	3b01      	subs	r3, #1
     72a:	b29a      	uxth	r2, r3
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
     730:	230b      	movs	r3, #11
     732:	18fb      	adds	r3, r7, r3
     734:	781b      	ldrb	r3, [r3, #0]
     736:	2b00      	cmp	r3, #0
     738:	d010      	beq.n	75c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	7adb      	ldrb	r3, [r3, #11]
     73e:	2b00      	cmp	r3, #0
     740:	d01c      	beq.n	77c <_i2c_master_read+0x9c>
     742:	687b      	ldr	r3, [r7, #4]
     744:	8b9b      	ldrh	r3, [r3, #28]
     746:	b29b      	uxth	r3, r3
     748:	2b01      	cmp	r3, #1
     74a:	d117      	bne.n	77c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     74c:	68fb      	ldr	r3, [r7, #12]
     74e:	685b      	ldr	r3, [r3, #4]
     750:	2280      	movs	r2, #128	; 0x80
     752:	02d2      	lsls	r2, r2, #11
     754:	431a      	orrs	r2, r3
     756:	68fb      	ldr	r3, [r7, #12]
     758:	605a      	str	r2, [r3, #4]
     75a:	e00f      	b.n	77c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	7adb      	ldrb	r3, [r3, #11]
     760:	2b00      	cmp	r3, #0
     762:	d00b      	beq.n	77c <_i2c_master_read+0x9c>
     764:	687b      	ldr	r3, [r7, #4]
     766:	8b9b      	ldrh	r3, [r3, #28]
     768:	b29b      	uxth	r3, r3
     76a:	2b00      	cmp	r3, #0
     76c:	d106      	bne.n	77c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     76e:	68fb      	ldr	r3, [r7, #12]
     770:	685b      	ldr	r3, [r3, #4]
     772:	2280      	movs	r2, #128	; 0x80
     774:	02d2      	lsls	r2, r2, #11
     776:	431a      	orrs	r2, r3
     778:	68fb      	ldr	r3, [r7, #12]
     77a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	8b9b      	ldrh	r3, [r3, #28]
     780:	b29b      	uxth	r3, r3
     782:	2b00      	cmp	r3, #0
     784:	d10e      	bne.n	7a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
     786:	687b      	ldr	r3, [r7, #4]
     788:	7a9b      	ldrb	r3, [r3, #10]
     78a:	2b00      	cmp	r3, #0
     78c:	d00a      	beq.n	7a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     78e:	687b      	ldr	r3, [r7, #4]
     790:	0018      	movs	r0, r3
     792:	4b0e      	ldr	r3, [pc, #56]	; (7cc <_i2c_master_read+0xec>)
     794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     796:	68fb      	ldr	r3, [r7, #12]
     798:	685b      	ldr	r3, [r3, #4]
     79a:	22c0      	movs	r2, #192	; 0xc0
     79c:	0292      	lsls	r2, r2, #10
     79e:	431a      	orrs	r2, r3
     7a0:	68fb      	ldr	r3, [r7, #12]
     7a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	0018      	movs	r0, r3
     7a8:	4b08      	ldr	r3, [pc, #32]	; (7cc <_i2c_master_read+0xec>)
     7aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	6a1a      	ldr	r2, [r3, #32]
     7b0:	2308      	movs	r3, #8
     7b2:	18fb      	adds	r3, r7, r3
     7b4:	881b      	ldrh	r3, [r3, #0]
     7b6:	18d3      	adds	r3, r2, r3
     7b8:	68fa      	ldr	r2, [r7, #12]
     7ba:	2128      	movs	r1, #40	; 0x28
     7bc:	5c52      	ldrb	r2, [r2, r1]
     7be:	b2d2      	uxtb	r2, r2
     7c0:	701a      	strb	r2, [r3, #0]
}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	46bd      	mov	sp, r7
     7c6:	b004      	add	sp, #16
     7c8:	bd80      	pop	{r7, pc}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	000006bd 	.word	0x000006bd

000007d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b084      	sub	sp, #16
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	681b      	ldr	r3, [r3, #0]
     7dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     7de:	68fb      	ldr	r3, [r7, #12]
     7e0:	8b5b      	ldrh	r3, [r3, #26]
     7e2:	b29b      	uxth	r3, r3
     7e4:	001a      	movs	r2, r3
     7e6:	2304      	movs	r3, #4
     7e8:	4013      	ands	r3, r2
     7ea:	d004      	beq.n	7f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	2225      	movs	r2, #37	; 0x25
     7f0:	211e      	movs	r1, #30
     7f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
     7f4:	e024      	b.n	840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
     7f6:	230a      	movs	r3, #10
     7f8:	18fb      	adds	r3, r7, r3
     7fa:	687a      	ldr	r2, [r7, #4]
     7fc:	8b52      	ldrh	r2, [r2, #26]
     7fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     800:	687b      	ldr	r3, [r7, #4]
     802:	8b9b      	ldrh	r3, [r3, #28]
     804:	b29a      	uxth	r2, r3
     806:	230a      	movs	r3, #10
     808:	18fb      	adds	r3, r7, r3
     80a:	210a      	movs	r1, #10
     80c:	1879      	adds	r1, r7, r1
     80e:	8809      	ldrh	r1, [r1, #0]
     810:	1a8a      	subs	r2, r1, r2
     812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     814:	687b      	ldr	r3, [r7, #4]
     816:	8b9b      	ldrh	r3, [r3, #28]
     818:	b29b      	uxth	r3, r3
     81a:	3b01      	subs	r3, #1
     81c:	b29a      	uxth	r2, r3
     81e:	687b      	ldr	r3, [r7, #4]
     820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     822:	687b      	ldr	r3, [r7, #4]
     824:	0018      	movs	r0, r3
     826:	4b08      	ldr	r3, [pc, #32]	; (848 <_i2c_master_write+0x78>)
     828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	6a1a      	ldr	r2, [r3, #32]
     82e:	230a      	movs	r3, #10
     830:	18fb      	adds	r3, r7, r3
     832:	881b      	ldrh	r3, [r3, #0]
     834:	18d3      	adds	r3, r2, r3
     836:	781b      	ldrb	r3, [r3, #0]
     838:	b2d9      	uxtb	r1, r3
     83a:	68fb      	ldr	r3, [r7, #12]
     83c:	2228      	movs	r2, #40	; 0x28
     83e:	5499      	strb	r1, [r3, r2]
}
     840:	46bd      	mov	sp, r7
     842:	b004      	add	sp, #16
     844:	bd80      	pop	{r7, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	000006bd 	.word	0x000006bd

0000084c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
     84c:	b580      	push	{r7, lr}
     84e:	b084      	sub	sp, #16
     850:	af00      	add	r7, sp, #0
     852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     854:	687b      	ldr	r3, [r7, #4]
     856:	681b      	ldr	r3, [r3, #0]
     858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     85a:	68fb      	ldr	r3, [r7, #12]
     85c:	7e1b      	ldrb	r3, [r3, #24]
     85e:	b2db      	uxtb	r3, r3
     860:	001a      	movs	r2, r3
     862:	2301      	movs	r3, #1
     864:	4013      	ands	r3, r2
     866:	d02b      	beq.n	8c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     868:	68fb      	ldr	r3, [r7, #12]
     86a:	2201      	movs	r2, #1
     86c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	8b5b      	ldrh	r3, [r3, #26]
     872:	b29b      	uxth	r3, r3
     874:	001a      	movs	r2, r3
     876:	2302      	movs	r3, #2
     878:	4013      	ands	r3, r2
     87a:	d004      	beq.n	886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     87c:	687b      	ldr	r3, [r7, #4]
     87e:	2225      	movs	r2, #37	; 0x25
     880:	2141      	movs	r1, #65	; 0x41
     882:	5499      	strb	r1, [r3, r2]
     884:	e01c      	b.n	8c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     886:	68fb      	ldr	r3, [r7, #12]
     888:	8b5b      	ldrh	r3, [r3, #26]
     88a:	b29b      	uxth	r3, r3
     88c:	001a      	movs	r2, r3
     88e:	2304      	movs	r3, #4
     890:	4013      	ands	r3, r2
     892:	d015      	beq.n	8c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     894:	687b      	ldr	r3, [r7, #4]
     896:	2225      	movs	r2, #37	; 0x25
     898:	2118      	movs	r1, #24
     89a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	2200      	movs	r2, #0
     8a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	7a9b      	ldrb	r3, [r3, #10]
     8a6:	2b00      	cmp	r3, #0
     8a8:	d00a      	beq.n	8c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	0018      	movs	r0, r3
     8ae:	4b13      	ldr	r3, [pc, #76]	; (8fc <_i2c_master_async_address_response+0xb0>)
     8b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	685b      	ldr	r3, [r3, #4]
     8b6:	22c0      	movs	r2, #192	; 0xc0
     8b8:	0292      	lsls	r2, r2, #10
     8ba:	431a      	orrs	r2, r3
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	8b9b      	ldrh	r3, [r3, #28]
     8c4:	b29a      	uxth	r2, r3
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     8ca:	687b      	ldr	r3, [r7, #4]
     8cc:	2225      	movs	r2, #37	; 0x25
     8ce:	5c9b      	ldrb	r3, [r3, r2]
     8d0:	b2db      	uxtb	r3, r3
     8d2:	2b05      	cmp	r3, #5
     8d4:	d10e      	bne.n	8f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     8d6:	687b      	ldr	r3, [r7, #4]
     8d8:	2224      	movs	r2, #36	; 0x24
     8da:	5c9b      	ldrb	r3, [r3, r2]
     8dc:	b2db      	uxtb	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	d104      	bne.n	8ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
     8e2:	687b      	ldr	r3, [r7, #4]
     8e4:	0018      	movs	r0, r3
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <_i2c_master_async_address_response+0xb4>)
     8e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
     8ea:	e003      	b.n	8f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	0018      	movs	r0, r3
     8f0:	4b04      	ldr	r3, [pc, #16]	; (904 <_i2c_master_async_address_response+0xb8>)
     8f2:	4798      	blx	r3
}
     8f4:	46c0      	nop			; (mov r8, r8)
     8f6:	46bd      	mov	sp, r7
     8f8:	b004      	add	sp, #16
     8fa:	bd80      	pop	{r7, pc}
     8fc:	000006bd 	.word	0x000006bd
     900:	000007d1 	.word	0x000007d1
     904:	000006e1 	.word	0x000006e1

00000908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
     908:	b580      	push	{r7, lr}
     90a:	b084      	sub	sp, #16
     90c:	af00      	add	r7, sp, #0
     90e:	60f8      	str	r0, [r7, #12]
     910:	60b9      	str	r1, [r7, #8]
     912:	1dfb      	adds	r3, r7, #7
     914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
     916:	1dfb      	adds	r3, r7, #7
     918:	781b      	ldrb	r3, [r3, #0]
     91a:	68fa      	ldr	r2, [r7, #12]
     91c:	3302      	adds	r3, #2
     91e:	009b      	lsls	r3, r3, #2
     920:	18d3      	adds	r3, r2, r3
     922:	3304      	adds	r3, #4
     924:	68ba      	ldr	r2, [r7, #8]
     926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
     928:	68fb      	ldr	r3, [r7, #12]
     92a:	7e1b      	ldrb	r3, [r3, #24]
     92c:	b2db      	uxtb	r3, r3
     92e:	b25a      	sxtb	r2, r3
     930:	1dfb      	adds	r3, r7, #7
     932:	781b      	ldrb	r3, [r3, #0]
     934:	2101      	movs	r1, #1
     936:	4099      	lsls	r1, r3
     938:	000b      	movs	r3, r1
     93a:	b25b      	sxtb	r3, r3
     93c:	4313      	orrs	r3, r2
     93e:	b25b      	sxtb	r3, r3
     940:	b2da      	uxtb	r2, r3
     942:	68fb      	ldr	r3, [r7, #12]
     944:	761a      	strb	r2, [r3, #24]
}
     946:	46c0      	nop			; (mov r8, r8)
     948:	46bd      	mov	sp, r7
     94a:	b004      	add	sp, #16
     94c:	bd80      	pop	{r7, pc}
	...

00000950 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     950:	b580      	push	{r7, lr}
     952:	b084      	sub	sp, #16
     954:	af00      	add	r7, sp, #0
     956:	6078      	str	r0, [r7, #4]
     958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     960:	683b      	ldr	r3, [r7, #0]
     962:	7a5b      	ldrb	r3, [r3, #9]
     964:	2b00      	cmp	r3, #0
     966:	d006      	beq.n	976 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     968:	683b      	ldr	r3, [r7, #0]
     96a:	7a9a      	ldrb	r2, [r3, #10]
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	0011      	movs	r1, r2
     970:	0018      	movs	r0, r3
     972:	4b1e      	ldr	r3, [pc, #120]	; (9ec <_i2c_master_write_packet+0x9c>)
     974:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     976:	68fb      	ldr	r3, [r7, #12]
     978:	685b      	ldr	r3, [r3, #4]
     97a:	4a1d      	ldr	r2, [pc, #116]	; (9f0 <_i2c_master_write_packet+0xa0>)
     97c:	401a      	ands	r2, r3
     97e:	68fb      	ldr	r3, [r7, #12]
     980:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     982:	683b      	ldr	r3, [r7, #0]
     984:	685a      	ldr	r2, [r3, #4]
     986:	687b      	ldr	r3, [r7, #4]
     988:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     98a:	683b      	ldr	r3, [r7, #0]
     98c:	885a      	ldrh	r2, [r3, #2]
     98e:	687b      	ldr	r3, [r7, #4]
     990:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     992:	687b      	ldr	r3, [r7, #4]
     994:	2224      	movs	r2, #36	; 0x24
     996:	2100      	movs	r1, #0
     998:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	2225      	movs	r2, #37	; 0x25
     99e:	2105      	movs	r1, #5
     9a0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	2203      	movs	r2, #3
     9a6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     9a8:	683b      	ldr	r3, [r7, #0]
     9aa:	7a1b      	ldrb	r3, [r3, #8]
     9ac:	2b00      	cmp	r3, #0
     9ae:	d00d      	beq.n	9cc <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9b0:	683b      	ldr	r3, [r7, #0]
     9b2:	881b      	ldrh	r3, [r3, #0]
     9b4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9b6:	683b      	ldr	r3, [r7, #0]
     9b8:	7a5b      	ldrb	r3, [r3, #9]
     9ba:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9bc:	4313      	orrs	r3, r2
     9be:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9c0:	2380      	movs	r3, #128	; 0x80
     9c2:	021b      	lsls	r3, r3, #8
     9c4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	625a      	str	r2, [r3, #36]	; 0x24
     9ca:	e009      	b.n	9e0 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9cc:	683b      	ldr	r3, [r7, #0]
     9ce:	881b      	ldrh	r3, [r3, #0]
     9d0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     9d2:	683b      	ldr	r3, [r7, #0]
     9d4:	7a5b      	ldrb	r3, [r3, #9]
     9d6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9d8:	4313      	orrs	r3, r2
     9da:	001a      	movs	r2, r3
     9dc:	68fb      	ldr	r3, [r7, #12]
     9de:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     9e0:	2300      	movs	r3, #0
}
     9e2:	0018      	movs	r0, r3
     9e4:	46bd      	mov	sp, r7
     9e6:	b004      	add	sp, #16
     9e8:	bd80      	pop	{r7, pc}
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	000038b9 	.word	0x000038b9
     9f0:	fffbffff 	.word	0xfffbffff

000009f4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     9f4:	b580      	push	{r7, lr}
     9f6:	b082      	sub	sp, #8
     9f8:	af00      	add	r7, sp, #0
     9fa:	6078      	str	r0, [r7, #4]
     9fc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     9fe:	687b      	ldr	r3, [r7, #4]
     a00:	8b9b      	ldrh	r3, [r3, #28]
     a02:	b29b      	uxth	r3, r3
     a04:	2b00      	cmp	r3, #0
     a06:	d001      	beq.n	a0c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
     a08:	2305      	movs	r3, #5
     a0a:	e00c      	b.n	a26 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	2201      	movs	r2, #1
     a10:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     a12:	687b      	ldr	r3, [r7, #4]
     a14:	2201      	movs	r2, #1
     a16:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
     a18:	683a      	ldr	r2, [r7, #0]
     a1a:	687b      	ldr	r3, [r7, #4]
     a1c:	0011      	movs	r1, r2
     a1e:	0018      	movs	r0, r3
     a20:	4b03      	ldr	r3, [pc, #12]	; (a30 <i2c_master_write_packet_job+0x3c>)
     a22:	4798      	blx	r3
     a24:	0003      	movs	r3, r0
}
     a26:	0018      	movs	r0, r3
     a28:	46bd      	mov	sp, r7
     a2a:	b002      	add	sp, #8
     a2c:	bd80      	pop	{r7, pc}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	00000951 	.word	0x00000951

00000a34 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     a34:	b580      	push	{r7, lr}
     a36:	b086      	sub	sp, #24
     a38:	af00      	add	r7, sp, #0
     a3a:	0002      	movs	r2, r0
     a3c:	1dfb      	adds	r3, r7, #7
     a3e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
     a40:	1dfb      	adds	r3, r7, #7
     a42:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
     a44:	4b93      	ldr	r3, [pc, #588]	; (c94 <_i2c_master_interrupt_handler+0x260>)
     a46:	0092      	lsls	r2, r2, #2
     a48:	58d3      	ldr	r3, [r2, r3]
     a4a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a4c:	697b      	ldr	r3, [r7, #20]
     a4e:	681b      	ldr	r3, [r3, #0]
     a50:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     a52:	693b      	ldr	r3, [r7, #16]
     a54:	681b      	ldr	r3, [r3, #0]
     a56:	011b      	lsls	r3, r3, #4
     a58:	0fdb      	lsrs	r3, r3, #31
     a5a:	b2db      	uxtb	r3, r3
     a5c:	001a      	movs	r2, r3
     a5e:	230f      	movs	r3, #15
     a60:	18fb      	adds	r3, r7, r3
     a62:	1e51      	subs	r1, r2, #1
     a64:	418a      	sbcs	r2, r1
     a66:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     a68:	230e      	movs	r3, #14
     a6a:	18fb      	adds	r3, r7, r3
     a6c:	697a      	ldr	r2, [r7, #20]
     a6e:	7e52      	ldrb	r2, [r2, #25]
     a70:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     a72:	697b      	ldr	r3, [r7, #20]
     a74:	7e1b      	ldrb	r3, [r3, #24]
     a76:	b2da      	uxtb	r2, r3
     a78:	230e      	movs	r3, #14
     a7a:	18fb      	adds	r3, r7, r3
     a7c:	210e      	movs	r1, #14
     a7e:	1879      	adds	r1, r7, r1
     a80:	7809      	ldrb	r1, [r1, #0]
     a82:	400a      	ands	r2, r1
     a84:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     a86:	697b      	ldr	r3, [r7, #20]
     a88:	8b5b      	ldrh	r3, [r3, #26]
     a8a:	b29b      	uxth	r3, r3
     a8c:	2b00      	cmp	r3, #0
     a8e:	d109      	bne.n	aa4 <_i2c_master_interrupt_handler+0x70>
     a90:	697b      	ldr	r3, [r7, #20]
     a92:	8b9b      	ldrh	r3, [r3, #28]
     a94:	b29b      	uxth	r3, r3
     a96:	2b00      	cmp	r3, #0
     a98:	d004      	beq.n	aa4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
     a9a:	697b      	ldr	r3, [r7, #20]
     a9c:	0018      	movs	r0, r3
     a9e:	4b7e      	ldr	r3, [pc, #504]	; (c98 <_i2c_master_interrupt_handler+0x264>)
     aa0:	4798      	blx	r3
     aa2:	e070      	b.n	b86 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     aa4:	697b      	ldr	r3, [r7, #20]
     aa6:	8b5b      	ldrh	r3, [r3, #26]
     aa8:	b29b      	uxth	r3, r3
     aaa:	2b00      	cmp	r3, #0
     aac:	d039      	beq.n	b22 <_i2c_master_interrupt_handler+0xee>
     aae:	697b      	ldr	r3, [r7, #20]
     ab0:	8b9b      	ldrh	r3, [r3, #28]
     ab2:	b29b      	uxth	r3, r3
     ab4:	2b00      	cmp	r3, #0
     ab6:	d134      	bne.n	b22 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
     ab8:	697b      	ldr	r3, [r7, #20]
     aba:	2225      	movs	r2, #37	; 0x25
     abc:	5c9b      	ldrb	r3, [r3, r2]
     abe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     ac0:	2b05      	cmp	r3, #5
     ac2:	d12e      	bne.n	b22 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     ac4:	697b      	ldr	r3, [r7, #20]
     ac6:	2224      	movs	r2, #36	; 0x24
     ac8:	5c9b      	ldrb	r3, [r3, r2]
     aca:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
     acc:	2b00      	cmp	r3, #0
     ace:	d128      	bne.n	b22 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     ad0:	693b      	ldr	r3, [r7, #16]
     ad2:	2203      	movs	r2, #3
     ad4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     ad6:	697b      	ldr	r3, [r7, #20]
     ad8:	2200      	movs	r2, #0
     ada:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
     adc:	697b      	ldr	r3, [r7, #20]
     ade:	2225      	movs	r2, #37	; 0x25
     ae0:	2100      	movs	r1, #0
     ae2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
     ae4:	697b      	ldr	r3, [r7, #20]
     ae6:	7a9b      	ldrb	r3, [r3, #10]
     ae8:	2b00      	cmp	r3, #0
     aea:	d00b      	beq.n	b04 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     aec:	697b      	ldr	r3, [r7, #20]
     aee:	0018      	movs	r0, r3
     af0:	4b6a      	ldr	r3, [pc, #424]	; (c9c <_i2c_master_interrupt_handler+0x268>)
     af2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     af4:	693b      	ldr	r3, [r7, #16]
     af6:	685b      	ldr	r3, [r3, #4]
     af8:	22c0      	movs	r2, #192	; 0xc0
     afa:	0292      	lsls	r2, r2, #10
     afc:	431a      	orrs	r2, r3
     afe:	693b      	ldr	r3, [r7, #16]
     b00:	605a      	str	r2, [r3, #4]
     b02:	e002      	b.n	b0a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     b04:	693b      	ldr	r3, [r7, #16]
     b06:	2201      	movs	r2, #1
     b08:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     b0a:	230e      	movs	r3, #14
     b0c:	18fb      	adds	r3, r7, r3
     b0e:	781b      	ldrb	r3, [r3, #0]
     b10:	2201      	movs	r2, #1
     b12:	4013      	ands	r3, r2
     b14:	d037      	beq.n	b86 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     b16:	697b      	ldr	r3, [r7, #20]
     b18:	68db      	ldr	r3, [r3, #12]
     b1a:	697a      	ldr	r2, [r7, #20]
     b1c:	0010      	movs	r0, r2
     b1e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     b20:	e031      	b.n	b86 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     b22:	697b      	ldr	r3, [r7, #20]
     b24:	8b5b      	ldrh	r3, [r3, #26]
     b26:	b29b      	uxth	r3, r3
     b28:	2b00      	cmp	r3, #0
     b2a:	d02c      	beq.n	b86 <_i2c_master_interrupt_handler+0x152>
     b2c:	697b      	ldr	r3, [r7, #20]
     b2e:	8b9b      	ldrh	r3, [r3, #28]
     b30:	b29b      	uxth	r3, r3
     b32:	2b00      	cmp	r3, #0
     b34:	d027      	beq.n	b86 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     b36:	693b      	ldr	r3, [r7, #16]
     b38:	8b5b      	ldrh	r3, [r3, #26]
     b3a:	b29b      	uxth	r3, r3
     b3c:	001a      	movs	r2, r3
     b3e:	2320      	movs	r3, #32
     b40:	4013      	ands	r3, r2
     b42:	d111      	bne.n	b68 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     b44:	230f      	movs	r3, #15
     b46:	18fb      	adds	r3, r7, r3
     b48:	781b      	ldrb	r3, [r3, #0]
     b4a:	2201      	movs	r2, #1
     b4c:	4053      	eors	r3, r2
     b4e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     b50:	2b00      	cmp	r3, #0
     b52:	d104      	bne.n	b5e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     b54:	697b      	ldr	r3, [r7, #20]
     b56:	8b9b      	ldrh	r3, [r3, #28]
     b58:	b29b      	uxth	r3, r3
     b5a:	2b01      	cmp	r3, #1
     b5c:	d004      	beq.n	b68 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
     b5e:	697b      	ldr	r3, [r7, #20]
     b60:	2225      	movs	r2, #37	; 0x25
     b62:	2141      	movs	r1, #65	; 0x41
     b64:	5499      	strb	r1, [r3, r2]
     b66:	e00e      	b.n	b86 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     b68:	697b      	ldr	r3, [r7, #20]
     b6a:	2224      	movs	r2, #36	; 0x24
     b6c:	5c9b      	ldrb	r3, [r3, r2]
     b6e:	b2db      	uxtb	r3, r3
     b70:	2b00      	cmp	r3, #0
     b72:	d104      	bne.n	b7e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
     b74:	697b      	ldr	r3, [r7, #20]
     b76:	0018      	movs	r0, r3
     b78:	4b49      	ldr	r3, [pc, #292]	; (ca0 <_i2c_master_interrupt_handler+0x26c>)
     b7a:	4798      	blx	r3
     b7c:	e003      	b.n	b86 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
     b7e:	697b      	ldr	r3, [r7, #20]
     b80:	0018      	movs	r0, r3
     b82:	4b48      	ldr	r3, [pc, #288]	; (ca4 <_i2c_master_interrupt_handler+0x270>)
     b84:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     b86:	697b      	ldr	r3, [r7, #20]
     b88:	8b5b      	ldrh	r3, [r3, #26]
     b8a:	b29b      	uxth	r3, r3
     b8c:	2b00      	cmp	r3, #0
     b8e:	d047      	beq.n	c20 <_i2c_master_interrupt_handler+0x1ec>
     b90:	697b      	ldr	r3, [r7, #20]
     b92:	8b9b      	ldrh	r3, [r3, #28]
     b94:	b29b      	uxth	r3, r3
     b96:	2b00      	cmp	r3, #0
     b98:	d142      	bne.n	c20 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
     b9a:	697b      	ldr	r3, [r7, #20]
     b9c:	2225      	movs	r2, #37	; 0x25
     b9e:	5c9b      	ldrb	r3, [r3, r2]
     ba0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     ba2:	2b05      	cmp	r3, #5
     ba4:	d13c      	bne.n	c20 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     ba6:	697b      	ldr	r3, [r7, #20]
     ba8:	2224      	movs	r2, #36	; 0x24
     baa:	5c9b      	ldrb	r3, [r3, r2]
     bac:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
     bae:	2b01      	cmp	r3, #1
     bb0:	d136      	bne.n	c20 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     bb2:	693b      	ldr	r3, [r7, #16]
     bb4:	7e1b      	ldrb	r3, [r3, #24]
     bb6:	b2db      	uxtb	r3, r3
     bb8:	001a      	movs	r2, r3
     bba:	2302      	movs	r3, #2
     bbc:	4013      	ands	r3, r2
     bbe:	d002      	beq.n	bc6 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     bc0:	693b      	ldr	r3, [r7, #16]
     bc2:	2202      	movs	r2, #2
     bc4:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     bc6:	693b      	ldr	r3, [r7, #16]
     bc8:	2203      	movs	r2, #3
     bca:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     bcc:	697b      	ldr	r3, [r7, #20]
     bce:	2200      	movs	r2, #0
     bd0:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
     bd2:	697b      	ldr	r3, [r7, #20]
     bd4:	2225      	movs	r2, #37	; 0x25
     bd6:	2100      	movs	r1, #0
     bd8:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     bda:	230e      	movs	r3, #14
     bdc:	18fb      	adds	r3, r7, r3
     bde:	781b      	ldrb	r3, [r3, #0]
     be0:	2202      	movs	r2, #2
     be2:	4013      	ands	r3, r2
     be4:	d00b      	beq.n	bfe <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     be6:	697b      	ldr	r3, [r7, #20]
     be8:	2224      	movs	r2, #36	; 0x24
     bea:	5c9b      	ldrb	r3, [r3, r2]
     bec:	b2db      	uxtb	r3, r3
     bee:	2b01      	cmp	r3, #1
     bf0:	d105      	bne.n	bfe <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     bf2:	697b      	ldr	r3, [r7, #20]
     bf4:	691b      	ldr	r3, [r3, #16]
     bf6:	697a      	ldr	r2, [r7, #20]
     bf8:	0010      	movs	r0, r2
     bfa:	4798      	blx	r3
     bfc:	e010      	b.n	c20 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     bfe:	230e      	movs	r3, #14
     c00:	18fb      	adds	r3, r7, r3
     c02:	781b      	ldrb	r3, [r3, #0]
     c04:	2201      	movs	r2, #1
     c06:	4013      	ands	r3, r2
     c08:	d00a      	beq.n	c20 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     c0a:	697b      	ldr	r3, [r7, #20]
     c0c:	2224      	movs	r2, #36	; 0x24
     c0e:	5c9b      	ldrb	r3, [r3, r2]
     c10:	b2db      	uxtb	r3, r3
     c12:	2b00      	cmp	r3, #0
     c14:	d104      	bne.n	c20 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     c16:	697b      	ldr	r3, [r7, #20]
     c18:	68db      	ldr	r3, [r3, #12]
     c1a:	697a      	ldr	r2, [r7, #20]
     c1c:	0010      	movs	r0, r2
     c1e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     c20:	697b      	ldr	r3, [r7, #20]
     c22:	2225      	movs	r2, #37	; 0x25
     c24:	5c9b      	ldrb	r3, [r3, r2]
     c26:	b2db      	uxtb	r3, r3
     c28:	2b05      	cmp	r3, #5
     c2a:	d02e      	beq.n	c8a <_i2c_master_interrupt_handler+0x256>
     c2c:	697b      	ldr	r3, [r7, #20]
     c2e:	2225      	movs	r2, #37	; 0x25
     c30:	5c9b      	ldrb	r3, [r3, r2]
     c32:	b2db      	uxtb	r3, r3
     c34:	2b00      	cmp	r3, #0
     c36:	d028      	beq.n	c8a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     c38:	693b      	ldr	r3, [r7, #16]
     c3a:	2203      	movs	r2, #3
     c3c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     c3e:	697b      	ldr	r3, [r7, #20]
     c40:	2200      	movs	r2, #0
     c42:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
     c44:	697b      	ldr	r3, [r7, #20]
     c46:	2200      	movs	r2, #0
     c48:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     c4a:	697b      	ldr	r3, [r7, #20]
     c4c:	2225      	movs	r2, #37	; 0x25
     c4e:	5c9b      	ldrb	r3, [r3, r2]
     c50:	b2db      	uxtb	r3, r3
     c52:	2b41      	cmp	r3, #65	; 0x41
     c54:	d00e      	beq.n	c74 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
     c56:	697b      	ldr	r3, [r7, #20]
     c58:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     c5a:	2b00      	cmp	r3, #0
     c5c:	d00a      	beq.n	c74 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
     c5e:	697b      	ldr	r3, [r7, #20]
     c60:	0018      	movs	r0, r3
     c62:	4b0e      	ldr	r3, [pc, #56]	; (c9c <_i2c_master_interrupt_handler+0x268>)
     c64:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     c66:	693b      	ldr	r3, [r7, #16]
     c68:	685b      	ldr	r3, [r3, #4]
     c6a:	22e0      	movs	r2, #224	; 0xe0
     c6c:	02d2      	lsls	r2, r2, #11
     c6e:	431a      	orrs	r2, r3
     c70:	693b      	ldr	r3, [r7, #16]
     c72:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     c74:	230e      	movs	r3, #14
     c76:	18fb      	adds	r3, r7, r3
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	2204      	movs	r2, #4
     c7c:	4013      	ands	r3, r2
     c7e:	d004      	beq.n	c8a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     c80:	697b      	ldr	r3, [r7, #20]
     c82:	695b      	ldr	r3, [r3, #20]
     c84:	697a      	ldr	r2, [r7, #20]
     c86:	0010      	movs	r0, r2
     c88:	4798      	blx	r3
		}
	}
}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	46bd      	mov	sp, r7
     c8e:	b006      	add	sp, #24
     c90:	bd80      	pop	{r7, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	20005588 	.word	0x20005588
     c98:	0000084d 	.word	0x0000084d
     c9c:	000006bd 	.word	0x000006bd
     ca0:	000007d1 	.word	0x000007d1
     ca4:	000006e1 	.word	0x000006e1

00000ca8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
     ca8:	b580      	push	{r7, lr}
     caa:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     cac:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     cb0:	4b02      	ldr	r3, [pc, #8]	; (cbc <NVIC_SystemReset+0x14>)
     cb2:	4a03      	ldr	r2, [pc, #12]	; (cc0 <NVIC_SystemReset+0x18>)
     cb4:	60da      	str	r2, [r3, #12]
     cb6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
     cba:	e7fe      	b.n	cba <NVIC_SystemReset+0x12>
     cbc:	e000ed00 	.word	0xe000ed00
     cc0:	05fa0004 	.word	0x05fa0004

00000cc4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
     cc4:	b580      	push	{r7, lr}
     cc6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
     cc8:	4b02      	ldr	r3, [pc, #8]	; (cd4 <system_reset+0x10>)
     cca:	4798      	blx	r3
}
     ccc:	46c0      	nop			; (mov r8, r8)
     cce:	46bd      	mov	sp, r7
     cd0:	bd80      	pop	{r7, pc}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	00000ca9 	.word	0x00000ca9

00000cd8 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
     cd8:	b580      	push	{r7, lr}
     cda:	b086      	sub	sp, #24
     cdc:	af00      	add	r7, sp, #0
     cde:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
     ce0:	4b98      	ldr	r3, [pc, #608]	; (f44 <vCommandConsoleTask+0x26c>)
     ce2:	0018      	movs	r0, r3
     ce4:	4b98      	ldr	r3, [pc, #608]	; (f48 <vCommandConsoleTask+0x270>)
     ce6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
     ce8:	4b98      	ldr	r3, [pc, #608]	; (f4c <vCommandConsoleTask+0x274>)
     cea:	0018      	movs	r0, r3
     cec:	4b96      	ldr	r3, [pc, #600]	; (f48 <vCommandConsoleTask+0x270>)
     cee:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
     cf0:	4b97      	ldr	r3, [pc, #604]	; (f50 <vCommandConsoleTask+0x278>)
     cf2:	0018      	movs	r0, r3
     cf4:	4b94      	ldr	r3, [pc, #592]	; (f48 <vCommandConsoleTask+0x270>)
     cf6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xI2cScan);
     cf8:	4b96      	ldr	r3, [pc, #600]	; (f54 <vCommandConsoleTask+0x27c>)
     cfa:	0018      	movs	r0, r3
     cfc:	4b92      	ldr	r3, [pc, #584]	; (f48 <vCommandConsoleTask+0x270>)
     cfe:	4798      	blx	r3
	// New Command registrations for version ans ticks
	FreeRTOS_CLIRegisterCommand(&xVersionCommand);
     d00:	4b95      	ldr	r3, [pc, #596]	; (f58 <vCommandConsoleTask+0x280>)
     d02:	0018      	movs	r0, r3
     d04:	4b90      	ldr	r3, [pc, #576]	; (f48 <vCommandConsoleTask+0x270>)
     d06:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xTicksCommand);
     d08:	4b94      	ldr	r3, [pc, #592]	; (f5c <vCommandConsoleTask+0x284>)
     d0a:	0018      	movs	r0, r3
     d0c:	4b8e      	ldr	r3, [pc, #568]	; (f48 <vCommandConsoleTask+0x270>)
     d0e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
     d10:	2317      	movs	r3, #23
     d12:	18fb      	adds	r3, r7, r3
     d14:	2200      	movs	r2, #0
     d16:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
     d18:	4b91      	ldr	r3, [pc, #580]	; (f60 <vCommandConsoleTask+0x288>)
     d1a:	0018      	movs	r0, r3
     d1c:	4b91      	ldr	r3, [pc, #580]	; (f64 <vCommandConsoleTask+0x28c>)
     d1e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
     d20:	2203      	movs	r2, #3
     d22:	2100      	movs	r1, #0
     d24:	2001      	movs	r0, #1
     d26:	4b90      	ldr	r3, [pc, #576]	; (f68 <vCommandConsoleTask+0x290>)
     d28:	4798      	blx	r3
     d2a:	0002      	movs	r2, r0
     d2c:	4b8f      	ldr	r3, [pc, #572]	; (f6c <vCommandConsoleTask+0x294>)
     d2e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
     d30:	4b8e      	ldr	r3, [pc, #568]	; (f6c <vCommandConsoleTask+0x294>)
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	2b00      	cmp	r3, #0
     d36:	d107      	bne.n	d48 <vCommandConsoleTask+0x70>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
     d38:	4b8d      	ldr	r3, [pc, #564]	; (f70 <vCommandConsoleTask+0x298>)
     d3a:	0019      	movs	r1, r3
     d3c:	2003      	movs	r0, #3
     d3e:	4b8d      	ldr	r3, [pc, #564]	; (f74 <vCommandConsoleTask+0x29c>)
     d40:	4798      	blx	r3
        vTaskSuspend(NULL);
     d42:	2000      	movs	r0, #0
     d44:	4b8c      	ldr	r3, [pc, #560]	; (f78 <vCommandConsoleTask+0x2a0>)
     d46:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
     d48:	230c      	movs	r3, #12
     d4a:	18fb      	adds	r3, r7, r3
     d4c:	0018      	movs	r0, r3
     d4e:	4b8b      	ldr	r3, [pc, #556]	; (f7c <vCommandConsoleTask+0x2a4>)
     d50:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
     d52:	230c      	movs	r3, #12
     d54:	18fb      	adds	r3, r7, r3
     d56:	781b      	ldrb	r3, [r3, #0]
     d58:	2b0a      	cmp	r3, #10
     d5a:	d004      	beq.n	d66 <vCommandConsoleTask+0x8e>
     d5c:	230c      	movs	r3, #12
     d5e:	18fb      	adds	r3, r7, r3
     d60:	781b      	ldrb	r3, [r3, #0]
     d62:	2b0d      	cmp	r3, #13
     d64:	d137      	bne.n	dd6 <vCommandConsoleTask+0xfe>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
     d66:	4b86      	ldr	r3, [pc, #536]	; (f80 <vCommandConsoleTask+0x2a8>)
     d68:	0018      	movs	r0, r3
     d6a:	4b7e      	ldr	r3, [pc, #504]	; (f64 <vCommandConsoleTask+0x28c>)
     d6c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
     d6e:	4b85      	ldr	r3, [pc, #532]	; (f84 <vCommandConsoleTask+0x2ac>)
     d70:	2200      	movs	r2, #0
     d72:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
     d74:	4b84      	ldr	r3, [pc, #528]	; (f88 <vCommandConsoleTask+0x2b0>)
     d76:	2200      	movs	r2, #0
     d78:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
     d7a:	4984      	ldr	r1, [pc, #528]	; (f8c <vCommandConsoleTask+0x2b4>)
     d7c:	4b84      	ldr	r3, [pc, #528]	; (f90 <vCommandConsoleTask+0x2b8>)
     d7e:	2231      	movs	r2, #49	; 0x31
     d80:	0018      	movs	r0, r3
     d82:	4b84      	ldr	r3, [pc, #528]	; (f94 <vCommandConsoleTask+0x2bc>)
     d84:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
     d86:	4b82      	ldr	r3, [pc, #520]	; (f90 <vCommandConsoleTask+0x2b8>)
     d88:	2231      	movs	r2, #49	; 0x31
     d8a:	2100      	movs	r1, #0
     d8c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
     d8e:	4982      	ldr	r1, [pc, #520]	; (f98 <vCommandConsoleTask+0x2c0>)
     d90:	4b7e      	ldr	r3, [pc, #504]	; (f8c <vCommandConsoleTask+0x2b4>)
     d92:	2264      	movs	r2, #100	; 0x64
     d94:	0018      	movs	r0, r3
     d96:	4b81      	ldr	r3, [pc, #516]	; (f9c <vCommandConsoleTask+0x2c4>)
     d98:	4798      	blx	r3
     d9a:	0003      	movs	r3, r0
     d9c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
     d9e:	4b7e      	ldr	r3, [pc, #504]	; (f98 <vCommandConsoleTask+0x2c0>)
     da0:	2263      	movs	r2, #99	; 0x63
     da2:	2100      	movs	r1, #0
     da4:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
     da6:	4b7c      	ldr	r3, [pc, #496]	; (f98 <vCommandConsoleTask+0x2c0>)
     da8:	0018      	movs	r0, r3
     daa:	4b6e      	ldr	r3, [pc, #440]	; (f64 <vCommandConsoleTask+0x28c>)
     dac:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
     dae:	693b      	ldr	r3, [r7, #16]
     db0:	2b00      	cmp	r3, #0
     db2:	d1ec      	bne.n	d8e <vCommandConsoleTask+0xb6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
     db4:	2317      	movs	r3, #23
     db6:	18fb      	adds	r3, r7, r3
     db8:	2200      	movs	r2, #0
     dba:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
     dbc:	4b73      	ldr	r3, [pc, #460]	; (f8c <vCommandConsoleTask+0x2b4>)
     dbe:	2232      	movs	r2, #50	; 0x32
     dc0:	2100      	movs	r1, #0
     dc2:	0018      	movs	r0, r3
     dc4:	4b76      	ldr	r3, [pc, #472]	; (fa0 <vCommandConsoleTask+0x2c8>)
     dc6:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
     dc8:	4b73      	ldr	r3, [pc, #460]	; (f98 <vCommandConsoleTask+0x2c0>)
     dca:	2264      	movs	r2, #100	; 0x64
     dcc:	2100      	movs	r1, #0
     dce:	0018      	movs	r0, r3
     dd0:	4b73      	ldr	r3, [pc, #460]	; (fa0 <vCommandConsoleTask+0x2c8>)
     dd2:	4798      	blx	r3
     dd4:	e0b5      	b.n	f42 <vCommandConsoleTask+0x26a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
     dd6:	4b6b      	ldr	r3, [pc, #428]	; (f84 <vCommandConsoleTask+0x2ac>)
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	2b00      	cmp	r3, #0
     ddc:	d059      	beq.n	e92 <vCommandConsoleTask+0x1ba>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
     dde:	4b6a      	ldr	r3, [pc, #424]	; (f88 <vCommandConsoleTask+0x2b0>)
     de0:	781b      	ldrb	r3, [r3, #0]
     de2:	2b03      	cmp	r3, #3
     de4:	d80c      	bhi.n	e00 <vCommandConsoleTask+0x128>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
     de6:	4b68      	ldr	r3, [pc, #416]	; (f88 <vCommandConsoleTask+0x2b0>)
     de8:	781b      	ldrb	r3, [r3, #0]
     dea:	1c5a      	adds	r2, r3, #1
     dec:	b2d1      	uxtb	r1, r2
     dee:	4a66      	ldr	r2, [pc, #408]	; (f88 <vCommandConsoleTask+0x2b0>)
     df0:	7011      	strb	r1, [r2, #0]
     df2:	001a      	movs	r2, r3
     df4:	230c      	movs	r3, #12
     df6:	18fb      	adds	r3, r7, r3
     df8:	7819      	ldrb	r1, [r3, #0]
     dfa:	4b6a      	ldr	r3, [pc, #424]	; (fa4 <vCommandConsoleTask+0x2cc>)
     dfc:	5499      	strb	r1, [r3, r2]
     dfe:	e005      	b.n	e0c <vCommandConsoleTask+0x134>
                } else {
                    isEscapeCode = false;
     e00:	4b60      	ldr	r3, [pc, #384]	; (f84 <vCommandConsoleTask+0x2ac>)
     e02:	2200      	movs	r2, #0
     e04:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
     e06:	4b60      	ldr	r3, [pc, #384]	; (f88 <vCommandConsoleTask+0x2b0>)
     e08:	2200      	movs	r2, #0
     e0a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
     e0c:	4b5e      	ldr	r3, [pc, #376]	; (f88 <vCommandConsoleTask+0x2b0>)
     e0e:	781b      	ldrb	r3, [r3, #0]
     e10:	2b01      	cmp	r3, #1
     e12:	d999      	bls.n	d48 <vCommandConsoleTask+0x70>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
     e14:	4a64      	ldr	r2, [pc, #400]	; (fa8 <vCommandConsoleTask+0x2d0>)
     e16:	4b63      	ldr	r3, [pc, #396]	; (fa4 <vCommandConsoleTask+0x2cc>)
     e18:	0011      	movs	r1, r2
     e1a:	0018      	movs	r0, r3
     e1c:	4b63      	ldr	r3, [pc, #396]	; (fac <vCommandConsoleTask+0x2d4>)
     e1e:	4798      	blx	r3
     e20:	1e03      	subs	r3, r0, #0
     e22:	d02f      	beq.n	e84 <vCommandConsoleTask+0x1ac>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
     e24:	4962      	ldr	r1, [pc, #392]	; (fb0 <vCommandConsoleTask+0x2d8>)
     e26:	4b59      	ldr	r3, [pc, #356]	; (f8c <vCommandConsoleTask+0x2b4>)
     e28:	221b      	movs	r2, #27
     e2a:	0018      	movs	r0, r3
     e2c:	4b61      	ldr	r3, [pc, #388]	; (fb4 <vCommandConsoleTask+0x2dc>)
     e2e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
     e30:	4b56      	ldr	r3, [pc, #344]	; (f8c <vCommandConsoleTask+0x2b4>)
     e32:	0018      	movs	r0, r3
     e34:	4b4b      	ldr	r3, [pc, #300]	; (f64 <vCommandConsoleTask+0x28c>)
     e36:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
     e38:	2317      	movs	r3, #23
     e3a:	18fb      	adds	r3, r7, r3
     e3c:	2200      	movs	r2, #0
     e3e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
     e40:	4b52      	ldr	r3, [pc, #328]	; (f8c <vCommandConsoleTask+0x2b4>)
     e42:	2232      	movs	r2, #50	; 0x32
     e44:	2100      	movs	r1, #0
     e46:	0018      	movs	r0, r3
     e48:	4b55      	ldr	r3, [pc, #340]	; (fa0 <vCommandConsoleTask+0x2c8>)
     e4a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
     e4c:	4950      	ldr	r1, [pc, #320]	; (f90 <vCommandConsoleTask+0x2b8>)
     e4e:	4b4f      	ldr	r3, [pc, #316]	; (f8c <vCommandConsoleTask+0x2b4>)
     e50:	2231      	movs	r2, #49	; 0x31
     e52:	0018      	movs	r0, r3
     e54:	4b4f      	ldr	r3, [pc, #316]	; (f94 <vCommandConsoleTask+0x2bc>)
     e56:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
     e58:	4b4c      	ldr	r3, [pc, #304]	; (f8c <vCommandConsoleTask+0x2b4>)
     e5a:	0018      	movs	r0, r3
     e5c:	4b56      	ldr	r3, [pc, #344]	; (fb8 <vCommandConsoleTask+0x2e0>)
     e5e:	4798      	blx	r3
     e60:	0003      	movs	r3, r0
     e62:	2b30      	cmp	r3, #48	; 0x30
     e64:	d806      	bhi.n	e74 <vCommandConsoleTask+0x19c>
     e66:	4b4a      	ldr	r3, [pc, #296]	; (f90 <vCommandConsoleTask+0x2b8>)
     e68:	0018      	movs	r0, r3
     e6a:	4b53      	ldr	r3, [pc, #332]	; (fb8 <vCommandConsoleTask+0x2e0>)
     e6c:	4798      	blx	r3
     e6e:	0003      	movs	r3, r0
     e70:	b2da      	uxtb	r2, r3
     e72:	e000      	b.n	e76 <vCommandConsoleTask+0x19e>
     e74:	2231      	movs	r2, #49	; 0x31
     e76:	2317      	movs	r3, #23
     e78:	18fb      	adds	r3, r7, r3
     e7a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
     e7c:	4b43      	ldr	r3, [pc, #268]	; (f8c <vCommandConsoleTask+0x2b4>)
     e7e:	0018      	movs	r0, r3
     e80:	4b38      	ldr	r3, [pc, #224]	; (f64 <vCommandConsoleTask+0x28c>)
     e82:	4798      	blx	r3
                    }

                    isEscapeCode = false;
     e84:	4b3f      	ldr	r3, [pc, #252]	; (f84 <vCommandConsoleTask+0x2ac>)
     e86:	2200      	movs	r2, #0
     e88:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
     e8a:	4b3f      	ldr	r3, [pc, #252]	; (f88 <vCommandConsoleTask+0x2b0>)
     e8c:	2200      	movs	r2, #0
     e8e:	701a      	strb	r2, [r3, #0]
     e90:	e75a      	b.n	d48 <vCommandConsoleTask+0x70>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
     e92:	230c      	movs	r3, #12
     e94:	18fb      	adds	r3, r7, r3
     e96:	781b      	ldrb	r3, [r3, #0]
     e98:	2b0d      	cmp	r3, #13
     e9a:	d100      	bne.n	e9e <vCommandConsoleTask+0x1c6>
     e9c:	e754      	b.n	d48 <vCommandConsoleTask+0x70>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
     e9e:	230c      	movs	r3, #12
     ea0:	18fb      	adds	r3, r7, r3
     ea2:	781b      	ldrb	r3, [r3, #0]
     ea4:	2b08      	cmp	r3, #8
     ea6:	d004      	beq.n	eb2 <vCommandConsoleTask+0x1da>
     ea8:	230c      	movs	r3, #12
     eaa:	18fb      	adds	r3, r7, r3
     eac:	781b      	ldrb	r3, [r3, #0]
     eae:	2b7f      	cmp	r3, #127	; 0x7f
     eb0:	d11c      	bne.n	eec <vCommandConsoleTask+0x214>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
     eb2:	2308      	movs	r3, #8
     eb4:	18fb      	adds	r3, r7, r3
     eb6:	4a41      	ldr	r2, [pc, #260]	; (fbc <vCommandConsoleTask+0x2e4>)
     eb8:	6812      	ldr	r2, [r2, #0]
     eba:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
     ebc:	2308      	movs	r3, #8
     ebe:	18fb      	adds	r3, r7, r3
     ec0:	0018      	movs	r0, r3
     ec2:	4b28      	ldr	r3, [pc, #160]	; (f64 <vCommandConsoleTask+0x28c>)
     ec4:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
     ec6:	2317      	movs	r3, #23
     ec8:	18fb      	adds	r3, r7, r3
     eca:	781b      	ldrb	r3, [r3, #0]
     ecc:	2b00      	cmp	r3, #0
     ece:	d037      	beq.n	f40 <vCommandConsoleTask+0x268>
                    cInputIndex--;
     ed0:	2317      	movs	r3, #23
     ed2:	18fb      	adds	r3, r7, r3
     ed4:	781a      	ldrb	r2, [r3, #0]
     ed6:	2317      	movs	r3, #23
     ed8:	18fb      	adds	r3, r7, r3
     eda:	3a01      	subs	r2, #1
     edc:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
     ede:	2317      	movs	r3, #23
     ee0:	18fb      	adds	r3, r7, r3
     ee2:	781b      	ldrb	r3, [r3, #0]
     ee4:	4a29      	ldr	r2, [pc, #164]	; (f8c <vCommandConsoleTask+0x2b4>)
     ee6:	2100      	movs	r1, #0
     ee8:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
     eea:	e029      	b.n	f40 <vCommandConsoleTask+0x268>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
     eec:	230c      	movs	r3, #12
     eee:	18fb      	adds	r3, r7, r3
     ef0:	781b      	ldrb	r3, [r3, #0]
     ef2:	2b1b      	cmp	r3, #27
     ef4:	d106      	bne.n	f04 <vCommandConsoleTask+0x22c>
                isEscapeCode = true;  // Next characters will be code arguments
     ef6:	4b23      	ldr	r3, [pc, #140]	; (f84 <vCommandConsoleTask+0x2ac>)
     ef8:	2201      	movs	r2, #1
     efa:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
     efc:	4b22      	ldr	r3, [pc, #136]	; (f88 <vCommandConsoleTask+0x2b0>)
     efe:	2200      	movs	r2, #0
     f00:	701a      	strb	r2, [r3, #0]
     f02:	e721      	b.n	d48 <vCommandConsoleTask+0x70>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
     f04:	2317      	movs	r3, #23
     f06:	18fb      	adds	r3, r7, r3
     f08:	781b      	ldrb	r3, [r3, #0]
     f0a:	2b31      	cmp	r3, #49	; 0x31
     f0c:	d80e      	bhi.n	f2c <vCommandConsoleTask+0x254>
                    pcInputString[cInputIndex] = cRxedChar[0];
     f0e:	2317      	movs	r3, #23
     f10:	18fb      	adds	r3, r7, r3
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	220c      	movs	r2, #12
     f16:	18ba      	adds	r2, r7, r2
     f18:	7811      	ldrb	r1, [r2, #0]
     f1a:	4a1c      	ldr	r2, [pc, #112]	; (f8c <vCommandConsoleTask+0x2b4>)
     f1c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
     f1e:	2317      	movs	r3, #23
     f20:	18fb      	adds	r3, r7, r3
     f22:	781a      	ldrb	r2, [r3, #0]
     f24:	2317      	movs	r3, #23
     f26:	18fb      	adds	r3, r7, r3
     f28:	3201      	adds	r2, #1
     f2a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
     f2c:	230c      	movs	r3, #12
     f2e:	18fb      	adds	r3, r7, r3
     f30:	2200      	movs	r2, #0
     f32:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
     f34:	230c      	movs	r3, #12
     f36:	18fb      	adds	r3, r7, r3
     f38:	0018      	movs	r0, r3
     f3a:	4b0a      	ldr	r3, [pc, #40]	; (f64 <vCommandConsoleTask+0x28c>)
     f3c:	4798      	blx	r3
     f3e:	e703      	b.n	d48 <vCommandConsoleTask+0x70>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
     f40:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
     f42:	e701      	b.n	d48 <vCommandConsoleTask+0x70>
     f44:	00021714 	.word	0x00021714
     f48:	00003a01 	.word	0x00003a01
     f4c:	00021764 	.word	0x00021764
     f50:	00021724 	.word	0x00021724
     f54:	00021734 	.word	0x00021734
     f58:	00021744 	.word	0x00021744
     f5c:	00021754 	.word	0x00021754
     f60:	00021500 	.word	0x00021500
     f64:	00009929 	.word	0x00009929
     f68:	00005fc9 	.word	0x00005fc9
     f6c:	200041f0 	.word	0x200041f0
     f70:	0002165c 	.word	0x0002165c
     f74:	00009a15 	.word	0x00009a15
     f78:	00007db5 	.word	0x00007db5
     f7c:	00000fc1 	.word	0x00000fc1
     f80:	0002167c 	.word	0x0002167c
     f84:	20000384 	.word	0x20000384
     f88:	20000385 	.word	0x20000385
     f8c:	200003bc 	.word	0x200003bc
     f90:	20000388 	.word	0x20000388
     f94:	0002050b 	.word	0x0002050b
     f98:	200003f0 	.word	0x200003f0
     f9c:	00003a71 	.word	0x00003a71
     fa0:	00020123 	.word	0x00020123
     fa4:	20000454 	.word	0x20000454
     fa8:	00021680 	.word	0x00021680
     fac:	00020425 	.word	0x00020425
     fb0:	00021684 	.word	0x00021684
     fb4:	000203e1 	.word	0x000203e1
     fb8:	000204db 	.word	0x000204db
     fbc:	0002168c 	.word	0x0002168c

00000fc0 <FreeRTOS_read>:
* @details		The function waits to acquire semaphone cliCharReadySemaphore then calls SerialConsoleReadCharacter to read 
                a character, if -1 is received it repeats, if 0 is received, it will load the character into character variable
* @note         None
*****************************************************************************/
static void FreeRTOS_read(char *character)
{   
     fc0:	b580      	push	{r7, lr}
     fc2:	b084      	sub	sp, #16
     fc4:	af00      	add	r7, sp, #0
     fc6:	6078      	str	r0, [r7, #4]
    // SerialConsoleReadCharacter returns -1 when no characters are received
    // and 0 when it has received character
    int is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
     fc8:	687b      	ldr	r3, [r7, #4]
     fca:	0018      	movs	r0, r3
     fcc:	4b0d      	ldr	r3, [pc, #52]	; (1004 <FreeRTOS_read+0x44>)
     fce:	4798      	blx	r3
     fd0:	0003      	movs	r3, r0
     fd2:	60fb      	str	r3, [r7, #12]
    while(is_rx_char==-1){
     fd4:	e00f      	b.n	ff6 <FreeRTOS_read+0x36>
        if(xSemaphoreTake(cliCharReadySemaphore,portMAX_DELAY)){
     fd6:	4b0c      	ldr	r3, [pc, #48]	; (1008 <FreeRTOS_read+0x48>)
     fd8:	681a      	ldr	r2, [r3, #0]
     fda:	2301      	movs	r3, #1
     fdc:	425b      	negs	r3, r3
     fde:	0019      	movs	r1, r3
     fe0:	0010      	movs	r0, r2
     fe2:	4b0a      	ldr	r3, [pc, #40]	; (100c <FreeRTOS_read+0x4c>)
     fe4:	4798      	blx	r3
     fe6:	1e03      	subs	r3, r0, #0
     fe8:	d005      	beq.n	ff6 <FreeRTOS_read+0x36>
            is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	0018      	movs	r0, r3
     fee:	4b05      	ldr	r3, [pc, #20]	; (1004 <FreeRTOS_read+0x44>)
     ff0:	4798      	blx	r3
     ff2:	0003      	movs	r3, r0
     ff4:	60fb      	str	r3, [r7, #12]
    while(is_rx_char==-1){
     ff6:	68fb      	ldr	r3, [r7, #12]
     ff8:	3301      	adds	r3, #1
     ffa:	d0ec      	beq.n	fd6 <FreeRTOS_read+0x16>
        }

    }
    // vTaskSuspend(NULL);  // We suspend ourselves. Please remove this when doing your code
}
     ffc:	46c0      	nop			; (mov r8, r8)
     ffe:	46bd      	mov	sp, r7
    1000:	b004      	add	sp, #16
    1002:	bd80      	pop	{r7, pc}
    1004:	000099c5 	.word	0x000099c5
    1008:	200041f0 	.word	0x200041f0
    100c:	00006f81 	.word	0x00006f81

00001010 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
    1010:	b580      	push	{r7, lr}
    1012:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
    1014:	4b0a      	ldr	r3, [pc, #40]	; (1040 <CliCharReadySemaphoreGiveFromISR+0x30>)
    1016:	2200      	movs	r2, #0
    1018:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <CliCharReadySemaphoreGiveFromISR+0x34>)
    101c:	681b      	ldr	r3, [r3, #0]
    101e:	4a08      	ldr	r2, [pc, #32]	; (1040 <CliCharReadySemaphoreGiveFromISR+0x30>)
    1020:	0011      	movs	r1, r2
    1022:	0018      	movs	r0, r3
    1024:	4b08      	ldr	r3, [pc, #32]	; (1048 <CliCharReadySemaphoreGiveFromISR+0x38>)
    1026:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1028:	4b05      	ldr	r3, [pc, #20]	; (1040 <CliCharReadySemaphoreGiveFromISR+0x30>)
    102a:	681b      	ldr	r3, [r3, #0]
    102c:	2b00      	cmp	r3, #0
    102e:	d003      	beq.n	1038 <CliCharReadySemaphoreGiveFromISR+0x28>
    1030:	4b06      	ldr	r3, [pc, #24]	; (104c <CliCharReadySemaphoreGiveFromISR+0x3c>)
    1032:	2280      	movs	r2, #128	; 0x80
    1034:	0552      	lsls	r2, r2, #21
    1036:	601a      	str	r2, [r3, #0]
}
    1038:	46c0      	nop			; (mov r8, r8)
    103a:	46bd      	mov	sp, r7
    103c:	bd80      	pop	{r7, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	20000458 	.word	0x20000458
    1044:	200041f0 	.word	0x200041f0
    1048:	000068f9 	.word	0x000068f9
    104c:	e000ed04 	.word	0xe000ed04

00001050 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1050:	b590      	push	{r4, r7, lr}
    1052:	b087      	sub	sp, #28
    1054:	af00      	add	r7, sp, #0
    1056:	60f8      	str	r0, [r7, #12]
    1058:	60b9      	str	r1, [r7, #8]
    105a:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
    105c:	2317      	movs	r3, #23
    105e:	18fb      	adds	r3, r7, r3
    1060:	221b      	movs	r2, #27
    1062:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    1064:	2317      	movs	r3, #23
    1066:	18fb      	adds	r3, r7, r3
    1068:	781b      	ldrb	r3, [r3, #0]
    106a:	4a08      	ldr	r2, [pc, #32]	; (108c <xCliClearTerminalScreen+0x3c>)
    106c:	4808      	ldr	r0, [pc, #32]	; (1090 <xCliClearTerminalScreen+0x40>)
    106e:	210f      	movs	r1, #15
    1070:	4c08      	ldr	r4, [pc, #32]	; (1094 <xCliClearTerminalScreen+0x44>)
    1072:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    1074:	4a06      	ldr	r2, [pc, #24]	; (1090 <xCliClearTerminalScreen+0x40>)
    1076:	68b9      	ldr	r1, [r7, #8]
    1078:	68fb      	ldr	r3, [r7, #12]
    107a:	0018      	movs	r0, r3
    107c:	4b05      	ldr	r3, [pc, #20]	; (1094 <xCliClearTerminalScreen+0x44>)
    107e:	4798      	blx	r3
    return pdFALSE;
    1080:	2300      	movs	r3, #0
}
    1082:	0018      	movs	r0, r3
    1084:	46bd      	mov	sp, r7
    1086:	b007      	add	sp, #28
    1088:	bd90      	pop	{r4, r7, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	00021690 	.word	0x00021690
    1090:	20000374 	.word	0x20000374
    1094:	0002037d 	.word	0x0002037d

00001098 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1098:	b580      	push	{r7, lr}
    109a:	b084      	sub	sp, #16
    109c:	af00      	add	r7, sp, #0
    109e:	60f8      	str	r0, [r7, #12]
    10a0:	60b9      	str	r1, [r7, #8]
    10a2:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
    10a4:	2002      	movs	r0, #2
    10a6:	4b03      	ldr	r3, [pc, #12]	; (10b4 <CLI_OTAU+0x1c>)
    10a8:	4798      	blx	r3

    return pdFALSE;
    10aa:	2300      	movs	r3, #0
}
    10ac:	0018      	movs	r0, r3
    10ae:	46bd      	mov	sp, r7
    10b0:	b004      	add	sp, #16
    10b2:	bd80      	pop	{r7, pc}
    10b4:	000030c5 	.word	0x000030c5

000010b8 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    10b8:	b580      	push	{r7, lr}
    10ba:	b084      	sub	sp, #16
    10bc:	af00      	add	r7, sp, #0
    10be:	60f8      	str	r0, [r7, #12]
    10c0:	60b9      	str	r1, [r7, #8]
    10c2:	607a      	str	r2, [r7, #4]
    system_reset();
    10c4:	4b03      	ldr	r3, [pc, #12]	; (10d4 <CLI_ResetDevice+0x1c>)
    10c6:	4798      	blx	r3
    return pdFALSE;
    10c8:	2300      	movs	r3, #0
}
    10ca:	0018      	movs	r0, r3
    10cc:	46bd      	mov	sp, r7
    10ce:	b004      	add	sp, #16
    10d0:	bd80      	pop	{r7, pc}
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	00000cc5 	.word	0x00000cc5

000010d8 <CLI_Version>:
// Version CLI Command 
BaseType_t CLI_Version(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    10d8:	b590      	push	{r4, r7, lr}
    10da:	b085      	sub	sp, #20
    10dc:	af00      	add	r7, sp, #0
    10de:	60f8      	str	r0, [r7, #12]
    10e0:	60b9      	str	r1, [r7, #8]
    10e2:	607a      	str	r2, [r7, #4]
	// Use snprintf to safely format the firmware version string into the provided buffer
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Firmware Version: %s\r\n", FIRMWARE_VERSION);
    10e4:	4b05      	ldr	r3, [pc, #20]	; (10fc <CLI_Version+0x24>)
    10e6:	4a06      	ldr	r2, [pc, #24]	; (1100 <CLI_Version+0x28>)
    10e8:	68b9      	ldr	r1, [r7, #8]
    10ea:	68f8      	ldr	r0, [r7, #12]
    10ec:	4c05      	ldr	r4, [pc, #20]	; (1104 <CLI_Version+0x2c>)
    10ee:	47a0      	blx	r4
	return pdFALSE; // Indicates no further output is expected
    10f0:	2300      	movs	r3, #0
}
    10f2:	0018      	movs	r0, r3
    10f4:	46bd      	mov	sp, r7
    10f6:	b005      	add	sp, #20
    10f8:	bd90      	pop	{r4, r7, pc}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	00021698 	.word	0x00021698
    1100:	000216a0 	.word	0x000216a0
    1104:	0002037d 	.word	0x0002037d

00001108 <CLI_Ticks>:

// Ticks CLI Command 
BaseType_t CLI_Ticks(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1108:	b590      	push	{r4, r7, lr}
    110a:	b087      	sub	sp, #28
    110c:	af00      	add	r7, sp, #0
    110e:	60f8      	str	r0, [r7, #12]
    1110:	60b9      	str	r1, [r7, #8]
    1112:	607a      	str	r2, [r7, #4]
	// Retrieve the current tick count using FreeRTOS's xTaskGetTickCount()
	const TickType_t ticks = xTaskGetTickCount();
    1114:	4b07      	ldr	r3, [pc, #28]	; (1134 <CLI_Ticks+0x2c>)
    1116:	4798      	blx	r3
    1118:	0003      	movs	r3, r0
    111a:	617b      	str	r3, [r7, #20]
	// Format the tick count into the provided buffer
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Ticks since start: %lu\r\n", (unsigned long)ticks);
    111c:	697b      	ldr	r3, [r7, #20]
    111e:	4a06      	ldr	r2, [pc, #24]	; (1138 <CLI_Ticks+0x30>)
    1120:	68b9      	ldr	r1, [r7, #8]
    1122:	68f8      	ldr	r0, [r7, #12]
    1124:	4c05      	ldr	r4, [pc, #20]	; (113c <CLI_Ticks+0x34>)
    1126:	47a0      	blx	r4
	return pdFALSE; // Indicates no further output is expected
    1128:	2300      	movs	r3, #0
}
    112a:	0018      	movs	r0, r3
    112c:	46bd      	mov	sp, r7
    112e:	b007      	add	sp, #28
    1130:	bd90      	pop	{r4, r7, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	0000811d 	.word	0x0000811d
    1138:	000216b8 	.word	0x000216b8
    113c:	0002037d 	.word	0x0002037d

00001140 <CLI_i2cScan>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    1140:	b590      	push	{r4, r7, lr}
    1142:	b08f      	sub	sp, #60	; 0x3c
    1144:	af00      	add	r7, sp, #0
    1146:	60f8      	str	r0, [r7, #12]
    1148:	60b9      	str	r1, [r7, #8]
    114a:	607a      	str	r2, [r7, #4]
    I2C_Data i2cDevice;
    uint8_t address;
    // Send 0 command byte
    uint8_t dataOut[2] = {0, 0};
    114c:	2318      	movs	r3, #24
    114e:	18fb      	adds	r3, r7, r3
    1150:	2200      	movs	r2, #0
    1152:	701a      	strb	r2, [r3, #0]
    1154:	2318      	movs	r3, #24
    1156:	18fb      	adds	r3, r7, r3
    1158:	2200      	movs	r2, #0
    115a:	705a      	strb	r2, [r3, #1]
    uint8_t dataIn[2];
    dataOut[0] = 0;
    115c:	2318      	movs	r3, #24
    115e:	18fb      	adds	r3, r7, r3
    1160:	2200      	movs	r2, #0
    1162:	701a      	strb	r2, [r3, #0]
    dataOut[1] = 0;
    1164:	2318      	movs	r3, #24
    1166:	18fb      	adds	r3, r7, r3
    1168:	2200      	movs	r2, #0
    116a:	705a      	strb	r2, [r3, #1]
    i2cDevice.address = 0;
    116c:	231c      	movs	r3, #28
    116e:	18fb      	adds	r3, r7, r3
    1170:	2200      	movs	r2, #0
    1172:	701a      	strb	r2, [r3, #0]
    i2cDevice.msgIn = (uint8_t *)&dataIn[0];
    1174:	231c      	movs	r3, #28
    1176:	18fb      	adds	r3, r7, r3
    1178:	2214      	movs	r2, #20
    117a:	18ba      	adds	r2, r7, r2
    117c:	609a      	str	r2, [r3, #8]
    i2cDevice.lenOut = 1;
    117e:	231c      	movs	r3, #28
    1180:	18fb      	adds	r3, r7, r3
    1182:	2201      	movs	r2, #1
    1184:	81da      	strh	r2, [r3, #14]
    i2cDevice.msgOut = (const uint8_t *)&dataOut[0];
    1186:	231c      	movs	r3, #28
    1188:	18fb      	adds	r3, r7, r3
    118a:	2218      	movs	r2, #24
    118c:	18ba      	adds	r2, r7, r2
    118e:	605a      	str	r2, [r3, #4]
    i2cDevice.lenIn = 1;
    1190:	231c      	movs	r3, #28
    1192:	18fb      	adds	r3, r7, r3
    1194:	2201      	movs	r2, #1
    1196:	819a      	strh	r2, [r3, #12]

    SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
    1198:	4b2c      	ldr	r3, [pc, #176]	; (124c <CLI_i2cScan+0x10c>)
    119a:	0018      	movs	r0, r3
    119c:	4b2c      	ldr	r3, [pc, #176]	; (1250 <CLI_i2cScan+0x110>)
    119e:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
    11a0:	2300      	movs	r3, #0
    11a2:	637b      	str	r3, [r7, #52]	; 0x34
    11a4:	e046      	b.n	1234 <CLI_i2cScan+0xf4>
        snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
    11a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11a8:	4a2a      	ldr	r2, [pc, #168]	; (1254 <CLI_i2cScan+0x114>)
    11aa:	482b      	ldr	r0, [pc, #172]	; (1258 <CLI_i2cScan+0x118>)
    11ac:	210f      	movs	r1, #15
    11ae:	4c2b      	ldr	r4, [pc, #172]	; (125c <CLI_i2cScan+0x11c>)
    11b0:	47a0      	blx	r4
        SerialConsoleWriteString(bufCli);
    11b2:	4b29      	ldr	r3, [pc, #164]	; (1258 <CLI_i2cScan+0x118>)
    11b4:	0018      	movs	r0, r3
    11b6:	4b26      	ldr	r3, [pc, #152]	; (1250 <CLI_i2cScan+0x110>)
    11b8:	4798      	blx	r3

        for (int j = 0; j < 16; j++) {
    11ba:	2300      	movs	r3, #0
    11bc:	633b      	str	r3, [r7, #48]	; 0x30
    11be:	e02f      	b.n	1220 <CLI_i2cScan+0xe0>
            i2cDevice.address = (i + j) << 1;
    11c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    11c2:	b2da      	uxtb	r2, r3
    11c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11c6:	b2db      	uxtb	r3, r3
    11c8:	18d3      	adds	r3, r2, r3
    11ca:	b2db      	uxtb	r3, r3
    11cc:	18db      	adds	r3, r3, r3
    11ce:	b2da      	uxtb	r2, r3
    11d0:	231c      	movs	r3, #28
    11d2:	18fb      	adds	r3, r7, r3
    11d4:	701a      	strb	r2, [r3, #0]

            int32_t ret = I2cWriteDataWait(&i2cDevice, 100);
    11d6:	231c      	movs	r3, #28
    11d8:	18fb      	adds	r3, r7, r3
    11da:	2164      	movs	r1, #100	; 0x64
    11dc:	0018      	movs	r0, r3
    11de:	4b20      	ldr	r3, [pc, #128]	; (1260 <CLI_i2cScan+0x120>)
    11e0:	4798      	blx	r3
    11e2:	0003      	movs	r3, r0
    11e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (ret == 0) {
    11e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11e8:	2b00      	cmp	r3, #0
    11ea:	d10c      	bne.n	1206 <CLI_i2cScan+0xc6>
                snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cDevice.address);
    11ec:	231c      	movs	r3, #28
    11ee:	18fb      	adds	r3, r7, r3
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	4a18      	ldr	r2, [pc, #96]	; (1254 <CLI_i2cScan+0x114>)
    11f4:	4818      	ldr	r0, [pc, #96]	; (1258 <CLI_i2cScan+0x118>)
    11f6:	210f      	movs	r1, #15
    11f8:	4c18      	ldr	r4, [pc, #96]	; (125c <CLI_i2cScan+0x11c>)
    11fa:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
    11fc:	4b16      	ldr	r3, [pc, #88]	; (1258 <CLI_i2cScan+0x118>)
    11fe:	0018      	movs	r0, r3
    1200:	4b13      	ldr	r3, [pc, #76]	; (1250 <CLI_i2cScan+0x110>)
    1202:	4798      	blx	r3
    1204:	e009      	b.n	121a <CLI_i2cScan+0xda>
            } else {
                snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
    1206:	4b14      	ldr	r3, [pc, #80]	; (1258 <CLI_i2cScan+0x118>)
    1208:	4a16      	ldr	r2, [pc, #88]	; (1264 <CLI_i2cScan+0x124>)
    120a:	8811      	ldrh	r1, [r2, #0]
    120c:	8019      	strh	r1, [r3, #0]
    120e:	7892      	ldrb	r2, [r2, #2]
    1210:	709a      	strb	r2, [r3, #2]
                SerialConsoleWriteString(bufCli);
    1212:	4b11      	ldr	r3, [pc, #68]	; (1258 <CLI_i2cScan+0x118>)
    1214:	0018      	movs	r0, r3
    1216:	4b0e      	ldr	r3, [pc, #56]	; (1250 <CLI_i2cScan+0x110>)
    1218:	4798      	blx	r3
        for (int j = 0; j < 16; j++) {
    121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    121c:	3301      	adds	r3, #1
    121e:	633b      	str	r3, [r7, #48]	; 0x30
    1220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1222:	2b0f      	cmp	r3, #15
    1224:	ddcc      	ble.n	11c0 <CLI_i2cScan+0x80>
            }
        }
        SerialConsoleWriteString("\r\n");
    1226:	4b10      	ldr	r3, [pc, #64]	; (1268 <CLI_i2cScan+0x128>)
    1228:	0018      	movs	r0, r3
    122a:	4b09      	ldr	r3, [pc, #36]	; (1250 <CLI_i2cScan+0x110>)
    122c:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
    122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1230:	3310      	adds	r3, #16
    1232:	637b      	str	r3, [r7, #52]	; 0x34
    1234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1236:	2b7f      	cmp	r3, #127	; 0x7f
    1238:	ddb5      	ble.n	11a6 <CLI_i2cScan+0x66>
    }
    SerialConsoleWriteString("\r\n");
    123a:	4b0b      	ldr	r3, [pc, #44]	; (1268 <CLI_i2cScan+0x128>)
    123c:	0018      	movs	r0, r3
    123e:	4b04      	ldr	r3, [pc, #16]	; (1250 <CLI_i2cScan+0x110>)
    1240:	4798      	blx	r3
    return pdFALSE;
    1242:	2300      	movs	r3, #0
}
    1244:	0018      	movs	r0, r3
    1246:	46bd      	mov	sp, r7
    1248:	b00f      	add	sp, #60	; 0x3c
    124a:	bd90      	pop	{r4, r7, pc}
    124c:	000216d4 	.word	0x000216d4
    1250:	00009929 	.word	0x00009929
    1254:	00021708 	.word	0x00021708
    1258:	20000374 	.word	0x20000374
    125c:	0002037d 	.word	0x0002037d
    1260:	000017e9 	.word	0x000017e9
    1264:	00021710 	.word	0x00021710
    1268:	0002167c 	.word	0x0002167c

0000126c <system_interrupt_enable>:
{
    126c:	b580      	push	{r7, lr}
    126e:	b082      	sub	sp, #8
    1270:	af00      	add	r7, sp, #0
    1272:	0002      	movs	r2, r0
    1274:	1dfb      	adds	r3, r7, #7
    1276:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1278:	4b06      	ldr	r3, [pc, #24]	; (1294 <system_interrupt_enable+0x28>)
    127a:	1dfa      	adds	r2, r7, #7
    127c:	7812      	ldrb	r2, [r2, #0]
    127e:	0011      	movs	r1, r2
    1280:	221f      	movs	r2, #31
    1282:	400a      	ands	r2, r1
    1284:	2101      	movs	r1, #1
    1286:	4091      	lsls	r1, r2
    1288:	000a      	movs	r2, r1
    128a:	601a      	str	r2, [r3, #0]
}
    128c:	46c0      	nop			; (mov r8, r8)
    128e:	46bd      	mov	sp, r7
    1290:	b002      	add	sp, #8
    1292:	bd80      	pop	{r7, pc}
    1294:	e000e100 	.word	0xe000e100

00001298 <i2c_master_is_syncing>:
{
    1298:	b580      	push	{r7, lr}
    129a:	b084      	sub	sp, #16
    129c:	af00      	add	r7, sp, #0
    129e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    12a0:	687b      	ldr	r3, [r7, #4]
    12a2:	681b      	ldr	r3, [r3, #0]
    12a4:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    12a6:	68fb      	ldr	r3, [r7, #12]
    12a8:	69db      	ldr	r3, [r3, #28]
    12aa:	2207      	movs	r2, #7
    12ac:	4013      	ands	r3, r2
    12ae:	1e5a      	subs	r2, r3, #1
    12b0:	4193      	sbcs	r3, r2
    12b2:	b2db      	uxtb	r3, r3
}
    12b4:	0018      	movs	r0, r3
    12b6:	46bd      	mov	sp, r7
    12b8:	b004      	add	sp, #16
    12ba:	bd80      	pop	{r7, pc}

000012bc <_i2c_master_wait_for_sync>:
{
    12bc:	b580      	push	{r7, lr}
    12be:	b082      	sub	sp, #8
    12c0:	af00      	add	r7, sp, #0
    12c2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    12c4:	46c0      	nop			; (mov r8, r8)
    12c6:	687b      	ldr	r3, [r7, #4]
    12c8:	0018      	movs	r0, r3
    12ca:	4b04      	ldr	r3, [pc, #16]	; (12dc <_i2c_master_wait_for_sync+0x20>)
    12cc:	4798      	blx	r3
    12ce:	1e03      	subs	r3, r0, #0
    12d0:	d1f9      	bne.n	12c6 <_i2c_master_wait_for_sync+0xa>
}
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	46bd      	mov	sp, r7
    12d6:	b002      	add	sp, #8
    12d8:	bd80      	pop	{r7, pc}
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	00001299 	.word	0x00001299

000012e0 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    12e0:	b580      	push	{r7, lr}
    12e2:	b082      	sub	sp, #8
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	2264      	movs	r2, #100	; 0x64
    12ec:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	4a1b      	ldr	r2, [pc, #108]	; (1360 <i2c_master_get_config_defaults+0x80>)
    12f2:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	2200      	movs	r2, #0
    12f8:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	2200      	movs	r2, #0
    12fe:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	2200      	movs	r2, #0
    1304:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	2280      	movs	r2, #128	; 0x80
    130a:	0392      	lsls	r2, r2, #14
    130c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    130e:	687b      	ldr	r3, [r7, #4]
    1310:	2201      	movs	r2, #1
    1312:	4252      	negs	r2, r2
    1314:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	2201      	movs	r2, #1
    131a:	4252      	negs	r2, r2
    131c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	2200      	movs	r2, #0
    1322:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1324:	687b      	ldr	r3, [r7, #4]
    1326:	2200      	movs	r2, #0
    1328:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	2224      	movs	r2, #36	; 0x24
    132e:	2100      	movs	r1, #0
    1330:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1332:	687b      	ldr	r3, [r7, #4]
    1334:	2200      	movs	r2, #0
    1336:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	222c      	movs	r2, #44	; 0x2c
    133c:	2100      	movs	r1, #0
    133e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1340:	687b      	ldr	r3, [r7, #4]
    1342:	222d      	movs	r2, #45	; 0x2d
    1344:	2100      	movs	r1, #0
    1346:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    1348:	687b      	ldr	r3, [r7, #4]
    134a:	222e      	movs	r2, #46	; 0x2e
    134c:	2100      	movs	r1, #0
    134e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1350:	687b      	ldr	r3, [r7, #4]
    1352:	22d7      	movs	r2, #215	; 0xd7
    1354:	861a      	strh	r2, [r3, #48]	; 0x30
}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	46bd      	mov	sp, r7
    135a:	b002      	add	sp, #8
    135c:	bd80      	pop	{r7, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	00000d48 	.word	0x00000d48

00001364 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    1364:	b580      	push	{r7, lr}
    1366:	b084      	sub	sp, #16
    1368:	af00      	add	r7, sp, #0
    136a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	681b      	ldr	r3, [r3, #0]
    1370:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    1372:	2300      	movs	r3, #0
    1374:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    1376:	687b      	ldr	r3, [r7, #4]
    1378:	0018      	movs	r0, r3
    137a:	4b14      	ldr	r3, [pc, #80]	; (13cc <i2c_master_enable+0x68>)
    137c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    137e:	68bb      	ldr	r3, [r7, #8]
    1380:	681b      	ldr	r3, [r3, #0]
    1382:	2202      	movs	r2, #2
    1384:	431a      	orrs	r2, r3
    1386:	68bb      	ldr	r3, [r7, #8]
    1388:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    138a:	687b      	ldr	r3, [r7, #4]
    138c:	681b      	ldr	r3, [r3, #0]
    138e:	0018      	movs	r0, r3
    1390:	4b0f      	ldr	r3, [pc, #60]	; (13d0 <i2c_master_enable+0x6c>)
    1392:	4798      	blx	r3
    1394:	0003      	movs	r3, r0
    1396:	0018      	movs	r0, r3
    1398:	4b0e      	ldr	r3, [pc, #56]	; (13d4 <i2c_master_enable+0x70>)
    139a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    139c:	e00c      	b.n	13b8 <i2c_master_enable+0x54>
		timeout_counter++;
    139e:	68fb      	ldr	r3, [r7, #12]
    13a0:	3301      	adds	r3, #1
    13a2:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	88db      	ldrh	r3, [r3, #6]
    13a8:	001a      	movs	r2, r3
    13aa:	68fb      	ldr	r3, [r7, #12]
    13ac:	429a      	cmp	r2, r3
    13ae:	d803      	bhi.n	13b8 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    13b0:	68bb      	ldr	r3, [r7, #8]
    13b2:	2210      	movs	r2, #16
    13b4:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    13b6:	e006      	b.n	13c6 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    13b8:	68bb      	ldr	r3, [r7, #8]
    13ba:	8b5b      	ldrh	r3, [r3, #26]
    13bc:	b29b      	uxth	r3, r3
    13be:	001a      	movs	r2, r3
    13c0:	2310      	movs	r3, #16
    13c2:	4013      	ands	r3, r2
    13c4:	d0eb      	beq.n	139e <i2c_master_enable+0x3a>
		}
	}
}
    13c6:	46bd      	mov	sp, r7
    13c8:	b004      	add	sp, #16
    13ca:	bd80      	pop	{r7, pc}
    13cc:	000012bd 	.word	0x000012bd
    13d0:	0001323d 	.word	0x0001323d
    13d4:	0000126d 	.word	0x0000126d

000013d8 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    13d8:	b580      	push	{r7, lr}
    13da:	b082      	sub	sp, #8
    13dc:	af00      	add	r7, sp, #0
    13de:	6078      	str	r0, [r7, #4]
    13e0:	000a      	movs	r2, r1
    13e2:	1cfb      	adds	r3, r7, #3
    13e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    13e6:	687b      	ldr	r3, [r7, #4]
    13e8:	7e5b      	ldrb	r3, [r3, #25]
    13ea:	b2db      	uxtb	r3, r3
    13ec:	b25a      	sxtb	r2, r3
    13ee:	1cfb      	adds	r3, r7, #3
    13f0:	781b      	ldrb	r3, [r3, #0]
    13f2:	2101      	movs	r1, #1
    13f4:	4099      	lsls	r1, r3
    13f6:	000b      	movs	r3, r1
    13f8:	b25b      	sxtb	r3, r3
    13fa:	4313      	orrs	r3, r2
    13fc:	b25b      	sxtb	r3, r3
    13fe:	b2da      	uxtb	r2, r3
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	765a      	strb	r2, [r3, #25]
}
    1404:	46c0      	nop			; (mov r8, r8)
    1406:	46bd      	mov	sp, r7
    1408:	b002      	add	sp, #8
    140a:	bd80      	pop	{r7, pc}

0000140c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
    140c:	b590      	push	{r4, r7, lr}
    140e:	b091      	sub	sp, #68	; 0x44
    1410:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
    1412:	2300      	movs	r3, #0
    1414:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
    1416:	233a      	movs	r3, #58	; 0x3a
    1418:	18fb      	adds	r3, r7, r3
    141a:	2200      	movs	r2, #0
    141c:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
    141e:	1d3b      	adds	r3, r7, #4
    1420:	0018      	movs	r0, r3
    1422:	4b21      	ldr	r3, [pc, #132]	; (14a8 <I2cDriverConfigureSensorBus+0x9c>)
    1424:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    1426:	1d3b      	adds	r3, r7, #4
    1428:	4a20      	ldr	r2, [pc, #128]	; (14ac <I2cDriverConfigureSensorBus+0xa0>)
    142a:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    142c:	1d3b      	adds	r3, r7, #4
    142e:	4a20      	ldr	r2, [pc, #128]	; (14b0 <I2cDriverConfigureSensorBus+0xa4>)
    1430:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
    1432:	1d3b      	adds	r3, r7, #4
    1434:	22fa      	movs	r2, #250	; 0xfa
    1436:	0092      	lsls	r2, r2, #2
    1438:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
    143a:	233b      	movs	r3, #59	; 0x3b
    143c:	18fb      	adds	r3, r7, r3
    143e:	2203      	movs	r2, #3
    1440:	701a      	strb	r2, [r3, #0]
    1442:	e01e      	b.n	1482 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    1444:	233a      	movs	r3, #58	; 0x3a
    1446:	18fc      	adds	r4, r7, r3
    1448:	1d3a      	adds	r2, r7, #4
    144a:	491a      	ldr	r1, [pc, #104]	; (14b4 <I2cDriverConfigureSensorBus+0xa8>)
    144c:	4b1a      	ldr	r3, [pc, #104]	; (14b8 <I2cDriverConfigureSensorBus+0xac>)
    144e:	0018      	movs	r0, r3
    1450:	4b1a      	ldr	r3, [pc, #104]	; (14bc <I2cDriverConfigureSensorBus+0xb0>)
    1452:	4798      	blx	r3
    1454:	0003      	movs	r3, r0
    1456:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
    1458:	233a      	movs	r3, #58	; 0x3a
    145a:	18fb      	adds	r3, r7, r3
    145c:	781b      	ldrb	r3, [r3, #0]
    145e:	2b00      	cmp	r3, #0
    1460:	d104      	bne.n	146c <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
    1462:	233a      	movs	r3, #58	; 0x3a
    1464:	18fb      	adds	r3, r7, r3
    1466:	781b      	ldrb	r3, [r3, #0]
    1468:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
    146a:	e00f      	b.n	148c <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
    146c:	4b12      	ldr	r3, [pc, #72]	; (14b8 <I2cDriverConfigureSensorBus+0xac>)
    146e:	0018      	movs	r0, r3
    1470:	4b13      	ldr	r3, [pc, #76]	; (14c0 <I2cDriverConfigureSensorBus+0xb4>)
    1472:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
    1474:	233b      	movs	r3, #59	; 0x3b
    1476:	18fb      	adds	r3, r7, r3
    1478:	781a      	ldrb	r2, [r3, #0]
    147a:	233b      	movs	r3, #59	; 0x3b
    147c:	18fb      	adds	r3, r7, r3
    147e:	3a01      	subs	r2, #1
    1480:	701a      	strb	r2, [r3, #0]
    1482:	233b      	movs	r3, #59	; 0x3b
    1484:	18fb      	adds	r3, r7, r3
    1486:	781b      	ldrb	r3, [r3, #0]
    1488:	2b00      	cmp	r3, #0
    148a:	d1db      	bne.n	1444 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
    148c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    148e:	2b00      	cmp	r3, #0
    1490:	d104      	bne.n	149c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
    1492:	4b09      	ldr	r3, [pc, #36]	; (14b8 <I2cDriverConfigureSensorBus+0xac>)
    1494:	0018      	movs	r0, r3
    1496:	4b0b      	ldr	r3, [pc, #44]	; (14c4 <I2cDriverConfigureSensorBus+0xb8>)
    1498:	4798      	blx	r3
    149a:	e000      	b.n	149e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
    149c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
    149e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    14a0:	0018      	movs	r0, r3
    14a2:	46bd      	mov	sp, r7
    14a4:	b011      	add	sp, #68	; 0x44
    14a6:	bd90      	pop	{r4, r7, pc}
    14a8:	000012e1 	.word	0x000012e1
    14ac:	00080002 	.word	0x00080002
    14b0:	00090002 	.word	0x00090002
    14b4:	42000800 	.word	0x42000800
    14b8:	200041f8 	.word	0x200041f8
    14bc:	000036bd 	.word	0x000036bd
    14c0:	000037f1 	.word	0x000037f1
    14c4:	00001365 	.word	0x00001365

000014c8 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	b084      	sub	sp, #16
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    14d0:	4b0e      	ldr	r3, [pc, #56]	; (150c <I2cSensorsTxComplete+0x44>)
    14d2:	2200      	movs	r2, #0
    14d4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
    14d6:	4b0d      	ldr	r3, [pc, #52]	; (150c <I2cSensorsTxComplete+0x44>)
    14d8:	2201      	movs	r2, #1
    14da:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    14dc:	2300      	movs	r3, #0
    14de:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    14e0:	4b0b      	ldr	r3, [pc, #44]	; (1510 <I2cSensorsTxComplete+0x48>)
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	220c      	movs	r2, #12
    14e6:	18ba      	adds	r2, r7, r2
    14e8:	0011      	movs	r1, r2
    14ea:	0018      	movs	r0, r3
    14ec:	4b09      	ldr	r3, [pc, #36]	; (1514 <I2cSensorsTxComplete+0x4c>)
    14ee:	4798      	blx	r3
    sensorTransmitError = false;
    14f0:	4b09      	ldr	r3, [pc, #36]	; (1518 <I2cSensorsTxComplete+0x50>)
    14f2:	2200      	movs	r2, #0
    14f4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    14f6:	68fb      	ldr	r3, [r7, #12]
    14f8:	2b00      	cmp	r3, #0
    14fa:	d003      	beq.n	1504 <I2cSensorsTxComplete+0x3c>
    14fc:	4b07      	ldr	r3, [pc, #28]	; (151c <I2cSensorsTxComplete+0x54>)
    14fe:	2280      	movs	r2, #128	; 0x80
    1500:	0552      	lsls	r2, r2, #21
    1502:	601a      	str	r2, [r3, #0]
}
    1504:	46c0      	nop			; (mov r8, r8)
    1506:	46bd      	mov	sp, r7
    1508:	b004      	add	sp, #16
    150a:	bd80      	pop	{r7, pc}
    150c:	20000460 	.word	0x20000460
    1510:	20004220 	.word	0x20004220
    1514:	000068f9 	.word	0x000068f9
    1518:	2000045c 	.word	0x2000045c
    151c:	e000ed04 	.word	0xe000ed04

00001520 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
    1520:	b580      	push	{r7, lr}
    1522:	b084      	sub	sp, #16
    1524:	af00      	add	r7, sp, #0
    1526:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    1528:	4b0e      	ldr	r3, [pc, #56]	; (1564 <I2cSensorsRxComplete+0x44>)
    152a:	2200      	movs	r2, #0
    152c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
    152e:	4b0d      	ldr	r3, [pc, #52]	; (1564 <I2cSensorsRxComplete+0x44>)
    1530:	2201      	movs	r2, #1
    1532:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1534:	2300      	movs	r3, #0
    1536:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    1538:	4b0b      	ldr	r3, [pc, #44]	; (1568 <I2cSensorsRxComplete+0x48>)
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	220c      	movs	r2, #12
    153e:	18ba      	adds	r2, r7, r2
    1540:	0011      	movs	r1, r2
    1542:	0018      	movs	r0, r3
    1544:	4b09      	ldr	r3, [pc, #36]	; (156c <I2cSensorsRxComplete+0x4c>)
    1546:	4798      	blx	r3
    sensorTransmitError = false;
    1548:	4b09      	ldr	r3, [pc, #36]	; (1570 <I2cSensorsRxComplete+0x50>)
    154a:	2200      	movs	r2, #0
    154c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    154e:	68fb      	ldr	r3, [r7, #12]
    1550:	2b00      	cmp	r3, #0
    1552:	d003      	beq.n	155c <I2cSensorsRxComplete+0x3c>
    1554:	4b07      	ldr	r3, [pc, #28]	; (1574 <I2cSensorsRxComplete+0x54>)
    1556:	2280      	movs	r2, #128	; 0x80
    1558:	0552      	lsls	r2, r2, #21
    155a:	601a      	str	r2, [r3, #0]
}
    155c:	46c0      	nop			; (mov r8, r8)
    155e:	46bd      	mov	sp, r7
    1560:	b004      	add	sp, #16
    1562:	bd80      	pop	{r7, pc}
    1564:	20000460 	.word	0x20000460
    1568:	20004220 	.word	0x20004220
    156c:	000068f9 	.word	0x000068f9
    1570:	2000045c 	.word	0x2000045c
    1574:	e000ed04 	.word	0xe000ed04

00001578 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
    1578:	b580      	push	{r7, lr}
    157a:	b084      	sub	sp, #16
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    1580:	4b0e      	ldr	r3, [pc, #56]	; (15bc <I2cSensorsError+0x44>)
    1582:	2200      	movs	r2, #0
    1584:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
    1586:	4b0d      	ldr	r3, [pc, #52]	; (15bc <I2cSensorsError+0x44>)
    1588:	2201      	movs	r2, #1
    158a:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    158c:	2300      	movs	r3, #0
    158e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
    1590:	4b0b      	ldr	r3, [pc, #44]	; (15c0 <I2cSensorsError+0x48>)
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	220c      	movs	r2, #12
    1596:	18ba      	adds	r2, r7, r2
    1598:	0011      	movs	r1, r2
    159a:	0018      	movs	r0, r3
    159c:	4b09      	ldr	r3, [pc, #36]	; (15c4 <I2cSensorsError+0x4c>)
    159e:	4798      	blx	r3
    sensorTransmitError = true;
    15a0:	4b09      	ldr	r3, [pc, #36]	; (15c8 <I2cSensorsError+0x50>)
    15a2:	2201      	movs	r2, #1
    15a4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    15a6:	68fb      	ldr	r3, [r7, #12]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d003      	beq.n	15b4 <I2cSensorsError+0x3c>
    15ac:	4b07      	ldr	r3, [pc, #28]	; (15cc <I2cSensorsError+0x54>)
    15ae:	2280      	movs	r2, #128	; 0x80
    15b0:	0552      	lsls	r2, r2, #21
    15b2:	601a      	str	r2, [r3, #0]
}
    15b4:	46c0      	nop			; (mov r8, r8)
    15b6:	46bd      	mov	sp, r7
    15b8:	b004      	add	sp, #16
    15ba:	bd80      	pop	{r7, pc}
    15bc:	20000460 	.word	0x20000460
    15c0:	20004220 	.word	0x20004220
    15c4:	000068f9 	.word	0x000068f9
    15c8:	2000045c 	.word	0x2000045c
    15cc:	e000ed04 	.word	0xe000ed04

000015d0 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
    15d0:	b580      	push	{r7, lr}
    15d2:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    15d4:	4911      	ldr	r1, [pc, #68]	; (161c <I2cDriverRegisterSensorBusCallbacks+0x4c>)
    15d6:	4b12      	ldr	r3, [pc, #72]	; (1620 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    15d8:	2200      	movs	r2, #0
    15da:	0018      	movs	r0, r3
    15dc:	4b11      	ldr	r3, [pc, #68]	; (1624 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    15de:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    15e0:	4b0f      	ldr	r3, [pc, #60]	; (1620 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    15e2:	2100      	movs	r1, #0
    15e4:	0018      	movs	r0, r3
    15e6:	4b10      	ldr	r3, [pc, #64]	; (1628 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    15e8:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    15ea:	4910      	ldr	r1, [pc, #64]	; (162c <I2cDriverRegisterSensorBusCallbacks+0x5c>)
    15ec:	4b0c      	ldr	r3, [pc, #48]	; (1620 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    15ee:	2201      	movs	r2, #1
    15f0:	0018      	movs	r0, r3
    15f2:	4b0c      	ldr	r3, [pc, #48]	; (1624 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    15f4:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
    15f6:	4b0a      	ldr	r3, [pc, #40]	; (1620 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    15f8:	2101      	movs	r1, #1
    15fa:	0018      	movs	r0, r3
    15fc:	4b0a      	ldr	r3, [pc, #40]	; (1628 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    15fe:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
    1600:	490b      	ldr	r1, [pc, #44]	; (1630 <I2cDriverRegisterSensorBusCallbacks+0x60>)
    1602:	4b07      	ldr	r3, [pc, #28]	; (1620 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1604:	2202      	movs	r2, #2
    1606:	0018      	movs	r0, r3
    1608:	4b06      	ldr	r3, [pc, #24]	; (1624 <I2cDriverRegisterSensorBusCallbacks+0x54>)
    160a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
    160c:	4b04      	ldr	r3, [pc, #16]	; (1620 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    160e:	2102      	movs	r1, #2
    1610:	0018      	movs	r0, r3
    1612:	4b05      	ldr	r3, [pc, #20]	; (1628 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    1614:	4798      	blx	r3
}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	46bd      	mov	sp, r7
    161a:	bd80      	pop	{r7, pc}
    161c:	000014c9 	.word	0x000014c9
    1620:	200041f8 	.word	0x200041f8
    1624:	00000909 	.word	0x00000909
    1628:	000013d9 	.word	0x000013d9
    162c:	00001521 	.word	0x00001521
    1630:	00001579 	.word	0x00001579

00001634 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
    1634:	b580      	push	{r7, lr}
    1636:	b082      	sub	sp, #8
    1638:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
    163a:	2300      	movs	r3, #0
    163c:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
    163e:	4b14      	ldr	r3, [pc, #80]	; (1690 <I2cInitializeDriver+0x5c>)
    1640:	4798      	blx	r3
    1642:	0003      	movs	r3, r0
    1644:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
    1646:	687b      	ldr	r3, [r7, #4]
    1648:	2b00      	cmp	r3, #0
    164a:	d11a      	bne.n	1682 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
    164c:	4b11      	ldr	r3, [pc, #68]	; (1694 <I2cInitializeDriver+0x60>)
    164e:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
    1650:	2001      	movs	r0, #1
    1652:	4b11      	ldr	r3, [pc, #68]	; (1698 <I2cInitializeDriver+0x64>)
    1654:	4798      	blx	r3
    1656:	0002      	movs	r2, r0
    1658:	4b10      	ldr	r3, [pc, #64]	; (169c <I2cInitializeDriver+0x68>)
    165a:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    165c:	2203      	movs	r2, #3
    165e:	2100      	movs	r1, #0
    1660:	2001      	movs	r0, #1
    1662:	4b0f      	ldr	r3, [pc, #60]	; (16a0 <I2cInitializeDriver+0x6c>)
    1664:	4798      	blx	r3
    1666:	0002      	movs	r2, r0
    1668:	4b0e      	ldr	r3, [pc, #56]	; (16a4 <I2cInitializeDriver+0x70>)
    166a:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
    166c:	4b0b      	ldr	r3, [pc, #44]	; (169c <I2cInitializeDriver+0x68>)
    166e:	681b      	ldr	r3, [r3, #0]
    1670:	2b00      	cmp	r3, #0
    1672:	d003      	beq.n	167c <I2cInitializeDriver+0x48>
    1674:	4b0b      	ldr	r3, [pc, #44]	; (16a4 <I2cInitializeDriver+0x70>)
    1676:	681b      	ldr	r3, [r3, #0]
    1678:	2b00      	cmp	r3, #0
    167a:	d103      	bne.n	1684 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
    167c:	2306      	movs	r3, #6
    167e:	607b      	str	r3, [r7, #4]
        goto exit;
    1680:	e000      	b.n	1684 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
    1682:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    1684:	687b      	ldr	r3, [r7, #4]
}
    1686:	0018      	movs	r0, r3
    1688:	46bd      	mov	sp, r7
    168a:	b002      	add	sp, #8
    168c:	bd80      	pop	{r7, pc}
    168e:	46c0      	nop			; (mov r8, r8)
    1690:	0000140d 	.word	0x0000140d
    1694:	000015d1 	.word	0x000015d1
    1698:	00006231 	.word	0x00006231
    169c:	200041f4 	.word	0x200041f4
    16a0:	00005fc9 	.word	0x00005fc9
    16a4:	20004220 	.word	0x20004220

000016a8 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
    16a8:	b590      	push	{r4, r7, lr}
    16aa:	b085      	sub	sp, #20
    16ac:	af00      	add	r7, sp, #0
    16ae:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    16b0:	2300      	movs	r3, #0
    16b2:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	2b00      	cmp	r3, #0
    16b8:	d003      	beq.n	16c2 <I2cWriteData+0x1a>
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	685b      	ldr	r3, [r3, #4]
    16be:	2b00      	cmp	r3, #0
    16c0:	d103      	bne.n	16ca <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
    16c2:	2308      	movs	r3, #8
    16c4:	425b      	negs	r3, r3
    16c6:	60fb      	str	r3, [r7, #12]
        goto exit;
    16c8:	e01f      	b.n	170a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
    16ca:	687b      	ldr	r3, [r7, #4]
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	b29a      	uxth	r2, r3
    16d0:	4b10      	ldr	r3, [pc, #64]	; (1714 <I2cWriteData+0x6c>)
    16d2:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	685a      	ldr	r2, [r3, #4]
    16d8:	4b0e      	ldr	r3, [pc, #56]	; (1714 <I2cWriteData+0x6c>)
    16da:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	89da      	ldrh	r2, [r3, #14]
    16e0:	4b0c      	ldr	r3, [pc, #48]	; (1714 <I2cWriteData+0x6c>)
    16e2:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    16e4:	230b      	movs	r3, #11
    16e6:	18fc      	adds	r4, r7, r3
    16e8:	4a0a      	ldr	r2, [pc, #40]	; (1714 <I2cWriteData+0x6c>)
    16ea:	4b0b      	ldr	r3, [pc, #44]	; (1718 <I2cWriteData+0x70>)
    16ec:	0011      	movs	r1, r2
    16ee:	0018      	movs	r0, r3
    16f0:	4b0a      	ldr	r3, [pc, #40]	; (171c <I2cWriteData+0x74>)
    16f2:	4798      	blx	r3
    16f4:	0003      	movs	r3, r0
    16f6:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
    16f8:	230b      	movs	r3, #11
    16fa:	18fb      	adds	r3, r7, r3
    16fc:	781b      	ldrb	r3, [r3, #0]
    16fe:	2b00      	cmp	r3, #0
    1700:	d003      	beq.n	170a <I2cWriteData+0x62>
        error = ERROR_IO;
    1702:	2306      	movs	r3, #6
    1704:	425b      	negs	r3, r3
    1706:	60fb      	str	r3, [r7, #12]
        goto exit;
    1708:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
    170a:	68fb      	ldr	r3, [r7, #12]
}
    170c:	0018      	movs	r0, r3
    170e:	46bd      	mov	sp, r7
    1710:	b005      	add	sp, #20
    1712:	bd90      	pop	{r4, r7, pc}
    1714:	20004224 	.word	0x20004224
    1718:	200041f8 	.word	0x200041f8
    171c:	000009f5 	.word	0x000009f5

00001720 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
    1720:	b590      	push	{r4, r7, lr}
    1722:	b083      	sub	sp, #12
    1724:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
    1726:	2300      	movs	r3, #0
    1728:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
    172a:	4b09      	ldr	r3, [pc, #36]	; (1750 <I2cFreeMutex+0x30>)
    172c:	6818      	ldr	r0, [r3, #0]
    172e:	2300      	movs	r3, #0
    1730:	2200      	movs	r2, #0
    1732:	2100      	movs	r1, #0
    1734:	4c07      	ldr	r4, [pc, #28]	; (1754 <I2cFreeMutex+0x34>)
    1736:	47a0      	blx	r4
    1738:	0003      	movs	r3, r0
    173a:	2b01      	cmp	r3, #1
    173c:	d002      	beq.n	1744 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
    173e:	2314      	movs	r3, #20
    1740:	425b      	negs	r3, r3
    1742:	607b      	str	r3, [r7, #4]
    }
    return error;
    1744:	687b      	ldr	r3, [r7, #4]
}
    1746:	0018      	movs	r0, r3
    1748:	46bd      	mov	sp, r7
    174a:	b003      	add	sp, #12
    174c:	bd90      	pop	{r4, r7, pc}
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	200041f4 	.word	0x200041f4
    1754:	00006271 	.word	0x00006271

00001758 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
    1758:	b580      	push	{r7, lr}
    175a:	b084      	sub	sp, #16
    175c:	af00      	add	r7, sp, #0
    175e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    1760:	2300      	movs	r3, #0
    1762:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
    1764:	4b08      	ldr	r3, [pc, #32]	; (1788 <I2cGetMutex+0x30>)
    1766:	681b      	ldr	r3, [r3, #0]
    1768:	687a      	ldr	r2, [r7, #4]
    176a:	0011      	movs	r1, r2
    176c:	0018      	movs	r0, r3
    176e:	4b07      	ldr	r3, [pc, #28]	; (178c <I2cGetMutex+0x34>)
    1770:	4798      	blx	r3
    1772:	0003      	movs	r3, r0
    1774:	2b01      	cmp	r3, #1
    1776:	d002      	beq.n	177e <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
    1778:	231d      	movs	r3, #29
    177a:	425b      	negs	r3, r3
    177c:	60fb      	str	r3, [r7, #12]
    }
    return error;
    177e:	68fb      	ldr	r3, [r7, #12]
}
    1780:	0018      	movs	r0, r3
    1782:	46bd      	mov	sp, r7
    1784:	b004      	add	sp, #16
    1786:	bd80      	pop	{r7, pc}
    1788:	200041f4 	.word	0x200041f4
    178c:	00006f81 	.word	0x00006f81

00001790 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
    1790:	b580      	push	{r7, lr}
    1792:	b084      	sub	sp, #16
    1794:	af00      	add	r7, sp, #0
    1796:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
    1798:	2300      	movs	r3, #0
    179a:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
    179c:	4b04      	ldr	r3, [pc, #16]	; (17b0 <I2cGetSemaphoreHandle+0x20>)
    179e:	681a      	ldr	r2, [r3, #0]
    17a0:	687b      	ldr	r3, [r7, #4]
    17a2:	601a      	str	r2, [r3, #0]
    return error;
    17a4:	68fb      	ldr	r3, [r7, #12]
}
    17a6:	0018      	movs	r0, r3
    17a8:	46bd      	mov	sp, r7
    17aa:	b004      	add	sp, #16
    17ac:	bd80      	pop	{r7, pc}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	20004220 	.word	0x20004220

000017b4 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
    17b4:	b580      	push	{r7, lr}
    17b6:	af00      	add	r7, sp, #0
    return sensorTransmitError;
    17b8:	4b02      	ldr	r3, [pc, #8]	; (17c4 <I2cGetTaskErrorStatus+0x10>)
    17ba:	781b      	ldrb	r3, [r3, #0]
}
    17bc:	0018      	movs	r0, r3
    17be:	46bd      	mov	sp, r7
    17c0:	bd80      	pop	{r7, pc}
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	2000045c 	.word	0x2000045c

000017c8 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
    17c8:	b580      	push	{r7, lr}
    17ca:	b082      	sub	sp, #8
    17cc:	af00      	add	r7, sp, #0
    17ce:	0002      	movs	r2, r0
    17d0:	1dfb      	adds	r3, r7, #7
    17d2:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
    17d4:	4b03      	ldr	r3, [pc, #12]	; (17e4 <I2cSetTaskErrorStatus+0x1c>)
    17d6:	1dfa      	adds	r2, r7, #7
    17d8:	7812      	ldrb	r2, [r2, #0]
    17da:	701a      	strb	r2, [r3, #0]
}
    17dc:	46c0      	nop			; (mov r8, r8)
    17de:	46bd      	mov	sp, r7
    17e0:	b002      	add	sp, #8
    17e2:	bd80      	pop	{r7, pc}
    17e4:	2000045c 	.word	0x2000045c

000017e8 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
    17e8:	b580      	push	{r7, lr}
    17ea:	b084      	sub	sp, #16
    17ec:	af00      	add	r7, sp, #0
    17ee:	6078      	str	r0, [r7, #4]
    17f0:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
    17f2:	2300      	movs	r3, #0
    17f4:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
    17f6:	2300      	movs	r3, #0
    17f8:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
    17fa:	2396      	movs	r3, #150	; 0x96
    17fc:	005b      	lsls	r3, r3, #1
    17fe:	0018      	movs	r0, r3
    1800:	4b28      	ldr	r3, [pc, #160]	; (18a4 <I2cWriteDataWait+0xbc>)
    1802:	4798      	blx	r3
    1804:	0003      	movs	r3, r0
    1806:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
    1808:	68fb      	ldr	r3, [r7, #12]
    180a:	2b00      	cmp	r3, #0
    180c:	d138      	bne.n	1880 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
    180e:	2308      	movs	r3, #8
    1810:	18fb      	adds	r3, r7, r3
    1812:	0018      	movs	r0, r3
    1814:	4b24      	ldr	r3, [pc, #144]	; (18a8 <I2cWriteDataWait+0xc0>)
    1816:	4798      	blx	r3
    1818:	0003      	movs	r3, r0
    181a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
    181c:	68fb      	ldr	r3, [r7, #12]
    181e:	2b00      	cmp	r3, #0
    1820:	d130      	bne.n	1884 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
    1822:	687b      	ldr	r3, [r7, #4]
    1824:	0018      	movs	r0, r3
    1826:	4b21      	ldr	r3, [pc, #132]	; (18ac <I2cWriteDataWait+0xc4>)
    1828:	4798      	blx	r3
    182a:	0003      	movs	r3, r0
    182c:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
    182e:	68fb      	ldr	r3, [r7, #12]
    1830:	2b00      	cmp	r3, #0
    1832:	d12a      	bne.n	188a <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
    1834:	68bb      	ldr	r3, [r7, #8]
    1836:	683a      	ldr	r2, [r7, #0]
    1838:	0011      	movs	r1, r2
    183a:	0018      	movs	r0, r3
    183c:	4b1c      	ldr	r3, [pc, #112]	; (18b0 <I2cWriteDataWait+0xc8>)
    183e:	4798      	blx	r3
    1840:	0003      	movs	r3, r0
    1842:	2b01      	cmp	r3, #1
    1844:	d111      	bne.n	186a <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
    1846:	4b1b      	ldr	r3, [pc, #108]	; (18b4 <I2cWriteDataWait+0xcc>)
    1848:	4798      	blx	r3
    184a:	1e03      	subs	r3, r0, #0
    184c:	d011      	beq.n	1872 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
    184e:	2000      	movs	r0, #0
    1850:	4b19      	ldr	r3, [pc, #100]	; (18b8 <I2cWriteDataWait+0xd0>)
    1852:	4798      	blx	r3
            if (error != ERROR_NONE) {
    1854:	68fb      	ldr	r3, [r7, #12]
    1856:	2b00      	cmp	r3, #0
    1858:	d003      	beq.n	1862 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
    185a:	2321      	movs	r3, #33	; 0x21
    185c:	425b      	negs	r3, r3
    185e:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
    1860:	e014      	b.n	188c <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
    1862:	2303      	movs	r3, #3
    1864:	425b      	negs	r3, r3
    1866:	60fb      	str	r3, [r7, #12]
            goto exitError0;
    1868:	e010      	b.n	188c <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
    186a:	2303      	movs	r3, #3
    186c:	425b      	negs	r3, r3
    186e:	60fb      	str	r3, [r7, #12]
        goto exitError0;
    1870:	e00c      	b.n	188c <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
    1872:	4b12      	ldr	r3, [pc, #72]	; (18bc <I2cWriteDataWait+0xd4>)
    1874:	4798      	blx	r3
    1876:	0002      	movs	r2, r0
    1878:	68fb      	ldr	r3, [r7, #12]
    187a:	4313      	orrs	r3, r2
    187c:	60fb      	str	r3, [r7, #12]
    187e:	e002      	b.n	1886 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
    1880:	46c0      	nop			; (mov r8, r8)
    1882:	e000      	b.n	1886 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
    1884:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
    1886:	68fb      	ldr	r3, [r7, #12]
    1888:	e007      	b.n	189a <I2cWriteDataWait+0xb2>
        goto exitError0;
    188a:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
    188c:	4b0b      	ldr	r3, [pc, #44]	; (18bc <I2cWriteDataWait+0xd4>)
    188e:	4798      	blx	r3
    1890:	0002      	movs	r2, r0
    1892:	68fb      	ldr	r3, [r7, #12]
    1894:	4313      	orrs	r3, r2
    1896:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
    1898:	68fb      	ldr	r3, [r7, #12]
}
    189a:	0018      	movs	r0, r3
    189c:	46bd      	mov	sp, r7
    189e:	b004      	add	sp, #16
    18a0:	bd80      	pop	{r7, pc}
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	00001759 	.word	0x00001759
    18a8:	00001791 	.word	0x00001791
    18ac:	000016a9 	.word	0x000016a9
    18b0:	00006f81 	.word	0x00006f81
    18b4:	000017b5 	.word	0x000017b5
    18b8:	000017c9 	.word	0x000017c9
    18bc:	00001721 	.word	0x00001721

000018c0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    18c0:	b580      	push	{r7, lr}
    18c2:	b084      	sub	sp, #16
    18c4:	af00      	add	r7, sp, #0
    18c6:	0002      	movs	r2, r0
    18c8:	1dfb      	adds	r3, r7, #7
    18ca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    18cc:	230f      	movs	r3, #15
    18ce:	18fb      	adds	r3, r7, r3
    18d0:	1dfa      	adds	r2, r7, #7
    18d2:	7812      	ldrb	r2, [r2, #0]
    18d4:	09d2      	lsrs	r2, r2, #7
    18d6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    18d8:	230e      	movs	r3, #14
    18da:	18fb      	adds	r3, r7, r3
    18dc:	1dfa      	adds	r2, r7, #7
    18de:	7812      	ldrb	r2, [r2, #0]
    18e0:	0952      	lsrs	r2, r2, #5
    18e2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    18e4:	4b0d      	ldr	r3, [pc, #52]	; (191c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    18e6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    18e8:	230f      	movs	r3, #15
    18ea:	18fb      	adds	r3, r7, r3
    18ec:	781b      	ldrb	r3, [r3, #0]
    18ee:	2b00      	cmp	r3, #0
    18f0:	d10f      	bne.n	1912 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    18f2:	230f      	movs	r3, #15
    18f4:	18fb      	adds	r3, r7, r3
    18f6:	781b      	ldrb	r3, [r3, #0]
    18f8:	009b      	lsls	r3, r3, #2
    18fa:	2210      	movs	r2, #16
    18fc:	4694      	mov	ip, r2
    18fe:	44bc      	add	ip, r7
    1900:	4463      	add	r3, ip
    1902:	3b08      	subs	r3, #8
    1904:	681a      	ldr	r2, [r3, #0]
    1906:	230e      	movs	r3, #14
    1908:	18fb      	adds	r3, r7, r3
    190a:	781b      	ldrb	r3, [r3, #0]
    190c:	01db      	lsls	r3, r3, #7
    190e:	18d3      	adds	r3, r2, r3
    1910:	e000      	b.n	1914 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1912:	2300      	movs	r3, #0
	}
}
    1914:	0018      	movs	r0, r3
    1916:	46bd      	mov	sp, r7
    1918:	b004      	add	sp, #16
    191a:	bd80      	pop	{r7, pc}
    191c:	41004400 	.word	0x41004400

00001920 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1920:	b580      	push	{r7, lr}
    1922:	b082      	sub	sp, #8
    1924:	af00      	add	r7, sp, #0
    1926:	0002      	movs	r2, r0
    1928:	1dfb      	adds	r3, r7, #7
    192a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    192c:	1dfb      	adds	r3, r7, #7
    192e:	781b      	ldrb	r3, [r3, #0]
    1930:	0018      	movs	r0, r3
    1932:	4b03      	ldr	r3, [pc, #12]	; (1940 <port_get_group_from_gpio_pin+0x20>)
    1934:	4798      	blx	r3
    1936:	0003      	movs	r3, r0
}
    1938:	0018      	movs	r0, r3
    193a:	46bd      	mov	sp, r7
    193c:	b002      	add	sp, #8
    193e:	bd80      	pop	{r7, pc}
    1940:	000018c1 	.word	0x000018c1

00001944 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1944:	b580      	push	{r7, lr}
    1946:	b084      	sub	sp, #16
    1948:	af00      	add	r7, sp, #0
    194a:	0002      	movs	r2, r0
    194c:	1dfb      	adds	r3, r7, #7
    194e:	701a      	strb	r2, [r3, #0]
    1950:	1dbb      	adds	r3, r7, #6
    1952:	1c0a      	adds	r2, r1, #0
    1954:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1956:	1dfb      	adds	r3, r7, #7
    1958:	781b      	ldrb	r3, [r3, #0]
    195a:	0018      	movs	r0, r3
    195c:	4b0d      	ldr	r3, [pc, #52]	; (1994 <port_pin_set_output_level+0x50>)
    195e:	4798      	blx	r3
    1960:	0003      	movs	r3, r0
    1962:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1964:	1dfb      	adds	r3, r7, #7
    1966:	781b      	ldrb	r3, [r3, #0]
    1968:	221f      	movs	r2, #31
    196a:	4013      	ands	r3, r2
    196c:	2201      	movs	r2, #1
    196e:	409a      	lsls	r2, r3
    1970:	0013      	movs	r3, r2
    1972:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1974:	1dbb      	adds	r3, r7, #6
    1976:	781b      	ldrb	r3, [r3, #0]
    1978:	2b00      	cmp	r3, #0
    197a:	d003      	beq.n	1984 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    197c:	68fb      	ldr	r3, [r7, #12]
    197e:	68ba      	ldr	r2, [r7, #8]
    1980:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1982:	e002      	b.n	198a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1984:	68fb      	ldr	r3, [r7, #12]
    1986:	68ba      	ldr	r2, [r7, #8]
    1988:	615a      	str	r2, [r3, #20]
}
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	46bd      	mov	sp, r7
    198e:	b004      	add	sp, #16
    1990:	bd80      	pop	{r7, pc}
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	00001921 	.word	0x00001921

00001998 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
    1998:	b580      	push	{r7, lr}
    199a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
    199c:	4b02      	ldr	r3, [pc, #8]	; (19a8 <init_state+0x10>)
    199e:	2200      	movs	r2, #0
    19a0:	701a      	strb	r2, [r3, #0]
}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	46bd      	mov	sp, r7
    19a6:	bd80      	pop	{r7, pc}
    19a8:	20000489 	.word	0x20000489

000019ac <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
    19ac:	b580      	push	{r7, lr}
    19ae:	b082      	sub	sp, #8
    19b0:	af00      	add	r7, sp, #0
    19b2:	0002      	movs	r2, r0
    19b4:	1dfb      	adds	r3, r7, #7
    19b6:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
    19b8:	1dfb      	adds	r3, r7, #7
    19ba:	781b      	ldrb	r3, [r3, #0]
    19bc:	b25b      	sxtb	r3, r3
    19be:	43db      	mvns	r3, r3
    19c0:	b25b      	sxtb	r3, r3
    19c2:	4a06      	ldr	r2, [pc, #24]	; (19dc <clear_state+0x30>)
    19c4:	7812      	ldrb	r2, [r2, #0]
    19c6:	b252      	sxtb	r2, r2
    19c8:	4013      	ands	r3, r2
    19ca:	b25b      	sxtb	r3, r3
    19cc:	b2da      	uxtb	r2, r3
    19ce:	4b03      	ldr	r3, [pc, #12]	; (19dc <clear_state+0x30>)
    19d0:	701a      	strb	r2, [r3, #0]
}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	46bd      	mov	sp, r7
    19d6:	b002      	add	sp, #8
    19d8:	bd80      	pop	{r7, pc}
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	20000489 	.word	0x20000489

000019e0 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
    19e0:	b580      	push	{r7, lr}
    19e2:	b082      	sub	sp, #8
    19e4:	af00      	add	r7, sp, #0
    19e6:	0002      	movs	r2, r0
    19e8:	1dfb      	adds	r3, r7, #7
    19ea:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
    19ec:	4b05      	ldr	r3, [pc, #20]	; (1a04 <add_state+0x24>)
    19ee:	781a      	ldrb	r2, [r3, #0]
    19f0:	1dfb      	adds	r3, r7, #7
    19f2:	781b      	ldrb	r3, [r3, #0]
    19f4:	4313      	orrs	r3, r2
    19f6:	b2da      	uxtb	r2, r3
    19f8:	4b02      	ldr	r3, [pc, #8]	; (1a04 <add_state+0x24>)
    19fa:	701a      	strb	r2, [r3, #0]
}
    19fc:	46c0      	nop			; (mov r8, r8)
    19fe:	46bd      	mov	sp, r7
    1a00:	b002      	add	sp, #8
    1a02:	bd80      	pop	{r7, pc}
    1a04:	20000489 	.word	0x20000489

00001a08 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
    1a08:	b580      	push	{r7, lr}
    1a0a:	b082      	sub	sp, #8
    1a0c:	af00      	add	r7, sp, #0
    1a0e:	0002      	movs	r2, r0
    1a10:	1dfb      	adds	r3, r7, #7
    1a12:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
    1a14:	4b06      	ldr	r3, [pc, #24]	; (1a30 <is_state_set+0x28>)
    1a16:	781b      	ldrb	r3, [r3, #0]
    1a18:	1dfa      	adds	r2, r7, #7
    1a1a:	7812      	ldrb	r2, [r2, #0]
    1a1c:	4013      	ands	r3, r2
    1a1e:	b2db      	uxtb	r3, r3
    1a20:	1e5a      	subs	r2, r3, #1
    1a22:	4193      	sbcs	r3, r2
    1a24:	b2db      	uxtb	r3, r3
}
    1a26:	0018      	movs	r0, r3
    1a28:	46bd      	mov	sp, r7
    1a2a:	b002      	add	sp, #8
    1a2c:	bd80      	pop	{r7, pc}
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	20000489 	.word	0x20000489

00001a34 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
    1a34:	b590      	push	{r4, r7, lr}
    1a36:	b085      	sub	sp, #20
    1a38:	af00      	add	r7, sp, #0
    1a3a:	6078      	str	r0, [r7, #4]
    1a3c:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
    1a3e:	687b      	ldr	r3, [r7, #4]
    1a40:	2b00      	cmp	r3, #0
    1a42:	d002      	beq.n	1a4a <is_exist_file+0x16>
    1a44:	683b      	ldr	r3, [r7, #0]
    1a46:	2b00      	cmp	r3, #0
    1a48:	d101      	bne.n	1a4e <is_exist_file+0x1a>
        return false;
    1a4a:	2300      	movs	r3, #0
    1a4c:	e013      	b.n	1a76 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    1a4e:	230f      	movs	r3, #15
    1a50:	18fc      	adds	r4, r7, r3
    1a52:	6839      	ldr	r1, [r7, #0]
    1a54:	4b0a      	ldr	r3, [pc, #40]	; (1a80 <is_exist_file+0x4c>)
    1a56:	2200      	movs	r2, #0
    1a58:	0018      	movs	r0, r3
    1a5a:	4b0a      	ldr	r3, [pc, #40]	; (1a84 <is_exist_file+0x50>)
    1a5c:	4798      	blx	r3
    1a5e:	0003      	movs	r3, r0
    1a60:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
    1a62:	4b07      	ldr	r3, [pc, #28]	; (1a80 <is_exist_file+0x4c>)
    1a64:	0018      	movs	r0, r3
    1a66:	4b08      	ldr	r3, [pc, #32]	; (1a88 <is_exist_file+0x54>)
    1a68:	4798      	blx	r3
    return (ret == FR_OK);
    1a6a:	230f      	movs	r3, #15
    1a6c:	18fb      	adds	r3, r7, r3
    1a6e:	781b      	ldrb	r3, [r3, #0]
    1a70:	425a      	negs	r2, r3
    1a72:	4153      	adcs	r3, r2
    1a74:	b2db      	uxtb	r3, r3
}
    1a76:	0018      	movs	r0, r3
    1a78:	46bd      	mov	sp, r7
    1a7a:	b005      	add	sp, #20
    1a7c:	bd90      	pop	{r4, r7, pc}
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	200006bc 	.word	0x200006bc
    1a84:	000194c1 	.word	0x000194c1
    1a88:	00019ec1 	.word	0x00019ec1

00001a8c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b09e      	sub	sp, #120	; 0x78
    1a90:	af00      	add	r7, sp, #0
    1a92:	60f8      	str	r0, [r7, #12]
    1a94:	60b9      	str	r1, [r7, #8]
    1a96:	1dfb      	adds	r3, r7, #7
    1a98:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
    1a9a:	2376      	movs	r3, #118	; 0x76
    1a9c:	18fb      	adds	r3, r7, r3
    1a9e:	2201      	movs	r2, #1
    1aa0:	801a      	strh	r2, [r3, #0]
    1aa2:	2374      	movs	r3, #116	; 0x74
    1aa4:	18fb      	adds	r3, r7, r3
    1aa6:	2200      	movs	r2, #0
    1aa8:	801a      	strh	r2, [r3, #0]
    1aaa:	236e      	movs	r3, #110	; 0x6e
    1aac:	18fb      	adds	r3, r7, r3
    1aae:	2200      	movs	r2, #0
    1ab0:	801a      	strh	r2, [r3, #0]
    1ab2:	2372      	movs	r3, #114	; 0x72
    1ab4:	18fb      	adds	r3, r7, r3
    1ab6:	2200      	movs	r2, #0
    1ab8:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    1aba:	2324      	movs	r3, #36	; 0x24
    1abc:	18fb      	adds	r3, r7, r3
    1abe:	0018      	movs	r0, r3
    1ac0:	2341      	movs	r3, #65	; 0x41
    1ac2:	001a      	movs	r2, r3
    1ac4:	2100      	movs	r1, #0
    1ac6:	4b92      	ldr	r3, [pc, #584]	; (1d10 <rename_to_unique+0x284>)
    1ac8:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    1aca:	2318      	movs	r3, #24
    1acc:	18fb      	adds	r3, r7, r3
    1ace:	0018      	movs	r0, r3
    1ad0:	2309      	movs	r3, #9
    1ad2:	001a      	movs	r2, r3
    1ad4:	2100      	movs	r1, #0
    1ad6:	4b8e      	ldr	r3, [pc, #568]	; (1d10 <rename_to_unique+0x284>)
    1ad8:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
    1ada:	2314      	movs	r3, #20
    1adc:	18fb      	adds	r3, r7, r3
    1ade:	2200      	movs	r2, #0
    1ae0:	601a      	str	r2, [r3, #0]
    char *p = NULL;
    1ae2:	2300      	movs	r3, #0
    1ae4:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
    1ae6:	2371      	movs	r3, #113	; 0x71
    1ae8:	18fb      	adds	r3, r7, r3
    1aea:	2200      	movs	r2, #0
    1aec:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
    1aee:	68bb      	ldr	r3, [r7, #8]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d101      	bne.n	1af8 <rename_to_unique+0x6c>
        return false;
    1af4:	2300      	movs	r3, #0
    1af6:	e106      	b.n	1d06 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
    1af8:	68ba      	ldr	r2, [r7, #8]
    1afa:	68fb      	ldr	r3, [r7, #12]
    1afc:	0011      	movs	r1, r2
    1afe:	0018      	movs	r0, r3
    1b00:	4b84      	ldr	r3, [pc, #528]	; (1d14 <rename_to_unique+0x288>)
    1b02:	4798      	blx	r3
    1b04:	0003      	movs	r3, r0
    1b06:	001a      	movs	r2, r3
    1b08:	2301      	movs	r3, #1
    1b0a:	4053      	eors	r3, r2
    1b0c:	b2db      	uxtb	r3, r3
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d001      	beq.n	1b16 <rename_to_unique+0x8a>
        return true;
    1b12:	2301      	movs	r3, #1
    1b14:	e0f7      	b.n	1d06 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    1b16:	68bb      	ldr	r3, [r7, #8]
    1b18:	0018      	movs	r0, r3
    1b1a:	4b7f      	ldr	r3, [pc, #508]	; (1d18 <rename_to_unique+0x28c>)
    1b1c:	4798      	blx	r3
    1b1e:	0003      	movs	r3, r0
    1b20:	2b40      	cmp	r3, #64	; 0x40
    1b22:	d901      	bls.n	1b28 <rename_to_unique+0x9c>
        return false;
    1b24:	2300      	movs	r3, #0
    1b26:	e0ee      	b.n	1d06 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
    1b28:	68bb      	ldr	r3, [r7, #8]
    1b2a:	212e      	movs	r1, #46	; 0x2e
    1b2c:	0018      	movs	r0, r3
    1b2e:	4b7b      	ldr	r3, [pc, #492]	; (1d1c <rename_to_unique+0x290>)
    1b30:	4798      	blx	r3
    1b32:	0003      	movs	r3, r0
    1b34:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
    1b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d052      	beq.n	1be2 <rename_to_unique+0x156>
        ext_len = strlen(p);
    1b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1b3e:	0018      	movs	r0, r3
    1b40:	4b75      	ldr	r3, [pc, #468]	; (1d18 <rename_to_unique+0x28c>)
    1b42:	4798      	blx	r3
    1b44:	0002      	movs	r2, r0
    1b46:	236e      	movs	r3, #110	; 0x6e
    1b48:	18fb      	adds	r3, r7, r3
    1b4a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    1b4c:	236e      	movs	r3, #110	; 0x6e
    1b4e:	18fb      	adds	r3, r7, r3
    1b50:	881b      	ldrh	r3, [r3, #0]
    1b52:	2b07      	cmp	r3, #7
    1b54:	d837      	bhi.n	1bc6 <rename_to_unique+0x13a>
            valid_ext = true;
    1b56:	2371      	movs	r3, #113	; 0x71
    1b58:	18fb      	adds	r3, r7, r3
    1b5a:	2201      	movs	r2, #1
    1b5c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
    1b5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1b60:	2318      	movs	r3, #24
    1b62:	18fb      	adds	r3, r7, r3
    1b64:	0011      	movs	r1, r2
    1b66:	0018      	movs	r0, r3
    1b68:	4b6d      	ldr	r3, [pc, #436]	; (1d20 <rename_to_unique+0x294>)
    1b6a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    1b6c:	68bb      	ldr	r3, [r7, #8]
    1b6e:	0018      	movs	r0, r3
    1b70:	4b69      	ldr	r3, [pc, #420]	; (1d18 <rename_to_unique+0x28c>)
    1b72:	4798      	blx	r3
    1b74:	0002      	movs	r2, r0
    1b76:	236e      	movs	r3, #110	; 0x6e
    1b78:	18fb      	adds	r3, r7, r3
    1b7a:	881b      	ldrh	r3, [r3, #0]
    1b7c:	1ad3      	subs	r3, r2, r3
    1b7e:	2b3c      	cmp	r3, #60	; 0x3c
    1b80:	d911      	bls.n	1ba6 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    1b82:	2374      	movs	r3, #116	; 0x74
    1b84:	18fb      	adds	r3, r7, r3
    1b86:	226e      	movs	r2, #110	; 0x6e
    1b88:	18ba      	adds	r2, r7, r2
    1b8a:	8812      	ldrh	r2, [r2, #0]
    1b8c:	213c      	movs	r1, #60	; 0x3c
    1b8e:	1a8a      	subs	r2, r1, r2
    1b90:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    1b92:	2374      	movs	r3, #116	; 0x74
    1b94:	18fb      	adds	r3, r7, r3
    1b96:	881a      	ldrh	r2, [r3, #0]
    1b98:	68b9      	ldr	r1, [r7, #8]
    1b9a:	2324      	movs	r3, #36	; 0x24
    1b9c:	18fb      	adds	r3, r7, r3
    1b9e:	0018      	movs	r0, r3
    1ba0:	4b60      	ldr	r3, [pc, #384]	; (1d24 <rename_to_unique+0x298>)
    1ba2:	4798      	blx	r3
    1ba4:	e02a      	b.n	1bfc <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
    1ba6:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1ba8:	68bb      	ldr	r3, [r7, #8]
    1baa:	1ad2      	subs	r2, r2, r3
    1bac:	2374      	movs	r3, #116	; 0x74
    1bae:	18fb      	adds	r3, r7, r3
    1bb0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
    1bb2:	2374      	movs	r3, #116	; 0x74
    1bb4:	18fb      	adds	r3, r7, r3
    1bb6:	881a      	ldrh	r2, [r3, #0]
    1bb8:	68b9      	ldr	r1, [r7, #8]
    1bba:	2324      	movs	r3, #36	; 0x24
    1bbc:	18fb      	adds	r3, r7, r3
    1bbe:	0018      	movs	r0, r3
    1bc0:	4b58      	ldr	r3, [pc, #352]	; (1d24 <rename_to_unique+0x298>)
    1bc2:	4798      	blx	r3
    1bc4:	e01a      	b.n	1bfc <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    1bc6:	2374      	movs	r3, #116	; 0x74
    1bc8:	18fb      	adds	r3, r7, r3
    1bca:	223c      	movs	r2, #60	; 0x3c
    1bcc:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
    1bce:	2374      	movs	r3, #116	; 0x74
    1bd0:	18fb      	adds	r3, r7, r3
    1bd2:	881a      	ldrh	r2, [r3, #0]
    1bd4:	68b9      	ldr	r1, [r7, #8]
    1bd6:	2324      	movs	r3, #36	; 0x24
    1bd8:	18fb      	adds	r3, r7, r3
    1bda:	0018      	movs	r0, r3
    1bdc:	4b51      	ldr	r3, [pc, #324]	; (1d24 <rename_to_unique+0x298>)
    1bde:	4798      	blx	r3
    1be0:	e00c      	b.n	1bfc <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    1be2:	2374      	movs	r3, #116	; 0x74
    1be4:	18fb      	adds	r3, r7, r3
    1be6:	223c      	movs	r2, #60	; 0x3c
    1be8:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
    1bea:	2374      	movs	r3, #116	; 0x74
    1bec:	18fb      	adds	r3, r7, r3
    1bee:	881a      	ldrh	r2, [r3, #0]
    1bf0:	68b9      	ldr	r1, [r7, #8]
    1bf2:	2324      	movs	r3, #36	; 0x24
    1bf4:	18fb      	adds	r3, r7, r3
    1bf6:	0018      	movs	r0, r3
    1bf8:	4b4a      	ldr	r3, [pc, #296]	; (1d24 <rename_to_unique+0x298>)
    1bfa:	4798      	blx	r3
    }

    name[name_len++] = '-';
    1bfc:	2374      	movs	r3, #116	; 0x74
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	881b      	ldrh	r3, [r3, #0]
    1c02:	2274      	movs	r2, #116	; 0x74
    1c04:	18ba      	adds	r2, r7, r2
    1c06:	1c59      	adds	r1, r3, #1
    1c08:	8011      	strh	r1, [r2, #0]
    1c0a:	001a      	movs	r2, r3
    1c0c:	2324      	movs	r3, #36	; 0x24
    1c0e:	18fb      	adds	r3, r7, r3
    1c10:	212d      	movs	r1, #45	; 0x2d
    1c12:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    1c14:	2376      	movs	r3, #118	; 0x76
    1c16:	18fb      	adds	r3, r7, r3
    1c18:	2200      	movs	r2, #0
    1c1a:	801a      	strh	r2, [r3, #0]
    1c1c:	2372      	movs	r3, #114	; 0x72
    1c1e:	18fb      	adds	r3, r7, r3
    1c20:	2201      	movs	r2, #1
    1c22:	801a      	strh	r2, [r3, #0]
    1c24:	e010      	b.n	1c48 <rename_to_unique+0x1bc>
        count *= 10;
    1c26:	2372      	movs	r3, #114	; 0x72
    1c28:	18fa      	adds	r2, r7, r3
    1c2a:	2372      	movs	r3, #114	; 0x72
    1c2c:	18fb      	adds	r3, r7, r3
    1c2e:	881b      	ldrh	r3, [r3, #0]
    1c30:	1c19      	adds	r1, r3, #0
    1c32:	0089      	lsls	r1, r1, #2
    1c34:	18cb      	adds	r3, r1, r3
    1c36:	18db      	adds	r3, r3, r3
    1c38:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
    1c3a:	2376      	movs	r3, #118	; 0x76
    1c3c:	18fb      	adds	r3, r7, r3
    1c3e:	881a      	ldrh	r2, [r3, #0]
    1c40:	2376      	movs	r3, #118	; 0x76
    1c42:	18fb      	adds	r3, r7, r3
    1c44:	3201      	adds	r2, #1
    1c46:	801a      	strh	r2, [r3, #0]
    1c48:	2376      	movs	r3, #118	; 0x76
    1c4a:	18fb      	adds	r3, r7, r3
    1c4c:	881b      	ldrh	r3, [r3, #0]
    1c4e:	2b02      	cmp	r3, #2
    1c50:	d9e9      	bls.n	1c26 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
    1c52:	2376      	movs	r3, #118	; 0x76
    1c54:	18fb      	adds	r3, r7, r3
    1c56:	2201      	movs	r2, #1
    1c58:	801a      	strh	r2, [r3, #0]
    1c5a:	e04b      	b.n	1cf4 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    1c5c:	2376      	movs	r3, #118	; 0x76
    1c5e:	18fb      	adds	r3, r7, r3
    1c60:	881a      	ldrh	r2, [r3, #0]
    1c62:	4931      	ldr	r1, [pc, #196]	; (1d28 <rename_to_unique+0x29c>)
    1c64:	2314      	movs	r3, #20
    1c66:	18fb      	adds	r3, r7, r3
    1c68:	0018      	movs	r0, r3
    1c6a:	4b30      	ldr	r3, [pc, #192]	; (1d2c <rename_to_unique+0x2a0>)
    1c6c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
    1c6e:	2374      	movs	r3, #116	; 0x74
    1c70:	18fb      	adds	r3, r7, r3
    1c72:	881b      	ldrh	r3, [r3, #0]
    1c74:	2224      	movs	r2, #36	; 0x24
    1c76:	18ba      	adds	r2, r7, r2
    1c78:	18d3      	adds	r3, r2, r3
    1c7a:	2214      	movs	r2, #20
    1c7c:	18b9      	adds	r1, r7, r2
    1c7e:	2203      	movs	r2, #3
    1c80:	0018      	movs	r0, r3
    1c82:	4b28      	ldr	r3, [pc, #160]	; (1d24 <rename_to_unique+0x298>)
    1c84:	4798      	blx	r3
        if (valid_ext) {
    1c86:	2371      	movs	r3, #113	; 0x71
    1c88:	18fb      	adds	r3, r7, r3
    1c8a:	781b      	ldrb	r3, [r3, #0]
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d00c      	beq.n	1caa <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
    1c90:	2374      	movs	r3, #116	; 0x74
    1c92:	18fb      	adds	r3, r7, r3
    1c94:	881b      	ldrh	r3, [r3, #0]
    1c96:	3303      	adds	r3, #3
    1c98:	2224      	movs	r2, #36	; 0x24
    1c9a:	18ba      	adds	r2, r7, r2
    1c9c:	18d3      	adds	r3, r2, r3
    1c9e:	2218      	movs	r2, #24
    1ca0:	18ba      	adds	r2, r7, r2
    1ca2:	0011      	movs	r1, r2
    1ca4:	0018      	movs	r0, r3
    1ca6:	4b1e      	ldr	r3, [pc, #120]	; (1d20 <rename_to_unique+0x294>)
    1ca8:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
    1caa:	2324      	movs	r3, #36	; 0x24
    1cac:	18fa      	adds	r2, r7, r3
    1cae:	68fb      	ldr	r3, [r7, #12]
    1cb0:	0011      	movs	r1, r2
    1cb2:	0018      	movs	r0, r3
    1cb4:	4b17      	ldr	r3, [pc, #92]	; (1d14 <rename_to_unique+0x288>)
    1cb6:	4798      	blx	r3
    1cb8:	0003      	movs	r3, r0
    1cba:	001a      	movs	r2, r3
    1cbc:	2301      	movs	r3, #1
    1cbe:	4053      	eors	r3, r2
    1cc0:	b2db      	uxtb	r3, r3
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d00f      	beq.n	1ce6 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
    1cc6:	1dfb      	adds	r3, r7, #7
    1cc8:	781a      	ldrb	r2, [r3, #0]
    1cca:	68bb      	ldr	r3, [r7, #8]
    1ccc:	2100      	movs	r1, #0
    1cce:	0018      	movs	r0, r3
    1cd0:	4b0f      	ldr	r3, [pc, #60]	; (1d10 <rename_to_unique+0x284>)
    1cd2:	4798      	blx	r3
            strcpy(file_path_name, name);
    1cd4:	2324      	movs	r3, #36	; 0x24
    1cd6:	18fa      	adds	r2, r7, r3
    1cd8:	68bb      	ldr	r3, [r7, #8]
    1cda:	0011      	movs	r1, r2
    1cdc:	0018      	movs	r0, r3
    1cde:	4b10      	ldr	r3, [pc, #64]	; (1d20 <rename_to_unique+0x294>)
    1ce0:	4798      	blx	r3
            return true;
    1ce2:	2301      	movs	r3, #1
    1ce4:	e00f      	b.n	1d06 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
    1ce6:	2376      	movs	r3, #118	; 0x76
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	881a      	ldrh	r2, [r3, #0]
    1cec:	2376      	movs	r3, #118	; 0x76
    1cee:	18fb      	adds	r3, r7, r3
    1cf0:	3201      	adds	r2, #1
    1cf2:	801a      	strh	r2, [r3, #0]
    1cf4:	2376      	movs	r3, #118	; 0x76
    1cf6:	18fa      	adds	r2, r7, r3
    1cf8:	2372      	movs	r3, #114	; 0x72
    1cfa:	18fb      	adds	r3, r7, r3
    1cfc:	8812      	ldrh	r2, [r2, #0]
    1cfe:	881b      	ldrh	r3, [r3, #0]
    1d00:	429a      	cmp	r2, r3
    1d02:	d3ab      	bcc.n	1c5c <rename_to_unique+0x1d0>
        }
    }
    return false;
    1d04:	2300      	movs	r3, #0
}
    1d06:	0018      	movs	r0, r3
    1d08:	46bd      	mov	sp, r7
    1d0a:	b01e      	add	sp, #120	; 0x78
    1d0c:	bd80      	pop	{r7, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	00020123 	.word	0x00020123
    1d14:	00001a35 	.word	0x00001a35
    1d18:	000204db 	.word	0x000204db
    1d1c:	00020535 	.word	0x00020535
    1d20:	0002048f 	.word	0x0002048f
    1d24:	0002050b 	.word	0x0002050b
    1d28:	00021788 	.word	0x00021788
    1d2c:	000203e1 	.word	0x000203e1

00001d30 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
    1d30:	b590      	push	{r4, r7, lr}
    1d32:	b085      	sub	sp, #20
    1d34:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
    1d36:	2001      	movs	r0, #1
    1d38:	4b23      	ldr	r3, [pc, #140]	; (1dc8 <start_download+0x98>)
    1d3a:	4798      	blx	r3
    1d3c:	0003      	movs	r3, r0
    1d3e:	001a      	movs	r2, r3
    1d40:	2301      	movs	r3, #1
    1d42:	4053      	eors	r3, r2
    1d44:	b2db      	uxtb	r3, r3
    1d46:	2b00      	cmp	r3, #0
    1d48:	d005      	beq.n	1d56 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
    1d4a:	4b20      	ldr	r3, [pc, #128]	; (1dcc <start_download+0x9c>)
    1d4c:	0019      	movs	r1, r3
    1d4e:	2001      	movs	r0, #1
    1d50:	4b1f      	ldr	r3, [pc, #124]	; (1dd0 <start_download+0xa0>)
    1d52:	4798      	blx	r3
        return;
    1d54:	e034      	b.n	1dc0 <start_download+0x90>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
    1d56:	2002      	movs	r0, #2
    1d58:	4b1b      	ldr	r3, [pc, #108]	; (1dc8 <start_download+0x98>)
    1d5a:	4798      	blx	r3
    1d5c:	0003      	movs	r3, r0
    1d5e:	001a      	movs	r2, r3
    1d60:	2301      	movs	r3, #1
    1d62:	4053      	eors	r3, r2
    1d64:	b2db      	uxtb	r3, r3
    1d66:	2b00      	cmp	r3, #0
    1d68:	d005      	beq.n	1d76 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
    1d6a:	4b1a      	ldr	r3, [pc, #104]	; (1dd4 <start_download+0xa4>)
    1d6c:	0019      	movs	r1, r3
    1d6e:	2001      	movs	r0, #1
    1d70:	4b17      	ldr	r3, [pc, #92]	; (1dd0 <start_download+0xa0>)
    1d72:	4798      	blx	r3
        return;
    1d74:	e024      	b.n	1dc0 <start_download+0x90>
    }

    if (is_state_set(GET_REQUESTED)) {
    1d76:	2004      	movs	r0, #4
    1d78:	4b13      	ldr	r3, [pc, #76]	; (1dc8 <start_download+0x98>)
    1d7a:	4798      	blx	r3
    1d7c:	1e03      	subs	r3, r0, #0
    1d7e:	d005      	beq.n	1d8c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
    1d80:	4b15      	ldr	r3, [pc, #84]	; (1dd8 <start_download+0xa8>)
    1d82:	0019      	movs	r1, r3
    1d84:	2001      	movs	r0, #1
    1d86:	4b12      	ldr	r3, [pc, #72]	; (1dd0 <start_download+0xa0>)
    1d88:	4798      	blx	r3
        return;
    1d8a:	e019      	b.n	1dc0 <start_download+0x90>
    }

    if (is_state_set(DOWNLOADING)) {
    1d8c:	2008      	movs	r0, #8
    1d8e:	4b0e      	ldr	r3, [pc, #56]	; (1dc8 <start_download+0x98>)
    1d90:	4798      	blx	r3
    1d92:	1e03      	subs	r3, r0, #0
    1d94:	d005      	beq.n	1da2 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
    1d96:	4b11      	ldr	r3, [pc, #68]	; (1ddc <start_download+0xac>)
    1d98:	0019      	movs	r1, r3
    1d9a:	2001      	movs	r0, #1
    1d9c:	4b0c      	ldr	r3, [pc, #48]	; (1dd0 <start_download+0xa0>)
    1d9e:	4798      	blx	r3
        return;
    1da0:	e00e      	b.n	1dc0 <start_download+0x90>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
    1da2:	4b0f      	ldr	r3, [pc, #60]	; (1de0 <start_download+0xb0>)
    1da4:	0019      	movs	r1, r3
    1da6:	2001      	movs	r0, #1
    1da8:	4b09      	ldr	r3, [pc, #36]	; (1dd0 <start_download+0xa0>)
    1daa:	4798      	blx	r3
    int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    1dac:	490d      	ldr	r1, [pc, #52]	; (1de4 <start_download+0xb4>)
    1dae:	480e      	ldr	r0, [pc, #56]	; (1de8 <start_download+0xb8>)
    1db0:	2300      	movs	r3, #0
    1db2:	9300      	str	r3, [sp, #0]
    1db4:	2300      	movs	r3, #0
    1db6:	2201      	movs	r2, #1
    1db8:	4c0c      	ldr	r4, [pc, #48]	; (1dec <start_download+0xbc>)
    1dba:	47a0      	blx	r4
    1dbc:	0003      	movs	r3, r0
    1dbe:	607b      	str	r3, [r7, #4]
}
    1dc0:	46bd      	mov	sp, r7
    1dc2:	b003      	add	sp, #12
    1dc4:	bd90      	pop	{r4, r7, pc}
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	00001a09 	.word	0x00001a09
    1dcc:	00021790 	.word	0x00021790
    1dd0:	00009a15 	.word	0x00009a15
    1dd4:	000217bc 	.word	0x000217bc
    1dd8:	000217e8 	.word	0x000217e8
    1ddc:	00021814 	.word	0x00021814
    1de0:	00021840 	.word	0x00021840
    1de4:	0002186c 	.word	0x0002186c
    1de8:	20004288 	.word	0x20004288
    1dec:	0001cb15 	.word	0x0001cb15

00001df0 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
    1df0:	b5b0      	push	{r4, r5, r7, lr}
    1df2:	b086      	sub	sp, #24
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
    1df8:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
    1dfa:	687b      	ldr	r3, [r7, #4]
    1dfc:	2b00      	cmp	r3, #0
    1dfe:	d002      	beq.n	1e06 <store_file_packet+0x16>
    1e00:	683b      	ldr	r3, [r7, #0]
    1e02:	2b00      	cmp	r3, #0
    1e04:	d105      	bne.n	1e12 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
    1e06:	4b58      	ldr	r3, [pc, #352]	; (1f68 <store_file_packet+0x178>)
    1e08:	0019      	movs	r1, r3
    1e0a:	2001      	movs	r0, #1
    1e0c:	4b57      	ldr	r3, [pc, #348]	; (1f6c <store_file_packet+0x17c>)
    1e0e:	4798      	blx	r3
        return;
    1e10:	e0a6      	b.n	1f60 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
    1e12:	2008      	movs	r0, #8
    1e14:	4b56      	ldr	r3, [pc, #344]	; (1f70 <store_file_packet+0x180>)
    1e16:	4798      	blx	r3
    1e18:	0003      	movs	r3, r0
    1e1a:	001a      	movs	r2, r3
    1e1c:	2301      	movs	r3, #1
    1e1e:	4053      	eors	r3, r2
    1e20:	b2db      	uxtb	r3, r3
    1e22:	2b00      	cmp	r3, #0
    1e24:	d055      	beq.n	1ed2 <store_file_packet+0xe2>
        char *cp = NULL;
    1e26:	2300      	movs	r3, #0
    1e28:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    1e2a:	4b52      	ldr	r3, [pc, #328]	; (1f74 <store_file_packet+0x184>)
    1e2c:	2230      	movs	r2, #48	; 0x30
    1e2e:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
    1e30:	4b50      	ldr	r3, [pc, #320]	; (1f74 <store_file_packet+0x184>)
    1e32:	223a      	movs	r2, #58	; 0x3a
    1e34:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
    1e36:	4b50      	ldr	r3, [pc, #320]	; (1f78 <store_file_packet+0x188>)
    1e38:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    1e3a:	e002      	b.n	1e42 <store_file_packet+0x52>
            cp--;
    1e3c:	697b      	ldr	r3, [r7, #20]
    1e3e:	3b01      	subs	r3, #1
    1e40:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
    1e42:	697b      	ldr	r3, [r7, #20]
    1e44:	781b      	ldrb	r3, [r3, #0]
    1e46:	2b2f      	cmp	r3, #47	; 0x2f
    1e48:	d1f8      	bne.n	1e3c <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
    1e4a:	697b      	ldr	r3, [r7, #20]
    1e4c:	0018      	movs	r0, r3
    1e4e:	4b4b      	ldr	r3, [pc, #300]	; (1f7c <store_file_packet+0x18c>)
    1e50:	4798      	blx	r3
    1e52:	0003      	movs	r3, r0
    1e54:	2b01      	cmp	r3, #1
    1e56:	d924      	bls.n	1ea2 <store_file_packet+0xb2>
            cp++;
    1e58:	697b      	ldr	r3, [r7, #20]
    1e5a:	3301      	adds	r3, #1
    1e5c:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
    1e5e:	697a      	ldr	r2, [r7, #20]
    1e60:	4b47      	ldr	r3, [pc, #284]	; (1f80 <store_file_packet+0x190>)
    1e62:	0011      	movs	r1, r2
    1e64:	0018      	movs	r0, r3
    1e66:	4b47      	ldr	r3, [pc, #284]	; (1f84 <store_file_packet+0x194>)
    1e68:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    1e6a:	4942      	ldr	r1, [pc, #264]	; (1f74 <store_file_packet+0x184>)
    1e6c:	4b46      	ldr	r3, [pc, #280]	; (1f88 <store_file_packet+0x198>)
    1e6e:	2240      	movs	r2, #64	; 0x40
    1e70:	0018      	movs	r0, r3
    1e72:	4b46      	ldr	r3, [pc, #280]	; (1f8c <store_file_packet+0x19c>)
    1e74:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
    1e76:	4a3f      	ldr	r2, [pc, #252]	; (1f74 <store_file_packet+0x184>)
    1e78:	4b45      	ldr	r3, [pc, #276]	; (1f90 <store_file_packet+0x1a0>)
    1e7a:	0019      	movs	r1, r3
    1e7c:	2001      	movs	r0, #1
    1e7e:	4b3b      	ldr	r3, [pc, #236]	; (1f6c <store_file_packet+0x17c>)
    1e80:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    1e82:	2313      	movs	r3, #19
    1e84:	18fc      	adds	r4, r7, r3
    1e86:	493b      	ldr	r1, [pc, #236]	; (1f74 <store_file_packet+0x184>)
    1e88:	4b3f      	ldr	r3, [pc, #252]	; (1f88 <store_file_packet+0x198>)
    1e8a:	220a      	movs	r2, #10
    1e8c:	0018      	movs	r0, r3
    1e8e:	4b41      	ldr	r3, [pc, #260]	; (1f94 <store_file_packet+0x1a4>)
    1e90:	4798      	blx	r3
    1e92:	0003      	movs	r3, r0
    1e94:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    1e96:	2313      	movs	r3, #19
    1e98:	18fb      	adds	r3, r7, r3
    1e9a:	781b      	ldrb	r3, [r3, #0]
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	d012      	beq.n	1ec6 <store_file_packet+0xd6>
    1ea0:	e008      	b.n	1eb4 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
    1ea2:	4b3d      	ldr	r3, [pc, #244]	; (1f98 <store_file_packet+0x1a8>)
    1ea4:	0019      	movs	r1, r3
    1ea6:	2001      	movs	r0, #1
    1ea8:	4b30      	ldr	r3, [pc, #192]	; (1f6c <store_file_packet+0x17c>)
    1eaa:	4798      	blx	r3
            add_state(CANCELED);
    1eac:	2020      	movs	r0, #32
    1eae:	4b3b      	ldr	r3, [pc, #236]	; (1f9c <store_file_packet+0x1ac>)
    1eb0:	4798      	blx	r3
            return;
    1eb2:	e055      	b.n	1f60 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
    1eb4:	2313      	movs	r3, #19
    1eb6:	18fb      	adds	r3, r7, r3
    1eb8:	781a      	ldrb	r2, [r3, #0]
    1eba:	4b39      	ldr	r3, [pc, #228]	; (1fa0 <store_file_packet+0x1b0>)
    1ebc:	0019      	movs	r1, r3
    1ebe:	2001      	movs	r0, #1
    1ec0:	4b2a      	ldr	r3, [pc, #168]	; (1f6c <store_file_packet+0x17c>)
    1ec2:	4798      	blx	r3
            return;
    1ec4:	e04c      	b.n	1f60 <store_file_packet+0x170>
        }

        received_file_size = 0;
    1ec6:	4b37      	ldr	r3, [pc, #220]	; (1fa4 <store_file_packet+0x1b4>)
    1ec8:	2200      	movs	r2, #0
    1eca:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
    1ecc:	2008      	movs	r0, #8
    1ece:	4b33      	ldr	r3, [pc, #204]	; (1f9c <store_file_packet+0x1ac>)
    1ed0:	4798      	blx	r3
    }

    if (data != NULL) {
    1ed2:	687b      	ldr	r3, [r7, #4]
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d043      	beq.n	1f60 <store_file_packet+0x170>
        UINT wsize = 0;
    1ed8:	2300      	movs	r3, #0
    1eda:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
    1edc:	2313      	movs	r3, #19
    1ede:	18fc      	adds	r4, r7, r3
    1ee0:	230c      	movs	r3, #12
    1ee2:	18fb      	adds	r3, r7, r3
    1ee4:	683a      	ldr	r2, [r7, #0]
    1ee6:	6879      	ldr	r1, [r7, #4]
    1ee8:	4827      	ldr	r0, [pc, #156]	; (1f88 <store_file_packet+0x198>)
    1eea:	4d2f      	ldr	r5, [pc, #188]	; (1fa8 <store_file_packet+0x1b8>)
    1eec:	47a8      	blx	r5
    1eee:	0003      	movs	r3, r0
    1ef0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
    1ef2:	2313      	movs	r3, #19
    1ef4:	18fb      	adds	r3, r7, r3
    1ef6:	781b      	ldrb	r3, [r3, #0]
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d00c      	beq.n	1f16 <store_file_packet+0x126>
            f_close(&file_object);
    1efc:	4b22      	ldr	r3, [pc, #136]	; (1f88 <store_file_packet+0x198>)
    1efe:	0018      	movs	r0, r3
    1f00:	4b2a      	ldr	r3, [pc, #168]	; (1fac <store_file_packet+0x1bc>)
    1f02:	4798      	blx	r3
            add_state(CANCELED);
    1f04:	2020      	movs	r0, #32
    1f06:	4b25      	ldr	r3, [pc, #148]	; (1f9c <store_file_packet+0x1ac>)
    1f08:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
    1f0a:	4b29      	ldr	r3, [pc, #164]	; (1fb0 <store_file_packet+0x1c0>)
    1f0c:	0019      	movs	r1, r3
    1f0e:	2001      	movs	r0, #1
    1f10:	4b16      	ldr	r3, [pc, #88]	; (1f6c <store_file_packet+0x17c>)
    1f12:	4798      	blx	r3
            return;
    1f14:	e024      	b.n	1f60 <store_file_packet+0x170>
        }

        received_file_size += wsize;
    1f16:	4b23      	ldr	r3, [pc, #140]	; (1fa4 <store_file_packet+0x1b4>)
    1f18:	681a      	ldr	r2, [r3, #0]
    1f1a:	68fb      	ldr	r3, [r7, #12]
    1f1c:	18d2      	adds	r2, r2, r3
    1f1e:	4b21      	ldr	r3, [pc, #132]	; (1fa4 <store_file_packet+0x1b4>)
    1f20:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    1f22:	4b20      	ldr	r3, [pc, #128]	; (1fa4 <store_file_packet+0x1b4>)
    1f24:	681a      	ldr	r2, [r3, #0]
    1f26:	4b23      	ldr	r3, [pc, #140]	; (1fb4 <store_file_packet+0x1c4>)
    1f28:	681b      	ldr	r3, [r3, #0]
    1f2a:	4923      	ldr	r1, [pc, #140]	; (1fb8 <store_file_packet+0x1c8>)
    1f2c:	2001      	movs	r0, #1
    1f2e:	4c0f      	ldr	r4, [pc, #60]	; (1f6c <store_file_packet+0x17c>)
    1f30:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
    1f32:	4b1c      	ldr	r3, [pc, #112]	; (1fa4 <store_file_packet+0x1b4>)
    1f34:	681a      	ldr	r2, [r3, #0]
    1f36:	4b1f      	ldr	r3, [pc, #124]	; (1fb4 <store_file_packet+0x1c4>)
    1f38:	681b      	ldr	r3, [r3, #0]
    1f3a:	429a      	cmp	r2, r3
    1f3c:	d310      	bcc.n	1f60 <store_file_packet+0x170>
            f_close(&file_object);
    1f3e:	4b12      	ldr	r3, [pc, #72]	; (1f88 <store_file_packet+0x198>)
    1f40:	0018      	movs	r0, r3
    1f42:	4b1a      	ldr	r3, [pc, #104]	; (1fac <store_file_packet+0x1bc>)
    1f44:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
    1f46:	4b1d      	ldr	r3, [pc, #116]	; (1fbc <store_file_packet+0x1cc>)
    1f48:	0019      	movs	r1, r3
    1f4a:	2001      	movs	r0, #1
    1f4c:	4b07      	ldr	r3, [pc, #28]	; (1f6c <store_file_packet+0x17c>)
    1f4e:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
    1f50:	2100      	movs	r1, #0
    1f52:	2017      	movs	r0, #23
    1f54:	4b1a      	ldr	r3, [pc, #104]	; (1fc0 <store_file_packet+0x1d0>)
    1f56:	4798      	blx	r3
            add_state(COMPLETED);
    1f58:	2010      	movs	r0, #16
    1f5a:	4b10      	ldr	r3, [pc, #64]	; (1f9c <store_file_packet+0x1ac>)
    1f5c:	4798      	blx	r3
            return;
    1f5e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
    1f60:	46bd      	mov	sp, r7
    1f62:	b006      	add	sp, #24
    1f64:	bdb0      	pop	{r4, r5, r7, pc}
    1f66:	46c0      	nop			; (mov r8, r8)
    1f68:	0002188c 	.word	0x0002188c
    1f6c:	00009a15 	.word	0x00009a15
    1f70:	00001a09 	.word	0x00001a09
    1f74:	20000098 	.word	0x20000098
    1f78:	00021889 	.word	0x00021889
    1f7c:	000204db 	.word	0x000204db
    1f80:	2000009a 	.word	0x2000009a
    1f84:	0002048f 	.word	0x0002048f
    1f88:	200006bc 	.word	0x200006bc
    1f8c:	00001a8d 	.word	0x00001a8d
    1f90:	000218f0 	.word	0x000218f0
    1f94:	000194c1 	.word	0x000194c1
    1f98:	000218b0 	.word	0x000218b0
    1f9c:	000019e1 	.word	0x000019e1
    1fa0:	00021918 	.word	0x00021918
    1fa4:	200006e4 	.word	0x200006e4
    1fa8:	000199f1 	.word	0x000199f1
    1fac:	00019ec1 	.word	0x00019ec1
    1fb0:	0002194c 	.word	0x0002194c
    1fb4:	200006e0 	.word	0x200006e0
    1fb8:	00021988 	.word	0x00021988
    1fbc:	000219bc 	.word	0x000219bc
    1fc0:	00001945 	.word	0x00001945

00001fc4 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
    1fc4:	b590      	push	{r4, r7, lr}
    1fc6:	b085      	sub	sp, #20
    1fc8:	af00      	add	r7, sp, #0
    1fca:	60f8      	str	r0, [r7, #12]
    1fcc:	60b9      	str	r1, [r7, #8]
    1fce:	607a      	str	r2, [r7, #4]
    switch (type) {
    1fd0:	68bb      	ldr	r3, [r7, #8]
    1fd2:	2b04      	cmp	r3, #4
    1fd4:	d900      	bls.n	1fd8 <http_client_callback+0x14>
    1fd6:	e077      	b.n	20c8 <STACK_SIZE+0xc8>
    1fd8:	68bb      	ldr	r3, [r7, #8]
    1fda:	009a      	lsls	r2, r3, #2
    1fdc:	4b3c      	ldr	r3, [pc, #240]	; (20d0 <STACK_SIZE+0xd0>)
    1fde:	18d3      	adds	r3, r2, r3
    1fe0:	681b      	ldr	r3, [r3, #0]
    1fe2:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
    1fe4:	4b3b      	ldr	r3, [pc, #236]	; (20d4 <STACK_SIZE+0xd4>)
    1fe6:	0019      	movs	r1, r3
    1fe8:	2001      	movs	r0, #1
    1fea:	4b3b      	ldr	r3, [pc, #236]	; (20d8 <STACK_SIZE+0xd8>)
    1fec:	4798      	blx	r3
            break;
    1fee:	e06b      	b.n	20c8 <STACK_SIZE+0xc8>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
    1ff0:	4b3a      	ldr	r3, [pc, #232]	; (20dc <STACK_SIZE+0xdc>)
    1ff2:	0019      	movs	r1, r3
    1ff4:	2001      	movs	r0, #1
    1ff6:	4b38      	ldr	r3, [pc, #224]	; (20d8 <STACK_SIZE+0xd8>)
    1ff8:	4798      	blx	r3
            add_state(GET_REQUESTED);
    1ffa:	2004      	movs	r0, #4
    1ffc:	4b38      	ldr	r3, [pc, #224]	; (20e0 <STACK_SIZE+0xe0>)
    1ffe:	4798      	blx	r3
            break;
    2000:	e062      	b.n	20c8 <STACK_SIZE+0xc8>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
    2002:	687b      	ldr	r3, [r7, #4]
    2004:	881b      	ldrh	r3, [r3, #0]
    2006:	001a      	movs	r2, r3
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	685b      	ldr	r3, [r3, #4]
    200c:	4935      	ldr	r1, [pc, #212]	; (20e4 <STACK_SIZE+0xe4>)
    200e:	2001      	movs	r0, #1
    2010:	4c31      	ldr	r4, [pc, #196]	; (20d8 <STACK_SIZE+0xd8>)
    2012:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
    2014:	687b      	ldr	r3, [r7, #4]
    2016:	881b      	ldrh	r3, [r3, #0]
    2018:	2bc8      	cmp	r3, #200	; 0xc8
    201a:	d10d      	bne.n	2038 <STACK_SIZE+0x38>
                http_file_size = data->recv_response.content_length;
    201c:	687b      	ldr	r3, [r7, #4]
    201e:	685a      	ldr	r2, [r3, #4]
    2020:	4b31      	ldr	r3, [pc, #196]	; (20e8 <STACK_SIZE+0xe8>)
    2022:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
    2024:	4b31      	ldr	r3, [pc, #196]	; (20ec <STACK_SIZE+0xec>)
    2026:	2200      	movs	r2, #0
    2028:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    202a:	687b      	ldr	r3, [r7, #4]
    202c:	685a      	ldr	r2, [r3, #4]
    202e:	2380      	movs	r3, #128	; 0x80
    2030:	009b      	lsls	r3, r3, #2
    2032:	429a      	cmp	r2, r3
    2034:	d843      	bhi.n	20be <STACK_SIZE+0xbe>
    2036:	e003      	b.n	2040 <STACK_SIZE+0x40>
                add_state(CANCELED);
    2038:	2020      	movs	r0, #32
    203a:	4b29      	ldr	r3, [pc, #164]	; (20e0 <STACK_SIZE+0xe0>)
    203c:	4798      	blx	r3
                return;
    203e:	e043      	b.n	20c8 <STACK_SIZE+0xc8>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
    2040:	687b      	ldr	r3, [r7, #4]
    2042:	689a      	ldr	r2, [r3, #8]
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	685b      	ldr	r3, [r3, #4]
    2048:	0019      	movs	r1, r3
    204a:	0010      	movs	r0, r2
    204c:	4b28      	ldr	r3, [pc, #160]	; (20f0 <STACK_SIZE+0xf0>)
    204e:	4798      	blx	r3
                add_state(COMPLETED);
    2050:	2010      	movs	r0, #16
    2052:	4b23      	ldr	r3, [pc, #140]	; (20e0 <STACK_SIZE+0xe0>)
    2054:	4798      	blx	r3
            }
            break;
    2056:	e032      	b.n	20be <STACK_SIZE+0xbe>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    2058:	687b      	ldr	r3, [r7, #4]
    205a:	685a      	ldr	r2, [r3, #4]
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	681b      	ldr	r3, [r3, #0]
    2060:	0019      	movs	r1, r3
    2062:	0010      	movs	r0, r2
    2064:	4b22      	ldr	r3, [pc, #136]	; (20f0 <STACK_SIZE+0xf0>)
    2066:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	7a1b      	ldrb	r3, [r3, #8]
    206c:	2b00      	cmp	r3, #0
    206e:	d028      	beq.n	20c2 <STACK_SIZE+0xc2>
                add_state(COMPLETED);
    2070:	2010      	movs	r0, #16
    2072:	4b1b      	ldr	r3, [pc, #108]	; (20e0 <STACK_SIZE+0xe0>)
    2074:	4798      	blx	r3
            }

            break;
    2076:	e024      	b.n	20c2 <STACK_SIZE+0xc2>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	681a      	ldr	r2, [r3, #0]
    207c:	4b1d      	ldr	r3, [pc, #116]	; (20f4 <STACK_SIZE+0xf4>)
    207e:	0019      	movs	r1, r3
    2080:	2001      	movs	r0, #1
    2082:	4b15      	ldr	r3, [pc, #84]	; (20d8 <STACK_SIZE+0xd8>)
    2084:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
    2086:	687b      	ldr	r3, [r7, #4]
    2088:	681b      	ldr	r3, [r3, #0]
    208a:	330b      	adds	r3, #11
    208c:	d11b      	bne.n	20c6 <STACK_SIZE+0xc6>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
    208e:	2008      	movs	r0, #8
    2090:	4b19      	ldr	r3, [pc, #100]	; (20f8 <STACK_SIZE+0xf8>)
    2092:	4798      	blx	r3
    2094:	1e03      	subs	r3, r0, #0
    2096:	d006      	beq.n	20a6 <STACK_SIZE+0xa6>
                    f_close(&file_object);
    2098:	4b18      	ldr	r3, [pc, #96]	; (20fc <STACK_SIZE+0xfc>)
    209a:	0018      	movs	r0, r3
    209c:	4b18      	ldr	r3, [pc, #96]	; (2100 <STACK_SIZE+0x100>)
    209e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    20a0:	2008      	movs	r0, #8
    20a2:	4b18      	ldr	r3, [pc, #96]	; (2104 <STACK_SIZE+0x104>)
    20a4:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
    20a6:	2004      	movs	r0, #4
    20a8:	4b13      	ldr	r3, [pc, #76]	; (20f8 <STACK_SIZE+0xf8>)
    20aa:	4798      	blx	r3
    20ac:	1e03      	subs	r3, r0, #0
    20ae:	d002      	beq.n	20b6 <STACK_SIZE+0xb6>
                    clear_state(GET_REQUESTED);
    20b0:	2004      	movs	r0, #4
    20b2:	4b14      	ldr	r3, [pc, #80]	; (2104 <STACK_SIZE+0x104>)
    20b4:	4798      	blx	r3
                }

                start_download();
    20b6:	4b14      	ldr	r3, [pc, #80]	; (2108 <STACK_SIZE+0x108>)
    20b8:	4798      	blx	r3
            }

            break;
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	e003      	b.n	20c6 <STACK_SIZE+0xc6>
            break;
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	e002      	b.n	20c8 <STACK_SIZE+0xc8>
            break;
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	e000      	b.n	20c8 <STACK_SIZE+0xc8>
            break;
    20c6:	46c0      	nop			; (mov r8, r8)
    }
}
    20c8:	46bd      	mov	sp, r7
    20ca:	b005      	add	sp, #20
    20cc:	bd90      	pop	{r4, r7, pc}
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	000220fc 	.word	0x000220fc
    20d4:	000219f0 	.word	0x000219f0
    20d8:	00009a15 	.word	0x00009a15
    20dc:	00021a28 	.word	0x00021a28
    20e0:	000019e1 	.word	0x000019e1
    20e4:	00021a54 	.word	0x00021a54
    20e8:	200006e0 	.word	0x200006e0
    20ec:	200006e4 	.word	0x200006e4
    20f0:	00001df1 	.word	0x00001df1
    20f4:	00021a90 	.word	0x00021a90
    20f8:	00001a09 	.word	0x00001a09
    20fc:	200006bc 	.word	0x200006bc
    2100:	00019ec1 	.word	0x00019ec1
    2104:	000019ad 	.word	0x000019ad
    2108:	00001d31 	.word	0x00001d31

0000210c <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    210c:	b580      	push	{r7, lr}
    210e:	b082      	sub	sp, #8
    2110:	af00      	add	r7, sp, #0
    2112:	603a      	str	r2, [r7, #0]
    2114:	1dfb      	adds	r3, r7, #7
    2116:	1c02      	adds	r2, r0, #0
    2118:	701a      	strb	r2, [r3, #0]
    211a:	1dbb      	adds	r3, r7, #6
    211c:	1c0a      	adds	r2, r1, #0
    211e:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
    2120:	683a      	ldr	r2, [r7, #0]
    2122:	1dbb      	adds	r3, r7, #6
    2124:	7819      	ldrb	r1, [r3, #0]
    2126:	1dfb      	adds	r3, r7, #7
    2128:	781b      	ldrb	r3, [r3, #0]
    212a:	b25b      	sxtb	r3, r3
    212c:	0018      	movs	r0, r3
    212e:	4b03      	ldr	r3, [pc, #12]	; (213c <socket_cb+0x30>)
    2130:	4798      	blx	r3
}
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	46bd      	mov	sp, r7
    2136:	b002      	add	sp, #8
    2138:	bd80      	pop	{r7, pc}
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	0001c825 	.word	0x0001c825

00002140 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    2140:	b5b0      	push	{r4, r5, r7, lr}
    2142:	b086      	sub	sp, #24
    2144:	af04      	add	r7, sp, #16
    2146:	6078      	str	r0, [r7, #4]
    2148:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
    214a:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
    214c:	22ff      	movs	r2, #255	; 0xff
    214e:	4013      	ands	r3, r2
    2150:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
    2152:	683b      	ldr	r3, [r7, #0]
    2154:	0a1b      	lsrs	r3, r3, #8
    2156:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
    2158:	23ff      	movs	r3, #255	; 0xff
    215a:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
    215c:	683a      	ldr	r2, [r7, #0]
    215e:	0c12      	lsrs	r2, r2, #16
    2160:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
    2162:	22ff      	movs	r2, #255	; 0xff
    2164:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
    2166:	6839      	ldr	r1, [r7, #0]
    2168:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
    216a:	000d      	movs	r5, r1
    216c:	6878      	ldr	r0, [r7, #4]
    216e:	4909      	ldr	r1, [pc, #36]	; (2194 <resolve_cb+0x54>)
    2170:	9502      	str	r5, [sp, #8]
    2172:	9201      	str	r2, [sp, #4]
    2174:	9300      	str	r3, [sp, #0]
    2176:	0023      	movs	r3, r4
    2178:	0002      	movs	r2, r0
    217a:	2001      	movs	r0, #1
    217c:	4c06      	ldr	r4, [pc, #24]	; (2198 <resolve_cb+0x58>)
    217e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    2180:	683a      	ldr	r2, [r7, #0]
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	0011      	movs	r1, r2
    2186:	0018      	movs	r0, r3
    2188:	4b04      	ldr	r3, [pc, #16]	; (219c <resolve_cb+0x5c>)
    218a:	4798      	blx	r3
}
    218c:	46c0      	nop			; (mov r8, r8)
    218e:	46bd      	mov	sp, r7
    2190:	b002      	add	sp, #8
    2192:	bdb0      	pop	{r4, r5, r7, pc}
    2194:	00021ac0 	.word	0x00021ac0
    2198:	00009a15 	.word	0x00009a15
    219c:	0001c989 	.word	0x0001c989

000021a0 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    21a0:	b590      	push	{r4, r7, lr}
    21a2:	b087      	sub	sp, #28
    21a4:	af02      	add	r7, sp, #8
    21a6:	0002      	movs	r2, r0
    21a8:	6039      	str	r1, [r7, #0]
    21aa:	1dfb      	adds	r3, r7, #7
    21ac:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
    21ae:	1dfb      	adds	r3, r7, #7
    21b0:	781b      	ldrb	r3, [r3, #0]
    21b2:	2b2c      	cmp	r3, #44	; 0x2c
    21b4:	d002      	beq.n	21bc <wifi_cb+0x1c>
    21b6:	2b32      	cmp	r3, #50	; 0x32
    21b8:	d03d      	beq.n	2236 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
    21ba:	e06f      	b.n	229c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    21bc:	683b      	ldr	r3, [r7, #0]
    21be:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    21c0:	68fb      	ldr	r3, [r7, #12]
    21c2:	781b      	ldrb	r3, [r3, #0]
    21c4:	2b01      	cmp	r3, #1
    21c6:	d107      	bne.n	21d8 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
    21c8:	4b36      	ldr	r3, [pc, #216]	; (22a4 <wifi_cb+0x104>)
    21ca:	0019      	movs	r1, r3
    21cc:	2001      	movs	r0, #1
    21ce:	4b36      	ldr	r3, [pc, #216]	; (22a8 <wifi_cb+0x108>)
    21d0:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
    21d2:	4b36      	ldr	r3, [pc, #216]	; (22ac <wifi_cb+0x10c>)
    21d4:	4798      	blx	r3
            break;
    21d6:	e05e      	b.n	2296 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    21d8:	68fb      	ldr	r3, [r7, #12]
    21da:	781b      	ldrb	r3, [r3, #0]
    21dc:	2b00      	cmp	r3, #0
    21de:	d15a      	bne.n	2296 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    21e0:	4b33      	ldr	r3, [pc, #204]	; (22b0 <wifi_cb+0x110>)
    21e2:	0019      	movs	r1, r3
    21e4:	2001      	movs	r0, #1
    21e6:	4b30      	ldr	r3, [pc, #192]	; (22a8 <wifi_cb+0x108>)
    21e8:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
    21ea:	2002      	movs	r0, #2
    21ec:	4b31      	ldr	r3, [pc, #196]	; (22b4 <wifi_cb+0x114>)
    21ee:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
    21f0:	2008      	movs	r0, #8
    21f2:	4b31      	ldr	r3, [pc, #196]	; (22b8 <wifi_cb+0x118>)
    21f4:	4798      	blx	r3
    21f6:	1e03      	subs	r3, r0, #0
    21f8:	d006      	beq.n	2208 <wifi_cb+0x68>
                    f_close(&file_object);
    21fa:	4b30      	ldr	r3, [pc, #192]	; (22bc <wifi_cb+0x11c>)
    21fc:	0018      	movs	r0, r3
    21fe:	4b30      	ldr	r3, [pc, #192]	; (22c0 <wifi_cb+0x120>)
    2200:	4798      	blx	r3
                    clear_state(DOWNLOADING);
    2202:	2008      	movs	r0, #8
    2204:	4b2b      	ldr	r3, [pc, #172]	; (22b4 <wifi_cb+0x114>)
    2206:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
    2208:	2004      	movs	r0, #4
    220a:	4b2b      	ldr	r3, [pc, #172]	; (22b8 <wifi_cb+0x118>)
    220c:	4798      	blx	r3
    220e:	1e03      	subs	r3, r0, #0
    2210:	d002      	beq.n	2218 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
    2212:	2004      	movs	r0, #4
    2214:	4b27      	ldr	r3, [pc, #156]	; (22b4 <wifi_cb+0x114>)
    2216:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
    2218:	4b2a      	ldr	r3, [pc, #168]	; (22c4 <wifi_cb+0x124>)
    221a:	2101      	movs	r1, #1
    221c:	0018      	movs	r0, r3
    221e:	4b2a      	ldr	r3, [pc, #168]	; (22c8 <wifi_cb+0x128>)
    2220:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    2222:	4a2a      	ldr	r2, [pc, #168]	; (22cc <wifi_cb+0x12c>)
    2224:	482a      	ldr	r0, [pc, #168]	; (22d0 <wifi_cb+0x130>)
    2226:	23ff      	movs	r3, #255	; 0xff
    2228:	9300      	str	r3, [sp, #0]
    222a:	0013      	movs	r3, r2
    222c:	2202      	movs	r2, #2
    222e:	2111      	movs	r1, #17
    2230:	4c28      	ldr	r4, [pc, #160]	; (22d4 <wifi_cb+0x134>)
    2232:	47a0      	blx	r4
            break;
    2234:	e02f      	b.n	2296 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    2236:	683b      	ldr	r3, [r7, #0]
    2238:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    223a:	68bb      	ldr	r3, [r7, #8]
    223c:	781b      	ldrb	r3, [r3, #0]
    223e:	0018      	movs	r0, r3
    2240:	68bb      	ldr	r3, [r7, #8]
    2242:	3301      	adds	r3, #1
    2244:	781b      	ldrb	r3, [r3, #0]
    2246:	001c      	movs	r4, r3
    2248:	68bb      	ldr	r3, [r7, #8]
    224a:	3302      	adds	r3, #2
    224c:	781b      	ldrb	r3, [r3, #0]
    224e:	001a      	movs	r2, r3
    2250:	68bb      	ldr	r3, [r7, #8]
    2252:	3303      	adds	r3, #3
    2254:	781b      	ldrb	r3, [r3, #0]
    2256:	4920      	ldr	r1, [pc, #128]	; (22d8 <wifi_cb+0x138>)
    2258:	9301      	str	r3, [sp, #4]
    225a:	9200      	str	r2, [sp, #0]
    225c:	0023      	movs	r3, r4
    225e:	0002      	movs	r2, r0
    2260:	2001      	movs	r0, #1
    2262:	4c11      	ldr	r4, [pc, #68]	; (22a8 <wifi_cb+0x108>)
    2264:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
    2266:	2002      	movs	r0, #2
    2268:	4b1c      	ldr	r3, [pc, #112]	; (22dc <wifi_cb+0x13c>)
    226a:	4798      	blx	r3
            if (do_download_flag == 1) {
    226c:	4b1c      	ldr	r3, [pc, #112]	; (22e0 <wifi_cb+0x140>)
    226e:	781b      	ldrb	r3, [r3, #0]
    2270:	2b01      	cmp	r3, #1
    2272:	d102      	bne.n	227a <wifi_cb+0xda>
                start_download();
    2274:	4b1b      	ldr	r3, [pc, #108]	; (22e4 <wifi_cb+0x144>)
    2276:	4798      	blx	r3
        } break;
    2278:	e00f      	b.n	229a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    227a:	4a1b      	ldr	r2, [pc, #108]	; (22e8 <wifi_cb+0x148>)
    227c:	4b11      	ldr	r3, [pc, #68]	; (22c4 <wifi_cb+0x124>)
    227e:	0011      	movs	r1, r2
    2280:	0018      	movs	r0, r3
    2282:	4b1a      	ldr	r3, [pc, #104]	; (22ec <wifi_cb+0x14c>)
    2284:	4798      	blx	r3
    2286:	1e03      	subs	r3, r0, #0
    2288:	d007      	beq.n	229a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    228a:	4b19      	ldr	r3, [pc, #100]	; (22f0 <wifi_cb+0x150>)
    228c:	0019      	movs	r1, r3
    228e:	2001      	movs	r0, #1
    2290:	4b05      	ldr	r3, [pc, #20]	; (22a8 <wifi_cb+0x108>)
    2292:	4798      	blx	r3
        } break;
    2294:	e001      	b.n	229a <wifi_cb+0xfa>
            break;
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	e000      	b.n	229c <wifi_cb+0xfc>
        } break;
    229a:	46c0      	nop			; (mov r8, r8)
    }
}
    229c:	46c0      	nop			; (mov r8, r8)
    229e:	46bd      	mov	sp, r7
    22a0:	b005      	add	sp, #20
    22a2:	bd90      	pop	{r4, r7, pc}
    22a4:	00021af0 	.word	0x00021af0
    22a8:	00009a15 	.word	0x00009a15
    22ac:	0000dff5 	.word	0x0000dff5
    22b0:	00021b10 	.word	0x00021b10
    22b4:	000019ad 	.word	0x000019ad
    22b8:	00001a09 	.word	0x00001a09
    22bc:	200006bc 	.word	0x200006bc
    22c0:	00019ec1 	.word	0x00019ec1
    22c4:	200006e8 	.word	0x200006e8
    22c8:	0001b4d1 	.word	0x0001b4d1
    22cc:	00021b34 	.word	0x00021b34
    22d0:	00021b44 	.word	0x00021b44
    22d4:	0000db21 	.word	0x0000db21
    22d8:	00021b58 	.word	0x00021b58
    22dc:	000019e1 	.word	0x000019e1
    22e0:	20000488 	.word	0x20000488
    22e4:	00001d31 	.word	0x00001d31
    22e8:	00021774 	.word	0x00021774
    22ec:	0001b39d 	.word	0x0001b39d
    22f0:	00021b80 	.word	0x00021b80

000022f4 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
    22f4:	b590      	push	{r4, r7, lr}
    22f6:	b083      	sub	sp, #12
    22f8:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
    22fa:	4b29      	ldr	r3, [pc, #164]	; (23a0 <init_storage+0xac>)
    22fc:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
    22fe:	4b29      	ldr	r3, [pc, #164]	; (23a4 <init_storage+0xb0>)
    2300:	0019      	movs	r1, r3
    2302:	2001      	movs	r0, #1
    2304:	4b28      	ldr	r3, [pc, #160]	; (23a8 <init_storage+0xb4>)
    2306:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
    2308:	1dfc      	adds	r4, r7, #7
    230a:	2000      	movs	r0, #0
    230c:	4b27      	ldr	r3, [pc, #156]	; (23ac <init_storage+0xb8>)
    230e:	4798      	blx	r3
    2310:	0003      	movs	r3, r0
    2312:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
    2314:	1dfb      	adds	r3, r7, #7
    2316:	781b      	ldrb	r3, [r3, #0]
    2318:	2b01      	cmp	r3, #1
    231a:	d110      	bne.n	233e <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
    231c:	4b24      	ldr	r3, [pc, #144]	; (23b0 <init_storage+0xbc>)
    231e:	0019      	movs	r1, r3
    2320:	2001      	movs	r0, #1
    2322:	4b21      	ldr	r3, [pc, #132]	; (23a8 <init_storage+0xb4>)
    2324:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
    2326:	4b23      	ldr	r3, [pc, #140]	; (23b4 <init_storage+0xc0>)
    2328:	0019      	movs	r1, r3
    232a:	2001      	movs	r0, #1
    232c:	4b1e      	ldr	r3, [pc, #120]	; (23a8 <init_storage+0xb4>)
    232e:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    2330:	46c0      	nop			; (mov r8, r8)
    2332:	2000      	movs	r0, #0
    2334:	4b20      	ldr	r3, [pc, #128]	; (23b8 <init_storage+0xc4>)
    2336:	4798      	blx	r3
    2338:	0003      	movs	r3, r0
    233a:	2b02      	cmp	r3, #2
    233c:	d1f9      	bne.n	2332 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
    233e:	1dfb      	adds	r3, r7, #7
    2340:	781b      	ldrb	r3, [r3, #0]
    2342:	2b00      	cmp	r3, #0
    2344:	d1e0      	bne.n	2308 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
    2346:	4b1d      	ldr	r3, [pc, #116]	; (23bc <init_storage+0xc8>)
    2348:	0019      	movs	r1, r3
    234a:	2001      	movs	r0, #1
    234c:	4b16      	ldr	r3, [pc, #88]	; (23a8 <init_storage+0xb4>)
    234e:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
    2350:	238c      	movs	r3, #140	; 0x8c
    2352:	009a      	lsls	r2, r3, #2
    2354:	4b1a      	ldr	r3, [pc, #104]	; (23c0 <init_storage+0xcc>)
    2356:	2100      	movs	r1, #0
    2358:	0018      	movs	r0, r3
    235a:	4b1a      	ldr	r3, [pc, #104]	; (23c4 <init_storage+0xd0>)
    235c:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    235e:	1dbc      	adds	r4, r7, #6
    2360:	4b17      	ldr	r3, [pc, #92]	; (23c0 <init_storage+0xcc>)
    2362:	0019      	movs	r1, r3
    2364:	2000      	movs	r0, #0
    2366:	4b18      	ldr	r3, [pc, #96]	; (23c8 <init_storage+0xd4>)
    2368:	4798      	blx	r3
    236a:	0003      	movs	r3, r0
    236c:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
    236e:	1dbb      	adds	r3, r7, #6
    2370:	781b      	ldrb	r3, [r3, #0]
    2372:	2b0b      	cmp	r3, #11
    2374:	d107      	bne.n	2386 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
    2376:	1dbb      	adds	r3, r7, #6
    2378:	781a      	ldrb	r2, [r3, #0]
    237a:	4b14      	ldr	r3, [pc, #80]	; (23cc <init_storage+0xd8>)
    237c:	0019      	movs	r1, r3
    237e:	2001      	movs	r0, #1
    2380:	4b09      	ldr	r3, [pc, #36]	; (23a8 <init_storage+0xb4>)
    2382:	4798      	blx	r3
            return;
    2384:	e008      	b.n	2398 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
    2386:	4b12      	ldr	r3, [pc, #72]	; (23d0 <init_storage+0xdc>)
    2388:	0019      	movs	r1, r3
    238a:	2001      	movs	r0, #1
    238c:	4b06      	ldr	r3, [pc, #24]	; (23a8 <init_storage+0xb4>)
    238e:	4798      	blx	r3
        add_state(STORAGE_READY);
    2390:	2001      	movs	r0, #1
    2392:	4b10      	ldr	r3, [pc, #64]	; (23d4 <init_storage+0xe0>)
    2394:	4798      	blx	r3
        return;
    2396:	46c0      	nop			; (mov r8, r8)
    }
}
    2398:	46bd      	mov	sp, r7
    239a:	b003      	add	sp, #12
    239c:	bd90      	pop	{r4, r7, pc}
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	0000a82d 	.word	0x0000a82d
    23a4:	00021ba4 	.word	0x00021ba4
    23a8:	00009a15 	.word	0x00009a15
    23ac:	0000ad09 	.word	0x0000ad09
    23b0:	00021bdc 	.word	0x00021bdc
    23b4:	00021c04 	.word	0x00021c04
    23b8:	0000a87d 	.word	0x0000a87d
    23bc:	00021c38 	.word	0x00021c38
    23c0:	2000048c 	.word	0x2000048c
    23c4:	00020123 	.word	0x00020123
    23c8:	00019469 	.word	0x00019469
    23cc:	00021c5c 	.word	0x00021c5c
    23d0:	00021c8c 	.word	0x00021c8c
    23d4:	000019e1 	.word	0x000019e1

000023d8 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    23d8:	b580      	push	{r7, lr}
    23da:	b082      	sub	sp, #8
    23dc:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
    23de:	1d3b      	adds	r3, r7, #4
    23e0:	0018      	movs	r0, r3
    23e2:	4b08      	ldr	r3, [pc, #32]	; (2404 <configure_timer+0x2c>)
    23e4:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
    23e6:	1d3a      	adds	r2, r7, #4
    23e8:	4b07      	ldr	r3, [pc, #28]	; (2408 <configure_timer+0x30>)
    23ea:	0011      	movs	r1, r2
    23ec:	0018      	movs	r0, r3
    23ee:	4b07      	ldr	r3, [pc, #28]	; (240c <configure_timer+0x34>)
    23f0:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
    23f2:	4b05      	ldr	r3, [pc, #20]	; (2408 <configure_timer+0x30>)
    23f4:	0018      	movs	r0, r3
    23f6:	4b06      	ldr	r3, [pc, #24]	; (2410 <configure_timer+0x38>)
    23f8:	4798      	blx	r3
}
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	46bd      	mov	sp, r7
    23fe:	b002      	add	sp, #8
    2400:	bd80      	pop	{r7, pc}
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	0001dfb9 	.word	0x0001dfb9
    2408:	20004230 	.word	0x20004230
    240c:	0001dfdd 	.word	0x0001dfdd
    2410:	0001e0c9 	.word	0x0001e0c9

00002414 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
    2414:	b580      	push	{r7, lr}
    2416:	b088      	sub	sp, #32
    2418:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
    241a:	003b      	movs	r3, r7
    241c:	0018      	movs	r0, r3
    241e:	4b16      	ldr	r3, [pc, #88]	; (2478 <configure_http_client+0x64>)
    2420:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    2422:	003b      	movs	r3, r7
    2424:	2280      	movs	r2, #128	; 0x80
    2426:	0092      	lsls	r2, r2, #2
    2428:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
    242a:	003b      	movs	r3, r7
    242c:	4a13      	ldr	r2, [pc, #76]	; (247c <configure_http_client+0x68>)
    242e:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
    2430:	003b      	movs	r3, r7
    2432:	22bc      	movs	r2, #188	; 0xbc
    2434:	32ff      	adds	r2, #255	; 0xff
    2436:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
    2438:	003b      	movs	r3, r7
    243a:	2201      	movs	r2, #1
    243c:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
    243e:	003a      	movs	r2, r7
    2440:	4b0f      	ldr	r3, [pc, #60]	; (2480 <configure_http_client+0x6c>)
    2442:	0011      	movs	r1, r2
    2444:	0018      	movs	r0, r3
    2446:	4b0f      	ldr	r3, [pc, #60]	; (2484 <configure_http_client+0x70>)
    2448:	4798      	blx	r3
    244a:	0003      	movs	r3, r0
    244c:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
    244e:	69fb      	ldr	r3, [r7, #28]
    2450:	2b00      	cmp	r3, #0
    2452:	da06      	bge.n	2462 <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    2454:	69fa      	ldr	r2, [r7, #28]
    2456:	4b0c      	ldr	r3, [pc, #48]	; (2488 <configure_http_client+0x74>)
    2458:	0019      	movs	r1, r3
    245a:	2001      	movs	r0, #1
    245c:	4b0b      	ldr	r3, [pc, #44]	; (248c <configure_http_client+0x78>)
    245e:	4798      	blx	r3
        while (1) {
    2460:	e7fe      	b.n	2460 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
    2462:	4a0b      	ldr	r2, [pc, #44]	; (2490 <configure_http_client+0x7c>)
    2464:	4b06      	ldr	r3, [pc, #24]	; (2480 <configure_http_client+0x6c>)
    2466:	0011      	movs	r1, r2
    2468:	0018      	movs	r0, r3
    246a:	4b0a      	ldr	r3, [pc, #40]	; (2494 <configure_http_client+0x80>)
    246c:	4798      	blx	r3
}
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	46bd      	mov	sp, r7
    2472:	b008      	add	sp, #32
    2474:	bd80      	pop	{r7, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	0001c64d 	.word	0x0001c64d
    247c:	20004230 	.word	0x20004230
    2480:	20004288 	.word	0x20004288
    2484:	0001c699 	.word	0x0001c699
    2488:	00021cb0 	.word	0x00021cb0
    248c:	00009a15 	.word	0x00009a15
    2490:	00001fc5 	.word	0x00001fc5
    2494:	0001c785 	.word	0x0001c785

00002498 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    2498:	b580      	push	{r7, lr}
    249a:	b082      	sub	sp, #8
    249c:	af00      	add	r7, sp, #0
    249e:	603a      	str	r2, [r7, #0]
    24a0:	1dfb      	adds	r3, r7, #7
    24a2:	1c02      	adds	r2, r0, #0
    24a4:	701a      	strb	r2, [r3, #0]
    24a6:	1dbb      	adds	r3, r7, #6
    24a8:	1c0a      	adds	r2, r1, #0
    24aa:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
    24ac:	683a      	ldr	r2, [r7, #0]
    24ae:	1dbb      	adds	r3, r7, #6
    24b0:	7819      	ldrb	r1, [r3, #0]
    24b2:	1dfb      	adds	r3, r7, #7
    24b4:	781b      	ldrb	r3, [r3, #0]
    24b6:	b25b      	sxtb	r3, r3
    24b8:	0018      	movs	r0, r3
    24ba:	4b03      	ldr	r3, [pc, #12]	; (24c8 <socket_event_handler+0x30>)
    24bc:	4798      	blx	r3
}
    24be:	46c0      	nop			; (mov r8, r8)
    24c0:	46bd      	mov	sp, r7
    24c2:	b002      	add	sp, #8
    24c4:	bd80      	pop	{r7, pc}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	0001b345 	.word	0x0001b345

000024cc <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	b082      	sub	sp, #8
    24d0:	af00      	add	r7, sp, #0
    24d2:	6078      	str	r0, [r7, #4]
    24d4:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
    24d6:	683a      	ldr	r2, [r7, #0]
    24d8:	687b      	ldr	r3, [r7, #4]
    24da:	0011      	movs	r1, r2
    24dc:	0018      	movs	r0, r3
    24de:	4b03      	ldr	r3, [pc, #12]	; (24ec <socket_resolve_handler+0x20>)
    24e0:	4798      	blx	r3
}
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	46bd      	mov	sp, r7
    24e6:	b002      	add	sp, #8
    24e8:	bd80      	pop	{r7, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	0001b379 	.word	0x0001b379

000024f0 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
    24f0:	b590      	push	{r4, r7, lr}
    24f2:	b089      	sub	sp, #36	; 0x24
    24f4:	af02      	add	r7, sp, #8
    24f6:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
    24f8:	2310      	movs	r3, #16
    24fa:	18fb      	adds	r3, r7, r3
    24fc:	2200      	movs	r2, #0
    24fe:	701a      	strb	r2, [r3, #0]
    2500:	2310      	movs	r3, #16
    2502:	18fb      	adds	r3, r7, r3
    2504:	2200      	movs	r2, #0
    2506:	705a      	strb	r2, [r3, #1]
    2508:	2310      	movs	r3, #16
    250a:	18fb      	adds	r3, r7, r3
    250c:	2200      	movs	r2, #0
    250e:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	685b      	ldr	r3, [r3, #4]
    2514:	685a      	ldr	r2, [r3, #4]
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	685b      	ldr	r3, [r3, #4]
    251a:	689b      	ldr	r3, [r3, #8]
    251c:	4924      	ldr	r1, [pc, #144]	; (25b0 <SubscribeHandlerLedTopic+0xc0>)
    251e:	2001      	movs	r0, #1
    2520:	4c24      	ldr	r4, [pc, #144]	; (25b4 <SubscribeHandlerLedTopic+0xc4>)
    2522:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
    2524:	687b      	ldr	r3, [r7, #4]
    2526:	681b      	ldr	r3, [r3, #0]
    2528:	689b      	ldr	r3, [r3, #8]
    252a:	4923      	ldr	r1, [pc, #140]	; (25b8 <SubscribeHandlerLedTopic+0xc8>)
    252c:	2204      	movs	r2, #4
    252e:	0018      	movs	r0, r3
    2530:	4b22      	ldr	r3, [pc, #136]	; (25bc <SubscribeHandlerLedTopic+0xcc>)
    2532:	4798      	blx	r3
    2534:	1e03      	subs	r3, r0, #0
    2536:	d137      	bne.n	25a8 <SubscribeHandlerLedTopic+0xb8>
        char *p = (char *)&msgData->message->payload[4];
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	681b      	ldr	r3, [r3, #0]
    253c:	689b      	ldr	r3, [r3, #8]
    253e:	3304      	adds	r3, #4
    2540:	60fb      	str	r3, [r7, #12]
        int nb = 0;
    2542:	2300      	movs	r3, #0
    2544:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
    2546:	e015      	b.n	2574 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
    2548:	697c      	ldr	r4, [r7, #20]
    254a:	1c63      	adds	r3, r4, #1
    254c:	617b      	str	r3, [r7, #20]
    254e:	68fb      	ldr	r3, [r7, #12]
    2550:	220c      	movs	r2, #12
    2552:	18b9      	adds	r1, r7, r2
    2554:	220a      	movs	r2, #10
    2556:	0018      	movs	r0, r3
    2558:	4b19      	ldr	r3, [pc, #100]	; (25c0 <SubscribeHandlerLedTopic+0xd0>)
    255a:	4798      	blx	r3
    255c:	0003      	movs	r3, r0
    255e:	b2da      	uxtb	r2, r3
    2560:	2310      	movs	r3, #16
    2562:	18fb      	adds	r3, r7, r3
    2564:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
    2566:	68fb      	ldr	r3, [r7, #12]
    2568:	781b      	ldrb	r3, [r3, #0]
    256a:	2b2c      	cmp	r3, #44	; 0x2c
    256c:	d10a      	bne.n	2584 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
    256e:	68fb      	ldr	r3, [r7, #12]
    2570:	3301      	adds	r3, #1
    2572:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
    2574:	697b      	ldr	r3, [r7, #20]
    2576:	2b02      	cmp	r3, #2
    2578:	dc05      	bgt.n	2586 <SubscribeHandlerLedTopic+0x96>
    257a:	68fb      	ldr	r3, [r7, #12]
    257c:	781b      	ldrb	r3, [r3, #0]
    257e:	2b00      	cmp	r3, #0
    2580:	d1e2      	bne.n	2548 <SubscribeHandlerLedTopic+0x58>
    2582:	e000      	b.n	2586 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
    2584:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
    2586:	2310      	movs	r3, #16
    2588:	18fb      	adds	r3, r7, r3
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	001a      	movs	r2, r3
    258e:	2310      	movs	r3, #16
    2590:	18fb      	adds	r3, r7, r3
    2592:	785b      	ldrb	r3, [r3, #1]
    2594:	0018      	movs	r0, r3
    2596:	2310      	movs	r3, #16
    2598:	18fb      	adds	r3, r7, r3
    259a:	789b      	ldrb	r3, [r3, #2]
    259c:	4909      	ldr	r1, [pc, #36]	; (25c4 <SubscribeHandlerLedTopic+0xd4>)
    259e:	9300      	str	r3, [sp, #0]
    25a0:	0003      	movs	r3, r0
    25a2:	2001      	movs	r0, #1
    25a4:	4c03      	ldr	r4, [pc, #12]	; (25b4 <SubscribeHandlerLedTopic+0xc4>)
    25a6:	47a0      	blx	r4
    }
}
    25a8:	46c0      	nop			; (mov r8, r8)
    25aa:	46bd      	mov	sp, r7
    25ac:	b007      	add	sp, #28
    25ae:	bd90      	pop	{r4, r7, pc}
    25b0:	00021cf8 	.word	0x00021cf8
    25b4:	00009a15 	.word	0x00009a15
    25b8:	00021d00 	.word	0x00021d00
    25bc:	000204e9 	.word	0x000204e9
    25c0:	00020695 	.word	0x00020695
    25c4:	00021d08 	.word	0x00021d08

000025c8 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
    25c8:	b590      	push	{r4, r7, lr}
    25ca:	b08b      	sub	sp, #44	; 0x2c
    25cc:	af00      	add	r7, sp, #0
    25ce:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
    25d0:	230c      	movs	r3, #12
    25d2:	18fb      	adds	r3, r7, r3
    25d4:	2214      	movs	r2, #20
    25d6:	21ff      	movs	r1, #255	; 0xff
    25d8:	0018      	movs	r0, r3
    25da:	4b41      	ldr	r3, [pc, #260]	; (26e0 <SubscribeHandlerGameTopic+0x118>)
    25dc:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	681b      	ldr	r3, [r3, #0]
    25e2:	689b      	ldr	r3, [r3, #8]
    25e4:	493f      	ldr	r1, [pc, #252]	; (26e4 <SubscribeHandlerGameTopic+0x11c>)
    25e6:	2209      	movs	r2, #9
    25e8:	0018      	movs	r0, r3
    25ea:	4b3f      	ldr	r3, [pc, #252]	; (26e8 <SubscribeHandlerGameTopic+0x120>)
    25ec:	4798      	blx	r3
    25ee:	1e03      	subs	r3, r0, #0
    25f0:	d159      	bne.n	26a6 <SubscribeHandlerGameTopic+0xde>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
    25f2:	4b3e      	ldr	r3, [pc, #248]	; (26ec <SubscribeHandlerGameTopic+0x124>)
    25f4:	0019      	movs	r1, r3
    25f6:	2001      	movs	r0, #1
    25f8:	4b3d      	ldr	r3, [pc, #244]	; (26f0 <SubscribeHandlerGameTopic+0x128>)
    25fa:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    25fc:	687b      	ldr	r3, [r7, #4]
    25fe:	685b      	ldr	r3, [r3, #4]
    2600:	685a      	ldr	r2, [r3, #4]
    2602:	687b      	ldr	r3, [r7, #4]
    2604:	685b      	ldr	r3, [r3, #4]
    2606:	689b      	ldr	r3, [r3, #8]
    2608:	493a      	ldr	r1, [pc, #232]	; (26f4 <SubscribeHandlerGameTopic+0x12c>)
    260a:	2001      	movs	r0, #1
    260c:	4c38      	ldr	r4, [pc, #224]	; (26f0 <SubscribeHandlerGameTopic+0x128>)
    260e:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	681b      	ldr	r3, [r3, #0]
    2614:	68da      	ldr	r2, [r3, #12]
    2616:	687b      	ldr	r3, [r7, #4]
    2618:	681b      	ldr	r3, [r3, #0]
    261a:	689b      	ldr	r3, [r3, #8]
    261c:	4936      	ldr	r1, [pc, #216]	; (26f8 <SubscribeHandlerGameTopic+0x130>)
    261e:	2001      	movs	r0, #1
    2620:	4c33      	ldr	r4, [pc, #204]	; (26f0 <SubscribeHandlerGameTopic+0x128>)
    2622:	47a0      	blx	r4

        int nb = 0;
    2624:	2300      	movs	r3, #0
    2626:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	689b      	ldr	r3, [r3, #8]
    262e:	3309      	adds	r3, #9
    2630:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
    2632:	e015      	b.n	2660 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
    2634:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    2636:	1c63      	adds	r3, r4, #1
    2638:	627b      	str	r3, [r7, #36]	; 0x24
    263a:	68bb      	ldr	r3, [r7, #8]
    263c:	2208      	movs	r2, #8
    263e:	18b9      	adds	r1, r7, r2
    2640:	220a      	movs	r2, #10
    2642:	0018      	movs	r0, r3
    2644:	4b2d      	ldr	r3, [pc, #180]	; (26fc <SubscribeHandlerGameTopic+0x134>)
    2646:	4798      	blx	r3
    2648:	0003      	movs	r3, r0
    264a:	b2da      	uxtb	r2, r3
    264c:	230c      	movs	r3, #12
    264e:	18fb      	adds	r3, r7, r3
    2650:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
    2652:	68bb      	ldr	r3, [r7, #8]
    2654:	781b      	ldrb	r3, [r3, #0]
    2656:	2b2c      	cmp	r3, #44	; 0x2c
    2658:	d10a      	bne.n	2670 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
    265a:	68bb      	ldr	r3, [r7, #8]
    265c:	3301      	adds	r3, #1
    265e:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
    2660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2662:	2b13      	cmp	r3, #19
    2664:	dc05      	bgt.n	2672 <SubscribeHandlerGameTopic+0xaa>
    2666:	68bb      	ldr	r3, [r7, #8]
    2668:	781b      	ldrb	r3, [r3, #0]
    266a:	2b00      	cmp	r3, #0
    266c:	d1e2      	bne.n	2634 <SubscribeHandlerGameTopic+0x6c>
    266e:	e000      	b.n	2672 <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
    2670:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
    2672:	4b23      	ldr	r3, [pc, #140]	; (2700 <SubscribeHandlerGameTopic+0x138>)
    2674:	0019      	movs	r1, r3
    2676:	2001      	movs	r0, #1
    2678:	4b1d      	ldr	r3, [pc, #116]	; (26f0 <SubscribeHandlerGameTopic+0x128>)
    267a:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
    267c:	2300      	movs	r3, #0
    267e:	623b      	str	r3, [r7, #32]
    2680:	e00d      	b.n	269e <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
    2682:	230c      	movs	r3, #12
    2684:	18fa      	adds	r2, r7, r3
    2686:	6a3b      	ldr	r3, [r7, #32]
    2688:	18d3      	adds	r3, r2, r3
    268a:	781b      	ldrb	r3, [r3, #0]
    268c:	001a      	movs	r2, r3
    268e:	4b1d      	ldr	r3, [pc, #116]	; (2704 <SubscribeHandlerGameTopic+0x13c>)
    2690:	0019      	movs	r1, r3
    2692:	2001      	movs	r0, #1
    2694:	4b16      	ldr	r3, [pc, #88]	; (26f0 <SubscribeHandlerGameTopic+0x128>)
    2696:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
    2698:	6a3b      	ldr	r3, [r7, #32]
    269a:	3301      	adds	r3, #1
    269c:	623b      	str	r3, [r7, #32]
    269e:	6a3b      	ldr	r3, [r7, #32]
    26a0:	2b13      	cmp	r3, #19
    26a2:	ddee      	ble.n	2682 <SubscribeHandlerGameTopic+0xba>
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
    26a4:	e018      	b.n	26d8 <SubscribeHandlerGameTopic+0x110>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
    26a6:	4b18      	ldr	r3, [pc, #96]	; (2708 <SubscribeHandlerGameTopic+0x140>)
    26a8:	0019      	movs	r1, r3
    26aa:	2001      	movs	r0, #1
    26ac:	4b10      	ldr	r3, [pc, #64]	; (26f0 <SubscribeHandlerGameTopic+0x128>)
    26ae:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	685b      	ldr	r3, [r3, #4]
    26b4:	685a      	ldr	r2, [r3, #4]
    26b6:	687b      	ldr	r3, [r7, #4]
    26b8:	685b      	ldr	r3, [r3, #4]
    26ba:	689b      	ldr	r3, [r3, #8]
    26bc:	490d      	ldr	r1, [pc, #52]	; (26f4 <SubscribeHandlerGameTopic+0x12c>)
    26be:	2001      	movs	r0, #1
    26c0:	4c0b      	ldr	r4, [pc, #44]	; (26f0 <SubscribeHandlerGameTopic+0x128>)
    26c2:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    26c4:	687b      	ldr	r3, [r7, #4]
    26c6:	681b      	ldr	r3, [r3, #0]
    26c8:	68da      	ldr	r2, [r3, #12]
    26ca:	687b      	ldr	r3, [r7, #4]
    26cc:	681b      	ldr	r3, [r3, #0]
    26ce:	689b      	ldr	r3, [r3, #8]
    26d0:	4909      	ldr	r1, [pc, #36]	; (26f8 <SubscribeHandlerGameTopic+0x130>)
    26d2:	2001      	movs	r0, #1
    26d4:	4c06      	ldr	r4, [pc, #24]	; (26f0 <SubscribeHandlerGameTopic+0x128>)
    26d6:	47a0      	blx	r4
}
    26d8:	46c0      	nop			; (mov r8, r8)
    26da:	46bd      	mov	sp, r7
    26dc:	b00b      	add	sp, #44	; 0x2c
    26de:	bd90      	pop	{r4, r7, pc}
    26e0:	00020123 	.word	0x00020123
    26e4:	00021d1c 	.word	0x00021d1c
    26e8:	000204e9 	.word	0x000204e9
    26ec:	00021d28 	.word	0x00021d28
    26f0:	00009a15 	.word	0x00009a15
    26f4:	00021cf8 	.word	0x00021cf8
    26f8:	00021d44 	.word	0x00021d44
    26fc:	00020695 	.word	0x00020695
    2700:	00021d4c 	.word	0x00021d4c
    2704:	00021d60 	.word	0x00021d60
    2708:	00021d64 	.word	0x00021d64

0000270c <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
    270c:	b590      	push	{r4, r7, lr}
    270e:	b083      	sub	sp, #12
    2710:	af00      	add	r7, sp, #0
    2712:	6078      	str	r0, [r7, #4]
    LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
    2714:	4b09      	ldr	r3, [pc, #36]	; (273c <SubscribeHandlerImuTopic+0x30>)
    2716:	0019      	movs	r1, r3
    2718:	2001      	movs	r0, #1
    271a:	4b09      	ldr	r3, [pc, #36]	; (2740 <SubscribeHandlerImuTopic+0x34>)
    271c:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	685b      	ldr	r3, [r3, #4]
    2722:	685a      	ldr	r2, [r3, #4]
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	685b      	ldr	r3, [r3, #4]
    2728:	689b      	ldr	r3, [r3, #8]
    272a:	4906      	ldr	r1, [pc, #24]	; (2744 <SubscribeHandlerImuTopic+0x38>)
    272c:	2001      	movs	r0, #1
    272e:	4c04      	ldr	r4, [pc, #16]	; (2740 <SubscribeHandlerImuTopic+0x34>)
    2730:	47a0      	blx	r4
}
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	46bd      	mov	sp, r7
    2736:	b003      	add	sp, #12
    2738:	bd90      	pop	{r4, r7, pc}
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	00021d94 	.word	0x00021d94
    2740:	00009a15 	.word	0x00009a15
    2744:	00021cf8 	.word	0x00021cf8

00002748 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    2748:	b590      	push	{r4, r7, lr}
    274a:	b08b      	sub	sp, #44	; 0x2c
    274c:	af06      	add	r7, sp, #24
    274e:	60f8      	str	r0, [r7, #12]
    2750:	60b9      	str	r1, [r7, #8]
    2752:	607a      	str	r2, [r7, #4]
    switch (type) {
    2754:	68bb      	ldr	r3, [r7, #8]
    2756:	2b01      	cmp	r3, #1
    2758:	d03b      	beq.n	27d2 <mqtt_callback+0x8a>
    275a:	2b05      	cmp	r3, #5
    275c:	d05e      	beq.n	281c <mqtt_callback+0xd4>
    275e:	2b00      	cmp	r3, #0
    2760:	d000      	beq.n	2764 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
    2762:	e061      	b.n	2828 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	681b      	ldr	r3, [r3, #0]
    2768:	2b00      	cmp	r3, #0
    276a:	db25      	blt.n	27b8 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
    276c:	4b30      	ldr	r3, [pc, #192]	; (2830 <mqtt_callback+0xe8>)
    276e:	0019      	movs	r1, r3
    2770:	2001      	movs	r0, #1
    2772:	4b30      	ldr	r3, [pc, #192]	; (2834 <mqtt_callback+0xec>)
    2774:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
    2776:	4930      	ldr	r1, [pc, #192]	; (2838 <mqtt_callback+0xf0>)
    2778:	4a30      	ldr	r2, [pc, #192]	; (283c <mqtt_callback+0xf4>)
    277a:	68f8      	ldr	r0, [r7, #12]
    277c:	2300      	movs	r3, #0
    277e:	9305      	str	r3, [sp, #20]
    2780:	2300      	movs	r3, #0
    2782:	9304      	str	r3, [sp, #16]
    2784:	2300      	movs	r3, #0
    2786:	9303      	str	r3, [sp, #12]
    2788:	2300      	movs	r3, #0
    278a:	9302      	str	r3, [sp, #8]
    278c:	2300      	movs	r3, #0
    278e:	9301      	str	r3, [sp, #4]
    2790:	4b2a      	ldr	r3, [pc, #168]	; (283c <mqtt_callback+0xf4>)
    2792:	9300      	str	r3, [sp, #0]
    2794:	000b      	movs	r3, r1
    2796:	2101      	movs	r1, #1
    2798:	4c29      	ldr	r4, [pc, #164]	; (2840 <mqtt_callback+0xf8>)
    279a:	47a0      	blx	r4
    279c:	1e03      	subs	r3, r0, #0
    279e:	d005      	beq.n	27ac <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
    27a0:	4b28      	ldr	r3, [pc, #160]	; (2844 <mqtt_callback+0xfc>)
    27a2:	0019      	movs	r1, r3
    27a4:	2001      	movs	r0, #1
    27a6:	4b23      	ldr	r3, [pc, #140]	; (2834 <mqtt_callback+0xec>)
    27a8:	4798      	blx	r3
        } break;
    27aa:	e03d      	b.n	2828 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
    27ac:	4b26      	ldr	r3, [pc, #152]	; (2848 <mqtt_callback+0x100>)
    27ae:	0019      	movs	r1, r3
    27b0:	2001      	movs	r0, #1
    27b2:	4b20      	ldr	r3, [pc, #128]	; (2834 <mqtt_callback+0xec>)
    27b4:	4798      	blx	r3
        } break;
    27b6:	e037      	b.n	2828 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    27b8:	4a24      	ldr	r2, [pc, #144]	; (284c <mqtt_callback+0x104>)
    27ba:	4b25      	ldr	r3, [pc, #148]	; (2850 <mqtt_callback+0x108>)
    27bc:	0019      	movs	r1, r3
    27be:	2001      	movs	r0, #1
    27c0:	4b1c      	ldr	r3, [pc, #112]	; (2834 <mqtt_callback+0xec>)
    27c2:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    27c4:	4a21      	ldr	r2, [pc, #132]	; (284c <mqtt_callback+0x104>)
    27c6:	68fb      	ldr	r3, [r7, #12]
    27c8:	0011      	movs	r1, r2
    27ca:	0018      	movs	r0, r3
    27cc:	4b21      	ldr	r3, [pc, #132]	; (2854 <mqtt_callback+0x10c>)
    27ce:	4798      	blx	r3
        } break;
    27d0:	e02a      	b.n	2828 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	781b      	ldrb	r3, [r3, #0]
    27d6:	2b00      	cmp	r3, #0
    27d8:	d117      	bne.n	280a <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
    27da:	4b1f      	ldr	r3, [pc, #124]	; (2858 <mqtt_callback+0x110>)
    27dc:	491f      	ldr	r1, [pc, #124]	; (285c <mqtt_callback+0x114>)
    27de:	68f8      	ldr	r0, [r7, #12]
    27e0:	2202      	movs	r2, #2
    27e2:	4c1f      	ldr	r4, [pc, #124]	; (2860 <mqtt_callback+0x118>)
    27e4:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
    27e6:	4b1f      	ldr	r3, [pc, #124]	; (2864 <mqtt_callback+0x11c>)
    27e8:	491f      	ldr	r1, [pc, #124]	; (2868 <mqtt_callback+0x120>)
    27ea:	68f8      	ldr	r0, [r7, #12]
    27ec:	2202      	movs	r2, #2
    27ee:	4c1c      	ldr	r4, [pc, #112]	; (2860 <mqtt_callback+0x118>)
    27f0:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
    27f2:	4b1e      	ldr	r3, [pc, #120]	; (286c <mqtt_callback+0x124>)
    27f4:	491e      	ldr	r1, [pc, #120]	; (2870 <mqtt_callback+0x128>)
    27f6:	68f8      	ldr	r0, [r7, #12]
    27f8:	2202      	movs	r2, #2
    27fa:	4c19      	ldr	r4, [pc, #100]	; (2860 <mqtt_callback+0x118>)
    27fc:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
    27fe:	4b1d      	ldr	r3, [pc, #116]	; (2874 <mqtt_callback+0x12c>)
    2800:	0019      	movs	r1, r3
    2802:	2001      	movs	r0, #1
    2804:	4b0b      	ldr	r3, [pc, #44]	; (2834 <mqtt_callback+0xec>)
    2806:	4798      	blx	r3
            break;
    2808:	e00e      	b.n	2828 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	781b      	ldrb	r3, [r3, #0]
    280e:	001a      	movs	r2, r3
    2810:	4b19      	ldr	r3, [pc, #100]	; (2878 <mqtt_callback+0x130>)
    2812:	0019      	movs	r1, r3
    2814:	2001      	movs	r0, #1
    2816:	4b07      	ldr	r3, [pc, #28]	; (2834 <mqtt_callback+0xec>)
    2818:	4798      	blx	r3
            break;
    281a:	e005      	b.n	2828 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
    281c:	4b17      	ldr	r3, [pc, #92]	; (287c <mqtt_callback+0x134>)
    281e:	0019      	movs	r1, r3
    2820:	2001      	movs	r0, #1
    2822:	4b04      	ldr	r3, [pc, #16]	; (2834 <mqtt_callback+0xec>)
    2824:	4798      	blx	r3
            break;
    2826:	46c0      	nop			; (mov r8, r8)
}
    2828:	46c0      	nop			; (mov r8, r8)
    282a:	46bd      	mov	sp, r7
    282c:	b005      	add	sp, #20
    282e:	bd90      	pop	{r4, r7, pc}
    2830:	00021df8 	.word	0x00021df8
    2834:	00009a15 	.word	0x00009a15
    2838:	00021e14 	.word	0x00021e14
    283c:	00021e24 	.word	0x00021e24
    2840:	0001b3e5 	.word	0x0001b3e5
    2844:	00021e30 	.word	0x00021e30
    2848:	00021e58 	.word	0x00021e58
    284c:	00021774 	.word	0x00021774
    2850:	00021e74 	.word	0x00021e74
    2854:	0001b39d 	.word	0x0001b39d
    2858:	000025c9 	.word	0x000025c9
    285c:	00021eac 	.word	0x00021eac
    2860:	0001b585 	.word	0x0001b585
    2864:	000024f1 	.word	0x000024f1
    2868:	00021dd4 	.word	0x00021dd4
    286c:	0000270d 	.word	0x0000270d
    2870:	00021ec0 	.word	0x00021ec0
    2874:	00021ed4 	.word	0x00021ed4
    2878:	00021ee8 	.word	0x00021ee8
    287c:	00021f1c 	.word	0x00021f1c

00002880 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
    2880:	b580      	push	{r7, lr}
    2882:	b088      	sub	sp, #32
    2884:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
    2886:	1d3b      	adds	r3, r7, #4
    2888:	0018      	movs	r0, r3
    288a:	4b1f      	ldr	r3, [pc, #124]	; (2908 <configure_mqtt+0x88>)
    288c:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
    288e:	1d3b      	adds	r3, r7, #4
    2890:	4a1e      	ldr	r2, [pc, #120]	; (290c <configure_mqtt+0x8c>)
    2892:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    2894:	1d3b      	adds	r3, r7, #4
    2896:	2280      	movs	r2, #128	; 0x80
    2898:	0092      	lsls	r2, r2, #2
    289a:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
    289c:	1d3b      	adds	r3, r7, #4
    289e:	4a1c      	ldr	r2, [pc, #112]	; (2910 <configure_mqtt+0x90>)
    28a0:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    28a2:	1d3b      	adds	r3, r7, #4
    28a4:	2280      	movs	r2, #128	; 0x80
    28a6:	0092      	lsls	r2, r2, #2
    28a8:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
    28aa:	1d3b      	adds	r3, r7, #4
    28ac:	4a19      	ldr	r2, [pc, #100]	; (2914 <configure_mqtt+0x94>)
    28ae:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
    28b0:	1d3b      	adds	r3, r7, #4
    28b2:	4a19      	ldr	r2, [pc, #100]	; (2918 <configure_mqtt+0x98>)
    28b4:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
    28b6:	1d3a      	adds	r2, r7, #4
    28b8:	4b18      	ldr	r3, [pc, #96]	; (291c <configure_mqtt+0x9c>)
    28ba:	0011      	movs	r1, r2
    28bc:	0018      	movs	r0, r3
    28be:	4b18      	ldr	r3, [pc, #96]	; (2920 <configure_mqtt+0xa0>)
    28c0:	4798      	blx	r3
    28c2:	0003      	movs	r3, r0
    28c4:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    28c6:	69fb      	ldr	r3, [r7, #28]
    28c8:	2b00      	cmp	r3, #0
    28ca:	da06      	bge.n	28da <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
    28cc:	69fa      	ldr	r2, [r7, #28]
    28ce:	4b15      	ldr	r3, [pc, #84]	; (2924 <configure_mqtt+0xa4>)
    28d0:	0019      	movs	r1, r3
    28d2:	2001      	movs	r0, #1
    28d4:	4b14      	ldr	r3, [pc, #80]	; (2928 <configure_mqtt+0xa8>)
    28d6:	4798      	blx	r3
        while (1) {
    28d8:	e7fe      	b.n	28d8 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    28da:	4a14      	ldr	r2, [pc, #80]	; (292c <configure_mqtt+0xac>)
    28dc:	4b0f      	ldr	r3, [pc, #60]	; (291c <configure_mqtt+0x9c>)
    28de:	0011      	movs	r1, r2
    28e0:	0018      	movs	r0, r3
    28e2:	4b13      	ldr	r3, [pc, #76]	; (2930 <configure_mqtt+0xb0>)
    28e4:	4798      	blx	r3
    28e6:	0003      	movs	r3, r0
    28e8:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
    28ea:	69fb      	ldr	r3, [r7, #28]
    28ec:	2b00      	cmp	r3, #0
    28ee:	da06      	bge.n	28fe <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
    28f0:	69fa      	ldr	r2, [r7, #28]
    28f2:	4b10      	ldr	r3, [pc, #64]	; (2934 <configure_mqtt+0xb4>)
    28f4:	0019      	movs	r1, r3
    28f6:	2001      	movs	r0, #1
    28f8:	4b0b      	ldr	r3, [pc, #44]	; (2928 <configure_mqtt+0xa8>)
    28fa:	4798      	blx	r3
        while (1) {
    28fc:	e7fe      	b.n	28fc <configure_mqtt+0x7c>
        }
    }
}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	46bd      	mov	sp, r7
    2902:	b008      	add	sp, #32
    2904:	bd80      	pop	{r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	0001b2dd 	.word	0x0001b2dd
    290c:	20000720 	.word	0x20000720
    2910:	20000920 	.word	0x20000920
    2914:	0000075b 	.word	0x0000075b
    2918:	00001770 	.word	0x00001770
    291c:	200006e8 	.word	0x200006e8
    2920:	0001b22d 	.word	0x0001b22d
    2924:	00021f30 	.word	0x00021f30
    2928:	00009a15 	.word	0x00009a15
    292c:	00002749 	.word	0x00002749
    2930:	0001b31d 	.word	0x0001b31d
    2934:	00021f64 	.word	0x00021f64

00002938 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
    2938:	b580      	push	{r7, lr}
    293a:	b084      	sub	sp, #16
    293c:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
    293e:	1d3b      	adds	r3, r7, #4
    2940:	0018      	movs	r0, r3
    2942:	4b0b      	ldr	r3, [pc, #44]	; (2970 <configure_extint_channel+0x38>)
    2944:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
    2946:	1d3b      	adds	r3, r7, #4
    2948:	2237      	movs	r2, #55	; 0x37
    294a:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
    294c:	1d3b      	adds	r3, r7, #4
    294e:	2200      	movs	r2, #0
    2950:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    2952:	1d3b      	adds	r3, r7, #4
    2954:	2201      	movs	r2, #1
    2956:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    2958:	1d3b      	adds	r3, r7, #4
    295a:	2202      	movs	r2, #2
    295c:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    295e:	1d3b      	adds	r3, r7, #4
    2960:	0019      	movs	r1, r3
    2962:	2007      	movs	r0, #7
    2964:	4b03      	ldr	r3, [pc, #12]	; (2974 <configure_extint_channel+0x3c>)
    2966:	4798      	blx	r3
}
    2968:	46c0      	nop			; (mov r8, r8)
    296a:	46bd      	mov	sp, r7
    296c:	b004      	add	sp, #16
    296e:	bd80      	pop	{r7, pc}
    2970:	00012415 	.word	0x00012415
    2974:	00012449 	.word	0x00012449

00002978 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
    2978:	b580      	push	{r7, lr}
    297a:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    297c:	4b06      	ldr	r3, [pc, #24]	; (2998 <configure_extint_callbacks+0x20>)
    297e:	2200      	movs	r2, #0
    2980:	2107      	movs	r1, #7
    2982:	0018      	movs	r0, r3
    2984:	4b05      	ldr	r3, [pc, #20]	; (299c <configure_extint_callbacks+0x24>)
    2986:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    2988:	2100      	movs	r1, #0
    298a:	2007      	movs	r0, #7
    298c:	4b04      	ldr	r3, [pc, #16]	; (29a0 <configure_extint_callbacks+0x28>)
    298e:	4798      	blx	r3
}
    2990:	46c0      	nop			; (mov r8, r8)
    2992:	46bd      	mov	sp, r7
    2994:	bd80      	pop	{r7, pc}
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	000029a5 	.word	0x000029a5
    299c:	00012015 	.word	0x00012015
    29a0:	00012079 	.word	0x00012079

000029a4 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
    29a4:	b5b0      	push	{r4, r5, r7, lr}
    29a6:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
    29a8:	4b0c      	ldr	r3, [pc, #48]	; (29dc <extint_detection_callback+0x38>)
    29aa:	681b      	ldr	r3, [r3, #0]
    29ac:	1c5a      	adds	r2, r3, #1
    29ae:	4b0b      	ldr	r3, [pc, #44]	; (29dc <extint_detection_callback+0x38>)
    29b0:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
    29b2:	4b0a      	ldr	r3, [pc, #40]	; (29dc <extint_detection_callback+0x38>)
    29b4:	681b      	ldr	r3, [r3, #0]
    29b6:	2b28      	cmp	r3, #40	; 0x28
    29b8:	d902      	bls.n	29c0 <extint_detection_callback+0x1c>
    29ba:	4b08      	ldr	r3, [pc, #32]	; (29dc <extint_detection_callback+0x38>)
    29bc:	2201      	movs	r2, #1
    29be:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
    29c0:	4b06      	ldr	r3, [pc, #24]	; (29dc <extint_detection_callback+0x38>)
    29c2:	681b      	ldr	r3, [r3, #0]
    29c4:	4a06      	ldr	r2, [pc, #24]	; (29e0 <extint_detection_callback+0x3c>)
    29c6:	4807      	ldr	r0, [pc, #28]	; (29e4 <extint_detection_callback+0x40>)
    29c8:	213f      	movs	r1, #63	; 0x3f
    29ca:	4c07      	ldr	r4, [pc, #28]	; (29e8 <extint_detection_callback+0x44>)
    29cc:	47a0      	blx	r4
    isPressed = true;
    29ce:	4b07      	ldr	r3, [pc, #28]	; (29ec <extint_detection_callback+0x48>)
    29d0:	2201      	movs	r2, #1
    29d2:	701a      	strb	r2, [r3, #0]
    // Published in the Wifi thread main loop
}
    29d4:	46c0      	nop			; (mov r8, r8)
    29d6:	46bd      	mov	sp, r7
    29d8:	bdb0      	pop	{r4, r5, r7, pc}
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	20000094 	.word	0x20000094
    29e0:	00021f98 	.word	0x00021f98
    29e4:	20000054 	.word	0x20000054
    29e8:	0002037d 	.word	0x0002037d
    29ec:	20000b20 	.word	0x20000b20

000029f0 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
    29f0:	b580      	push	{r7, lr}
    29f2:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
    29f4:	4a15      	ldr	r2, [pc, #84]	; (2a4c <HTTP_DownloadFileInit+0x5c>)
    29f6:	4b16      	ldr	r3, [pc, #88]	; (2a50 <HTTP_DownloadFileInit+0x60>)
    29f8:	0011      	movs	r1, r2
    29fa:	0018      	movs	r0, r3
    29fc:	4b15      	ldr	r3, [pc, #84]	; (2a54 <HTTP_DownloadFileInit+0x64>)
    29fe:	4798      	blx	r3
    2a00:	1e03      	subs	r3, r0, #0
    2a02:	d008      	beq.n	2a16 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    2a04:	4b14      	ldr	r3, [pc, #80]	; (2a58 <HTTP_DownloadFileInit+0x68>)
    2a06:	0019      	movs	r1, r3
    2a08:	2001      	movs	r0, #1
    2a0a:	4b14      	ldr	r3, [pc, #80]	; (2a5c <HTTP_DownloadFileInit+0x6c>)
    2a0c:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
    2a0e:	e002      	b.n	2a16 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
    2a10:	2000      	movs	r0, #0
    2a12:	4b13      	ldr	r3, [pc, #76]	; (2a60 <HTTP_DownloadFileInit+0x70>)
    2a14:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
    2a16:	4b0e      	ldr	r3, [pc, #56]	; (2a50 <HTTP_DownloadFileInit+0x60>)
    2a18:	2234      	movs	r2, #52	; 0x34
    2a1a:	5c9b      	ldrb	r3, [r3, r2]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d1f7      	bne.n	2a10 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
    2a20:	4b10      	ldr	r3, [pc, #64]	; (2a64 <HTTP_DownloadFileInit+0x74>)
    2a22:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
    2a24:	4b10      	ldr	r3, [pc, #64]	; (2a68 <HTTP_DownloadFileInit+0x78>)
    2a26:	2201      	movs	r2, #1
    2a28:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
    2a2a:	4a10      	ldr	r2, [pc, #64]	; (2a6c <HTTP_DownloadFileInit+0x7c>)
    2a2c:	4b10      	ldr	r3, [pc, #64]	; (2a70 <HTTP_DownloadFileInit+0x80>)
    2a2e:	0011      	movs	r1, r2
    2a30:	0018      	movs	r0, r3
    2a32:	4b10      	ldr	r3, [pc, #64]	; (2a74 <HTTP_DownloadFileInit+0x84>)
    2a34:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
    2a36:	4b10      	ldr	r3, [pc, #64]	; (2a78 <HTTP_DownloadFileInit+0x88>)
    2a38:	4798      	blx	r3

    start_download();
    2a3a:	4b10      	ldr	r3, [pc, #64]	; (2a7c <HTTP_DownloadFileInit+0x8c>)
    2a3c:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
    2a3e:	4b10      	ldr	r3, [pc, #64]	; (2a80 <HTTP_DownloadFileInit+0x90>)
    2a40:	2203      	movs	r2, #3
    2a42:	701a      	strb	r2, [r3, #0]
}
    2a44:	46c0      	nop			; (mov r8, r8)
    2a46:	46bd      	mov	sp, r7
    2a48:	bd80      	pop	{r7, pc}
    2a4a:	46c0      	nop			; (mov r8, r8)
    2a4c:	00021774 	.word	0x00021774
    2a50:	200006e8 	.word	0x200006e8
    2a54:	0001b4d1 	.word	0x0001b4d1
    2a58:	00021b80 	.word	0x00021b80
    2a5c:	00009a15 	.word	0x00009a15
    2a60:	0000db05 	.word	0x0000db05
    2a64:	000110c1 	.word	0x000110c1
    2a68:	20000488 	.word	0x20000488
    2a6c:	00002141 	.word	0x00002141
    2a70:	0000210d 	.word	0x0000210d
    2a74:	00011109 	.word	0x00011109
    2a78:	00011071 	.word	0x00011071
    2a7c:	00001d31 	.word	0x00001d31
    2a80:	20000474 	.word	0x20000474

00002a84 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
    2a84:	b590      	push	{r4, r7, lr}
    2a86:	b085      	sub	sp, #20
    2a88:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    2a8a:	e009      	b.n	2aa0 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    2a8c:	2000      	movs	r0, #0
    2a8e:	4b2a      	ldr	r3, [pc, #168]	; (2b38 <HTTP_DownloadFileTransaction+0xb4>)
    2a90:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    2a92:	4b2a      	ldr	r3, [pc, #168]	; (2b3c <HTTP_DownloadFileTransaction+0xb8>)
    2a94:	0018      	movs	r0, r3
    2a96:	4b2a      	ldr	r3, [pc, #168]	; (2b40 <HTTP_DownloadFileTransaction+0xbc>)
    2a98:	4798      	blx	r3
        vTaskDelay(5);
    2a9a:	2005      	movs	r0, #5
    2a9c:	4b29      	ldr	r3, [pc, #164]	; (2b44 <HTTP_DownloadFileTransaction+0xc0>)
    2a9e:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    2aa0:	2010      	movs	r0, #16
    2aa2:	4b29      	ldr	r3, [pc, #164]	; (2b48 <HTTP_DownloadFileTransaction+0xc4>)
    2aa4:	4798      	blx	r3
    2aa6:	0003      	movs	r3, r0
    2aa8:	001a      	movs	r2, r3
    2aaa:	2301      	movs	r3, #1
    2aac:	4053      	eors	r3, r2
    2aae:	b2db      	uxtb	r3, r3
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d009      	beq.n	2ac8 <HTTP_DownloadFileTransaction+0x44>
    2ab4:	2020      	movs	r0, #32
    2ab6:	4b24      	ldr	r3, [pc, #144]	; (2b48 <HTTP_DownloadFileTransaction+0xc4>)
    2ab8:	4798      	blx	r3
    2aba:	0003      	movs	r3, r0
    2abc:	001a      	movs	r2, r3
    2abe:	2301      	movs	r3, #1
    2ac0:	4053      	eors	r3, r2
    2ac2:	b2db      	uxtb	r3, r3
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d1e1      	bne.n	2a8c <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
    2ac8:	4b20      	ldr	r3, [pc, #128]	; (2b4c <HTTP_DownloadFileTransaction+0xc8>)
    2aca:	4798      	blx	r3
    vTaskDelay(1000);
    2acc:	23fa      	movs	r3, #250	; 0xfa
    2ace:	009b      	lsls	r3, r3, #2
    2ad0:	0018      	movs	r0, r3
    2ad2:	4b1c      	ldr	r3, [pc, #112]	; (2b44 <HTTP_DownloadFileTransaction+0xc0>)
    2ad4:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
    2ad6:	4b1e      	ldr	r3, [pc, #120]	; (2b50 <HTTP_DownloadFileTransaction+0xcc>)
    2ad8:	2200      	movs	r2, #0
    2ada:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
    2adc:	003b      	movs	r3, r7
    2ade:	4a1d      	ldr	r2, [pc, #116]	; (2b54 <HTTP_DownloadFileTransaction+0xd0>)
    2ae0:	ca13      	ldmia	r2!, {r0, r1, r4}
    2ae2:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    2ae4:	003b      	movs	r3, r7
    2ae6:	2230      	movs	r2, #48	; 0x30
    2ae8:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    2aea:	230f      	movs	r3, #15
    2aec:	18fc      	adds	r4, r7, r3
    2aee:	0039      	movs	r1, r7
    2af0:	4b19      	ldr	r3, [pc, #100]	; (2b58 <HTTP_DownloadFileTransaction+0xd4>)
    2af2:	220a      	movs	r2, #10
    2af4:	0018      	movs	r0, r3
    2af6:	4b19      	ldr	r3, [pc, #100]	; (2b5c <HTTP_DownloadFileTransaction+0xd8>)
    2af8:	4798      	blx	r3
    2afa:	0003      	movs	r3, r0
    2afc:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
    2afe:	230f      	movs	r3, #15
    2b00:	18fb      	adds	r3, r7, r3
    2b02:	781b      	ldrb	r3, [r3, #0]
    2b04:	2b00      	cmp	r3, #0
    2b06:	d008      	beq.n	2b1a <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    2b08:	230f      	movs	r3, #15
    2b0a:	18fb      	adds	r3, r7, r3
    2b0c:	781a      	ldrb	r2, [r3, #0]
    2b0e:	4b14      	ldr	r3, [pc, #80]	; (2b60 <HTTP_DownloadFileTransaction+0xdc>)
    2b10:	0019      	movs	r1, r3
    2b12:	2000      	movs	r0, #0
    2b14:	4b13      	ldr	r3, [pc, #76]	; (2b64 <HTTP_DownloadFileTransaction+0xe0>)
    2b16:	4798      	blx	r3
    2b18:	e003      	b.n	2b22 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
    2b1a:	4b13      	ldr	r3, [pc, #76]	; (2b68 <HTTP_DownloadFileTransaction+0xe4>)
    2b1c:	0018      	movs	r0, r3
    2b1e:	4b13      	ldr	r3, [pc, #76]	; (2b6c <HTTP_DownloadFileTransaction+0xe8>)
    2b20:	4798      	blx	r3
    }

    f_close(&file_object);
    2b22:	4b0d      	ldr	r3, [pc, #52]	; (2b58 <HTTP_DownloadFileTransaction+0xd4>)
    2b24:	0018      	movs	r0, r3
    2b26:	4b12      	ldr	r3, [pc, #72]	; (2b70 <HTTP_DownloadFileTransaction+0xec>)
    2b28:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
    2b2a:	4b12      	ldr	r3, [pc, #72]	; (2b74 <HTTP_DownloadFileTransaction+0xf0>)
    2b2c:	2200      	movs	r2, #0
    2b2e:	701a      	strb	r2, [r3, #0]
}
    2b30:	46c0      	nop			; (mov r8, r8)
    2b32:	46bd      	mov	sp, r7
    2b34:	b005      	add	sp, #20
    2b36:	bd90      	pop	{r4, r7, pc}
    2b38:	0000db05 	.word	0x0000db05
    2b3c:	20004230 	.word	0x20004230
    2b40:	0001e1f9 	.word	0x0001e1f9
    2b44:	00007cd5 	.word	0x00007cd5
    2b48:	00001a09 	.word	0x00001a09
    2b4c:	000110c1 	.word	0x000110c1
    2b50:	20000488 	.word	0x20000488
    2b54:	00021fd0 	.word	0x00021fd0
    2b58:	200006bc 	.word	0x200006bc
    2b5c:	000194c1 	.word	0x000194c1
    2b60:	00021fac 	.word	0x00021fac
    2b64:	00009a15 	.word	0x00009a15
    2b68:	00021fbc 	.word	0x00021fbc
    2b6c:	00009929 	.word	0x00009929
    2b70:	00019ec1 	.word	0x00019ec1
    2b74:	20000474 	.word	0x20000474

00002b78 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
    2b78:	b580      	push	{r7, lr}
    2b7a:	af00      	add	r7, sp, #0
    socketDeinit();
    2b7c:	4b18      	ldr	r3, [pc, #96]	; (2be0 <MQTT_InitRoutine+0x68>)
    2b7e:	4798      	blx	r3
    configure_mqtt();
    2b80:	4b18      	ldr	r3, [pc, #96]	; (2be4 <MQTT_InitRoutine+0x6c>)
    2b82:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    2b84:	4a18      	ldr	r2, [pc, #96]	; (2be8 <MQTT_InitRoutine+0x70>)
    2b86:	4b19      	ldr	r3, [pc, #100]	; (2bec <MQTT_InitRoutine+0x74>)
    2b88:	0011      	movs	r1, r2
    2b8a:	0018      	movs	r0, r3
    2b8c:	4b18      	ldr	r3, [pc, #96]	; (2bf0 <MQTT_InitRoutine+0x78>)
    2b8e:	4798      	blx	r3
    socketInit();
    2b90:	4b18      	ldr	r3, [pc, #96]	; (2bf4 <MQTT_InitRoutine+0x7c>)
    2b92:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
    2b94:	4b18      	ldr	r3, [pc, #96]	; (2bf8 <MQTT_InitRoutine+0x80>)
    2b96:	2234      	movs	r2, #52	; 0x34
    2b98:	5c9b      	ldrb	r3, [r3, r2]
    2b9a:	2201      	movs	r2, #1
    2b9c:	4053      	eors	r3, r2
    2b9e:	b2db      	uxtb	r3, r3
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d00c      	beq.n	2bbe <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    2ba4:	4a15      	ldr	r2, [pc, #84]	; (2bfc <MQTT_InitRoutine+0x84>)
    2ba6:	4b14      	ldr	r3, [pc, #80]	; (2bf8 <MQTT_InitRoutine+0x80>)
    2ba8:	0011      	movs	r1, r2
    2baa:	0018      	movs	r0, r3
    2bac:	4b14      	ldr	r3, [pc, #80]	; (2c00 <MQTT_InitRoutine+0x88>)
    2bae:	4798      	blx	r3
    2bb0:	1e03      	subs	r3, r0, #0
    2bb2:	d004      	beq.n	2bbe <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    2bb4:	4b13      	ldr	r3, [pc, #76]	; (2c04 <MQTT_InitRoutine+0x8c>)
    2bb6:	0019      	movs	r1, r3
    2bb8:	2001      	movs	r0, #1
    2bba:	4b13      	ldr	r3, [pc, #76]	; (2c08 <MQTT_InitRoutine+0x90>)
    2bbc:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
    2bbe:	4b0e      	ldr	r3, [pc, #56]	; (2bf8 <MQTT_InitRoutine+0x80>)
    2bc0:	2234      	movs	r2, #52	; 0x34
    2bc2:	5c9b      	ldrb	r3, [r3, r2]
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d004      	beq.n	2bd2 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
    2bc8:	4b10      	ldr	r3, [pc, #64]	; (2c0c <MQTT_InitRoutine+0x94>)
    2bca:	0019      	movs	r1, r3
    2bcc:	2001      	movs	r0, #1
    2bce:	4b0e      	ldr	r3, [pc, #56]	; (2c08 <MQTT_InitRoutine+0x90>)
    2bd0:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
    2bd2:	4b0f      	ldr	r3, [pc, #60]	; (2c10 <MQTT_InitRoutine+0x98>)
    2bd4:	2201      	movs	r2, #1
    2bd6:	701a      	strb	r2, [r3, #0]
}
    2bd8:	46c0      	nop			; (mov r8, r8)
    2bda:	46bd      	mov	sp, r7
    2bdc:	bd80      	pop	{r7, pc}
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	000110c1 	.word	0x000110c1
    2be4:	00002881 	.word	0x00002881
    2be8:	000024cd 	.word	0x000024cd
    2bec:	00002499 	.word	0x00002499
    2bf0:	00011109 	.word	0x00011109
    2bf4:	00011071 	.word	0x00011071
    2bf8:	200006e8 	.word	0x200006e8
    2bfc:	00021774 	.word	0x00021774
    2c00:	0001b39d 	.word	0x0001b39d
    2c04:	00021b80 	.word	0x00021b80
    2c08:	00009a15 	.word	0x00009a15
    2c0c:	00021fdc 	.word	0x00021fdc
    2c10:	20000474 	.word	0x20000474

00002c14 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
    2c14:	b580      	push	{r7, lr}
    2c16:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
    2c18:	2000      	movs	r0, #0
    2c1a:	4b0b      	ldr	r3, [pc, #44]	; (2c48 <MQTT_HandleTransactions+0x34>)
    2c1c:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
    2c1e:	4b0b      	ldr	r3, [pc, #44]	; (2c4c <MQTT_HandleTransactions+0x38>)
    2c20:	0018      	movs	r0, r3
    2c22:	4b0b      	ldr	r3, [pc, #44]	; (2c50 <MQTT_HandleTransactions+0x3c>)
    2c24:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
    2c26:	4b0b      	ldr	r3, [pc, #44]	; (2c54 <MQTT_HandleTransactions+0x40>)
    2c28:	4798      	blx	r3
    MQTT_HandleImuMessages();
    2c2a:	4b0b      	ldr	r3, [pc, #44]	; (2c58 <MQTT_HandleTransactions+0x44>)
    2c2c:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
    2c2e:	4b0b      	ldr	r3, [pc, #44]	; (2c5c <MQTT_HandleTransactions+0x48>)
    2c30:	2234      	movs	r2, #52	; 0x34
    2c32:	5c9b      	ldrb	r3, [r3, r2]
    2c34:	2b00      	cmp	r3, #0
    2c36:	d004      	beq.n	2c42 <MQTT_HandleTransactions+0x2e>
    2c38:	4b08      	ldr	r3, [pc, #32]	; (2c5c <MQTT_HandleTransactions+0x48>)
    2c3a:	2164      	movs	r1, #100	; 0x64
    2c3c:	0018      	movs	r0, r3
    2c3e:	4b08      	ldr	r3, [pc, #32]	; (2c60 <MQTT_HandleTransactions+0x4c>)
    2c40:	4798      	blx	r3
}
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	46bd      	mov	sp, r7
    2c46:	bd80      	pop	{r7, pc}
    2c48:	0000db05 	.word	0x0000db05
    2c4c:	20004230 	.word	0x20004230
    2c50:	0001e1f9 	.word	0x0001e1f9
    2c54:	00002cf1 	.word	0x00002cf1
    2c58:	00002c65 	.word	0x00002c65
    2c5c:	200006e8 	.word	0x200006e8
    2c60:	0001b5cd 	.word	0x0001b5cd

00002c64 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
    2c64:	b590      	push	{r4, r7, lr}
    2c66:	b085      	sub	sp, #20
    2c68:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
    2c6a:	4b18      	ldr	r3, [pc, #96]	; (2ccc <MQTT_HandleImuMessages+0x68>)
    2c6c:	681b      	ldr	r3, [r3, #0]
    2c6e:	0039      	movs	r1, r7
    2c70:	2200      	movs	r2, #0
    2c72:	0018      	movs	r0, r3
    2c74:	4b16      	ldr	r3, [pc, #88]	; (2cd0 <MQTT_HandleImuMessages+0x6c>)
    2c76:	4798      	blx	r3
    2c78:	0003      	movs	r3, r0
    2c7a:	2b01      	cmp	r3, #1
    2c7c:	d121      	bne.n	2cc2 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
    2c7e:	003b      	movs	r3, r7
    2c80:	2200      	movs	r2, #0
    2c82:	5e9b      	ldrsh	r3, [r3, r2]
    2c84:	001c      	movs	r4, r3
    2c86:	003b      	movs	r3, r7
    2c88:	2202      	movs	r2, #2
    2c8a:	5e9b      	ldrsh	r3, [r3, r2]
    2c8c:	0019      	movs	r1, r3
    2c8e:	003b      	movs	r3, r7
    2c90:	2204      	movs	r2, #4
    2c92:	5e9b      	ldrsh	r3, [r3, r2]
    2c94:	4a0f      	ldr	r2, [pc, #60]	; (2cd4 <MQTT_HandleImuMessages+0x70>)
    2c96:	4810      	ldr	r0, [pc, #64]	; (2cd8 <MQTT_HandleImuMessages+0x74>)
    2c98:	9301      	str	r3, [sp, #4]
    2c9a:	9100      	str	r1, [sp, #0]
    2c9c:	0023      	movs	r3, r4
    2c9e:	213f      	movs	r1, #63	; 0x3f
    2ca0:	4c0e      	ldr	r4, [pc, #56]	; (2cdc <MQTT_HandleImuMessages+0x78>)
    2ca2:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
    2ca4:	4b0c      	ldr	r3, [pc, #48]	; (2cd8 <MQTT_HandleImuMessages+0x74>)
    2ca6:	0018      	movs	r0, r3
    2ca8:	4b0d      	ldr	r3, [pc, #52]	; (2ce0 <MQTT_HandleImuMessages+0x7c>)
    2caa:	4798      	blx	r3
    2cac:	0004      	movs	r4, r0
    2cae:	4a0a      	ldr	r2, [pc, #40]	; (2cd8 <MQTT_HandleImuMessages+0x74>)
    2cb0:	490c      	ldr	r1, [pc, #48]	; (2ce4 <MQTT_HandleImuMessages+0x80>)
    2cb2:	480d      	ldr	r0, [pc, #52]	; (2ce8 <MQTT_HandleImuMessages+0x84>)
    2cb4:	2300      	movs	r3, #0
    2cb6:	9301      	str	r3, [sp, #4]
    2cb8:	2301      	movs	r3, #1
    2cba:	9300      	str	r3, [sp, #0]
    2cbc:	0023      	movs	r3, r4
    2cbe:	4c0b      	ldr	r4, [pc, #44]	; (2cec <MQTT_HandleImuMessages+0x88>)
    2cc0:	47a0      	blx	r4
    }
}
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	46bd      	mov	sp, r7
    2cc6:	b003      	add	sp, #12
    2cc8:	bd90      	pop	{r4, r7, pc}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	20000480 	.word	0x20000480
    2cd0:	00006b29 	.word	0x00006b29
    2cd4:	00021ff8 	.word	0x00021ff8
    2cd8:	20000014 	.word	0x20000014
    2cdc:	0002037d 	.word	0x0002037d
    2ce0:	000204db 	.word	0x000204db
    2ce4:	00021ec0 	.word	0x00021ec0
    2ce8:	200006e8 	.word	0x200006e8
    2cec:	0001b519 	.word	0x0001b519

00002cf0 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
    2cf0:	b590      	push	{r4, r7, lr}
    2cf2:	b08b      	sub	sp, #44	; 0x2c
    2cf4:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
    2cf6:	4b39      	ldr	r3, [pc, #228]	; (2ddc <MQTT_HandleGameMessages+0xec>)
    2cf8:	681b      	ldr	r3, [r3, #0]
    2cfa:	2208      	movs	r2, #8
    2cfc:	18b9      	adds	r1, r7, r2
    2cfe:	2200      	movs	r2, #0
    2d00:	0018      	movs	r0, r3
    2d02:	4b37      	ldr	r3, [pc, #220]	; (2de0 <MQTT_HandleGameMessages+0xf0>)
    2d04:	4798      	blx	r3
    2d06:	0003      	movs	r3, r0
    2d08:	2b01      	cmp	r3, #1
    2d0a:	d163      	bne.n	2dd4 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
    2d0c:	4b35      	ldr	r3, [pc, #212]	; (2de4 <MQTT_HandleGameMessages+0xf4>)
    2d0e:	4a36      	ldr	r2, [pc, #216]	; (2de8 <MQTT_HandleGameMessages+0xf8>)
    2d10:	ca03      	ldmia	r2!, {r0, r1}
    2d12:	c303      	stmia	r3!, {r0, r1}
    2d14:	8812      	ldrh	r2, [r2, #0]
    2d16:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
    2d18:	2300      	movs	r3, #0
    2d1a:	61fb      	str	r3, [r7, #28]
    2d1c:	e02d      	b.n	2d7a <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
    2d1e:	2308      	movs	r3, #8
    2d20:	18fa      	adds	r2, r7, r3
    2d22:	69fb      	ldr	r3, [r7, #28]
    2d24:	18d3      	adds	r3, r2, r3
    2d26:	781b      	ldrb	r3, [r3, #0]
    2d28:	2bff      	cmp	r3, #255	; 0xff
    2d2a:	d02a      	beq.n	2d82 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
    2d2c:	2308      	movs	r3, #8
    2d2e:	18fa      	adds	r2, r7, r3
    2d30:	69fb      	ldr	r3, [r7, #28]
    2d32:	18d3      	adds	r3, r2, r3
    2d34:	781b      	ldrb	r3, [r3, #0]
    2d36:	4a2d      	ldr	r2, [pc, #180]	; (2dec <MQTT_HandleGameMessages+0xfc>)
    2d38:	0038      	movs	r0, r7
    2d3a:	2103      	movs	r1, #3
    2d3c:	4c2c      	ldr	r4, [pc, #176]	; (2df0 <MQTT_HandleGameMessages+0x100>)
    2d3e:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
    2d40:	003a      	movs	r2, r7
    2d42:	4b28      	ldr	r3, [pc, #160]	; (2de4 <MQTT_HandleGameMessages+0xf4>)
    2d44:	0011      	movs	r1, r2
    2d46:	0018      	movs	r0, r3
    2d48:	4b2a      	ldr	r3, [pc, #168]	; (2df4 <MQTT_HandleGameMessages+0x104>)
    2d4a:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
    2d4c:	69fb      	ldr	r3, [r7, #28]
    2d4e:	3301      	adds	r3, #1
    2d50:	2208      	movs	r2, #8
    2d52:	18ba      	adds	r2, r7, r2
    2d54:	5cd3      	ldrb	r3, [r2, r3]
    2d56:	2bff      	cmp	r3, #255	; 0xff
    2d58:	d00c      	beq.n	2d74 <MQTT_HandleGameMessages+0x84>
    2d5a:	69fb      	ldr	r3, [r7, #28]
    2d5c:	3301      	adds	r3, #1
    2d5e:	2b13      	cmp	r3, #19
    2d60:	dc08      	bgt.n	2d74 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
    2d62:	003b      	movs	r3, r7
    2d64:	222c      	movs	r2, #44	; 0x2c
    2d66:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
    2d68:	003a      	movs	r2, r7
    2d6a:	4b1e      	ldr	r3, [pc, #120]	; (2de4 <MQTT_HandleGameMessages+0xf4>)
    2d6c:	0011      	movs	r1, r2
    2d6e:	0018      	movs	r0, r3
    2d70:	4b20      	ldr	r3, [pc, #128]	; (2df4 <MQTT_HandleGameMessages+0x104>)
    2d72:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
    2d74:	69fb      	ldr	r3, [r7, #28]
    2d76:	3301      	adds	r3, #1
    2d78:	61fb      	str	r3, [r7, #28]
    2d7a:	69fb      	ldr	r3, [r7, #28]
    2d7c:	2b13      	cmp	r3, #19
    2d7e:	ddce      	ble.n	2d1e <MQTT_HandleGameMessages+0x2e>
    2d80:	e000      	b.n	2d84 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
    2d82:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
    2d84:	4b17      	ldr	r3, [pc, #92]	; (2de4 <MQTT_HandleGameMessages+0xf4>)
    2d86:	0018      	movs	r0, r3
    2d88:	4b1b      	ldr	r3, [pc, #108]	; (2df8 <MQTT_HandleGameMessages+0x108>)
    2d8a:	4798      	blx	r3
    2d8c:	0003      	movs	r3, r0
    2d8e:	001a      	movs	r2, r3
    2d90:	4b14      	ldr	r3, [pc, #80]	; (2de4 <MQTT_HandleGameMessages+0xf4>)
    2d92:	18d2      	adds	r2, r2, r3
    2d94:	4b19      	ldr	r3, [pc, #100]	; (2dfc <MQTT_HandleGameMessages+0x10c>)
    2d96:	0010      	movs	r0, r2
    2d98:	0019      	movs	r1, r3
    2d9a:	2303      	movs	r3, #3
    2d9c:	001a      	movs	r2, r3
    2d9e:	4b18      	ldr	r3, [pc, #96]	; (2e00 <MQTT_HandleGameMessages+0x110>)
    2da0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
    2da2:	4b10      	ldr	r3, [pc, #64]	; (2de4 <MQTT_HandleGameMessages+0xf4>)
    2da4:	0019      	movs	r1, r3
    2da6:	2001      	movs	r0, #1
    2da8:	4b16      	ldr	r3, [pc, #88]	; (2e04 <MQTT_HandleGameMessages+0x114>)
    2daa:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
    2dac:	4b16      	ldr	r3, [pc, #88]	; (2e08 <MQTT_HandleGameMessages+0x118>)
    2dae:	0019      	movs	r1, r3
    2db0:	2001      	movs	r0, #1
    2db2:	4b14      	ldr	r3, [pc, #80]	; (2e04 <MQTT_HandleGameMessages+0x114>)
    2db4:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
    2db6:	4b0b      	ldr	r3, [pc, #44]	; (2de4 <MQTT_HandleGameMessages+0xf4>)
    2db8:	0018      	movs	r0, r3
    2dba:	4b0f      	ldr	r3, [pc, #60]	; (2df8 <MQTT_HandleGameMessages+0x108>)
    2dbc:	4798      	blx	r3
    2dbe:	0004      	movs	r4, r0
    2dc0:	4a08      	ldr	r2, [pc, #32]	; (2de4 <MQTT_HandleGameMessages+0xf4>)
    2dc2:	4912      	ldr	r1, [pc, #72]	; (2e0c <MQTT_HandleGameMessages+0x11c>)
    2dc4:	4812      	ldr	r0, [pc, #72]	; (2e10 <MQTT_HandleGameMessages+0x120>)
    2dc6:	2300      	movs	r3, #0
    2dc8:	9301      	str	r3, [sp, #4]
    2dca:	2301      	movs	r3, #1
    2dcc:	9300      	str	r3, [sp, #0]
    2dce:	0023      	movs	r3, r4
    2dd0:	4c10      	ldr	r4, [pc, #64]	; (2e14 <MQTT_HandleGameMessages+0x124>)
    2dd2:	47a0      	blx	r4
    }
}
    2dd4:	46c0      	nop			; (mov r8, r8)
    2dd6:	46bd      	mov	sp, r7
    2dd8:	b009      	add	sp, #36	; 0x24
    2dda:	bd90      	pop	{r4, r7, pc}
    2ddc:	2000047c 	.word	0x2000047c
    2de0:	00006b29 	.word	0x00006b29
    2de4:	20000014 	.word	0x20000014
    2de8:	00021d1c 	.word	0x00021d1c
    2dec:	0002201c 	.word	0x0002201c
    2df0:	0002037d 	.word	0x0002037d
    2df4:	00020461 	.word	0x00020461
    2df8:	000204db 	.word	0x000204db
    2dfc:	00022020 	.word	0x00022020
    2e00:	000200ed 	.word	0x000200ed
    2e04:	00009a15 	.word	0x00009a15
    2e08:	00022024 	.word	0x00022024
    2e0c:	00022028 	.word	0x00022028
    2e10:	200006e8 	.word	0x200006e8
    2e14:	0001b519 	.word	0x0001b519

00002e18 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
    2e18:	b590      	push	{r4, r7, lr}
    2e1a:	b08d      	sub	sp, #52	; 0x34
    2e1c:	af02      	add	r7, sp, #8
    2e1e:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
    2e20:	2064      	movs	r0, #100	; 0x64
    2e22:	4b79      	ldr	r3, [pc, #484]	; (3008 <vWifiTask+0x1f0>)
    2e24:	4798      	blx	r3
    init_state();
    2e26:	4b79      	ldr	r3, [pc, #484]	; (300c <vWifiTask+0x1f4>)
    2e28:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
    2e2a:	2200      	movs	r2, #0
    2e2c:	2104      	movs	r1, #4
    2e2e:	2005      	movs	r0, #5
    2e30:	4b77      	ldr	r3, [pc, #476]	; (3010 <vWifiTask+0x1f8>)
    2e32:	4798      	blx	r3
    2e34:	0002      	movs	r2, r0
    2e36:	4b77      	ldr	r3, [pc, #476]	; (3014 <vWifiTask+0x1fc>)
    2e38:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
    2e3a:	2200      	movs	r2, #0
    2e3c:	2106      	movs	r1, #6
    2e3e:	2005      	movs	r0, #5
    2e40:	4b73      	ldr	r3, [pc, #460]	; (3010 <vWifiTask+0x1f8>)
    2e42:	4798      	blx	r3
    2e44:	0002      	movs	r2, r0
    2e46:	4b74      	ldr	r3, [pc, #464]	; (3018 <vWifiTask+0x200>)
    2e48:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
    2e4a:	2200      	movs	r2, #0
    2e4c:	2114      	movs	r1, #20
    2e4e:	2002      	movs	r0, #2
    2e50:	4b6f      	ldr	r3, [pc, #444]	; (3010 <vWifiTask+0x1f8>)
    2e52:	4798      	blx	r3
    2e54:	0002      	movs	r2, r0
    2e56:	4b71      	ldr	r3, [pc, #452]	; (301c <vWifiTask+0x204>)
    2e58:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
    2e5a:	2200      	movs	r2, #0
    2e5c:	2102      	movs	r1, #2
    2e5e:	2005      	movs	r0, #5
    2e60:	4b6b      	ldr	r3, [pc, #428]	; (3010 <vWifiTask+0x1f8>)
    2e62:	4798      	blx	r3
    2e64:	0002      	movs	r2, r0
    2e66:	4b6e      	ldr	r3, [pc, #440]	; (3020 <vWifiTask+0x208>)
    2e68:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
    2e6a:	4b6a      	ldr	r3, [pc, #424]	; (3014 <vWifiTask+0x1fc>)
    2e6c:	681b      	ldr	r3, [r3, #0]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d00b      	beq.n	2e8a <vWifiTask+0x72>
    2e72:	4b69      	ldr	r3, [pc, #420]	; (3018 <vWifiTask+0x200>)
    2e74:	681b      	ldr	r3, [r3, #0]
    2e76:	2b00      	cmp	r3, #0
    2e78:	d007      	beq.n	2e8a <vWifiTask+0x72>
    2e7a:	4b68      	ldr	r3, [pc, #416]	; (301c <vWifiTask+0x204>)
    2e7c:	681b      	ldr	r3, [r3, #0]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d003      	beq.n	2e8a <vWifiTask+0x72>
    2e82:	4b67      	ldr	r3, [pc, #412]	; (3020 <vWifiTask+0x208>)
    2e84:	681b      	ldr	r3, [r3, #0]
    2e86:	2b00      	cmp	r3, #0
    2e88:	d103      	bne.n	2e92 <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
    2e8a:	4b66      	ldr	r3, [pc, #408]	; (3024 <vWifiTask+0x20c>)
    2e8c:	0018      	movs	r0, r3
    2e8e:	4b66      	ldr	r3, [pc, #408]	; (3028 <vWifiTask+0x210>)
    2e90:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
    2e92:	4b66      	ldr	r3, [pc, #408]	; (302c <vWifiTask+0x214>)
    2e94:	0018      	movs	r0, r3
    2e96:	4b64      	ldr	r3, [pc, #400]	; (3028 <vWifiTask+0x210>)
    2e98:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
    2e9a:	4b65      	ldr	r3, [pc, #404]	; (3030 <vWifiTask+0x218>)
    2e9c:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
    2e9e:	4b65      	ldr	r3, [pc, #404]	; (3034 <vWifiTask+0x21c>)
    2ea0:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
    2ea2:	4b65      	ldr	r3, [pc, #404]	; (3038 <vWifiTask+0x220>)
    2ea4:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
    2ea6:	4b65      	ldr	r3, [pc, #404]	; (303c <vWifiTask+0x224>)
    2ea8:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
    2eaa:	4b65      	ldr	r3, [pc, #404]	; (3040 <vWifiTask+0x228>)
    2eac:	4798      	blx	r3
    configure_extint_callbacks();
    2eae:	4b65      	ldr	r3, [pc, #404]	; (3044 <vWifiTask+0x22c>)
    2eb0:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    2eb2:	230c      	movs	r3, #12
    2eb4:	18fb      	adds	r3, r7, r3
    2eb6:	2218      	movs	r2, #24
    2eb8:	2100      	movs	r1, #0
    2eba:	0018      	movs	r0, r3
    2ebc:	4b62      	ldr	r3, [pc, #392]	; (3048 <vWifiTask+0x230>)
    2ebe:	4798      	blx	r3

    nm_bsp_init();
    2ec0:	4b62      	ldr	r3, [pc, #392]	; (304c <vWifiTask+0x234>)
    2ec2:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
    2ec4:	230c      	movs	r3, #12
    2ec6:	18fb      	adds	r3, r7, r3
    2ec8:	4a61      	ldr	r2, [pc, #388]	; (3050 <vWifiTask+0x238>)
    2eca:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
    2ecc:	2327      	movs	r3, #39	; 0x27
    2ece:	18fc      	adds	r4, r7, r3
    2ed0:	230c      	movs	r3, #12
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	0018      	movs	r0, r3
    2ed6:	4b5f      	ldr	r3, [pc, #380]	; (3054 <vWifiTask+0x23c>)
    2ed8:	4798      	blx	r3
    2eda:	0003      	movs	r3, r0
    2edc:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
    2ede:	2327      	movs	r3, #39	; 0x27
    2ee0:	18fb      	adds	r3, r7, r3
    2ee2:	781b      	ldrb	r3, [r3, #0]
    2ee4:	b25b      	sxtb	r3, r3
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d009      	beq.n	2efe <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
    2eea:	2327      	movs	r3, #39	; 0x27
    2eec:	18fb      	adds	r3, r7, r3
    2eee:	2200      	movs	r2, #0
    2ef0:	569a      	ldrsb	r2, [r3, r2]
    2ef2:	4b59      	ldr	r3, [pc, #356]	; (3058 <vWifiTask+0x240>)
    2ef4:	0019      	movs	r1, r3
    2ef6:	2001      	movs	r0, #1
    2ef8:	4b58      	ldr	r3, [pc, #352]	; (305c <vWifiTask+0x244>)
    2efa:	4798      	blx	r3
        while (1) {
    2efc:	e7fe      	b.n	2efc <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    2efe:	4a58      	ldr	r2, [pc, #352]	; (3060 <vWifiTask+0x248>)
    2f00:	4b58      	ldr	r3, [pc, #352]	; (3064 <vWifiTask+0x24c>)
    2f02:	0019      	movs	r1, r3
    2f04:	2001      	movs	r0, #1
    2f06:	4b55      	ldr	r3, [pc, #340]	; (305c <vWifiTask+0x244>)
    2f08:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
    2f0a:	4b57      	ldr	r3, [pc, #348]	; (3068 <vWifiTask+0x250>)
    2f0c:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    2f0e:	4a57      	ldr	r2, [pc, #348]	; (306c <vWifiTask+0x254>)
    2f10:	4b57      	ldr	r3, [pc, #348]	; (3070 <vWifiTask+0x258>)
    2f12:	0011      	movs	r1, r2
    2f14:	0018      	movs	r0, r3
    2f16:	4b57      	ldr	r3, [pc, #348]	; (3074 <vWifiTask+0x25c>)
    2f18:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    2f1a:	4a57      	ldr	r2, [pc, #348]	; (3078 <vWifiTask+0x260>)
    2f1c:	4850      	ldr	r0, [pc, #320]	; (3060 <vWifiTask+0x248>)
    2f1e:	23ff      	movs	r3, #255	; 0xff
    2f20:	9300      	str	r3, [sp, #0]
    2f22:	0013      	movs	r3, r2
    2f24:	2202      	movs	r2, #2
    2f26:	2111      	movs	r1, #17
    2f28:	4c54      	ldr	r4, [pc, #336]	; (307c <vWifiTask+0x264>)
    2f2a:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
    2f2c:	e006      	b.n	2f3c <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    2f2e:	2000      	movs	r0, #0
    2f30:	4b53      	ldr	r3, [pc, #332]	; (3080 <vWifiTask+0x268>)
    2f32:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    2f34:	4b53      	ldr	r3, [pc, #332]	; (3084 <vWifiTask+0x26c>)
    2f36:	0018      	movs	r0, r3
    2f38:	4b53      	ldr	r3, [pc, #332]	; (3088 <vWifiTask+0x270>)
    2f3a:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
    2f3c:	2002      	movs	r0, #2
    2f3e:	4b53      	ldr	r3, [pc, #332]	; (308c <vWifiTask+0x274>)
    2f40:	4798      	blx	r3
    2f42:	0003      	movs	r3, r0
    2f44:	001a      	movs	r2, r3
    2f46:	2301      	movs	r3, #1
    2f48:	4053      	eors	r3, r2
    2f4a:	b2db      	uxtb	r3, r3
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d1ee      	bne.n	2f2e <vWifiTask+0x116>
    }

    vTaskDelay(1000);
    2f50:	23fa      	movs	r3, #250	; 0xfa
    2f52:	009b      	lsls	r3, r3, #2
    2f54:	0018      	movs	r0, r3
    2f56:	4b2c      	ldr	r3, [pc, #176]	; (3008 <vWifiTask+0x1f0>)
    2f58:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
    2f5a:	4b4d      	ldr	r3, [pc, #308]	; (3090 <vWifiTask+0x278>)
    2f5c:	2201      	movs	r2, #1
    2f5e:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
    2f60:	4b4b      	ldr	r3, [pc, #300]	; (3090 <vWifiTask+0x278>)
    2f62:	781b      	ldrb	r3, [r3, #0]
    2f64:	b25b      	sxtb	r3, r3
    2f66:	2b01      	cmp	r3, #1
    2f68:	d00b      	beq.n	2f82 <vWifiTask+0x16a>
    2f6a:	dc02      	bgt.n	2f72 <vWifiTask+0x15a>
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d005      	beq.n	2f7c <vWifiTask+0x164>
    2f70:	e010      	b.n	2f94 <vWifiTask+0x17c>
    2f72:	2b02      	cmp	r3, #2
    2f74:	d008      	beq.n	2f88 <vWifiTask+0x170>
    2f76:	2b03      	cmp	r3, #3
    2f78:	d009      	beq.n	2f8e <vWifiTask+0x176>
    2f7a:	e00b      	b.n	2f94 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
    2f7c:	4b45      	ldr	r3, [pc, #276]	; (3094 <vWifiTask+0x27c>)
    2f7e:	4798      	blx	r3

                break;
    2f80:	e00c      	b.n	2f9c <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
    2f82:	4b45      	ldr	r3, [pc, #276]	; (3098 <vWifiTask+0x280>)
    2f84:	4798      	blx	r3
                break;
    2f86:	e009      	b.n	2f9c <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
    2f88:	4b44      	ldr	r3, [pc, #272]	; (309c <vWifiTask+0x284>)
    2f8a:	4798      	blx	r3
                break;
    2f8c:	e006      	b.n	2f9c <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
    2f8e:	4b44      	ldr	r3, [pc, #272]	; (30a0 <vWifiTask+0x288>)
    2f90:	4798      	blx	r3
                break;
    2f92:	e003      	b.n	2f9c <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
    2f94:	4b3e      	ldr	r3, [pc, #248]	; (3090 <vWifiTask+0x278>)
    2f96:	2200      	movs	r2, #0
    2f98:	701a      	strb	r2, [r3, #0]
                break;
    2f9a:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
    2f9c:	230b      	movs	r3, #11
    2f9e:	18fb      	adds	r3, r7, r3
    2fa0:	2200      	movs	r2, #0
    2fa2:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
    2fa4:	4b1b      	ldr	r3, [pc, #108]	; (3014 <vWifiTask+0x1fc>)
    2fa6:	681b      	ldr	r3, [r3, #0]
    2fa8:	220b      	movs	r2, #11
    2faa:	18b9      	adds	r1, r7, r2
    2fac:	2200      	movs	r2, #0
    2fae:	0018      	movs	r0, r3
    2fb0:	4b3c      	ldr	r3, [pc, #240]	; (30a4 <vWifiTask+0x28c>)
    2fb2:	4798      	blx	r3
    2fb4:	0003      	movs	r3, r0
    2fb6:	2b01      	cmp	r3, #1
    2fb8:	d105      	bne.n	2fc6 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
    2fba:	230b      	movs	r3, #11
    2fbc:	18fb      	adds	r3, r7, r3
    2fbe:	781b      	ldrb	r3, [r3, #0]
    2fc0:	b25a      	sxtb	r2, r3
    2fc2:	4b33      	ldr	r3, [pc, #204]	; (3090 <vWifiTask+0x278>)
    2fc4:	701a      	strb	r2, [r3, #0]
        }

        // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if (isPressed) {
    2fc6:	4b38      	ldr	r3, [pc, #224]	; (30a8 <vWifiTask+0x290>)
    2fc8:	781b      	ldrb	r3, [r3, #0]
    2fca:	b2db      	uxtb	r3, r3
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d017      	beq.n	3000 <vWifiTask+0x1e8>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
    2fd0:	4b36      	ldr	r3, [pc, #216]	; (30ac <vWifiTask+0x294>)
    2fd2:	0018      	movs	r0, r3
    2fd4:	4b36      	ldr	r3, [pc, #216]	; (30b0 <vWifiTask+0x298>)
    2fd6:	4798      	blx	r3
    2fd8:	0004      	movs	r4, r0
    2fda:	4a34      	ldr	r2, [pc, #208]	; (30ac <vWifiTask+0x294>)
    2fdc:	4935      	ldr	r1, [pc, #212]	; (30b4 <vWifiTask+0x29c>)
    2fde:	4836      	ldr	r0, [pc, #216]	; (30b8 <vWifiTask+0x2a0>)
    2fe0:	2300      	movs	r3, #0
    2fe2:	9301      	str	r3, [sp, #4]
    2fe4:	2301      	movs	r3, #1
    2fe6:	9300      	str	r3, [sp, #0]
    2fe8:	0023      	movs	r3, r4
    2fea:	4c34      	ldr	r4, [pc, #208]	; (30bc <vWifiTask+0x2a4>)
    2fec:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
    2fee:	4a2f      	ldr	r2, [pc, #188]	; (30ac <vWifiTask+0x294>)
    2ff0:	4b33      	ldr	r3, [pc, #204]	; (30c0 <vWifiTask+0x2a8>)
    2ff2:	0019      	movs	r1, r3
    2ff4:	2001      	movs	r0, #1
    2ff6:	4b19      	ldr	r3, [pc, #100]	; (305c <vWifiTask+0x244>)
    2ff8:	4798      	blx	r3
            isPressed = false;
    2ffa:	4b2b      	ldr	r3, [pc, #172]	; (30a8 <vWifiTask+0x290>)
    2ffc:	2200      	movs	r2, #0
    2ffe:	701a      	strb	r2, [r3, #0]
        }

        vTaskDelay(100);
    3000:	2064      	movs	r0, #100	; 0x64
    3002:	4b01      	ldr	r3, [pc, #4]	; (3008 <vWifiTask+0x1f0>)
    3004:	4798      	blx	r3
    while (1) {
    3006:	e7ab      	b.n	2f60 <vWifiTask+0x148>
    3008:	00007cd5 	.word	0x00007cd5
    300c:	00001999 	.word	0x00001999
    3010:	00005fc9 	.word	0x00005fc9
    3014:	20000478 	.word	0x20000478
    3018:	20000480 	.word	0x20000480
    301c:	2000047c 	.word	0x2000047c
    3020:	20000484 	.word	0x20000484
    3024:	0002203c 	.word	0x0002203c
    3028:	00009929 	.word	0x00009929
    302c:	00022064 	.word	0x00022064
    3030:	000023d9 	.word	0x000023d9
    3034:	00002415 	.word	0x00002415
    3038:	00002881 	.word	0x00002881
    303c:	000022f5 	.word	0x000022f5
    3040:	00002939 	.word	0x00002939
    3044:	00002979 	.word	0x00002979
    3048:	00020123 	.word	0x00020123
    304c:	0000be39 	.word	0x0000be39
    3050:	000021a1 	.word	0x000021a1
    3054:	0000d911 	.word	0x0000d911
    3058:	00022080 	.word	0x00022080
    305c:	00009a15 	.word	0x00009a15
    3060:	00021b44 	.word	0x00021b44
    3064:	000220ac 	.word	0x000220ac
    3068:	00011071 	.word	0x00011071
    306c:	000024cd 	.word	0x000024cd
    3070:	00002499 	.word	0x00002499
    3074:	00011109 	.word	0x00011109
    3078:	00021b34 	.word	0x00021b34
    307c:	0000db21 	.word	0x0000db21
    3080:	0000db05 	.word	0x0000db05
    3084:	20004230 	.word	0x20004230
    3088:	0001e1f9 	.word	0x0001e1f9
    308c:	00001a09 	.word	0x00001a09
    3090:	20000474 	.word	0x20000474
    3094:	00002b79 	.word	0x00002b79
    3098:	00002c15 	.word	0x00002c15
    309c:	000029f1 	.word	0x000029f1
    30a0:	00002a85 	.word	0x00002a85
    30a4:	00006b29 	.word	0x00006b29
    30a8:	20000b20 	.word	0x20000b20
    30ac:	20000054 	.word	0x20000054
    30b0:	000204db 	.word	0x000204db
    30b4:	000220d0 	.word	0x000220d0
    30b8:	200006e8 	.word	0x200006e8
    30bc:	0001b519 	.word	0x0001b519
    30c0:	000220ec 	.word	0x000220ec

000030c4 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
    30c4:	b590      	push	{r4, r7, lr}
    30c6:	b083      	sub	sp, #12
    30c8:	af00      	add	r7, sp, #0
    30ca:	0002      	movs	r2, r0
    30cc:	1dfb      	adds	r3, r7, #7
    30ce:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
    30d0:	1dfb      	adds	r3, r7, #7
    30d2:	781b      	ldrb	r3, [r3, #0]
    30d4:	2b03      	cmp	r3, #3
    30d6:	d806      	bhi.n	30e6 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
    30d8:	4b05      	ldr	r3, [pc, #20]	; (30f0 <WifiHandlerSetState+0x2c>)
    30da:	6818      	ldr	r0, [r3, #0]
    30dc:	1df9      	adds	r1, r7, #7
    30de:	2300      	movs	r3, #0
    30e0:	220a      	movs	r2, #10
    30e2:	4c04      	ldr	r4, [pc, #16]	; (30f4 <WifiHandlerSetState+0x30>)
    30e4:	47a0      	blx	r4
    }
}
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	46bd      	mov	sp, r7
    30ea:	b003      	add	sp, #12
    30ec:	bd90      	pop	{r4, r7, pc}
    30ee:	46c0      	nop			; (mov r8, r8)
    30f0:	20000478 	.word	0x20000478
    30f4:	00006271 	.word	0x00006271

000030f8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    30f8:	b580      	push	{r7, lr}
    30fa:	b082      	sub	sp, #8
    30fc:	af00      	add	r7, sp, #0
    30fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	2200      	movs	r2, #0
    3104:	701a      	strb	r2, [r3, #0]
}
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	46bd      	mov	sp, r7
    310a:	b002      	add	sp, #8
    310c:	bd80      	pop	{r7, pc}
	...

00003110 <system_apb_clock_set_mask>:
{
    3110:	b580      	push	{r7, lr}
    3112:	b082      	sub	sp, #8
    3114:	af00      	add	r7, sp, #0
    3116:	0002      	movs	r2, r0
    3118:	6039      	str	r1, [r7, #0]
    311a:	1dfb      	adds	r3, r7, #7
    311c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    311e:	1dfb      	adds	r3, r7, #7
    3120:	781b      	ldrb	r3, [r3, #0]
    3122:	2b01      	cmp	r3, #1
    3124:	d00a      	beq.n	313c <system_apb_clock_set_mask+0x2c>
    3126:	2b02      	cmp	r3, #2
    3128:	d00f      	beq.n	314a <system_apb_clock_set_mask+0x3a>
    312a:	2b00      	cmp	r3, #0
    312c:	d114      	bne.n	3158 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    312e:	4b0e      	ldr	r3, [pc, #56]	; (3168 <system_apb_clock_set_mask+0x58>)
    3130:	4a0d      	ldr	r2, [pc, #52]	; (3168 <system_apb_clock_set_mask+0x58>)
    3132:	6991      	ldr	r1, [r2, #24]
    3134:	683a      	ldr	r2, [r7, #0]
    3136:	430a      	orrs	r2, r1
    3138:	619a      	str	r2, [r3, #24]
			break;
    313a:	e00f      	b.n	315c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    313c:	4b0a      	ldr	r3, [pc, #40]	; (3168 <system_apb_clock_set_mask+0x58>)
    313e:	4a0a      	ldr	r2, [pc, #40]	; (3168 <system_apb_clock_set_mask+0x58>)
    3140:	69d1      	ldr	r1, [r2, #28]
    3142:	683a      	ldr	r2, [r7, #0]
    3144:	430a      	orrs	r2, r1
    3146:	61da      	str	r2, [r3, #28]
			break;
    3148:	e008      	b.n	315c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    314a:	4b07      	ldr	r3, [pc, #28]	; (3168 <system_apb_clock_set_mask+0x58>)
    314c:	4a06      	ldr	r2, [pc, #24]	; (3168 <system_apb_clock_set_mask+0x58>)
    314e:	6a11      	ldr	r1, [r2, #32]
    3150:	683a      	ldr	r2, [r7, #0]
    3152:	430a      	orrs	r2, r1
    3154:	621a      	str	r2, [r3, #32]
			break;
    3156:	e001      	b.n	315c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3158:	2317      	movs	r3, #23
    315a:	e000      	b.n	315e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    315c:	2300      	movs	r3, #0
}
    315e:	0018      	movs	r0, r3
    3160:	46bd      	mov	sp, r7
    3162:	b002      	add	sp, #8
    3164:	bd80      	pop	{r7, pc}
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	40000400 	.word	0x40000400

0000316c <system_pinmux_get_config_defaults>:
{
    316c:	b580      	push	{r7, lr}
    316e:	b082      	sub	sp, #8
    3170:	af00      	add	r7, sp, #0
    3172:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3174:	687b      	ldr	r3, [r7, #4]
    3176:	2280      	movs	r2, #128	; 0x80
    3178:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    317a:	687b      	ldr	r3, [r7, #4]
    317c:	2200      	movs	r2, #0
    317e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	2201      	movs	r2, #1
    3184:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3186:	687b      	ldr	r3, [r7, #4]
    3188:	2200      	movs	r2, #0
    318a:	70da      	strb	r2, [r3, #3]
}
    318c:	46c0      	nop			; (mov r8, r8)
    318e:	46bd      	mov	sp, r7
    3190:	b002      	add	sp, #8
    3192:	bd80      	pop	{r7, pc}

00003194 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3194:	b580      	push	{r7, lr}
    3196:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3198:	4b05      	ldr	r3, [pc, #20]	; (31b0 <system_is_debugger_present+0x1c>)
    319a:	789b      	ldrb	r3, [r3, #2]
    319c:	b2db      	uxtb	r3, r3
    319e:	001a      	movs	r2, r3
    31a0:	2302      	movs	r3, #2
    31a2:	4013      	ands	r3, r2
    31a4:	1e5a      	subs	r2, r3, #1
    31a6:	4193      	sbcs	r3, r2
    31a8:	b2db      	uxtb	r3, r3
}
    31aa:	0018      	movs	r0, r3
    31ac:	46bd      	mov	sp, r7
    31ae:	bd80      	pop	{r7, pc}
    31b0:	41002000 	.word	0x41002000

000031b4 <system_interrupt_enter_critical_section>:
{
    31b4:	b580      	push	{r7, lr}
    31b6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    31b8:	4b02      	ldr	r3, [pc, #8]	; (31c4 <system_interrupt_enter_critical_section+0x10>)
    31ba:	4798      	blx	r3
}
    31bc:	46c0      	nop			; (mov r8, r8)
    31be:	46bd      	mov	sp, r7
    31c0:	bd80      	pop	{r7, pc}
    31c2:	46c0      	nop			; (mov r8, r8)
    31c4:	00011d69 	.word	0x00011d69

000031c8 <system_interrupt_leave_critical_section>:
{
    31c8:	b580      	push	{r7, lr}
    31ca:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    31cc:	4b02      	ldr	r3, [pc, #8]	; (31d8 <system_interrupt_leave_critical_section+0x10>)
    31ce:	4798      	blx	r3
}
    31d0:	46c0      	nop			; (mov r8, r8)
    31d2:	46bd      	mov	sp, r7
    31d4:	bd80      	pop	{r7, pc}
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	00011dbd 	.word	0x00011dbd

000031dc <system_interrupt_disable>:
{
    31dc:	b580      	push	{r7, lr}
    31de:	b082      	sub	sp, #8
    31e0:	af00      	add	r7, sp, #0
    31e2:	0002      	movs	r2, r0
    31e4:	1dfb      	adds	r3, r7, #7
    31e6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    31e8:	4a07      	ldr	r2, [pc, #28]	; (3208 <system_interrupt_disable+0x2c>)
    31ea:	1dfb      	adds	r3, r7, #7
    31ec:	781b      	ldrb	r3, [r3, #0]
    31ee:	0019      	movs	r1, r3
    31f0:	231f      	movs	r3, #31
    31f2:	400b      	ands	r3, r1
    31f4:	2101      	movs	r1, #1
    31f6:	4099      	lsls	r1, r3
    31f8:	000b      	movs	r3, r1
    31fa:	0019      	movs	r1, r3
    31fc:	2380      	movs	r3, #128	; 0x80
    31fe:	50d1      	str	r1, [r2, r3]
}
    3200:	46c0      	nop			; (mov r8, r8)
    3202:	46bd      	mov	sp, r7
    3204:	b002      	add	sp, #8
    3206:	bd80      	pop	{r7, pc}
    3208:	e000e100 	.word	0xe000e100

0000320c <i2c_master_is_syncing>:
{
    320c:	b580      	push	{r7, lr}
    320e:	b084      	sub	sp, #16
    3210:	af00      	add	r7, sp, #0
    3212:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	681b      	ldr	r3, [r3, #0]
    3218:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    321a:	68fb      	ldr	r3, [r7, #12]
    321c:	69db      	ldr	r3, [r3, #28]
    321e:	2207      	movs	r2, #7
    3220:	4013      	ands	r3, r2
    3222:	1e5a      	subs	r2, r3, #1
    3224:	4193      	sbcs	r3, r2
    3226:	b2db      	uxtb	r3, r3
}
    3228:	0018      	movs	r0, r3
    322a:	46bd      	mov	sp, r7
    322c:	b004      	add	sp, #16
    322e:	bd80      	pop	{r7, pc}

00003230 <_i2c_master_wait_for_sync>:
{
    3230:	b580      	push	{r7, lr}
    3232:	b082      	sub	sp, #8
    3234:	af00      	add	r7, sp, #0
    3236:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    3238:	46c0      	nop			; (mov r8, r8)
    323a:	687b      	ldr	r3, [r7, #4]
    323c:	0018      	movs	r0, r3
    323e:	4b04      	ldr	r3, [pc, #16]	; (3250 <_i2c_master_wait_for_sync+0x20>)
    3240:	4798      	blx	r3
    3242:	1e03      	subs	r3, r0, #0
    3244:	d1f9      	bne.n	323a <_i2c_master_wait_for_sync+0xa>
}
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	46bd      	mov	sp, r7
    324a:	b002      	add	sp, #8
    324c:	bd80      	pop	{r7, pc}
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	0000320d 	.word	0x0000320d

00003254 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    3254:	b580      	push	{r7, lr}
    3256:	b084      	sub	sp, #16
    3258:	af00      	add	r7, sp, #0
    325a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    325c:	687b      	ldr	r3, [r7, #4]
    325e:	681b      	ldr	r3, [r3, #0]
    3260:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	681b      	ldr	r3, [r3, #0]
    3266:	0018      	movs	r0, r3
    3268:	4b0d      	ldr	r3, [pc, #52]	; (32a0 <i2c_master_disable+0x4c>)
    326a:	4798      	blx	r3
    326c:	0003      	movs	r3, r0
    326e:	0018      	movs	r0, r3
    3270:	4b0c      	ldr	r3, [pc, #48]	; (32a4 <i2c_master_disable+0x50>)
    3272:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    3274:	687b      	ldr	r3, [r7, #4]
    3276:	0018      	movs	r0, r3
    3278:	4b0b      	ldr	r3, [pc, #44]	; (32a8 <i2c_master_disable+0x54>)
    327a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    327c:	68fb      	ldr	r3, [r7, #12]
    327e:	2283      	movs	r2, #131	; 0x83
    3280:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    3282:	68fb      	ldr	r3, [r7, #12]
    3284:	2283      	movs	r2, #131	; 0x83
    3286:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    3288:	68fb      	ldr	r3, [r7, #12]
    328a:	681b      	ldr	r3, [r3, #0]
    328c:	2202      	movs	r2, #2
    328e:	4393      	bics	r3, r2
    3290:	001a      	movs	r2, r3
    3292:	68fb      	ldr	r3, [r7, #12]
    3294:	601a      	str	r2, [r3, #0]

}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	46bd      	mov	sp, r7
    329a:	b004      	add	sp, #16
    329c:	bd80      	pop	{r7, pc}
    329e:	46c0      	nop			; (mov r8, r8)
    32a0:	0001323d 	.word	0x0001323d
    32a4:	000031dd 	.word	0x000031dd
    32a8:	00003231 	.word	0x00003231

000032ac <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    32ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ae:	b097      	sub	sp, #92	; 0x5c
    32b0:	af00      	add	r7, sp, #0
    32b2:	6178      	str	r0, [r7, #20]
    32b4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    32b6:	2300      	movs	r3, #0
    32b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    32ba:	2300      	movs	r3, #0
    32bc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    32be:	2300      	movs	r3, #0
    32c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    32c2:	233b      	movs	r3, #59	; 0x3b
    32c4:	2210      	movs	r2, #16
    32c6:	4694      	mov	ip, r2
    32c8:	44bc      	add	ip, r7
    32ca:	4463      	add	r3, ip
    32cc:	2200      	movs	r2, #0
    32ce:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    32d0:	697b      	ldr	r3, [r7, #20]
    32d2:	681b      	ldr	r3, [r3, #0]
    32d4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    32d6:	697b      	ldr	r3, [r7, #20]
    32d8:	681b      	ldr	r3, [r3, #0]
    32da:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    32dc:	2323      	movs	r3, #35	; 0x23
    32de:	2210      	movs	r2, #16
    32e0:	18ba      	adds	r2, r7, r2
    32e2:	18d4      	adds	r4, r2, r3
    32e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32e6:	0018      	movs	r0, r3
    32e8:	4bc0      	ldr	r3, [pc, #768]	; (35ec <_i2c_master_set_config+0x340>)
    32ea:	4798      	blx	r3
    32ec:	0003      	movs	r3, r0
    32ee:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    32f0:	230c      	movs	r3, #12
    32f2:	2210      	movs	r2, #16
    32f4:	4694      	mov	ip, r2
    32f6:	44bc      	add	ip, r7
    32f8:	4463      	add	r3, ip
    32fa:	0018      	movs	r0, r3
    32fc:	4bbc      	ldr	r3, [pc, #752]	; (35f0 <_i2c_master_set_config+0x344>)
    32fe:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    3300:	693b      	ldr	r3, [r7, #16]
    3302:	69db      	ldr	r3, [r3, #28]
    3304:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    3306:	693b      	ldr	r3, [r7, #16]
    3308:	6a1b      	ldr	r3, [r3, #32]
    330a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    330c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    330e:	2b00      	cmp	r3, #0
    3310:	d106      	bne.n	3320 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3314:	2100      	movs	r1, #0
    3316:	0018      	movs	r0, r3
    3318:	4bb6      	ldr	r3, [pc, #728]	; (35f4 <_i2c_master_set_config+0x348>)
    331a:	4798      	blx	r3
    331c:	0003      	movs	r3, r0
    331e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    3320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3322:	b2da      	uxtb	r2, r3
    3324:	230c      	movs	r3, #12
    3326:	2110      	movs	r1, #16
    3328:	468c      	mov	ip, r1
    332a:	44bc      	add	ip, r7
    332c:	4463      	add	r3, ip
    332e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3330:	230c      	movs	r3, #12
    3332:	2210      	movs	r2, #16
    3334:	4694      	mov	ip, r2
    3336:	44bc      	add	ip, r7
    3338:	4463      	add	r3, ip
    333a:	2202      	movs	r2, #2
    333c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    333e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3340:	0c1b      	lsrs	r3, r3, #16
    3342:	b2db      	uxtb	r3, r3
    3344:	220c      	movs	r2, #12
    3346:	2110      	movs	r1, #16
    3348:	468c      	mov	ip, r1
    334a:	44bc      	add	ip, r7
    334c:	4462      	add	r2, ip
    334e:	0011      	movs	r1, r2
    3350:	0018      	movs	r0, r3
    3352:	4ba9      	ldr	r3, [pc, #676]	; (35f8 <_i2c_master_set_config+0x34c>)
    3354:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    3356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3358:	2b00      	cmp	r3, #0
    335a:	d106      	bne.n	336a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    335c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    335e:	2101      	movs	r1, #1
    3360:	0018      	movs	r0, r3
    3362:	4ba4      	ldr	r3, [pc, #656]	; (35f4 <_i2c_master_set_config+0x348>)
    3364:	4798      	blx	r3
    3366:	0003      	movs	r3, r0
    3368:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    336a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    336c:	b2da      	uxtb	r2, r3
    336e:	230c      	movs	r3, #12
    3370:	2110      	movs	r1, #16
    3372:	468c      	mov	ip, r1
    3374:	44bc      	add	ip, r7
    3376:	4463      	add	r3, ip
    3378:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    337a:	230c      	movs	r3, #12
    337c:	2210      	movs	r2, #16
    337e:	4694      	mov	ip, r2
    3380:	44bc      	add	ip, r7
    3382:	4463      	add	r3, ip
    3384:	2202      	movs	r2, #2
    3386:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    3388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    338a:	0c1b      	lsrs	r3, r3, #16
    338c:	b2db      	uxtb	r3, r3
    338e:	220c      	movs	r2, #12
    3390:	2110      	movs	r1, #16
    3392:	468c      	mov	ip, r1
    3394:	44bc      	add	ip, r7
    3396:	4462      	add	r2, ip
    3398:	0011      	movs	r1, r2
    339a:	0018      	movs	r0, r3
    339c:	4b96      	ldr	r3, [pc, #600]	; (35f8 <_i2c_master_set_config+0x34c>)
    339e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    33a0:	693b      	ldr	r3, [r7, #16]
    33a2:	8a9a      	ldrh	r2, [r3, #20]
    33a4:	697b      	ldr	r3, [r7, #20]
    33a6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    33a8:	693b      	ldr	r3, [r7, #16]
    33aa:	8ada      	ldrh	r2, [r3, #22]
    33ac:	697b      	ldr	r3, [r7, #20]
    33ae:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    33b0:	693b      	ldr	r3, [r7, #16]
    33b2:	7e1b      	ldrb	r3, [r3, #24]
    33b4:	2b00      	cmp	r3, #0
    33b6:	d103      	bne.n	33c0 <_i2c_master_set_config+0x114>
    33b8:	4b90      	ldr	r3, [pc, #576]	; (35fc <_i2c_master_set_config+0x350>)
    33ba:	4798      	blx	r3
    33bc:	1e03      	subs	r3, r0, #0
    33be:	d002      	beq.n	33c6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    33c0:	2380      	movs	r3, #128	; 0x80
    33c2:	657b      	str	r3, [r7, #84]	; 0x54
    33c4:	e001      	b.n	33ca <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    33c6:	2300      	movs	r3, #0
    33c8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    33ca:	693b      	ldr	r3, [r7, #16]
    33cc:	691b      	ldr	r3, [r3, #16]
    33ce:	2b00      	cmp	r3, #0
    33d0:	d004      	beq.n	33dc <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    33d2:	693b      	ldr	r3, [r7, #16]
    33d4:	691b      	ldr	r3, [r3, #16]
    33d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    33d8:	4313      	orrs	r3, r2
    33da:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    33dc:	693b      	ldr	r3, [r7, #16]
    33de:	689b      	ldr	r3, [r3, #8]
    33e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    33e2:	4313      	orrs	r3, r2
    33e4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    33e6:	693b      	ldr	r3, [r7, #16]
    33e8:	2224      	movs	r2, #36	; 0x24
    33ea:	5c9b      	ldrb	r3, [r3, r2]
    33ec:	2b00      	cmp	r3, #0
    33ee:	d004      	beq.n	33fa <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    33f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    33f2:	2280      	movs	r2, #128	; 0x80
    33f4:	05d2      	lsls	r2, r2, #23
    33f6:	4313      	orrs	r3, r2
    33f8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    33fa:	693b      	ldr	r3, [r7, #16]
    33fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33fe:	2b00      	cmp	r3, #0
    3400:	d004      	beq.n	340c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    3402:	693b      	ldr	r3, [r7, #16]
    3404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3406:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3408:	4313      	orrs	r3, r2
    340a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    340c:	693b      	ldr	r3, [r7, #16]
    340e:	222c      	movs	r2, #44	; 0x2c
    3410:	5c9b      	ldrb	r3, [r3, r2]
    3412:	2b00      	cmp	r3, #0
    3414:	d105      	bne.n	3422 <_i2c_master_set_config+0x176>
    3416:	693b      	ldr	r3, [r7, #16]
    3418:	689a      	ldr	r2, [r3, #8]
    341a:	2380      	movs	r3, #128	; 0x80
    341c:	049b      	lsls	r3, r3, #18
    341e:	429a      	cmp	r2, r3
    3420:	d104      	bne.n	342c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3424:	2280      	movs	r2, #128	; 0x80
    3426:	0512      	lsls	r2, r2, #20
    3428:	4313      	orrs	r3, r2
    342a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    342c:	693b      	ldr	r3, [r7, #16]
    342e:	222d      	movs	r2, #45	; 0x2d
    3430:	5c9b      	ldrb	r3, [r3, r2]
    3432:	2b00      	cmp	r3, #0
    3434:	d004      	beq.n	3440 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3438:	2280      	movs	r2, #128	; 0x80
    343a:	0412      	lsls	r2, r2, #16
    343c:	4313      	orrs	r3, r2
    343e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    3440:	693b      	ldr	r3, [r7, #16]
    3442:	222e      	movs	r2, #46	; 0x2e
    3444:	5c9b      	ldrb	r3, [r3, r2]
    3446:	2b00      	cmp	r3, #0
    3448:	d004      	beq.n	3454 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    344a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    344c:	2280      	movs	r2, #128	; 0x80
    344e:	03d2      	lsls	r2, r2, #15
    3450:	4313      	orrs	r3, r2
    3452:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    3454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3456:	681a      	ldr	r2, [r3, #0]
    3458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    345a:	431a      	orrs	r2, r3
    345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    345e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3462:	2280      	movs	r2, #128	; 0x80
    3464:	0052      	lsls	r2, r2, #1
    3466:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3468:	2323      	movs	r3, #35	; 0x23
    346a:	2210      	movs	r2, #16
    346c:	4694      	mov	ip, r2
    346e:	44bc      	add	ip, r7
    3470:	4463      	add	r3, ip
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	3314      	adds	r3, #20
    3476:	b2db      	uxtb	r3, r3
    3478:	0018      	movs	r0, r3
    347a:	4b61      	ldr	r3, [pc, #388]	; (3600 <_i2c_master_set_config+0x354>)
    347c:	4798      	blx	r3
    347e:	0003      	movs	r3, r0
    3480:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    3482:	693b      	ldr	r3, [r7, #16]
    3484:	681b      	ldr	r3, [r3, #0]
    3486:	22fa      	movs	r2, #250	; 0xfa
    3488:	0092      	lsls	r2, r2, #2
    348a:	4353      	muls	r3, r2
    348c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    348e:	693b      	ldr	r3, [r7, #16]
    3490:	685b      	ldr	r3, [r3, #4]
    3492:	22fa      	movs	r2, #250	; 0xfa
    3494:	0092      	lsls	r2, r2, #2
    3496:	4353      	muls	r3, r2
    3498:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    349a:	693b      	ldr	r3, [r7, #16]
    349c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    349e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    34a0:	4b58      	ldr	r3, [pc, #352]	; (3604 <_i2c_master_set_config+0x358>)
    34a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    34a4:	4798      	blx	r3
    34a6:	0005      	movs	r5, r0
    34a8:	000e      	movs	r6, r1
    34aa:	4b56      	ldr	r3, [pc, #344]	; (3604 <_i2c_master_set_config+0x358>)
    34ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    34ae:	4798      	blx	r3
    34b0:	60b8      	str	r0, [r7, #8]
    34b2:	60f9      	str	r1, [r7, #12]
    34b4:	4b53      	ldr	r3, [pc, #332]	; (3604 <_i2c_master_set_config+0x358>)
    34b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    34b8:	4798      	blx	r3
    34ba:	4c53      	ldr	r4, [pc, #332]	; (3608 <_i2c_master_set_config+0x35c>)
    34bc:	4a53      	ldr	r2, [pc, #332]	; (360c <_i2c_master_set_config+0x360>)
    34be:	4b54      	ldr	r3, [pc, #336]	; (3610 <_i2c_master_set_config+0x364>)
    34c0:	47a0      	blx	r4
    34c2:	0003      	movs	r3, r0
    34c4:	000c      	movs	r4, r1
    34c6:	603b      	str	r3, [r7, #0]
    34c8:	607c      	str	r4, [r7, #4]
    34ca:	4b4e      	ldr	r3, [pc, #312]	; (3604 <_i2c_master_set_config+0x358>)
    34cc:	6a38      	ldr	r0, [r7, #32]
    34ce:	4798      	blx	r3
    34d0:	0002      	movs	r2, r0
    34d2:	000b      	movs	r3, r1
    34d4:	4c4c      	ldr	r4, [pc, #304]	; (3608 <_i2c_master_set_config+0x35c>)
    34d6:	6838      	ldr	r0, [r7, #0]
    34d8:	6879      	ldr	r1, [r7, #4]
    34da:	47a0      	blx	r4
    34dc:	0003      	movs	r3, r0
    34de:	000c      	movs	r4, r1
    34e0:	0018      	movs	r0, r3
    34e2:	0021      	movs	r1, r4
    34e4:	4c4b      	ldr	r4, [pc, #300]	; (3614 <_i2c_master_set_config+0x368>)
    34e6:	2200      	movs	r2, #0
    34e8:	4b4b      	ldr	r3, [pc, #300]	; (3618 <_i2c_master_set_config+0x36c>)
    34ea:	47a0      	blx	r4
    34ec:	0003      	movs	r3, r0
    34ee:	000c      	movs	r4, r1
    34f0:	001a      	movs	r2, r3
    34f2:	0023      	movs	r3, r4
    34f4:	4c44      	ldr	r4, [pc, #272]	; (3608 <_i2c_master_set_config+0x35c>)
    34f6:	68b8      	ldr	r0, [r7, #8]
    34f8:	68f9      	ldr	r1, [r7, #12]
    34fa:	47a0      	blx	r4
    34fc:	0003      	movs	r3, r0
    34fe:	000c      	movs	r4, r1
    3500:	001a      	movs	r2, r3
    3502:	0023      	movs	r3, r4
    3504:	4c45      	ldr	r4, [pc, #276]	; (361c <_i2c_master_set_config+0x370>)
    3506:	0028      	movs	r0, r5
    3508:	0031      	movs	r1, r6
    350a:	47a0      	blx	r4
    350c:	0003      	movs	r3, r0
    350e:	000c      	movs	r4, r1
    3510:	001d      	movs	r5, r3
    3512:	0026      	movs	r6, r4
    3514:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3516:	005a      	lsls	r2, r3, #1
    3518:	4b3a      	ldr	r3, [pc, #232]	; (3604 <_i2c_master_set_config+0x358>)
    351a:	0010      	movs	r0, r2
    351c:	4798      	blx	r3
    351e:	0002      	movs	r2, r0
    3520:	000b      	movs	r3, r1
    3522:	4c3c      	ldr	r4, [pc, #240]	; (3614 <_i2c_master_set_config+0x368>)
    3524:	0028      	movs	r0, r5
    3526:	0031      	movs	r1, r6
    3528:	47a0      	blx	r4
    352a:	0003      	movs	r3, r0
    352c:	000c      	movs	r4, r1
    352e:	0018      	movs	r0, r3
    3530:	0021      	movs	r1, r4
    3532:	4c3a      	ldr	r4, [pc, #232]	; (361c <_i2c_master_set_config+0x370>)
    3534:	2200      	movs	r2, #0
    3536:	4b3a      	ldr	r3, [pc, #232]	; (3620 <_i2c_master_set_config+0x374>)
    3538:	47a0      	blx	r4
    353a:	0003      	movs	r3, r0
    353c:	000c      	movs	r4, r1
    353e:	001d      	movs	r5, r3
    3540:	0026      	movs	r6, r4
    3542:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3544:	005a      	lsls	r2, r3, #1
    3546:	4b2f      	ldr	r3, [pc, #188]	; (3604 <_i2c_master_set_config+0x358>)
    3548:	0010      	movs	r0, r2
    354a:	4798      	blx	r3
    354c:	0002      	movs	r2, r0
    354e:	000b      	movs	r3, r1
    3550:	4c34      	ldr	r4, [pc, #208]	; (3624 <_i2c_master_set_config+0x378>)
    3552:	0028      	movs	r0, r5
    3554:	0031      	movs	r1, r6
    3556:	47a0      	blx	r4
    3558:	0003      	movs	r3, r0
    355a:	000c      	movs	r4, r1
    355c:	0019      	movs	r1, r3
    355e:	0022      	movs	r2, r4
    3560:	4b31      	ldr	r3, [pc, #196]	; (3628 <_i2c_master_set_config+0x37c>)
    3562:	0008      	movs	r0, r1
    3564:	0011      	movs	r1, r2
    3566:	4798      	blx	r3
    3568:	0003      	movs	r3, r0
    356a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    356c:	693b      	ldr	r3, [r7, #16]
    356e:	689a      	ldr	r2, [r3, #8]
    3570:	2380      	movs	r3, #128	; 0x80
    3572:	049b      	lsls	r3, r3, #18
    3574:	429a      	cmp	r2, r3
    3576:	d16a      	bne.n	364e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    3578:	4b22      	ldr	r3, [pc, #136]	; (3604 <_i2c_master_set_config+0x358>)
    357a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    357c:	4798      	blx	r3
    357e:	4c25      	ldr	r4, [pc, #148]	; (3614 <_i2c_master_set_config+0x368>)
    3580:	0002      	movs	r2, r0
    3582:	000b      	movs	r3, r1
    3584:	47a0      	blx	r4
    3586:	0003      	movs	r3, r0
    3588:	000c      	movs	r4, r1
    358a:	001d      	movs	r5, r3
    358c:	0026      	movs	r6, r4
    358e:	4b1d      	ldr	r3, [pc, #116]	; (3604 <_i2c_master_set_config+0x358>)
    3590:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3592:	4798      	blx	r3
    3594:	4c1c      	ldr	r4, [pc, #112]	; (3608 <_i2c_master_set_config+0x35c>)
    3596:	2200      	movs	r2, #0
    3598:	4b24      	ldr	r3, [pc, #144]	; (362c <_i2c_master_set_config+0x380>)
    359a:	47a0      	blx	r4
    359c:	0003      	movs	r3, r0
    359e:	000c      	movs	r4, r1
    35a0:	001a      	movs	r2, r3
    35a2:	0023      	movs	r3, r4
    35a4:	4c1f      	ldr	r4, [pc, #124]	; (3624 <_i2c_master_set_config+0x378>)
    35a6:	0028      	movs	r0, r5
    35a8:	0031      	movs	r1, r6
    35aa:	47a0      	blx	r4
    35ac:	0003      	movs	r3, r0
    35ae:	000c      	movs	r4, r1
    35b0:	0018      	movs	r0, r3
    35b2:	0021      	movs	r1, r4
    35b4:	4c19      	ldr	r4, [pc, #100]	; (361c <_i2c_master_set_config+0x370>)
    35b6:	2200      	movs	r2, #0
    35b8:	4b19      	ldr	r3, [pc, #100]	; (3620 <_i2c_master_set_config+0x374>)
    35ba:	47a0      	blx	r4
    35bc:	0003      	movs	r3, r0
    35be:	000c      	movs	r4, r1
    35c0:	0019      	movs	r1, r3
    35c2:	0022      	movs	r2, r4
    35c4:	4b18      	ldr	r3, [pc, #96]	; (3628 <_i2c_master_set_config+0x37c>)
    35c6:	0008      	movs	r0, r1
    35c8:	0011      	movs	r1, r2
    35ca:	4798      	blx	r3
    35cc:	0003      	movs	r3, r0
    35ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    35d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    35d2:	2b00      	cmp	r3, #0
    35d4:	d02e      	beq.n	3634 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    35d6:	4b16      	ldr	r3, [pc, #88]	; (3630 <_i2c_master_set_config+0x384>)
    35d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    35da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    35dc:	4798      	blx	r3
    35de:	0003      	movs	r3, r0
    35e0:	1e9a      	subs	r2, r3, #2
    35e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    35e4:	1ad3      	subs	r3, r2, r3
    35e6:	653b      	str	r3, [r7, #80]	; 0x50
    35e8:	e031      	b.n	364e <_i2c_master_set_config+0x3a2>
    35ea:	46c0      	nop			; (mov r8, r8)
    35ec:	0001316d 	.word	0x0001316d
    35f0:	0000316d 	.word	0x0000316d
    35f4:	00012fb1 	.word	0x00012fb1
    35f8:	00015d5d 	.word	0x00015d5d
    35fc:	00003195 	.word	0x00003195
    3600:	00015b21 	.word	0x00015b21
    3604:	0001ffc5 	.word	0x0001ffc5
    3608:	0001f431 	.word	0x0001f431
    360c:	e826d695 	.word	0xe826d695
    3610:	3e112e0b 	.word	0x3e112e0b
    3614:	0001e7a9 	.word	0x0001e7a9
    3618:	40240000 	.word	0x40240000
    361c:	0001f931 	.word	0x0001f931
    3620:	3ff00000 	.word	0x3ff00000
    3624:	0001edc9 	.word	0x0001edc9
    3628:	0001ff5d 	.word	0x0001ff5d
    362c:	40080000 	.word	0x40080000
    3630:	0001e469 	.word	0x0001e469
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    3634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3636:	005a      	lsls	r2, r3, #1
    3638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    363a:	18d3      	adds	r3, r2, r3
    363c:	1e5a      	subs	r2, r3, #1
    363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3640:	0059      	lsls	r1, r3, #1
    3642:	4b1d      	ldr	r3, [pc, #116]	; (36b8 <_i2c_master_set_config+0x40c>)
    3644:	0010      	movs	r0, r2
    3646:	4798      	blx	r3
    3648:	0003      	movs	r3, r0
    364a:	3b01      	subs	r3, #1
    364c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    364e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3650:	2bff      	cmp	r3, #255	; 0xff
    3652:	dc08      	bgt.n	3666 <_i2c_master_set_config+0x3ba>
    3654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3656:	2b00      	cmp	r3, #0
    3658:	db05      	blt.n	3666 <_i2c_master_set_config+0x3ba>
    365a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    365c:	2bff      	cmp	r3, #255	; 0xff
    365e:	dc02      	bgt.n	3666 <_i2c_master_set_config+0x3ba>
    3660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3662:	2b00      	cmp	r3, #0
    3664:	da06      	bge.n	3674 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3666:	233b      	movs	r3, #59	; 0x3b
    3668:	2210      	movs	r2, #16
    366a:	4694      	mov	ip, r2
    366c:	44bc      	add	ip, r7
    366e:	4463      	add	r3, ip
    3670:	2240      	movs	r2, #64	; 0x40
    3672:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    3674:	233b      	movs	r3, #59	; 0x3b
    3676:	2210      	movs	r2, #16
    3678:	4694      	mov	ip, r2
    367a:	44bc      	add	ip, r7
    367c:	4463      	add	r3, ip
    367e:	781b      	ldrb	r3, [r3, #0]
    3680:	2b40      	cmp	r3, #64	; 0x40
    3682:	d00e      	beq.n	36a2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3686:	22ff      	movs	r2, #255	; 0xff
    3688:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    368a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    368c:	041b      	lsls	r3, r3, #16
    368e:	0019      	movs	r1, r3
    3690:	23ff      	movs	r3, #255	; 0xff
    3692:	041b      	lsls	r3, r3, #16
    3694:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3696:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    369a:	0612      	lsls	r2, r2, #24
    369c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    36a0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    36a2:	233b      	movs	r3, #59	; 0x3b
    36a4:	2210      	movs	r2, #16
    36a6:	4694      	mov	ip, r2
    36a8:	44bc      	add	ip, r7
    36aa:	4463      	add	r3, ip
    36ac:	781b      	ldrb	r3, [r3, #0]
}
    36ae:	0018      	movs	r0, r3
    36b0:	46bd      	mov	sp, r7
    36b2:	b017      	add	sp, #92	; 0x5c
    36b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36b6:	46c0      	nop			; (mov r8, r8)
    36b8:	0001e469 	.word	0x0001e469

000036bc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    36bc:	b590      	push	{r4, r7, lr}
    36be:	b08b      	sub	sp, #44	; 0x2c
    36c0:	af00      	add	r7, sp, #0
    36c2:	60f8      	str	r0, [r7, #12]
    36c4:	60b9      	str	r1, [r7, #8]
    36c6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    36c8:	68fb      	ldr	r3, [r7, #12]
    36ca:	68ba      	ldr	r2, [r7, #8]
    36cc:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    36ce:	68fb      	ldr	r3, [r7, #12]
    36d0:	681b      	ldr	r3, [r3, #0]
    36d2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    36d4:	68fb      	ldr	r3, [r7, #12]
    36d6:	681b      	ldr	r3, [r3, #0]
    36d8:	0018      	movs	r0, r3
    36da:	4b3b      	ldr	r3, [pc, #236]	; (37c8 <i2c_master_init+0x10c>)
    36dc:	4798      	blx	r3
    36de:	0003      	movs	r3, r0
    36e0:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    36e2:	6a3b      	ldr	r3, [r7, #32]
    36e4:	3302      	adds	r3, #2
    36e6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    36e8:	6a3b      	ldr	r3, [r7, #32]
    36ea:	3314      	adds	r3, #20
    36ec:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    36ee:	2201      	movs	r2, #1
    36f0:	69fb      	ldr	r3, [r7, #28]
    36f2:	409a      	lsls	r2, r3
    36f4:	0013      	movs	r3, r2
    36f6:	0019      	movs	r1, r3
    36f8:	2002      	movs	r0, #2
    36fa:	4b34      	ldr	r3, [pc, #208]	; (37cc <i2c_master_init+0x110>)
    36fc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    36fe:	2314      	movs	r3, #20
    3700:	18fb      	adds	r3, r7, r3
    3702:	0018      	movs	r0, r3
    3704:	4b32      	ldr	r3, [pc, #200]	; (37d0 <i2c_master_init+0x114>)
    3706:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    3708:	687b      	ldr	r3, [r7, #4]
    370a:	7b1a      	ldrb	r2, [r3, #12]
    370c:	2314      	movs	r3, #20
    370e:	18fb      	adds	r3, r7, r3
    3710:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3712:	69bb      	ldr	r3, [r7, #24]
    3714:	b2db      	uxtb	r3, r3
    3716:	2214      	movs	r2, #20
    3718:	18ba      	adds	r2, r7, r2
    371a:	0011      	movs	r1, r2
    371c:	0018      	movs	r0, r3
    371e:	4b2d      	ldr	r3, [pc, #180]	; (37d4 <i2c_master_init+0x118>)
    3720:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3722:	69bb      	ldr	r3, [r7, #24]
    3724:	b2db      	uxtb	r3, r3
    3726:	0018      	movs	r0, r3
    3728:	4b2b      	ldr	r3, [pc, #172]	; (37d8 <i2c_master_init+0x11c>)
    372a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    372c:	687b      	ldr	r3, [r7, #4]
    372e:	7b1b      	ldrb	r3, [r3, #12]
    3730:	2100      	movs	r1, #0
    3732:	0018      	movs	r0, r3
    3734:	4b29      	ldr	r3, [pc, #164]	; (37dc <i2c_master_init+0x120>)
    3736:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    373a:	681b      	ldr	r3, [r3, #0]
    373c:	2202      	movs	r2, #2
    373e:	4013      	ands	r3, r2
    3740:	d001      	beq.n	3746 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    3742:	231c      	movs	r3, #28
    3744:	e03b      	b.n	37be <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3748:	681b      	ldr	r3, [r3, #0]
    374a:	2201      	movs	r2, #1
    374c:	4013      	ands	r3, r2
    374e:	d001      	beq.n	3754 <i2c_master_init+0x98>
		return STATUS_BUSY;
    3750:	2305      	movs	r3, #5
    3752:	e034      	b.n	37be <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3754:	68fb      	ldr	r3, [r7, #12]
    3756:	681b      	ldr	r3, [r3, #0]
    3758:	2217      	movs	r2, #23
    375a:	18bc      	adds	r4, r7, r2
    375c:	0018      	movs	r0, r3
    375e:	4b1a      	ldr	r3, [pc, #104]	; (37c8 <i2c_master_init+0x10c>)
    3760:	4798      	blx	r3
    3762:	0003      	movs	r3, r0
    3764:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    3766:	4a1e      	ldr	r2, [pc, #120]	; (37e0 <i2c_master_init+0x124>)
    3768:	2317      	movs	r3, #23
    376a:	18fb      	adds	r3, r7, r3
    376c:	781b      	ldrb	r3, [r3, #0]
    376e:	0011      	movs	r1, r2
    3770:	0018      	movs	r0, r3
    3772:	4b1c      	ldr	r3, [pc, #112]	; (37e4 <i2c_master_init+0x128>)
    3774:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3776:	2317      	movs	r3, #23
    3778:	18fb      	adds	r3, r7, r3
    377a:	781a      	ldrb	r2, [r3, #0]
    377c:	4b1a      	ldr	r3, [pc, #104]	; (37e8 <i2c_master_init+0x12c>)
    377e:	0092      	lsls	r2, r2, #2
    3780:	68f9      	ldr	r1, [r7, #12]
    3782:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    3784:	68fb      	ldr	r3, [r7, #12]
    3786:	2200      	movs	r2, #0
    3788:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    378a:	68fb      	ldr	r3, [r7, #12]
    378c:	2200      	movs	r2, #0
    378e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    3790:	68fb      	ldr	r3, [r7, #12]
    3792:	2200      	movs	r2, #0
    3794:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    3796:	68fb      	ldr	r3, [r7, #12]
    3798:	2200      	movs	r2, #0
    379a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    379c:	68fb      	ldr	r3, [r7, #12]
    379e:	2225      	movs	r2, #37	; 0x25
    37a0:	2100      	movs	r1, #0
    37a2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    37a4:	68fb      	ldr	r3, [r7, #12]
    37a6:	2200      	movs	r2, #0
    37a8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    37aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37ac:	2214      	movs	r2, #20
    37ae:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    37b0:	687a      	ldr	r2, [r7, #4]
    37b2:	68fb      	ldr	r3, [r7, #12]
    37b4:	0011      	movs	r1, r2
    37b6:	0018      	movs	r0, r3
    37b8:	4b0c      	ldr	r3, [pc, #48]	; (37ec <i2c_master_init+0x130>)
    37ba:	4798      	blx	r3
    37bc:	0003      	movs	r3, r0
}
    37be:	0018      	movs	r0, r3
    37c0:	46bd      	mov	sp, r7
    37c2:	b00b      	add	sp, #44	; 0x2c
    37c4:	bd90      	pop	{r4, r7, pc}
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	0001316d 	.word	0x0001316d
    37cc:	00003111 	.word	0x00003111
    37d0:	000030f9 	.word	0x000030f9
    37d4:	000159fd 	.word	0x000159fd
    37d8:	00015a41 	.word	0x00015a41
    37dc:	00012f25 	.word	0x00012f25
    37e0:	00000a35 	.word	0x00000a35
    37e4:	000131d1 	.word	0x000131d1
    37e8:	20005588 	.word	0x20005588
    37ec:	000032ad 	.word	0x000032ad

000037f0 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    37f0:	b580      	push	{r7, lr}
    37f2:	b084      	sub	sp, #16
    37f4:	af00      	add	r7, sp, #0
    37f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    37f8:	687b      	ldr	r3, [r7, #4]
    37fa:	681b      	ldr	r3, [r3, #0]
    37fc:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    37fe:	687b      	ldr	r3, [r7, #4]
    3800:	0018      	movs	r0, r3
    3802:	4b0f      	ldr	r3, [pc, #60]	; (3840 <i2c_master_reset+0x50>)
    3804:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	0018      	movs	r0, r3
    380a:	4b0e      	ldr	r3, [pc, #56]	; (3844 <i2c_master_reset+0x54>)
    380c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
    380e:	4b0e      	ldr	r3, [pc, #56]	; (3848 <i2c_master_reset+0x58>)
    3810:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    3812:	687b      	ldr	r3, [r7, #4]
    3814:	681b      	ldr	r3, [r3, #0]
    3816:	0018      	movs	r0, r3
    3818:	4b0c      	ldr	r3, [pc, #48]	; (384c <i2c_master_reset+0x5c>)
    381a:	4798      	blx	r3
    381c:	0003      	movs	r3, r0
    381e:	0018      	movs	r0, r3
    3820:	4b0b      	ldr	r3, [pc, #44]	; (3850 <i2c_master_reset+0x60>)
    3822:	4798      	blx	r3
	system_interrupt_leave_critical_section();
    3824:	4b0b      	ldr	r3, [pc, #44]	; (3854 <i2c_master_reset+0x64>)
    3826:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    3828:	687b      	ldr	r3, [r7, #4]
    382a:	0018      	movs	r0, r3
    382c:	4b04      	ldr	r3, [pc, #16]	; (3840 <i2c_master_reset+0x50>)
    382e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    3830:	68fb      	ldr	r3, [r7, #12]
    3832:	2201      	movs	r2, #1
    3834:	601a      	str	r2, [r3, #0]
}
    3836:	46c0      	nop			; (mov r8, r8)
    3838:	46bd      	mov	sp, r7
    383a:	b004      	add	sp, #16
    383c:	bd80      	pop	{r7, pc}
    383e:	46c0      	nop			; (mov r8, r8)
    3840:	00003231 	.word	0x00003231
    3844:	00003255 	.word	0x00003255
    3848:	000031b5 	.word	0x000031b5
    384c:	0001323d 	.word	0x0001323d
    3850:	00015b79 	.word	0x00015b79
    3854:	000031c9 	.word	0x000031c9

00003858 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3858:	b580      	push	{r7, lr}
    385a:	b084      	sub	sp, #16
    385c:	af00      	add	r7, sp, #0
    385e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3860:	687b      	ldr	r3, [r7, #4]
    3862:	681b      	ldr	r3, [r3, #0]
    3864:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3866:	230e      	movs	r3, #14
    3868:	18fb      	adds	r3, r7, r3
    386a:	2200      	movs	r2, #0
    386c:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    386e:	e00f      	b.n	3890 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    3870:	230e      	movs	r3, #14
    3872:	18fb      	adds	r3, r7, r3
    3874:	220e      	movs	r2, #14
    3876:	18ba      	adds	r2, r7, r2
    3878:	8812      	ldrh	r2, [r2, #0]
    387a:	3201      	adds	r2, #1
    387c:	801a      	strh	r2, [r3, #0]
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	891b      	ldrh	r3, [r3, #8]
    3882:	220e      	movs	r2, #14
    3884:	18ba      	adds	r2, r7, r2
    3886:	8812      	ldrh	r2, [r2, #0]
    3888:	429a      	cmp	r2, r3
    388a:	d301      	bcc.n	3890 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    388c:	2312      	movs	r3, #18
    388e:	e00e      	b.n	38ae <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3890:	68bb      	ldr	r3, [r7, #8]
    3892:	7e1b      	ldrb	r3, [r3, #24]
    3894:	b2db      	uxtb	r3, r3
    3896:	001a      	movs	r2, r3
    3898:	2301      	movs	r3, #1
    389a:	4013      	ands	r3, r2
    389c:	d106      	bne.n	38ac <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    389e:	68bb      	ldr	r3, [r7, #8]
    38a0:	7e1b      	ldrb	r3, [r3, #24]
    38a2:	b2db      	uxtb	r3, r3
    38a4:	001a      	movs	r2, r3
    38a6:	2302      	movs	r3, #2
    38a8:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    38aa:	d0e1      	beq.n	3870 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    38ac:	2300      	movs	r3, #0
}
    38ae:	0018      	movs	r0, r3
    38b0:	46bd      	mov	sp, r7
    38b2:	b004      	add	sp, #16
    38b4:	bd80      	pop	{r7, pc}
	...

000038b8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    38b8:	b590      	push	{r4, r7, lr}
    38ba:	b085      	sub	sp, #20
    38bc:	af00      	add	r7, sp, #0
    38be:	6078      	str	r0, [r7, #4]
    38c0:	000a      	movs	r2, r1
    38c2:	1cfb      	adds	r3, r7, #3
    38c4:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    38c6:	687b      	ldr	r3, [r7, #4]
    38c8:	681b      	ldr	r3, [r3, #0]
    38ca:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    38cc:	68fb      	ldr	r3, [r7, #12]
    38ce:	685b      	ldr	r3, [r3, #4]
    38d0:	2280      	movs	r2, #128	; 0x80
    38d2:	02d2      	lsls	r2, r2, #11
    38d4:	431a      	orrs	r2, r3
    38d6:	68fb      	ldr	r3, [r7, #12]
    38d8:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    38da:	1cfb      	adds	r3, r7, #3
    38dc:	781a      	ldrb	r2, [r3, #0]
    38de:	68fb      	ldr	r3, [r7, #12]
    38e0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    38e2:	230b      	movs	r3, #11
    38e4:	18fc      	adds	r4, r7, r3
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	0018      	movs	r0, r3
    38ea:	4b07      	ldr	r3, [pc, #28]	; (3908 <_i2c_master_send_hs_master_code+0x50>)
    38ec:	4798      	blx	r3
    38ee:	0003      	movs	r3, r0
    38f0:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    38f2:	68fb      	ldr	r3, [r7, #12]
    38f4:	2201      	movs	r2, #1
    38f6:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    38f8:	230b      	movs	r3, #11
    38fa:	18fb      	adds	r3, r7, r3
    38fc:	781b      	ldrb	r3, [r3, #0]
}
    38fe:	0018      	movs	r0, r3
    3900:	46bd      	mov	sp, r7
    3902:	b005      	add	sp, #20
    3904:	bd90      	pop	{r4, r7, pc}
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	00003859 	.word	0x00003859

0000390c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    390c:	b580      	push	{r7, lr}
    390e:	af00      	add	r7, sp, #0
    3910:	2000      	movs	r0, #0
    3912:	4b02      	ldr	r3, [pc, #8]	; (391c <TC3_Handler+0x10>)
    3914:	4798      	blx	r3
    3916:	46c0      	nop			; (mov r8, r8)
    3918:	46bd      	mov	sp, r7
    391a:	bd80      	pop	{r7, pc}
    391c:	00003949 	.word	0x00003949

00003920 <TC4_Handler>:
    3920:	b580      	push	{r7, lr}
    3922:	af00      	add	r7, sp, #0
    3924:	2001      	movs	r0, #1
    3926:	4b02      	ldr	r3, [pc, #8]	; (3930 <TC4_Handler+0x10>)
    3928:	4798      	blx	r3
    392a:	46c0      	nop			; (mov r8, r8)
    392c:	46bd      	mov	sp, r7
    392e:	bd80      	pop	{r7, pc}
    3930:	00003949 	.word	0x00003949

00003934 <TC5_Handler>:
    3934:	b580      	push	{r7, lr}
    3936:	af00      	add	r7, sp, #0
    3938:	2002      	movs	r0, #2
    393a:	4b02      	ldr	r3, [pc, #8]	; (3944 <TC5_Handler+0x10>)
    393c:	4798      	blx	r3
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	46bd      	mov	sp, r7
    3942:	bd80      	pop	{r7, pc}
    3944:	00003949 	.word	0x00003949

00003948 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3948:	b580      	push	{r7, lr}
    394a:	b084      	sub	sp, #16
    394c:	af00      	add	r7, sp, #0
    394e:	0002      	movs	r2, r0
    3950:	1dfb      	adds	r3, r7, #7
    3952:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    3954:	1dfb      	adds	r3, r7, #7
    3956:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    3958:	4b28      	ldr	r3, [pc, #160]	; (39fc <_tc_interrupt_handler+0xb4>)
    395a:	0092      	lsls	r2, r2, #2
    395c:	58d3      	ldr	r3, [r2, r3]
    395e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3960:	68fb      	ldr	r3, [r7, #12]
    3962:	681b      	ldr	r3, [r3, #0]
    3964:	7b9b      	ldrb	r3, [r3, #14]
    3966:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    3968:	68fa      	ldr	r2, [r7, #12]
    396a:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    396c:	4013      	ands	r3, r2
    396e:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    3970:	68fb      	ldr	r3, [r7, #12]
    3972:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3974:	230b      	movs	r3, #11
    3976:	18fb      	adds	r3, r7, r3
    3978:	400a      	ands	r2, r1
    397a:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    397c:	230b      	movs	r3, #11
    397e:	18fb      	adds	r3, r7, r3
    3980:	781b      	ldrb	r3, [r3, #0]
    3982:	2201      	movs	r2, #1
    3984:	4013      	ands	r3, r2
    3986:	d008      	beq.n	399a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3988:	68fb      	ldr	r3, [r7, #12]
    398a:	689b      	ldr	r3, [r3, #8]
    398c:	68fa      	ldr	r2, [r7, #12]
    398e:	0010      	movs	r0, r2
    3990:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3992:	68fb      	ldr	r3, [r7, #12]
    3994:	681b      	ldr	r3, [r3, #0]
    3996:	2201      	movs	r2, #1
    3998:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    399a:	230b      	movs	r3, #11
    399c:	18fb      	adds	r3, r7, r3
    399e:	781b      	ldrb	r3, [r3, #0]
    39a0:	2202      	movs	r2, #2
    39a2:	4013      	ands	r3, r2
    39a4:	d008      	beq.n	39b8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    39a6:	68fb      	ldr	r3, [r7, #12]
    39a8:	68db      	ldr	r3, [r3, #12]
    39aa:	68fa      	ldr	r2, [r7, #12]
    39ac:	0010      	movs	r0, r2
    39ae:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    39b0:	68fb      	ldr	r3, [r7, #12]
    39b2:	681b      	ldr	r3, [r3, #0]
    39b4:	2202      	movs	r2, #2
    39b6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    39b8:	230b      	movs	r3, #11
    39ba:	18fb      	adds	r3, r7, r3
    39bc:	781b      	ldrb	r3, [r3, #0]
    39be:	2210      	movs	r2, #16
    39c0:	4013      	ands	r3, r2
    39c2:	d008      	beq.n	39d6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    39c4:	68fb      	ldr	r3, [r7, #12]
    39c6:	691b      	ldr	r3, [r3, #16]
    39c8:	68fa      	ldr	r2, [r7, #12]
    39ca:	0010      	movs	r0, r2
    39cc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    39ce:	68fb      	ldr	r3, [r7, #12]
    39d0:	681b      	ldr	r3, [r3, #0]
    39d2:	2210      	movs	r2, #16
    39d4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    39d6:	230b      	movs	r3, #11
    39d8:	18fb      	adds	r3, r7, r3
    39da:	781b      	ldrb	r3, [r3, #0]
    39dc:	2220      	movs	r2, #32
    39de:	4013      	ands	r3, r2
    39e0:	d008      	beq.n	39f4 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    39e2:	68fb      	ldr	r3, [r7, #12]
    39e4:	695b      	ldr	r3, [r3, #20]
    39e6:	68fa      	ldr	r2, [r7, #12]
    39e8:	0010      	movs	r0, r2
    39ea:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    39ec:	68fb      	ldr	r3, [r7, #12]
    39ee:	681b      	ldr	r3, [r3, #0]
    39f0:	2220      	movs	r2, #32
    39f2:	739a      	strb	r2, [r3, #14]
	}
}
    39f4:	46c0      	nop			; (mov r8, r8)
    39f6:	46bd      	mov	sp, r7
    39f8:	b004      	add	sp, #16
    39fa:	bd80      	pop	{r7, pc}
    39fc:	20004370 	.word	0x20004370

00003a00 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
    3a00:	b580      	push	{r7, lr}
    3a02:	b084      	sub	sp, #16
    3a04:	af00      	add	r7, sp, #0
    3a06:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
    3a08:	2300      	movs	r3, #0
    3a0a:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
    3a0c:	687b      	ldr	r3, [r7, #4]
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d101      	bne.n	3a16 <FreeRTOS_CLIRegisterCommand+0x16>
    3a12:	b672      	cpsid	i
    3a14:	e7fe      	b.n	3a14 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    3a16:	2008      	movs	r0, #8
    3a18:	4b11      	ldr	r3, [pc, #68]	; (3a60 <FreeRTOS_CLIRegisterCommand+0x60>)
    3a1a:	4798      	blx	r3
    3a1c:	0003      	movs	r3, r0
    3a1e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
    3a20:	68bb      	ldr	r3, [r7, #8]
    3a22:	2b00      	cmp	r3, #0
    3a24:	d101      	bne.n	3a2a <FreeRTOS_CLIRegisterCommand+0x2a>
    3a26:	b672      	cpsid	i
    3a28:	e7fe      	b.n	3a28 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
    3a2a:	68bb      	ldr	r3, [r7, #8]
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	d012      	beq.n	3a56 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
    3a30:	4b0c      	ldr	r3, [pc, #48]	; (3a64 <FreeRTOS_CLIRegisterCommand+0x64>)
    3a32:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    3a34:	68bb      	ldr	r3, [r7, #8]
    3a36:	687a      	ldr	r2, [r7, #4]
    3a38:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
    3a3a:	68bb      	ldr	r3, [r7, #8]
    3a3c:	2200      	movs	r2, #0
    3a3e:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
    3a40:	4b09      	ldr	r3, [pc, #36]	; (3a68 <FreeRTOS_CLIRegisterCommand+0x68>)
    3a42:	681b      	ldr	r3, [r3, #0]
    3a44:	68ba      	ldr	r2, [r7, #8]
    3a46:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
    3a48:	4b07      	ldr	r3, [pc, #28]	; (3a68 <FreeRTOS_CLIRegisterCommand+0x68>)
    3a4a:	68ba      	ldr	r2, [r7, #8]
    3a4c:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
    3a4e:	4b07      	ldr	r3, [pc, #28]	; (3a6c <FreeRTOS_CLIRegisterCommand+0x6c>)
    3a50:	4798      	blx	r3

		xReturn = pdPASS;
    3a52:	2301      	movs	r3, #1
    3a54:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    3a56:	68fb      	ldr	r3, [r7, #12]
}
    3a58:	0018      	movs	r0, r3
    3a5a:	46bd      	mov	sp, r7
    3a5c:	b004      	add	sp, #16
    3a5e:	bd80      	pop	{r7, pc}
    3a60:	00005e11 	.word	0x00005e11
    3a64:	00005cd9 	.word	0x00005cd9
    3a68:	200000e4 	.word	0x200000e4
    3a6c:	00005cfd 	.word	0x00005cfd

00003a70 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
    3a70:	b580      	push	{r7, lr}
    3a72:	b088      	sub	sp, #32
    3a74:	af00      	add	r7, sp, #0
    3a76:	60f8      	str	r0, [r7, #12]
    3a78:	60b9      	str	r1, [r7, #8]
    3a7a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
    3a7c:	2301      	movs	r3, #1
    3a7e:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
    3a80:	4b3d      	ldr	r3, [pc, #244]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3a82:	681b      	ldr	r3, [r3, #0]
    3a84:	2b00      	cmp	r3, #0
    3a86:	d144      	bne.n	3b12 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    3a88:	4b3b      	ldr	r3, [pc, #236]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3a8a:	4a3c      	ldr	r2, [pc, #240]	; (3b7c <FreeRTOS_CLIProcessCommand+0x10c>)
    3a8c:	601a      	str	r2, [r3, #0]
    3a8e:	e03a      	b.n	3b06 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    3a90:	4b39      	ldr	r3, [pc, #228]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3a92:	681b      	ldr	r3, [r3, #0]
    3a94:	681b      	ldr	r3, [r3, #0]
    3a96:	681b      	ldr	r3, [r3, #0]
    3a98:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    3a9a:	69bb      	ldr	r3, [r7, #24]
    3a9c:	0018      	movs	r0, r3
    3a9e:	4b38      	ldr	r3, [pc, #224]	; (3b80 <FreeRTOS_CLIProcessCommand+0x110>)
    3aa0:	4798      	blx	r3
    3aa2:	0003      	movs	r3, r0
    3aa4:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    3aa6:	68fa      	ldr	r2, [r7, #12]
    3aa8:	697b      	ldr	r3, [r7, #20]
    3aaa:	18d3      	adds	r3, r2, r3
    3aac:	781b      	ldrb	r3, [r3, #0]
    3aae:	2b20      	cmp	r3, #32
    3ab0:	d005      	beq.n	3abe <FreeRTOS_CLIProcessCommand+0x4e>
    3ab2:	68fa      	ldr	r2, [r7, #12]
    3ab4:	697b      	ldr	r3, [r7, #20]
    3ab6:	18d3      	adds	r3, r2, r3
    3ab8:	781b      	ldrb	r3, [r3, #0]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d11e      	bne.n	3afc <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    3abe:	697a      	ldr	r2, [r7, #20]
    3ac0:	69b9      	ldr	r1, [r7, #24]
    3ac2:	68fb      	ldr	r3, [r7, #12]
    3ac4:	0018      	movs	r0, r3
    3ac6:	4b2f      	ldr	r3, [pc, #188]	; (3b84 <FreeRTOS_CLIProcessCommand+0x114>)
    3ac8:	4798      	blx	r3
    3aca:	1e03      	subs	r3, r0, #0
    3acc:	d116      	bne.n	3afc <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    3ace:	4b2a      	ldr	r3, [pc, #168]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3ad0:	681b      	ldr	r3, [r3, #0]
    3ad2:	681b      	ldr	r3, [r3, #0]
    3ad4:	7b1b      	ldrb	r3, [r3, #12]
    3ad6:	b25b      	sxtb	r3, r3
    3ad8:	2b00      	cmp	r3, #0
    3ada:	db19      	blt.n	3b10 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
    3adc:	68fb      	ldr	r3, [r7, #12]
    3ade:	0018      	movs	r0, r3
    3ae0:	4b29      	ldr	r3, [pc, #164]	; (3b88 <FreeRTOS_CLIProcessCommand+0x118>)
    3ae2:	4798      	blx	r3
    3ae4:	0003      	movs	r3, r0
    3ae6:	001a      	movs	r2, r3
    3ae8:	4b23      	ldr	r3, [pc, #140]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3aea:	681b      	ldr	r3, [r3, #0]
    3aec:	681b      	ldr	r3, [r3, #0]
    3aee:	7b1b      	ldrb	r3, [r3, #12]
    3af0:	b25b      	sxtb	r3, r3
    3af2:	429a      	cmp	r2, r3
    3af4:	d00c      	beq.n	3b10 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
    3af6:	2300      	movs	r3, #0
    3af8:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
    3afa:	e009      	b.n	3b10 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    3afc:	4b1e      	ldr	r3, [pc, #120]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3afe:	681b      	ldr	r3, [r3, #0]
    3b00:	685a      	ldr	r2, [r3, #4]
    3b02:	4b1d      	ldr	r3, [pc, #116]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3b04:	601a      	str	r2, [r3, #0]
    3b06:	4b1c      	ldr	r3, [pc, #112]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3b08:	681b      	ldr	r3, [r3, #0]
    3b0a:	2b00      	cmp	r3, #0
    3b0c:	d1c0      	bne.n	3a90 <FreeRTOS_CLIProcessCommand+0x20>
    3b0e:	e000      	b.n	3b12 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
    3b10:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    3b12:	4b19      	ldr	r3, [pc, #100]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3b14:	681b      	ldr	r3, [r3, #0]
    3b16:	2b00      	cmp	r3, #0
    3b18:	d00c      	beq.n	3b34 <FreeRTOS_CLIProcessCommand+0xc4>
    3b1a:	69fb      	ldr	r3, [r7, #28]
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d109      	bne.n	3b34 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    3b20:	687a      	ldr	r2, [r7, #4]
    3b22:	491a      	ldr	r1, [pc, #104]	; (3b8c <FreeRTOS_CLIProcessCommand+0x11c>)
    3b24:	68bb      	ldr	r3, [r7, #8]
    3b26:	0018      	movs	r0, r3
    3b28:	4b19      	ldr	r3, [pc, #100]	; (3b90 <FreeRTOS_CLIProcessCommand+0x120>)
    3b2a:	4798      	blx	r3
		pxCommand = NULL;
    3b2c:	4b12      	ldr	r3, [pc, #72]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3b2e:	2200      	movs	r2, #0
    3b30:	601a      	str	r2, [r3, #0]
    3b32:	e01c      	b.n	3b6e <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
    3b34:	4b10      	ldr	r3, [pc, #64]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3b36:	681b      	ldr	r3, [r3, #0]
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d010      	beq.n	3b5e <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    3b3c:	4b0e      	ldr	r3, [pc, #56]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	681b      	ldr	r3, [r3, #0]
    3b42:	689b      	ldr	r3, [r3, #8]
    3b44:	68fa      	ldr	r2, [r7, #12]
    3b46:	6879      	ldr	r1, [r7, #4]
    3b48:	68b8      	ldr	r0, [r7, #8]
    3b4a:	4798      	blx	r3
    3b4c:	0003      	movs	r3, r0
    3b4e:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
    3b50:	69fb      	ldr	r3, [r7, #28]
    3b52:	2b00      	cmp	r3, #0
    3b54:	d10b      	bne.n	3b6e <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
    3b56:	4b08      	ldr	r3, [pc, #32]	; (3b78 <FreeRTOS_CLIProcessCommand+0x108>)
    3b58:	2200      	movs	r2, #0
    3b5a:	601a      	str	r2, [r3, #0]
    3b5c:	e007      	b.n	3b6e <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    3b5e:	687a      	ldr	r2, [r7, #4]
    3b60:	490c      	ldr	r1, [pc, #48]	; (3b94 <FreeRTOS_CLIProcessCommand+0x124>)
    3b62:	68bb      	ldr	r3, [r7, #8]
    3b64:	0018      	movs	r0, r3
    3b66:	4b0a      	ldr	r3, [pc, #40]	; (3b90 <FreeRTOS_CLIProcessCommand+0x120>)
    3b68:	4798      	blx	r3
		xReturn = pdFALSE;
    3b6a:	2300      	movs	r3, #0
    3b6c:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
    3b6e:	69fb      	ldr	r3, [r7, #28]
}
    3b70:	0018      	movs	r0, r3
    3b72:	46bd      	mov	sp, r7
    3b74:	b008      	add	sp, #32
    3b76:	bd80      	pop	{r7, pc}
    3b78:	20000b24 	.word	0x20000b24
    3b7c:	200000dc 	.word	0x200000dc
    3b80:	000204db 	.word	0x000204db
    3b84:	000204e9 	.word	0x000204e9
    3b88:	00003bf9 	.word	0x00003bf9
    3b8c:	00022148 	.word	0x00022148
    3b90:	0002050b 	.word	0x0002050b
    3b94:	000221a0 	.word	0x000221a0

00003b98 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    3b98:	b580      	push	{r7, lr}
    3b9a:	b086      	sub	sp, #24
    3b9c:	af00      	add	r7, sp, #0
    3b9e:	60f8      	str	r0, [r7, #12]
    3ba0:	60b9      	str	r1, [r7, #8]
    3ba2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    3ba4:	4b11      	ldr	r3, [pc, #68]	; (3bec <prvHelpCommand+0x54>)
    3ba6:	681b      	ldr	r3, [r3, #0]
    3ba8:	2b00      	cmp	r3, #0
    3baa:	d102      	bne.n	3bb2 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
    3bac:	4b0f      	ldr	r3, [pc, #60]	; (3bec <prvHelpCommand+0x54>)
    3bae:	4a10      	ldr	r2, [pc, #64]	; (3bf0 <prvHelpCommand+0x58>)
    3bb0:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    3bb2:	4b0e      	ldr	r3, [pc, #56]	; (3bec <prvHelpCommand+0x54>)
    3bb4:	681b      	ldr	r3, [r3, #0]
    3bb6:	681b      	ldr	r3, [r3, #0]
    3bb8:	6859      	ldr	r1, [r3, #4]
    3bba:	68ba      	ldr	r2, [r7, #8]
    3bbc:	68fb      	ldr	r3, [r7, #12]
    3bbe:	0018      	movs	r0, r3
    3bc0:	4b0c      	ldr	r3, [pc, #48]	; (3bf4 <prvHelpCommand+0x5c>)
    3bc2:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    3bc4:	4b09      	ldr	r3, [pc, #36]	; (3bec <prvHelpCommand+0x54>)
    3bc6:	681b      	ldr	r3, [r3, #0]
    3bc8:	685a      	ldr	r2, [r3, #4]
    3bca:	4b08      	ldr	r3, [pc, #32]	; (3bec <prvHelpCommand+0x54>)
    3bcc:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
    3bce:	4b07      	ldr	r3, [pc, #28]	; (3bec <prvHelpCommand+0x54>)
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d102      	bne.n	3bdc <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
    3bd6:	2300      	movs	r3, #0
    3bd8:	617b      	str	r3, [r7, #20]
    3bda:	e001      	b.n	3be0 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
    3bdc:	2301      	movs	r3, #1
    3bde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    3be0:	697b      	ldr	r3, [r7, #20]
}
    3be2:	0018      	movs	r0, r3
    3be4:	46bd      	mov	sp, r7
    3be6:	b006      	add	sp, #24
    3be8:	bd80      	pop	{r7, pc}
    3bea:	46c0      	nop			; (mov r8, r8)
    3bec:	20000b28 	.word	0x20000b28
    3bf0:	200000dc 	.word	0x200000dc
    3bf4:	0002050b 	.word	0x0002050b

00003bf8 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
    3bf8:	b580      	push	{r7, lr}
    3bfa:	b084      	sub	sp, #16
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
    3c00:	230f      	movs	r3, #15
    3c02:	18fb      	adds	r3, r7, r3
    3c04:	2200      	movs	r2, #0
    3c06:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
    3c08:	2300      	movs	r3, #0
    3c0a:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    3c0c:	e018      	b.n	3c40 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	781b      	ldrb	r3, [r3, #0]
    3c12:	2b20      	cmp	r3, #32
    3c14:	d10f      	bne.n	3c36 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
    3c16:	68bb      	ldr	r3, [r7, #8]
    3c18:	2b01      	cmp	r3, #1
    3c1a:	d00e      	beq.n	3c3a <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
    3c1c:	230f      	movs	r3, #15
    3c1e:	18fb      	adds	r3, r7, r3
    3c20:	781b      	ldrb	r3, [r3, #0]
    3c22:	b25b      	sxtb	r3, r3
    3c24:	b2db      	uxtb	r3, r3
    3c26:	3301      	adds	r3, #1
    3c28:	b2da      	uxtb	r2, r3
    3c2a:	230f      	movs	r3, #15
    3c2c:	18fb      	adds	r3, r7, r3
    3c2e:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
    3c30:	2301      	movs	r3, #1
    3c32:	60bb      	str	r3, [r7, #8]
    3c34:	e001      	b.n	3c3a <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
    3c36:	2300      	movs	r3, #0
    3c38:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
    3c3a:	687b      	ldr	r3, [r7, #4]
    3c3c:	3301      	adds	r3, #1
    3c3e:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
    3c40:	687b      	ldr	r3, [r7, #4]
    3c42:	781b      	ldrb	r3, [r3, #0]
    3c44:	2b00      	cmp	r3, #0
    3c46:	d1e2      	bne.n	3c0e <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    3c48:	68bb      	ldr	r3, [r7, #8]
    3c4a:	2b01      	cmp	r3, #1
    3c4c:	d109      	bne.n	3c62 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
    3c4e:	230f      	movs	r3, #15
    3c50:	18fb      	adds	r3, r7, r3
    3c52:	781b      	ldrb	r3, [r3, #0]
    3c54:	b25b      	sxtb	r3, r3
    3c56:	b2db      	uxtb	r3, r3
    3c58:	3b01      	subs	r3, #1
    3c5a:	b2da      	uxtb	r2, r3
    3c5c:	230f      	movs	r3, #15
    3c5e:	18fb      	adds	r3, r7, r3
    3c60:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
    3c62:	230f      	movs	r3, #15
    3c64:	18fb      	adds	r3, r7, r3
    3c66:	781b      	ldrb	r3, [r3, #0]
    3c68:	b25b      	sxtb	r3, r3
}
    3c6a:	0018      	movs	r0, r3
    3c6c:	46bd      	mov	sp, r7
    3c6e:	b004      	add	sp, #16
    3c70:	bd80      	pop	{r7, pc}
	...

00003c74 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
    3c74:	b580      	push	{r7, lr}
    3c76:	b082      	sub	sp, #8
    3c78:	af00      	add	r7, sp, #0
    3c7a:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
    3c7c:	687b      	ldr	r3, [r7, #4]
    3c7e:	0018      	movs	r0, r3
    3c80:	4b03      	ldr	r3, [pc, #12]	; (3c90 <prvTraceGetQueueNumber+0x1c>)
    3c82:	4798      	blx	r3
    3c84:	0003      	movs	r3, r0
}
    3c86:	0018      	movs	r0, r3
    3c88:	46bd      	mov	sp, r7
    3c8a:	b002      	add	sp, #8
    3c8c:	bd80      	pop	{r7, pc}
    3c8e:	46c0      	nop			; (mov r8, r8)
    3c90:	00007439 	.word	0x00007439

00003c94 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    3c94:	b580      	push	{r7, lr}
    3c96:	b082      	sub	sp, #8
    3c98:	af00      	add	r7, sp, #0
    3c9a:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    3c9c:	687b      	ldr	r3, [r7, #4]
    3c9e:	0018      	movs	r0, r3
    3ca0:	4b03      	ldr	r3, [pc, #12]	; (3cb0 <prvTraceGetQueueType+0x1c>)
    3ca2:	4798      	blx	r3
    3ca4:	0003      	movs	r3, r0
}
    3ca6:	0018      	movs	r0, r3
    3ca8:	46bd      	mov	sp, r7
    3caa:	b002      	add	sp, #8
    3cac:	bd80      	pop	{r7, pc}
    3cae:	46c0      	nop			; (mov r8, r8)
    3cb0:	00007465 	.word	0x00007465

00003cb4 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    3cb4:	b580      	push	{r7, lr}
    3cb6:	b082      	sub	sp, #8
    3cb8:	af00      	add	r7, sp, #0
    3cba:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    3cbc:	687b      	ldr	r3, [r7, #4]
    3cbe:	0018      	movs	r0, r3
    3cc0:	4b03      	ldr	r3, [pc, #12]	; (3cd0 <prvTraceGetTaskNumberLow16+0x1c>)
    3cc2:	4798      	blx	r3
    3cc4:	0003      	movs	r3, r0
    3cc6:	b29b      	uxth	r3, r3
}
    3cc8:	0018      	movs	r0, r3
    3cca:	46bd      	mov	sp, r7
    3ccc:	b002      	add	sp, #8
    3cce:	bd80      	pop	{r7, pc}
    3cd0:	00008795 	.word	0x00008795

00003cd4 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    3cd4:	b580      	push	{r7, lr}
    3cd6:	b082      	sub	sp, #8
    3cd8:	af00      	add	r7, sp, #0
    3cda:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	0018      	movs	r0, r3
    3ce0:	4b04      	ldr	r3, [pc, #16]	; (3cf4 <prvTraceGetTaskNumberHigh16+0x20>)
    3ce2:	4798      	blx	r3
    3ce4:	0003      	movs	r3, r0
    3ce6:	0c1b      	lsrs	r3, r3, #16
    3ce8:	b29b      	uxth	r3, r3
}
    3cea:	0018      	movs	r0, r3
    3cec:	46bd      	mov	sp, r7
    3cee:	b002      	add	sp, #8
    3cf0:	bd80      	pop	{r7, pc}
    3cf2:	46c0      	nop			; (mov r8, r8)
    3cf4:	00008795 	.word	0x00008795

00003cf8 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	b082      	sub	sp, #8
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
    3d00:	000a      	movs	r2, r1
    3d02:	1cbb      	adds	r3, r7, #2
    3d04:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    3d06:	687b      	ldr	r3, [r7, #4]
    3d08:	0018      	movs	r0, r3
    3d0a:	4b08      	ldr	r3, [pc, #32]	; (3d2c <prvTraceSetTaskNumberLow16+0x34>)
    3d0c:	4798      	blx	r3
    3d0e:	0003      	movs	r3, r0
    3d10:	0c1b      	lsrs	r3, r3, #16
    3d12:	041a      	lsls	r2, r3, #16
    3d14:	1cbb      	adds	r3, r7, #2
    3d16:	881b      	ldrh	r3, [r3, #0]
    3d18:	431a      	orrs	r2, r3
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	0011      	movs	r1, r2
    3d1e:	0018      	movs	r0, r3
    3d20:	4b03      	ldr	r3, [pc, #12]	; (3d30 <prvTraceSetTaskNumberLow16+0x38>)
    3d22:	4798      	blx	r3
}
    3d24:	46c0      	nop			; (mov r8, r8)
    3d26:	46bd      	mov	sp, r7
    3d28:	b002      	add	sp, #8
    3d2a:	bd80      	pop	{r7, pc}
    3d2c:	00008795 	.word	0x00008795
    3d30:	000087bd 	.word	0x000087bd

00003d34 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    3d34:	b580      	push	{r7, lr}
    3d36:	b082      	sub	sp, #8
    3d38:	af00      	add	r7, sp, #0
    3d3a:	6078      	str	r0, [r7, #4]
    3d3c:	000a      	movs	r2, r1
    3d3e:	1cbb      	adds	r3, r7, #2
    3d40:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    3d42:	687b      	ldr	r3, [r7, #4]
    3d44:	0018      	movs	r0, r3
    3d46:	4b09      	ldr	r3, [pc, #36]	; (3d6c <prvTraceSetTaskNumberHigh16+0x38>)
    3d48:	4798      	blx	r3
    3d4a:	0003      	movs	r3, r0
    3d4c:	041b      	lsls	r3, r3, #16
    3d4e:	0c1a      	lsrs	r2, r3, #16
    3d50:	1cbb      	adds	r3, r7, #2
    3d52:	881b      	ldrh	r3, [r3, #0]
    3d54:	041b      	lsls	r3, r3, #16
    3d56:	431a      	orrs	r2, r3
    3d58:	687b      	ldr	r3, [r7, #4]
    3d5a:	0011      	movs	r1, r2
    3d5c:	0018      	movs	r0, r3
    3d5e:	4b04      	ldr	r3, [pc, #16]	; (3d70 <prvTraceSetTaskNumberHigh16+0x3c>)
    3d60:	4798      	blx	r3
}
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	46bd      	mov	sp, r7
    3d66:	b002      	add	sp, #8
    3d68:	bd80      	pop	{r7, pc}
    3d6a:	46c0      	nop			; (mov r8, r8)
    3d6c:	00008795 	.word	0x00008795
    3d70:	000087bd 	.word	0x000087bd

00003d74 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    3d74:	b580      	push	{r7, lr}
    3d76:	b082      	sub	sp, #8
    3d78:	af00      	add	r7, sp, #0
    3d7a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    3d7c:	687b      	ldr	r3, [r7, #4]
    3d7e:	0018      	movs	r0, r3
    3d80:	4b03      	ldr	r3, [pc, #12]	; (3d90 <prvTraceGetQueueNumberLow16+0x1c>)
    3d82:	4798      	blx	r3
    3d84:	0003      	movs	r3, r0
    3d86:	b29b      	uxth	r3, r3
}
    3d88:	0018      	movs	r0, r3
    3d8a:	46bd      	mov	sp, r7
    3d8c:	b002      	add	sp, #8
    3d8e:	bd80      	pop	{r7, pc}
    3d90:	00003c75 	.word	0x00003c75

00003d94 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b082      	sub	sp, #8
    3d98:	af00      	add	r7, sp, #0
    3d9a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    3d9c:	687b      	ldr	r3, [r7, #4]
    3d9e:	0018      	movs	r0, r3
    3da0:	4b04      	ldr	r3, [pc, #16]	; (3db4 <prvTraceGetQueueNumberHigh16+0x20>)
    3da2:	4798      	blx	r3
    3da4:	0003      	movs	r3, r0
    3da6:	0c1b      	lsrs	r3, r3, #16
    3da8:	b29b      	uxth	r3, r3
}
    3daa:	0018      	movs	r0, r3
    3dac:	46bd      	mov	sp, r7
    3dae:	b002      	add	sp, #8
    3db0:	bd80      	pop	{r7, pc}
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	00003c75 	.word	0x00003c75

00003db8 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    3db8:	b580      	push	{r7, lr}
    3dba:	b082      	sub	sp, #8
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
    3dc0:	000a      	movs	r2, r1
    3dc2:	1cbb      	adds	r3, r7, #2
    3dc4:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    3dc6:	687b      	ldr	r3, [r7, #4]
    3dc8:	0018      	movs	r0, r3
    3dca:	4b08      	ldr	r3, [pc, #32]	; (3dec <prvTraceSetQueueNumberLow16+0x34>)
    3dcc:	4798      	blx	r3
    3dce:	0003      	movs	r3, r0
    3dd0:	0c1b      	lsrs	r3, r3, #16
    3dd2:	041a      	lsls	r2, r3, #16
    3dd4:	1cbb      	adds	r3, r7, #2
    3dd6:	881b      	ldrh	r3, [r3, #0]
    3dd8:	431a      	orrs	r2, r3
    3dda:	687b      	ldr	r3, [r7, #4]
    3ddc:	0011      	movs	r1, r2
    3dde:	0018      	movs	r0, r3
    3de0:	4b03      	ldr	r3, [pc, #12]	; (3df0 <prvTraceSetQueueNumberLow16+0x38>)
    3de2:	4798      	blx	r3
}
    3de4:	46c0      	nop			; (mov r8, r8)
    3de6:	46bd      	mov	sp, r7
    3de8:	b002      	add	sp, #8
    3dea:	bd80      	pop	{r7, pc}
    3dec:	00003c75 	.word	0x00003c75
    3df0:	0000744d 	.word	0x0000744d

00003df4 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    3df4:	b580      	push	{r7, lr}
    3df6:	b082      	sub	sp, #8
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
    3dfc:	000a      	movs	r2, r1
    3dfe:	1cbb      	adds	r3, r7, #2
    3e00:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	0018      	movs	r0, r3
    3e06:	4b09      	ldr	r3, [pc, #36]	; (3e2c <prvTraceSetQueueNumberHigh16+0x38>)
    3e08:	4798      	blx	r3
    3e0a:	0003      	movs	r3, r0
    3e0c:	041b      	lsls	r3, r3, #16
    3e0e:	0c1a      	lsrs	r2, r3, #16
    3e10:	1cbb      	adds	r3, r7, #2
    3e12:	881b      	ldrh	r3, [r3, #0]
    3e14:	041b      	lsls	r3, r3, #16
    3e16:	431a      	orrs	r2, r3
    3e18:	687b      	ldr	r3, [r7, #4]
    3e1a:	0011      	movs	r1, r2
    3e1c:	0018      	movs	r0, r3
    3e1e:	4b04      	ldr	r3, [pc, #16]	; (3e30 <prvTraceSetQueueNumberHigh16+0x3c>)
    3e20:	4798      	blx	r3
}
    3e22:	46c0      	nop			; (mov r8, r8)
    3e24:	46bd      	mov	sp, r7
    3e26:	b002      	add	sp, #8
    3e28:	bd80      	pop	{r7, pc}
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	00003c75 	.word	0x00003c75
    3e30:	0000744d 	.word	0x0000744d

00003e34 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
    3e34:	b580      	push	{r7, lr}
    3e36:	b084      	sub	sp, #16
    3e38:	af00      	add	r7, sp, #0
    3e3a:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
    3e3c:	2300      	movs	r3, #0
    3e3e:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    3e40:	2300      	movs	r3, #0
    3e42:	60bb      	str	r3, [r7, #8]
    3e44:	e018      	b.n	3e78 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
    3e46:	4b14      	ldr	r3, [pc, #80]	; (3e98 <prvAddTaskToStackMonitor+0x64>)
    3e48:	68ba      	ldr	r2, [r7, #8]
    3e4a:	00d2      	lsls	r2, r2, #3
    3e4c:	58d3      	ldr	r3, [r2, r3]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d10f      	bne.n	3e72 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
    3e52:	4b11      	ldr	r3, [pc, #68]	; (3e98 <prvAddTaskToStackMonitor+0x64>)
    3e54:	68ba      	ldr	r2, [r7, #8]
    3e56:	00d2      	lsls	r2, r2, #3
    3e58:	6879      	ldr	r1, [r7, #4]
    3e5a:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
    3e5c:	4a0e      	ldr	r2, [pc, #56]	; (3e98 <prvAddTaskToStackMonitor+0x64>)
    3e5e:	68bb      	ldr	r3, [r7, #8]
    3e60:	00db      	lsls	r3, r3, #3
    3e62:	18d3      	adds	r3, r2, r3
    3e64:	3304      	adds	r3, #4
    3e66:	2201      	movs	r2, #1
    3e68:	4252      	negs	r2, r2
    3e6a:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
    3e6c:	2301      	movs	r3, #1
    3e6e:	60fb      	str	r3, [r7, #12]
			break;
    3e70:	e005      	b.n	3e7e <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
    3e72:	68bb      	ldr	r3, [r7, #8]
    3e74:	3301      	adds	r3, #1
    3e76:	60bb      	str	r3, [r7, #8]
    3e78:	68bb      	ldr	r3, [r7, #8]
    3e7a:	2b09      	cmp	r3, #9
    3e7c:	dde3      	ble.n	3e46 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
    3e7e:	68fb      	ldr	r3, [r7, #12]
    3e80:	2b00      	cmp	r3, #0
    3e82:	d104      	bne.n	3e8e <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
    3e84:	4b05      	ldr	r3, [pc, #20]	; (3e9c <prvAddTaskToStackMonitor+0x68>)
    3e86:	681b      	ldr	r3, [r3, #0]
    3e88:	1c5a      	adds	r2, r3, #1
    3e8a:	4b04      	ldr	r3, [pc, #16]	; (3e9c <prvAddTaskToStackMonitor+0x68>)
    3e8c:	601a      	str	r2, [r3, #0]
	}
}
    3e8e:	46c0      	nop			; (mov r8, r8)
    3e90:	46bd      	mov	sp, r7
    3e92:	b004      	add	sp, #16
    3e94:	bd80      	pop	{r7, pc}
    3e96:	46c0      	nop			; (mov r8, r8)
    3e98:	20000b30 	.word	0x20000b30
    3e9c:	20000b80 	.word	0x20000b80

00003ea0 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
    3ea0:	b590      	push	{r4, r7, lr}
    3ea2:	b085      	sub	sp, #20
    3ea4:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
    3ea6:	2300      	movs	r3, #0
    3ea8:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
    3eaa:	4b2b      	ldr	r3, [pc, #172]	; (3f58 <prvReportStackUsage+0xb8>)
    3eac:	681b      	ldr	r3, [r3, #0]
    3eae:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
    3eb0:	4b29      	ldr	r3, [pc, #164]	; (3f58 <prvReportStackUsage+0xb8>)
    3eb2:	681a      	ldr	r2, [r3, #0]
    3eb4:	4b29      	ldr	r3, [pc, #164]	; (3f5c <prvReportStackUsage+0xbc>)
    3eb6:	00d2      	lsls	r2, r2, #3
    3eb8:	58d3      	ldr	r3, [r2, r3]
    3eba:	2b00      	cmp	r3, #0
    3ebc:	d035      	beq.n	3f2a <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
    3ebe:	4b26      	ldr	r3, [pc, #152]	; (3f58 <prvReportStackUsage+0xb8>)
    3ec0:	681a      	ldr	r2, [r3, #0]
    3ec2:	4b26      	ldr	r3, [pc, #152]	; (3f5c <prvReportStackUsage+0xbc>)
    3ec4:	00d2      	lsls	r2, r2, #3
    3ec6:	58d3      	ldr	r3, [r2, r3]
    3ec8:	0018      	movs	r0, r3
    3eca:	4b25      	ldr	r3, [pc, #148]	; (3f60 <prvReportStackUsage+0xc0>)
    3ecc:	4798      	blx	r3
    3ece:	0003      	movs	r3, r0
    3ed0:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
    3ed2:	4b21      	ldr	r3, [pc, #132]	; (3f58 <prvReportStackUsage+0xb8>)
    3ed4:	681b      	ldr	r3, [r3, #0]
    3ed6:	4a21      	ldr	r2, [pc, #132]	; (3f5c <prvReportStackUsage+0xbc>)
    3ed8:	00db      	lsls	r3, r3, #3
    3eda:	18d3      	adds	r3, r2, r3
    3edc:	3304      	adds	r3, #4
    3ede:	681a      	ldr	r2, [r3, #0]
    3ee0:	687b      	ldr	r3, [r7, #4]
    3ee2:	429a      	cmp	r2, r3
    3ee4:	d907      	bls.n	3ef6 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
    3ee6:	4b1c      	ldr	r3, [pc, #112]	; (3f58 <prvReportStackUsage+0xb8>)
    3ee8:	681b      	ldr	r3, [r3, #0]
    3eea:	4a1c      	ldr	r2, [pc, #112]	; (3f5c <prvReportStackUsage+0xbc>)
    3eec:	00db      	lsls	r3, r3, #3
    3eee:	18d3      	adds	r3, r2, r3
    3ef0:	3304      	adds	r3, #4
    3ef2:	687a      	ldr	r2, [r7, #4]
    3ef4:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
    3ef6:	4b18      	ldr	r3, [pc, #96]	; (3f58 <prvReportStackUsage+0xb8>)
    3ef8:	681a      	ldr	r2, [r3, #0]
    3efa:	4b18      	ldr	r3, [pc, #96]	; (3f5c <prvReportStackUsage+0xbc>)
    3efc:	00d2      	lsls	r2, r2, #3
    3efe:	58d3      	ldr	r3, [r2, r3]
    3f00:	0018      	movs	r0, r3
    3f02:	4b18      	ldr	r3, [pc, #96]	; (3f64 <prvReportStackUsage+0xc4>)
    3f04:	4798      	blx	r3
    3f06:	0003      	movs	r3, r0
    3f08:	b2db      	uxtb	r3, r3
    3f0a:	0019      	movs	r1, r3
    3f0c:	4b12      	ldr	r3, [pc, #72]	; (3f58 <prvReportStackUsage+0xb8>)
    3f0e:	681b      	ldr	r3, [r3, #0]
    3f10:	4a12      	ldr	r2, [pc, #72]	; (3f5c <prvReportStackUsage+0xbc>)
    3f12:	00db      	lsls	r3, r3, #3
    3f14:	18d3      	adds	r3, r2, r3
    3f16:	3304      	adds	r3, #4
    3f18:	681b      	ldr	r3, [r3, #0]
    3f1a:	000a      	movs	r2, r1
    3f1c:	2103      	movs	r1, #3
    3f1e:	20ea      	movs	r0, #234	; 0xea
    3f20:	4c11      	ldr	r4, [pc, #68]	; (3f68 <prvReportStackUsage+0xc8>)
    3f22:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
    3f24:	68fb      	ldr	r3, [r7, #12]
    3f26:	3301      	adds	r3, #1
    3f28:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
    3f2a:	4b0b      	ldr	r3, [pc, #44]	; (3f58 <prvReportStackUsage+0xb8>)
    3f2c:	681b      	ldr	r3, [r3, #0]
    3f2e:	1c5a      	adds	r2, r3, #1
    3f30:	4b0e      	ldr	r3, [pc, #56]	; (3f6c <prvReportStackUsage+0xcc>)
    3f32:	210a      	movs	r1, #10
    3f34:	0010      	movs	r0, r2
    3f36:	4798      	blx	r3
    3f38:	000b      	movs	r3, r1
    3f3a:	001a      	movs	r2, r3
    3f3c:	4b06      	ldr	r3, [pc, #24]	; (3f58 <prvReportStackUsage+0xb8>)
    3f3e:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
    3f40:	68fb      	ldr	r3, [r7, #12]
    3f42:	2b00      	cmp	r3, #0
    3f44:	dc04      	bgt.n	3f50 <prvReportStackUsage+0xb0>
    3f46:	4b04      	ldr	r3, [pc, #16]	; (3f58 <prvReportStackUsage+0xb8>)
    3f48:	681a      	ldr	r2, [r3, #0]
    3f4a:	68bb      	ldr	r3, [r7, #8]
    3f4c:	429a      	cmp	r2, r3
    3f4e:	d1af      	bne.n	3eb0 <prvReportStackUsage+0x10>
}
    3f50:	46c0      	nop			; (mov r8, r8)
    3f52:	46bd      	mov	sp, r7
    3f54:	b005      	add	sp, #20
    3f56:	bd90      	pop	{r4, r7, pc}
    3f58:	20000b84 	.word	0x20000b84
    3f5c:	20000b30 	.word	0x20000b30
    3f60:	00008935 	.word	0x00008935
    3f64:	00003cb5 	.word	0x00003cb5
    3f68:	000047fd 	.word	0x000047fd
    3f6c:	0001e749 	.word	0x0001e749

00003f70 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    3f70:	b580      	push	{r7, lr}
    3f72:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
    3f74:	4b02      	ldr	r3, [pc, #8]	; (3f80 <prvTraceGetCurrentTaskHandle+0x10>)
    3f76:	4798      	blx	r3
    3f78:	0003      	movs	r3, r0
}
    3f7a:	0018      	movs	r0, r3
    3f7c:	46bd      	mov	sp, r7
    3f7e:	bd80      	pop	{r7, pc}
    3f80:	000089e1 	.word	0x000089e1

00003f84 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    3f84:	b590      	push	{r4, r7, lr}
    3f86:	b085      	sub	sp, #20
    3f88:	af02      	add	r7, sp, #8
    3f8a:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
    3f8c:	4b14      	ldr	r3, [pc, #80]	; (3fe0 <vTraceEnable+0x5c>)
    3f8e:	4798      	blx	r3

	if (startOption == TRC_START)
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	2b01      	cmp	r3, #1
    3f94:	d102      	bne.n	3f9c <vTraceEnable+0x18>
	{
		vTraceStart();
    3f96:	4b13      	ldr	r3, [pc, #76]	; (3fe4 <vTraceEnable+0x60>)
    3f98:	4798      	blx	r3
    3f9a:	e00e      	b.n	3fba <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    3f9c:	687b      	ldr	r3, [r7, #4]
    3f9e:	2b02      	cmp	r3, #2
    3fa0:	d104      	bne.n	3fac <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    3fa2:	4b11      	ldr	r3, [pc, #68]	; (3fe8 <vTraceEnable+0x64>)
    3fa4:	0018      	movs	r0, r3
    3fa6:	4b11      	ldr	r3, [pc, #68]	; (3fec <vTraceEnable+0x68>)
    3fa8:	4798      	blx	r3
    3faa:	e006      	b.n	3fba <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
    3fac:	687b      	ldr	r3, [r7, #4]
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d003      	beq.n	3fba <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    3fb2:	4b0f      	ldr	r3, [pc, #60]	; (3ff0 <vTraceEnable+0x6c>)
    3fb4:	0018      	movs	r0, r3
    3fb6:	4b0d      	ldr	r3, [pc, #52]	; (3fec <vTraceEnable+0x68>)
    3fb8:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
    3fba:	4b0e      	ldr	r3, [pc, #56]	; (3ff4 <vTraceEnable+0x70>)
    3fbc:	681b      	ldr	r3, [r3, #0]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d109      	bne.n	3fd6 <vTraceEnable+0x52>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
    3fc2:	490d      	ldr	r1, [pc, #52]	; (3ff8 <vTraceEnable+0x74>)
    3fc4:	480d      	ldr	r0, [pc, #52]	; (3ffc <vTraceEnable+0x78>)
    3fc6:	4b0b      	ldr	r3, [pc, #44]	; (3ff4 <vTraceEnable+0x70>)
    3fc8:	9301      	str	r3, [sp, #4]
    3fca:	2304      	movs	r3, #4
    3fcc:	9300      	str	r3, [sp, #0]
    3fce:	2300      	movs	r3, #0
    3fd0:	22c8      	movs	r2, #200	; 0xc8
    3fd2:	4c0b      	ldr	r4, [pc, #44]	; (4000 <vTraceEnable+0x7c>)
    3fd4:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    3fd6:	46c0      	nop			; (mov r8, r8)
    3fd8:	46bd      	mov	sp, r7
    3fda:	b003      	add	sp, #12
    3fdc:	bd90      	pop	{r4, r7, pc}
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	00004ec9 	.word	0x00004ec9
    3fe4:	00004421 	.word	0x00004421
    3fe8:	00022200 	.word	0x00022200
    3fec:	00005571 	.word	0x00005571
    3ff0:	00022240 	.word	0x00022240
    3ff4:	20000b2c 	.word	0x20000b2c
    3ff8:	00022274 	.word	0x00022274
    3ffc:	00004005 	.word	0x00004005
    4000:	00007939 	.word	0x00007939

00004004 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
    4004:	b580      	push	{r7, lr}
    4006:	b082      	sub	sp, #8
    4008:	af00      	add	r7, sp, #0
    400a:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
    400c:	4b04      	ldr	r3, [pc, #16]	; (4020 <TzCtrl+0x1c>)
    400e:	4798      	blx	r3
    4010:	1e03      	subs	r3, r0, #0
    4012:	d001      	beq.n	4018 <TzCtrl+0x14>
		{
			prvReportStackUsage();
    4014:	4b03      	ldr	r3, [pc, #12]	; (4024 <TzCtrl+0x20>)
    4016:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
    4018:	2004      	movs	r0, #4
    401a:	4b03      	ldr	r3, [pc, #12]	; (4028 <TzCtrl+0x24>)
    401c:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
    401e:	e7f5      	b.n	400c <TzCtrl+0x8>
    4020:	00004465 	.word	0x00004465
    4024:	00003ea1 	.word	0x00003ea1
    4028:	00007cd5 	.word	0x00007cd5

0000402c <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    402c:	b580      	push	{r7, lr}
    402e:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    4030:	4b60      	ldr	r3, [pc, #384]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4032:	681b      	ldr	r3, [r3, #0]
    4034:	2209      	movs	r2, #9
    4036:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    4038:	4b5e      	ldr	r3, [pc, #376]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    403a:	681b      	ldr	r3, [r3, #0]
    403c:	2264      	movs	r2, #100	; 0x64
    403e:	210a      	movs	r1, #10
    4040:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    4042:	4b5c      	ldr	r3, [pc, #368]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4044:	681b      	ldr	r3, [r3, #0]
    4046:	2265      	movs	r2, #101	; 0x65
    4048:	210a      	movs	r1, #10
    404a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    404c:	4b59      	ldr	r3, [pc, #356]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    404e:	681b      	ldr	r3, [r3, #0]
    4050:	2266      	movs	r2, #102	; 0x66
    4052:	210a      	movs	r1, #10
    4054:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    4056:	4b57      	ldr	r3, [pc, #348]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4058:	681b      	ldr	r3, [r3, #0]
    405a:	2267      	movs	r2, #103	; 0x67
    405c:	210f      	movs	r1, #15
    405e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    4060:	4b54      	ldr	r3, [pc, #336]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4062:	681b      	ldr	r3, [r3, #0]
    4064:	2268      	movs	r2, #104	; 0x68
    4066:	2105      	movs	r1, #5
    4068:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    406a:	4b52      	ldr	r3, [pc, #328]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    406c:	681b      	ldr	r3, [r3, #0]
    406e:	2269      	movs	r2, #105	; 0x69
    4070:	2105      	movs	r1, #5
    4072:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    4074:	4b4f      	ldr	r3, [pc, #316]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4076:	681b      	ldr	r3, [r3, #0]
    4078:	226a      	movs	r2, #106	; 0x6a
    407a:	2105      	movs	r1, #5
    407c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    407e:	4b4d      	ldr	r3, [pc, #308]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4080:	681b      	ldr	r3, [r3, #0]
    4082:	226b      	movs	r2, #107	; 0x6b
    4084:	2105      	movs	r1, #5
    4086:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    4088:	4b4a      	ldr	r3, [pc, #296]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    408a:	681b      	ldr	r3, [r3, #0]
    408c:	226c      	movs	r2, #108	; 0x6c
    408e:	2105      	movs	r1, #5
    4090:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    4092:	4b48      	ldr	r3, [pc, #288]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4094:	681b      	ldr	r3, [r3, #0]
    4096:	2270      	movs	r2, #112	; 0x70
    4098:	210f      	movs	r1, #15
    409a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    409c:	4b45      	ldr	r3, [pc, #276]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    409e:	681b      	ldr	r3, [r3, #0]
    40a0:	2271      	movs	r2, #113	; 0x71
    40a2:	210f      	movs	r1, #15
    40a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    40a6:	4b43      	ldr	r3, [pc, #268]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    40a8:	681b      	ldr	r3, [r3, #0]
    40aa:	2272      	movs	r2, #114	; 0x72
    40ac:	210f      	movs	r1, #15
    40ae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    40b0:	4b40      	ldr	r3, [pc, #256]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    40b2:	681b      	ldr	r3, [r3, #0]
    40b4:	2273      	movs	r2, #115	; 0x73
    40b6:	210f      	movs	r1, #15
    40b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    40ba:	4b3e      	ldr	r3, [pc, #248]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    40bc:	681b      	ldr	r3, [r3, #0]
    40be:	2274      	movs	r2, #116	; 0x74
    40c0:	210f      	movs	r1, #15
    40c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    40c4:	4b3b      	ldr	r3, [pc, #236]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    40c6:	681b      	ldr	r3, [r3, #0]
    40c8:	2275      	movs	r2, #117	; 0x75
    40ca:	210f      	movs	r1, #15
    40cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    40ce:	4b39      	ldr	r3, [pc, #228]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    40d0:	681b      	ldr	r3, [r3, #0]
    40d2:	2276      	movs	r2, #118	; 0x76
    40d4:	210f      	movs	r1, #15
    40d6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    40d8:	4b36      	ldr	r3, [pc, #216]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    40da:	681b      	ldr	r3, [r3, #0]
    40dc:	2277      	movs	r2, #119	; 0x77
    40de:	210f      	movs	r1, #15
    40e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    40e2:	4b34      	ldr	r3, [pc, #208]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    40e4:	681b      	ldr	r3, [r3, #0]
    40e6:	2278      	movs	r2, #120	; 0x78
    40e8:	210f      	movs	r1, #15
    40ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    40ec:	4b31      	ldr	r3, [pc, #196]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    40ee:	681b      	ldr	r3, [r3, #0]
    40f0:	227c      	movs	r2, #124	; 0x7c
    40f2:	2110      	movs	r1, #16
    40f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    40f6:	4b2f      	ldr	r3, [pc, #188]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    40f8:	681b      	ldr	r3, [r3, #0]
    40fa:	227d      	movs	r2, #125	; 0x7d
    40fc:	2110      	movs	r1, #16
    40fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    4100:	4b2c      	ldr	r3, [pc, #176]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4102:	681b      	ldr	r3, [r3, #0]
    4104:	227e      	movs	r2, #126	; 0x7e
    4106:	2110      	movs	r1, #16
    4108:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    410a:	4b2a      	ldr	r3, [pc, #168]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    410c:	681b      	ldr	r3, [r3, #0]
    410e:	227f      	movs	r2, #127	; 0x7f
    4110:	2113      	movs	r1, #19
    4112:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    4114:	4b27      	ldr	r3, [pc, #156]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4116:	681b      	ldr	r3, [r3, #0]
    4118:	2280      	movs	r2, #128	; 0x80
    411a:	2111      	movs	r1, #17
    411c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    411e:	4b25      	ldr	r3, [pc, #148]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4120:	681b      	ldr	r3, [r3, #0]
    4122:	2281      	movs	r2, #129	; 0x81
    4124:	2110      	movs	r1, #16
    4126:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    4128:	4b22      	ldr	r3, [pc, #136]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    412a:	681b      	ldr	r3, [r3, #0]
    412c:	2282      	movs	r2, #130	; 0x82
    412e:	2113      	movs	r1, #19
    4130:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    4132:	4b20      	ldr	r3, [pc, #128]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4134:	681b      	ldr	r3, [r3, #0]
    4136:	2283      	movs	r2, #131	; 0x83
    4138:	2113      	movs	r1, #19
    413a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    413c:	4b1d      	ldr	r3, [pc, #116]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    413e:	681b      	ldr	r3, [r3, #0]
    4140:	2284      	movs	r2, #132	; 0x84
    4142:	2113      	movs	r1, #19
    4144:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    4146:	4b1b      	ldr	r3, [pc, #108]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4148:	681b      	ldr	r3, [r3, #0]
    414a:	2288      	movs	r2, #136	; 0x88
    414c:	2100      	movs	r1, #0
    414e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    4150:	4b18      	ldr	r3, [pc, #96]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4152:	681b      	ldr	r3, [r3, #0]
    4154:	228a      	movs	r2, #138	; 0x8a
    4156:	21a0      	movs	r1, #160	; 0xa0
    4158:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    415a:	4b16      	ldr	r3, [pc, #88]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    415c:	681b      	ldr	r3, [r3, #0]
    415e:	228c      	movs	r2, #140	; 0x8c
    4160:	21a0      	movs	r1, #160	; 0xa0
    4162:	0049      	lsls	r1, r1, #1
    4164:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    4166:	4b13      	ldr	r3, [pc, #76]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4168:	681b      	ldr	r3, [r3, #0]
    416a:	228e      	movs	r2, #142	; 0x8e
    416c:	21f0      	movs	r1, #240	; 0xf0
    416e:	0049      	lsls	r1, r1, #1
    4170:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    4172:	4b10      	ldr	r3, [pc, #64]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	2290      	movs	r2, #144	; 0x90
    4178:	490f      	ldr	r1, [pc, #60]	; (41b8 <vTraceInitObjectPropertyTable+0x18c>)
    417a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    417c:	4b0d      	ldr	r3, [pc, #52]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    417e:	681b      	ldr	r3, [r3, #0]
    4180:	2292      	movs	r2, #146	; 0x92
    4182:	490e      	ldr	r1, [pc, #56]	; (41bc <vTraceInitObjectPropertyTable+0x190>)
    4184:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    4186:	4b0b      	ldr	r3, [pc, #44]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4188:	681b      	ldr	r3, [r3, #0]
    418a:	2294      	movs	r2, #148	; 0x94
    418c:	490c      	ldr	r1, [pc, #48]	; (41c0 <vTraceInitObjectPropertyTable+0x194>)
    418e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    4190:	4b08      	ldr	r3, [pc, #32]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    4192:	681b      	ldr	r3, [r3, #0]
    4194:	2296      	movs	r2, #150	; 0x96
    4196:	490b      	ldr	r1, [pc, #44]	; (41c4 <vTraceInitObjectPropertyTable+0x198>)
    4198:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    419a:	4b06      	ldr	r3, [pc, #24]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    419c:	681b      	ldr	r3, [r3, #0]
    419e:	2298      	movs	r2, #152	; 0x98
    41a0:	218c      	movs	r1, #140	; 0x8c
    41a2:	00c9      	lsls	r1, r1, #3
    41a4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    41a6:	4b03      	ldr	r3, [pc, #12]	; (41b4 <vTraceInitObjectPropertyTable+0x188>)
    41a8:	681b      	ldr	r3, [r3, #0]
    41aa:	4a07      	ldr	r2, [pc, #28]	; (41c8 <vTraceInitObjectPropertyTable+0x19c>)
    41ac:	661a      	str	r2, [r3, #96]	; 0x60
}
    41ae:	46c0      	nop			; (mov r8, r8)
    41b0:	46bd      	mov	sp, r7
    41b2:	bd80      	pop	{r7, pc}
    41b4:	20000c44 	.word	0x20000c44
    41b8:	000002fd 	.word	0x000002fd
    41bc:	00000352 	.word	0x00000352
    41c0:	000003a2 	.word	0x000003a2
    41c4:	00000401 	.word	0x00000401
    41c8:	000004bf 	.word	0x000004bf

000041cc <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
    41cc:	b580      	push	{r7, lr}
    41ce:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    41d0:	4b2e      	ldr	r3, [pc, #184]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    41d2:	2200      	movs	r2, #0
    41d4:	825a      	strh	r2, [r3, #18]
    41d6:	4b2d      	ldr	r3, [pc, #180]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    41d8:	8a5a      	ldrh	r2, [r3, #18]
    41da:	4b2c      	ldr	r3, [pc, #176]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    41dc:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    41de:	4b2b      	ldr	r3, [pc, #172]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    41e0:	220a      	movs	r2, #10
    41e2:	829a      	strh	r2, [r3, #20]
    41e4:	4b29      	ldr	r3, [pc, #164]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    41e6:	8a9a      	ldrh	r2, [r3, #20]
    41e8:	4b28      	ldr	r3, [pc, #160]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    41ea:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    41ec:	4b27      	ldr	r3, [pc, #156]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    41ee:	2214      	movs	r2, #20
    41f0:	82da      	strh	r2, [r3, #22]
    41f2:	4b26      	ldr	r3, [pc, #152]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    41f4:	8ada      	ldrh	r2, [r3, #22]
    41f6:	4b25      	ldr	r3, [pc, #148]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    41f8:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    41fa:	4b24      	ldr	r3, [pc, #144]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    41fc:	221e      	movs	r2, #30
    41fe:	831a      	strh	r2, [r3, #24]
    4200:	4b22      	ldr	r3, [pc, #136]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4202:	8b1a      	ldrh	r2, [r3, #24]
    4204:	4b21      	ldr	r3, [pc, #132]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4206:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    4208:	4b20      	ldr	r3, [pc, #128]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    420a:	222d      	movs	r2, #45	; 0x2d
    420c:	835a      	strh	r2, [r3, #26]
    420e:	4b1f      	ldr	r3, [pc, #124]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4210:	8b5a      	ldrh	r2, [r3, #26]
    4212:	4b1e      	ldr	r3, [pc, #120]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4214:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    4216:	4b1d      	ldr	r3, [pc, #116]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4218:	2232      	movs	r2, #50	; 0x32
    421a:	839a      	strh	r2, [r3, #28]
    421c:	4b1b      	ldr	r3, [pc, #108]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    421e:	8b9a      	ldrh	r2, [r3, #28]
    4220:	4b1a      	ldr	r3, [pc, #104]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4222:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    4224:	4b19      	ldr	r3, [pc, #100]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4226:	2237      	movs	r2, #55	; 0x37
    4228:	83da      	strh	r2, [r3, #30]
    422a:	4b18      	ldr	r3, [pc, #96]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    422c:	8bda      	ldrh	r2, [r3, #30]
    422e:	4b17      	ldr	r3, [pc, #92]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4230:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    4232:	4b16      	ldr	r3, [pc, #88]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4234:	223c      	movs	r2, #60	; 0x3c
    4236:	841a      	strh	r2, [r3, #32]
    4238:	4b14      	ldr	r3, [pc, #80]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    423a:	8c1a      	ldrh	r2, [r3, #32]
    423c:	4b13      	ldr	r3, [pc, #76]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    423e:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    4240:	4b12      	ldr	r3, [pc, #72]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4242:	2241      	movs	r2, #65	; 0x41
    4244:	845a      	strh	r2, [r3, #34]	; 0x22
    4246:	4b11      	ldr	r3, [pc, #68]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4248:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    424a:	4b10      	ldr	r3, [pc, #64]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    424c:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    424e:	4b0f      	ldr	r3, [pc, #60]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4250:	2209      	movs	r2, #9
    4252:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    4254:	4b0d      	ldr	r3, [pc, #52]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4256:	2213      	movs	r2, #19
    4258:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    425a:	4b0c      	ldr	r3, [pc, #48]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    425c:	221d      	movs	r2, #29
    425e:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    4260:	4b0a      	ldr	r3, [pc, #40]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4262:	222c      	movs	r2, #44	; 0x2c
    4264:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    4266:	4b09      	ldr	r3, [pc, #36]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4268:	2231      	movs	r2, #49	; 0x31
    426a:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    426c:	4b07      	ldr	r3, [pc, #28]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    426e:	2236      	movs	r2, #54	; 0x36
    4270:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    4272:	4b06      	ldr	r3, [pc, #24]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4274:	223b      	movs	r2, #59	; 0x3b
    4276:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    4278:	4b04      	ldr	r3, [pc, #16]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    427a:	2240      	movs	r2, #64	; 0x40
    427c:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    427e:	4b03      	ldr	r3, [pc, #12]	; (428c <vTraceInitObjectHandleStack+0xc0>)
    4280:	2245      	movs	r2, #69	; 0x45
    4282:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4284:	46c0      	nop			; (mov r8, r8)
    4286:	46bd      	mov	sp, r7
    4288:	bd80      	pop	{r7, pc}
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	20000bb4 	.word	0x20000bb4

00004290 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
    4290:	b580      	push	{r7, lr}
    4292:	b082      	sub	sp, #8
    4294:	af00      	add	r7, sp, #0
    4296:	0002      	movs	r2, r0
    4298:	1dfb      	adds	r3, r7, #7
    429a:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
    429c:	1dfb      	adds	r3, r7, #7
    429e:	781b      	ldrb	r3, [r3, #0]
    42a0:	2b08      	cmp	r3, #8
    42a2:	d816      	bhi.n	42d2 <pszTraceGetErrorNotEnoughHandles+0x42>
    42a4:	009a      	lsls	r2, r3, #2
    42a6:	4b0d      	ldr	r3, [pc, #52]	; (42dc <pszTraceGetErrorNotEnoughHandles+0x4c>)
    42a8:	18d3      	adds	r3, r2, r3
    42aa:	681b      	ldr	r3, [r3, #0]
    42ac:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    42ae:	4b0c      	ldr	r3, [pc, #48]	; (42e0 <pszTraceGetErrorNotEnoughHandles+0x50>)
    42b0:	e010      	b.n	42d4 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    42b2:	4b0c      	ldr	r3, [pc, #48]	; (42e4 <pszTraceGetErrorNotEnoughHandles+0x54>)
    42b4:	e00e      	b.n	42d4 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    42b6:	4b0c      	ldr	r3, [pc, #48]	; (42e8 <pszTraceGetErrorNotEnoughHandles+0x58>)
    42b8:	e00c      	b.n	42d4 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    42ba:	4b0c      	ldr	r3, [pc, #48]	; (42ec <pszTraceGetErrorNotEnoughHandles+0x5c>)
    42bc:	e00a      	b.n	42d4 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    42be:	4b0c      	ldr	r3, [pc, #48]	; (42f0 <pszTraceGetErrorNotEnoughHandles+0x60>)
    42c0:	e008      	b.n	42d4 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    42c2:	4b0c      	ldr	r3, [pc, #48]	; (42f4 <pszTraceGetErrorNotEnoughHandles+0x64>)
    42c4:	e006      	b.n	42d4 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    42c6:	4b0c      	ldr	r3, [pc, #48]	; (42f8 <pszTraceGetErrorNotEnoughHandles+0x68>)
    42c8:	e004      	b.n	42d4 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    42ca:	4b0c      	ldr	r3, [pc, #48]	; (42fc <pszTraceGetErrorNotEnoughHandles+0x6c>)
    42cc:	e002      	b.n	42d4 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    42ce:	4b0c      	ldr	r3, [pc, #48]	; (4300 <pszTraceGetErrorNotEnoughHandles+0x70>)
    42d0:	e000      	b.n	42d4 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    42d2:	4b0c      	ldr	r3, [pc, #48]	; (4304 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
    42d4:	0018      	movs	r0, r3
    42d6:	46bd      	mov	sp, r7
    42d8:	b002      	add	sp, #8
    42da:	bd80      	pop	{r7, pc}
    42dc:	0002257c 	.word	0x0002257c
    42e0:	0002227c 	.word	0x0002227c
    42e4:	000222c4 	.word	0x000222c4
    42e8:	0002230c 	.word	0x0002230c
    42ec:	00022360 	.word	0x00022360
    42f0:	000223ac 	.word	0x000223ac
    42f4:	000223f8 	.word	0x000223f8
    42f8:	00022444 	.word	0x00022444
    42fc:	00022498 	.word	0x00022498
    4300:	000224f0 	.word	0x000224f0
    4304:	0002254c 	.word	0x0002254c

00004308 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
    4308:	b590      	push	{r4, r7, lr}
    430a:	b087      	sub	sp, #28
    430c:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
    430e:	2317      	movs	r3, #23
    4310:	18fb      	adds	r3, r7, r3
    4312:	2200      	movs	r2, #0
    4314:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
    4316:	4b36      	ldr	r3, [pc, #216]	; (43f0 <uiTraceStart+0xe8>)
    4318:	681b      	ldr	r3, [r3, #0]
    431a:	2b00      	cmp	r3, #0
    431c:	d10b      	bne.n	4336 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    431e:	4b34      	ldr	r3, [pc, #208]	; (43f0 <uiTraceStart+0xe8>)
    4320:	681b      	ldr	r3, [r3, #0]
    4322:	2b00      	cmp	r3, #0
    4324:	d105      	bne.n	4332 <uiTraceStart+0x2a>
    4326:	4b33      	ldr	r3, [pc, #204]	; (43f4 <uiTraceStart+0xec>)
    4328:	0018      	movs	r0, r3
    432a:	4b33      	ldr	r3, [pc, #204]	; (43f8 <uiTraceStart+0xf0>)
    432c:	4798      	blx	r3
    432e:	2300      	movs	r3, #0
    4330:	e059      	b.n	43e6 <uiTraceStart+0xde>
		return 0;
    4332:	2300      	movs	r3, #0
    4334:	e057      	b.n	43e6 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
    4336:	4b2e      	ldr	r3, [pc, #184]	; (43f0 <uiTraceStart+0xe8>)
    4338:	681b      	ldr	r3, [r3, #0]
    433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    433c:	2b01      	cmp	r3, #1
    433e:	d101      	bne.n	4344 <uiTraceStart+0x3c>
		return 1; /* Already running */
    4340:	2301      	movs	r3, #1
    4342:	e050      	b.n	43e6 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
    4344:	4b2d      	ldr	r3, [pc, #180]	; (43fc <uiTraceStart+0xf4>)
    4346:	681b      	ldr	r3, [r3, #0]
    4348:	2b00      	cmp	r3, #0
    434a:	d149      	bne.n	43e0 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    434c:	f3ef 8310 	mrs	r3, PRIMASK
    4350:	60bb      	str	r3, [r7, #8]
  return(result);
    4352:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
    4354:	613b      	str	r3, [r7, #16]
    4356:	2301      	movs	r3, #1
    4358:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    435a:	68fb      	ldr	r3, [r7, #12]
    435c:	f383 8810 	msr	PRIMASK, r3
    4360:	4b27      	ldr	r3, [pc, #156]	; (4400 <uiTraceStart+0xf8>)
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	1c5a      	adds	r2, r3, #1
    4366:	4b26      	ldr	r3, [pc, #152]	; (4400 <uiTraceStart+0xf8>)
    4368:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
    436a:	4b21      	ldr	r3, [pc, #132]	; (43f0 <uiTraceStart+0xe8>)
    436c:	681b      	ldr	r3, [r3, #0]
    436e:	2201      	movs	r2, #1
    4370:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    4372:	4b24      	ldr	r3, [pc, #144]	; (4404 <uiTraceStart+0xfc>)
    4374:	4798      	blx	r3
    4376:	0003      	movs	r3, r0
    4378:	0018      	movs	r0, r3
    437a:	4b23      	ldr	r3, [pc, #140]	; (4408 <uiTraceStart+0x100>)
    437c:	4798      	blx	r3
    437e:	0003      	movs	r3, r0
    4380:	001a      	movs	r2, r3
    4382:	2317      	movs	r3, #23
    4384:	18fb      	adds	r3, r7, r3
    4386:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
    4388:	2317      	movs	r3, #23
    438a:	18fb      	adds	r3, r7, r3
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	2b00      	cmp	r3, #0
    4390:	d116      	bne.n	43c0 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    4392:	2317      	movs	r3, #23
    4394:	18fc      	adds	r4, r7, r3
    4396:	2003      	movs	r0, #3
    4398:	4b1c      	ldr	r3, [pc, #112]	; (440c <uiTraceStart+0x104>)
    439a:	4798      	blx	r3
    439c:	0003      	movs	r3, r0
    439e:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    43a0:	4a1b      	ldr	r2, [pc, #108]	; (4410 <uiTraceStart+0x108>)
    43a2:	2317      	movs	r3, #23
    43a4:	18fb      	adds	r3, r7, r3
    43a6:	781b      	ldrb	r3, [r3, #0]
    43a8:	0019      	movs	r1, r3
    43aa:	2003      	movs	r0, #3
    43ac:	4b19      	ldr	r3, [pc, #100]	; (4414 <uiTraceStart+0x10c>)
    43ae:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    43b0:	2317      	movs	r3, #23
    43b2:	18fb      	adds	r3, r7, r3
    43b4:	781b      	ldrb	r3, [r3, #0]
    43b6:	2200      	movs	r2, #0
    43b8:	0019      	movs	r1, r3
    43ba:	2003      	movs	r0, #3
    43bc:	4b16      	ldr	r3, [pc, #88]	; (4418 <uiTraceStart+0x110>)
    43be:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    43c0:	2317      	movs	r3, #23
    43c2:	18fb      	adds	r3, r7, r3
    43c4:	781b      	ldrb	r3, [r3, #0]
    43c6:	0018      	movs	r0, r3
    43c8:	4b14      	ldr	r3, [pc, #80]	; (441c <uiTraceStart+0x114>)
    43ca:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    43cc:	4b0c      	ldr	r3, [pc, #48]	; (4400 <uiTraceStart+0xf8>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	1e5a      	subs	r2, r3, #1
    43d2:	4b0b      	ldr	r3, [pc, #44]	; (4400 <uiTraceStart+0xf8>)
    43d4:	601a      	str	r2, [r3, #0]
    43d6:	693b      	ldr	r3, [r7, #16]
    43d8:	607b      	str	r3, [r7, #4]
    43da:	687b      	ldr	r3, [r7, #4]
    43dc:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
    43e0:	4b03      	ldr	r3, [pc, #12]	; (43f0 <uiTraceStart+0xe8>)
    43e2:	681b      	ldr	r3, [r3, #0]
    43e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    43e6:	0018      	movs	r0, r3
    43e8:	46bd      	mov	sp, r7
    43ea:	b007      	add	sp, #28
    43ec:	bd90      	pop	{r4, r7, pc}
    43ee:	46c0      	nop			; (mov r8, r8)
    43f0:	20000c44 	.word	0x20000c44
    43f4:	000225a0 	.word	0x000225a0
    43f8:	00005571 	.word	0x00005571
    43fc:	20000ba4 	.word	0x20000ba4
    4400:	20000b9c 	.word	0x20000b9c
    4404:	00003f71 	.word	0x00003f71
    4408:	00003cb5 	.word	0x00003cb5
    440c:	00005255 	.word	0x00005255
    4410:	000225e4 	.word	0x000225e4
    4414:	00005485 	.word	0x00005485
    4418:	00004be9 	.word	0x00004be9
    441c:	00004ad1 	.word	0x00004ad1

00004420 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
    4420:	b580      	push	{r7, lr}
    4422:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
    4424:	4b02      	ldr	r3, [pc, #8]	; (4430 <vTraceStart+0x10>)
    4426:	4798      	blx	r3
}
    4428:	46c0      	nop			; (mov r8, r8)
    442a:	46bd      	mov	sp, r7
    442c:	bd80      	pop	{r7, pc}
    442e:	46c0      	nop			; (mov r8, r8)
    4430:	00004309 	.word	0x00004309

00004434 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
    4434:	b580      	push	{r7, lr}
    4436:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    4438:	4b08      	ldr	r3, [pc, #32]	; (445c <vTraceStop+0x28>)
    443a:	681b      	ldr	r3, [r3, #0]
    443c:	2b00      	cmp	r3, #0
    443e:	d003      	beq.n	4448 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
    4440:	4b06      	ldr	r3, [pc, #24]	; (445c <vTraceStop+0x28>)
    4442:	681b      	ldr	r3, [r3, #0]
    4444:	2200      	movs	r2, #0
    4446:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    4448:	4b05      	ldr	r3, [pc, #20]	; (4460 <vTraceStop+0x2c>)
    444a:	681b      	ldr	r3, [r3, #0]
    444c:	2b00      	cmp	r3, #0
    444e:	d002      	beq.n	4456 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    4450:	4b03      	ldr	r3, [pc, #12]	; (4460 <vTraceStop+0x2c>)
    4452:	681b      	ldr	r3, [r3, #0]
    4454:	4798      	blx	r3
	}
}
    4456:	46c0      	nop			; (mov r8, r8)
    4458:	46bd      	mov	sp, r7
    445a:	bd80      	pop	{r7, pc}
    445c:	20000c44 	.word	0x20000c44
    4460:	20000bac 	.word	0x20000bac

00004464 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
    4464:	b580      	push	{r7, lr}
    4466:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    4468:	4b05      	ldr	r3, [pc, #20]	; (4480 <xTraceIsRecordingEnabled+0x1c>)
    446a:	681b      	ldr	r3, [r3, #0]
    446c:	2b00      	cmp	r3, #0
    446e:	d003      	beq.n	4478 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
    4470:	4b03      	ldr	r3, [pc, #12]	; (4480 <xTraceIsRecordingEnabled+0x1c>)
    4472:	681b      	ldr	r3, [r3, #0]
    4474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4476:	e000      	b.n	447a <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
    4478:	2300      	movs	r3, #0
	}
}
    447a:	0018      	movs	r0, r3
    447c:	46bd      	mov	sp, r7
    447e:	bd80      	pop	{r7, pc}
    4480:	20000c44 	.word	0x20000c44

00004484 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
    4484:	b590      	push	{r4, r7, lr}
    4486:	b089      	sub	sp, #36	; 0x24
    4488:	af00      	add	r7, sp, #0
    448a:	0002      	movs	r2, r0
    448c:	1dfb      	adds	r3, r7, #7
    448e:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    4490:	1dfb      	adds	r3, r7, #7
    4492:	781b      	ldrb	r3, [r3, #0]
    4494:	2b00      	cmp	r3, #0
    4496:	d057      	beq.n	4548 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    4498:	4b2e      	ldr	r3, [pc, #184]	; (4554 <prvTraceStoreTaskReady+0xd0>)
    449a:	681b      	ldr	r3, [r3, #0]
    449c:	2b00      	cmp	r3, #0
    449e:	d055      	beq.n	454c <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    44a0:	1dfb      	adds	r3, r7, #7
    44a2:	781b      	ldrb	r3, [r3, #0]
    44a4:	2b0f      	cmp	r3, #15
    44a6:	d904      	bls.n	44b2 <prvTraceStoreTaskReady+0x2e>
    44a8:	4b2b      	ldr	r3, [pc, #172]	; (4558 <prvTraceStoreTaskReady+0xd4>)
    44aa:	0018      	movs	r0, r3
    44ac:	4b2b      	ldr	r3, [pc, #172]	; (455c <prvTraceStoreTaskReady+0xd8>)
    44ae:	4798      	blx	r3
    44b0:	e04d      	b.n	454e <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
    44b2:	4b2b      	ldr	r3, [pc, #172]	; (4560 <prvTraceStoreTaskReady+0xdc>)
    44b4:	681b      	ldr	r3, [r3, #0]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d004      	beq.n	44c4 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    44ba:	4b2a      	ldr	r3, [pc, #168]	; (4564 <prvTraceStoreTaskReady+0xe0>)
    44bc:	0018      	movs	r0, r3
    44be:	4b27      	ldr	r3, [pc, #156]	; (455c <prvTraceStoreTaskReady+0xd8>)
    44c0:	4798      	blx	r3
		return;
    44c2:	e044      	b.n	454e <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    44c4:	f3ef 8310 	mrs	r3, PRIMASK
    44c8:	60fb      	str	r3, [r7, #12]
  return(result);
    44ca:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
    44cc:	61fb      	str	r3, [r7, #28]
    44ce:	2301      	movs	r3, #1
    44d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    44d2:	693b      	ldr	r3, [r7, #16]
    44d4:	f383 8810 	msr	PRIMASK, r3
    44d8:	4b21      	ldr	r3, [pc, #132]	; (4560 <prvTraceStoreTaskReady+0xdc>)
    44da:	681b      	ldr	r3, [r3, #0]
    44dc:	1c5a      	adds	r2, r3, #1
    44de:	4b20      	ldr	r3, [pc, #128]	; (4560 <prvTraceStoreTaskReady+0xdc>)
    44e0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    44e2:	4b21      	ldr	r3, [pc, #132]	; (4568 <prvTraceStoreTaskReady+0xe4>)
    44e4:	681b      	ldr	r3, [r3, #0]
    44e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    44e8:	2b00      	cmp	r3, #0
    44ea:	d022      	beq.n	4532 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    44ec:	231a      	movs	r3, #26
    44ee:	18fc      	adds	r4, r7, r3
    44f0:	4b1e      	ldr	r3, [pc, #120]	; (456c <prvTraceStoreTaskReady+0xe8>)
    44f2:	0018      	movs	r0, r3
    44f4:	4b1e      	ldr	r3, [pc, #120]	; (4570 <prvTraceStoreTaskReady+0xec>)
    44f6:	4798      	blx	r3
    44f8:	0003      	movs	r3, r0
    44fa:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
    44fc:	2319      	movs	r3, #25
    44fe:	18fb      	adds	r3, r7, r3
    4500:	1dfa      	adds	r2, r7, #7
    4502:	7812      	ldrb	r2, [r2, #0]
    4504:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    4506:	4b1b      	ldr	r3, [pc, #108]	; (4574 <prvTraceStoreTaskReady+0xf0>)
    4508:	4798      	blx	r3
    450a:	0003      	movs	r3, r0
    450c:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
    450e:	697b      	ldr	r3, [r7, #20]
    4510:	2b00      	cmp	r3, #0
    4512:	d00e      	beq.n	4532 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
    4514:	697b      	ldr	r3, [r7, #20]
    4516:	2202      	movs	r2, #2
    4518:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
    451a:	697b      	ldr	r3, [r7, #20]
    451c:	221a      	movs	r2, #26
    451e:	18ba      	adds	r2, r7, r2
    4520:	8812      	ldrh	r2, [r2, #0]
    4522:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
    4524:	697b      	ldr	r3, [r7, #20]
    4526:	2219      	movs	r2, #25
    4528:	18ba      	adds	r2, r7, r2
    452a:	7812      	ldrb	r2, [r2, #0]
    452c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    452e:	4b12      	ldr	r3, [pc, #72]	; (4578 <prvTraceStoreTaskReady+0xf4>)
    4530:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    4532:	4b0b      	ldr	r3, [pc, #44]	; (4560 <prvTraceStoreTaskReady+0xdc>)
    4534:	681b      	ldr	r3, [r3, #0]
    4536:	1e5a      	subs	r2, r3, #1
    4538:	4b09      	ldr	r3, [pc, #36]	; (4560 <prvTraceStoreTaskReady+0xdc>)
    453a:	601a      	str	r2, [r3, #0]
    453c:	69fb      	ldr	r3, [r7, #28]
    453e:	60bb      	str	r3, [r7, #8]
    4540:	68bb      	ldr	r3, [r7, #8]
    4542:	f383 8810 	msr	PRIMASK, r3
    4546:	e002      	b.n	454e <prvTraceStoreTaskReady+0xca>
		return;
    4548:	46c0      	nop			; (mov r8, r8)
    454a:	e000      	b.n	454e <prvTraceStoreTaskReady+0xca>
		return;
    454c:	46c0      	nop			; (mov r8, r8)
}
    454e:	46bd      	mov	sp, r7
    4550:	b009      	add	sp, #36	; 0x24
    4552:	bd90      	pop	{r4, r7, pc}
    4554:	200000f0 	.word	0x200000f0
    4558:	0002294c 	.word	0x0002294c
    455c:	00005571 	.word	0x00005571
    4560:	20000b9c 	.word	0x20000b9c
    4564:	0002298c 	.word	0x0002298c
    4568:	20000c44 	.word	0x20000c44
    456c:	0000ffff 	.word	0x0000ffff
    4570:	00005785 	.word	0x00005785
    4574:	00005129 	.word	0x00005129
    4578:	0000572d 	.word	0x0000572d

0000457c <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
    457c:	b580      	push	{r7, lr}
    457e:	b08e      	sub	sp, #56	; 0x38
    4580:	af00      	add	r7, sp, #0
    4582:	60f8      	str	r0, [r7, #12]
    4584:	60b9      	str	r1, [r7, #8]
    4586:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
    4588:	4b48      	ldr	r3, [pc, #288]	; (46ac <vTraceStoreMemMangEvent+0x130>)
    458a:	681b      	ldr	r3, [r3, #0]
    458c:	2b00      	cmp	r3, #0
    458e:	d100      	bne.n	4592 <vTraceStoreMemMangEvent+0x16>
    4590:	e088      	b.n	46a4 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	2b00      	cmp	r3, #0
    4596:	da03      	bge.n	45a0 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
    4598:	687b      	ldr	r3, [r7, #4]
    459a:	425b      	negs	r3, r3
    459c:	637b      	str	r3, [r7, #52]	; 0x34
    459e:	e001      	b.n	45a4 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
    45a0:	687b      	ldr	r3, [r7, #4]
    45a2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    45a4:	f3ef 8310 	mrs	r3, PRIMASK
    45a8:	61bb      	str	r3, [r7, #24]
  return(result);
    45aa:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
    45ac:	633b      	str	r3, [r7, #48]	; 0x30
    45ae:	2301      	movs	r3, #1
    45b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    45b2:	69fb      	ldr	r3, [r7, #28]
    45b4:	f383 8810 	msr	PRIMASK, r3
    45b8:	4b3d      	ldr	r3, [pc, #244]	; (46b0 <vTraceStoreMemMangEvent+0x134>)
    45ba:	681b      	ldr	r3, [r3, #0]
    45bc:	1c5a      	adds	r2, r3, #1
    45be:	4b3c      	ldr	r3, [pc, #240]	; (46b0 <vTraceStoreMemMangEvent+0x134>)
    45c0:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
    45c2:	68bb      	ldr	r3, [r7, #8]
    45c4:	2b00      	cmp	r3, #0
    45c6:	d005      	beq.n	45d4 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
    45c8:	4b3a      	ldr	r3, [pc, #232]	; (46b4 <vTraceStoreMemMangEvent+0x138>)
    45ca:	681a      	ldr	r2, [r3, #0]
    45cc:	687b      	ldr	r3, [r7, #4]
    45ce:	18d2      	adds	r2, r2, r3
    45d0:	4b38      	ldr	r3, [pc, #224]	; (46b4 <vTraceStoreMemMangEvent+0x138>)
    45d2:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
    45d4:	4b35      	ldr	r3, [pc, #212]	; (46ac <vTraceStoreMemMangEvent+0x130>)
    45d6:	681b      	ldr	r3, [r3, #0]
    45d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    45da:	2b00      	cmp	r3, #0
    45dc:	d057      	beq.n	468e <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    45de:	20ff      	movs	r0, #255	; 0xff
    45e0:	4b35      	ldr	r3, [pc, #212]	; (46b8 <vTraceStoreMemMangEvent+0x13c>)
    45e2:	4798      	blx	r3
    45e4:	0003      	movs	r3, r0
    45e6:	001a      	movs	r2, r3
    45e8:	232f      	movs	r3, #47	; 0x2f
    45ea:	18fb      	adds	r3, r7, r3
    45ec:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    45ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45f0:	4a32      	ldr	r2, [pc, #200]	; (46bc <vTraceStoreMemMangEvent+0x140>)
    45f2:	0019      	movs	r1, r3
    45f4:	0010      	movs	r0, r2
    45f6:	4b32      	ldr	r3, [pc, #200]	; (46c0 <vTraceStoreMemMangEvent+0x144>)
    45f8:	4798      	blx	r3
    45fa:	0002      	movs	r2, r0
    45fc:	232c      	movs	r3, #44	; 0x2c
    45fe:	18fb      	adds	r3, r7, r3
    4600:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    4602:	4b30      	ldr	r3, [pc, #192]	; (46c4 <vTraceStoreMemMangEvent+0x148>)
    4604:	4798      	blx	r3
    4606:	0003      	movs	r3, r0
    4608:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
    460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    460c:	2b00      	cmp	r3, #0
    460e:	d03e      	beq.n	468e <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
    4610:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4612:	222f      	movs	r2, #47	; 0x2f
    4614:	18ba      	adds	r2, r7, r2
    4616:	7812      	ldrb	r2, [r2, #0]
    4618:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    461c:	2200      	movs	r2, #0
    461e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
    4620:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4622:	222c      	movs	r2, #44	; 0x2c
    4624:	18ba      	adds	r2, r7, r2
    4626:	8812      	ldrh	r2, [r2, #0]
    4628:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    462a:	4b27      	ldr	r3, [pc, #156]	; (46c8 <vTraceStoreMemMangEvent+0x14c>)
    462c:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    462e:	68bb      	ldr	r3, [r7, #8]
    4630:	4a22      	ldr	r2, [pc, #136]	; (46bc <vTraceStoreMemMangEvent+0x140>)
    4632:	0019      	movs	r1, r3
    4634:	0010      	movs	r0, r2
    4636:	4b22      	ldr	r3, [pc, #136]	; (46c0 <vTraceStoreMemMangEvent+0x144>)
    4638:	4798      	blx	r3
    463a:	0002      	movs	r2, r0
    463c:	2326      	movs	r3, #38	; 0x26
    463e:	18fb      	adds	r3, r7, r3
    4640:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
    4642:	2325      	movs	r3, #37	; 0x25
    4644:	18fb      	adds	r3, r7, r3
    4646:	2200      	movs	r2, #0
    4648:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    464a:	4b1e      	ldr	r3, [pc, #120]	; (46c4 <vTraceStoreMemMangEvent+0x148>)
    464c:	4798      	blx	r3
    464e:	0003      	movs	r3, r0
    4650:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
    4652:	6a3b      	ldr	r3, [r7, #32]
    4654:	2b00      	cmp	r3, #0
    4656:	d01a      	beq.n	468e <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
    4658:	6a3b      	ldr	r3, [r7, #32]
    465a:	2226      	movs	r2, #38	; 0x26
    465c:	18ba      	adds	r2, r7, r2
    465e:	8812      	ldrh	r2, [r2, #0]
    4660:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
    4662:	6a3b      	ldr	r3, [r7, #32]
    4664:	2225      	movs	r2, #37	; 0x25
    4666:	18ba      	adds	r2, r7, r2
    4668:	7812      	ldrb	r2, [r2, #0]
    466a:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    466c:	68fb      	ldr	r3, [r7, #12]
    466e:	b2db      	uxtb	r3, r3
    4670:	3301      	adds	r3, #1
    4672:	b2da      	uxtb	r2, r3
    4674:	6a3b      	ldr	r3, [r7, #32]
    4676:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
    4678:	68fb      	ldr	r3, [r7, #12]
    467a:	b2da      	uxtb	r2, r3
    467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    467e:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
    4680:	4b11      	ldr	r3, [pc, #68]	; (46c8 <vTraceStoreMemMangEvent+0x14c>)
    4682:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    4684:	4b09      	ldr	r3, [pc, #36]	; (46ac <vTraceStoreMemMangEvent+0x130>)
    4686:	681b      	ldr	r3, [r3, #0]
    4688:	4a0a      	ldr	r2, [pc, #40]	; (46b4 <vTraceStoreMemMangEvent+0x138>)
    468a:	6812      	ldr	r2, [r2, #0]
    468c:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
    468e:	4b08      	ldr	r3, [pc, #32]	; (46b0 <vTraceStoreMemMangEvent+0x134>)
    4690:	681b      	ldr	r3, [r3, #0]
    4692:	1e5a      	subs	r2, r3, #1
    4694:	4b06      	ldr	r3, [pc, #24]	; (46b0 <vTraceStoreMemMangEvent+0x134>)
    4696:	601a      	str	r2, [r3, #0]
    4698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    469a:	617b      	str	r3, [r7, #20]
    469c:	697b      	ldr	r3, [r7, #20]
    469e:	f383 8810 	msr	PRIMASK, r3
    46a2:	e000      	b.n	46a6 <vTraceStoreMemMangEvent+0x12a>
		return;
    46a4:	46c0      	nop			; (mov r8, r8)
}
    46a6:	46bd      	mov	sp, r7
    46a8:	b00e      	add	sp, #56	; 0x38
    46aa:	bd80      	pop	{r7, pc}
    46ac:	20000c44 	.word	0x20000c44
    46b0:	20000b9c 	.word	0x20000b9c
    46b4:	20000bb0 	.word	0x20000bb0
    46b8:	00005785 	.word	0x00005785
    46bc:	0000ffff 	.word	0x0000ffff
    46c0:	00004949 	.word	0x00004949
    46c4:	00005129 	.word	0x00005129
    46c8:	0000572d 	.word	0x0000572d

000046cc <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
    46cc:	b590      	push	{r4, r7, lr}
    46ce:	b08b      	sub	sp, #44	; 0x2c
    46d0:	af00      	add	r7, sp, #0
    46d2:	60f8      	str	r0, [r7, #12]
    46d4:	607a      	str	r2, [r7, #4]
    46d6:	230b      	movs	r3, #11
    46d8:	18fb      	adds	r3, r7, r3
    46da:	1c0a      	adds	r2, r1, #0
    46dc:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    46de:	68fb      	ldr	r3, [r7, #12]
    46e0:	2bfe      	cmp	r3, #254	; 0xfe
    46e2:	d904      	bls.n	46ee <prvTraceStoreKernelCall+0x22>
    46e4:	4b39      	ldr	r3, [pc, #228]	; (47cc <prvTraceStoreKernelCall+0x100>)
    46e6:	0018      	movs	r0, r3
    46e8:	4b39      	ldr	r3, [pc, #228]	; (47d0 <prvTraceStoreKernelCall+0x104>)
    46ea:	4798      	blx	r3
    46ec:	e06b      	b.n	47c6 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    46ee:	230b      	movs	r3, #11
    46f0:	18fb      	adds	r3, r7, r3
    46f2:	781b      	ldrb	r3, [r3, #0]
    46f4:	2b08      	cmp	r3, #8
    46f6:	d904      	bls.n	4702 <prvTraceStoreKernelCall+0x36>
    46f8:	4b36      	ldr	r3, [pc, #216]	; (47d4 <prvTraceStoreKernelCall+0x108>)
    46fa:	0018      	movs	r0, r3
    46fc:	4b34      	ldr	r3, [pc, #208]	; (47d0 <prvTraceStoreKernelCall+0x104>)
    46fe:	4798      	blx	r3
    4700:	e061      	b.n	47c6 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    4702:	4b35      	ldr	r3, [pc, #212]	; (47d8 <prvTraceStoreKernelCall+0x10c>)
    4704:	681a      	ldr	r2, [r3, #0]
    4706:	230b      	movs	r3, #11
    4708:	18fb      	adds	r3, r7, r3
    470a:	781b      	ldrb	r3, [r3, #0]
    470c:	2164      	movs	r1, #100	; 0x64
    470e:	18d3      	adds	r3, r2, r3
    4710:	185b      	adds	r3, r3, r1
    4712:	781b      	ldrb	r3, [r3, #0]
    4714:	001a      	movs	r2, r3
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	429a      	cmp	r2, r3
    471a:	d204      	bcs.n	4726 <prvTraceStoreKernelCall+0x5a>
    471c:	4b2f      	ldr	r3, [pc, #188]	; (47dc <prvTraceStoreKernelCall+0x110>)
    471e:	0018      	movs	r0, r3
    4720:	4b2b      	ldr	r3, [pc, #172]	; (47d0 <prvTraceStoreKernelCall+0x104>)
    4722:	4798      	blx	r3
    4724:	e04f      	b.n	47c6 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
    4726:	4b2e      	ldr	r3, [pc, #184]	; (47e0 <prvTraceStoreKernelCall+0x114>)
    4728:	681b      	ldr	r3, [r3, #0]
    472a:	2b00      	cmp	r3, #0
    472c:	d004      	beq.n	4738 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    472e:	4b2d      	ldr	r3, [pc, #180]	; (47e4 <prvTraceStoreKernelCall+0x118>)
    4730:	0018      	movs	r0, r3
    4732:	4b27      	ldr	r3, [pc, #156]	; (47d0 <prvTraceStoreKernelCall+0x104>)
    4734:	4798      	blx	r3
		return;
    4736:	e046      	b.n	47c6 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
    4738:	4b2b      	ldr	r3, [pc, #172]	; (47e8 <prvTraceStoreKernelCall+0x11c>)
    473a:	781b      	ldrb	r3, [r3, #0]
    473c:	2b00      	cmp	r3, #0
    473e:	d041      	beq.n	47c4 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4740:	f3ef 8310 	mrs	r3, PRIMASK
    4744:	617b      	str	r3, [r7, #20]
  return(result);
    4746:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
    4748:	627b      	str	r3, [r7, #36]	; 0x24
    474a:	2301      	movs	r3, #1
    474c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    474e:	69bb      	ldr	r3, [r7, #24]
    4750:	f383 8810 	msr	PRIMASK, r3
    4754:	4b22      	ldr	r3, [pc, #136]	; (47e0 <prvTraceStoreKernelCall+0x114>)
    4756:	681b      	ldr	r3, [r3, #0]
    4758:	1c5a      	adds	r2, r3, #1
    475a:	4b21      	ldr	r3, [pc, #132]	; (47e0 <prvTraceStoreKernelCall+0x114>)
    475c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    475e:	4b1e      	ldr	r3, [pc, #120]	; (47d8 <prvTraceStoreKernelCall+0x10c>)
    4760:	681b      	ldr	r3, [r3, #0]
    4762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4764:	2b00      	cmp	r3, #0
    4766:	d022      	beq.n	47ae <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    4768:	2322      	movs	r3, #34	; 0x22
    476a:	18fc      	adds	r4, r7, r3
    476c:	4b1f      	ldr	r3, [pc, #124]	; (47ec <prvTraceStoreKernelCall+0x120>)
    476e:	0018      	movs	r0, r3
    4770:	4b1f      	ldr	r3, [pc, #124]	; (47f0 <prvTraceStoreKernelCall+0x124>)
    4772:	4798      	blx	r3
    4774:	0003      	movs	r3, r0
    4776:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    4778:	2321      	movs	r3, #33	; 0x21
    477a:	18fb      	adds	r3, r7, r3
    477c:	687a      	ldr	r2, [r7, #4]
    477e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    4780:	4b1c      	ldr	r3, [pc, #112]	; (47f4 <prvTraceStoreKernelCall+0x128>)
    4782:	4798      	blx	r3
    4784:	0003      	movs	r3, r0
    4786:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    4788:	69fb      	ldr	r3, [r7, #28]
    478a:	2b00      	cmp	r3, #0
    478c:	d00f      	beq.n	47ae <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
    478e:	69fb      	ldr	r3, [r7, #28]
    4790:	2222      	movs	r2, #34	; 0x22
    4792:	18ba      	adds	r2, r7, r2
    4794:	8812      	ldrh	r2, [r2, #0]
    4796:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
    4798:	68fb      	ldr	r3, [r7, #12]
    479a:	b2da      	uxtb	r2, r3
    479c:	69fb      	ldr	r3, [r7, #28]
    479e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    47a0:	69fb      	ldr	r3, [r7, #28]
    47a2:	2221      	movs	r2, #33	; 0x21
    47a4:	18ba      	adds	r2, r7, r2
    47a6:	7812      	ldrb	r2, [r2, #0]
    47a8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    47aa:	4b13      	ldr	r3, [pc, #76]	; (47f8 <prvTraceStoreKernelCall+0x12c>)
    47ac:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    47ae:	4b0c      	ldr	r3, [pc, #48]	; (47e0 <prvTraceStoreKernelCall+0x114>)
    47b0:	681b      	ldr	r3, [r3, #0]
    47b2:	1e5a      	subs	r2, r3, #1
    47b4:	4b0a      	ldr	r3, [pc, #40]	; (47e0 <prvTraceStoreKernelCall+0x114>)
    47b6:	601a      	str	r2, [r3, #0]
    47b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    47ba:	613b      	str	r3, [r7, #16]
    47bc:	693b      	ldr	r3, [r7, #16]
    47be:	f383 8810 	msr	PRIMASK, r3
    47c2:	e000      	b.n	47c6 <prvTraceStoreKernelCall+0xfa>
		return;
    47c4:	46c0      	nop			; (mov r8, r8)
}
    47c6:	46bd      	mov	sp, r7
    47c8:	b00b      	add	sp, #44	; 0x2c
    47ca:	bd90      	pop	{r4, r7, pc}
    47cc:	000229fc 	.word	0x000229fc
    47d0:	00005571 	.word	0x00005571
    47d4:	00022a34 	.word	0x00022a34
    47d8:	20000c44 	.word	0x20000c44
    47dc:	00022a7c 	.word	0x00022a7c
    47e0:	20000b9c 	.word	0x20000b9c
    47e4:	00022ac4 	.word	0x00022ac4
    47e8:	20000ba8 	.word	0x20000ba8
    47ec:	0000ffff 	.word	0x0000ffff
    47f0:	00005785 	.word	0x00005785
    47f4:	00005129 	.word	0x00005129
    47f8:	0000572d 	.word	0x0000572d

000047fc <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
    47fc:	b580      	push	{r7, lr}
    47fe:	b08a      	sub	sp, #40	; 0x28
    4800:	af00      	add	r7, sp, #0
    4802:	60f8      	str	r0, [r7, #12]
    4804:	607a      	str	r2, [r7, #4]
    4806:	603b      	str	r3, [r7, #0]
    4808:	230b      	movs	r3, #11
    480a:	18fb      	adds	r3, r7, r3
    480c:	1c0a      	adds	r2, r1, #0
    480e:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	2bfe      	cmp	r3, #254	; 0xfe
    4814:	d904      	bls.n	4820 <prvTraceStoreKernelCallWithParam+0x24>
    4816:	4b40      	ldr	r3, [pc, #256]	; (4918 <prvTraceStoreKernelCallWithParam+0x11c>)
    4818:	0018      	movs	r0, r3
    481a:	4b40      	ldr	r3, [pc, #256]	; (491c <prvTraceStoreKernelCallWithParam+0x120>)
    481c:	4798      	blx	r3
    481e:	e077      	b.n	4910 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    4820:	230b      	movs	r3, #11
    4822:	18fb      	adds	r3, r7, r3
    4824:	781b      	ldrb	r3, [r3, #0]
    4826:	2b08      	cmp	r3, #8
    4828:	d904      	bls.n	4834 <prvTraceStoreKernelCallWithParam+0x38>
    482a:	4b3d      	ldr	r3, [pc, #244]	; (4920 <prvTraceStoreKernelCallWithParam+0x124>)
    482c:	0018      	movs	r0, r3
    482e:	4b3b      	ldr	r3, [pc, #236]	; (491c <prvTraceStoreKernelCallWithParam+0x120>)
    4830:	4798      	blx	r3
    4832:	e06d      	b.n	4910 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    4834:	4b3b      	ldr	r3, [pc, #236]	; (4924 <prvTraceStoreKernelCallWithParam+0x128>)
    4836:	681a      	ldr	r2, [r3, #0]
    4838:	230b      	movs	r3, #11
    483a:	18fb      	adds	r3, r7, r3
    483c:	781b      	ldrb	r3, [r3, #0]
    483e:	2164      	movs	r1, #100	; 0x64
    4840:	18d3      	adds	r3, r2, r3
    4842:	185b      	adds	r3, r3, r1
    4844:	781b      	ldrb	r3, [r3, #0]
    4846:	001a      	movs	r2, r3
    4848:	687b      	ldr	r3, [r7, #4]
    484a:	429a      	cmp	r2, r3
    484c:	d204      	bcs.n	4858 <prvTraceStoreKernelCallWithParam+0x5c>
    484e:	4b36      	ldr	r3, [pc, #216]	; (4928 <prvTraceStoreKernelCallWithParam+0x12c>)
    4850:	0018      	movs	r0, r3
    4852:	4b32      	ldr	r3, [pc, #200]	; (491c <prvTraceStoreKernelCallWithParam+0x120>)
    4854:	4798      	blx	r3
    4856:	e05b      	b.n	4910 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
    4858:	4b34      	ldr	r3, [pc, #208]	; (492c <prvTraceStoreKernelCallWithParam+0x130>)
    485a:	681b      	ldr	r3, [r3, #0]
    485c:	2b00      	cmp	r3, #0
    485e:	d004      	beq.n	486a <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    4860:	4b33      	ldr	r3, [pc, #204]	; (4930 <prvTraceStoreKernelCallWithParam+0x134>)
    4862:	0018      	movs	r0, r3
    4864:	4b2d      	ldr	r3, [pc, #180]	; (491c <prvTraceStoreKernelCallWithParam+0x120>)
    4866:	4798      	blx	r3
		return;
    4868:	e052      	b.n	4910 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    486a:	f3ef 8310 	mrs	r3, PRIMASK
    486e:	617b      	str	r3, [r7, #20]
  return(result);
    4870:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
    4872:	627b      	str	r3, [r7, #36]	; 0x24
    4874:	2301      	movs	r3, #1
    4876:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4878:	69bb      	ldr	r3, [r7, #24]
    487a:	f383 8810 	msr	PRIMASK, r3
    487e:	4b2b      	ldr	r3, [pc, #172]	; (492c <prvTraceStoreKernelCallWithParam+0x130>)
    4880:	681b      	ldr	r3, [r3, #0]
    4882:	1c5a      	adds	r2, r3, #1
    4884:	4b29      	ldr	r3, [pc, #164]	; (492c <prvTraceStoreKernelCallWithParam+0x130>)
    4886:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    4888:	4b26      	ldr	r3, [pc, #152]	; (4924 <prvTraceStoreKernelCallWithParam+0x128>)
    488a:	681b      	ldr	r3, [r3, #0]
    488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    488e:	2b00      	cmp	r3, #0
    4890:	d034      	beq.n	48fc <prvTraceStoreKernelCallWithParam+0x100>
    4892:	4b28      	ldr	r3, [pc, #160]	; (4934 <prvTraceStoreKernelCallWithParam+0x138>)
    4894:	781b      	ldrb	r3, [r3, #0]
    4896:	2b00      	cmp	r3, #0
    4898:	d030      	beq.n	48fc <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    489a:	20ff      	movs	r0, #255	; 0xff
    489c:	4b26      	ldr	r3, [pc, #152]	; (4938 <prvTraceStoreKernelCallWithParam+0x13c>)
    489e:	4798      	blx	r3
    48a0:	0003      	movs	r3, r0
    48a2:	001a      	movs	r2, r3
    48a4:	2323      	movs	r3, #35	; 0x23
    48a6:	18fb      	adds	r3, r7, r3
    48a8:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    48aa:	683b      	ldr	r3, [r7, #0]
    48ac:	0019      	movs	r1, r3
    48ae:	20ff      	movs	r0, #255	; 0xff
    48b0:	4b22      	ldr	r3, [pc, #136]	; (493c <prvTraceStoreKernelCallWithParam+0x140>)
    48b2:	4798      	blx	r3
    48b4:	0002      	movs	r2, r0
    48b6:	2322      	movs	r3, #34	; 0x22
    48b8:	18fb      	adds	r3, r7, r3
    48ba:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    48bc:	2321      	movs	r3, #33	; 0x21
    48be:	18fb      	adds	r3, r7, r3
    48c0:	687a      	ldr	r2, [r7, #4]
    48c2:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    48c4:	4b1e      	ldr	r3, [pc, #120]	; (4940 <prvTraceStoreKernelCallWithParam+0x144>)
    48c6:	4798      	blx	r3
    48c8:	0003      	movs	r3, r0
    48ca:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    48cc:	69fb      	ldr	r3, [r7, #28]
    48ce:	2b00      	cmp	r3, #0
    48d0:	d014      	beq.n	48fc <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
    48d2:	69fb      	ldr	r3, [r7, #28]
    48d4:	2223      	movs	r2, #35	; 0x23
    48d6:	18ba      	adds	r2, r7, r2
    48d8:	7812      	ldrb	r2, [r2, #0]
    48da:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
    48dc:	68fb      	ldr	r3, [r7, #12]
    48de:	b2da      	uxtb	r2, r3
    48e0:	69fb      	ldr	r3, [r7, #28]
    48e2:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    48e4:	69fb      	ldr	r3, [r7, #28]
    48e6:	2221      	movs	r2, #33	; 0x21
    48e8:	18ba      	adds	r2, r7, r2
    48ea:	7812      	ldrb	r2, [r2, #0]
    48ec:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
    48ee:	69fb      	ldr	r3, [r7, #28]
    48f0:	2222      	movs	r2, #34	; 0x22
    48f2:	18ba      	adds	r2, r7, r2
    48f4:	7812      	ldrb	r2, [r2, #0]
    48f6:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
    48f8:	4b12      	ldr	r3, [pc, #72]	; (4944 <prvTraceStoreKernelCallWithParam+0x148>)
    48fa:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    48fc:	4b0b      	ldr	r3, [pc, #44]	; (492c <prvTraceStoreKernelCallWithParam+0x130>)
    48fe:	681b      	ldr	r3, [r3, #0]
    4900:	1e5a      	subs	r2, r3, #1
    4902:	4b0a      	ldr	r3, [pc, #40]	; (492c <prvTraceStoreKernelCallWithParam+0x130>)
    4904:	601a      	str	r2, [r3, #0]
    4906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4908:	613b      	str	r3, [r7, #16]
    490a:	693b      	ldr	r3, [r7, #16]
    490c:	f383 8810 	msr	PRIMASK, r3
}
    4910:	46bd      	mov	sp, r7
    4912:	b00a      	add	sp, #40	; 0x28
    4914:	bd80      	pop	{r7, pc}
    4916:	46c0      	nop			; (mov r8, r8)
    4918:	00022afc 	.word	0x00022afc
    491c:	00005571 	.word	0x00005571
    4920:	00022b3c 	.word	0x00022b3c
    4924:	20000c44 	.word	0x20000c44
    4928:	00022b8c 	.word	0x00022b8c
    492c:	20000b9c 	.word	0x20000b9c
    4930:	00022bdc 	.word	0x00022bdc
    4934:	20000ba8 	.word	0x20000ba8
    4938:	00005785 	.word	0x00005785
    493c:	00004949 	.word	0x00004949
    4940:	00005129 	.word	0x00005129
    4944:	0000572d 	.word	0x0000572d

00004948 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
    4948:	b580      	push	{r7, lr}
    494a:	b084      	sub	sp, #16
    494c:	af00      	add	r7, sp, #0
    494e:	6078      	str	r0, [r7, #4]
    4950:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    4952:	687b      	ldr	r3, [r7, #4]
    4954:	2bff      	cmp	r3, #255	; 0xff
    4956:	d009      	beq.n	496c <prvTraceGetParam+0x24>
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	4a19      	ldr	r2, [pc, #100]	; (49c0 <prvTraceGetParam+0x78>)
    495c:	4293      	cmp	r3, r2
    495e:	d005      	beq.n	496c <prvTraceGetParam+0x24>
    4960:	4b18      	ldr	r3, [pc, #96]	; (49c4 <prvTraceGetParam+0x7c>)
    4962:	0018      	movs	r0, r3
    4964:	4b18      	ldr	r3, [pc, #96]	; (49c8 <prvTraceGetParam+0x80>)
    4966:	4798      	blx	r3
    4968:	683b      	ldr	r3, [r7, #0]
    496a:	e024      	b.n	49b6 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    496c:	683a      	ldr	r2, [r7, #0]
    496e:	687b      	ldr	r3, [r7, #4]
    4970:	429a      	cmp	r2, r3
    4972:	d801      	bhi.n	4978 <prvTraceGetParam+0x30>
	{
		return param;
    4974:	683b      	ldr	r3, [r7, #0]
    4976:	e01e      	b.n	49b6 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    4978:	4b14      	ldr	r3, [pc, #80]	; (49cc <prvTraceGetParam+0x84>)
    497a:	4798      	blx	r3
    497c:	0003      	movs	r3, r0
    497e:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
    4980:	68fb      	ldr	r3, [r7, #12]
    4982:	2b00      	cmp	r3, #0
    4984:	d014      	beq.n	49b0 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
    4986:	68fb      	ldr	r3, [r7, #12]
    4988:	2201      	movs	r2, #1
    498a:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    498c:	687b      	ldr	r3, [r7, #4]
    498e:	43db      	mvns	r3, r3
    4990:	683a      	ldr	r2, [r7, #0]
    4992:	4013      	ands	r3, r2
    4994:	0a1b      	lsrs	r3, r3, #8
    4996:	b2da      	uxtb	r2, r3
    4998:	68fb      	ldr	r3, [r7, #12]
    499a:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	43db      	mvns	r3, r3
    49a0:	683a      	ldr	r2, [r7, #0]
    49a2:	4013      	ands	r3, r2
    49a4:	0c1b      	lsrs	r3, r3, #16
    49a6:	b29a      	uxth	r2, r3
    49a8:	68fb      	ldr	r3, [r7, #12]
    49aa:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    49ac:	4b08      	ldr	r3, [pc, #32]	; (49d0 <prvTraceGetParam+0x88>)
    49ae:	4798      	blx	r3
		}

		return param & param_max;
    49b0:	683b      	ldr	r3, [r7, #0]
    49b2:	687a      	ldr	r2, [r7, #4]
    49b4:	4013      	ands	r3, r2
	}
}
    49b6:	0018      	movs	r0, r3
    49b8:	46bd      	mov	sp, r7
    49ba:	b004      	add	sp, #16
    49bc:	bd80      	pop	{r7, pc}
    49be:	46c0      	nop			; (mov r8, r8)
    49c0:	0000ffff 	.word	0x0000ffff
    49c4:	00022c14 	.word	0x00022c14
    49c8:	00005571 	.word	0x00005571
    49cc:	00005129 	.word	0x00005129
    49d0:	0000572d 	.word	0x0000572d

000049d4 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
    49d4:	b580      	push	{r7, lr}
    49d6:	b08a      	sub	sp, #40	; 0x28
    49d8:	af00      	add	r7, sp, #0
    49da:	6078      	str	r0, [r7, #4]
    49dc:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
    49de:	2326      	movs	r3, #38	; 0x26
    49e0:	18fb      	adds	r3, r7, r3
    49e2:	2200      	movs	r2, #0
    49e4:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    49e6:	687b      	ldr	r3, [r7, #4]
    49e8:	2bfe      	cmp	r3, #254	; 0xfe
    49ea:	d904      	bls.n	49f6 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
    49ec:	4b2d      	ldr	r3, [pc, #180]	; (4aa4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
    49ee:	0018      	movs	r0, r3
    49f0:	4b2d      	ldr	r3, [pc, #180]	; (4aa8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    49f2:	4798      	blx	r3
    49f4:	e053      	b.n	4a9e <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
    49f6:	4b2d      	ldr	r3, [pc, #180]	; (4aac <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    49f8:	681b      	ldr	r3, [r3, #0]
    49fa:	2b00      	cmp	r3, #0
    49fc:	d004      	beq.n	4a08 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    49fe:	4b2c      	ldr	r3, [pc, #176]	; (4ab0 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
    4a00:	0018      	movs	r0, r3
    4a02:	4b29      	ldr	r3, [pc, #164]	; (4aa8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    4a04:	4798      	blx	r3
		return;
    4a06:	e04a      	b.n	4a9e <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4a08:	f3ef 8310 	mrs	r3, PRIMASK
    4a0c:	613b      	str	r3, [r7, #16]
  return(result);
    4a0e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
    4a10:	623b      	str	r3, [r7, #32]
    4a12:	2301      	movs	r3, #1
    4a14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4a16:	697b      	ldr	r3, [r7, #20]
    4a18:	f383 8810 	msr	PRIMASK, r3
    4a1c:	4b23      	ldr	r3, [pc, #140]	; (4aac <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    4a1e:	681b      	ldr	r3, [r3, #0]
    4a20:	1c5a      	adds	r2, r3, #1
    4a22:	4b22      	ldr	r3, [pc, #136]	; (4aac <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    4a24:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    4a26:	4b23      	ldr	r3, [pc, #140]	; (4ab4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
    4a28:	681b      	ldr	r3, [r3, #0]
    4a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4a2c:	2b00      	cmp	r3, #0
    4a2e:	d02c      	beq.n	4a8a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
    4a30:	4b21      	ldr	r3, [pc, #132]	; (4ab8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
    4a32:	781b      	ldrb	r3, [r3, #0]
    4a34:	2b00      	cmp	r3, #0
    4a36:	d028      	beq.n	4a8a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    4a38:	20ff      	movs	r0, #255	; 0xff
    4a3a:	4b20      	ldr	r3, [pc, #128]	; (4abc <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
    4a3c:	4798      	blx	r3
    4a3e:	0003      	movs	r3, r0
    4a40:	001a      	movs	r2, r3
    4a42:	231f      	movs	r3, #31
    4a44:	18fb      	adds	r3, r7, r3
    4a46:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    4a48:	683b      	ldr	r3, [r7, #0]
    4a4a:	4a1d      	ldr	r2, [pc, #116]	; (4ac0 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
    4a4c:	0019      	movs	r1, r3
    4a4e:	0010      	movs	r0, r2
    4a50:	4b1c      	ldr	r3, [pc, #112]	; (4ac4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
    4a52:	4798      	blx	r3
    4a54:	0002      	movs	r2, r0
    4a56:	2326      	movs	r3, #38	; 0x26
    4a58:	18fb      	adds	r3, r7, r3
    4a5a:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    4a5c:	4b1a      	ldr	r3, [pc, #104]	; (4ac8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
    4a5e:	4798      	blx	r3
    4a60:	0003      	movs	r3, r0
    4a62:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
    4a64:	69bb      	ldr	r3, [r7, #24]
    4a66:	2b00      	cmp	r3, #0
    4a68:	d00f      	beq.n	4a8a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
    4a6a:	69bb      	ldr	r3, [r7, #24]
    4a6c:	221f      	movs	r2, #31
    4a6e:	18ba      	adds	r2, r7, r2
    4a70:	7812      	ldrb	r2, [r2, #0]
    4a72:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
    4a74:	687b      	ldr	r3, [r7, #4]
    4a76:	b2da      	uxtb	r2, r3
    4a78:	69bb      	ldr	r3, [r7, #24]
    4a7a:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
    4a7c:	69bb      	ldr	r3, [r7, #24]
    4a7e:	2226      	movs	r2, #38	; 0x26
    4a80:	18ba      	adds	r2, r7, r2
    4a82:	8812      	ldrh	r2, [r2, #0]
    4a84:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    4a86:	4b11      	ldr	r3, [pc, #68]	; (4acc <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
    4a88:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    4a8a:	4b08      	ldr	r3, [pc, #32]	; (4aac <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	1e5a      	subs	r2, r3, #1
    4a90:	4b06      	ldr	r3, [pc, #24]	; (4aac <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    4a92:	601a      	str	r2, [r3, #0]
    4a94:	6a3b      	ldr	r3, [r7, #32]
    4a96:	60fb      	str	r3, [r7, #12]
    4a98:	68fb      	ldr	r3, [r7, #12]
    4a9a:	f383 8810 	msr	PRIMASK, r3
}
    4a9e:	46bd      	mov	sp, r7
    4aa0:	b00a      	add	sp, #40	; 0x28
    4aa2:	bd80      	pop	{r7, pc}
    4aa4:	00022c50 	.word	0x00022c50
    4aa8:	00005571 	.word	0x00005571
    4aac:	20000b9c 	.word	0x20000b9c
    4ab0:	00022ca8 	.word	0x00022ca8
    4ab4:	20000c44 	.word	0x20000c44
    4ab8:	20000ba8 	.word	0x20000ba8
    4abc:	00005785 	.word	0x00005785
    4ac0:	0000ffff 	.word	0x0000ffff
    4ac4:	00004949 	.word	0x00004949
    4ac8:	00005129 	.word	0x00005129
    4acc:	0000572d 	.word	0x0000572d

00004ad0 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
    4ad0:	b590      	push	{r4, r7, lr}
    4ad2:	b089      	sub	sp, #36	; 0x24
    4ad4:	af00      	add	r7, sp, #0
    4ad6:	0002      	movs	r2, r0
    4ad8:	1dfb      	adds	r3, r7, #7
    4ada:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    4adc:	1dfb      	adds	r3, r7, #7
    4ade:	781b      	ldrb	r3, [r3, #0]
    4ae0:	2b0f      	cmp	r3, #15
    4ae2:	d904      	bls.n	4aee <prvTraceStoreTaskswitch+0x1e>
    4ae4:	4b34      	ldr	r3, [pc, #208]	; (4bb8 <prvTraceStoreTaskswitch+0xe8>)
    4ae6:	0018      	movs	r0, r3
    4ae8:	4b34      	ldr	r3, [pc, #208]	; (4bbc <prvTraceStoreTaskswitch+0xec>)
    4aea:	4798      	blx	r3
    4aec:	e061      	b.n	4bb2 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4aee:	f3ef 8310 	mrs	r3, PRIMASK
    4af2:	60fb      	str	r3, [r7, #12]
  return(result);
    4af4:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    4af6:	61fb      	str	r3, [r7, #28]
    4af8:	2301      	movs	r3, #1
    4afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4afc:	693b      	ldr	r3, [r7, #16]
    4afe:	f383 8810 	msr	PRIMASK, r3
    4b02:	4b2f      	ldr	r3, [pc, #188]	; (4bc0 <prvTraceStoreTaskswitch+0xf0>)
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	1c5a      	adds	r2, r3, #1
    4b08:	4b2d      	ldr	r3, [pc, #180]	; (4bc0 <prvTraceStoreTaskswitch+0xf0>)
    4b0a:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    4b0c:	4b2d      	ldr	r3, [pc, #180]	; (4bc4 <prvTraceStoreTaskswitch+0xf4>)
    4b0e:	781b      	ldrb	r3, [r3, #0]
    4b10:	1dfa      	adds	r2, r7, #7
    4b12:	7812      	ldrb	r2, [r2, #0]
    4b14:	429a      	cmp	r2, r3
    4b16:	d042      	beq.n	4b9e <prvTraceStoreTaskswitch+0xce>
    4b18:	4b2b      	ldr	r3, [pc, #172]	; (4bc8 <prvTraceStoreTaskswitch+0xf8>)
    4b1a:	681b      	ldr	r3, [r3, #0]
    4b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d03d      	beq.n	4b9e <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
    4b22:	4b2a      	ldr	r3, [pc, #168]	; (4bcc <prvTraceStoreTaskswitch+0xfc>)
    4b24:	2200      	movs	r2, #0
    4b26:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    4b28:	231a      	movs	r3, #26
    4b2a:	18fc      	adds	r4, r7, r3
    4b2c:	4b28      	ldr	r3, [pc, #160]	; (4bd0 <prvTraceStoreTaskswitch+0x100>)
    4b2e:	0018      	movs	r0, r3
    4b30:	4b28      	ldr	r3, [pc, #160]	; (4bd4 <prvTraceStoreTaskswitch+0x104>)
    4b32:	4798      	blx	r3
    4b34:	0003      	movs	r3, r0
    4b36:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
    4b38:	4b22      	ldr	r3, [pc, #136]	; (4bc4 <prvTraceStoreTaskswitch+0xf4>)
    4b3a:	1dfa      	adds	r2, r7, #7
    4b3c:	7812      	ldrb	r2, [r2, #0]
    4b3e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
    4b40:	2319      	movs	r3, #25
    4b42:	18fb      	adds	r3, r7, r3
    4b44:	4a1f      	ldr	r2, [pc, #124]	; (4bc4 <prvTraceStoreTaskswitch+0xf4>)
    4b46:	7812      	ldrb	r2, [r2, #0]
    4b48:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    4b4a:	4b23      	ldr	r3, [pc, #140]	; (4bd8 <prvTraceStoreTaskswitch+0x108>)
    4b4c:	4798      	blx	r3
    4b4e:	0003      	movs	r3, r0
    4b50:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
    4b52:	697b      	ldr	r3, [r7, #20]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d022      	beq.n	4b9e <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    4b58:	4b1a      	ldr	r3, [pc, #104]	; (4bc4 <prvTraceStoreTaskswitch+0xf4>)
    4b5a:	781b      	ldrb	r3, [r3, #0]
    4b5c:	0019      	movs	r1, r3
    4b5e:	2003      	movs	r0, #3
    4b60:	4b1e      	ldr	r3, [pc, #120]	; (4bdc <prvTraceStoreTaskswitch+0x10c>)
    4b62:	4798      	blx	r3
    4b64:	0003      	movs	r3, r0
    4b66:	2b01      	cmp	r3, #1
    4b68:	d103      	bne.n	4b72 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    4b6a:	697b      	ldr	r3, [r7, #20]
    4b6c:	2207      	movs	r2, #7
    4b6e:	701a      	strb	r2, [r3, #0]
    4b70:	e002      	b.n	4b78 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    4b72:	697b      	ldr	r3, [r7, #20]
    4b74:	2206      	movs	r2, #6
    4b76:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
    4b78:	697b      	ldr	r3, [r7, #20]
    4b7a:	221a      	movs	r2, #26
    4b7c:	18ba      	adds	r2, r7, r2
    4b7e:	8812      	ldrh	r2, [r2, #0]
    4b80:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
    4b82:	697b      	ldr	r3, [r7, #20]
    4b84:	2219      	movs	r2, #25
    4b86:	18ba      	adds	r2, r7, r2
    4b88:	7812      	ldrb	r2, [r2, #0]
    4b8a:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
    4b8c:	4b0d      	ldr	r3, [pc, #52]	; (4bc4 <prvTraceStoreTaskswitch+0xf4>)
    4b8e:	781b      	ldrb	r3, [r3, #0]
    4b90:	2201      	movs	r2, #1
    4b92:	0019      	movs	r1, r3
    4b94:	2003      	movs	r0, #3
    4b96:	4b12      	ldr	r3, [pc, #72]	; (4be0 <prvTraceStoreTaskswitch+0x110>)
    4b98:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    4b9a:	4b12      	ldr	r3, [pc, #72]	; (4be4 <prvTraceStoreTaskswitch+0x114>)
    4b9c:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    4b9e:	4b08      	ldr	r3, [pc, #32]	; (4bc0 <prvTraceStoreTaskswitch+0xf0>)
    4ba0:	681b      	ldr	r3, [r3, #0]
    4ba2:	1e5a      	subs	r2, r3, #1
    4ba4:	4b06      	ldr	r3, [pc, #24]	; (4bc0 <prvTraceStoreTaskswitch+0xf0>)
    4ba6:	601a      	str	r2, [r3, #0]
    4ba8:	69fb      	ldr	r3, [r7, #28]
    4baa:	60bb      	str	r3, [r7, #8]
    4bac:	68bb      	ldr	r3, [r7, #8]
    4bae:	f383 8810 	msr	PRIMASK, r3
}
    4bb2:	46bd      	mov	sp, r7
    4bb4:	b009      	add	sp, #36	; 0x24
    4bb6:	bd90      	pop	{r4, r7, pc}
    4bb8:	00022ce0 	.word	0x00022ce0
    4bbc:	00005571 	.word	0x00005571
    4bc0:	20000b9c 	.word	0x20000b9c
    4bc4:	20000ba8 	.word	0x20000ba8
    4bc8:	20000c44 	.word	0x20000c44
    4bcc:	20000b88 	.word	0x20000b88
    4bd0:	0000ffff 	.word	0x0000ffff
    4bd4:	00005785 	.word	0x00005785
    4bd8:	00005129 	.word	0x00005129
    4bdc:	00004dcd 	.word	0x00004dcd
    4be0:	00004d29 	.word	0x00004d29
    4be4:	0000572d 	.word	0x0000572d

00004be8 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
    4be8:	b590      	push	{r4, r7, lr}
    4bea:	b083      	sub	sp, #12
    4bec:	af00      	add	r7, sp, #0
    4bee:	0004      	movs	r4, r0
    4bf0:	0008      	movs	r0, r1
    4bf2:	0011      	movs	r1, r2
    4bf4:	1dfb      	adds	r3, r7, #7
    4bf6:	1c22      	adds	r2, r4, #0
    4bf8:	701a      	strb	r2, [r3, #0]
    4bfa:	1dbb      	adds	r3, r7, #6
    4bfc:	1c02      	adds	r2, r0, #0
    4bfe:	701a      	strb	r2, [r3, #0]
    4c00:	1d7b      	adds	r3, r7, #5
    4c02:	1c0a      	adds	r2, r1, #0
    4c04:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    4c06:	1dfb      	adds	r3, r7, #7
    4c08:	781b      	ldrb	r3, [r3, #0]
    4c0a:	2b08      	cmp	r3, #8
    4c0c:	d904      	bls.n	4c18 <prvTraceSetPriorityProperty+0x30>
    4c0e:	4b1a      	ldr	r3, [pc, #104]	; (4c78 <prvTraceSetPriorityProperty+0x90>)
    4c10:	0018      	movs	r0, r3
    4c12:	4b1a      	ldr	r3, [pc, #104]	; (4c7c <prvTraceSetPriorityProperty+0x94>)
    4c14:	4798      	blx	r3
    4c16:	e02c      	b.n	4c72 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    4c18:	4b19      	ldr	r3, [pc, #100]	; (4c80 <prvTraceSetPriorityProperty+0x98>)
    4c1a:	681a      	ldr	r2, [r3, #0]
    4c1c:	1dfb      	adds	r3, r7, #7
    4c1e:	781b      	ldrb	r3, [r3, #0]
    4c20:	2164      	movs	r1, #100	; 0x64
    4c22:	18d3      	adds	r3, r2, r3
    4c24:	185b      	adds	r3, r3, r1
    4c26:	781b      	ldrb	r3, [r3, #0]
    4c28:	1dba      	adds	r2, r7, #6
    4c2a:	7812      	ldrb	r2, [r2, #0]
    4c2c:	429a      	cmp	r2, r3
    4c2e:	d904      	bls.n	4c3a <prvTraceSetPriorityProperty+0x52>
    4c30:	4b14      	ldr	r3, [pc, #80]	; (4c84 <prvTraceSetPriorityProperty+0x9c>)
    4c32:	0018      	movs	r0, r3
    4c34:	4b11      	ldr	r3, [pc, #68]	; (4c7c <prvTraceSetPriorityProperty+0x94>)
    4c36:	4798      	blx	r3
    4c38:	e01b      	b.n	4c72 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    4c3a:	4b11      	ldr	r3, [pc, #68]	; (4c80 <prvTraceSetPriorityProperty+0x98>)
    4c3c:	681c      	ldr	r4, [r3, #0]
    4c3e:	1dfb      	adds	r3, r7, #7
    4c40:	781a      	ldrb	r2, [r3, #0]
    4c42:	1dbb      	adds	r3, r7, #6
    4c44:	781b      	ldrb	r3, [r3, #0]
    4c46:	0011      	movs	r1, r2
    4c48:	0018      	movs	r0, r3
    4c4a:	4b0f      	ldr	r3, [pc, #60]	; (4c88 <prvTraceSetPriorityProperty+0xa0>)
    4c4c:	4798      	blx	r3
    4c4e:	0003      	movs	r3, r0
    4c50:	0018      	movs	r0, r3
    4c52:	4b0b      	ldr	r3, [pc, #44]	; (4c80 <prvTraceSetPriorityProperty+0x98>)
    4c54:	681a      	ldr	r2, [r3, #0]
    4c56:	1dfb      	adds	r3, r7, #7
    4c58:	781b      	ldrb	r3, [r3, #0]
    4c5a:	2170      	movs	r1, #112	; 0x70
    4c5c:	18d3      	adds	r3, r2, r3
    4c5e:	185b      	adds	r3, r3, r1
    4c60:	781b      	ldrb	r3, [r3, #0]
    4c62:	18c3      	adds	r3, r0, r3
    4c64:	3301      	adds	r3, #1
    4c66:	229c      	movs	r2, #156	; 0x9c
    4c68:	18e3      	adds	r3, r4, r3
    4c6a:	189b      	adds	r3, r3, r2
    4c6c:	1d7a      	adds	r2, r7, #5
    4c6e:	7812      	ldrb	r2, [r2, #0]
    4c70:	701a      	strb	r2, [r3, #0]
}
    4c72:	46bd      	mov	sp, r7
    4c74:	b003      	add	sp, #12
    4c76:	bd90      	pop	{r4, r7, pc}
    4c78:	00022e74 	.word	0x00022e74
    4c7c:	00005571 	.word	0x00005571
    4c80:	20000c44 	.word	0x20000c44
    4c84:	00022ec0 	.word	0x00022ec0
    4c88:	0000517d 	.word	0x0000517d

00004c8c <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
    4c8c:	b590      	push	{r4, r7, lr}
    4c8e:	b083      	sub	sp, #12
    4c90:	af00      	add	r7, sp, #0
    4c92:	0002      	movs	r2, r0
    4c94:	1dfb      	adds	r3, r7, #7
    4c96:	701a      	strb	r2, [r3, #0]
    4c98:	1dbb      	adds	r3, r7, #6
    4c9a:	1c0a      	adds	r2, r1, #0
    4c9c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    4c9e:	1dfb      	adds	r3, r7, #7
    4ca0:	781b      	ldrb	r3, [r3, #0]
    4ca2:	2b08      	cmp	r3, #8
    4ca4:	d905      	bls.n	4cb2 <prvTraceGetPriorityProperty+0x26>
    4ca6:	4b1b      	ldr	r3, [pc, #108]	; (4d14 <prvTraceGetPriorityProperty+0x88>)
    4ca8:	0018      	movs	r0, r3
    4caa:	4b1b      	ldr	r3, [pc, #108]	; (4d18 <prvTraceGetPriorityProperty+0x8c>)
    4cac:	4798      	blx	r3
    4cae:	2300      	movs	r3, #0
    4cb0:	e02b      	b.n	4d0a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    4cb2:	4b1a      	ldr	r3, [pc, #104]	; (4d1c <prvTraceGetPriorityProperty+0x90>)
    4cb4:	681a      	ldr	r2, [r3, #0]
    4cb6:	1dfb      	adds	r3, r7, #7
    4cb8:	781b      	ldrb	r3, [r3, #0]
    4cba:	2164      	movs	r1, #100	; 0x64
    4cbc:	18d3      	adds	r3, r2, r3
    4cbe:	185b      	adds	r3, r3, r1
    4cc0:	781b      	ldrb	r3, [r3, #0]
    4cc2:	1dba      	adds	r2, r7, #6
    4cc4:	7812      	ldrb	r2, [r2, #0]
    4cc6:	429a      	cmp	r2, r3
    4cc8:	d905      	bls.n	4cd6 <prvTraceGetPriorityProperty+0x4a>
    4cca:	4b15      	ldr	r3, [pc, #84]	; (4d20 <prvTraceGetPriorityProperty+0x94>)
    4ccc:	0018      	movs	r0, r3
    4cce:	4b12      	ldr	r3, [pc, #72]	; (4d18 <prvTraceGetPriorityProperty+0x8c>)
    4cd0:	4798      	blx	r3
    4cd2:	2300      	movs	r3, #0
    4cd4:	e019      	b.n	4d0a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    4cd6:	4b11      	ldr	r3, [pc, #68]	; (4d1c <prvTraceGetPriorityProperty+0x90>)
    4cd8:	681c      	ldr	r4, [r3, #0]
    4cda:	1dfb      	adds	r3, r7, #7
    4cdc:	781a      	ldrb	r2, [r3, #0]
    4cde:	1dbb      	adds	r3, r7, #6
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	0011      	movs	r1, r2
    4ce4:	0018      	movs	r0, r3
    4ce6:	4b0f      	ldr	r3, [pc, #60]	; (4d24 <prvTraceGetPriorityProperty+0x98>)
    4ce8:	4798      	blx	r3
    4cea:	0003      	movs	r3, r0
    4cec:	0018      	movs	r0, r3
    4cee:	4b0b      	ldr	r3, [pc, #44]	; (4d1c <prvTraceGetPriorityProperty+0x90>)
    4cf0:	681a      	ldr	r2, [r3, #0]
    4cf2:	1dfb      	adds	r3, r7, #7
    4cf4:	781b      	ldrb	r3, [r3, #0]
    4cf6:	2170      	movs	r1, #112	; 0x70
    4cf8:	18d3      	adds	r3, r2, r3
    4cfa:	185b      	adds	r3, r3, r1
    4cfc:	781b      	ldrb	r3, [r3, #0]
    4cfe:	18c3      	adds	r3, r0, r3
    4d00:	3301      	adds	r3, #1
    4d02:	229c      	movs	r2, #156	; 0x9c
    4d04:	18e3      	adds	r3, r4, r3
    4d06:	189b      	adds	r3, r3, r2
    4d08:	781b      	ldrb	r3, [r3, #0]
}
    4d0a:	0018      	movs	r0, r3
    4d0c:	46bd      	mov	sp, r7
    4d0e:	b003      	add	sp, #12
    4d10:	bd90      	pop	{r4, r7, pc}
    4d12:	46c0      	nop			; (mov r8, r8)
    4d14:	00022f00 	.word	0x00022f00
    4d18:	00005571 	.word	0x00005571
    4d1c:	20000c44 	.word	0x20000c44
    4d20:	00022f4c 	.word	0x00022f4c
    4d24:	0000517d 	.word	0x0000517d

00004d28 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
    4d28:	b590      	push	{r4, r7, lr}
    4d2a:	b083      	sub	sp, #12
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	0004      	movs	r4, r0
    4d30:	0008      	movs	r0, r1
    4d32:	0011      	movs	r1, r2
    4d34:	1dfb      	adds	r3, r7, #7
    4d36:	1c22      	adds	r2, r4, #0
    4d38:	701a      	strb	r2, [r3, #0]
    4d3a:	1dbb      	adds	r3, r7, #6
    4d3c:	1c02      	adds	r2, r0, #0
    4d3e:	701a      	strb	r2, [r3, #0]
    4d40:	1d7b      	adds	r3, r7, #5
    4d42:	1c0a      	adds	r2, r1, #0
    4d44:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    4d46:	1dfb      	adds	r3, r7, #7
    4d48:	781b      	ldrb	r3, [r3, #0]
    4d4a:	2b08      	cmp	r3, #8
    4d4c:	d904      	bls.n	4d58 <prvTraceSetObjectState+0x30>
    4d4e:	4b1a      	ldr	r3, [pc, #104]	; (4db8 <prvTraceSetObjectState+0x90>)
    4d50:	0018      	movs	r0, r3
    4d52:	4b1a      	ldr	r3, [pc, #104]	; (4dbc <prvTraceSetObjectState+0x94>)
    4d54:	4798      	blx	r3
    4d56:	e02b      	b.n	4db0 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    4d58:	4b19      	ldr	r3, [pc, #100]	; (4dc0 <prvTraceSetObjectState+0x98>)
    4d5a:	681a      	ldr	r2, [r3, #0]
    4d5c:	1dfb      	adds	r3, r7, #7
    4d5e:	781b      	ldrb	r3, [r3, #0]
    4d60:	2164      	movs	r1, #100	; 0x64
    4d62:	18d3      	adds	r3, r2, r3
    4d64:	185b      	adds	r3, r3, r1
    4d66:	781b      	ldrb	r3, [r3, #0]
    4d68:	1dba      	adds	r2, r7, #6
    4d6a:	7812      	ldrb	r2, [r2, #0]
    4d6c:	429a      	cmp	r2, r3
    4d6e:	d904      	bls.n	4d7a <prvTraceSetObjectState+0x52>
    4d70:	4b14      	ldr	r3, [pc, #80]	; (4dc4 <prvTraceSetObjectState+0x9c>)
    4d72:	0018      	movs	r0, r3
    4d74:	4b11      	ldr	r3, [pc, #68]	; (4dbc <prvTraceSetObjectState+0x94>)
    4d76:	4798      	blx	r3
    4d78:	e01a      	b.n	4db0 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    4d7a:	4b11      	ldr	r3, [pc, #68]	; (4dc0 <prvTraceSetObjectState+0x98>)
    4d7c:	681c      	ldr	r4, [r3, #0]
    4d7e:	1dfb      	adds	r3, r7, #7
    4d80:	781a      	ldrb	r2, [r3, #0]
    4d82:	1dbb      	adds	r3, r7, #6
    4d84:	781b      	ldrb	r3, [r3, #0]
    4d86:	0011      	movs	r1, r2
    4d88:	0018      	movs	r0, r3
    4d8a:	4b0f      	ldr	r3, [pc, #60]	; (4dc8 <prvTraceSetObjectState+0xa0>)
    4d8c:	4798      	blx	r3
    4d8e:	0003      	movs	r3, r0
    4d90:	0018      	movs	r0, r3
    4d92:	4b0b      	ldr	r3, [pc, #44]	; (4dc0 <prvTraceSetObjectState+0x98>)
    4d94:	681a      	ldr	r2, [r3, #0]
    4d96:	1dfb      	adds	r3, r7, #7
    4d98:	781b      	ldrb	r3, [r3, #0]
    4d9a:	2170      	movs	r1, #112	; 0x70
    4d9c:	18d3      	adds	r3, r2, r3
    4d9e:	185b      	adds	r3, r3, r1
    4da0:	781b      	ldrb	r3, [r3, #0]
    4da2:	18c3      	adds	r3, r0, r3
    4da4:	229c      	movs	r2, #156	; 0x9c
    4da6:	18e3      	adds	r3, r4, r3
    4da8:	189b      	adds	r3, r3, r2
    4daa:	1d7a      	adds	r2, r7, #5
    4dac:	7812      	ldrb	r2, [r2, #0]
    4dae:	701a      	strb	r2, [r3, #0]
}
    4db0:	46bd      	mov	sp, r7
    4db2:	b003      	add	sp, #12
    4db4:	bd90      	pop	{r4, r7, pc}
    4db6:	46c0      	nop			; (mov r8, r8)
    4db8:	00022f8c 	.word	0x00022f8c
    4dbc:	00005571 	.word	0x00005571
    4dc0:	20000c44 	.word	0x20000c44
    4dc4:	00022fd0 	.word	0x00022fd0
    4dc8:	0000517d 	.word	0x0000517d

00004dcc <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
    4dcc:	b590      	push	{r4, r7, lr}
    4dce:	b083      	sub	sp, #12
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	0002      	movs	r2, r0
    4dd4:	1dfb      	adds	r3, r7, #7
    4dd6:	701a      	strb	r2, [r3, #0]
    4dd8:	1dbb      	adds	r3, r7, #6
    4dda:	1c0a      	adds	r2, r1, #0
    4ddc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    4dde:	1dfb      	adds	r3, r7, #7
    4de0:	781b      	ldrb	r3, [r3, #0]
    4de2:	2b08      	cmp	r3, #8
    4de4:	d905      	bls.n	4df2 <prvTraceGetObjectState+0x26>
    4de6:	4b1a      	ldr	r3, [pc, #104]	; (4e50 <prvTraceGetObjectState+0x84>)
    4de8:	0018      	movs	r0, r3
    4dea:	4b1a      	ldr	r3, [pc, #104]	; (4e54 <prvTraceGetObjectState+0x88>)
    4dec:	4798      	blx	r3
    4dee:	2300      	movs	r3, #0
    4df0:	e02a      	b.n	4e48 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    4df2:	4b19      	ldr	r3, [pc, #100]	; (4e58 <prvTraceGetObjectState+0x8c>)
    4df4:	681a      	ldr	r2, [r3, #0]
    4df6:	1dfb      	adds	r3, r7, #7
    4df8:	781b      	ldrb	r3, [r3, #0]
    4dfa:	2164      	movs	r1, #100	; 0x64
    4dfc:	18d3      	adds	r3, r2, r3
    4dfe:	185b      	adds	r3, r3, r1
    4e00:	781b      	ldrb	r3, [r3, #0]
    4e02:	1dba      	adds	r2, r7, #6
    4e04:	7812      	ldrb	r2, [r2, #0]
    4e06:	429a      	cmp	r2, r3
    4e08:	d905      	bls.n	4e16 <prvTraceGetObjectState+0x4a>
    4e0a:	4b14      	ldr	r3, [pc, #80]	; (4e5c <prvTraceGetObjectState+0x90>)
    4e0c:	0018      	movs	r0, r3
    4e0e:	4b11      	ldr	r3, [pc, #68]	; (4e54 <prvTraceGetObjectState+0x88>)
    4e10:	4798      	blx	r3
    4e12:	2300      	movs	r3, #0
    4e14:	e018      	b.n	4e48 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    4e16:	4b10      	ldr	r3, [pc, #64]	; (4e58 <prvTraceGetObjectState+0x8c>)
    4e18:	681c      	ldr	r4, [r3, #0]
    4e1a:	1dfb      	adds	r3, r7, #7
    4e1c:	781a      	ldrb	r2, [r3, #0]
    4e1e:	1dbb      	adds	r3, r7, #6
    4e20:	781b      	ldrb	r3, [r3, #0]
    4e22:	0011      	movs	r1, r2
    4e24:	0018      	movs	r0, r3
    4e26:	4b0e      	ldr	r3, [pc, #56]	; (4e60 <prvTraceGetObjectState+0x94>)
    4e28:	4798      	blx	r3
    4e2a:	0003      	movs	r3, r0
    4e2c:	0018      	movs	r0, r3
    4e2e:	4b0a      	ldr	r3, [pc, #40]	; (4e58 <prvTraceGetObjectState+0x8c>)
    4e30:	681a      	ldr	r2, [r3, #0]
    4e32:	1dfb      	adds	r3, r7, #7
    4e34:	781b      	ldrb	r3, [r3, #0]
    4e36:	2170      	movs	r1, #112	; 0x70
    4e38:	18d3      	adds	r3, r2, r3
    4e3a:	185b      	adds	r3, r3, r1
    4e3c:	781b      	ldrb	r3, [r3, #0]
    4e3e:	18c3      	adds	r3, r0, r3
    4e40:	229c      	movs	r2, #156	; 0x9c
    4e42:	18e3      	adds	r3, r4, r3
    4e44:	189b      	adds	r3, r3, r2
    4e46:	781b      	ldrb	r3, [r3, #0]
}
    4e48:	0018      	movs	r0, r3
    4e4a:	46bd      	mov	sp, r7
    4e4c:	b003      	add	sp, #12
    4e4e:	bd90      	pop	{r4, r7, pc}
    4e50:	0002300c 	.word	0x0002300c
    4e54:	00005571 	.word	0x00005571
    4e58:	20000c44 	.word	0x20000c44
    4e5c:	00023050 	.word	0x00023050
    4e60:	0000517d 	.word	0x0000517d

00004e64 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
    4e64:	b590      	push	{r4, r7, lr}
    4e66:	b083      	sub	sp, #12
    4e68:	af00      	add	r7, sp, #0
    4e6a:	0002      	movs	r2, r0
    4e6c:	1dfb      	adds	r3, r7, #7
    4e6e:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    4e70:	4b11      	ldr	r3, [pc, #68]	; (4eb8 <prvTraceSetTaskInstanceFinished+0x54>)
    4e72:	681b      	ldr	r3, [r3, #0]
    4e74:	2267      	movs	r2, #103	; 0x67
    4e76:	5c9b      	ldrb	r3, [r3, r2]
    4e78:	1dfa      	adds	r2, r7, #7
    4e7a:	7812      	ldrb	r2, [r2, #0]
    4e7c:	429a      	cmp	r2, r3
    4e7e:	d904      	bls.n	4e8a <prvTraceSetTaskInstanceFinished+0x26>
    4e80:	4b0e      	ldr	r3, [pc, #56]	; (4ebc <prvTraceSetTaskInstanceFinished+0x58>)
    4e82:	0018      	movs	r0, r3
    4e84:	4b0e      	ldr	r3, [pc, #56]	; (4ec0 <prvTraceSetTaskInstanceFinished+0x5c>)
    4e86:	4798      	blx	r3
    4e88:	e013      	b.n	4eb2 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    4e8a:	4b0b      	ldr	r3, [pc, #44]	; (4eb8 <prvTraceSetTaskInstanceFinished+0x54>)
    4e8c:	681c      	ldr	r4, [r3, #0]
    4e8e:	1dfb      	adds	r3, r7, #7
    4e90:	781b      	ldrb	r3, [r3, #0]
    4e92:	2103      	movs	r1, #3
    4e94:	0018      	movs	r0, r3
    4e96:	4b0b      	ldr	r3, [pc, #44]	; (4ec4 <prvTraceSetTaskInstanceFinished+0x60>)
    4e98:	4798      	blx	r3
    4e9a:	0003      	movs	r3, r0
    4e9c:	0019      	movs	r1, r3
    4e9e:	4b06      	ldr	r3, [pc, #24]	; (4eb8 <prvTraceSetTaskInstanceFinished+0x54>)
    4ea0:	681b      	ldr	r3, [r3, #0]
    4ea2:	2273      	movs	r2, #115	; 0x73
    4ea4:	5c9b      	ldrb	r3, [r3, r2]
    4ea6:	18cb      	adds	r3, r1, r3
    4ea8:	229c      	movs	r2, #156	; 0x9c
    4eaa:	18e3      	adds	r3, r4, r3
    4eac:	189b      	adds	r3, r3, r2
    4eae:	2200      	movs	r2, #0
    4eb0:	701a      	strb	r2, [r3, #0]
#endif
}
    4eb2:	46bd      	mov	sp, r7
    4eb4:	b003      	add	sp, #12
    4eb6:	bd90      	pop	{r4, r7, pc}
    4eb8:	20000c44 	.word	0x20000c44
    4ebc:	0002308c 	.word	0x0002308c
    4ec0:	00005571 	.word	0x00005571
    4ec4:	0000517d 	.word	0x0000517d

00004ec8 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
    4ec8:	b580      	push	{r7, lr}
    4eca:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
    4ecc:	4b75      	ldr	r3, [pc, #468]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4ece:	681b      	ldr	r3, [r3, #0]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d103      	bne.n	4edc <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
    4ed4:	4b73      	ldr	r3, [pc, #460]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4ed6:	4a74      	ldr	r2, [pc, #464]	; (50a8 <prvTraceInitTraceData+0x1e0>)
    4ed8:	601a      	str	r2, [r3, #0]
    4eda:	e006      	b.n	4eea <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
    4edc:	4b71      	ldr	r3, [pc, #452]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4ede:	681b      	ldr	r3, [r3, #0]
    4ee0:	781b      	ldrb	r3, [r3, #0]
    4ee2:	b2db      	uxtb	r3, r3
    4ee4:	2b01      	cmp	r3, #1
    4ee6:	d100      	bne.n	4eea <prvTraceInitTraceData+0x22>
    4ee8:	e0d8      	b.n	509c <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
    4eea:	4b70      	ldr	r3, [pc, #448]	; (50ac <prvTraceInitTraceData+0x1e4>)
    4eec:	681a      	ldr	r2, [r3, #0]
    4eee:	4b70      	ldr	r3, [pc, #448]	; (50b0 <prvTraceInitTraceData+0x1e8>)
    4ef0:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    4ef2:	4b6c      	ldr	r3, [pc, #432]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4ef4:	6818      	ldr	r0, [r3, #0]
    4ef6:	23bd      	movs	r3, #189	; 0xbd
    4ef8:	011b      	lsls	r3, r3, #4
    4efa:	001a      	movs	r2, r3
    4efc:	2100      	movs	r1, #0
    4efe:	4b6d      	ldr	r3, [pc, #436]	; (50b4 <prvTraceInitTraceData+0x1ec>)
    4f00:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    4f02:	4b68      	ldr	r3, [pc, #416]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f04:	681b      	ldr	r3, [r3, #0]
    4f06:	4a6c      	ldr	r2, [pc, #432]	; (50b8 <prvTraceInitTraceData+0x1f0>)
    4f08:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    4f0a:	4b66      	ldr	r3, [pc, #408]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f0c:	681b      	ldr	r3, [r3, #0]
    4f0e:	2205      	movs	r2, #5
    4f10:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    4f12:	4b64      	ldr	r3, [pc, #400]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f14:	681b      	ldr	r3, [r3, #0]
    4f16:	2200      	movs	r2, #0
    4f18:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    4f1a:	4b62      	ldr	r3, [pc, #392]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f1c:	681b      	ldr	r3, [r3, #0]
    4f1e:	22bd      	movs	r2, #189	; 0xbd
    4f20:	0112      	lsls	r2, r2, #4
    4f22:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    4f24:	4b5f      	ldr	r3, [pc, #380]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f26:	681b      	ldr	r3, [r3, #0]
    4f28:	2296      	movs	r2, #150	; 0x96
    4f2a:	0052      	lsls	r2, r2, #1
    4f2c:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    4f2e:	4b5d      	ldr	r3, [pc, #372]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f30:	681b      	ldr	r3, [r3, #0]
    4f32:	4a62      	ldr	r2, [pc, #392]	; (50bc <prvTraceInitTraceData+0x1f4>)
    4f34:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    4f36:	4b5b      	ldr	r3, [pc, #364]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f38:	681b      	ldr	r3, [r3, #0]
    4f3a:	2200      	movs	r2, #0
    4f3c:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    4f3e:	4b59      	ldr	r3, [pc, #356]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f40:	681b      	ldr	r3, [r3, #0]
    4f42:	2200      	movs	r2, #0
    4f44:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    4f46:	4b5e      	ldr	r3, [pc, #376]	; (50c0 <prvTraceInitTraceData+0x1f8>)
    4f48:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    4f4a:	4b56      	ldr	r3, [pc, #344]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f4c:	681b      	ldr	r3, [r3, #0]
    4f4e:	4a5d      	ldr	r2, [pc, #372]	; (50c4 <prvTraceInitTraceData+0x1fc>)
    4f50:	495d      	ldr	r1, [pc, #372]	; (50c8 <prvTraceInitTraceData+0x200>)
    4f52:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    4f54:	4b53      	ldr	r3, [pc, #332]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f56:	681a      	ldr	r2, [r3, #0]
    4f58:	23ac      	movs	r3, #172	; 0xac
    4f5a:	00db      	lsls	r3, r3, #3
    4f5c:	21c8      	movs	r1, #200	; 0xc8
    4f5e:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    4f60:	4b50      	ldr	r3, [pc, #320]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f62:	681b      	ldr	r3, [r3, #0]
    4f64:	4a59      	ldr	r2, [pc, #356]	; (50cc <prvTraceInitTraceData+0x204>)
    4f66:	2101      	movs	r1, #1
    4f68:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    4f6a:	4b4e      	ldr	r3, [pc, #312]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f6c:	681a      	ldr	r2, [r3, #0]
    4f6e:	23d7      	movs	r3, #215	; 0xd7
    4f70:	00db      	lsls	r3, r3, #3
    4f72:	4957      	ldr	r1, [pc, #348]	; (50d0 <prvTraceInitTraceData+0x208>)
    4f74:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    4f76:	4b4b      	ldr	r3, [pc, #300]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f78:	681b      	ldr	r3, [r3, #0]
    4f7a:	4a56      	ldr	r2, [pc, #344]	; (50d4 <prvTraceInitTraceData+0x20c>)
    4f7c:	4694      	mov	ip, r2
    4f7e:	4463      	add	r3, ip
    4f80:	4955      	ldr	r1, [pc, #340]	; (50d8 <prvTraceInitTraceData+0x210>)
    4f82:	2250      	movs	r2, #80	; 0x50
    4f84:	0018      	movs	r0, r3
    4f86:	4b55      	ldr	r3, [pc, #340]	; (50dc <prvTraceInitTraceData+0x214>)
    4f88:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    4f8a:	4b46      	ldr	r3, [pc, #280]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f8c:	681b      	ldr	r3, [r3, #0]
    4f8e:	4a54      	ldr	r2, [pc, #336]	; (50e0 <prvTraceInitTraceData+0x218>)
    4f90:	4954      	ldr	r1, [pc, #336]	; (50e4 <prvTraceInitTraceData+0x21c>)
    4f92:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    4f94:	4b43      	ldr	r3, [pc, #268]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4f96:	681b      	ldr	r3, [r3, #0]
    4f98:	4a53      	ldr	r2, [pc, #332]	; (50e8 <prvTraceInitTraceData+0x220>)
    4f9a:	210a      	movs	r1, #10
    4f9c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    4f9e:	4b41      	ldr	r3, [pc, #260]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4fa0:	681b      	ldr	r3, [r3, #0]
    4fa2:	4a52      	ldr	r2, [pc, #328]	; (50ec <prvTraceInitTraceData+0x224>)
    4fa4:	210b      	movs	r1, #11
    4fa6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    4fa8:	4b3e      	ldr	r3, [pc, #248]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4faa:	681b      	ldr	r3, [r3, #0]
    4fac:	4a50      	ldr	r2, [pc, #320]	; (50f0 <prvTraceInitTraceData+0x228>)
    4fae:	210c      	movs	r1, #12
    4fb0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    4fb2:	4b3c      	ldr	r3, [pc, #240]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	4a4f      	ldr	r2, [pc, #316]	; (50f4 <prvTraceInitTraceData+0x22c>)
    4fb8:	210d      	movs	r1, #13
    4fba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    4fbc:	4b39      	ldr	r3, [pc, #228]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4fbe:	681b      	ldr	r3, [r3, #0]
    4fc0:	4a4d      	ldr	r2, [pc, #308]	; (50f8 <prvTraceInitTraceData+0x230>)
    4fc2:	2171      	movs	r1, #113	; 0x71
    4fc4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    4fc6:	4b37      	ldr	r3, [pc, #220]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4fc8:	681b      	ldr	r3, [r3, #0]
    4fca:	4a4c      	ldr	r2, [pc, #304]	; (50fc <prvTraceInitTraceData+0x234>)
    4fcc:	2172      	movs	r1, #114	; 0x72
    4fce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    4fd0:	4b34      	ldr	r3, [pc, #208]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4fd2:	681b      	ldr	r3, [r3, #0]
    4fd4:	4a4a      	ldr	r2, [pc, #296]	; (5100 <prvTraceInitTraceData+0x238>)
    4fd6:	2173      	movs	r1, #115	; 0x73
    4fd8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    4fda:	4b32      	ldr	r3, [pc, #200]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4fdc:	681b      	ldr	r3, [r3, #0]
    4fde:	4a49      	ldr	r2, [pc, #292]	; (5104 <prvTraceInitTraceData+0x23c>)
    4fe0:	2174      	movs	r1, #116	; 0x74
    4fe2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    4fe4:	4b2f      	ldr	r3, [pc, #188]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4fe6:	681b      	ldr	r3, [r3, #0]
    4fe8:	4a47      	ldr	r2, [pc, #284]	; (5108 <prvTraceInitTraceData+0x240>)
    4fea:	21f1      	movs	r1, #241	; 0xf1
    4fec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    4fee:	4b2d      	ldr	r3, [pc, #180]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4ff0:	681b      	ldr	r3, [r3, #0]
    4ff2:	4a46      	ldr	r2, [pc, #280]	; (510c <prvTraceInitTraceData+0x244>)
    4ff4:	21f2      	movs	r1, #242	; 0xf2
    4ff6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    4ff8:	4b2a      	ldr	r3, [pc, #168]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    4ffa:	681b      	ldr	r3, [r3, #0]
    4ffc:	4a44      	ldr	r2, [pc, #272]	; (5110 <prvTraceInitTraceData+0x248>)
    4ffe:	21f3      	movs	r1, #243	; 0xf3
    5000:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    5002:	4b28      	ldr	r3, [pc, #160]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    5004:	681b      	ldr	r3, [r3, #0]
    5006:	4a43      	ldr	r2, [pc, #268]	; (5114 <prvTraceInitTraceData+0x24c>)
    5008:	21f4      	movs	r1, #244	; 0xf4
    500a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    500c:	4b42      	ldr	r3, [pc, #264]	; (5118 <prvTraceInitTraceData+0x250>)
    500e:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
    5010:	4b24      	ldr	r3, [pc, #144]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    5012:	681b      	ldr	r3, [r3, #0]
    5014:	22f4      	movs	r2, #244	; 0xf4
    5016:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    5018:	4b22      	ldr	r3, [pc, #136]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    501a:	681b      	ldr	r3, [r3, #0]
    501c:	22f3      	movs	r2, #243	; 0xf3
    501e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    5020:	4b20      	ldr	r3, [pc, #128]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    5022:	681b      	ldr	r3, [r3, #0]
    5024:	22f2      	movs	r2, #242	; 0xf2
    5026:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    5028:	4b1e      	ldr	r3, [pc, #120]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    502a:	681b      	ldr	r3, [r3, #0]
    502c:	22f1      	movs	r2, #241	; 0xf1
    502e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    5030:	4b1c      	ldr	r3, [pc, #112]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    5032:	681b      	ldr	r3, [r3, #0]
    5034:	2274      	movs	r2, #116	; 0x74
    5036:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    5038:	4b1a      	ldr	r3, [pc, #104]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    503a:	681b      	ldr	r3, [r3, #0]
    503c:	2273      	movs	r2, #115	; 0x73
    503e:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    5040:	4b18      	ldr	r3, [pc, #96]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    5042:	681b      	ldr	r3, [r3, #0]
    5044:	2272      	movs	r2, #114	; 0x72
    5046:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    5048:	4b16      	ldr	r3, [pc, #88]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    504a:	681b      	ldr	r3, [r3, #0]
    504c:	2271      	movs	r2, #113	; 0x71
    504e:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    5050:	4b14      	ldr	r3, [pc, #80]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    5052:	681b      	ldr	r3, [r3, #0]
    5054:	2204      	movs	r2, #4
    5056:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    5058:	4b12      	ldr	r3, [pc, #72]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    505a:	681b      	ldr	r3, [r3, #0]
    505c:	2203      	movs	r2, #3
    505e:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    5060:	4b10      	ldr	r3, [pc, #64]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    5062:	681b      	ldr	r3, [r3, #0]
    5064:	2202      	movs	r2, #2
    5066:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    5068:	4b0e      	ldr	r3, [pc, #56]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    506a:	681b      	ldr	r3, [r3, #0]
    506c:	2201      	movs	r2, #1
    506e:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
    5070:	4b2a      	ldr	r3, [pc, #168]	; (511c <prvTraceInitTraceData+0x254>)
    5072:	681b      	ldr	r3, [r3, #0]
    5074:	2b00      	cmp	r3, #0
    5076:	d012      	beq.n	509e <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    5078:	4b0a      	ldr	r3, [pc, #40]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    507a:	681b      	ldr	r3, [r3, #0]
    507c:	4a15      	ldr	r2, [pc, #84]	; (50d4 <prvTraceInitTraceData+0x20c>)
    507e:	1898      	adds	r0, r3, r2
    5080:	4b26      	ldr	r3, [pc, #152]	; (511c <prvTraceInitTraceData+0x254>)
    5082:	681b      	ldr	r3, [r3, #0]
    5084:	2250      	movs	r2, #80	; 0x50
    5086:	0019      	movs	r1, r3
    5088:	4b14      	ldr	r3, [pc, #80]	; (50dc <prvTraceInitTraceData+0x214>)
    508a:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    508c:	4b05      	ldr	r3, [pc, #20]	; (50a4 <prvTraceInitTraceData+0x1dc>)
    508e:	681b      	ldr	r3, [r3, #0]
    5090:	4a23      	ldr	r2, [pc, #140]	; (5120 <prvTraceInitTraceData+0x258>)
    5092:	2101      	movs	r1, #1
    5094:	5099      	str	r1, [r3, r2]
		vTraceStop();
    5096:	4b23      	ldr	r3, [pc, #140]	; (5124 <prvTraceInitTraceData+0x25c>)
    5098:	4798      	blx	r3
    509a:	e000      	b.n	509e <prvTraceInitTraceData+0x1d6>
			return;
    509c:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
    509e:	46bd      	mov	sp, r7
    50a0:	bd80      	pop	{r7, pc}
    50a2:	46c0      	nop			; (mov r8, r8)
    50a4:	20000c44 	.word	0x20000c44
    50a8:	2000437c 	.word	0x2000437c
    50ac:	e000e018 	.word	0xe000e018
    50b0:	20004f4c 	.word	0x20004f4c
    50b4:	00020123 	.word	0x00020123
    50b8:	00001aa1 	.word	0x00001aa1
    50bc:	f0f0f0f0 	.word	0xf0f0f0f0
    50c0:	0000402d 	.word	0x0000402d
    50c4:	0000055c 	.word	0x0000055c
    50c8:	f1f1f1f1 	.word	0xf1f1f1f1
    50cc:	00000564 	.word	0x00000564
    50d0:	f2f2f2f2 	.word	0xf2f2f2f2
    50d4:	000006bc 	.word	0x000006bc
    50d8:	000230d4 	.word	0x000230d4
    50dc:	0000543d 	.word	0x0000543d
    50e0:	0000070c 	.word	0x0000070c
    50e4:	f3f3f3f3 	.word	0xf3f3f3f3
    50e8:	00000bc4 	.word	0x00000bc4
    50ec:	00000bc5 	.word	0x00000bc5
    50f0:	00000bc6 	.word	0x00000bc6
    50f4:	00000bc7 	.word	0x00000bc7
    50f8:	00000bc8 	.word	0x00000bc8
    50fc:	00000bc9 	.word	0x00000bc9
    5100:	00000bca 	.word	0x00000bca
    5104:	00000bcb 	.word	0x00000bcb
    5108:	00000bcc 	.word	0x00000bcc
    510c:	00000bcd 	.word	0x00000bcd
    5110:	00000bce 	.word	0x00000bce
    5114:	00000bcf 	.word	0x00000bcf
    5118:	000041cd 	.word	0x000041cd
    511c:	20000ba4 	.word	0x20000ba4
    5120:	000006b4 	.word	0x000006b4
    5124:	00004435 	.word	0x00004435

00005128 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
    5128:	b580      	push	{r7, lr}
    512a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
    512c:	4b10      	ldr	r3, [pc, #64]	; (5170 <prvTraceNextFreeEventBufferSlot+0x48>)
    512e:	681b      	ldr	r3, [r3, #0]
    5130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5132:	2b00      	cmp	r3, #0
    5134:	d101      	bne.n	513a <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
    5136:	2300      	movs	r3, #0
    5138:	e017      	b.n	516a <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    513a:	4b0d      	ldr	r3, [pc, #52]	; (5170 <prvTraceNextFreeEventBufferSlot+0x48>)
    513c:	681b      	ldr	r3, [r3, #0]
    513e:	69da      	ldr	r2, [r3, #28]
    5140:	232c      	movs	r3, #44	; 0x2c
    5142:	33ff      	adds	r3, #255	; 0xff
    5144:	429a      	cmp	r2, r3
    5146:	d905      	bls.n	5154 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
    5148:	4b0a      	ldr	r3, [pc, #40]	; (5174 <prvTraceNextFreeEventBufferSlot+0x4c>)
    514a:	0018      	movs	r0, r3
    514c:	4b0a      	ldr	r3, [pc, #40]	; (5178 <prvTraceNextFreeEventBufferSlot+0x50>)
    514e:	4798      	blx	r3
		return NULL;
    5150:	2300      	movs	r3, #0
    5152:	e00a      	b.n	516a <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    5154:	4b06      	ldr	r3, [pc, #24]	; (5170 <prvTraceNextFreeEventBufferSlot+0x48>)
    5156:	681a      	ldr	r2, [r3, #0]
    5158:	4b05      	ldr	r3, [pc, #20]	; (5170 <prvTraceNextFreeEventBufferSlot+0x48>)
    515a:	681b      	ldr	r3, [r3, #0]
    515c:	69db      	ldr	r3, [r3, #28]
    515e:	009b      	lsls	r3, r3, #2
    5160:	21e2      	movs	r1, #226	; 0xe2
    5162:	00c9      	lsls	r1, r1, #3
    5164:	468c      	mov	ip, r1
    5166:	4463      	add	r3, ip
    5168:	18d3      	adds	r3, r2, r3
}
    516a:	0018      	movs	r0, r3
    516c:	46bd      	mov	sp, r7
    516e:	bd80      	pop	{r7, pc}
    5170:	20000c44 	.word	0x20000c44
    5174:	000230e8 	.word	0x000230e8
    5178:	00005571 	.word	0x00005571

0000517c <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
    517c:	b580      	push	{r7, lr}
    517e:	b082      	sub	sp, #8
    5180:	af00      	add	r7, sp, #0
    5182:	0002      	movs	r2, r0
    5184:	1dfb      	adds	r3, r7, #7
    5186:	701a      	strb	r2, [r3, #0]
    5188:	1dbb      	adds	r3, r7, #6
    518a:	1c0a      	adds	r2, r1, #0
    518c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    518e:	1dbb      	adds	r3, r7, #6
    5190:	781b      	ldrb	r3, [r3, #0]
    5192:	2b08      	cmp	r3, #8
    5194:	d905      	bls.n	51a2 <uiIndexOfObject+0x26>
    5196:	4b2a      	ldr	r3, [pc, #168]	; (5240 <uiIndexOfObject+0xc4>)
    5198:	0018      	movs	r0, r3
    519a:	4b2a      	ldr	r3, [pc, #168]	; (5244 <uiIndexOfObject+0xc8>)
    519c:	4798      	blx	r3
    519e:	2300      	movs	r3, #0
    51a0:	e049      	b.n	5236 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    51a2:	1dfb      	adds	r3, r7, #7
    51a4:	781b      	ldrb	r3, [r3, #0]
    51a6:	2b00      	cmp	r3, #0
    51a8:	d00b      	beq.n	51c2 <uiIndexOfObject+0x46>
    51aa:	4b27      	ldr	r3, [pc, #156]	; (5248 <uiIndexOfObject+0xcc>)
    51ac:	681a      	ldr	r2, [r3, #0]
    51ae:	1dbb      	adds	r3, r7, #6
    51b0:	781b      	ldrb	r3, [r3, #0]
    51b2:	2164      	movs	r1, #100	; 0x64
    51b4:	18d3      	adds	r3, r2, r3
    51b6:	185b      	adds	r3, r3, r1
    51b8:	781b      	ldrb	r3, [r3, #0]
    51ba:	1dfa      	adds	r2, r7, #7
    51bc:	7812      	ldrb	r2, [r2, #0]
    51be:	429a      	cmp	r2, r3
    51c0:	d905      	bls.n	51ce <uiIndexOfObject+0x52>
    51c2:	4b22      	ldr	r3, [pc, #136]	; (524c <uiIndexOfObject+0xd0>)
    51c4:	0018      	movs	r0, r3
    51c6:	4b1f      	ldr	r3, [pc, #124]	; (5244 <uiIndexOfObject+0xc8>)
    51c8:	4798      	blx	r3
    51ca:	2300      	movs	r3, #0
    51cc:	e033      	b.n	5236 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    51ce:	1dbb      	adds	r3, r7, #6
    51d0:	781b      	ldrb	r3, [r3, #0]
    51d2:	2b08      	cmp	r3, #8
    51d4:	d82a      	bhi.n	522c <uiIndexOfObject+0xb0>
    51d6:	1dfb      	adds	r3, r7, #7
    51d8:	781b      	ldrb	r3, [r3, #0]
    51da:	2b00      	cmp	r3, #0
    51dc:	d026      	beq.n	522c <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
    51de:	4b1a      	ldr	r3, [pc, #104]	; (5248 <uiIndexOfObject+0xcc>)
    51e0:	681a      	ldr	r2, [r3, #0]
    51e2:	1dbb      	adds	r3, r7, #6
    51e4:	781b      	ldrb	r3, [r3, #0]
    51e6:	2164      	movs	r1, #100	; 0x64
    51e8:	18d3      	adds	r3, r2, r3
    51ea:	185b      	adds	r3, r3, r1
    51ec:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    51ee:	1dfa      	adds	r2, r7, #7
    51f0:	7812      	ldrb	r2, [r2, #0]
    51f2:	429a      	cmp	r2, r3
    51f4:	d81a      	bhi.n	522c <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    51f6:	4b14      	ldr	r3, [pc, #80]	; (5248 <uiIndexOfObject+0xcc>)
    51f8:	681a      	ldr	r2, [r3, #0]
    51fa:	1dbb      	adds	r3, r7, #6
    51fc:	781b      	ldrb	r3, [r3, #0]
    51fe:	3340      	adds	r3, #64	; 0x40
    5200:	005b      	lsls	r3, r3, #1
    5202:	18d3      	adds	r3, r2, r3
    5204:	3308      	adds	r3, #8
    5206:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    5208:	4b0f      	ldr	r3, [pc, #60]	; (5248 <uiIndexOfObject+0xcc>)
    520a:	6819      	ldr	r1, [r3, #0]
    520c:	1dbb      	adds	r3, r7, #6
    520e:	781b      	ldrb	r3, [r3, #0]
    5210:	207c      	movs	r0, #124	; 0x7c
    5212:	18cb      	adds	r3, r1, r3
    5214:	181b      	adds	r3, r3, r0
    5216:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    5218:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    521a:	1df9      	adds	r1, r7, #7
    521c:	7809      	ldrb	r1, [r1, #0]
    521e:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    5220:	b289      	uxth	r1, r1
    5222:	434b      	muls	r3, r1
    5224:	b29b      	uxth	r3, r3
    5226:	18d3      	adds	r3, r2, r3
    5228:	b29b      	uxth	r3, r3
    522a:	e004      	b.n	5236 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
    522c:	4b08      	ldr	r3, [pc, #32]	; (5250 <uiIndexOfObject+0xd4>)
    522e:	0018      	movs	r0, r3
    5230:	4b04      	ldr	r3, [pc, #16]	; (5244 <uiIndexOfObject+0xc8>)
    5232:	4798      	blx	r3
	return 0;
    5234:	2300      	movs	r3, #0
}
    5236:	0018      	movs	r0, r3
    5238:	46bd      	mov	sp, r7
    523a:	b002      	add	sp, #8
    523c:	bd80      	pop	{r7, pc}
    523e:	46c0      	nop			; (mov r8, r8)
    5240:	00023110 	.word	0x00023110
    5244:	00005571 	.word	0x00005571
    5248:	20000c44 	.word	0x20000c44
    524c:	00023150 	.word	0x00023150
    5250:	00023190 	.word	0x00023190

00005254 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
    5254:	b580      	push	{r7, lr}
    5256:	b088      	sub	sp, #32
    5258:	af00      	add	r7, sp, #0
    525a:	0002      	movs	r2, r0
    525c:	1dfb      	adds	r3, r7, #7
    525e:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    5260:	4b5a      	ldr	r3, [pc, #360]	; (53cc <prvTraceGetObjectHandle+0x178>)
    5262:	681b      	ldr	r3, [r3, #0]
    5264:	2b00      	cmp	r3, #0
    5266:	d105      	bne.n	5274 <prvTraceGetObjectHandle+0x20>
    5268:	4b59      	ldr	r3, [pc, #356]	; (53d0 <prvTraceGetObjectHandle+0x17c>)
    526a:	0018      	movs	r0, r3
    526c:	4b59      	ldr	r3, [pc, #356]	; (53d4 <prvTraceGetObjectHandle+0x180>)
    526e:	4798      	blx	r3
    5270:	2300      	movs	r3, #0
    5272:	e0a7      	b.n	53c4 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    5274:	1dfb      	adds	r3, r7, #7
    5276:	781b      	ldrb	r3, [r3, #0]
    5278:	2b08      	cmp	r3, #8
    527a:	d905      	bls.n	5288 <prvTraceGetObjectHandle+0x34>
    527c:	4b56      	ldr	r3, [pc, #344]	; (53d8 <prvTraceGetObjectHandle+0x184>)
    527e:	0018      	movs	r0, r3
    5280:	4b54      	ldr	r3, [pc, #336]	; (53d4 <prvTraceGetObjectHandle+0x180>)
    5282:	4798      	blx	r3
    5284:	2300      	movs	r3, #0
    5286:	e09d      	b.n	53c4 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5288:	f3ef 8310 	mrs	r3, PRIMASK
    528c:	60fb      	str	r3, [r7, #12]
  return(result);
    528e:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
    5290:	61bb      	str	r3, [r7, #24]
    5292:	2301      	movs	r3, #1
    5294:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5296:	693b      	ldr	r3, [r7, #16]
    5298:	f383 8810 	msr	PRIMASK, r3
    529c:	4b4f      	ldr	r3, [pc, #316]	; (53dc <prvTraceGetObjectHandle+0x188>)
    529e:	681b      	ldr	r3, [r3, #0]
    52a0:	1c5a      	adds	r2, r3, #1
    52a2:	4b4e      	ldr	r3, [pc, #312]	; (53dc <prvTraceGetObjectHandle+0x188>)
    52a4:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    52a6:	1dfb      	adds	r3, r7, #7
    52a8:	781a      	ldrb	r2, [r3, #0]
    52aa:	4b4d      	ldr	r3, [pc, #308]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    52ac:	0052      	lsls	r2, r2, #1
    52ae:	5ad3      	ldrh	r3, [r2, r3]
    52b0:	001a      	movs	r2, r3
    52b2:	4b4c      	ldr	r3, [pc, #304]	; (53e4 <prvTraceGetObjectHandle+0x190>)
    52b4:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    52b6:	4b4b      	ldr	r3, [pc, #300]	; (53e4 <prvTraceGetObjectHandle+0x190>)
    52b8:	681b      	ldr	r3, [r3, #0]
    52ba:	4a49      	ldr	r2, [pc, #292]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    52bc:	2148      	movs	r1, #72	; 0x48
    52be:	18d3      	adds	r3, r2, r3
    52c0:	185b      	adds	r3, r3, r1
    52c2:	781b      	ldrb	r3, [r3, #0]
    52c4:	2b00      	cmp	r3, #0
    52c6:	d117      	bne.n	52f8 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    52c8:	4b46      	ldr	r3, [pc, #280]	; (53e4 <prvTraceGetObjectHandle+0x190>)
    52ca:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    52cc:	4b45      	ldr	r3, [pc, #276]	; (53e4 <prvTraceGetObjectHandle+0x190>)
    52ce:	681b      	ldr	r3, [r3, #0]
    52d0:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    52d2:	1dfb      	adds	r3, r7, #7
    52d4:	781b      	ldrb	r3, [r3, #0]
    52d6:	4842      	ldr	r0, [pc, #264]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    52d8:	3308      	adds	r3, #8
    52da:	005b      	lsls	r3, r3, #1
    52dc:	18c3      	adds	r3, r0, r3
    52de:	3302      	adds	r3, #2
    52e0:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    52e2:	b2db      	uxtb	r3, r3
    52e4:	1acb      	subs	r3, r1, r3
    52e6:	b2db      	uxtb	r3, r3
    52e8:	3301      	adds	r3, #1
    52ea:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
    52ec:	4b3c      	ldr	r3, [pc, #240]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    52ee:	2148      	movs	r1, #72	; 0x48
    52f0:	189b      	adds	r3, r3, r2
    52f2:	185b      	adds	r3, r3, r1
    52f4:	1c02      	adds	r2, r0, #0
    52f6:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    52f8:	4b3a      	ldr	r3, [pc, #232]	; (53e4 <prvTraceGetObjectHandle+0x190>)
    52fa:	681a      	ldr	r2, [r3, #0]
    52fc:	231f      	movs	r3, #31
    52fe:	18fb      	adds	r3, r7, r3
    5300:	4937      	ldr	r1, [pc, #220]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    5302:	2048      	movs	r0, #72	; 0x48
    5304:	188a      	adds	r2, r1, r2
    5306:	1812      	adds	r2, r2, r0
    5308:	7812      	ldrb	r2, [r2, #0]
    530a:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    530c:	1dfb      	adds	r3, r7, #7
    530e:	781a      	ldrb	r2, [r3, #0]
    5310:	4b33      	ldr	r3, [pc, #204]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    5312:	0052      	lsls	r2, r2, #1
    5314:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    5316:	1dfb      	adds	r3, r7, #7
    5318:	781b      	ldrb	r3, [r3, #0]
    531a:	4931      	ldr	r1, [pc, #196]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    531c:	3310      	adds	r3, #16
    531e:	005b      	lsls	r3, r3, #1
    5320:	18cb      	adds	r3, r1, r3
    5322:	3304      	adds	r3, #4
    5324:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    5326:	429a      	cmp	r2, r3
    5328:	d90d      	bls.n	5346 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    532a:	1dfb      	adds	r3, r7, #7
    532c:	781b      	ldrb	r3, [r3, #0]
    532e:	0018      	movs	r0, r3
    5330:	4b2d      	ldr	r3, [pc, #180]	; (53e8 <prvTraceGetObjectHandle+0x194>)
    5332:	4798      	blx	r3
    5334:	0003      	movs	r3, r0
    5336:	0018      	movs	r0, r3
    5338:	4b26      	ldr	r3, [pc, #152]	; (53d4 <prvTraceGetObjectHandle+0x180>)
    533a:	4798      	blx	r3
		handle = 0;
    533c:	231f      	movs	r3, #31
    533e:	18fb      	adds	r3, r7, r3
    5340:	2200      	movs	r2, #0
    5342:	701a      	strb	r2, [r3, #0]
    5344:	e031      	b.n	53aa <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    5346:	1dfb      	adds	r3, r7, #7
    5348:	781b      	ldrb	r3, [r3, #0]
    534a:	4a25      	ldr	r2, [pc, #148]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    534c:	0059      	lsls	r1, r3, #1
    534e:	5a8a      	ldrh	r2, [r1, r2]
    5350:	3201      	adds	r2, #1
    5352:	b291      	uxth	r1, r2
    5354:	4a22      	ldr	r2, [pc, #136]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    5356:	005b      	lsls	r3, r3, #1
    5358:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    535a:	1dfb      	adds	r3, r7, #7
    535c:	781a      	ldrb	r2, [r3, #0]
    535e:	4b20      	ldr	r3, [pc, #128]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    5360:	0052      	lsls	r2, r2, #1
    5362:	5ad3      	ldrh	r3, [r2, r3]
    5364:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
    5366:	1dfb      	adds	r3, r7, #7
    5368:	781b      	ldrb	r3, [r3, #0]
    536a:	4a1d      	ldr	r2, [pc, #116]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    536c:	3308      	adds	r3, #8
    536e:	005b      	lsls	r3, r3, #1
    5370:	18d3      	adds	r3, r2, r3
    5372:	3302      	adds	r3, #2
    5374:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    5376:	1acb      	subs	r3, r1, r3
    5378:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    537a:	1dfb      	adds	r3, r7, #7
    537c:	781b      	ldrb	r3, [r3, #0]
    537e:	4a18      	ldr	r2, [pc, #96]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    5380:	3318      	adds	r3, #24
    5382:	005b      	lsls	r3, r3, #1
    5384:	18d3      	adds	r3, r2, r3
    5386:	3306      	adds	r3, #6
    5388:	881b      	ldrh	r3, [r3, #0]
    538a:	001a      	movs	r2, r3
		if (hndCount >
    538c:	697b      	ldr	r3, [r7, #20]
    538e:	429a      	cmp	r2, r3
    5390:	da0b      	bge.n	53aa <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    5392:	1dfb      	adds	r3, r7, #7
    5394:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
    5396:	697a      	ldr	r2, [r7, #20]
    5398:	b2d2      	uxtb	r2, r2
    539a:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    539c:	4a10      	ldr	r2, [pc, #64]	; (53e0 <prvTraceGetObjectHandle+0x18c>)
    539e:	3318      	adds	r3, #24
    53a0:	005b      	lsls	r3, r3, #1
    53a2:	18d3      	adds	r3, r2, r3
    53a4:	3306      	adds	r3, #6
    53a6:	1c0a      	adds	r2, r1, #0
    53a8:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
    53aa:	4b0c      	ldr	r3, [pc, #48]	; (53dc <prvTraceGetObjectHandle+0x188>)
    53ac:	681b      	ldr	r3, [r3, #0]
    53ae:	1e5a      	subs	r2, r3, #1
    53b0:	4b0a      	ldr	r3, [pc, #40]	; (53dc <prvTraceGetObjectHandle+0x188>)
    53b2:	601a      	str	r2, [r3, #0]
    53b4:	69bb      	ldr	r3, [r7, #24]
    53b6:	60bb      	str	r3, [r7, #8]
    53b8:	68bb      	ldr	r3, [r7, #8]
    53ba:	f383 8810 	msr	PRIMASK, r3

	return handle;
    53be:	231f      	movs	r3, #31
    53c0:	18fb      	adds	r3, r7, r3
    53c2:	781b      	ldrb	r3, [r3, #0]
}
    53c4:	0018      	movs	r0, r3
    53c6:	46bd      	mov	sp, r7
    53c8:	b008      	add	sp, #32
    53ca:	bd80      	pop	{r7, pc}
    53cc:	20000c44 	.word	0x20000c44
    53d0:	000225f0 	.word	0x000225f0
    53d4:	00005571 	.word	0x00005571
    53d8:	000231d0 	.word	0x000231d0
    53dc:	20000b9c 	.word	0x20000b9c
    53e0:	20000bb4 	.word	0x20000bb4
    53e4:	20000c48 	.word	0x20000c48
    53e8:	00004291 	.word	0x00004291

000053ec <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
    53ec:	b590      	push	{r4, r7, lr}
    53ee:	b085      	sub	sp, #20
    53f0:	af00      	add	r7, sp, #0
    53f2:	0002      	movs	r2, r0
    53f4:	1dfb      	adds	r3, r7, #7
    53f6:	701a      	strb	r2, [r3, #0]
    53f8:	1dbb      	adds	r3, r7, #6
    53fa:	1c0a      	adds	r2, r1, #0
    53fc:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    53fe:	230e      	movs	r3, #14
    5400:	18fc      	adds	r4, r7, r3
    5402:	1dfb      	adds	r3, r7, #7
    5404:	781a      	ldrb	r2, [r3, #0]
    5406:	1dbb      	adds	r3, r7, #6
    5408:	781b      	ldrb	r3, [r3, #0]
    540a:	0011      	movs	r1, r2
    540c:	0018      	movs	r0, r3
    540e:	4b09      	ldr	r3, [pc, #36]	; (5434 <prvMarkObjectAsUsed+0x48>)
    5410:	4798      	blx	r3
    5412:	0003      	movs	r3, r0
    5414:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    5416:	4b08      	ldr	r3, [pc, #32]	; (5438 <prvMarkObjectAsUsed+0x4c>)
    5418:	681a      	ldr	r2, [r3, #0]
    541a:	230e      	movs	r3, #14
    541c:	18fb      	adds	r3, r7, r3
    541e:	881b      	ldrh	r3, [r3, #0]
    5420:	219c      	movs	r1, #156	; 0x9c
    5422:	18d3      	adds	r3, r2, r3
    5424:	185b      	adds	r3, r3, r1
    5426:	2201      	movs	r2, #1
    5428:	701a      	strb	r2, [r3, #0]
}
    542a:	46c0      	nop			; (mov r8, r8)
    542c:	46bd      	mov	sp, r7
    542e:	b005      	add	sp, #20
    5430:	bd90      	pop	{r4, r7, pc}
    5432:	46c0      	nop			; (mov r8, r8)
    5434:	0000517d 	.word	0x0000517d
    5438:	20000c44 	.word	0x20000c44

0000543c <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    543c:	b580      	push	{r7, lr}
    543e:	b086      	sub	sp, #24
    5440:	af00      	add	r7, sp, #0
    5442:	60f8      	str	r0, [r7, #12]
    5444:	60b9      	str	r1, [r7, #8]
    5446:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    5448:	2300      	movs	r3, #0
    544a:	617b      	str	r3, [r7, #20]
    544c:	e010      	b.n	5470 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
    544e:	68fa      	ldr	r2, [r7, #12]
    5450:	697b      	ldr	r3, [r7, #20]
    5452:	18d3      	adds	r3, r2, r3
    5454:	68b9      	ldr	r1, [r7, #8]
    5456:	697a      	ldr	r2, [r7, #20]
    5458:	188a      	adds	r2, r1, r2
    545a:	7812      	ldrb	r2, [r2, #0]
    545c:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
    545e:	68ba      	ldr	r2, [r7, #8]
    5460:	697b      	ldr	r3, [r7, #20]
    5462:	18d3      	adds	r3, r2, r3
    5464:	781b      	ldrb	r3, [r3, #0]
    5466:	2b00      	cmp	r3, #0
    5468:	d007      	beq.n	547a <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
    546a:	697b      	ldr	r3, [r7, #20]
    546c:	3301      	adds	r3, #1
    546e:	617b      	str	r3, [r7, #20]
    5470:	697a      	ldr	r2, [r7, #20]
    5472:	687b      	ldr	r3, [r7, #4]
    5474:	429a      	cmp	r2, r3
    5476:	d3ea      	bcc.n	544e <prvStrncpy+0x12>
			break;
	}
}
    5478:	e000      	b.n	547c <prvStrncpy+0x40>
			break;
    547a:	46c0      	nop			; (mov r8, r8)
}
    547c:	46c0      	nop			; (mov r8, r8)
    547e:	46bd      	mov	sp, r7
    5480:	b006      	add	sp, #24
    5482:	bd80      	pop	{r7, pc}

00005484 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
    5484:	b580      	push	{r7, lr}
    5486:	b082      	sub	sp, #8
    5488:	af00      	add	r7, sp, #0
    548a:	603a      	str	r2, [r7, #0]
    548c:	1dfb      	adds	r3, r7, #7
    548e:	1c02      	adds	r2, r0, #0
    5490:	701a      	strb	r2, [r3, #0]
    5492:	1dbb      	adds	r3, r7, #6
    5494:	1c0a      	adds	r2, r1, #0
    5496:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    5498:	683b      	ldr	r3, [r7, #0]
    549a:	2b00      	cmp	r3, #0
    549c:	d104      	bne.n	54a8 <prvTraceSetObjectName+0x24>
    549e:	4b2a      	ldr	r3, [pc, #168]	; (5548 <prvTraceSetObjectName+0xc4>)
    54a0:	0018      	movs	r0, r3
    54a2:	4b2a      	ldr	r3, [pc, #168]	; (554c <prvTraceSetObjectName+0xc8>)
    54a4:	4798      	blx	r3
    54a6:	e04b      	b.n	5540 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
    54a8:	1dfb      	adds	r3, r7, #7
    54aa:	781b      	ldrb	r3, [r3, #0]
    54ac:	2b08      	cmp	r3, #8
    54ae:	d904      	bls.n	54ba <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    54b0:	4b27      	ldr	r3, [pc, #156]	; (5550 <prvTraceSetObjectName+0xcc>)
    54b2:	0018      	movs	r0, r3
    54b4:	4b25      	ldr	r3, [pc, #148]	; (554c <prvTraceSetObjectName+0xc8>)
    54b6:	4798      	blx	r3
		return;
    54b8:	e042      	b.n	5540 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
    54ba:	1dbb      	adds	r3, r7, #6
    54bc:	781b      	ldrb	r3, [r3, #0]
    54be:	2b00      	cmp	r3, #0
    54c0:	d104      	bne.n	54cc <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    54c2:	4b24      	ldr	r3, [pc, #144]	; (5554 <prvTraceSetObjectName+0xd0>)
    54c4:	0018      	movs	r0, r3
    54c6:	4b21      	ldr	r3, [pc, #132]	; (554c <prvTraceSetObjectName+0xc8>)
    54c8:	4798      	blx	r3
		return;
    54ca:	e039      	b.n	5540 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    54cc:	4b22      	ldr	r3, [pc, #136]	; (5558 <prvTraceSetObjectName+0xd4>)
    54ce:	681a      	ldr	r2, [r3, #0]
    54d0:	1dfb      	adds	r3, r7, #7
    54d2:	781b      	ldrb	r3, [r3, #0]
    54d4:	2164      	movs	r1, #100	; 0x64
    54d6:	18d3      	adds	r3, r2, r3
    54d8:	185b      	adds	r3, r3, r1
    54da:	781b      	ldrb	r3, [r3, #0]
    54dc:	1dba      	adds	r2, r7, #6
    54de:	7812      	ldrb	r2, [r2, #0]
    54e0:	429a      	cmp	r2, r3
    54e2:	d909      	bls.n	54f8 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    54e4:	1dfb      	adds	r3, r7, #7
    54e6:	781b      	ldrb	r3, [r3, #0]
    54e8:	0018      	movs	r0, r3
    54ea:	4b1c      	ldr	r3, [pc, #112]	; (555c <prvTraceSetObjectName+0xd8>)
    54ec:	4798      	blx	r3
    54ee:	0003      	movs	r3, r0
    54f0:	0018      	movs	r0, r3
    54f2:	4b16      	ldr	r3, [pc, #88]	; (554c <prvTraceSetObjectName+0xc8>)
    54f4:	4798      	blx	r3
    54f6:	e023      	b.n	5540 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    54f8:	1dfb      	adds	r3, r7, #7
    54fa:	781a      	ldrb	r2, [r3, #0]
    54fc:	1dbb      	adds	r3, r7, #6
    54fe:	781b      	ldrb	r3, [r3, #0]
    5500:	0011      	movs	r1, r2
    5502:	0018      	movs	r0, r3
    5504:	4b16      	ldr	r3, [pc, #88]	; (5560 <prvTraceSetObjectName+0xdc>)
    5506:	4798      	blx	r3
    5508:	0003      	movs	r3, r0
    550a:	001a      	movs	r2, r3
    550c:	4b15      	ldr	r3, [pc, #84]	; (5564 <prvTraceSetObjectName+0xe0>)
    550e:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
    5510:	4b15      	ldr	r3, [pc, #84]	; (5568 <prvTraceSetObjectName+0xe4>)
    5512:	681b      	ldr	r3, [r3, #0]
    5514:	2b00      	cmp	r3, #0
    5516:	d113      	bne.n	5540 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    5518:	4b0f      	ldr	r3, [pc, #60]	; (5558 <prvTraceSetObjectName+0xd4>)
    551a:	681a      	ldr	r2, [r3, #0]
    551c:	4b11      	ldr	r3, [pc, #68]	; (5564 <prvTraceSetObjectName+0xe0>)
    551e:	881b      	ldrh	r3, [r3, #0]
    5520:	3398      	adds	r3, #152	; 0x98
    5522:	18d3      	adds	r3, r2, r3
    5524:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    5526:	4b0c      	ldr	r3, [pc, #48]	; (5558 <prvTraceSetObjectName+0xd4>)
    5528:	681a      	ldr	r2, [r3, #0]
    552a:	1dfb      	adds	r3, r7, #7
    552c:	781b      	ldrb	r3, [r3, #0]
    552e:	2170      	movs	r1, #112	; 0x70
    5530:	18d3      	adds	r3, r2, r3
    5532:	185b      	adds	r3, r3, r1
    5534:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    5536:	001a      	movs	r2, r3
    5538:	683b      	ldr	r3, [r7, #0]
    553a:	0019      	movs	r1, r3
    553c:	4b0b      	ldr	r3, [pc, #44]	; (556c <prvTraceSetObjectName+0xe8>)
    553e:	4798      	blx	r3
		}
	}
}
    5540:	46bd      	mov	sp, r7
    5542:	b002      	add	sp, #8
    5544:	bd80      	pop	{r7, pc}
    5546:	46c0      	nop			; (mov r8, r8)
    5548:	000232d4 	.word	0x000232d4
    554c:	00005571 	.word	0x00005571
    5550:	00023308 	.word	0x00023308
    5554:	00023338 	.word	0x00023338
    5558:	20000c44 	.word	0x20000c44
    555c:	00004291 	.word	0x00004291
    5560:	0000517d 	.word	0x0000517d
    5564:	20000c4c 	.word	0x20000c4c
    5568:	20000ba4 	.word	0x20000ba4
    556c:	0000543d 	.word	0x0000543d

00005570 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    5570:	b580      	push	{r7, lr}
    5572:	b082      	sub	sp, #8
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    5578:	4b11      	ldr	r3, [pc, #68]	; (55c0 <prvTraceError+0x50>)
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	2b00      	cmp	r3, #0
    557e:	d001      	beq.n	5584 <prvTraceError+0x14>
	{
		vTraceStop();
    5580:	4b10      	ldr	r3, [pc, #64]	; (55c4 <prvTraceError+0x54>)
    5582:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    5584:	4b10      	ldr	r3, [pc, #64]	; (55c8 <prvTraceError+0x58>)
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	2b00      	cmp	r3, #0
    558a:	d115      	bne.n	55b8 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
    558c:	4b0e      	ldr	r3, [pc, #56]	; (55c8 <prvTraceError+0x58>)
    558e:	687a      	ldr	r2, [r7, #4]
    5590:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
    5592:	4b0b      	ldr	r3, [pc, #44]	; (55c0 <prvTraceError+0x50>)
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	2b00      	cmp	r3, #0
    5598:	d00e      	beq.n	55b8 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    559a:	4b09      	ldr	r3, [pc, #36]	; (55c0 <prvTraceError+0x50>)
    559c:	681b      	ldr	r3, [r3, #0]
    559e:	4a0b      	ldr	r2, [pc, #44]	; (55cc <prvTraceError+0x5c>)
    55a0:	1898      	adds	r0, r3, r2
    55a2:	4b09      	ldr	r3, [pc, #36]	; (55c8 <prvTraceError+0x58>)
    55a4:	681b      	ldr	r3, [r3, #0]
    55a6:	2250      	movs	r2, #80	; 0x50
    55a8:	0019      	movs	r1, r3
    55aa:	4b09      	ldr	r3, [pc, #36]	; (55d0 <prvTraceError+0x60>)
    55ac:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    55ae:	4b04      	ldr	r3, [pc, #16]	; (55c0 <prvTraceError+0x50>)
    55b0:	681b      	ldr	r3, [r3, #0]
    55b2:	4a08      	ldr	r2, [pc, #32]	; (55d4 <prvTraceError+0x64>)
    55b4:	2101      	movs	r1, #1
    55b6:	5099      	str	r1, [r3, r2]
		}
	}
}
    55b8:	46c0      	nop			; (mov r8, r8)
    55ba:	46bd      	mov	sp, r7
    55bc:	b002      	add	sp, #8
    55be:	bd80      	pop	{r7, pc}
    55c0:	20000c44 	.word	0x20000c44
    55c4:	00004435 	.word	0x00004435
    55c8:	20000ba4 	.word	0x20000ba4
    55cc:	000006bc 	.word	0x000006bc
    55d0:	0000543d 	.word	0x0000543d
    55d4:	000006b4 	.word	0x000006b4

000055d8 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    55d8:	b580      	push	{r7, lr}
    55da:	b086      	sub	sp, #24
    55dc:	af00      	add	r7, sp, #0
    55de:	0002      	movs	r2, r0
    55e0:	1dfb      	adds	r3, r7, #7
    55e2:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
    55e4:	2300      	movs	r3, #0
    55e6:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
    55e8:	2300      	movs	r3, #0
    55ea:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    55ec:	1dfb      	adds	r3, r7, #7
    55ee:	781b      	ldrb	r3, [r3, #0]
    55f0:	2b00      	cmp	r3, #0
    55f2:	d000      	beq.n	55f6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
    55f4:	e089      	b.n	570a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
    55f6:	4b49      	ldr	r3, [pc, #292]	; (571c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
    55f8:	0018      	movs	r0, r3
    55fa:	4b49      	ldr	r3, [pc, #292]	; (5720 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
    55fc:	4798      	blx	r3
    55fe:	e08a      	b.n	5716 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    5600:	4b48      	ldr	r3, [pc, #288]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    5602:	681b      	ldr	r3, [r3, #0]
    5604:	69da      	ldr	r2, [r3, #28]
    5606:	697b      	ldr	r3, [r7, #20]
    5608:	18d3      	adds	r3, r2, r3
    560a:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    560c:	4b45      	ldr	r3, [pc, #276]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    560e:	6819      	ldr	r1, [r3, #0]
    5610:	693b      	ldr	r3, [r7, #16]
    5612:	009a      	lsls	r2, r3, #2
    5614:	23e2      	movs	r3, #226	; 0xe2
    5616:	00db      	lsls	r3, r3, #3
    5618:	188a      	adds	r2, r1, r2
    561a:	18d3      	adds	r3, r2, r3
    561c:	781b      	ldrb	r3, [r3, #0]
    561e:	2b98      	cmp	r3, #152	; 0x98
    5620:	d934      	bls.n	568c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
    5622:	4b40      	ldr	r3, [pc, #256]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    5624:	6819      	ldr	r1, [r3, #0]
    5626:	693b      	ldr	r3, [r7, #16]
    5628:	009a      	lsls	r2, r3, #2
    562a:	23e2      	movs	r3, #226	; 0xe2
    562c:	00db      	lsls	r3, r3, #3
    562e:	188a      	adds	r2, r1, r2
    5630:	18d3      	adds	r3, r2, r3
    5632:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    5634:	2ba7      	cmp	r3, #167	; 0xa7
    5636:	d829      	bhi.n	568c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    5638:	4b3a      	ldr	r3, [pc, #232]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    563a:	6819      	ldr	r1, [r3, #0]
    563c:	693b      	ldr	r3, [r7, #16]
    563e:	009a      	lsls	r2, r3, #2
    5640:	23e2      	movs	r3, #226	; 0xe2
    5642:	00db      	lsls	r3, r3, #3
    5644:	188a      	adds	r2, r1, r2
    5646:	18d3      	adds	r3, r2, r3
    5648:	781a      	ldrb	r2, [r3, #0]
    564a:	230f      	movs	r3, #15
    564c:	18fb      	adds	r3, r7, r3
    564e:	3268      	adds	r2, #104	; 0x68
    5650:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    5652:	230f      	movs	r3, #15
    5654:	18fb      	adds	r3, r7, r3
    5656:	781a      	ldrb	r2, [r3, #0]
    5658:	693b      	ldr	r3, [r7, #16]
    565a:	18d2      	adds	r2, r2, r3
    565c:	4b31      	ldr	r3, [pc, #196]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    565e:	681b      	ldr	r3, [r3, #0]
    5660:	699b      	ldr	r3, [r3, #24]
    5662:	429a      	cmp	r2, r3
    5664:	d24d      	bcs.n	5702 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    5666:	4b2f      	ldr	r3, [pc, #188]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    5668:	681a      	ldr	r2, [r3, #0]
    566a:	693b      	ldr	r3, [r7, #16]
    566c:	009b      	lsls	r3, r3, #2
    566e:	21e2      	movs	r1, #226	; 0xe2
    5670:	00c9      	lsls	r1, r1, #3
    5672:	468c      	mov	ip, r1
    5674:	4463      	add	r3, ip
    5676:	18d0      	adds	r0, r2, r3
    5678:	230f      	movs	r3, #15
    567a:	18fb      	adds	r3, r7, r3
    567c:	781b      	ldrb	r3, [r3, #0]
    567e:	3301      	adds	r3, #1
    5680:	009b      	lsls	r3, r3, #2
    5682:	001a      	movs	r2, r3
    5684:	2100      	movs	r1, #0
    5686:	4b28      	ldr	r3, [pc, #160]	; (5728 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    5688:	4798      	blx	r3
		{
    568a:	e03a      	b.n	5702 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    568c:	4b25      	ldr	r3, [pc, #148]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    568e:	6819      	ldr	r1, [r3, #0]
    5690:	693b      	ldr	r3, [r7, #16]
    5692:	009a      	lsls	r2, r3, #2
    5694:	23e2      	movs	r3, #226	; 0xe2
    5696:	00db      	lsls	r3, r3, #3
    5698:	188a      	adds	r2, r1, r2
    569a:	18d3      	adds	r3, r2, r3
    569c:	781b      	ldrb	r3, [r3, #0]
    569e:	2b01      	cmp	r3, #1
    56a0:	d130      	bne.n	5704 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    56a2:	693b      	ldr	r3, [r7, #16]
    56a4:	1c5a      	adds	r2, r3, #1
    56a6:	4b1f      	ldr	r3, [pc, #124]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    56a8:	681b      	ldr	r3, [r3, #0]
    56aa:	699b      	ldr	r3, [r3, #24]
    56ac:	429a      	cmp	r2, r3
    56ae:	d20e      	bcs.n	56ce <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    56b0:	4b1c      	ldr	r3, [pc, #112]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    56b2:	681a      	ldr	r2, [r3, #0]
    56b4:	693b      	ldr	r3, [r7, #16]
    56b6:	009b      	lsls	r3, r3, #2
    56b8:	21e2      	movs	r1, #226	; 0xe2
    56ba:	00c9      	lsls	r1, r1, #3
    56bc:	468c      	mov	ip, r1
    56be:	4463      	add	r3, ip
    56c0:	18d3      	adds	r3, r2, r3
    56c2:	2208      	movs	r2, #8
    56c4:	2100      	movs	r1, #0
    56c6:	0018      	movs	r0, r3
    56c8:	4b17      	ldr	r3, [pc, #92]	; (5728 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    56ca:	4798      	blx	r3
    56cc:	e01a      	b.n	5704 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    56ce:	4b15      	ldr	r3, [pc, #84]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	22e2      	movs	r2, #226	; 0xe2
    56d4:	00d2      	lsls	r2, r2, #3
    56d6:	4694      	mov	ip, r2
    56d8:	4463      	add	r3, ip
    56da:	2204      	movs	r2, #4
    56dc:	2100      	movs	r1, #0
    56de:	0018      	movs	r0, r3
    56e0:	4b11      	ldr	r3, [pc, #68]	; (5728 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    56e2:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    56e4:	4b0f      	ldr	r3, [pc, #60]	; (5724 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
    56e6:	681a      	ldr	r2, [r3, #0]
    56e8:	693b      	ldr	r3, [r7, #16]
    56ea:	009b      	lsls	r3, r3, #2
    56ec:	21e2      	movs	r1, #226	; 0xe2
    56ee:	00c9      	lsls	r1, r1, #3
    56f0:	468c      	mov	ip, r1
    56f2:	4463      	add	r3, ip
    56f4:	18d3      	adds	r3, r2, r3
    56f6:	2204      	movs	r2, #4
    56f8:	2100      	movs	r1, #0
    56fa:	0018      	movs	r0, r3
    56fc:	4b0a      	ldr	r3, [pc, #40]	; (5728 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
    56fe:	4798      	blx	r3
    5700:	e000      	b.n	5704 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
    5702:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
    5704:	697b      	ldr	r3, [r7, #20]
    5706:	3301      	adds	r3, #1
    5708:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
    570a:	1dfb      	adds	r3, r7, #7
    570c:	781a      	ldrb	r2, [r3, #0]
    570e:	697b      	ldr	r3, [r7, #20]
    5710:	429a      	cmp	r2, r3
    5712:	d900      	bls.n	5716 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
    5714:	e774      	b.n	5600 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
    5716:	46bd      	mov	sp, r7
    5718:	b006      	add	sp, #24
    571a:	bd80      	pop	{r7, pc}
    571c:	00023398 	.word	0x00023398
    5720:	00005571 	.word	0x00005571
    5724:	20000c44 	.word	0x20000c44
    5728:	00020123 	.word	0x00020123

0000572c <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    572c:	b580      	push	{r7, lr}
    572e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
    5730:	4b12      	ldr	r3, [pc, #72]	; (577c <prvTraceUpdateCounters+0x50>)
    5732:	681b      	ldr	r3, [r3, #0]
    5734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5736:	2b00      	cmp	r3, #0
    5738:	d01c      	beq.n	5774 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    573a:	4b10      	ldr	r3, [pc, #64]	; (577c <prvTraceUpdateCounters+0x50>)
    573c:	681b      	ldr	r3, [r3, #0]
    573e:	695a      	ldr	r2, [r3, #20]
    5740:	3201      	adds	r2, #1
    5742:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    5744:	4b0d      	ldr	r3, [pc, #52]	; (577c <prvTraceUpdateCounters+0x50>)
    5746:	681b      	ldr	r3, [r3, #0]
    5748:	69da      	ldr	r2, [r3, #28]
    574a:	3201      	adds	r2, #1
    574c:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    574e:	4b0b      	ldr	r3, [pc, #44]	; (577c <prvTraceUpdateCounters+0x50>)
    5750:	681b      	ldr	r3, [r3, #0]
    5752:	69da      	ldr	r2, [r3, #28]
    5754:	232c      	movs	r3, #44	; 0x2c
    5756:	33ff      	adds	r3, #255	; 0xff
    5758:	429a      	cmp	r2, r3
    575a:	d907      	bls.n	576c <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    575c:	4b07      	ldr	r3, [pc, #28]	; (577c <prvTraceUpdateCounters+0x50>)
    575e:	681b      	ldr	r3, [r3, #0]
    5760:	2201      	movs	r2, #1
    5762:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    5764:	4b05      	ldr	r3, [pc, #20]	; (577c <prvTraceUpdateCounters+0x50>)
    5766:	681b      	ldr	r3, [r3, #0]
    5768:	2200      	movs	r2, #0
    576a:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    576c:	2001      	movs	r0, #1
    576e:	4b04      	ldr	r3, [pc, #16]	; (5780 <prvTraceUpdateCounters+0x54>)
    5770:	4798      	blx	r3
    5772:	e000      	b.n	5776 <prvTraceUpdateCounters+0x4a>
		return;
    5774:	46c0      	nop			; (mov r8, r8)
#endif
}
    5776:	46bd      	mov	sp, r7
    5778:	bd80      	pop	{r7, pc}
    577a:	46c0      	nop			; (mov r8, r8)
    577c:	20000c44 	.word	0x20000c44
    5780:	000055d9 	.word	0x000055d9

00005784 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    5784:	b5b0      	push	{r4, r5, r7, lr}
    5786:	b086      	sub	sp, #24
    5788:	af00      	add	r7, sp, #0
    578a:	0002      	movs	r2, r0
    578c:	1dbb      	adds	r3, r7, #6
    578e:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
    5790:	2300      	movs	r3, #0
    5792:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
    5794:	2300      	movs	r3, #0
    5796:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
    5798:	2300      	movs	r3, #0
    579a:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    579c:	1dbb      	adds	r3, r7, #6
    579e:	881b      	ldrh	r3, [r3, #0]
    57a0:	2bff      	cmp	r3, #255	; 0xff
    57a2:	d00a      	beq.n	57ba <prvTraceGetDTS+0x36>
    57a4:	1dbb      	adds	r3, r7, #6
    57a6:	881b      	ldrh	r3, [r3, #0]
    57a8:	4a60      	ldr	r2, [pc, #384]	; (592c <prvTraceGetDTS+0x1a8>)
    57aa:	4293      	cmp	r3, r2
    57ac:	d005      	beq.n	57ba <prvTraceGetDTS+0x36>
    57ae:	4b60      	ldr	r3, [pc, #384]	; (5930 <prvTraceGetDTS+0x1ac>)
    57b0:	0018      	movs	r0, r3
    57b2:	4b60      	ldr	r3, [pc, #384]	; (5934 <prvTraceGetDTS+0x1b0>)
    57b4:	4798      	blx	r3
    57b6:	2300      	movs	r3, #0
    57b8:	e0b3      	b.n	5922 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
    57ba:	4b5f      	ldr	r3, [pc, #380]	; (5938 <prvTraceGetDTS+0x1b4>)
    57bc:	681b      	ldr	r3, [r3, #0]
    57be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    57c0:	2b00      	cmp	r3, #0
    57c2:	d118      	bne.n	57f6 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
    57c4:	4b5d      	ldr	r3, [pc, #372]	; (593c <prvTraceGetDTS+0x1b8>)
    57c6:	681b      	ldr	r3, [r3, #0]
    57c8:	2b00      	cmp	r3, #0
    57ca:	d006      	beq.n	57da <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    57cc:	4b5a      	ldr	r3, [pc, #360]	; (5938 <prvTraceGetDTS+0x1b4>)
    57ce:	681b      	ldr	r3, [r3, #0]
    57d0:	4a5a      	ldr	r2, [pc, #360]	; (593c <prvTraceGetDTS+0x1b8>)
    57d2:	6812      	ldr	r2, [r2, #0]
    57d4:	0892      	lsrs	r2, r2, #2
    57d6:	625a      	str	r2, [r3, #36]	; 0x24
    57d8:	e00d      	b.n	57f6 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    57da:	4b59      	ldr	r3, [pc, #356]	; (5940 <prvTraceGetDTS+0x1bc>)
    57dc:	681a      	ldr	r2, [r3, #0]
    57de:	4b59      	ldr	r3, [pc, #356]	; (5944 <prvTraceGetDTS+0x1c0>)
    57e0:	681b      	ldr	r3, [r3, #0]
    57e2:	429a      	cmp	r2, r3
    57e4:	d007      	beq.n	57f6 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    57e6:	4b54      	ldr	r3, [pc, #336]	; (5938 <prvTraceGetDTS+0x1b4>)
    57e8:	681c      	ldr	r4, [r3, #0]
    57ea:	2000      	movs	r0, #0
    57ec:	4b56      	ldr	r3, [pc, #344]	; (5948 <prvTraceGetDTS+0x1c4>)
    57ee:	4798      	blx	r3
    57f0:	0003      	movs	r3, r0
    57f2:	089b      	lsrs	r3, r3, #2
    57f4:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
    57f6:	230c      	movs	r3, #12
    57f8:	18fb      	adds	r3, r7, r3
    57fa:	0018      	movs	r0, r3
    57fc:	4b53      	ldr	r3, [pc, #332]	; (594c <prvTraceGetDTS+0x1c8>)
    57fe:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    5800:	68fa      	ldr	r2, [r7, #12]
    5802:	4b53      	ldr	r3, [pc, #332]	; (5950 <prvTraceGetDTS+0x1cc>)
    5804:	681b      	ldr	r3, [r3, #0]
    5806:	1ad3      	subs	r3, r2, r3
    5808:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
    580a:	68fa      	ldr	r2, [r7, #12]
    580c:	4b50      	ldr	r3, [pc, #320]	; (5950 <prvTraceGetDTS+0x1cc>)
    580e:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
    5810:	4b49      	ldr	r3, [pc, #292]	; (5938 <prvTraceGetDTS+0x1b4>)
    5812:	681b      	ldr	r3, [r3, #0]
    5814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5816:	2b00      	cmp	r3, #0
    5818:	d044      	beq.n	58a4 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    581a:	4b47      	ldr	r3, [pc, #284]	; (5938 <prvTraceGetDTS+0x1b4>)
    581c:	681b      	ldr	r3, [r3, #0]
    581e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5820:	693b      	ldr	r3, [r7, #16]
    5822:	429a      	cmp	r2, r3
    5824:	d21e      	bcs.n	5864 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    5826:	4b44      	ldr	r3, [pc, #272]	; (5938 <prvTraceGetDTS+0x1b4>)
    5828:	681c      	ldr	r4, [r3, #0]
    582a:	4b43      	ldr	r3, [pc, #268]	; (5938 <prvTraceGetDTS+0x1b4>)
    582c:	681b      	ldr	r3, [r3, #0]
    582e:	6add      	ldr	r5, [r3, #44]	; 0x2c
    5830:	4b41      	ldr	r3, [pc, #260]	; (5938 <prvTraceGetDTS+0x1b4>)
    5832:	681b      	ldr	r3, [r3, #0]
    5834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5836:	4b47      	ldr	r3, [pc, #284]	; (5954 <prvTraceGetDTS+0x1d0>)
    5838:	0011      	movs	r1, r2
    583a:	6938      	ldr	r0, [r7, #16]
    583c:	4798      	blx	r3
    583e:	0003      	movs	r3, r0
    5840:	18eb      	adds	r3, r5, r3
    5842:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    5844:	4b3c      	ldr	r3, [pc, #240]	; (5938 <prvTraceGetDTS+0x1b4>)
    5846:	681c      	ldr	r4, [r3, #0]
    5848:	4b3b      	ldr	r3, [pc, #236]	; (5938 <prvTraceGetDTS+0x1b4>)
    584a:	681b      	ldr	r3, [r3, #0]
    584c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    584e:	4b3a      	ldr	r3, [pc, #232]	; (5938 <prvTraceGetDTS+0x1b4>)
    5850:	681b      	ldr	r3, [r3, #0]
    5852:	6a59      	ldr	r1, [r3, #36]	; 0x24
    5854:	693a      	ldr	r2, [r7, #16]
    5856:	4b40      	ldr	r3, [pc, #256]	; (5958 <prvTraceGetDTS+0x1d4>)
    5858:	0010      	movs	r0, r2
    585a:	4798      	blx	r3
    585c:	000b      	movs	r3, r1
    585e:	18eb      	adds	r3, r5, r3
    5860:	62a3      	str	r3, [r4, #40]	; 0x28
    5862:	e007      	b.n	5874 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    5864:	4b34      	ldr	r3, [pc, #208]	; (5938 <prvTraceGetDTS+0x1b4>)
    5866:	681b      	ldr	r3, [r3, #0]
    5868:	4a33      	ldr	r2, [pc, #204]	; (5938 <prvTraceGetDTS+0x1b4>)
    586a:	6812      	ldr	r2, [r2, #0]
    586c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    586e:	693a      	ldr	r2, [r7, #16]
    5870:	188a      	adds	r2, r1, r2
    5872:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    5874:	4b30      	ldr	r3, [pc, #192]	; (5938 <prvTraceGetDTS+0x1b4>)
    5876:	681b      	ldr	r3, [r3, #0]
    5878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    587a:	4b2f      	ldr	r3, [pc, #188]	; (5938 <prvTraceGetDTS+0x1b4>)
    587c:	681b      	ldr	r3, [r3, #0]
    587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5880:	429a      	cmp	r2, r3
    5882:	d313      	bcc.n	58ac <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    5884:	4b2c      	ldr	r3, [pc, #176]	; (5938 <prvTraceGetDTS+0x1b4>)
    5886:	681b      	ldr	r3, [r3, #0]
    5888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    588a:	3201      	adds	r2, #1
    588c:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    588e:	4b2a      	ldr	r3, [pc, #168]	; (5938 <prvTraceGetDTS+0x1b4>)
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	4a29      	ldr	r2, [pc, #164]	; (5938 <prvTraceGetDTS+0x1b4>)
    5894:	6812      	ldr	r2, [r2, #0]
    5896:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5898:	4a27      	ldr	r2, [pc, #156]	; (5938 <prvTraceGetDTS+0x1b4>)
    589a:	6812      	ldr	r2, [r2, #0]
    589c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    589e:	1a8a      	subs	r2, r1, r2
    58a0:	629a      	str	r2, [r3, #40]	; 0x28
    58a2:	e003      	b.n	58ac <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    58a4:	4b24      	ldr	r3, [pc, #144]	; (5938 <prvTraceGetDTS+0x1b4>)
    58a6:	681b      	ldr	r3, [r3, #0]
    58a8:	68fa      	ldr	r2, [r7, #12]
    58aa:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    58ac:	1dbb      	adds	r3, r7, #6
    58ae:	881a      	ldrh	r2, [r3, #0]
    58b0:	693b      	ldr	r3, [r7, #16]
    58b2:	429a      	cmp	r2, r3
    58b4:	d22f      	bcs.n	5916 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    58b6:	4b29      	ldr	r3, [pc, #164]	; (595c <prvTraceGetDTS+0x1d8>)
    58b8:	4798      	blx	r3
    58ba:	0003      	movs	r3, r0
    58bc:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
    58be:	697b      	ldr	r3, [r7, #20]
    58c0:	2b00      	cmp	r3, #0
    58c2:	d028      	beq.n	5916 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
    58c4:	1dbb      	adds	r3, r7, #6
    58c6:	881b      	ldrh	r3, [r3, #0]
    58c8:	4a18      	ldr	r2, [pc, #96]	; (592c <prvTraceGetDTS+0x1a8>)
    58ca:	4293      	cmp	r3, r2
    58cc:	d10b      	bne.n	58e6 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
    58ce:	697b      	ldr	r3, [r7, #20]
    58d0:	22a9      	movs	r2, #169	; 0xa9
    58d2:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    58d4:	693b      	ldr	r3, [r7, #16]
    58d6:	0c1b      	lsrs	r3, r3, #16
    58d8:	b29a      	uxth	r2, r3
    58da:	697b      	ldr	r3, [r7, #20]
    58dc:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
    58de:	697b      	ldr	r3, [r7, #20]
    58e0:	2200      	movs	r2, #0
    58e2:	705a      	strb	r2, [r3, #1]
    58e4:	e015      	b.n	5912 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
    58e6:	1dbb      	adds	r3, r7, #6
    58e8:	881b      	ldrh	r3, [r3, #0]
    58ea:	2bff      	cmp	r3, #255	; 0xff
    58ec:	d10d      	bne.n	590a <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
    58ee:	697b      	ldr	r3, [r7, #20]
    58f0:	22a8      	movs	r2, #168	; 0xa8
    58f2:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    58f4:	693b      	ldr	r3, [r7, #16]
    58f6:	0a1b      	lsrs	r3, r3, #8
    58f8:	b29a      	uxth	r2, r3
    58fa:	697b      	ldr	r3, [r7, #20]
    58fc:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    58fe:	693b      	ldr	r3, [r7, #16]
    5900:	0e1b      	lsrs	r3, r3, #24
    5902:	b2da      	uxtb	r2, r3
    5904:	697b      	ldr	r3, [r7, #20]
    5906:	705a      	strb	r2, [r3, #1]
    5908:	e003      	b.n	5912 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    590a:	4b15      	ldr	r3, [pc, #84]	; (5960 <prvTraceGetDTS+0x1dc>)
    590c:	0018      	movs	r0, r3
    590e:	4b09      	ldr	r3, [pc, #36]	; (5934 <prvTraceGetDTS+0x1b0>)
    5910:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    5912:	4b14      	ldr	r3, [pc, #80]	; (5964 <prvTraceGetDTS+0x1e0>)
    5914:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    5916:	693b      	ldr	r3, [r7, #16]
    5918:	b29b      	uxth	r3, r3
    591a:	1dba      	adds	r2, r7, #6
    591c:	8812      	ldrh	r2, [r2, #0]
    591e:	4013      	ands	r3, r2
    5920:	b29b      	uxth	r3, r3
}
    5922:	0018      	movs	r0, r3
    5924:	46bd      	mov	sp, r7
    5926:	b006      	add	sp, #24
    5928:	bdb0      	pop	{r4, r5, r7, pc}
    592a:	46c0      	nop			; (mov r8, r8)
    592c:	0000ffff 	.word	0x0000ffff
    5930:	000233f0 	.word	0x000233f0
    5934:	00005571 	.word	0x00005571
    5938:	20000c44 	.word	0x20000c44
    593c:	20000ba0 	.word	0x20000ba0
    5940:	e000e018 	.word	0xe000e018
    5944:	20004f4c 	.word	0x20004f4c
    5948:	00015925 	.word	0x00015925
    594c:	00005969 	.word	0x00005969
    5950:	20000c50 	.word	0x20000c50
    5954:	0001e469 	.word	0x0001e469
    5958:	0001e575 	.word	0x0001e575
    595c:	00005129 	.word	0x00005129
    5960:	00023430 	.word	0x00023430
    5964:	0000572d 	.word	0x0000572d

00005968 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    5968:	b580      	push	{r7, lr}
    596a:	b084      	sub	sp, #16
    596c:	af00      	add	r7, sp, #0
    596e:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
    5970:	2300      	movs	r3, #0
    5972:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
    5974:	2300      	movs	r3, #0
    5976:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    5978:	4b2d      	ldr	r3, [pc, #180]	; (5a30 <prvTracePortGetTimeStamp+0xc8>)
    597a:	681b      	ldr	r3, [r3, #0]
    597c:	2b01      	cmp	r3, #1
    597e:	d107      	bne.n	5990 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
    5980:	687b      	ldr	r3, [r7, #4]
    5982:	2b00      	cmp	r3, #0
    5984:	d04f      	beq.n	5a26 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
    5986:	4b2b      	ldr	r3, [pc, #172]	; (5a34 <prvTracePortGetTimeStamp+0xcc>)
    5988:	681a      	ldr	r2, [r3, #0]
    598a:	687b      	ldr	r3, [r7, #4]
    598c:	601a      	str	r2, [r3, #0]
		return;
    598e:	e04a      	b.n	5a26 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    5990:	4b29      	ldr	r3, [pc, #164]	; (5a38 <prvTracePortGetTimeStamp+0xd0>)
    5992:	681a      	ldr	r2, [r3, #0]
    5994:	4b29      	ldr	r3, [pc, #164]	; (5a3c <prvTracePortGetTimeStamp+0xd4>)
    5996:	681b      	ldr	r3, [r3, #0]
    5998:	1ad3      	subs	r3, r2, r3
    599a:	3301      	adds	r3, #1
    599c:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    599e:	4b28      	ldr	r3, [pc, #160]	; (5a40 <prvTracePortGetTimeStamp+0xd8>)
    59a0:	681a      	ldr	r2, [r3, #0]
    59a2:	4b28      	ldr	r3, [pc, #160]	; (5a44 <prvTracePortGetTimeStamp+0xdc>)
    59a4:	681b      	ldr	r3, [r3, #0]
    59a6:	1ad3      	subs	r3, r2, r3
    59a8:	3b01      	subs	r3, #1
    59aa:	2b00      	cmp	r3, #0
    59ac:	db03      	blt.n	59b6 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
    59ae:	4b24      	ldr	r3, [pc, #144]	; (5a40 <prvTracePortGetTimeStamp+0xd8>)
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	60fb      	str	r3, [r7, #12]
    59b4:	e002      	b.n	59bc <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    59b6:	4b23      	ldr	r3, [pc, #140]	; (5a44 <prvTracePortGetTimeStamp+0xdc>)
    59b8:	681b      	ldr	r3, [r3, #0]
    59ba:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    59bc:	4b20      	ldr	r3, [pc, #128]	; (5a40 <prvTracePortGetTimeStamp+0xd8>)
    59be:	681b      	ldr	r3, [r3, #0]
    59c0:	68fa      	ldr	r2, [r7, #12]
    59c2:	429a      	cmp	r2, r3
    59c4:	d107      	bne.n	59d6 <prvTracePortGetTimeStamp+0x6e>
    59c6:	4b20      	ldr	r3, [pc, #128]	; (5a48 <prvTracePortGetTimeStamp+0xe0>)
    59c8:	681b      	ldr	r3, [r3, #0]
    59ca:	68ba      	ldr	r2, [r7, #8]
    59cc:	429a      	cmp	r2, r3
    59ce:	d202      	bcs.n	59d6 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    59d0:	68fb      	ldr	r3, [r7, #12]
    59d2:	3301      	adds	r3, #1
    59d4:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    59d6:	687b      	ldr	r3, [r7, #4]
    59d8:	2b00      	cmp	r3, #0
    59da:	d016      	beq.n	5a0a <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    59dc:	4b16      	ldr	r3, [pc, #88]	; (5a38 <prvTracePortGetTimeStamp+0xd0>)
    59de:	681b      	ldr	r3, [r3, #0]
    59e0:	3301      	adds	r3, #1
    59e2:	089b      	lsrs	r3, r3, #2
    59e4:	68fa      	ldr	r2, [r7, #12]
    59e6:	435a      	muls	r2, r3
    59e8:	4b12      	ldr	r3, [pc, #72]	; (5a34 <prvTracePortGetTimeStamp+0xcc>)
    59ea:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    59ec:	4b12      	ldr	r3, [pc, #72]	; (5a38 <prvTracePortGetTimeStamp+0xd0>)
    59ee:	681b      	ldr	r3, [r3, #0]
    59f0:	3301      	adds	r3, #1
    59f2:	2203      	movs	r2, #3
    59f4:	4013      	ands	r3, r2
    59f6:	68fa      	ldr	r2, [r7, #12]
    59f8:	435a      	muls	r2, r3
    59fa:	68bb      	ldr	r3, [r7, #8]
    59fc:	18d3      	adds	r3, r2, r3
    59fe:	089a      	lsrs	r2, r3, #2
    5a00:	4b0c      	ldr	r3, [pc, #48]	; (5a34 <prvTracePortGetTimeStamp+0xcc>)
    5a02:	681b      	ldr	r3, [r3, #0]
    5a04:	18d2      	adds	r2, r2, r3
    5a06:	4b0b      	ldr	r3, [pc, #44]	; (5a34 <prvTracePortGetTimeStamp+0xcc>)
    5a08:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    5a0a:	4b0d      	ldr	r3, [pc, #52]	; (5a40 <prvTracePortGetTimeStamp+0xd8>)
    5a0c:	68fa      	ldr	r2, [r7, #12]
    5a0e:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	2b00      	cmp	r3, #0
    5a14:	d003      	beq.n	5a1e <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
    5a16:	4b07      	ldr	r3, [pc, #28]	; (5a34 <prvTracePortGetTimeStamp+0xcc>)
    5a18:	681a      	ldr	r2, [r3, #0]
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    5a1e:	4b0a      	ldr	r3, [pc, #40]	; (5a48 <prvTracePortGetTimeStamp+0xe0>)
    5a20:	68ba      	ldr	r2, [r7, #8]
    5a22:	601a      	str	r2, [r3, #0]
    5a24:	e000      	b.n	5a28 <prvTracePortGetTimeStamp+0xc0>
		return;
    5a26:	46c0      	nop			; (mov r8, r8)
}
    5a28:	46bd      	mov	sp, r7
    5a2a:	b004      	add	sp, #16
    5a2c:	bd80      	pop	{r7, pc}
    5a2e:	46c0      	nop			; (mov r8, r8)
    5a30:	20000b90 	.word	0x20000b90
    5a34:	20000b94 	.word	0x20000b94
    5a38:	e000e014 	.word	0xe000e014
    5a3c:	e000e018 	.word	0xe000e018
    5a40:	20000c54 	.word	0x20000c54
    5a44:	20000b8c 	.word	0x20000b8c
    5a48:	20000c58 	.word	0x20000c58

00005a4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    5a4c:	b580      	push	{r7, lr}
    5a4e:	b082      	sub	sp, #8
    5a50:	af00      	add	r7, sp, #0
    5a52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5a54:	687b      	ldr	r3, [r7, #4]
    5a56:	3308      	adds	r3, #8
    5a58:	001a      	movs	r2, r3
    5a5a:	687b      	ldr	r3, [r7, #4]
    5a5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	2201      	movs	r2, #1
    5a62:	4252      	negs	r2, r2
    5a64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5a66:	687b      	ldr	r3, [r7, #4]
    5a68:	3308      	adds	r3, #8
    5a6a:	001a      	movs	r2, r3
    5a6c:	687b      	ldr	r3, [r7, #4]
    5a6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5a70:	687b      	ldr	r3, [r7, #4]
    5a72:	3308      	adds	r3, #8
    5a74:	001a      	movs	r2, r3
    5a76:	687b      	ldr	r3, [r7, #4]
    5a78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    5a7a:	687b      	ldr	r3, [r7, #4]
    5a7c:	2200      	movs	r2, #0
    5a7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    5a80:	46c0      	nop			; (mov r8, r8)
    5a82:	46bd      	mov	sp, r7
    5a84:	b002      	add	sp, #8
    5a86:	bd80      	pop	{r7, pc}

00005a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    5a88:	b580      	push	{r7, lr}
    5a8a:	b082      	sub	sp, #8
    5a8c:	af00      	add	r7, sp, #0
    5a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    5a90:	687b      	ldr	r3, [r7, #4]
    5a92:	2200      	movs	r2, #0
    5a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    5a96:	46c0      	nop			; (mov r8, r8)
    5a98:	46bd      	mov	sp, r7
    5a9a:	b002      	add	sp, #8
    5a9c:	bd80      	pop	{r7, pc}

00005a9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    5a9e:	b580      	push	{r7, lr}
    5aa0:	b084      	sub	sp, #16
    5aa2:	af00      	add	r7, sp, #0
    5aa4:	6078      	str	r0, [r7, #4]
    5aa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	685b      	ldr	r3, [r3, #4]
    5aac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    5aae:	683b      	ldr	r3, [r7, #0]
    5ab0:	68fa      	ldr	r2, [r7, #12]
    5ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    5ab4:	68fb      	ldr	r3, [r7, #12]
    5ab6:	689a      	ldr	r2, [r3, #8]
    5ab8:	683b      	ldr	r3, [r7, #0]
    5aba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    5abc:	68fb      	ldr	r3, [r7, #12]
    5abe:	689b      	ldr	r3, [r3, #8]
    5ac0:	683a      	ldr	r2, [r7, #0]
    5ac2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    5ac4:	68fb      	ldr	r3, [r7, #12]
    5ac6:	683a      	ldr	r2, [r7, #0]
    5ac8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    5aca:	683b      	ldr	r3, [r7, #0]
    5acc:	687a      	ldr	r2, [r7, #4]
    5ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	681b      	ldr	r3, [r3, #0]
    5ad4:	1c5a      	adds	r2, r3, #1
    5ad6:	687b      	ldr	r3, [r7, #4]
    5ad8:	601a      	str	r2, [r3, #0]
}
    5ada:	46c0      	nop			; (mov r8, r8)
    5adc:	46bd      	mov	sp, r7
    5ade:	b004      	add	sp, #16
    5ae0:	bd80      	pop	{r7, pc}

00005ae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    5ae2:	b580      	push	{r7, lr}
    5ae4:	b084      	sub	sp, #16
    5ae6:	af00      	add	r7, sp, #0
    5ae8:	6078      	str	r0, [r7, #4]
    5aea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    5aec:	683b      	ldr	r3, [r7, #0]
    5aee:	681b      	ldr	r3, [r3, #0]
    5af0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    5af2:	68bb      	ldr	r3, [r7, #8]
    5af4:	3301      	adds	r3, #1
    5af6:	d103      	bne.n	5b00 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    5af8:	687b      	ldr	r3, [r7, #4]
    5afa:	691b      	ldr	r3, [r3, #16]
    5afc:	60fb      	str	r3, [r7, #12]
    5afe:	e00c      	b.n	5b1a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5b00:	687b      	ldr	r3, [r7, #4]
    5b02:	3308      	adds	r3, #8
    5b04:	60fb      	str	r3, [r7, #12]
    5b06:	e002      	b.n	5b0e <vListInsert+0x2c>
    5b08:	68fb      	ldr	r3, [r7, #12]
    5b0a:	685b      	ldr	r3, [r3, #4]
    5b0c:	60fb      	str	r3, [r7, #12]
    5b0e:	68fb      	ldr	r3, [r7, #12]
    5b10:	685b      	ldr	r3, [r3, #4]
    5b12:	681a      	ldr	r2, [r3, #0]
    5b14:	68bb      	ldr	r3, [r7, #8]
    5b16:	429a      	cmp	r2, r3
    5b18:	d9f6      	bls.n	5b08 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    5b1a:	68fb      	ldr	r3, [r7, #12]
    5b1c:	685a      	ldr	r2, [r3, #4]
    5b1e:	683b      	ldr	r3, [r7, #0]
    5b20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    5b22:	683b      	ldr	r3, [r7, #0]
    5b24:	685b      	ldr	r3, [r3, #4]
    5b26:	683a      	ldr	r2, [r7, #0]
    5b28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    5b2a:	683b      	ldr	r3, [r7, #0]
    5b2c:	68fa      	ldr	r2, [r7, #12]
    5b2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	683a      	ldr	r2, [r7, #0]
    5b34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    5b36:	683b      	ldr	r3, [r7, #0]
    5b38:	687a      	ldr	r2, [r7, #4]
    5b3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    5b3c:	687b      	ldr	r3, [r7, #4]
    5b3e:	681b      	ldr	r3, [r3, #0]
    5b40:	1c5a      	adds	r2, r3, #1
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	601a      	str	r2, [r3, #0]
}
    5b46:	46c0      	nop			; (mov r8, r8)
    5b48:	46bd      	mov	sp, r7
    5b4a:	b004      	add	sp, #16
    5b4c:	bd80      	pop	{r7, pc}

00005b4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    5b4e:	b580      	push	{r7, lr}
    5b50:	b084      	sub	sp, #16
    5b52:	af00      	add	r7, sp, #0
    5b54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	691b      	ldr	r3, [r3, #16]
    5b5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    5b5c:	687b      	ldr	r3, [r7, #4]
    5b5e:	685b      	ldr	r3, [r3, #4]
    5b60:	687a      	ldr	r2, [r7, #4]
    5b62:	6892      	ldr	r2, [r2, #8]
    5b64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	689b      	ldr	r3, [r3, #8]
    5b6a:	687a      	ldr	r2, [r7, #4]
    5b6c:	6852      	ldr	r2, [r2, #4]
    5b6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    5b70:	68fb      	ldr	r3, [r7, #12]
    5b72:	685a      	ldr	r2, [r3, #4]
    5b74:	687b      	ldr	r3, [r7, #4]
    5b76:	429a      	cmp	r2, r3
    5b78:	d103      	bne.n	5b82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    5b7a:	687b      	ldr	r3, [r7, #4]
    5b7c:	689a      	ldr	r2, [r3, #8]
    5b7e:	68fb      	ldr	r3, [r7, #12]
    5b80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	2200      	movs	r2, #0
    5b86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    5b88:	68fb      	ldr	r3, [r7, #12]
    5b8a:	681b      	ldr	r3, [r3, #0]
    5b8c:	1e5a      	subs	r2, r3, #1
    5b8e:	68fb      	ldr	r3, [r7, #12]
    5b90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    5b92:	68fb      	ldr	r3, [r7, #12]
    5b94:	681b      	ldr	r3, [r3, #0]
}
    5b96:	0018      	movs	r0, r3
    5b98:	46bd      	mov	sp, r7
    5b9a:	b004      	add	sp, #16
    5b9c:	bd80      	pop	{r7, pc}
	...

00005ba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    5ba0:	b580      	push	{r7, lr}
    5ba2:	b084      	sub	sp, #16
    5ba4:	af00      	add	r7, sp, #0
    5ba6:	60f8      	str	r0, [r7, #12]
    5ba8:	60b9      	str	r1, [r7, #8]
    5baa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5bac:	68fb      	ldr	r3, [r7, #12]
    5bae:	3b04      	subs	r3, #4
    5bb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5bb2:	68fb      	ldr	r3, [r7, #12]
    5bb4:	2280      	movs	r2, #128	; 0x80
    5bb6:	0452      	lsls	r2, r2, #17
    5bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5bba:	68fb      	ldr	r3, [r7, #12]
    5bbc:	3b04      	subs	r3, #4
    5bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    5bc0:	68ba      	ldr	r2, [r7, #8]
    5bc2:	68fb      	ldr	r3, [r7, #12]
    5bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5bc6:	68fb      	ldr	r3, [r7, #12]
    5bc8:	3b04      	subs	r3, #4
    5bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    5bcc:	4a08      	ldr	r2, [pc, #32]	; (5bf0 <pxPortInitialiseStack+0x50>)
    5bce:	68fb      	ldr	r3, [r7, #12]
    5bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5bd2:	68fb      	ldr	r3, [r7, #12]
    5bd4:	3b14      	subs	r3, #20
    5bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    5bd8:	687a      	ldr	r2, [r7, #4]
    5bda:	68fb      	ldr	r3, [r7, #12]
    5bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    5bde:	68fb      	ldr	r3, [r7, #12]
    5be0:	3b20      	subs	r3, #32
    5be2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5be4:	68fb      	ldr	r3, [r7, #12]
}
    5be6:	0018      	movs	r0, r3
    5be8:	46bd      	mov	sp, r7
    5bea:	b004      	add	sp, #16
    5bec:	bd80      	pop	{r7, pc}
    5bee:	46c0      	nop			; (mov r8, r8)
    5bf0:	00005bf5 	.word	0x00005bf5

00005bf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    5bf4:	b580      	push	{r7, lr}
    5bf6:	b082      	sub	sp, #8
    5bf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    5bfa:	2300      	movs	r3, #0
    5bfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    5bfe:	4b07      	ldr	r3, [pc, #28]	; (5c1c <prvTaskExitError+0x28>)
    5c00:	681b      	ldr	r3, [r3, #0]
    5c02:	3301      	adds	r3, #1
    5c04:	d001      	beq.n	5c0a <prvTaskExitError+0x16>
    5c06:	b672      	cpsid	i
    5c08:	e7fe      	b.n	5c08 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    5c0a:	b672      	cpsid	i
	while( ulDummy == 0 )
    5c0c:	46c0      	nop			; (mov r8, r8)
    5c0e:	687b      	ldr	r3, [r7, #4]
    5c10:	2b00      	cmp	r3, #0
    5c12:	d0fc      	beq.n	5c0e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    5c14:	46c0      	nop			; (mov r8, r8)
    5c16:	46bd      	mov	sp, r7
    5c18:	b002      	add	sp, #8
    5c1a:	bd80      	pop	{r7, pc}
    5c1c:	200000f8 	.word	0x200000f8

00005c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    5c20:	b580      	push	{r7, lr}
    5c22:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    5c24:	46c0      	nop			; (mov r8, r8)
    5c26:	46bd      	mov	sp, r7
    5c28:	bd80      	pop	{r7, pc}
    5c2a:	0000      	movs	r0, r0
    5c2c:	0000      	movs	r0, r0
	...

00005c30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    5c30:	4a0b      	ldr	r2, [pc, #44]	; (5c60 <pxCurrentTCBConst2>)
    5c32:	6813      	ldr	r3, [r2, #0]
    5c34:	6818      	ldr	r0, [r3, #0]
    5c36:	3020      	adds	r0, #32
    5c38:	f380 8809 	msr	PSP, r0
    5c3c:	2002      	movs	r0, #2
    5c3e:	f380 8814 	msr	CONTROL, r0
    5c42:	f3bf 8f6f 	isb	sy
    5c46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    5c48:	46ae      	mov	lr, r5
    5c4a:	bc08      	pop	{r3}
    5c4c:	bc04      	pop	{r2}
    5c4e:	b662      	cpsie	i
    5c50:	4718      	bx	r3
    5c52:	46c0      	nop			; (mov r8, r8)
    5c54:	46c0      	nop			; (mov r8, r8)
    5c56:	46c0      	nop			; (mov r8, r8)
    5c58:	46c0      	nop			; (mov r8, r8)
    5c5a:	46c0      	nop			; (mov r8, r8)
    5c5c:	46c0      	nop			; (mov r8, r8)
    5c5e:	46c0      	nop			; (mov r8, r8)

00005c60 <pxCurrentTCBConst2>:
    5c60:	20003b44 	.word	0x20003b44
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    5c64:	46c0      	nop			; (mov r8, r8)
    5c66:	46c0      	nop			; (mov r8, r8)

00005c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    5c68:	b580      	push	{r7, lr}
    5c6a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5c6c:	4b0e      	ldr	r3, [pc, #56]	; (5ca8 <xPortStartScheduler+0x40>)
    5c6e:	4a0e      	ldr	r2, [pc, #56]	; (5ca8 <xPortStartScheduler+0x40>)
    5c70:	6812      	ldr	r2, [r2, #0]
    5c72:	21ff      	movs	r1, #255	; 0xff
    5c74:	0409      	lsls	r1, r1, #16
    5c76:	430a      	orrs	r2, r1
    5c78:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5c7a:	4b0b      	ldr	r3, [pc, #44]	; (5ca8 <xPortStartScheduler+0x40>)
    5c7c:	4a0a      	ldr	r2, [pc, #40]	; (5ca8 <xPortStartScheduler+0x40>)
    5c7e:	6812      	ldr	r2, [r2, #0]
    5c80:	21ff      	movs	r1, #255	; 0xff
    5c82:	0609      	lsls	r1, r1, #24
    5c84:	430a      	orrs	r2, r1
    5c86:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5c88:	4b08      	ldr	r3, [pc, #32]	; (5cac <xPortStartScheduler+0x44>)
    5c8a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5c8c:	4b08      	ldr	r3, [pc, #32]	; (5cb0 <xPortStartScheduler+0x48>)
    5c8e:	2200      	movs	r2, #0
    5c90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    5c92:	4b08      	ldr	r3, [pc, #32]	; (5cb4 <xPortStartScheduler+0x4c>)
    5c94:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    5c96:	4b08      	ldr	r3, [pc, #32]	; (5cb8 <xPortStartScheduler+0x50>)
    5c98:	4798      	blx	r3
	prvTaskExitError();
    5c9a:	4b08      	ldr	r3, [pc, #32]	; (5cbc <xPortStartScheduler+0x54>)
    5c9c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    5c9e:	2300      	movs	r3, #0
}
    5ca0:	0018      	movs	r0, r3
    5ca2:	46bd      	mov	sp, r7
    5ca4:	bd80      	pop	{r7, pc}
    5ca6:	46c0      	nop			; (mov r8, r8)
    5ca8:	e000ed20 	.word	0xe000ed20
    5cac:	00005dc9 	.word	0x00005dc9
    5cb0:	200000f8 	.word	0x200000f8
    5cb4:	00005c31 	.word	0x00005c31
    5cb8:	00008329 	.word	0x00008329
    5cbc:	00005bf5 	.word	0x00005bf5

00005cc0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    5cc0:	b580      	push	{r7, lr}
    5cc2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    5cc4:	4b03      	ldr	r3, [pc, #12]	; (5cd4 <vPortYield+0x14>)
    5cc6:	2280      	movs	r2, #128	; 0x80
    5cc8:	0552      	lsls	r2, r2, #21
    5cca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
    5ccc:	46c0      	nop			; (mov r8, r8)
    5cce:	46bd      	mov	sp, r7
    5cd0:	bd80      	pop	{r7, pc}
    5cd2:	46c0      	nop			; (mov r8, r8)
    5cd4:	e000ed04 	.word	0xe000ed04

00005cd8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5cd8:	b580      	push	{r7, lr}
    5cda:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    5cdc:	b672      	cpsid	i
    uxCriticalNesting++;
    5cde:	4b06      	ldr	r3, [pc, #24]	; (5cf8 <vPortEnterCritical+0x20>)
    5ce0:	681b      	ldr	r3, [r3, #0]
    5ce2:	1c5a      	adds	r2, r3, #1
    5ce4:	4b04      	ldr	r3, [pc, #16]	; (5cf8 <vPortEnterCritical+0x20>)
    5ce6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    5ce8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    5cec:	f3bf 8f6f 	isb	sy
}
    5cf0:	46c0      	nop			; (mov r8, r8)
    5cf2:	46bd      	mov	sp, r7
    5cf4:	bd80      	pop	{r7, pc}
    5cf6:	46c0      	nop			; (mov r8, r8)
    5cf8:	200000f8 	.word	0x200000f8

00005cfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5cfc:	b580      	push	{r7, lr}
    5cfe:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    5d00:	4b09      	ldr	r3, [pc, #36]	; (5d28 <vPortExitCritical+0x2c>)
    5d02:	681b      	ldr	r3, [r3, #0]
    5d04:	2b00      	cmp	r3, #0
    5d06:	d101      	bne.n	5d0c <vPortExitCritical+0x10>
    5d08:	b672      	cpsid	i
    5d0a:	e7fe      	b.n	5d0a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    5d0c:	4b06      	ldr	r3, [pc, #24]	; (5d28 <vPortExitCritical+0x2c>)
    5d0e:	681b      	ldr	r3, [r3, #0]
    5d10:	1e5a      	subs	r2, r3, #1
    5d12:	4b05      	ldr	r3, [pc, #20]	; (5d28 <vPortExitCritical+0x2c>)
    5d14:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    5d16:	4b04      	ldr	r3, [pc, #16]	; (5d28 <vPortExitCritical+0x2c>)
    5d18:	681b      	ldr	r3, [r3, #0]
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d100      	bne.n	5d20 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    5d1e:	b662      	cpsie	i
    }
}
    5d20:	46c0      	nop			; (mov r8, r8)
    5d22:	46bd      	mov	sp, r7
    5d24:	bd80      	pop	{r7, pc}
    5d26:	46c0      	nop			; (mov r8, r8)
    5d28:	200000f8 	.word	0x200000f8

00005d2c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    5d2c:	f3ef 8010 	mrs	r0, PRIMASK
    5d30:	b672      	cpsid	i
    5d32:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    5d34:	46c0      	nop			; (mov r8, r8)
    5d36:	0018      	movs	r0, r3

00005d38 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    5d38:	f380 8810 	msr	PRIMASK, r0
    5d3c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    5d3e:	46c0      	nop			; (mov r8, r8)

00005d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5d40:	f3ef 8009 	mrs	r0, PSP
    5d44:	4b0e      	ldr	r3, [pc, #56]	; (5d80 <pxCurrentTCBConst>)
    5d46:	681a      	ldr	r2, [r3, #0]
    5d48:	3820      	subs	r0, #32
    5d4a:	6010      	str	r0, [r2, #0]
    5d4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    5d4e:	4644      	mov	r4, r8
    5d50:	464d      	mov	r5, r9
    5d52:	4656      	mov	r6, sl
    5d54:	465f      	mov	r7, fp
    5d56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    5d58:	b508      	push	{r3, lr}
    5d5a:	b672      	cpsid	i
    5d5c:	f002 fae4 	bl	8328 <vTaskSwitchContext>
    5d60:	b662      	cpsie	i
    5d62:	bc0c      	pop	{r2, r3}
    5d64:	6811      	ldr	r1, [r2, #0]
    5d66:	6808      	ldr	r0, [r1, #0]
    5d68:	3010      	adds	r0, #16
    5d6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    5d6c:	46a0      	mov	r8, r4
    5d6e:	46a9      	mov	r9, r5
    5d70:	46b2      	mov	sl, r6
    5d72:	46bb      	mov	fp, r7
    5d74:	f380 8809 	msr	PSP, r0
    5d78:	3820      	subs	r0, #32
    5d7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    5d7c:	4718      	bx	r3
    5d7e:	46c0      	nop			; (mov r8, r8)

00005d80 <pxCurrentTCBConst>:
    5d80:	20003b44 	.word	0x20003b44
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    5d84:	46c0      	nop			; (mov r8, r8)
    5d86:	46c0      	nop			; (mov r8, r8)

00005d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b082      	sub	sp, #8
    5d8c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    5d8e:	4b0a      	ldr	r3, [pc, #40]	; (5db8 <SysTick_Handler+0x30>)
    5d90:	4798      	blx	r3
    5d92:	0003      	movs	r3, r0
    5d94:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    5d96:	4b09      	ldr	r3, [pc, #36]	; (5dbc <SysTick_Handler+0x34>)
    5d98:	4798      	blx	r3
    5d9a:	1e03      	subs	r3, r0, #0
    5d9c:	d003      	beq.n	5da6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5d9e:	4b08      	ldr	r3, [pc, #32]	; (5dc0 <SysTick_Handler+0x38>)
    5da0:	2280      	movs	r2, #128	; 0x80
    5da2:	0552      	lsls	r2, r2, #21
    5da4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    5da6:	687b      	ldr	r3, [r7, #4]
    5da8:	0018      	movs	r0, r3
    5daa:	4b06      	ldr	r3, [pc, #24]	; (5dc4 <SysTick_Handler+0x3c>)
    5dac:	4798      	blx	r3
}
    5dae:	46c0      	nop			; (mov r8, r8)
    5db0:	46bd      	mov	sp, r7
    5db2:	b002      	add	sp, #8
    5db4:	bd80      	pop	{r7, pc}
    5db6:	46c0      	nop			; (mov r8, r8)
    5db8:	00005d2d 	.word	0x00005d2d
    5dbc:	00008139 	.word	0x00008139
    5dc0:	e000ed04 	.word	0xe000ed04
    5dc4:	00005d39 	.word	0x00005d39

00005dc8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5dc8:	b5b0      	push	{r4, r5, r7, lr}
    5dca:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    5dcc:	4b0b      	ldr	r3, [pc, #44]	; (5dfc <prvSetupTimerInterrupt+0x34>)
    5dce:	2200      	movs	r2, #0
    5dd0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    5dd2:	4b0b      	ldr	r3, [pc, #44]	; (5e00 <prvSetupTimerInterrupt+0x38>)
    5dd4:	2200      	movs	r2, #0
    5dd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5dd8:	4c0a      	ldr	r4, [pc, #40]	; (5e04 <prvSetupTimerInterrupt+0x3c>)
    5dda:	2000      	movs	r0, #0
    5ddc:	4b0a      	ldr	r3, [pc, #40]	; (5e08 <prvSetupTimerInterrupt+0x40>)
    5dde:	4798      	blx	r3
    5de0:	4b0a      	ldr	r3, [pc, #40]	; (5e0c <prvSetupTimerInterrupt+0x44>)
    5de2:	22fa      	movs	r2, #250	; 0xfa
    5de4:	0091      	lsls	r1, r2, #2
    5de6:	4798      	blx	r3
    5de8:	0003      	movs	r3, r0
    5dea:	3b01      	subs	r3, #1
    5dec:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5dee:	4b03      	ldr	r3, [pc, #12]	; (5dfc <prvSetupTimerInterrupt+0x34>)
    5df0:	2207      	movs	r2, #7
    5df2:	601a      	str	r2, [r3, #0]
}
    5df4:	46c0      	nop			; (mov r8, r8)
    5df6:	46bd      	mov	sp, r7
    5df8:	bdb0      	pop	{r4, r5, r7, pc}
    5dfa:	46c0      	nop			; (mov r8, r8)
    5dfc:	e000e010 	.word	0xe000e010
    5e00:	e000e018 	.word	0xe000e018
    5e04:	e000e014 	.word	0xe000e014
    5e08:	00015925 	.word	0x00015925
    5e0c:	0001e469 	.word	0x0001e469

00005e10 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5e10:	b580      	push	{r7, lr}
    5e12:	b084      	sub	sp, #16
    5e14:	af00      	add	r7, sp, #0
    5e16:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    5e18:	2300      	movs	r3, #0
    5e1a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5e1c:	687b      	ldr	r3, [r7, #4]
    5e1e:	2207      	movs	r2, #7
    5e20:	4013      	ands	r3, r2
    5e22:	d004      	beq.n	5e2e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5e24:	687b      	ldr	r3, [r7, #4]
    5e26:	2207      	movs	r2, #7
    5e28:	4393      	bics	r3, r2
    5e2a:	3308      	adds	r3, #8
    5e2c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    5e2e:	4b21      	ldr	r3, [pc, #132]	; (5eb4 <pvPortMalloc+0xa4>)
    5e30:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    5e32:	4b21      	ldr	r3, [pc, #132]	; (5eb8 <pvPortMalloc+0xa8>)
    5e34:	681b      	ldr	r3, [r3, #0]
    5e36:	2b00      	cmp	r3, #0
    5e38:	d105      	bne.n	5e46 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    5e3a:	4b20      	ldr	r3, [pc, #128]	; (5ebc <pvPortMalloc+0xac>)
    5e3c:	2207      	movs	r2, #7
    5e3e:	4393      	bics	r3, r2
    5e40:	001a      	movs	r2, r3
    5e42:	4b1d      	ldr	r3, [pc, #116]	; (5eb8 <pvPortMalloc+0xa8>)
    5e44:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    5e46:	4b1e      	ldr	r3, [pc, #120]	; (5ec0 <pvPortMalloc+0xb0>)
    5e48:	681a      	ldr	r2, [r3, #0]
    5e4a:	687b      	ldr	r3, [r7, #4]
    5e4c:	18d3      	adds	r3, r2, r3
    5e4e:	4a1d      	ldr	r2, [pc, #116]	; (5ec4 <pvPortMalloc+0xb4>)
    5e50:	4293      	cmp	r3, r2
    5e52:	d813      	bhi.n	5e7c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    5e54:	4b1a      	ldr	r3, [pc, #104]	; (5ec0 <pvPortMalloc+0xb0>)
    5e56:	681a      	ldr	r2, [r3, #0]
    5e58:	687b      	ldr	r3, [r7, #4]
    5e5a:	18d2      	adds	r2, r2, r3
    5e5c:	4b18      	ldr	r3, [pc, #96]	; (5ec0 <pvPortMalloc+0xb0>)
    5e5e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    5e60:	429a      	cmp	r2, r3
    5e62:	d90b      	bls.n	5e7c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    5e64:	4b14      	ldr	r3, [pc, #80]	; (5eb8 <pvPortMalloc+0xa8>)
    5e66:	681a      	ldr	r2, [r3, #0]
    5e68:	4b15      	ldr	r3, [pc, #84]	; (5ec0 <pvPortMalloc+0xb0>)
    5e6a:	681b      	ldr	r3, [r3, #0]
    5e6c:	18d3      	adds	r3, r2, r3
    5e6e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    5e70:	4b13      	ldr	r3, [pc, #76]	; (5ec0 <pvPortMalloc+0xb0>)
    5e72:	681a      	ldr	r2, [r3, #0]
    5e74:	687b      	ldr	r3, [r7, #4]
    5e76:	18d2      	adds	r2, r2, r3
    5e78:	4b11      	ldr	r3, [pc, #68]	; (5ec0 <pvPortMalloc+0xb0>)
    5e7a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    5e7c:	68fb      	ldr	r3, [r7, #12]
    5e7e:	2b00      	cmp	r3, #0
    5e80:	d006      	beq.n	5e90 <pvPortMalloc+0x80>
    5e82:	68fb      	ldr	r3, [r7, #12]
    5e84:	687a      	ldr	r2, [r7, #4]
    5e86:	0019      	movs	r1, r3
    5e88:	2094      	movs	r0, #148	; 0x94
    5e8a:	4b0f      	ldr	r3, [pc, #60]	; (5ec8 <pvPortMalloc+0xb8>)
    5e8c:	4798      	blx	r3
    5e8e:	e005      	b.n	5e9c <pvPortMalloc+0x8c>
    5e90:	68fb      	ldr	r3, [r7, #12]
    5e92:	687a      	ldr	r2, [r7, #4]
    5e94:	0019      	movs	r1, r3
    5e96:	20e8      	movs	r0, #232	; 0xe8
    5e98:	4b0b      	ldr	r3, [pc, #44]	; (5ec8 <pvPortMalloc+0xb8>)
    5e9a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    5e9c:	4b0b      	ldr	r3, [pc, #44]	; (5ecc <pvPortMalloc+0xbc>)
    5e9e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    5ea0:	68fb      	ldr	r3, [r7, #12]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d101      	bne.n	5eaa <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    5ea6:	4b0a      	ldr	r3, [pc, #40]	; (5ed0 <pvPortMalloc+0xc0>)
    5ea8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    5eaa:	68fb      	ldr	r3, [r7, #12]
}
    5eac:	0018      	movs	r0, r3
    5eae:	46bd      	mov	sp, r7
    5eb0:	b004      	add	sp, #16
    5eb2:	bd80      	pop	{r7, pc}
    5eb4:	00007f95 	.word	0x00007f95
    5eb8:	20003b40 	.word	0x20003b40
    5ebc:	20000c64 	.word	0x20000c64
    5ec0:	20003b3c 	.word	0x20003b3c
    5ec4:	00002ed7 	.word	0x00002ed7
    5ec8:	0000457d 	.word	0x0000457d
    5ecc:	00007fad 	.word	0x00007fad
    5ed0:	0001e439 	.word	0x0001e439

00005ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5ed4:	b580      	push	{r7, lr}
    5ed6:	b082      	sub	sp, #8
    5ed8:	af00      	add	r7, sp, #0
    5eda:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    5edc:	687b      	ldr	r3, [r7, #4]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d001      	beq.n	5ee6 <vPortFree+0x12>
    5ee2:	b672      	cpsid	i
    5ee4:	e7fe      	b.n	5ee4 <vPortFree+0x10>
}
    5ee6:	46c0      	nop			; (mov r8, r8)
    5ee8:	46bd      	mov	sp, r7
    5eea:	b002      	add	sp, #8
    5eec:	bd80      	pop	{r7, pc}
	...

00005ef0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5ef0:	b580      	push	{r7, lr}
    5ef2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    5ef4:	4b03      	ldr	r3, [pc, #12]	; (5f04 <xPortGetFreeHeapSize+0x14>)
    5ef6:	681b      	ldr	r3, [r3, #0]
    5ef8:	4a03      	ldr	r2, [pc, #12]	; (5f08 <xPortGetFreeHeapSize+0x18>)
    5efa:	1ad3      	subs	r3, r2, r3
}
    5efc:	0018      	movs	r0, r3
    5efe:	46bd      	mov	sp, r7
    5f00:	bd80      	pop	{r7, pc}
    5f02:	46c0      	nop			; (mov r8, r8)
    5f04:	20003b3c 	.word	0x20003b3c
    5f08:	00002ed8 	.word	0x00002ed8

00005f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    5f0c:	b580      	push	{r7, lr}
    5f0e:	b084      	sub	sp, #16
    5f10:	af00      	add	r7, sp, #0
    5f12:	6078      	str	r0, [r7, #4]
    5f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    5f1a:	68fb      	ldr	r3, [r7, #12]
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d101      	bne.n	5f24 <xQueueGenericReset+0x18>
    5f20:	b672      	cpsid	i
    5f22:	e7fe      	b.n	5f22 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    5f24:	4b23      	ldr	r3, [pc, #140]	; (5fb4 <xQueueGenericReset+0xa8>)
    5f26:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    5f28:	68fb      	ldr	r3, [r7, #12]
    5f2a:	681a      	ldr	r2, [r3, #0]
    5f2c:	68fb      	ldr	r3, [r7, #12]
    5f2e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    5f30:	68fb      	ldr	r3, [r7, #12]
    5f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5f34:	434b      	muls	r3, r1
    5f36:	18d2      	adds	r2, r2, r3
    5f38:	68fb      	ldr	r3, [r7, #12]
    5f3a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    5f3c:	68fb      	ldr	r3, [r7, #12]
    5f3e:	2200      	movs	r2, #0
    5f40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    5f42:	68fb      	ldr	r3, [r7, #12]
    5f44:	681a      	ldr	r2, [r3, #0]
    5f46:	68fb      	ldr	r3, [r7, #12]
    5f48:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    5f4a:	68fb      	ldr	r3, [r7, #12]
    5f4c:	681a      	ldr	r2, [r3, #0]
    5f4e:	68fb      	ldr	r3, [r7, #12]
    5f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5f52:	1e59      	subs	r1, r3, #1
    5f54:	68fb      	ldr	r3, [r7, #12]
    5f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5f58:	434b      	muls	r3, r1
    5f5a:	18d2      	adds	r2, r2, r3
    5f5c:	68fb      	ldr	r3, [r7, #12]
    5f5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    5f60:	68fb      	ldr	r3, [r7, #12]
    5f62:	2244      	movs	r2, #68	; 0x44
    5f64:	21ff      	movs	r1, #255	; 0xff
    5f66:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    5f68:	68fb      	ldr	r3, [r7, #12]
    5f6a:	2245      	movs	r2, #69	; 0x45
    5f6c:	21ff      	movs	r1, #255	; 0xff
    5f6e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    5f70:	683b      	ldr	r3, [r7, #0]
    5f72:	2b00      	cmp	r3, #0
    5f74:	d10d      	bne.n	5f92 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5f76:	68fb      	ldr	r3, [r7, #12]
    5f78:	691b      	ldr	r3, [r3, #16]
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d013      	beq.n	5fa6 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5f7e:	68fb      	ldr	r3, [r7, #12]
    5f80:	3310      	adds	r3, #16
    5f82:	0018      	movs	r0, r3
    5f84:	4b0c      	ldr	r3, [pc, #48]	; (5fb8 <xQueueGenericReset+0xac>)
    5f86:	4798      	blx	r3
    5f88:	1e03      	subs	r3, r0, #0
    5f8a:	d00c      	beq.n	5fa6 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    5f8c:	4b0b      	ldr	r3, [pc, #44]	; (5fbc <xQueueGenericReset+0xb0>)
    5f8e:	4798      	blx	r3
    5f90:	e009      	b.n	5fa6 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    5f92:	68fb      	ldr	r3, [r7, #12]
    5f94:	3310      	adds	r3, #16
    5f96:	0018      	movs	r0, r3
    5f98:	4b09      	ldr	r3, [pc, #36]	; (5fc0 <xQueueGenericReset+0xb4>)
    5f9a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    5f9c:	68fb      	ldr	r3, [r7, #12]
    5f9e:	3324      	adds	r3, #36	; 0x24
    5fa0:	0018      	movs	r0, r3
    5fa2:	4b07      	ldr	r3, [pc, #28]	; (5fc0 <xQueueGenericReset+0xb4>)
    5fa4:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    5fa6:	4b07      	ldr	r3, [pc, #28]	; (5fc4 <xQueueGenericReset+0xb8>)
    5fa8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    5faa:	2301      	movs	r3, #1
}
    5fac:	0018      	movs	r0, r3
    5fae:	46bd      	mov	sp, r7
    5fb0:	b004      	add	sp, #16
    5fb2:	bd80      	pop	{r7, pc}
    5fb4:	00005cd9 	.word	0x00005cd9
    5fb8:	0000856d 	.word	0x0000856d
    5fbc:	00005cc1 	.word	0x00005cc1
    5fc0:	00005a4d 	.word	0x00005a4d
    5fc4:	00005cfd 	.word	0x00005cfd

00005fc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    5fc8:	b590      	push	{r4, r7, lr}
    5fca:	b08b      	sub	sp, #44	; 0x2c
    5fcc:	af02      	add	r7, sp, #8
    5fce:	60f8      	str	r0, [r7, #12]
    5fd0:	60b9      	str	r1, [r7, #8]
    5fd2:	1dfb      	adds	r3, r7, #7
    5fd4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    5fd6:	68fb      	ldr	r3, [r7, #12]
    5fd8:	2b00      	cmp	r3, #0
    5fda:	d101      	bne.n	5fe0 <xQueueGenericCreate+0x18>
    5fdc:	b672      	cpsid	i
    5fde:	e7fe      	b.n	5fde <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    5fe0:	68bb      	ldr	r3, [r7, #8]
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d102      	bne.n	5fec <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    5fe6:	2300      	movs	r3, #0
    5fe8:	61fb      	str	r3, [r7, #28]
    5fea:	e003      	b.n	5ff4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5fec:	68fb      	ldr	r3, [r7, #12]
    5fee:	68ba      	ldr	r2, [r7, #8]
    5ff0:	4353      	muls	r3, r2
    5ff2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    5ff4:	69fb      	ldr	r3, [r7, #28]
    5ff6:	3354      	adds	r3, #84	; 0x54
    5ff8:	0018      	movs	r0, r3
    5ffa:	4b19      	ldr	r3, [pc, #100]	; (6060 <xQueueGenericCreate+0x98>)
    5ffc:	4798      	blx	r3
    5ffe:	0003      	movs	r3, r0
    6000:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    6002:	69bb      	ldr	r3, [r7, #24]
    6004:	2b00      	cmp	r3, #0
    6006:	d00d      	beq.n	6024 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    6008:	69bb      	ldr	r3, [r7, #24]
    600a:	3354      	adds	r3, #84	; 0x54
    600c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    600e:	1dfb      	adds	r3, r7, #7
    6010:	781c      	ldrb	r4, [r3, #0]
    6012:	697a      	ldr	r2, [r7, #20]
    6014:	68b9      	ldr	r1, [r7, #8]
    6016:	68f8      	ldr	r0, [r7, #12]
    6018:	69bb      	ldr	r3, [r7, #24]
    601a:	9300      	str	r3, [sp, #0]
    601c:	0023      	movs	r3, r4
    601e:	4c11      	ldr	r4, [pc, #68]	; (6064 <xQueueGenericCreate+0x9c>)
    6020:	47a0      	blx	r4
    6022:	e017      	b.n	6054 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
    6024:	4b10      	ldr	r3, [pc, #64]	; (6068 <xQueueGenericCreate+0xa0>)
    6026:	4798      	blx	r3
    6028:	0003      	movs	r3, r0
    602a:	0018      	movs	r0, r3
    602c:	4b0f      	ldr	r3, [pc, #60]	; (606c <xQueueGenericCreate+0xa4>)
    602e:	4798      	blx	r3
    6030:	0003      	movs	r3, r0
    6032:	001a      	movs	r2, r3
    6034:	4b0e      	ldr	r3, [pc, #56]	; (6070 <xQueueGenericCreate+0xa8>)
    6036:	881b      	ldrh	r3, [r3, #0]
    6038:	4013      	ands	r3, r2
    603a:	b29b      	uxth	r3, r3
    603c:	2b00      	cmp	r3, #0
    603e:	d009      	beq.n	6054 <xQueueGenericCreate+0x8c>
    6040:	1dfb      	adds	r3, r7, #7
    6042:	781b      	ldrb	r3, [r3, #0]
    6044:	4a0b      	ldr	r2, [pc, #44]	; (6074 <xQueueGenericCreate+0xac>)
    6046:	5cd3      	ldrb	r3, [r2, r3]
    6048:	3340      	adds	r3, #64	; 0x40
    604a:	b2db      	uxtb	r3, r3
    604c:	2100      	movs	r1, #0
    604e:	0018      	movs	r0, r3
    6050:	4b09      	ldr	r3, [pc, #36]	; (6078 <xQueueGenericCreate+0xb0>)
    6052:	4798      	blx	r3
		}

		return pxNewQueue;
    6054:	69bb      	ldr	r3, [r7, #24]
	}
    6056:	0018      	movs	r0, r3
    6058:	46bd      	mov	sp, r7
    605a:	b009      	add	sp, #36	; 0x24
    605c:	bd90      	pop	{r4, r7, pc}
    605e:	46c0      	nop			; (mov r8, r8)
    6060:	00005e11 	.word	0x00005e11
    6064:	0000607d 	.word	0x0000607d
    6068:	00003f71 	.word	0x00003f71
    606c:	00003cd5 	.word	0x00003cd5
    6070:	200000f4 	.word	0x200000f4
    6074:	200000e8 	.word	0x200000e8
    6078:	000049d5 	.word	0x000049d5

0000607c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    607c:	b5b0      	push	{r4, r5, r7, lr}
    607e:	b084      	sub	sp, #16
    6080:	af00      	add	r7, sp, #0
    6082:	60f8      	str	r0, [r7, #12]
    6084:	60b9      	str	r1, [r7, #8]
    6086:	607a      	str	r2, [r7, #4]
    6088:	001a      	movs	r2, r3
    608a:	1cfb      	adds	r3, r7, #3
    608c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    608e:	68bb      	ldr	r3, [r7, #8]
    6090:	2b00      	cmp	r3, #0
    6092:	d103      	bne.n	609c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    6094:	6a3b      	ldr	r3, [r7, #32]
    6096:	6a3a      	ldr	r2, [r7, #32]
    6098:	601a      	str	r2, [r3, #0]
    609a:	e002      	b.n	60a2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    609c:	6a3b      	ldr	r3, [r7, #32]
    609e:	687a      	ldr	r2, [r7, #4]
    60a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    60a2:	6a3b      	ldr	r3, [r7, #32]
    60a4:	68fa      	ldr	r2, [r7, #12]
    60a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    60a8:	6a3b      	ldr	r3, [r7, #32]
    60aa:	68ba      	ldr	r2, [r7, #8]
    60ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    60ae:	6a3b      	ldr	r3, [r7, #32]
    60b0:	2101      	movs	r1, #1
    60b2:	0018      	movs	r0, r3
    60b4:	4b41      	ldr	r3, [pc, #260]	; (61bc <prvInitialiseNewQueue+0x140>)
    60b6:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    60b8:	6a3b      	ldr	r3, [r7, #32]
    60ba:	1cfa      	adds	r2, r7, #3
    60bc:	2150      	movs	r1, #80	; 0x50
    60be:	7812      	ldrb	r2, [r2, #0]
    60c0:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    60c2:	6a3b      	ldr	r3, [r7, #32]
    60c4:	2200      	movs	r2, #0
    60c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
    60c8:	6a3b      	ldr	r3, [r7, #32]
    60ca:	0018      	movs	r0, r3
    60cc:	4b3c      	ldr	r3, [pc, #240]	; (61c0 <prvInitialiseNewQueue+0x144>)
    60ce:	4798      	blx	r3
    60d0:	0003      	movs	r3, r0
    60d2:	001a      	movs	r2, r3
    60d4:	4b3b      	ldr	r3, [pc, #236]	; (61c4 <prvInitialiseNewQueue+0x148>)
    60d6:	5c9b      	ldrb	r3, [r3, r2]
    60d8:	0018      	movs	r0, r3
    60da:	4b3b      	ldr	r3, [pc, #236]	; (61c8 <prvInitialiseNewQueue+0x14c>)
    60dc:	4798      	blx	r3
    60de:	0003      	movs	r3, r0
    60e0:	b29a      	uxth	r2, r3
    60e2:	6a3b      	ldr	r3, [r7, #32]
    60e4:	0011      	movs	r1, r2
    60e6:	0018      	movs	r0, r3
    60e8:	4b38      	ldr	r3, [pc, #224]	; (61cc <prvInitialiseNewQueue+0x150>)
    60ea:	4798      	blx	r3
    60ec:	4b38      	ldr	r3, [pc, #224]	; (61d0 <prvInitialiseNewQueue+0x154>)
    60ee:	881a      	ldrh	r2, [r3, #0]
    60f0:	6a3b      	ldr	r3, [r7, #32]
    60f2:	0011      	movs	r1, r2
    60f4:	0018      	movs	r0, r3
    60f6:	4b37      	ldr	r3, [pc, #220]	; (61d4 <prvInitialiseNewQueue+0x158>)
    60f8:	4798      	blx	r3
    60fa:	6a3b      	ldr	r3, [r7, #32]
    60fc:	0018      	movs	r0, r3
    60fe:	4b30      	ldr	r3, [pc, #192]	; (61c0 <prvInitialiseNewQueue+0x144>)
    6100:	4798      	blx	r3
    6102:	0003      	movs	r3, r0
    6104:	001a      	movs	r2, r3
    6106:	4b2f      	ldr	r3, [pc, #188]	; (61c4 <prvInitialiseNewQueue+0x148>)
    6108:	5c9c      	ldrb	r4, [r3, r2]
    610a:	6a3b      	ldr	r3, [r7, #32]
    610c:	0018      	movs	r0, r3
    610e:	4b32      	ldr	r3, [pc, #200]	; (61d8 <prvInitialiseNewQueue+0x15c>)
    6110:	4798      	blx	r3
    6112:	0003      	movs	r3, r0
    6114:	b2db      	uxtb	r3, r3
    6116:	0019      	movs	r1, r3
    6118:	0020      	movs	r0, r4
    611a:	4b30      	ldr	r3, [pc, #192]	; (61dc <prvInitialiseNewQueue+0x160>)
    611c:	4798      	blx	r3
    611e:	4b30      	ldr	r3, [pc, #192]	; (61e0 <prvInitialiseNewQueue+0x164>)
    6120:	4798      	blx	r3
    6122:	0003      	movs	r3, r0
    6124:	0018      	movs	r0, r3
    6126:	4b2f      	ldr	r3, [pc, #188]	; (61e4 <prvInitialiseNewQueue+0x168>)
    6128:	4798      	blx	r3
    612a:	0003      	movs	r3, r0
    612c:	001a      	movs	r2, r3
    612e:	4b2e      	ldr	r3, [pc, #184]	; (61e8 <prvInitialiseNewQueue+0x16c>)
    6130:	881b      	ldrh	r3, [r3, #0]
    6132:	4013      	ands	r3, r2
    6134:	b29b      	uxth	r3, r3
    6136:	2b00      	cmp	r3, #0
    6138:	d029      	beq.n	618e <prvInitialiseNewQueue+0x112>
    613a:	6a3b      	ldr	r3, [r7, #32]
    613c:	0018      	movs	r0, r3
    613e:	4b2b      	ldr	r3, [pc, #172]	; (61ec <prvInitialiseNewQueue+0x170>)
    6140:	4798      	blx	r3
    6142:	0003      	movs	r3, r0
    6144:	001a      	movs	r2, r3
    6146:	4b28      	ldr	r3, [pc, #160]	; (61e8 <prvInitialiseNewQueue+0x16c>)
    6148:	881b      	ldrh	r3, [r3, #0]
    614a:	4013      	ands	r3, r2
    614c:	b29b      	uxth	r3, r3
    614e:	2b00      	cmp	r3, #0
    6150:	d01d      	beq.n	618e <prvInitialiseNewQueue+0x112>
    6152:	6a3b      	ldr	r3, [r7, #32]
    6154:	0018      	movs	r0, r3
    6156:	4b1a      	ldr	r3, [pc, #104]	; (61c0 <prvInitialiseNewQueue+0x144>)
    6158:	4798      	blx	r3
    615a:	0003      	movs	r3, r0
    615c:	001a      	movs	r2, r3
    615e:	4b19      	ldr	r3, [pc, #100]	; (61c4 <prvInitialiseNewQueue+0x148>)
    6160:	5c9b      	ldrb	r3, [r3, r2]
    6162:	3318      	adds	r3, #24
    6164:	b2db      	uxtb	r3, r3
    6166:	001d      	movs	r5, r3
    6168:	6a3b      	ldr	r3, [r7, #32]
    616a:	0018      	movs	r0, r3
    616c:	4b14      	ldr	r3, [pc, #80]	; (61c0 <prvInitialiseNewQueue+0x144>)
    616e:	4798      	blx	r3
    6170:	0003      	movs	r3, r0
    6172:	001a      	movs	r2, r3
    6174:	4b13      	ldr	r3, [pc, #76]	; (61c4 <prvInitialiseNewQueue+0x148>)
    6176:	5c9c      	ldrb	r4, [r3, r2]
    6178:	6a3b      	ldr	r3, [r7, #32]
    617a:	0018      	movs	r0, r3
    617c:	4b16      	ldr	r3, [pc, #88]	; (61d8 <prvInitialiseNewQueue+0x15c>)
    617e:	4798      	blx	r3
    6180:	0003      	movs	r3, r0
    6182:	b2db      	uxtb	r3, r3
    6184:	001a      	movs	r2, r3
    6186:	0021      	movs	r1, r4
    6188:	0028      	movs	r0, r5
    618a:	4b19      	ldr	r3, [pc, #100]	; (61f0 <prvInitialiseNewQueue+0x174>)
    618c:	4798      	blx	r3
    618e:	6a3b      	ldr	r3, [r7, #32]
    6190:	0018      	movs	r0, r3
    6192:	4b0b      	ldr	r3, [pc, #44]	; (61c0 <prvInitialiseNewQueue+0x144>)
    6194:	4798      	blx	r3
    6196:	0003      	movs	r3, r0
    6198:	001a      	movs	r2, r3
    619a:	4b0a      	ldr	r3, [pc, #40]	; (61c4 <prvInitialiseNewQueue+0x148>)
    619c:	5c9c      	ldrb	r4, [r3, r2]
    619e:	6a3b      	ldr	r3, [r7, #32]
    61a0:	0018      	movs	r0, r3
    61a2:	4b0d      	ldr	r3, [pc, #52]	; (61d8 <prvInitialiseNewQueue+0x15c>)
    61a4:	4798      	blx	r3
    61a6:	0003      	movs	r3, r0
    61a8:	b2db      	uxtb	r3, r3
    61aa:	2200      	movs	r2, #0
    61ac:	0019      	movs	r1, r3
    61ae:	0020      	movs	r0, r4
    61b0:	4b10      	ldr	r3, [pc, #64]	; (61f4 <prvInitialiseNewQueue+0x178>)
    61b2:	4798      	blx	r3
}
    61b4:	46c0      	nop			; (mov r8, r8)
    61b6:	46bd      	mov	sp, r7
    61b8:	b004      	add	sp, #16
    61ba:	bdb0      	pop	{r4, r5, r7, pc}
    61bc:	00005f0d 	.word	0x00005f0d
    61c0:	00003c95 	.word	0x00003c95
    61c4:	200000e8 	.word	0x200000e8
    61c8:	00005255 	.word	0x00005255
    61cc:	00003db9 	.word	0x00003db9
    61d0:	200000f6 	.word	0x200000f6
    61d4:	00003df5 	.word	0x00003df5
    61d8:	00003d75 	.word	0x00003d75
    61dc:	000053ed 	.word	0x000053ed
    61e0:	00003f71 	.word	0x00003f71
    61e4:	00003cd5 	.word	0x00003cd5
    61e8:	200000f4 	.word	0x200000f4
    61ec:	00003d95 	.word	0x00003d95
    61f0:	000046cd 	.word	0x000046cd
    61f4:	00004d29 	.word	0x00004d29

000061f8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    61f8:	b590      	push	{r4, r7, lr}
    61fa:	b083      	sub	sp, #12
    61fc:	af00      	add	r7, sp, #0
    61fe:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    6200:	687b      	ldr	r3, [r7, #4]
    6202:	2b00      	cmp	r3, #0
    6204:	d00e      	beq.n	6224 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    6206:	687b      	ldr	r3, [r7, #4]
    6208:	2200      	movs	r2, #0
    620a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	2200      	movs	r2, #0
    6210:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	2200      	movs	r2, #0
    6216:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    6218:	6878      	ldr	r0, [r7, #4]
    621a:	2300      	movs	r3, #0
    621c:	2200      	movs	r2, #0
    621e:	2100      	movs	r1, #0
    6220:	4c02      	ldr	r4, [pc, #8]	; (622c <prvInitialiseMutex+0x34>)
    6222:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    6224:	46c0      	nop			; (mov r8, r8)
    6226:	46bd      	mov	sp, r7
    6228:	b003      	add	sp, #12
    622a:	bd90      	pop	{r4, r7, pc}
    622c:	00006271 	.word	0x00006271

00006230 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    6230:	b580      	push	{r7, lr}
    6232:	b086      	sub	sp, #24
    6234:	af00      	add	r7, sp, #0
    6236:	0002      	movs	r2, r0
    6238:	1dfb      	adds	r3, r7, #7
    623a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    623c:	2301      	movs	r3, #1
    623e:	617b      	str	r3, [r7, #20]
    6240:	2300      	movs	r3, #0
    6242:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    6244:	1dfb      	adds	r3, r7, #7
    6246:	781a      	ldrb	r2, [r3, #0]
    6248:	6939      	ldr	r1, [r7, #16]
    624a:	697b      	ldr	r3, [r7, #20]
    624c:	0018      	movs	r0, r3
    624e:	4b06      	ldr	r3, [pc, #24]	; (6268 <xQueueCreateMutex+0x38>)
    6250:	4798      	blx	r3
    6252:	0003      	movs	r3, r0
    6254:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    6256:	68fb      	ldr	r3, [r7, #12]
    6258:	0018      	movs	r0, r3
    625a:	4b04      	ldr	r3, [pc, #16]	; (626c <xQueueCreateMutex+0x3c>)
    625c:	4798      	blx	r3

		return pxNewQueue;
    625e:	68fb      	ldr	r3, [r7, #12]
	}
    6260:	0018      	movs	r0, r3
    6262:	46bd      	mov	sp, r7
    6264:	b006      	add	sp, #24
    6266:	bd80      	pop	{r7, pc}
    6268:	00005fc9 	.word	0x00005fc9
    626c:	000061f9 	.word	0x000061f9

00006270 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    6270:	b5b0      	push	{r4, r5, r7, lr}
    6272:	b08a      	sub	sp, #40	; 0x28
    6274:	af00      	add	r7, sp, #0
    6276:	60f8      	str	r0, [r7, #12]
    6278:	60b9      	str	r1, [r7, #8]
    627a:	607a      	str	r2, [r7, #4]
    627c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    627e:	2300      	movs	r3, #0
    6280:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6282:	68fb      	ldr	r3, [r7, #12]
    6284:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    6286:	6a3b      	ldr	r3, [r7, #32]
    6288:	2b00      	cmp	r3, #0
    628a:	d101      	bne.n	6290 <xQueueGenericSend+0x20>
    628c:	b672      	cpsid	i
    628e:	e7fe      	b.n	628e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6290:	68bb      	ldr	r3, [r7, #8]
    6292:	2b00      	cmp	r3, #0
    6294:	d103      	bne.n	629e <xQueueGenericSend+0x2e>
    6296:	6a3b      	ldr	r3, [r7, #32]
    6298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    629a:	2b00      	cmp	r3, #0
    629c:	d101      	bne.n	62a2 <xQueueGenericSend+0x32>
    629e:	2301      	movs	r3, #1
    62a0:	e000      	b.n	62a4 <xQueueGenericSend+0x34>
    62a2:	2300      	movs	r3, #0
    62a4:	2b00      	cmp	r3, #0
    62a6:	d101      	bne.n	62ac <xQueueGenericSend+0x3c>
    62a8:	b672      	cpsid	i
    62aa:	e7fe      	b.n	62aa <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    62ac:	683b      	ldr	r3, [r7, #0]
    62ae:	2b02      	cmp	r3, #2
    62b0:	d103      	bne.n	62ba <xQueueGenericSend+0x4a>
    62b2:	6a3b      	ldr	r3, [r7, #32]
    62b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    62b6:	2b01      	cmp	r3, #1
    62b8:	d101      	bne.n	62be <xQueueGenericSend+0x4e>
    62ba:	2301      	movs	r3, #1
    62bc:	e000      	b.n	62c0 <xQueueGenericSend+0x50>
    62be:	2300      	movs	r3, #0
    62c0:	2b00      	cmp	r3, #0
    62c2:	d101      	bne.n	62c8 <xQueueGenericSend+0x58>
    62c4:	b672      	cpsid	i
    62c6:	e7fe      	b.n	62c6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    62c8:	4bbc      	ldr	r3, [pc, #752]	; (65bc <xQueueGenericSend+0x34c>)
    62ca:	4798      	blx	r3
    62cc:	1e03      	subs	r3, r0, #0
    62ce:	d102      	bne.n	62d6 <xQueueGenericSend+0x66>
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	2b00      	cmp	r3, #0
    62d4:	d101      	bne.n	62da <xQueueGenericSend+0x6a>
    62d6:	2301      	movs	r3, #1
    62d8:	e000      	b.n	62dc <xQueueGenericSend+0x6c>
    62da:	2300      	movs	r3, #0
    62dc:	2b00      	cmp	r3, #0
    62de:	d101      	bne.n	62e4 <xQueueGenericSend+0x74>
    62e0:	b672      	cpsid	i
    62e2:	e7fe      	b.n	62e2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    62e4:	4bb6      	ldr	r3, [pc, #728]	; (65c0 <xQueueGenericSend+0x350>)
    62e6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    62e8:	6a3b      	ldr	r3, [r7, #32]
    62ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    62ec:	6a3b      	ldr	r3, [r7, #32]
    62ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    62f0:	429a      	cmp	r2, r3
    62f2:	d303      	bcc.n	62fc <xQueueGenericSend+0x8c>
    62f4:	683b      	ldr	r3, [r7, #0]
    62f6:	2b02      	cmp	r3, #2
    62f8:	d000      	beq.n	62fc <xQueueGenericSend+0x8c>
    62fa:	e08e      	b.n	641a <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
    62fc:	4bb1      	ldr	r3, [pc, #708]	; (65c4 <xQueueGenericSend+0x354>)
    62fe:	4798      	blx	r3
    6300:	0003      	movs	r3, r0
    6302:	0018      	movs	r0, r3
    6304:	4bb0      	ldr	r3, [pc, #704]	; (65c8 <xQueueGenericSend+0x358>)
    6306:	4798      	blx	r3
    6308:	0003      	movs	r3, r0
    630a:	001a      	movs	r2, r3
    630c:	4baf      	ldr	r3, [pc, #700]	; (65cc <xQueueGenericSend+0x35c>)
    630e:	881b      	ldrh	r3, [r3, #0]
    6310:	4013      	ands	r3, r2
    6312:	b29b      	uxth	r3, r3
    6314:	2b00      	cmp	r3, #0
    6316:	d02e      	beq.n	6376 <xQueueGenericSend+0x106>
    6318:	6a3b      	ldr	r3, [r7, #32]
    631a:	0018      	movs	r0, r3
    631c:	4bac      	ldr	r3, [pc, #688]	; (65d0 <xQueueGenericSend+0x360>)
    631e:	4798      	blx	r3
    6320:	0003      	movs	r3, r0
    6322:	001a      	movs	r2, r3
    6324:	4ba9      	ldr	r3, [pc, #676]	; (65cc <xQueueGenericSend+0x35c>)
    6326:	881b      	ldrh	r3, [r3, #0]
    6328:	4013      	ands	r3, r2
    632a:	b29b      	uxth	r3, r3
    632c:	2b00      	cmp	r3, #0
    632e:	d022      	beq.n	6376 <xQueueGenericSend+0x106>
    6330:	683b      	ldr	r3, [r7, #0]
    6332:	2b00      	cmp	r3, #0
    6334:	d10b      	bne.n	634e <xQueueGenericSend+0xde>
    6336:	6a3b      	ldr	r3, [r7, #32]
    6338:	0018      	movs	r0, r3
    633a:	4ba6      	ldr	r3, [pc, #664]	; (65d4 <xQueueGenericSend+0x364>)
    633c:	4798      	blx	r3
    633e:	0003      	movs	r3, r0
    6340:	001a      	movs	r2, r3
    6342:	4ba5      	ldr	r3, [pc, #660]	; (65d8 <xQueueGenericSend+0x368>)
    6344:	5c9b      	ldrb	r3, [r3, r2]
    6346:	3320      	adds	r3, #32
    6348:	b2db      	uxtb	r3, r3
    634a:	001d      	movs	r5, r3
    634c:	e000      	b.n	6350 <xQueueGenericSend+0xe0>
    634e:	2525      	movs	r5, #37	; 0x25
    6350:	6a3b      	ldr	r3, [r7, #32]
    6352:	0018      	movs	r0, r3
    6354:	4b9f      	ldr	r3, [pc, #636]	; (65d4 <xQueueGenericSend+0x364>)
    6356:	4798      	blx	r3
    6358:	0003      	movs	r3, r0
    635a:	001a      	movs	r2, r3
    635c:	4b9e      	ldr	r3, [pc, #632]	; (65d8 <xQueueGenericSend+0x368>)
    635e:	5c9c      	ldrb	r4, [r3, r2]
    6360:	6a3b      	ldr	r3, [r7, #32]
    6362:	0018      	movs	r0, r3
    6364:	4b9d      	ldr	r3, [pc, #628]	; (65dc <xQueueGenericSend+0x36c>)
    6366:	4798      	blx	r3
    6368:	0003      	movs	r3, r0
    636a:	b2db      	uxtb	r3, r3
    636c:	001a      	movs	r2, r3
    636e:	0021      	movs	r1, r4
    6370:	0028      	movs	r0, r5
    6372:	4b9b      	ldr	r3, [pc, #620]	; (65e0 <xQueueGenericSend+0x370>)
    6374:	4798      	blx	r3
    6376:	6a3b      	ldr	r3, [r7, #32]
    6378:	0018      	movs	r0, r3
    637a:	4b96      	ldr	r3, [pc, #600]	; (65d4 <xQueueGenericSend+0x364>)
    637c:	4798      	blx	r3
    637e:	0003      	movs	r3, r0
    6380:	001a      	movs	r2, r3
    6382:	4b95      	ldr	r3, [pc, #596]	; (65d8 <xQueueGenericSend+0x368>)
    6384:	5c9c      	ldrb	r4, [r3, r2]
    6386:	6a3b      	ldr	r3, [r7, #32]
    6388:	0018      	movs	r0, r3
    638a:	4b94      	ldr	r3, [pc, #592]	; (65dc <xQueueGenericSend+0x36c>)
    638c:	4798      	blx	r3
    638e:	0003      	movs	r3, r0
    6390:	b2dd      	uxtb	r5, r3
    6392:	6a3b      	ldr	r3, [r7, #32]
    6394:	0018      	movs	r0, r3
    6396:	4b8f      	ldr	r3, [pc, #572]	; (65d4 <xQueueGenericSend+0x364>)
    6398:	4798      	blx	r3
    639a:	0003      	movs	r3, r0
    639c:	001a      	movs	r2, r3
    639e:	4b8e      	ldr	r3, [pc, #568]	; (65d8 <xQueueGenericSend+0x368>)
    63a0:	5c9b      	ldrb	r3, [r3, r2]
    63a2:	2b02      	cmp	r3, #2
    63a4:	d005      	beq.n	63b2 <xQueueGenericSend+0x142>
    63a6:	6a3b      	ldr	r3, [r7, #32]
    63a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    63aa:	b2db      	uxtb	r3, r3
    63ac:	3301      	adds	r3, #1
    63ae:	b2db      	uxtb	r3, r3
    63b0:	e000      	b.n	63b4 <xQueueGenericSend+0x144>
    63b2:	2300      	movs	r3, #0
    63b4:	001a      	movs	r2, r3
    63b6:	0029      	movs	r1, r5
    63b8:	0020      	movs	r0, r4
    63ba:	4b8a      	ldr	r3, [pc, #552]	; (65e4 <xQueueGenericSend+0x374>)
    63bc:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    63be:	683a      	ldr	r2, [r7, #0]
    63c0:	68b9      	ldr	r1, [r7, #8]
    63c2:	6a3b      	ldr	r3, [r7, #32]
    63c4:	0018      	movs	r0, r3
    63c6:	4b88      	ldr	r3, [pc, #544]	; (65e8 <xQueueGenericSend+0x378>)
    63c8:	4798      	blx	r3
    63ca:	0003      	movs	r3, r0
    63cc:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    63ce:	6a3b      	ldr	r3, [r7, #32]
    63d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    63d2:	2b00      	cmp	r3, #0
    63d4:	d00a      	beq.n	63ec <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    63d6:	683a      	ldr	r2, [r7, #0]
    63d8:	6a3b      	ldr	r3, [r7, #32]
    63da:	0011      	movs	r1, r2
    63dc:	0018      	movs	r0, r3
    63de:	4b83      	ldr	r3, [pc, #524]	; (65ec <xQueueGenericSend+0x37c>)
    63e0:	4798      	blx	r3
    63e2:	1e03      	subs	r3, r0, #0
    63e4:	d015      	beq.n	6412 <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    63e6:	4b82      	ldr	r3, [pc, #520]	; (65f0 <xQueueGenericSend+0x380>)
    63e8:	4798      	blx	r3
    63ea:	e012      	b.n	6412 <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    63ec:	6a3b      	ldr	r3, [r7, #32]
    63ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    63f0:	2b00      	cmp	r3, #0
    63f2:	d009      	beq.n	6408 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    63f4:	6a3b      	ldr	r3, [r7, #32]
    63f6:	3324      	adds	r3, #36	; 0x24
    63f8:	0018      	movs	r0, r3
    63fa:	4b7e      	ldr	r3, [pc, #504]	; (65f4 <xQueueGenericSend+0x384>)
    63fc:	4798      	blx	r3
    63fe:	1e03      	subs	r3, r0, #0
    6400:	d007      	beq.n	6412 <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    6402:	4b7b      	ldr	r3, [pc, #492]	; (65f0 <xQueueGenericSend+0x380>)
    6404:	4798      	blx	r3
    6406:	e004      	b.n	6412 <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    6408:	69fb      	ldr	r3, [r7, #28]
    640a:	2b00      	cmp	r3, #0
    640c:	d001      	beq.n	6412 <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    640e:	4b78      	ldr	r3, [pc, #480]	; (65f0 <xQueueGenericSend+0x380>)
    6410:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    6412:	4b79      	ldr	r3, [pc, #484]	; (65f8 <xQueueGenericSend+0x388>)
    6414:	4798      	blx	r3
				return pdPASS;
    6416:	2301      	movs	r3, #1
    6418:	e142      	b.n	66a0 <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	2b00      	cmp	r3, #0
    641e:	d140      	bne.n	64a2 <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6420:	4b75      	ldr	r3, [pc, #468]	; (65f8 <xQueueGenericSend+0x388>)
    6422:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    6424:	4b67      	ldr	r3, [pc, #412]	; (65c4 <xQueueGenericSend+0x354>)
    6426:	4798      	blx	r3
    6428:	0003      	movs	r3, r0
    642a:	0018      	movs	r0, r3
    642c:	4b66      	ldr	r3, [pc, #408]	; (65c8 <xQueueGenericSend+0x358>)
    642e:	4798      	blx	r3
    6430:	0003      	movs	r3, r0
    6432:	001a      	movs	r2, r3
    6434:	4b65      	ldr	r3, [pc, #404]	; (65cc <xQueueGenericSend+0x35c>)
    6436:	881b      	ldrh	r3, [r3, #0]
    6438:	4013      	ands	r3, r2
    643a:	b29b      	uxth	r3, r3
    643c:	2b00      	cmp	r3, #0
    643e:	d02e      	beq.n	649e <xQueueGenericSend+0x22e>
    6440:	6a3b      	ldr	r3, [r7, #32]
    6442:	0018      	movs	r0, r3
    6444:	4b62      	ldr	r3, [pc, #392]	; (65d0 <xQueueGenericSend+0x360>)
    6446:	4798      	blx	r3
    6448:	0003      	movs	r3, r0
    644a:	001a      	movs	r2, r3
    644c:	4b5f      	ldr	r3, [pc, #380]	; (65cc <xQueueGenericSend+0x35c>)
    644e:	881b      	ldrh	r3, [r3, #0]
    6450:	4013      	ands	r3, r2
    6452:	b29b      	uxth	r3, r3
    6454:	2b00      	cmp	r3, #0
    6456:	d022      	beq.n	649e <xQueueGenericSend+0x22e>
    6458:	683b      	ldr	r3, [r7, #0]
    645a:	2b00      	cmp	r3, #0
    645c:	d10b      	bne.n	6476 <xQueueGenericSend+0x206>
    645e:	6a3b      	ldr	r3, [r7, #32]
    6460:	0018      	movs	r0, r3
    6462:	4b5c      	ldr	r3, [pc, #368]	; (65d4 <xQueueGenericSend+0x364>)
    6464:	4798      	blx	r3
    6466:	0003      	movs	r3, r0
    6468:	001a      	movs	r2, r3
    646a:	4b5b      	ldr	r3, [pc, #364]	; (65d8 <xQueueGenericSend+0x368>)
    646c:	5c9b      	ldrb	r3, [r3, r2]
    646e:	3348      	adds	r3, #72	; 0x48
    6470:	b2db      	uxtb	r3, r3
    6472:	001d      	movs	r5, r3
    6474:	e000      	b.n	6478 <xQueueGenericSend+0x208>
    6476:	254d      	movs	r5, #77	; 0x4d
    6478:	6a3b      	ldr	r3, [r7, #32]
    647a:	0018      	movs	r0, r3
    647c:	4b55      	ldr	r3, [pc, #340]	; (65d4 <xQueueGenericSend+0x364>)
    647e:	4798      	blx	r3
    6480:	0003      	movs	r3, r0
    6482:	001a      	movs	r2, r3
    6484:	4b54      	ldr	r3, [pc, #336]	; (65d8 <xQueueGenericSend+0x368>)
    6486:	5c9c      	ldrb	r4, [r3, r2]
    6488:	6a3b      	ldr	r3, [r7, #32]
    648a:	0018      	movs	r0, r3
    648c:	4b53      	ldr	r3, [pc, #332]	; (65dc <xQueueGenericSend+0x36c>)
    648e:	4798      	blx	r3
    6490:	0003      	movs	r3, r0
    6492:	b2db      	uxtb	r3, r3
    6494:	001a      	movs	r2, r3
    6496:	0021      	movs	r1, r4
    6498:	0028      	movs	r0, r5
    649a:	4b51      	ldr	r3, [pc, #324]	; (65e0 <xQueueGenericSend+0x370>)
    649c:	4798      	blx	r3
					return errQUEUE_FULL;
    649e:	2300      	movs	r3, #0
    64a0:	e0fe      	b.n	66a0 <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
    64a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    64a4:	2b00      	cmp	r3, #0
    64a6:	d106      	bne.n	64b6 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    64a8:	2314      	movs	r3, #20
    64aa:	18fb      	adds	r3, r7, r3
    64ac:	0018      	movs	r0, r3
    64ae:	4b53      	ldr	r3, [pc, #332]	; (65fc <xQueueGenericSend+0x38c>)
    64b0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    64b2:	2301      	movs	r3, #1
    64b4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    64b6:	4b50      	ldr	r3, [pc, #320]	; (65f8 <xQueueGenericSend+0x388>)
    64b8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    64ba:	4b51      	ldr	r3, [pc, #324]	; (6600 <xQueueGenericSend+0x390>)
    64bc:	4798      	blx	r3
		prvLockQueue( pxQueue );
    64be:	4b40      	ldr	r3, [pc, #256]	; (65c0 <xQueueGenericSend+0x350>)
    64c0:	4798      	blx	r3
    64c2:	6a3b      	ldr	r3, [r7, #32]
    64c4:	2244      	movs	r2, #68	; 0x44
    64c6:	5c9b      	ldrb	r3, [r3, r2]
    64c8:	b25b      	sxtb	r3, r3
    64ca:	3301      	adds	r3, #1
    64cc:	d103      	bne.n	64d6 <xQueueGenericSend+0x266>
    64ce:	6a3b      	ldr	r3, [r7, #32]
    64d0:	2244      	movs	r2, #68	; 0x44
    64d2:	2100      	movs	r1, #0
    64d4:	5499      	strb	r1, [r3, r2]
    64d6:	6a3b      	ldr	r3, [r7, #32]
    64d8:	2245      	movs	r2, #69	; 0x45
    64da:	5c9b      	ldrb	r3, [r3, r2]
    64dc:	b25b      	sxtb	r3, r3
    64de:	3301      	adds	r3, #1
    64e0:	d103      	bne.n	64ea <xQueueGenericSend+0x27a>
    64e2:	6a3b      	ldr	r3, [r7, #32]
    64e4:	2245      	movs	r2, #69	; 0x45
    64e6:	2100      	movs	r1, #0
    64e8:	5499      	strb	r1, [r3, r2]
    64ea:	4b43      	ldr	r3, [pc, #268]	; (65f8 <xQueueGenericSend+0x388>)
    64ec:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    64ee:	1d3a      	adds	r2, r7, #4
    64f0:	2314      	movs	r3, #20
    64f2:	18fb      	adds	r3, r7, r3
    64f4:	0011      	movs	r1, r2
    64f6:	0018      	movs	r0, r3
    64f8:	4b42      	ldr	r3, [pc, #264]	; (6604 <xQueueGenericSend+0x394>)
    64fa:	4798      	blx	r3
    64fc:	1e03      	subs	r3, r0, #0
    64fe:	d000      	beq.n	6502 <xQueueGenericSend+0x292>
    6500:	e08a      	b.n	6618 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    6502:	6a3b      	ldr	r3, [r7, #32]
    6504:	0018      	movs	r0, r3
    6506:	4b40      	ldr	r3, [pc, #256]	; (6608 <xQueueGenericSend+0x398>)
    6508:	4798      	blx	r3
    650a:	1e03      	subs	r3, r0, #0
    650c:	d04f      	beq.n	65ae <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    650e:	4b2d      	ldr	r3, [pc, #180]	; (65c4 <xQueueGenericSend+0x354>)
    6510:	4798      	blx	r3
    6512:	0003      	movs	r3, r0
    6514:	0018      	movs	r0, r3
    6516:	4b2c      	ldr	r3, [pc, #176]	; (65c8 <xQueueGenericSend+0x358>)
    6518:	4798      	blx	r3
    651a:	0003      	movs	r3, r0
    651c:	001a      	movs	r2, r3
    651e:	4b2b      	ldr	r3, [pc, #172]	; (65cc <xQueueGenericSend+0x35c>)
    6520:	881b      	ldrh	r3, [r3, #0]
    6522:	4013      	ands	r3, r2
    6524:	b29b      	uxth	r3, r3
    6526:	2b00      	cmp	r3, #0
    6528:	d02e      	beq.n	6588 <xQueueGenericSend+0x318>
    652a:	6a3b      	ldr	r3, [r7, #32]
    652c:	0018      	movs	r0, r3
    652e:	4b28      	ldr	r3, [pc, #160]	; (65d0 <xQueueGenericSend+0x360>)
    6530:	4798      	blx	r3
    6532:	0003      	movs	r3, r0
    6534:	001a      	movs	r2, r3
    6536:	4b25      	ldr	r3, [pc, #148]	; (65cc <xQueueGenericSend+0x35c>)
    6538:	881b      	ldrh	r3, [r3, #0]
    653a:	4013      	ands	r3, r2
    653c:	b29b      	uxth	r3, r3
    653e:	2b00      	cmp	r3, #0
    6540:	d022      	beq.n	6588 <xQueueGenericSend+0x318>
    6542:	683b      	ldr	r3, [r7, #0]
    6544:	2b00      	cmp	r3, #0
    6546:	d10b      	bne.n	6560 <xQueueGenericSend+0x2f0>
    6548:	6a3b      	ldr	r3, [r7, #32]
    654a:	0018      	movs	r0, r3
    654c:	4b21      	ldr	r3, [pc, #132]	; (65d4 <xQueueGenericSend+0x364>)
    654e:	4798      	blx	r3
    6550:	0003      	movs	r3, r0
    6552:	001a      	movs	r2, r3
    6554:	4b20      	ldr	r3, [pc, #128]	; (65d8 <xQueueGenericSend+0x368>)
    6556:	5c9b      	ldrb	r3, [r3, r2]
    6558:	3370      	adds	r3, #112	; 0x70
    655a:	b2db      	uxtb	r3, r3
    655c:	001d      	movs	r5, r3
    655e:	e000      	b.n	6562 <xQueueGenericSend+0x2f2>
    6560:	2575      	movs	r5, #117	; 0x75
    6562:	6a3b      	ldr	r3, [r7, #32]
    6564:	0018      	movs	r0, r3
    6566:	4b1b      	ldr	r3, [pc, #108]	; (65d4 <xQueueGenericSend+0x364>)
    6568:	4798      	blx	r3
    656a:	0003      	movs	r3, r0
    656c:	001a      	movs	r2, r3
    656e:	4b1a      	ldr	r3, [pc, #104]	; (65d8 <xQueueGenericSend+0x368>)
    6570:	5c9c      	ldrb	r4, [r3, r2]
    6572:	6a3b      	ldr	r3, [r7, #32]
    6574:	0018      	movs	r0, r3
    6576:	4b19      	ldr	r3, [pc, #100]	; (65dc <xQueueGenericSend+0x36c>)
    6578:	4798      	blx	r3
    657a:	0003      	movs	r3, r0
    657c:	b2db      	uxtb	r3, r3
    657e:	001a      	movs	r2, r3
    6580:	0021      	movs	r1, r4
    6582:	0028      	movs	r0, r5
    6584:	4b16      	ldr	r3, [pc, #88]	; (65e0 <xQueueGenericSend+0x370>)
    6586:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    6588:	6a3b      	ldr	r3, [r7, #32]
    658a:	3310      	adds	r3, #16
    658c:	687a      	ldr	r2, [r7, #4]
    658e:	0011      	movs	r1, r2
    6590:	0018      	movs	r0, r3
    6592:	4b1e      	ldr	r3, [pc, #120]	; (660c <xQueueGenericSend+0x39c>)
    6594:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    6596:	6a3b      	ldr	r3, [r7, #32]
    6598:	0018      	movs	r0, r3
    659a:	4b1d      	ldr	r3, [pc, #116]	; (6610 <xQueueGenericSend+0x3a0>)
    659c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    659e:	4b1d      	ldr	r3, [pc, #116]	; (6614 <xQueueGenericSend+0x3a4>)
    65a0:	4798      	blx	r3
    65a2:	1e03      	subs	r3, r0, #0
    65a4:	d000      	beq.n	65a8 <xQueueGenericSend+0x338>
    65a6:	e69d      	b.n	62e4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    65a8:	4b11      	ldr	r3, [pc, #68]	; (65f0 <xQueueGenericSend+0x380>)
    65aa:	4798      	blx	r3
    65ac:	e69a      	b.n	62e4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    65ae:	6a3b      	ldr	r3, [r7, #32]
    65b0:	0018      	movs	r0, r3
    65b2:	4b17      	ldr	r3, [pc, #92]	; (6610 <xQueueGenericSend+0x3a0>)
    65b4:	4798      	blx	r3
				( void ) xTaskResumeAll();
    65b6:	4b17      	ldr	r3, [pc, #92]	; (6614 <xQueueGenericSend+0x3a4>)
    65b8:	4798      	blx	r3
    65ba:	e693      	b.n	62e4 <xQueueGenericSend+0x74>
    65bc:	000089fd 	.word	0x000089fd
    65c0:	00005cd9 	.word	0x00005cd9
    65c4:	00003f71 	.word	0x00003f71
    65c8:	00003cd5 	.word	0x00003cd5
    65cc:	200000f4 	.word	0x200000f4
    65d0:	00003d95 	.word	0x00003d95
    65d4:	00003c95 	.word	0x00003c95
    65d8:	200000e8 	.word	0x200000e8
    65dc:	00003d75 	.word	0x00003d75
    65e0:	000046cd 	.word	0x000046cd
    65e4:	00004d29 	.word	0x00004d29
    65e8:	000074a9 	.word	0x000074a9
    65ec:	000077ad 	.word	0x000077ad
    65f0:	00005cc1 	.word	0x00005cc1
    65f4:	0000856d 	.word	0x0000856d
    65f8:	00005cfd 	.word	0x00005cfd
    65fc:	000086ad 	.word	0x000086ad
    6600:	00007f95 	.word	0x00007f95
    6604:	000086d5 	.word	0x000086d5
    6608:	000076fd 	.word	0x000076fd
    660c:	00008449 	.word	0x00008449
    6610:	000075d9 	.word	0x000075d9
    6614:	00007fad 	.word	0x00007fad
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    6618:	6a3b      	ldr	r3, [r7, #32]
    661a:	0018      	movs	r0, r3
    661c:	4b22      	ldr	r3, [pc, #136]	; (66a8 <xQueueGenericSend+0x438>)
    661e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    6620:	4b22      	ldr	r3, [pc, #136]	; (66ac <xQueueGenericSend+0x43c>)
    6622:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
    6624:	4b22      	ldr	r3, [pc, #136]	; (66b0 <xQueueGenericSend+0x440>)
    6626:	4798      	blx	r3
    6628:	0003      	movs	r3, r0
    662a:	0018      	movs	r0, r3
    662c:	4b21      	ldr	r3, [pc, #132]	; (66b4 <xQueueGenericSend+0x444>)
    662e:	4798      	blx	r3
    6630:	0003      	movs	r3, r0
    6632:	001a      	movs	r2, r3
    6634:	4b20      	ldr	r3, [pc, #128]	; (66b8 <xQueueGenericSend+0x448>)
    6636:	881b      	ldrh	r3, [r3, #0]
    6638:	4013      	ands	r3, r2
    663a:	b29b      	uxth	r3, r3
    663c:	2b00      	cmp	r3, #0
    663e:	d02e      	beq.n	669e <xQueueGenericSend+0x42e>
    6640:	6a3b      	ldr	r3, [r7, #32]
    6642:	0018      	movs	r0, r3
    6644:	4b1d      	ldr	r3, [pc, #116]	; (66bc <xQueueGenericSend+0x44c>)
    6646:	4798      	blx	r3
    6648:	0003      	movs	r3, r0
    664a:	001a      	movs	r2, r3
    664c:	4b1a      	ldr	r3, [pc, #104]	; (66b8 <xQueueGenericSend+0x448>)
    664e:	881b      	ldrh	r3, [r3, #0]
    6650:	4013      	ands	r3, r2
    6652:	b29b      	uxth	r3, r3
    6654:	2b00      	cmp	r3, #0
    6656:	d022      	beq.n	669e <xQueueGenericSend+0x42e>
    6658:	683b      	ldr	r3, [r7, #0]
    665a:	2b00      	cmp	r3, #0
    665c:	d10b      	bne.n	6676 <xQueueGenericSend+0x406>
    665e:	6a3b      	ldr	r3, [r7, #32]
    6660:	0018      	movs	r0, r3
    6662:	4b17      	ldr	r3, [pc, #92]	; (66c0 <xQueueGenericSend+0x450>)
    6664:	4798      	blx	r3
    6666:	0003      	movs	r3, r0
    6668:	001a      	movs	r2, r3
    666a:	4b16      	ldr	r3, [pc, #88]	; (66c4 <xQueueGenericSend+0x454>)
    666c:	5c9b      	ldrb	r3, [r3, r2]
    666e:	3348      	adds	r3, #72	; 0x48
    6670:	b2db      	uxtb	r3, r3
    6672:	001d      	movs	r5, r3
    6674:	e000      	b.n	6678 <xQueueGenericSend+0x408>
    6676:	254d      	movs	r5, #77	; 0x4d
    6678:	6a3b      	ldr	r3, [r7, #32]
    667a:	0018      	movs	r0, r3
    667c:	4b10      	ldr	r3, [pc, #64]	; (66c0 <xQueueGenericSend+0x450>)
    667e:	4798      	blx	r3
    6680:	0003      	movs	r3, r0
    6682:	001a      	movs	r2, r3
    6684:	4b0f      	ldr	r3, [pc, #60]	; (66c4 <xQueueGenericSend+0x454>)
    6686:	5c9c      	ldrb	r4, [r3, r2]
    6688:	6a3b      	ldr	r3, [r7, #32]
    668a:	0018      	movs	r0, r3
    668c:	4b0e      	ldr	r3, [pc, #56]	; (66c8 <xQueueGenericSend+0x458>)
    668e:	4798      	blx	r3
    6690:	0003      	movs	r3, r0
    6692:	b2db      	uxtb	r3, r3
    6694:	001a      	movs	r2, r3
    6696:	0021      	movs	r1, r4
    6698:	0028      	movs	r0, r5
    669a:	4b0c      	ldr	r3, [pc, #48]	; (66cc <xQueueGenericSend+0x45c>)
    669c:	4798      	blx	r3
			return errQUEUE_FULL;
    669e:	2300      	movs	r3, #0
		}
	}
}
    66a0:	0018      	movs	r0, r3
    66a2:	46bd      	mov	sp, r7
    66a4:	b00a      	add	sp, #40	; 0x28
    66a6:	bdb0      	pop	{r4, r5, r7, pc}
    66a8:	000075d9 	.word	0x000075d9
    66ac:	00007fad 	.word	0x00007fad
    66b0:	00003f71 	.word	0x00003f71
    66b4:	00003cd5 	.word	0x00003cd5
    66b8:	200000f4 	.word	0x200000f4
    66bc:	00003d95 	.word	0x00003d95
    66c0:	00003c95 	.word	0x00003c95
    66c4:	200000e8 	.word	0x200000e8
    66c8:	00003d75 	.word	0x00003d75
    66cc:	000046cd 	.word	0x000046cd

000066d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    66d0:	b5b0      	push	{r4, r5, r7, lr}
    66d2:	b088      	sub	sp, #32
    66d4:	af00      	add	r7, sp, #0
    66d6:	60f8      	str	r0, [r7, #12]
    66d8:	60b9      	str	r1, [r7, #8]
    66da:	607a      	str	r2, [r7, #4]
    66dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    66de:	68fb      	ldr	r3, [r7, #12]
    66e0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    66e2:	69bb      	ldr	r3, [r7, #24]
    66e4:	2b00      	cmp	r3, #0
    66e6:	d101      	bne.n	66ec <xQueueGenericSendFromISR+0x1c>
    66e8:	b672      	cpsid	i
    66ea:	e7fe      	b.n	66ea <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    66ec:	68bb      	ldr	r3, [r7, #8]
    66ee:	2b00      	cmp	r3, #0
    66f0:	d103      	bne.n	66fa <xQueueGenericSendFromISR+0x2a>
    66f2:	69bb      	ldr	r3, [r7, #24]
    66f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    66f6:	2b00      	cmp	r3, #0
    66f8:	d101      	bne.n	66fe <xQueueGenericSendFromISR+0x2e>
    66fa:	2301      	movs	r3, #1
    66fc:	e000      	b.n	6700 <xQueueGenericSendFromISR+0x30>
    66fe:	2300      	movs	r3, #0
    6700:	2b00      	cmp	r3, #0
    6702:	d101      	bne.n	6708 <xQueueGenericSendFromISR+0x38>
    6704:	b672      	cpsid	i
    6706:	e7fe      	b.n	6706 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    6708:	683b      	ldr	r3, [r7, #0]
    670a:	2b02      	cmp	r3, #2
    670c:	d103      	bne.n	6716 <xQueueGenericSendFromISR+0x46>
    670e:	69bb      	ldr	r3, [r7, #24]
    6710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6712:	2b01      	cmp	r3, #1
    6714:	d101      	bne.n	671a <xQueueGenericSendFromISR+0x4a>
    6716:	2301      	movs	r3, #1
    6718:	e000      	b.n	671c <xQueueGenericSendFromISR+0x4c>
    671a:	2300      	movs	r3, #0
    671c:	2b00      	cmp	r3, #0
    671e:	d101      	bne.n	6724 <xQueueGenericSendFromISR+0x54>
    6720:	b672      	cpsid	i
    6722:	e7fe      	b.n	6722 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6724:	4b68      	ldr	r3, [pc, #416]	; (68c8 <xQueueGenericSendFromISR+0x1f8>)
    6726:	4798      	blx	r3
    6728:	0003      	movs	r3, r0
    672a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    672c:	69bb      	ldr	r3, [r7, #24]
    672e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6730:	69bb      	ldr	r3, [r7, #24]
    6732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6734:	429a      	cmp	r2, r3
    6736:	d303      	bcc.n	6740 <xQueueGenericSendFromISR+0x70>
    6738:	683b      	ldr	r3, [r7, #0]
    673a:	2b02      	cmp	r3, #2
    673c:	d000      	beq.n	6740 <xQueueGenericSendFromISR+0x70>
    673e:	e088      	b.n	6852 <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    6740:	2313      	movs	r3, #19
    6742:	18fb      	adds	r3, r7, r3
    6744:	69ba      	ldr	r2, [r7, #24]
    6746:	2145      	movs	r1, #69	; 0x45
    6748:	5c52      	ldrb	r2, [r2, r1]
    674a:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    674c:	69bb      	ldr	r3, [r7, #24]
    674e:	0018      	movs	r0, r3
    6750:	4b5e      	ldr	r3, [pc, #376]	; (68cc <xQueueGenericSendFromISR+0x1fc>)
    6752:	4798      	blx	r3
    6754:	0003      	movs	r3, r0
    6756:	001a      	movs	r2, r3
    6758:	4b5d      	ldr	r3, [pc, #372]	; (68d0 <xQueueGenericSendFromISR+0x200>)
    675a:	881b      	ldrh	r3, [r3, #0]
    675c:	4013      	ands	r3, r2
    675e:	b29b      	uxth	r3, r3
    6760:	2b00      	cmp	r3, #0
    6762:	d022      	beq.n	67aa <xQueueGenericSendFromISR+0xda>
    6764:	683b      	ldr	r3, [r7, #0]
    6766:	2b00      	cmp	r3, #0
    6768:	d10b      	bne.n	6782 <xQueueGenericSendFromISR+0xb2>
    676a:	69bb      	ldr	r3, [r7, #24]
    676c:	0018      	movs	r0, r3
    676e:	4b59      	ldr	r3, [pc, #356]	; (68d4 <xQueueGenericSendFromISR+0x204>)
    6770:	4798      	blx	r3
    6772:	0003      	movs	r3, r0
    6774:	001a      	movs	r2, r3
    6776:	4b58      	ldr	r3, [pc, #352]	; (68d8 <xQueueGenericSendFromISR+0x208>)
    6778:	5c9b      	ldrb	r3, [r3, r2]
    677a:	3330      	adds	r3, #48	; 0x30
    677c:	b2db      	uxtb	r3, r3
    677e:	001d      	movs	r5, r3
    6780:	e000      	b.n	6784 <xQueueGenericSendFromISR+0xb4>
    6782:	2535      	movs	r5, #53	; 0x35
    6784:	69bb      	ldr	r3, [r7, #24]
    6786:	0018      	movs	r0, r3
    6788:	4b52      	ldr	r3, [pc, #328]	; (68d4 <xQueueGenericSendFromISR+0x204>)
    678a:	4798      	blx	r3
    678c:	0003      	movs	r3, r0
    678e:	001a      	movs	r2, r3
    6790:	4b51      	ldr	r3, [pc, #324]	; (68d8 <xQueueGenericSendFromISR+0x208>)
    6792:	5c9c      	ldrb	r4, [r3, r2]
    6794:	69bb      	ldr	r3, [r7, #24]
    6796:	0018      	movs	r0, r3
    6798:	4b50      	ldr	r3, [pc, #320]	; (68dc <xQueueGenericSendFromISR+0x20c>)
    679a:	4798      	blx	r3
    679c:	0003      	movs	r3, r0
    679e:	b2db      	uxtb	r3, r3
    67a0:	001a      	movs	r2, r3
    67a2:	0021      	movs	r1, r4
    67a4:	0028      	movs	r0, r5
    67a6:	4b4e      	ldr	r3, [pc, #312]	; (68e0 <xQueueGenericSendFromISR+0x210>)
    67a8:	4798      	blx	r3
    67aa:	69bb      	ldr	r3, [r7, #24]
    67ac:	0018      	movs	r0, r3
    67ae:	4b49      	ldr	r3, [pc, #292]	; (68d4 <xQueueGenericSendFromISR+0x204>)
    67b0:	4798      	blx	r3
    67b2:	0003      	movs	r3, r0
    67b4:	001a      	movs	r2, r3
    67b6:	4b48      	ldr	r3, [pc, #288]	; (68d8 <xQueueGenericSendFromISR+0x208>)
    67b8:	5c9c      	ldrb	r4, [r3, r2]
    67ba:	69bb      	ldr	r3, [r7, #24]
    67bc:	0018      	movs	r0, r3
    67be:	4b47      	ldr	r3, [pc, #284]	; (68dc <xQueueGenericSendFromISR+0x20c>)
    67c0:	4798      	blx	r3
    67c2:	0003      	movs	r3, r0
    67c4:	b2d9      	uxtb	r1, r3
    67c6:	69bb      	ldr	r3, [r7, #24]
    67c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    67ca:	b2db      	uxtb	r3, r3
    67cc:	3301      	adds	r3, #1
    67ce:	b2db      	uxtb	r3, r3
    67d0:	001a      	movs	r2, r3
    67d2:	0020      	movs	r0, r4
    67d4:	4b43      	ldr	r3, [pc, #268]	; (68e4 <xQueueGenericSendFromISR+0x214>)
    67d6:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    67d8:	683a      	ldr	r2, [r7, #0]
    67da:	68b9      	ldr	r1, [r7, #8]
    67dc:	69bb      	ldr	r3, [r7, #24]
    67de:	0018      	movs	r0, r3
    67e0:	4b41      	ldr	r3, [pc, #260]	; (68e8 <xQueueGenericSendFromISR+0x218>)
    67e2:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    67e4:	2313      	movs	r3, #19
    67e6:	18fb      	adds	r3, r7, r3
    67e8:	781b      	ldrb	r3, [r3, #0]
    67ea:	b25b      	sxtb	r3, r3
    67ec:	3301      	adds	r3, #1
    67ee:	d124      	bne.n	683a <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    67f0:	69bb      	ldr	r3, [r7, #24]
    67f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    67f4:	2b00      	cmp	r3, #0
    67f6:	d00e      	beq.n	6816 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    67f8:	683a      	ldr	r2, [r7, #0]
    67fa:	69bb      	ldr	r3, [r7, #24]
    67fc:	0011      	movs	r1, r2
    67fe:	0018      	movs	r0, r3
    6800:	4b3a      	ldr	r3, [pc, #232]	; (68ec <xQueueGenericSendFromISR+0x21c>)
    6802:	4798      	blx	r3
    6804:	1e03      	subs	r3, r0, #0
    6806:	d021      	beq.n	684c <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    6808:	687b      	ldr	r3, [r7, #4]
    680a:	2b00      	cmp	r3, #0
    680c:	d01e      	beq.n	684c <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    680e:	687b      	ldr	r3, [r7, #4]
    6810:	2201      	movs	r2, #1
    6812:	601a      	str	r2, [r3, #0]
    6814:	e01a      	b.n	684c <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6816:	69bb      	ldr	r3, [r7, #24]
    6818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    681a:	2b00      	cmp	r3, #0
    681c:	d016      	beq.n	684c <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    681e:	69bb      	ldr	r3, [r7, #24]
    6820:	3324      	adds	r3, #36	; 0x24
    6822:	0018      	movs	r0, r3
    6824:	4b32      	ldr	r3, [pc, #200]	; (68f0 <xQueueGenericSendFromISR+0x220>)
    6826:	4798      	blx	r3
    6828:	1e03      	subs	r3, r0, #0
    682a:	d00f      	beq.n	684c <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    682c:	687b      	ldr	r3, [r7, #4]
    682e:	2b00      	cmp	r3, #0
    6830:	d00c      	beq.n	684c <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    6832:	687b      	ldr	r3, [r7, #4]
    6834:	2201      	movs	r2, #1
    6836:	601a      	str	r2, [r3, #0]
    6838:	e008      	b.n	684c <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    683a:	2313      	movs	r3, #19
    683c:	18fb      	adds	r3, r7, r3
    683e:	781b      	ldrb	r3, [r3, #0]
    6840:	3301      	adds	r3, #1
    6842:	b2db      	uxtb	r3, r3
    6844:	b259      	sxtb	r1, r3
    6846:	69bb      	ldr	r3, [r7, #24]
    6848:	2245      	movs	r2, #69	; 0x45
    684a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    684c:	2301      	movs	r3, #1
    684e:	61fb      	str	r3, [r7, #28]
		{
    6850:	e030      	b.n	68b4 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    6852:	69bb      	ldr	r3, [r7, #24]
    6854:	0018      	movs	r0, r3
    6856:	4b1d      	ldr	r3, [pc, #116]	; (68cc <xQueueGenericSendFromISR+0x1fc>)
    6858:	4798      	blx	r3
    685a:	0003      	movs	r3, r0
    685c:	001a      	movs	r2, r3
    685e:	4b1c      	ldr	r3, [pc, #112]	; (68d0 <xQueueGenericSendFromISR+0x200>)
    6860:	881b      	ldrh	r3, [r3, #0]
    6862:	4013      	ands	r3, r2
    6864:	b29b      	uxth	r3, r3
    6866:	2b00      	cmp	r3, #0
    6868:	d022      	beq.n	68b0 <xQueueGenericSendFromISR+0x1e0>
    686a:	683b      	ldr	r3, [r7, #0]
    686c:	2b00      	cmp	r3, #0
    686e:	d10b      	bne.n	6888 <xQueueGenericSendFromISR+0x1b8>
    6870:	69bb      	ldr	r3, [r7, #24]
    6872:	0018      	movs	r0, r3
    6874:	4b17      	ldr	r3, [pc, #92]	; (68d4 <xQueueGenericSendFromISR+0x204>)
    6876:	4798      	blx	r3
    6878:	0003      	movs	r3, r0
    687a:	001a      	movs	r2, r3
    687c:	4b16      	ldr	r3, [pc, #88]	; (68d8 <xQueueGenericSendFromISR+0x208>)
    687e:	5c9b      	ldrb	r3, [r3, r2]
    6880:	3358      	adds	r3, #88	; 0x58
    6882:	b2db      	uxtb	r3, r3
    6884:	001d      	movs	r5, r3
    6886:	e000      	b.n	688a <xQueueGenericSendFromISR+0x1ba>
    6888:	255d      	movs	r5, #93	; 0x5d
    688a:	69bb      	ldr	r3, [r7, #24]
    688c:	0018      	movs	r0, r3
    688e:	4b11      	ldr	r3, [pc, #68]	; (68d4 <xQueueGenericSendFromISR+0x204>)
    6890:	4798      	blx	r3
    6892:	0003      	movs	r3, r0
    6894:	001a      	movs	r2, r3
    6896:	4b10      	ldr	r3, [pc, #64]	; (68d8 <xQueueGenericSendFromISR+0x208>)
    6898:	5c9c      	ldrb	r4, [r3, r2]
    689a:	69bb      	ldr	r3, [r7, #24]
    689c:	0018      	movs	r0, r3
    689e:	4b0f      	ldr	r3, [pc, #60]	; (68dc <xQueueGenericSendFromISR+0x20c>)
    68a0:	4798      	blx	r3
    68a2:	0003      	movs	r3, r0
    68a4:	b2db      	uxtb	r3, r3
    68a6:	001a      	movs	r2, r3
    68a8:	0021      	movs	r1, r4
    68aa:	0028      	movs	r0, r5
    68ac:	4b0c      	ldr	r3, [pc, #48]	; (68e0 <xQueueGenericSendFromISR+0x210>)
    68ae:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    68b0:	2300      	movs	r3, #0
    68b2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    68b4:	697b      	ldr	r3, [r7, #20]
    68b6:	0018      	movs	r0, r3
    68b8:	4b0e      	ldr	r3, [pc, #56]	; (68f4 <xQueueGenericSendFromISR+0x224>)
    68ba:	4798      	blx	r3

	return xReturn;
    68bc:	69fb      	ldr	r3, [r7, #28]
}
    68be:	0018      	movs	r0, r3
    68c0:	46bd      	mov	sp, r7
    68c2:	b008      	add	sp, #32
    68c4:	bdb0      	pop	{r4, r5, r7, pc}
    68c6:	46c0      	nop			; (mov r8, r8)
    68c8:	00005d2d 	.word	0x00005d2d
    68cc:	00003d95 	.word	0x00003d95
    68d0:	200000f4 	.word	0x200000f4
    68d4:	00003c95 	.word	0x00003c95
    68d8:	200000e8 	.word	0x200000e8
    68dc:	00003d75 	.word	0x00003d75
    68e0:	000046cd 	.word	0x000046cd
    68e4:	00004d29 	.word	0x00004d29
    68e8:	000074a9 	.word	0x000074a9
    68ec:	000077ad 	.word	0x000077ad
    68f0:	0000856d 	.word	0x0000856d
    68f4:	00005d39 	.word	0x00005d39

000068f8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    68f8:	b580      	push	{r7, lr}
    68fa:	b082      	sub	sp, #8
    68fc:	af00      	add	r7, sp, #0
    68fe:	6078      	str	r0, [r7, #4]
    6900:	6039      	str	r1, [r7, #0]
    6902:	6839      	ldr	r1, [r7, #0]
    6904:	687b      	ldr	r3, [r7, #4]
    6906:	2200      	movs	r2, #0
    6908:	0018      	movs	r0, r3
    690a:	4b03      	ldr	r3, [pc, #12]	; (6918 <xQueueGiveFromISR+0x20>)
    690c:	4798      	blx	r3
    690e:	0003      	movs	r3, r0
    6910:	0018      	movs	r0, r3
    6912:	46bd      	mov	sp, r7
    6914:	b002      	add	sp, #8
    6916:	bd80      	pop	{r7, pc}
    6918:	0000691d 	.word	0x0000691d

0000691c <MyWrapper>:
{
    691c:	b5b0      	push	{r4, r5, r7, lr}
    691e:	b08a      	sub	sp, #40	; 0x28
    6920:	af00      	add	r7, sp, #0
    6922:	60f8      	str	r0, [r7, #12]
    6924:	60b9      	str	r1, [r7, #8]
    6926:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6928:	68fb      	ldr	r3, [r7, #12]
    692a:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
    692c:	6a3b      	ldr	r3, [r7, #32]
    692e:	2b00      	cmp	r3, #0
    6930:	d101      	bne.n	6936 <MyWrapper+0x1a>
    6932:	b672      	cpsid	i
    6934:	e7fe      	b.n	6934 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    6936:	6a3b      	ldr	r3, [r7, #32]
    6938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    693a:	2b00      	cmp	r3, #0
    693c:	d001      	beq.n	6942 <MyWrapper+0x26>
    693e:	b672      	cpsid	i
    6940:	e7fe      	b.n	6940 <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    6942:	6a3b      	ldr	r3, [r7, #32]
    6944:	681b      	ldr	r3, [r3, #0]
    6946:	2b00      	cmp	r3, #0
    6948:	d103      	bne.n	6952 <MyWrapper+0x36>
    694a:	6a3b      	ldr	r3, [r7, #32]
    694c:	685b      	ldr	r3, [r3, #4]
    694e:	2b00      	cmp	r3, #0
    6950:	d101      	bne.n	6956 <MyWrapper+0x3a>
    6952:	2301      	movs	r3, #1
    6954:	e000      	b.n	6958 <MyWrapper+0x3c>
    6956:	2300      	movs	r3, #0
    6958:	2b00      	cmp	r3, #0
    695a:	d101      	bne.n	6960 <MyWrapper+0x44>
    695c:	b672      	cpsid	i
    695e:	e7fe      	b.n	695e <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6960:	4b66      	ldr	r3, [pc, #408]	; (6afc <MyWrapper+0x1e0>)
    6962:	4798      	blx	r3
    6964:	0003      	movs	r3, r0
    6966:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6968:	6a3b      	ldr	r3, [r7, #32]
    696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    696c:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    696e:	6a3b      	ldr	r3, [r7, #32]
    6970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    6972:	69bb      	ldr	r3, [r7, #24]
    6974:	429a      	cmp	r2, r3
    6976:	d800      	bhi.n	697a <MyWrapper+0x5e>
    6978:	e085      	b.n	6a86 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    697a:	2317      	movs	r3, #23
    697c:	18fb      	adds	r3, r7, r3
    697e:	6a3a      	ldr	r2, [r7, #32]
    6980:	2145      	movs	r1, #69	; 0x45
    6982:	5c52      	ldrb	r2, [r2, r1]
    6984:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    6986:	6a3b      	ldr	r3, [r7, #32]
    6988:	0018      	movs	r0, r3
    698a:	4b5d      	ldr	r3, [pc, #372]	; (6b00 <MyWrapper+0x1e4>)
    698c:	4798      	blx	r3
    698e:	0003      	movs	r3, r0
    6990:	001a      	movs	r2, r3
    6992:	4b5c      	ldr	r3, [pc, #368]	; (6b04 <MyWrapper+0x1e8>)
    6994:	881b      	ldrh	r3, [r3, #0]
    6996:	4013      	ands	r3, r2
    6998:	b29b      	uxth	r3, r3
    699a:	2b00      	cmp	r3, #0
    699c:	d022      	beq.n	69e4 <MyWrapper+0xc8>
    699e:	687b      	ldr	r3, [r7, #4]
    69a0:	2b00      	cmp	r3, #0
    69a2:	d10b      	bne.n	69bc <MyWrapper+0xa0>
    69a4:	6a3b      	ldr	r3, [r7, #32]
    69a6:	0018      	movs	r0, r3
    69a8:	4b57      	ldr	r3, [pc, #348]	; (6b08 <MyWrapper+0x1ec>)
    69aa:	4798      	blx	r3
    69ac:	0003      	movs	r3, r0
    69ae:	001a      	movs	r2, r3
    69b0:	4b56      	ldr	r3, [pc, #344]	; (6b0c <MyWrapper+0x1f0>)
    69b2:	5c9b      	ldrb	r3, [r3, r2]
    69b4:	3330      	adds	r3, #48	; 0x30
    69b6:	b2db      	uxtb	r3, r3
    69b8:	001d      	movs	r5, r3
    69ba:	e000      	b.n	69be <MyWrapper+0xa2>
    69bc:	2535      	movs	r5, #53	; 0x35
    69be:	6a3b      	ldr	r3, [r7, #32]
    69c0:	0018      	movs	r0, r3
    69c2:	4b51      	ldr	r3, [pc, #324]	; (6b08 <MyWrapper+0x1ec>)
    69c4:	4798      	blx	r3
    69c6:	0003      	movs	r3, r0
    69c8:	001a      	movs	r2, r3
    69ca:	4b50      	ldr	r3, [pc, #320]	; (6b0c <MyWrapper+0x1f0>)
    69cc:	5c9c      	ldrb	r4, [r3, r2]
    69ce:	6a3b      	ldr	r3, [r7, #32]
    69d0:	0018      	movs	r0, r3
    69d2:	4b4f      	ldr	r3, [pc, #316]	; (6b10 <MyWrapper+0x1f4>)
    69d4:	4798      	blx	r3
    69d6:	0003      	movs	r3, r0
    69d8:	b2db      	uxtb	r3, r3
    69da:	001a      	movs	r2, r3
    69dc:	0021      	movs	r1, r4
    69de:	0028      	movs	r0, r5
    69e0:	4b4c      	ldr	r3, [pc, #304]	; (6b14 <MyWrapper+0x1f8>)
    69e2:	4798      	blx	r3
    69e4:	6a3b      	ldr	r3, [r7, #32]
    69e6:	0018      	movs	r0, r3
    69e8:	4b47      	ldr	r3, [pc, #284]	; (6b08 <MyWrapper+0x1ec>)
    69ea:	4798      	blx	r3
    69ec:	0003      	movs	r3, r0
    69ee:	001a      	movs	r2, r3
    69f0:	4b46      	ldr	r3, [pc, #280]	; (6b0c <MyWrapper+0x1f0>)
    69f2:	5c9c      	ldrb	r4, [r3, r2]
    69f4:	6a3b      	ldr	r3, [r7, #32]
    69f6:	0018      	movs	r0, r3
    69f8:	4b45      	ldr	r3, [pc, #276]	; (6b10 <MyWrapper+0x1f4>)
    69fa:	4798      	blx	r3
    69fc:	0003      	movs	r3, r0
    69fe:	b2d9      	uxtb	r1, r3
    6a00:	6a3b      	ldr	r3, [r7, #32]
    6a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6a04:	b2db      	uxtb	r3, r3
    6a06:	3301      	adds	r3, #1
    6a08:	b2db      	uxtb	r3, r3
    6a0a:	001a      	movs	r2, r3
    6a0c:	0020      	movs	r0, r4
    6a0e:	4b42      	ldr	r3, [pc, #264]	; (6b18 <MyWrapper+0x1fc>)
    6a10:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    6a12:	69bb      	ldr	r3, [r7, #24]
    6a14:	1c5a      	adds	r2, r3, #1
    6a16:	6a3b      	ldr	r3, [r7, #32]
    6a18:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    6a1a:	2317      	movs	r3, #23
    6a1c:	18fb      	adds	r3, r7, r3
    6a1e:	781b      	ldrb	r3, [r3, #0]
    6a20:	b25b      	sxtb	r3, r3
    6a22:	3301      	adds	r3, #1
    6a24:	d123      	bne.n	6a6e <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    6a26:	6a3b      	ldr	r3, [r7, #32]
    6a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6a2a:	2b00      	cmp	r3, #0
    6a2c:	d00d      	beq.n	6a4a <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    6a2e:	6a3b      	ldr	r3, [r7, #32]
    6a30:	2100      	movs	r1, #0
    6a32:	0018      	movs	r0, r3
    6a34:	4b39      	ldr	r3, [pc, #228]	; (6b1c <MyWrapper+0x200>)
    6a36:	4798      	blx	r3
    6a38:	1e03      	subs	r3, r0, #0
    6a3a:	d021      	beq.n	6a80 <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    6a3c:	68bb      	ldr	r3, [r7, #8]
    6a3e:	2b00      	cmp	r3, #0
    6a40:	d01e      	beq.n	6a80 <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    6a42:	68bb      	ldr	r3, [r7, #8]
    6a44:	2201      	movs	r2, #1
    6a46:	601a      	str	r2, [r3, #0]
    6a48:	e01a      	b.n	6a80 <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6a4a:	6a3b      	ldr	r3, [r7, #32]
    6a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d016      	beq.n	6a80 <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6a52:	6a3b      	ldr	r3, [r7, #32]
    6a54:	3324      	adds	r3, #36	; 0x24
    6a56:	0018      	movs	r0, r3
    6a58:	4b31      	ldr	r3, [pc, #196]	; (6b20 <MyWrapper+0x204>)
    6a5a:	4798      	blx	r3
    6a5c:	1e03      	subs	r3, r0, #0
    6a5e:	d00f      	beq.n	6a80 <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    6a60:	68bb      	ldr	r3, [r7, #8]
    6a62:	2b00      	cmp	r3, #0
    6a64:	d00c      	beq.n	6a80 <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    6a66:	68bb      	ldr	r3, [r7, #8]
    6a68:	2201      	movs	r2, #1
    6a6a:	601a      	str	r2, [r3, #0]
    6a6c:	e008      	b.n	6a80 <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    6a6e:	2317      	movs	r3, #23
    6a70:	18fb      	adds	r3, r7, r3
    6a72:	781b      	ldrb	r3, [r3, #0]
    6a74:	3301      	adds	r3, #1
    6a76:	b2db      	uxtb	r3, r3
    6a78:	b259      	sxtb	r1, r3
    6a7a:	6a3b      	ldr	r3, [r7, #32]
    6a7c:	2245      	movs	r2, #69	; 0x45
    6a7e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    6a80:	2301      	movs	r3, #1
    6a82:	627b      	str	r3, [r7, #36]	; 0x24
    6a84:	e030      	b.n	6ae8 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    6a86:	6a3b      	ldr	r3, [r7, #32]
    6a88:	0018      	movs	r0, r3
    6a8a:	4b1d      	ldr	r3, [pc, #116]	; (6b00 <MyWrapper+0x1e4>)
    6a8c:	4798      	blx	r3
    6a8e:	0003      	movs	r3, r0
    6a90:	001a      	movs	r2, r3
    6a92:	4b1c      	ldr	r3, [pc, #112]	; (6b04 <MyWrapper+0x1e8>)
    6a94:	881b      	ldrh	r3, [r3, #0]
    6a96:	4013      	ands	r3, r2
    6a98:	b29b      	uxth	r3, r3
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d022      	beq.n	6ae4 <MyWrapper+0x1c8>
    6a9e:	687b      	ldr	r3, [r7, #4]
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	d10b      	bne.n	6abc <MyWrapper+0x1a0>
    6aa4:	6a3b      	ldr	r3, [r7, #32]
    6aa6:	0018      	movs	r0, r3
    6aa8:	4b17      	ldr	r3, [pc, #92]	; (6b08 <MyWrapper+0x1ec>)
    6aaa:	4798      	blx	r3
    6aac:	0003      	movs	r3, r0
    6aae:	001a      	movs	r2, r3
    6ab0:	4b16      	ldr	r3, [pc, #88]	; (6b0c <MyWrapper+0x1f0>)
    6ab2:	5c9b      	ldrb	r3, [r3, r2]
    6ab4:	3358      	adds	r3, #88	; 0x58
    6ab6:	b2db      	uxtb	r3, r3
    6ab8:	001d      	movs	r5, r3
    6aba:	e000      	b.n	6abe <MyWrapper+0x1a2>
    6abc:	255d      	movs	r5, #93	; 0x5d
    6abe:	6a3b      	ldr	r3, [r7, #32]
    6ac0:	0018      	movs	r0, r3
    6ac2:	4b11      	ldr	r3, [pc, #68]	; (6b08 <MyWrapper+0x1ec>)
    6ac4:	4798      	blx	r3
    6ac6:	0003      	movs	r3, r0
    6ac8:	001a      	movs	r2, r3
    6aca:	4b10      	ldr	r3, [pc, #64]	; (6b0c <MyWrapper+0x1f0>)
    6acc:	5c9c      	ldrb	r4, [r3, r2]
    6ace:	6a3b      	ldr	r3, [r7, #32]
    6ad0:	0018      	movs	r0, r3
    6ad2:	4b0f      	ldr	r3, [pc, #60]	; (6b10 <MyWrapper+0x1f4>)
    6ad4:	4798      	blx	r3
    6ad6:	0003      	movs	r3, r0
    6ad8:	b2db      	uxtb	r3, r3
    6ada:	001a      	movs	r2, r3
    6adc:	0021      	movs	r1, r4
    6ade:	0028      	movs	r0, r5
    6ae0:	4b0c      	ldr	r3, [pc, #48]	; (6b14 <MyWrapper+0x1f8>)
    6ae2:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    6ae4:	2300      	movs	r3, #0
    6ae6:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    6ae8:	69fb      	ldr	r3, [r7, #28]
    6aea:	0018      	movs	r0, r3
    6aec:	4b0d      	ldr	r3, [pc, #52]	; (6b24 <MyWrapper+0x208>)
    6aee:	4798      	blx	r3

	return xReturn;
    6af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    6af2:	0018      	movs	r0, r3
    6af4:	46bd      	mov	sp, r7
    6af6:	b00a      	add	sp, #40	; 0x28
    6af8:	bdb0      	pop	{r4, r5, r7, pc}
    6afa:	46c0      	nop			; (mov r8, r8)
    6afc:	00005d2d 	.word	0x00005d2d
    6b00:	00003d95 	.word	0x00003d95
    6b04:	200000f4 	.word	0x200000f4
    6b08:	00003c95 	.word	0x00003c95
    6b0c:	200000e8 	.word	0x200000e8
    6b10:	00003d75 	.word	0x00003d75
    6b14:	000046cd 	.word	0x000046cd
    6b18:	00004d29 	.word	0x00004d29
    6b1c:	000077ad 	.word	0x000077ad
    6b20:	0000856d 	.word	0x0000856d
    6b24:	00005d39 	.word	0x00005d39

00006b28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    6b28:	b5b0      	push	{r4, r5, r7, lr}
    6b2a:	b08a      	sub	sp, #40	; 0x28
    6b2c:	af00      	add	r7, sp, #0
    6b2e:	60f8      	str	r0, [r7, #12]
    6b30:	60b9      	str	r1, [r7, #8]
    6b32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    6b34:	2300      	movs	r3, #0
    6b36:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6b38:	68fb      	ldr	r3, [r7, #12]
    6b3a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    6b3c:	6a3b      	ldr	r3, [r7, #32]
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d101      	bne.n	6b46 <xQueueReceive+0x1e>
    6b42:	b672      	cpsid	i
    6b44:	e7fe      	b.n	6b44 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6b46:	68bb      	ldr	r3, [r7, #8]
    6b48:	2b00      	cmp	r3, #0
    6b4a:	d103      	bne.n	6b54 <xQueueReceive+0x2c>
    6b4c:	6a3b      	ldr	r3, [r7, #32]
    6b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6b50:	2b00      	cmp	r3, #0
    6b52:	d101      	bne.n	6b58 <xQueueReceive+0x30>
    6b54:	2301      	movs	r3, #1
    6b56:	e000      	b.n	6b5a <xQueueReceive+0x32>
    6b58:	2300      	movs	r3, #0
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d101      	bne.n	6b62 <xQueueReceive+0x3a>
    6b5e:	b672      	cpsid	i
    6b60:	e7fe      	b.n	6b60 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    6b62:	4bbf      	ldr	r3, [pc, #764]	; (6e60 <xQueueReceive+0x338>)
    6b64:	4798      	blx	r3
    6b66:	1e03      	subs	r3, r0, #0
    6b68:	d102      	bne.n	6b70 <xQueueReceive+0x48>
    6b6a:	687b      	ldr	r3, [r7, #4]
    6b6c:	2b00      	cmp	r3, #0
    6b6e:	d101      	bne.n	6b74 <xQueueReceive+0x4c>
    6b70:	2301      	movs	r3, #1
    6b72:	e000      	b.n	6b76 <xQueueReceive+0x4e>
    6b74:	2300      	movs	r3, #0
    6b76:	2b00      	cmp	r3, #0
    6b78:	d101      	bne.n	6b7e <xQueueReceive+0x56>
    6b7a:	b672      	cpsid	i
    6b7c:	e7fe      	b.n	6b7c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    6b7e:	4bb9      	ldr	r3, [pc, #740]	; (6e64 <xQueueReceive+0x33c>)
    6b80:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    6b82:	6a3b      	ldr	r3, [r7, #32]
    6b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6b86:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    6b88:	69fb      	ldr	r3, [r7, #28]
    6b8a:	2b00      	cmp	r3, #0
    6b8c:	d100      	bne.n	6b90 <xQueueReceive+0x68>
    6b8e:	e07d      	b.n	6c8c <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    6b90:	68ba      	ldr	r2, [r7, #8]
    6b92:	6a3b      	ldr	r3, [r7, #32]
    6b94:	0011      	movs	r1, r2
    6b96:	0018      	movs	r0, r3
    6b98:	4bb3      	ldr	r3, [pc, #716]	; (6e68 <xQueueReceive+0x340>)
    6b9a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    6b9c:	4bb3      	ldr	r3, [pc, #716]	; (6e6c <xQueueReceive+0x344>)
    6b9e:	4798      	blx	r3
    6ba0:	0003      	movs	r3, r0
    6ba2:	0018      	movs	r0, r3
    6ba4:	4bb2      	ldr	r3, [pc, #712]	; (6e70 <xQueueReceive+0x348>)
    6ba6:	4798      	blx	r3
    6ba8:	0003      	movs	r3, r0
    6baa:	001a      	movs	r2, r3
    6bac:	4bb1      	ldr	r3, [pc, #708]	; (6e74 <xQueueReceive+0x34c>)
    6bae:	881b      	ldrh	r3, [r3, #0]
    6bb0:	4013      	ands	r3, r2
    6bb2:	b29b      	uxth	r3, r3
    6bb4:	2b00      	cmp	r3, #0
    6bb6:	d029      	beq.n	6c0c <xQueueReceive+0xe4>
    6bb8:	6a3b      	ldr	r3, [r7, #32]
    6bba:	0018      	movs	r0, r3
    6bbc:	4bae      	ldr	r3, [pc, #696]	; (6e78 <xQueueReceive+0x350>)
    6bbe:	4798      	blx	r3
    6bc0:	0003      	movs	r3, r0
    6bc2:	001a      	movs	r2, r3
    6bc4:	4bab      	ldr	r3, [pc, #684]	; (6e74 <xQueueReceive+0x34c>)
    6bc6:	881b      	ldrh	r3, [r3, #0]
    6bc8:	4013      	ands	r3, r2
    6bca:	b29b      	uxth	r3, r3
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d01d      	beq.n	6c0c <xQueueReceive+0xe4>
    6bd0:	6a3b      	ldr	r3, [r7, #32]
    6bd2:	0018      	movs	r0, r3
    6bd4:	4ba9      	ldr	r3, [pc, #676]	; (6e7c <xQueueReceive+0x354>)
    6bd6:	4798      	blx	r3
    6bd8:	0003      	movs	r3, r0
    6bda:	001a      	movs	r2, r3
    6bdc:	4ba8      	ldr	r3, [pc, #672]	; (6e80 <xQueueReceive+0x358>)
    6bde:	5c9b      	ldrb	r3, [r3, r2]
    6be0:	3328      	adds	r3, #40	; 0x28
    6be2:	b2db      	uxtb	r3, r3
    6be4:	001d      	movs	r5, r3
    6be6:	6a3b      	ldr	r3, [r7, #32]
    6be8:	0018      	movs	r0, r3
    6bea:	4ba4      	ldr	r3, [pc, #656]	; (6e7c <xQueueReceive+0x354>)
    6bec:	4798      	blx	r3
    6bee:	0003      	movs	r3, r0
    6bf0:	001a      	movs	r2, r3
    6bf2:	4ba3      	ldr	r3, [pc, #652]	; (6e80 <xQueueReceive+0x358>)
    6bf4:	5c9c      	ldrb	r4, [r3, r2]
    6bf6:	6a3b      	ldr	r3, [r7, #32]
    6bf8:	0018      	movs	r0, r3
    6bfa:	4ba2      	ldr	r3, [pc, #648]	; (6e84 <xQueueReceive+0x35c>)
    6bfc:	4798      	blx	r3
    6bfe:	0003      	movs	r3, r0
    6c00:	b2db      	uxtb	r3, r3
    6c02:	001a      	movs	r2, r3
    6c04:	0021      	movs	r1, r4
    6c06:	0028      	movs	r0, r5
    6c08:	4b9f      	ldr	r3, [pc, #636]	; (6e88 <xQueueReceive+0x360>)
    6c0a:	4798      	blx	r3
    6c0c:	6a3b      	ldr	r3, [r7, #32]
    6c0e:	0018      	movs	r0, r3
    6c10:	4b9a      	ldr	r3, [pc, #616]	; (6e7c <xQueueReceive+0x354>)
    6c12:	4798      	blx	r3
    6c14:	0003      	movs	r3, r0
    6c16:	001a      	movs	r2, r3
    6c18:	4b99      	ldr	r3, [pc, #612]	; (6e80 <xQueueReceive+0x358>)
    6c1a:	5c9c      	ldrb	r4, [r3, r2]
    6c1c:	6a3b      	ldr	r3, [r7, #32]
    6c1e:	0018      	movs	r0, r3
    6c20:	4b98      	ldr	r3, [pc, #608]	; (6e84 <xQueueReceive+0x35c>)
    6c22:	4798      	blx	r3
    6c24:	0003      	movs	r3, r0
    6c26:	b2dd      	uxtb	r5, r3
    6c28:	6a3b      	ldr	r3, [r7, #32]
    6c2a:	0018      	movs	r0, r3
    6c2c:	4b93      	ldr	r3, [pc, #588]	; (6e7c <xQueueReceive+0x354>)
    6c2e:	4798      	blx	r3
    6c30:	0003      	movs	r3, r0
    6c32:	001a      	movs	r2, r3
    6c34:	4b92      	ldr	r3, [pc, #584]	; (6e80 <xQueueReceive+0x358>)
    6c36:	5c9b      	ldrb	r3, [r3, r2]
    6c38:	2b02      	cmp	r3, #2
    6c3a:	d108      	bne.n	6c4e <xQueueReceive+0x126>
    6c3c:	4b8b      	ldr	r3, [pc, #556]	; (6e6c <xQueueReceive+0x344>)
    6c3e:	4798      	blx	r3
    6c40:	0003      	movs	r3, r0
    6c42:	0018      	movs	r0, r3
    6c44:	4b91      	ldr	r3, [pc, #580]	; (6e8c <xQueueReceive+0x364>)
    6c46:	4798      	blx	r3
    6c48:	0003      	movs	r3, r0
    6c4a:	b2db      	uxtb	r3, r3
    6c4c:	e004      	b.n	6c58 <xQueueReceive+0x130>
    6c4e:	6a3b      	ldr	r3, [r7, #32]
    6c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6c52:	b2db      	uxtb	r3, r3
    6c54:	3b01      	subs	r3, #1
    6c56:	b2db      	uxtb	r3, r3
    6c58:	001a      	movs	r2, r3
    6c5a:	0029      	movs	r1, r5
    6c5c:	0020      	movs	r0, r4
    6c5e:	4b8c      	ldr	r3, [pc, #560]	; (6e90 <xQueueReceive+0x368>)
    6c60:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    6c62:	69fb      	ldr	r3, [r7, #28]
    6c64:	1e5a      	subs	r2, r3, #1
    6c66:	6a3b      	ldr	r3, [r7, #32]
    6c68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6c6a:	6a3b      	ldr	r3, [r7, #32]
    6c6c:	691b      	ldr	r3, [r3, #16]
    6c6e:	2b00      	cmp	r3, #0
    6c70:	d008      	beq.n	6c84 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6c72:	6a3b      	ldr	r3, [r7, #32]
    6c74:	3310      	adds	r3, #16
    6c76:	0018      	movs	r0, r3
    6c78:	4b86      	ldr	r3, [pc, #536]	; (6e94 <xQueueReceive+0x36c>)
    6c7a:	4798      	blx	r3
    6c7c:	1e03      	subs	r3, r0, #0
    6c7e:	d001      	beq.n	6c84 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    6c80:	4b85      	ldr	r3, [pc, #532]	; (6e98 <xQueueReceive+0x370>)
    6c82:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    6c84:	4b85      	ldr	r3, [pc, #532]	; (6e9c <xQueueReceive+0x374>)
    6c86:	4798      	blx	r3
				return pdPASS;
    6c88:	2301      	movs	r3, #1
    6c8a:	e15f      	b.n	6f4c <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    6c8c:	687b      	ldr	r3, [r7, #4]
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d13b      	bne.n	6d0a <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6c92:	4b82      	ldr	r3, [pc, #520]	; (6e9c <xQueueReceive+0x374>)
    6c94:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    6c96:	4b75      	ldr	r3, [pc, #468]	; (6e6c <xQueueReceive+0x344>)
    6c98:	4798      	blx	r3
    6c9a:	0003      	movs	r3, r0
    6c9c:	0018      	movs	r0, r3
    6c9e:	4b74      	ldr	r3, [pc, #464]	; (6e70 <xQueueReceive+0x348>)
    6ca0:	4798      	blx	r3
    6ca2:	0003      	movs	r3, r0
    6ca4:	001a      	movs	r2, r3
    6ca6:	4b73      	ldr	r3, [pc, #460]	; (6e74 <xQueueReceive+0x34c>)
    6ca8:	881b      	ldrh	r3, [r3, #0]
    6caa:	4013      	ands	r3, r2
    6cac:	b29b      	uxth	r3, r3
    6cae:	2b00      	cmp	r3, #0
    6cb0:	d029      	beq.n	6d06 <xQueueReceive+0x1de>
    6cb2:	6a3b      	ldr	r3, [r7, #32]
    6cb4:	0018      	movs	r0, r3
    6cb6:	4b70      	ldr	r3, [pc, #448]	; (6e78 <xQueueReceive+0x350>)
    6cb8:	4798      	blx	r3
    6cba:	0003      	movs	r3, r0
    6cbc:	001a      	movs	r2, r3
    6cbe:	4b6d      	ldr	r3, [pc, #436]	; (6e74 <xQueueReceive+0x34c>)
    6cc0:	881b      	ldrh	r3, [r3, #0]
    6cc2:	4013      	ands	r3, r2
    6cc4:	b29b      	uxth	r3, r3
    6cc6:	2b00      	cmp	r3, #0
    6cc8:	d01d      	beq.n	6d06 <xQueueReceive+0x1de>
    6cca:	6a3b      	ldr	r3, [r7, #32]
    6ccc:	0018      	movs	r0, r3
    6cce:	4b6b      	ldr	r3, [pc, #428]	; (6e7c <xQueueReceive+0x354>)
    6cd0:	4798      	blx	r3
    6cd2:	0003      	movs	r3, r0
    6cd4:	001a      	movs	r2, r3
    6cd6:	4b6a      	ldr	r3, [pc, #424]	; (6e80 <xQueueReceive+0x358>)
    6cd8:	5c9b      	ldrb	r3, [r3, r2]
    6cda:	3350      	adds	r3, #80	; 0x50
    6cdc:	b2db      	uxtb	r3, r3
    6cde:	001d      	movs	r5, r3
    6ce0:	6a3b      	ldr	r3, [r7, #32]
    6ce2:	0018      	movs	r0, r3
    6ce4:	4b65      	ldr	r3, [pc, #404]	; (6e7c <xQueueReceive+0x354>)
    6ce6:	4798      	blx	r3
    6ce8:	0003      	movs	r3, r0
    6cea:	001a      	movs	r2, r3
    6cec:	4b64      	ldr	r3, [pc, #400]	; (6e80 <xQueueReceive+0x358>)
    6cee:	5c9c      	ldrb	r4, [r3, r2]
    6cf0:	6a3b      	ldr	r3, [r7, #32]
    6cf2:	0018      	movs	r0, r3
    6cf4:	4b63      	ldr	r3, [pc, #396]	; (6e84 <xQueueReceive+0x35c>)
    6cf6:	4798      	blx	r3
    6cf8:	0003      	movs	r3, r0
    6cfa:	b2db      	uxtb	r3, r3
    6cfc:	001a      	movs	r2, r3
    6cfe:	0021      	movs	r1, r4
    6d00:	0028      	movs	r0, r5
    6d02:	4b61      	ldr	r3, [pc, #388]	; (6e88 <xQueueReceive+0x360>)
    6d04:	4798      	blx	r3
					return errQUEUE_EMPTY;
    6d06:	2300      	movs	r3, #0
    6d08:	e120      	b.n	6f4c <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
    6d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d0c:	2b00      	cmp	r3, #0
    6d0e:	d106      	bne.n	6d1e <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    6d10:	2314      	movs	r3, #20
    6d12:	18fb      	adds	r3, r7, r3
    6d14:	0018      	movs	r0, r3
    6d16:	4b62      	ldr	r3, [pc, #392]	; (6ea0 <xQueueReceive+0x378>)
    6d18:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    6d1a:	2301      	movs	r3, #1
    6d1c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    6d1e:	4b5f      	ldr	r3, [pc, #380]	; (6e9c <xQueueReceive+0x374>)
    6d20:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6d22:	4b60      	ldr	r3, [pc, #384]	; (6ea4 <xQueueReceive+0x37c>)
    6d24:	4798      	blx	r3
		prvLockQueue( pxQueue );
    6d26:	4b4f      	ldr	r3, [pc, #316]	; (6e64 <xQueueReceive+0x33c>)
    6d28:	4798      	blx	r3
    6d2a:	6a3b      	ldr	r3, [r7, #32]
    6d2c:	2244      	movs	r2, #68	; 0x44
    6d2e:	5c9b      	ldrb	r3, [r3, r2]
    6d30:	b25b      	sxtb	r3, r3
    6d32:	3301      	adds	r3, #1
    6d34:	d103      	bne.n	6d3e <xQueueReceive+0x216>
    6d36:	6a3b      	ldr	r3, [r7, #32]
    6d38:	2244      	movs	r2, #68	; 0x44
    6d3a:	2100      	movs	r1, #0
    6d3c:	5499      	strb	r1, [r3, r2]
    6d3e:	6a3b      	ldr	r3, [r7, #32]
    6d40:	2245      	movs	r2, #69	; 0x45
    6d42:	5c9b      	ldrb	r3, [r3, r2]
    6d44:	b25b      	sxtb	r3, r3
    6d46:	3301      	adds	r3, #1
    6d48:	d103      	bne.n	6d52 <xQueueReceive+0x22a>
    6d4a:	6a3b      	ldr	r3, [r7, #32]
    6d4c:	2245      	movs	r2, #69	; 0x45
    6d4e:	2100      	movs	r1, #0
    6d50:	5499      	strb	r1, [r3, r2]
    6d52:	4b52      	ldr	r3, [pc, #328]	; (6e9c <xQueueReceive+0x374>)
    6d54:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6d56:	1d3a      	adds	r2, r7, #4
    6d58:	2314      	movs	r3, #20
    6d5a:	18fb      	adds	r3, r7, r3
    6d5c:	0011      	movs	r1, r2
    6d5e:	0018      	movs	r0, r3
    6d60:	4b51      	ldr	r3, [pc, #324]	; (6ea8 <xQueueReceive+0x380>)
    6d62:	4798      	blx	r3
    6d64:	1e03      	subs	r3, r0, #0
    6d66:	d000      	beq.n	6d6a <xQueueReceive+0x242>
    6d68:	e0aa      	b.n	6ec0 <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6d6a:	6a3b      	ldr	r3, [r7, #32]
    6d6c:	0018      	movs	r0, r3
    6d6e:	4b4f      	ldr	r3, [pc, #316]	; (6eac <xQueueReceive+0x384>)
    6d70:	4798      	blx	r3
    6d72:	1e03      	subs	r3, r0, #0
    6d74:	d06d      	beq.n	6e52 <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    6d76:	4b3d      	ldr	r3, [pc, #244]	; (6e6c <xQueueReceive+0x344>)
    6d78:	4798      	blx	r3
    6d7a:	0003      	movs	r3, r0
    6d7c:	0018      	movs	r0, r3
    6d7e:	4b3c      	ldr	r3, [pc, #240]	; (6e70 <xQueueReceive+0x348>)
    6d80:	4798      	blx	r3
    6d82:	0003      	movs	r3, r0
    6d84:	001a      	movs	r2, r3
    6d86:	4b3b      	ldr	r3, [pc, #236]	; (6e74 <xQueueReceive+0x34c>)
    6d88:	881b      	ldrh	r3, [r3, #0]
    6d8a:	4013      	ands	r3, r2
    6d8c:	b29b      	uxth	r3, r3
    6d8e:	2b00      	cmp	r3, #0
    6d90:	d029      	beq.n	6de6 <xQueueReceive+0x2be>
    6d92:	6a3b      	ldr	r3, [r7, #32]
    6d94:	0018      	movs	r0, r3
    6d96:	4b38      	ldr	r3, [pc, #224]	; (6e78 <xQueueReceive+0x350>)
    6d98:	4798      	blx	r3
    6d9a:	0003      	movs	r3, r0
    6d9c:	001a      	movs	r2, r3
    6d9e:	4b35      	ldr	r3, [pc, #212]	; (6e74 <xQueueReceive+0x34c>)
    6da0:	881b      	ldrh	r3, [r3, #0]
    6da2:	4013      	ands	r3, r2
    6da4:	b29b      	uxth	r3, r3
    6da6:	2b00      	cmp	r3, #0
    6da8:	d01d      	beq.n	6de6 <xQueueReceive+0x2be>
    6daa:	6a3b      	ldr	r3, [r7, #32]
    6dac:	0018      	movs	r0, r3
    6dae:	4b33      	ldr	r3, [pc, #204]	; (6e7c <xQueueReceive+0x354>)
    6db0:	4798      	blx	r3
    6db2:	0003      	movs	r3, r0
    6db4:	001a      	movs	r2, r3
    6db6:	4b32      	ldr	r3, [pc, #200]	; (6e80 <xQueueReceive+0x358>)
    6db8:	5c9b      	ldrb	r3, [r3, r2]
    6dba:	3368      	adds	r3, #104	; 0x68
    6dbc:	b2db      	uxtb	r3, r3
    6dbe:	001d      	movs	r5, r3
    6dc0:	6a3b      	ldr	r3, [r7, #32]
    6dc2:	0018      	movs	r0, r3
    6dc4:	4b2d      	ldr	r3, [pc, #180]	; (6e7c <xQueueReceive+0x354>)
    6dc6:	4798      	blx	r3
    6dc8:	0003      	movs	r3, r0
    6dca:	001a      	movs	r2, r3
    6dcc:	4b2c      	ldr	r3, [pc, #176]	; (6e80 <xQueueReceive+0x358>)
    6dce:	5c9c      	ldrb	r4, [r3, r2]
    6dd0:	6a3b      	ldr	r3, [r7, #32]
    6dd2:	0018      	movs	r0, r3
    6dd4:	4b2b      	ldr	r3, [pc, #172]	; (6e84 <xQueueReceive+0x35c>)
    6dd6:	4798      	blx	r3
    6dd8:	0003      	movs	r3, r0
    6dda:	b2db      	uxtb	r3, r3
    6ddc:	001a      	movs	r2, r3
    6dde:	0021      	movs	r1, r4
    6de0:	0028      	movs	r0, r5
    6de2:	4b29      	ldr	r3, [pc, #164]	; (6e88 <xQueueReceive+0x360>)
    6de4:	4798      	blx	r3
    6de6:	6a3b      	ldr	r3, [r7, #32]
    6de8:	0018      	movs	r0, r3
    6dea:	4b24      	ldr	r3, [pc, #144]	; (6e7c <xQueueReceive+0x354>)
    6dec:	4798      	blx	r3
    6dee:	0003      	movs	r3, r0
    6df0:	001a      	movs	r2, r3
    6df2:	4b23      	ldr	r3, [pc, #140]	; (6e80 <xQueueReceive+0x358>)
    6df4:	5c9b      	ldrb	r3, [r3, r2]
    6df6:	2b02      	cmp	r3, #2
    6df8:	d018      	beq.n	6e2c <xQueueReceive+0x304>
    6dfa:	4b1c      	ldr	r3, [pc, #112]	; (6e6c <xQueueReceive+0x344>)
    6dfc:	4798      	blx	r3
    6dfe:	0003      	movs	r3, r0
    6e00:	0018      	movs	r0, r3
    6e02:	4b1b      	ldr	r3, [pc, #108]	; (6e70 <xQueueReceive+0x348>)
    6e04:	4798      	blx	r3
    6e06:	0003      	movs	r3, r0
    6e08:	001a      	movs	r2, r3
    6e0a:	4b1a      	ldr	r3, [pc, #104]	; (6e74 <xQueueReceive+0x34c>)
    6e0c:	881b      	ldrh	r3, [r3, #0]
    6e0e:	4013      	ands	r3, r2
    6e10:	b29b      	uxth	r3, r3
    6e12:	2b00      	cmp	r3, #0
    6e14:	d00a      	beq.n	6e2c <xQueueReceive+0x304>
    6e16:	4b15      	ldr	r3, [pc, #84]	; (6e6c <xQueueReceive+0x344>)
    6e18:	4798      	blx	r3
    6e1a:	0003      	movs	r3, r0
    6e1c:	0018      	movs	r0, r3
    6e1e:	4b1b      	ldr	r3, [pc, #108]	; (6e8c <xQueueReceive+0x364>)
    6e20:	4798      	blx	r3
    6e22:	0003      	movs	r3, r0
    6e24:	b2db      	uxtb	r3, r3
    6e26:	0018      	movs	r0, r3
    6e28:	4b21      	ldr	r3, [pc, #132]	; (6eb0 <xQueueReceive+0x388>)
    6e2a:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    6e2c:	6a3b      	ldr	r3, [r7, #32]
    6e2e:	3324      	adds	r3, #36	; 0x24
    6e30:	687a      	ldr	r2, [r7, #4]
    6e32:	0011      	movs	r1, r2
    6e34:	0018      	movs	r0, r3
    6e36:	4b1f      	ldr	r3, [pc, #124]	; (6eb4 <xQueueReceive+0x38c>)
    6e38:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    6e3a:	6a3b      	ldr	r3, [r7, #32]
    6e3c:	0018      	movs	r0, r3
    6e3e:	4b1e      	ldr	r3, [pc, #120]	; (6eb8 <xQueueReceive+0x390>)
    6e40:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    6e42:	4b1e      	ldr	r3, [pc, #120]	; (6ebc <xQueueReceive+0x394>)
    6e44:	4798      	blx	r3
    6e46:	1e03      	subs	r3, r0, #0
    6e48:	d000      	beq.n	6e4c <xQueueReceive+0x324>
    6e4a:	e698      	b.n	6b7e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    6e4c:	4b12      	ldr	r3, [pc, #72]	; (6e98 <xQueueReceive+0x370>)
    6e4e:	4798      	blx	r3
    6e50:	e695      	b.n	6b7e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    6e52:	6a3b      	ldr	r3, [r7, #32]
    6e54:	0018      	movs	r0, r3
    6e56:	4b18      	ldr	r3, [pc, #96]	; (6eb8 <xQueueReceive+0x390>)
    6e58:	4798      	blx	r3
				( void ) xTaskResumeAll();
    6e5a:	4b18      	ldr	r3, [pc, #96]	; (6ebc <xQueueReceive+0x394>)
    6e5c:	4798      	blx	r3
    6e5e:	e68e      	b.n	6b7e <xQueueReceive+0x56>
    6e60:	000089fd 	.word	0x000089fd
    6e64:	00005cd9 	.word	0x00005cd9
    6e68:	00007589 	.word	0x00007589
    6e6c:	00003f71 	.word	0x00003f71
    6e70:	00003cd5 	.word	0x00003cd5
    6e74:	200000f4 	.word	0x200000f4
    6e78:	00003d95 	.word	0x00003d95
    6e7c:	00003c95 	.word	0x00003c95
    6e80:	200000e8 	.word	0x200000e8
    6e84:	00003d75 	.word	0x00003d75
    6e88:	000046cd 	.word	0x000046cd
    6e8c:	00003cb5 	.word	0x00003cb5
    6e90:	00004d29 	.word	0x00004d29
    6e94:	0000856d 	.word	0x0000856d
    6e98:	00005cc1 	.word	0x00005cc1
    6e9c:	00005cfd 	.word	0x00005cfd
    6ea0:	000086ad 	.word	0x000086ad
    6ea4:	00007f95 	.word	0x00007f95
    6ea8:	000086d5 	.word	0x000086d5
    6eac:	000076c9 	.word	0x000076c9
    6eb0:	00004e65 	.word	0x00004e65
    6eb4:	00008449 	.word	0x00008449
    6eb8:	000075d9 	.word	0x000075d9
    6ebc:	00007fad 	.word	0x00007fad
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    6ec0:	6a3b      	ldr	r3, [r7, #32]
    6ec2:	0018      	movs	r0, r3
    6ec4:	4b23      	ldr	r3, [pc, #140]	; (6f54 <xQueueReceive+0x42c>)
    6ec6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    6ec8:	4b23      	ldr	r3, [pc, #140]	; (6f58 <xQueueReceive+0x430>)
    6eca:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6ecc:	6a3b      	ldr	r3, [r7, #32]
    6ece:	0018      	movs	r0, r3
    6ed0:	4b22      	ldr	r3, [pc, #136]	; (6f5c <xQueueReceive+0x434>)
    6ed2:	4798      	blx	r3
    6ed4:	1e03      	subs	r3, r0, #0
    6ed6:	d100      	bne.n	6eda <xQueueReceive+0x3b2>
    6ed8:	e651      	b.n	6b7e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    6eda:	4b21      	ldr	r3, [pc, #132]	; (6f60 <xQueueReceive+0x438>)
    6edc:	4798      	blx	r3
    6ede:	0003      	movs	r3, r0
    6ee0:	0018      	movs	r0, r3
    6ee2:	4b20      	ldr	r3, [pc, #128]	; (6f64 <xQueueReceive+0x43c>)
    6ee4:	4798      	blx	r3
    6ee6:	0003      	movs	r3, r0
    6ee8:	001a      	movs	r2, r3
    6eea:	4b1f      	ldr	r3, [pc, #124]	; (6f68 <xQueueReceive+0x440>)
    6eec:	881b      	ldrh	r3, [r3, #0]
    6eee:	4013      	ands	r3, r2
    6ef0:	b29b      	uxth	r3, r3
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d029      	beq.n	6f4a <xQueueReceive+0x422>
    6ef6:	6a3b      	ldr	r3, [r7, #32]
    6ef8:	0018      	movs	r0, r3
    6efa:	4b1c      	ldr	r3, [pc, #112]	; (6f6c <xQueueReceive+0x444>)
    6efc:	4798      	blx	r3
    6efe:	0003      	movs	r3, r0
    6f00:	001a      	movs	r2, r3
    6f02:	4b19      	ldr	r3, [pc, #100]	; (6f68 <xQueueReceive+0x440>)
    6f04:	881b      	ldrh	r3, [r3, #0]
    6f06:	4013      	ands	r3, r2
    6f08:	b29b      	uxth	r3, r3
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d01d      	beq.n	6f4a <xQueueReceive+0x422>
    6f0e:	6a3b      	ldr	r3, [r7, #32]
    6f10:	0018      	movs	r0, r3
    6f12:	4b17      	ldr	r3, [pc, #92]	; (6f70 <xQueueReceive+0x448>)
    6f14:	4798      	blx	r3
    6f16:	0003      	movs	r3, r0
    6f18:	001a      	movs	r2, r3
    6f1a:	4b16      	ldr	r3, [pc, #88]	; (6f74 <xQueueReceive+0x44c>)
    6f1c:	5c9b      	ldrb	r3, [r3, r2]
    6f1e:	3350      	adds	r3, #80	; 0x50
    6f20:	b2db      	uxtb	r3, r3
    6f22:	001d      	movs	r5, r3
    6f24:	6a3b      	ldr	r3, [r7, #32]
    6f26:	0018      	movs	r0, r3
    6f28:	4b11      	ldr	r3, [pc, #68]	; (6f70 <xQueueReceive+0x448>)
    6f2a:	4798      	blx	r3
    6f2c:	0003      	movs	r3, r0
    6f2e:	001a      	movs	r2, r3
    6f30:	4b10      	ldr	r3, [pc, #64]	; (6f74 <xQueueReceive+0x44c>)
    6f32:	5c9c      	ldrb	r4, [r3, r2]
    6f34:	6a3b      	ldr	r3, [r7, #32]
    6f36:	0018      	movs	r0, r3
    6f38:	4b0f      	ldr	r3, [pc, #60]	; (6f78 <xQueueReceive+0x450>)
    6f3a:	4798      	blx	r3
    6f3c:	0003      	movs	r3, r0
    6f3e:	b2db      	uxtb	r3, r3
    6f40:	001a      	movs	r2, r3
    6f42:	0021      	movs	r1, r4
    6f44:	0028      	movs	r0, r5
    6f46:	4b0d      	ldr	r3, [pc, #52]	; (6f7c <xQueueReceive+0x454>)
    6f48:	4798      	blx	r3
				return errQUEUE_EMPTY;
    6f4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    6f4c:	0018      	movs	r0, r3
    6f4e:	46bd      	mov	sp, r7
    6f50:	b00a      	add	sp, #40	; 0x28
    6f52:	bdb0      	pop	{r4, r5, r7, pc}
    6f54:	000075d9 	.word	0x000075d9
    6f58:	00007fad 	.word	0x00007fad
    6f5c:	000076c9 	.word	0x000076c9
    6f60:	00003f71 	.word	0x00003f71
    6f64:	00003cd5 	.word	0x00003cd5
    6f68:	200000f4 	.word	0x200000f4
    6f6c:	00003d95 	.word	0x00003d95
    6f70:	00003c95 	.word	0x00003c95
    6f74:	200000e8 	.word	0x200000e8
    6f78:	00003d75 	.word	0x00003d75
    6f7c:	000046cd 	.word	0x000046cd

00006f80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    6f80:	b5b0      	push	{r4, r5, r7, lr}
    6f82:	b08a      	sub	sp, #40	; 0x28
    6f84:	af00      	add	r7, sp, #0
    6f86:	6078      	str	r0, [r7, #4]
    6f88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    6f8a:	2300      	movs	r3, #0
    6f8c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6f8e:	687b      	ldr	r3, [r7, #4]
    6f90:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    6f92:	2300      	movs	r3, #0
    6f94:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    6f96:	69fb      	ldr	r3, [r7, #28]
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d101      	bne.n	6fa0 <xQueueSemaphoreTake+0x20>
    6f9c:	b672      	cpsid	i
    6f9e:	e7fe      	b.n	6f9e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    6fa0:	69fb      	ldr	r3, [r7, #28]
    6fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d001      	beq.n	6fac <xQueueSemaphoreTake+0x2c>
    6fa8:	b672      	cpsid	i
    6faa:	e7fe      	b.n	6faa <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    6fac:	4bcb      	ldr	r3, [pc, #812]	; (72dc <xQueueSemaphoreTake+0x35c>)
    6fae:	4798      	blx	r3
    6fb0:	1e03      	subs	r3, r0, #0
    6fb2:	d102      	bne.n	6fba <xQueueSemaphoreTake+0x3a>
    6fb4:	683b      	ldr	r3, [r7, #0]
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d101      	bne.n	6fbe <xQueueSemaphoreTake+0x3e>
    6fba:	2301      	movs	r3, #1
    6fbc:	e000      	b.n	6fc0 <xQueueSemaphoreTake+0x40>
    6fbe:	2300      	movs	r3, #0
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d101      	bne.n	6fc8 <xQueueSemaphoreTake+0x48>
    6fc4:	b672      	cpsid	i
    6fc6:	e7fe      	b.n	6fc6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    6fc8:	4bc5      	ldr	r3, [pc, #788]	; (72e0 <xQueueSemaphoreTake+0x360>)
    6fca:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    6fcc:	69fb      	ldr	r3, [r7, #28]
    6fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6fd0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    6fd2:	69bb      	ldr	r3, [r7, #24]
    6fd4:	2b00      	cmp	r3, #0
    6fd6:	d100      	bne.n	6fda <xQueueSemaphoreTake+0x5a>
    6fd8:	e080      	b.n	70dc <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
    6fda:	4bc2      	ldr	r3, [pc, #776]	; (72e4 <xQueueSemaphoreTake+0x364>)
    6fdc:	4798      	blx	r3
    6fde:	0003      	movs	r3, r0
    6fe0:	0018      	movs	r0, r3
    6fe2:	4bc1      	ldr	r3, [pc, #772]	; (72e8 <xQueueSemaphoreTake+0x368>)
    6fe4:	4798      	blx	r3
    6fe6:	0003      	movs	r3, r0
    6fe8:	001a      	movs	r2, r3
    6fea:	4bc0      	ldr	r3, [pc, #768]	; (72ec <xQueueSemaphoreTake+0x36c>)
    6fec:	881b      	ldrh	r3, [r3, #0]
    6fee:	4013      	ands	r3, r2
    6ff0:	b29b      	uxth	r3, r3
    6ff2:	2b00      	cmp	r3, #0
    6ff4:	d029      	beq.n	704a <xQueueSemaphoreTake+0xca>
    6ff6:	69fb      	ldr	r3, [r7, #28]
    6ff8:	0018      	movs	r0, r3
    6ffa:	4bbd      	ldr	r3, [pc, #756]	; (72f0 <xQueueSemaphoreTake+0x370>)
    6ffc:	4798      	blx	r3
    6ffe:	0003      	movs	r3, r0
    7000:	001a      	movs	r2, r3
    7002:	4bba      	ldr	r3, [pc, #744]	; (72ec <xQueueSemaphoreTake+0x36c>)
    7004:	881b      	ldrh	r3, [r3, #0]
    7006:	4013      	ands	r3, r2
    7008:	b29b      	uxth	r3, r3
    700a:	2b00      	cmp	r3, #0
    700c:	d01d      	beq.n	704a <xQueueSemaphoreTake+0xca>
    700e:	69fb      	ldr	r3, [r7, #28]
    7010:	0018      	movs	r0, r3
    7012:	4bb8      	ldr	r3, [pc, #736]	; (72f4 <xQueueSemaphoreTake+0x374>)
    7014:	4798      	blx	r3
    7016:	0003      	movs	r3, r0
    7018:	001a      	movs	r2, r3
    701a:	4bb7      	ldr	r3, [pc, #732]	; (72f8 <xQueueSemaphoreTake+0x378>)
    701c:	5c9b      	ldrb	r3, [r3, r2]
    701e:	3328      	adds	r3, #40	; 0x28
    7020:	b2db      	uxtb	r3, r3
    7022:	001d      	movs	r5, r3
    7024:	69fb      	ldr	r3, [r7, #28]
    7026:	0018      	movs	r0, r3
    7028:	4bb2      	ldr	r3, [pc, #712]	; (72f4 <xQueueSemaphoreTake+0x374>)
    702a:	4798      	blx	r3
    702c:	0003      	movs	r3, r0
    702e:	001a      	movs	r2, r3
    7030:	4bb1      	ldr	r3, [pc, #708]	; (72f8 <xQueueSemaphoreTake+0x378>)
    7032:	5c9c      	ldrb	r4, [r3, r2]
    7034:	69fb      	ldr	r3, [r7, #28]
    7036:	0018      	movs	r0, r3
    7038:	4bb0      	ldr	r3, [pc, #704]	; (72fc <xQueueSemaphoreTake+0x37c>)
    703a:	4798      	blx	r3
    703c:	0003      	movs	r3, r0
    703e:	b2db      	uxtb	r3, r3
    7040:	001a      	movs	r2, r3
    7042:	0021      	movs	r1, r4
    7044:	0028      	movs	r0, r5
    7046:	4bae      	ldr	r3, [pc, #696]	; (7300 <xQueueSemaphoreTake+0x380>)
    7048:	4798      	blx	r3
    704a:	69fb      	ldr	r3, [r7, #28]
    704c:	0018      	movs	r0, r3
    704e:	4ba9      	ldr	r3, [pc, #676]	; (72f4 <xQueueSemaphoreTake+0x374>)
    7050:	4798      	blx	r3
    7052:	0003      	movs	r3, r0
    7054:	001a      	movs	r2, r3
    7056:	4ba8      	ldr	r3, [pc, #672]	; (72f8 <xQueueSemaphoreTake+0x378>)
    7058:	5c9c      	ldrb	r4, [r3, r2]
    705a:	69fb      	ldr	r3, [r7, #28]
    705c:	0018      	movs	r0, r3
    705e:	4ba7      	ldr	r3, [pc, #668]	; (72fc <xQueueSemaphoreTake+0x37c>)
    7060:	4798      	blx	r3
    7062:	0003      	movs	r3, r0
    7064:	b2dd      	uxtb	r5, r3
    7066:	69fb      	ldr	r3, [r7, #28]
    7068:	0018      	movs	r0, r3
    706a:	4ba2      	ldr	r3, [pc, #648]	; (72f4 <xQueueSemaphoreTake+0x374>)
    706c:	4798      	blx	r3
    706e:	0003      	movs	r3, r0
    7070:	001a      	movs	r2, r3
    7072:	4ba1      	ldr	r3, [pc, #644]	; (72f8 <xQueueSemaphoreTake+0x378>)
    7074:	5c9b      	ldrb	r3, [r3, r2]
    7076:	2b02      	cmp	r3, #2
    7078:	d108      	bne.n	708c <xQueueSemaphoreTake+0x10c>
    707a:	4b9a      	ldr	r3, [pc, #616]	; (72e4 <xQueueSemaphoreTake+0x364>)
    707c:	4798      	blx	r3
    707e:	0003      	movs	r3, r0
    7080:	0018      	movs	r0, r3
    7082:	4ba0      	ldr	r3, [pc, #640]	; (7304 <xQueueSemaphoreTake+0x384>)
    7084:	4798      	blx	r3
    7086:	0003      	movs	r3, r0
    7088:	b2db      	uxtb	r3, r3
    708a:	e004      	b.n	7096 <xQueueSemaphoreTake+0x116>
    708c:	69fb      	ldr	r3, [r7, #28]
    708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7090:	b2db      	uxtb	r3, r3
    7092:	3b01      	subs	r3, #1
    7094:	b2db      	uxtb	r3, r3
    7096:	001a      	movs	r2, r3
    7098:	0029      	movs	r1, r5
    709a:	0020      	movs	r0, r4
    709c:	4b9a      	ldr	r3, [pc, #616]	; (7308 <xQueueSemaphoreTake+0x388>)
    709e:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    70a0:	69bb      	ldr	r3, [r7, #24]
    70a2:	1e5a      	subs	r2, r3, #1
    70a4:	69fb      	ldr	r3, [r7, #28]
    70a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    70a8:	69fb      	ldr	r3, [r7, #28]
    70aa:	681b      	ldr	r3, [r3, #0]
    70ac:	2b00      	cmp	r3, #0
    70ae:	d104      	bne.n	70ba <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    70b0:	4b96      	ldr	r3, [pc, #600]	; (730c <xQueueSemaphoreTake+0x38c>)
    70b2:	4798      	blx	r3
    70b4:	0002      	movs	r2, r0
    70b6:	69fb      	ldr	r3, [r7, #28]
    70b8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    70ba:	69fb      	ldr	r3, [r7, #28]
    70bc:	691b      	ldr	r3, [r3, #16]
    70be:	2b00      	cmp	r3, #0
    70c0:	d008      	beq.n	70d4 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    70c2:	69fb      	ldr	r3, [r7, #28]
    70c4:	3310      	adds	r3, #16
    70c6:	0018      	movs	r0, r3
    70c8:	4b91      	ldr	r3, [pc, #580]	; (7310 <xQueueSemaphoreTake+0x390>)
    70ca:	4798      	blx	r3
    70cc:	1e03      	subs	r3, r0, #0
    70ce:	d001      	beq.n	70d4 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
    70d0:	4b90      	ldr	r3, [pc, #576]	; (7314 <xQueueSemaphoreTake+0x394>)
    70d2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    70d4:	4b90      	ldr	r3, [pc, #576]	; (7318 <xQueueSemaphoreTake+0x398>)
    70d6:	4798      	blx	r3
				return pdPASS;
    70d8:	2301      	movs	r3, #1
    70da:	e18b      	b.n	73f4 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    70dc:	683b      	ldr	r3, [r7, #0]
    70de:	2b00      	cmp	r3, #0
    70e0:	d140      	bne.n	7164 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    70e2:	6a3b      	ldr	r3, [r7, #32]
    70e4:	2b00      	cmp	r3, #0
    70e6:	d001      	beq.n	70ec <xQueueSemaphoreTake+0x16c>
    70e8:	b672      	cpsid	i
    70ea:	e7fe      	b.n	70ea <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    70ec:	4b8a      	ldr	r3, [pc, #552]	; (7318 <xQueueSemaphoreTake+0x398>)
    70ee:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    70f0:	4b7c      	ldr	r3, [pc, #496]	; (72e4 <xQueueSemaphoreTake+0x364>)
    70f2:	4798      	blx	r3
    70f4:	0003      	movs	r3, r0
    70f6:	0018      	movs	r0, r3
    70f8:	4b7b      	ldr	r3, [pc, #492]	; (72e8 <xQueueSemaphoreTake+0x368>)
    70fa:	4798      	blx	r3
    70fc:	0003      	movs	r3, r0
    70fe:	001a      	movs	r2, r3
    7100:	4b7a      	ldr	r3, [pc, #488]	; (72ec <xQueueSemaphoreTake+0x36c>)
    7102:	881b      	ldrh	r3, [r3, #0]
    7104:	4013      	ands	r3, r2
    7106:	b29b      	uxth	r3, r3
    7108:	2b00      	cmp	r3, #0
    710a:	d029      	beq.n	7160 <xQueueSemaphoreTake+0x1e0>
    710c:	69fb      	ldr	r3, [r7, #28]
    710e:	0018      	movs	r0, r3
    7110:	4b77      	ldr	r3, [pc, #476]	; (72f0 <xQueueSemaphoreTake+0x370>)
    7112:	4798      	blx	r3
    7114:	0003      	movs	r3, r0
    7116:	001a      	movs	r2, r3
    7118:	4b74      	ldr	r3, [pc, #464]	; (72ec <xQueueSemaphoreTake+0x36c>)
    711a:	881b      	ldrh	r3, [r3, #0]
    711c:	4013      	ands	r3, r2
    711e:	b29b      	uxth	r3, r3
    7120:	2b00      	cmp	r3, #0
    7122:	d01d      	beq.n	7160 <xQueueSemaphoreTake+0x1e0>
    7124:	69fb      	ldr	r3, [r7, #28]
    7126:	0018      	movs	r0, r3
    7128:	4b72      	ldr	r3, [pc, #456]	; (72f4 <xQueueSemaphoreTake+0x374>)
    712a:	4798      	blx	r3
    712c:	0003      	movs	r3, r0
    712e:	001a      	movs	r2, r3
    7130:	4b71      	ldr	r3, [pc, #452]	; (72f8 <xQueueSemaphoreTake+0x378>)
    7132:	5c9b      	ldrb	r3, [r3, r2]
    7134:	3350      	adds	r3, #80	; 0x50
    7136:	b2db      	uxtb	r3, r3
    7138:	001d      	movs	r5, r3
    713a:	69fb      	ldr	r3, [r7, #28]
    713c:	0018      	movs	r0, r3
    713e:	4b6d      	ldr	r3, [pc, #436]	; (72f4 <xQueueSemaphoreTake+0x374>)
    7140:	4798      	blx	r3
    7142:	0003      	movs	r3, r0
    7144:	001a      	movs	r2, r3
    7146:	4b6c      	ldr	r3, [pc, #432]	; (72f8 <xQueueSemaphoreTake+0x378>)
    7148:	5c9c      	ldrb	r4, [r3, r2]
    714a:	69fb      	ldr	r3, [r7, #28]
    714c:	0018      	movs	r0, r3
    714e:	4b6b      	ldr	r3, [pc, #428]	; (72fc <xQueueSemaphoreTake+0x37c>)
    7150:	4798      	blx	r3
    7152:	0003      	movs	r3, r0
    7154:	b2db      	uxtb	r3, r3
    7156:	001a      	movs	r2, r3
    7158:	0021      	movs	r1, r4
    715a:	0028      	movs	r0, r5
    715c:	4b68      	ldr	r3, [pc, #416]	; (7300 <xQueueSemaphoreTake+0x380>)
    715e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    7160:	2300      	movs	r3, #0
    7162:	e147      	b.n	73f4 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
    7164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7166:	2b00      	cmp	r3, #0
    7168:	d106      	bne.n	7178 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    716a:	230c      	movs	r3, #12
    716c:	18fb      	adds	r3, r7, r3
    716e:	0018      	movs	r0, r3
    7170:	4b6a      	ldr	r3, [pc, #424]	; (731c <xQueueSemaphoreTake+0x39c>)
    7172:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    7174:	2301      	movs	r3, #1
    7176:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    7178:	4b67      	ldr	r3, [pc, #412]	; (7318 <xQueueSemaphoreTake+0x398>)
    717a:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    717c:	4b68      	ldr	r3, [pc, #416]	; (7320 <xQueueSemaphoreTake+0x3a0>)
    717e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    7180:	4b57      	ldr	r3, [pc, #348]	; (72e0 <xQueueSemaphoreTake+0x360>)
    7182:	4798      	blx	r3
    7184:	69fb      	ldr	r3, [r7, #28]
    7186:	2244      	movs	r2, #68	; 0x44
    7188:	5c9b      	ldrb	r3, [r3, r2]
    718a:	b25b      	sxtb	r3, r3
    718c:	3301      	adds	r3, #1
    718e:	d103      	bne.n	7198 <xQueueSemaphoreTake+0x218>
    7190:	69fb      	ldr	r3, [r7, #28]
    7192:	2244      	movs	r2, #68	; 0x44
    7194:	2100      	movs	r1, #0
    7196:	5499      	strb	r1, [r3, r2]
    7198:	69fb      	ldr	r3, [r7, #28]
    719a:	2245      	movs	r2, #69	; 0x45
    719c:	5c9b      	ldrb	r3, [r3, r2]
    719e:	b25b      	sxtb	r3, r3
    71a0:	3301      	adds	r3, #1
    71a2:	d103      	bne.n	71ac <xQueueSemaphoreTake+0x22c>
    71a4:	69fb      	ldr	r3, [r7, #28]
    71a6:	2245      	movs	r2, #69	; 0x45
    71a8:	2100      	movs	r1, #0
    71aa:	5499      	strb	r1, [r3, r2]
    71ac:	4b5a      	ldr	r3, [pc, #360]	; (7318 <xQueueSemaphoreTake+0x398>)
    71ae:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    71b0:	003a      	movs	r2, r7
    71b2:	230c      	movs	r3, #12
    71b4:	18fb      	adds	r3, r7, r3
    71b6:	0011      	movs	r1, r2
    71b8:	0018      	movs	r0, r3
    71ba:	4b5a      	ldr	r3, [pc, #360]	; (7324 <xQueueSemaphoreTake+0x3a4>)
    71bc:	4798      	blx	r3
    71be:	1e03      	subs	r3, r0, #0
    71c0:	d000      	beq.n	71c4 <xQueueSemaphoreTake+0x244>
    71c2:	e0bd      	b.n	7340 <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    71c4:	69fb      	ldr	r3, [r7, #28]
    71c6:	0018      	movs	r0, r3
    71c8:	4b57      	ldr	r3, [pc, #348]	; (7328 <xQueueSemaphoreTake+0x3a8>)
    71ca:	4798      	blx	r3
    71cc:	1e03      	subs	r3, r0, #0
    71ce:	d100      	bne.n	71d2 <xQueueSemaphoreTake+0x252>
    71d0:	e07c      	b.n	72cc <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    71d2:	4b44      	ldr	r3, [pc, #272]	; (72e4 <xQueueSemaphoreTake+0x364>)
    71d4:	4798      	blx	r3
    71d6:	0003      	movs	r3, r0
    71d8:	0018      	movs	r0, r3
    71da:	4b43      	ldr	r3, [pc, #268]	; (72e8 <xQueueSemaphoreTake+0x368>)
    71dc:	4798      	blx	r3
    71de:	0003      	movs	r3, r0
    71e0:	001a      	movs	r2, r3
    71e2:	4b42      	ldr	r3, [pc, #264]	; (72ec <xQueueSemaphoreTake+0x36c>)
    71e4:	881b      	ldrh	r3, [r3, #0]
    71e6:	4013      	ands	r3, r2
    71e8:	b29b      	uxth	r3, r3
    71ea:	2b00      	cmp	r3, #0
    71ec:	d029      	beq.n	7242 <xQueueSemaphoreTake+0x2c2>
    71ee:	69fb      	ldr	r3, [r7, #28]
    71f0:	0018      	movs	r0, r3
    71f2:	4b3f      	ldr	r3, [pc, #252]	; (72f0 <xQueueSemaphoreTake+0x370>)
    71f4:	4798      	blx	r3
    71f6:	0003      	movs	r3, r0
    71f8:	001a      	movs	r2, r3
    71fa:	4b3c      	ldr	r3, [pc, #240]	; (72ec <xQueueSemaphoreTake+0x36c>)
    71fc:	881b      	ldrh	r3, [r3, #0]
    71fe:	4013      	ands	r3, r2
    7200:	b29b      	uxth	r3, r3
    7202:	2b00      	cmp	r3, #0
    7204:	d01d      	beq.n	7242 <xQueueSemaphoreTake+0x2c2>
    7206:	69fb      	ldr	r3, [r7, #28]
    7208:	0018      	movs	r0, r3
    720a:	4b3a      	ldr	r3, [pc, #232]	; (72f4 <xQueueSemaphoreTake+0x374>)
    720c:	4798      	blx	r3
    720e:	0003      	movs	r3, r0
    7210:	001a      	movs	r2, r3
    7212:	4b39      	ldr	r3, [pc, #228]	; (72f8 <xQueueSemaphoreTake+0x378>)
    7214:	5c9b      	ldrb	r3, [r3, r2]
    7216:	3368      	adds	r3, #104	; 0x68
    7218:	b2db      	uxtb	r3, r3
    721a:	001d      	movs	r5, r3
    721c:	69fb      	ldr	r3, [r7, #28]
    721e:	0018      	movs	r0, r3
    7220:	4b34      	ldr	r3, [pc, #208]	; (72f4 <xQueueSemaphoreTake+0x374>)
    7222:	4798      	blx	r3
    7224:	0003      	movs	r3, r0
    7226:	001a      	movs	r2, r3
    7228:	4b33      	ldr	r3, [pc, #204]	; (72f8 <xQueueSemaphoreTake+0x378>)
    722a:	5c9c      	ldrb	r4, [r3, r2]
    722c:	69fb      	ldr	r3, [r7, #28]
    722e:	0018      	movs	r0, r3
    7230:	4b32      	ldr	r3, [pc, #200]	; (72fc <xQueueSemaphoreTake+0x37c>)
    7232:	4798      	blx	r3
    7234:	0003      	movs	r3, r0
    7236:	b2db      	uxtb	r3, r3
    7238:	001a      	movs	r2, r3
    723a:	0021      	movs	r1, r4
    723c:	0028      	movs	r0, r5
    723e:	4b30      	ldr	r3, [pc, #192]	; (7300 <xQueueSemaphoreTake+0x380>)
    7240:	4798      	blx	r3
    7242:	69fb      	ldr	r3, [r7, #28]
    7244:	0018      	movs	r0, r3
    7246:	4b2b      	ldr	r3, [pc, #172]	; (72f4 <xQueueSemaphoreTake+0x374>)
    7248:	4798      	blx	r3
    724a:	0003      	movs	r3, r0
    724c:	001a      	movs	r2, r3
    724e:	4b2a      	ldr	r3, [pc, #168]	; (72f8 <xQueueSemaphoreTake+0x378>)
    7250:	5c9b      	ldrb	r3, [r3, r2]
    7252:	2b02      	cmp	r3, #2
    7254:	d018      	beq.n	7288 <xQueueSemaphoreTake+0x308>
    7256:	4b23      	ldr	r3, [pc, #140]	; (72e4 <xQueueSemaphoreTake+0x364>)
    7258:	4798      	blx	r3
    725a:	0003      	movs	r3, r0
    725c:	0018      	movs	r0, r3
    725e:	4b22      	ldr	r3, [pc, #136]	; (72e8 <xQueueSemaphoreTake+0x368>)
    7260:	4798      	blx	r3
    7262:	0003      	movs	r3, r0
    7264:	001a      	movs	r2, r3
    7266:	4b21      	ldr	r3, [pc, #132]	; (72ec <xQueueSemaphoreTake+0x36c>)
    7268:	881b      	ldrh	r3, [r3, #0]
    726a:	4013      	ands	r3, r2
    726c:	b29b      	uxth	r3, r3
    726e:	2b00      	cmp	r3, #0
    7270:	d00a      	beq.n	7288 <xQueueSemaphoreTake+0x308>
    7272:	4b1c      	ldr	r3, [pc, #112]	; (72e4 <xQueueSemaphoreTake+0x364>)
    7274:	4798      	blx	r3
    7276:	0003      	movs	r3, r0
    7278:	0018      	movs	r0, r3
    727a:	4b22      	ldr	r3, [pc, #136]	; (7304 <xQueueSemaphoreTake+0x384>)
    727c:	4798      	blx	r3
    727e:	0003      	movs	r3, r0
    7280:	b2db      	uxtb	r3, r3
    7282:	0018      	movs	r0, r3
    7284:	4b29      	ldr	r3, [pc, #164]	; (732c <xQueueSemaphoreTake+0x3ac>)
    7286:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7288:	69fb      	ldr	r3, [r7, #28]
    728a:	681b      	ldr	r3, [r3, #0]
    728c:	2b00      	cmp	r3, #0
    728e:	d10a      	bne.n	72a6 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
    7290:	4b13      	ldr	r3, [pc, #76]	; (72e0 <xQueueSemaphoreTake+0x360>)
    7292:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    7294:	69fb      	ldr	r3, [r7, #28]
    7296:	685b      	ldr	r3, [r3, #4]
    7298:	0018      	movs	r0, r3
    729a:	4b25      	ldr	r3, [pc, #148]	; (7330 <xQueueSemaphoreTake+0x3b0>)
    729c:	4798      	blx	r3
    729e:	0003      	movs	r3, r0
    72a0:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    72a2:	4b1d      	ldr	r3, [pc, #116]	; (7318 <xQueueSemaphoreTake+0x398>)
    72a4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    72a6:	69fb      	ldr	r3, [r7, #28]
    72a8:	3324      	adds	r3, #36	; 0x24
    72aa:	683a      	ldr	r2, [r7, #0]
    72ac:	0011      	movs	r1, r2
    72ae:	0018      	movs	r0, r3
    72b0:	4b20      	ldr	r3, [pc, #128]	; (7334 <xQueueSemaphoreTake+0x3b4>)
    72b2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    72b4:	69fb      	ldr	r3, [r7, #28]
    72b6:	0018      	movs	r0, r3
    72b8:	4b1f      	ldr	r3, [pc, #124]	; (7338 <xQueueSemaphoreTake+0x3b8>)
    72ba:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    72bc:	4b1f      	ldr	r3, [pc, #124]	; (733c <xQueueSemaphoreTake+0x3bc>)
    72be:	4798      	blx	r3
    72c0:	1e03      	subs	r3, r0, #0
    72c2:	d000      	beq.n	72c6 <xQueueSemaphoreTake+0x346>
    72c4:	e680      	b.n	6fc8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    72c6:	4b13      	ldr	r3, [pc, #76]	; (7314 <xQueueSemaphoreTake+0x394>)
    72c8:	4798      	blx	r3
    72ca:	e67d      	b.n	6fc8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    72cc:	69fb      	ldr	r3, [r7, #28]
    72ce:	0018      	movs	r0, r3
    72d0:	4b19      	ldr	r3, [pc, #100]	; (7338 <xQueueSemaphoreTake+0x3b8>)
    72d2:	4798      	blx	r3
				( void ) xTaskResumeAll();
    72d4:	4b19      	ldr	r3, [pc, #100]	; (733c <xQueueSemaphoreTake+0x3bc>)
    72d6:	4798      	blx	r3
    72d8:	e676      	b.n	6fc8 <xQueueSemaphoreTake+0x48>
    72da:	46c0      	nop			; (mov r8, r8)
    72dc:	000089fd 	.word	0x000089fd
    72e0:	00005cd9 	.word	0x00005cd9
    72e4:	00003f71 	.word	0x00003f71
    72e8:	00003cd5 	.word	0x00003cd5
    72ec:	200000f4 	.word	0x200000f4
    72f0:	00003d95 	.word	0x00003d95
    72f4:	00003c95 	.word	0x00003c95
    72f8:	200000e8 	.word	0x200000e8
    72fc:	00003d75 	.word	0x00003d75
    7300:	000046cd 	.word	0x000046cd
    7304:	00003cb5 	.word	0x00003cb5
    7308:	00004d29 	.word	0x00004d29
    730c:	00008ec9 	.word	0x00008ec9
    7310:	0000856d 	.word	0x0000856d
    7314:	00005cc1 	.word	0x00005cc1
    7318:	00005cfd 	.word	0x00005cfd
    731c:	000086ad 	.word	0x000086ad
    7320:	00007f95 	.word	0x00007f95
    7324:	000086d5 	.word	0x000086d5
    7328:	000076c9 	.word	0x000076c9
    732c:	00004e65 	.word	0x00004e65
    7330:	00008a35 	.word	0x00008a35
    7334:	00008449 	.word	0x00008449
    7338:	000075d9 	.word	0x000075d9
    733c:	00007fad 	.word	0x00007fad
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    7340:	69fb      	ldr	r3, [r7, #28]
    7342:	0018      	movs	r0, r3
    7344:	4b2d      	ldr	r3, [pc, #180]	; (73fc <xQueueSemaphoreTake+0x47c>)
    7346:	4798      	blx	r3
			( void ) xTaskResumeAll();
    7348:	4b2d      	ldr	r3, [pc, #180]	; (7400 <xQueueSemaphoreTake+0x480>)
    734a:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    734c:	69fb      	ldr	r3, [r7, #28]
    734e:	0018      	movs	r0, r3
    7350:	4b2c      	ldr	r3, [pc, #176]	; (7404 <xQueueSemaphoreTake+0x484>)
    7352:	4798      	blx	r3
    7354:	1e03      	subs	r3, r0, #0
    7356:	d100      	bne.n	735a <xQueueSemaphoreTake+0x3da>
    7358:	e636      	b.n	6fc8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    735a:	6a3b      	ldr	r3, [r7, #32]
    735c:	2b00      	cmp	r3, #0
    735e:	d010      	beq.n	7382 <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
    7360:	4b29      	ldr	r3, [pc, #164]	; (7408 <xQueueSemaphoreTake+0x488>)
    7362:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    7364:	69fb      	ldr	r3, [r7, #28]
    7366:	0018      	movs	r0, r3
    7368:	4b28      	ldr	r3, [pc, #160]	; (740c <xQueueSemaphoreTake+0x48c>)
    736a:	4798      	blx	r3
    736c:	0003      	movs	r3, r0
    736e:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    7370:	69fb      	ldr	r3, [r7, #28]
    7372:	685b      	ldr	r3, [r3, #4]
    7374:	697a      	ldr	r2, [r7, #20]
    7376:	0011      	movs	r1, r2
    7378:	0018      	movs	r0, r3
    737a:	4b25      	ldr	r3, [pc, #148]	; (7410 <xQueueSemaphoreTake+0x490>)
    737c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    737e:	4b25      	ldr	r3, [pc, #148]	; (7414 <xQueueSemaphoreTake+0x494>)
    7380:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
    7382:	4b25      	ldr	r3, [pc, #148]	; (7418 <xQueueSemaphoreTake+0x498>)
    7384:	4798      	blx	r3
    7386:	0003      	movs	r3, r0
    7388:	0018      	movs	r0, r3
    738a:	4b24      	ldr	r3, [pc, #144]	; (741c <xQueueSemaphoreTake+0x49c>)
    738c:	4798      	blx	r3
    738e:	0003      	movs	r3, r0
    7390:	001a      	movs	r2, r3
    7392:	4b23      	ldr	r3, [pc, #140]	; (7420 <xQueueSemaphoreTake+0x4a0>)
    7394:	881b      	ldrh	r3, [r3, #0]
    7396:	4013      	ands	r3, r2
    7398:	b29b      	uxth	r3, r3
    739a:	2b00      	cmp	r3, #0
    739c:	d029      	beq.n	73f2 <xQueueSemaphoreTake+0x472>
    739e:	69fb      	ldr	r3, [r7, #28]
    73a0:	0018      	movs	r0, r3
    73a2:	4b20      	ldr	r3, [pc, #128]	; (7424 <xQueueSemaphoreTake+0x4a4>)
    73a4:	4798      	blx	r3
    73a6:	0003      	movs	r3, r0
    73a8:	001a      	movs	r2, r3
    73aa:	4b1d      	ldr	r3, [pc, #116]	; (7420 <xQueueSemaphoreTake+0x4a0>)
    73ac:	881b      	ldrh	r3, [r3, #0]
    73ae:	4013      	ands	r3, r2
    73b0:	b29b      	uxth	r3, r3
    73b2:	2b00      	cmp	r3, #0
    73b4:	d01d      	beq.n	73f2 <xQueueSemaphoreTake+0x472>
    73b6:	69fb      	ldr	r3, [r7, #28]
    73b8:	0018      	movs	r0, r3
    73ba:	4b1b      	ldr	r3, [pc, #108]	; (7428 <xQueueSemaphoreTake+0x4a8>)
    73bc:	4798      	blx	r3
    73be:	0003      	movs	r3, r0
    73c0:	001a      	movs	r2, r3
    73c2:	4b1a      	ldr	r3, [pc, #104]	; (742c <xQueueSemaphoreTake+0x4ac>)
    73c4:	5c9b      	ldrb	r3, [r3, r2]
    73c6:	3350      	adds	r3, #80	; 0x50
    73c8:	b2db      	uxtb	r3, r3
    73ca:	001d      	movs	r5, r3
    73cc:	69fb      	ldr	r3, [r7, #28]
    73ce:	0018      	movs	r0, r3
    73d0:	4b15      	ldr	r3, [pc, #84]	; (7428 <xQueueSemaphoreTake+0x4a8>)
    73d2:	4798      	blx	r3
    73d4:	0003      	movs	r3, r0
    73d6:	001a      	movs	r2, r3
    73d8:	4b14      	ldr	r3, [pc, #80]	; (742c <xQueueSemaphoreTake+0x4ac>)
    73da:	5c9c      	ldrb	r4, [r3, r2]
    73dc:	69fb      	ldr	r3, [r7, #28]
    73de:	0018      	movs	r0, r3
    73e0:	4b13      	ldr	r3, [pc, #76]	; (7430 <xQueueSemaphoreTake+0x4b0>)
    73e2:	4798      	blx	r3
    73e4:	0003      	movs	r3, r0
    73e6:	b2db      	uxtb	r3, r3
    73e8:	001a      	movs	r2, r3
    73ea:	0021      	movs	r1, r4
    73ec:	0028      	movs	r0, r5
    73ee:	4b11      	ldr	r3, [pc, #68]	; (7434 <xQueueSemaphoreTake+0x4b4>)
    73f0:	4798      	blx	r3
				return errQUEUE_EMPTY;
    73f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    73f4:	0018      	movs	r0, r3
    73f6:	46bd      	mov	sp, r7
    73f8:	b00a      	add	sp, #40	; 0x28
    73fa:	bdb0      	pop	{r4, r5, r7, pc}
    73fc:	000075d9 	.word	0x000075d9
    7400:	00007fad 	.word	0x00007fad
    7404:	000076c9 	.word	0x000076c9
    7408:	00005cd9 	.word	0x00005cd9
    740c:	0000747b 	.word	0x0000747b
    7410:	00008d2d 	.word	0x00008d2d
    7414:	00005cfd 	.word	0x00005cfd
    7418:	00003f71 	.word	0x00003f71
    741c:	00003cd5 	.word	0x00003cd5
    7420:	200000f4 	.word	0x200000f4
    7424:	00003d95 	.word	0x00003d95
    7428:	00003c95 	.word	0x00003c95
    742c:	200000e8 	.word	0x200000e8
    7430:	00003d75 	.word	0x00003d75
    7434:	000046cd 	.word	0x000046cd

00007438 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
    7438:	b580      	push	{r7, lr}
    743a:	b082      	sub	sp, #8
    743c:	af00      	add	r7, sp, #0
    743e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    7440:	687b      	ldr	r3, [r7, #4]
    7442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
    7444:	0018      	movs	r0, r3
    7446:	46bd      	mov	sp, r7
    7448:	b002      	add	sp, #8
    744a:	bd80      	pop	{r7, pc}

0000744c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
    744c:	b580      	push	{r7, lr}
    744e:	b082      	sub	sp, #8
    7450:	af00      	add	r7, sp, #0
    7452:	6078      	str	r0, [r7, #4]
    7454:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    7456:	687b      	ldr	r3, [r7, #4]
    7458:	683a      	ldr	r2, [r7, #0]
    745a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
    745c:	46c0      	nop			; (mov r8, r8)
    745e:	46bd      	mov	sp, r7
    7460:	b002      	add	sp, #8
    7462:	bd80      	pop	{r7, pc}

00007464 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
    7464:	b580      	push	{r7, lr}
    7466:	b082      	sub	sp, #8
    7468:	af00      	add	r7, sp, #0
    746a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	2250      	movs	r2, #80	; 0x50
    7470:	5c9b      	ldrb	r3, [r3, r2]
	}
    7472:	0018      	movs	r0, r3
    7474:	46bd      	mov	sp, r7
    7476:	b002      	add	sp, #8
    7478:	bd80      	pop	{r7, pc}

0000747a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    747a:	b580      	push	{r7, lr}
    747c:	b084      	sub	sp, #16
    747e:	af00      	add	r7, sp, #0
    7480:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    7482:	687b      	ldr	r3, [r7, #4]
    7484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7486:	2b00      	cmp	r3, #0
    7488:	d006      	beq.n	7498 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    748e:	681b      	ldr	r3, [r3, #0]
    7490:	2205      	movs	r2, #5
    7492:	1ad3      	subs	r3, r2, r3
    7494:	60fb      	str	r3, [r7, #12]
    7496:	e001      	b.n	749c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    7498:	2300      	movs	r3, #0
    749a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    749c:	68fb      	ldr	r3, [r7, #12]
	}
    749e:	0018      	movs	r0, r3
    74a0:	46bd      	mov	sp, r7
    74a2:	b004      	add	sp, #16
    74a4:	bd80      	pop	{r7, pc}
	...

000074a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    74a8:	b580      	push	{r7, lr}
    74aa:	b086      	sub	sp, #24
    74ac:	af00      	add	r7, sp, #0
    74ae:	60f8      	str	r0, [r7, #12]
    74b0:	60b9      	str	r1, [r7, #8]
    74b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    74b4:	2300      	movs	r3, #0
    74b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    74b8:	68fb      	ldr	r3, [r7, #12]
    74ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    74bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    74be:	68fb      	ldr	r3, [r7, #12]
    74c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    74c2:	2b00      	cmp	r3, #0
    74c4:	d10e      	bne.n	74e4 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    74c6:	68fb      	ldr	r3, [r7, #12]
    74c8:	681b      	ldr	r3, [r3, #0]
    74ca:	2b00      	cmp	r3, #0
    74cc:	d14e      	bne.n	756c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    74ce:	68fb      	ldr	r3, [r7, #12]
    74d0:	685b      	ldr	r3, [r3, #4]
    74d2:	0018      	movs	r0, r3
    74d4:	4b2a      	ldr	r3, [pc, #168]	; (7580 <prvCopyDataToQueue+0xd8>)
    74d6:	4798      	blx	r3
    74d8:	0003      	movs	r3, r0
    74da:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    74dc:	68fb      	ldr	r3, [r7, #12]
    74de:	2200      	movs	r2, #0
    74e0:	605a      	str	r2, [r3, #4]
    74e2:	e043      	b.n	756c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    74e4:	687b      	ldr	r3, [r7, #4]
    74e6:	2b00      	cmp	r3, #0
    74e8:	d119      	bne.n	751e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    74ea:	68fb      	ldr	r3, [r7, #12]
    74ec:	6898      	ldr	r0, [r3, #8]
    74ee:	68fb      	ldr	r3, [r7, #12]
    74f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    74f2:	68bb      	ldr	r3, [r7, #8]
    74f4:	0019      	movs	r1, r3
    74f6:	4b23      	ldr	r3, [pc, #140]	; (7584 <prvCopyDataToQueue+0xdc>)
    74f8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    74fa:	68fb      	ldr	r3, [r7, #12]
    74fc:	689a      	ldr	r2, [r3, #8]
    74fe:	68fb      	ldr	r3, [r7, #12]
    7500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7502:	18d2      	adds	r2, r2, r3
    7504:	68fb      	ldr	r3, [r7, #12]
    7506:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    7508:	68fb      	ldr	r3, [r7, #12]
    750a:	689a      	ldr	r2, [r3, #8]
    750c:	68fb      	ldr	r3, [r7, #12]
    750e:	685b      	ldr	r3, [r3, #4]
    7510:	429a      	cmp	r2, r3
    7512:	d32b      	bcc.n	756c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    7514:	68fb      	ldr	r3, [r7, #12]
    7516:	681a      	ldr	r2, [r3, #0]
    7518:	68fb      	ldr	r3, [r7, #12]
    751a:	609a      	str	r2, [r3, #8]
    751c:	e026      	b.n	756c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    751e:	68fb      	ldr	r3, [r7, #12]
    7520:	68d8      	ldr	r0, [r3, #12]
    7522:	68fb      	ldr	r3, [r7, #12]
    7524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7526:	68bb      	ldr	r3, [r7, #8]
    7528:	0019      	movs	r1, r3
    752a:	4b16      	ldr	r3, [pc, #88]	; (7584 <prvCopyDataToQueue+0xdc>)
    752c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    752e:	68fb      	ldr	r3, [r7, #12]
    7530:	68da      	ldr	r2, [r3, #12]
    7532:	68fb      	ldr	r3, [r7, #12]
    7534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7536:	425b      	negs	r3, r3
    7538:	18d2      	adds	r2, r2, r3
    753a:	68fb      	ldr	r3, [r7, #12]
    753c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    753e:	68fb      	ldr	r3, [r7, #12]
    7540:	68da      	ldr	r2, [r3, #12]
    7542:	68fb      	ldr	r3, [r7, #12]
    7544:	681b      	ldr	r3, [r3, #0]
    7546:	429a      	cmp	r2, r3
    7548:	d207      	bcs.n	755a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    754a:	68fb      	ldr	r3, [r7, #12]
    754c:	685a      	ldr	r2, [r3, #4]
    754e:	68fb      	ldr	r3, [r7, #12]
    7550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7552:	425b      	negs	r3, r3
    7554:	18d2      	adds	r2, r2, r3
    7556:	68fb      	ldr	r3, [r7, #12]
    7558:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    755a:	687b      	ldr	r3, [r7, #4]
    755c:	2b02      	cmp	r3, #2
    755e:	d105      	bne.n	756c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    7560:	693b      	ldr	r3, [r7, #16]
    7562:	2b00      	cmp	r3, #0
    7564:	d002      	beq.n	756c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    7566:	693b      	ldr	r3, [r7, #16]
    7568:	3b01      	subs	r3, #1
    756a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    756c:	693b      	ldr	r3, [r7, #16]
    756e:	1c5a      	adds	r2, r3, #1
    7570:	68fb      	ldr	r3, [r7, #12]
    7572:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    7574:	697b      	ldr	r3, [r7, #20]
}
    7576:	0018      	movs	r0, r3
    7578:	46bd      	mov	sp, r7
    757a:	b006      	add	sp, #24
    757c:	bd80      	pop	{r7, pc}
    757e:	46c0      	nop			; (mov r8, r8)
    7580:	00008bc5 	.word	0x00008bc5
    7584:	000200ed 	.word	0x000200ed

00007588 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    7588:	b580      	push	{r7, lr}
    758a:	b082      	sub	sp, #8
    758c:	af00      	add	r7, sp, #0
    758e:	6078      	str	r0, [r7, #4]
    7590:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    7592:	687b      	ldr	r3, [r7, #4]
    7594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7596:	2b00      	cmp	r3, #0
    7598:	d018      	beq.n	75cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    759a:	687b      	ldr	r3, [r7, #4]
    759c:	68da      	ldr	r2, [r3, #12]
    759e:	687b      	ldr	r3, [r7, #4]
    75a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    75a2:	18d2      	adds	r2, r2, r3
    75a4:	687b      	ldr	r3, [r7, #4]
    75a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    75a8:	687b      	ldr	r3, [r7, #4]
    75aa:	68da      	ldr	r2, [r3, #12]
    75ac:	687b      	ldr	r3, [r7, #4]
    75ae:	685b      	ldr	r3, [r3, #4]
    75b0:	429a      	cmp	r2, r3
    75b2:	d303      	bcc.n	75bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    75b4:	687b      	ldr	r3, [r7, #4]
    75b6:	681a      	ldr	r2, [r3, #0]
    75b8:	687b      	ldr	r3, [r7, #4]
    75ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    75bc:	687b      	ldr	r3, [r7, #4]
    75be:	68d9      	ldr	r1, [r3, #12]
    75c0:	687b      	ldr	r3, [r7, #4]
    75c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    75c4:	683b      	ldr	r3, [r7, #0]
    75c6:	0018      	movs	r0, r3
    75c8:	4b02      	ldr	r3, [pc, #8]	; (75d4 <prvCopyDataFromQueue+0x4c>)
    75ca:	4798      	blx	r3
	}
}
    75cc:	46c0      	nop			; (mov r8, r8)
    75ce:	46bd      	mov	sp, r7
    75d0:	b002      	add	sp, #8
    75d2:	bd80      	pop	{r7, pc}
    75d4:	000200ed 	.word	0x000200ed

000075d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    75d8:	b580      	push	{r7, lr}
    75da:	b084      	sub	sp, #16
    75dc:	af00      	add	r7, sp, #0
    75de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    75e0:	4b34      	ldr	r3, [pc, #208]	; (76b4 <prvUnlockQueue+0xdc>)
    75e2:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    75e4:	230f      	movs	r3, #15
    75e6:	18fb      	adds	r3, r7, r3
    75e8:	687a      	ldr	r2, [r7, #4]
    75ea:	2145      	movs	r1, #69	; 0x45
    75ec:	5c52      	ldrb	r2, [r2, r1]
    75ee:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    75f0:	e022      	b.n	7638 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    75f6:	2b00      	cmp	r3, #0
    75f8:	d009      	beq.n	760e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    75fa:	687b      	ldr	r3, [r7, #4]
    75fc:	2100      	movs	r1, #0
    75fe:	0018      	movs	r0, r3
    7600:	4b2d      	ldr	r3, [pc, #180]	; (76b8 <prvUnlockQueue+0xe0>)
    7602:	4798      	blx	r3
    7604:	1e03      	subs	r3, r0, #0
    7606:	d00f      	beq.n	7628 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    7608:	4b2c      	ldr	r3, [pc, #176]	; (76bc <prvUnlockQueue+0xe4>)
    760a:	4798      	blx	r3
    760c:	e00c      	b.n	7628 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    760e:	687b      	ldr	r3, [r7, #4]
    7610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7612:	2b00      	cmp	r3, #0
    7614:	d017      	beq.n	7646 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7616:	687b      	ldr	r3, [r7, #4]
    7618:	3324      	adds	r3, #36	; 0x24
    761a:	0018      	movs	r0, r3
    761c:	4b28      	ldr	r3, [pc, #160]	; (76c0 <prvUnlockQueue+0xe8>)
    761e:	4798      	blx	r3
    7620:	1e03      	subs	r3, r0, #0
    7622:	d001      	beq.n	7628 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    7624:	4b25      	ldr	r3, [pc, #148]	; (76bc <prvUnlockQueue+0xe4>)
    7626:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    7628:	230f      	movs	r3, #15
    762a:	18fb      	adds	r3, r7, r3
    762c:	781b      	ldrb	r3, [r3, #0]
    762e:	3b01      	subs	r3, #1
    7630:	b2da      	uxtb	r2, r3
    7632:	230f      	movs	r3, #15
    7634:	18fb      	adds	r3, r7, r3
    7636:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    7638:	230f      	movs	r3, #15
    763a:	18fb      	adds	r3, r7, r3
    763c:	781b      	ldrb	r3, [r3, #0]
    763e:	b25b      	sxtb	r3, r3
    7640:	2b00      	cmp	r3, #0
    7642:	dcd6      	bgt.n	75f2 <prvUnlockQueue+0x1a>
    7644:	e000      	b.n	7648 <prvUnlockQueue+0x70>
						break;
    7646:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    7648:	687b      	ldr	r3, [r7, #4]
    764a:	2245      	movs	r2, #69	; 0x45
    764c:	21ff      	movs	r1, #255	; 0xff
    764e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    7650:	4b1c      	ldr	r3, [pc, #112]	; (76c4 <prvUnlockQueue+0xec>)
    7652:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    7654:	4b17      	ldr	r3, [pc, #92]	; (76b4 <prvUnlockQueue+0xdc>)
    7656:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    7658:	230e      	movs	r3, #14
    765a:	18fb      	adds	r3, r7, r3
    765c:	687a      	ldr	r2, [r7, #4]
    765e:	2144      	movs	r1, #68	; 0x44
    7660:	5c52      	ldrb	r2, [r2, r1]
    7662:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    7664:	e014      	b.n	7690 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7666:	687b      	ldr	r3, [r7, #4]
    7668:	691b      	ldr	r3, [r3, #16]
    766a:	2b00      	cmp	r3, #0
    766c:	d017      	beq.n	769e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	3310      	adds	r3, #16
    7672:	0018      	movs	r0, r3
    7674:	4b12      	ldr	r3, [pc, #72]	; (76c0 <prvUnlockQueue+0xe8>)
    7676:	4798      	blx	r3
    7678:	1e03      	subs	r3, r0, #0
    767a:	d001      	beq.n	7680 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    767c:	4b0f      	ldr	r3, [pc, #60]	; (76bc <prvUnlockQueue+0xe4>)
    767e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    7680:	230e      	movs	r3, #14
    7682:	18fb      	adds	r3, r7, r3
    7684:	781b      	ldrb	r3, [r3, #0]
    7686:	3b01      	subs	r3, #1
    7688:	b2da      	uxtb	r2, r3
    768a:	230e      	movs	r3, #14
    768c:	18fb      	adds	r3, r7, r3
    768e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    7690:	230e      	movs	r3, #14
    7692:	18fb      	adds	r3, r7, r3
    7694:	781b      	ldrb	r3, [r3, #0]
    7696:	b25b      	sxtb	r3, r3
    7698:	2b00      	cmp	r3, #0
    769a:	dce4      	bgt.n	7666 <prvUnlockQueue+0x8e>
    769c:	e000      	b.n	76a0 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    769e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	2244      	movs	r2, #68	; 0x44
    76a4:	21ff      	movs	r1, #255	; 0xff
    76a6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    76a8:	4b06      	ldr	r3, [pc, #24]	; (76c4 <prvUnlockQueue+0xec>)
    76aa:	4798      	blx	r3
}
    76ac:	46c0      	nop			; (mov r8, r8)
    76ae:	46bd      	mov	sp, r7
    76b0:	b004      	add	sp, #16
    76b2:	bd80      	pop	{r7, pc}
    76b4:	00005cd9 	.word	0x00005cd9
    76b8:	000077ad 	.word	0x000077ad
    76bc:	00008781 	.word	0x00008781
    76c0:	0000856d 	.word	0x0000856d
    76c4:	00005cfd 	.word	0x00005cfd

000076c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    76c8:	b580      	push	{r7, lr}
    76ca:	b084      	sub	sp, #16
    76cc:	af00      	add	r7, sp, #0
    76ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    76d0:	4b08      	ldr	r3, [pc, #32]	; (76f4 <prvIsQueueEmpty+0x2c>)
    76d2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    76d8:	2b00      	cmp	r3, #0
    76da:	d102      	bne.n	76e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    76dc:	2301      	movs	r3, #1
    76de:	60fb      	str	r3, [r7, #12]
    76e0:	e001      	b.n	76e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    76e2:	2300      	movs	r3, #0
    76e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    76e6:	4b04      	ldr	r3, [pc, #16]	; (76f8 <prvIsQueueEmpty+0x30>)
    76e8:	4798      	blx	r3

	return xReturn;
    76ea:	68fb      	ldr	r3, [r7, #12]
}
    76ec:	0018      	movs	r0, r3
    76ee:	46bd      	mov	sp, r7
    76f0:	b004      	add	sp, #16
    76f2:	bd80      	pop	{r7, pc}
    76f4:	00005cd9 	.word	0x00005cd9
    76f8:	00005cfd 	.word	0x00005cfd

000076fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    76fc:	b580      	push	{r7, lr}
    76fe:	b084      	sub	sp, #16
    7700:	af00      	add	r7, sp, #0
    7702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    7704:	4b09      	ldr	r3, [pc, #36]	; (772c <prvIsQueueFull+0x30>)
    7706:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    7708:	687b      	ldr	r3, [r7, #4]
    770a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    770c:	687b      	ldr	r3, [r7, #4]
    770e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7710:	429a      	cmp	r2, r3
    7712:	d102      	bne.n	771a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    7714:	2301      	movs	r3, #1
    7716:	60fb      	str	r3, [r7, #12]
    7718:	e001      	b.n	771e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    771a:	2300      	movs	r3, #0
    771c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    771e:	4b04      	ldr	r3, [pc, #16]	; (7730 <prvIsQueueFull+0x34>)
    7720:	4798      	blx	r3

	return xReturn;
    7722:	68fb      	ldr	r3, [r7, #12]
}
    7724:	0018      	movs	r0, r3
    7726:	46bd      	mov	sp, r7
    7728:	b004      	add	sp, #16
    772a:	bd80      	pop	{r7, pc}
    772c:	00005cd9 	.word	0x00005cd9
    7730:	00005cfd 	.word	0x00005cfd

00007734 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    7734:	b580      	push	{r7, lr}
    7736:	b086      	sub	sp, #24
    7738:	af00      	add	r7, sp, #0
    773a:	60f8      	str	r0, [r7, #12]
    773c:	60b9      	str	r1, [r7, #8]
    773e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7740:	68fb      	ldr	r3, [r7, #12]
    7742:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    7744:	4b15      	ldr	r3, [pc, #84]	; (779c <vQueueWaitForMessageRestricted+0x68>)
    7746:	4798      	blx	r3
    7748:	697b      	ldr	r3, [r7, #20]
    774a:	2244      	movs	r2, #68	; 0x44
    774c:	5c9b      	ldrb	r3, [r3, r2]
    774e:	b25b      	sxtb	r3, r3
    7750:	3301      	adds	r3, #1
    7752:	d103      	bne.n	775c <vQueueWaitForMessageRestricted+0x28>
    7754:	697b      	ldr	r3, [r7, #20]
    7756:	2244      	movs	r2, #68	; 0x44
    7758:	2100      	movs	r1, #0
    775a:	5499      	strb	r1, [r3, r2]
    775c:	697b      	ldr	r3, [r7, #20]
    775e:	2245      	movs	r2, #69	; 0x45
    7760:	5c9b      	ldrb	r3, [r3, r2]
    7762:	b25b      	sxtb	r3, r3
    7764:	3301      	adds	r3, #1
    7766:	d103      	bne.n	7770 <vQueueWaitForMessageRestricted+0x3c>
    7768:	697b      	ldr	r3, [r7, #20]
    776a:	2245      	movs	r2, #69	; 0x45
    776c:	2100      	movs	r1, #0
    776e:	5499      	strb	r1, [r3, r2]
    7770:	4b0b      	ldr	r3, [pc, #44]	; (77a0 <vQueueWaitForMessageRestricted+0x6c>)
    7772:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    7774:	697b      	ldr	r3, [r7, #20]
    7776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7778:	2b00      	cmp	r3, #0
    777a:	d106      	bne.n	778a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    777c:	697b      	ldr	r3, [r7, #20]
    777e:	3324      	adds	r3, #36	; 0x24
    7780:	687a      	ldr	r2, [r7, #4]
    7782:	68b9      	ldr	r1, [r7, #8]
    7784:	0018      	movs	r0, r3
    7786:	4b07      	ldr	r3, [pc, #28]	; (77a4 <vQueueWaitForMessageRestricted+0x70>)
    7788:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    778a:	697b      	ldr	r3, [r7, #20]
    778c:	0018      	movs	r0, r3
    778e:	4b06      	ldr	r3, [pc, #24]	; (77a8 <vQueueWaitForMessageRestricted+0x74>)
    7790:	4798      	blx	r3
	}
    7792:	46c0      	nop			; (mov r8, r8)
    7794:	46bd      	mov	sp, r7
    7796:	b006      	add	sp, #24
    7798:	bd80      	pop	{r7, pc}
    779a:	46c0      	nop			; (mov r8, r8)
    779c:	00005cd9 	.word	0x00005cd9
    77a0:	00005cfd 	.word	0x00005cfd
    77a4:	0000848d 	.word	0x0000848d
    77a8:	000075d9 	.word	0x000075d9

000077ac <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    77ac:	b5b0      	push	{r4, r5, r7, lr}
    77ae:	b086      	sub	sp, #24
    77b0:	af00      	add	r7, sp, #0
    77b2:	6078      	str	r0, [r7, #4]
    77b4:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    77b6:	687b      	ldr	r3, [r7, #4]
    77b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    77ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    77bc:	2300      	movs	r3, #0
    77be:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    77c0:	693b      	ldr	r3, [r7, #16]
    77c2:	2b00      	cmp	r3, #0
    77c4:	d101      	bne.n	77ca <prvNotifyQueueSetContainer+0x1e>
    77c6:	b672      	cpsid	i
    77c8:	e7fe      	b.n	77c8 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    77ca:	693b      	ldr	r3, [r7, #16]
    77cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    77ce:	693b      	ldr	r3, [r7, #16]
    77d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    77d2:	429a      	cmp	r2, r3
    77d4:	d301      	bcc.n	77da <prvNotifyQueueSetContainer+0x2e>
    77d6:	b672      	cpsid	i
    77d8:	e7fe      	b.n	77d8 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    77da:	693b      	ldr	r3, [r7, #16]
    77dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    77de:	693b      	ldr	r3, [r7, #16]
    77e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    77e2:	429a      	cmp	r2, r3
    77e4:	d300      	bcc.n	77e8 <prvNotifyQueueSetContainer+0x3c>
    77e6:	e08b      	b.n	7900 <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    77e8:	230f      	movs	r3, #15
    77ea:	18fb      	adds	r3, r7, r3
    77ec:	693a      	ldr	r2, [r7, #16]
    77ee:	2145      	movs	r1, #69	; 0x45
    77f0:	5c52      	ldrb	r2, [r2, r1]
    77f2:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
    77f4:	4b45      	ldr	r3, [pc, #276]	; (790c <prvNotifyQueueSetContainer+0x160>)
    77f6:	4798      	blx	r3
    77f8:	0003      	movs	r3, r0
    77fa:	0018      	movs	r0, r3
    77fc:	4b44      	ldr	r3, [pc, #272]	; (7910 <prvNotifyQueueSetContainer+0x164>)
    77fe:	4798      	blx	r3
    7800:	0003      	movs	r3, r0
    7802:	001a      	movs	r2, r3
    7804:	4b43      	ldr	r3, [pc, #268]	; (7914 <prvNotifyQueueSetContainer+0x168>)
    7806:	881b      	ldrh	r3, [r3, #0]
    7808:	4013      	ands	r3, r2
    780a:	b29b      	uxth	r3, r3
    780c:	2b00      	cmp	r3, #0
    780e:	d02e      	beq.n	786e <prvNotifyQueueSetContainer+0xc2>
    7810:	693b      	ldr	r3, [r7, #16]
    7812:	0018      	movs	r0, r3
    7814:	4b40      	ldr	r3, [pc, #256]	; (7918 <prvNotifyQueueSetContainer+0x16c>)
    7816:	4798      	blx	r3
    7818:	0003      	movs	r3, r0
    781a:	001a      	movs	r2, r3
    781c:	4b3d      	ldr	r3, [pc, #244]	; (7914 <prvNotifyQueueSetContainer+0x168>)
    781e:	881b      	ldrh	r3, [r3, #0]
    7820:	4013      	ands	r3, r2
    7822:	b29b      	uxth	r3, r3
    7824:	2b00      	cmp	r3, #0
    7826:	d022      	beq.n	786e <prvNotifyQueueSetContainer+0xc2>
    7828:	683b      	ldr	r3, [r7, #0]
    782a:	2b00      	cmp	r3, #0
    782c:	d10b      	bne.n	7846 <prvNotifyQueueSetContainer+0x9a>
    782e:	693b      	ldr	r3, [r7, #16]
    7830:	0018      	movs	r0, r3
    7832:	4b3a      	ldr	r3, [pc, #232]	; (791c <prvNotifyQueueSetContainer+0x170>)
    7834:	4798      	blx	r3
    7836:	0003      	movs	r3, r0
    7838:	001a      	movs	r2, r3
    783a:	4b39      	ldr	r3, [pc, #228]	; (7920 <prvNotifyQueueSetContainer+0x174>)
    783c:	5c9b      	ldrb	r3, [r3, r2]
    783e:	3320      	adds	r3, #32
    7840:	b2db      	uxtb	r3, r3
    7842:	001d      	movs	r5, r3
    7844:	e000      	b.n	7848 <prvNotifyQueueSetContainer+0x9c>
    7846:	2525      	movs	r5, #37	; 0x25
    7848:	693b      	ldr	r3, [r7, #16]
    784a:	0018      	movs	r0, r3
    784c:	4b33      	ldr	r3, [pc, #204]	; (791c <prvNotifyQueueSetContainer+0x170>)
    784e:	4798      	blx	r3
    7850:	0003      	movs	r3, r0
    7852:	001a      	movs	r2, r3
    7854:	4b32      	ldr	r3, [pc, #200]	; (7920 <prvNotifyQueueSetContainer+0x174>)
    7856:	5c9c      	ldrb	r4, [r3, r2]
    7858:	693b      	ldr	r3, [r7, #16]
    785a:	0018      	movs	r0, r3
    785c:	4b31      	ldr	r3, [pc, #196]	; (7924 <prvNotifyQueueSetContainer+0x178>)
    785e:	4798      	blx	r3
    7860:	0003      	movs	r3, r0
    7862:	b2db      	uxtb	r3, r3
    7864:	001a      	movs	r2, r3
    7866:	0021      	movs	r1, r4
    7868:	0028      	movs	r0, r5
    786a:	4b2f      	ldr	r3, [pc, #188]	; (7928 <prvNotifyQueueSetContainer+0x17c>)
    786c:	4798      	blx	r3
    786e:	693b      	ldr	r3, [r7, #16]
    7870:	0018      	movs	r0, r3
    7872:	4b2a      	ldr	r3, [pc, #168]	; (791c <prvNotifyQueueSetContainer+0x170>)
    7874:	4798      	blx	r3
    7876:	0003      	movs	r3, r0
    7878:	001a      	movs	r2, r3
    787a:	4b29      	ldr	r3, [pc, #164]	; (7920 <prvNotifyQueueSetContainer+0x174>)
    787c:	5c9c      	ldrb	r4, [r3, r2]
    787e:	693b      	ldr	r3, [r7, #16]
    7880:	0018      	movs	r0, r3
    7882:	4b28      	ldr	r3, [pc, #160]	; (7924 <prvNotifyQueueSetContainer+0x178>)
    7884:	4798      	blx	r3
    7886:	0003      	movs	r3, r0
    7888:	b2dd      	uxtb	r5, r3
    788a:	693b      	ldr	r3, [r7, #16]
    788c:	0018      	movs	r0, r3
    788e:	4b23      	ldr	r3, [pc, #140]	; (791c <prvNotifyQueueSetContainer+0x170>)
    7890:	4798      	blx	r3
    7892:	0003      	movs	r3, r0
    7894:	001a      	movs	r2, r3
    7896:	4b22      	ldr	r3, [pc, #136]	; (7920 <prvNotifyQueueSetContainer+0x174>)
    7898:	5c9b      	ldrb	r3, [r3, r2]
    789a:	2b02      	cmp	r3, #2
    789c:	d005      	beq.n	78aa <prvNotifyQueueSetContainer+0xfe>
    789e:	693b      	ldr	r3, [r7, #16]
    78a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    78a2:	b2db      	uxtb	r3, r3
    78a4:	3301      	adds	r3, #1
    78a6:	b2db      	uxtb	r3, r3
    78a8:	e000      	b.n	78ac <prvNotifyQueueSetContainer+0x100>
    78aa:	2300      	movs	r3, #0
    78ac:	001a      	movs	r2, r3
    78ae:	0029      	movs	r1, r5
    78b0:	0020      	movs	r0, r4
    78b2:	4b1e      	ldr	r3, [pc, #120]	; (792c <prvNotifyQueueSetContainer+0x180>)
    78b4:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    78b6:	683a      	ldr	r2, [r7, #0]
    78b8:	1d39      	adds	r1, r7, #4
    78ba:	693b      	ldr	r3, [r7, #16]
    78bc:	0018      	movs	r0, r3
    78be:	4b1c      	ldr	r3, [pc, #112]	; (7930 <prvNotifyQueueSetContainer+0x184>)
    78c0:	4798      	blx	r3
    78c2:	0003      	movs	r3, r0
    78c4:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    78c6:	230f      	movs	r3, #15
    78c8:	18fb      	adds	r3, r7, r3
    78ca:	781b      	ldrb	r3, [r3, #0]
    78cc:	b25b      	sxtb	r3, r3
    78ce:	3301      	adds	r3, #1
    78d0:	d10d      	bne.n	78ee <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    78d2:	693b      	ldr	r3, [r7, #16]
    78d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78d6:	2b00      	cmp	r3, #0
    78d8:	d012      	beq.n	7900 <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    78da:	693b      	ldr	r3, [r7, #16]
    78dc:	3324      	adds	r3, #36	; 0x24
    78de:	0018      	movs	r0, r3
    78e0:	4b14      	ldr	r3, [pc, #80]	; (7934 <prvNotifyQueueSetContainer+0x188>)
    78e2:	4798      	blx	r3
    78e4:	1e03      	subs	r3, r0, #0
    78e6:	d00b      	beq.n	7900 <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    78e8:	2301      	movs	r3, #1
    78ea:	617b      	str	r3, [r7, #20]
    78ec:	e008      	b.n	7900 <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    78ee:	230f      	movs	r3, #15
    78f0:	18fb      	adds	r3, r7, r3
    78f2:	781b      	ldrb	r3, [r3, #0]
    78f4:	3301      	adds	r3, #1
    78f6:	b2db      	uxtb	r3, r3
    78f8:	b259      	sxtb	r1, r3
    78fa:	693b      	ldr	r3, [r7, #16]
    78fc:	2245      	movs	r2, #69	; 0x45
    78fe:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    7900:	697b      	ldr	r3, [r7, #20]
	}
    7902:	0018      	movs	r0, r3
    7904:	46bd      	mov	sp, r7
    7906:	b006      	add	sp, #24
    7908:	bdb0      	pop	{r4, r5, r7, pc}
    790a:	46c0      	nop			; (mov r8, r8)
    790c:	00003f71 	.word	0x00003f71
    7910:	00003cd5 	.word	0x00003cd5
    7914:	200000f4 	.word	0x200000f4
    7918:	00003d95 	.word	0x00003d95
    791c:	00003c95 	.word	0x00003c95
    7920:	200000e8 	.word	0x200000e8
    7924:	00003d75 	.word	0x00003d75
    7928:	000046cd 	.word	0x000046cd
    792c:	00004d29 	.word	0x00004d29
    7930:	000074a9 	.word	0x000074a9
    7934:	0000856d 	.word	0x0000856d

00007938 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    7938:	b590      	push	{r4, r7, lr}
    793a:	b08d      	sub	sp, #52	; 0x34
    793c:	af04      	add	r7, sp, #16
    793e:	60f8      	str	r0, [r7, #12]
    7940:	60b9      	str	r1, [r7, #8]
    7942:	603b      	str	r3, [r7, #0]
    7944:	1dbb      	adds	r3, r7, #6
    7946:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7948:	1dbb      	adds	r3, r7, #6
    794a:	881b      	ldrh	r3, [r3, #0]
    794c:	009b      	lsls	r3, r3, #2
    794e:	0018      	movs	r0, r3
    7950:	4b1d      	ldr	r3, [pc, #116]	; (79c8 <xTaskCreate+0x90>)
    7952:	4798      	blx	r3
    7954:	0003      	movs	r3, r0
    7956:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    7958:	697b      	ldr	r3, [r7, #20]
    795a:	2b00      	cmp	r3, #0
    795c:	d010      	beq.n	7980 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    795e:	2054      	movs	r0, #84	; 0x54
    7960:	4b19      	ldr	r3, [pc, #100]	; (79c8 <xTaskCreate+0x90>)
    7962:	4798      	blx	r3
    7964:	0003      	movs	r3, r0
    7966:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    7968:	69fb      	ldr	r3, [r7, #28]
    796a:	2b00      	cmp	r3, #0
    796c:	d003      	beq.n	7976 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    796e:	69fb      	ldr	r3, [r7, #28]
    7970:	697a      	ldr	r2, [r7, #20]
    7972:	631a      	str	r2, [r3, #48]	; 0x30
    7974:	e006      	b.n	7984 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    7976:	697b      	ldr	r3, [r7, #20]
    7978:	0018      	movs	r0, r3
    797a:	4b14      	ldr	r3, [pc, #80]	; (79cc <xTaskCreate+0x94>)
    797c:	4798      	blx	r3
    797e:	e001      	b.n	7984 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    7980:	2300      	movs	r3, #0
    7982:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    7984:	69fb      	ldr	r3, [r7, #28]
    7986:	2b00      	cmp	r3, #0
    7988:	d016      	beq.n	79b8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    798a:	1dbb      	adds	r3, r7, #6
    798c:	881a      	ldrh	r2, [r3, #0]
    798e:	683c      	ldr	r4, [r7, #0]
    7990:	68b9      	ldr	r1, [r7, #8]
    7992:	68f8      	ldr	r0, [r7, #12]
    7994:	2300      	movs	r3, #0
    7996:	9303      	str	r3, [sp, #12]
    7998:	69fb      	ldr	r3, [r7, #28]
    799a:	9302      	str	r3, [sp, #8]
    799c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    799e:	9301      	str	r3, [sp, #4]
    79a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    79a2:	9300      	str	r3, [sp, #0]
    79a4:	0023      	movs	r3, r4
    79a6:	4c0a      	ldr	r4, [pc, #40]	; (79d0 <xTaskCreate+0x98>)
    79a8:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    79aa:	69fb      	ldr	r3, [r7, #28]
    79ac:	0018      	movs	r0, r3
    79ae:	4b09      	ldr	r3, [pc, #36]	; (79d4 <xTaskCreate+0x9c>)
    79b0:	4798      	blx	r3
			xReturn = pdPASS;
    79b2:	2301      	movs	r3, #1
    79b4:	61bb      	str	r3, [r7, #24]
    79b6:	e002      	b.n	79be <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    79b8:	2301      	movs	r3, #1
    79ba:	425b      	negs	r3, r3
    79bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    79be:	69bb      	ldr	r3, [r7, #24]
	}
    79c0:	0018      	movs	r0, r3
    79c2:	46bd      	mov	sp, r7
    79c4:	b009      	add	sp, #36	; 0x24
    79c6:	bd90      	pop	{r4, r7, pc}
    79c8:	00005e11 	.word	0x00005e11
    79cc:	00005ed5 	.word	0x00005ed5
    79d0:	000079d9 	.word	0x000079d9
    79d4:	00007ae9 	.word	0x00007ae9

000079d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    79d8:	b580      	push	{r7, lr}
    79da:	b086      	sub	sp, #24
    79dc:	af00      	add	r7, sp, #0
    79de:	60f8      	str	r0, [r7, #12]
    79e0:	60b9      	str	r1, [r7, #8]
    79e2:	607a      	str	r2, [r7, #4]
    79e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    79e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    79e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
    79ea:	687b      	ldr	r3, [r7, #4]
    79ec:	009b      	lsls	r3, r3, #2
    79ee:	001a      	movs	r2, r3
    79f0:	21a5      	movs	r1, #165	; 0xa5
    79f2:	4b39      	ldr	r3, [pc, #228]	; (7ad8 <prvInitialiseNewTask+0x100>)
    79f4:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    79f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    79f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    79fa:	687b      	ldr	r3, [r7, #4]
    79fc:	4937      	ldr	r1, [pc, #220]	; (7adc <prvInitialiseNewTask+0x104>)
    79fe:	468c      	mov	ip, r1
    7a00:	4463      	add	r3, ip
    7a02:	009b      	lsls	r3, r3, #2
    7a04:	18d3      	adds	r3, r2, r3
    7a06:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    7a08:	693b      	ldr	r3, [r7, #16]
    7a0a:	2207      	movs	r2, #7
    7a0c:	4393      	bics	r3, r2
    7a0e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    7a10:	693b      	ldr	r3, [r7, #16]
    7a12:	2207      	movs	r2, #7
    7a14:	4013      	ands	r3, r2
    7a16:	d001      	beq.n	7a1c <prvInitialiseNewTask+0x44>
    7a18:	b672      	cpsid	i
    7a1a:	e7fe      	b.n	7a1a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7a1c:	2300      	movs	r3, #0
    7a1e:	617b      	str	r3, [r7, #20]
    7a20:	e013      	b.n	7a4a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    7a22:	68ba      	ldr	r2, [r7, #8]
    7a24:	697b      	ldr	r3, [r7, #20]
    7a26:	18d3      	adds	r3, r2, r3
    7a28:	7818      	ldrb	r0, [r3, #0]
    7a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7a2c:	2134      	movs	r1, #52	; 0x34
    7a2e:	697b      	ldr	r3, [r7, #20]
    7a30:	18d3      	adds	r3, r2, r3
    7a32:	185b      	adds	r3, r3, r1
    7a34:	1c02      	adds	r2, r0, #0
    7a36:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    7a38:	68ba      	ldr	r2, [r7, #8]
    7a3a:	697b      	ldr	r3, [r7, #20]
    7a3c:	18d3      	adds	r3, r2, r3
    7a3e:	781b      	ldrb	r3, [r3, #0]
    7a40:	2b00      	cmp	r3, #0
    7a42:	d006      	beq.n	7a52 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7a44:	697b      	ldr	r3, [r7, #20]
    7a46:	3301      	adds	r3, #1
    7a48:	617b      	str	r3, [r7, #20]
    7a4a:	697b      	ldr	r3, [r7, #20]
    7a4c:	2b07      	cmp	r3, #7
    7a4e:	d9e8      	bls.n	7a22 <prvInitialiseNewTask+0x4a>
    7a50:	e000      	b.n	7a54 <prvInitialiseNewTask+0x7c>
		{
			break;
    7a52:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    7a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a56:	223b      	movs	r2, #59	; 0x3b
    7a58:	2100      	movs	r1, #0
    7a5a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    7a5c:	6a3b      	ldr	r3, [r7, #32]
    7a5e:	2b04      	cmp	r3, #4
    7a60:	d901      	bls.n	7a66 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    7a62:	2304      	movs	r3, #4
    7a64:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    7a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a68:	6a3a      	ldr	r2, [r7, #32]
    7a6a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    7a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a6e:	6a3a      	ldr	r2, [r7, #32]
    7a70:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    7a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a74:	2200      	movs	r2, #0
    7a76:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    7a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a7a:	3304      	adds	r3, #4
    7a7c:	0018      	movs	r0, r3
    7a7e:	4b18      	ldr	r3, [pc, #96]	; (7ae0 <prvInitialiseNewTask+0x108>)
    7a80:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    7a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a84:	3318      	adds	r3, #24
    7a86:	0018      	movs	r0, r3
    7a88:	4b15      	ldr	r3, [pc, #84]	; (7ae0 <prvInitialiseNewTask+0x108>)
    7a8a:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    7a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7a90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7a92:	6a3b      	ldr	r3, [r7, #32]
    7a94:	2205      	movs	r2, #5
    7a96:	1ad2      	subs	r2, r2, r3
    7a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    7a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7aa0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    7aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7aa4:	2200      	movs	r2, #0
    7aa6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7aaa:	2250      	movs	r2, #80	; 0x50
    7aac:	2100      	movs	r1, #0
    7aae:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    7ab0:	683a      	ldr	r2, [r7, #0]
    7ab2:	68f9      	ldr	r1, [r7, #12]
    7ab4:	693b      	ldr	r3, [r7, #16]
    7ab6:	0018      	movs	r0, r3
    7ab8:	4b0a      	ldr	r3, [pc, #40]	; (7ae4 <prvInitialiseNewTask+0x10c>)
    7aba:	4798      	blx	r3
    7abc:	0002      	movs	r2, r0
    7abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ac0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    7ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	d002      	beq.n	7ace <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    7ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7acc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    7ace:	46c0      	nop			; (mov r8, r8)
    7ad0:	46bd      	mov	sp, r7
    7ad2:	b006      	add	sp, #24
    7ad4:	bd80      	pop	{r7, pc}
    7ad6:	46c0      	nop			; (mov r8, r8)
    7ad8:	00020123 	.word	0x00020123
    7adc:	3fffffff 	.word	0x3fffffff
    7ae0:	00005a89 	.word	0x00005a89
    7ae4:	00005ba1 	.word	0x00005ba1

00007ae8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    7ae8:	b580      	push	{r7, lr}
    7aea:	b082      	sub	sp, #8
    7aec:	af00      	add	r7, sp, #0
    7aee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    7af0:	4b60      	ldr	r3, [pc, #384]	; (7c74 <prvAddNewTaskToReadyList+0x18c>)
    7af2:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    7af4:	4b60      	ldr	r3, [pc, #384]	; (7c78 <prvAddNewTaskToReadyList+0x190>)
    7af6:	681b      	ldr	r3, [r3, #0]
    7af8:	1c5a      	adds	r2, r3, #1
    7afa:	4b5f      	ldr	r3, [pc, #380]	; (7c78 <prvAddNewTaskToReadyList+0x190>)
    7afc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    7afe:	4b5f      	ldr	r3, [pc, #380]	; (7c7c <prvAddNewTaskToReadyList+0x194>)
    7b00:	681b      	ldr	r3, [r3, #0]
    7b02:	2b00      	cmp	r3, #0
    7b04:	d109      	bne.n	7b1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    7b06:	4b5d      	ldr	r3, [pc, #372]	; (7c7c <prvAddNewTaskToReadyList+0x194>)
    7b08:	687a      	ldr	r2, [r7, #4]
    7b0a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    7b0c:	4b5a      	ldr	r3, [pc, #360]	; (7c78 <prvAddNewTaskToReadyList+0x190>)
    7b0e:	681b      	ldr	r3, [r3, #0]
    7b10:	2b01      	cmp	r3, #1
    7b12:	d110      	bne.n	7b36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    7b14:	4b5a      	ldr	r3, [pc, #360]	; (7c80 <prvAddNewTaskToReadyList+0x198>)
    7b16:	4798      	blx	r3
    7b18:	e00d      	b.n	7b36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    7b1a:	4b5a      	ldr	r3, [pc, #360]	; (7c84 <prvAddNewTaskToReadyList+0x19c>)
    7b1c:	681b      	ldr	r3, [r3, #0]
    7b1e:	2b00      	cmp	r3, #0
    7b20:	d109      	bne.n	7b36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    7b22:	4b56      	ldr	r3, [pc, #344]	; (7c7c <prvAddNewTaskToReadyList+0x194>)
    7b24:	681b      	ldr	r3, [r3, #0]
    7b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b28:	687b      	ldr	r3, [r7, #4]
    7b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b2c:	429a      	cmp	r2, r3
    7b2e:	d802      	bhi.n	7b36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    7b30:	4b52      	ldr	r3, [pc, #328]	; (7c7c <prvAddNewTaskToReadyList+0x194>)
    7b32:	687a      	ldr	r2, [r7, #4]
    7b34:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    7b36:	4b54      	ldr	r3, [pc, #336]	; (7c88 <prvAddNewTaskToReadyList+0x1a0>)
    7b38:	681b      	ldr	r3, [r3, #0]
    7b3a:	1c5a      	adds	r2, r3, #1
    7b3c:	4b52      	ldr	r3, [pc, #328]	; (7c88 <prvAddNewTaskToReadyList+0x1a0>)
    7b3e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    7b40:	4b51      	ldr	r3, [pc, #324]	; (7c88 <prvAddNewTaskToReadyList+0x1a0>)
    7b42:	681a      	ldr	r2, [r3, #0]
    7b44:	687b      	ldr	r3, [r7, #4]
    7b46:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
    7b48:	687b      	ldr	r3, [r7, #4]
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	d052      	beq.n	7bf4 <prvAddNewTaskToReadyList+0x10c>
    7b4e:	2003      	movs	r0, #3
    7b50:	4b4e      	ldr	r3, [pc, #312]	; (7c8c <prvAddNewTaskToReadyList+0x1a4>)
    7b52:	4798      	blx	r3
    7b54:	0003      	movs	r3, r0
    7b56:	b29a      	uxth	r2, r3
    7b58:	687b      	ldr	r3, [r7, #4]
    7b5a:	0011      	movs	r1, r2
    7b5c:	0018      	movs	r0, r3
    7b5e:	4b4c      	ldr	r3, [pc, #304]	; (7c90 <prvAddNewTaskToReadyList+0x1a8>)
    7b60:	4798      	blx	r3
    7b62:	4b4c      	ldr	r3, [pc, #304]	; (7c94 <prvAddNewTaskToReadyList+0x1ac>)
    7b64:	881a      	ldrh	r2, [r3, #0]
    7b66:	687b      	ldr	r3, [r7, #4]
    7b68:	0011      	movs	r1, r2
    7b6a:	0018      	movs	r0, r3
    7b6c:	4b4a      	ldr	r3, [pc, #296]	; (7c98 <prvAddNewTaskToReadyList+0x1b0>)
    7b6e:	4798      	blx	r3
    7b70:	687b      	ldr	r3, [r7, #4]
    7b72:	0018      	movs	r0, r3
    7b74:	4b49      	ldr	r3, [pc, #292]	; (7c9c <prvAddNewTaskToReadyList+0x1b4>)
    7b76:	4798      	blx	r3
    7b78:	0003      	movs	r3, r0
    7b7a:	b2d9      	uxtb	r1, r3
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	3334      	adds	r3, #52	; 0x34
    7b80:	001a      	movs	r2, r3
    7b82:	2003      	movs	r0, #3
    7b84:	4b46      	ldr	r3, [pc, #280]	; (7ca0 <prvAddNewTaskToReadyList+0x1b8>)
    7b86:	4798      	blx	r3
    7b88:	687b      	ldr	r3, [r7, #4]
    7b8a:	0018      	movs	r0, r3
    7b8c:	4b43      	ldr	r3, [pc, #268]	; (7c9c <prvAddNewTaskToReadyList+0x1b4>)
    7b8e:	4798      	blx	r3
    7b90:	0003      	movs	r3, r0
    7b92:	b2d9      	uxtb	r1, r3
    7b94:	687b      	ldr	r3, [r7, #4]
    7b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b98:	b2db      	uxtb	r3, r3
    7b9a:	001a      	movs	r2, r3
    7b9c:	2003      	movs	r0, #3
    7b9e:	4b41      	ldr	r3, [pc, #260]	; (7ca4 <prvAddNewTaskToReadyList+0x1bc>)
    7ba0:	4798      	blx	r3
    7ba2:	4b41      	ldr	r3, [pc, #260]	; (7ca8 <prvAddNewTaskToReadyList+0x1c0>)
    7ba4:	4798      	blx	r3
    7ba6:	0003      	movs	r3, r0
    7ba8:	0018      	movs	r0, r3
    7baa:	4b40      	ldr	r3, [pc, #256]	; (7cac <prvAddNewTaskToReadyList+0x1c4>)
    7bac:	4798      	blx	r3
    7bae:	0003      	movs	r3, r0
    7bb0:	001a      	movs	r2, r3
    7bb2:	4b3f      	ldr	r3, [pc, #252]	; (7cb0 <prvAddNewTaskToReadyList+0x1c8>)
    7bb4:	881b      	ldrh	r3, [r3, #0]
    7bb6:	4013      	ands	r3, r2
    7bb8:	b29b      	uxth	r3, r3
    7bba:	2b00      	cmp	r3, #0
    7bbc:	d016      	beq.n	7bec <prvAddNewTaskToReadyList+0x104>
    7bbe:	687b      	ldr	r3, [r7, #4]
    7bc0:	0018      	movs	r0, r3
    7bc2:	4b3a      	ldr	r3, [pc, #232]	; (7cac <prvAddNewTaskToReadyList+0x1c4>)
    7bc4:	4798      	blx	r3
    7bc6:	0003      	movs	r3, r0
    7bc8:	001a      	movs	r2, r3
    7bca:	4b39      	ldr	r3, [pc, #228]	; (7cb0 <prvAddNewTaskToReadyList+0x1c8>)
    7bcc:	881b      	ldrh	r3, [r3, #0]
    7bce:	4013      	ands	r3, r2
    7bd0:	b29b      	uxth	r3, r3
    7bd2:	2b00      	cmp	r3, #0
    7bd4:	d00a      	beq.n	7bec <prvAddNewTaskToReadyList+0x104>
    7bd6:	687b      	ldr	r3, [r7, #4]
    7bd8:	0018      	movs	r0, r3
    7bda:	4b30      	ldr	r3, [pc, #192]	; (7c9c <prvAddNewTaskToReadyList+0x1b4>)
    7bdc:	4798      	blx	r3
    7bde:	0003      	movs	r3, r0
    7be0:	b2db      	uxtb	r3, r3
    7be2:	001a      	movs	r2, r3
    7be4:	2103      	movs	r1, #3
    7be6:	201b      	movs	r0, #27
    7be8:	4b32      	ldr	r3, [pc, #200]	; (7cb4 <prvAddNewTaskToReadyList+0x1cc>)
    7bea:	4798      	blx	r3
    7bec:	687b      	ldr	r3, [r7, #4]
    7bee:	0018      	movs	r0, r3
    7bf0:	4b31      	ldr	r3, [pc, #196]	; (7cb8 <prvAddNewTaskToReadyList+0x1d0>)
    7bf2:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
    7bf4:	687b      	ldr	r3, [r7, #4]
    7bf6:	0018      	movs	r0, r3
    7bf8:	4b2c      	ldr	r3, [pc, #176]	; (7cac <prvAddNewTaskToReadyList+0x1c4>)
    7bfa:	4798      	blx	r3
    7bfc:	0003      	movs	r3, r0
    7bfe:	001a      	movs	r2, r3
    7c00:	4b2b      	ldr	r3, [pc, #172]	; (7cb0 <prvAddNewTaskToReadyList+0x1c8>)
    7c02:	881b      	ldrh	r3, [r3, #0]
    7c04:	4013      	ands	r3, r2
    7c06:	b29b      	uxth	r3, r3
    7c08:	2b00      	cmp	r3, #0
    7c0a:	d008      	beq.n	7c1e <prvAddNewTaskToReadyList+0x136>
    7c0c:	687b      	ldr	r3, [r7, #4]
    7c0e:	0018      	movs	r0, r3
    7c10:	4b22      	ldr	r3, [pc, #136]	; (7c9c <prvAddNewTaskToReadyList+0x1b4>)
    7c12:	4798      	blx	r3
    7c14:	0003      	movs	r3, r0
    7c16:	b2db      	uxtb	r3, r3
    7c18:	0018      	movs	r0, r3
    7c1a:	4b28      	ldr	r3, [pc, #160]	; (7cbc <prvAddNewTaskToReadyList+0x1d4>)
    7c1c:	4798      	blx	r3
    7c1e:	687b      	ldr	r3, [r7, #4]
    7c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c22:	4b27      	ldr	r3, [pc, #156]	; (7cc0 <prvAddNewTaskToReadyList+0x1d8>)
    7c24:	681b      	ldr	r3, [r3, #0]
    7c26:	429a      	cmp	r2, r3
    7c28:	d903      	bls.n	7c32 <prvAddNewTaskToReadyList+0x14a>
    7c2a:	687b      	ldr	r3, [r7, #4]
    7c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c2e:	4b24      	ldr	r3, [pc, #144]	; (7cc0 <prvAddNewTaskToReadyList+0x1d8>)
    7c30:	601a      	str	r2, [r3, #0]
    7c32:	687b      	ldr	r3, [r7, #4]
    7c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c36:	0013      	movs	r3, r2
    7c38:	009b      	lsls	r3, r3, #2
    7c3a:	189b      	adds	r3, r3, r2
    7c3c:	009b      	lsls	r3, r3, #2
    7c3e:	4a21      	ldr	r2, [pc, #132]	; (7cc4 <prvAddNewTaskToReadyList+0x1dc>)
    7c40:	189a      	adds	r2, r3, r2
    7c42:	687b      	ldr	r3, [r7, #4]
    7c44:	3304      	adds	r3, #4
    7c46:	0019      	movs	r1, r3
    7c48:	0010      	movs	r0, r2
    7c4a:	4b1f      	ldr	r3, [pc, #124]	; (7cc8 <prvAddNewTaskToReadyList+0x1e0>)
    7c4c:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    7c4e:	4b1f      	ldr	r3, [pc, #124]	; (7ccc <prvAddNewTaskToReadyList+0x1e4>)
    7c50:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    7c52:	4b0c      	ldr	r3, [pc, #48]	; (7c84 <prvAddNewTaskToReadyList+0x19c>)
    7c54:	681b      	ldr	r3, [r3, #0]
    7c56:	2b00      	cmp	r3, #0
    7c58:	d008      	beq.n	7c6c <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    7c5a:	4b08      	ldr	r3, [pc, #32]	; (7c7c <prvAddNewTaskToReadyList+0x194>)
    7c5c:	681b      	ldr	r3, [r3, #0]
    7c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c60:	687b      	ldr	r3, [r7, #4]
    7c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7c64:	429a      	cmp	r2, r3
    7c66:	d201      	bcs.n	7c6c <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
    7c68:	4b19      	ldr	r3, [pc, #100]	; (7cd0 <prvAddNewTaskToReadyList+0x1e8>)
    7c6a:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    7c6c:	46c0      	nop			; (mov r8, r8)
    7c6e:	46bd      	mov	sp, r7
    7c70:	b002      	add	sp, #8
    7c72:	bd80      	pop	{r7, pc}
    7c74:	00005cd9 	.word	0x00005cd9
    7c78:	20003c1c 	.word	0x20003c1c
    7c7c:	20003b44 	.word	0x20003b44
    7c80:	00008809 	.word	0x00008809
    7c84:	20003c28 	.word	0x20003c28
    7c88:	20003c38 	.word	0x20003c38
    7c8c:	00005255 	.word	0x00005255
    7c90:	00003cf9 	.word	0x00003cf9
    7c94:	200000f6 	.word	0x200000f6
    7c98:	00003d35 	.word	0x00003d35
    7c9c:	00003cb5 	.word	0x00003cb5
    7ca0:	00005485 	.word	0x00005485
    7ca4:	00004be9 	.word	0x00004be9
    7ca8:	00003f71 	.word	0x00003f71
    7cac:	00003cd5 	.word	0x00003cd5
    7cb0:	200000f4 	.word	0x200000f4
    7cb4:	000046cd 	.word	0x000046cd
    7cb8:	00003e35 	.word	0x00003e35
    7cbc:	00004485 	.word	0x00004485
    7cc0:	20003c24 	.word	0x20003c24
    7cc4:	20003b48 	.word	0x20003b48
    7cc8:	00005a9f 	.word	0x00005a9f
    7ccc:	00005cfd 	.word	0x00005cfd
    7cd0:	00005cc1 	.word	0x00005cc1

00007cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    7cd4:	b580      	push	{r7, lr}
    7cd6:	b084      	sub	sp, #16
    7cd8:	af00      	add	r7, sp, #0
    7cda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    7cdc:	2300      	movs	r3, #0
    7cde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    7ce0:	687b      	ldr	r3, [r7, #4]
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d045      	beq.n	7d72 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    7ce6:	4b27      	ldr	r3, [pc, #156]	; (7d84 <vTaskDelay+0xb0>)
    7ce8:	681b      	ldr	r3, [r3, #0]
    7cea:	2b00      	cmp	r3, #0
    7cec:	d001      	beq.n	7cf2 <vTaskDelay+0x1e>
    7cee:	b672      	cpsid	i
    7cf0:	e7fe      	b.n	7cf0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    7cf2:	4b25      	ldr	r3, [pc, #148]	; (7d88 <vTaskDelay+0xb4>)
    7cf4:	4798      	blx	r3
			{
				traceTASK_DELAY();
    7cf6:	4b25      	ldr	r3, [pc, #148]	; (7d8c <vTaskDelay+0xb8>)
    7cf8:	681b      	ldr	r3, [r3, #0]
    7cfa:	0018      	movs	r0, r3
    7cfc:	4b24      	ldr	r3, [pc, #144]	; (7d90 <vTaskDelay+0xbc>)
    7cfe:	4798      	blx	r3
    7d00:	0003      	movs	r3, r0
    7d02:	001a      	movs	r2, r3
    7d04:	4b23      	ldr	r3, [pc, #140]	; (7d94 <vTaskDelay+0xc0>)
    7d06:	881b      	ldrh	r3, [r3, #0]
    7d08:	4013      	ands	r3, r2
    7d0a:	b29b      	uxth	r3, r3
    7d0c:	2b00      	cmp	r3, #0
    7d0e:	d00e      	beq.n	7d2e <vTaskDelay+0x5a>
    7d10:	687b      	ldr	r3, [r7, #4]
    7d12:	0019      	movs	r1, r3
    7d14:	2089      	movs	r0, #137	; 0x89
    7d16:	4b20      	ldr	r3, [pc, #128]	; (7d98 <vTaskDelay+0xc4>)
    7d18:	4798      	blx	r3
    7d1a:	4b1c      	ldr	r3, [pc, #112]	; (7d8c <vTaskDelay+0xb8>)
    7d1c:	681b      	ldr	r3, [r3, #0]
    7d1e:	0018      	movs	r0, r3
    7d20:	4b1e      	ldr	r3, [pc, #120]	; (7d9c <vTaskDelay+0xc8>)
    7d22:	4798      	blx	r3
    7d24:	0003      	movs	r3, r0
    7d26:	b2db      	uxtb	r3, r3
    7d28:	0018      	movs	r0, r3
    7d2a:	4b1d      	ldr	r3, [pc, #116]	; (7da0 <vTaskDelay+0xcc>)
    7d2c:	4798      	blx	r3
    7d2e:	4b1d      	ldr	r3, [pc, #116]	; (7da4 <vTaskDelay+0xd0>)
    7d30:	4798      	blx	r3
    7d32:	0003      	movs	r3, r0
    7d34:	0018      	movs	r0, r3
    7d36:	4b16      	ldr	r3, [pc, #88]	; (7d90 <vTaskDelay+0xbc>)
    7d38:	4798      	blx	r3
    7d3a:	0003      	movs	r3, r0
    7d3c:	001a      	movs	r2, r3
    7d3e:	4b15      	ldr	r3, [pc, #84]	; (7d94 <vTaskDelay+0xc0>)
    7d40:	881b      	ldrh	r3, [r3, #0]
    7d42:	4013      	ands	r3, r2
    7d44:	b29b      	uxth	r3, r3
    7d46:	2b00      	cmp	r3, #0
    7d48:	d00a      	beq.n	7d60 <vTaskDelay+0x8c>
    7d4a:	4b16      	ldr	r3, [pc, #88]	; (7da4 <vTaskDelay+0xd0>)
    7d4c:	4798      	blx	r3
    7d4e:	0003      	movs	r3, r0
    7d50:	0018      	movs	r0, r3
    7d52:	4b12      	ldr	r3, [pc, #72]	; (7d9c <vTaskDelay+0xc8>)
    7d54:	4798      	blx	r3
    7d56:	0003      	movs	r3, r0
    7d58:	b2db      	uxtb	r3, r3
    7d5a:	0018      	movs	r0, r3
    7d5c:	4b10      	ldr	r3, [pc, #64]	; (7da0 <vTaskDelay+0xcc>)
    7d5e:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    7d60:	687b      	ldr	r3, [r7, #4]
    7d62:	2100      	movs	r1, #0
    7d64:	0018      	movs	r0, r3
    7d66:	4b10      	ldr	r3, [pc, #64]	; (7da8 <vTaskDelay+0xd4>)
    7d68:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    7d6a:	4b10      	ldr	r3, [pc, #64]	; (7dac <vTaskDelay+0xd8>)
    7d6c:	4798      	blx	r3
    7d6e:	0003      	movs	r3, r0
    7d70:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    7d72:	68fb      	ldr	r3, [r7, #12]
    7d74:	2b00      	cmp	r3, #0
    7d76:	d101      	bne.n	7d7c <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
    7d78:	4b0d      	ldr	r3, [pc, #52]	; (7db0 <vTaskDelay+0xdc>)
    7d7a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    7d7c:	46c0      	nop			; (mov r8, r8)
    7d7e:	46bd      	mov	sp, r7
    7d80:	b004      	add	sp, #16
    7d82:	bd80      	pop	{r7, pc}
    7d84:	20003c44 	.word	0x20003c44
    7d88:	00007f95 	.word	0x00007f95
    7d8c:	20003b44 	.word	0x20003b44
    7d90:	00003cd5 	.word	0x00003cd5
    7d94:	200000f4 	.word	0x200000f4
    7d98:	000049d5 	.word	0x000049d5
    7d9c:	00003cb5 	.word	0x00003cb5
    7da0:	00004e65 	.word	0x00004e65
    7da4:	00003f71 	.word	0x00003f71
    7da8:	00008eed 	.word	0x00008eed
    7dac:	00007fad 	.word	0x00007fad
    7db0:	00005cc1 	.word	0x00005cc1

00007db4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    7db4:	b580      	push	{r7, lr}
    7db6:	b084      	sub	sp, #16
    7db8:	af00      	add	r7, sp, #0
    7dba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    7dbc:	4b42      	ldr	r3, [pc, #264]	; (7ec8 <vTaskSuspend+0x114>)
    7dbe:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    7dc0:	687b      	ldr	r3, [r7, #4]
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	d102      	bne.n	7dcc <vTaskSuspend+0x18>
    7dc6:	4b41      	ldr	r3, [pc, #260]	; (7ecc <vTaskSuspend+0x118>)
    7dc8:	681b      	ldr	r3, [r3, #0]
    7dca:	e000      	b.n	7dce <vTaskSuspend+0x1a>
    7dcc:	687b      	ldr	r3, [r7, #4]
    7dce:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
    7dd0:	4b3f      	ldr	r3, [pc, #252]	; (7ed0 <vTaskSuspend+0x11c>)
    7dd2:	4798      	blx	r3
    7dd4:	0003      	movs	r3, r0
    7dd6:	0018      	movs	r0, r3
    7dd8:	4b3e      	ldr	r3, [pc, #248]	; (7ed4 <vTaskSuspend+0x120>)
    7dda:	4798      	blx	r3
    7ddc:	0003      	movs	r3, r0
    7dde:	001a      	movs	r2, r3
    7de0:	4b3d      	ldr	r3, [pc, #244]	; (7ed8 <vTaskSuspend+0x124>)
    7de2:	881b      	ldrh	r3, [r3, #0]
    7de4:	4013      	ands	r3, r2
    7de6:	b29b      	uxth	r3, r3
    7de8:	2b00      	cmp	r3, #0
    7dea:	d016      	beq.n	7e1a <vTaskSuspend+0x66>
    7dec:	68fb      	ldr	r3, [r7, #12]
    7dee:	0018      	movs	r0, r3
    7df0:	4b38      	ldr	r3, [pc, #224]	; (7ed4 <vTaskSuspend+0x120>)
    7df2:	4798      	blx	r3
    7df4:	0003      	movs	r3, r0
    7df6:	001a      	movs	r2, r3
    7df8:	4b37      	ldr	r3, [pc, #220]	; (7ed8 <vTaskSuspend+0x124>)
    7dfa:	881b      	ldrh	r3, [r3, #0]
    7dfc:	4013      	ands	r3, r2
    7dfe:	b29b      	uxth	r3, r3
    7e00:	2b00      	cmp	r3, #0
    7e02:	d00a      	beq.n	7e1a <vTaskSuspend+0x66>
    7e04:	68fb      	ldr	r3, [r7, #12]
    7e06:	0018      	movs	r0, r3
    7e08:	4b34      	ldr	r3, [pc, #208]	; (7edc <vTaskSuspend+0x128>)
    7e0a:	4798      	blx	r3
    7e0c:	0003      	movs	r3, r0
    7e0e:	b2db      	uxtb	r3, r3
    7e10:	001a      	movs	r2, r3
    7e12:	2103      	movs	r1, #3
    7e14:	208a      	movs	r0, #138	; 0x8a
    7e16:	4b32      	ldr	r3, [pc, #200]	; (7ee0 <vTaskSuspend+0x12c>)
    7e18:	4798      	blx	r3
    7e1a:	68fb      	ldr	r3, [r7, #12]
    7e1c:	0018      	movs	r0, r3
    7e1e:	4b2f      	ldr	r3, [pc, #188]	; (7edc <vTaskSuspend+0x128>)
    7e20:	4798      	blx	r3
    7e22:	0003      	movs	r3, r0
    7e24:	b2db      	uxtb	r3, r3
    7e26:	0018      	movs	r0, r3
    7e28:	4b2e      	ldr	r3, [pc, #184]	; (7ee4 <vTaskSuspend+0x130>)
    7e2a:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    7e2c:	68fb      	ldr	r3, [r7, #12]
    7e2e:	3304      	adds	r3, #4
    7e30:	0018      	movs	r0, r3
    7e32:	4b2d      	ldr	r3, [pc, #180]	; (7ee8 <vTaskSuspend+0x134>)
    7e34:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    7e36:	68fb      	ldr	r3, [r7, #12]
    7e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e3a:	2b00      	cmp	r3, #0
    7e3c:	d004      	beq.n	7e48 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7e3e:	68fb      	ldr	r3, [r7, #12]
    7e40:	3318      	adds	r3, #24
    7e42:	0018      	movs	r0, r3
    7e44:	4b28      	ldr	r3, [pc, #160]	; (7ee8 <vTaskSuspend+0x134>)
    7e46:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    7e48:	68fb      	ldr	r3, [r7, #12]
    7e4a:	1d1a      	adds	r2, r3, #4
    7e4c:	4b27      	ldr	r3, [pc, #156]	; (7eec <vTaskSuspend+0x138>)
    7e4e:	0011      	movs	r1, r2
    7e50:	0018      	movs	r0, r3
    7e52:	4b27      	ldr	r3, [pc, #156]	; (7ef0 <vTaskSuspend+0x13c>)
    7e54:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    7e56:	68fb      	ldr	r3, [r7, #12]
    7e58:	2250      	movs	r2, #80	; 0x50
    7e5a:	5c9b      	ldrb	r3, [r3, r2]
    7e5c:	b2db      	uxtb	r3, r3
    7e5e:	2b01      	cmp	r3, #1
    7e60:	d103      	bne.n	7e6a <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7e62:	68fb      	ldr	r3, [r7, #12]
    7e64:	2250      	movs	r2, #80	; 0x50
    7e66:	2100      	movs	r1, #0
    7e68:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    7e6a:	4b22      	ldr	r3, [pc, #136]	; (7ef4 <vTaskSuspend+0x140>)
    7e6c:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
    7e6e:	4b22      	ldr	r3, [pc, #136]	; (7ef8 <vTaskSuspend+0x144>)
    7e70:	681b      	ldr	r3, [r3, #0]
    7e72:	2b00      	cmp	r3, #0
    7e74:	d005      	beq.n	7e82 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    7e76:	4b14      	ldr	r3, [pc, #80]	; (7ec8 <vTaskSuspend+0x114>)
    7e78:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
    7e7a:	4b20      	ldr	r3, [pc, #128]	; (7efc <vTaskSuspend+0x148>)
    7e7c:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
    7e7e:	4b1d      	ldr	r3, [pc, #116]	; (7ef4 <vTaskSuspend+0x140>)
    7e80:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    7e82:	4b12      	ldr	r3, [pc, #72]	; (7ecc <vTaskSuspend+0x118>)
    7e84:	681b      	ldr	r3, [r3, #0]
    7e86:	68fa      	ldr	r2, [r7, #12]
    7e88:	429a      	cmp	r2, r3
    7e8a:	d118      	bne.n	7ebe <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
    7e8c:	4b1a      	ldr	r3, [pc, #104]	; (7ef8 <vTaskSuspend+0x144>)
    7e8e:	681b      	ldr	r3, [r3, #0]
    7e90:	2b00      	cmp	r3, #0
    7e92:	d008      	beq.n	7ea6 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    7e94:	4b1a      	ldr	r3, [pc, #104]	; (7f00 <vTaskSuspend+0x14c>)
    7e96:	681b      	ldr	r3, [r3, #0]
    7e98:	2b00      	cmp	r3, #0
    7e9a:	d001      	beq.n	7ea0 <vTaskSuspend+0xec>
    7e9c:	b672      	cpsid	i
    7e9e:	e7fe      	b.n	7e9e <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
    7ea0:	4b18      	ldr	r3, [pc, #96]	; (7f04 <vTaskSuspend+0x150>)
    7ea2:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    7ea4:	e00b      	b.n	7ebe <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    7ea6:	4b11      	ldr	r3, [pc, #68]	; (7eec <vTaskSuspend+0x138>)
    7ea8:	681a      	ldr	r2, [r3, #0]
    7eaa:	4b17      	ldr	r3, [pc, #92]	; (7f08 <vTaskSuspend+0x154>)
    7eac:	681b      	ldr	r3, [r3, #0]
    7eae:	429a      	cmp	r2, r3
    7eb0:	d103      	bne.n	7eba <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
    7eb2:	4b06      	ldr	r3, [pc, #24]	; (7ecc <vTaskSuspend+0x118>)
    7eb4:	2200      	movs	r2, #0
    7eb6:	601a      	str	r2, [r3, #0]
	}
    7eb8:	e001      	b.n	7ebe <vTaskSuspend+0x10a>
					vTaskSwitchContext();
    7eba:	4b14      	ldr	r3, [pc, #80]	; (7f0c <vTaskSuspend+0x158>)
    7ebc:	4798      	blx	r3
	}
    7ebe:	46c0      	nop			; (mov r8, r8)
    7ec0:	46bd      	mov	sp, r7
    7ec2:	b004      	add	sp, #16
    7ec4:	bd80      	pop	{r7, pc}
    7ec6:	46c0      	nop			; (mov r8, r8)
    7ec8:	00005cd9 	.word	0x00005cd9
    7ecc:	20003b44 	.word	0x20003b44
    7ed0:	00003f71 	.word	0x00003f71
    7ed4:	00003cd5 	.word	0x00003cd5
    7ed8:	200000f4 	.word	0x200000f4
    7edc:	00003cb5 	.word	0x00003cb5
    7ee0:	000046cd 	.word	0x000046cd
    7ee4:	00004e65 	.word	0x00004e65
    7ee8:	00005b4f 	.word	0x00005b4f
    7eec:	20003c08 	.word	0x20003c08
    7ef0:	00005a9f 	.word	0x00005a9f
    7ef4:	00005cfd 	.word	0x00005cfd
    7ef8:	20003c28 	.word	0x20003c28
    7efc:	00008999 	.word	0x00008999
    7f00:	20003c44 	.word	0x20003c44
    7f04:	00005cc1 	.word	0x00005cc1
    7f08:	20003c1c 	.word	0x20003c1c
    7f0c:	00008329 	.word	0x00008329

00007f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    7f10:	b590      	push	{r4, r7, lr}
    7f12:	b085      	sub	sp, #20
    7f14:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    7f16:	4916      	ldr	r1, [pc, #88]	; (7f70 <vTaskStartScheduler+0x60>)
    7f18:	4816      	ldr	r0, [pc, #88]	; (7f74 <vTaskStartScheduler+0x64>)
    7f1a:	4b17      	ldr	r3, [pc, #92]	; (7f78 <vTaskStartScheduler+0x68>)
    7f1c:	9301      	str	r3, [sp, #4]
    7f1e:	2300      	movs	r3, #0
    7f20:	9300      	str	r3, [sp, #0]
    7f22:	2300      	movs	r3, #0
    7f24:	2264      	movs	r2, #100	; 0x64
    7f26:	4c15      	ldr	r4, [pc, #84]	; (7f7c <vTaskStartScheduler+0x6c>)
    7f28:	47a0      	blx	r4
    7f2a:	0003      	movs	r3, r0
    7f2c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    7f2e:	687b      	ldr	r3, [r7, #4]
    7f30:	2b01      	cmp	r3, #1
    7f32:	d103      	bne.n	7f3c <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    7f34:	4b12      	ldr	r3, [pc, #72]	; (7f80 <vTaskStartScheduler+0x70>)
    7f36:	4798      	blx	r3
    7f38:	0003      	movs	r3, r0
    7f3a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    7f3c:	687b      	ldr	r3, [r7, #4]
    7f3e:	2b01      	cmp	r3, #1
    7f40:	d10d      	bne.n	7f5e <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    7f42:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    7f44:	4b0f      	ldr	r3, [pc, #60]	; (7f84 <vTaskStartScheduler+0x74>)
    7f46:	2201      	movs	r2, #1
    7f48:	4252      	negs	r2, r2
    7f4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    7f4c:	4b0e      	ldr	r3, [pc, #56]	; (7f88 <vTaskStartScheduler+0x78>)
    7f4e:	2201      	movs	r2, #1
    7f50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    7f52:	4b0e      	ldr	r3, [pc, #56]	; (7f8c <vTaskStartScheduler+0x7c>)
    7f54:	2200      	movs	r2, #0
    7f56:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    7f58:	4b0d      	ldr	r3, [pc, #52]	; (7f90 <vTaskStartScheduler+0x80>)
    7f5a:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    7f5c:	e004      	b.n	7f68 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    7f5e:	687b      	ldr	r3, [r7, #4]
    7f60:	3301      	adds	r3, #1
    7f62:	d101      	bne.n	7f68 <vTaskStartScheduler+0x58>
    7f64:	b672      	cpsid	i
    7f66:	e7fe      	b.n	7f66 <vTaskStartScheduler+0x56>
}
    7f68:	46c0      	nop			; (mov r8, r8)
    7f6a:	46bd      	mov	sp, r7
    7f6c:	b003      	add	sp, #12
    7f6e:	bd90      	pop	{r4, r7, pc}
    7f70:	0002361c 	.word	0x0002361c
    7f74:	000087e1 	.word	0x000087e1
    7f78:	20003c40 	.word	0x20003c40
    7f7c:	00007939 	.word	0x00007939
    7f80:	00008fa1 	.word	0x00008fa1
    7f84:	20003c3c 	.word	0x20003c3c
    7f88:	20003c28 	.word	0x20003c28
    7f8c:	20003c20 	.word	0x20003c20
    7f90:	00005c69 	.word	0x00005c69

00007f94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    7f94:	b580      	push	{r7, lr}
    7f96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    7f98:	4b03      	ldr	r3, [pc, #12]	; (7fa8 <vTaskSuspendAll+0x14>)
    7f9a:	681b      	ldr	r3, [r3, #0]
    7f9c:	1c5a      	adds	r2, r3, #1
    7f9e:	4b02      	ldr	r3, [pc, #8]	; (7fa8 <vTaskSuspendAll+0x14>)
    7fa0:	601a      	str	r2, [r3, #0]
}
    7fa2:	46c0      	nop			; (mov r8, r8)
    7fa4:	46bd      	mov	sp, r7
    7fa6:	bd80      	pop	{r7, pc}
    7fa8:	20003c44 	.word	0x20003c44

00007fac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    7fac:	b580      	push	{r7, lr}
    7fae:	b084      	sub	sp, #16
    7fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    7fb2:	2300      	movs	r3, #0
    7fb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    7fb6:	2300      	movs	r3, #0
    7fb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    7fba:	4b45      	ldr	r3, [pc, #276]	; (80d0 <xTaskResumeAll+0x124>)
    7fbc:	681b      	ldr	r3, [r3, #0]
    7fbe:	2b00      	cmp	r3, #0
    7fc0:	d101      	bne.n	7fc6 <xTaskResumeAll+0x1a>
    7fc2:	b672      	cpsid	i
    7fc4:	e7fe      	b.n	7fc4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    7fc6:	4b43      	ldr	r3, [pc, #268]	; (80d4 <xTaskResumeAll+0x128>)
    7fc8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    7fca:	4b41      	ldr	r3, [pc, #260]	; (80d0 <xTaskResumeAll+0x124>)
    7fcc:	681b      	ldr	r3, [r3, #0]
    7fce:	1e5a      	subs	r2, r3, #1
    7fd0:	4b3f      	ldr	r3, [pc, #252]	; (80d0 <xTaskResumeAll+0x124>)
    7fd2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7fd4:	4b3e      	ldr	r3, [pc, #248]	; (80d0 <xTaskResumeAll+0x124>)
    7fd6:	681b      	ldr	r3, [r3, #0]
    7fd8:	2b00      	cmp	r3, #0
    7fda:	d000      	beq.n	7fde <xTaskResumeAll+0x32>
    7fdc:	e071      	b.n	80c2 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    7fde:	4b3e      	ldr	r3, [pc, #248]	; (80d8 <xTaskResumeAll+0x12c>)
    7fe0:	681b      	ldr	r3, [r3, #0]
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d100      	bne.n	7fe8 <xTaskResumeAll+0x3c>
    7fe6:	e06c      	b.n	80c2 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    7fe8:	e044      	b.n	8074 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    7fea:	4b3c      	ldr	r3, [pc, #240]	; (80dc <xTaskResumeAll+0x130>)
    7fec:	68db      	ldr	r3, [r3, #12]
    7fee:	68db      	ldr	r3, [r3, #12]
    7ff0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7ff2:	68fb      	ldr	r3, [r7, #12]
    7ff4:	3318      	adds	r3, #24
    7ff6:	0018      	movs	r0, r3
    7ff8:	4b39      	ldr	r3, [pc, #228]	; (80e0 <xTaskResumeAll+0x134>)
    7ffa:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7ffc:	68fb      	ldr	r3, [r7, #12]
    7ffe:	3304      	adds	r3, #4
    8000:	0018      	movs	r0, r3
    8002:	4b37      	ldr	r3, [pc, #220]	; (80e0 <xTaskResumeAll+0x134>)
    8004:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    8006:	68fb      	ldr	r3, [r7, #12]
    8008:	0018      	movs	r0, r3
    800a:	4b36      	ldr	r3, [pc, #216]	; (80e4 <xTaskResumeAll+0x138>)
    800c:	4798      	blx	r3
    800e:	0003      	movs	r3, r0
    8010:	001a      	movs	r2, r3
    8012:	4b35      	ldr	r3, [pc, #212]	; (80e8 <xTaskResumeAll+0x13c>)
    8014:	881b      	ldrh	r3, [r3, #0]
    8016:	4013      	ands	r3, r2
    8018:	b29b      	uxth	r3, r3
    801a:	2b00      	cmp	r3, #0
    801c:	d008      	beq.n	8030 <xTaskResumeAll+0x84>
    801e:	68fb      	ldr	r3, [r7, #12]
    8020:	0018      	movs	r0, r3
    8022:	4b32      	ldr	r3, [pc, #200]	; (80ec <xTaskResumeAll+0x140>)
    8024:	4798      	blx	r3
    8026:	0003      	movs	r3, r0
    8028:	b2db      	uxtb	r3, r3
    802a:	0018      	movs	r0, r3
    802c:	4b30      	ldr	r3, [pc, #192]	; (80f0 <xTaskResumeAll+0x144>)
    802e:	4798      	blx	r3
    8030:	68fb      	ldr	r3, [r7, #12]
    8032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8034:	4b2f      	ldr	r3, [pc, #188]	; (80f4 <xTaskResumeAll+0x148>)
    8036:	681b      	ldr	r3, [r3, #0]
    8038:	429a      	cmp	r2, r3
    803a:	d903      	bls.n	8044 <xTaskResumeAll+0x98>
    803c:	68fb      	ldr	r3, [r7, #12]
    803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8040:	4b2c      	ldr	r3, [pc, #176]	; (80f4 <xTaskResumeAll+0x148>)
    8042:	601a      	str	r2, [r3, #0]
    8044:	68fb      	ldr	r3, [r7, #12]
    8046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8048:	0013      	movs	r3, r2
    804a:	009b      	lsls	r3, r3, #2
    804c:	189b      	adds	r3, r3, r2
    804e:	009b      	lsls	r3, r3, #2
    8050:	4a29      	ldr	r2, [pc, #164]	; (80f8 <xTaskResumeAll+0x14c>)
    8052:	189a      	adds	r2, r3, r2
    8054:	68fb      	ldr	r3, [r7, #12]
    8056:	3304      	adds	r3, #4
    8058:	0019      	movs	r1, r3
    805a:	0010      	movs	r0, r2
    805c:	4b27      	ldr	r3, [pc, #156]	; (80fc <xTaskResumeAll+0x150>)
    805e:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    8060:	68fb      	ldr	r3, [r7, #12]
    8062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8064:	4b26      	ldr	r3, [pc, #152]	; (8100 <xTaskResumeAll+0x154>)
    8066:	681b      	ldr	r3, [r3, #0]
    8068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    806a:	429a      	cmp	r2, r3
    806c:	d302      	bcc.n	8074 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
    806e:	4b25      	ldr	r3, [pc, #148]	; (8104 <xTaskResumeAll+0x158>)
    8070:	2201      	movs	r2, #1
    8072:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    8074:	4b19      	ldr	r3, [pc, #100]	; (80dc <xTaskResumeAll+0x130>)
    8076:	681b      	ldr	r3, [r3, #0]
    8078:	2b00      	cmp	r3, #0
    807a:	d1b6      	bne.n	7fea <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    807c:	68fb      	ldr	r3, [r7, #12]
    807e:	2b00      	cmp	r3, #0
    8080:	d001      	beq.n	8086 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    8082:	4b21      	ldr	r3, [pc, #132]	; (8108 <xTaskResumeAll+0x15c>)
    8084:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    8086:	4b21      	ldr	r3, [pc, #132]	; (810c <xTaskResumeAll+0x160>)
    8088:	681b      	ldr	r3, [r3, #0]
    808a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    808c:	687b      	ldr	r3, [r7, #4]
    808e:	2b00      	cmp	r3, #0
    8090:	d00f      	beq.n	80b2 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    8092:	4b1f      	ldr	r3, [pc, #124]	; (8110 <xTaskResumeAll+0x164>)
    8094:	4798      	blx	r3
    8096:	1e03      	subs	r3, r0, #0
    8098:	d002      	beq.n	80a0 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
    809a:	4b1a      	ldr	r3, [pc, #104]	; (8104 <xTaskResumeAll+0x158>)
    809c:	2201      	movs	r2, #1
    809e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    80a0:	687b      	ldr	r3, [r7, #4]
    80a2:	3b01      	subs	r3, #1
    80a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    80a6:	687b      	ldr	r3, [r7, #4]
    80a8:	2b00      	cmp	r3, #0
    80aa:	d1f2      	bne.n	8092 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
    80ac:	4b17      	ldr	r3, [pc, #92]	; (810c <xTaskResumeAll+0x160>)
    80ae:	2200      	movs	r2, #0
    80b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    80b2:	4b14      	ldr	r3, [pc, #80]	; (8104 <xTaskResumeAll+0x158>)
    80b4:	681b      	ldr	r3, [r3, #0]
    80b6:	2b00      	cmp	r3, #0
    80b8:	d003      	beq.n	80c2 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    80ba:	2301      	movs	r3, #1
    80bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    80be:	4b15      	ldr	r3, [pc, #84]	; (8114 <xTaskResumeAll+0x168>)
    80c0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    80c2:	4b15      	ldr	r3, [pc, #84]	; (8118 <xTaskResumeAll+0x16c>)
    80c4:	4798      	blx	r3

	return xAlreadyYielded;
    80c6:	68bb      	ldr	r3, [r7, #8]
}
    80c8:	0018      	movs	r0, r3
    80ca:	46bd      	mov	sp, r7
    80cc:	b004      	add	sp, #16
    80ce:	bd80      	pop	{r7, pc}
    80d0:	20003c44 	.word	0x20003c44
    80d4:	00005cd9 	.word	0x00005cd9
    80d8:	20003c1c 	.word	0x20003c1c
    80dc:	20003bdc 	.word	0x20003bdc
    80e0:	00005b4f 	.word	0x00005b4f
    80e4:	00003cd5 	.word	0x00003cd5
    80e8:	200000f4 	.word	0x200000f4
    80ec:	00003cb5 	.word	0x00003cb5
    80f0:	00004485 	.word	0x00004485
    80f4:	20003c24 	.word	0x20003c24
    80f8:	20003b48 	.word	0x20003b48
    80fc:	00005a9f 	.word	0x00005a9f
    8100:	20003b44 	.word	0x20003b44
    8104:	20003c30 	.word	0x20003c30
    8108:	00008999 	.word	0x00008999
    810c:	20003c2c 	.word	0x20003c2c
    8110:	00008139 	.word	0x00008139
    8114:	00005cc1 	.word	0x00005cc1
    8118:	00005cfd 	.word	0x00005cfd

0000811c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    811c:	b580      	push	{r7, lr}
    811e:	b082      	sub	sp, #8
    8120:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    8122:	4b04      	ldr	r3, [pc, #16]	; (8134 <xTaskGetTickCount+0x18>)
    8124:	681b      	ldr	r3, [r3, #0]
    8126:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    8128:	687b      	ldr	r3, [r7, #4]
}
    812a:	0018      	movs	r0, r3
    812c:	46bd      	mov	sp, r7
    812e:	b002      	add	sp, #8
    8130:	bd80      	pop	{r7, pc}
    8132:	46c0      	nop			; (mov r8, r8)
    8134:	20003c20 	.word	0x20003c20

00008138 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    8138:	b580      	push	{r7, lr}
    813a:	b086      	sub	sp, #24
    813c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    813e:	2300      	movs	r3, #0
    8140:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    8142:	4b64      	ldr	r3, [pc, #400]	; (82d4 <xTaskIncrementTick+0x19c>)
    8144:	681b      	ldr	r3, [r3, #0]
    8146:	2b01      	cmp	r3, #1
    8148:	d003      	beq.n	8152 <xTaskIncrementTick+0x1a>
    814a:	4b63      	ldr	r3, [pc, #396]	; (82d8 <xTaskIncrementTick+0x1a0>)
    814c:	681b      	ldr	r3, [r3, #0]
    814e:	2b00      	cmp	r3, #0
    8150:	d107      	bne.n	8162 <xTaskIncrementTick+0x2a>
    8152:	4b62      	ldr	r3, [pc, #392]	; (82dc <xTaskIncrementTick+0x1a4>)
    8154:	681b      	ldr	r3, [r3, #0]
    8156:	1c5a      	adds	r2, r3, #1
    8158:	4b60      	ldr	r3, [pc, #384]	; (82dc <xTaskIncrementTick+0x1a4>)
    815a:	601a      	str	r2, [r3, #0]
    815c:	2000      	movs	r0, #0
    815e:	4b60      	ldr	r3, [pc, #384]	; (82e0 <xTaskIncrementTick+0x1a8>)
    8160:	4798      	blx	r3
    8162:	4b5c      	ldr	r3, [pc, #368]	; (82d4 <xTaskIncrementTick+0x19c>)
    8164:	681b      	ldr	r3, [r3, #0]
    8166:	2b00      	cmp	r3, #0
    8168:	d106      	bne.n	8178 <xTaskIncrementTick+0x40>
    816a:	4b5e      	ldr	r3, [pc, #376]	; (82e4 <xTaskIncrementTick+0x1ac>)
    816c:	681b      	ldr	r3, [r3, #0]
    816e:	3301      	adds	r3, #1
    8170:	0019      	movs	r1, r3
    8172:	2003      	movs	r0, #3
    8174:	4b5c      	ldr	r3, [pc, #368]	; (82e8 <xTaskIncrementTick+0x1b0>)
    8176:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8178:	4b56      	ldr	r3, [pc, #344]	; (82d4 <xTaskIncrementTick+0x19c>)
    817a:	681b      	ldr	r3, [r3, #0]
    817c:	2b00      	cmp	r3, #0
    817e:	d000      	beq.n	8182 <xTaskIncrementTick+0x4a>
    8180:	e098      	b.n	82b4 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    8182:	4b58      	ldr	r3, [pc, #352]	; (82e4 <xTaskIncrementTick+0x1ac>)
    8184:	681b      	ldr	r3, [r3, #0]
    8186:	3301      	adds	r3, #1
    8188:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    818a:	4b56      	ldr	r3, [pc, #344]	; (82e4 <xTaskIncrementTick+0x1ac>)
    818c:	693a      	ldr	r2, [r7, #16]
    818e:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    8190:	693b      	ldr	r3, [r7, #16]
    8192:	2b00      	cmp	r3, #0
    8194:	d117      	bne.n	81c6 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
    8196:	4b55      	ldr	r3, [pc, #340]	; (82ec <xTaskIncrementTick+0x1b4>)
    8198:	681b      	ldr	r3, [r3, #0]
    819a:	681b      	ldr	r3, [r3, #0]
    819c:	2b00      	cmp	r3, #0
    819e:	d001      	beq.n	81a4 <xTaskIncrementTick+0x6c>
    81a0:	b672      	cpsid	i
    81a2:	e7fe      	b.n	81a2 <xTaskIncrementTick+0x6a>
    81a4:	4b51      	ldr	r3, [pc, #324]	; (82ec <xTaskIncrementTick+0x1b4>)
    81a6:	681b      	ldr	r3, [r3, #0]
    81a8:	60fb      	str	r3, [r7, #12]
    81aa:	4b51      	ldr	r3, [pc, #324]	; (82f0 <xTaskIncrementTick+0x1b8>)
    81ac:	681a      	ldr	r2, [r3, #0]
    81ae:	4b4f      	ldr	r3, [pc, #316]	; (82ec <xTaskIncrementTick+0x1b4>)
    81b0:	601a      	str	r2, [r3, #0]
    81b2:	4b4f      	ldr	r3, [pc, #316]	; (82f0 <xTaskIncrementTick+0x1b8>)
    81b4:	68fa      	ldr	r2, [r7, #12]
    81b6:	601a      	str	r2, [r3, #0]
    81b8:	4b4e      	ldr	r3, [pc, #312]	; (82f4 <xTaskIncrementTick+0x1bc>)
    81ba:	681b      	ldr	r3, [r3, #0]
    81bc:	1c5a      	adds	r2, r3, #1
    81be:	4b4d      	ldr	r3, [pc, #308]	; (82f4 <xTaskIncrementTick+0x1bc>)
    81c0:	601a      	str	r2, [r3, #0]
    81c2:	4b4d      	ldr	r3, [pc, #308]	; (82f8 <xTaskIncrementTick+0x1c0>)
    81c4:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    81c6:	4b4d      	ldr	r3, [pc, #308]	; (82fc <xTaskIncrementTick+0x1c4>)
    81c8:	681b      	ldr	r3, [r3, #0]
    81ca:	693a      	ldr	r2, [r7, #16]
    81cc:	429a      	cmp	r2, r3
    81ce:	d363      	bcc.n	8298 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    81d0:	4b46      	ldr	r3, [pc, #280]	; (82ec <xTaskIncrementTick+0x1b4>)
    81d2:	681b      	ldr	r3, [r3, #0]
    81d4:	681b      	ldr	r3, [r3, #0]
    81d6:	2b00      	cmp	r3, #0
    81d8:	d101      	bne.n	81de <xTaskIncrementTick+0xa6>
    81da:	2301      	movs	r3, #1
    81dc:	e000      	b.n	81e0 <xTaskIncrementTick+0xa8>
    81de:	2300      	movs	r3, #0
    81e0:	2b00      	cmp	r3, #0
    81e2:	d004      	beq.n	81ee <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    81e4:	4b45      	ldr	r3, [pc, #276]	; (82fc <xTaskIncrementTick+0x1c4>)
    81e6:	2201      	movs	r2, #1
    81e8:	4252      	negs	r2, r2
    81ea:	601a      	str	r2, [r3, #0]
					break;
    81ec:	e054      	b.n	8298 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    81ee:	4b3f      	ldr	r3, [pc, #252]	; (82ec <xTaskIncrementTick+0x1b4>)
    81f0:	681b      	ldr	r3, [r3, #0]
    81f2:	68db      	ldr	r3, [r3, #12]
    81f4:	68db      	ldr	r3, [r3, #12]
    81f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    81f8:	68bb      	ldr	r3, [r7, #8]
    81fa:	685b      	ldr	r3, [r3, #4]
    81fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    81fe:	693a      	ldr	r2, [r7, #16]
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	429a      	cmp	r2, r3
    8204:	d203      	bcs.n	820e <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    8206:	4b3d      	ldr	r3, [pc, #244]	; (82fc <xTaskIncrementTick+0x1c4>)
    8208:	687a      	ldr	r2, [r7, #4]
    820a:	601a      	str	r2, [r3, #0]
						break;
    820c:	e044      	b.n	8298 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    820e:	68bb      	ldr	r3, [r7, #8]
    8210:	3304      	adds	r3, #4
    8212:	0018      	movs	r0, r3
    8214:	4b3a      	ldr	r3, [pc, #232]	; (8300 <xTaskIncrementTick+0x1c8>)
    8216:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    8218:	68bb      	ldr	r3, [r7, #8]
    821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    821c:	2b00      	cmp	r3, #0
    821e:	d004      	beq.n	822a <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8220:	68bb      	ldr	r3, [r7, #8]
    8222:	3318      	adds	r3, #24
    8224:	0018      	movs	r0, r3
    8226:	4b36      	ldr	r3, [pc, #216]	; (8300 <xTaskIncrementTick+0x1c8>)
    8228:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    822a:	68bb      	ldr	r3, [r7, #8]
    822c:	0018      	movs	r0, r3
    822e:	4b35      	ldr	r3, [pc, #212]	; (8304 <xTaskIncrementTick+0x1cc>)
    8230:	4798      	blx	r3
    8232:	0003      	movs	r3, r0
    8234:	001a      	movs	r2, r3
    8236:	4b34      	ldr	r3, [pc, #208]	; (8308 <xTaskIncrementTick+0x1d0>)
    8238:	881b      	ldrh	r3, [r3, #0]
    823a:	4013      	ands	r3, r2
    823c:	b29b      	uxth	r3, r3
    823e:	2b00      	cmp	r3, #0
    8240:	d008      	beq.n	8254 <xTaskIncrementTick+0x11c>
    8242:	68bb      	ldr	r3, [r7, #8]
    8244:	0018      	movs	r0, r3
    8246:	4b31      	ldr	r3, [pc, #196]	; (830c <xTaskIncrementTick+0x1d4>)
    8248:	4798      	blx	r3
    824a:	0003      	movs	r3, r0
    824c:	b2db      	uxtb	r3, r3
    824e:	0018      	movs	r0, r3
    8250:	4b2f      	ldr	r3, [pc, #188]	; (8310 <xTaskIncrementTick+0x1d8>)
    8252:	4798      	blx	r3
    8254:	68bb      	ldr	r3, [r7, #8]
    8256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8258:	4b2e      	ldr	r3, [pc, #184]	; (8314 <xTaskIncrementTick+0x1dc>)
    825a:	681b      	ldr	r3, [r3, #0]
    825c:	429a      	cmp	r2, r3
    825e:	d903      	bls.n	8268 <xTaskIncrementTick+0x130>
    8260:	68bb      	ldr	r3, [r7, #8]
    8262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8264:	4b2b      	ldr	r3, [pc, #172]	; (8314 <xTaskIncrementTick+0x1dc>)
    8266:	601a      	str	r2, [r3, #0]
    8268:	68bb      	ldr	r3, [r7, #8]
    826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    826c:	0013      	movs	r3, r2
    826e:	009b      	lsls	r3, r3, #2
    8270:	189b      	adds	r3, r3, r2
    8272:	009b      	lsls	r3, r3, #2
    8274:	4a28      	ldr	r2, [pc, #160]	; (8318 <xTaskIncrementTick+0x1e0>)
    8276:	189a      	adds	r2, r3, r2
    8278:	68bb      	ldr	r3, [r7, #8]
    827a:	3304      	adds	r3, #4
    827c:	0019      	movs	r1, r3
    827e:	0010      	movs	r0, r2
    8280:	4b26      	ldr	r3, [pc, #152]	; (831c <xTaskIncrementTick+0x1e4>)
    8282:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    8284:	68bb      	ldr	r3, [r7, #8]
    8286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8288:	4b25      	ldr	r3, [pc, #148]	; (8320 <xTaskIncrementTick+0x1e8>)
    828a:	681b      	ldr	r3, [r3, #0]
    828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    828e:	429a      	cmp	r2, r3
    8290:	d39e      	bcc.n	81d0 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
    8292:	2301      	movs	r3, #1
    8294:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    8296:	e79b      	b.n	81d0 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    8298:	4b21      	ldr	r3, [pc, #132]	; (8320 <xTaskIncrementTick+0x1e8>)
    829a:	681b      	ldr	r3, [r3, #0]
    829c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    829e:	491e      	ldr	r1, [pc, #120]	; (8318 <xTaskIncrementTick+0x1e0>)
    82a0:	0013      	movs	r3, r2
    82a2:	009b      	lsls	r3, r3, #2
    82a4:	189b      	adds	r3, r3, r2
    82a6:	009b      	lsls	r3, r3, #2
    82a8:	585b      	ldr	r3, [r3, r1]
    82aa:	2b01      	cmp	r3, #1
    82ac:	d907      	bls.n	82be <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
    82ae:	2301      	movs	r3, #1
    82b0:	617b      	str	r3, [r7, #20]
    82b2:	e004      	b.n	82be <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    82b4:	4b08      	ldr	r3, [pc, #32]	; (82d8 <xTaskIncrementTick+0x1a0>)
    82b6:	681b      	ldr	r3, [r3, #0]
    82b8:	1c5a      	adds	r2, r3, #1
    82ba:	4b07      	ldr	r3, [pc, #28]	; (82d8 <xTaskIncrementTick+0x1a0>)
    82bc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    82be:	4b19      	ldr	r3, [pc, #100]	; (8324 <xTaskIncrementTick+0x1ec>)
    82c0:	681b      	ldr	r3, [r3, #0]
    82c2:	2b00      	cmp	r3, #0
    82c4:	d001      	beq.n	82ca <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
    82c6:	2301      	movs	r3, #1
    82c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    82ca:	697b      	ldr	r3, [r7, #20]
}
    82cc:	0018      	movs	r0, r3
    82ce:	46bd      	mov	sp, r7
    82d0:	b006      	add	sp, #24
    82d2:	bd80      	pop	{r7, pc}
    82d4:	20003c44 	.word	0x20003c44
    82d8:	20003c2c 	.word	0x20003c2c
    82dc:	20000b8c 	.word	0x20000b8c
    82e0:	00005969 	.word	0x00005969
    82e4:	20003c20 	.word	0x20003c20
    82e8:	000049d5 	.word	0x000049d5
    82ec:	20003bd4 	.word	0x20003bd4
    82f0:	20003bd8 	.word	0x20003bd8
    82f4:	20003c34 	.word	0x20003c34
    82f8:	00008999 	.word	0x00008999
    82fc:	20003c3c 	.word	0x20003c3c
    8300:	00005b4f 	.word	0x00005b4f
    8304:	00003cd5 	.word	0x00003cd5
    8308:	200000f4 	.word	0x200000f4
    830c:	00003cb5 	.word	0x00003cb5
    8310:	00004485 	.word	0x00004485
    8314:	20003c24 	.word	0x20003c24
    8318:	20003b48 	.word	0x20003b48
    831c:	00005a9f 	.word	0x00005a9f
    8320:	20003b44 	.word	0x20003b44
    8324:	20003c30 	.word	0x20003c30

00008328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    8328:	b580      	push	{r7, lr}
    832a:	b082      	sub	sp, #8
    832c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    832e:	4b3a      	ldr	r3, [pc, #232]	; (8418 <vTaskSwitchContext+0xf0>)
    8330:	681b      	ldr	r3, [r3, #0]
    8332:	2b00      	cmp	r3, #0
    8334:	d003      	beq.n	833e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    8336:	4b39      	ldr	r3, [pc, #228]	; (841c <vTaskSwitchContext+0xf4>)
    8338:	2201      	movs	r2, #1
    833a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    833c:	e067      	b.n	840e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
    833e:	4b37      	ldr	r3, [pc, #220]	; (841c <vTaskSwitchContext+0xf4>)
    8340:	2200      	movs	r2, #0
    8342:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    8344:	4b36      	ldr	r3, [pc, #216]	; (8420 <vTaskSwitchContext+0xf8>)
    8346:	681b      	ldr	r3, [r3, #0]
    8348:	681a      	ldr	r2, [r3, #0]
    834a:	4b35      	ldr	r3, [pc, #212]	; (8420 <vTaskSwitchContext+0xf8>)
    834c:	681b      	ldr	r3, [r3, #0]
    834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8350:	429a      	cmp	r2, r3
    8352:	d808      	bhi.n	8366 <vTaskSwitchContext+0x3e>
    8354:	4b32      	ldr	r3, [pc, #200]	; (8420 <vTaskSwitchContext+0xf8>)
    8356:	681a      	ldr	r2, [r3, #0]
    8358:	4b31      	ldr	r3, [pc, #196]	; (8420 <vTaskSwitchContext+0xf8>)
    835a:	681b      	ldr	r3, [r3, #0]
    835c:	3334      	adds	r3, #52	; 0x34
    835e:	0019      	movs	r1, r3
    8360:	0010      	movs	r0, r2
    8362:	4b30      	ldr	r3, [pc, #192]	; (8424 <vTaskSwitchContext+0xfc>)
    8364:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    8366:	4b30      	ldr	r3, [pc, #192]	; (8428 <vTaskSwitchContext+0x100>)
    8368:	681b      	ldr	r3, [r3, #0]
    836a:	607b      	str	r3, [r7, #4]
    836c:	e007      	b.n	837e <vTaskSwitchContext+0x56>
    836e:	687b      	ldr	r3, [r7, #4]
    8370:	2b00      	cmp	r3, #0
    8372:	d101      	bne.n	8378 <vTaskSwitchContext+0x50>
    8374:	b672      	cpsid	i
    8376:	e7fe      	b.n	8376 <vTaskSwitchContext+0x4e>
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	3b01      	subs	r3, #1
    837c:	607b      	str	r3, [r7, #4]
    837e:	492b      	ldr	r1, [pc, #172]	; (842c <vTaskSwitchContext+0x104>)
    8380:	687a      	ldr	r2, [r7, #4]
    8382:	0013      	movs	r3, r2
    8384:	009b      	lsls	r3, r3, #2
    8386:	189b      	adds	r3, r3, r2
    8388:	009b      	lsls	r3, r3, #2
    838a:	585b      	ldr	r3, [r3, r1]
    838c:	2b00      	cmp	r3, #0
    838e:	d0ee      	beq.n	836e <vTaskSwitchContext+0x46>
    8390:	687a      	ldr	r2, [r7, #4]
    8392:	0013      	movs	r3, r2
    8394:	009b      	lsls	r3, r3, #2
    8396:	189b      	adds	r3, r3, r2
    8398:	009b      	lsls	r3, r3, #2
    839a:	4a24      	ldr	r2, [pc, #144]	; (842c <vTaskSwitchContext+0x104>)
    839c:	189b      	adds	r3, r3, r2
    839e:	603b      	str	r3, [r7, #0]
    83a0:	683b      	ldr	r3, [r7, #0]
    83a2:	685b      	ldr	r3, [r3, #4]
    83a4:	685a      	ldr	r2, [r3, #4]
    83a6:	683b      	ldr	r3, [r7, #0]
    83a8:	605a      	str	r2, [r3, #4]
    83aa:	683b      	ldr	r3, [r7, #0]
    83ac:	685a      	ldr	r2, [r3, #4]
    83ae:	683b      	ldr	r3, [r7, #0]
    83b0:	3308      	adds	r3, #8
    83b2:	429a      	cmp	r2, r3
    83b4:	d104      	bne.n	83c0 <vTaskSwitchContext+0x98>
    83b6:	683b      	ldr	r3, [r7, #0]
    83b8:	685b      	ldr	r3, [r3, #4]
    83ba:	685a      	ldr	r2, [r3, #4]
    83bc:	683b      	ldr	r3, [r7, #0]
    83be:	605a      	str	r2, [r3, #4]
    83c0:	683b      	ldr	r3, [r7, #0]
    83c2:	685b      	ldr	r3, [r3, #4]
    83c4:	68da      	ldr	r2, [r3, #12]
    83c6:	4b16      	ldr	r3, [pc, #88]	; (8420 <vTaskSwitchContext+0xf8>)
    83c8:	601a      	str	r2, [r3, #0]
    83ca:	4b17      	ldr	r3, [pc, #92]	; (8428 <vTaskSwitchContext+0x100>)
    83cc:	687a      	ldr	r2, [r7, #4]
    83ce:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
    83d0:	4b17      	ldr	r3, [pc, #92]	; (8430 <vTaskSwitchContext+0x108>)
    83d2:	2201      	movs	r2, #1
    83d4:	601a      	str	r2, [r3, #0]
    83d6:	4b17      	ldr	r3, [pc, #92]	; (8434 <vTaskSwitchContext+0x10c>)
    83d8:	4798      	blx	r3
    83da:	0003      	movs	r3, r0
    83dc:	0018      	movs	r0, r3
    83de:	4b16      	ldr	r3, [pc, #88]	; (8438 <vTaskSwitchContext+0x110>)
    83e0:	4798      	blx	r3
    83e2:	0003      	movs	r3, r0
    83e4:	001a      	movs	r2, r3
    83e6:	4b15      	ldr	r3, [pc, #84]	; (843c <vTaskSwitchContext+0x114>)
    83e8:	881b      	ldrh	r3, [r3, #0]
    83ea:	4013      	ands	r3, r2
    83ec:	b29b      	uxth	r3, r3
    83ee:	2b00      	cmp	r3, #0
    83f0:	d00a      	beq.n	8408 <vTaskSwitchContext+0xe0>
    83f2:	4b10      	ldr	r3, [pc, #64]	; (8434 <vTaskSwitchContext+0x10c>)
    83f4:	4798      	blx	r3
    83f6:	0003      	movs	r3, r0
    83f8:	0018      	movs	r0, r3
    83fa:	4b11      	ldr	r3, [pc, #68]	; (8440 <vTaskSwitchContext+0x118>)
    83fc:	4798      	blx	r3
    83fe:	0003      	movs	r3, r0
    8400:	b2db      	uxtb	r3, r3
    8402:	0018      	movs	r0, r3
    8404:	4b0f      	ldr	r3, [pc, #60]	; (8444 <vTaskSwitchContext+0x11c>)
    8406:	4798      	blx	r3
    8408:	4b09      	ldr	r3, [pc, #36]	; (8430 <vTaskSwitchContext+0x108>)
    840a:	2202      	movs	r2, #2
    840c:	601a      	str	r2, [r3, #0]
}
    840e:	46c0      	nop			; (mov r8, r8)
    8410:	46bd      	mov	sp, r7
    8412:	b002      	add	sp, #8
    8414:	bd80      	pop	{r7, pc}
    8416:	46c0      	nop			; (mov r8, r8)
    8418:	20003c44 	.word	0x20003c44
    841c:	20003c30 	.word	0x20003c30
    8420:	20003b44 	.word	0x20003b44
    8424:	0001e451 	.word	0x0001e451
    8428:	20003c24 	.word	0x20003c24
    842c:	20003b48 	.word	0x20003b48
    8430:	20000b98 	.word	0x20000b98
    8434:	00003f71 	.word	0x00003f71
    8438:	00003cd5 	.word	0x00003cd5
    843c:	200000f4 	.word	0x200000f4
    8440:	00003cb5 	.word	0x00003cb5
    8444:	00004ad1 	.word	0x00004ad1

00008448 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    8448:	b580      	push	{r7, lr}
    844a:	b082      	sub	sp, #8
    844c:	af00      	add	r7, sp, #0
    844e:	6078      	str	r0, [r7, #4]
    8450:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    8452:	687b      	ldr	r3, [r7, #4]
    8454:	2b00      	cmp	r3, #0
    8456:	d101      	bne.n	845c <vTaskPlaceOnEventList+0x14>
    8458:	b672      	cpsid	i
    845a:	e7fe      	b.n	845a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    845c:	4b08      	ldr	r3, [pc, #32]	; (8480 <vTaskPlaceOnEventList+0x38>)
    845e:	681b      	ldr	r3, [r3, #0]
    8460:	3318      	adds	r3, #24
    8462:	001a      	movs	r2, r3
    8464:	687b      	ldr	r3, [r7, #4]
    8466:	0011      	movs	r1, r2
    8468:	0018      	movs	r0, r3
    846a:	4b06      	ldr	r3, [pc, #24]	; (8484 <vTaskPlaceOnEventList+0x3c>)
    846c:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    846e:	683b      	ldr	r3, [r7, #0]
    8470:	2101      	movs	r1, #1
    8472:	0018      	movs	r0, r3
    8474:	4b04      	ldr	r3, [pc, #16]	; (8488 <vTaskPlaceOnEventList+0x40>)
    8476:	4798      	blx	r3
}
    8478:	46c0      	nop			; (mov r8, r8)
    847a:	46bd      	mov	sp, r7
    847c:	b002      	add	sp, #8
    847e:	bd80      	pop	{r7, pc}
    8480:	20003b44 	.word	0x20003b44
    8484:	00005ae3 	.word	0x00005ae3
    8488:	00008eed 	.word	0x00008eed

0000848c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    848c:	b580      	push	{r7, lr}
    848e:	b084      	sub	sp, #16
    8490:	af00      	add	r7, sp, #0
    8492:	60f8      	str	r0, [r7, #12]
    8494:	60b9      	str	r1, [r7, #8]
    8496:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    8498:	68fb      	ldr	r3, [r7, #12]
    849a:	2b00      	cmp	r3, #0
    849c:	d101      	bne.n	84a2 <vTaskPlaceOnEventListRestricted+0x16>
    849e:	b672      	cpsid	i
    84a0:	e7fe      	b.n	84a0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    84a2:	4b28      	ldr	r3, [pc, #160]	; (8544 <vTaskPlaceOnEventListRestricted+0xb8>)
    84a4:	681b      	ldr	r3, [r3, #0]
    84a6:	3318      	adds	r3, #24
    84a8:	001a      	movs	r2, r3
    84aa:	68fb      	ldr	r3, [r7, #12]
    84ac:	0011      	movs	r1, r2
    84ae:	0018      	movs	r0, r3
    84b0:	4b25      	ldr	r3, [pc, #148]	; (8548 <vTaskPlaceOnEventListRestricted+0xbc>)
    84b2:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    84b4:	687b      	ldr	r3, [r7, #4]
    84b6:	2b00      	cmp	r3, #0
    84b8:	d002      	beq.n	84c0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    84ba:	2301      	movs	r3, #1
    84bc:	425b      	negs	r3, r3
    84be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    84c0:	4b20      	ldr	r3, [pc, #128]	; (8544 <vTaskPlaceOnEventListRestricted+0xb8>)
    84c2:	681b      	ldr	r3, [r3, #0]
    84c4:	0018      	movs	r0, r3
    84c6:	4b21      	ldr	r3, [pc, #132]	; (854c <vTaskPlaceOnEventListRestricted+0xc0>)
    84c8:	4798      	blx	r3
    84ca:	0003      	movs	r3, r0
    84cc:	001a      	movs	r2, r3
    84ce:	4b20      	ldr	r3, [pc, #128]	; (8550 <vTaskPlaceOnEventListRestricted+0xc4>)
    84d0:	881b      	ldrh	r3, [r3, #0]
    84d2:	4013      	ands	r3, r2
    84d4:	b29b      	uxth	r3, r3
    84d6:	2b00      	cmp	r3, #0
    84d8:	d011      	beq.n	84fe <vTaskPlaceOnEventListRestricted+0x72>
    84da:	4b1e      	ldr	r3, [pc, #120]	; (8554 <vTaskPlaceOnEventListRestricted+0xc8>)
    84dc:	681a      	ldr	r2, [r3, #0]
    84de:	68bb      	ldr	r3, [r7, #8]
    84e0:	18d3      	adds	r3, r2, r3
    84e2:	0019      	movs	r1, r3
    84e4:	2088      	movs	r0, #136	; 0x88
    84e6:	4b1c      	ldr	r3, [pc, #112]	; (8558 <vTaskPlaceOnEventListRestricted+0xcc>)
    84e8:	4798      	blx	r3
    84ea:	4b16      	ldr	r3, [pc, #88]	; (8544 <vTaskPlaceOnEventListRestricted+0xb8>)
    84ec:	681b      	ldr	r3, [r3, #0]
    84ee:	0018      	movs	r0, r3
    84f0:	4b1a      	ldr	r3, [pc, #104]	; (855c <vTaskPlaceOnEventListRestricted+0xd0>)
    84f2:	4798      	blx	r3
    84f4:	0003      	movs	r3, r0
    84f6:	b2db      	uxtb	r3, r3
    84f8:	0018      	movs	r0, r3
    84fa:	4b19      	ldr	r3, [pc, #100]	; (8560 <vTaskPlaceOnEventListRestricted+0xd4>)
    84fc:	4798      	blx	r3
    84fe:	4b19      	ldr	r3, [pc, #100]	; (8564 <vTaskPlaceOnEventListRestricted+0xd8>)
    8500:	4798      	blx	r3
    8502:	0003      	movs	r3, r0
    8504:	0018      	movs	r0, r3
    8506:	4b11      	ldr	r3, [pc, #68]	; (854c <vTaskPlaceOnEventListRestricted+0xc0>)
    8508:	4798      	blx	r3
    850a:	0003      	movs	r3, r0
    850c:	001a      	movs	r2, r3
    850e:	4b10      	ldr	r3, [pc, #64]	; (8550 <vTaskPlaceOnEventListRestricted+0xc4>)
    8510:	881b      	ldrh	r3, [r3, #0]
    8512:	4013      	ands	r3, r2
    8514:	b29b      	uxth	r3, r3
    8516:	2b00      	cmp	r3, #0
    8518:	d00a      	beq.n	8530 <vTaskPlaceOnEventListRestricted+0xa4>
    851a:	4b12      	ldr	r3, [pc, #72]	; (8564 <vTaskPlaceOnEventListRestricted+0xd8>)
    851c:	4798      	blx	r3
    851e:	0003      	movs	r3, r0
    8520:	0018      	movs	r0, r3
    8522:	4b0e      	ldr	r3, [pc, #56]	; (855c <vTaskPlaceOnEventListRestricted+0xd0>)
    8524:	4798      	blx	r3
    8526:	0003      	movs	r3, r0
    8528:	b2db      	uxtb	r3, r3
    852a:	0018      	movs	r0, r3
    852c:	4b0c      	ldr	r3, [pc, #48]	; (8560 <vTaskPlaceOnEventListRestricted+0xd4>)
    852e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    8530:	687a      	ldr	r2, [r7, #4]
    8532:	68bb      	ldr	r3, [r7, #8]
    8534:	0011      	movs	r1, r2
    8536:	0018      	movs	r0, r3
    8538:	4b0b      	ldr	r3, [pc, #44]	; (8568 <vTaskPlaceOnEventListRestricted+0xdc>)
    853a:	4798      	blx	r3
	}
    853c:	46c0      	nop			; (mov r8, r8)
    853e:	46bd      	mov	sp, r7
    8540:	b004      	add	sp, #16
    8542:	bd80      	pop	{r7, pc}
    8544:	20003b44 	.word	0x20003b44
    8548:	00005a9f 	.word	0x00005a9f
    854c:	00003cd5 	.word	0x00003cd5
    8550:	200000f4 	.word	0x200000f4
    8554:	20003c20 	.word	0x20003c20
    8558:	000049d5 	.word	0x000049d5
    855c:	00003cb5 	.word	0x00003cb5
    8560:	00004e65 	.word	0x00004e65
    8564:	00003f71 	.word	0x00003f71
    8568:	00008eed 	.word	0x00008eed

0000856c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    856c:	b580      	push	{r7, lr}
    856e:	b084      	sub	sp, #16
    8570:	af00      	add	r7, sp, #0
    8572:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    8574:	687b      	ldr	r3, [r7, #4]
    8576:	68db      	ldr	r3, [r3, #12]
    8578:	68db      	ldr	r3, [r3, #12]
    857a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    857c:	68bb      	ldr	r3, [r7, #8]
    857e:	2b00      	cmp	r3, #0
    8580:	d101      	bne.n	8586 <xTaskRemoveFromEventList+0x1a>
    8582:	b672      	cpsid	i
    8584:	e7fe      	b.n	8584 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    8586:	68bb      	ldr	r3, [r7, #8]
    8588:	3318      	adds	r3, #24
    858a:	0018      	movs	r0, r3
    858c:	4b2a      	ldr	r3, [pc, #168]	; (8638 <xTaskRemoveFromEventList+0xcc>)
    858e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8590:	4b2a      	ldr	r3, [pc, #168]	; (863c <xTaskRemoveFromEventList+0xd0>)
    8592:	681b      	ldr	r3, [r3, #0]
    8594:	2b00      	cmp	r3, #0
    8596:	d132      	bne.n	85fe <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    8598:	68bb      	ldr	r3, [r7, #8]
    859a:	3304      	adds	r3, #4
    859c:	0018      	movs	r0, r3
    859e:	4b26      	ldr	r3, [pc, #152]	; (8638 <xTaskRemoveFromEventList+0xcc>)
    85a0:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    85a2:	68bb      	ldr	r3, [r7, #8]
    85a4:	0018      	movs	r0, r3
    85a6:	4b26      	ldr	r3, [pc, #152]	; (8640 <xTaskRemoveFromEventList+0xd4>)
    85a8:	4798      	blx	r3
    85aa:	0003      	movs	r3, r0
    85ac:	001a      	movs	r2, r3
    85ae:	4b25      	ldr	r3, [pc, #148]	; (8644 <xTaskRemoveFromEventList+0xd8>)
    85b0:	881b      	ldrh	r3, [r3, #0]
    85b2:	4013      	ands	r3, r2
    85b4:	b29b      	uxth	r3, r3
    85b6:	2b00      	cmp	r3, #0
    85b8:	d008      	beq.n	85cc <xTaskRemoveFromEventList+0x60>
    85ba:	68bb      	ldr	r3, [r7, #8]
    85bc:	0018      	movs	r0, r3
    85be:	4b22      	ldr	r3, [pc, #136]	; (8648 <xTaskRemoveFromEventList+0xdc>)
    85c0:	4798      	blx	r3
    85c2:	0003      	movs	r3, r0
    85c4:	b2db      	uxtb	r3, r3
    85c6:	0018      	movs	r0, r3
    85c8:	4b20      	ldr	r3, [pc, #128]	; (864c <xTaskRemoveFromEventList+0xe0>)
    85ca:	4798      	blx	r3
    85cc:	68bb      	ldr	r3, [r7, #8]
    85ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    85d0:	4b1f      	ldr	r3, [pc, #124]	; (8650 <xTaskRemoveFromEventList+0xe4>)
    85d2:	681b      	ldr	r3, [r3, #0]
    85d4:	429a      	cmp	r2, r3
    85d6:	d903      	bls.n	85e0 <xTaskRemoveFromEventList+0x74>
    85d8:	68bb      	ldr	r3, [r7, #8]
    85da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    85dc:	4b1c      	ldr	r3, [pc, #112]	; (8650 <xTaskRemoveFromEventList+0xe4>)
    85de:	601a      	str	r2, [r3, #0]
    85e0:	68bb      	ldr	r3, [r7, #8]
    85e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    85e4:	0013      	movs	r3, r2
    85e6:	009b      	lsls	r3, r3, #2
    85e8:	189b      	adds	r3, r3, r2
    85ea:	009b      	lsls	r3, r3, #2
    85ec:	4a19      	ldr	r2, [pc, #100]	; (8654 <xTaskRemoveFromEventList+0xe8>)
    85ee:	189a      	adds	r2, r3, r2
    85f0:	68bb      	ldr	r3, [r7, #8]
    85f2:	3304      	adds	r3, #4
    85f4:	0019      	movs	r1, r3
    85f6:	0010      	movs	r0, r2
    85f8:	4b17      	ldr	r3, [pc, #92]	; (8658 <xTaskRemoveFromEventList+0xec>)
    85fa:	4798      	blx	r3
    85fc:	e007      	b.n	860e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    85fe:	68bb      	ldr	r3, [r7, #8]
    8600:	3318      	adds	r3, #24
    8602:	001a      	movs	r2, r3
    8604:	4b15      	ldr	r3, [pc, #84]	; (865c <xTaskRemoveFromEventList+0xf0>)
    8606:	0011      	movs	r1, r2
    8608:	0018      	movs	r0, r3
    860a:	4b13      	ldr	r3, [pc, #76]	; (8658 <xTaskRemoveFromEventList+0xec>)
    860c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    860e:	68bb      	ldr	r3, [r7, #8]
    8610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8612:	4b13      	ldr	r3, [pc, #76]	; (8660 <xTaskRemoveFromEventList+0xf4>)
    8614:	681b      	ldr	r3, [r3, #0]
    8616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8618:	429a      	cmp	r2, r3
    861a:	d905      	bls.n	8628 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    861c:	2301      	movs	r3, #1
    861e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    8620:	4b10      	ldr	r3, [pc, #64]	; (8664 <xTaskRemoveFromEventList+0xf8>)
    8622:	2201      	movs	r2, #1
    8624:	601a      	str	r2, [r3, #0]
    8626:	e001      	b.n	862c <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
    8628:	2300      	movs	r3, #0
    862a:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    862c:	68fb      	ldr	r3, [r7, #12]
}
    862e:	0018      	movs	r0, r3
    8630:	46bd      	mov	sp, r7
    8632:	b004      	add	sp, #16
    8634:	bd80      	pop	{r7, pc}
    8636:	46c0      	nop			; (mov r8, r8)
    8638:	00005b4f 	.word	0x00005b4f
    863c:	20003c44 	.word	0x20003c44
    8640:	00003cd5 	.word	0x00003cd5
    8644:	200000f4 	.word	0x200000f4
    8648:	00003cb5 	.word	0x00003cb5
    864c:	00004485 	.word	0x00004485
    8650:	20003c24 	.word	0x20003c24
    8654:	20003b48 	.word	0x20003b48
    8658:	00005a9f 	.word	0x00005a9f
    865c:	20003bdc 	.word	0x20003bdc
    8660:	20003b44 	.word	0x20003b44
    8664:	20003c30 	.word	0x20003c30

00008668 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    8668:	b580      	push	{r7, lr}
    866a:	b082      	sub	sp, #8
    866c:	af00      	add	r7, sp, #0
    866e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    8670:	687b      	ldr	r3, [r7, #4]
    8672:	2b00      	cmp	r3, #0
    8674:	d101      	bne.n	867a <vTaskSetTimeOutState+0x12>
    8676:	b672      	cpsid	i
    8678:	e7fe      	b.n	8678 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
    867a:	4b08      	ldr	r3, [pc, #32]	; (869c <vTaskSetTimeOutState+0x34>)
    867c:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    867e:	4b08      	ldr	r3, [pc, #32]	; (86a0 <vTaskSetTimeOutState+0x38>)
    8680:	681a      	ldr	r2, [r3, #0]
    8682:	687b      	ldr	r3, [r7, #4]
    8684:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
    8686:	4b07      	ldr	r3, [pc, #28]	; (86a4 <vTaskSetTimeOutState+0x3c>)
    8688:	681a      	ldr	r2, [r3, #0]
    868a:	687b      	ldr	r3, [r7, #4]
    868c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
    868e:	4b06      	ldr	r3, [pc, #24]	; (86a8 <vTaskSetTimeOutState+0x40>)
    8690:	4798      	blx	r3
}
    8692:	46c0      	nop			; (mov r8, r8)
    8694:	46bd      	mov	sp, r7
    8696:	b002      	add	sp, #8
    8698:	bd80      	pop	{r7, pc}
    869a:	46c0      	nop			; (mov r8, r8)
    869c:	00005cd9 	.word	0x00005cd9
    86a0:	20003c34 	.word	0x20003c34
    86a4:	20003c20 	.word	0x20003c20
    86a8:	00005cfd 	.word	0x00005cfd

000086ac <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    86ac:	b580      	push	{r7, lr}
    86ae:	b082      	sub	sp, #8
    86b0:	af00      	add	r7, sp, #0
    86b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    86b4:	4b05      	ldr	r3, [pc, #20]	; (86cc <vTaskInternalSetTimeOutState+0x20>)
    86b6:	681a      	ldr	r2, [r3, #0]
    86b8:	687b      	ldr	r3, [r7, #4]
    86ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    86bc:	4b04      	ldr	r3, [pc, #16]	; (86d0 <vTaskInternalSetTimeOutState+0x24>)
    86be:	681a      	ldr	r2, [r3, #0]
    86c0:	687b      	ldr	r3, [r7, #4]
    86c2:	605a      	str	r2, [r3, #4]
}
    86c4:	46c0      	nop			; (mov r8, r8)
    86c6:	46bd      	mov	sp, r7
    86c8:	b002      	add	sp, #8
    86ca:	bd80      	pop	{r7, pc}
    86cc:	20003c34 	.word	0x20003c34
    86d0:	20003c20 	.word	0x20003c20

000086d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    86d4:	b580      	push	{r7, lr}
    86d6:	b086      	sub	sp, #24
    86d8:	af00      	add	r7, sp, #0
    86da:	6078      	str	r0, [r7, #4]
    86dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    86de:	687b      	ldr	r3, [r7, #4]
    86e0:	2b00      	cmp	r3, #0
    86e2:	d101      	bne.n	86e8 <xTaskCheckForTimeOut+0x14>
    86e4:	b672      	cpsid	i
    86e6:	e7fe      	b.n	86e6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    86e8:	683b      	ldr	r3, [r7, #0]
    86ea:	2b00      	cmp	r3, #0
    86ec:	d101      	bne.n	86f2 <xTaskCheckForTimeOut+0x1e>
    86ee:	b672      	cpsid	i
    86f0:	e7fe      	b.n	86f0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    86f2:	4b1e      	ldr	r3, [pc, #120]	; (876c <xTaskCheckForTimeOut+0x98>)
    86f4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    86f6:	4b1e      	ldr	r3, [pc, #120]	; (8770 <xTaskCheckForTimeOut+0x9c>)
    86f8:	681b      	ldr	r3, [r3, #0]
    86fa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    86fc:	687b      	ldr	r3, [r7, #4]
    86fe:	685b      	ldr	r3, [r3, #4]
    8700:	693a      	ldr	r2, [r7, #16]
    8702:	1ad3      	subs	r3, r2, r3
    8704:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    8706:	683b      	ldr	r3, [r7, #0]
    8708:	681b      	ldr	r3, [r3, #0]
    870a:	3301      	adds	r3, #1
    870c:	d102      	bne.n	8714 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    870e:	2300      	movs	r3, #0
    8710:	617b      	str	r3, [r7, #20]
    8712:	e024      	b.n	875e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    8714:	687b      	ldr	r3, [r7, #4]
    8716:	681a      	ldr	r2, [r3, #0]
    8718:	4b16      	ldr	r3, [pc, #88]	; (8774 <xTaskCheckForTimeOut+0xa0>)
    871a:	681b      	ldr	r3, [r3, #0]
    871c:	429a      	cmp	r2, r3
    871e:	d007      	beq.n	8730 <xTaskCheckForTimeOut+0x5c>
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	685a      	ldr	r2, [r3, #4]
    8724:	693b      	ldr	r3, [r7, #16]
    8726:	429a      	cmp	r2, r3
    8728:	d802      	bhi.n	8730 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    872a:	2301      	movs	r3, #1
    872c:	617b      	str	r3, [r7, #20]
    872e:	e016      	b.n	875e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    8730:	683b      	ldr	r3, [r7, #0]
    8732:	681a      	ldr	r2, [r3, #0]
    8734:	68fb      	ldr	r3, [r7, #12]
    8736:	429a      	cmp	r2, r3
    8738:	d90c      	bls.n	8754 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    873a:	683b      	ldr	r3, [r7, #0]
    873c:	681a      	ldr	r2, [r3, #0]
    873e:	68fb      	ldr	r3, [r7, #12]
    8740:	1ad2      	subs	r2, r2, r3
    8742:	683b      	ldr	r3, [r7, #0]
    8744:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    8746:	687b      	ldr	r3, [r7, #4]
    8748:	0018      	movs	r0, r3
    874a:	4b0b      	ldr	r3, [pc, #44]	; (8778 <xTaskCheckForTimeOut+0xa4>)
    874c:	4798      	blx	r3
			xReturn = pdFALSE;
    874e:	2300      	movs	r3, #0
    8750:	617b      	str	r3, [r7, #20]
    8752:	e004      	b.n	875e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    8754:	683b      	ldr	r3, [r7, #0]
    8756:	2200      	movs	r2, #0
    8758:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    875a:	2301      	movs	r3, #1
    875c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    875e:	4b07      	ldr	r3, [pc, #28]	; (877c <xTaskCheckForTimeOut+0xa8>)
    8760:	4798      	blx	r3

	return xReturn;
    8762:	697b      	ldr	r3, [r7, #20]
}
    8764:	0018      	movs	r0, r3
    8766:	46bd      	mov	sp, r7
    8768:	b006      	add	sp, #24
    876a:	bd80      	pop	{r7, pc}
    876c:	00005cd9 	.word	0x00005cd9
    8770:	20003c20 	.word	0x20003c20
    8774:	20003c34 	.word	0x20003c34
    8778:	000086ad 	.word	0x000086ad
    877c:	00005cfd 	.word	0x00005cfd

00008780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    8780:	b580      	push	{r7, lr}
    8782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    8784:	4b02      	ldr	r3, [pc, #8]	; (8790 <vTaskMissedYield+0x10>)
    8786:	2201      	movs	r2, #1
    8788:	601a      	str	r2, [r3, #0]
}
    878a:	46c0      	nop			; (mov r8, r8)
    878c:	46bd      	mov	sp, r7
    878e:	bd80      	pop	{r7, pc}
    8790:	20003c30 	.word	0x20003c30

00008794 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
    8794:	b580      	push	{r7, lr}
    8796:	b084      	sub	sp, #16
    8798:	af00      	add	r7, sp, #0
    879a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    879c:	687b      	ldr	r3, [r7, #4]
    879e:	2b00      	cmp	r3, #0
    87a0:	d005      	beq.n	87ae <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    87a2:	687b      	ldr	r3, [r7, #4]
    87a4:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    87a6:	68bb      	ldr	r3, [r7, #8]
    87a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    87aa:	60fb      	str	r3, [r7, #12]
    87ac:	e001      	b.n	87b2 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
    87ae:	2300      	movs	r3, #0
    87b0:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
    87b2:	68fb      	ldr	r3, [r7, #12]
	}
    87b4:	0018      	movs	r0, r3
    87b6:	46bd      	mov	sp, r7
    87b8:	b004      	add	sp, #16
    87ba:	bd80      	pop	{r7, pc}

000087bc <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
    87bc:	b580      	push	{r7, lr}
    87be:	b084      	sub	sp, #16
    87c0:	af00      	add	r7, sp, #0
    87c2:	6078      	str	r0, [r7, #4]
    87c4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
    87c6:	687b      	ldr	r3, [r7, #4]
    87c8:	2b00      	cmp	r3, #0
    87ca:	d004      	beq.n	87d6 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    87cc:	687b      	ldr	r3, [r7, #4]
    87ce:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    87d0:	68fb      	ldr	r3, [r7, #12]
    87d2:	683a      	ldr	r2, [r7, #0]
    87d4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
    87d6:	46c0      	nop			; (mov r8, r8)
    87d8:	46bd      	mov	sp, r7
    87da:	b004      	add	sp, #16
    87dc:	bd80      	pop	{r7, pc}
	...

000087e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    87e0:	b580      	push	{r7, lr}
    87e2:	b082      	sub	sp, #8
    87e4:	af00      	add	r7, sp, #0
    87e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    87e8:	4b04      	ldr	r3, [pc, #16]	; (87fc <prvIdleTask+0x1c>)
    87ea:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    87ec:	4b04      	ldr	r3, [pc, #16]	; (8800 <prvIdleTask+0x20>)
    87ee:	681b      	ldr	r3, [r3, #0]
    87f0:	2b01      	cmp	r3, #1
    87f2:	d9f9      	bls.n	87e8 <prvIdleTask+0x8>
			{
				taskYIELD();
    87f4:	4b03      	ldr	r3, [pc, #12]	; (8804 <prvIdleTask+0x24>)
    87f6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    87f8:	e7f6      	b.n	87e8 <prvIdleTask+0x8>
    87fa:	46c0      	nop			; (mov r8, r8)
    87fc:	00008895 	.word	0x00008895
    8800:	20003b48 	.word	0x20003b48
    8804:	00005cc1 	.word	0x00005cc1

00008808 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    8808:	b580      	push	{r7, lr}
    880a:	b082      	sub	sp, #8
    880c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    880e:	2300      	movs	r3, #0
    8810:	607b      	str	r3, [r7, #4]
    8812:	e00c      	b.n	882e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    8814:	687a      	ldr	r2, [r7, #4]
    8816:	0013      	movs	r3, r2
    8818:	009b      	lsls	r3, r3, #2
    881a:	189b      	adds	r3, r3, r2
    881c:	009b      	lsls	r3, r3, #2
    881e:	4a14      	ldr	r2, [pc, #80]	; (8870 <prvInitialiseTaskLists+0x68>)
    8820:	189b      	adds	r3, r3, r2
    8822:	0018      	movs	r0, r3
    8824:	4b13      	ldr	r3, [pc, #76]	; (8874 <prvInitialiseTaskLists+0x6c>)
    8826:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    8828:	687b      	ldr	r3, [r7, #4]
    882a:	3301      	adds	r3, #1
    882c:	607b      	str	r3, [r7, #4]
    882e:	687b      	ldr	r3, [r7, #4]
    8830:	2b04      	cmp	r3, #4
    8832:	d9ef      	bls.n	8814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    8834:	4b10      	ldr	r3, [pc, #64]	; (8878 <prvInitialiseTaskLists+0x70>)
    8836:	0018      	movs	r0, r3
    8838:	4b0e      	ldr	r3, [pc, #56]	; (8874 <prvInitialiseTaskLists+0x6c>)
    883a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    883c:	4b0f      	ldr	r3, [pc, #60]	; (887c <prvInitialiseTaskLists+0x74>)
    883e:	0018      	movs	r0, r3
    8840:	4b0c      	ldr	r3, [pc, #48]	; (8874 <prvInitialiseTaskLists+0x6c>)
    8842:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    8844:	4b0e      	ldr	r3, [pc, #56]	; (8880 <prvInitialiseTaskLists+0x78>)
    8846:	0018      	movs	r0, r3
    8848:	4b0a      	ldr	r3, [pc, #40]	; (8874 <prvInitialiseTaskLists+0x6c>)
    884a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    884c:	4b0d      	ldr	r3, [pc, #52]	; (8884 <prvInitialiseTaskLists+0x7c>)
    884e:	0018      	movs	r0, r3
    8850:	4b08      	ldr	r3, [pc, #32]	; (8874 <prvInitialiseTaskLists+0x6c>)
    8852:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    8854:	4b0c      	ldr	r3, [pc, #48]	; (8888 <prvInitialiseTaskLists+0x80>)
    8856:	0018      	movs	r0, r3
    8858:	4b06      	ldr	r3, [pc, #24]	; (8874 <prvInitialiseTaskLists+0x6c>)
    885a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    885c:	4b0b      	ldr	r3, [pc, #44]	; (888c <prvInitialiseTaskLists+0x84>)
    885e:	4a06      	ldr	r2, [pc, #24]	; (8878 <prvInitialiseTaskLists+0x70>)
    8860:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    8862:	4b0b      	ldr	r3, [pc, #44]	; (8890 <prvInitialiseTaskLists+0x88>)
    8864:	4a05      	ldr	r2, [pc, #20]	; (887c <prvInitialiseTaskLists+0x74>)
    8866:	601a      	str	r2, [r3, #0]
}
    8868:	46c0      	nop			; (mov r8, r8)
    886a:	46bd      	mov	sp, r7
    886c:	b002      	add	sp, #8
    886e:	bd80      	pop	{r7, pc}
    8870:	20003b48 	.word	0x20003b48
    8874:	00005a4d 	.word	0x00005a4d
    8878:	20003bac 	.word	0x20003bac
    887c:	20003bc0 	.word	0x20003bc0
    8880:	20003bdc 	.word	0x20003bdc
    8884:	20003bf0 	.word	0x20003bf0
    8888:	20003c08 	.word	0x20003c08
    888c:	20003bd4 	.word	0x20003bd4
    8890:	20003bd8 	.word	0x20003bd8

00008894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    8894:	b580      	push	{r7, lr}
    8896:	b082      	sub	sp, #8
    8898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    889a:	e01a      	b.n	88d2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    889c:	4b11      	ldr	r3, [pc, #68]	; (88e4 <prvCheckTasksWaitingTermination+0x50>)
    889e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    88a0:	4b11      	ldr	r3, [pc, #68]	; (88e8 <prvCheckTasksWaitingTermination+0x54>)
    88a2:	68db      	ldr	r3, [r3, #12]
    88a4:	68db      	ldr	r3, [r3, #12]
    88a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    88a8:	687b      	ldr	r3, [r7, #4]
    88aa:	3304      	adds	r3, #4
    88ac:	0018      	movs	r0, r3
    88ae:	4b0f      	ldr	r3, [pc, #60]	; (88ec <prvCheckTasksWaitingTermination+0x58>)
    88b0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    88b2:	4b0f      	ldr	r3, [pc, #60]	; (88f0 <prvCheckTasksWaitingTermination+0x5c>)
    88b4:	681b      	ldr	r3, [r3, #0]
    88b6:	1e5a      	subs	r2, r3, #1
    88b8:	4b0d      	ldr	r3, [pc, #52]	; (88f0 <prvCheckTasksWaitingTermination+0x5c>)
    88ba:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    88bc:	4b0d      	ldr	r3, [pc, #52]	; (88f4 <prvCheckTasksWaitingTermination+0x60>)
    88be:	681b      	ldr	r3, [r3, #0]
    88c0:	1e5a      	subs	r2, r3, #1
    88c2:	4b0c      	ldr	r3, [pc, #48]	; (88f4 <prvCheckTasksWaitingTermination+0x60>)
    88c4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    88c6:	4b0c      	ldr	r3, [pc, #48]	; (88f8 <prvCheckTasksWaitingTermination+0x64>)
    88c8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    88ca:	687b      	ldr	r3, [r7, #4]
    88cc:	0018      	movs	r0, r3
    88ce:	4b0b      	ldr	r3, [pc, #44]	; (88fc <prvCheckTasksWaitingTermination+0x68>)
    88d0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    88d2:	4b08      	ldr	r3, [pc, #32]	; (88f4 <prvCheckTasksWaitingTermination+0x60>)
    88d4:	681b      	ldr	r3, [r3, #0]
    88d6:	2b00      	cmp	r3, #0
    88d8:	d1e0      	bne.n	889c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    88da:	46c0      	nop			; (mov r8, r8)
    88dc:	46bd      	mov	sp, r7
    88de:	b002      	add	sp, #8
    88e0:	bd80      	pop	{r7, pc}
    88e2:	46c0      	nop			; (mov r8, r8)
    88e4:	00005cd9 	.word	0x00005cd9
    88e8:	20003bf0 	.word	0x20003bf0
    88ec:	00005b4f 	.word	0x00005b4f
    88f0:	20003c1c 	.word	0x20003c1c
    88f4:	20003c04 	.word	0x20003c04
    88f8:	00005cfd 	.word	0x00005cfd
    88fc:	00008971 	.word	0x00008971

00008900 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    8900:	b580      	push	{r7, lr}
    8902:	b084      	sub	sp, #16
    8904:	af00      	add	r7, sp, #0
    8906:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
    8908:	2300      	movs	r3, #0
    890a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    890c:	e005      	b.n	891a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
    890e:	687b      	ldr	r3, [r7, #4]
    8910:	3301      	adds	r3, #1
    8912:	607b      	str	r3, [r7, #4]
			ulCount++;
    8914:	68fb      	ldr	r3, [r7, #12]
    8916:	3301      	adds	r3, #1
    8918:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    891a:	687b      	ldr	r3, [r7, #4]
    891c:	781b      	ldrb	r3, [r3, #0]
    891e:	2ba5      	cmp	r3, #165	; 0xa5
    8920:	d0f5      	beq.n	890e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    8922:	68fb      	ldr	r3, [r7, #12]
    8924:	089b      	lsrs	r3, r3, #2
    8926:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
    8928:	68fb      	ldr	r3, [r7, #12]
    892a:	b29b      	uxth	r3, r3
	}
    892c:	0018      	movs	r0, r3
    892e:	46bd      	mov	sp, r7
    8930:	b004      	add	sp, #16
    8932:	bd80      	pop	{r7, pc}

00008934 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    8934:	b580      	push	{r7, lr}
    8936:	b086      	sub	sp, #24
    8938:	af00      	add	r7, sp, #0
    893a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	2b00      	cmp	r3, #0
    8940:	d102      	bne.n	8948 <uxTaskGetStackHighWaterMark+0x14>
    8942:	4b09      	ldr	r3, [pc, #36]	; (8968 <uxTaskGetStackHighWaterMark+0x34>)
    8944:	681b      	ldr	r3, [r3, #0]
    8946:	e000      	b.n	894a <uxTaskGetStackHighWaterMark+0x16>
    8948:	687b      	ldr	r3, [r7, #4]
    894a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    894c:	697b      	ldr	r3, [r7, #20]
    894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8950:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    8952:	693b      	ldr	r3, [r7, #16]
    8954:	0018      	movs	r0, r3
    8956:	4b05      	ldr	r3, [pc, #20]	; (896c <uxTaskGetStackHighWaterMark+0x38>)
    8958:	4798      	blx	r3
    895a:	0003      	movs	r3, r0
    895c:	60fb      	str	r3, [r7, #12]

		return uxReturn;
    895e:	68fb      	ldr	r3, [r7, #12]
	}
    8960:	0018      	movs	r0, r3
    8962:	46bd      	mov	sp, r7
    8964:	b006      	add	sp, #24
    8966:	bd80      	pop	{r7, pc}
    8968:	20003b44 	.word	0x20003b44
    896c:	00008901 	.word	0x00008901

00008970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    8970:	b580      	push	{r7, lr}
    8972:	b082      	sub	sp, #8
    8974:	af00      	add	r7, sp, #0
    8976:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    8978:	687b      	ldr	r3, [r7, #4]
    897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    897c:	0018      	movs	r0, r3
    897e:	4b05      	ldr	r3, [pc, #20]	; (8994 <prvDeleteTCB+0x24>)
    8980:	4798      	blx	r3
			vPortFree( pxTCB );
    8982:	687b      	ldr	r3, [r7, #4]
    8984:	0018      	movs	r0, r3
    8986:	4b03      	ldr	r3, [pc, #12]	; (8994 <prvDeleteTCB+0x24>)
    8988:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    898a:	46c0      	nop			; (mov r8, r8)
    898c:	46bd      	mov	sp, r7
    898e:	b002      	add	sp, #8
    8990:	bd80      	pop	{r7, pc}
    8992:	46c0      	nop			; (mov r8, r8)
    8994:	00005ed5 	.word	0x00005ed5

00008998 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    8998:	b580      	push	{r7, lr}
    899a:	b082      	sub	sp, #8
    899c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    899e:	4b0e      	ldr	r3, [pc, #56]	; (89d8 <prvResetNextTaskUnblockTime+0x40>)
    89a0:	681b      	ldr	r3, [r3, #0]
    89a2:	681b      	ldr	r3, [r3, #0]
    89a4:	2b00      	cmp	r3, #0
    89a6:	d101      	bne.n	89ac <prvResetNextTaskUnblockTime+0x14>
    89a8:	2301      	movs	r3, #1
    89aa:	e000      	b.n	89ae <prvResetNextTaskUnblockTime+0x16>
    89ac:	2300      	movs	r3, #0
    89ae:	2b00      	cmp	r3, #0
    89b0:	d004      	beq.n	89bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    89b2:	4b0a      	ldr	r3, [pc, #40]	; (89dc <prvResetNextTaskUnblockTime+0x44>)
    89b4:	2201      	movs	r2, #1
    89b6:	4252      	negs	r2, r2
    89b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    89ba:	e008      	b.n	89ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    89bc:	4b06      	ldr	r3, [pc, #24]	; (89d8 <prvResetNextTaskUnblockTime+0x40>)
    89be:	681b      	ldr	r3, [r3, #0]
    89c0:	68db      	ldr	r3, [r3, #12]
    89c2:	68db      	ldr	r3, [r3, #12]
    89c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    89c6:	687b      	ldr	r3, [r7, #4]
    89c8:	685a      	ldr	r2, [r3, #4]
    89ca:	4b04      	ldr	r3, [pc, #16]	; (89dc <prvResetNextTaskUnblockTime+0x44>)
    89cc:	601a      	str	r2, [r3, #0]
}
    89ce:	46c0      	nop			; (mov r8, r8)
    89d0:	46bd      	mov	sp, r7
    89d2:	b002      	add	sp, #8
    89d4:	bd80      	pop	{r7, pc}
    89d6:	46c0      	nop			; (mov r8, r8)
    89d8:	20003bd4 	.word	0x20003bd4
    89dc:	20003c3c 	.word	0x20003c3c

000089e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    89e0:	b580      	push	{r7, lr}
    89e2:	b082      	sub	sp, #8
    89e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    89e6:	4b04      	ldr	r3, [pc, #16]	; (89f8 <xTaskGetCurrentTaskHandle+0x18>)
    89e8:	681b      	ldr	r3, [r3, #0]
    89ea:	607b      	str	r3, [r7, #4]

		return xReturn;
    89ec:	687b      	ldr	r3, [r7, #4]
	}
    89ee:	0018      	movs	r0, r3
    89f0:	46bd      	mov	sp, r7
    89f2:	b002      	add	sp, #8
    89f4:	bd80      	pop	{r7, pc}
    89f6:	46c0      	nop			; (mov r8, r8)
    89f8:	20003b44 	.word	0x20003b44

000089fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    89fc:	b580      	push	{r7, lr}
    89fe:	b082      	sub	sp, #8
    8a00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    8a02:	4b0a      	ldr	r3, [pc, #40]	; (8a2c <xTaskGetSchedulerState+0x30>)
    8a04:	681b      	ldr	r3, [r3, #0]
    8a06:	2b00      	cmp	r3, #0
    8a08:	d102      	bne.n	8a10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    8a0a:	2301      	movs	r3, #1
    8a0c:	607b      	str	r3, [r7, #4]
    8a0e:	e008      	b.n	8a22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8a10:	4b07      	ldr	r3, [pc, #28]	; (8a30 <xTaskGetSchedulerState+0x34>)
    8a12:	681b      	ldr	r3, [r3, #0]
    8a14:	2b00      	cmp	r3, #0
    8a16:	d102      	bne.n	8a1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    8a18:	2302      	movs	r3, #2
    8a1a:	607b      	str	r3, [r7, #4]
    8a1c:	e001      	b.n	8a22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    8a1e:	2300      	movs	r3, #0
    8a20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    8a22:	687b      	ldr	r3, [r7, #4]
	}
    8a24:	0018      	movs	r0, r3
    8a26:	46bd      	mov	sp, r7
    8a28:	b002      	add	sp, #8
    8a2a:	bd80      	pop	{r7, pc}
    8a2c:	20003c28 	.word	0x20003c28
    8a30:	20003c44 	.word	0x20003c44

00008a34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    8a34:	b590      	push	{r4, r7, lr}
    8a36:	b085      	sub	sp, #20
    8a38:	af00      	add	r7, sp, #0
    8a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    8a3c:	687b      	ldr	r3, [r7, #4]
    8a3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    8a40:	2300      	movs	r3, #0
    8a42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    8a44:	687b      	ldr	r3, [r7, #4]
    8a46:	2b00      	cmp	r3, #0
    8a48:	d100      	bne.n	8a4c <xTaskPriorityInherit+0x18>
    8a4a:	e09d      	b.n	8b88 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    8a4c:	68bb      	ldr	r3, [r7, #8]
    8a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8a50:	4b50      	ldr	r3, [pc, #320]	; (8b94 <xTaskPriorityInherit+0x160>)
    8a52:	681b      	ldr	r3, [r3, #0]
    8a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8a56:	429a      	cmp	r2, r3
    8a58:	d300      	bcc.n	8a5c <xTaskPriorityInherit+0x28>
    8a5a:	e08c      	b.n	8b76 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    8a5c:	68bb      	ldr	r3, [r7, #8]
    8a5e:	699b      	ldr	r3, [r3, #24]
    8a60:	2b00      	cmp	r3, #0
    8a62:	db06      	blt.n	8a72 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8a64:	4b4b      	ldr	r3, [pc, #300]	; (8b94 <xTaskPriorityInherit+0x160>)
    8a66:	681b      	ldr	r3, [r3, #0]
    8a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8a6a:	2205      	movs	r2, #5
    8a6c:	1ad2      	subs	r2, r2, r3
    8a6e:	68bb      	ldr	r3, [r7, #8]
    8a70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    8a72:	68bb      	ldr	r3, [r7, #8]
    8a74:	6959      	ldr	r1, [r3, #20]
    8a76:	68bb      	ldr	r3, [r7, #8]
    8a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8a7a:	0013      	movs	r3, r2
    8a7c:	009b      	lsls	r3, r3, #2
    8a7e:	189b      	adds	r3, r3, r2
    8a80:	009b      	lsls	r3, r3, #2
    8a82:	4a45      	ldr	r2, [pc, #276]	; (8b98 <xTaskPriorityInherit+0x164>)
    8a84:	189b      	adds	r3, r3, r2
    8a86:	4299      	cmp	r1, r3
    8a88:	d101      	bne.n	8a8e <xTaskPriorityInherit+0x5a>
    8a8a:	2301      	movs	r3, #1
    8a8c:	e000      	b.n	8a90 <xTaskPriorityInherit+0x5c>
    8a8e:	2300      	movs	r3, #0
    8a90:	2b00      	cmp	r3, #0
    8a92:	d037      	beq.n	8b04 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8a94:	68bb      	ldr	r3, [r7, #8]
    8a96:	3304      	adds	r3, #4
    8a98:	0018      	movs	r0, r3
    8a9a:	4b40      	ldr	r3, [pc, #256]	; (8b9c <xTaskPriorityInherit+0x168>)
    8a9c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    8a9e:	4b3d      	ldr	r3, [pc, #244]	; (8b94 <xTaskPriorityInherit+0x160>)
    8aa0:	681b      	ldr	r3, [r3, #0]
    8aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8aa4:	68bb      	ldr	r3, [r7, #8]
    8aa6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    8aa8:	68bb      	ldr	r3, [r7, #8]
    8aaa:	0018      	movs	r0, r3
    8aac:	4b3c      	ldr	r3, [pc, #240]	; (8ba0 <xTaskPriorityInherit+0x16c>)
    8aae:	4798      	blx	r3
    8ab0:	0003      	movs	r3, r0
    8ab2:	001a      	movs	r2, r3
    8ab4:	4b3b      	ldr	r3, [pc, #236]	; (8ba4 <xTaskPriorityInherit+0x170>)
    8ab6:	881b      	ldrh	r3, [r3, #0]
    8ab8:	4013      	ands	r3, r2
    8aba:	b29b      	uxth	r3, r3
    8abc:	2b00      	cmp	r3, #0
    8abe:	d008      	beq.n	8ad2 <xTaskPriorityInherit+0x9e>
    8ac0:	68bb      	ldr	r3, [r7, #8]
    8ac2:	0018      	movs	r0, r3
    8ac4:	4b38      	ldr	r3, [pc, #224]	; (8ba8 <xTaskPriorityInherit+0x174>)
    8ac6:	4798      	blx	r3
    8ac8:	0003      	movs	r3, r0
    8aca:	b2db      	uxtb	r3, r3
    8acc:	0018      	movs	r0, r3
    8ace:	4b37      	ldr	r3, [pc, #220]	; (8bac <xTaskPriorityInherit+0x178>)
    8ad0:	4798      	blx	r3
    8ad2:	68bb      	ldr	r3, [r7, #8]
    8ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ad6:	4b36      	ldr	r3, [pc, #216]	; (8bb0 <xTaskPriorityInherit+0x17c>)
    8ad8:	681b      	ldr	r3, [r3, #0]
    8ada:	429a      	cmp	r2, r3
    8adc:	d903      	bls.n	8ae6 <xTaskPriorityInherit+0xb2>
    8ade:	68bb      	ldr	r3, [r7, #8]
    8ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ae2:	4b33      	ldr	r3, [pc, #204]	; (8bb0 <xTaskPriorityInherit+0x17c>)
    8ae4:	601a      	str	r2, [r3, #0]
    8ae6:	68bb      	ldr	r3, [r7, #8]
    8ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8aea:	0013      	movs	r3, r2
    8aec:	009b      	lsls	r3, r3, #2
    8aee:	189b      	adds	r3, r3, r2
    8af0:	009b      	lsls	r3, r3, #2
    8af2:	4a29      	ldr	r2, [pc, #164]	; (8b98 <xTaskPriorityInherit+0x164>)
    8af4:	189a      	adds	r2, r3, r2
    8af6:	68bb      	ldr	r3, [r7, #8]
    8af8:	3304      	adds	r3, #4
    8afa:	0019      	movs	r1, r3
    8afc:	0010      	movs	r0, r2
    8afe:	4b2d      	ldr	r3, [pc, #180]	; (8bb4 <xTaskPriorityInherit+0x180>)
    8b00:	4798      	blx	r3
    8b02:	e004      	b.n	8b0e <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    8b04:	4b23      	ldr	r3, [pc, #140]	; (8b94 <xTaskPriorityInherit+0x160>)
    8b06:	681b      	ldr	r3, [r3, #0]
    8b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8b0a:	68bb      	ldr	r3, [r7, #8]
    8b0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    8b0e:	68bb      	ldr	r3, [r7, #8]
    8b10:	0018      	movs	r0, r3
    8b12:	4b23      	ldr	r3, [pc, #140]	; (8ba0 <xTaskPriorityInherit+0x16c>)
    8b14:	4798      	blx	r3
    8b16:	0003      	movs	r3, r0
    8b18:	001a      	movs	r2, r3
    8b1a:	4b22      	ldr	r3, [pc, #136]	; (8ba4 <xTaskPriorityInherit+0x170>)
    8b1c:	881b      	ldrh	r3, [r3, #0]
    8b1e:	4013      	ands	r3, r2
    8b20:	b29b      	uxth	r3, r3
    8b22:	2b00      	cmp	r3, #0
    8b24:	d024      	beq.n	8b70 <xTaskPriorityInherit+0x13c>
    8b26:	68bb      	ldr	r3, [r7, #8]
    8b28:	0018      	movs	r0, r3
    8b2a:	4b1f      	ldr	r3, [pc, #124]	; (8ba8 <xTaskPriorityInherit+0x174>)
    8b2c:	4798      	blx	r3
    8b2e:	0003      	movs	r3, r0
    8b30:	b2db      	uxtb	r3, r3
    8b32:	001c      	movs	r4, r3
    8b34:	68bb      	ldr	r3, [r7, #8]
    8b36:	0018      	movs	r0, r3
    8b38:	4b1b      	ldr	r3, [pc, #108]	; (8ba8 <xTaskPriorityInherit+0x174>)
    8b3a:	4798      	blx	r3
    8b3c:	0003      	movs	r3, r0
    8b3e:	b2db      	uxtb	r3, r3
    8b40:	0019      	movs	r1, r3
    8b42:	2003      	movs	r0, #3
    8b44:	4b1c      	ldr	r3, [pc, #112]	; (8bb8 <xTaskPriorityInherit+0x184>)
    8b46:	4798      	blx	r3
    8b48:	0003      	movs	r3, r0
    8b4a:	0022      	movs	r2, r4
    8b4c:	2103      	movs	r1, #3
    8b4e:	208e      	movs	r0, #142	; 0x8e
    8b50:	4c1a      	ldr	r4, [pc, #104]	; (8bbc <xTaskPriorityInherit+0x188>)
    8b52:	47a0      	blx	r4
    8b54:	68bb      	ldr	r3, [r7, #8]
    8b56:	0018      	movs	r0, r3
    8b58:	4b13      	ldr	r3, [pc, #76]	; (8ba8 <xTaskPriorityInherit+0x174>)
    8b5a:	4798      	blx	r3
    8b5c:	0003      	movs	r3, r0
    8b5e:	b2d9      	uxtb	r1, r3
    8b60:	4b0c      	ldr	r3, [pc, #48]	; (8b94 <xTaskPriorityInherit+0x160>)
    8b62:	681b      	ldr	r3, [r3, #0]
    8b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8b66:	b2db      	uxtb	r3, r3
    8b68:	001a      	movs	r2, r3
    8b6a:	2003      	movs	r0, #3
    8b6c:	4b14      	ldr	r3, [pc, #80]	; (8bc0 <xTaskPriorityInherit+0x18c>)
    8b6e:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    8b70:	2301      	movs	r3, #1
    8b72:	60fb      	str	r3, [r7, #12]
    8b74:	e008      	b.n	8b88 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    8b76:	68bb      	ldr	r3, [r7, #8]
    8b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    8b7a:	4b06      	ldr	r3, [pc, #24]	; (8b94 <xTaskPriorityInherit+0x160>)
    8b7c:	681b      	ldr	r3, [r3, #0]
    8b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8b80:	429a      	cmp	r2, r3
    8b82:	d201      	bcs.n	8b88 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    8b84:	2301      	movs	r3, #1
    8b86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8b88:	68fb      	ldr	r3, [r7, #12]
	}
    8b8a:	0018      	movs	r0, r3
    8b8c:	46bd      	mov	sp, r7
    8b8e:	b005      	add	sp, #20
    8b90:	bd90      	pop	{r4, r7, pc}
    8b92:	46c0      	nop			; (mov r8, r8)
    8b94:	20003b44 	.word	0x20003b44
    8b98:	20003b48 	.word	0x20003b48
    8b9c:	00005b4f 	.word	0x00005b4f
    8ba0:	00003cd5 	.word	0x00003cd5
    8ba4:	200000f4 	.word	0x200000f4
    8ba8:	00003cb5 	.word	0x00003cb5
    8bac:	00004485 	.word	0x00004485
    8bb0:	20003c24 	.word	0x20003c24
    8bb4:	00005a9f 	.word	0x00005a9f
    8bb8:	00004c8d 	.word	0x00004c8d
    8bbc:	000047fd 	.word	0x000047fd
    8bc0:	00004be9 	.word	0x00004be9

00008bc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    8bc4:	b590      	push	{r4, r7, lr}
    8bc6:	b085      	sub	sp, #20
    8bc8:	af00      	add	r7, sp, #0
    8bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    8bcc:	687b      	ldr	r3, [r7, #4]
    8bce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    8bd0:	2300      	movs	r3, #0
    8bd2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    8bd4:	687b      	ldr	r3, [r7, #4]
    8bd6:	2b00      	cmp	r3, #0
    8bd8:	d100      	bne.n	8bdc <xTaskPriorityDisinherit+0x18>
    8bda:	e089      	b.n	8cf0 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    8bdc:	4b47      	ldr	r3, [pc, #284]	; (8cfc <xTaskPriorityDisinherit+0x138>)
    8bde:	681b      	ldr	r3, [r3, #0]
    8be0:	68ba      	ldr	r2, [r7, #8]
    8be2:	429a      	cmp	r2, r3
    8be4:	d001      	beq.n	8bea <xTaskPriorityDisinherit+0x26>
    8be6:	b672      	cpsid	i
    8be8:	e7fe      	b.n	8be8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
    8bea:	68bb      	ldr	r3, [r7, #8]
    8bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8bee:	2b00      	cmp	r3, #0
    8bf0:	d101      	bne.n	8bf6 <xTaskPriorityDisinherit+0x32>
    8bf2:	b672      	cpsid	i
    8bf4:	e7fe      	b.n	8bf4 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
    8bf6:	68bb      	ldr	r3, [r7, #8]
    8bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8bfa:	1e5a      	subs	r2, r3, #1
    8bfc:	68bb      	ldr	r3, [r7, #8]
    8bfe:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    8c00:	68bb      	ldr	r3, [r7, #8]
    8c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8c04:	68bb      	ldr	r3, [r7, #8]
    8c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8c08:	429a      	cmp	r2, r3
    8c0a:	d071      	beq.n	8cf0 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    8c0c:	68bb      	ldr	r3, [r7, #8]
    8c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8c10:	2b00      	cmp	r3, #0
    8c12:	d16d      	bne.n	8cf0 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8c14:	68bb      	ldr	r3, [r7, #8]
    8c16:	3304      	adds	r3, #4
    8c18:	0018      	movs	r0, r3
    8c1a:	4b39      	ldr	r3, [pc, #228]	; (8d00 <xTaskPriorityDisinherit+0x13c>)
    8c1c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    8c1e:	68bb      	ldr	r3, [r7, #8]
    8c20:	0018      	movs	r0, r3
    8c22:	4b38      	ldr	r3, [pc, #224]	; (8d04 <xTaskPriorityDisinherit+0x140>)
    8c24:	4798      	blx	r3
    8c26:	0003      	movs	r3, r0
    8c28:	001a      	movs	r2, r3
    8c2a:	4b37      	ldr	r3, [pc, #220]	; (8d08 <xTaskPriorityDisinherit+0x144>)
    8c2c:	881b      	ldrh	r3, [r3, #0]
    8c2e:	4013      	ands	r3, r2
    8c30:	b29b      	uxth	r3, r3
    8c32:	2b00      	cmp	r3, #0
    8c34:	d023      	beq.n	8c7e <xTaskPriorityDisinherit+0xba>
    8c36:	68bb      	ldr	r3, [r7, #8]
    8c38:	0018      	movs	r0, r3
    8c3a:	4b34      	ldr	r3, [pc, #208]	; (8d0c <xTaskPriorityDisinherit+0x148>)
    8c3c:	4798      	blx	r3
    8c3e:	0003      	movs	r3, r0
    8c40:	b2db      	uxtb	r3, r3
    8c42:	001c      	movs	r4, r3
    8c44:	68bb      	ldr	r3, [r7, #8]
    8c46:	0018      	movs	r0, r3
    8c48:	4b30      	ldr	r3, [pc, #192]	; (8d0c <xTaskPriorityDisinherit+0x148>)
    8c4a:	4798      	blx	r3
    8c4c:	0003      	movs	r3, r0
    8c4e:	b2db      	uxtb	r3, r3
    8c50:	0019      	movs	r1, r3
    8c52:	2003      	movs	r0, #3
    8c54:	4b2e      	ldr	r3, [pc, #184]	; (8d10 <xTaskPriorityDisinherit+0x14c>)
    8c56:	4798      	blx	r3
    8c58:	0003      	movs	r3, r0
    8c5a:	0022      	movs	r2, r4
    8c5c:	2103      	movs	r1, #3
    8c5e:	208f      	movs	r0, #143	; 0x8f
    8c60:	4c2c      	ldr	r4, [pc, #176]	; (8d14 <xTaskPriorityDisinherit+0x150>)
    8c62:	47a0      	blx	r4
    8c64:	68bb      	ldr	r3, [r7, #8]
    8c66:	0018      	movs	r0, r3
    8c68:	4b28      	ldr	r3, [pc, #160]	; (8d0c <xTaskPriorityDisinherit+0x148>)
    8c6a:	4798      	blx	r3
    8c6c:	0003      	movs	r3, r0
    8c6e:	b2d9      	uxtb	r1, r3
    8c70:	68bb      	ldr	r3, [r7, #8]
    8c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8c74:	b2db      	uxtb	r3, r3
    8c76:	001a      	movs	r2, r3
    8c78:	2003      	movs	r0, #3
    8c7a:	4b27      	ldr	r3, [pc, #156]	; (8d18 <xTaskPriorityDisinherit+0x154>)
    8c7c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    8c7e:	68bb      	ldr	r3, [r7, #8]
    8c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    8c82:	68bb      	ldr	r3, [r7, #8]
    8c84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8c86:	68bb      	ldr	r3, [r7, #8]
    8c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8c8a:	2205      	movs	r2, #5
    8c8c:	1ad2      	subs	r2, r2, r3
    8c8e:	68bb      	ldr	r3, [r7, #8]
    8c90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    8c92:	68bb      	ldr	r3, [r7, #8]
    8c94:	0018      	movs	r0, r3
    8c96:	4b1b      	ldr	r3, [pc, #108]	; (8d04 <xTaskPriorityDisinherit+0x140>)
    8c98:	4798      	blx	r3
    8c9a:	0003      	movs	r3, r0
    8c9c:	001a      	movs	r2, r3
    8c9e:	4b1a      	ldr	r3, [pc, #104]	; (8d08 <xTaskPriorityDisinherit+0x144>)
    8ca0:	881b      	ldrh	r3, [r3, #0]
    8ca2:	4013      	ands	r3, r2
    8ca4:	b29b      	uxth	r3, r3
    8ca6:	2b00      	cmp	r3, #0
    8ca8:	d008      	beq.n	8cbc <xTaskPriorityDisinherit+0xf8>
    8caa:	68bb      	ldr	r3, [r7, #8]
    8cac:	0018      	movs	r0, r3
    8cae:	4b17      	ldr	r3, [pc, #92]	; (8d0c <xTaskPriorityDisinherit+0x148>)
    8cb0:	4798      	blx	r3
    8cb2:	0003      	movs	r3, r0
    8cb4:	b2db      	uxtb	r3, r3
    8cb6:	0018      	movs	r0, r3
    8cb8:	4b18      	ldr	r3, [pc, #96]	; (8d1c <xTaskPriorityDisinherit+0x158>)
    8cba:	4798      	blx	r3
    8cbc:	68bb      	ldr	r3, [r7, #8]
    8cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8cc0:	4b17      	ldr	r3, [pc, #92]	; (8d20 <xTaskPriorityDisinherit+0x15c>)
    8cc2:	681b      	ldr	r3, [r3, #0]
    8cc4:	429a      	cmp	r2, r3
    8cc6:	d903      	bls.n	8cd0 <xTaskPriorityDisinherit+0x10c>
    8cc8:	68bb      	ldr	r3, [r7, #8]
    8cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ccc:	4b14      	ldr	r3, [pc, #80]	; (8d20 <xTaskPriorityDisinherit+0x15c>)
    8cce:	601a      	str	r2, [r3, #0]
    8cd0:	68bb      	ldr	r3, [r7, #8]
    8cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8cd4:	0013      	movs	r3, r2
    8cd6:	009b      	lsls	r3, r3, #2
    8cd8:	189b      	adds	r3, r3, r2
    8cda:	009b      	lsls	r3, r3, #2
    8cdc:	4a11      	ldr	r2, [pc, #68]	; (8d24 <xTaskPriorityDisinherit+0x160>)
    8cde:	189a      	adds	r2, r3, r2
    8ce0:	68bb      	ldr	r3, [r7, #8]
    8ce2:	3304      	adds	r3, #4
    8ce4:	0019      	movs	r1, r3
    8ce6:	0010      	movs	r0, r2
    8ce8:	4b0f      	ldr	r3, [pc, #60]	; (8d28 <xTaskPriorityDisinherit+0x164>)
    8cea:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    8cec:	2301      	movs	r3, #1
    8cee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8cf0:	68fb      	ldr	r3, [r7, #12]
	}
    8cf2:	0018      	movs	r0, r3
    8cf4:	46bd      	mov	sp, r7
    8cf6:	b005      	add	sp, #20
    8cf8:	bd90      	pop	{r4, r7, pc}
    8cfa:	46c0      	nop			; (mov r8, r8)
    8cfc:	20003b44 	.word	0x20003b44
    8d00:	00005b4f 	.word	0x00005b4f
    8d04:	00003cd5 	.word	0x00003cd5
    8d08:	200000f4 	.word	0x200000f4
    8d0c:	00003cb5 	.word	0x00003cb5
    8d10:	00004c8d 	.word	0x00004c8d
    8d14:	000047fd 	.word	0x000047fd
    8d18:	00004be9 	.word	0x00004be9
    8d1c:	00004485 	.word	0x00004485
    8d20:	20003c24 	.word	0x20003c24
    8d24:	20003b48 	.word	0x20003b48
    8d28:	00005a9f 	.word	0x00005a9f

00008d2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    8d2c:	b590      	push	{r4, r7, lr}
    8d2e:	b087      	sub	sp, #28
    8d30:	af00      	add	r7, sp, #0
    8d32:	6078      	str	r0, [r7, #4]
    8d34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    8d36:	687b      	ldr	r3, [r7, #4]
    8d38:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    8d3a:	2301      	movs	r3, #1
    8d3c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    8d3e:	687b      	ldr	r3, [r7, #4]
    8d40:	2b00      	cmp	r3, #0
    8d42:	d100      	bne.n	8d46 <vTaskPriorityDisinheritAfterTimeout+0x1a>
    8d44:	e0a4      	b.n	8e90 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    8d46:	693b      	ldr	r3, [r7, #16]
    8d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d101      	bne.n	8d52 <vTaskPriorityDisinheritAfterTimeout+0x26>
    8d4e:	b672      	cpsid	i
    8d50:	e7fe      	b.n	8d50 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    8d52:	693b      	ldr	r3, [r7, #16]
    8d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    8d56:	683b      	ldr	r3, [r7, #0]
    8d58:	429a      	cmp	r2, r3
    8d5a:	d202      	bcs.n	8d62 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    8d5c:	683b      	ldr	r3, [r7, #0]
    8d5e:	617b      	str	r3, [r7, #20]
    8d60:	e002      	b.n	8d68 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    8d62:	693b      	ldr	r3, [r7, #16]
    8d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8d66:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    8d68:	693b      	ldr	r3, [r7, #16]
    8d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8d6c:	697b      	ldr	r3, [r7, #20]
    8d6e:	429a      	cmp	r2, r3
    8d70:	d100      	bne.n	8d74 <vTaskPriorityDisinheritAfterTimeout+0x48>
    8d72:	e08d      	b.n	8e90 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    8d74:	693b      	ldr	r3, [r7, #16]
    8d76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    8d78:	68fb      	ldr	r3, [r7, #12]
    8d7a:	429a      	cmp	r2, r3
    8d7c:	d000      	beq.n	8d80 <vTaskPriorityDisinheritAfterTimeout+0x54>
    8d7e:	e087      	b.n	8e90 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    8d80:	4b45      	ldr	r3, [pc, #276]	; (8e98 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
    8d82:	681b      	ldr	r3, [r3, #0]
    8d84:	693a      	ldr	r2, [r7, #16]
    8d86:	429a      	cmp	r2, r3
    8d88:	d101      	bne.n	8d8e <vTaskPriorityDisinheritAfterTimeout+0x62>
    8d8a:	b672      	cpsid	i
    8d8c:	e7fe      	b.n	8d8c <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    8d8e:	693b      	ldr	r3, [r7, #16]
    8d90:	0018      	movs	r0, r3
    8d92:	4b42      	ldr	r3, [pc, #264]	; (8e9c <vTaskPriorityDisinheritAfterTimeout+0x170>)
    8d94:	4798      	blx	r3
    8d96:	0003      	movs	r3, r0
    8d98:	001a      	movs	r2, r3
    8d9a:	4b41      	ldr	r3, [pc, #260]	; (8ea0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    8d9c:	881b      	ldrh	r3, [r3, #0]
    8d9e:	4013      	ands	r3, r2
    8da0:	b29b      	uxth	r3, r3
    8da2:	2b00      	cmp	r3, #0
    8da4:	d023      	beq.n	8dee <vTaskPriorityDisinheritAfterTimeout+0xc2>
    8da6:	693b      	ldr	r3, [r7, #16]
    8da8:	0018      	movs	r0, r3
    8daa:	4b3e      	ldr	r3, [pc, #248]	; (8ea4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    8dac:	4798      	blx	r3
    8dae:	0003      	movs	r3, r0
    8db0:	b2db      	uxtb	r3, r3
    8db2:	001c      	movs	r4, r3
    8db4:	693b      	ldr	r3, [r7, #16]
    8db6:	0018      	movs	r0, r3
    8db8:	4b3a      	ldr	r3, [pc, #232]	; (8ea4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    8dba:	4798      	blx	r3
    8dbc:	0003      	movs	r3, r0
    8dbe:	b2db      	uxtb	r3, r3
    8dc0:	0019      	movs	r1, r3
    8dc2:	2003      	movs	r0, #3
    8dc4:	4b38      	ldr	r3, [pc, #224]	; (8ea8 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
    8dc6:	4798      	blx	r3
    8dc8:	0003      	movs	r3, r0
    8dca:	0022      	movs	r2, r4
    8dcc:	2103      	movs	r1, #3
    8dce:	208f      	movs	r0, #143	; 0x8f
    8dd0:	4c36      	ldr	r4, [pc, #216]	; (8eac <vTaskPriorityDisinheritAfterTimeout+0x180>)
    8dd2:	47a0      	blx	r4
    8dd4:	693b      	ldr	r3, [r7, #16]
    8dd6:	0018      	movs	r0, r3
    8dd8:	4b32      	ldr	r3, [pc, #200]	; (8ea4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    8dda:	4798      	blx	r3
    8ddc:	0003      	movs	r3, r0
    8dde:	b2d9      	uxtb	r1, r3
    8de0:	693b      	ldr	r3, [r7, #16]
    8de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8de4:	b2db      	uxtb	r3, r3
    8de6:	001a      	movs	r2, r3
    8de8:	2003      	movs	r0, #3
    8dea:	4b31      	ldr	r3, [pc, #196]	; (8eb0 <vTaskPriorityDisinheritAfterTimeout+0x184>)
    8dec:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    8dee:	693b      	ldr	r3, [r7, #16]
    8df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8df2:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    8df4:	693b      	ldr	r3, [r7, #16]
    8df6:	697a      	ldr	r2, [r7, #20]
    8df8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    8dfa:	693b      	ldr	r3, [r7, #16]
    8dfc:	699b      	ldr	r3, [r3, #24]
    8dfe:	2b00      	cmp	r3, #0
    8e00:	db04      	blt.n	8e0c <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8e02:	697b      	ldr	r3, [r7, #20]
    8e04:	2205      	movs	r2, #5
    8e06:	1ad2      	subs	r2, r2, r3
    8e08:	693b      	ldr	r3, [r7, #16]
    8e0a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    8e0c:	693b      	ldr	r3, [r7, #16]
    8e0e:	6959      	ldr	r1, [r3, #20]
    8e10:	68ba      	ldr	r2, [r7, #8]
    8e12:	0013      	movs	r3, r2
    8e14:	009b      	lsls	r3, r3, #2
    8e16:	189b      	adds	r3, r3, r2
    8e18:	009b      	lsls	r3, r3, #2
    8e1a:	4a26      	ldr	r2, [pc, #152]	; (8eb4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    8e1c:	189b      	adds	r3, r3, r2
    8e1e:	4299      	cmp	r1, r3
    8e20:	d101      	bne.n	8e26 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    8e22:	2301      	movs	r3, #1
    8e24:	e000      	b.n	8e28 <vTaskPriorityDisinheritAfterTimeout+0xfc>
    8e26:	2300      	movs	r3, #0
    8e28:	2b00      	cmp	r3, #0
    8e2a:	d031      	beq.n	8e90 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8e2c:	693b      	ldr	r3, [r7, #16]
    8e2e:	3304      	adds	r3, #4
    8e30:	0018      	movs	r0, r3
    8e32:	4b21      	ldr	r3, [pc, #132]	; (8eb8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
    8e34:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    8e36:	693b      	ldr	r3, [r7, #16]
    8e38:	0018      	movs	r0, r3
    8e3a:	4b18      	ldr	r3, [pc, #96]	; (8e9c <vTaskPriorityDisinheritAfterTimeout+0x170>)
    8e3c:	4798      	blx	r3
    8e3e:	0003      	movs	r3, r0
    8e40:	001a      	movs	r2, r3
    8e42:	4b17      	ldr	r3, [pc, #92]	; (8ea0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    8e44:	881b      	ldrh	r3, [r3, #0]
    8e46:	4013      	ands	r3, r2
    8e48:	b29b      	uxth	r3, r3
    8e4a:	2b00      	cmp	r3, #0
    8e4c:	d008      	beq.n	8e60 <vTaskPriorityDisinheritAfterTimeout+0x134>
    8e4e:	693b      	ldr	r3, [r7, #16]
    8e50:	0018      	movs	r0, r3
    8e52:	4b14      	ldr	r3, [pc, #80]	; (8ea4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    8e54:	4798      	blx	r3
    8e56:	0003      	movs	r3, r0
    8e58:	b2db      	uxtb	r3, r3
    8e5a:	0018      	movs	r0, r3
    8e5c:	4b17      	ldr	r3, [pc, #92]	; (8ebc <vTaskPriorityDisinheritAfterTimeout+0x190>)
    8e5e:	4798      	blx	r3
    8e60:	693b      	ldr	r3, [r7, #16]
    8e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8e64:	4b16      	ldr	r3, [pc, #88]	; (8ec0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    8e66:	681b      	ldr	r3, [r3, #0]
    8e68:	429a      	cmp	r2, r3
    8e6a:	d903      	bls.n	8e74 <vTaskPriorityDisinheritAfterTimeout+0x148>
    8e6c:	693b      	ldr	r3, [r7, #16]
    8e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8e70:	4b13      	ldr	r3, [pc, #76]	; (8ec0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    8e72:	601a      	str	r2, [r3, #0]
    8e74:	693b      	ldr	r3, [r7, #16]
    8e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8e78:	0013      	movs	r3, r2
    8e7a:	009b      	lsls	r3, r3, #2
    8e7c:	189b      	adds	r3, r3, r2
    8e7e:	009b      	lsls	r3, r3, #2
    8e80:	4a0c      	ldr	r2, [pc, #48]	; (8eb4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    8e82:	189a      	adds	r2, r3, r2
    8e84:	693b      	ldr	r3, [r7, #16]
    8e86:	3304      	adds	r3, #4
    8e88:	0019      	movs	r1, r3
    8e8a:	0010      	movs	r0, r2
    8e8c:	4b0d      	ldr	r3, [pc, #52]	; (8ec4 <vTaskPriorityDisinheritAfterTimeout+0x198>)
    8e8e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    8e90:	46c0      	nop			; (mov r8, r8)
    8e92:	46bd      	mov	sp, r7
    8e94:	b007      	add	sp, #28
    8e96:	bd90      	pop	{r4, r7, pc}
    8e98:	20003b44 	.word	0x20003b44
    8e9c:	00003cd5 	.word	0x00003cd5
    8ea0:	200000f4 	.word	0x200000f4
    8ea4:	00003cb5 	.word	0x00003cb5
    8ea8:	00004c8d 	.word	0x00004c8d
    8eac:	000047fd 	.word	0x000047fd
    8eb0:	00004be9 	.word	0x00004be9
    8eb4:	20003b48 	.word	0x20003b48
    8eb8:	00005b4f 	.word	0x00005b4f
    8ebc:	00004485 	.word	0x00004485
    8ec0:	20003c24 	.word	0x20003c24
    8ec4:	00005a9f 	.word	0x00005a9f

00008ec8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    8ec8:	b580      	push	{r7, lr}
    8eca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    8ecc:	4b06      	ldr	r3, [pc, #24]	; (8ee8 <pvTaskIncrementMutexHeldCount+0x20>)
    8ece:	681b      	ldr	r3, [r3, #0]
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d004      	beq.n	8ede <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    8ed4:	4b04      	ldr	r3, [pc, #16]	; (8ee8 <pvTaskIncrementMutexHeldCount+0x20>)
    8ed6:	681b      	ldr	r3, [r3, #0]
    8ed8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    8eda:	3201      	adds	r2, #1
    8edc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
    8ede:	4b02      	ldr	r3, [pc, #8]	; (8ee8 <pvTaskIncrementMutexHeldCount+0x20>)
    8ee0:	681b      	ldr	r3, [r3, #0]
	}
    8ee2:	0018      	movs	r0, r3
    8ee4:	46bd      	mov	sp, r7
    8ee6:	bd80      	pop	{r7, pc}
    8ee8:	20003b44 	.word	0x20003b44

00008eec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    8eec:	b580      	push	{r7, lr}
    8eee:	b084      	sub	sp, #16
    8ef0:	af00      	add	r7, sp, #0
    8ef2:	6078      	str	r0, [r7, #4]
    8ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    8ef6:	4b21      	ldr	r3, [pc, #132]	; (8f7c <prvAddCurrentTaskToDelayedList+0x90>)
    8ef8:	681b      	ldr	r3, [r3, #0]
    8efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8efc:	4b20      	ldr	r3, [pc, #128]	; (8f80 <prvAddCurrentTaskToDelayedList+0x94>)
    8efe:	681b      	ldr	r3, [r3, #0]
    8f00:	3304      	adds	r3, #4
    8f02:	0018      	movs	r0, r3
    8f04:	4b1f      	ldr	r3, [pc, #124]	; (8f84 <prvAddCurrentTaskToDelayedList+0x98>)
    8f06:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    8f08:	687b      	ldr	r3, [r7, #4]
    8f0a:	3301      	adds	r3, #1
    8f0c:	d10b      	bne.n	8f26 <prvAddCurrentTaskToDelayedList+0x3a>
    8f0e:	683b      	ldr	r3, [r7, #0]
    8f10:	2b00      	cmp	r3, #0
    8f12:	d008      	beq.n	8f26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    8f14:	4b1a      	ldr	r3, [pc, #104]	; (8f80 <prvAddCurrentTaskToDelayedList+0x94>)
    8f16:	681b      	ldr	r3, [r3, #0]
    8f18:	1d1a      	adds	r2, r3, #4
    8f1a:	4b1b      	ldr	r3, [pc, #108]	; (8f88 <prvAddCurrentTaskToDelayedList+0x9c>)
    8f1c:	0011      	movs	r1, r2
    8f1e:	0018      	movs	r0, r3
    8f20:	4b1a      	ldr	r3, [pc, #104]	; (8f8c <prvAddCurrentTaskToDelayedList+0xa0>)
    8f22:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    8f24:	e026      	b.n	8f74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    8f26:	68fa      	ldr	r2, [r7, #12]
    8f28:	687b      	ldr	r3, [r7, #4]
    8f2a:	18d3      	adds	r3, r2, r3
    8f2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    8f2e:	4b14      	ldr	r3, [pc, #80]	; (8f80 <prvAddCurrentTaskToDelayedList+0x94>)
    8f30:	681b      	ldr	r3, [r3, #0]
    8f32:	68ba      	ldr	r2, [r7, #8]
    8f34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    8f36:	68ba      	ldr	r2, [r7, #8]
    8f38:	68fb      	ldr	r3, [r7, #12]
    8f3a:	429a      	cmp	r2, r3
    8f3c:	d209      	bcs.n	8f52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    8f3e:	4b14      	ldr	r3, [pc, #80]	; (8f90 <prvAddCurrentTaskToDelayedList+0xa4>)
    8f40:	681a      	ldr	r2, [r3, #0]
    8f42:	4b0f      	ldr	r3, [pc, #60]	; (8f80 <prvAddCurrentTaskToDelayedList+0x94>)
    8f44:	681b      	ldr	r3, [r3, #0]
    8f46:	3304      	adds	r3, #4
    8f48:	0019      	movs	r1, r3
    8f4a:	0010      	movs	r0, r2
    8f4c:	4b11      	ldr	r3, [pc, #68]	; (8f94 <prvAddCurrentTaskToDelayedList+0xa8>)
    8f4e:	4798      	blx	r3
}
    8f50:	e010      	b.n	8f74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    8f52:	4b11      	ldr	r3, [pc, #68]	; (8f98 <prvAddCurrentTaskToDelayedList+0xac>)
    8f54:	681a      	ldr	r2, [r3, #0]
    8f56:	4b0a      	ldr	r3, [pc, #40]	; (8f80 <prvAddCurrentTaskToDelayedList+0x94>)
    8f58:	681b      	ldr	r3, [r3, #0]
    8f5a:	3304      	adds	r3, #4
    8f5c:	0019      	movs	r1, r3
    8f5e:	0010      	movs	r0, r2
    8f60:	4b0c      	ldr	r3, [pc, #48]	; (8f94 <prvAddCurrentTaskToDelayedList+0xa8>)
    8f62:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    8f64:	4b0d      	ldr	r3, [pc, #52]	; (8f9c <prvAddCurrentTaskToDelayedList+0xb0>)
    8f66:	681b      	ldr	r3, [r3, #0]
    8f68:	68ba      	ldr	r2, [r7, #8]
    8f6a:	429a      	cmp	r2, r3
    8f6c:	d202      	bcs.n	8f74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    8f6e:	4b0b      	ldr	r3, [pc, #44]	; (8f9c <prvAddCurrentTaskToDelayedList+0xb0>)
    8f70:	68ba      	ldr	r2, [r7, #8]
    8f72:	601a      	str	r2, [r3, #0]
}
    8f74:	46c0      	nop			; (mov r8, r8)
    8f76:	46bd      	mov	sp, r7
    8f78:	b004      	add	sp, #16
    8f7a:	bd80      	pop	{r7, pc}
    8f7c:	20003c20 	.word	0x20003c20
    8f80:	20003b44 	.word	0x20003b44
    8f84:	00005b4f 	.word	0x00005b4f
    8f88:	20003c08 	.word	0x20003c08
    8f8c:	00005a9f 	.word	0x00005a9f
    8f90:	20003bd8 	.word	0x20003bd8
    8f94:	00005ae3 	.word	0x00005ae3
    8f98:	20003bd4 	.word	0x20003bd4
    8f9c:	20003c3c 	.word	0x20003c3c

00008fa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    8fa0:	b590      	push	{r4, r7, lr}
    8fa2:	b085      	sub	sp, #20
    8fa4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    8fa6:	2300      	movs	r3, #0
    8fa8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    8faa:	4b0e      	ldr	r3, [pc, #56]	; (8fe4 <xTimerCreateTimerTask+0x44>)
    8fac:	4798      	blx	r3

	if( xTimerQueue != NULL )
    8fae:	4b0e      	ldr	r3, [pc, #56]	; (8fe8 <xTimerCreateTimerTask+0x48>)
    8fb0:	681b      	ldr	r3, [r3, #0]
    8fb2:	2b00      	cmp	r3, #0
    8fb4:	d00b      	beq.n	8fce <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    8fb6:	490d      	ldr	r1, [pc, #52]	; (8fec <xTimerCreateTimerTask+0x4c>)
    8fb8:	480d      	ldr	r0, [pc, #52]	; (8ff0 <xTimerCreateTimerTask+0x50>)
    8fba:	4b0e      	ldr	r3, [pc, #56]	; (8ff4 <xTimerCreateTimerTask+0x54>)
    8fbc:	9301      	str	r3, [sp, #4]
    8fbe:	2302      	movs	r3, #2
    8fc0:	9300      	str	r3, [sp, #0]
    8fc2:	2300      	movs	r3, #0
    8fc4:	2280      	movs	r2, #128	; 0x80
    8fc6:	4c0c      	ldr	r4, [pc, #48]	; (8ff8 <xTimerCreateTimerTask+0x58>)
    8fc8:	47a0      	blx	r4
    8fca:	0003      	movs	r3, r0
    8fcc:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    8fce:	687b      	ldr	r3, [r7, #4]
    8fd0:	2b00      	cmp	r3, #0
    8fd2:	d101      	bne.n	8fd8 <xTimerCreateTimerTask+0x38>
    8fd4:	b672      	cpsid	i
    8fd6:	e7fe      	b.n	8fd6 <xTimerCreateTimerTask+0x36>
	return xReturn;
    8fd8:	687b      	ldr	r3, [r7, #4]
}
    8fda:	0018      	movs	r0, r3
    8fdc:	46bd      	mov	sp, r7
    8fde:	b003      	add	sp, #12
    8fe0:	bd90      	pop	{r4, r7, pc}
    8fe2:	46c0      	nop			; (mov r8, r8)
    8fe4:	000094e9 	.word	0x000094e9
    8fe8:	20003c78 	.word	0x20003c78
    8fec:	00023624 	.word	0x00023624
    8ff0:	00009121 	.word	0x00009121
    8ff4:	20003c7c 	.word	0x20003c7c
    8ff8:	00007939 	.word	0x00007939

00008ffc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    8ffc:	b590      	push	{r4, r7, lr}
    8ffe:	b089      	sub	sp, #36	; 0x24
    9000:	af00      	add	r7, sp, #0
    9002:	60f8      	str	r0, [r7, #12]
    9004:	60b9      	str	r1, [r7, #8]
    9006:	607a      	str	r2, [r7, #4]
    9008:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    900a:	2300      	movs	r3, #0
    900c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    900e:	68fb      	ldr	r3, [r7, #12]
    9010:	2b00      	cmp	r3, #0
    9012:	d101      	bne.n	9018 <xTimerGenericCommand+0x1c>
    9014:	b672      	cpsid	i
    9016:	e7fe      	b.n	9016 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    9018:	4b1e      	ldr	r3, [pc, #120]	; (9094 <xTimerGenericCommand+0x98>)
    901a:	681b      	ldr	r3, [r3, #0]
    901c:	2b00      	cmp	r3, #0
    901e:	d033      	beq.n	9088 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    9020:	2310      	movs	r3, #16
    9022:	18fb      	adds	r3, r7, r3
    9024:	68ba      	ldr	r2, [r7, #8]
    9026:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    9028:	2310      	movs	r3, #16
    902a:	18fb      	adds	r3, r7, r3
    902c:	687a      	ldr	r2, [r7, #4]
    902e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    9030:	2310      	movs	r3, #16
    9032:	18fb      	adds	r3, r7, r3
    9034:	68fa      	ldr	r2, [r7, #12]
    9036:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    9038:	68bb      	ldr	r3, [r7, #8]
    903a:	2b05      	cmp	r3, #5
    903c:	dc1a      	bgt.n	9074 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    903e:	4b16      	ldr	r3, [pc, #88]	; (9098 <xTimerGenericCommand+0x9c>)
    9040:	4798      	blx	r3
    9042:	0003      	movs	r3, r0
    9044:	2b02      	cmp	r3, #2
    9046:	d10a      	bne.n	905e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    9048:	4b12      	ldr	r3, [pc, #72]	; (9094 <xTimerGenericCommand+0x98>)
    904a:	6818      	ldr	r0, [r3, #0]
    904c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    904e:	2310      	movs	r3, #16
    9050:	18f9      	adds	r1, r7, r3
    9052:	2300      	movs	r3, #0
    9054:	4c11      	ldr	r4, [pc, #68]	; (909c <xTimerGenericCommand+0xa0>)
    9056:	47a0      	blx	r4
    9058:	0003      	movs	r3, r0
    905a:	61fb      	str	r3, [r7, #28]
    905c:	e014      	b.n	9088 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    905e:	4b0d      	ldr	r3, [pc, #52]	; (9094 <xTimerGenericCommand+0x98>)
    9060:	6818      	ldr	r0, [r3, #0]
    9062:	2310      	movs	r3, #16
    9064:	18f9      	adds	r1, r7, r3
    9066:	2300      	movs	r3, #0
    9068:	2200      	movs	r2, #0
    906a:	4c0c      	ldr	r4, [pc, #48]	; (909c <xTimerGenericCommand+0xa0>)
    906c:	47a0      	blx	r4
    906e:	0003      	movs	r3, r0
    9070:	61fb      	str	r3, [r7, #28]
    9072:	e009      	b.n	9088 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    9074:	4b07      	ldr	r3, [pc, #28]	; (9094 <xTimerGenericCommand+0x98>)
    9076:	6818      	ldr	r0, [r3, #0]
    9078:	683a      	ldr	r2, [r7, #0]
    907a:	2310      	movs	r3, #16
    907c:	18f9      	adds	r1, r7, r3
    907e:	2300      	movs	r3, #0
    9080:	4c07      	ldr	r4, [pc, #28]	; (90a0 <xTimerGenericCommand+0xa4>)
    9082:	47a0      	blx	r4
    9084:	0003      	movs	r3, r0
    9086:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    9088:	69fb      	ldr	r3, [r7, #28]
}
    908a:	0018      	movs	r0, r3
    908c:	46bd      	mov	sp, r7
    908e:	b009      	add	sp, #36	; 0x24
    9090:	bd90      	pop	{r4, r7, pc}
    9092:	46c0      	nop			; (mov r8, r8)
    9094:	20003c78 	.word	0x20003c78
    9098:	000089fd 	.word	0x000089fd
    909c:	00006271 	.word	0x00006271
    90a0:	000066d1 	.word	0x000066d1

000090a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    90a4:	b590      	push	{r4, r7, lr}
    90a6:	b087      	sub	sp, #28
    90a8:	af02      	add	r7, sp, #8
    90aa:	6078      	str	r0, [r7, #4]
    90ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    90ae:	4b18      	ldr	r3, [pc, #96]	; (9110 <prvProcessExpiredTimer+0x6c>)
    90b0:	681b      	ldr	r3, [r3, #0]
    90b2:	68db      	ldr	r3, [r3, #12]
    90b4:	68db      	ldr	r3, [r3, #12]
    90b6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    90b8:	68fb      	ldr	r3, [r7, #12]
    90ba:	3304      	adds	r3, #4
    90bc:	0018      	movs	r0, r3
    90be:	4b15      	ldr	r3, [pc, #84]	; (9114 <prvProcessExpiredTimer+0x70>)
    90c0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    90c2:	68fb      	ldr	r3, [r7, #12]
    90c4:	69db      	ldr	r3, [r3, #28]
    90c6:	2b01      	cmp	r3, #1
    90c8:	d119      	bne.n	90fe <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    90ca:	68fb      	ldr	r3, [r7, #12]
    90cc:	699a      	ldr	r2, [r3, #24]
    90ce:	687b      	ldr	r3, [r7, #4]
    90d0:	18d1      	adds	r1, r2, r3
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	683a      	ldr	r2, [r7, #0]
    90d6:	68f8      	ldr	r0, [r7, #12]
    90d8:	4c0f      	ldr	r4, [pc, #60]	; (9118 <prvProcessExpiredTimer+0x74>)
    90da:	47a0      	blx	r4
    90dc:	1e03      	subs	r3, r0, #0
    90de:	d00e      	beq.n	90fe <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    90e0:	687a      	ldr	r2, [r7, #4]
    90e2:	68f8      	ldr	r0, [r7, #12]
    90e4:	2300      	movs	r3, #0
    90e6:	9300      	str	r3, [sp, #0]
    90e8:	2300      	movs	r3, #0
    90ea:	2100      	movs	r1, #0
    90ec:	4c0b      	ldr	r4, [pc, #44]	; (911c <prvProcessExpiredTimer+0x78>)
    90ee:	47a0      	blx	r4
    90f0:	0003      	movs	r3, r0
    90f2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    90f4:	68bb      	ldr	r3, [r7, #8]
    90f6:	2b00      	cmp	r3, #0
    90f8:	d101      	bne.n	90fe <prvProcessExpiredTimer+0x5a>
    90fa:	b672      	cpsid	i
    90fc:	e7fe      	b.n	90fc <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    90fe:	68fb      	ldr	r3, [r7, #12]
    9100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9102:	68fa      	ldr	r2, [r7, #12]
    9104:	0010      	movs	r0, r2
    9106:	4798      	blx	r3
}
    9108:	46c0      	nop			; (mov r8, r8)
    910a:	46bd      	mov	sp, r7
    910c:	b005      	add	sp, #20
    910e:	bd90      	pop	{r4, r7, pc}
    9110:	20003c70 	.word	0x20003c70
    9114:	00005b4f 	.word	0x00005b4f
    9118:	00009289 	.word	0x00009289
    911c:	00008ffd 	.word	0x00008ffd

00009120 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    9120:	b580      	push	{r7, lr}
    9122:	b084      	sub	sp, #16
    9124:	af00      	add	r7, sp, #0
    9126:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
    9128:	4b08      	ldr	r3, [pc, #32]	; (914c <prvTimerTask+0x2c>)
    912a:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    912c:	2308      	movs	r3, #8
    912e:	18fb      	adds	r3, r7, r3
    9130:	0018      	movs	r0, r3
    9132:	4b07      	ldr	r3, [pc, #28]	; (9150 <prvTimerTask+0x30>)
    9134:	4798      	blx	r3
    9136:	0003      	movs	r3, r0
    9138:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    913a:	68ba      	ldr	r2, [r7, #8]
    913c:	68fb      	ldr	r3, [r7, #12]
    913e:	0011      	movs	r1, r2
    9140:	0018      	movs	r0, r3
    9142:	4b04      	ldr	r3, [pc, #16]	; (9154 <prvTimerTask+0x34>)
    9144:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    9146:	4b04      	ldr	r3, [pc, #16]	; (9158 <prvTimerTask+0x38>)
    9148:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    914a:	e7ef      	b.n	912c <prvTimerTask+0xc>
    914c:	0001e2f1 	.word	0x0001e2f1
    9150:	00009201 	.word	0x00009201
    9154:	0000915d 	.word	0x0000915d
    9158:	00009311 	.word	0x00009311

0000915c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    915c:	b580      	push	{r7, lr}
    915e:	b084      	sub	sp, #16
    9160:	af00      	add	r7, sp, #0
    9162:	6078      	str	r0, [r7, #4]
    9164:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    9166:	4b1e      	ldr	r3, [pc, #120]	; (91e0 <prvProcessTimerOrBlockTask+0x84>)
    9168:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    916a:	2308      	movs	r3, #8
    916c:	18fb      	adds	r3, r7, r3
    916e:	0018      	movs	r0, r3
    9170:	4b1c      	ldr	r3, [pc, #112]	; (91e4 <prvProcessTimerOrBlockTask+0x88>)
    9172:	4798      	blx	r3
    9174:	0003      	movs	r3, r0
    9176:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    9178:	68bb      	ldr	r3, [r7, #8]
    917a:	2b00      	cmp	r3, #0
    917c:	d129      	bne.n	91d2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    917e:	683b      	ldr	r3, [r7, #0]
    9180:	2b00      	cmp	r3, #0
    9182:	d10c      	bne.n	919e <prvProcessTimerOrBlockTask+0x42>
    9184:	687a      	ldr	r2, [r7, #4]
    9186:	68fb      	ldr	r3, [r7, #12]
    9188:	429a      	cmp	r2, r3
    918a:	d808      	bhi.n	919e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    918c:	4b16      	ldr	r3, [pc, #88]	; (91e8 <prvProcessTimerOrBlockTask+0x8c>)
    918e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    9190:	68fa      	ldr	r2, [r7, #12]
    9192:	687b      	ldr	r3, [r7, #4]
    9194:	0011      	movs	r1, r2
    9196:	0018      	movs	r0, r3
    9198:	4b14      	ldr	r3, [pc, #80]	; (91ec <prvProcessTimerOrBlockTask+0x90>)
    919a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    919c:	e01b      	b.n	91d6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    919e:	683b      	ldr	r3, [r7, #0]
    91a0:	2b00      	cmp	r3, #0
    91a2:	d006      	beq.n	91b2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    91a4:	4b12      	ldr	r3, [pc, #72]	; (91f0 <prvProcessTimerOrBlockTask+0x94>)
    91a6:	681b      	ldr	r3, [r3, #0]
    91a8:	681b      	ldr	r3, [r3, #0]
    91aa:	425a      	negs	r2, r3
    91ac:	4153      	adcs	r3, r2
    91ae:	b2db      	uxtb	r3, r3
    91b0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    91b2:	4b10      	ldr	r3, [pc, #64]	; (91f4 <prvProcessTimerOrBlockTask+0x98>)
    91b4:	6818      	ldr	r0, [r3, #0]
    91b6:	687a      	ldr	r2, [r7, #4]
    91b8:	68fb      	ldr	r3, [r7, #12]
    91ba:	1ad3      	subs	r3, r2, r3
    91bc:	683a      	ldr	r2, [r7, #0]
    91be:	0019      	movs	r1, r3
    91c0:	4b0d      	ldr	r3, [pc, #52]	; (91f8 <prvProcessTimerOrBlockTask+0x9c>)
    91c2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    91c4:	4b08      	ldr	r3, [pc, #32]	; (91e8 <prvProcessTimerOrBlockTask+0x8c>)
    91c6:	4798      	blx	r3
    91c8:	1e03      	subs	r3, r0, #0
    91ca:	d104      	bne.n	91d6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    91cc:	4b0b      	ldr	r3, [pc, #44]	; (91fc <prvProcessTimerOrBlockTask+0xa0>)
    91ce:	4798      	blx	r3
}
    91d0:	e001      	b.n	91d6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    91d2:	4b05      	ldr	r3, [pc, #20]	; (91e8 <prvProcessTimerOrBlockTask+0x8c>)
    91d4:	4798      	blx	r3
}
    91d6:	46c0      	nop			; (mov r8, r8)
    91d8:	46bd      	mov	sp, r7
    91da:	b004      	add	sp, #16
    91dc:	bd80      	pop	{r7, pc}
    91de:	46c0      	nop			; (mov r8, r8)
    91e0:	00007f95 	.word	0x00007f95
    91e4:	00009241 	.word	0x00009241
    91e8:	00007fad 	.word	0x00007fad
    91ec:	000090a5 	.word	0x000090a5
    91f0:	20003c74 	.word	0x20003c74
    91f4:	20003c78 	.word	0x20003c78
    91f8:	00007735 	.word	0x00007735
    91fc:	00005cc1 	.word	0x00005cc1

00009200 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    9200:	b580      	push	{r7, lr}
    9202:	b084      	sub	sp, #16
    9204:	af00      	add	r7, sp, #0
    9206:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    9208:	4b0c      	ldr	r3, [pc, #48]	; (923c <prvGetNextExpireTime+0x3c>)
    920a:	681b      	ldr	r3, [r3, #0]
    920c:	681b      	ldr	r3, [r3, #0]
    920e:	425a      	negs	r2, r3
    9210:	4153      	adcs	r3, r2
    9212:	b2db      	uxtb	r3, r3
    9214:	001a      	movs	r2, r3
    9216:	687b      	ldr	r3, [r7, #4]
    9218:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    921a:	687b      	ldr	r3, [r7, #4]
    921c:	681b      	ldr	r3, [r3, #0]
    921e:	2b00      	cmp	r3, #0
    9220:	d105      	bne.n	922e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9222:	4b06      	ldr	r3, [pc, #24]	; (923c <prvGetNextExpireTime+0x3c>)
    9224:	681b      	ldr	r3, [r3, #0]
    9226:	68db      	ldr	r3, [r3, #12]
    9228:	681b      	ldr	r3, [r3, #0]
    922a:	60fb      	str	r3, [r7, #12]
    922c:	e001      	b.n	9232 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    922e:	2300      	movs	r3, #0
    9230:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    9232:	68fb      	ldr	r3, [r7, #12]
}
    9234:	0018      	movs	r0, r3
    9236:	46bd      	mov	sp, r7
    9238:	b004      	add	sp, #16
    923a:	bd80      	pop	{r7, pc}
    923c:	20003c70 	.word	0x20003c70

00009240 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    9240:	b580      	push	{r7, lr}
    9242:	b084      	sub	sp, #16
    9244:	af00      	add	r7, sp, #0
    9246:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    9248:	4b0c      	ldr	r3, [pc, #48]	; (927c <prvSampleTimeNow+0x3c>)
    924a:	4798      	blx	r3
    924c:	0003      	movs	r3, r0
    924e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    9250:	4b0b      	ldr	r3, [pc, #44]	; (9280 <prvSampleTimeNow+0x40>)
    9252:	681b      	ldr	r3, [r3, #0]
    9254:	68fa      	ldr	r2, [r7, #12]
    9256:	429a      	cmp	r2, r3
    9258:	d205      	bcs.n	9266 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    925a:	4b0a      	ldr	r3, [pc, #40]	; (9284 <prvSampleTimeNow+0x44>)
    925c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    925e:	687b      	ldr	r3, [r7, #4]
    9260:	2201      	movs	r2, #1
    9262:	601a      	str	r2, [r3, #0]
    9264:	e002      	b.n	926c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    9266:	687b      	ldr	r3, [r7, #4]
    9268:	2200      	movs	r2, #0
    926a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    926c:	4b04      	ldr	r3, [pc, #16]	; (9280 <prvSampleTimeNow+0x40>)
    926e:	68fa      	ldr	r2, [r7, #12]
    9270:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    9272:	68fb      	ldr	r3, [r7, #12]
}
    9274:	0018      	movs	r0, r3
    9276:	46bd      	mov	sp, r7
    9278:	b004      	add	sp, #16
    927a:	bd80      	pop	{r7, pc}
    927c:	0000811d 	.word	0x0000811d
    9280:	20003c80 	.word	0x20003c80
    9284:	00009429 	.word	0x00009429

00009288 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    9288:	b580      	push	{r7, lr}
    928a:	b086      	sub	sp, #24
    928c:	af00      	add	r7, sp, #0
    928e:	60f8      	str	r0, [r7, #12]
    9290:	60b9      	str	r1, [r7, #8]
    9292:	607a      	str	r2, [r7, #4]
    9294:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    9296:	2300      	movs	r3, #0
    9298:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    929a:	68fb      	ldr	r3, [r7, #12]
    929c:	68ba      	ldr	r2, [r7, #8]
    929e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    92a0:	68fb      	ldr	r3, [r7, #12]
    92a2:	68fa      	ldr	r2, [r7, #12]
    92a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    92a6:	68ba      	ldr	r2, [r7, #8]
    92a8:	687b      	ldr	r3, [r7, #4]
    92aa:	429a      	cmp	r2, r3
    92ac:	d812      	bhi.n	92d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    92ae:	687a      	ldr	r2, [r7, #4]
    92b0:	683b      	ldr	r3, [r7, #0]
    92b2:	1ad2      	subs	r2, r2, r3
    92b4:	68fb      	ldr	r3, [r7, #12]
    92b6:	699b      	ldr	r3, [r3, #24]
    92b8:	429a      	cmp	r2, r3
    92ba:	d302      	bcc.n	92c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    92bc:	2301      	movs	r3, #1
    92be:	617b      	str	r3, [r7, #20]
    92c0:	e01b      	b.n	92fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    92c2:	4b10      	ldr	r3, [pc, #64]	; (9304 <prvInsertTimerInActiveList+0x7c>)
    92c4:	681a      	ldr	r2, [r3, #0]
    92c6:	68fb      	ldr	r3, [r7, #12]
    92c8:	3304      	adds	r3, #4
    92ca:	0019      	movs	r1, r3
    92cc:	0010      	movs	r0, r2
    92ce:	4b0e      	ldr	r3, [pc, #56]	; (9308 <prvInsertTimerInActiveList+0x80>)
    92d0:	4798      	blx	r3
    92d2:	e012      	b.n	92fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    92d4:	687a      	ldr	r2, [r7, #4]
    92d6:	683b      	ldr	r3, [r7, #0]
    92d8:	429a      	cmp	r2, r3
    92da:	d206      	bcs.n	92ea <prvInsertTimerInActiveList+0x62>
    92dc:	68ba      	ldr	r2, [r7, #8]
    92de:	683b      	ldr	r3, [r7, #0]
    92e0:	429a      	cmp	r2, r3
    92e2:	d302      	bcc.n	92ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    92e4:	2301      	movs	r3, #1
    92e6:	617b      	str	r3, [r7, #20]
    92e8:	e007      	b.n	92fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    92ea:	4b08      	ldr	r3, [pc, #32]	; (930c <prvInsertTimerInActiveList+0x84>)
    92ec:	681a      	ldr	r2, [r3, #0]
    92ee:	68fb      	ldr	r3, [r7, #12]
    92f0:	3304      	adds	r3, #4
    92f2:	0019      	movs	r1, r3
    92f4:	0010      	movs	r0, r2
    92f6:	4b04      	ldr	r3, [pc, #16]	; (9308 <prvInsertTimerInActiveList+0x80>)
    92f8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    92fa:	697b      	ldr	r3, [r7, #20]
}
    92fc:	0018      	movs	r0, r3
    92fe:	46bd      	mov	sp, r7
    9300:	b006      	add	sp, #24
    9302:	bd80      	pop	{r7, pc}
    9304:	20003c74 	.word	0x20003c74
    9308:	00005ae3 	.word	0x00005ae3
    930c:	20003c70 	.word	0x20003c70

00009310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    9310:	b590      	push	{r4, r7, lr}
    9312:	b08b      	sub	sp, #44	; 0x2c
    9314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    9316:	e068      	b.n	93ea <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    9318:	2308      	movs	r3, #8
    931a:	18fb      	adds	r3, r7, r3
    931c:	681b      	ldr	r3, [r3, #0]
    931e:	2b00      	cmp	r3, #0
    9320:	db63      	blt.n	93ea <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    9322:	2308      	movs	r3, #8
    9324:	18fb      	adds	r3, r7, r3
    9326:	689b      	ldr	r3, [r3, #8]
    9328:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    932a:	69fb      	ldr	r3, [r7, #28]
    932c:	695b      	ldr	r3, [r3, #20]
    932e:	2b00      	cmp	r3, #0
    9330:	d004      	beq.n	933c <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9332:	69fb      	ldr	r3, [r7, #28]
    9334:	3304      	adds	r3, #4
    9336:	0018      	movs	r0, r3
    9338:	4b33      	ldr	r3, [pc, #204]	; (9408 <prvProcessReceivedCommands+0xf8>)
    933a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    933c:	1d3b      	adds	r3, r7, #4
    933e:	0018      	movs	r0, r3
    9340:	4b32      	ldr	r3, [pc, #200]	; (940c <prvProcessReceivedCommands+0xfc>)
    9342:	4798      	blx	r3
    9344:	0003      	movs	r3, r0
    9346:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    9348:	2308      	movs	r3, #8
    934a:	18fb      	adds	r3, r7, r3
    934c:	681b      	ldr	r3, [r3, #0]
    934e:	2b09      	cmp	r3, #9
    9350:	d84a      	bhi.n	93e8 <prvProcessReceivedCommands+0xd8>
    9352:	009a      	lsls	r2, r3, #2
    9354:	4b2e      	ldr	r3, [pc, #184]	; (9410 <prvProcessReceivedCommands+0x100>)
    9356:	18d3      	adds	r3, r2, r3
    9358:	681b      	ldr	r3, [r3, #0]
    935a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    935c:	2308      	movs	r3, #8
    935e:	18fb      	adds	r3, r7, r3
    9360:	685a      	ldr	r2, [r3, #4]
    9362:	69fb      	ldr	r3, [r7, #28]
    9364:	699b      	ldr	r3, [r3, #24]
    9366:	18d1      	adds	r1, r2, r3
    9368:	2308      	movs	r3, #8
    936a:	18fb      	adds	r3, r7, r3
    936c:	685b      	ldr	r3, [r3, #4]
    936e:	69ba      	ldr	r2, [r7, #24]
    9370:	69f8      	ldr	r0, [r7, #28]
    9372:	4c28      	ldr	r4, [pc, #160]	; (9414 <prvProcessReceivedCommands+0x104>)
    9374:	47a0      	blx	r4
    9376:	1e03      	subs	r3, r0, #0
    9378:	d037      	beq.n	93ea <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    937a:	69fb      	ldr	r3, [r7, #28]
    937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    937e:	69fa      	ldr	r2, [r7, #28]
    9380:	0010      	movs	r0, r2
    9382:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9384:	69fb      	ldr	r3, [r7, #28]
    9386:	69db      	ldr	r3, [r3, #28]
    9388:	2b01      	cmp	r3, #1
    938a:	d12e      	bne.n	93ea <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    938c:	2308      	movs	r3, #8
    938e:	18fb      	adds	r3, r7, r3
    9390:	685a      	ldr	r2, [r3, #4]
    9392:	69fb      	ldr	r3, [r7, #28]
    9394:	699b      	ldr	r3, [r3, #24]
    9396:	18d2      	adds	r2, r2, r3
    9398:	69f8      	ldr	r0, [r7, #28]
    939a:	2300      	movs	r3, #0
    939c:	9300      	str	r3, [sp, #0]
    939e:	2300      	movs	r3, #0
    93a0:	2100      	movs	r1, #0
    93a2:	4c1d      	ldr	r4, [pc, #116]	; (9418 <prvProcessReceivedCommands+0x108>)
    93a4:	47a0      	blx	r4
    93a6:	0003      	movs	r3, r0
    93a8:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    93aa:	697b      	ldr	r3, [r7, #20]
    93ac:	2b00      	cmp	r3, #0
    93ae:	d11c      	bne.n	93ea <prvProcessReceivedCommands+0xda>
    93b0:	b672      	cpsid	i
    93b2:	e7fe      	b.n	93b2 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    93b4:	2308      	movs	r3, #8
    93b6:	18fb      	adds	r3, r7, r3
    93b8:	685a      	ldr	r2, [r3, #4]
    93ba:	69fb      	ldr	r3, [r7, #28]
    93bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    93be:	69fb      	ldr	r3, [r7, #28]
    93c0:	699b      	ldr	r3, [r3, #24]
    93c2:	2b00      	cmp	r3, #0
    93c4:	d101      	bne.n	93ca <prvProcessReceivedCommands+0xba>
    93c6:	b672      	cpsid	i
    93c8:	e7fe      	b.n	93c8 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    93ca:	69fb      	ldr	r3, [r7, #28]
    93cc:	699a      	ldr	r2, [r3, #24]
    93ce:	69bb      	ldr	r3, [r7, #24]
    93d0:	18d1      	adds	r1, r2, r3
    93d2:	69bb      	ldr	r3, [r7, #24]
    93d4:	69ba      	ldr	r2, [r7, #24]
    93d6:	69f8      	ldr	r0, [r7, #28]
    93d8:	4c0e      	ldr	r4, [pc, #56]	; (9414 <prvProcessReceivedCommands+0x104>)
    93da:	47a0      	blx	r4
					break;
    93dc:	e005      	b.n	93ea <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    93de:	69fb      	ldr	r3, [r7, #28]
    93e0:	0018      	movs	r0, r3
    93e2:	4b0e      	ldr	r3, [pc, #56]	; (941c <prvProcessReceivedCommands+0x10c>)
    93e4:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    93e6:	e000      	b.n	93ea <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    93e8:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    93ea:	4b0d      	ldr	r3, [pc, #52]	; (9420 <prvProcessReceivedCommands+0x110>)
    93ec:	681b      	ldr	r3, [r3, #0]
    93ee:	2208      	movs	r2, #8
    93f0:	18b9      	adds	r1, r7, r2
    93f2:	2200      	movs	r2, #0
    93f4:	0018      	movs	r0, r3
    93f6:	4b0b      	ldr	r3, [pc, #44]	; (9424 <prvProcessReceivedCommands+0x114>)
    93f8:	4798      	blx	r3
    93fa:	1e03      	subs	r3, r0, #0
    93fc:	d18c      	bne.n	9318 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    93fe:	46c0      	nop			; (mov r8, r8)
    9400:	46bd      	mov	sp, r7
    9402:	b009      	add	sp, #36	; 0x24
    9404:	bd90      	pop	{r4, r7, pc}
    9406:	46c0      	nop			; (mov r8, r8)
    9408:	00005b4f 	.word	0x00005b4f
    940c:	00009241 	.word	0x00009241
    9410:	0002362c 	.word	0x0002362c
    9414:	00009289 	.word	0x00009289
    9418:	00008ffd 	.word	0x00008ffd
    941c:	00005ed5 	.word	0x00005ed5
    9420:	20003c78 	.word	0x20003c78
    9424:	00006b29 	.word	0x00006b29

00009428 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    9428:	b590      	push	{r4, r7, lr}
    942a:	b089      	sub	sp, #36	; 0x24
    942c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    942e:	e03e      	b.n	94ae <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9430:	4b28      	ldr	r3, [pc, #160]	; (94d4 <prvSwitchTimerLists+0xac>)
    9432:	681b      	ldr	r3, [r3, #0]
    9434:	68db      	ldr	r3, [r3, #12]
    9436:	681b      	ldr	r3, [r3, #0]
    9438:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    943a:	4b26      	ldr	r3, [pc, #152]	; (94d4 <prvSwitchTimerLists+0xac>)
    943c:	681b      	ldr	r3, [r3, #0]
    943e:	68db      	ldr	r3, [r3, #12]
    9440:	68db      	ldr	r3, [r3, #12]
    9442:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9444:	693b      	ldr	r3, [r7, #16]
    9446:	3304      	adds	r3, #4
    9448:	0018      	movs	r0, r3
    944a:	4b23      	ldr	r3, [pc, #140]	; (94d8 <prvSwitchTimerLists+0xb0>)
    944c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    944e:	693b      	ldr	r3, [r7, #16]
    9450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9452:	693a      	ldr	r2, [r7, #16]
    9454:	0010      	movs	r0, r2
    9456:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9458:	693b      	ldr	r3, [r7, #16]
    945a:	69db      	ldr	r3, [r3, #28]
    945c:	2b01      	cmp	r3, #1
    945e:	d126      	bne.n	94ae <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    9460:	693b      	ldr	r3, [r7, #16]
    9462:	699a      	ldr	r2, [r3, #24]
    9464:	697b      	ldr	r3, [r7, #20]
    9466:	18d3      	adds	r3, r2, r3
    9468:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    946a:	68fa      	ldr	r2, [r7, #12]
    946c:	697b      	ldr	r3, [r7, #20]
    946e:	429a      	cmp	r2, r3
    9470:	d90e      	bls.n	9490 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    9472:	693b      	ldr	r3, [r7, #16]
    9474:	68fa      	ldr	r2, [r7, #12]
    9476:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    9478:	693b      	ldr	r3, [r7, #16]
    947a:	693a      	ldr	r2, [r7, #16]
    947c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    947e:	4b15      	ldr	r3, [pc, #84]	; (94d4 <prvSwitchTimerLists+0xac>)
    9480:	681a      	ldr	r2, [r3, #0]
    9482:	693b      	ldr	r3, [r7, #16]
    9484:	3304      	adds	r3, #4
    9486:	0019      	movs	r1, r3
    9488:	0010      	movs	r0, r2
    948a:	4b14      	ldr	r3, [pc, #80]	; (94dc <prvSwitchTimerLists+0xb4>)
    948c:	4798      	blx	r3
    948e:	e00e      	b.n	94ae <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    9490:	697a      	ldr	r2, [r7, #20]
    9492:	6938      	ldr	r0, [r7, #16]
    9494:	2300      	movs	r3, #0
    9496:	9300      	str	r3, [sp, #0]
    9498:	2300      	movs	r3, #0
    949a:	2100      	movs	r1, #0
    949c:	4c10      	ldr	r4, [pc, #64]	; (94e0 <prvSwitchTimerLists+0xb8>)
    949e:	47a0      	blx	r4
    94a0:	0003      	movs	r3, r0
    94a2:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    94a4:	68bb      	ldr	r3, [r7, #8]
    94a6:	2b00      	cmp	r3, #0
    94a8:	d101      	bne.n	94ae <prvSwitchTimerLists+0x86>
    94aa:	b672      	cpsid	i
    94ac:	e7fe      	b.n	94ac <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    94ae:	4b09      	ldr	r3, [pc, #36]	; (94d4 <prvSwitchTimerLists+0xac>)
    94b0:	681b      	ldr	r3, [r3, #0]
    94b2:	681b      	ldr	r3, [r3, #0]
    94b4:	2b00      	cmp	r3, #0
    94b6:	d1bb      	bne.n	9430 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    94b8:	4b06      	ldr	r3, [pc, #24]	; (94d4 <prvSwitchTimerLists+0xac>)
    94ba:	681b      	ldr	r3, [r3, #0]
    94bc:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    94be:	4b09      	ldr	r3, [pc, #36]	; (94e4 <prvSwitchTimerLists+0xbc>)
    94c0:	681a      	ldr	r2, [r3, #0]
    94c2:	4b04      	ldr	r3, [pc, #16]	; (94d4 <prvSwitchTimerLists+0xac>)
    94c4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    94c6:	4b07      	ldr	r3, [pc, #28]	; (94e4 <prvSwitchTimerLists+0xbc>)
    94c8:	687a      	ldr	r2, [r7, #4]
    94ca:	601a      	str	r2, [r3, #0]
}
    94cc:	46c0      	nop			; (mov r8, r8)
    94ce:	46bd      	mov	sp, r7
    94d0:	b007      	add	sp, #28
    94d2:	bd90      	pop	{r4, r7, pc}
    94d4:	20003c70 	.word	0x20003c70
    94d8:	00005b4f 	.word	0x00005b4f
    94dc:	00005ae3 	.word	0x00005ae3
    94e0:	00008ffd 	.word	0x00008ffd
    94e4:	20003c74 	.word	0x20003c74

000094e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    94e8:	b580      	push	{r7, lr}
    94ea:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    94ec:	4b10      	ldr	r3, [pc, #64]	; (9530 <prvCheckForValidListAndQueue+0x48>)
    94ee:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    94f0:	4b10      	ldr	r3, [pc, #64]	; (9534 <prvCheckForValidListAndQueue+0x4c>)
    94f2:	681b      	ldr	r3, [r3, #0]
    94f4:	2b00      	cmp	r3, #0
    94f6:	d115      	bne.n	9524 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    94f8:	4b0f      	ldr	r3, [pc, #60]	; (9538 <prvCheckForValidListAndQueue+0x50>)
    94fa:	0018      	movs	r0, r3
    94fc:	4b0f      	ldr	r3, [pc, #60]	; (953c <prvCheckForValidListAndQueue+0x54>)
    94fe:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    9500:	4b0f      	ldr	r3, [pc, #60]	; (9540 <prvCheckForValidListAndQueue+0x58>)
    9502:	0018      	movs	r0, r3
    9504:	4b0d      	ldr	r3, [pc, #52]	; (953c <prvCheckForValidListAndQueue+0x54>)
    9506:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    9508:	4b0e      	ldr	r3, [pc, #56]	; (9544 <prvCheckForValidListAndQueue+0x5c>)
    950a:	4a0b      	ldr	r2, [pc, #44]	; (9538 <prvCheckForValidListAndQueue+0x50>)
    950c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    950e:	4b0e      	ldr	r3, [pc, #56]	; (9548 <prvCheckForValidListAndQueue+0x60>)
    9510:	4a0b      	ldr	r2, [pc, #44]	; (9540 <prvCheckForValidListAndQueue+0x58>)
    9512:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    9514:	2200      	movs	r2, #0
    9516:	210c      	movs	r1, #12
    9518:	2005      	movs	r0, #5
    951a:	4b0c      	ldr	r3, [pc, #48]	; (954c <prvCheckForValidListAndQueue+0x64>)
    951c:	4798      	blx	r3
    951e:	0002      	movs	r2, r0
    9520:	4b04      	ldr	r3, [pc, #16]	; (9534 <prvCheckForValidListAndQueue+0x4c>)
    9522:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    9524:	4b0a      	ldr	r3, [pc, #40]	; (9550 <prvCheckForValidListAndQueue+0x68>)
    9526:	4798      	blx	r3
}
    9528:	46c0      	nop			; (mov r8, r8)
    952a:	46bd      	mov	sp, r7
    952c:	bd80      	pop	{r7, pc}
    952e:	46c0      	nop			; (mov r8, r8)
    9530:	00005cd9 	.word	0x00005cd9
    9534:	20003c78 	.word	0x20003c78
    9538:	20003c48 	.word	0x20003c48
    953c:	00005a4d 	.word	0x00005a4d
    9540:	20003c5c 	.word	0x20003c5c
    9544:	20003c70 	.word	0x20003c70
    9548:	20003c74 	.word	0x20003c74
    954c:	00005fc9 	.word	0x00005fc9
    9550:	00005cfd 	.word	0x00005cfd

00009554 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    9554:	b580      	push	{r7, lr}
    9556:	b082      	sub	sp, #8
    9558:	af00      	add	r7, sp, #0
    955a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
    955c:	687b      	ldr	r3, [r7, #4]
    955e:	7c1b      	ldrb	r3, [r3, #16]
    9560:	2b00      	cmp	r3, #0
    9562:	d00b      	beq.n	957c <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    9564:	687b      	ldr	r3, [r7, #4]
    9566:	689b      	ldr	r3, [r3, #8]
    9568:	1c5a      	adds	r2, r3, #1
    956a:	687b      	ldr	r3, [r7, #4]
    956c:	68d9      	ldr	r1, [r3, #12]
    956e:	4b10      	ldr	r3, [pc, #64]	; (95b0 <advance_pointer+0x5c>)
    9570:	0010      	movs	r0, r2
    9572:	4798      	blx	r3
    9574:	000b      	movs	r3, r1
    9576:	001a      	movs	r2, r3
    9578:	687b      	ldr	r3, [r7, #4]
    957a:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    957c:	687b      	ldr	r3, [r7, #4]
    957e:	685b      	ldr	r3, [r3, #4]
    9580:	1c5a      	adds	r2, r3, #1
    9582:	687b      	ldr	r3, [r7, #4]
    9584:	68d9      	ldr	r1, [r3, #12]
    9586:	4b0a      	ldr	r3, [pc, #40]	; (95b0 <advance_pointer+0x5c>)
    9588:	0010      	movs	r0, r2
    958a:	4798      	blx	r3
    958c:	000b      	movs	r3, r1
    958e:	001a      	movs	r2, r3
    9590:	687b      	ldr	r3, [r7, #4]
    9592:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    9594:	687b      	ldr	r3, [r7, #4]
    9596:	685a      	ldr	r2, [r3, #4]
    9598:	687b      	ldr	r3, [r7, #4]
    959a:	689b      	ldr	r3, [r3, #8]
    959c:	1ad3      	subs	r3, r2, r3
    959e:	425a      	negs	r2, r3
    95a0:	4153      	adcs	r3, r2
    95a2:	b2da      	uxtb	r2, r3
    95a4:	687b      	ldr	r3, [r7, #4]
    95a6:	741a      	strb	r2, [r3, #16]
 }
    95a8:	46c0      	nop			; (mov r8, r8)
    95aa:	46bd      	mov	sp, r7
    95ac:	b002      	add	sp, #8
    95ae:	bd80      	pop	{r7, pc}
    95b0:	0001e575 	.word	0x0001e575

000095b4 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
    95b4:	b580      	push	{r7, lr}
    95b6:	b082      	sub	sp, #8
    95b8:	af00      	add	r7, sp, #0
    95ba:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	2200      	movs	r2, #0
    95c0:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    95c2:	687b      	ldr	r3, [r7, #4]
    95c4:	689b      	ldr	r3, [r3, #8]
    95c6:	1c5a      	adds	r2, r3, #1
    95c8:	687b      	ldr	r3, [r7, #4]
    95ca:	68d9      	ldr	r1, [r3, #12]
    95cc:	4b05      	ldr	r3, [pc, #20]	; (95e4 <retreat_pointer+0x30>)
    95ce:	0010      	movs	r0, r2
    95d0:	4798      	blx	r3
    95d2:	000b      	movs	r3, r1
    95d4:	001a      	movs	r2, r3
    95d6:	687b      	ldr	r3, [r7, #4]
    95d8:	609a      	str	r2, [r3, #8]
 }
    95da:	46c0      	nop			; (mov r8, r8)
    95dc:	46bd      	mov	sp, r7
    95de:	b002      	add	sp, #8
    95e0:	bd80      	pop	{r7, pc}
    95e2:	46c0      	nop			; (mov r8, r8)
    95e4:	0001e575 	.word	0x0001e575

000095e8 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    95e8:	b580      	push	{r7, lr}
    95ea:	b084      	sub	sp, #16
    95ec:	af00      	add	r7, sp, #0
    95ee:	6078      	str	r0, [r7, #4]
    95f0:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    95f2:	2014      	movs	r0, #20
    95f4:	4b09      	ldr	r3, [pc, #36]	; (961c <circular_buf_init+0x34>)
    95f6:	4798      	blx	r3
    95f8:	0003      	movs	r3, r0
    95fa:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    95fc:	68fb      	ldr	r3, [r7, #12]
    95fe:	687a      	ldr	r2, [r7, #4]
    9600:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
    9602:	68fb      	ldr	r3, [r7, #12]
    9604:	683a      	ldr	r2, [r7, #0]
    9606:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
    9608:	68fb      	ldr	r3, [r7, #12]
    960a:	0018      	movs	r0, r3
    960c:	4b04      	ldr	r3, [pc, #16]	; (9620 <circular_buf_init+0x38>)
    960e:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
    9610:	68fb      	ldr	r3, [r7, #12]
 }
    9612:	0018      	movs	r0, r3
    9614:	46bd      	mov	sp, r7
    9616:	b004      	add	sp, #16
    9618:	bd80      	pop	{r7, pc}
    961a:	46c0      	nop			; (mov r8, r8)
    961c:	000200c5 	.word	0x000200c5
    9620:	00009625 	.word	0x00009625

00009624 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
    9624:	b580      	push	{r7, lr}
    9626:	b082      	sub	sp, #8
    9628:	af00      	add	r7, sp, #0
    962a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
    962c:	687b      	ldr	r3, [r7, #4]
    962e:	2200      	movs	r2, #0
    9630:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
    9632:	687b      	ldr	r3, [r7, #4]
    9634:	2200      	movs	r2, #0
    9636:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
    9638:	687b      	ldr	r3, [r7, #4]
    963a:	2200      	movs	r2, #0
    963c:	741a      	strb	r2, [r3, #16]
 }
    963e:	46c0      	nop			; (mov r8, r8)
    9640:	46bd      	mov	sp, r7
    9642:	b002      	add	sp, #8
    9644:	bd80      	pop	{r7, pc}
	...

00009648 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    9648:	b580      	push	{r7, lr}
    964a:	b082      	sub	sp, #8
    964c:	af00      	add	r7, sp, #0
    964e:	6078      	str	r0, [r7, #4]
    9650:	000a      	movs	r2, r1
    9652:	1cfb      	adds	r3, r7, #3
    9654:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    9656:	687b      	ldr	r3, [r7, #4]
    9658:	681a      	ldr	r2, [r3, #0]
    965a:	687b      	ldr	r3, [r7, #4]
    965c:	685b      	ldr	r3, [r3, #4]
    965e:	18d3      	adds	r3, r2, r3
    9660:	1cfa      	adds	r2, r7, #3
    9662:	7812      	ldrb	r2, [r2, #0]
    9664:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
    9666:	687b      	ldr	r3, [r7, #4]
    9668:	0018      	movs	r0, r3
    966a:	4b03      	ldr	r3, [pc, #12]	; (9678 <circular_buf_put+0x30>)
    966c:	4798      	blx	r3
 }
    966e:	46c0      	nop			; (mov r8, r8)
    9670:	46bd      	mov	sp, r7
    9672:	b002      	add	sp, #8
    9674:	bd80      	pop	{r7, pc}
    9676:	46c0      	nop			; (mov r8, r8)
    9678:	00009555 	.word	0x00009555

0000967c <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
    967c:	b580      	push	{r7, lr}
    967e:	b084      	sub	sp, #16
    9680:	af00      	add	r7, sp, #0
    9682:	6078      	str	r0, [r7, #4]
    9684:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
    9686:	2301      	movs	r3, #1
    9688:	425b      	negs	r3, r3
    968a:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
    968c:	687b      	ldr	r3, [r7, #4]
    968e:	0018      	movs	r0, r3
    9690:	4b0d      	ldr	r3, [pc, #52]	; (96c8 <circular_buf_get+0x4c>)
    9692:	4798      	blx	r3
    9694:	0003      	movs	r3, r0
    9696:	001a      	movs	r2, r3
    9698:	2301      	movs	r3, #1
    969a:	4053      	eors	r3, r2
    969c:	b2db      	uxtb	r3, r3
    969e:	2b00      	cmp	r3, #0
    96a0:	d00d      	beq.n	96be <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
    96a2:	687b      	ldr	r3, [r7, #4]
    96a4:	681a      	ldr	r2, [r3, #0]
    96a6:	687b      	ldr	r3, [r7, #4]
    96a8:	689b      	ldr	r3, [r3, #8]
    96aa:	18d3      	adds	r3, r2, r3
    96ac:	781a      	ldrb	r2, [r3, #0]
    96ae:	683b      	ldr	r3, [r7, #0]
    96b0:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
    96b2:	687b      	ldr	r3, [r7, #4]
    96b4:	0018      	movs	r0, r3
    96b6:	4b05      	ldr	r3, [pc, #20]	; (96cc <circular_buf_get+0x50>)
    96b8:	4798      	blx	r3

		 r = 0;
    96ba:	2300      	movs	r3, #0
    96bc:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
    96be:	68fb      	ldr	r3, [r7, #12]
 }
    96c0:	0018      	movs	r0, r3
    96c2:	46bd      	mov	sp, r7
    96c4:	b004      	add	sp, #16
    96c6:	bd80      	pop	{r7, pc}
    96c8:	000096d1 	.word	0x000096d1
    96cc:	000095b5 	.word	0x000095b5

000096d0 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
    96d0:	b580      	push	{r7, lr}
    96d2:	b082      	sub	sp, #8
    96d4:	af00      	add	r7, sp, #0
    96d6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    96d8:	687b      	ldr	r3, [r7, #4]
    96da:	7c1b      	ldrb	r3, [r3, #16]
    96dc:	2201      	movs	r2, #1
    96de:	4053      	eors	r3, r2
    96e0:	b2db      	uxtb	r3, r3
    96e2:	2b00      	cmp	r3, #0
    96e4:	d007      	beq.n	96f6 <circular_buf_empty+0x26>
    96e6:	687b      	ldr	r3, [r7, #4]
    96e8:	685a      	ldr	r2, [r3, #4]
    96ea:	687b      	ldr	r3, [r7, #4]
    96ec:	689b      	ldr	r3, [r3, #8]
    96ee:	429a      	cmp	r2, r3
    96f0:	d101      	bne.n	96f6 <circular_buf_empty+0x26>
    96f2:	2301      	movs	r3, #1
    96f4:	e000      	b.n	96f8 <circular_buf_empty+0x28>
    96f6:	2300      	movs	r3, #0
    96f8:	1c1a      	adds	r2, r3, #0
    96fa:	2301      	movs	r3, #1
    96fc:	4013      	ands	r3, r2
    96fe:	b2db      	uxtb	r3, r3
 }
    9700:	0018      	movs	r0, r3
    9702:	46bd      	mov	sp, r7
    9704:	b002      	add	sp, #8
    9706:	bd80      	pop	{r7, pc}

00009708 <system_interrupt_enable>:
{
    9708:	b580      	push	{r7, lr}
    970a:	b082      	sub	sp, #8
    970c:	af00      	add	r7, sp, #0
    970e:	0002      	movs	r2, r0
    9710:	1dfb      	adds	r3, r7, #7
    9712:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9714:	4b06      	ldr	r3, [pc, #24]	; (9730 <system_interrupt_enable+0x28>)
    9716:	1dfa      	adds	r2, r7, #7
    9718:	7812      	ldrb	r2, [r2, #0]
    971a:	0011      	movs	r1, r2
    971c:	221f      	movs	r2, #31
    971e:	400a      	ands	r2, r1
    9720:	2101      	movs	r1, #1
    9722:	4091      	lsls	r1, r2
    9724:	000a      	movs	r2, r1
    9726:	601a      	str	r2, [r3, #0]
}
    9728:	46c0      	nop			; (mov r8, r8)
    972a:	46bd      	mov	sp, r7
    972c:	b002      	add	sp, #8
    972e:	bd80      	pop	{r7, pc}
    9730:	e000e100 	.word	0xe000e100

00009734 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    9734:	b580      	push	{r7, lr}
    9736:	b084      	sub	sp, #16
    9738:	af00      	add	r7, sp, #0
    973a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	681b      	ldr	r3, [r3, #0]
    9740:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    9742:	68fb      	ldr	r3, [r7, #12]
    9744:	69db      	ldr	r3, [r3, #28]
    9746:	1e5a      	subs	r2, r3, #1
    9748:	4193      	sbcs	r3, r2
    974a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    974c:	0018      	movs	r0, r3
    974e:	46bd      	mov	sp, r7
    9750:	b004      	add	sp, #16
    9752:	bd80      	pop	{r7, pc}

00009754 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    9754:	b580      	push	{r7, lr}
    9756:	b082      	sub	sp, #8
    9758:	af00      	add	r7, sp, #0
    975a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    975c:	46c0      	nop			; (mov r8, r8)
    975e:	687b      	ldr	r3, [r7, #4]
    9760:	0018      	movs	r0, r3
    9762:	4b04      	ldr	r3, [pc, #16]	; (9774 <_usart_wait_for_sync+0x20>)
    9764:	4798      	blx	r3
    9766:	1e03      	subs	r3, r0, #0
    9768:	d1f9      	bne.n	975e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    976a:	46c0      	nop			; (mov r8, r8)
    976c:	46bd      	mov	sp, r7
    976e:	b002      	add	sp, #8
    9770:	bd80      	pop	{r7, pc}
    9772:	46c0      	nop			; (mov r8, r8)
    9774:	00009735 	.word	0x00009735

00009778 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    9778:	b580      	push	{r7, lr}
    977a:	b082      	sub	sp, #8
    977c:	af00      	add	r7, sp, #0
    977e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    9780:	687b      	ldr	r3, [r7, #4]
    9782:	2280      	movs	r2, #128	; 0x80
    9784:	05d2      	lsls	r2, r2, #23
    9786:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    9788:	687b      	ldr	r3, [r7, #4]
    978a:	2200      	movs	r2, #0
    978c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    978e:	687b      	ldr	r3, [r7, #4]
    9790:	22ff      	movs	r2, #255	; 0xff
    9792:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    9794:	687b      	ldr	r3, [r7, #4]
    9796:	2200      	movs	r2, #0
    9798:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    979a:	687b      	ldr	r3, [r7, #4]
    979c:	2200      	movs	r2, #0
    979e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    97a0:	687b      	ldr	r3, [r7, #4]
    97a2:	2296      	movs	r2, #150	; 0x96
    97a4:	0192      	lsls	r2, r2, #6
    97a6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    97a8:	687b      	ldr	r3, [r7, #4]
    97aa:	2224      	movs	r2, #36	; 0x24
    97ac:	2101      	movs	r1, #1
    97ae:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    97b0:	687b      	ldr	r3, [r7, #4]
    97b2:	2225      	movs	r2, #37	; 0x25
    97b4:	2101      	movs	r1, #1
    97b6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    97b8:	687b      	ldr	r3, [r7, #4]
    97ba:	2226      	movs	r2, #38	; 0x26
    97bc:	2100      	movs	r1, #0
    97be:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    97c0:	687b      	ldr	r3, [r7, #4]
    97c2:	2227      	movs	r2, #39	; 0x27
    97c4:	2100      	movs	r1, #0
    97c6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    97c8:	687b      	ldr	r3, [r7, #4]
    97ca:	2200      	movs	r2, #0
    97cc:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    97ce:	687b      	ldr	r3, [r7, #4]
    97d0:	2288      	movs	r2, #136	; 0x88
    97d2:	0352      	lsls	r2, r2, #13
    97d4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    97d6:	687b      	ldr	r3, [r7, #4]
    97d8:	222c      	movs	r2, #44	; 0x2c
    97da:	2100      	movs	r1, #0
    97dc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    97de:	687b      	ldr	r3, [r7, #4]
    97e0:	222d      	movs	r2, #45	; 0x2d
    97e2:	2100      	movs	r1, #0
    97e4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    97e6:	687b      	ldr	r3, [r7, #4]
    97e8:	2200      	movs	r2, #0
    97ea:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    97ec:	687b      	ldr	r3, [r7, #4]
    97ee:	2200      	movs	r2, #0
    97f0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    97f2:	687b      	ldr	r3, [r7, #4]
    97f4:	2200      	movs	r2, #0
    97f6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    97f8:	687b      	ldr	r3, [r7, #4]
    97fa:	2200      	movs	r2, #0
    97fc:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    97fe:	687b      	ldr	r3, [r7, #4]
    9800:	2200      	movs	r2, #0
    9802:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    9804:	687b      	ldr	r3, [r7, #4]
    9806:	2200      	movs	r2, #0
    9808:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    980a:	687b      	ldr	r3, [r7, #4]
    980c:	2200      	movs	r2, #0
    980e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    9810:	687b      	ldr	r3, [r7, #4]
    9812:	2200      	movs	r2, #0
    9814:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    9816:	687b      	ldr	r3, [r7, #4]
    9818:	2200      	movs	r2, #0
    981a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    981c:	687b      	ldr	r3, [r7, #4]
    981e:	2200      	movs	r2, #0
    9820:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    9822:	687b      	ldr	r3, [r7, #4]
    9824:	2213      	movs	r2, #19
    9826:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    9828:	687b      	ldr	r3, [r7, #4]
    982a:	2200      	movs	r2, #0
    982c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    982e:	46c0      	nop			; (mov r8, r8)
    9830:	46bd      	mov	sp, r7
    9832:	b002      	add	sp, #8
    9834:	bd80      	pop	{r7, pc}
	...

00009838 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    9838:	b580      	push	{r7, lr}
    983a:	b084      	sub	sp, #16
    983c:	af00      	add	r7, sp, #0
    983e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9840:	687b      	ldr	r3, [r7, #4]
    9842:	681b      	ldr	r3, [r3, #0]
    9844:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9846:	687b      	ldr	r3, [r7, #4]
    9848:	681b      	ldr	r3, [r3, #0]
    984a:	0018      	movs	r0, r3
    984c:	4b09      	ldr	r3, [pc, #36]	; (9874 <usart_enable+0x3c>)
    984e:	4798      	blx	r3
    9850:	0003      	movs	r3, r0
    9852:	0018      	movs	r0, r3
    9854:	4b08      	ldr	r3, [pc, #32]	; (9878 <usart_enable+0x40>)
    9856:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9858:	687b      	ldr	r3, [r7, #4]
    985a:	0018      	movs	r0, r3
    985c:	4b07      	ldr	r3, [pc, #28]	; (987c <usart_enable+0x44>)
    985e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    9860:	68fb      	ldr	r3, [r7, #12]
    9862:	681b      	ldr	r3, [r3, #0]
    9864:	2202      	movs	r2, #2
    9866:	431a      	orrs	r2, r3
    9868:	68fb      	ldr	r3, [r7, #12]
    986a:	601a      	str	r2, [r3, #0]
}
    986c:	46c0      	nop			; (mov r8, r8)
    986e:	46bd      	mov	sp, r7
    9870:	b004      	add	sp, #16
    9872:	bd80      	pop	{r7, pc}
    9874:	0001323d 	.word	0x0001323d
    9878:	00009709 	.word	0x00009709
    987c:	00009755 	.word	0x00009755

00009880 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    9880:	b580      	push	{r7, lr}
    9882:	b082      	sub	sp, #8
    9884:	af00      	add	r7, sp, #0
    9886:	6078      	str	r0, [r7, #4]
    9888:	000a      	movs	r2, r1
    988a:	1cfb      	adds	r3, r7, #3
    988c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    988e:	687b      	ldr	r3, [r7, #4]
    9890:	2231      	movs	r2, #49	; 0x31
    9892:	5c9b      	ldrb	r3, [r3, r2]
    9894:	b25a      	sxtb	r2, r3
    9896:	1cfb      	adds	r3, r7, #3
    9898:	781b      	ldrb	r3, [r3, #0]
    989a:	2101      	movs	r1, #1
    989c:	4099      	lsls	r1, r3
    989e:	000b      	movs	r3, r1
    98a0:	b25b      	sxtb	r3, r3
    98a2:	4313      	orrs	r3, r2
    98a4:	b25b      	sxtb	r3, r3
    98a6:	b2d9      	uxtb	r1, r3
    98a8:	687b      	ldr	r3, [r7, #4]
    98aa:	2231      	movs	r2, #49	; 0x31
    98ac:	5499      	strb	r1, [r3, r2]

}
    98ae:	46c0      	nop			; (mov r8, r8)
    98b0:	46bd      	mov	sp, r7
    98b2:	b002      	add	sp, #8
    98b4:	bd80      	pop	{r7, pc}
	...

000098b8 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
    98b8:	b580      	push	{r7, lr}
    98ba:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
    98bc:	2380      	movs	r3, #128	; 0x80
    98be:	009a      	lsls	r2, r3, #2
    98c0:	4b0f      	ldr	r3, [pc, #60]	; (9900 <InitializeSerialConsole+0x48>)
    98c2:	0011      	movs	r1, r2
    98c4:	0018      	movs	r0, r3
    98c6:	4b0f      	ldr	r3, [pc, #60]	; (9904 <InitializeSerialConsole+0x4c>)
    98c8:	4798      	blx	r3
    98ca:	0002      	movs	r2, r0
    98cc:	4b0e      	ldr	r3, [pc, #56]	; (9908 <InitializeSerialConsole+0x50>)
    98ce:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
    98d0:	2380      	movs	r3, #128	; 0x80
    98d2:	009a      	lsls	r2, r3, #2
    98d4:	4b0d      	ldr	r3, [pc, #52]	; (990c <InitializeSerialConsole+0x54>)
    98d6:	0011      	movs	r1, r2
    98d8:	0018      	movs	r0, r3
    98da:	4b0a      	ldr	r3, [pc, #40]	; (9904 <InitializeSerialConsole+0x4c>)
    98dc:	4798      	blx	r3
    98de:	0002      	movs	r2, r0
    98e0:	4b0b      	ldr	r3, [pc, #44]	; (9910 <InitializeSerialConsole+0x58>)
    98e2:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
    98e4:	4b0b      	ldr	r3, [pc, #44]	; (9914 <InitializeSerialConsole+0x5c>)
    98e6:	4798      	blx	r3
    configure_usart_callbacks();
    98e8:	4b0b      	ldr	r3, [pc, #44]	; (9918 <InitializeSerialConsole+0x60>)
    98ea:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
    98ec:	490b      	ldr	r1, [pc, #44]	; (991c <InitializeSerialConsole+0x64>)
    98ee:	4b0c      	ldr	r3, [pc, #48]	; (9920 <InitializeSerialConsole+0x68>)
    98f0:	2201      	movs	r2, #1
    98f2:	0018      	movs	r0, r3
    98f4:	4b0b      	ldr	r3, [pc, #44]	; (9924 <InitializeSerialConsole+0x6c>)
    98f6:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
    98f8:	46c0      	nop			; (mov r8, r8)
    98fa:	46bd      	mov	sp, r7
    98fc:	bd80      	pop	{r7, pc}
    98fe:	46c0      	nop			; (mov r8, r8)
    9900:	2000520c 	.word	0x2000520c
    9904:	000095e9 	.word	0x000095e9
    9908:	20005004 	.word	0x20005004
    990c:	2000500c 	.word	0x2000500c
    9910:	20005410 	.word	0x20005410
    9914:	00009a8d 	.word	0x00009a8d
    9918:	00009b05 	.word	0x00009b05
    991c:	20005008 	.word	0x20005008
    9920:	20004fd0 	.word	0x20004fd0
    9924:	00014ae5 	.word	0x00014ae5

00009928 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
    9928:	b580      	push	{r7, lr}
    992a:	b084      	sub	sp, #16
    992c:	af00      	add	r7, sp, #0
    992e:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    9930:	4b1a      	ldr	r3, [pc, #104]	; (999c <SerialConsoleWriteString+0x74>)
    9932:	4798      	blx	r3
    if (string != NULL) {
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	2b00      	cmp	r3, #0
    9938:	d02a      	beq.n	9990 <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
    993a:	2300      	movs	r3, #0
    993c:	60fb      	str	r3, [r7, #12]
    993e:	e00b      	b.n	9958 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
    9940:	4b17      	ldr	r3, [pc, #92]	; (99a0 <SerialConsoleWriteString+0x78>)
    9942:	6818      	ldr	r0, [r3, #0]
    9944:	687a      	ldr	r2, [r7, #4]
    9946:	68fb      	ldr	r3, [r7, #12]
    9948:	18d3      	adds	r3, r2, r3
    994a:	781b      	ldrb	r3, [r3, #0]
    994c:	0019      	movs	r1, r3
    994e:	4b15      	ldr	r3, [pc, #84]	; (99a4 <SerialConsoleWriteString+0x7c>)
    9950:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
    9952:	68fb      	ldr	r3, [r7, #12]
    9954:	3301      	adds	r3, #1
    9956:	60fb      	str	r3, [r7, #12]
    9958:	687b      	ldr	r3, [r7, #4]
    995a:	0018      	movs	r0, r3
    995c:	4b12      	ldr	r3, [pc, #72]	; (99a8 <SerialConsoleWriteString+0x80>)
    995e:	4798      	blx	r3
    9960:	0002      	movs	r2, r0
    9962:	68fb      	ldr	r3, [r7, #12]
    9964:	429a      	cmp	r2, r3
    9966:	d8eb      	bhi.n	9940 <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
    9968:	4b10      	ldr	r3, [pc, #64]	; (99ac <SerialConsoleWriteString+0x84>)
    996a:	2101      	movs	r1, #1
    996c:	0018      	movs	r0, r3
    996e:	4b10      	ldr	r3, [pc, #64]	; (99b0 <SerialConsoleWriteString+0x88>)
    9970:	4798      	blx	r3
    9972:	1e03      	subs	r3, r0, #0
    9974:	d10c      	bne.n	9990 <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
    9976:	4b0a      	ldr	r3, [pc, #40]	; (99a0 <SerialConsoleWriteString+0x78>)
    9978:	681b      	ldr	r3, [r3, #0]
    997a:	4a0e      	ldr	r2, [pc, #56]	; (99b4 <SerialConsoleWriteString+0x8c>)
    997c:	0011      	movs	r1, r2
    997e:	0018      	movs	r0, r3
    9980:	4b0d      	ldr	r3, [pc, #52]	; (99b8 <SerialConsoleWriteString+0x90>)
    9982:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
    9984:	490b      	ldr	r1, [pc, #44]	; (99b4 <SerialConsoleWriteString+0x8c>)
    9986:	4b09      	ldr	r3, [pc, #36]	; (99ac <SerialConsoleWriteString+0x84>)
    9988:	2201      	movs	r2, #1
    998a:	0018      	movs	r0, r3
    998c:	4b0b      	ldr	r3, [pc, #44]	; (99bc <SerialConsoleWriteString+0x94>)
    998e:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
    9990:	4b0b      	ldr	r3, [pc, #44]	; (99c0 <SerialConsoleWriteString+0x98>)
    9992:	4798      	blx	r3
}
    9994:	46c0      	nop			; (mov r8, r8)
    9996:	46bd      	mov	sp, r7
    9998:	b004      	add	sp, #16
    999a:	bd80      	pop	{r7, pc}
    999c:	00007f95 	.word	0x00007f95
    99a0:	20005410 	.word	0x20005410
    99a4:	00009649 	.word	0x00009649
    99a8:	000204db 	.word	0x000204db
    99ac:	20004fd0 	.word	0x20004fd0
    99b0:	00014b2d 	.word	0x00014b2d
    99b4:	2000540c 	.word	0x2000540c
    99b8:	0000967d 	.word	0x0000967d
    99bc:	00014a9d 	.word	0x00014a9d
    99c0:	00007fad 	.word	0x00007fad

000099c4 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
    99c4:	b580      	push	{r7, lr}
    99c6:	b084      	sub	sp, #16
    99c8:	af00      	add	r7, sp, #0
    99ca:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
    99cc:	4b08      	ldr	r3, [pc, #32]	; (99f0 <SerialConsoleReadCharacter+0x2c>)
    99ce:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
    99d0:	4b08      	ldr	r3, [pc, #32]	; (99f4 <SerialConsoleReadCharacter+0x30>)
    99d2:	681b      	ldr	r3, [r3, #0]
    99d4:	687a      	ldr	r2, [r7, #4]
    99d6:	0011      	movs	r1, r2
    99d8:	0018      	movs	r0, r3
    99da:	4b07      	ldr	r3, [pc, #28]	; (99f8 <SerialConsoleReadCharacter+0x34>)
    99dc:	4798      	blx	r3
    99de:	0003      	movs	r3, r0
    99e0:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
    99e2:	4b06      	ldr	r3, [pc, #24]	; (99fc <SerialConsoleReadCharacter+0x38>)
    99e4:	4798      	blx	r3
    return a;
    99e6:	68fb      	ldr	r3, [r7, #12]
}
    99e8:	0018      	movs	r0, r3
    99ea:	46bd      	mov	sp, r7
    99ec:	b004      	add	sp, #16
    99ee:	bd80      	pop	{r7, pc}
    99f0:	00007f95 	.word	0x00007f95
    99f4:	20005004 	.word	0x20005004
    99f8:	0000967d 	.word	0x0000967d
    99fc:	00007fad 	.word	0x00007fad

00009a00 <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
    9a00:	b580      	push	{r7, lr}
    9a02:	af00      	add	r7, sp, #0
    return currentDebugLevel;
    9a04:	4b02      	ldr	r3, [pc, #8]	; (9a10 <getLogLevel+0x10>)
    9a06:	781b      	ldrb	r3, [r3, #0]
}
    9a08:	0018      	movs	r0, r3
    9a0a:	46bd      	mov	sp, r7
    9a0c:	bd80      	pop	{r7, pc}
    9a0e:	46c0      	nop			; (mov r8, r8)
    9a10:	20003c84 	.word	0x20003c84

00009a14 <LogMessage>:
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
    9a14:	b40e      	push	{r1, r2, r3}
    9a16:	b590      	push	{r4, r7, lr}
    9a18:	b084      	sub	sp, #16
    9a1a:	af00      	add	r7, sp, #0
    9a1c:	0002      	movs	r2, r0
    9a1e:	1dfb      	adds	r3, r7, #7
    9a20:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
    9a22:	4b0e      	ldr	r3, [pc, #56]	; (9a5c <LogMessage+0x48>)
    9a24:	4798      	blx	r3
    9a26:	0003      	movs	r3, r0
    9a28:	001a      	movs	r2, r3
    9a2a:	1dfb      	adds	r3, r7, #7
    9a2c:	781b      	ldrb	r3, [r3, #0]
    9a2e:	4293      	cmp	r3, r2
    9a30:	d30c      	bcc.n	9a4c <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
    9a32:	2320      	movs	r3, #32
    9a34:	18fb      	adds	r3, r7, r3
    9a36:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
    9a38:	68fb      	ldr	r3, [r7, #12]
    9a3a:	69fa      	ldr	r2, [r7, #28]
    9a3c:	4808      	ldr	r0, [pc, #32]	; (9a60 <LogMessage+0x4c>)
    9a3e:	217f      	movs	r1, #127	; 0x7f
    9a40:	4c08      	ldr	r4, [pc, #32]	; (9a64 <LogMessage+0x50>)
    9a42:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
    9a44:	4b06      	ldr	r3, [pc, #24]	; (9a60 <LogMessage+0x4c>)
    9a46:	0018      	movs	r0, r3
    9a48:	4b07      	ldr	r3, [pc, #28]	; (9a68 <LogMessage+0x54>)
    9a4a:	4798      	blx	r3
        va_end(ap);
    }
};
    9a4c:	46c0      	nop			; (mov r8, r8)
    9a4e:	46bd      	mov	sp, r7
    9a50:	b004      	add	sp, #16
    9a52:	bc90      	pop	{r4, r7}
    9a54:	bc08      	pop	{r3}
    9a56:	b003      	add	sp, #12
    9a58:	4718      	bx	r3
    9a5a:	46c0      	nop			; (mov r8, r8)
    9a5c:	00009a01 	.word	0x00009a01
    9a60:	20004f50 	.word	0x20004f50
    9a64:	00020715 	.word	0x00020715
    9a68:	00009929 	.word	0x00009929

00009a6c <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
    9a6c:	b40f      	push	{r0, r1, r2, r3}
    9a6e:	b580      	push	{r7, lr}
    9a70:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
    9a72:	68bb      	ldr	r3, [r7, #8]
    9a74:	0019      	movs	r1, r3
    9a76:	2001      	movs	r0, #1
    9a78:	4b03      	ldr	r3, [pc, #12]	; (9a88 <LogMessageDebug+0x1c>)
    9a7a:	4798      	blx	r3
};
    9a7c:	46c0      	nop			; (mov r8, r8)
    9a7e:	46bd      	mov	sp, r7
    9a80:	bc80      	pop	{r7}
    9a82:	bc08      	pop	{r3}
    9a84:	b004      	add	sp, #16
    9a86:	4718      	bx	r3
    9a88:	00009a15 	.word	0x00009a15

00009a8c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
    9a8c:	b580      	push	{r7, lr}
    9a8e:	b090      	sub	sp, #64	; 0x40
    9a90:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    9a92:	003b      	movs	r3, r7
    9a94:	0018      	movs	r0, r3
    9a96:	4b14      	ldr	r3, [pc, #80]	; (9ae8 <configure_usart+0x5c>)
    9a98:	4798      	blx	r3

    config_usart.baudrate = 115200;
    9a9a:	003b      	movs	r3, r7
    9a9c:	22e1      	movs	r2, #225	; 0xe1
    9a9e:	0252      	lsls	r2, r2, #9
    9aa0:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    9aa2:	003b      	movs	r3, r7
    9aa4:	22c4      	movs	r2, #196	; 0xc4
    9aa6:	0392      	lsls	r2, r2, #14
    9aa8:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    9aaa:	003b      	movs	r3, r7
    9aac:	2201      	movs	r2, #1
    9aae:	4252      	negs	r2, r2
    9ab0:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    9ab2:	003b      	movs	r3, r7
    9ab4:	2201      	movs	r2, #1
    9ab6:	4252      	negs	r2, r2
    9ab8:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    9aba:	003b      	movs	r3, r7
    9abc:	4a0b      	ldr	r2, [pc, #44]	; (9aec <configure_usart+0x60>)
    9abe:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    9ac0:	003b      	movs	r3, r7
    9ac2:	4a0b      	ldr	r2, [pc, #44]	; (9af0 <configure_usart+0x64>)
    9ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    9ac6:	46c0      	nop			; (mov r8, r8)
    9ac8:	003a      	movs	r2, r7
    9aca:	490a      	ldr	r1, [pc, #40]	; (9af4 <configure_usart+0x68>)
    9acc:	4b0a      	ldr	r3, [pc, #40]	; (9af8 <configure_usart+0x6c>)
    9ace:	0018      	movs	r0, r3
    9ad0:	4b0a      	ldr	r3, [pc, #40]	; (9afc <configure_usart+0x70>)
    9ad2:	4798      	blx	r3
    9ad4:	1e03      	subs	r3, r0, #0
    9ad6:	d1f7      	bne.n	9ac8 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
    9ad8:	4b07      	ldr	r3, [pc, #28]	; (9af8 <configure_usart+0x6c>)
    9ada:	0018      	movs	r0, r3
    9adc:	4b08      	ldr	r3, [pc, #32]	; (9b00 <configure_usart+0x74>)
    9ade:	4798      	blx	r3
}
    9ae0:	46c0      	nop			; (mov r8, r8)
    9ae2:	46bd      	mov	sp, r7
    9ae4:	b010      	add	sp, #64	; 0x40
    9ae6:	bd80      	pop	{r7, pc}
    9ae8:	00009779 	.word	0x00009779
    9aec:	002a0003 	.word	0x002a0003
    9af0:	002b0003 	.word	0x002b0003
    9af4:	42001800 	.word	0x42001800
    9af8:	20004fd0 	.word	0x20004fd0
    9afc:	000146a1 	.word	0x000146a1
    9b00:	00009839 	.word	0x00009839

00009b04 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
    9b04:	b580      	push	{r7, lr}
    9b06:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    9b08:	490c      	ldr	r1, [pc, #48]	; (9b3c <configure_usart_callbacks+0x38>)
    9b0a:	4b0d      	ldr	r3, [pc, #52]	; (9b40 <configure_usart_callbacks+0x3c>)
    9b0c:	2200      	movs	r2, #0
    9b0e:	0018      	movs	r0, r3
    9b10:	4b0c      	ldr	r3, [pc, #48]	; (9b44 <configure_usart_callbacks+0x40>)
    9b12:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    9b14:	490c      	ldr	r1, [pc, #48]	; (9b48 <configure_usart_callbacks+0x44>)
    9b16:	4b0a      	ldr	r3, [pc, #40]	; (9b40 <configure_usart_callbacks+0x3c>)
    9b18:	2201      	movs	r2, #1
    9b1a:	0018      	movs	r0, r3
    9b1c:	4b09      	ldr	r3, [pc, #36]	; (9b44 <configure_usart_callbacks+0x40>)
    9b1e:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    9b20:	4b07      	ldr	r3, [pc, #28]	; (9b40 <configure_usart_callbacks+0x3c>)
    9b22:	2100      	movs	r1, #0
    9b24:	0018      	movs	r0, r3
    9b26:	4b09      	ldr	r3, [pc, #36]	; (9b4c <configure_usart_callbacks+0x48>)
    9b28:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    9b2a:	4b05      	ldr	r3, [pc, #20]	; (9b40 <configure_usart_callbacks+0x3c>)
    9b2c:	2101      	movs	r1, #1
    9b2e:	0018      	movs	r0, r3
    9b30:	4b06      	ldr	r3, [pc, #24]	; (9b4c <configure_usart_callbacks+0x48>)
    9b32:	4798      	blx	r3
}
    9b34:	46c0      	nop			; (mov r8, r8)
    9b36:	46bd      	mov	sp, r7
    9b38:	bd80      	pop	{r7, pc}
    9b3a:	46c0      	nop			; (mov r8, r8)
    9b3c:	00009b99 	.word	0x00009b99
    9b40:	20004fd0 	.word	0x20004fd0
    9b44:	00014a55 	.word	0x00014a55
    9b48:	00009b51 	.word	0x00009b51
    9b4c:	00009881 	.word	0x00009881

00009b50 <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
    9b50:	b580      	push	{r7, lr}
    9b52:	b082      	sub	sp, #8
    9b54:	af00      	add	r7, sp, #0
    9b56:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
    9b58:	4b09      	ldr	r3, [pc, #36]	; (9b80 <usart_read_callback+0x30>)
    9b5a:	681a      	ldr	r2, [r3, #0]
    9b5c:	4b09      	ldr	r3, [pc, #36]	; (9b84 <usart_read_callback+0x34>)
    9b5e:	781b      	ldrb	r3, [r3, #0]
    9b60:	0019      	movs	r1, r3
    9b62:	0010      	movs	r0, r2
    9b64:	4b08      	ldr	r3, [pc, #32]	; (9b88 <usart_read_callback+0x38>)
    9b66:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
    9b68:	4906      	ldr	r1, [pc, #24]	; (9b84 <usart_read_callback+0x34>)
    9b6a:	4b08      	ldr	r3, [pc, #32]	; (9b8c <usart_read_callback+0x3c>)
    9b6c:	2201      	movs	r2, #1
    9b6e:	0018      	movs	r0, r3
    9b70:	4b07      	ldr	r3, [pc, #28]	; (9b90 <usart_read_callback+0x40>)
    9b72:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
    9b74:	4b07      	ldr	r3, [pc, #28]	; (9b94 <usart_read_callback+0x44>)
    9b76:	4798      	blx	r3
}
    9b78:	46c0      	nop			; (mov r8, r8)
    9b7a:	46bd      	mov	sp, r7
    9b7c:	b002      	add	sp, #8
    9b7e:	bd80      	pop	{r7, pc}
    9b80:	20005004 	.word	0x20005004
    9b84:	20005008 	.word	0x20005008
    9b88:	00009649 	.word	0x00009649
    9b8c:	20004fd0 	.word	0x20004fd0
    9b90:	00014ae5 	.word	0x00014ae5
    9b94:	00001011 	.word	0x00001011

00009b98 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
    9b98:	b580      	push	{r7, lr}
    9b9a:	b082      	sub	sp, #8
    9b9c:	af00      	add	r7, sp, #0
    9b9e:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
    9ba0:	4b09      	ldr	r3, [pc, #36]	; (9bc8 <usart_write_callback+0x30>)
    9ba2:	681b      	ldr	r3, [r3, #0]
    9ba4:	4a09      	ldr	r2, [pc, #36]	; (9bcc <usart_write_callback+0x34>)
    9ba6:	0011      	movs	r1, r2
    9ba8:	0018      	movs	r0, r3
    9baa:	4b09      	ldr	r3, [pc, #36]	; (9bd0 <usart_write_callback+0x38>)
    9bac:	4798      	blx	r3
    9bae:	0003      	movs	r3, r0
    9bb0:	3301      	adds	r3, #1
    9bb2:	d005      	beq.n	9bc0 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
    9bb4:	4905      	ldr	r1, [pc, #20]	; (9bcc <usart_write_callback+0x34>)
    9bb6:	4b07      	ldr	r3, [pc, #28]	; (9bd4 <usart_write_callback+0x3c>)
    9bb8:	2201      	movs	r2, #1
    9bba:	0018      	movs	r0, r3
    9bbc:	4b06      	ldr	r3, [pc, #24]	; (9bd8 <usart_write_callback+0x40>)
    9bbe:	4798      	blx	r3
    }
}
    9bc0:	46c0      	nop			; (mov r8, r8)
    9bc2:	46bd      	mov	sp, r7
    9bc4:	b002      	add	sp, #8
    9bc6:	bd80      	pop	{r7, pc}
    9bc8:	20005410 	.word	0x20005410
    9bcc:	2000540c 	.word	0x2000540c
    9bd0:	0000967d 	.word	0x0000967d
    9bd4:	20004fd0 	.word	0x20004fd0
    9bd8:	00014a9d 	.word	0x00014a9d

00009bdc <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    9bdc:	b590      	push	{r4, r7, lr}
    9bde:	b087      	sub	sp, #28
    9be0:	af00      	add	r7, sp, #0
    9be2:	60f8      	str	r0, [r7, #12]
    9be4:	000c      	movs	r4, r1
    9be6:	0010      	movs	r0, r2
    9be8:	0019      	movs	r1, r3
    9bea:	230a      	movs	r3, #10
    9bec:	18fb      	adds	r3, r7, r3
    9bee:	1c22      	adds	r2, r4, #0
    9bf0:	801a      	strh	r2, [r3, #0]
    9bf2:	2308      	movs	r3, #8
    9bf4:	18fb      	adds	r3, r7, r3
    9bf6:	1c02      	adds	r2, r0, #0
    9bf8:	801a      	strh	r2, [r3, #0]
    9bfa:	1dfb      	adds	r3, r7, #7
    9bfc:	1c0a      	adds	r2, r1, #0
    9bfe:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9c00:	230a      	movs	r3, #10
    9c02:	18fb      	adds	r3, r7, r3
    9c04:	881a      	ldrh	r2, [r3, #0]
    9c06:	2308      	movs	r3, #8
    9c08:	18fb      	adds	r3, r7, r3
    9c0a:	881b      	ldrh	r3, [r3, #0]
    9c0c:	1ad3      	subs	r3, r2, r3
    9c0e:	3307      	adds	r3, #7
    9c10:	2b00      	cmp	r3, #0
    9c12:	da00      	bge.n	9c16 <SDMMC_UNSTUFF_BITS+0x3a>
    9c14:	3307      	adds	r3, #7
    9c16:	10db      	asrs	r3, r3, #3
    9c18:	3b01      	subs	r3, #1
    9c1a:	68fa      	ldr	r2, [r7, #12]
    9c1c:	18d3      	adds	r3, r2, r3
    9c1e:	781b      	ldrb	r3, [r3, #0]
    9c20:	0019      	movs	r1, r3
    9c22:	2308      	movs	r3, #8
    9c24:	18fb      	adds	r3, r7, r3
    9c26:	881b      	ldrh	r3, [r3, #0]
    9c28:	2207      	movs	r2, #7
    9c2a:	4013      	ands	r3, r2
    9c2c:	4119      	asrs	r1, r3
    9c2e:	000b      	movs	r3, r1
    9c30:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    9c32:	2308      	movs	r3, #8
    9c34:	18fb      	adds	r3, r7, r3
    9c36:	881b      	ldrh	r3, [r3, #0]
    9c38:	2207      	movs	r2, #7
    9c3a:	401a      	ands	r2, r3
    9c3c:	1dfb      	adds	r3, r7, #7
    9c3e:	781b      	ldrb	r3, [r3, #0]
    9c40:	18d3      	adds	r3, r2, r3
    9c42:	2b08      	cmp	r3, #8
    9c44:	dd1c      	ble.n	9c80 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9c46:	230a      	movs	r3, #10
    9c48:	18fb      	adds	r3, r7, r3
    9c4a:	881a      	ldrh	r2, [r3, #0]
    9c4c:	2308      	movs	r3, #8
    9c4e:	18fb      	adds	r3, r7, r3
    9c50:	881b      	ldrh	r3, [r3, #0]
    9c52:	1ad3      	subs	r3, r2, r3
    9c54:	3307      	adds	r3, #7
    9c56:	2b00      	cmp	r3, #0
    9c58:	da00      	bge.n	9c5c <SDMMC_UNSTUFF_BITS+0x80>
    9c5a:	3307      	adds	r3, #7
    9c5c:	10db      	asrs	r3, r3, #3
    9c5e:	3b02      	subs	r3, #2
    9c60:	68fa      	ldr	r2, [r7, #12]
    9c62:	18d3      	adds	r3, r2, r3
    9c64:	781b      	ldrb	r3, [r3, #0]
    9c66:	0019      	movs	r1, r3
    9c68:	2308      	movs	r3, #8
    9c6a:	18fb      	adds	r3, r7, r3
    9c6c:	881b      	ldrh	r3, [r3, #0]
    9c6e:	2207      	movs	r2, #7
    9c70:	4013      	ands	r3, r2
    9c72:	2208      	movs	r2, #8
    9c74:	1ad3      	subs	r3, r2, r3
    9c76:	4099      	lsls	r1, r3
    9c78:	000b      	movs	r3, r1
    9c7a:	697a      	ldr	r2, [r7, #20]
    9c7c:	4313      	orrs	r3, r2
    9c7e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    9c80:	2308      	movs	r3, #8
    9c82:	18fb      	adds	r3, r7, r3
    9c84:	881b      	ldrh	r3, [r3, #0]
    9c86:	2207      	movs	r2, #7
    9c88:	401a      	ands	r2, r3
    9c8a:	1dfb      	adds	r3, r7, #7
    9c8c:	781b      	ldrb	r3, [r3, #0]
    9c8e:	18d3      	adds	r3, r2, r3
    9c90:	2b10      	cmp	r3, #16
    9c92:	dd1c      	ble.n	9cce <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9c94:	230a      	movs	r3, #10
    9c96:	18fb      	adds	r3, r7, r3
    9c98:	881a      	ldrh	r2, [r3, #0]
    9c9a:	2308      	movs	r3, #8
    9c9c:	18fb      	adds	r3, r7, r3
    9c9e:	881b      	ldrh	r3, [r3, #0]
    9ca0:	1ad3      	subs	r3, r2, r3
    9ca2:	3307      	adds	r3, #7
    9ca4:	2b00      	cmp	r3, #0
    9ca6:	da00      	bge.n	9caa <SDMMC_UNSTUFF_BITS+0xce>
    9ca8:	3307      	adds	r3, #7
    9caa:	10db      	asrs	r3, r3, #3
    9cac:	3b03      	subs	r3, #3
    9cae:	68fa      	ldr	r2, [r7, #12]
    9cb0:	18d3      	adds	r3, r2, r3
    9cb2:	781b      	ldrb	r3, [r3, #0]
    9cb4:	0019      	movs	r1, r3
    9cb6:	2308      	movs	r3, #8
    9cb8:	18fb      	adds	r3, r7, r3
    9cba:	881b      	ldrh	r3, [r3, #0]
    9cbc:	2207      	movs	r2, #7
    9cbe:	4013      	ands	r3, r2
    9cc0:	2210      	movs	r2, #16
    9cc2:	1ad3      	subs	r3, r2, r3
    9cc4:	4099      	lsls	r1, r3
    9cc6:	000b      	movs	r3, r1
    9cc8:	697a      	ldr	r2, [r7, #20]
    9cca:	4313      	orrs	r3, r2
    9ccc:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    9cce:	2308      	movs	r3, #8
    9cd0:	18fb      	adds	r3, r7, r3
    9cd2:	881b      	ldrh	r3, [r3, #0]
    9cd4:	2207      	movs	r2, #7
    9cd6:	401a      	ands	r2, r3
    9cd8:	1dfb      	adds	r3, r7, #7
    9cda:	781b      	ldrb	r3, [r3, #0]
    9cdc:	18d3      	adds	r3, r2, r3
    9cde:	2b10      	cmp	r3, #16
    9ce0:	dd1c      	ble.n	9d1c <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9ce2:	230a      	movs	r3, #10
    9ce4:	18fb      	adds	r3, r7, r3
    9ce6:	881a      	ldrh	r2, [r3, #0]
    9ce8:	2308      	movs	r3, #8
    9cea:	18fb      	adds	r3, r7, r3
    9cec:	881b      	ldrh	r3, [r3, #0]
    9cee:	1ad3      	subs	r3, r2, r3
    9cf0:	3307      	adds	r3, #7
    9cf2:	2b00      	cmp	r3, #0
    9cf4:	da00      	bge.n	9cf8 <SDMMC_UNSTUFF_BITS+0x11c>
    9cf6:	3307      	adds	r3, #7
    9cf8:	10db      	asrs	r3, r3, #3
    9cfa:	3b03      	subs	r3, #3
    9cfc:	68fa      	ldr	r2, [r7, #12]
    9cfe:	18d3      	adds	r3, r2, r3
    9d00:	781b      	ldrb	r3, [r3, #0]
    9d02:	0019      	movs	r1, r3
    9d04:	2308      	movs	r3, #8
    9d06:	18fb      	adds	r3, r7, r3
    9d08:	881b      	ldrh	r3, [r3, #0]
    9d0a:	2207      	movs	r2, #7
    9d0c:	4013      	ands	r3, r2
    9d0e:	2210      	movs	r2, #16
    9d10:	1ad3      	subs	r3, r2, r3
    9d12:	4099      	lsls	r1, r3
    9d14:	000b      	movs	r3, r1
    9d16:	697a      	ldr	r2, [r7, #20]
    9d18:	4313      	orrs	r3, r2
    9d1a:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    9d1c:	1dfb      	adds	r3, r7, #7
    9d1e:	781b      	ldrb	r3, [r3, #0]
    9d20:	2201      	movs	r2, #1
    9d22:	409a      	lsls	r2, r3
    9d24:	0013      	movs	r3, r2
    9d26:	1e5a      	subs	r2, r3, #1
    9d28:	697b      	ldr	r3, [r7, #20]
    9d2a:	4013      	ands	r3, r2
    9d2c:	617b      	str	r3, [r7, #20]
	return value;
    9d2e:	697b      	ldr	r3, [r7, #20]
}
    9d30:	0018      	movs	r0, r3
    9d32:	46bd      	mov	sp, r7
    9d34:	b007      	add	sp, #28
    9d36:	bd90      	pop	{r4, r7, pc}

00009d38 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    9d38:	b580      	push	{r7, lr}
    9d3a:	b082      	sub	sp, #8
    9d3c:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    9d3e:	4b23      	ldr	r3, [pc, #140]	; (9dcc <mmc_spi_op_cond+0x94>)
    9d40:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    9d42:	4b23      	ldr	r3, [pc, #140]	; (9dd0 <mmc_spi_op_cond+0x98>)
    9d44:	2100      	movs	r1, #0
    9d46:	0018      	movs	r0, r3
    9d48:	4b22      	ldr	r3, [pc, #136]	; (9dd4 <mmc_spi_op_cond+0x9c>)
    9d4a:	4798      	blx	r3
    9d4c:	0003      	movs	r3, r0
    9d4e:	001a      	movs	r2, r3
    9d50:	2301      	movs	r3, #1
    9d52:	4053      	eors	r3, r2
    9d54:	b2db      	uxtb	r3, r3
    9d56:	2b00      	cmp	r3, #0
    9d58:	d001      	beq.n	9d5e <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    9d5a:	2300      	movs	r3, #0
    9d5c:	e031      	b.n	9dc2 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    9d5e:	4b1e      	ldr	r3, [pc, #120]	; (9dd8 <mmc_spi_op_cond+0xa0>)
    9d60:	4798      	blx	r3
    9d62:	0003      	movs	r3, r0
    9d64:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    9d66:	683b      	ldr	r3, [r7, #0]
    9d68:	2201      	movs	r2, #1
    9d6a:	4013      	ands	r3, r2
    9d6c:	d006      	beq.n	9d7c <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    9d6e:	687b      	ldr	r3, [r7, #4]
    9d70:	1e5a      	subs	r2, r3, #1
    9d72:	607a      	str	r2, [r7, #4]
    9d74:	2b00      	cmp	r3, #0
    9d76:	d1e4      	bne.n	9d42 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    9d78:	2300      	movs	r3, #0
    9d7a:	e022      	b.n	9dc2 <mmc_spi_op_cond+0x8a>
			break;
    9d7c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    9d7e:	4b17      	ldr	r3, [pc, #92]	; (9ddc <mmc_spi_op_cond+0xa4>)
    9d80:	2100      	movs	r1, #0
    9d82:	0018      	movs	r0, r3
    9d84:	4b13      	ldr	r3, [pc, #76]	; (9dd4 <mmc_spi_op_cond+0x9c>)
    9d86:	4798      	blx	r3
    9d88:	0003      	movs	r3, r0
    9d8a:	001a      	movs	r2, r3
    9d8c:	2301      	movs	r3, #1
    9d8e:	4053      	eors	r3, r2
    9d90:	b2db      	uxtb	r3, r3
    9d92:	2b00      	cmp	r3, #0
    9d94:	d001      	beq.n	9d9a <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    9d96:	2300      	movs	r3, #0
    9d98:	e013      	b.n	9dc2 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    9d9a:	4b0f      	ldr	r3, [pc, #60]	; (9dd8 <mmc_spi_op_cond+0xa0>)
    9d9c:	4798      	blx	r3
    9d9e:	0002      	movs	r2, r0
    9da0:	23c0      	movs	r3, #192	; 0xc0
    9da2:	05db      	lsls	r3, r3, #23
    9da4:	401a      	ands	r2, r3
    9da6:	2380      	movs	r3, #128	; 0x80
    9da8:	05db      	lsls	r3, r3, #23
    9daa:	429a      	cmp	r2, r3
    9dac:	d108      	bne.n	9dc0 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    9dae:	4b0c      	ldr	r3, [pc, #48]	; (9de0 <mmc_spi_op_cond+0xa8>)
    9db0:	681a      	ldr	r2, [r3, #0]
    9db2:	4b0b      	ldr	r3, [pc, #44]	; (9de0 <mmc_spi_op_cond+0xa8>)
    9db4:	681b      	ldr	r3, [r3, #0]
    9db6:	7adb      	ldrb	r3, [r3, #11]
    9db8:	2108      	movs	r1, #8
    9dba:	430b      	orrs	r3, r1
    9dbc:	b2db      	uxtb	r3, r3
    9dbe:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    9dc0:	2301      	movs	r3, #1
}
    9dc2:	0018      	movs	r0, r3
    9dc4:	46bd      	mov	sp, r7
    9dc6:	b002      	add	sp, #8
    9dc8:	bd80      	pop	{r7, pc}
    9dca:	46c0      	nop			; (mov r8, r8)
    9dcc:	00001bee 	.word	0x00001bee
    9dd0:	00001101 	.word	0x00001101
    9dd4:	0000b7b5 	.word	0x0000b7b5
    9dd8:	0000b9f5 	.word	0x0000b9f5
    9ddc:	0000053a 	.word	0x0000053a
    9de0:	20003cac 	.word	0x20003cac

00009de4 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    9de4:	b580      	push	{r7, lr}
    9de6:	b086      	sub	sp, #24
    9de8:	af00      	add	r7, sp, #0
    9dea:	0002      	movs	r2, r0
    9dec:	1dfb      	adds	r3, r7, #7
    9dee:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    9df0:	4b2e      	ldr	r3, [pc, #184]	; (9eac <sd_spi_op_cond+0xc8>)
    9df2:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    9df4:	4b2e      	ldr	r3, [pc, #184]	; (9eb0 <sd_spi_op_cond+0xcc>)
    9df6:	2100      	movs	r1, #0
    9df8:	0018      	movs	r0, r3
    9dfa:	4b2e      	ldr	r3, [pc, #184]	; (9eb4 <sd_spi_op_cond+0xd0>)
    9dfc:	4798      	blx	r3
    9dfe:	0003      	movs	r3, r0
    9e00:	001a      	movs	r2, r3
    9e02:	2301      	movs	r3, #1
    9e04:	4053      	eors	r3, r2
    9e06:	b2db      	uxtb	r3, r3
    9e08:	2b00      	cmp	r3, #0
    9e0a:	d001      	beq.n	9e10 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    9e0c:	2300      	movs	r3, #0
    9e0e:	e048      	b.n	9ea2 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    9e10:	2300      	movs	r3, #0
    9e12:	617b      	str	r3, [r7, #20]
		if (v2) {
    9e14:	1dfb      	adds	r3, r7, #7
    9e16:	781b      	ldrb	r3, [r3, #0]
    9e18:	2b00      	cmp	r3, #0
    9e1a:	d004      	beq.n	9e26 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    9e1c:	697b      	ldr	r3, [r7, #20]
    9e1e:	2280      	movs	r2, #128	; 0x80
    9e20:	05d2      	lsls	r2, r2, #23
    9e22:	4313      	orrs	r3, r2
    9e24:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    9e26:	697b      	ldr	r3, [r7, #20]
    9e28:	4a23      	ldr	r2, [pc, #140]	; (9eb8 <sd_spi_op_cond+0xd4>)
    9e2a:	0019      	movs	r1, r3
    9e2c:	0010      	movs	r0, r2
    9e2e:	4b21      	ldr	r3, [pc, #132]	; (9eb4 <sd_spi_op_cond+0xd0>)
    9e30:	4798      	blx	r3
    9e32:	0003      	movs	r3, r0
    9e34:	001a      	movs	r2, r3
    9e36:	2301      	movs	r3, #1
    9e38:	4053      	eors	r3, r2
    9e3a:	b2db      	uxtb	r3, r3
    9e3c:	2b00      	cmp	r3, #0
    9e3e:	d001      	beq.n	9e44 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    9e40:	2300      	movs	r3, #0
    9e42:	e02e      	b.n	9ea2 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    9e44:	4b1d      	ldr	r3, [pc, #116]	; (9ebc <sd_spi_op_cond+0xd8>)
    9e46:	4798      	blx	r3
    9e48:	0003      	movs	r3, r0
    9e4a:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    9e4c:	68fb      	ldr	r3, [r7, #12]
    9e4e:	2201      	movs	r2, #1
    9e50:	4013      	ands	r3, r2
    9e52:	d006      	beq.n	9e62 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    9e54:	693b      	ldr	r3, [r7, #16]
    9e56:	1e5a      	subs	r2, r3, #1
    9e58:	613a      	str	r2, [r7, #16]
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	d1ca      	bne.n	9df4 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    9e5e:	2300      	movs	r3, #0
    9e60:	e01f      	b.n	9ea2 <sd_spi_op_cond+0xbe>
			break;
    9e62:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    9e64:	4b16      	ldr	r3, [pc, #88]	; (9ec0 <sd_spi_op_cond+0xdc>)
    9e66:	2100      	movs	r1, #0
    9e68:	0018      	movs	r0, r3
    9e6a:	4b12      	ldr	r3, [pc, #72]	; (9eb4 <sd_spi_op_cond+0xd0>)
    9e6c:	4798      	blx	r3
    9e6e:	0003      	movs	r3, r0
    9e70:	001a      	movs	r2, r3
    9e72:	2301      	movs	r3, #1
    9e74:	4053      	eors	r3, r2
    9e76:	b2db      	uxtb	r3, r3
    9e78:	2b00      	cmp	r3, #0
    9e7a:	d001      	beq.n	9e80 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    9e7c:	2300      	movs	r3, #0
    9e7e:	e010      	b.n	9ea2 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    9e80:	4b0e      	ldr	r3, [pc, #56]	; (9ebc <sd_spi_op_cond+0xd8>)
    9e82:	4798      	blx	r3
    9e84:	0002      	movs	r2, r0
    9e86:	2380      	movs	r3, #128	; 0x80
    9e88:	05db      	lsls	r3, r3, #23
    9e8a:	4013      	ands	r3, r2
    9e8c:	d008      	beq.n	9ea0 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    9e8e:	4b0d      	ldr	r3, [pc, #52]	; (9ec4 <sd_spi_op_cond+0xe0>)
    9e90:	681a      	ldr	r2, [r3, #0]
    9e92:	4b0c      	ldr	r3, [pc, #48]	; (9ec4 <sd_spi_op_cond+0xe0>)
    9e94:	681b      	ldr	r3, [r3, #0]
    9e96:	7adb      	ldrb	r3, [r3, #11]
    9e98:	2108      	movs	r1, #8
    9e9a:	430b      	orrs	r3, r1
    9e9c:	b2db      	uxtb	r3, r3
    9e9e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    9ea0:	2301      	movs	r3, #1
}
    9ea2:	0018      	movs	r0, r3
    9ea4:	46bd      	mov	sp, r7
    9ea6:	b006      	add	sp, #24
    9ea8:	bd80      	pop	{r7, pc}
    9eaa:	46c0      	nop			; (mov r8, r8)
    9eac:	00001bee 	.word	0x00001bee
    9eb0:	00001137 	.word	0x00001137
    9eb4:	0000b7b5 	.word	0x0000b7b5
    9eb8:	00001129 	.word	0x00001129
    9ebc:	0000b9f5 	.word	0x0000b9f5
    9ec0:	0000053a 	.word	0x0000053a
    9ec4:	20003cac 	.word	0x20003cac

00009ec8 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    9ec8:	b580      	push	{r7, lr}
    9eca:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    9ecc:	2301      	movs	r3, #1
}
    9ece:	0018      	movs	r0, r3
    9ed0:	46bd      	mov	sp, r7
    9ed2:	bd80      	pop	{r7, pc}

00009ed4 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    9ed4:	b580      	push	{r7, lr}
    9ed6:	b084      	sub	sp, #16
    9ed8:	af00      	add	r7, sp, #0
    9eda:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    9edc:	687b      	ldr	r3, [r7, #4]
    9ede:	2200      	movs	r2, #0
    9ee0:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    9ee2:	23d5      	movs	r3, #213	; 0xd5
    9ee4:	005b      	lsls	r3, r3, #1
    9ee6:	4a14      	ldr	r2, [pc, #80]	; (9f38 <sd_cmd8+0x64>)
    9ee8:	0019      	movs	r1, r3
    9eea:	0010      	movs	r0, r2
    9eec:	4b13      	ldr	r3, [pc, #76]	; (9f3c <sd_cmd8+0x68>)
    9eee:	4798      	blx	r3
    9ef0:	0003      	movs	r3, r0
    9ef2:	001a      	movs	r2, r3
    9ef4:	2301      	movs	r3, #1
    9ef6:	4053      	eors	r3, r2
    9ef8:	b2db      	uxtb	r3, r3
    9efa:	2b00      	cmp	r3, #0
    9efc:	d001      	beq.n	9f02 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    9efe:	2301      	movs	r3, #1
    9f00:	e015      	b.n	9f2e <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    9f02:	4b0f      	ldr	r3, [pc, #60]	; (9f40 <sd_cmd8+0x6c>)
    9f04:	4798      	blx	r3
    9f06:	0003      	movs	r3, r0
    9f08:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    9f0a:	68fb      	ldr	r3, [r7, #12]
    9f0c:	3301      	adds	r3, #1
    9f0e:	d101      	bne.n	9f14 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    9f10:	2301      	movs	r3, #1
    9f12:	e00c      	b.n	9f2e <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    9f14:	68fb      	ldr	r3, [r7, #12]
    9f16:	051b      	lsls	r3, r3, #20
    9f18:	0d1a      	lsrs	r2, r3, #20
    9f1a:	23d5      	movs	r3, #213	; 0xd5
    9f1c:	005b      	lsls	r3, r3, #1
    9f1e:	429a      	cmp	r2, r3
    9f20:	d001      	beq.n	9f26 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    9f22:	2300      	movs	r3, #0
    9f24:	e003      	b.n	9f2e <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    9f26:	687b      	ldr	r3, [r7, #4]
    9f28:	2201      	movs	r2, #1
    9f2a:	701a      	strb	r2, [r3, #0]
	return true;
    9f2c:	2301      	movs	r3, #1
}
    9f2e:	0018      	movs	r0, r3
    9f30:	46bd      	mov	sp, r7
    9f32:	b004      	add	sp, #16
    9f34:	bd80      	pop	{r7, pc}
    9f36:	46c0      	nop			; (mov r8, r8)
    9f38:	00005508 	.word	0x00005508
    9f3c:	0000b7b5 	.word	0x0000b7b5
    9f40:	0000b9f5 	.word	0x0000b9f5

00009f44 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    9f44:	b590      	push	{r4, r7, lr}
    9f46:	b089      	sub	sp, #36	; 0x24
    9f48:	af02      	add	r7, sp, #8
    9f4a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    9f4c:	2380      	movs	r3, #128	; 0x80
    9f4e:	009a      	lsls	r2, r3, #2
    9f50:	4841      	ldr	r0, [pc, #260]	; (a058 <mmc_cmd8+0x114>)
    9f52:	2300      	movs	r3, #0
    9f54:	9300      	str	r3, [sp, #0]
    9f56:	2301      	movs	r3, #1
    9f58:	2100      	movs	r1, #0
    9f5a:	4c40      	ldr	r4, [pc, #256]	; (a05c <mmc_cmd8+0x118>)
    9f5c:	47a0      	blx	r4
    9f5e:	0003      	movs	r3, r0
    9f60:	001a      	movs	r2, r3
    9f62:	2301      	movs	r3, #1
    9f64:	4053      	eors	r3, r2
    9f66:	b2db      	uxtb	r3, r3
    9f68:	2b00      	cmp	r3, #0
    9f6a:	d001      	beq.n	9f70 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    9f6c:	2300      	movs	r3, #0
    9f6e:	e06e      	b.n	a04e <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    9f70:	2316      	movs	r3, #22
    9f72:	18fb      	adds	r3, r7, r3
    9f74:	2200      	movs	r2, #0
    9f76:	801a      	strh	r2, [r3, #0]
    9f78:	e014      	b.n	9fa4 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    9f7a:	2310      	movs	r3, #16
    9f7c:	18fb      	adds	r3, r7, r3
    9f7e:	0018      	movs	r0, r3
    9f80:	4b37      	ldr	r3, [pc, #220]	; (a060 <mmc_cmd8+0x11c>)
    9f82:	4798      	blx	r3
    9f84:	0003      	movs	r3, r0
    9f86:	001a      	movs	r2, r3
    9f88:	2301      	movs	r3, #1
    9f8a:	4053      	eors	r3, r2
    9f8c:	b2db      	uxtb	r3, r3
    9f8e:	2b00      	cmp	r3, #0
    9f90:	d001      	beq.n	9f96 <mmc_cmd8+0x52>
			return false;
    9f92:	2300      	movs	r3, #0
    9f94:	e05b      	b.n	a04e <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    9f96:	2316      	movs	r3, #22
    9f98:	18fb      	adds	r3, r7, r3
    9f9a:	881a      	ldrh	r2, [r3, #0]
    9f9c:	2316      	movs	r3, #22
    9f9e:	18fb      	adds	r3, r7, r3
    9fa0:	3201      	adds	r2, #1
    9fa2:	801a      	strh	r2, [r3, #0]
    9fa4:	2316      	movs	r3, #22
    9fa6:	18fb      	adds	r3, r7, r3
    9fa8:	881b      	ldrh	r3, [r3, #0]
    9faa:	2b31      	cmp	r3, #49	; 0x31
    9fac:	d9e5      	bls.n	9f7a <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    9fae:	693b      	ldr	r3, [r7, #16]
    9fb0:	b2db      	uxtb	r3, r3
    9fb2:	2202      	movs	r2, #2
    9fb4:	4013      	ands	r3, r2
    9fb6:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    9fb8:	687b      	ldr	r3, [r7, #4]
    9fba:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    9fbc:	4b29      	ldr	r3, [pc, #164]	; (a064 <mmc_cmd8+0x120>)
    9fbe:	681b      	ldr	r3, [r3, #0]
    9fc0:	330e      	adds	r3, #14
    9fc2:	0018      	movs	r0, r3
    9fc4:	230c      	movs	r3, #12
    9fc6:	223e      	movs	r2, #62	; 0x3e
    9fc8:	2180      	movs	r1, #128	; 0x80
    9fca:	4c27      	ldr	r4, [pc, #156]	; (a068 <mmc_cmd8+0x124>)
    9fcc:	47a0      	blx	r4
    9fce:	0002      	movs	r2, r0
    9fd0:	4b26      	ldr	r3, [pc, #152]	; (a06c <mmc_cmd8+0x128>)
    9fd2:	429a      	cmp	r2, r3
    9fd4:	d135      	bne.n	a042 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    9fd6:	e014      	b.n	a002 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    9fd8:	230c      	movs	r3, #12
    9fda:	18fb      	adds	r3, r7, r3
    9fdc:	0018      	movs	r0, r3
    9fde:	4b20      	ldr	r3, [pc, #128]	; (a060 <mmc_cmd8+0x11c>)
    9fe0:	4798      	blx	r3
    9fe2:	0003      	movs	r3, r0
    9fe4:	001a      	movs	r2, r3
    9fe6:	2301      	movs	r3, #1
    9fe8:	4053      	eors	r3, r2
    9fea:	b2db      	uxtb	r3, r3
    9fec:	2b00      	cmp	r3, #0
    9fee:	d001      	beq.n	9ff4 <mmc_cmd8+0xb0>
				return false;
    9ff0:	2300      	movs	r3, #0
    9ff2:	e02c      	b.n	a04e <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    9ff4:	2316      	movs	r3, #22
    9ff6:	18fb      	adds	r3, r7, r3
    9ff8:	881a      	ldrh	r2, [r3, #0]
    9ffa:	2316      	movs	r3, #22
    9ffc:	18fb      	adds	r3, r7, r3
    9ffe:	3201      	adds	r2, #1
    a000:	801a      	strh	r2, [r3, #0]
    a002:	2316      	movs	r3, #22
    a004:	18fb      	adds	r3, r7, r3
    a006:	881b      	ldrh	r3, [r3, #0]
    a008:	2b35      	cmp	r3, #53	; 0x35
    a00a:	d9e5      	bls.n	9fd8 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    a00c:	4b15      	ldr	r3, [pc, #84]	; (a064 <mmc_cmd8+0x120>)
    a00e:	681b      	ldr	r3, [r3, #0]
    a010:	68fa      	ldr	r2, [r7, #12]
    a012:	0852      	lsrs	r2, r2, #1
    a014:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    a016:	e014      	b.n	a042 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    a018:	230c      	movs	r3, #12
    a01a:	18fb      	adds	r3, r7, r3
    a01c:	0018      	movs	r0, r3
    a01e:	4b10      	ldr	r3, [pc, #64]	; (a060 <mmc_cmd8+0x11c>)
    a020:	4798      	blx	r3
    a022:	0003      	movs	r3, r0
    a024:	001a      	movs	r2, r3
    a026:	2301      	movs	r3, #1
    a028:	4053      	eors	r3, r2
    a02a:	b2db      	uxtb	r3, r3
    a02c:	2b00      	cmp	r3, #0
    a02e:	d001      	beq.n	a034 <mmc_cmd8+0xf0>
			return false;
    a030:	2300      	movs	r3, #0
    a032:	e00c      	b.n	a04e <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    a034:	2316      	movs	r3, #22
    a036:	18fb      	adds	r3, r7, r3
    a038:	881a      	ldrh	r2, [r3, #0]
    a03a:	2316      	movs	r3, #22
    a03c:	18fb      	adds	r3, r7, r3
    a03e:	3201      	adds	r2, #1
    a040:	801a      	strh	r2, [r3, #0]
    a042:	2316      	movs	r3, #22
    a044:	18fb      	adds	r3, r7, r3
    a046:	881b      	ldrh	r3, [r3, #0]
    a048:	2b7f      	cmp	r3, #127	; 0x7f
    a04a:	d9e5      	bls.n	a018 <mmc_cmd8+0xd4>
		}
	}
	return true;
    a04c:	2301      	movs	r3, #1
}
    a04e:	0018      	movs	r0, r3
    a050:	46bd      	mov	sp, r7
    a052:	b007      	add	sp, #28
    a054:	bd90      	pop	{r4, r7, pc}
    a056:	46c0      	nop			; (mov r8, r8)
    a058:	00081108 	.word	0x00081108
    a05c:	0000b7dd 	.word	0x0000b7dd
    a060:	0000ba09 	.word	0x0000ba09
    a064:	20003cac 	.word	0x20003cac
    a068:	00009bdd 	.word	0x00009bdd
    a06c:	00000fff 	.word	0x00000fff

0000a070 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    a070:	b590      	push	{r4, r7, lr}
    a072:	b083      	sub	sp, #12
    a074:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    a076:	4b15      	ldr	r3, [pc, #84]	; (a0cc <sd_mmc_cmd9_spi+0x5c>)
    a078:	681b      	ldr	r3, [r3, #0]
    a07a:	891b      	ldrh	r3, [r3, #8]
    a07c:	0419      	lsls	r1, r3, #16
    a07e:	4814      	ldr	r0, [pc, #80]	; (a0d0 <sd_mmc_cmd9_spi+0x60>)
    a080:	2301      	movs	r3, #1
    a082:	9300      	str	r3, [sp, #0]
    a084:	2301      	movs	r3, #1
    a086:	2210      	movs	r2, #16
    a088:	4c12      	ldr	r4, [pc, #72]	; (a0d4 <sd_mmc_cmd9_spi+0x64>)
    a08a:	47a0      	blx	r4
    a08c:	0003      	movs	r3, r0
    a08e:	001a      	movs	r2, r3
    a090:	2301      	movs	r3, #1
    a092:	4053      	eors	r3, r2
    a094:	b2db      	uxtb	r3, r3
    a096:	2b00      	cmp	r3, #0
    a098:	d001      	beq.n	a09e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    a09a:	2300      	movs	r3, #0
    a09c:	e012      	b.n	a0c4 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    a09e:	4b0b      	ldr	r3, [pc, #44]	; (a0cc <sd_mmc_cmd9_spi+0x5c>)
    a0a0:	681b      	ldr	r3, [r3, #0]
    a0a2:	330e      	adds	r3, #14
    a0a4:	2101      	movs	r1, #1
    a0a6:	0018      	movs	r0, r3
    a0a8:	4b0b      	ldr	r3, [pc, #44]	; (a0d8 <sd_mmc_cmd9_spi+0x68>)
    a0aa:	4798      	blx	r3
    a0ac:	0003      	movs	r3, r0
    a0ae:	001a      	movs	r2, r3
    a0b0:	2301      	movs	r3, #1
    a0b2:	4053      	eors	r3, r2
    a0b4:	b2db      	uxtb	r3, r3
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	d001      	beq.n	a0be <sd_mmc_cmd9_spi+0x4e>
		return false;
    a0ba:	2300      	movs	r3, #0
    a0bc:	e002      	b.n	a0c4 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    a0be:	4b07      	ldr	r3, [pc, #28]	; (a0dc <sd_mmc_cmd9_spi+0x6c>)
    a0c0:	4798      	blx	r3
    a0c2:	0003      	movs	r3, r0
}
    a0c4:	0018      	movs	r0, r3
    a0c6:	46bd      	mov	sp, r7
    a0c8:	b001      	add	sp, #4
    a0ca:	bd90      	pop	{r4, r7, pc}
    a0cc:	20003cac 	.word	0x20003cac
    a0d0:	00081109 	.word	0x00081109
    a0d4:	0000b7dd 	.word	0x0000b7dd
    a0d8:	0000baad 	.word	0x0000baad
    a0dc:	0000bb51 	.word	0x0000bb51

0000a0e0 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    a0e0:	b5b0      	push	{r4, r5, r7, lr}
    a0e2:	b084      	sub	sp, #16
    a0e4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    a0e6:	4b45      	ldr	r3, [pc, #276]	; (a1fc <mmc_decode_csd+0x11c>)
    a0e8:	681b      	ldr	r3, [r3, #0]
    a0ea:	330e      	adds	r3, #14
    a0ec:	0018      	movs	r0, r3
    a0ee:	2304      	movs	r3, #4
    a0f0:	227a      	movs	r2, #122	; 0x7a
    a0f2:	2180      	movs	r1, #128	; 0x80
    a0f4:	4c42      	ldr	r4, [pc, #264]	; (a200 <mmc_decode_csd+0x120>)
    a0f6:	47a0      	blx	r4
    a0f8:	0003      	movs	r3, r0
    a0fa:	2b02      	cmp	r3, #2
    a0fc:	d011      	beq.n	a122 <mmc_decode_csd+0x42>
    a0fe:	d802      	bhi.n	a106 <mmc_decode_csd+0x26>
    a100:	2b01      	cmp	r3, #1
    a102:	d009      	beq.n	a118 <mmc_decode_csd+0x38>
    a104:	e003      	b.n	a10e <mmc_decode_csd+0x2e>
    a106:	2b03      	cmp	r3, #3
    a108:	d010      	beq.n	a12c <mmc_decode_csd+0x4c>
    a10a:	2b04      	cmp	r3, #4
    a10c:	d013      	beq.n	a136 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    a10e:	4b3b      	ldr	r3, [pc, #236]	; (a1fc <mmc_decode_csd+0x11c>)
    a110:	681b      	ldr	r3, [r3, #0]
    a112:	2212      	movs	r2, #18
    a114:	731a      	strb	r2, [r3, #12]
		break;
    a116:	e013      	b.n	a140 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    a118:	4b38      	ldr	r3, [pc, #224]	; (a1fc <mmc_decode_csd+0x11c>)
    a11a:	681b      	ldr	r3, [r3, #0]
    a11c:	2214      	movs	r2, #20
    a11e:	731a      	strb	r2, [r3, #12]
		break;
    a120:	e00e      	b.n	a140 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    a122:	4b36      	ldr	r3, [pc, #216]	; (a1fc <mmc_decode_csd+0x11c>)
    a124:	681b      	ldr	r3, [r3, #0]
    a126:	2222      	movs	r2, #34	; 0x22
    a128:	731a      	strb	r2, [r3, #12]
		break;
    a12a:	e009      	b.n	a140 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    a12c:	4b33      	ldr	r3, [pc, #204]	; (a1fc <mmc_decode_csd+0x11c>)
    a12e:	681b      	ldr	r3, [r3, #0]
    a130:	2230      	movs	r2, #48	; 0x30
    a132:	731a      	strb	r2, [r3, #12]
		break;
    a134:	e004      	b.n	a140 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    a136:	4b31      	ldr	r3, [pc, #196]	; (a1fc <mmc_decode_csd+0x11c>)
    a138:	681b      	ldr	r3, [r3, #0]
    a13a:	2240      	movs	r2, #64	; 0x40
    a13c:	731a      	strb	r2, [r3, #12]
		break;
    a13e:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    a140:	4b2e      	ldr	r3, [pc, #184]	; (a1fc <mmc_decode_csd+0x11c>)
    a142:	681b      	ldr	r3, [r3, #0]
    a144:	330e      	adds	r3, #14
    a146:	0018      	movs	r0, r3
    a148:	2308      	movs	r3, #8
    a14a:	2260      	movs	r2, #96	; 0x60
    a14c:	2180      	movs	r1, #128	; 0x80
    a14e:	4c2c      	ldr	r4, [pc, #176]	; (a200 <mmc_decode_csd+0x120>)
    a150:	47a0      	blx	r4
    a152:	0003      	movs	r3, r0
    a154:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a156:	68fb      	ldr	r3, [r7, #12]
    a158:	2207      	movs	r2, #7
    a15a:	401a      	ands	r2, r3
    a15c:	4b29      	ldr	r3, [pc, #164]	; (a204 <mmc_decode_csd+0x124>)
    a15e:	0092      	lsls	r2, r2, #2
    a160:	58d3      	ldr	r3, [r2, r3]
    a162:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    a164:	68fb      	ldr	r3, [r7, #12]
    a166:	08db      	lsrs	r3, r3, #3
    a168:	220f      	movs	r2, #15
    a16a:	401a      	ands	r2, r3
    a16c:	4b26      	ldr	r3, [pc, #152]	; (a208 <mmc_decode_csd+0x128>)
    a16e:	0092      	lsls	r2, r2, #2
    a170:	58d3      	ldr	r3, [r2, r3]
    a172:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    a174:	4b21      	ldr	r3, [pc, #132]	; (a1fc <mmc_decode_csd+0x11c>)
    a176:	681b      	ldr	r3, [r3, #0]
    a178:	68ba      	ldr	r2, [r7, #8]
    a17a:	6879      	ldr	r1, [r7, #4]
    a17c:	434a      	muls	r2, r1
    a17e:	21fa      	movs	r1, #250	; 0xfa
    a180:	0089      	lsls	r1, r1, #2
    a182:	434a      	muls	r2, r1
    a184:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    a186:	4b1d      	ldr	r3, [pc, #116]	; (a1fc <mmc_decode_csd+0x11c>)
    a188:	681b      	ldr	r3, [r3, #0]
    a18a:	330e      	adds	r3, #14
    a18c:	0018      	movs	r0, r3
    a18e:	230c      	movs	r3, #12
    a190:	223e      	movs	r2, #62	; 0x3e
    a192:	2180      	movs	r1, #128	; 0x80
    a194:	4c1a      	ldr	r4, [pc, #104]	; (a200 <mmc_decode_csd+0x120>)
    a196:	47a0      	blx	r4
    a198:	0002      	movs	r2, r0
    a19a:	4b1c      	ldr	r3, [pc, #112]	; (a20c <mmc_decode_csd+0x12c>)
    a19c:	429a      	cmp	r2, r3
    a19e:	d028      	beq.n	a1f2 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    a1a0:	4b16      	ldr	r3, [pc, #88]	; (a1fc <mmc_decode_csd+0x11c>)
    a1a2:	681b      	ldr	r3, [r3, #0]
    a1a4:	330e      	adds	r3, #14
    a1a6:	0018      	movs	r0, r3
    a1a8:	230c      	movs	r3, #12
    a1aa:	223e      	movs	r2, #62	; 0x3e
    a1ac:	2180      	movs	r1, #128	; 0x80
    a1ae:	4c14      	ldr	r4, [pc, #80]	; (a200 <mmc_decode_csd+0x120>)
    a1b0:	47a0      	blx	r4
    a1b2:	0003      	movs	r3, r0
    a1b4:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    a1b6:	4b11      	ldr	r3, [pc, #68]	; (a1fc <mmc_decode_csd+0x11c>)
    a1b8:	681b      	ldr	r3, [r3, #0]
    a1ba:	330e      	adds	r3, #14
    a1bc:	0018      	movs	r0, r3
    a1be:	2303      	movs	r3, #3
    a1c0:	222f      	movs	r2, #47	; 0x2f
    a1c2:	2180      	movs	r1, #128	; 0x80
    a1c4:	4d0e      	ldr	r5, [pc, #56]	; (a200 <mmc_decode_csd+0x120>)
    a1c6:	47a8      	blx	r5
    a1c8:	0003      	movs	r3, r0
    a1ca:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    a1cc:	409c      	lsls	r4, r3
    a1ce:	0023      	movs	r3, r4
    a1d0:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    a1d2:	4b0a      	ldr	r3, [pc, #40]	; (a1fc <mmc_decode_csd+0x11c>)
    a1d4:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    a1d6:	4b09      	ldr	r3, [pc, #36]	; (a1fc <mmc_decode_csd+0x11c>)
    a1d8:	681b      	ldr	r3, [r3, #0]
    a1da:	330e      	adds	r3, #14
    a1dc:	0018      	movs	r0, r3
    a1de:	2304      	movs	r3, #4
    a1e0:	2250      	movs	r2, #80	; 0x50
    a1e2:	2180      	movs	r1, #128	; 0x80
    a1e4:	4d06      	ldr	r5, [pc, #24]	; (a200 <mmc_decode_csd+0x120>)
    a1e6:	47a8      	blx	r5
    a1e8:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    a1ea:	683b      	ldr	r3, [r7, #0]
    a1ec:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    a1ee:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    a1f0:	6063      	str	r3, [r4, #4]
	}
}
    a1f2:	46c0      	nop			; (mov r8, r8)
    a1f4:	46bd      	mov	sp, r7
    a1f6:	b004      	add	sp, #16
    a1f8:	bdb0      	pop	{r4, r5, r7, pc}
    a1fa:	46c0      	nop			; (mov r8, r8)
    a1fc:	20003cac 	.word	0x20003cac
    a200:	00009bdd 	.word	0x00009bdd
    a204:	00023654 	.word	0x00023654
    a208:	000236b0 	.word	0x000236b0
    a20c:	00000fff 	.word	0x00000fff

0000a210 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    a210:	b5b0      	push	{r4, r5, r7, lr}
    a212:	b084      	sub	sp, #16
    a214:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    a216:	4b35      	ldr	r3, [pc, #212]	; (a2ec <sd_decode_csd+0xdc>)
    a218:	681b      	ldr	r3, [r3, #0]
    a21a:	330e      	adds	r3, #14
    a21c:	0018      	movs	r0, r3
    a21e:	2308      	movs	r3, #8
    a220:	2260      	movs	r2, #96	; 0x60
    a222:	2180      	movs	r1, #128	; 0x80
    a224:	4c32      	ldr	r4, [pc, #200]	; (a2f0 <sd_decode_csd+0xe0>)
    a226:	47a0      	blx	r4
    a228:	0003      	movs	r3, r0
    a22a:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a22c:	68fb      	ldr	r3, [r7, #12]
    a22e:	2207      	movs	r2, #7
    a230:	401a      	ands	r2, r3
    a232:	4b30      	ldr	r3, [pc, #192]	; (a2f4 <sd_decode_csd+0xe4>)
    a234:	0092      	lsls	r2, r2, #2
    a236:	58d3      	ldr	r3, [r2, r3]
    a238:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    a23a:	68fb      	ldr	r3, [r7, #12]
    a23c:	08db      	lsrs	r3, r3, #3
    a23e:	220f      	movs	r2, #15
    a240:	401a      	ands	r2, r3
    a242:	4b2d      	ldr	r3, [pc, #180]	; (a2f8 <sd_decode_csd+0xe8>)
    a244:	0092      	lsls	r2, r2, #2
    a246:	58d3      	ldr	r3, [r2, r3]
    a248:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    a24a:	4b28      	ldr	r3, [pc, #160]	; (a2ec <sd_decode_csd+0xdc>)
    a24c:	681b      	ldr	r3, [r3, #0]
    a24e:	68ba      	ldr	r2, [r7, #8]
    a250:	6879      	ldr	r1, [r7, #4]
    a252:	434a      	muls	r2, r1
    a254:	21fa      	movs	r1, #250	; 0xfa
    a256:	0089      	lsls	r1, r1, #2
    a258:	434a      	muls	r2, r1
    a25a:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    a25c:	4b23      	ldr	r3, [pc, #140]	; (a2ec <sd_decode_csd+0xdc>)
    a25e:	681b      	ldr	r3, [r3, #0]
    a260:	330e      	adds	r3, #14
    a262:	0018      	movs	r0, r3
    a264:	2302      	movs	r3, #2
    a266:	227e      	movs	r2, #126	; 0x7e
    a268:	2180      	movs	r1, #128	; 0x80
    a26a:	4c21      	ldr	r4, [pc, #132]	; (a2f0 <sd_decode_csd+0xe0>)
    a26c:	47a0      	blx	r4
    a26e:	1e03      	subs	r3, r0, #0
    a270:	d00f      	beq.n	a292 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    a272:	4b1e      	ldr	r3, [pc, #120]	; (a2ec <sd_decode_csd+0xdc>)
    a274:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    a276:	4b1d      	ldr	r3, [pc, #116]	; (a2ec <sd_decode_csd+0xdc>)
    a278:	681b      	ldr	r3, [r3, #0]
    a27a:	330e      	adds	r3, #14
    a27c:	0018      	movs	r0, r3
    a27e:	2316      	movs	r3, #22
    a280:	2230      	movs	r2, #48	; 0x30
    a282:	2180      	movs	r1, #128	; 0x80
    a284:	4d1a      	ldr	r5, [pc, #104]	; (a2f0 <sd_decode_csd+0xe0>)
    a286:	47a8      	blx	r5
    a288:	0003      	movs	r3, r0
				* 512;
    a28a:	3301      	adds	r3, #1
    a28c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    a28e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    a290:	e028      	b.n	a2e4 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    a292:	4b16      	ldr	r3, [pc, #88]	; (a2ec <sd_decode_csd+0xdc>)
    a294:	681b      	ldr	r3, [r3, #0]
    a296:	330e      	adds	r3, #14
    a298:	0018      	movs	r0, r3
    a29a:	230c      	movs	r3, #12
    a29c:	223e      	movs	r2, #62	; 0x3e
    a29e:	2180      	movs	r1, #128	; 0x80
    a2a0:	4c13      	ldr	r4, [pc, #76]	; (a2f0 <sd_decode_csd+0xe0>)
    a2a2:	47a0      	blx	r4
    a2a4:	0003      	movs	r3, r0
    a2a6:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    a2a8:	4b10      	ldr	r3, [pc, #64]	; (a2ec <sd_decode_csd+0xdc>)
    a2aa:	681b      	ldr	r3, [r3, #0]
    a2ac:	330e      	adds	r3, #14
    a2ae:	0018      	movs	r0, r3
    a2b0:	2303      	movs	r3, #3
    a2b2:	222f      	movs	r2, #47	; 0x2f
    a2b4:	2180      	movs	r1, #128	; 0x80
    a2b6:	4d0e      	ldr	r5, [pc, #56]	; (a2f0 <sd_decode_csd+0xe0>)
    a2b8:	47a8      	blx	r5
    a2ba:	0003      	movs	r3, r0
    a2bc:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    a2be:	409c      	lsls	r4, r3
    a2c0:	0023      	movs	r3, r4
    a2c2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    a2c4:	4b09      	ldr	r3, [pc, #36]	; (a2ec <sd_decode_csd+0xdc>)
    a2c6:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    a2c8:	4b08      	ldr	r3, [pc, #32]	; (a2ec <sd_decode_csd+0xdc>)
    a2ca:	681b      	ldr	r3, [r3, #0]
    a2cc:	330e      	adds	r3, #14
    a2ce:	0018      	movs	r0, r3
    a2d0:	2304      	movs	r3, #4
    a2d2:	2250      	movs	r2, #80	; 0x50
    a2d4:	2180      	movs	r1, #128	; 0x80
    a2d6:	4d06      	ldr	r5, [pc, #24]	; (a2f0 <sd_decode_csd+0xe0>)
    a2d8:	47a8      	blx	r5
    a2da:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    a2dc:	683b      	ldr	r3, [r7, #0]
    a2de:	4093      	lsls	r3, r2
				/ 1024;
    a2e0:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    a2e2:	6063      	str	r3, [r4, #4]
}
    a2e4:	46c0      	nop			; (mov r8, r8)
    a2e6:	46bd      	mov	sp, r7
    a2e8:	b004      	add	sp, #16
    a2ea:	bdb0      	pop	{r4, r5, r7, pc}
    a2ec:	20003cac 	.word	0x20003cac
    a2f0:	00009bdd 	.word	0x00009bdd
    a2f4:	00023654 	.word	0x00023654
    a2f8:	00023670 	.word	0x00023670

0000a2fc <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    a2fc:	b580      	push	{r7, lr}
    a2fe:	b082      	sub	sp, #8
    a300:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    a302:	4b11      	ldr	r3, [pc, #68]	; (a348 <sd_mmc_cmd13+0x4c>)
    a304:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    a306:	4b11      	ldr	r3, [pc, #68]	; (a34c <sd_mmc_cmd13+0x50>)
    a308:	2100      	movs	r1, #0
    a30a:	0018      	movs	r0, r3
    a30c:	4b10      	ldr	r3, [pc, #64]	; (a350 <sd_mmc_cmd13+0x54>)
    a30e:	4798      	blx	r3
    a310:	0003      	movs	r3, r0
    a312:	001a      	movs	r2, r3
    a314:	2301      	movs	r3, #1
    a316:	4053      	eors	r3, r2
    a318:	b2db      	uxtb	r3, r3
    a31a:	2b00      	cmp	r3, #0
    a31c:	d001      	beq.n	a322 <sd_mmc_cmd13+0x26>
				return false;
    a31e:	2300      	movs	r3, #0
    a320:	e00e      	b.n	a340 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    a322:	4b0c      	ldr	r3, [pc, #48]	; (a354 <sd_mmc_cmd13+0x58>)
    a324:	4798      	blx	r3
    a326:	0002      	movs	r2, r0
    a328:	23ff      	movs	r3, #255	; 0xff
    a32a:	4013      	ands	r3, r2
    a32c:	d006      	beq.n	a33c <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    a32e:	687b      	ldr	r3, [r7, #4]
    a330:	1e5a      	subs	r2, r3, #1
    a332:	607a      	str	r2, [r7, #4]
    a334:	2b00      	cmp	r3, #0
    a336:	d1e6      	bne.n	a306 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    a338:	2300      	movs	r3, #0
    a33a:	e001      	b.n	a340 <sd_mmc_cmd13+0x44>
				break;
    a33c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    a33e:	2301      	movs	r3, #1
}
    a340:	0018      	movs	r0, r3
    a342:	46bd      	mov	sp, r7
    a344:	b002      	add	sp, #8
    a346:	bd80      	pop	{r7, pc}
    a348:	00030d40 	.word	0x00030d40
    a34c:	00001b0d 	.word	0x00001b0d
    a350:	0000b7b5 	.word	0x0000b7b5
    a354:	0000b9f5 	.word	0x0000b9f5

0000a358 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    a358:	b590      	push	{r4, r7, lr}
    a35a:	b085      	sub	sp, #20
    a35c:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    a35e:	4b38      	ldr	r3, [pc, #224]	; (a440 <sd_acmd51+0xe8>)
    a360:	681b      	ldr	r3, [r3, #0]
    a362:	891b      	ldrh	r3, [r3, #8]
    a364:	041b      	lsls	r3, r3, #16
    a366:	4a37      	ldr	r2, [pc, #220]	; (a444 <sd_acmd51+0xec>)
    a368:	0019      	movs	r1, r3
    a36a:	0010      	movs	r0, r2
    a36c:	4b36      	ldr	r3, [pc, #216]	; (a448 <sd_acmd51+0xf0>)
    a36e:	4798      	blx	r3
    a370:	0003      	movs	r3, r0
    a372:	001a      	movs	r2, r3
    a374:	2301      	movs	r3, #1
    a376:	4053      	eors	r3, r2
    a378:	b2db      	uxtb	r3, r3
    a37a:	2b00      	cmp	r3, #0
    a37c:	d001      	beq.n	a382 <sd_acmd51+0x2a>
		return false;
    a37e:	2300      	movs	r3, #0
    a380:	e059      	b.n	a436 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    a382:	4832      	ldr	r0, [pc, #200]	; (a44c <sd_acmd51+0xf4>)
    a384:	2301      	movs	r3, #1
    a386:	9300      	str	r3, [sp, #0]
    a388:	2301      	movs	r3, #1
    a38a:	2208      	movs	r2, #8
    a38c:	2100      	movs	r1, #0
    a38e:	4c30      	ldr	r4, [pc, #192]	; (a450 <sd_acmd51+0xf8>)
    a390:	47a0      	blx	r4
    a392:	0003      	movs	r3, r0
    a394:	001a      	movs	r2, r3
    a396:	2301      	movs	r3, #1
    a398:	4053      	eors	r3, r2
    a39a:	b2db      	uxtb	r3, r3
    a39c:	2b00      	cmp	r3, #0
    a39e:	d001      	beq.n	a3a4 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    a3a0:	2300      	movs	r3, #0
    a3a2:	e048      	b.n	a436 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    a3a4:	003b      	movs	r3, r7
    a3a6:	2101      	movs	r1, #1
    a3a8:	0018      	movs	r0, r3
    a3aa:	4b2a      	ldr	r3, [pc, #168]	; (a454 <sd_acmd51+0xfc>)
    a3ac:	4798      	blx	r3
    a3ae:	0003      	movs	r3, r0
    a3b0:	001a      	movs	r2, r3
    a3b2:	2301      	movs	r3, #1
    a3b4:	4053      	eors	r3, r2
    a3b6:	b2db      	uxtb	r3, r3
    a3b8:	2b00      	cmp	r3, #0
    a3ba:	d001      	beq.n	a3c0 <sd_acmd51+0x68>
		return false;
    a3bc:	2300      	movs	r3, #0
    a3be:	e03a      	b.n	a436 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    a3c0:	4b25      	ldr	r3, [pc, #148]	; (a458 <sd_acmd51+0x100>)
    a3c2:	4798      	blx	r3
    a3c4:	0003      	movs	r3, r0
    a3c6:	001a      	movs	r2, r3
    a3c8:	2301      	movs	r3, #1
    a3ca:	4053      	eors	r3, r2
    a3cc:	b2db      	uxtb	r3, r3
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	d001      	beq.n	a3d6 <sd_acmd51+0x7e>
		return false;
    a3d2:	2300      	movs	r3, #0
    a3d4:	e02f      	b.n	a436 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    a3d6:	0038      	movs	r0, r7
    a3d8:	2304      	movs	r3, #4
    a3da:	2238      	movs	r2, #56	; 0x38
    a3dc:	2140      	movs	r1, #64	; 0x40
    a3de:	4c1f      	ldr	r4, [pc, #124]	; (a45c <sd_acmd51+0x104>)
    a3e0:	47a0      	blx	r4
    a3e2:	0003      	movs	r3, r0
    a3e4:	2b01      	cmp	r3, #1
    a3e6:	d008      	beq.n	a3fa <sd_acmd51+0xa2>
    a3e8:	d302      	bcc.n	a3f0 <sd_acmd51+0x98>
    a3ea:	2b02      	cmp	r3, #2
    a3ec:	d00a      	beq.n	a404 <sd_acmd51+0xac>
    a3ee:	e01c      	b.n	a42a <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    a3f0:	4b13      	ldr	r3, [pc, #76]	; (a440 <sd_acmd51+0xe8>)
    a3f2:	681b      	ldr	r3, [r3, #0]
    a3f4:	2210      	movs	r2, #16
    a3f6:	731a      	strb	r2, [r3, #12]
		break;
    a3f8:	e01c      	b.n	a434 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    a3fa:	4b11      	ldr	r3, [pc, #68]	; (a440 <sd_acmd51+0xe8>)
    a3fc:	681b      	ldr	r3, [r3, #0]
    a3fe:	221a      	movs	r2, #26
    a400:	731a      	strb	r2, [r3, #12]
		break;
    a402:	e017      	b.n	a434 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    a404:	0038      	movs	r0, r7
    a406:	2301      	movs	r3, #1
    a408:	222f      	movs	r2, #47	; 0x2f
    a40a:	2140      	movs	r1, #64	; 0x40
    a40c:	4c13      	ldr	r4, [pc, #76]	; (a45c <sd_acmd51+0x104>)
    a40e:	47a0      	blx	r4
    a410:	0003      	movs	r3, r0
    a412:	2b01      	cmp	r3, #1
    a414:	d104      	bne.n	a420 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    a416:	4b0a      	ldr	r3, [pc, #40]	; (a440 <sd_acmd51+0xe8>)
    a418:	681b      	ldr	r3, [r3, #0]
    a41a:	2230      	movs	r2, #48	; 0x30
    a41c:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    a41e:	e009      	b.n	a434 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    a420:	4b07      	ldr	r3, [pc, #28]	; (a440 <sd_acmd51+0xe8>)
    a422:	681b      	ldr	r3, [r3, #0]
    a424:	2220      	movs	r2, #32
    a426:	731a      	strb	r2, [r3, #12]
		break;
    a428:	e004      	b.n	a434 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    a42a:	4b05      	ldr	r3, [pc, #20]	; (a440 <sd_acmd51+0xe8>)
    a42c:	681b      	ldr	r3, [r3, #0]
    a42e:	2210      	movs	r2, #16
    a430:	731a      	strb	r2, [r3, #12]
		break;
    a432:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    a434:	2301      	movs	r3, #1
}
    a436:	0018      	movs	r0, r3
    a438:	46bd      	mov	sp, r7
    a43a:	b003      	add	sp, #12
    a43c:	bd90      	pop	{r4, r7, pc}
    a43e:	46c0      	nop			; (mov r8, r8)
    a440:	20003cac 	.word	0x20003cac
    a444:	00001137 	.word	0x00001137
    a448:	0000b7b5 	.word	0x0000b7b5
    a44c:	00081133 	.word	0x00081133
    a450:	0000b7dd 	.word	0x0000b7dd
    a454:	0000baad 	.word	0x0000baad
    a458:	0000bb51 	.word	0x0000bb51
    a45c:	00009bdd 	.word	0x00009bdd

0000a460 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    a460:	b580      	push	{r7, lr}
    a462:	b082      	sub	sp, #8
    a464:	af00      	add	r7, sp, #0
    a466:	0002      	movs	r2, r0
    a468:	1dfb      	adds	r3, r7, #7
    a46a:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    a46c:	1dfb      	adds	r3, r7, #7
    a46e:	781b      	ldrb	r3, [r3, #0]
    a470:	2b00      	cmp	r3, #0
    a472:	d001      	beq.n	a478 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    a474:	2304      	movs	r3, #4
    a476:	e047      	b.n	a508 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a478:	1dfb      	adds	r3, r7, #7
    a47a:	781b      	ldrb	r3, [r3, #0]
    a47c:	4a24      	ldr	r2, [pc, #144]	; (a510 <sd_mmc_select_slot+0xb0>)
    a47e:	015b      	lsls	r3, r3, #5
    a480:	18d3      	adds	r3, r2, r3
    a482:	330a      	adds	r3, #10
    a484:	781b      	ldrb	r3, [r3, #0]
    a486:	2b04      	cmp	r3, #4
    a488:	d008      	beq.n	a49c <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    a48a:	1dfb      	adds	r3, r7, #7
    a48c:	781b      	ldrb	r3, [r3, #0]
    a48e:	4a20      	ldr	r2, [pc, #128]	; (a510 <sd_mmc_select_slot+0xb0>)
    a490:	015b      	lsls	r3, r3, #5
    a492:	18d3      	adds	r3, r2, r3
    a494:	330a      	adds	r3, #10
    a496:	781b      	ldrb	r3, [r3, #0]
    a498:	2b03      	cmp	r3, #3
    a49a:	d11d      	bne.n	a4d8 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a49c:	1dfb      	adds	r3, r7, #7
    a49e:	781b      	ldrb	r3, [r3, #0]
    a4a0:	4a1b      	ldr	r2, [pc, #108]	; (a510 <sd_mmc_select_slot+0xb0>)
    a4a2:	015b      	lsls	r3, r3, #5
    a4a4:	18d3      	adds	r3, r2, r3
    a4a6:	330a      	adds	r3, #10
    a4a8:	2202      	movs	r2, #2
    a4aa:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a4ac:	1dfb      	adds	r3, r7, #7
    a4ae:	781a      	ldrb	r2, [r3, #0]
    a4b0:	4b17      	ldr	r3, [pc, #92]	; (a510 <sd_mmc_select_slot+0xb0>)
    a4b2:	0152      	lsls	r2, r2, #5
    a4b4:	4917      	ldr	r1, [pc, #92]	; (a514 <sd_mmc_select_slot+0xb4>)
    a4b6:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    a4b8:	1dfb      	adds	r3, r7, #7
    a4ba:	781b      	ldrb	r3, [r3, #0]
    a4bc:	4a14      	ldr	r2, [pc, #80]	; (a510 <sd_mmc_select_slot+0xb0>)
    a4be:	015b      	lsls	r3, r3, #5
    a4c0:	18d3      	adds	r3, r2, r3
    a4c2:	330d      	adds	r3, #13
    a4c4:	2201      	movs	r2, #1
    a4c6:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    a4c8:	1dfb      	adds	r3, r7, #7
    a4ca:	781b      	ldrb	r3, [r3, #0]
    a4cc:	4a10      	ldr	r2, [pc, #64]	; (a510 <sd_mmc_select_slot+0xb0>)
    a4ce:	015b      	lsls	r3, r3, #5
    a4d0:	18d3      	adds	r3, r2, r3
    a4d2:	331e      	adds	r3, #30
    a4d4:	2200      	movs	r2, #0
    a4d6:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    a4d8:	4b0f      	ldr	r3, [pc, #60]	; (a518 <sd_mmc_select_slot+0xb8>)
    a4da:	1dfa      	adds	r2, r7, #7
    a4dc:	7812      	ldrb	r2, [r2, #0]
    a4de:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    a4e0:	1dfb      	adds	r3, r7, #7
    a4e2:	781b      	ldrb	r3, [r3, #0]
    a4e4:	015a      	lsls	r2, r3, #5
    a4e6:	4b0a      	ldr	r3, [pc, #40]	; (a510 <sd_mmc_select_slot+0xb0>)
    a4e8:	18d2      	adds	r2, r2, r3
    a4ea:	4b0c      	ldr	r3, [pc, #48]	; (a51c <sd_mmc_select_slot+0xbc>)
    a4ec:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    a4ee:	4b0c      	ldr	r3, [pc, #48]	; (a520 <sd_mmc_select_slot+0xc0>)
    a4f0:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    a4f2:	1dfb      	adds	r3, r7, #7
    a4f4:	781b      	ldrb	r3, [r3, #0]
    a4f6:	4a06      	ldr	r2, [pc, #24]	; (a510 <sd_mmc_select_slot+0xb0>)
    a4f8:	015b      	lsls	r3, r3, #5
    a4fa:	18d3      	adds	r3, r2, r3
    a4fc:	330a      	adds	r3, #10
    a4fe:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    a500:	3b02      	subs	r3, #2
    a502:	425a      	negs	r2, r3
    a504:	4153      	adcs	r3, r2
    a506:	b2db      	uxtb	r3, r3
}
    a508:	0018      	movs	r0, r3
    a50a:	46bd      	mov	sp, r7
    a50c:	b002      	add	sp, #8
    a50e:	bd80      	pop	{r7, pc}
    a510:	20003c88 	.word	0x20003c88
    a514:	00061a80 	.word	0x00061a80
    a518:	20003ca8 	.word	0x20003ca8
    a51c:	20003cac 	.word	0x20003cac
    a520:	0000a525 	.word	0x0000a525

0000a524 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    a524:	b5b0      	push	{r4, r5, r7, lr}
    a526:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a528:	4b09      	ldr	r3, [pc, #36]	; (a550 <sd_mmc_configure_slot+0x2c>)
    a52a:	7818      	ldrb	r0, [r3, #0]
    a52c:	4b09      	ldr	r3, [pc, #36]	; (a554 <sd_mmc_configure_slot+0x30>)
    a52e:	681b      	ldr	r3, [r3, #0]
    a530:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    a532:	4b08      	ldr	r3, [pc, #32]	; (a554 <sd_mmc_configure_slot+0x30>)
    a534:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a536:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    a538:	4b06      	ldr	r3, [pc, #24]	; (a554 <sd_mmc_configure_slot+0x30>)
    a53a:	681b      	ldr	r3, [r3, #0]
    a53c:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a53e:	1e5c      	subs	r4, r3, #1
    a540:	41a3      	sbcs	r3, r4
    a542:	b2db      	uxtb	r3, r3
    a544:	4c04      	ldr	r4, [pc, #16]	; (a558 <sd_mmc_configure_slot+0x34>)
    a546:	47a0      	blx	r4
}
    a548:	46c0      	nop			; (mov r8, r8)
    a54a:	46bd      	mov	sp, r7
    a54c:	bdb0      	pop	{r4, r5, r7, pc}
    a54e:	46c0      	nop			; (mov r8, r8)
    a550:	20003ca8 	.word	0x20003ca8
    a554:	20003cac 	.word	0x20003cac
    a558:	0000b69d 	.word	0x0000b69d

0000a55c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    a55c:	b580      	push	{r7, lr}
    a55e:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a560:	4b05      	ldr	r3, [pc, #20]	; (a578 <sd_mmc_deselect_slot+0x1c>)
    a562:	781b      	ldrb	r3, [r3, #0]
    a564:	2b00      	cmp	r3, #0
    a566:	d104      	bne.n	a572 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    a568:	4b03      	ldr	r3, [pc, #12]	; (a578 <sd_mmc_deselect_slot+0x1c>)
    a56a:	781b      	ldrb	r3, [r3, #0]
    a56c:	0018      	movs	r0, r3
    a56e:	4b03      	ldr	r3, [pc, #12]	; (a57c <sd_mmc_deselect_slot+0x20>)
    a570:	4798      	blx	r3
	}
}
    a572:	46c0      	nop			; (mov r8, r8)
    a574:	46bd      	mov	sp, r7
    a576:	bd80      	pop	{r7, pc}
    a578:	20003ca8 	.word	0x20003ca8
    a57c:	0000b725 	.word	0x0000b725

0000a580 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    a580:	b580      	push	{r7, lr}
    a582:	b082      	sub	sp, #8
    a584:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    a586:	1dfb      	adds	r3, r7, #7
    a588:	2200      	movs	r2, #0
    a58a:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    a58c:	4b59      	ldr	r3, [pc, #356]	; (a6f4 <sd_mmc_spi_card_init+0x174>)
    a58e:	681b      	ldr	r3, [r3, #0]
    a590:	2201      	movs	r2, #1
    a592:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    a594:	4b57      	ldr	r3, [pc, #348]	; (a6f4 <sd_mmc_spi_card_init+0x174>)
    a596:	681b      	ldr	r3, [r3, #0]
    a598:	2200      	movs	r2, #0
    a59a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    a59c:	4b55      	ldr	r3, [pc, #340]	; (a6f4 <sd_mmc_spi_card_init+0x174>)
    a59e:	681b      	ldr	r3, [r3, #0]
    a5a0:	2200      	movs	r2, #0
    a5a2:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    a5a4:	4b54      	ldr	r3, [pc, #336]	; (a6f8 <sd_mmc_spi_card_init+0x178>)
    a5a6:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a5a8:	2388      	movs	r3, #136	; 0x88
    a5aa:	015b      	lsls	r3, r3, #5
    a5ac:	2100      	movs	r1, #0
    a5ae:	0018      	movs	r0, r3
    a5b0:	4b52      	ldr	r3, [pc, #328]	; (a6fc <sd_mmc_spi_card_init+0x17c>)
    a5b2:	4798      	blx	r3
    a5b4:	0003      	movs	r3, r0
    a5b6:	001a      	movs	r2, r3
    a5b8:	2301      	movs	r3, #1
    a5ba:	4053      	eors	r3, r2
    a5bc:	b2db      	uxtb	r3, r3
    a5be:	2b00      	cmp	r3, #0
    a5c0:	d001      	beq.n	a5c6 <sd_mmc_spi_card_init+0x46>
		return false;
    a5c2:	2300      	movs	r3, #0
    a5c4:	e092      	b.n	a6ec <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    a5c6:	1dfb      	adds	r3, r7, #7
    a5c8:	0018      	movs	r0, r3
    a5ca:	4b4d      	ldr	r3, [pc, #308]	; (a700 <sd_mmc_spi_card_init+0x180>)
    a5cc:	4798      	blx	r3
    a5ce:	0003      	movs	r3, r0
    a5d0:	001a      	movs	r2, r3
    a5d2:	2301      	movs	r3, #1
    a5d4:	4053      	eors	r3, r2
    a5d6:	b2db      	uxtb	r3, r3
    a5d8:	2b00      	cmp	r3, #0
    a5da:	d001      	beq.n	a5e0 <sd_mmc_spi_card_init+0x60>
		return false;
    a5dc:	2300      	movs	r3, #0
    a5de:	e085      	b.n	a6ec <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    a5e0:	4b48      	ldr	r3, [pc, #288]	; (a704 <sd_mmc_spi_card_init+0x184>)
    a5e2:	4798      	blx	r3
    a5e4:	0003      	movs	r3, r0
    a5e6:	001a      	movs	r2, r3
    a5e8:	2301      	movs	r3, #1
    a5ea:	4053      	eors	r3, r2
    a5ec:	b2db      	uxtb	r3, r3
    a5ee:	2b00      	cmp	r3, #0
    a5f0:	d001      	beq.n	a5f6 <sd_mmc_spi_card_init+0x76>
		return false;
    a5f2:	2300      	movs	r3, #0
    a5f4:	e07a      	b.n	a6ec <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a5f6:	4b3f      	ldr	r3, [pc, #252]	; (a6f4 <sd_mmc_spi_card_init+0x174>)
    a5f8:	681b      	ldr	r3, [r3, #0]
    a5fa:	7adb      	ldrb	r3, [r3, #11]
    a5fc:	001a      	movs	r2, r3
    a5fe:	2301      	movs	r3, #1
    a600:	4013      	ands	r3, r2
    a602:	d021      	beq.n	a648 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    a604:	1dfb      	adds	r3, r7, #7
    a606:	781b      	ldrb	r3, [r3, #0]
    a608:	0018      	movs	r0, r3
    a60a:	4b3f      	ldr	r3, [pc, #252]	; (a708 <sd_mmc_spi_card_init+0x188>)
    a60c:	4798      	blx	r3
    a60e:	0003      	movs	r3, r0
    a610:	001a      	movs	r2, r3
    a612:	2301      	movs	r3, #1
    a614:	4053      	eors	r3, r2
    a616:	b2db      	uxtb	r3, r3
    a618:	2b00      	cmp	r3, #0
    a61a:	d007      	beq.n	a62c <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    a61c:	4b35      	ldr	r3, [pc, #212]	; (a6f4 <sd_mmc_spi_card_init+0x174>)
    a61e:	681b      	ldr	r3, [r3, #0]
    a620:	2202      	movs	r2, #2
    a622:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    a624:	4b39      	ldr	r3, [pc, #228]	; (a70c <sd_mmc_spi_card_init+0x18c>)
    a626:	4798      	blx	r3
    a628:	0003      	movs	r3, r0
    a62a:	e05f      	b.n	a6ec <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    a62c:	4b38      	ldr	r3, [pc, #224]	; (a710 <sd_mmc_spi_card_init+0x190>)
    a62e:	2100      	movs	r1, #0
    a630:	0018      	movs	r0, r3
    a632:	4b32      	ldr	r3, [pc, #200]	; (a6fc <sd_mmc_spi_card_init+0x17c>)
    a634:	4798      	blx	r3
    a636:	0003      	movs	r3, r0
    a638:	001a      	movs	r2, r3
    a63a:	2301      	movs	r3, #1
    a63c:	4053      	eors	r3, r2
    a63e:	b2db      	uxtb	r3, r3
    a640:	2b00      	cmp	r3, #0
    a642:	d001      	beq.n	a648 <sd_mmc_spi_card_init+0xc8>
			return false;
    a644:	2300      	movs	r3, #0
    a646:	e051      	b.n	a6ec <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a648:	4b2a      	ldr	r3, [pc, #168]	; (a6f4 <sd_mmc_spi_card_init+0x174>)
    a64a:	681b      	ldr	r3, [r3, #0]
    a64c:	7adb      	ldrb	r3, [r3, #11]
    a64e:	001a      	movs	r2, r3
    a650:	2301      	movs	r3, #1
    a652:	4013      	ands	r3, r2
    a654:	d017      	beq.n	a686 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    a656:	4b2f      	ldr	r3, [pc, #188]	; (a714 <sd_mmc_spi_card_init+0x194>)
    a658:	4798      	blx	r3
    a65a:	0003      	movs	r3, r0
    a65c:	001a      	movs	r2, r3
    a65e:	2301      	movs	r3, #1
    a660:	4053      	eors	r3, r2
    a662:	b2db      	uxtb	r3, r3
    a664:	2b00      	cmp	r3, #0
    a666:	d001      	beq.n	a66c <sd_mmc_spi_card_init+0xec>
			return false;
    a668:	2300      	movs	r3, #0
    a66a:	e03f      	b.n	a6ec <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    a66c:	4b2a      	ldr	r3, [pc, #168]	; (a718 <sd_mmc_spi_card_init+0x198>)
    a66e:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    a670:	4b2a      	ldr	r3, [pc, #168]	; (a71c <sd_mmc_spi_card_init+0x19c>)
    a672:	4798      	blx	r3
    a674:	0003      	movs	r3, r0
    a676:	001a      	movs	r2, r3
    a678:	2301      	movs	r3, #1
    a67a:	4053      	eors	r3, r2
    a67c:	b2db      	uxtb	r3, r3
    a67e:	2b00      	cmp	r3, #0
    a680:	d001      	beq.n	a686 <sd_mmc_spi_card_init+0x106>
			return false;
    a682:	2300      	movs	r3, #0
    a684:	e032      	b.n	a6ec <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a686:	4b1b      	ldr	r3, [pc, #108]	; (a6f4 <sd_mmc_spi_card_init+0x174>)
    a688:	681b      	ldr	r3, [r3, #0]
    a68a:	7adb      	ldrb	r3, [r3, #11]
    a68c:	001a      	movs	r2, r3
    a68e:	2301      	movs	r3, #1
    a690:	4013      	ands	r3, r2
    a692:	d016      	beq.n	a6c2 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    a694:	4b17      	ldr	r3, [pc, #92]	; (a6f4 <sd_mmc_spi_card_init+0x174>)
    a696:	681b      	ldr	r3, [r3, #0]
    a698:	7adb      	ldrb	r3, [r3, #11]
    a69a:	001a      	movs	r2, r3
    a69c:	2308      	movs	r3, #8
    a69e:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a6a0:	d10f      	bne.n	a6c2 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    a6a2:	2380      	movs	r3, #128	; 0x80
    a6a4:	009b      	lsls	r3, r3, #2
    a6a6:	4a1e      	ldr	r2, [pc, #120]	; (a720 <sd_mmc_spi_card_init+0x1a0>)
    a6a8:	0019      	movs	r1, r3
    a6aa:	0010      	movs	r0, r2
    a6ac:	4b13      	ldr	r3, [pc, #76]	; (a6fc <sd_mmc_spi_card_init+0x17c>)
    a6ae:	4798      	blx	r3
    a6b0:	0003      	movs	r3, r0
    a6b2:	001a      	movs	r2, r3
    a6b4:	2301      	movs	r3, #1
    a6b6:	4053      	eors	r3, r2
    a6b8:	b2db      	uxtb	r3, r3
    a6ba:	2b00      	cmp	r3, #0
    a6bc:	d001      	beq.n	a6c2 <sd_mmc_spi_card_init+0x142>
			return false;
    a6be:	2300      	movs	r3, #0
    a6c0:	e014      	b.n	a6ec <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a6c2:	4b0c      	ldr	r3, [pc, #48]	; (a6f4 <sd_mmc_spi_card_init+0x174>)
    a6c4:	681b      	ldr	r3, [r3, #0]
    a6c6:	7adb      	ldrb	r3, [r3, #11]
    a6c8:	001a      	movs	r2, r3
    a6ca:	2301      	movs	r3, #1
    a6cc:	4013      	ands	r3, r2
    a6ce:	d00a      	beq.n	a6e6 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    a6d0:	4b14      	ldr	r3, [pc, #80]	; (a724 <sd_mmc_spi_card_init+0x1a4>)
    a6d2:	4798      	blx	r3
    a6d4:	0003      	movs	r3, r0
    a6d6:	001a      	movs	r2, r3
    a6d8:	2301      	movs	r3, #1
    a6da:	4053      	eors	r3, r2
    a6dc:	b2db      	uxtb	r3, r3
    a6de:	2b00      	cmp	r3, #0
    a6e0:	d001      	beq.n	a6e6 <sd_mmc_spi_card_init+0x166>
			return false;
    a6e2:	2300      	movs	r3, #0
    a6e4:	e002      	b.n	a6ec <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    a6e6:	4b10      	ldr	r3, [pc, #64]	; (a728 <sd_mmc_spi_card_init+0x1a8>)
    a6e8:	4798      	blx	r3
	return true;
    a6ea:	2301      	movs	r3, #1
}
    a6ec:	0018      	movs	r0, r3
    a6ee:	46bd      	mov	sp, r7
    a6f0:	b002      	add	sp, #8
    a6f2:	bd80      	pop	{r7, pc}
    a6f4:	20003cac 	.word	0x20003cac
    a6f8:	0000b769 	.word	0x0000b769
    a6fc:	0000b7b5 	.word	0x0000b7b5
    a700:	00009ed5 	.word	0x00009ed5
    a704:	00009ec9 	.word	0x00009ec9
    a708:	00009de5 	.word	0x00009de5
    a70c:	0000a72d 	.word	0x0000a72d
    a710:	0000113b 	.word	0x0000113b
    a714:	0000a071 	.word	0x0000a071
    a718:	0000a211 	.word	0x0000a211
    a71c:	0000a359 	.word	0x0000a359
    a720:	00001110 	.word	0x00001110
    a724:	0000a2fd 	.word	0x0000a2fd
    a728:	0000a525 	.word	0x0000a525

0000a72c <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    a72c:	b580      	push	{r7, lr}
    a72e:	b082      	sub	sp, #8
    a730:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a732:	2388      	movs	r3, #136	; 0x88
    a734:	015b      	lsls	r3, r3, #5
    a736:	2100      	movs	r1, #0
    a738:	0018      	movs	r0, r3
    a73a:	4b32      	ldr	r3, [pc, #200]	; (a804 <sd_mmc_spi_install_mmc+0xd8>)
    a73c:	4798      	blx	r3
    a73e:	0003      	movs	r3, r0
    a740:	001a      	movs	r2, r3
    a742:	2301      	movs	r3, #1
    a744:	4053      	eors	r3, r2
    a746:	b2db      	uxtb	r3, r3
    a748:	2b00      	cmp	r3, #0
    a74a:	d001      	beq.n	a750 <sd_mmc_spi_install_mmc+0x24>
		return false;
    a74c:	2300      	movs	r3, #0
    a74e:	e055      	b.n	a7fc <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    a750:	4b2d      	ldr	r3, [pc, #180]	; (a808 <sd_mmc_spi_install_mmc+0xdc>)
    a752:	4798      	blx	r3
    a754:	0003      	movs	r3, r0
    a756:	001a      	movs	r2, r3
    a758:	2301      	movs	r3, #1
    a75a:	4053      	eors	r3, r2
    a75c:	b2db      	uxtb	r3, r3
    a75e:	2b00      	cmp	r3, #0
    a760:	d001      	beq.n	a766 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    a762:	2300      	movs	r3, #0
    a764:	e04a      	b.n	a7fc <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    a766:	4b29      	ldr	r3, [pc, #164]	; (a80c <sd_mmc_spi_install_mmc+0xe0>)
    a768:	2100      	movs	r1, #0
    a76a:	0018      	movs	r0, r3
    a76c:	4b25      	ldr	r3, [pc, #148]	; (a804 <sd_mmc_spi_install_mmc+0xd8>)
    a76e:	4798      	blx	r3
    a770:	0003      	movs	r3, r0
    a772:	001a      	movs	r2, r3
    a774:	2301      	movs	r3, #1
    a776:	4053      	eors	r3, r2
    a778:	b2db      	uxtb	r3, r3
    a77a:	2b00      	cmp	r3, #0
    a77c:	d001      	beq.n	a782 <sd_mmc_spi_install_mmc+0x56>
		return false;
    a77e:	2300      	movs	r3, #0
    a780:	e03c      	b.n	a7fc <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    a782:	4b23      	ldr	r3, [pc, #140]	; (a810 <sd_mmc_spi_install_mmc+0xe4>)
    a784:	4798      	blx	r3
    a786:	0003      	movs	r3, r0
    a788:	001a      	movs	r2, r3
    a78a:	2301      	movs	r3, #1
    a78c:	4053      	eors	r3, r2
    a78e:	b2db      	uxtb	r3, r3
    a790:	2b00      	cmp	r3, #0
    a792:	d001      	beq.n	a798 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    a794:	2300      	movs	r3, #0
    a796:	e031      	b.n	a7fc <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    a798:	4b1e      	ldr	r3, [pc, #120]	; (a814 <sd_mmc_spi_install_mmc+0xe8>)
    a79a:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    a79c:	4b1e      	ldr	r3, [pc, #120]	; (a818 <sd_mmc_spi_install_mmc+0xec>)
    a79e:	681b      	ldr	r3, [r3, #0]
    a7a0:	7b1b      	ldrb	r3, [r3, #12]
    a7a2:	2b3f      	cmp	r3, #63	; 0x3f
    a7a4:	d90c      	bls.n	a7c0 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    a7a6:	1dfb      	adds	r3, r7, #7
    a7a8:	0018      	movs	r0, r3
    a7aa:	4b1c      	ldr	r3, [pc, #112]	; (a81c <sd_mmc_spi_install_mmc+0xf0>)
    a7ac:	4798      	blx	r3
    a7ae:	0003      	movs	r3, r0
    a7b0:	001a      	movs	r2, r3
    a7b2:	2301      	movs	r3, #1
    a7b4:	4053      	eors	r3, r2
    a7b6:	b2db      	uxtb	r3, r3
    a7b8:	2b00      	cmp	r3, #0
    a7ba:	d001      	beq.n	a7c0 <sd_mmc_spi_install_mmc+0x94>
			return false;
    a7bc:	2300      	movs	r3, #0
    a7be:	e01d      	b.n	a7fc <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    a7c0:	2380      	movs	r3, #128	; 0x80
    a7c2:	009b      	lsls	r3, r3, #2
    a7c4:	4a16      	ldr	r2, [pc, #88]	; (a820 <sd_mmc_spi_install_mmc+0xf4>)
    a7c6:	0019      	movs	r1, r3
    a7c8:	0010      	movs	r0, r2
    a7ca:	4b0e      	ldr	r3, [pc, #56]	; (a804 <sd_mmc_spi_install_mmc+0xd8>)
    a7cc:	4798      	blx	r3
    a7ce:	0003      	movs	r3, r0
    a7d0:	001a      	movs	r2, r3
    a7d2:	2301      	movs	r3, #1
    a7d4:	4053      	eors	r3, r2
    a7d6:	b2db      	uxtb	r3, r3
    a7d8:	2b00      	cmp	r3, #0
    a7da:	d001      	beq.n	a7e0 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    a7dc:	2300      	movs	r3, #0
    a7de:	e00d      	b.n	a7fc <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    a7e0:	4b10      	ldr	r3, [pc, #64]	; (a824 <sd_mmc_spi_install_mmc+0xf8>)
    a7e2:	4798      	blx	r3
    a7e4:	0003      	movs	r3, r0
    a7e6:	001a      	movs	r2, r3
    a7e8:	2301      	movs	r3, #1
    a7ea:	4053      	eors	r3, r2
    a7ec:	b2db      	uxtb	r3, r3
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	d001      	beq.n	a7f6 <sd_mmc_spi_install_mmc+0xca>
		return false;
    a7f2:	2300      	movs	r3, #0
    a7f4:	e002      	b.n	a7fc <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    a7f6:	4b0c      	ldr	r3, [pc, #48]	; (a828 <sd_mmc_spi_install_mmc+0xfc>)
    a7f8:	4798      	blx	r3
	return true;
    a7fa:	2301      	movs	r3, #1
}
    a7fc:	0018      	movs	r0, r3
    a7fe:	46bd      	mov	sp, r7
    a800:	b002      	add	sp, #8
    a802:	bd80      	pop	{r7, pc}
    a804:	0000b7b5 	.word	0x0000b7b5
    a808:	00009d39 	.word	0x00009d39
    a80c:	0000113b 	.word	0x0000113b
    a810:	0000a071 	.word	0x0000a071
    a814:	0000a0e1 	.word	0x0000a0e1
    a818:	20003cac 	.word	0x20003cac
    a81c:	00009f45 	.word	0x00009f45
    a820:	00001110 	.word	0x00001110
    a824:	0000a2fd 	.word	0x0000a2fd
    a828:	0000a525 	.word	0x0000a525

0000a82c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    a82c:	b580      	push	{r7, lr}
    a82e:	b082      	sub	sp, #8
    a830:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    a832:	1dfb      	adds	r3, r7, #7
    a834:	2200      	movs	r2, #0
    a836:	701a      	strb	r2, [r3, #0]
    a838:	e00c      	b.n	a854 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    a83a:	1dfb      	adds	r3, r7, #7
    a83c:	781b      	ldrb	r3, [r3, #0]
    a83e:	4a0c      	ldr	r2, [pc, #48]	; (a870 <sd_mmc_init+0x44>)
    a840:	015b      	lsls	r3, r3, #5
    a842:	18d3      	adds	r3, r2, r3
    a844:	330a      	adds	r3, #10
    a846:	2204      	movs	r2, #4
    a848:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    a84a:	1dfb      	adds	r3, r7, #7
    a84c:	781a      	ldrb	r2, [r3, #0]
    a84e:	1dfb      	adds	r3, r7, #7
    a850:	3201      	adds	r2, #1
    a852:	701a      	strb	r2, [r3, #0]
    a854:	1dfb      	adds	r3, r7, #7
    a856:	781b      	ldrb	r3, [r3, #0]
    a858:	2b00      	cmp	r3, #0
    a85a:	d0ee      	beq.n	a83a <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    a85c:	4b05      	ldr	r3, [pc, #20]	; (a874 <sd_mmc_init+0x48>)
    a85e:	22ff      	movs	r2, #255	; 0xff
    a860:	701a      	strb	r2, [r3, #0]
	driver_init();
    a862:	4b05      	ldr	r3, [pc, #20]	; (a878 <sd_mmc_init+0x4c>)
    a864:	4798      	blx	r3
}
    a866:	46c0      	nop			; (mov r8, r8)
    a868:	46bd      	mov	sp, r7
    a86a:	b002      	add	sp, #8
    a86c:	bd80      	pop	{r7, pc}
    a86e:	46c0      	nop			; (mov r8, r8)
    a870:	20003c88 	.word	0x20003c88
    a874:	20003ca8 	.word	0x20003ca8
    a878:	0000b5d5 	.word	0x0000b5d5

0000a87c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    a87c:	b590      	push	{r4, r7, lr}
    a87e:	b085      	sub	sp, #20
    a880:	af00      	add	r7, sp, #0
    a882:	0002      	movs	r2, r0
    a884:	1dfb      	adds	r3, r7, #7
    a886:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    a888:	230f      	movs	r3, #15
    a88a:	18fc      	adds	r4, r7, r3
    a88c:	1dfb      	adds	r3, r7, #7
    a88e:	781b      	ldrb	r3, [r3, #0]
    a890:	0018      	movs	r0, r3
    a892:	4b13      	ldr	r3, [pc, #76]	; (a8e0 <sd_mmc_check+0x64>)
    a894:	4798      	blx	r3
    a896:	0003      	movs	r3, r0
    a898:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    a89a:	230f      	movs	r3, #15
    a89c:	18fb      	adds	r3, r7, r3
    a89e:	781b      	ldrb	r3, [r3, #0]
    a8a0:	2b01      	cmp	r3, #1
    a8a2:	d005      	beq.n	a8b0 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    a8a4:	4b0f      	ldr	r3, [pc, #60]	; (a8e4 <sd_mmc_check+0x68>)
    a8a6:	4798      	blx	r3
		return sd_mmc_err;
    a8a8:	230f      	movs	r3, #15
    a8aa:	18fb      	adds	r3, r7, r3
    a8ac:	781b      	ldrb	r3, [r3, #0]
    a8ae:	e012      	b.n	a8d6 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    a8b0:	4b0d      	ldr	r3, [pc, #52]	; (a8e8 <sd_mmc_check+0x6c>)
    a8b2:	4798      	blx	r3
    a8b4:	1e03      	subs	r3, r0, #0
    a8b6:	d007      	beq.n	a8c8 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    a8b8:	4b0c      	ldr	r3, [pc, #48]	; (a8ec <sd_mmc_check+0x70>)
    a8ba:	681b      	ldr	r3, [r3, #0]
    a8bc:	2200      	movs	r2, #0
    a8be:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    a8c0:	4b08      	ldr	r3, [pc, #32]	; (a8e4 <sd_mmc_check+0x68>)
    a8c2:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    a8c4:	2301      	movs	r3, #1
    a8c6:	e006      	b.n	a8d6 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    a8c8:	4b08      	ldr	r3, [pc, #32]	; (a8ec <sd_mmc_check+0x70>)
    a8ca:	681b      	ldr	r3, [r3, #0]
    a8cc:	2203      	movs	r2, #3
    a8ce:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    a8d0:	4b04      	ldr	r3, [pc, #16]	; (a8e4 <sd_mmc_check+0x68>)
    a8d2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    a8d4:	2303      	movs	r3, #3
}
    a8d6:	0018      	movs	r0, r3
    a8d8:	46bd      	mov	sp, r7
    a8da:	b005      	add	sp, #20
    a8dc:	bd90      	pop	{r4, r7, pc}
    a8de:	46c0      	nop			; (mov r8, r8)
    a8e0:	0000a461 	.word	0x0000a461
    a8e4:	0000a55d 	.word	0x0000a55d
    a8e8:	0000a581 	.word	0x0000a581
    a8ec:	20003cac 	.word	0x20003cac

0000a8f0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    a8f0:	b580      	push	{r7, lr}
    a8f2:	b082      	sub	sp, #8
    a8f4:	af00      	add	r7, sp, #0
    a8f6:	0002      	movs	r2, r0
    a8f8:	1dfb      	adds	r3, r7, #7
    a8fa:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a8fc:	1dfb      	adds	r3, r7, #7
    a8fe:	781b      	ldrb	r3, [r3, #0]
    a900:	0018      	movs	r0, r3
    a902:	4b07      	ldr	r3, [pc, #28]	; (a920 <sd_mmc_get_type+0x30>)
    a904:	4798      	blx	r3
    a906:	1e03      	subs	r3, r0, #0
    a908:	d001      	beq.n	a90e <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    a90a:	2300      	movs	r3, #0
    a90c:	e004      	b.n	a918 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    a90e:	4b05      	ldr	r3, [pc, #20]	; (a924 <sd_mmc_get_type+0x34>)
    a910:	4798      	blx	r3
	return sd_mmc_card->type;
    a912:	4b05      	ldr	r3, [pc, #20]	; (a928 <sd_mmc_get_type+0x38>)
    a914:	681b      	ldr	r3, [r3, #0]
    a916:	7adb      	ldrb	r3, [r3, #11]
}
    a918:	0018      	movs	r0, r3
    a91a:	46bd      	mov	sp, r7
    a91c:	b002      	add	sp, #8
    a91e:	bd80      	pop	{r7, pc}
    a920:	0000a461 	.word	0x0000a461
    a924:	0000a55d 	.word	0x0000a55d
    a928:	20003cac 	.word	0x20003cac

0000a92c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    a92c:	b580      	push	{r7, lr}
    a92e:	b082      	sub	sp, #8
    a930:	af00      	add	r7, sp, #0
    a932:	0002      	movs	r2, r0
    a934:	1dfb      	adds	r3, r7, #7
    a936:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a938:	1dfb      	adds	r3, r7, #7
    a93a:	781b      	ldrb	r3, [r3, #0]
    a93c:	0018      	movs	r0, r3
    a93e:	4b07      	ldr	r3, [pc, #28]	; (a95c <sd_mmc_get_capacity+0x30>)
    a940:	4798      	blx	r3
    a942:	1e03      	subs	r3, r0, #0
    a944:	d001      	beq.n	a94a <sd_mmc_get_capacity+0x1e>
		return 0;
    a946:	2300      	movs	r3, #0
    a948:	e004      	b.n	a954 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    a94a:	4b05      	ldr	r3, [pc, #20]	; (a960 <sd_mmc_get_capacity+0x34>)
    a94c:	4798      	blx	r3
	return sd_mmc_card->capacity;
    a94e:	4b05      	ldr	r3, [pc, #20]	; (a964 <sd_mmc_get_capacity+0x38>)
    a950:	681b      	ldr	r3, [r3, #0]
    a952:	685b      	ldr	r3, [r3, #4]
}
    a954:	0018      	movs	r0, r3
    a956:	46bd      	mov	sp, r7
    a958:	b002      	add	sp, #8
    a95a:	bd80      	pop	{r7, pc}
    a95c:	0000a461 	.word	0x0000a461
    a960:	0000a55d 	.word	0x0000a55d
    a964:	20003cac 	.word	0x20003cac

0000a968 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    a968:	b580      	push	{r7, lr}
    a96a:	b082      	sub	sp, #8
    a96c:	af00      	add	r7, sp, #0
    a96e:	0002      	movs	r2, r0
    a970:	1dfb      	adds	r3, r7, #7
    a972:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    a974:	2300      	movs	r3, #0
}
    a976:	0018      	movs	r0, r3
    a978:	46bd      	mov	sp, r7
    a97a:	b002      	add	sp, #8
    a97c:	bd80      	pop	{r7, pc}
	...

0000a980 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    a980:	b590      	push	{r4, r7, lr}
    a982:	b089      	sub	sp, #36	; 0x24
    a984:	af02      	add	r7, sp, #8
    a986:	6039      	str	r1, [r7, #0]
    a988:	0011      	movs	r1, r2
    a98a:	1dfb      	adds	r3, r7, #7
    a98c:	1c02      	adds	r2, r0, #0
    a98e:	701a      	strb	r2, [r3, #0]
    a990:	1d3b      	adds	r3, r7, #4
    a992:	1c0a      	adds	r2, r1, #0
    a994:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    a996:	230f      	movs	r3, #15
    a998:	18fc      	adds	r4, r7, r3
    a99a:	1dfb      	adds	r3, r7, #7
    a99c:	781b      	ldrb	r3, [r3, #0]
    a99e:	0018      	movs	r0, r3
    a9a0:	4b29      	ldr	r3, [pc, #164]	; (aa48 <sd_mmc_init_read_blocks+0xc8>)
    a9a2:	4798      	blx	r3
    a9a4:	0003      	movs	r3, r0
    a9a6:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    a9a8:	230f      	movs	r3, #15
    a9aa:	18fb      	adds	r3, r7, r3
    a9ac:	781b      	ldrb	r3, [r3, #0]
    a9ae:	2b00      	cmp	r3, #0
    a9b0:	d003      	beq.n	a9ba <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    a9b2:	230f      	movs	r3, #15
    a9b4:	18fb      	adds	r3, r7, r3
    a9b6:	781b      	ldrb	r3, [r3, #0]
    a9b8:	e041      	b.n	aa3e <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    a9ba:	4b24      	ldr	r3, [pc, #144]	; (aa4c <sd_mmc_init_read_blocks+0xcc>)
    a9bc:	4798      	blx	r3
    a9be:	0003      	movs	r3, r0
    a9c0:	001a      	movs	r2, r3
    a9c2:	2301      	movs	r3, #1
    a9c4:	4053      	eors	r3, r2
    a9c6:	b2db      	uxtb	r3, r3
    a9c8:	2b00      	cmp	r3, #0
    a9ca:	d003      	beq.n	a9d4 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    a9cc:	4b20      	ldr	r3, [pc, #128]	; (aa50 <sd_mmc_init_read_blocks+0xd0>)
    a9ce:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a9d0:	2305      	movs	r3, #5
    a9d2:	e034      	b.n	aa3e <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    a9d4:	1d3b      	adds	r3, r7, #4
    a9d6:	881b      	ldrh	r3, [r3, #0]
    a9d8:	2b01      	cmp	r3, #1
    a9da:	d902      	bls.n	a9e2 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    a9dc:	4b1d      	ldr	r3, [pc, #116]	; (aa54 <sd_mmc_init_read_blocks+0xd4>)
    a9de:	617b      	str	r3, [r7, #20]
    a9e0:	e001      	b.n	a9e6 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    a9e2:	4b1d      	ldr	r3, [pc, #116]	; (aa58 <sd_mmc_init_read_blocks+0xd8>)
    a9e4:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    a9e6:	4b1d      	ldr	r3, [pc, #116]	; (aa5c <sd_mmc_init_read_blocks+0xdc>)
    a9e8:	681b      	ldr	r3, [r3, #0]
    a9ea:	7adb      	ldrb	r3, [r3, #11]
    a9ec:	001a      	movs	r2, r3
    a9ee:	2308      	movs	r3, #8
    a9f0:	4013      	ands	r3, r2
    a9f2:	d002      	beq.n	a9fa <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    a9f4:	683b      	ldr	r3, [r7, #0]
    a9f6:	613b      	str	r3, [r7, #16]
    a9f8:	e002      	b.n	aa00 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    a9fa:	683b      	ldr	r3, [r7, #0]
    a9fc:	025b      	lsls	r3, r3, #9
    a9fe:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    aa00:	1d3b      	adds	r3, r7, #4
    aa02:	881c      	ldrh	r4, [r3, #0]
    aa04:	2380      	movs	r3, #128	; 0x80
    aa06:	009a      	lsls	r2, r3, #2
    aa08:	6939      	ldr	r1, [r7, #16]
    aa0a:	6978      	ldr	r0, [r7, #20]
    aa0c:	2301      	movs	r3, #1
    aa0e:	9300      	str	r3, [sp, #0]
    aa10:	0023      	movs	r3, r4
    aa12:	4c13      	ldr	r4, [pc, #76]	; (aa60 <sd_mmc_init_read_blocks+0xe0>)
    aa14:	47a0      	blx	r4
    aa16:	0003      	movs	r3, r0
    aa18:	001a      	movs	r2, r3
    aa1a:	2301      	movs	r3, #1
    aa1c:	4053      	eors	r3, r2
    aa1e:	b2db      	uxtb	r3, r3
    aa20:	2b00      	cmp	r3, #0
    aa22:	d003      	beq.n	aa2c <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    aa24:	4b0a      	ldr	r3, [pc, #40]	; (aa50 <sd_mmc_init_read_blocks+0xd0>)
    aa26:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    aa28:	2305      	movs	r3, #5
    aa2a:	e008      	b.n	aa3e <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    aa2c:	4b0d      	ldr	r3, [pc, #52]	; (aa64 <sd_mmc_init_read_blocks+0xe4>)
    aa2e:	1d3a      	adds	r2, r7, #4
    aa30:	8812      	ldrh	r2, [r2, #0]
    aa32:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    aa34:	4b0c      	ldr	r3, [pc, #48]	; (aa68 <sd_mmc_init_read_blocks+0xe8>)
    aa36:	1d3a      	adds	r2, r7, #4
    aa38:	8812      	ldrh	r2, [r2, #0]
    aa3a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    aa3c:	2300      	movs	r3, #0
}
    aa3e:	0018      	movs	r0, r3
    aa40:	46bd      	mov	sp, r7
    aa42:	b007      	add	sp, #28
    aa44:	bd90      	pop	{r4, r7, pc}
    aa46:	46c0      	nop			; (mov r8, r8)
    aa48:	0000a461 	.word	0x0000a461
    aa4c:	0000a2fd 	.word	0x0000a2fd
    aa50:	0000a55d 	.word	0x0000a55d
    aa54:	00101112 	.word	0x00101112
    aa58:	00081111 	.word	0x00081111
    aa5c:	20003cac 	.word	0x20003cac
    aa60:	0000b7dd 	.word	0x0000b7dd
    aa64:	20003cb2 	.word	0x20003cb2
    aa68:	20003cb0 	.word	0x20003cb0

0000aa6c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    aa6c:	b580      	push	{r7, lr}
    aa6e:	b082      	sub	sp, #8
    aa70:	af00      	add	r7, sp, #0
    aa72:	6078      	str	r0, [r7, #4]
    aa74:	000a      	movs	r2, r1
    aa76:	1cbb      	adds	r3, r7, #2
    aa78:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    aa7a:	1cbb      	adds	r3, r7, #2
    aa7c:	881a      	ldrh	r2, [r3, #0]
    aa7e:	687b      	ldr	r3, [r7, #4]
    aa80:	0011      	movs	r1, r2
    aa82:	0018      	movs	r0, r3
    aa84:	4b0d      	ldr	r3, [pc, #52]	; (aabc <sd_mmc_start_read_blocks+0x50>)
    aa86:	4798      	blx	r3
    aa88:	0003      	movs	r3, r0
    aa8a:	001a      	movs	r2, r3
    aa8c:	2301      	movs	r3, #1
    aa8e:	4053      	eors	r3, r2
    aa90:	b2db      	uxtb	r3, r3
    aa92:	2b00      	cmp	r3, #0
    aa94:	d004      	beq.n	aaa0 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    aa96:	4b0a      	ldr	r3, [pc, #40]	; (aac0 <sd_mmc_start_read_blocks+0x54>)
    aa98:	2200      	movs	r2, #0
    aa9a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    aa9c:	2305      	movs	r3, #5
    aa9e:	e008      	b.n	aab2 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    aaa0:	4b07      	ldr	r3, [pc, #28]	; (aac0 <sd_mmc_start_read_blocks+0x54>)
    aaa2:	881a      	ldrh	r2, [r3, #0]
    aaa4:	1cbb      	adds	r3, r7, #2
    aaa6:	881b      	ldrh	r3, [r3, #0]
    aaa8:	1ad3      	subs	r3, r2, r3
    aaaa:	b29a      	uxth	r2, r3
    aaac:	4b04      	ldr	r3, [pc, #16]	; (aac0 <sd_mmc_start_read_blocks+0x54>)
    aaae:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    aab0:	2300      	movs	r3, #0
}
    aab2:	0018      	movs	r0, r3
    aab4:	46bd      	mov	sp, r7
    aab6:	b002      	add	sp, #8
    aab8:	bd80      	pop	{r7, pc}
    aaba:	46c0      	nop			; (mov r8, r8)
    aabc:	0000baad 	.word	0x0000baad
    aac0:	20003cb2 	.word	0x20003cb2

0000aac4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    aac4:	b580      	push	{r7, lr}
    aac6:	b082      	sub	sp, #8
    aac8:	af00      	add	r7, sp, #0
    aaca:	0002      	movs	r2, r0
    aacc:	1dfb      	adds	r3, r7, #7
    aace:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    aad0:	4b1c      	ldr	r3, [pc, #112]	; (ab44 <sd_mmc_wait_end_of_read_blocks+0x80>)
    aad2:	4798      	blx	r3
    aad4:	0003      	movs	r3, r0
    aad6:	001a      	movs	r2, r3
    aad8:	2301      	movs	r3, #1
    aada:	4053      	eors	r3, r2
    aadc:	b2db      	uxtb	r3, r3
    aade:	2b00      	cmp	r3, #0
    aae0:	d001      	beq.n	aae6 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    aae2:	2305      	movs	r3, #5
    aae4:	e029      	b.n	ab3a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    aae6:	1dfb      	adds	r3, r7, #7
    aae8:	781b      	ldrb	r3, [r3, #0]
    aaea:	2b00      	cmp	r3, #0
    aaec:	d003      	beq.n	aaf6 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    aaee:	4b16      	ldr	r3, [pc, #88]	; (ab48 <sd_mmc_wait_end_of_read_blocks+0x84>)
    aaf0:	2200      	movs	r2, #0
    aaf2:	801a      	strh	r2, [r3, #0]
    aaf4:	e005      	b.n	ab02 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    aaf6:	4b14      	ldr	r3, [pc, #80]	; (ab48 <sd_mmc_wait_end_of_read_blocks+0x84>)
    aaf8:	881b      	ldrh	r3, [r3, #0]
    aafa:	2b00      	cmp	r3, #0
    aafc:	d001      	beq.n	ab02 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    aafe:	2300      	movs	r3, #0
    ab00:	e01b      	b.n	ab3a <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    ab02:	4b12      	ldr	r3, [pc, #72]	; (ab4c <sd_mmc_wait_end_of_read_blocks+0x88>)
    ab04:	881b      	ldrh	r3, [r3, #0]
    ab06:	2b01      	cmp	r3, #1
    ab08:	d103      	bne.n	ab12 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    ab0a:	4b11      	ldr	r3, [pc, #68]	; (ab50 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    ab0c:	4798      	blx	r3
		return SD_MMC_OK;
    ab0e:	2300      	movs	r3, #0
    ab10:	e013      	b.n	ab3a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    ab12:	4b10      	ldr	r3, [pc, #64]	; (ab54 <sd_mmc_wait_end_of_read_blocks+0x90>)
    ab14:	2100      	movs	r1, #0
    ab16:	0018      	movs	r0, r3
    ab18:	4b0f      	ldr	r3, [pc, #60]	; (ab58 <sd_mmc_wait_end_of_read_blocks+0x94>)
    ab1a:	4798      	blx	r3
    ab1c:	0003      	movs	r3, r0
    ab1e:	001a      	movs	r2, r3
    ab20:	2301      	movs	r3, #1
    ab22:	4053      	eors	r3, r2
    ab24:	b2db      	uxtb	r3, r3
    ab26:	2b00      	cmp	r3, #0
    ab28:	d004      	beq.n	ab34 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    ab2a:	4b0a      	ldr	r3, [pc, #40]	; (ab54 <sd_mmc_wait_end_of_read_blocks+0x90>)
    ab2c:	2100      	movs	r1, #0
    ab2e:	0018      	movs	r0, r3
    ab30:	4b09      	ldr	r3, [pc, #36]	; (ab58 <sd_mmc_wait_end_of_read_blocks+0x94>)
    ab32:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    ab34:	4b06      	ldr	r3, [pc, #24]	; (ab50 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    ab36:	4798      	blx	r3
	return SD_MMC_OK;
    ab38:	2300      	movs	r3, #0
}
    ab3a:	0018      	movs	r0, r3
    ab3c:	46bd      	mov	sp, r7
    ab3e:	b002      	add	sp, #8
    ab40:	bd80      	pop	{r7, pc}
    ab42:	46c0      	nop			; (mov r8, r8)
    ab44:	0000bb51 	.word	0x0000bb51
    ab48:	20003cb2 	.word	0x20003cb2
    ab4c:	20003cb0 	.word	0x20003cb0
    ab50:	0000a55d 	.word	0x0000a55d
    ab54:	0000310c 	.word	0x0000310c
    ab58:	0000b7b5 	.word	0x0000b7b5

0000ab5c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    ab5c:	b590      	push	{r4, r7, lr}
    ab5e:	b089      	sub	sp, #36	; 0x24
    ab60:	af02      	add	r7, sp, #8
    ab62:	6039      	str	r1, [r7, #0]
    ab64:	0011      	movs	r1, r2
    ab66:	1dfb      	adds	r3, r7, #7
    ab68:	1c02      	adds	r2, r0, #0
    ab6a:	701a      	strb	r2, [r3, #0]
    ab6c:	1d3b      	adds	r3, r7, #4
    ab6e:	1c0a      	adds	r2, r1, #0
    ab70:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    ab72:	230f      	movs	r3, #15
    ab74:	18fc      	adds	r4, r7, r3
    ab76:	1dfb      	adds	r3, r7, #7
    ab78:	781b      	ldrb	r3, [r3, #0]
    ab7a:	0018      	movs	r0, r3
    ab7c:	4b28      	ldr	r3, [pc, #160]	; (ac20 <sd_mmc_init_write_blocks+0xc4>)
    ab7e:	4798      	blx	r3
    ab80:	0003      	movs	r3, r0
    ab82:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    ab84:	230f      	movs	r3, #15
    ab86:	18fb      	adds	r3, r7, r3
    ab88:	781b      	ldrb	r3, [r3, #0]
    ab8a:	2b00      	cmp	r3, #0
    ab8c:	d003      	beq.n	ab96 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    ab8e:	230f      	movs	r3, #15
    ab90:	18fb      	adds	r3, r7, r3
    ab92:	781b      	ldrb	r3, [r3, #0]
    ab94:	e03f      	b.n	ac16 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    ab96:	1dfb      	adds	r3, r7, #7
    ab98:	781b      	ldrb	r3, [r3, #0]
    ab9a:	0018      	movs	r0, r3
    ab9c:	4b21      	ldr	r3, [pc, #132]	; (ac24 <sd_mmc_init_write_blocks+0xc8>)
    ab9e:	4798      	blx	r3
    aba0:	1e03      	subs	r3, r0, #0
    aba2:	d003      	beq.n	abac <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    aba4:	4b20      	ldr	r3, [pc, #128]	; (ac28 <sd_mmc_init_write_blocks+0xcc>)
    aba6:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    aba8:	2307      	movs	r3, #7
    abaa:	e034      	b.n	ac16 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    abac:	1d3b      	adds	r3, r7, #4
    abae:	881b      	ldrh	r3, [r3, #0]
    abb0:	2b01      	cmp	r3, #1
    abb2:	d902      	bls.n	abba <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    abb4:	4b1d      	ldr	r3, [pc, #116]	; (ac2c <sd_mmc_init_write_blocks+0xd0>)
    abb6:	617b      	str	r3, [r7, #20]
    abb8:	e001      	b.n	abbe <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    abba:	4b1d      	ldr	r3, [pc, #116]	; (ac30 <sd_mmc_init_write_blocks+0xd4>)
    abbc:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    abbe:	4b1d      	ldr	r3, [pc, #116]	; (ac34 <sd_mmc_init_write_blocks+0xd8>)
    abc0:	681b      	ldr	r3, [r3, #0]
    abc2:	7adb      	ldrb	r3, [r3, #11]
    abc4:	001a      	movs	r2, r3
    abc6:	2308      	movs	r3, #8
    abc8:	4013      	ands	r3, r2
    abca:	d002      	beq.n	abd2 <sd_mmc_init_write_blocks+0x76>
		arg = start;
    abcc:	683b      	ldr	r3, [r7, #0]
    abce:	613b      	str	r3, [r7, #16]
    abd0:	e002      	b.n	abd8 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    abd2:	683b      	ldr	r3, [r7, #0]
    abd4:	025b      	lsls	r3, r3, #9
    abd6:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    abd8:	1d3b      	adds	r3, r7, #4
    abda:	881c      	ldrh	r4, [r3, #0]
    abdc:	2380      	movs	r3, #128	; 0x80
    abde:	009a      	lsls	r2, r3, #2
    abe0:	6939      	ldr	r1, [r7, #16]
    abe2:	6978      	ldr	r0, [r7, #20]
    abe4:	2301      	movs	r3, #1
    abe6:	9300      	str	r3, [sp, #0]
    abe8:	0023      	movs	r3, r4
    abea:	4c13      	ldr	r4, [pc, #76]	; (ac38 <sd_mmc_init_write_blocks+0xdc>)
    abec:	47a0      	blx	r4
    abee:	0003      	movs	r3, r0
    abf0:	001a      	movs	r2, r3
    abf2:	2301      	movs	r3, #1
    abf4:	4053      	eors	r3, r2
    abf6:	b2db      	uxtb	r3, r3
    abf8:	2b00      	cmp	r3, #0
    abfa:	d003      	beq.n	ac04 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    abfc:	4b0a      	ldr	r3, [pc, #40]	; (ac28 <sd_mmc_init_write_blocks+0xcc>)
    abfe:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ac00:	2305      	movs	r3, #5
    ac02:	e008      	b.n	ac16 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    ac04:	4b0d      	ldr	r3, [pc, #52]	; (ac3c <sd_mmc_init_write_blocks+0xe0>)
    ac06:	1d3a      	adds	r2, r7, #4
    ac08:	8812      	ldrh	r2, [r2, #0]
    ac0a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    ac0c:	4b0c      	ldr	r3, [pc, #48]	; (ac40 <sd_mmc_init_write_blocks+0xe4>)
    ac0e:	1d3a      	adds	r2, r7, #4
    ac10:	8812      	ldrh	r2, [r2, #0]
    ac12:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    ac14:	2300      	movs	r3, #0
}
    ac16:	0018      	movs	r0, r3
    ac18:	46bd      	mov	sp, r7
    ac1a:	b007      	add	sp, #28
    ac1c:	bd90      	pop	{r4, r7, pc}
    ac1e:	46c0      	nop			; (mov r8, r8)
    ac20:	0000a461 	.word	0x0000a461
    ac24:	0000a969 	.word	0x0000a969
    ac28:	0000a55d 	.word	0x0000a55d
    ac2c:	00109119 	.word	0x00109119
    ac30:	00089118 	.word	0x00089118
    ac34:	20003cac 	.word	0x20003cac
    ac38:	0000b7dd 	.word	0x0000b7dd
    ac3c:	20003cb2 	.word	0x20003cb2
    ac40:	20003cb0 	.word	0x20003cb0

0000ac44 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    ac44:	b580      	push	{r7, lr}
    ac46:	b082      	sub	sp, #8
    ac48:	af00      	add	r7, sp, #0
    ac4a:	6078      	str	r0, [r7, #4]
    ac4c:	000a      	movs	r2, r1
    ac4e:	1cbb      	adds	r3, r7, #2
    ac50:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    ac52:	1cbb      	adds	r3, r7, #2
    ac54:	881a      	ldrh	r2, [r3, #0]
    ac56:	687b      	ldr	r3, [r7, #4]
    ac58:	0011      	movs	r1, r2
    ac5a:	0018      	movs	r0, r3
    ac5c:	4b0d      	ldr	r3, [pc, #52]	; (ac94 <sd_mmc_start_write_blocks+0x50>)
    ac5e:	4798      	blx	r3
    ac60:	0003      	movs	r3, r0
    ac62:	001a      	movs	r2, r3
    ac64:	2301      	movs	r3, #1
    ac66:	4053      	eors	r3, r2
    ac68:	b2db      	uxtb	r3, r3
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d004      	beq.n	ac78 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    ac6e:	4b0a      	ldr	r3, [pc, #40]	; (ac98 <sd_mmc_start_write_blocks+0x54>)
    ac70:	2200      	movs	r2, #0
    ac72:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    ac74:	2305      	movs	r3, #5
    ac76:	e008      	b.n	ac8a <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    ac78:	4b07      	ldr	r3, [pc, #28]	; (ac98 <sd_mmc_start_write_blocks+0x54>)
    ac7a:	881a      	ldrh	r2, [r3, #0]
    ac7c:	1cbb      	adds	r3, r7, #2
    ac7e:	881b      	ldrh	r3, [r3, #0]
    ac80:	1ad3      	subs	r3, r2, r3
    ac82:	b29a      	uxth	r2, r3
    ac84:	4b04      	ldr	r3, [pc, #16]	; (ac98 <sd_mmc_start_write_blocks+0x54>)
    ac86:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    ac88:	2300      	movs	r3, #0
}
    ac8a:	0018      	movs	r0, r3
    ac8c:	46bd      	mov	sp, r7
    ac8e:	b002      	add	sp, #8
    ac90:	bd80      	pop	{r7, pc}
    ac92:	46c0      	nop			; (mov r8, r8)
    ac94:	0000bb5d 	.word	0x0000bb5d
    ac98:	20003cb2 	.word	0x20003cb2

0000ac9c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    ac9c:	b580      	push	{r7, lr}
    ac9e:	b082      	sub	sp, #8
    aca0:	af00      	add	r7, sp, #0
    aca2:	0002      	movs	r2, r0
    aca4:	1dfb      	adds	r3, r7, #7
    aca6:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    aca8:	4b13      	ldr	r3, [pc, #76]	; (acf8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    acaa:	4798      	blx	r3
    acac:	0003      	movs	r3, r0
    acae:	001a      	movs	r2, r3
    acb0:	2301      	movs	r3, #1
    acb2:	4053      	eors	r3, r2
    acb4:	b2db      	uxtb	r3, r3
    acb6:	2b00      	cmp	r3, #0
    acb8:	d001      	beq.n	acbe <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    acba:	2305      	movs	r3, #5
    acbc:	e018      	b.n	acf0 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    acbe:	1dfb      	adds	r3, r7, #7
    acc0:	781b      	ldrb	r3, [r3, #0]
    acc2:	2b00      	cmp	r3, #0
    acc4:	d003      	beq.n	acce <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    acc6:	4b0d      	ldr	r3, [pc, #52]	; (acfc <sd_mmc_wait_end_of_write_blocks+0x60>)
    acc8:	2200      	movs	r2, #0
    acca:	801a      	strh	r2, [r3, #0]
    accc:	e005      	b.n	acda <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    acce:	4b0b      	ldr	r3, [pc, #44]	; (acfc <sd_mmc_wait_end_of_write_blocks+0x60>)
    acd0:	881b      	ldrh	r3, [r3, #0]
    acd2:	2b00      	cmp	r3, #0
    acd4:	d001      	beq.n	acda <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    acd6:	2300      	movs	r3, #0
    acd8:	e00a      	b.n	acf0 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    acda:	4b09      	ldr	r3, [pc, #36]	; (ad00 <sd_mmc_wait_end_of_write_blocks+0x64>)
    acdc:	881b      	ldrh	r3, [r3, #0]
    acde:	2b01      	cmp	r3, #1
    ace0:	d103      	bne.n	acea <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    ace2:	4b08      	ldr	r3, [pc, #32]	; (ad04 <sd_mmc_wait_end_of_write_blocks+0x68>)
    ace4:	4798      	blx	r3
		return SD_MMC_OK;
    ace6:	2300      	movs	r3, #0
    ace8:	e002      	b.n	acf0 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    acea:	4b06      	ldr	r3, [pc, #24]	; (ad04 <sd_mmc_wait_end_of_write_blocks+0x68>)
    acec:	4798      	blx	r3
	return SD_MMC_OK;
    acee:	2300      	movs	r3, #0
}
    acf0:	0018      	movs	r0, r3
    acf2:	46bd      	mov	sp, r7
    acf4:	b002      	add	sp, #8
    acf6:	bd80      	pop	{r7, pc}
    acf8:	0000bc1d 	.word	0x0000bc1d
    acfc:	20003cb2 	.word	0x20003cb2
    ad00:	20003cb0 	.word	0x20003cb0
    ad04:	0000a55d 	.word	0x0000a55d

0000ad08 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    ad08:	b580      	push	{r7, lr}
    ad0a:	b082      	sub	sp, #8
    ad0c:	af00      	add	r7, sp, #0
    ad0e:	0002      	movs	r2, r0
    ad10:	1dfb      	adds	r3, r7, #7
    ad12:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    ad14:	1dfb      	adds	r3, r7, #7
    ad16:	781b      	ldrb	r3, [r3, #0]
    ad18:	0018      	movs	r0, r3
    ad1a:	4b16      	ldr	r3, [pc, #88]	; (ad74 <sd_mmc_test_unit_ready+0x6c>)
    ad1c:	4798      	blx	r3
    ad1e:	0003      	movs	r3, r0
    ad20:	2b01      	cmp	r3, #1
    ad22:	d019      	beq.n	ad58 <sd_mmc_test_unit_ready+0x50>
    ad24:	2b02      	cmp	r3, #2
    ad26:	d019      	beq.n	ad5c <sd_mmc_test_unit_ready+0x54>
    ad28:	2b00      	cmp	r3, #0
    ad2a:	d11e      	bne.n	ad6a <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    ad2c:	1dfb      	adds	r3, r7, #7
    ad2e:	781b      	ldrb	r3, [r3, #0]
    ad30:	4a11      	ldr	r2, [pc, #68]	; (ad78 <sd_mmc_test_unit_ready+0x70>)
    ad32:	5cd3      	ldrb	r3, [r2, r3]
    ad34:	2b00      	cmp	r3, #0
    ad36:	d001      	beq.n	ad3c <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    ad38:	2302      	movs	r3, #2
    ad3a:	e017      	b.n	ad6c <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    ad3c:	1dfb      	adds	r3, r7, #7
    ad3e:	781b      	ldrb	r3, [r3, #0]
    ad40:	0018      	movs	r0, r3
    ad42:	4b0e      	ldr	r3, [pc, #56]	; (ad7c <sd_mmc_test_unit_ready+0x74>)
    ad44:	4798      	blx	r3
    ad46:	0003      	movs	r3, r0
    ad48:	001a      	movs	r2, r3
    ad4a:	2303      	movs	r3, #3
    ad4c:	4013      	ands	r3, r2
    ad4e:	d001      	beq.n	ad54 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    ad50:	2300      	movs	r3, #0
    ad52:	e00b      	b.n	ad6c <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    ad54:	2302      	movs	r3, #2
    ad56:	e009      	b.n	ad6c <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    ad58:	2303      	movs	r3, #3
    ad5a:	e007      	b.n	ad6c <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    ad5c:	1dfb      	adds	r3, r7, #7
    ad5e:	781b      	ldrb	r3, [r3, #0]
    ad60:	4a05      	ldr	r2, [pc, #20]	; (ad78 <sd_mmc_test_unit_ready+0x70>)
    ad62:	2100      	movs	r1, #0
    ad64:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    ad66:	2302      	movs	r3, #2
    ad68:	e000      	b.n	ad6c <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    ad6a:	2301      	movs	r3, #1
	}
}
    ad6c:	0018      	movs	r0, r3
    ad6e:	46bd      	mov	sp, r7
    ad70:	b002      	add	sp, #8
    ad72:	bd80      	pop	{r7, pc}
    ad74:	0000a87d 	.word	0x0000a87d
    ad78:	20003cb4 	.word	0x20003cb4
    ad7c:	0000a8f1 	.word	0x0000a8f1

0000ad80 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    ad80:	b580      	push	{r7, lr}
    ad82:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    ad84:	2000      	movs	r0, #0
    ad86:	4b03      	ldr	r3, [pc, #12]	; (ad94 <sd_mmc_test_unit_ready_0+0x14>)
    ad88:	4798      	blx	r3
    ad8a:	0003      	movs	r3, r0
}
    ad8c:	0018      	movs	r0, r3
    ad8e:	46bd      	mov	sp, r7
    ad90:	bd80      	pop	{r7, pc}
    ad92:	46c0      	nop			; (mov r8, r8)
    ad94:	0000ad09 	.word	0x0000ad09

0000ad98 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    ad98:	b580      	push	{r7, lr}
    ad9a:	b082      	sub	sp, #8
    ad9c:	af00      	add	r7, sp, #0
    ad9e:	0002      	movs	r2, r0
    ada0:	6039      	str	r1, [r7, #0]
    ada2:	1dfb      	adds	r3, r7, #7
    ada4:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    ada6:	1dfb      	adds	r3, r7, #7
    ada8:	781b      	ldrb	r3, [r3, #0]
    adaa:	0018      	movs	r0, r3
    adac:	4b08      	ldr	r3, [pc, #32]	; (add0 <sd_mmc_read_capacity+0x38>)
    adae:	4798      	blx	r3
    adb0:	0003      	movs	r3, r0
    adb2:	005b      	lsls	r3, r3, #1
    adb4:	1e5a      	subs	r2, r3, #1
    adb6:	683b      	ldr	r3, [r7, #0]
    adb8:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    adba:	1dfb      	adds	r3, r7, #7
    adbc:	781b      	ldrb	r3, [r3, #0]
    adbe:	0018      	movs	r0, r3
    adc0:	4b04      	ldr	r3, [pc, #16]	; (add4 <sd_mmc_read_capacity+0x3c>)
    adc2:	4798      	blx	r3
    adc4:	0003      	movs	r3, r0
}
    adc6:	0018      	movs	r0, r3
    adc8:	46bd      	mov	sp, r7
    adca:	b002      	add	sp, #8
    adcc:	bd80      	pop	{r7, pc}
    adce:	46c0      	nop			; (mov r8, r8)
    add0:	0000a92d 	.word	0x0000a92d
    add4:	0000ad09 	.word	0x0000ad09

0000add8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    add8:	b580      	push	{r7, lr}
    adda:	b082      	sub	sp, #8
    addc:	af00      	add	r7, sp, #0
    adde:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    ade0:	687b      	ldr	r3, [r7, #4]
    ade2:	0019      	movs	r1, r3
    ade4:	2000      	movs	r0, #0
    ade6:	4b03      	ldr	r3, [pc, #12]	; (adf4 <sd_mmc_read_capacity_0+0x1c>)
    ade8:	4798      	blx	r3
    adea:	0003      	movs	r3, r0
}
    adec:	0018      	movs	r0, r3
    adee:	46bd      	mov	sp, r7
    adf0:	b002      	add	sp, #8
    adf2:	bd80      	pop	{r7, pc}
    adf4:	0000ad99 	.word	0x0000ad99

0000adf8 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    adf8:	b580      	push	{r7, lr}
    adfa:	b082      	sub	sp, #8
    adfc:	af00      	add	r7, sp, #0
    adfe:	0002      	movs	r2, r0
    ae00:	1dfb      	adds	r3, r7, #7
    ae02:	701a      	strb	r2, [r3, #0]
    ae04:	1dbb      	adds	r3, r7, #6
    ae06:	1c0a      	adds	r2, r1, #0
    ae08:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    ae0a:	1dfb      	adds	r3, r7, #7
    ae0c:	781b      	ldrb	r3, [r3, #0]
    ae0e:	4a04      	ldr	r2, [pc, #16]	; (ae20 <sd_mmc_unload+0x28>)
    ae10:	1db9      	adds	r1, r7, #6
    ae12:	7809      	ldrb	r1, [r1, #0]
    ae14:	54d1      	strb	r1, [r2, r3]
	return true;
    ae16:	2301      	movs	r3, #1
}
    ae18:	0018      	movs	r0, r3
    ae1a:	46bd      	mov	sp, r7
    ae1c:	b002      	add	sp, #8
    ae1e:	bd80      	pop	{r7, pc}
    ae20:	20003cb4 	.word	0x20003cb4

0000ae24 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    ae24:	b580      	push	{r7, lr}
    ae26:	b082      	sub	sp, #8
    ae28:	af00      	add	r7, sp, #0
    ae2a:	0002      	movs	r2, r0
    ae2c:	1dfb      	adds	r3, r7, #7
    ae2e:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    ae30:	1dfb      	adds	r3, r7, #7
    ae32:	781b      	ldrb	r3, [r3, #0]
    ae34:	0019      	movs	r1, r3
    ae36:	2000      	movs	r0, #0
    ae38:	4b03      	ldr	r3, [pc, #12]	; (ae48 <sd_mmc_unload_0+0x24>)
    ae3a:	4798      	blx	r3
    ae3c:	0003      	movs	r3, r0
}
    ae3e:	0018      	movs	r0, r3
    ae40:	46bd      	mov	sp, r7
    ae42:	b002      	add	sp, #8
    ae44:	bd80      	pop	{r7, pc}
    ae46:	46c0      	nop			; (mov r8, r8)
    ae48:	0000adf9 	.word	0x0000adf9

0000ae4c <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    ae4c:	b580      	push	{r7, lr}
    ae4e:	b082      	sub	sp, #8
    ae50:	af00      	add	r7, sp, #0
    ae52:	0002      	movs	r2, r0
    ae54:	1dfb      	adds	r3, r7, #7
    ae56:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    ae58:	1dfb      	adds	r3, r7, #7
    ae5a:	781b      	ldrb	r3, [r3, #0]
    ae5c:	0018      	movs	r0, r3
    ae5e:	4b03      	ldr	r3, [pc, #12]	; (ae6c <sd_mmc_wr_protect+0x20>)
    ae60:	4798      	blx	r3
    ae62:	0003      	movs	r3, r0
}
    ae64:	0018      	movs	r0, r3
    ae66:	46bd      	mov	sp, r7
    ae68:	b002      	add	sp, #8
    ae6a:	bd80      	pop	{r7, pc}
    ae6c:	0000a969 	.word	0x0000a969

0000ae70 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    ae70:	b580      	push	{r7, lr}
    ae72:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    ae74:	2000      	movs	r0, #0
    ae76:	4b03      	ldr	r3, [pc, #12]	; (ae84 <sd_mmc_wr_protect_0+0x14>)
    ae78:	4798      	blx	r3
    ae7a:	0003      	movs	r3, r0
}
    ae7c:	0018      	movs	r0, r3
    ae7e:	46bd      	mov	sp, r7
    ae80:	bd80      	pop	{r7, pc}
    ae82:	46c0      	nop			; (mov r8, r8)
    ae84:	0000ae4d 	.word	0x0000ae4d

0000ae88 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    ae88:	b580      	push	{r7, lr}
    ae8a:	b082      	sub	sp, #8
    ae8c:	af00      	add	r7, sp, #0
    ae8e:	0002      	movs	r2, r0
    ae90:	1dfb      	adds	r3, r7, #7
    ae92:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    ae94:	2301      	movs	r3, #1
}
    ae96:	0018      	movs	r0, r3
    ae98:	46bd      	mov	sp, r7
    ae9a:	b002      	add	sp, #8
    ae9c:	bd80      	pop	{r7, pc}
	...

0000aea0 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    aea0:	b580      	push	{r7, lr}
    aea2:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    aea4:	2000      	movs	r0, #0
    aea6:	4b03      	ldr	r3, [pc, #12]	; (aeb4 <sd_mmc_removal_0+0x14>)
    aea8:	4798      	blx	r3
    aeaa:	0003      	movs	r3, r0
}
    aeac:	0018      	movs	r0, r3
    aeae:	46bd      	mov	sp, r7
    aeb0:	bd80      	pop	{r7, pc}
    aeb2:	46c0      	nop			; (mov r8, r8)
    aeb4:	0000ae89 	.word	0x0000ae89

0000aeb8 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    aeb8:	b580      	push	{r7, lr}
    aeba:	b084      	sub	sp, #16
    aebc:	af00      	add	r7, sp, #0
    aebe:	60b9      	str	r1, [r7, #8]
    aec0:	607a      	str	r2, [r7, #4]
    aec2:	230f      	movs	r3, #15
    aec4:	18fb      	adds	r3, r7, r3
    aec6:	1c02      	adds	r2, r0, #0
    aec8:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    aeca:	68b9      	ldr	r1, [r7, #8]
    aecc:	230f      	movs	r3, #15
    aece:	18fb      	adds	r3, r7, r3
    aed0:	781b      	ldrb	r3, [r3, #0]
    aed2:	2201      	movs	r2, #1
    aed4:	0018      	movs	r0, r3
    aed6:	4b10      	ldr	r3, [pc, #64]	; (af18 <sd_mmc_mem_2_ram+0x60>)
    aed8:	4798      	blx	r3
    aeda:	1e03      	subs	r3, r0, #0
    aedc:	d005      	beq.n	aeea <sd_mmc_mem_2_ram+0x32>
    aede:	2b02      	cmp	r3, #2
    aee0:	d101      	bne.n	aee6 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    aee2:	2302      	movs	r3, #2
    aee4:	e013      	b.n	af0e <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    aee6:	2301      	movs	r3, #1
    aee8:	e011      	b.n	af0e <sd_mmc_mem_2_ram+0x56>
		break;
    aeea:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    aeec:	687b      	ldr	r3, [r7, #4]
    aeee:	2101      	movs	r1, #1
    aef0:	0018      	movs	r0, r3
    aef2:	4b0a      	ldr	r3, [pc, #40]	; (af1c <sd_mmc_mem_2_ram+0x64>)
    aef4:	4798      	blx	r3
    aef6:	1e03      	subs	r3, r0, #0
    aef8:	d001      	beq.n	aefe <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    aefa:	2301      	movs	r3, #1
    aefc:	e007      	b.n	af0e <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    aefe:	2000      	movs	r0, #0
    af00:	4b07      	ldr	r3, [pc, #28]	; (af20 <sd_mmc_mem_2_ram+0x68>)
    af02:	4798      	blx	r3
    af04:	1e03      	subs	r3, r0, #0
    af06:	d001      	beq.n	af0c <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    af08:	2301      	movs	r3, #1
    af0a:	e000      	b.n	af0e <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    af0c:	2300      	movs	r3, #0
}
    af0e:	0018      	movs	r0, r3
    af10:	46bd      	mov	sp, r7
    af12:	b004      	add	sp, #16
    af14:	bd80      	pop	{r7, pc}
    af16:	46c0      	nop			; (mov r8, r8)
    af18:	0000a981 	.word	0x0000a981
    af1c:	0000aa6d 	.word	0x0000aa6d
    af20:	0000aac5 	.word	0x0000aac5

0000af24 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    af24:	b580      	push	{r7, lr}
    af26:	b082      	sub	sp, #8
    af28:	af00      	add	r7, sp, #0
    af2a:	6078      	str	r0, [r7, #4]
    af2c:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    af2e:	683a      	ldr	r2, [r7, #0]
    af30:	687b      	ldr	r3, [r7, #4]
    af32:	0019      	movs	r1, r3
    af34:	2000      	movs	r0, #0
    af36:	4b03      	ldr	r3, [pc, #12]	; (af44 <sd_mmc_mem_2_ram_0+0x20>)
    af38:	4798      	blx	r3
    af3a:	0003      	movs	r3, r0
}
    af3c:	0018      	movs	r0, r3
    af3e:	46bd      	mov	sp, r7
    af40:	b002      	add	sp, #8
    af42:	bd80      	pop	{r7, pc}
    af44:	0000aeb9 	.word	0x0000aeb9

0000af48 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    af48:	b580      	push	{r7, lr}
    af4a:	b084      	sub	sp, #16
    af4c:	af00      	add	r7, sp, #0
    af4e:	60b9      	str	r1, [r7, #8]
    af50:	607a      	str	r2, [r7, #4]
    af52:	230f      	movs	r3, #15
    af54:	18fb      	adds	r3, r7, r3
    af56:	1c02      	adds	r2, r0, #0
    af58:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    af5a:	68b9      	ldr	r1, [r7, #8]
    af5c:	230f      	movs	r3, #15
    af5e:	18fb      	adds	r3, r7, r3
    af60:	781b      	ldrb	r3, [r3, #0]
    af62:	2201      	movs	r2, #1
    af64:	0018      	movs	r0, r3
    af66:	4b10      	ldr	r3, [pc, #64]	; (afa8 <sd_mmc_ram_2_mem+0x60>)
    af68:	4798      	blx	r3
    af6a:	1e03      	subs	r3, r0, #0
    af6c:	d005      	beq.n	af7a <sd_mmc_ram_2_mem+0x32>
    af6e:	2b02      	cmp	r3, #2
    af70:	d101      	bne.n	af76 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    af72:	2302      	movs	r3, #2
    af74:	e013      	b.n	af9e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    af76:	2301      	movs	r3, #1
    af78:	e011      	b.n	af9e <sd_mmc_ram_2_mem+0x56>
		break;
    af7a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    af7c:	687b      	ldr	r3, [r7, #4]
    af7e:	2101      	movs	r1, #1
    af80:	0018      	movs	r0, r3
    af82:	4b0a      	ldr	r3, [pc, #40]	; (afac <sd_mmc_ram_2_mem+0x64>)
    af84:	4798      	blx	r3
    af86:	1e03      	subs	r3, r0, #0
    af88:	d001      	beq.n	af8e <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    af8a:	2301      	movs	r3, #1
    af8c:	e007      	b.n	af9e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    af8e:	2000      	movs	r0, #0
    af90:	4b07      	ldr	r3, [pc, #28]	; (afb0 <sd_mmc_ram_2_mem+0x68>)
    af92:	4798      	blx	r3
    af94:	1e03      	subs	r3, r0, #0
    af96:	d001      	beq.n	af9c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    af98:	2301      	movs	r3, #1
    af9a:	e000      	b.n	af9e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    af9c:	2300      	movs	r3, #0
}
    af9e:	0018      	movs	r0, r3
    afa0:	46bd      	mov	sp, r7
    afa2:	b004      	add	sp, #16
    afa4:	bd80      	pop	{r7, pc}
    afa6:	46c0      	nop			; (mov r8, r8)
    afa8:	0000ab5d 	.word	0x0000ab5d
    afac:	0000ac45 	.word	0x0000ac45
    afb0:	0000ac9d 	.word	0x0000ac9d

0000afb4 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    afb4:	b580      	push	{r7, lr}
    afb6:	b082      	sub	sp, #8
    afb8:	af00      	add	r7, sp, #0
    afba:	6078      	str	r0, [r7, #4]
    afbc:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    afbe:	683a      	ldr	r2, [r7, #0]
    afc0:	687b      	ldr	r3, [r7, #4]
    afc2:	0019      	movs	r1, r3
    afc4:	2000      	movs	r0, #0
    afc6:	4b03      	ldr	r3, [pc, #12]	; (afd4 <sd_mmc_ram_2_mem_0+0x20>)
    afc8:	4798      	blx	r3
    afca:	0003      	movs	r3, r0
}
    afcc:	0018      	movs	r0, r3
    afce:	46bd      	mov	sp, r7
    afd0:	b002      	add	sp, #8
    afd2:	bd80      	pop	{r7, pc}
    afd4:	0000af49 	.word	0x0000af49

0000afd8 <system_pinmux_get_group_from_gpio_pin>:
{
    afd8:	b580      	push	{r7, lr}
    afda:	b084      	sub	sp, #16
    afdc:	af00      	add	r7, sp, #0
    afde:	0002      	movs	r2, r0
    afe0:	1dfb      	adds	r3, r7, #7
    afe2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    afe4:	230f      	movs	r3, #15
    afe6:	18fb      	adds	r3, r7, r3
    afe8:	1dfa      	adds	r2, r7, #7
    afea:	7812      	ldrb	r2, [r2, #0]
    afec:	09d2      	lsrs	r2, r2, #7
    afee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    aff0:	230e      	movs	r3, #14
    aff2:	18fb      	adds	r3, r7, r3
    aff4:	1dfa      	adds	r2, r7, #7
    aff6:	7812      	ldrb	r2, [r2, #0]
    aff8:	0952      	lsrs	r2, r2, #5
    affa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    affc:	4b0d      	ldr	r3, [pc, #52]	; (b034 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    affe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    b000:	230f      	movs	r3, #15
    b002:	18fb      	adds	r3, r7, r3
    b004:	781b      	ldrb	r3, [r3, #0]
    b006:	2b00      	cmp	r3, #0
    b008:	d10f      	bne.n	b02a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    b00a:	230f      	movs	r3, #15
    b00c:	18fb      	adds	r3, r7, r3
    b00e:	781b      	ldrb	r3, [r3, #0]
    b010:	009b      	lsls	r3, r3, #2
    b012:	2210      	movs	r2, #16
    b014:	4694      	mov	ip, r2
    b016:	44bc      	add	ip, r7
    b018:	4463      	add	r3, ip
    b01a:	3b08      	subs	r3, #8
    b01c:	681a      	ldr	r2, [r3, #0]
    b01e:	230e      	movs	r3, #14
    b020:	18fb      	adds	r3, r7, r3
    b022:	781b      	ldrb	r3, [r3, #0]
    b024:	01db      	lsls	r3, r3, #7
    b026:	18d3      	adds	r3, r2, r3
    b028:	e000      	b.n	b02c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    b02a:	2300      	movs	r3, #0
}
    b02c:	0018      	movs	r0, r3
    b02e:	46bd      	mov	sp, r7
    b030:	b004      	add	sp, #16
    b032:	bd80      	pop	{r7, pc}
    b034:	41004400 	.word	0x41004400

0000b038 <system_interrupt_enable>:
{
    b038:	b580      	push	{r7, lr}
    b03a:	b082      	sub	sp, #8
    b03c:	af00      	add	r7, sp, #0
    b03e:	0002      	movs	r2, r0
    b040:	1dfb      	adds	r3, r7, #7
    b042:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b044:	4b06      	ldr	r3, [pc, #24]	; (b060 <system_interrupt_enable+0x28>)
    b046:	1dfa      	adds	r2, r7, #7
    b048:	7812      	ldrb	r2, [r2, #0]
    b04a:	0011      	movs	r1, r2
    b04c:	221f      	movs	r2, #31
    b04e:	400a      	ands	r2, r1
    b050:	2101      	movs	r1, #1
    b052:	4091      	lsls	r1, r2
    b054:	000a      	movs	r2, r1
    b056:	601a      	str	r2, [r3, #0]
}
    b058:	46c0      	nop			; (mov r8, r8)
    b05a:	46bd      	mov	sp, r7
    b05c:	b002      	add	sp, #8
    b05e:	bd80      	pop	{r7, pc}
    b060:	e000e100 	.word	0xe000e100

0000b064 <port_get_group_from_gpio_pin>:
{
    b064:	b580      	push	{r7, lr}
    b066:	b082      	sub	sp, #8
    b068:	af00      	add	r7, sp, #0
    b06a:	0002      	movs	r2, r0
    b06c:	1dfb      	adds	r3, r7, #7
    b06e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    b070:	1dfb      	adds	r3, r7, #7
    b072:	781b      	ldrb	r3, [r3, #0]
    b074:	0018      	movs	r0, r3
    b076:	4b03      	ldr	r3, [pc, #12]	; (b084 <port_get_group_from_gpio_pin+0x20>)
    b078:	4798      	blx	r3
    b07a:	0003      	movs	r3, r0
}
    b07c:	0018      	movs	r0, r3
    b07e:	46bd      	mov	sp, r7
    b080:	b002      	add	sp, #8
    b082:	bd80      	pop	{r7, pc}
    b084:	0000afd9 	.word	0x0000afd9

0000b088 <port_get_config_defaults>:
{
    b088:	b580      	push	{r7, lr}
    b08a:	b082      	sub	sp, #8
    b08c:	af00      	add	r7, sp, #0
    b08e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	2200      	movs	r2, #0
    b094:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b096:	687b      	ldr	r3, [r7, #4]
    b098:	2201      	movs	r2, #1
    b09a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    b09c:	687b      	ldr	r3, [r7, #4]
    b09e:	2200      	movs	r2, #0
    b0a0:	709a      	strb	r2, [r3, #2]
}
    b0a2:	46c0      	nop			; (mov r8, r8)
    b0a4:	46bd      	mov	sp, r7
    b0a6:	b002      	add	sp, #8
    b0a8:	bd80      	pop	{r7, pc}
	...

0000b0ac <port_pin_set_output_level>:
{
    b0ac:	b580      	push	{r7, lr}
    b0ae:	b084      	sub	sp, #16
    b0b0:	af00      	add	r7, sp, #0
    b0b2:	0002      	movs	r2, r0
    b0b4:	1dfb      	adds	r3, r7, #7
    b0b6:	701a      	strb	r2, [r3, #0]
    b0b8:	1dbb      	adds	r3, r7, #6
    b0ba:	1c0a      	adds	r2, r1, #0
    b0bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    b0be:	1dfb      	adds	r3, r7, #7
    b0c0:	781b      	ldrb	r3, [r3, #0]
    b0c2:	0018      	movs	r0, r3
    b0c4:	4b0d      	ldr	r3, [pc, #52]	; (b0fc <port_pin_set_output_level+0x50>)
    b0c6:	4798      	blx	r3
    b0c8:	0003      	movs	r3, r0
    b0ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b0cc:	1dfb      	adds	r3, r7, #7
    b0ce:	781b      	ldrb	r3, [r3, #0]
    b0d0:	221f      	movs	r2, #31
    b0d2:	4013      	ands	r3, r2
    b0d4:	2201      	movs	r2, #1
    b0d6:	409a      	lsls	r2, r3
    b0d8:	0013      	movs	r3, r2
    b0da:	60bb      	str	r3, [r7, #8]
	if (level) {
    b0dc:	1dbb      	adds	r3, r7, #6
    b0de:	781b      	ldrb	r3, [r3, #0]
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	d003      	beq.n	b0ec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    b0e4:	68fb      	ldr	r3, [r7, #12]
    b0e6:	68ba      	ldr	r2, [r7, #8]
    b0e8:	619a      	str	r2, [r3, #24]
}
    b0ea:	e002      	b.n	b0f2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    b0ec:	68fb      	ldr	r3, [r7, #12]
    b0ee:	68ba      	ldr	r2, [r7, #8]
    b0f0:	615a      	str	r2, [r3, #20]
}
    b0f2:	46c0      	nop			; (mov r8, r8)
    b0f4:	46bd      	mov	sp, r7
    b0f6:	b004      	add	sp, #16
    b0f8:	bd80      	pop	{r7, pc}
    b0fa:	46c0      	nop			; (mov r8, r8)
    b0fc:	0000b065 	.word	0x0000b065

0000b100 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    b100:	b580      	push	{r7, lr}
    b102:	b084      	sub	sp, #16
    b104:	af00      	add	r7, sp, #0
    b106:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    b108:	687b      	ldr	r3, [r7, #4]
    b10a:	681b      	ldr	r3, [r3, #0]
    b10c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    b10e:	68fb      	ldr	r3, [r7, #12]
    b110:	69db      	ldr	r3, [r3, #28]
    b112:	1e5a      	subs	r2, r3, #1
    b114:	4193      	sbcs	r3, r2
    b116:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    b118:	0018      	movs	r0, r3
    b11a:	46bd      	mov	sp, r7
    b11c:	b004      	add	sp, #16
    b11e:	bd80      	pop	{r7, pc}

0000b120 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    b120:	b580      	push	{r7, lr}
    b122:	b082      	sub	sp, #8
    b124:	af00      	add	r7, sp, #0
    b126:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    b128:	687b      	ldr	r3, [r7, #4]
    b12a:	2201      	movs	r2, #1
    b12c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    b12e:	687b      	ldr	r3, [r7, #4]
    b130:	2200      	movs	r2, #0
    b132:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    b134:	687b      	ldr	r3, [r7, #4]
    b136:	2200      	movs	r2, #0
    b138:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    b13a:	687b      	ldr	r3, [r7, #4]
    b13c:	22c0      	movs	r2, #192	; 0xc0
    b13e:	0392      	lsls	r2, r2, #14
    b140:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    b142:	687b      	ldr	r3, [r7, #4]
    b144:	2200      	movs	r2, #0
    b146:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    b148:	687b      	ldr	r3, [r7, #4]
    b14a:	2200      	movs	r2, #0
    b14c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    b14e:	687b      	ldr	r3, [r7, #4]
    b150:	2201      	movs	r2, #1
    b152:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    b154:	687b      	ldr	r3, [r7, #4]
    b156:	2201      	movs	r2, #1
    b158:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    b15a:	687b      	ldr	r3, [r7, #4]
    b15c:	2200      	movs	r2, #0
    b15e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    b160:	687b      	ldr	r3, [r7, #4]
    b162:	2224      	movs	r2, #36	; 0x24
    b164:	2100      	movs	r1, #0
    b166:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    b168:	687b      	ldr	r3, [r7, #4]
    b16a:	3318      	adds	r3, #24
    b16c:	220c      	movs	r2, #12
    b16e:	2100      	movs	r1, #0
    b170:	0018      	movs	r0, r3
    b172:	4b0a      	ldr	r3, [pc, #40]	; (b19c <spi_get_config_defaults+0x7c>)
    b174:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    b176:	687b      	ldr	r3, [r7, #4]
    b178:	4a09      	ldr	r2, [pc, #36]	; (b1a0 <spi_get_config_defaults+0x80>)
    b17a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    b17c:	687b      	ldr	r3, [r7, #4]
    b17e:	2200      	movs	r2, #0
    b180:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    b182:	687b      	ldr	r3, [r7, #4]
    b184:	2200      	movs	r2, #0
    b186:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    b188:	687b      	ldr	r3, [r7, #4]
    b18a:	2200      	movs	r2, #0
    b18c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    b18e:	687b      	ldr	r3, [r7, #4]
    b190:	2200      	movs	r2, #0
    b192:	635a      	str	r2, [r3, #52]	; 0x34

};
    b194:	46c0      	nop			; (mov r8, r8)
    b196:	46bd      	mov	sp, r7
    b198:	b002      	add	sp, #8
    b19a:	bd80      	pop	{r7, pc}
    b19c:	00020123 	.word	0x00020123
    b1a0:	000186a0 	.word	0x000186a0

0000b1a4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    b1a4:	b580      	push	{r7, lr}
    b1a6:	b082      	sub	sp, #8
    b1a8:	af00      	add	r7, sp, #0
    b1aa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    b1ac:	687b      	ldr	r3, [r7, #4]
    b1ae:	220a      	movs	r2, #10
    b1b0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    b1b2:	687b      	ldr	r3, [r7, #4]
    b1b4:	2200      	movs	r2, #0
    b1b6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    b1b8:	687b      	ldr	r3, [r7, #4]
    b1ba:	2200      	movs	r2, #0
    b1bc:	709a      	strb	r2, [r3, #2]
}
    b1be:	46c0      	nop			; (mov r8, r8)
    b1c0:	46bd      	mov	sp, r7
    b1c2:	b002      	add	sp, #8
    b1c4:	bd80      	pop	{r7, pc}
	...

0000b1c8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    b1c8:	b580      	push	{r7, lr}
    b1ca:	b084      	sub	sp, #16
    b1cc:	af00      	add	r7, sp, #0
    b1ce:	6078      	str	r0, [r7, #4]
    b1d0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    b1d2:	683b      	ldr	r3, [r7, #0]
    b1d4:	781a      	ldrb	r2, [r3, #0]
    b1d6:	687b      	ldr	r3, [r7, #4]
    b1d8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    b1da:	683b      	ldr	r3, [r7, #0]
    b1dc:	785a      	ldrb	r2, [r3, #1]
    b1de:	687b      	ldr	r3, [r7, #4]
    b1e0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    b1e2:	683b      	ldr	r3, [r7, #0]
    b1e4:	789a      	ldrb	r2, [r3, #2]
    b1e6:	687b      	ldr	r3, [r7, #4]
    b1e8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    b1ea:	230c      	movs	r3, #12
    b1ec:	18fb      	adds	r3, r7, r3
    b1ee:	0018      	movs	r0, r3
    b1f0:	4b0b      	ldr	r3, [pc, #44]	; (b220 <spi_attach_slave+0x58>)
    b1f2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    b1f4:	230c      	movs	r3, #12
    b1f6:	18fb      	adds	r3, r7, r3
    b1f8:	2201      	movs	r2, #1
    b1fa:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    b1fc:	687b      	ldr	r3, [r7, #4]
    b1fe:	781b      	ldrb	r3, [r3, #0]
    b200:	220c      	movs	r2, #12
    b202:	18ba      	adds	r2, r7, r2
    b204:	0011      	movs	r1, r2
    b206:	0018      	movs	r0, r3
    b208:	4b06      	ldr	r3, [pc, #24]	; (b224 <spi_attach_slave+0x5c>)
    b20a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    b20c:	687b      	ldr	r3, [r7, #4]
    b20e:	781b      	ldrb	r3, [r3, #0]
    b210:	2101      	movs	r1, #1
    b212:	0018      	movs	r0, r3
    b214:	4b04      	ldr	r3, [pc, #16]	; (b228 <spi_attach_slave+0x60>)
    b216:	4798      	blx	r3
}
    b218:	46c0      	nop			; (mov r8, r8)
    b21a:	46bd      	mov	sp, r7
    b21c:	b004      	add	sp, #16
    b21e:	bd80      	pop	{r7, pc}
    b220:	0000b089 	.word	0x0000b089
    b224:	0001256d 	.word	0x0001256d
    b228:	0000b0ad 	.word	0x0000b0ad

0000b22c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    b22c:	b580      	push	{r7, lr}
    b22e:	b084      	sub	sp, #16
    b230:	af00      	add	r7, sp, #0
    b232:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    b234:	687b      	ldr	r3, [r7, #4]
    b236:	681b      	ldr	r3, [r3, #0]
    b238:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b23a:	687b      	ldr	r3, [r7, #4]
    b23c:	681b      	ldr	r3, [r3, #0]
    b23e:	0018      	movs	r0, r3
    b240:	4b0b      	ldr	r3, [pc, #44]	; (b270 <spi_enable+0x44>)
    b242:	4798      	blx	r3
    b244:	0003      	movs	r3, r0
    b246:	0018      	movs	r0, r3
    b248:	4b0a      	ldr	r3, [pc, #40]	; (b274 <spi_enable+0x48>)
    b24a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    b24c:	46c0      	nop			; (mov r8, r8)
    b24e:	687b      	ldr	r3, [r7, #4]
    b250:	0018      	movs	r0, r3
    b252:	4b09      	ldr	r3, [pc, #36]	; (b278 <spi_enable+0x4c>)
    b254:	4798      	blx	r3
    b256:	1e03      	subs	r3, r0, #0
    b258:	d1f9      	bne.n	b24e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    b25a:	68fb      	ldr	r3, [r7, #12]
    b25c:	681b      	ldr	r3, [r3, #0]
    b25e:	2202      	movs	r2, #2
    b260:	431a      	orrs	r2, r3
    b262:	68fb      	ldr	r3, [r7, #12]
    b264:	601a      	str	r2, [r3, #0]
}
    b266:	46c0      	nop			; (mov r8, r8)
    b268:	46bd      	mov	sp, r7
    b26a:	b004      	add	sp, #16
    b26c:	bd80      	pop	{r7, pc}
    b26e:	46c0      	nop			; (mov r8, r8)
    b270:	0001323d 	.word	0x0001323d
    b274:	0000b039 	.word	0x0000b039
    b278:	0000b101 	.word	0x0000b101

0000b27c <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    b27c:	b580      	push	{r7, lr}
    b27e:	b084      	sub	sp, #16
    b280:	af00      	add	r7, sp, #0
    b282:	6078      	str	r0, [r7, #4]
    b284:	000a      	movs	r2, r1
    b286:	1cfb      	adds	r3, r7, #3
    b288:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    b28a:	230f      	movs	r3, #15
    b28c:	18fb      	adds	r3, r7, r3
    b28e:	2200      	movs	r2, #0
    b290:	701a      	strb	r2, [r3, #0]
	while (size--) {
    b292:	e038      	b.n	b306 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    b294:	687b      	ldr	r3, [r7, #4]
    b296:	1c5a      	adds	r2, r3, #1
    b298:	607a      	str	r2, [r7, #4]
    b29a:	220e      	movs	r2, #14
    b29c:	18ba      	adds	r2, r7, r2
    b29e:	781b      	ldrb	r3, [r3, #0]
    b2a0:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    b2a2:	230d      	movs	r3, #13
    b2a4:	18fb      	adds	r3, r7, r3
    b2a6:	2200      	movs	r2, #0
    b2a8:	701a      	strb	r2, [r3, #0]
    b2aa:	e027      	b.n	b2fc <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    b2ac:	230f      	movs	r3, #15
    b2ae:	18fa      	adds	r2, r7, r3
    b2b0:	230f      	movs	r3, #15
    b2b2:	18fb      	adds	r3, r7, r3
    b2b4:	781b      	ldrb	r3, [r3, #0]
    b2b6:	18db      	adds	r3, r3, r3
    b2b8:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    b2ba:	230e      	movs	r3, #14
    b2bc:	18fa      	adds	r2, r7, r3
    b2be:	230f      	movs	r3, #15
    b2c0:	18fb      	adds	r3, r7, r3
    b2c2:	7812      	ldrb	r2, [r2, #0]
    b2c4:	781b      	ldrb	r3, [r3, #0]
    b2c6:	4053      	eors	r3, r2
    b2c8:	b2db      	uxtb	r3, r3
    b2ca:	b25b      	sxtb	r3, r3
    b2cc:	2b00      	cmp	r3, #0
    b2ce:	da07      	bge.n	b2e0 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    b2d0:	230f      	movs	r3, #15
    b2d2:	18fb      	adds	r3, r7, r3
    b2d4:	220f      	movs	r2, #15
    b2d6:	18ba      	adds	r2, r7, r2
    b2d8:	7812      	ldrb	r2, [r2, #0]
    b2da:	2109      	movs	r1, #9
    b2dc:	404a      	eors	r2, r1
    b2de:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    b2e0:	230e      	movs	r3, #14
    b2e2:	18fa      	adds	r2, r7, r3
    b2e4:	230e      	movs	r3, #14
    b2e6:	18fb      	adds	r3, r7, r3
    b2e8:	781b      	ldrb	r3, [r3, #0]
    b2ea:	18db      	adds	r3, r3, r3
    b2ec:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    b2ee:	230d      	movs	r3, #13
    b2f0:	18fb      	adds	r3, r7, r3
    b2f2:	781a      	ldrb	r2, [r3, #0]
    b2f4:	230d      	movs	r3, #13
    b2f6:	18fb      	adds	r3, r7, r3
    b2f8:	3201      	adds	r2, #1
    b2fa:	701a      	strb	r2, [r3, #0]
    b2fc:	230d      	movs	r3, #13
    b2fe:	18fb      	adds	r3, r7, r3
    b300:	781b      	ldrb	r3, [r3, #0]
    b302:	2b07      	cmp	r3, #7
    b304:	d9d2      	bls.n	b2ac <sd_mmc_spi_crc7+0x30>
	while (size--) {
    b306:	1cfb      	adds	r3, r7, #3
    b308:	781b      	ldrb	r3, [r3, #0]
    b30a:	1cfa      	adds	r2, r7, #3
    b30c:	1e59      	subs	r1, r3, #1
    b30e:	7011      	strb	r1, [r2, #0]
    b310:	2b00      	cmp	r3, #0
    b312:	d1bf      	bne.n	b294 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    b314:	230f      	movs	r3, #15
    b316:	18fb      	adds	r3, r7, r3
    b318:	781b      	ldrb	r3, [r3, #0]
    b31a:	005b      	lsls	r3, r3, #1
    b31c:	b25b      	sxtb	r3, r3
    b31e:	2201      	movs	r2, #1
    b320:	4313      	orrs	r3, r2
    b322:	b25a      	sxtb	r2, r3
    b324:	230f      	movs	r3, #15
    b326:	18fb      	adds	r3, r7, r3
    b328:	701a      	strb	r2, [r3, #0]
	return crc;
    b32a:	230f      	movs	r3, #15
    b32c:	18fb      	adds	r3, r7, r3
    b32e:	781b      	ldrb	r3, [r3, #0]
}
    b330:	0018      	movs	r0, r3
    b332:	46bd      	mov	sp, r7
    b334:	b004      	add	sp, #16
    b336:	bd80      	pop	{r7, pc}

0000b338 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    b338:	b590      	push	{r4, r7, lr}
    b33a:	b083      	sub	sp, #12
    b33c:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    b33e:	1c7b      	adds	r3, r7, #1
    b340:	22ff      	movs	r2, #255	; 0xff
    b342:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    b344:	1cbb      	adds	r3, r7, #2
    b346:	22ff      	movs	r2, #255	; 0xff
    b348:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    b34a:	1cbb      	adds	r3, r7, #2
    b34c:	881b      	ldrh	r3, [r3, #0]
    b34e:	1c79      	adds	r1, r7, #1
    b350:	4811      	ldr	r0, [pc, #68]	; (b398 <sd_mmc_spi_wait_busy+0x60>)
    b352:	2201      	movs	r2, #1
    b354:	4c11      	ldr	r4, [pc, #68]	; (b39c <sd_mmc_spi_wait_busy+0x64>)
    b356:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    b358:	4b11      	ldr	r3, [pc, #68]	; (b3a0 <sd_mmc_spi_wait_busy+0x68>)
    b35a:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    b35c:	1cbb      	adds	r3, r7, #2
    b35e:	881b      	ldrh	r3, [r3, #0]
    b360:	1c79      	adds	r1, r7, #1
    b362:	480d      	ldr	r0, [pc, #52]	; (b398 <sd_mmc_spi_wait_busy+0x60>)
    b364:	2201      	movs	r2, #1
    b366:	4c0d      	ldr	r4, [pc, #52]	; (b39c <sd_mmc_spi_wait_busy+0x64>)
    b368:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    b36a:	1cbb      	adds	r3, r7, #2
    b36c:	881b      	ldrh	r3, [r3, #0]
    b36e:	1c79      	adds	r1, r7, #1
    b370:	4809      	ldr	r0, [pc, #36]	; (b398 <sd_mmc_spi_wait_busy+0x60>)
    b372:	2201      	movs	r2, #1
    b374:	4c09      	ldr	r4, [pc, #36]	; (b39c <sd_mmc_spi_wait_busy+0x64>)
    b376:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    b378:	687b      	ldr	r3, [r7, #4]
    b37a:	1e5a      	subs	r2, r3, #1
    b37c:	607a      	str	r2, [r7, #4]
    b37e:	2b00      	cmp	r3, #0
    b380:	d101      	bne.n	b386 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    b382:	2300      	movs	r3, #0
    b384:	e004      	b.n	b390 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    b386:	1c7b      	adds	r3, r7, #1
    b388:	781b      	ldrb	r3, [r3, #0]
    b38a:	2bff      	cmp	r3, #255	; 0xff
    b38c:	d1ed      	bne.n	b36a <sd_mmc_spi_wait_busy+0x32>
	return true;
    b38e:	2301      	movs	r3, #1
}
    b390:	0018      	movs	r0, r3
    b392:	46bd      	mov	sp, r7
    b394:	b003      	add	sp, #12
    b396:	bd90      	pop	{r4, r7, pc}
    b398:	20003cb8 	.word	0x20003cb8
    b39c:	00013b7d 	.word	0x00013b7d
    b3a0:	00030d40 	.word	0x00030d40

0000b3a4 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    b3a4:	b590      	push	{r4, r7, lr}
    b3a6:	b083      	sub	sp, #12
    b3a8:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    b3aa:	1cbb      	adds	r3, r7, #2
    b3ac:	22ff      	movs	r2, #255	; 0xff
    b3ae:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    b3b0:	1c7b      	adds	r3, r7, #1
    b3b2:	2200      	movs	r2, #0
    b3b4:	701a      	strb	r2, [r3, #0]
	i = 500000;
    b3b6:	4b18      	ldr	r3, [pc, #96]	; (b418 <sd_mmc_spi_start_read_block+0x74>)
    b3b8:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    b3ba:	687b      	ldr	r3, [r7, #4]
    b3bc:	1e5a      	subs	r2, r3, #1
    b3be:	607a      	str	r2, [r7, #4]
    b3c0:	2b00      	cmp	r3, #0
    b3c2:	d104      	bne.n	b3ce <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    b3c4:	4b15      	ldr	r3, [pc, #84]	; (b41c <sd_mmc_spi_start_read_block+0x78>)
    b3c6:	2204      	movs	r2, #4
    b3c8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    b3ca:	2300      	movs	r3, #0
    b3cc:	e020      	b.n	b410 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    b3ce:	1cbb      	adds	r3, r7, #2
    b3d0:	881b      	ldrh	r3, [r3, #0]
    b3d2:	1c79      	adds	r1, r7, #1
    b3d4:	4812      	ldr	r0, [pc, #72]	; (b420 <sd_mmc_spi_start_read_block+0x7c>)
    b3d6:	2201      	movs	r2, #1
    b3d8:	4c12      	ldr	r4, [pc, #72]	; (b424 <sd_mmc_spi_start_read_block+0x80>)
    b3da:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    b3dc:	1c7b      	adds	r3, r7, #1
    b3de:	781b      	ldrb	r3, [r3, #0]
    b3e0:	001a      	movs	r2, r3
    b3e2:	23f0      	movs	r3, #240	; 0xf0
    b3e4:	4013      	ands	r3, r2
    b3e6:	d10e      	bne.n	b406 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    b3e8:	1c7b      	adds	r3, r7, #1
    b3ea:	781b      	ldrb	r3, [r3, #0]
    b3ec:	001a      	movs	r2, r3
    b3ee:	2307      	movs	r3, #7
    b3f0:	4013      	ands	r3, r2
    b3f2:	d003      	beq.n	b3fc <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    b3f4:	4b09      	ldr	r3, [pc, #36]	; (b41c <sd_mmc_spi_start_read_block+0x78>)
    b3f6:	2207      	movs	r2, #7
    b3f8:	701a      	strb	r2, [r3, #0]
    b3fa:	e002      	b.n	b402 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    b3fc:	4b07      	ldr	r3, [pc, #28]	; (b41c <sd_mmc_spi_start_read_block+0x78>)
    b3fe:	220b      	movs	r2, #11
    b400:	701a      	strb	r2, [r3, #0]
			}
			return false;
    b402:	2300      	movs	r3, #0
    b404:	e004      	b.n	b410 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    b406:	1c7b      	adds	r3, r7, #1
    b408:	781b      	ldrb	r3, [r3, #0]
    b40a:	2bfe      	cmp	r3, #254	; 0xfe
    b40c:	d1d5      	bne.n	b3ba <sd_mmc_spi_start_read_block+0x16>

	return true;
    b40e:	2301      	movs	r3, #1
}
    b410:	0018      	movs	r0, r3
    b412:	46bd      	mov	sp, r7
    b414:	b003      	add	sp, #12
    b416:	bd90      	pop	{r4, r7, pc}
    b418:	0007a120 	.word	0x0007a120
    b41c:	20003cfb 	.word	0x20003cfb
    b420:	20003cb8 	.word	0x20003cb8
    b424:	00013b7d 	.word	0x00013b7d

0000b428 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    b428:	b590      	push	{r4, r7, lr}
    b42a:	b083      	sub	sp, #12
    b42c:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    b42e:	1dbb      	adds	r3, r7, #6
    b430:	22ff      	movs	r2, #255	; 0xff
    b432:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    b434:	1dbb      	adds	r3, r7, #6
    b436:	881b      	ldrh	r3, [r3, #0]
    b438:	1d39      	adds	r1, r7, #4
    b43a:	4804      	ldr	r0, [pc, #16]	; (b44c <sd_mmc_spi_stop_read_block+0x24>)
    b43c:	2202      	movs	r2, #2
    b43e:	4c04      	ldr	r4, [pc, #16]	; (b450 <sd_mmc_spi_stop_read_block+0x28>)
    b440:	47a0      	blx	r4
			dummy);
}
    b442:	46c0      	nop			; (mov r8, r8)
    b444:	46bd      	mov	sp, r7
    b446:	b003      	add	sp, #12
    b448:	bd90      	pop	{r4, r7, pc}
    b44a:	46c0      	nop			; (mov r8, r8)
    b44c:	20003cb8 	.word	0x20003cb8
    b450:	00013b7d 	.word	0x00013b7d

0000b454 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    b454:	b580      	push	{r7, lr}
    b456:	b082      	sub	sp, #8
    b458:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    b45a:	1dfb      	adds	r3, r7, #7
    b45c:	22ff      	movs	r2, #255	; 0xff
    b45e:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    b460:	1df9      	adds	r1, r7, #7
    b462:	4b0d      	ldr	r3, [pc, #52]	; (b498 <sd_mmc_spi_start_write_block+0x44>)
    b464:	2201      	movs	r2, #1
    b466:	0018      	movs	r0, r3
    b468:	4b0c      	ldr	r3, [pc, #48]	; (b49c <sd_mmc_spi_start_write_block+0x48>)
    b46a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    b46c:	4b0c      	ldr	r3, [pc, #48]	; (b4a0 <sd_mmc_spi_start_write_block+0x4c>)
    b46e:	881b      	ldrh	r3, [r3, #0]
    b470:	2b01      	cmp	r3, #1
    b472:	d103      	bne.n	b47c <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    b474:	1dbb      	adds	r3, r7, #6
    b476:	22fe      	movs	r2, #254	; 0xfe
    b478:	701a      	strb	r2, [r3, #0]
    b47a:	e002      	b.n	b482 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    b47c:	1dbb      	adds	r3, r7, #6
    b47e:	22fc      	movs	r2, #252	; 0xfc
    b480:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    b482:	1db9      	adds	r1, r7, #6
    b484:	4b04      	ldr	r3, [pc, #16]	; (b498 <sd_mmc_spi_start_write_block+0x44>)
    b486:	2201      	movs	r2, #1
    b488:	0018      	movs	r0, r3
    b48a:	4b04      	ldr	r3, [pc, #16]	; (b49c <sd_mmc_spi_start_write_block+0x48>)
    b48c:	4798      	blx	r3
}
    b48e:	46c0      	nop			; (mov r8, r8)
    b490:	46bd      	mov	sp, r7
    b492:	b002      	add	sp, #8
    b494:	bd80      	pop	{r7, pc}
    b496:	46c0      	nop			; (mov r8, r8)
    b498:	20003cb8 	.word	0x20003cb8
    b49c:	00013da1 	.word	0x00013da1
    b4a0:	20003d06 	.word	0x20003d06

0000b4a4 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    b4a4:	b590      	push	{r4, r7, lr}
    b4a6:	b083      	sub	sp, #12
    b4a8:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    b4aa:	1dbb      	adds	r3, r7, #6
    b4ac:	22ff      	movs	r2, #255	; 0xff
    b4ae:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    b4b0:	1cbb      	adds	r3, r7, #2
    b4b2:	2201      	movs	r2, #1
    b4b4:	4252      	negs	r2, r2
    b4b6:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    b4b8:	1cb9      	adds	r1, r7, #2
    b4ba:	4b1b      	ldr	r3, [pc, #108]	; (b528 <sd_mmc_spi_stop_write_block+0x84>)
    b4bc:	2202      	movs	r2, #2
    b4be:	0018      	movs	r0, r3
    b4c0:	4b1a      	ldr	r3, [pc, #104]	; (b52c <sd_mmc_spi_stop_write_block+0x88>)
    b4c2:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    b4c4:	1dbb      	adds	r3, r7, #6
    b4c6:	881b      	ldrh	r3, [r3, #0]
    b4c8:	1d79      	adds	r1, r7, #5
    b4ca:	4817      	ldr	r0, [pc, #92]	; (b528 <sd_mmc_spi_stop_write_block+0x84>)
    b4cc:	2201      	movs	r2, #1
    b4ce:	4c18      	ldr	r4, [pc, #96]	; (b530 <sd_mmc_spi_stop_write_block+0x8c>)
    b4d0:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    b4d2:	1d7b      	adds	r3, r7, #5
    b4d4:	781b      	ldrb	r3, [r3, #0]
    b4d6:	001a      	movs	r2, r3
    b4d8:	2310      	movs	r3, #16
    b4da:	4013      	ands	r3, r2
    b4dc:	d105      	bne.n	b4ea <sd_mmc_spi_stop_write_block+0x46>
    b4de:	1d7b      	adds	r3, r7, #5
    b4e0:	781b      	ldrb	r3, [r3, #0]
    b4e2:	001a      	movs	r2, r3
    b4e4:	2301      	movs	r3, #1
    b4e6:	4013      	ands	r3, r2
    b4e8:	d104      	bne.n	b4f4 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    b4ea:	4b12      	ldr	r3, [pc, #72]	; (b534 <sd_mmc_spi_stop_write_block+0x90>)
    b4ec:	2201      	movs	r2, #1
    b4ee:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    b4f0:	2300      	movs	r3, #0
    b4f2:	e014      	b.n	b51e <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    b4f4:	1d7b      	adds	r3, r7, #5
    b4f6:	781b      	ldrb	r3, [r3, #0]
    b4f8:	001a      	movs	r2, r3
    b4fa:	231e      	movs	r3, #30
    b4fc:	4013      	ands	r3, r2
    b4fe:	2b04      	cmp	r3, #4
    b500:	d00b      	beq.n	b51a <sd_mmc_spi_stop_write_block+0x76>
    b502:	2b0a      	cmp	r3, #10
    b504:	d104      	bne.n	b510 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    b506:	4b0b      	ldr	r3, [pc, #44]	; (b534 <sd_mmc_spi_stop_write_block+0x90>)
    b508:	2208      	movs	r2, #8
    b50a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    b50c:	2300      	movs	r3, #0
    b50e:	e006      	b.n	b51e <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    b510:	4b08      	ldr	r3, [pc, #32]	; (b534 <sd_mmc_spi_stop_write_block+0x90>)
    b512:	220a      	movs	r2, #10
    b514:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    b516:	2300      	movs	r3, #0
    b518:	e001      	b.n	b51e <sd_mmc_spi_stop_write_block+0x7a>
		break;
    b51a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    b51c:	2301      	movs	r3, #1
}
    b51e:	0018      	movs	r0, r3
    b520:	46bd      	mov	sp, r7
    b522:	b003      	add	sp, #12
    b524:	bd90      	pop	{r4, r7, pc}
    b526:	46c0      	nop			; (mov r8, r8)
    b528:	20003cb8 	.word	0x20003cb8
    b52c:	00013da1 	.word	0x00013da1
    b530:	00013b7d 	.word	0x00013b7d
    b534:	20003cfb 	.word	0x20003cfb

0000b538 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    b538:	b590      	push	{r4, r7, lr}
    b53a:	b083      	sub	sp, #12
    b53c:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    b53e:	4b1d      	ldr	r3, [pc, #116]	; (b5b4 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    b540:	881b      	ldrh	r3, [r3, #0]
    b542:	2b01      	cmp	r3, #1
    b544:	d101      	bne.n	b54a <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    b546:	2301      	movs	r3, #1
    b548:	e030      	b.n	b5ac <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    b54a:	4b1a      	ldr	r3, [pc, #104]	; (b5b4 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    b54c:	881b      	ldrh	r3, [r3, #0]
    b54e:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    b550:	4b19      	ldr	r3, [pc, #100]	; (b5b8 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    b552:	681a      	ldr	r2, [r3, #0]
    b554:	4b19      	ldr	r3, [pc, #100]	; (b5bc <sd_mmc_spi_stop_multiwrite_block+0x84>)
    b556:	881b      	ldrh	r3, [r3, #0]
    b558:	0019      	movs	r1, r3
    b55a:	4b19      	ldr	r3, [pc, #100]	; (b5c0 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    b55c:	0010      	movs	r0, r2
    b55e:	4798      	blx	r3
    b560:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    b562:	429c      	cmp	r4, r3
    b564:	d901      	bls.n	b56a <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    b566:	2301      	movs	r3, #1
    b568:	e020      	b.n	b5ac <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    b56a:	1dfb      	adds	r3, r7, #7
    b56c:	22ff      	movs	r2, #255	; 0xff
    b56e:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    b570:	1df9      	adds	r1, r7, #7
    b572:	4b14      	ldr	r3, [pc, #80]	; (b5c4 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    b574:	2201      	movs	r2, #1
    b576:	0018      	movs	r0, r3
    b578:	4b13      	ldr	r3, [pc, #76]	; (b5c8 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    b57a:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    b57c:	1dfb      	adds	r3, r7, #7
    b57e:	22fd      	movs	r2, #253	; 0xfd
    b580:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    b582:	1df9      	adds	r1, r7, #7
    b584:	4b0f      	ldr	r3, [pc, #60]	; (b5c4 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    b586:	2201      	movs	r2, #1
    b588:	0018      	movs	r0, r3
    b58a:	4b0f      	ldr	r3, [pc, #60]	; (b5c8 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    b58c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    b58e:	4b0f      	ldr	r3, [pc, #60]	; (b5cc <sd_mmc_spi_stop_multiwrite_block+0x94>)
    b590:	4798      	blx	r3
    b592:	0003      	movs	r3, r0
    b594:	001a      	movs	r2, r3
    b596:	2301      	movs	r3, #1
    b598:	4053      	eors	r3, r2
    b59a:	b2db      	uxtb	r3, r3
    b59c:	2b00      	cmp	r3, #0
    b59e:	d004      	beq.n	b5aa <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    b5a0:	4b0b      	ldr	r3, [pc, #44]	; (b5d0 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    b5a2:	2205      	movs	r2, #5
    b5a4:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    b5a6:	2300      	movs	r3, #0
    b5a8:	e000      	b.n	b5ac <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    b5aa:	2301      	movs	r3, #1
}
    b5ac:	0018      	movs	r0, r3
    b5ae:	46bd      	mov	sp, r7
    b5b0:	b003      	add	sp, #12
    b5b2:	bd90      	pop	{r4, r7, pc}
    b5b4:	20003d06 	.word	0x20003d06
    b5b8:	20003d00 	.word	0x20003d00
    b5bc:	20003d04 	.word	0x20003d04
    b5c0:	0001e469 	.word	0x0001e469
    b5c4:	20003cb8 	.word	0x20003cb8
    b5c8:	00013da1 	.word	0x00013da1
    b5cc:	0000b339 	.word	0x0000b339
    b5d0:	20003cfb 	.word	0x20003cfb

0000b5d4 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    b5d4:	b580      	push	{r7, lr}
    b5d6:	b090      	sub	sp, #64	; 0x40
    b5d8:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b5da:	4b1f      	ldr	r3, [pc, #124]	; (b658 <sd_mmc_spi_init+0x84>)
    b5dc:	2200      	movs	r2, #0
    b5de:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    b5e0:	233c      	movs	r3, #60	; 0x3c
    b5e2:	18fb      	adds	r3, r7, r3
    b5e4:	0018      	movs	r0, r3
    b5e6:	4b1d      	ldr	r3, [pc, #116]	; (b65c <sd_mmc_spi_init+0x88>)
    b5e8:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    b5ea:	1d3b      	adds	r3, r7, #4
    b5ec:	0018      	movs	r0, r3
    b5ee:	4b1c      	ldr	r3, [pc, #112]	; (b660 <sd_mmc_spi_init+0x8c>)
    b5f0:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    b5f2:	1d3b      	adds	r3, r7, #4
    b5f4:	2280      	movs	r2, #128	; 0x80
    b5f6:	0252      	lsls	r2, r2, #9
    b5f8:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    b5fa:	1d3b      	adds	r3, r7, #4
    b5fc:	4a19      	ldr	r2, [pc, #100]	; (b664 <sd_mmc_spi_init+0x90>)
    b5fe:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    b600:	1d3b      	adds	r3, r7, #4
    b602:	4a19      	ldr	r2, [pc, #100]	; (b668 <sd_mmc_spi_init+0x94>)
    b604:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    b606:	1d3b      	adds	r3, r7, #4
    b608:	4a18      	ldr	r2, [pc, #96]	; (b66c <sd_mmc_spi_init+0x98>)
    b60a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    b60c:	1d3b      	adds	r3, r7, #4
    b60e:	4a18      	ldr	r2, [pc, #96]	; (b670 <sd_mmc_spi_init+0x9c>)
    b610:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    b612:	1d3b      	adds	r3, r7, #4
    b614:	2224      	movs	r2, #36	; 0x24
    b616:	2100      	movs	r1, #0
    b618:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    b61a:	1d3b      	adds	r3, r7, #4
    b61c:	4a15      	ldr	r2, [pc, #84]	; (b674 <sd_mmc_spi_init+0xa0>)
    b61e:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    b620:	1d3a      	adds	r2, r7, #4
    b622:	4915      	ldr	r1, [pc, #84]	; (b678 <sd_mmc_spi_init+0xa4>)
    b624:	4b15      	ldr	r3, [pc, #84]	; (b67c <sd_mmc_spi_init+0xa8>)
    b626:	0018      	movs	r0, r3
    b628:	4b15      	ldr	r3, [pc, #84]	; (b680 <sd_mmc_spi_init+0xac>)
    b62a:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    b62c:	4b13      	ldr	r3, [pc, #76]	; (b67c <sd_mmc_spi_init+0xa8>)
    b62e:	0018      	movs	r0, r3
    b630:	4b14      	ldr	r3, [pc, #80]	; (b684 <sd_mmc_spi_init+0xb0>)
    b632:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    b634:	4b14      	ldr	r3, [pc, #80]	; (b688 <sd_mmc_spi_init+0xb4>)
    b636:	0018      	movs	r0, r3
    b638:	4b14      	ldr	r3, [pc, #80]	; (b68c <sd_mmc_spi_init+0xb8>)
    b63a:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    b63c:	4b14      	ldr	r3, [pc, #80]	; (b690 <sd_mmc_spi_init+0xbc>)
    b63e:	781a      	ldrb	r2, [r3, #0]
    b640:	4b11      	ldr	r3, [pc, #68]	; (b688 <sd_mmc_spi_init+0xb4>)
    b642:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    b644:	4a10      	ldr	r2, [pc, #64]	; (b688 <sd_mmc_spi_init+0xb4>)
    b646:	4b13      	ldr	r3, [pc, #76]	; (b694 <sd_mmc_spi_init+0xc0>)
    b648:	0011      	movs	r1, r2
    b64a:	0018      	movs	r0, r3
    b64c:	4b12      	ldr	r3, [pc, #72]	; (b698 <sd_mmc_spi_init+0xc4>)
    b64e:	4798      	blx	r3
}
    b650:	46c0      	nop			; (mov r8, r8)
    b652:	46bd      	mov	sp, r7
    b654:	b010      	add	sp, #64	; 0x40
    b656:	bd80      	pop	{r7, pc}
    b658:	20003cfb 	.word	0x20003cfb
    b65c:	0000b089 	.word	0x0000b089
    b660:	0000b121 	.word	0x0000b121
    b664:	00100002 	.word	0x00100002
    b668:	00110002 	.word	0x00110002
    b66c:	00120002 	.word	0x00120002
    b670:	00130002 	.word	0x00130002
    b674:	00061a80 	.word	0x00061a80
    b678:	42000c00 	.word	0x42000c00
    b67c:	20003cb8 	.word	0x20003cb8
    b680:	000139ed 	.word	0x000139ed
    b684:	0000b22d 	.word	0x0000b22d
    b688:	20003cf8 	.word	0x20003cf8
    b68c:	0000b1a5 	.word	0x0000b1a5
    b690:	200000fc 	.word	0x200000fc
    b694:	20003cf4 	.word	0x20003cf4
    b698:	0000b1c9 	.word	0x0000b1c9

0000b69c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    b69c:	b590      	push	{r4, r7, lr}
    b69e:	b083      	sub	sp, #12
    b6a0:	af00      	add	r7, sp, #0
    b6a2:	0004      	movs	r4, r0
    b6a4:	6039      	str	r1, [r7, #0]
    b6a6:	0010      	movs	r0, r2
    b6a8:	0019      	movs	r1, r3
    b6aa:	1dfb      	adds	r3, r7, #7
    b6ac:	1c22      	adds	r2, r4, #0
    b6ae:	701a      	strb	r2, [r3, #0]
    b6b0:	1dbb      	adds	r3, r7, #6
    b6b2:	1c02      	adds	r2, r0, #0
    b6b4:	701a      	strb	r2, [r3, #0]
    b6b6:	1d7b      	adds	r3, r7, #5
    b6b8:	1c0a      	adds	r2, r1, #0
    b6ba:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b6bc:	4b13      	ldr	r3, [pc, #76]	; (b70c <sd_mmc_spi_select_device+0x70>)
    b6be:	2200      	movs	r2, #0
    b6c0:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    b6c2:	683b      	ldr	r3, [r7, #0]
    b6c4:	4a12      	ldr	r2, [pc, #72]	; (b710 <sd_mmc_spi_select_device+0x74>)
    b6c6:	4293      	cmp	r3, r2
    b6c8:	d907      	bls.n	b6da <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    b6ca:	4b11      	ldr	r3, [pc, #68]	; (b710 <sd_mmc_spi_select_device+0x74>)
    b6cc:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    b6ce:	e004      	b.n	b6da <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    b6d0:	683b      	ldr	r3, [r7, #0]
    b6d2:	08db      	lsrs	r3, r3, #3
    b6d4:	683a      	ldr	r2, [r7, #0]
    b6d6:	1ad3      	subs	r3, r2, r3
    b6d8:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    b6da:	683a      	ldr	r2, [r7, #0]
    b6dc:	4b0d      	ldr	r3, [pc, #52]	; (b714 <sd_mmc_spi_select_device+0x78>)
    b6de:	0011      	movs	r1, r2
    b6e0:	0018      	movs	r0, r3
    b6e2:	4b0d      	ldr	r3, [pc, #52]	; (b718 <sd_mmc_spi_select_device+0x7c>)
    b6e4:	4798      	blx	r3
    b6e6:	0003      	movs	r3, r0
    b6e8:	2b17      	cmp	r3, #23
    b6ea:	d0f1      	beq.n	b6d0 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    b6ec:	1dfb      	adds	r3, r7, #7
    b6ee:	781a      	ldrb	r2, [r3, #0]
    b6f0:	0013      	movs	r3, r2
    b6f2:	005b      	lsls	r3, r3, #1
    b6f4:	189b      	adds	r3, r3, r2
    b6f6:	4a09      	ldr	r2, [pc, #36]	; (b71c <sd_mmc_spi_select_device+0x80>)
    b6f8:	1899      	adds	r1, r3, r2
    b6fa:	4b06      	ldr	r3, [pc, #24]	; (b714 <sd_mmc_spi_select_device+0x78>)
    b6fc:	2201      	movs	r2, #1
    b6fe:	0018      	movs	r0, r3
    b700:	4b07      	ldr	r3, [pc, #28]	; (b720 <sd_mmc_spi_select_device+0x84>)
    b702:	4798      	blx	r3
}
    b704:	46c0      	nop			; (mov r8, r8)
    b706:	46bd      	mov	sp, r7
    b708:	b003      	add	sp, #12
    b70a:	bd90      	pop	{r4, r7, pc}
    b70c:	20003cfb 	.word	0x20003cfb
    b710:	00989680 	.word	0x00989680
    b714:	20003cb8 	.word	0x20003cb8
    b718:	00013715 	.word	0x00013715
    b71c:	20003cf4 	.word	0x20003cf4
    b720:	00013cb1 	.word	0x00013cb1

0000b724 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    b724:	b580      	push	{r7, lr}
    b726:	b082      	sub	sp, #8
    b728:	af00      	add	r7, sp, #0
    b72a:	0002      	movs	r2, r0
    b72c:	1dfb      	adds	r3, r7, #7
    b72e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b730:	4b09      	ldr	r3, [pc, #36]	; (b758 <sd_mmc_spi_deselect_device+0x34>)
    b732:	2200      	movs	r2, #0
    b734:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    b736:	1dfb      	adds	r3, r7, #7
    b738:	781a      	ldrb	r2, [r3, #0]
    b73a:	0013      	movs	r3, r2
    b73c:	005b      	lsls	r3, r3, #1
    b73e:	189b      	adds	r3, r3, r2
    b740:	4a06      	ldr	r2, [pc, #24]	; (b75c <sd_mmc_spi_deselect_device+0x38>)
    b742:	1899      	adds	r1, r3, r2
    b744:	4b06      	ldr	r3, [pc, #24]	; (b760 <sd_mmc_spi_deselect_device+0x3c>)
    b746:	2200      	movs	r2, #0
    b748:	0018      	movs	r0, r3
    b74a:	4b06      	ldr	r3, [pc, #24]	; (b764 <sd_mmc_spi_deselect_device+0x40>)
    b74c:	4798      	blx	r3
}
    b74e:	46c0      	nop			; (mov r8, r8)
    b750:	46bd      	mov	sp, r7
    b752:	b002      	add	sp, #8
    b754:	bd80      	pop	{r7, pc}
    b756:	46c0      	nop			; (mov r8, r8)
    b758:	20003cfb 	.word	0x20003cfb
    b75c:	20003cf4 	.word	0x20003cf4
    b760:	20003cb8 	.word	0x20003cb8
    b764:	00013cb1 	.word	0x00013cb1

0000b768 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    b768:	b580      	push	{r7, lr}
    b76a:	b082      	sub	sp, #8
    b76c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    b76e:	1dbb      	adds	r3, r7, #6
    b770:	22ff      	movs	r2, #255	; 0xff
    b772:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b774:	4b0c      	ldr	r3, [pc, #48]	; (b7a8 <sd_mmc_spi_send_clock+0x40>)
    b776:	2200      	movs	r2, #0
    b778:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    b77a:	1dfb      	adds	r3, r7, #7
    b77c:	2200      	movs	r2, #0
    b77e:	701a      	strb	r2, [r3, #0]
    b780:	e00a      	b.n	b798 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    b782:	1db9      	adds	r1, r7, #6
    b784:	4b09      	ldr	r3, [pc, #36]	; (b7ac <sd_mmc_spi_send_clock+0x44>)
    b786:	2201      	movs	r2, #1
    b788:	0018      	movs	r0, r3
    b78a:	4b09      	ldr	r3, [pc, #36]	; (b7b0 <sd_mmc_spi_send_clock+0x48>)
    b78c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    b78e:	1dfb      	adds	r3, r7, #7
    b790:	781a      	ldrb	r2, [r3, #0]
    b792:	1dfb      	adds	r3, r7, #7
    b794:	3201      	adds	r2, #1
    b796:	701a      	strb	r2, [r3, #0]
    b798:	1dfb      	adds	r3, r7, #7
    b79a:	781b      	ldrb	r3, [r3, #0]
    b79c:	2b09      	cmp	r3, #9
    b79e:	d9f0      	bls.n	b782 <sd_mmc_spi_send_clock+0x1a>
	}
}
    b7a0:	46c0      	nop			; (mov r8, r8)
    b7a2:	46bd      	mov	sp, r7
    b7a4:	b002      	add	sp, #8
    b7a6:	bd80      	pop	{r7, pc}
    b7a8:	20003cfb 	.word	0x20003cfb
    b7ac:	20003cb8 	.word	0x20003cb8
    b7b0:	00013da1 	.word	0x00013da1

0000b7b4 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    b7b4:	b590      	push	{r4, r7, lr}
    b7b6:	b085      	sub	sp, #20
    b7b8:	af02      	add	r7, sp, #8
    b7ba:	6078      	str	r0, [r7, #4]
    b7bc:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    b7be:	6839      	ldr	r1, [r7, #0]
    b7c0:	6878      	ldr	r0, [r7, #4]
    b7c2:	2300      	movs	r3, #0
    b7c4:	9300      	str	r3, [sp, #0]
    b7c6:	2300      	movs	r3, #0
    b7c8:	2200      	movs	r2, #0
    b7ca:	4c03      	ldr	r4, [pc, #12]	; (b7d8 <sd_mmc_spi_send_cmd+0x24>)
    b7cc:	47a0      	blx	r4
    b7ce:	0003      	movs	r3, r0
}
    b7d0:	0018      	movs	r0, r3
    b7d2:	46bd      	mov	sp, r7
    b7d4:	b003      	add	sp, #12
    b7d6:	bd90      	pop	{r4, r7, pc}
    b7d8:	0000b7dd 	.word	0x0000b7dd

0000b7dc <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    b7dc:	b590      	push	{r4, r7, lr}
    b7de:	b089      	sub	sp, #36	; 0x24
    b7e0:	af00      	add	r7, sp, #0
    b7e2:	60f8      	str	r0, [r7, #12]
    b7e4:	60b9      	str	r1, [r7, #8]
    b7e6:	0019      	movs	r1, r3
    b7e8:	1dbb      	adds	r3, r7, #6
    b7ea:	801a      	strh	r2, [r3, #0]
    b7ec:	1d3b      	adds	r3, r7, #4
    b7ee:	1c0a      	adds	r2, r1, #0
    b7f0:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    b7f2:	231b      	movs	r3, #27
    b7f4:	18fb      	adds	r3, r7, r3
    b7f6:	22ff      	movs	r2, #255	; 0xff
    b7f8:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    b7fa:	231c      	movs	r3, #28
    b7fc:	18fb      	adds	r3, r7, r3
    b7fe:	22ff      	movs	r2, #255	; 0xff
    b800:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b802:	4b72      	ldr	r3, [pc, #456]	; (b9cc <sd_mmc_spi_adtc_start+0x1f0>)
    b804:	2200      	movs	r2, #0
    b806:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    b808:	68fb      	ldr	r3, [r7, #12]
    b80a:	b2db      	uxtb	r3, r3
    b80c:	223f      	movs	r2, #63	; 0x3f
    b80e:	4013      	ands	r3, r2
    b810:	b2db      	uxtb	r3, r3
    b812:	2240      	movs	r2, #64	; 0x40
    b814:	4313      	orrs	r3, r2
    b816:	b2da      	uxtb	r2, r3
    b818:	2314      	movs	r3, #20
    b81a:	18fb      	adds	r3, r7, r3
    b81c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    b81e:	68bb      	ldr	r3, [r7, #8]
    b820:	0e1b      	lsrs	r3, r3, #24
    b822:	b2da      	uxtb	r2, r3
    b824:	2314      	movs	r3, #20
    b826:	18fb      	adds	r3, r7, r3
    b828:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    b82a:	68bb      	ldr	r3, [r7, #8]
    b82c:	0c1b      	lsrs	r3, r3, #16
    b82e:	b2da      	uxtb	r2, r3
    b830:	2314      	movs	r3, #20
    b832:	18fb      	adds	r3, r7, r3
    b834:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    b836:	68bb      	ldr	r3, [r7, #8]
    b838:	0a1b      	lsrs	r3, r3, #8
    b83a:	b2da      	uxtb	r2, r3
    b83c:	2314      	movs	r3, #20
    b83e:	18fb      	adds	r3, r7, r3
    b840:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    b842:	68bb      	ldr	r3, [r7, #8]
    b844:	b2da      	uxtb	r2, r3
    b846:	2314      	movs	r3, #20
    b848:	18fb      	adds	r3, r7, r3
    b84a:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    b84c:	2314      	movs	r3, #20
    b84e:	18fb      	adds	r3, r7, r3
    b850:	2105      	movs	r1, #5
    b852:	0018      	movs	r0, r3
    b854:	4b5e      	ldr	r3, [pc, #376]	; (b9d0 <sd_mmc_spi_adtc_start+0x1f4>)
    b856:	4798      	blx	r3
    b858:	0003      	movs	r3, r0
    b85a:	001a      	movs	r2, r3
    b85c:	2314      	movs	r3, #20
    b85e:	18fb      	adds	r3, r7, r3
    b860:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    b862:	231b      	movs	r3, #27
    b864:	18f9      	adds	r1, r7, r3
    b866:	4b5b      	ldr	r3, [pc, #364]	; (b9d4 <sd_mmc_spi_adtc_start+0x1f8>)
    b868:	2201      	movs	r2, #1
    b86a:	0018      	movs	r0, r3
    b86c:	4b5a      	ldr	r3, [pc, #360]	; (b9d8 <sd_mmc_spi_adtc_start+0x1fc>)
    b86e:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    b870:	2314      	movs	r3, #20
    b872:	18f9      	adds	r1, r7, r3
    b874:	4b57      	ldr	r3, [pc, #348]	; (b9d4 <sd_mmc_spi_adtc_start+0x1f8>)
    b876:	2206      	movs	r2, #6
    b878:	0018      	movs	r0, r3
    b87a:	4b57      	ldr	r3, [pc, #348]	; (b9d8 <sd_mmc_spi_adtc_start+0x1fc>)
    b87c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    b87e:	2313      	movs	r3, #19
    b880:	18fb      	adds	r3, r7, r3
    b882:	22ff      	movs	r2, #255	; 0xff
    b884:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    b886:	231c      	movs	r3, #28
    b888:	18fb      	adds	r3, r7, r3
    b88a:	881b      	ldrh	r3, [r3, #0]
    b88c:	2213      	movs	r2, #19
    b88e:	18b9      	adds	r1, r7, r2
    b890:	4850      	ldr	r0, [pc, #320]	; (b9d4 <sd_mmc_spi_adtc_start+0x1f8>)
    b892:	2201      	movs	r2, #1
    b894:	4c51      	ldr	r4, [pc, #324]	; (b9dc <sd_mmc_spi_adtc_start+0x200>)
    b896:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    b898:	231f      	movs	r3, #31
    b89a:	18fb      	adds	r3, r7, r3
    b89c:	2207      	movs	r2, #7
    b89e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    b8a0:	231c      	movs	r3, #28
    b8a2:	18fb      	adds	r3, r7, r3
    b8a4:	881b      	ldrh	r3, [r3, #0]
    b8a6:	2213      	movs	r2, #19
    b8a8:	18b9      	adds	r1, r7, r2
    b8aa:	484a      	ldr	r0, [pc, #296]	; (b9d4 <sd_mmc_spi_adtc_start+0x1f8>)
    b8ac:	2201      	movs	r2, #1
    b8ae:	4c4b      	ldr	r4, [pc, #300]	; (b9dc <sd_mmc_spi_adtc_start+0x200>)
    b8b0:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    b8b2:	2313      	movs	r3, #19
    b8b4:	18fb      	adds	r3, r7, r3
    b8b6:	781b      	ldrb	r3, [r3, #0]
    b8b8:	b25b      	sxtb	r3, r3
    b8ba:	2b00      	cmp	r3, #0
    b8bc:	da10      	bge.n	b8e0 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    b8be:	231f      	movs	r3, #31
    b8c0:	18fb      	adds	r3, r7, r3
    b8c2:	221f      	movs	r2, #31
    b8c4:	18ba      	adds	r2, r7, r2
    b8c6:	7812      	ldrb	r2, [r2, #0]
    b8c8:	3a01      	subs	r2, #1
    b8ca:	701a      	strb	r2, [r3, #0]
    b8cc:	231f      	movs	r3, #31
    b8ce:	18fb      	adds	r3, r7, r3
    b8d0:	781b      	ldrb	r3, [r3, #0]
    b8d2:	2b00      	cmp	r3, #0
    b8d4:	d1e4      	bne.n	b8a0 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    b8d6:	4b3d      	ldr	r3, [pc, #244]	; (b9cc <sd_mmc_spi_adtc_start+0x1f0>)
    b8d8:	2202      	movs	r2, #2
    b8da:	701a      	strb	r2, [r3, #0]
			return false;
    b8dc:	2300      	movs	r3, #0
    b8de:	e070      	b.n	b9c2 <sd_mmc_spi_adtc_start+0x1e6>
			break;
    b8e0:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    b8e2:	2313      	movs	r3, #19
    b8e4:	18fb      	adds	r3, r7, r3
    b8e6:	781b      	ldrb	r3, [r3, #0]
    b8e8:	001a      	movs	r2, r3
    b8ea:	4b3d      	ldr	r3, [pc, #244]	; (b9e0 <sd_mmc_spi_adtc_start+0x204>)
    b8ec:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    b8ee:	2313      	movs	r3, #19
    b8f0:	18fb      	adds	r3, r7, r3
    b8f2:	781b      	ldrb	r3, [r3, #0]
    b8f4:	001a      	movs	r2, r3
    b8f6:	2308      	movs	r3, #8
    b8f8:	4013      	ands	r3, r2
    b8fa:	d004      	beq.n	b906 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    b8fc:	4b33      	ldr	r3, [pc, #204]	; (b9cc <sd_mmc_spi_adtc_start+0x1f0>)
    b8fe:	2206      	movs	r2, #6
    b900:	701a      	strb	r2, [r3, #0]
		return false;
    b902:	2300      	movs	r3, #0
    b904:	e05d      	b.n	b9c2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    b906:	2313      	movs	r3, #19
    b908:	18fb      	adds	r3, r7, r3
    b90a:	781b      	ldrb	r3, [r3, #0]
    b90c:	001a      	movs	r2, r3
    b90e:	2304      	movs	r3, #4
    b910:	4013      	ands	r3, r2
    b912:	d004      	beq.n	b91e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    b914:	4b2d      	ldr	r3, [pc, #180]	; (b9cc <sd_mmc_spi_adtc_start+0x1f0>)
    b916:	2209      	movs	r2, #9
    b918:	701a      	strb	r2, [r3, #0]
		return false;
    b91a:	2300      	movs	r3, #0
    b91c:	e051      	b.n	b9c2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    b91e:	2313      	movs	r3, #19
    b920:	18fb      	adds	r3, r7, r3
    b922:	781b      	ldrb	r3, [r3, #0]
    b924:	001a      	movs	r2, r3
    b926:	2301      	movs	r3, #1
    b928:	439a      	bics	r2, r3
    b92a:	1e13      	subs	r3, r2, #0
    b92c:	d004      	beq.n	b938 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    b92e:	4b27      	ldr	r3, [pc, #156]	; (b9cc <sd_mmc_spi_adtc_start+0x1f0>)
    b930:	2201      	movs	r2, #1
    b932:	701a      	strb	r2, [r3, #0]
		return false;
    b934:	2300      	movs	r3, #0
    b936:	e044      	b.n	b9c2 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    b938:	68fa      	ldr	r2, [r7, #12]
    b93a:	2380      	movs	r3, #128	; 0x80
    b93c:	019b      	lsls	r3, r3, #6
    b93e:	4013      	ands	r3, r2
    b940:	d00d      	beq.n	b95e <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    b942:	4b28      	ldr	r3, [pc, #160]	; (b9e4 <sd_mmc_spi_adtc_start+0x208>)
    b944:	4798      	blx	r3
    b946:	0003      	movs	r3, r0
    b948:	001a      	movs	r2, r3
    b94a:	2301      	movs	r3, #1
    b94c:	4053      	eors	r3, r2
    b94e:	b2db      	uxtb	r3, r3
    b950:	2b00      	cmp	r3, #0
    b952:	d004      	beq.n	b95e <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    b954:	4b1d      	ldr	r3, [pc, #116]	; (b9cc <sd_mmc_spi_adtc_start+0x1f0>)
    b956:	2203      	movs	r2, #3
    b958:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    b95a:	2300      	movs	r3, #0
    b95c:	e031      	b.n	b9c2 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    b95e:	68fa      	ldr	r2, [r7, #12]
    b960:	2380      	movs	r3, #128	; 0x80
    b962:	009b      	lsls	r3, r3, #2
    b964:	4013      	ands	r3, r2
    b966:	d00e      	beq.n	b986 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    b968:	4b1d      	ldr	r3, [pc, #116]	; (b9e0 <sd_mmc_spi_adtc_start+0x204>)
    b96a:	2200      	movs	r2, #0
    b96c:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    b96e:	231c      	movs	r3, #28
    b970:	18fb      	adds	r3, r7, r3
    b972:	881b      	ldrh	r3, [r3, #0]
    b974:	491a      	ldr	r1, [pc, #104]	; (b9e0 <sd_mmc_spi_adtc_start+0x204>)
    b976:	4817      	ldr	r0, [pc, #92]	; (b9d4 <sd_mmc_spi_adtc_start+0x1f8>)
    b978:	2201      	movs	r2, #1
    b97a:	4c18      	ldr	r4, [pc, #96]	; (b9dc <sd_mmc_spi_adtc_start+0x200>)
    b97c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    b97e:	4b18      	ldr	r3, [pc, #96]	; (b9e0 <sd_mmc_spi_adtc_start+0x204>)
    b980:	681a      	ldr	r2, [r3, #0]
    b982:	4b17      	ldr	r3, [pc, #92]	; (b9e0 <sd_mmc_spi_adtc_start+0x204>)
    b984:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    b986:	68fa      	ldr	r2, [r7, #12]
    b988:	2380      	movs	r3, #128	; 0x80
    b98a:	00db      	lsls	r3, r3, #3
    b98c:	4013      	ands	r3, r2
    b98e:	d00c      	beq.n	b9aa <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    b990:	231c      	movs	r3, #28
    b992:	18fb      	adds	r3, r7, r3
    b994:	881b      	ldrh	r3, [r3, #0]
    b996:	4912      	ldr	r1, [pc, #72]	; (b9e0 <sd_mmc_spi_adtc_start+0x204>)
    b998:	480e      	ldr	r0, [pc, #56]	; (b9d4 <sd_mmc_spi_adtc_start+0x1f8>)
    b99a:	2204      	movs	r2, #4
    b99c:	4c0f      	ldr	r4, [pc, #60]	; (b9dc <sd_mmc_spi_adtc_start+0x200>)
    b99e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    b9a0:	4b0f      	ldr	r3, [pc, #60]	; (b9e0 <sd_mmc_spi_adtc_start+0x204>)
    b9a2:	681b      	ldr	r3, [r3, #0]
    b9a4:	ba1a      	rev	r2, r3
    b9a6:	4b0e      	ldr	r3, [pc, #56]	; (b9e0 <sd_mmc_spi_adtc_start+0x204>)
    b9a8:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    b9aa:	4b0f      	ldr	r3, [pc, #60]	; (b9e8 <sd_mmc_spi_adtc_start+0x20c>)
    b9ac:	1dba      	adds	r2, r7, #6
    b9ae:	8812      	ldrh	r2, [r2, #0]
    b9b0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    b9b2:	4b0e      	ldr	r3, [pc, #56]	; (b9ec <sd_mmc_spi_adtc_start+0x210>)
    b9b4:	1d3a      	adds	r2, r7, #4
    b9b6:	8812      	ldrh	r2, [r2, #0]
    b9b8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    b9ba:	4b0d      	ldr	r3, [pc, #52]	; (b9f0 <sd_mmc_spi_adtc_start+0x214>)
    b9bc:	2200      	movs	r2, #0
    b9be:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    b9c0:	2301      	movs	r3, #1
}
    b9c2:	0018      	movs	r0, r3
    b9c4:	46bd      	mov	sp, r7
    b9c6:	b009      	add	sp, #36	; 0x24
    b9c8:	bd90      	pop	{r4, r7, pc}
    b9ca:	46c0      	nop			; (mov r8, r8)
    b9cc:	20003cfb 	.word	0x20003cfb
    b9d0:	0000b27d 	.word	0x0000b27d
    b9d4:	20003cb8 	.word	0x20003cb8
    b9d8:	00013da1 	.word	0x00013da1
    b9dc:	00013b7d 	.word	0x00013b7d
    b9e0:	20003cfc 	.word	0x20003cfc
    b9e4:	0000b339 	.word	0x0000b339
    b9e8:	20003d04 	.word	0x20003d04
    b9ec:	20003d06 	.word	0x20003d06
    b9f0:	20003d00 	.word	0x20003d00

0000b9f4 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    b9f4:	b580      	push	{r7, lr}
    b9f6:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    b9f8:	4b02      	ldr	r3, [pc, #8]	; (ba04 <sd_mmc_spi_get_response+0x10>)
    b9fa:	681b      	ldr	r3, [r3, #0]
}
    b9fc:	0018      	movs	r0, r3
    b9fe:	46bd      	mov	sp, r7
    ba00:	bd80      	pop	{r7, pc}
    ba02:	46c0      	nop			; (mov r8, r8)
    ba04:	20003cfc 	.word	0x20003cfc

0000ba08 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    ba08:	b590      	push	{r4, r7, lr}
    ba0a:	b085      	sub	sp, #20
    ba0c:	af00      	add	r7, sp, #0
    ba0e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    ba10:	230e      	movs	r3, #14
    ba12:	18fb      	adds	r3, r7, r3
    ba14:	22ff      	movs	r2, #255	; 0xff
    ba16:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ba18:	4b1c      	ldr	r3, [pc, #112]	; (ba8c <sd_mmc_spi_read_word+0x84>)
    ba1a:	2200      	movs	r2, #0
    ba1c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ba1e:	4b1c      	ldr	r3, [pc, #112]	; (ba90 <sd_mmc_spi_read_word+0x88>)
    ba20:	681a      	ldr	r2, [r3, #0]
    ba22:	4b1c      	ldr	r3, [pc, #112]	; (ba94 <sd_mmc_spi_read_word+0x8c>)
    ba24:	881b      	ldrh	r3, [r3, #0]
    ba26:	0019      	movs	r1, r3
    ba28:	4b1b      	ldr	r3, [pc, #108]	; (ba98 <sd_mmc_spi_read_word+0x90>)
    ba2a:	0010      	movs	r0, r2
    ba2c:	4798      	blx	r3
    ba2e:	1e0b      	subs	r3, r1, #0
    ba30:	d10a      	bne.n	ba48 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    ba32:	4b1a      	ldr	r3, [pc, #104]	; (ba9c <sd_mmc_spi_read_word+0x94>)
    ba34:	4798      	blx	r3
    ba36:	0003      	movs	r3, r0
    ba38:	001a      	movs	r2, r3
    ba3a:	2301      	movs	r3, #1
    ba3c:	4053      	eors	r3, r2
    ba3e:	b2db      	uxtb	r3, r3
    ba40:	2b00      	cmp	r3, #0
    ba42:	d001      	beq.n	ba48 <sd_mmc_spi_read_word+0x40>
			return false;
    ba44:	2300      	movs	r3, #0
    ba46:	e01d      	b.n	ba84 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    ba48:	230e      	movs	r3, #14
    ba4a:	18fb      	adds	r3, r7, r3
    ba4c:	881b      	ldrh	r3, [r3, #0]
    ba4e:	1d39      	adds	r1, r7, #4
    ba50:	4813      	ldr	r0, [pc, #76]	; (baa0 <sd_mmc_spi_read_word+0x98>)
    ba52:	2204      	movs	r2, #4
    ba54:	4c13      	ldr	r4, [pc, #76]	; (baa4 <sd_mmc_spi_read_word+0x9c>)
    ba56:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    ba58:	687b      	ldr	r3, [r7, #4]
    ba5a:	687a      	ldr	r2, [r7, #4]
    ba5c:	6812      	ldr	r2, [r2, #0]
    ba5e:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    ba60:	4b0b      	ldr	r3, [pc, #44]	; (ba90 <sd_mmc_spi_read_word+0x88>)
    ba62:	681b      	ldr	r3, [r3, #0]
    ba64:	1d1a      	adds	r2, r3, #4
    ba66:	4b0a      	ldr	r3, [pc, #40]	; (ba90 <sd_mmc_spi_read_word+0x88>)
    ba68:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ba6a:	4b09      	ldr	r3, [pc, #36]	; (ba90 <sd_mmc_spi_read_word+0x88>)
    ba6c:	681a      	ldr	r2, [r3, #0]
    ba6e:	4b09      	ldr	r3, [pc, #36]	; (ba94 <sd_mmc_spi_read_word+0x8c>)
    ba70:	881b      	ldrh	r3, [r3, #0]
    ba72:	0019      	movs	r1, r3
    ba74:	4b08      	ldr	r3, [pc, #32]	; (ba98 <sd_mmc_spi_read_word+0x90>)
    ba76:	0010      	movs	r0, r2
    ba78:	4798      	blx	r3
    ba7a:	1e0b      	subs	r3, r1, #0
    ba7c:	d101      	bne.n	ba82 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    ba7e:	4b0a      	ldr	r3, [pc, #40]	; (baa8 <sd_mmc_spi_read_word+0xa0>)
    ba80:	4798      	blx	r3
	}
	return true;
    ba82:	2301      	movs	r3, #1
}
    ba84:	0018      	movs	r0, r3
    ba86:	46bd      	mov	sp, r7
    ba88:	b005      	add	sp, #20
    ba8a:	bd90      	pop	{r4, r7, pc}
    ba8c:	20003cfb 	.word	0x20003cfb
    ba90:	20003d00 	.word	0x20003d00
    ba94:	20003d04 	.word	0x20003d04
    ba98:	0001e575 	.word	0x0001e575
    ba9c:	0000b3a5 	.word	0x0000b3a5
    baa0:	20003cb8 	.word	0x20003cb8
    baa4:	00013b7d 	.word	0x00013b7d
    baa8:	0000b429 	.word	0x0000b429

0000baac <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    baac:	b590      	push	{r4, r7, lr}
    baae:	b085      	sub	sp, #20
    bab0:	af00      	add	r7, sp, #0
    bab2:	6078      	str	r0, [r7, #4]
    bab4:	000a      	movs	r2, r1
    bab6:	1cbb      	adds	r3, r7, #2
    bab8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    baba:	230a      	movs	r3, #10
    babc:	18fb      	adds	r3, r7, r3
    babe:	22ff      	movs	r2, #255	; 0xff
    bac0:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    bac2:	4b1c      	ldr	r3, [pc, #112]	; (bb34 <sd_mmc_spi_start_read_blocks+0x88>)
    bac4:	2200      	movs	r2, #0
    bac6:	701a      	strb	r2, [r3, #0]
	pos = 0;
    bac8:	2300      	movs	r3, #0
    baca:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    bacc:	e025      	b.n	bb1a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    bace:	4b1a      	ldr	r3, [pc, #104]	; (bb38 <sd_mmc_spi_start_read_blocks+0x8c>)
    bad0:	4798      	blx	r3
    bad2:	0003      	movs	r3, r0
    bad4:	001a      	movs	r2, r3
    bad6:	2301      	movs	r3, #1
    bad8:	4053      	eors	r3, r2
    bada:	b2db      	uxtb	r3, r3
    badc:	2b00      	cmp	r3, #0
    bade:	d001      	beq.n	bae4 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    bae0:	2300      	movs	r3, #0
    bae2:	e022      	b.n	bb2a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    bae4:	687a      	ldr	r2, [r7, #4]
    bae6:	68fb      	ldr	r3, [r7, #12]
    bae8:	18d1      	adds	r1, r2, r3
    baea:	4b14      	ldr	r3, [pc, #80]	; (bb3c <sd_mmc_spi_start_read_blocks+0x90>)
    baec:	881a      	ldrh	r2, [r3, #0]
    baee:	230a      	movs	r3, #10
    baf0:	18fb      	adds	r3, r7, r3
    baf2:	881b      	ldrh	r3, [r3, #0]
    baf4:	4812      	ldr	r0, [pc, #72]	; (bb40 <sd_mmc_spi_start_read_blocks+0x94>)
    baf6:	4c13      	ldr	r4, [pc, #76]	; (bb44 <sd_mmc_spi_start_read_blocks+0x98>)
    baf8:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    bafa:	4b10      	ldr	r3, [pc, #64]	; (bb3c <sd_mmc_spi_start_read_blocks+0x90>)
    bafc:	881b      	ldrh	r3, [r3, #0]
    bafe:	001a      	movs	r2, r3
    bb00:	68fb      	ldr	r3, [r7, #12]
    bb02:	189b      	adds	r3, r3, r2
    bb04:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    bb06:	4b0d      	ldr	r3, [pc, #52]	; (bb3c <sd_mmc_spi_start_read_blocks+0x90>)
    bb08:	881b      	ldrh	r3, [r3, #0]
    bb0a:	001a      	movs	r2, r3
    bb0c:	4b0e      	ldr	r3, [pc, #56]	; (bb48 <sd_mmc_spi_start_read_blocks+0x9c>)
    bb0e:	681b      	ldr	r3, [r3, #0]
    bb10:	18d2      	adds	r2, r2, r3
    bb12:	4b0d      	ldr	r3, [pc, #52]	; (bb48 <sd_mmc_spi_start_read_blocks+0x9c>)
    bb14:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    bb16:	4b0d      	ldr	r3, [pc, #52]	; (bb4c <sd_mmc_spi_start_read_blocks+0xa0>)
    bb18:	4798      	blx	r3
	while (nb_block--) {
    bb1a:	1cbb      	adds	r3, r7, #2
    bb1c:	881b      	ldrh	r3, [r3, #0]
    bb1e:	1cba      	adds	r2, r7, #2
    bb20:	1e59      	subs	r1, r3, #1
    bb22:	8011      	strh	r1, [r2, #0]
    bb24:	2b00      	cmp	r3, #0
    bb26:	d1d2      	bne.n	bace <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    bb28:	2301      	movs	r3, #1
}
    bb2a:	0018      	movs	r0, r3
    bb2c:	46bd      	mov	sp, r7
    bb2e:	b005      	add	sp, #20
    bb30:	bd90      	pop	{r4, r7, pc}
    bb32:	46c0      	nop			; (mov r8, r8)
    bb34:	20003cfb 	.word	0x20003cfb
    bb38:	0000b3a5 	.word	0x0000b3a5
    bb3c:	20003d04 	.word	0x20003d04
    bb40:	20003cb8 	.word	0x20003cb8
    bb44:	00013b7d 	.word	0x00013b7d
    bb48:	20003d00 	.word	0x20003d00
    bb4c:	0000b429 	.word	0x0000b429

0000bb50 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    bb50:	b580      	push	{r7, lr}
    bb52:	af00      	add	r7, sp, #0
	return true;
    bb54:	2301      	movs	r3, #1
}
    bb56:	0018      	movs	r0, r3
    bb58:	46bd      	mov	sp, r7
    bb5a:	bd80      	pop	{r7, pc}

0000bb5c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    bb5c:	b580      	push	{r7, lr}
    bb5e:	b084      	sub	sp, #16
    bb60:	af00      	add	r7, sp, #0
    bb62:	6078      	str	r0, [r7, #4]
    bb64:	000a      	movs	r2, r1
    bb66:	1cbb      	adds	r3, r7, #2
    bb68:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    bb6a:	4b24      	ldr	r3, [pc, #144]	; (bbfc <sd_mmc_spi_start_write_blocks+0xa0>)
    bb6c:	2200      	movs	r2, #0
    bb6e:	701a      	strb	r2, [r3, #0]
	pos = 0;
    bb70:	2300      	movs	r3, #0
    bb72:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    bb74:	e035      	b.n	bbe2 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    bb76:	4b22      	ldr	r3, [pc, #136]	; (bc00 <sd_mmc_spi_start_write_blocks+0xa4>)
    bb78:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    bb7a:	687a      	ldr	r2, [r7, #4]
    bb7c:	68fb      	ldr	r3, [r7, #12]
    bb7e:	18d1      	adds	r1, r2, r3
    bb80:	4b20      	ldr	r3, [pc, #128]	; (bc04 <sd_mmc_spi_start_write_blocks+0xa8>)
    bb82:	881a      	ldrh	r2, [r3, #0]
    bb84:	4b20      	ldr	r3, [pc, #128]	; (bc08 <sd_mmc_spi_start_write_blocks+0xac>)
    bb86:	0018      	movs	r0, r3
    bb88:	4b20      	ldr	r3, [pc, #128]	; (bc0c <sd_mmc_spi_start_write_blocks+0xb0>)
    bb8a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    bb8c:	4b1d      	ldr	r3, [pc, #116]	; (bc04 <sd_mmc_spi_start_write_blocks+0xa8>)
    bb8e:	881b      	ldrh	r3, [r3, #0]
    bb90:	001a      	movs	r2, r3
    bb92:	68fb      	ldr	r3, [r7, #12]
    bb94:	189b      	adds	r3, r3, r2
    bb96:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    bb98:	4b1a      	ldr	r3, [pc, #104]	; (bc04 <sd_mmc_spi_start_write_blocks+0xa8>)
    bb9a:	881b      	ldrh	r3, [r3, #0]
    bb9c:	001a      	movs	r2, r3
    bb9e:	4b1c      	ldr	r3, [pc, #112]	; (bc10 <sd_mmc_spi_start_write_blocks+0xb4>)
    bba0:	681b      	ldr	r3, [r3, #0]
    bba2:	18d2      	adds	r2, r2, r3
    bba4:	4b1a      	ldr	r3, [pc, #104]	; (bc10 <sd_mmc_spi_start_write_blocks+0xb4>)
    bba6:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    bba8:	4b1a      	ldr	r3, [pc, #104]	; (bc14 <sd_mmc_spi_start_write_blocks+0xb8>)
    bbaa:	4798      	blx	r3
    bbac:	0003      	movs	r3, r0
    bbae:	001a      	movs	r2, r3
    bbb0:	2301      	movs	r3, #1
    bbb2:	4053      	eors	r3, r2
    bbb4:	b2db      	uxtb	r3, r3
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	d001      	beq.n	bbbe <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    bbba:	2300      	movs	r3, #0
    bbbc:	e019      	b.n	bbf2 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    bbbe:	1cbb      	adds	r3, r7, #2
    bbc0:	881b      	ldrh	r3, [r3, #0]
    bbc2:	2b00      	cmp	r3, #0
    bbc4:	d00d      	beq.n	bbe2 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    bbc6:	4b14      	ldr	r3, [pc, #80]	; (bc18 <sd_mmc_spi_start_write_blocks+0xbc>)
    bbc8:	4798      	blx	r3
    bbca:	0003      	movs	r3, r0
    bbcc:	001a      	movs	r2, r3
    bbce:	2301      	movs	r3, #1
    bbd0:	4053      	eors	r3, r2
    bbd2:	b2db      	uxtb	r3, r3
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	d004      	beq.n	bbe2 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    bbd8:	4b08      	ldr	r3, [pc, #32]	; (bbfc <sd_mmc_spi_start_write_blocks+0xa0>)
    bbda:	2205      	movs	r2, #5
    bbdc:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    bbde:	2300      	movs	r3, #0
    bbe0:	e007      	b.n	bbf2 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    bbe2:	1cbb      	adds	r3, r7, #2
    bbe4:	881b      	ldrh	r3, [r3, #0]
    bbe6:	1cba      	adds	r2, r7, #2
    bbe8:	1e59      	subs	r1, r3, #1
    bbea:	8011      	strh	r1, [r2, #0]
    bbec:	2b00      	cmp	r3, #0
    bbee:	d1c2      	bne.n	bb76 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    bbf0:	2301      	movs	r3, #1
}
    bbf2:	0018      	movs	r0, r3
    bbf4:	46bd      	mov	sp, r7
    bbf6:	b004      	add	sp, #16
    bbf8:	bd80      	pop	{r7, pc}
    bbfa:	46c0      	nop			; (mov r8, r8)
    bbfc:	20003cfb 	.word	0x20003cfb
    bc00:	0000b455 	.word	0x0000b455
    bc04:	20003d04 	.word	0x20003d04
    bc08:	20003cb8 	.word	0x20003cb8
    bc0c:	00013da1 	.word	0x00013da1
    bc10:	20003d00 	.word	0x20003d00
    bc14:	0000b4a5 	.word	0x0000b4a5
    bc18:	0000b339 	.word	0x0000b339

0000bc1c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    bc1c:	b580      	push	{r7, lr}
    bc1e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    bc20:	4b09      	ldr	r3, [pc, #36]	; (bc48 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    bc22:	4798      	blx	r3
    bc24:	0003      	movs	r3, r0
    bc26:	001a      	movs	r2, r3
    bc28:	2301      	movs	r3, #1
    bc2a:	4053      	eors	r3, r2
    bc2c:	b2db      	uxtb	r3, r3
    bc2e:	2b00      	cmp	r3, #0
    bc30:	d004      	beq.n	bc3c <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    bc32:	4b06      	ldr	r3, [pc, #24]	; (bc4c <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    bc34:	2205      	movs	r2, #5
    bc36:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    bc38:	2300      	movs	r3, #0
    bc3a:	e002      	b.n	bc42 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    bc3c:	4b04      	ldr	r3, [pc, #16]	; (bc50 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    bc3e:	4798      	blx	r3
    bc40:	0003      	movs	r3, r0
}
    bc42:	0018      	movs	r0, r3
    bc44:	46bd      	mov	sp, r7
    bc46:	bd80      	pop	{r7, pc}
    bc48:	0000b339 	.word	0x0000b339
    bc4c:	20003cfb 	.word	0x20003cfb
    bc50:	0000b539 	.word	0x0000b539

0000bc54 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    bc54:	b580      	push	{r7, lr}
    bc56:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    bc58:	2000      	movs	r0, #0
    bc5a:	4b0f      	ldr	r3, [pc, #60]	; (bc98 <delay_init+0x44>)
    bc5c:	4798      	blx	r3
    bc5e:	0002      	movs	r2, r0
    bc60:	4b0e      	ldr	r3, [pc, #56]	; (bc9c <delay_init+0x48>)
    bc62:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    bc64:	4b0d      	ldr	r3, [pc, #52]	; (bc9c <delay_init+0x48>)
    bc66:	6818      	ldr	r0, [r3, #0]
    bc68:	4b0d      	ldr	r3, [pc, #52]	; (bca0 <delay_init+0x4c>)
    bc6a:	22fa      	movs	r2, #250	; 0xfa
    bc6c:	0091      	lsls	r1, r2, #2
    bc6e:	4798      	blx	r3
    bc70:	0003      	movs	r3, r0
    bc72:	001a      	movs	r2, r3
    bc74:	4b09      	ldr	r3, [pc, #36]	; (bc9c <delay_init+0x48>)
    bc76:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    bc78:	4b08      	ldr	r3, [pc, #32]	; (bc9c <delay_init+0x48>)
    bc7a:	6818      	ldr	r0, [r3, #0]
    bc7c:	4b08      	ldr	r3, [pc, #32]	; (bca0 <delay_init+0x4c>)
    bc7e:	22fa      	movs	r2, #250	; 0xfa
    bc80:	0091      	lsls	r1, r2, #2
    bc82:	4798      	blx	r3
    bc84:	0003      	movs	r3, r0
    bc86:	001a      	movs	r2, r3
    bc88:	4b06      	ldr	r3, [pc, #24]	; (bca4 <delay_init+0x50>)
    bc8a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    bc8c:	4b06      	ldr	r3, [pc, #24]	; (bca8 <delay_init+0x54>)
    bc8e:	2205      	movs	r2, #5
    bc90:	601a      	str	r2, [r3, #0]
}
    bc92:	46c0      	nop			; (mov r8, r8)
    bc94:	46bd      	mov	sp, r7
    bc96:	bd80      	pop	{r7, pc}
    bc98:	00015925 	.word	0x00015925
    bc9c:	20000100 	.word	0x20000100
    bca0:	0001e469 	.word	0x0001e469
    bca4:	20000104 	.word	0x20000104
    bca8:	e000e010 	.word	0xe000e010

0000bcac <system_pinmux_get_group_from_gpio_pin>:
{
    bcac:	b580      	push	{r7, lr}
    bcae:	b084      	sub	sp, #16
    bcb0:	af00      	add	r7, sp, #0
    bcb2:	0002      	movs	r2, r0
    bcb4:	1dfb      	adds	r3, r7, #7
    bcb6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    bcb8:	230f      	movs	r3, #15
    bcba:	18fb      	adds	r3, r7, r3
    bcbc:	1dfa      	adds	r2, r7, #7
    bcbe:	7812      	ldrb	r2, [r2, #0]
    bcc0:	09d2      	lsrs	r2, r2, #7
    bcc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    bcc4:	230e      	movs	r3, #14
    bcc6:	18fb      	adds	r3, r7, r3
    bcc8:	1dfa      	adds	r2, r7, #7
    bcca:	7812      	ldrb	r2, [r2, #0]
    bccc:	0952      	lsrs	r2, r2, #5
    bcce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    bcd0:	4b0d      	ldr	r3, [pc, #52]	; (bd08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    bcd2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    bcd4:	230f      	movs	r3, #15
    bcd6:	18fb      	adds	r3, r7, r3
    bcd8:	781b      	ldrb	r3, [r3, #0]
    bcda:	2b00      	cmp	r3, #0
    bcdc:	d10f      	bne.n	bcfe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    bcde:	230f      	movs	r3, #15
    bce0:	18fb      	adds	r3, r7, r3
    bce2:	781b      	ldrb	r3, [r3, #0]
    bce4:	009b      	lsls	r3, r3, #2
    bce6:	2210      	movs	r2, #16
    bce8:	4694      	mov	ip, r2
    bcea:	44bc      	add	ip, r7
    bcec:	4463      	add	r3, ip
    bcee:	3b08      	subs	r3, #8
    bcf0:	681a      	ldr	r2, [r3, #0]
    bcf2:	230e      	movs	r3, #14
    bcf4:	18fb      	adds	r3, r7, r3
    bcf6:	781b      	ldrb	r3, [r3, #0]
    bcf8:	01db      	lsls	r3, r3, #7
    bcfa:	18d3      	adds	r3, r2, r3
    bcfc:	e000      	b.n	bd00 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    bcfe:	2300      	movs	r3, #0
}
    bd00:	0018      	movs	r0, r3
    bd02:	46bd      	mov	sp, r7
    bd04:	b004      	add	sp, #16
    bd06:	bd80      	pop	{r7, pc}
    bd08:	41004400 	.word	0x41004400

0000bd0c <system_interrupt_enable_global>:
{
    bd0c:	b580      	push	{r7, lr}
    bd0e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    bd10:	4b04      	ldr	r3, [pc, #16]	; (bd24 <system_interrupt_enable_global+0x18>)
    bd12:	2201      	movs	r2, #1
    bd14:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    bd16:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    bd1a:	b662      	cpsie	i
}
    bd1c:	46c0      	nop			; (mov r8, r8)
    bd1e:	46bd      	mov	sp, r7
    bd20:	bd80      	pop	{r7, pc}
    bd22:	46c0      	nop			; (mov r8, r8)
    bd24:	2000010a 	.word	0x2000010a

0000bd28 <port_get_group_from_gpio_pin>:
{
    bd28:	b580      	push	{r7, lr}
    bd2a:	b082      	sub	sp, #8
    bd2c:	af00      	add	r7, sp, #0
    bd2e:	0002      	movs	r2, r0
    bd30:	1dfb      	adds	r3, r7, #7
    bd32:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    bd34:	1dfb      	adds	r3, r7, #7
    bd36:	781b      	ldrb	r3, [r3, #0]
    bd38:	0018      	movs	r0, r3
    bd3a:	4b03      	ldr	r3, [pc, #12]	; (bd48 <port_get_group_from_gpio_pin+0x20>)
    bd3c:	4798      	blx	r3
    bd3e:	0003      	movs	r3, r0
}
    bd40:	0018      	movs	r0, r3
    bd42:	46bd      	mov	sp, r7
    bd44:	b002      	add	sp, #8
    bd46:	bd80      	pop	{r7, pc}
    bd48:	0000bcad 	.word	0x0000bcad

0000bd4c <port_get_config_defaults>:
{
    bd4c:	b580      	push	{r7, lr}
    bd4e:	b082      	sub	sp, #8
    bd50:	af00      	add	r7, sp, #0
    bd52:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    bd54:	687b      	ldr	r3, [r7, #4]
    bd56:	2200      	movs	r2, #0
    bd58:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    bd5a:	687b      	ldr	r3, [r7, #4]
    bd5c:	2201      	movs	r2, #1
    bd5e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    bd60:	687b      	ldr	r3, [r7, #4]
    bd62:	2200      	movs	r2, #0
    bd64:	709a      	strb	r2, [r3, #2]
}
    bd66:	46c0      	nop			; (mov r8, r8)
    bd68:	46bd      	mov	sp, r7
    bd6a:	b002      	add	sp, #8
    bd6c:	bd80      	pop	{r7, pc}
	...

0000bd70 <port_pin_set_output_level>:
{
    bd70:	b580      	push	{r7, lr}
    bd72:	b084      	sub	sp, #16
    bd74:	af00      	add	r7, sp, #0
    bd76:	0002      	movs	r2, r0
    bd78:	1dfb      	adds	r3, r7, #7
    bd7a:	701a      	strb	r2, [r3, #0]
    bd7c:	1dbb      	adds	r3, r7, #6
    bd7e:	1c0a      	adds	r2, r1, #0
    bd80:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    bd82:	1dfb      	adds	r3, r7, #7
    bd84:	781b      	ldrb	r3, [r3, #0]
    bd86:	0018      	movs	r0, r3
    bd88:	4b0d      	ldr	r3, [pc, #52]	; (bdc0 <port_pin_set_output_level+0x50>)
    bd8a:	4798      	blx	r3
    bd8c:	0003      	movs	r3, r0
    bd8e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    bd90:	1dfb      	adds	r3, r7, #7
    bd92:	781b      	ldrb	r3, [r3, #0]
    bd94:	221f      	movs	r2, #31
    bd96:	4013      	ands	r3, r2
    bd98:	2201      	movs	r2, #1
    bd9a:	409a      	lsls	r2, r3
    bd9c:	0013      	movs	r3, r2
    bd9e:	60bb      	str	r3, [r7, #8]
	if (level) {
    bda0:	1dbb      	adds	r3, r7, #6
    bda2:	781b      	ldrb	r3, [r3, #0]
    bda4:	2b00      	cmp	r3, #0
    bda6:	d003      	beq.n	bdb0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    bda8:	68fb      	ldr	r3, [r7, #12]
    bdaa:	68ba      	ldr	r2, [r7, #8]
    bdac:	619a      	str	r2, [r3, #24]
}
    bdae:	e002      	b.n	bdb6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    bdb0:	68fb      	ldr	r3, [r7, #12]
    bdb2:	68ba      	ldr	r2, [r7, #8]
    bdb4:	615a      	str	r2, [r3, #20]
}
    bdb6:	46c0      	nop			; (mov r8, r8)
    bdb8:	46bd      	mov	sp, r7
    bdba:	b004      	add	sp, #16
    bdbc:	bd80      	pop	{r7, pc}
    bdbe:	46c0      	nop			; (mov r8, r8)
    bdc0:	0000bd29 	.word	0x0000bd29

0000bdc4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    bdc4:	b580      	push	{r7, lr}
    bdc6:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    bdc8:	4b04      	ldr	r3, [pc, #16]	; (bddc <chip_isr+0x18>)
    bdca:	681b      	ldr	r3, [r3, #0]
    bdcc:	2b00      	cmp	r3, #0
    bdce:	d002      	beq.n	bdd6 <chip_isr+0x12>
		gpfIsr();
    bdd0:	4b02      	ldr	r3, [pc, #8]	; (bddc <chip_isr+0x18>)
    bdd2:	681b      	ldr	r3, [r3, #0]
    bdd4:	4798      	blx	r3
	}
}
    bdd6:	46c0      	nop			; (mov r8, r8)
    bdd8:	46bd      	mov	sp, r7
    bdda:	bd80      	pop	{r7, pc}
    bddc:	20003d08 	.word	0x20003d08

0000bde0 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    bde0:	b580      	push	{r7, lr}
    bde2:	b082      	sub	sp, #8
    bde4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    bde6:	1d3b      	adds	r3, r7, #4
    bde8:	0018      	movs	r0, r3
    bdea:	4b10      	ldr	r3, [pc, #64]	; (be2c <init_chip_pins+0x4c>)
    bdec:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    bdee:	1d3b      	adds	r3, r7, #4
    bdf0:	2201      	movs	r2, #1
    bdf2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    bdf4:	1d3b      	adds	r3, r7, #4
    bdf6:	0019      	movs	r1, r3
    bdf8:	201b      	movs	r0, #27
    bdfa:	4b0d      	ldr	r3, [pc, #52]	; (be30 <init_chip_pins+0x50>)
    bdfc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    bdfe:	1d3b      	adds	r3, r7, #4
    be00:	0019      	movs	r1, r3
    be02:	201c      	movs	r0, #28
    be04:	4b0a      	ldr	r3, [pc, #40]	; (be30 <init_chip_pins+0x50>)
    be06:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    be08:	1d3b      	adds	r3, r7, #4
    be0a:	0019      	movs	r1, r3
    be0c:	2028      	movs	r0, #40	; 0x28
    be0e:	4b08      	ldr	r3, [pc, #32]	; (be30 <init_chip_pins+0x50>)
    be10:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    be12:	2100      	movs	r1, #0
    be14:	201c      	movs	r0, #28
    be16:	4b07      	ldr	r3, [pc, #28]	; (be34 <init_chip_pins+0x54>)
    be18:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    be1a:	2100      	movs	r1, #0
    be1c:	201b      	movs	r0, #27
    be1e:	4b05      	ldr	r3, [pc, #20]	; (be34 <init_chip_pins+0x54>)
    be20:	4798      	blx	r3
}
    be22:	46c0      	nop			; (mov r8, r8)
    be24:	46bd      	mov	sp, r7
    be26:	b002      	add	sp, #8
    be28:	bd80      	pop	{r7, pc}
    be2a:	46c0      	nop			; (mov r8, r8)
    be2c:	0000bd4d 	.word	0x0000bd4d
    be30:	0001256d 	.word	0x0001256d
    be34:	0000bd71 	.word	0x0000bd71

0000be38 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    be38:	b580      	push	{r7, lr}
    be3a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    be3c:	4b0b      	ldr	r3, [pc, #44]	; (be6c <nm_bsp_init+0x34>)
    be3e:	2200      	movs	r2, #0
    be40:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    be42:	4b0b      	ldr	r3, [pc, #44]	; (be70 <nm_bsp_init+0x38>)
    be44:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    be46:	4b0b      	ldr	r3, [pc, #44]	; (be74 <nm_bsp_init+0x3c>)
    be48:	681b      	ldr	r3, [r3, #0]
    be4a:	2201      	movs	r2, #1
    be4c:	4013      	ands	r3, r2
    be4e:	d004      	beq.n	be5a <nm_bsp_init+0x22>
    be50:	4b08      	ldr	r3, [pc, #32]	; (be74 <nm_bsp_init+0x3c>)
    be52:	681b      	ldr	r3, [r3, #0]
    be54:	2202      	movs	r2, #2
    be56:	4013      	ands	r3, r2
    be58:	d101      	bne.n	be5e <nm_bsp_init+0x26>
	    delay_init();
    be5a:	4b07      	ldr	r3, [pc, #28]	; (be78 <nm_bsp_init+0x40>)
    be5c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
    be5e:	4b07      	ldr	r3, [pc, #28]	; (be7c <nm_bsp_init+0x44>)
    be60:	4798      	blx	r3

	return M2M_SUCCESS;
    be62:	2300      	movs	r3, #0
}
    be64:	0018      	movs	r0, r3
    be66:	46bd      	mov	sp, r7
    be68:	bd80      	pop	{r7, pc}
    be6a:	46c0      	nop			; (mov r8, r8)
    be6c:	20003d08 	.word	0x20003d08
    be70:	0000bde1 	.word	0x0000bde1
    be74:	e000e010 	.word	0xe000e010
    be78:	0000bc55 	.word	0x0000bc55
    be7c:	0000bd0d 	.word	0x0000bd0d

0000be80 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    be80:	b580      	push	{r7, lr}
    be82:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    be84:	2100      	movs	r1, #0
    be86:	201c      	movs	r0, #28
    be88:	4b0b      	ldr	r3, [pc, #44]	; (beb8 <nm_bsp_reset+0x38>)
    be8a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    be8c:	2100      	movs	r1, #0
    be8e:	201b      	movs	r0, #27
    be90:	4b09      	ldr	r3, [pc, #36]	; (beb8 <nm_bsp_reset+0x38>)
    be92:	4798      	blx	r3
	nm_bsp_sleep(1);
    be94:	2001      	movs	r0, #1
    be96:	4b09      	ldr	r3, [pc, #36]	; (bebc <nm_bsp_reset+0x3c>)
    be98:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    be9a:	2101      	movs	r1, #1
    be9c:	201c      	movs	r0, #28
    be9e:	4b06      	ldr	r3, [pc, #24]	; (beb8 <nm_bsp_reset+0x38>)
    bea0:	4798      	blx	r3
	nm_bsp_sleep(10);
    bea2:	200a      	movs	r0, #10
    bea4:	4b05      	ldr	r3, [pc, #20]	; (bebc <nm_bsp_reset+0x3c>)
    bea6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    bea8:	2101      	movs	r1, #1
    beaa:	201b      	movs	r0, #27
    beac:	4b02      	ldr	r3, [pc, #8]	; (beb8 <nm_bsp_reset+0x38>)
    beae:	4798      	blx	r3
}
    beb0:	46c0      	nop			; (mov r8, r8)
    beb2:	46bd      	mov	sp, r7
    beb4:	bd80      	pop	{r7, pc}
    beb6:	46c0      	nop			; (mov r8, r8)
    beb8:	0000bd71 	.word	0x0000bd71
    bebc:	0000bec1 	.word	0x0000bec1

0000bec0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    bec0:	b580      	push	{r7, lr}
    bec2:	b082      	sub	sp, #8
    bec4:	af00      	add	r7, sp, #0
    bec6:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
    bec8:	687b      	ldr	r3, [r7, #4]
    beca:	0018      	movs	r0, r3
    becc:	4b02      	ldr	r3, [pc, #8]	; (bed8 <nm_bsp_sleep+0x18>)
    bece:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
    bed0:	46c0      	nop			; (mov r8, r8)
    bed2:	46bd      	mov	sp, r7
    bed4:	b002      	add	sp, #8
    bed6:	bd80      	pop	{r7, pc}
    bed8:	00007cd5 	.word	0x00007cd5

0000bedc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    bedc:	b580      	push	{r7, lr}
    bede:	b086      	sub	sp, #24
    bee0:	af00      	add	r7, sp, #0
    bee2:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    bee4:	4b15      	ldr	r3, [pc, #84]	; (bf3c <nm_bsp_register_isr+0x60>)
    bee6:	687a      	ldr	r2, [r7, #4]
    bee8:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    beea:	230c      	movs	r3, #12
    beec:	18fb      	adds	r3, r7, r3
    beee:	0018      	movs	r0, r3
    bef0:	4b13      	ldr	r3, [pc, #76]	; (bf40 <nm_bsp_register_isr+0x64>)
    bef2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    bef4:	230c      	movs	r3, #12
    bef6:	18fb      	adds	r3, r7, r3
    bef8:	2229      	movs	r2, #41	; 0x29
    befa:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    befc:	230c      	movs	r3, #12
    befe:	18fb      	adds	r3, r7, r3
    bf00:	2200      	movs	r2, #0
    bf02:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    bf04:	230c      	movs	r3, #12
    bf06:	18fb      	adds	r3, r7, r3
    bf08:	2201      	movs	r2, #1
    bf0a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    bf0c:	230c      	movs	r3, #12
    bf0e:	18fb      	adds	r3, r7, r3
    bf10:	2202      	movs	r2, #2
    bf12:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    bf14:	230c      	movs	r3, #12
    bf16:	18fb      	adds	r3, r7, r3
    bf18:	0019      	movs	r1, r3
    bf1a:	2009      	movs	r0, #9
    bf1c:	4b09      	ldr	r3, [pc, #36]	; (bf44 <nm_bsp_register_isr+0x68>)
    bf1e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    bf20:	4b09      	ldr	r3, [pc, #36]	; (bf48 <nm_bsp_register_isr+0x6c>)
    bf22:	2200      	movs	r2, #0
    bf24:	2109      	movs	r1, #9
    bf26:	0018      	movs	r0, r3
    bf28:	4b08      	ldr	r3, [pc, #32]	; (bf4c <nm_bsp_register_isr+0x70>)
    bf2a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    bf2c:	2100      	movs	r1, #0
    bf2e:	2009      	movs	r0, #9
    bf30:	4b07      	ldr	r3, [pc, #28]	; (bf50 <nm_bsp_register_isr+0x74>)
    bf32:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    bf34:	46c0      	nop			; (mov r8, r8)
    bf36:	46bd      	mov	sp, r7
    bf38:	b006      	add	sp, #24
    bf3a:	bd80      	pop	{r7, pc}
    bf3c:	20003d08 	.word	0x20003d08
    bf40:	00012415 	.word	0x00012415
    bf44:	00012449 	.word	0x00012449
    bf48:	0000bdc5 	.word	0x0000bdc5
    bf4c:	00012015 	.word	0x00012015
    bf50:	00012079 	.word	0x00012079

0000bf54 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    bf54:	b580      	push	{r7, lr}
    bf56:	b082      	sub	sp, #8
    bf58:	af00      	add	r7, sp, #0
    bf5a:	0002      	movs	r2, r0
    bf5c:	1dfb      	adds	r3, r7, #7
    bf5e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    bf60:	1dfb      	adds	r3, r7, #7
    bf62:	781b      	ldrb	r3, [r3, #0]
    bf64:	2b00      	cmp	r3, #0
    bf66:	d004      	beq.n	bf72 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    bf68:	2100      	movs	r1, #0
    bf6a:	2009      	movs	r0, #9
    bf6c:	4b05      	ldr	r3, [pc, #20]	; (bf84 <nm_bsp_interrupt_ctrl+0x30>)
    bf6e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    bf70:	e003      	b.n	bf7a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    bf72:	2100      	movs	r1, #0
    bf74:	2009      	movs	r0, #9
    bf76:	4b04      	ldr	r3, [pc, #16]	; (bf88 <nm_bsp_interrupt_ctrl+0x34>)
    bf78:	4798      	blx	r3
}
    bf7a:	46c0      	nop			; (mov r8, r8)
    bf7c:	46bd      	mov	sp, r7
    bf7e:	b002      	add	sp, #8
    bf80:	bd80      	pop	{r7, pc}
    bf82:	46c0      	nop			; (mov r8, r8)
    bf84:	00012079 	.word	0x00012079
    bf88:	000120c1 	.word	0x000120c1

0000bf8c <system_pinmux_get_group_from_gpio_pin>:
{
    bf8c:	b580      	push	{r7, lr}
    bf8e:	b084      	sub	sp, #16
    bf90:	af00      	add	r7, sp, #0
    bf92:	0002      	movs	r2, r0
    bf94:	1dfb      	adds	r3, r7, #7
    bf96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    bf98:	230f      	movs	r3, #15
    bf9a:	18fb      	adds	r3, r7, r3
    bf9c:	1dfa      	adds	r2, r7, #7
    bf9e:	7812      	ldrb	r2, [r2, #0]
    bfa0:	09d2      	lsrs	r2, r2, #7
    bfa2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    bfa4:	230e      	movs	r3, #14
    bfa6:	18fb      	adds	r3, r7, r3
    bfa8:	1dfa      	adds	r2, r7, #7
    bfaa:	7812      	ldrb	r2, [r2, #0]
    bfac:	0952      	lsrs	r2, r2, #5
    bfae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    bfb0:	4b0d      	ldr	r3, [pc, #52]	; (bfe8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    bfb2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    bfb4:	230f      	movs	r3, #15
    bfb6:	18fb      	adds	r3, r7, r3
    bfb8:	781b      	ldrb	r3, [r3, #0]
    bfba:	2b00      	cmp	r3, #0
    bfbc:	d10f      	bne.n	bfde <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    bfbe:	230f      	movs	r3, #15
    bfc0:	18fb      	adds	r3, r7, r3
    bfc2:	781b      	ldrb	r3, [r3, #0]
    bfc4:	009b      	lsls	r3, r3, #2
    bfc6:	2210      	movs	r2, #16
    bfc8:	4694      	mov	ip, r2
    bfca:	44bc      	add	ip, r7
    bfcc:	4463      	add	r3, ip
    bfce:	3b08      	subs	r3, #8
    bfd0:	681a      	ldr	r2, [r3, #0]
    bfd2:	230e      	movs	r3, #14
    bfd4:	18fb      	adds	r3, r7, r3
    bfd6:	781b      	ldrb	r3, [r3, #0]
    bfd8:	01db      	lsls	r3, r3, #7
    bfda:	18d3      	adds	r3, r2, r3
    bfdc:	e000      	b.n	bfe0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    bfde:	2300      	movs	r3, #0
}
    bfe0:	0018      	movs	r0, r3
    bfe2:	46bd      	mov	sp, r7
    bfe4:	b004      	add	sp, #16
    bfe6:	bd80      	pop	{r7, pc}
    bfe8:	41004400 	.word	0x41004400

0000bfec <system_interrupt_enable>:
{
    bfec:	b580      	push	{r7, lr}
    bfee:	b082      	sub	sp, #8
    bff0:	af00      	add	r7, sp, #0
    bff2:	0002      	movs	r2, r0
    bff4:	1dfb      	adds	r3, r7, #7
    bff6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    bff8:	4b06      	ldr	r3, [pc, #24]	; (c014 <system_interrupt_enable+0x28>)
    bffa:	1dfa      	adds	r2, r7, #7
    bffc:	7812      	ldrb	r2, [r2, #0]
    bffe:	0011      	movs	r1, r2
    c000:	221f      	movs	r2, #31
    c002:	400a      	ands	r2, r1
    c004:	2101      	movs	r1, #1
    c006:	4091      	lsls	r1, r2
    c008:	000a      	movs	r2, r1
    c00a:	601a      	str	r2, [r3, #0]
}
    c00c:	46c0      	nop			; (mov r8, r8)
    c00e:	46bd      	mov	sp, r7
    c010:	b002      	add	sp, #8
    c012:	bd80      	pop	{r7, pc}
    c014:	e000e100 	.word	0xe000e100

0000c018 <system_interrupt_disable>:
{
    c018:	b580      	push	{r7, lr}
    c01a:	b082      	sub	sp, #8
    c01c:	af00      	add	r7, sp, #0
    c01e:	0002      	movs	r2, r0
    c020:	1dfb      	adds	r3, r7, #7
    c022:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c024:	4a07      	ldr	r2, [pc, #28]	; (c044 <system_interrupt_disable+0x2c>)
    c026:	1dfb      	adds	r3, r7, #7
    c028:	781b      	ldrb	r3, [r3, #0]
    c02a:	0019      	movs	r1, r3
    c02c:	231f      	movs	r3, #31
    c02e:	400b      	ands	r3, r1
    c030:	2101      	movs	r1, #1
    c032:	4099      	lsls	r1, r3
    c034:	000b      	movs	r3, r1
    c036:	0019      	movs	r1, r3
    c038:	2380      	movs	r3, #128	; 0x80
    c03a:	50d1      	str	r1, [r2, r3]
}
    c03c:	46c0      	nop			; (mov r8, r8)
    c03e:	46bd      	mov	sp, r7
    c040:	b002      	add	sp, #8
    c042:	bd80      	pop	{r7, pc}
    c044:	e000e100 	.word	0xe000e100

0000c048 <port_get_group_from_gpio_pin>:
{
    c048:	b580      	push	{r7, lr}
    c04a:	b082      	sub	sp, #8
    c04c:	af00      	add	r7, sp, #0
    c04e:	0002      	movs	r2, r0
    c050:	1dfb      	adds	r3, r7, #7
    c052:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c054:	1dfb      	adds	r3, r7, #7
    c056:	781b      	ldrb	r3, [r3, #0]
    c058:	0018      	movs	r0, r3
    c05a:	4b03      	ldr	r3, [pc, #12]	; (c068 <port_get_group_from_gpio_pin+0x20>)
    c05c:	4798      	blx	r3
    c05e:	0003      	movs	r3, r0
}
    c060:	0018      	movs	r0, r3
    c062:	46bd      	mov	sp, r7
    c064:	b002      	add	sp, #8
    c066:	bd80      	pop	{r7, pc}
    c068:	0000bf8d 	.word	0x0000bf8d

0000c06c <port_get_config_defaults>:
{
    c06c:	b580      	push	{r7, lr}
    c06e:	b082      	sub	sp, #8
    c070:	af00      	add	r7, sp, #0
    c072:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    c074:	687b      	ldr	r3, [r7, #4]
    c076:	2200      	movs	r2, #0
    c078:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c07a:	687b      	ldr	r3, [r7, #4]
    c07c:	2201      	movs	r2, #1
    c07e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    c080:	687b      	ldr	r3, [r7, #4]
    c082:	2200      	movs	r2, #0
    c084:	709a      	strb	r2, [r3, #2]
}
    c086:	46c0      	nop			; (mov r8, r8)
    c088:	46bd      	mov	sp, r7
    c08a:	b002      	add	sp, #8
    c08c:	bd80      	pop	{r7, pc}
	...

0000c090 <port_pin_set_output_level>:
{
    c090:	b580      	push	{r7, lr}
    c092:	b084      	sub	sp, #16
    c094:	af00      	add	r7, sp, #0
    c096:	0002      	movs	r2, r0
    c098:	1dfb      	adds	r3, r7, #7
    c09a:	701a      	strb	r2, [r3, #0]
    c09c:	1dbb      	adds	r3, r7, #6
    c09e:	1c0a      	adds	r2, r1, #0
    c0a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c0a2:	1dfb      	adds	r3, r7, #7
    c0a4:	781b      	ldrb	r3, [r3, #0]
    c0a6:	0018      	movs	r0, r3
    c0a8:	4b0d      	ldr	r3, [pc, #52]	; (c0e0 <port_pin_set_output_level+0x50>)
    c0aa:	4798      	blx	r3
    c0ac:	0003      	movs	r3, r0
    c0ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c0b0:	1dfb      	adds	r3, r7, #7
    c0b2:	781b      	ldrb	r3, [r3, #0]
    c0b4:	221f      	movs	r2, #31
    c0b6:	4013      	ands	r3, r2
    c0b8:	2201      	movs	r2, #1
    c0ba:	409a      	lsls	r2, r3
    c0bc:	0013      	movs	r3, r2
    c0be:	60bb      	str	r3, [r7, #8]
	if (level) {
    c0c0:	1dbb      	adds	r3, r7, #6
    c0c2:	781b      	ldrb	r3, [r3, #0]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d003      	beq.n	c0d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    c0c8:	68fb      	ldr	r3, [r7, #12]
    c0ca:	68ba      	ldr	r2, [r7, #8]
    c0cc:	619a      	str	r2, [r3, #24]
}
    c0ce:	e002      	b.n	c0d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    c0d0:	68fb      	ldr	r3, [r7, #12]
    c0d2:	68ba      	ldr	r2, [r7, #8]
    c0d4:	615a      	str	r2, [r3, #20]
}
    c0d6:	46c0      	nop			; (mov r8, r8)
    c0d8:	46bd      	mov	sp, r7
    c0da:	b004      	add	sp, #16
    c0dc:	bd80      	pop	{r7, pc}
    c0de:	46c0      	nop			; (mov r8, r8)
    c0e0:	0000c049 	.word	0x0000c049

0000c0e4 <spi_is_syncing>:
{
    c0e4:	b580      	push	{r7, lr}
    c0e6:	b084      	sub	sp, #16
    c0e8:	af00      	add	r7, sp, #0
    c0ea:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c0ec:	687b      	ldr	r3, [r7, #4]
    c0ee:	681b      	ldr	r3, [r3, #0]
    c0f0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    c0f2:	68fb      	ldr	r3, [r7, #12]
    c0f4:	69db      	ldr	r3, [r3, #28]
    c0f6:	1e5a      	subs	r2, r3, #1
    c0f8:	4193      	sbcs	r3, r2
    c0fa:	b2db      	uxtb	r3, r3
}
    c0fc:	0018      	movs	r0, r3
    c0fe:	46bd      	mov	sp, r7
    c100:	b004      	add	sp, #16
    c102:	bd80      	pop	{r7, pc}

0000c104 <spi_get_config_defaults>:
{
    c104:	b580      	push	{r7, lr}
    c106:	b082      	sub	sp, #8
    c108:	af00      	add	r7, sp, #0
    c10a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    c10c:	687b      	ldr	r3, [r7, #4]
    c10e:	2201      	movs	r2, #1
    c110:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    c112:	687b      	ldr	r3, [r7, #4]
    c114:	2200      	movs	r2, #0
    c116:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    c118:	687b      	ldr	r3, [r7, #4]
    c11a:	2200      	movs	r2, #0
    c11c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    c11e:	687b      	ldr	r3, [r7, #4]
    c120:	22c0      	movs	r2, #192	; 0xc0
    c122:	0392      	lsls	r2, r2, #14
    c124:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    c126:	687b      	ldr	r3, [r7, #4]
    c128:	2200      	movs	r2, #0
    c12a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    c12c:	687b      	ldr	r3, [r7, #4]
    c12e:	2200      	movs	r2, #0
    c130:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    c132:	687b      	ldr	r3, [r7, #4]
    c134:	2201      	movs	r2, #1
    c136:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    c138:	687b      	ldr	r3, [r7, #4]
    c13a:	2201      	movs	r2, #1
    c13c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    c13e:	687b      	ldr	r3, [r7, #4]
    c140:	2200      	movs	r2, #0
    c142:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    c144:	687b      	ldr	r3, [r7, #4]
    c146:	2224      	movs	r2, #36	; 0x24
    c148:	2100      	movs	r1, #0
    c14a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    c14c:	687b      	ldr	r3, [r7, #4]
    c14e:	3318      	adds	r3, #24
    c150:	220c      	movs	r2, #12
    c152:	2100      	movs	r1, #0
    c154:	0018      	movs	r0, r3
    c156:	4b0a      	ldr	r3, [pc, #40]	; (c180 <spi_get_config_defaults+0x7c>)
    c158:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    c15a:	687b      	ldr	r3, [r7, #4]
    c15c:	4a09      	ldr	r2, [pc, #36]	; (c184 <spi_get_config_defaults+0x80>)
    c15e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    c160:	687b      	ldr	r3, [r7, #4]
    c162:	2200      	movs	r2, #0
    c164:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    c166:	687b      	ldr	r3, [r7, #4]
    c168:	2200      	movs	r2, #0
    c16a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    c16c:	687b      	ldr	r3, [r7, #4]
    c16e:	2200      	movs	r2, #0
    c170:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    c172:	687b      	ldr	r3, [r7, #4]
    c174:	2200      	movs	r2, #0
    c176:	635a      	str	r2, [r3, #52]	; 0x34
};
    c178:	46c0      	nop			; (mov r8, r8)
    c17a:	46bd      	mov	sp, r7
    c17c:	b002      	add	sp, #8
    c17e:	bd80      	pop	{r7, pc}
    c180:	00020123 	.word	0x00020123
    c184:	000186a0 	.word	0x000186a0

0000c188 <spi_slave_inst_get_config_defaults>:
{
    c188:	b580      	push	{r7, lr}
    c18a:	b082      	sub	sp, #8
    c18c:	af00      	add	r7, sp, #0
    c18e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    c190:	687b      	ldr	r3, [r7, #4]
    c192:	220a      	movs	r2, #10
    c194:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    c196:	687b      	ldr	r3, [r7, #4]
    c198:	2200      	movs	r2, #0
    c19a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    c19c:	687b      	ldr	r3, [r7, #4]
    c19e:	2200      	movs	r2, #0
    c1a0:	709a      	strb	r2, [r3, #2]
}
    c1a2:	46c0      	nop			; (mov r8, r8)
    c1a4:	46bd      	mov	sp, r7
    c1a6:	b002      	add	sp, #8
    c1a8:	bd80      	pop	{r7, pc}
	...

0000c1ac <spi_attach_slave>:
{
    c1ac:	b580      	push	{r7, lr}
    c1ae:	b084      	sub	sp, #16
    c1b0:	af00      	add	r7, sp, #0
    c1b2:	6078      	str	r0, [r7, #4]
    c1b4:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    c1b6:	683b      	ldr	r3, [r7, #0]
    c1b8:	781a      	ldrb	r2, [r3, #0]
    c1ba:	687b      	ldr	r3, [r7, #4]
    c1bc:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    c1be:	683b      	ldr	r3, [r7, #0]
    c1c0:	785a      	ldrb	r2, [r3, #1]
    c1c2:	687b      	ldr	r3, [r7, #4]
    c1c4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    c1c6:	683b      	ldr	r3, [r7, #0]
    c1c8:	789a      	ldrb	r2, [r3, #2]
    c1ca:	687b      	ldr	r3, [r7, #4]
    c1cc:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    c1ce:	230c      	movs	r3, #12
    c1d0:	18fb      	adds	r3, r7, r3
    c1d2:	0018      	movs	r0, r3
    c1d4:	4b0b      	ldr	r3, [pc, #44]	; (c204 <spi_attach_slave+0x58>)
    c1d6:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    c1d8:	230c      	movs	r3, #12
    c1da:	18fb      	adds	r3, r7, r3
    c1dc:	2201      	movs	r2, #1
    c1de:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    c1e0:	687b      	ldr	r3, [r7, #4]
    c1e2:	781b      	ldrb	r3, [r3, #0]
    c1e4:	220c      	movs	r2, #12
    c1e6:	18ba      	adds	r2, r7, r2
    c1e8:	0011      	movs	r1, r2
    c1ea:	0018      	movs	r0, r3
    c1ec:	4b06      	ldr	r3, [pc, #24]	; (c208 <spi_attach_slave+0x5c>)
    c1ee:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    c1f0:	687b      	ldr	r3, [r7, #4]
    c1f2:	781b      	ldrb	r3, [r3, #0]
    c1f4:	2101      	movs	r1, #1
    c1f6:	0018      	movs	r0, r3
    c1f8:	4b04      	ldr	r3, [pc, #16]	; (c20c <spi_attach_slave+0x60>)
    c1fa:	4798      	blx	r3
}
    c1fc:	46c0      	nop			; (mov r8, r8)
    c1fe:	46bd      	mov	sp, r7
    c200:	b004      	add	sp, #16
    c202:	bd80      	pop	{r7, pc}
    c204:	0000c06d 	.word	0x0000c06d
    c208:	0001256d 	.word	0x0001256d
    c20c:	0000c091 	.word	0x0000c091

0000c210 <spi_enable>:
{
    c210:	b580      	push	{r7, lr}
    c212:	b084      	sub	sp, #16
    c214:	af00      	add	r7, sp, #0
    c216:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c218:	687b      	ldr	r3, [r7, #4]
    c21a:	681b      	ldr	r3, [r3, #0]
    c21c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c21e:	687b      	ldr	r3, [r7, #4]
    c220:	681b      	ldr	r3, [r3, #0]
    c222:	0018      	movs	r0, r3
    c224:	4b0b      	ldr	r3, [pc, #44]	; (c254 <spi_enable+0x44>)
    c226:	4798      	blx	r3
    c228:	0003      	movs	r3, r0
    c22a:	0018      	movs	r0, r3
    c22c:	4b0a      	ldr	r3, [pc, #40]	; (c258 <spi_enable+0x48>)
    c22e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    c230:	46c0      	nop			; (mov r8, r8)
    c232:	687b      	ldr	r3, [r7, #4]
    c234:	0018      	movs	r0, r3
    c236:	4b09      	ldr	r3, [pc, #36]	; (c25c <spi_enable+0x4c>)
    c238:	4798      	blx	r3
    c23a:	1e03      	subs	r3, r0, #0
    c23c:	d1f9      	bne.n	c232 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    c23e:	68fb      	ldr	r3, [r7, #12]
    c240:	681b      	ldr	r3, [r3, #0]
    c242:	2202      	movs	r2, #2
    c244:	431a      	orrs	r2, r3
    c246:	68fb      	ldr	r3, [r7, #12]
    c248:	601a      	str	r2, [r3, #0]
}
    c24a:	46c0      	nop			; (mov r8, r8)
    c24c:	46bd      	mov	sp, r7
    c24e:	b004      	add	sp, #16
    c250:	bd80      	pop	{r7, pc}
    c252:	46c0      	nop			; (mov r8, r8)
    c254:	0001323d 	.word	0x0001323d
    c258:	0000bfed 	.word	0x0000bfed
    c25c:	0000c0e5 	.word	0x0000c0e5

0000c260 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    c260:	b580      	push	{r7, lr}
    c262:	b084      	sub	sp, #16
    c264:	af00      	add	r7, sp, #0
    c266:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c268:	687b      	ldr	r3, [r7, #4]
    c26a:	681b      	ldr	r3, [r3, #0]
    c26c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    c26e:	687b      	ldr	r3, [r7, #4]
    c270:	681b      	ldr	r3, [r3, #0]
    c272:	0018      	movs	r0, r3
    c274:	4b0e      	ldr	r3, [pc, #56]	; (c2b0 <spi_disable+0x50>)
    c276:	4798      	blx	r3
    c278:	0003      	movs	r3, r0
    c27a:	0018      	movs	r0, r3
    c27c:	4b0d      	ldr	r3, [pc, #52]	; (c2b4 <spi_disable+0x54>)
    c27e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    c280:	46c0      	nop			; (mov r8, r8)
    c282:	687b      	ldr	r3, [r7, #4]
    c284:	0018      	movs	r0, r3
    c286:	4b0c      	ldr	r3, [pc, #48]	; (c2b8 <spi_disable+0x58>)
    c288:	4798      	blx	r3
    c28a:	1e03      	subs	r3, r0, #0
    c28c:	d1f9      	bne.n	c282 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    c28e:	68fb      	ldr	r3, [r7, #12]
    c290:	228f      	movs	r2, #143	; 0x8f
    c292:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    c294:	68fb      	ldr	r3, [r7, #12]
    c296:	228f      	movs	r2, #143	; 0x8f
    c298:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    c29a:	68fb      	ldr	r3, [r7, #12]
    c29c:	681b      	ldr	r3, [r3, #0]
    c29e:	2202      	movs	r2, #2
    c2a0:	4393      	bics	r3, r2
    c2a2:	001a      	movs	r2, r3
    c2a4:	68fb      	ldr	r3, [r7, #12]
    c2a6:	601a      	str	r2, [r3, #0]
}
    c2a8:	46c0      	nop			; (mov r8, r8)
    c2aa:	46bd      	mov	sp, r7
    c2ac:	b004      	add	sp, #16
    c2ae:	bd80      	pop	{r7, pc}
    c2b0:	0001323d 	.word	0x0001323d
    c2b4:	0000c019 	.word	0x0000c019
    c2b8:	0000c0e5 	.word	0x0000c0e5

0000c2bc <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    c2bc:	b580      	push	{r7, lr}
    c2be:	b084      	sub	sp, #16
    c2c0:	af00      	add	r7, sp, #0
    c2c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c2c4:	687b      	ldr	r3, [r7, #4]
    c2c6:	681b      	ldr	r3, [r3, #0]
    c2c8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    c2ca:	68fb      	ldr	r3, [r7, #12]
    c2cc:	7e1b      	ldrb	r3, [r3, #24]
    c2ce:	b2db      	uxtb	r3, r3
    c2d0:	001a      	movs	r2, r3
    c2d2:	2302      	movs	r3, #2
    c2d4:	4013      	ands	r3, r2
    c2d6:	1e5a      	subs	r2, r3, #1
    c2d8:	4193      	sbcs	r3, r2
    c2da:	b2db      	uxtb	r3, r3
}
    c2dc:	0018      	movs	r0, r3
    c2de:	46bd      	mov	sp, r7
    c2e0:	b004      	add	sp, #16
    c2e2:	bd80      	pop	{r7, pc}

0000c2e4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    c2e4:	b580      	push	{r7, lr}
    c2e6:	b084      	sub	sp, #16
    c2e8:	af00      	add	r7, sp, #0
    c2ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c2ec:	687b      	ldr	r3, [r7, #4]
    c2ee:	681b      	ldr	r3, [r3, #0]
    c2f0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c2f2:	68fb      	ldr	r3, [r7, #12]
    c2f4:	7e1b      	ldrb	r3, [r3, #24]
    c2f6:	b2db      	uxtb	r3, r3
    c2f8:	001a      	movs	r2, r3
    c2fa:	2301      	movs	r3, #1
    c2fc:	4013      	ands	r3, r2
    c2fe:	1e5a      	subs	r2, r3, #1
    c300:	4193      	sbcs	r3, r2
    c302:	b2db      	uxtb	r3, r3
}
    c304:	0018      	movs	r0, r3
    c306:	46bd      	mov	sp, r7
    c308:	b004      	add	sp, #16
    c30a:	bd80      	pop	{r7, pc}

0000c30c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    c30c:	b580      	push	{r7, lr}
    c30e:	b084      	sub	sp, #16
    c310:	af00      	add	r7, sp, #0
    c312:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c314:	687b      	ldr	r3, [r7, #4]
    c316:	681b      	ldr	r3, [r3, #0]
    c318:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c31a:	68fb      	ldr	r3, [r7, #12]
    c31c:	7e1b      	ldrb	r3, [r3, #24]
    c31e:	b2db      	uxtb	r3, r3
    c320:	001a      	movs	r2, r3
    c322:	2304      	movs	r3, #4
    c324:	4013      	ands	r3, r2
    c326:	1e5a      	subs	r2, r3, #1
    c328:	4193      	sbcs	r3, r2
    c32a:	b2db      	uxtb	r3, r3
}
    c32c:	0018      	movs	r0, r3
    c32e:	46bd      	mov	sp, r7
    c330:	b004      	add	sp, #16
    c332:	bd80      	pop	{r7, pc}

0000c334 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    c334:	b580      	push	{r7, lr}
    c336:	b084      	sub	sp, #16
    c338:	af00      	add	r7, sp, #0
    c33a:	6078      	str	r0, [r7, #4]
    c33c:	000a      	movs	r2, r1
    c33e:	1cbb      	adds	r3, r7, #2
    c340:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c342:	687b      	ldr	r3, [r7, #4]
    c344:	681b      	ldr	r3, [r3, #0]
    c346:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    c348:	687b      	ldr	r3, [r7, #4]
    c34a:	0018      	movs	r0, r3
    c34c:	4b0a      	ldr	r3, [pc, #40]	; (c378 <spi_write+0x44>)
    c34e:	4798      	blx	r3
    c350:	0003      	movs	r3, r0
    c352:	001a      	movs	r2, r3
    c354:	2301      	movs	r3, #1
    c356:	4053      	eors	r3, r2
    c358:	b2db      	uxtb	r3, r3
    c35a:	2b00      	cmp	r3, #0
    c35c:	d001      	beq.n	c362 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    c35e:	2305      	movs	r3, #5
    c360:	e006      	b.n	c370 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c362:	1cbb      	adds	r3, r7, #2
    c364:	881b      	ldrh	r3, [r3, #0]
    c366:	05db      	lsls	r3, r3, #23
    c368:	0dda      	lsrs	r2, r3, #23
    c36a:	68fb      	ldr	r3, [r7, #12]
    c36c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    c36e:	2300      	movs	r3, #0
}
    c370:	0018      	movs	r0, r3
    c372:	46bd      	mov	sp, r7
    c374:	b004      	add	sp, #16
    c376:	bd80      	pop	{r7, pc}
    c378:	0000c2e5 	.word	0x0000c2e5

0000c37c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    c37c:	b580      	push	{r7, lr}
    c37e:	b084      	sub	sp, #16
    c380:	af00      	add	r7, sp, #0
    c382:	6078      	str	r0, [r7, #4]
    c384:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c386:	687b      	ldr	r3, [r7, #4]
    c388:	681b      	ldr	r3, [r3, #0]
    c38a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    c38c:	687b      	ldr	r3, [r7, #4]
    c38e:	0018      	movs	r0, r3
    c390:	4b1b      	ldr	r3, [pc, #108]	; (c400 <spi_read+0x84>)
    c392:	4798      	blx	r3
    c394:	0003      	movs	r3, r0
    c396:	001a      	movs	r2, r3
    c398:	2301      	movs	r3, #1
    c39a:	4053      	eors	r3, r2
    c39c:	b2db      	uxtb	r3, r3
    c39e:	2b00      	cmp	r3, #0
    c3a0:	d001      	beq.n	c3a6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    c3a2:	2310      	movs	r3, #16
    c3a4:	e027      	b.n	c3f6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    c3a6:	230f      	movs	r3, #15
    c3a8:	18fb      	adds	r3, r7, r3
    c3aa:	2200      	movs	r2, #0
    c3ac:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c3ae:	68bb      	ldr	r3, [r7, #8]
    c3b0:	8b5b      	ldrh	r3, [r3, #26]
    c3b2:	b29b      	uxth	r3, r3
    c3b4:	001a      	movs	r2, r3
    c3b6:	2304      	movs	r3, #4
    c3b8:	4013      	ands	r3, r2
    c3ba:	d006      	beq.n	c3ca <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    c3bc:	230f      	movs	r3, #15
    c3be:	18fb      	adds	r3, r7, r3
    c3c0:	221e      	movs	r2, #30
    c3c2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c3c4:	68bb      	ldr	r3, [r7, #8]
    c3c6:	2204      	movs	r2, #4
    c3c8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c3ca:	687b      	ldr	r3, [r7, #4]
    c3cc:	799b      	ldrb	r3, [r3, #6]
    c3ce:	2b01      	cmp	r3, #1
    c3d0:	d108      	bne.n	c3e4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c3d2:	68bb      	ldr	r3, [r7, #8]
    c3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c3d6:	b29b      	uxth	r3, r3
    c3d8:	05db      	lsls	r3, r3, #23
    c3da:	0ddb      	lsrs	r3, r3, #23
    c3dc:	b29a      	uxth	r2, r3
    c3de:	683b      	ldr	r3, [r7, #0]
    c3e0:	801a      	strh	r2, [r3, #0]
    c3e2:	e005      	b.n	c3f0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c3e4:	68bb      	ldr	r3, [r7, #8]
    c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c3e8:	b2db      	uxtb	r3, r3
    c3ea:	b29a      	uxth	r2, r3
    c3ec:	683b      	ldr	r3, [r7, #0]
    c3ee:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    c3f0:	230f      	movs	r3, #15
    c3f2:	18fb      	adds	r3, r7, r3
    c3f4:	781b      	ldrb	r3, [r3, #0]
}
    c3f6:	0018      	movs	r0, r3
    c3f8:	46bd      	mov	sp, r7
    c3fa:	b004      	add	sp, #16
    c3fc:	bd80      	pop	{r7, pc}
    c3fe:	46c0      	nop			; (mov r8, r8)
    c400:	0000c30d 	.word	0x0000c30d

0000c404 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    c404:	b580      	push	{r7, lr}
    c406:	b086      	sub	sp, #24
    c408:	af00      	add	r7, sp, #0
    c40a:	60f8      	str	r0, [r7, #12]
    c40c:	60b9      	str	r1, [r7, #8]
    c40e:	1dbb      	adds	r3, r7, #6
    c410:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
    c412:	2313      	movs	r3, #19
    c414:	18fb      	adds	r3, r7, r3
    c416:	22ff      	movs	r2, #255	; 0xff
    c418:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    c41a:	2317      	movs	r3, #23
    c41c:	18fb      	adds	r3, r7, r3
    c41e:	2200      	movs	r2, #0
    c420:	701a      	strb	r2, [r3, #0]
    c422:	2316      	movs	r3, #22
    c424:	18fb      	adds	r3, r7, r3
    c426:	2200      	movs	r2, #0
    c428:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    c42a:	2314      	movs	r3, #20
    c42c:	18fb      	adds	r3, r7, r3
    c42e:	2200      	movs	r2, #0
    c430:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    c432:	2310      	movs	r3, #16
    c434:	18fb      	adds	r3, r7, r3
    c436:	2200      	movs	r2, #0
    c438:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    c43a:	68bb      	ldr	r3, [r7, #8]
    c43c:	2b00      	cmp	r3, #0
    c43e:	d102      	bne.n	c446 <spi_rw+0x42>
    c440:	68fb      	ldr	r3, [r7, #12]
    c442:	2b00      	cmp	r3, #0
    c444:	d003      	beq.n	c44e <spi_rw+0x4a>
    c446:	1dbb      	adds	r3, r7, #6
    c448:	881b      	ldrh	r3, [r3, #0]
    c44a:	2b00      	cmp	r3, #0
    c44c:	d102      	bne.n	c454 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    c44e:	230f      	movs	r3, #15
    c450:	425b      	negs	r3, r3
    c452:	e07e      	b.n	c552 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    c454:	68fb      	ldr	r3, [r7, #12]
    c456:	2b00      	cmp	r3, #0
    c458:	d106      	bne.n	c468 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    c45a:	2313      	movs	r3, #19
    c45c:	18fb      	adds	r3, r7, r3
    c45e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    c460:	2317      	movs	r3, #23
    c462:	18fb      	adds	r3, r7, r3
    c464:	2201      	movs	r2, #1
    c466:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    c468:	68bb      	ldr	r3, [r7, #8]
    c46a:	2b00      	cmp	r3, #0
    c46c:	d106      	bne.n	c47c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    c46e:	2313      	movs	r3, #19
    c470:	18fb      	adds	r3, r7, r3
    c472:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    c474:	2316      	movs	r3, #22
    c476:	18fb      	adds	r3, r7, r3
    c478:	2201      	movs	r2, #1
    c47a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    c47c:	4937      	ldr	r1, [pc, #220]	; (c55c <spi_rw+0x158>)
    c47e:	4b38      	ldr	r3, [pc, #224]	; (c560 <spi_rw+0x15c>)
    c480:	2201      	movs	r2, #1
    c482:	0018      	movs	r0, r3
    c484:	4b37      	ldr	r3, [pc, #220]	; (c564 <spi_rw+0x160>)
    c486:	4798      	blx	r3

	while (u16Sz) {
    c488:	e04c      	b.n	c524 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    c48a:	68fb      	ldr	r3, [r7, #12]
    c48c:	781a      	ldrb	r2, [r3, #0]
    c48e:	2314      	movs	r3, #20
    c490:	18fb      	adds	r3, r7, r3
    c492:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    c494:	46c0      	nop			; (mov r8, r8)
    c496:	4b32      	ldr	r3, [pc, #200]	; (c560 <spi_rw+0x15c>)
    c498:	0018      	movs	r0, r3
    c49a:	4b33      	ldr	r3, [pc, #204]	; (c568 <spi_rw+0x164>)
    c49c:	4798      	blx	r3
    c49e:	0003      	movs	r3, r0
    c4a0:	001a      	movs	r2, r3
    c4a2:	2301      	movs	r3, #1
    c4a4:	4053      	eors	r3, r2
    c4a6:	b2db      	uxtb	r3, r3
    c4a8:	2b00      	cmp	r3, #0
    c4aa:	d1f4      	bne.n	c496 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    c4ac:	46c0      	nop			; (mov r8, r8)
    c4ae:	2314      	movs	r3, #20
    c4b0:	18fb      	adds	r3, r7, r3
    c4b2:	881a      	ldrh	r2, [r3, #0]
    c4b4:	4b2a      	ldr	r3, [pc, #168]	; (c560 <spi_rw+0x15c>)
    c4b6:	0011      	movs	r1, r2
    c4b8:	0018      	movs	r0, r3
    c4ba:	4b2c      	ldr	r3, [pc, #176]	; (c56c <spi_rw+0x168>)
    c4bc:	4798      	blx	r3
    c4be:	1e03      	subs	r3, r0, #0
    c4c0:	d1f5      	bne.n	c4ae <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    c4c2:	46c0      	nop			; (mov r8, r8)
    c4c4:	4b26      	ldr	r3, [pc, #152]	; (c560 <spi_rw+0x15c>)
    c4c6:	0018      	movs	r0, r3
    c4c8:	4b29      	ldr	r3, [pc, #164]	; (c570 <spi_rw+0x16c>)
    c4ca:	4798      	blx	r3
    c4cc:	0003      	movs	r3, r0
    c4ce:	001a      	movs	r2, r3
    c4d0:	2301      	movs	r3, #1
    c4d2:	4053      	eors	r3, r2
    c4d4:	b2db      	uxtb	r3, r3
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d1f4      	bne.n	c4c4 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    c4da:	46c0      	nop			; (mov r8, r8)
    c4dc:	2310      	movs	r3, #16
    c4de:	18fa      	adds	r2, r7, r3
    c4e0:	4b1f      	ldr	r3, [pc, #124]	; (c560 <spi_rw+0x15c>)
    c4e2:	0011      	movs	r1, r2
    c4e4:	0018      	movs	r0, r3
    c4e6:	4b23      	ldr	r3, [pc, #140]	; (c574 <spi_rw+0x170>)
    c4e8:	4798      	blx	r3
    c4ea:	1e03      	subs	r3, r0, #0
    c4ec:	d1f6      	bne.n	c4dc <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    c4ee:	2310      	movs	r3, #16
    c4f0:	18fb      	adds	r3, r7, r3
    c4f2:	881b      	ldrh	r3, [r3, #0]
    c4f4:	b2da      	uxtb	r2, r3
    c4f6:	68bb      	ldr	r3, [r7, #8]
    c4f8:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    c4fa:	1dbb      	adds	r3, r7, #6
    c4fc:	881a      	ldrh	r2, [r3, #0]
    c4fe:	1dbb      	adds	r3, r7, #6
    c500:	3a01      	subs	r2, #1
    c502:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    c504:	2316      	movs	r3, #22
    c506:	18fb      	adds	r3, r7, r3
    c508:	781b      	ldrb	r3, [r3, #0]
    c50a:	2b00      	cmp	r3, #0
    c50c:	d102      	bne.n	c514 <spi_rw+0x110>
			pu8Miso++;
    c50e:	68bb      	ldr	r3, [r7, #8]
    c510:	3301      	adds	r3, #1
    c512:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    c514:	2317      	movs	r3, #23
    c516:	18fb      	adds	r3, r7, r3
    c518:	781b      	ldrb	r3, [r3, #0]
    c51a:	2b00      	cmp	r3, #0
    c51c:	d102      	bne.n	c524 <spi_rw+0x120>
			pu8Mosi++;
    c51e:	68fb      	ldr	r3, [r7, #12]
    c520:	3301      	adds	r3, #1
    c522:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    c524:	1dbb      	adds	r3, r7, #6
    c526:	881b      	ldrh	r3, [r3, #0]
    c528:	2b00      	cmp	r3, #0
    c52a:	d1ae      	bne.n	c48a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    c52c:	46c0      	nop			; (mov r8, r8)
    c52e:	4b0c      	ldr	r3, [pc, #48]	; (c560 <spi_rw+0x15c>)
    c530:	0018      	movs	r0, r3
    c532:	4b11      	ldr	r3, [pc, #68]	; (c578 <spi_rw+0x174>)
    c534:	4798      	blx	r3
    c536:	0003      	movs	r3, r0
    c538:	001a      	movs	r2, r3
    c53a:	2301      	movs	r3, #1
    c53c:	4053      	eors	r3, r2
    c53e:	b2db      	uxtb	r3, r3
    c540:	2b00      	cmp	r3, #0
    c542:	d1f4      	bne.n	c52e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    c544:	4905      	ldr	r1, [pc, #20]	; (c55c <spi_rw+0x158>)
    c546:	4b06      	ldr	r3, [pc, #24]	; (c560 <spi_rw+0x15c>)
    c548:	2200      	movs	r2, #0
    c54a:	0018      	movs	r0, r3
    c54c:	4b05      	ldr	r3, [pc, #20]	; (c564 <spi_rw+0x160>)
    c54e:	4798      	blx	r3

	return M2M_SUCCESS;
    c550:	2300      	movs	r3, #0
}
    c552:	0018      	movs	r0, r3
    c554:	46bd      	mov	sp, r7
    c556:	b006      	add	sp, #24
    c558:	bd80      	pop	{r7, pc}
    c55a:	46c0      	nop			; (mov r8, r8)
    c55c:	20005414 	.word	0x20005414
    c560:	20005418 	.word	0x20005418
    c564:	00013cb1 	.word	0x00013cb1
    c568:	0000c2e5 	.word	0x0000c2e5
    c56c:	0000c335 	.word	0x0000c335
    c570:	0000c30d 	.word	0x0000c30d
    c574:	0000c37d 	.word	0x0000c37d
    c578:	0000c2bd 	.word	0x0000c2bd

0000c57c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    c57c:	b580      	push	{r7, lr}
    c57e:	b092      	sub	sp, #72	; 0x48
    c580:	af00      	add	r7, sp, #0
    c582:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    c584:	2347      	movs	r3, #71	; 0x47
    c586:	18fb      	adds	r3, r7, r3
    c588:	2200      	movs	r2, #0
    c58a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    c58c:	2308      	movs	r3, #8
    c58e:	18fb      	adds	r3, r7, r3
    c590:	0018      	movs	r0, r3
    c592:	4b26      	ldr	r3, [pc, #152]	; (c62c <nm_bus_init+0xb0>)
    c594:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    c596:	2308      	movs	r3, #8
    c598:	18fb      	adds	r3, r7, r3
    c59a:	220e      	movs	r2, #14
    c59c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    c59e:	2308      	movs	r3, #8
    c5a0:	18fa      	adds	r2, r7, r3
    c5a2:	4b23      	ldr	r3, [pc, #140]	; (c630 <nm_bus_init+0xb4>)
    c5a4:	0011      	movs	r1, r2
    c5a6:	0018      	movs	r0, r3
    c5a8:	4b22      	ldr	r3, [pc, #136]	; (c634 <nm_bus_init+0xb8>)
    c5aa:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    c5ac:	230c      	movs	r3, #12
    c5ae:	18fb      	adds	r3, r7, r3
    c5b0:	0018      	movs	r0, r3
    c5b2:	4b21      	ldr	r3, [pc, #132]	; (c638 <nm_bus_init+0xbc>)
    c5b4:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    c5b6:	230c      	movs	r3, #12
    c5b8:	18fb      	adds	r3, r7, r3
    c5ba:	22c0      	movs	r2, #192	; 0xc0
    c5bc:	0392      	lsls	r2, r2, #14
    c5be:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    c5c0:	230c      	movs	r3, #12
    c5c2:	18fb      	adds	r3, r7, r3
    c5c4:	4a1d      	ldr	r2, [pc, #116]	; (c63c <nm_bus_init+0xc0>)
    c5c6:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    c5c8:	230c      	movs	r3, #12
    c5ca:	18fb      	adds	r3, r7, r3
    c5cc:	4a1c      	ldr	r2, [pc, #112]	; (c640 <nm_bus_init+0xc4>)
    c5ce:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    c5d0:	230c      	movs	r3, #12
    c5d2:	18fb      	adds	r3, r7, r3
    c5d4:	2201      	movs	r2, #1
    c5d6:	4252      	negs	r2, r2
    c5d8:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    c5da:	230c      	movs	r3, #12
    c5dc:	18fb      	adds	r3, r7, r3
    c5de:	4a19      	ldr	r2, [pc, #100]	; (c644 <nm_bus_init+0xc8>)
    c5e0:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    c5e2:	230c      	movs	r3, #12
    c5e4:	18fb      	adds	r3, r7, r3
    c5e6:	2200      	movs	r2, #0
    c5e8:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    c5ea:	230c      	movs	r3, #12
    c5ec:	18fb      	adds	r3, r7, r3
    c5ee:	4a16      	ldr	r2, [pc, #88]	; (c648 <nm_bus_init+0xcc>)
    c5f0:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    c5f2:	230c      	movs	r3, #12
    c5f4:	18fa      	adds	r2, r7, r3
    c5f6:	4915      	ldr	r1, [pc, #84]	; (c64c <nm_bus_init+0xd0>)
    c5f8:	4b15      	ldr	r3, [pc, #84]	; (c650 <nm_bus_init+0xd4>)
    c5fa:	0018      	movs	r0, r3
    c5fc:	4b15      	ldr	r3, [pc, #84]	; (c654 <nm_bus_init+0xd8>)
    c5fe:	4798      	blx	r3
    c600:	1e03      	subs	r3, r0, #0
    c602:	d002      	beq.n	c60a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    c604:	2306      	movs	r3, #6
    c606:	425b      	negs	r3, r3
    c608:	e00c      	b.n	c624 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    c60a:	4b11      	ldr	r3, [pc, #68]	; (c650 <nm_bus_init+0xd4>)
    c60c:	0018      	movs	r0, r3
    c60e:	4b12      	ldr	r3, [pc, #72]	; (c658 <nm_bus_init+0xdc>)
    c610:	4798      	blx	r3

	nm_bsp_reset();
    c612:	4b12      	ldr	r3, [pc, #72]	; (c65c <nm_bus_init+0xe0>)
    c614:	4798      	blx	r3
	nm_bsp_sleep(1);
    c616:	2001      	movs	r0, #1
    c618:	4b11      	ldr	r3, [pc, #68]	; (c660 <nm_bus_init+0xe4>)
    c61a:	4798      	blx	r3
#endif
	return result;
    c61c:	2347      	movs	r3, #71	; 0x47
    c61e:	18fb      	adds	r3, r7, r3
    c620:	781b      	ldrb	r3, [r3, #0]
    c622:	b25b      	sxtb	r3, r3
}
    c624:	0018      	movs	r0, r3
    c626:	46bd      	mov	sp, r7
    c628:	b012      	add	sp, #72	; 0x48
    c62a:	bd80      	pop	{r7, pc}
    c62c:	0000c189 	.word	0x0000c189
    c630:	20005414 	.word	0x20005414
    c634:	0000c1ad 	.word	0x0000c1ad
    c638:	0000c105 	.word	0x0000c105
    c63c:	000c0002 	.word	0x000c0002
    c640:	000d0002 	.word	0x000d0002
    c644:	000f0002 	.word	0x000f0002
    c648:	00124f80 	.word	0x00124f80
    c64c:	42001000 	.word	0x42001000
    c650:	20005418 	.word	0x20005418
    c654:	000139ed 	.word	0x000139ed
    c658:	0000c211 	.word	0x0000c211
    c65c:	0000be81 	.word	0x0000be81
    c660:	0000bec1 	.word	0x0000bec1

0000c664 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    c664:	b590      	push	{r4, r7, lr}
    c666:	b085      	sub	sp, #20
    c668:	af00      	add	r7, sp, #0
    c66a:	0002      	movs	r2, r0
    c66c:	6039      	str	r1, [r7, #0]
    c66e:	1dfb      	adds	r3, r7, #7
    c670:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    c672:	230f      	movs	r3, #15
    c674:	18fb      	adds	r3, r7, r3
    c676:	2200      	movs	r2, #0
    c678:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    c67a:	1dfb      	adds	r3, r7, #7
    c67c:	781b      	ldrb	r3, [r3, #0]
    c67e:	2b03      	cmp	r3, #3
    c680:	d10f      	bne.n	c6a2 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    c682:	683b      	ldr	r3, [r7, #0]
    c684:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    c686:	68bb      	ldr	r3, [r7, #8]
    c688:	6818      	ldr	r0, [r3, #0]
    c68a:	68bb      	ldr	r3, [r7, #8]
    c68c:	6859      	ldr	r1, [r3, #4]
    c68e:	68bb      	ldr	r3, [r7, #8]
    c690:	891b      	ldrh	r3, [r3, #8]
    c692:	220f      	movs	r2, #15
    c694:	18bc      	adds	r4, r7, r2
    c696:	001a      	movs	r2, r3
    c698:	4b10      	ldr	r3, [pc, #64]	; (c6dc <nm_bus_ioctl+0x78>)
    c69a:	4798      	blx	r3
    c69c:	0003      	movs	r3, r0
    c69e:	7023      	strb	r3, [r4, #0]
		}
		break;
    c6a0:	e013      	b.n	c6ca <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    c6a2:	230f      	movs	r3, #15
    c6a4:	18fb      	adds	r3, r7, r3
    c6a6:	22ff      	movs	r2, #255	; 0xff
    c6a8:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    c6aa:	2383      	movs	r3, #131	; 0x83
    c6ac:	005a      	lsls	r2, r3, #1
    c6ae:	490c      	ldr	r1, [pc, #48]	; (c6e0 <nm_bus_ioctl+0x7c>)
    c6b0:	4b0c      	ldr	r3, [pc, #48]	; (c6e4 <nm_bus_ioctl+0x80>)
    c6b2:	0018      	movs	r0, r3
    c6b4:	4b0c      	ldr	r3, [pc, #48]	; (c6e8 <nm_bus_ioctl+0x84>)
    c6b6:	4798      	blx	r3
    c6b8:	4b0c      	ldr	r3, [pc, #48]	; (c6ec <nm_bus_ioctl+0x88>)
    c6ba:	0018      	movs	r0, r3
    c6bc:	4b0a      	ldr	r3, [pc, #40]	; (c6e8 <nm_bus_ioctl+0x84>)
    c6be:	4798      	blx	r3
    c6c0:	4b0b      	ldr	r3, [pc, #44]	; (c6f0 <nm_bus_ioctl+0x8c>)
    c6c2:	0018      	movs	r0, r3
    c6c4:	4b08      	ldr	r3, [pc, #32]	; (c6e8 <nm_bus_ioctl+0x84>)
    c6c6:	4798      	blx	r3
			break;
    c6c8:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    c6ca:	230f      	movs	r3, #15
    c6cc:	18fb      	adds	r3, r7, r3
    c6ce:	781b      	ldrb	r3, [r3, #0]
    c6d0:	b25b      	sxtb	r3, r3
}
    c6d2:	0018      	movs	r0, r3
    c6d4:	46bd      	mov	sp, r7
    c6d6:	b005      	add	sp, #20
    c6d8:	bd90      	pop	{r4, r7, pc}
    c6da:	46c0      	nop			; (mov r8, r8)
    c6dc:	0000c405 	.word	0x0000c405
    c6e0:	0002371c 	.word	0x0002371c
    c6e4:	000236f0 	.word	0x000236f0
    c6e8:	00009a6d 	.word	0x00009a6d
    c6ec:	00023704 	.word	0x00023704
    c6f0:	00023718 	.word	0x00023718

0000c6f4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    c6f4:	b580      	push	{r7, lr}
    c6f6:	b082      	sub	sp, #8
    c6f8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    c6fa:	1dfb      	adds	r3, r7, #7
    c6fc:	2200      	movs	r2, #0
    c6fe:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    c700:	1d3b      	adds	r3, r7, #4
    c702:	0018      	movs	r0, r3
    c704:	4b13      	ldr	r3, [pc, #76]	; (c754 <nm_bus_deinit+0x60>)
    c706:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    c708:	1d3b      	adds	r3, r7, #4
    c70a:	2200      	movs	r2, #0
    c70c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    c70e:	1d3b      	adds	r3, r7, #4
    c710:	2200      	movs	r2, #0
    c712:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    c714:	4b10      	ldr	r3, [pc, #64]	; (c758 <nm_bus_deinit+0x64>)
    c716:	0018      	movs	r0, r3
    c718:	4b10      	ldr	r3, [pc, #64]	; (c75c <nm_bus_deinit+0x68>)
    c71a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    c71c:	1d3b      	adds	r3, r7, #4
    c71e:	0019      	movs	r1, r3
    c720:	200c      	movs	r0, #12
    c722:	4b0f      	ldr	r3, [pc, #60]	; (c760 <nm_bus_deinit+0x6c>)
    c724:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    c726:	1d3b      	adds	r3, r7, #4
    c728:	0019      	movs	r1, r3
    c72a:	200f      	movs	r0, #15
    c72c:	4b0c      	ldr	r3, [pc, #48]	; (c760 <nm_bus_deinit+0x6c>)
    c72e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    c730:	1d3b      	adds	r3, r7, #4
    c732:	0019      	movs	r1, r3
    c734:	200d      	movs	r0, #13
    c736:	4b0a      	ldr	r3, [pc, #40]	; (c760 <nm_bus_deinit+0x6c>)
    c738:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    c73a:	1d3b      	adds	r3, r7, #4
    c73c:	0019      	movs	r1, r3
    c73e:	200e      	movs	r0, #14
    c740:	4b07      	ldr	r3, [pc, #28]	; (c760 <nm_bus_deinit+0x6c>)
    c742:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    c744:	1dfb      	adds	r3, r7, #7
    c746:	781b      	ldrb	r3, [r3, #0]
    c748:	b25b      	sxtb	r3, r3
}
    c74a:	0018      	movs	r0, r3
    c74c:	46bd      	mov	sp, r7
    c74e:	b002      	add	sp, #8
    c750:	bd80      	pop	{r7, pc}
    c752:	46c0      	nop			; (mov r8, r8)
    c754:	0000c06d 	.word	0x0000c06d
    c758:	20005418 	.word	0x20005418
    c75c:	0000c261 	.word	0x0000c261
    c760:	0001256d 	.word	0x0001256d

0000c764 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    c764:	b580      	push	{r7, lr}
    c766:	b084      	sub	sp, #16
    c768:	af00      	add	r7, sp, #0
    c76a:	60f8      	str	r0, [r7, #12]
    c76c:	60b9      	str	r1, [r7, #8]
    c76e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    c770:	687b      	ldr	r3, [r7, #4]
    c772:	2b00      	cmp	r3, #0
    c774:	d010      	beq.n	c798 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    c776:	68bb      	ldr	r3, [r7, #8]
    c778:	781a      	ldrb	r2, [r3, #0]
    c77a:	68fb      	ldr	r3, [r7, #12]
    c77c:	701a      	strb	r2, [r3, #0]
		pDst++;
    c77e:	68fb      	ldr	r3, [r7, #12]
    c780:	3301      	adds	r3, #1
    c782:	60fb      	str	r3, [r7, #12]
		pSrc++;
    c784:	68bb      	ldr	r3, [r7, #8]
    c786:	3301      	adds	r3, #1
    c788:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    c78a:	687b      	ldr	r3, [r7, #4]
    c78c:	3b01      	subs	r3, #1
    c78e:	607b      	str	r3, [r7, #4]
    c790:	687b      	ldr	r3, [r7, #4]
    c792:	2b00      	cmp	r3, #0
    c794:	d1ef      	bne.n	c776 <m2m_memcpy+0x12>
    c796:	e000      	b.n	c79a <m2m_memcpy+0x36>
	if(sz == 0) return;
    c798:	46c0      	nop			; (mov r8, r8)
}
    c79a:	46bd      	mov	sp, r7
    c79c:	b004      	add	sp, #16
    c79e:	bd80      	pop	{r7, pc}

0000c7a0 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    c7a0:	b580      	push	{r7, lr}
    c7a2:	b084      	sub	sp, #16
    c7a4:	af00      	add	r7, sp, #0
    c7a6:	60f8      	str	r0, [r7, #12]
    c7a8:	607a      	str	r2, [r7, #4]
    c7aa:	230b      	movs	r3, #11
    c7ac:	18fb      	adds	r3, r7, r3
    c7ae:	1c0a      	adds	r2, r1, #0
    c7b0:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    c7b2:	687b      	ldr	r3, [r7, #4]
    c7b4:	2b00      	cmp	r3, #0
    c7b6:	d00e      	beq.n	c7d6 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    c7b8:	68fb      	ldr	r3, [r7, #12]
    c7ba:	220b      	movs	r2, #11
    c7bc:	18ba      	adds	r2, r7, r2
    c7be:	7812      	ldrb	r2, [r2, #0]
    c7c0:	701a      	strb	r2, [r3, #0]
		pBuf++;
    c7c2:	68fb      	ldr	r3, [r7, #12]
    c7c4:	3301      	adds	r3, #1
    c7c6:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    c7c8:	687b      	ldr	r3, [r7, #4]
    c7ca:	3b01      	subs	r3, #1
    c7cc:	607b      	str	r3, [r7, #4]
    c7ce:	687b      	ldr	r3, [r7, #4]
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	d1f1      	bne.n	c7b8 <m2m_memset+0x18>
    c7d4:	e000      	b.n	c7d8 <m2m_memset+0x38>
	if(sz == 0) return;
    c7d6:	46c0      	nop			; (mov r8, r8)
}
    c7d8:	46bd      	mov	sp, r7
    c7da:	b004      	add	sp, #16
    c7dc:	bd80      	pop	{r7, pc}

0000c7de <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    c7de:	b580      	push	{r7, lr}
    c7e0:	b084      	sub	sp, #16
    c7e2:	af00      	add	r7, sp, #0
    c7e4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    c7e6:	230e      	movs	r3, #14
    c7e8:	18fb      	adds	r3, r7, r3
    c7ea:	2200      	movs	r2, #0
    c7ec:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    c7ee:	e009      	b.n	c804 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    c7f0:	230e      	movs	r3, #14
    c7f2:	18fb      	adds	r3, r7, r3
    c7f4:	881a      	ldrh	r2, [r3, #0]
    c7f6:	230e      	movs	r3, #14
    c7f8:	18fb      	adds	r3, r7, r3
    c7fa:	3201      	adds	r2, #1
    c7fc:	801a      	strh	r2, [r3, #0]
		pcStr++;
    c7fe:	687b      	ldr	r3, [r7, #4]
    c800:	3301      	adds	r3, #1
    c802:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    c804:	687b      	ldr	r3, [r7, #4]
    c806:	781b      	ldrb	r3, [r3, #0]
    c808:	2b00      	cmp	r3, #0
    c80a:	d1f1      	bne.n	c7f0 <m2m_strlen+0x12>
	}
	return u16StrLen;
    c80c:	230e      	movs	r3, #14
    c80e:	18fb      	adds	r3, r7, r3
    c810:	881b      	ldrh	r3, [r3, #0]
}
    c812:	0018      	movs	r0, r3
    c814:	46bd      	mov	sp, r7
    c816:	b004      	add	sp, #16
    c818:	bd80      	pop	{r7, pc}
	...

0000c81c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
    c81c:	b580      	push	{r7, lr}
    c81e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    c820:	4b04      	ldr	r3, [pc, #16]	; (c834 <isr+0x18>)
    c822:	78db      	ldrb	r3, [r3, #3]
    c824:	b2db      	uxtb	r3, r3
    c826:	3301      	adds	r3, #1
    c828:	b2da      	uxtb	r2, r3
    c82a:	4b02      	ldr	r3, [pc, #8]	; (c834 <isr+0x18>)
    c82c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    c82e:	46c0      	nop			; (mov r8, r8)
    c830:	46bd      	mov	sp, r7
    c832:	bd80      	pop	{r7, pc}
    c834:	20005454 	.word	0x20005454

0000c838 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    c838:	b590      	push	{r4, r7, lr}
    c83a:	b083      	sub	sp, #12
    c83c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    c83e:	1dfb      	adds	r3, r7, #7
    c840:	2200      	movs	r2, #0
    c842:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    c844:	4b14      	ldr	r3, [pc, #80]	; (c898 <hif_set_rx_done+0x60>)
    c846:	2200      	movs	r2, #0
    c848:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    c84a:	2001      	movs	r0, #1
    c84c:	4b13      	ldr	r3, [pc, #76]	; (c89c <hif_set_rx_done+0x64>)
    c84e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    c850:	1dfc      	adds	r4, r7, #7
    c852:	003b      	movs	r3, r7
    c854:	4a12      	ldr	r2, [pc, #72]	; (c8a0 <hif_set_rx_done+0x68>)
    c856:	0019      	movs	r1, r3
    c858:	0010      	movs	r0, r2
    c85a:	4b12      	ldr	r3, [pc, #72]	; (c8a4 <hif_set_rx_done+0x6c>)
    c85c:	4798      	blx	r3
    c85e:	0003      	movs	r3, r0
    c860:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    c862:	1dfb      	adds	r3, r7, #7
    c864:	781b      	ldrb	r3, [r3, #0]
    c866:	b25b      	sxtb	r3, r3
    c868:	2b00      	cmp	r3, #0
    c86a:	d10d      	bne.n	c888 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    c86c:	683b      	ldr	r3, [r7, #0]
    c86e:	2202      	movs	r2, #2
    c870:	4313      	orrs	r3, r2
    c872:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    c874:	683b      	ldr	r3, [r7, #0]
    c876:	1dfc      	adds	r4, r7, #7
    c878:	4a09      	ldr	r2, [pc, #36]	; (c8a0 <hif_set_rx_done+0x68>)
    c87a:	0019      	movs	r1, r3
    c87c:	0010      	movs	r0, r2
    c87e:	4b0a      	ldr	r3, [pc, #40]	; (c8a8 <hif_set_rx_done+0x70>)
    c880:	4798      	blx	r3
    c882:	0003      	movs	r3, r0
    c884:	7023      	strb	r3, [r4, #0]
    c886:	e000      	b.n	c88a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    c888:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    c88a:	1dfb      	adds	r3, r7, #7
    c88c:	781b      	ldrb	r3, [r3, #0]
    c88e:	b25b      	sxtb	r3, r3

}
    c890:	0018      	movs	r0, r3
    c892:	46bd      	mov	sp, r7
    c894:	b003      	add	sp, #12
    c896:	bd90      	pop	{r4, r7, pc}
    c898:	20005454 	.word	0x20005454
    c89c:	0000bf55 	.word	0x0000bf55
    c8a0:	00001070 	.word	0x00001070
    c8a4:	0000e831 	.word	0x0000e831
    c8a8:	0000e855 	.word	0x0000e855

0000c8ac <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    c8ac:	b580      	push	{r7, lr}
    c8ae:	b082      	sub	sp, #8
    c8b0:	af00      	add	r7, sp, #0
    c8b2:	603a      	str	r2, [r7, #0]
    c8b4:	1dfb      	adds	r3, r7, #7
    c8b6:	1c02      	adds	r2, r0, #0
    c8b8:	701a      	strb	r2, [r3, #0]
    c8ba:	1d3b      	adds	r3, r7, #4
    c8bc:	1c0a      	adds	r2, r1, #0
    c8be:	801a      	strh	r2, [r3, #0]


}
    c8c0:	46c0      	nop			; (mov r8, r8)
    c8c2:	46bd      	mov	sp, r7
    c8c4:	b002      	add	sp, #8
    c8c6:	bd80      	pop	{r7, pc}

0000c8c8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    c8c8:	b590      	push	{r4, r7, lr}
    c8ca:	b083      	sub	sp, #12
    c8cc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    c8ce:	1dfb      	adds	r3, r7, #7
    c8d0:	2200      	movs	r2, #0
    c8d2:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    c8d4:	4b16      	ldr	r3, [pc, #88]	; (c930 <hif_chip_wake+0x68>)
    c8d6:	789b      	ldrb	r3, [r3, #2]
    c8d8:	b2db      	uxtb	r3, r3
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d003      	beq.n	c8e6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    c8de:	1dfb      	adds	r3, r7, #7
    c8e0:	781b      	ldrb	r3, [r3, #0]
    c8e2:	b25b      	sxtb	r3, r3
    c8e4:	e01f      	b.n	c926 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    c8e6:	4b12      	ldr	r3, [pc, #72]	; (c930 <hif_chip_wake+0x68>)
    c8e8:	785b      	ldrb	r3, [r3, #1]
    c8ea:	b2db      	uxtb	r3, r3
    c8ec:	2b00      	cmp	r3, #0
    c8ee:	d10e      	bne.n	c90e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    c8f0:	4b0f      	ldr	r3, [pc, #60]	; (c930 <hif_chip_wake+0x68>)
    c8f2:	781b      	ldrb	r3, [r3, #0]
    c8f4:	b2db      	uxtb	r3, r3
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	d009      	beq.n	c90e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    c8fa:	1dfc      	adds	r4, r7, #7
    c8fc:	4b0d      	ldr	r3, [pc, #52]	; (c934 <hif_chip_wake+0x6c>)
    c8fe:	4798      	blx	r3
    c900:	0003      	movs	r3, r0
    c902:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    c904:	1dfb      	adds	r3, r7, #7
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	b25b      	sxtb	r3, r3
    c90a:	2b00      	cmp	r3, #0
    c90c:	d107      	bne.n	c91e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    c90e:	4b08      	ldr	r3, [pc, #32]	; (c930 <hif_chip_wake+0x68>)
    c910:	785b      	ldrb	r3, [r3, #1]
    c912:	b2db      	uxtb	r3, r3
    c914:	3301      	adds	r3, #1
    c916:	b2da      	uxtb	r2, r3
    c918:	4b05      	ldr	r3, [pc, #20]	; (c930 <hif_chip_wake+0x68>)
    c91a:	705a      	strb	r2, [r3, #1]
    c91c:	e000      	b.n	c920 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    c91e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    c920:	1dfb      	adds	r3, r7, #7
    c922:	781b      	ldrb	r3, [r3, #0]
    c924:	b25b      	sxtb	r3, r3
}
    c926:	0018      	movs	r0, r3
    c928:	46bd      	mov	sp, r7
    c92a:	b003      	add	sp, #12
    c92c:	bd90      	pop	{r4, r7, pc}
    c92e:	46c0      	nop			; (mov r8, r8)
    c930:	20005454 	.word	0x20005454
    c934:	0000e301 	.word	0x0000e301

0000c938 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    c938:	b580      	push	{r7, lr}
    c93a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    c93c:	4b07      	ldr	r3, [pc, #28]	; (c95c <hif_chip_sleep_sc+0x24>)
    c93e:	785b      	ldrb	r3, [r3, #1]
    c940:	b2db      	uxtb	r3, r3
    c942:	2b00      	cmp	r3, #0
    c944:	d006      	beq.n	c954 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    c946:	4b05      	ldr	r3, [pc, #20]	; (c95c <hif_chip_sleep_sc+0x24>)
    c948:	785b      	ldrb	r3, [r3, #1]
    c94a:	b2db      	uxtb	r3, r3
    c94c:	3b01      	subs	r3, #1
    c94e:	b2da      	uxtb	r2, r3
    c950:	4b02      	ldr	r3, [pc, #8]	; (c95c <hif_chip_sleep_sc+0x24>)
    c952:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    c954:	2300      	movs	r3, #0
}
    c956:	0018      	movs	r0, r3
    c958:	46bd      	mov	sp, r7
    c95a:	bd80      	pop	{r7, pc}
    c95c:	20005454 	.word	0x20005454

0000c960 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    c960:	b590      	push	{r4, r7, lr}
    c962:	b083      	sub	sp, #12
    c964:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    c966:	1dfb      	adds	r3, r7, #7
    c968:	2200      	movs	r2, #0
    c96a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    c96c:	4b10      	ldr	r3, [pc, #64]	; (c9b0 <hif_chip_sleep+0x50>)
    c96e:	785b      	ldrb	r3, [r3, #1]
    c970:	b2db      	uxtb	r3, r3
    c972:	2b00      	cmp	r3, #0
    c974:	d006      	beq.n	c984 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    c976:	4b0e      	ldr	r3, [pc, #56]	; (c9b0 <hif_chip_sleep+0x50>)
    c978:	785b      	ldrb	r3, [r3, #1]
    c97a:	b2db      	uxtb	r3, r3
    c97c:	3b01      	subs	r3, #1
    c97e:	b2da      	uxtb	r2, r3
    c980:	4b0b      	ldr	r3, [pc, #44]	; (c9b0 <hif_chip_sleep+0x50>)
    c982:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    c984:	4b0a      	ldr	r3, [pc, #40]	; (c9b0 <hif_chip_sleep+0x50>)
    c986:	785b      	ldrb	r3, [r3, #1]
    c988:	b2db      	uxtb	r3, r3
    c98a:	2b00      	cmp	r3, #0
    c98c:	d109      	bne.n	c9a2 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    c98e:	4b08      	ldr	r3, [pc, #32]	; (c9b0 <hif_chip_sleep+0x50>)
    c990:	781b      	ldrb	r3, [r3, #0]
    c992:	b2db      	uxtb	r3, r3
    c994:	2b00      	cmp	r3, #0
    c996:	d004      	beq.n	c9a2 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    c998:	1dfc      	adds	r4, r7, #7
    c99a:	4b06      	ldr	r3, [pc, #24]	; (c9b4 <hif_chip_sleep+0x54>)
    c99c:	4798      	blx	r3
    c99e:	0003      	movs	r3, r0
    c9a0:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    c9a2:	1dfb      	adds	r3, r7, #7
    c9a4:	781b      	ldrb	r3, [r3, #0]
    c9a6:	b25b      	sxtb	r3, r3
}
    c9a8:	0018      	movs	r0, r3
    c9aa:	46bd      	mov	sp, r7
    c9ac:	b003      	add	sp, #12
    c9ae:	bd90      	pop	{r4, r7, pc}
    c9b0:	20005454 	.word	0x20005454
    c9b4:	0000e229 	.word	0x0000e229

0000c9b8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    c9b8:	b580      	push	{r7, lr}
    c9ba:	b082      	sub	sp, #8
    c9bc:	af00      	add	r7, sp, #0
    c9be:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    c9c0:	4b09      	ldr	r3, [pc, #36]	; (c9e8 <hif_init+0x30>)
    c9c2:	222c      	movs	r2, #44	; 0x2c
    c9c4:	2100      	movs	r1, #0
    c9c6:	0018      	movs	r0, r3
    c9c8:	4b08      	ldr	r3, [pc, #32]	; (c9ec <hif_init+0x34>)
    c9ca:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    c9cc:	4b08      	ldr	r3, [pc, #32]	; (c9f0 <hif_init+0x38>)
    c9ce:	0018      	movs	r0, r3
    c9d0:	4b08      	ldr	r3, [pc, #32]	; (c9f4 <hif_init+0x3c>)
    c9d2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    c9d4:	4b08      	ldr	r3, [pc, #32]	; (c9f8 <hif_init+0x40>)
    c9d6:	0019      	movs	r1, r3
    c9d8:	2003      	movs	r0, #3
    c9da:	4b08      	ldr	r3, [pc, #32]	; (c9fc <hif_init+0x44>)
    c9dc:	4798      	blx	r3
	return M2M_SUCCESS;
    c9de:	2300      	movs	r3, #0
}
    c9e0:	0018      	movs	r0, r3
    c9e2:	46bd      	mov	sp, r7
    c9e4:	b002      	add	sp, #8
    c9e6:	bd80      	pop	{r7, pc}
    c9e8:	20005454 	.word	0x20005454
    c9ec:	0000c7a1 	.word	0x0000c7a1
    c9f0:	0000c81d 	.word	0x0000c81d
    c9f4:	0000bedd 	.word	0x0000bedd
    c9f8:	0000c8ad 	.word	0x0000c8ad
    c9fc:	0000d49d 	.word	0x0000d49d

0000ca00 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    ca00:	b590      	push	{r4, r7, lr}
    ca02:	b089      	sub	sp, #36	; 0x24
    ca04:	af00      	add	r7, sp, #0
    ca06:	0004      	movs	r4, r0
    ca08:	0008      	movs	r0, r1
    ca0a:	603a      	str	r2, [r7, #0]
    ca0c:	0019      	movs	r1, r3
    ca0e:	1dfb      	adds	r3, r7, #7
    ca10:	1c22      	adds	r2, r4, #0
    ca12:	701a      	strb	r2, [r3, #0]
    ca14:	1dbb      	adds	r3, r7, #6
    ca16:	1c02      	adds	r2, r0, #0
    ca18:	701a      	strb	r2, [r3, #0]
    ca1a:	1d3b      	adds	r3, r7, #4
    ca1c:	1c0a      	adds	r2, r1, #0
    ca1e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    ca20:	231f      	movs	r3, #31
    ca22:	18fb      	adds	r3, r7, r3
    ca24:	22ff      	movs	r2, #255	; 0xff
    ca26:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    ca28:	1dbb      	adds	r3, r7, #6
    ca2a:	781b      	ldrb	r3, [r3, #0]
    ca2c:	227f      	movs	r2, #127	; 0x7f
    ca2e:	4013      	ands	r3, r2
    ca30:	b2da      	uxtb	r2, r3
    ca32:	2318      	movs	r3, #24
    ca34:	18fb      	adds	r3, r7, r3
    ca36:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    ca38:	2318      	movs	r3, #24
    ca3a:	18fb      	adds	r3, r7, r3
    ca3c:	1dfa      	adds	r2, r7, #7
    ca3e:	7812      	ldrb	r2, [r2, #0]
    ca40:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    ca42:	2318      	movs	r3, #24
    ca44:	18fb      	adds	r3, r7, r3
    ca46:	2208      	movs	r2, #8
    ca48:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    ca4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ca4c:	2b00      	cmp	r3, #0
    ca4e:	d011      	beq.n	ca74 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    ca50:	2318      	movs	r3, #24
    ca52:	18fb      	adds	r3, r7, r3
    ca54:	885b      	ldrh	r3, [r3, #2]
    ca56:	b29a      	uxth	r2, r3
    ca58:	2338      	movs	r3, #56	; 0x38
    ca5a:	18f9      	adds	r1, r7, r3
    ca5c:	2334      	movs	r3, #52	; 0x34
    ca5e:	18fb      	adds	r3, r7, r3
    ca60:	8809      	ldrh	r1, [r1, #0]
    ca62:	881b      	ldrh	r3, [r3, #0]
    ca64:	18cb      	adds	r3, r1, r3
    ca66:	b29b      	uxth	r3, r3
    ca68:	18d3      	adds	r3, r2, r3
    ca6a:	b29a      	uxth	r2, r3
    ca6c:	2318      	movs	r3, #24
    ca6e:	18fb      	adds	r3, r7, r3
    ca70:	805a      	strh	r2, [r3, #2]
    ca72:	e00a      	b.n	ca8a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    ca74:	2318      	movs	r3, #24
    ca76:	18fb      	adds	r3, r7, r3
    ca78:	885b      	ldrh	r3, [r3, #2]
    ca7a:	b29a      	uxth	r2, r3
    ca7c:	1d3b      	adds	r3, r7, #4
    ca7e:	881b      	ldrh	r3, [r3, #0]
    ca80:	18d3      	adds	r3, r2, r3
    ca82:	b29a      	uxth	r2, r3
    ca84:	2318      	movs	r3, #24
    ca86:	18fb      	adds	r3, r7, r3
    ca88:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    ca8a:	231f      	movs	r3, #31
    ca8c:	18fc      	adds	r4, r7, r3
    ca8e:	4bb2      	ldr	r3, [pc, #712]	; (cd58 <hif_send+0x358>)
    ca90:	4798      	blx	r3
    ca92:	0003      	movs	r3, r0
    ca94:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    ca96:	231f      	movs	r3, #31
    ca98:	18fb      	adds	r3, r7, r3
    ca9a:	781b      	ldrb	r3, [r3, #0]
    ca9c:	b25b      	sxtb	r3, r3
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d000      	beq.n	caa4 <hif_send+0xa4>
    caa2:	e129      	b.n	ccf8 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
    caa4:	2300      	movs	r3, #0
    caa6:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    caa8:	230e      	movs	r3, #14
    caaa:	18fb      	adds	r3, r7, r3
    caac:	2200      	movs	r2, #0
    caae:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    cab0:	2300      	movs	r3, #0
    cab2:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    cab4:	1dfb      	adds	r3, r7, #7
    cab6:	781a      	ldrb	r2, [r3, #0]
    cab8:	697b      	ldr	r3, [r7, #20]
    caba:	4313      	orrs	r3, r2
    cabc:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    cabe:	1dbb      	adds	r3, r7, #6
    cac0:	781b      	ldrb	r3, [r3, #0]
    cac2:	021a      	lsls	r2, r3, #8
    cac4:	697b      	ldr	r3, [r7, #20]
    cac6:	4313      	orrs	r3, r2
    cac8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    caca:	2318      	movs	r3, #24
    cacc:	18fb      	adds	r3, r7, r3
    cace:	885b      	ldrh	r3, [r3, #2]
    cad0:	b29b      	uxth	r3, r3
    cad2:	041a      	lsls	r2, r3, #16
    cad4:	697b      	ldr	r3, [r7, #20]
    cad6:	4313      	orrs	r3, r2
    cad8:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    cada:	697b      	ldr	r3, [r7, #20]
    cadc:	221f      	movs	r2, #31
    cade:	18bc      	adds	r4, r7, r2
    cae0:	4a9e      	ldr	r2, [pc, #632]	; (cd5c <hif_send+0x35c>)
    cae2:	0019      	movs	r1, r3
    cae4:	0010      	movs	r0, r2
    cae6:	4b9e      	ldr	r3, [pc, #632]	; (cd60 <hif_send+0x360>)
    cae8:	4798      	blx	r3
    caea:	0003      	movs	r3, r0
    caec:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    caee:	231f      	movs	r3, #31
    caf0:	18fb      	adds	r3, r7, r3
    caf2:	781b      	ldrb	r3, [r3, #0]
    caf4:	b25b      	sxtb	r3, r3
    caf6:	2b00      	cmp	r3, #0
    caf8:	d000      	beq.n	cafc <hif_send+0xfc>
    cafa:	e119      	b.n	cd30 <hif_send+0x330>

		reg = 0UL;
    cafc:	2300      	movs	r3, #0
    cafe:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    cb00:	697b      	ldr	r3, [r7, #20]
    cb02:	2202      	movs	r2, #2
    cb04:	4313      	orrs	r3, r2
    cb06:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    cb08:	697b      	ldr	r3, [r7, #20]
    cb0a:	221f      	movs	r2, #31
    cb0c:	18bc      	adds	r4, r7, r2
    cb0e:	4a95      	ldr	r2, [pc, #596]	; (cd64 <hif_send+0x364>)
    cb10:	0019      	movs	r1, r3
    cb12:	0010      	movs	r0, r2
    cb14:	4b92      	ldr	r3, [pc, #584]	; (cd60 <hif_send+0x360>)
    cb16:	4798      	blx	r3
    cb18:	0003      	movs	r3, r0
    cb1a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    cb1c:	231f      	movs	r3, #31
    cb1e:	18fb      	adds	r3, r7, r3
    cb20:	781b      	ldrb	r3, [r3, #0]
    cb22:	b25b      	sxtb	r3, r3
    cb24:	2b00      	cmp	r3, #0
    cb26:	d000      	beq.n	cb2a <hif_send+0x12a>
    cb28:	e104      	b.n	cd34 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    cb2a:	2300      	movs	r3, #0
    cb2c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    cb2e:	230e      	movs	r3, #14
    cb30:	18fb      	adds	r3, r7, r3
    cb32:	2200      	movs	r2, #0
    cb34:	801a      	strh	r2, [r3, #0]
    cb36:	e050      	b.n	cbda <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    cb38:	231f      	movs	r3, #31
    cb3a:	18fc      	adds	r4, r7, r3
    cb3c:	2314      	movs	r3, #20
    cb3e:	18fb      	adds	r3, r7, r3
    cb40:	4a88      	ldr	r2, [pc, #544]	; (cd64 <hif_send+0x364>)
    cb42:	0019      	movs	r1, r3
    cb44:	0010      	movs	r0, r2
    cb46:	4b88      	ldr	r3, [pc, #544]	; (cd68 <hif_send+0x368>)
    cb48:	4798      	blx	r3
    cb4a:	0003      	movs	r3, r0
    cb4c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    cb4e:	231f      	movs	r3, #31
    cb50:	18fb      	adds	r3, r7, r3
    cb52:	781b      	ldrb	r3, [r3, #0]
    cb54:	b25b      	sxtb	r3, r3
    cb56:	2b00      	cmp	r3, #0
    cb58:	d147      	bne.n	cbea <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    cb5a:	230e      	movs	r3, #14
    cb5c:	18fb      	adds	r3, r7, r3
    cb5e:	881b      	ldrh	r3, [r3, #0]
    cb60:	b29a      	uxth	r2, r3
    cb62:	23f4      	movs	r3, #244	; 0xf4
    cb64:	33ff      	adds	r3, #255	; 0xff
    cb66:	429a      	cmp	r2, r3
    cb68:	d916      	bls.n	cb98 <hif_send+0x198>
				if(cnt < 501) {
    cb6a:	230e      	movs	r3, #14
    cb6c:	18fb      	adds	r3, r7, r3
    cb6e:	881b      	ldrh	r3, [r3, #0]
    cb70:	b29a      	uxth	r2, r3
    cb72:	23fa      	movs	r3, #250	; 0xfa
    cb74:	005b      	lsls	r3, r3, #1
    cb76:	429a      	cmp	r2, r3
    cb78:	d80b      	bhi.n	cb92 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
    cb7a:	4b7c      	ldr	r3, [pc, #496]	; (cd6c <hif_send+0x36c>)
    cb7c:	0018      	movs	r0, r3
    cb7e:	4b7c      	ldr	r3, [pc, #496]	; (cd70 <hif_send+0x370>)
    cb80:	4798      	blx	r3
    cb82:	4b7c      	ldr	r3, [pc, #496]	; (cd74 <hif_send+0x374>)
    cb84:	0018      	movs	r0, r3
    cb86:	4b7a      	ldr	r3, [pc, #488]	; (cd70 <hif_send+0x370>)
    cb88:	4798      	blx	r3
    cb8a:	4b7b      	ldr	r3, [pc, #492]	; (cd78 <hif_send+0x378>)
    cb8c:	0018      	movs	r0, r3
    cb8e:	4b78      	ldr	r3, [pc, #480]	; (cd70 <hif_send+0x370>)
    cb90:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    cb92:	2001      	movs	r0, #1
    cb94:	4b79      	ldr	r3, [pc, #484]	; (cd7c <hif_send+0x37c>)
    cb96:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    cb98:	697b      	ldr	r3, [r7, #20]
    cb9a:	2202      	movs	r2, #2
    cb9c:	4013      	ands	r3, r2
    cb9e:	d113      	bne.n	cbc8 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    cba0:	231f      	movs	r3, #31
    cba2:	18fc      	adds	r4, r7, r3
    cba4:	2310      	movs	r3, #16
    cba6:	18fb      	adds	r3, r7, r3
    cba8:	4a75      	ldr	r2, [pc, #468]	; (cd80 <hif_send+0x380>)
    cbaa:	0019      	movs	r1, r3
    cbac:	0010      	movs	r0, r2
    cbae:	4b6e      	ldr	r3, [pc, #440]	; (cd68 <hif_send+0x368>)
    cbb0:	4798      	blx	r3
    cbb2:	0003      	movs	r3, r0
    cbb4:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    cbb6:	231f      	movs	r3, #31
    cbb8:	18fb      	adds	r3, r7, r3
    cbba:	781b      	ldrb	r3, [r3, #0]
    cbbc:	b25b      	sxtb	r3, r3
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	d015      	beq.n	cbee <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    cbc2:	2300      	movs	r3, #0
    cbc4:	613b      	str	r3, [r7, #16]
					goto ERR1;
    cbc6:	e0bc      	b.n	cd42 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
    cbc8:	230e      	movs	r3, #14
    cbca:	18fb      	adds	r3, r7, r3
    cbcc:	881b      	ldrh	r3, [r3, #0]
    cbce:	b29b      	uxth	r3, r3
    cbd0:	3301      	adds	r3, #1
    cbd2:	b29a      	uxth	r2, r3
    cbd4:	230e      	movs	r3, #14
    cbd6:	18fb      	adds	r3, r7, r3
    cbd8:	801a      	strh	r2, [r3, #0]
    cbda:	230e      	movs	r3, #14
    cbdc:	18fb      	adds	r3, r7, r3
    cbde:	881b      	ldrh	r3, [r3, #0]
    cbe0:	b29b      	uxth	r3, r3
    cbe2:	4a68      	ldr	r2, [pc, #416]	; (cd84 <hif_send+0x384>)
    cbe4:	4293      	cmp	r3, r2
    cbe6:	d9a7      	bls.n	cb38 <hif_send+0x138>
    cbe8:	e002      	b.n	cbf0 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
    cbea:	46c0      	nop			; (mov r8, r8)
    cbec:	e000      	b.n	cbf0 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
    cbee:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    cbf0:	693b      	ldr	r3, [r7, #16]
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	d100      	bne.n	cbf8 <hif_send+0x1f8>
    cbf6:	e074      	b.n	cce2 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    cbf8:	693b      	ldr	r3, [r7, #16]
    cbfa:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    cbfc:	2318      	movs	r3, #24
    cbfe:	18fb      	adds	r3, r7, r3
    cc00:	885b      	ldrh	r3, [r3, #2]
    cc02:	b29a      	uxth	r2, r3
    cc04:	2318      	movs	r3, #24
    cc06:	18fb      	adds	r3, r7, r3
    cc08:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    cc0a:	68bb      	ldr	r3, [r7, #8]
    cc0c:	221f      	movs	r2, #31
    cc0e:	18bc      	adds	r4, r7, r2
    cc10:	2218      	movs	r2, #24
    cc12:	18b9      	adds	r1, r7, r2
    cc14:	2208      	movs	r2, #8
    cc16:	0018      	movs	r0, r3
    cc18:	4b5b      	ldr	r3, [pc, #364]	; (cd88 <hif_send+0x388>)
    cc1a:	4798      	blx	r3
    cc1c:	0003      	movs	r3, r0
    cc1e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    cc20:	231f      	movs	r3, #31
    cc22:	18fb      	adds	r3, r7, r3
    cc24:	781b      	ldrb	r3, [r3, #0]
    cc26:	b25b      	sxtb	r3, r3
    cc28:	2b00      	cmp	r3, #0
    cc2a:	d000      	beq.n	cc2e <hif_send+0x22e>
    cc2c:	e084      	b.n	cd38 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    cc2e:	68bb      	ldr	r3, [r7, #8]
    cc30:	3308      	adds	r3, #8
    cc32:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    cc34:	683b      	ldr	r3, [r7, #0]
    cc36:	2b00      	cmp	r3, #0
    cc38:	d016      	beq.n	cc68 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    cc3a:	68b8      	ldr	r0, [r7, #8]
    cc3c:	1d3b      	adds	r3, r7, #4
    cc3e:	881a      	ldrh	r2, [r3, #0]
    cc40:	231f      	movs	r3, #31
    cc42:	18fc      	adds	r4, r7, r3
    cc44:	683b      	ldr	r3, [r7, #0]
    cc46:	0019      	movs	r1, r3
    cc48:	4b4f      	ldr	r3, [pc, #316]	; (cd88 <hif_send+0x388>)
    cc4a:	4798      	blx	r3
    cc4c:	0003      	movs	r3, r0
    cc4e:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    cc50:	231f      	movs	r3, #31
    cc52:	18fb      	adds	r3, r7, r3
    cc54:	781b      	ldrb	r3, [r3, #0]
    cc56:	b25b      	sxtb	r3, r3
    cc58:	2b00      	cmp	r3, #0
    cc5a:	d000      	beq.n	cc5e <hif_send+0x25e>
    cc5c:	e06e      	b.n	cd3c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
    cc5e:	1d3b      	adds	r3, r7, #4
    cc60:	881a      	ldrh	r2, [r3, #0]
    cc62:	68bb      	ldr	r3, [r7, #8]
    cc64:	18d3      	adds	r3, r2, r3
    cc66:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cc6a:	2b00      	cmp	r3, #0
    cc6c:	d021      	beq.n	ccb2 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    cc6e:	2338      	movs	r3, #56	; 0x38
    cc70:	18fb      	adds	r3, r7, r3
    cc72:	881a      	ldrh	r2, [r3, #0]
    cc74:	1d3b      	adds	r3, r7, #4
    cc76:	881b      	ldrh	r3, [r3, #0]
    cc78:	1ad3      	subs	r3, r2, r3
    cc7a:	001a      	movs	r2, r3
    cc7c:	68bb      	ldr	r3, [r7, #8]
    cc7e:	18d3      	adds	r3, r2, r3
    cc80:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    cc82:	68b8      	ldr	r0, [r7, #8]
    cc84:	2334      	movs	r3, #52	; 0x34
    cc86:	18fb      	adds	r3, r7, r3
    cc88:	881a      	ldrh	r2, [r3, #0]
    cc8a:	231f      	movs	r3, #31
    cc8c:	18fc      	adds	r4, r7, r3
    cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cc90:	0019      	movs	r1, r3
    cc92:	4b3d      	ldr	r3, [pc, #244]	; (cd88 <hif_send+0x388>)
    cc94:	4798      	blx	r3
    cc96:	0003      	movs	r3, r0
    cc98:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    cc9a:	231f      	movs	r3, #31
    cc9c:	18fb      	adds	r3, r7, r3
    cc9e:	781b      	ldrb	r3, [r3, #0]
    cca0:	b25b      	sxtb	r3, r3
    cca2:	2b00      	cmp	r3, #0
    cca4:	d14c      	bne.n	cd40 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
    cca6:	2334      	movs	r3, #52	; 0x34
    cca8:	18fb      	adds	r3, r7, r3
    ccaa:	881a      	ldrh	r2, [r3, #0]
    ccac:	68bb      	ldr	r3, [r7, #8]
    ccae:	18d3      	adds	r3, r2, r3
    ccb0:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    ccb2:	693b      	ldr	r3, [r7, #16]
    ccb4:	009b      	lsls	r3, r3, #2
    ccb6:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    ccb8:	697b      	ldr	r3, [r7, #20]
    ccba:	2202      	movs	r2, #2
    ccbc:	4313      	orrs	r3, r2
    ccbe:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    ccc0:	697b      	ldr	r3, [r7, #20]
    ccc2:	221f      	movs	r2, #31
    ccc4:	18bc      	adds	r4, r7, r2
    ccc6:	4a31      	ldr	r2, [pc, #196]	; (cd8c <hif_send+0x38c>)
    ccc8:	0019      	movs	r1, r3
    ccca:	0010      	movs	r0, r2
    cccc:	4b24      	ldr	r3, [pc, #144]	; (cd60 <hif_send+0x360>)
    ccce:	4798      	blx	r3
    ccd0:	0003      	movs	r3, r0
    ccd2:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    ccd4:	231f      	movs	r3, #31
    ccd6:	18fb      	adds	r3, r7, r3
    ccd8:	781b      	ldrb	r3, [r3, #0]
    ccda:	b25b      	sxtb	r3, r3
    ccdc:	2b00      	cmp	r3, #0
    ccde:	d01c      	beq.n	cd1a <hif_send+0x31a>
    cce0:	e02f      	b.n	cd42 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
    cce2:	231f      	movs	r3, #31
    cce4:	18fc      	adds	r4, r7, r3
    cce6:	4b2a      	ldr	r3, [pc, #168]	; (cd90 <hif_send+0x390>)
    cce8:	4798      	blx	r3
    ccea:	0003      	movs	r3, r0
    ccec:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    ccee:	231f      	movs	r3, #31
    ccf0:	18fb      	adds	r3, r7, r3
    ccf2:	22fd      	movs	r2, #253	; 0xfd
    ccf4:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    ccf6:	e026      	b.n	cd46 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    ccf8:	2398      	movs	r3, #152	; 0x98
    ccfa:	33ff      	adds	r3, #255	; 0xff
    ccfc:	001a      	movs	r2, r3
    ccfe:	4925      	ldr	r1, [pc, #148]	; (cd94 <hif_send+0x394>)
    cd00:	4b25      	ldr	r3, [pc, #148]	; (cd98 <hif_send+0x398>)
    cd02:	0018      	movs	r0, r3
    cd04:	4b1a      	ldr	r3, [pc, #104]	; (cd70 <hif_send+0x370>)
    cd06:	4798      	blx	r3
    cd08:	4b24      	ldr	r3, [pc, #144]	; (cd9c <hif_send+0x39c>)
    cd0a:	0018      	movs	r0, r3
    cd0c:	4b18      	ldr	r3, [pc, #96]	; (cd70 <hif_send+0x370>)
    cd0e:	4798      	blx	r3
    cd10:	4b19      	ldr	r3, [pc, #100]	; (cd78 <hif_send+0x378>)
    cd12:	0018      	movs	r0, r3
    cd14:	4b16      	ldr	r3, [pc, #88]	; (cd70 <hif_send+0x370>)
    cd16:	4798      	blx	r3
		goto ERR2;
    cd18:	e015      	b.n	cd46 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    cd1a:	231f      	movs	r3, #31
    cd1c:	18fc      	adds	r4, r7, r3
    cd1e:	4b1c      	ldr	r3, [pc, #112]	; (cd90 <hif_send+0x390>)
    cd20:	4798      	blx	r3
    cd22:	0003      	movs	r3, r0
    cd24:	7023      	strb	r3, [r4, #0]
	return ret;
    cd26:	231f      	movs	r3, #31
    cd28:	18fb      	adds	r3, r7, r3
    cd2a:	781b      	ldrb	r3, [r3, #0]
    cd2c:	b25b      	sxtb	r3, r3
    cd2e:	e00e      	b.n	cd4e <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
    cd30:	46c0      	nop			; (mov r8, r8)
    cd32:	e006      	b.n	cd42 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
    cd34:	46c0      	nop			; (mov r8, r8)
    cd36:	e004      	b.n	cd42 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
    cd38:	46c0      	nop			; (mov r8, r8)
    cd3a:	e002      	b.n	cd42 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
    cd3c:	46c0      	nop			; (mov r8, r8)
    cd3e:	e000      	b.n	cd42 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
    cd40:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    cd42:	4b17      	ldr	r3, [pc, #92]	; (cda0 <hif_send+0x3a0>)
    cd44:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    cd46:	231f      	movs	r3, #31
    cd48:	18fb      	adds	r3, r7, r3
    cd4a:	781b      	ldrb	r3, [r3, #0]
    cd4c:	b25b      	sxtb	r3, r3
}
    cd4e:	0018      	movs	r0, r3
    cd50:	46bd      	mov	sp, r7
    cd52:	b009      	add	sp, #36	; 0x24
    cd54:	bd90      	pop	{r4, r7, pc}
    cd56:	46c0      	nop			; (mov r8, r8)
    cd58:	0000c8c9 	.word	0x0000c8c9
    cd5c:	0000108c 	.word	0x0000108c
    cd60:	0000e855 	.word	0x0000e855
    cd64:	00001078 	.word	0x00001078
    cd68:	0000e831 	.word	0x0000e831
    cd6c:	0002372c 	.word	0x0002372c
    cd70:	00009a6d 	.word	0x00009a6d
    cd74:	00023738 	.word	0x00023738
    cd78:	0002374c 	.word	0x0002374c
    cd7c:	0000bec1 	.word	0x0000bec1
    cd80:	00150400 	.word	0x00150400
    cd84:	000003e7 	.word	0x000003e7
    cd88:	0000e99d 	.word	0x0000e99d
    cd8c:	0000106c 	.word	0x0000106c
    cd90:	0000c961 	.word	0x0000c961
    cd94:	00023a54 	.word	0x00023a54
    cd98:	00023750 	.word	0x00023750
    cd9c:	00023764 	.word	0x00023764
    cda0:	0000c939 	.word	0x0000c939

0000cda4 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    cda4:	b590      	push	{r4, r7, lr}
    cda6:	b087      	sub	sp, #28
    cda8:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    cdaa:	230f      	movs	r3, #15
    cdac:	18fb      	adds	r3, r7, r3
    cdae:	2200      	movs	r2, #0
    cdb0:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    cdb2:	230f      	movs	r3, #15
    cdb4:	18fc      	adds	r4, r7, r3
    cdb6:	2308      	movs	r3, #8
    cdb8:	18fb      	adds	r3, r7, r3
    cdba:	4adc      	ldr	r2, [pc, #880]	; (d12c <hif_isr+0x388>)
    cdbc:	0019      	movs	r1, r3
    cdbe:	0010      	movs	r0, r2
    cdc0:	4bdb      	ldr	r3, [pc, #876]	; (d130 <hif_isr+0x38c>)
    cdc2:	4798      	blx	r3
    cdc4:	0003      	movs	r3, r0
    cdc6:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    cdc8:	230f      	movs	r3, #15
    cdca:	18fb      	adds	r3, r7, r3
    cdcc:	781b      	ldrb	r3, [r3, #0]
    cdce:	b25b      	sxtb	r3, r3
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d000      	beq.n	cdd6 <hif_isr+0x32>
    cdd4:	e21e      	b.n	d214 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    cdd6:	68bb      	ldr	r3, [r7, #8]
    cdd8:	2201      	movs	r2, #1
    cdda:	4013      	ands	r3, r2
    cddc:	d100      	bne.n	cde0 <hif_isr+0x3c>
    cdde:	e204      	b.n	d1ea <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    cde0:	2000      	movs	r0, #0
    cde2:	4bd4      	ldr	r3, [pc, #848]	; (d134 <hif_isr+0x390>)
    cde4:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    cde6:	68bb      	ldr	r3, [r7, #8]
    cde8:	2201      	movs	r2, #1
    cdea:	4393      	bics	r3, r2
    cdec:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    cdee:	68bb      	ldr	r3, [r7, #8]
    cdf0:	220f      	movs	r2, #15
    cdf2:	18bc      	adds	r4, r7, r2
    cdf4:	4acd      	ldr	r2, [pc, #820]	; (d12c <hif_isr+0x388>)
    cdf6:	0019      	movs	r1, r3
    cdf8:	0010      	movs	r0, r2
    cdfa:	4bcf      	ldr	r3, [pc, #828]	; (d138 <hif_isr+0x394>)
    cdfc:	4798      	blx	r3
    cdfe:	0003      	movs	r3, r0
    ce00:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    ce02:	230f      	movs	r3, #15
    ce04:	18fb      	adds	r3, r7, r3
    ce06:	781b      	ldrb	r3, [r3, #0]
    ce08:	b25b      	sxtb	r3, r3
    ce0a:	2b00      	cmp	r3, #0
    ce0c:	d000      	beq.n	ce10 <hif_isr+0x6c>
    ce0e:	e210      	b.n	d232 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
    ce10:	4bca      	ldr	r3, [pc, #808]	; (d13c <hif_isr+0x398>)
    ce12:	2201      	movs	r2, #1
    ce14:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    ce16:	68bb      	ldr	r3, [r7, #8]
    ce18:	089b      	lsrs	r3, r3, #2
    ce1a:	b29a      	uxth	r2, r3
    ce1c:	230c      	movs	r3, #12
    ce1e:	18fb      	adds	r3, r7, r3
    ce20:	0512      	lsls	r2, r2, #20
    ce22:	0d12      	lsrs	r2, r2, #20
    ce24:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    ce26:	230c      	movs	r3, #12
    ce28:	18fb      	adds	r3, r7, r3
    ce2a:	881b      	ldrh	r3, [r3, #0]
    ce2c:	2b00      	cmp	r3, #0
    ce2e:	d100      	bne.n	ce32 <hif_isr+0x8e>
    ce30:	e1c8      	b.n	d1c4 <hif_isr+0x420>
				uint32 address = 0;
    ce32:	2300      	movs	r3, #0
    ce34:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    ce36:	230f      	movs	r3, #15
    ce38:	18fc      	adds	r4, r7, r3
    ce3a:	003b      	movs	r3, r7
    ce3c:	4ac0      	ldr	r2, [pc, #768]	; (d140 <hif_isr+0x39c>)
    ce3e:	0019      	movs	r1, r3
    ce40:	0010      	movs	r0, r2
    ce42:	4bbb      	ldr	r3, [pc, #748]	; (d130 <hif_isr+0x38c>)
    ce44:	4798      	blx	r3
    ce46:	0003      	movs	r3, r0
    ce48:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    ce4a:	230f      	movs	r3, #15
    ce4c:	18fb      	adds	r3, r7, r3
    ce4e:	781b      	ldrb	r3, [r3, #0]
    ce50:	b25b      	sxtb	r3, r3
    ce52:	2b00      	cmp	r3, #0
    ce54:	d012      	beq.n	ce7c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    ce56:	23e4      	movs	r3, #228	; 0xe4
    ce58:	005a      	lsls	r2, r3, #1
    ce5a:	49ba      	ldr	r1, [pc, #744]	; (d144 <hif_isr+0x3a0>)
    ce5c:	4bba      	ldr	r3, [pc, #744]	; (d148 <hif_isr+0x3a4>)
    ce5e:	0018      	movs	r0, r3
    ce60:	4bba      	ldr	r3, [pc, #744]	; (d14c <hif_isr+0x3a8>)
    ce62:	4798      	blx	r3
    ce64:	4bba      	ldr	r3, [pc, #744]	; (d150 <hif_isr+0x3ac>)
    ce66:	0018      	movs	r0, r3
    ce68:	4bb8      	ldr	r3, [pc, #736]	; (d14c <hif_isr+0x3a8>)
    ce6a:	4798      	blx	r3
    ce6c:	4bb9      	ldr	r3, [pc, #740]	; (d154 <hif_isr+0x3b0>)
    ce6e:	0018      	movs	r0, r3
    ce70:	4bb6      	ldr	r3, [pc, #728]	; (d14c <hif_isr+0x3a8>)
    ce72:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    ce74:	2001      	movs	r0, #1
    ce76:	4baf      	ldr	r3, [pc, #700]	; (d134 <hif_isr+0x390>)
    ce78:	4798      	blx	r3
					goto ERR1;
    ce7a:	e1db      	b.n	d234 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
    ce7c:	683a      	ldr	r2, [r7, #0]
    ce7e:	4baf      	ldr	r3, [pc, #700]	; (d13c <hif_isr+0x398>)
    ce80:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    ce82:	230c      	movs	r3, #12
    ce84:	18fb      	adds	r3, r7, r3
    ce86:	881a      	ldrh	r2, [r3, #0]
    ce88:	4bac      	ldr	r3, [pc, #688]	; (d13c <hif_isr+0x398>)
    ce8a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    ce8c:	683b      	ldr	r3, [r7, #0]
    ce8e:	220f      	movs	r2, #15
    ce90:	18bc      	adds	r4, r7, r2
    ce92:	1d39      	adds	r1, r7, #4
    ce94:	2204      	movs	r2, #4
    ce96:	0018      	movs	r0, r3
    ce98:	4baf      	ldr	r3, [pc, #700]	; (d158 <hif_isr+0x3b4>)
    ce9a:	4798      	blx	r3
    ce9c:	0003      	movs	r3, r0
    ce9e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    cea0:	1d3b      	adds	r3, r7, #4
    cea2:	885b      	ldrh	r3, [r3, #2]
    cea4:	b29a      	uxth	r2, r3
    cea6:	1d3b      	adds	r3, r7, #4
    cea8:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    ceaa:	230f      	movs	r3, #15
    ceac:	18fb      	adds	r3, r7, r3
    ceae:	781b      	ldrb	r3, [r3, #0]
    ceb0:	b25b      	sxtb	r3, r3
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	d012      	beq.n	cedc <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    ceb6:	23e9      	movs	r3, #233	; 0xe9
    ceb8:	005a      	lsls	r2, r3, #1
    ceba:	49a2      	ldr	r1, [pc, #648]	; (d144 <hif_isr+0x3a0>)
    cebc:	4ba2      	ldr	r3, [pc, #648]	; (d148 <hif_isr+0x3a4>)
    cebe:	0018      	movs	r0, r3
    cec0:	4ba2      	ldr	r3, [pc, #648]	; (d14c <hif_isr+0x3a8>)
    cec2:	4798      	blx	r3
    cec4:	4ba5      	ldr	r3, [pc, #660]	; (d15c <hif_isr+0x3b8>)
    cec6:	0018      	movs	r0, r3
    cec8:	4ba0      	ldr	r3, [pc, #640]	; (d14c <hif_isr+0x3a8>)
    ceca:	4798      	blx	r3
    cecc:	4ba1      	ldr	r3, [pc, #644]	; (d154 <hif_isr+0x3b0>)
    cece:	0018      	movs	r0, r3
    ced0:	4b9e      	ldr	r3, [pc, #632]	; (d14c <hif_isr+0x3a8>)
    ced2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    ced4:	2001      	movs	r0, #1
    ced6:	4b97      	ldr	r3, [pc, #604]	; (d134 <hif_isr+0x390>)
    ced8:	4798      	blx	r3
					goto ERR1;
    ceda:	e1ab      	b.n	d234 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
    cedc:	1d3b      	adds	r3, r7, #4
    cede:	885b      	ldrh	r3, [r3, #2]
    cee0:	b29b      	uxth	r3, r3
    cee2:	220c      	movs	r2, #12
    cee4:	18ba      	adds	r2, r7, r2
    cee6:	8812      	ldrh	r2, [r2, #0]
    cee8:	429a      	cmp	r2, r3
    ceea:	d02f      	beq.n	cf4c <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
    ceec:	230c      	movs	r3, #12
    ceee:	18fb      	adds	r3, r7, r3
    cef0:	881b      	ldrh	r3, [r3, #0]
    cef2:	1d3a      	adds	r2, r7, #4
    cef4:	8852      	ldrh	r2, [r2, #2]
    cef6:	b292      	uxth	r2, r2
    cef8:	1a9b      	subs	r3, r3, r2
    cefa:	2b04      	cmp	r3, #4
    cefc:	dd26      	ble.n	cf4c <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    cefe:	23dc      	movs	r3, #220	; 0xdc
    cf00:	33ff      	adds	r3, #255	; 0xff
    cf02:	001a      	movs	r2, r3
    cf04:	498f      	ldr	r1, [pc, #572]	; (d144 <hif_isr+0x3a0>)
    cf06:	4b90      	ldr	r3, [pc, #576]	; (d148 <hif_isr+0x3a4>)
    cf08:	0018      	movs	r0, r3
    cf0a:	4b90      	ldr	r3, [pc, #576]	; (d14c <hif_isr+0x3a8>)
    cf0c:	4798      	blx	r3
    cf0e:	230c      	movs	r3, #12
    cf10:	18fb      	adds	r3, r7, r3
    cf12:	8819      	ldrh	r1, [r3, #0]
    cf14:	1d3b      	adds	r3, r7, #4
    cf16:	885b      	ldrh	r3, [r3, #2]
    cf18:	b29b      	uxth	r3, r3
    cf1a:	001a      	movs	r2, r3
    cf1c:	1d3b      	adds	r3, r7, #4
    cf1e:	781b      	ldrb	r3, [r3, #0]
    cf20:	b2db      	uxtb	r3, r3
    cf22:	001c      	movs	r4, r3
    cf24:	1d3b      	adds	r3, r7, #4
    cf26:	785b      	ldrb	r3, [r3, #1]
    cf28:	b2db      	uxtb	r3, r3
    cf2a:	488d      	ldr	r0, [pc, #564]	; (d160 <hif_isr+0x3bc>)
    cf2c:	9300      	str	r3, [sp, #0]
    cf2e:	0023      	movs	r3, r4
    cf30:	4c86      	ldr	r4, [pc, #536]	; (d14c <hif_isr+0x3a8>)
    cf32:	47a0      	blx	r4
    cf34:	4b87      	ldr	r3, [pc, #540]	; (d154 <hif_isr+0x3b0>)
    cf36:	0018      	movs	r0, r3
    cf38:	4b84      	ldr	r3, [pc, #528]	; (d14c <hif_isr+0x3a8>)
    cf3a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    cf3c:	2001      	movs	r0, #1
    cf3e:	4b7d      	ldr	r3, [pc, #500]	; (d134 <hif_isr+0x390>)
    cf40:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    cf42:	230f      	movs	r3, #15
    cf44:	18fb      	adds	r3, r7, r3
    cf46:	22fa      	movs	r2, #250	; 0xfa
    cf48:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    cf4a:	e173      	b.n	d234 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    cf4c:	1d3b      	adds	r3, r7, #4
    cf4e:	781b      	ldrb	r3, [r3, #0]
    cf50:	b2db      	uxtb	r3, r3
    cf52:	2b01      	cmp	r3, #1
    cf54:	d122      	bne.n	cf9c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
    cf56:	4b79      	ldr	r3, [pc, #484]	; (d13c <hif_isr+0x398>)
    cf58:	691b      	ldr	r3, [r3, #16]
    cf5a:	2b00      	cmp	r3, #0
    cf5c:	d00d      	beq.n	cf7a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cf5e:	4b77      	ldr	r3, [pc, #476]	; (d13c <hif_isr+0x398>)
    cf60:	691b      	ldr	r3, [r3, #16]
    cf62:	1d3a      	adds	r2, r7, #4
    cf64:	7852      	ldrb	r2, [r2, #1]
    cf66:	b2d0      	uxtb	r0, r2
    cf68:	1d3a      	adds	r2, r7, #4
    cf6a:	8852      	ldrh	r2, [r2, #2]
    cf6c:	b292      	uxth	r2, r2
    cf6e:	3a08      	subs	r2, #8
    cf70:	b291      	uxth	r1, r2
    cf72:	683a      	ldr	r2, [r7, #0]
    cf74:	3208      	adds	r2, #8
    cf76:	4798      	blx	r3
    cf78:	e102      	b.n	d180 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
    cf7a:	23e8      	movs	r3, #232	; 0xe8
    cf7c:	33ff      	adds	r3, #255	; 0xff
    cf7e:	001a      	movs	r2, r3
    cf80:	4970      	ldr	r1, [pc, #448]	; (d144 <hif_isr+0x3a0>)
    cf82:	4b71      	ldr	r3, [pc, #452]	; (d148 <hif_isr+0x3a4>)
    cf84:	0018      	movs	r0, r3
    cf86:	4b71      	ldr	r3, [pc, #452]	; (d14c <hif_isr+0x3a8>)
    cf88:	4798      	blx	r3
    cf8a:	4b76      	ldr	r3, [pc, #472]	; (d164 <hif_isr+0x3c0>)
    cf8c:	0018      	movs	r0, r3
    cf8e:	4b6f      	ldr	r3, [pc, #444]	; (d14c <hif_isr+0x3a8>)
    cf90:	4798      	blx	r3
    cf92:	4b70      	ldr	r3, [pc, #448]	; (d154 <hif_isr+0x3b0>)
    cf94:	0018      	movs	r0, r3
    cf96:	4b6d      	ldr	r3, [pc, #436]	; (d14c <hif_isr+0x3a8>)
    cf98:	4798      	blx	r3
    cf9a:	e0f1      	b.n	d180 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    cf9c:	1d3b      	adds	r3, r7, #4
    cf9e:	781b      	ldrb	r3, [r3, #0]
    cfa0:	b2db      	uxtb	r3, r3
    cfa2:	2b02      	cmp	r3, #2
    cfa4:	d122      	bne.n	cfec <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
    cfa6:	4b65      	ldr	r3, [pc, #404]	; (d13c <hif_isr+0x398>)
    cfa8:	695b      	ldr	r3, [r3, #20]
    cfaa:	2b00      	cmp	r3, #0
    cfac:	d00d      	beq.n	cfca <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cfae:	4b63      	ldr	r3, [pc, #396]	; (d13c <hif_isr+0x398>)
    cfb0:	695b      	ldr	r3, [r3, #20]
    cfb2:	1d3a      	adds	r2, r7, #4
    cfb4:	7852      	ldrb	r2, [r2, #1]
    cfb6:	b2d0      	uxtb	r0, r2
    cfb8:	1d3a      	adds	r2, r7, #4
    cfba:	8852      	ldrh	r2, [r2, #2]
    cfbc:	b292      	uxth	r2, r2
    cfbe:	3a08      	subs	r2, #8
    cfc0:	b291      	uxth	r1, r2
    cfc2:	683a      	ldr	r2, [r7, #0]
    cfc4:	3208      	adds	r2, #8
    cfc6:	4798      	blx	r3
    cfc8:	e0da      	b.n	d180 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
    cfca:	23f0      	movs	r3, #240	; 0xf0
    cfcc:	33ff      	adds	r3, #255	; 0xff
    cfce:	001a      	movs	r2, r3
    cfd0:	495c      	ldr	r1, [pc, #368]	; (d144 <hif_isr+0x3a0>)
    cfd2:	4b5d      	ldr	r3, [pc, #372]	; (d148 <hif_isr+0x3a4>)
    cfd4:	0018      	movs	r0, r3
    cfd6:	4b5d      	ldr	r3, [pc, #372]	; (d14c <hif_isr+0x3a8>)
    cfd8:	4798      	blx	r3
    cfda:	4b63      	ldr	r3, [pc, #396]	; (d168 <hif_isr+0x3c4>)
    cfdc:	0018      	movs	r0, r3
    cfde:	4b5b      	ldr	r3, [pc, #364]	; (d14c <hif_isr+0x3a8>)
    cfe0:	4798      	blx	r3
    cfe2:	4b5c      	ldr	r3, [pc, #368]	; (d154 <hif_isr+0x3b0>)
    cfe4:	0018      	movs	r0, r3
    cfe6:	4b59      	ldr	r3, [pc, #356]	; (d14c <hif_isr+0x3a8>)
    cfe8:	4798      	blx	r3
    cfea:	e0c9      	b.n	d180 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    cfec:	1d3b      	adds	r3, r7, #4
    cfee:	781b      	ldrb	r3, [r3, #0]
    cff0:	b2db      	uxtb	r3, r3
    cff2:	2b04      	cmp	r3, #4
    cff4:	d122      	bne.n	d03c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
    cff6:	4b51      	ldr	r3, [pc, #324]	; (d13c <hif_isr+0x398>)
    cff8:	699b      	ldr	r3, [r3, #24]
    cffa:	2b00      	cmp	r3, #0
    cffc:	d00d      	beq.n	d01a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    cffe:	4b4f      	ldr	r3, [pc, #316]	; (d13c <hif_isr+0x398>)
    d000:	699b      	ldr	r3, [r3, #24]
    d002:	1d3a      	adds	r2, r7, #4
    d004:	7852      	ldrb	r2, [r2, #1]
    d006:	b2d0      	uxtb	r0, r2
    d008:	1d3a      	adds	r2, r7, #4
    d00a:	8852      	ldrh	r2, [r2, #2]
    d00c:	b292      	uxth	r2, r2
    d00e:	3a08      	subs	r2, #8
    d010:	b291      	uxth	r1, r2
    d012:	683a      	ldr	r2, [r7, #0]
    d014:	3208      	adds	r2, #8
    d016:	4798      	blx	r3
    d018:	e0b2      	b.n	d180 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
    d01a:	23f8      	movs	r3, #248	; 0xf8
    d01c:	33ff      	adds	r3, #255	; 0xff
    d01e:	001a      	movs	r2, r3
    d020:	4948      	ldr	r1, [pc, #288]	; (d144 <hif_isr+0x3a0>)
    d022:	4b49      	ldr	r3, [pc, #292]	; (d148 <hif_isr+0x3a4>)
    d024:	0018      	movs	r0, r3
    d026:	4b49      	ldr	r3, [pc, #292]	; (d14c <hif_isr+0x3a8>)
    d028:	4798      	blx	r3
    d02a:	4b50      	ldr	r3, [pc, #320]	; (d16c <hif_isr+0x3c8>)
    d02c:	0018      	movs	r0, r3
    d02e:	4b47      	ldr	r3, [pc, #284]	; (d14c <hif_isr+0x3a8>)
    d030:	4798      	blx	r3
    d032:	4b48      	ldr	r3, [pc, #288]	; (d154 <hif_isr+0x3b0>)
    d034:	0018      	movs	r0, r3
    d036:	4b45      	ldr	r3, [pc, #276]	; (d14c <hif_isr+0x3a8>)
    d038:	4798      	blx	r3
    d03a:	e0a1      	b.n	d180 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    d03c:	1d3b      	adds	r3, r7, #4
    d03e:	781b      	ldrb	r3, [r3, #0]
    d040:	b2db      	uxtb	r3, r3
    d042:	2b06      	cmp	r3, #6
    d044:	d121      	bne.n	d08a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
    d046:	4b3d      	ldr	r3, [pc, #244]	; (d13c <hif_isr+0x398>)
    d048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d04a:	2b00      	cmp	r3, #0
    d04c:	d00d      	beq.n	d06a <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d04e:	4b3b      	ldr	r3, [pc, #236]	; (d13c <hif_isr+0x398>)
    d050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d052:	1d3a      	adds	r2, r7, #4
    d054:	7852      	ldrb	r2, [r2, #1]
    d056:	b2d0      	uxtb	r0, r2
    d058:	1d3a      	adds	r2, r7, #4
    d05a:	8852      	ldrh	r2, [r2, #2]
    d05c:	b292      	uxth	r2, r2
    d05e:	3a08      	subs	r2, #8
    d060:	b291      	uxth	r1, r2
    d062:	683a      	ldr	r2, [r7, #0]
    d064:	3208      	adds	r2, #8
    d066:	4798      	blx	r3
    d068:	e08a      	b.n	d180 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
    d06a:	2380      	movs	r3, #128	; 0x80
    d06c:	009a      	lsls	r2, r3, #2
    d06e:	4935      	ldr	r1, [pc, #212]	; (d144 <hif_isr+0x3a0>)
    d070:	4b35      	ldr	r3, [pc, #212]	; (d148 <hif_isr+0x3a4>)
    d072:	0018      	movs	r0, r3
    d074:	4b35      	ldr	r3, [pc, #212]	; (d14c <hif_isr+0x3a8>)
    d076:	4798      	blx	r3
    d078:	4b3d      	ldr	r3, [pc, #244]	; (d170 <hif_isr+0x3cc>)
    d07a:	0018      	movs	r0, r3
    d07c:	4b33      	ldr	r3, [pc, #204]	; (d14c <hif_isr+0x3a8>)
    d07e:	4798      	blx	r3
    d080:	4b34      	ldr	r3, [pc, #208]	; (d154 <hif_isr+0x3b0>)
    d082:	0018      	movs	r0, r3
    d084:	4b31      	ldr	r3, [pc, #196]	; (d14c <hif_isr+0x3a8>)
    d086:	4798      	blx	r3
    d088:	e07a      	b.n	d180 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    d08a:	1d3b      	adds	r3, r7, #4
    d08c:	781b      	ldrb	r3, [r3, #0]
    d08e:	b2db      	uxtb	r3, r3
    d090:	2b07      	cmp	r3, #7
    d092:	d120      	bne.n	d0d6 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
    d094:	4b29      	ldr	r3, [pc, #164]	; (d13c <hif_isr+0x398>)
    d096:	69db      	ldr	r3, [r3, #28]
    d098:	2b00      	cmp	r3, #0
    d09a:	d00d      	beq.n	d0b8 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d09c:	4b27      	ldr	r3, [pc, #156]	; (d13c <hif_isr+0x398>)
    d09e:	69db      	ldr	r3, [r3, #28]
    d0a0:	1d3a      	adds	r2, r7, #4
    d0a2:	7852      	ldrb	r2, [r2, #1]
    d0a4:	b2d0      	uxtb	r0, r2
    d0a6:	1d3a      	adds	r2, r7, #4
    d0a8:	8852      	ldrh	r2, [r2, #2]
    d0aa:	b292      	uxth	r2, r2
    d0ac:	3a08      	subs	r2, #8
    d0ae:	b291      	uxth	r1, r2
    d0b0:	683a      	ldr	r2, [r7, #0]
    d0b2:	3208      	adds	r2, #8
    d0b4:	4798      	blx	r3
    d0b6:	e063      	b.n	d180 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
    d0b8:	4a2e      	ldr	r2, [pc, #184]	; (d174 <hif_isr+0x3d0>)
    d0ba:	4922      	ldr	r1, [pc, #136]	; (d144 <hif_isr+0x3a0>)
    d0bc:	4b22      	ldr	r3, [pc, #136]	; (d148 <hif_isr+0x3a4>)
    d0be:	0018      	movs	r0, r3
    d0c0:	4b22      	ldr	r3, [pc, #136]	; (d14c <hif_isr+0x3a8>)
    d0c2:	4798      	blx	r3
    d0c4:	4b2c      	ldr	r3, [pc, #176]	; (d178 <hif_isr+0x3d4>)
    d0c6:	0018      	movs	r0, r3
    d0c8:	4b20      	ldr	r3, [pc, #128]	; (d14c <hif_isr+0x3a8>)
    d0ca:	4798      	blx	r3
    d0cc:	4b21      	ldr	r3, [pc, #132]	; (d154 <hif_isr+0x3b0>)
    d0ce:	0018      	movs	r0, r3
    d0d0:	4b1e      	ldr	r3, [pc, #120]	; (d14c <hif_isr+0x3a8>)
    d0d2:	4798      	blx	r3
    d0d4:	e054      	b.n	d180 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    d0d6:	1d3b      	adds	r3, r7, #4
    d0d8:	781b      	ldrb	r3, [r3, #0]
    d0da:	b2db      	uxtb	r3, r3
    d0dc:	2b05      	cmp	r3, #5
    d0de:	d111      	bne.n	d104 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
    d0e0:	4b16      	ldr	r3, [pc, #88]	; (d13c <hif_isr+0x398>)
    d0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d04b      	beq.n	d180 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    d0e8:	4b14      	ldr	r3, [pc, #80]	; (d13c <hif_isr+0x398>)
    d0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0ec:	1d3a      	adds	r2, r7, #4
    d0ee:	7852      	ldrb	r2, [r2, #1]
    d0f0:	b2d0      	uxtb	r0, r2
    d0f2:	1d3a      	adds	r2, r7, #4
    d0f4:	8852      	ldrh	r2, [r2, #2]
    d0f6:	b292      	uxth	r2, r2
    d0f8:	3a08      	subs	r2, #8
    d0fa:	b291      	uxth	r1, r2
    d0fc:	683a      	ldr	r2, [r7, #0]
    d0fe:	3208      	adds	r2, #8
    d100:	4798      	blx	r3
    d102:	e03d      	b.n	d180 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    d104:	2384      	movs	r3, #132	; 0x84
    d106:	009a      	lsls	r2, r3, #2
    d108:	490e      	ldr	r1, [pc, #56]	; (d144 <hif_isr+0x3a0>)
    d10a:	4b0f      	ldr	r3, [pc, #60]	; (d148 <hif_isr+0x3a4>)
    d10c:	0018      	movs	r0, r3
    d10e:	4b0f      	ldr	r3, [pc, #60]	; (d14c <hif_isr+0x3a8>)
    d110:	4798      	blx	r3
    d112:	4b1a      	ldr	r3, [pc, #104]	; (d17c <hif_isr+0x3d8>)
    d114:	0018      	movs	r0, r3
    d116:	4b0d      	ldr	r3, [pc, #52]	; (d14c <hif_isr+0x3a8>)
    d118:	4798      	blx	r3
    d11a:	4b0e      	ldr	r3, [pc, #56]	; (d154 <hif_isr+0x3b0>)
    d11c:	0018      	movs	r0, r3
    d11e:	4b0b      	ldr	r3, [pc, #44]	; (d14c <hif_isr+0x3a8>)
    d120:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    d122:	230f      	movs	r3, #15
    d124:	18fb      	adds	r3, r7, r3
    d126:	22fa      	movs	r2, #250	; 0xfa
    d128:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    d12a:	e083      	b.n	d234 <hif_isr+0x490>
    d12c:	00001070 	.word	0x00001070
    d130:	0000e831 	.word	0x0000e831
    d134:	0000bf55 	.word	0x0000bf55
    d138:	0000e855 	.word	0x0000e855
    d13c:	20005454 	.word	0x20005454
    d140:	00001084 	.word	0x00001084
    d144:	00023a60 	.word	0x00023a60
    d148:	00023750 	.word	0x00023750
    d14c:	00009a6d 	.word	0x00009a6d
    d150:	00023784 	.word	0x00023784
    d154:	0002374c 	.word	0x0002374c
    d158:	0000e8a5 	.word	0x0000e8a5
    d15c:	000237ac 	.word	0x000237ac
    d160:	000237c4 	.word	0x000237c4
    d164:	00023804 	.word	0x00023804
    d168:	00023828 	.word	0x00023828
    d16c:	0002384c 	.word	0x0002384c
    d170:	0002386c 	.word	0x0002386c
    d174:	00000207 	.word	0x00000207
    d178:	00023890 	.word	0x00023890
    d17c:	000238b4 	.word	0x000238b4
				}
				if(gstrHifCxt.u8HifRXDone)
    d180:	4b30      	ldr	r3, [pc, #192]	; (d244 <hif_isr+0x4a0>)
    d182:	789b      	ldrb	r3, [r3, #2]
    d184:	b2db      	uxtb	r3, r3
    d186:	2b00      	cmp	r3, #0
    d188:	d054      	beq.n	d234 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    d18a:	4a2f      	ldr	r2, [pc, #188]	; (d248 <hif_isr+0x4a4>)
    d18c:	492f      	ldr	r1, [pc, #188]	; (d24c <hif_isr+0x4a8>)
    d18e:	4b30      	ldr	r3, [pc, #192]	; (d250 <hif_isr+0x4ac>)
    d190:	0018      	movs	r0, r3
    d192:	4b30      	ldr	r3, [pc, #192]	; (d254 <hif_isr+0x4b0>)
    d194:	4798      	blx	r3
    d196:	1d3b      	adds	r3, r7, #4
    d198:	781b      	ldrb	r3, [r3, #0]
    d19a:	b2db      	uxtb	r3, r3
    d19c:	0019      	movs	r1, r3
    d19e:	1d3b      	adds	r3, r7, #4
    d1a0:	785b      	ldrb	r3, [r3, #1]
    d1a2:	b2db      	uxtb	r3, r3
    d1a4:	001a      	movs	r2, r3
    d1a6:	4b2c      	ldr	r3, [pc, #176]	; (d258 <hif_isr+0x4b4>)
    d1a8:	0018      	movs	r0, r3
    d1aa:	4b2a      	ldr	r3, [pc, #168]	; (d254 <hif_isr+0x4b0>)
    d1ac:	4798      	blx	r3
    d1ae:	4b2b      	ldr	r3, [pc, #172]	; (d25c <hif_isr+0x4b8>)
    d1b0:	0018      	movs	r0, r3
    d1b2:	4b28      	ldr	r3, [pc, #160]	; (d254 <hif_isr+0x4b0>)
    d1b4:	4798      	blx	r3
					ret = hif_set_rx_done();
    d1b6:	230f      	movs	r3, #15
    d1b8:	18fc      	adds	r4, r7, r3
    d1ba:	4b29      	ldr	r3, [pc, #164]	; (d260 <hif_isr+0x4bc>)
    d1bc:	4798      	blx	r3
    d1be:	0003      	movs	r3, r0
    d1c0:	7023      	strb	r3, [r4, #0]
    d1c2:	e037      	b.n	d234 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    d1c4:	4a27      	ldr	r2, [pc, #156]	; (d264 <hif_isr+0x4c0>)
    d1c6:	4921      	ldr	r1, [pc, #132]	; (d24c <hif_isr+0x4a8>)
    d1c8:	4b21      	ldr	r3, [pc, #132]	; (d250 <hif_isr+0x4ac>)
    d1ca:	0018      	movs	r0, r3
    d1cc:	4b21      	ldr	r3, [pc, #132]	; (d254 <hif_isr+0x4b0>)
    d1ce:	4798      	blx	r3
    d1d0:	4b25      	ldr	r3, [pc, #148]	; (d268 <hif_isr+0x4c4>)
    d1d2:	0018      	movs	r0, r3
    d1d4:	4b1f      	ldr	r3, [pc, #124]	; (d254 <hif_isr+0x4b0>)
    d1d6:	4798      	blx	r3
    d1d8:	4b20      	ldr	r3, [pc, #128]	; (d25c <hif_isr+0x4b8>)
    d1da:	0018      	movs	r0, r3
    d1dc:	4b1d      	ldr	r3, [pc, #116]	; (d254 <hif_isr+0x4b0>)
    d1de:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    d1e0:	230f      	movs	r3, #15
    d1e2:	18fb      	adds	r3, r7, r3
    d1e4:	22fe      	movs	r2, #254	; 0xfe
    d1e6:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    d1e8:	e024      	b.n	d234 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    d1ea:	4a20      	ldr	r2, [pc, #128]	; (d26c <hif_isr+0x4c8>)
    d1ec:	4917      	ldr	r1, [pc, #92]	; (d24c <hif_isr+0x4a8>)
    d1ee:	4b18      	ldr	r3, [pc, #96]	; (d250 <hif_isr+0x4ac>)
    d1f0:	0018      	movs	r0, r3
    d1f2:	4b18      	ldr	r3, [pc, #96]	; (d254 <hif_isr+0x4b0>)
    d1f4:	4798      	blx	r3
    d1f6:	68ba      	ldr	r2, [r7, #8]
    d1f8:	4b1d      	ldr	r3, [pc, #116]	; (d270 <hif_isr+0x4cc>)
    d1fa:	0011      	movs	r1, r2
    d1fc:	0018      	movs	r0, r3
    d1fe:	4b15      	ldr	r3, [pc, #84]	; (d254 <hif_isr+0x4b0>)
    d200:	4798      	blx	r3
    d202:	4b16      	ldr	r3, [pc, #88]	; (d25c <hif_isr+0x4b8>)
    d204:	0018      	movs	r0, r3
    d206:	4b13      	ldr	r3, [pc, #76]	; (d254 <hif_isr+0x4b0>)
    d208:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d20a:	230f      	movs	r3, #15
    d20c:	18fb      	adds	r3, r7, r3
    d20e:	22f4      	movs	r2, #244	; 0xf4
    d210:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    d212:	e00f      	b.n	d234 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    d214:	4a17      	ldr	r2, [pc, #92]	; (d274 <hif_isr+0x4d0>)
    d216:	490d      	ldr	r1, [pc, #52]	; (d24c <hif_isr+0x4a8>)
    d218:	4b0d      	ldr	r3, [pc, #52]	; (d250 <hif_isr+0x4ac>)
    d21a:	0018      	movs	r0, r3
    d21c:	4b0d      	ldr	r3, [pc, #52]	; (d254 <hif_isr+0x4b0>)
    d21e:	4798      	blx	r3
    d220:	4b15      	ldr	r3, [pc, #84]	; (d278 <hif_isr+0x4d4>)
    d222:	0018      	movs	r0, r3
    d224:	4b0b      	ldr	r3, [pc, #44]	; (d254 <hif_isr+0x4b0>)
    d226:	4798      	blx	r3
    d228:	4b0c      	ldr	r3, [pc, #48]	; (d25c <hif_isr+0x4b8>)
    d22a:	0018      	movs	r0, r3
    d22c:	4b09      	ldr	r3, [pc, #36]	; (d254 <hif_isr+0x4b0>)
    d22e:	4798      	blx	r3
		goto ERR1;
    d230:	e000      	b.n	d234 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
    d232:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    d234:	230f      	movs	r3, #15
    d236:	18fb      	adds	r3, r7, r3
    d238:	781b      	ldrb	r3, [r3, #0]
    d23a:	b25b      	sxtb	r3, r3
}
    d23c:	0018      	movs	r0, r3
    d23e:	46bd      	mov	sp, r7
    d240:	b005      	add	sp, #20
    d242:	bd90      	pop	{r4, r7, pc}
    d244:	20005454 	.word	0x20005454
    d248:	00000216 	.word	0x00000216
    d24c:	00023a60 	.word	0x00023a60
    d250:	00023750 	.word	0x00023750
    d254:	00009a6d 	.word	0x00009a6d
    d258:	000238cc 	.word	0x000238cc
    d25c:	0002374c 	.word	0x0002374c
    d260:	0000c839 	.word	0x0000c839
    d264:	0000021d 	.word	0x0000021d
    d268:	000238f8 	.word	0x000238f8
    d26c:	00000225 	.word	0x00000225
    d270:	0002390c 	.word	0x0002390c
    d274:	0000022e 	.word	0x0000022e
    d278:	00023928 	.word	0x00023928

0000d27c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    d27c:	b590      	push	{r4, r7, lr}
    d27e:	b083      	sub	sp, #12
    d280:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    d282:	1dfb      	adds	r3, r7, #7
    d284:	2200      	movs	r2, #0
    d286:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
    d288:	4b1c      	ldr	r3, [pc, #112]	; (d2fc <hif_handle_isr+0x80>)
    d28a:	2200      	movs	r2, #0
    d28c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    d28e:	e024      	b.n	d2da <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    d290:	4b1a      	ldr	r3, [pc, #104]	; (d2fc <hif_handle_isr+0x80>)
    d292:	78db      	ldrb	r3, [r3, #3]
    d294:	b2db      	uxtb	r3, r3
    d296:	3b01      	subs	r3, #1
    d298:	b2da      	uxtb	r2, r3
    d29a:	4b18      	ldr	r3, [pc, #96]	; (d2fc <hif_handle_isr+0x80>)
    d29c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    d29e:	1dfc      	adds	r4, r7, #7
    d2a0:	4b17      	ldr	r3, [pc, #92]	; (d300 <hif_handle_isr+0x84>)
    d2a2:	4798      	blx	r3
    d2a4:	0003      	movs	r3, r0
    d2a6:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    d2a8:	1dfb      	adds	r3, r7, #7
    d2aa:	781b      	ldrb	r3, [r3, #0]
    d2ac:	b25b      	sxtb	r3, r3
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d100      	bne.n	d2b4 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    d2b2:	e012      	b.n	d2da <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    d2b4:	4a13      	ldr	r2, [pc, #76]	; (d304 <hif_handle_isr+0x88>)
    d2b6:	4914      	ldr	r1, [pc, #80]	; (d308 <hif_handle_isr+0x8c>)
    d2b8:	4b14      	ldr	r3, [pc, #80]	; (d30c <hif_handle_isr+0x90>)
    d2ba:	0018      	movs	r0, r3
    d2bc:	4b14      	ldr	r3, [pc, #80]	; (d310 <hif_handle_isr+0x94>)
    d2be:	4798      	blx	r3
    d2c0:	1dfb      	adds	r3, r7, #7
    d2c2:	2200      	movs	r2, #0
    d2c4:	569a      	ldrsb	r2, [r3, r2]
    d2c6:	4b13      	ldr	r3, [pc, #76]	; (d314 <hif_handle_isr+0x98>)
    d2c8:	0011      	movs	r1, r2
    d2ca:	0018      	movs	r0, r3
    d2cc:	4b10      	ldr	r3, [pc, #64]	; (d310 <hif_handle_isr+0x94>)
    d2ce:	4798      	blx	r3
    d2d0:	4b11      	ldr	r3, [pc, #68]	; (d318 <hif_handle_isr+0x9c>)
    d2d2:	0018      	movs	r0, r3
    d2d4:	4b0e      	ldr	r3, [pc, #56]	; (d310 <hif_handle_isr+0x94>)
    d2d6:	4798      	blx	r3
			ret = hif_isr();
    d2d8:	e7e1      	b.n	d29e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    d2da:	4b08      	ldr	r3, [pc, #32]	; (d2fc <hif_handle_isr+0x80>)
    d2dc:	78db      	ldrb	r3, [r3, #3]
    d2de:	b2db      	uxtb	r3, r3
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d004      	beq.n	d2ee <hif_handle_isr+0x72>
    d2e4:	4b05      	ldr	r3, [pc, #20]	; (d2fc <hif_handle_isr+0x80>)
    d2e6:	791b      	ldrb	r3, [r3, #4]
    d2e8:	b2db      	uxtb	r3, r3
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	d0d0      	beq.n	d290 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
    d2ee:	1dfb      	adds	r3, r7, #7
    d2f0:	781b      	ldrb	r3, [r3, #0]
    d2f2:	b25b      	sxtb	r3, r3
}
    d2f4:	0018      	movs	r0, r3
    d2f6:	46bd      	mov	sp, r7
    d2f8:	b003      	add	sp, #12
    d2fa:	bd90      	pop	{r4, r7, pc}
    d2fc:	20005454 	.word	0x20005454
    d300:	0000cda5 	.word	0x0000cda5
    d304:	00000257 	.word	0x00000257
    d308:	00023a68 	.word	0x00023a68
    d30c:	00023750 	.word	0x00023750
    d310:	00009a6d 	.word	0x00009a6d
    d314:	0002394c 	.word	0x0002394c
    d318:	0002374c 	.word	0x0002374c

0000d31c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    d31c:	b590      	push	{r4, r7, lr}
    d31e:	b087      	sub	sp, #28
    d320:	af00      	add	r7, sp, #0
    d322:	60f8      	str	r0, [r7, #12]
    d324:	60b9      	str	r1, [r7, #8]
    d326:	0019      	movs	r1, r3
    d328:	1dbb      	adds	r3, r7, #6
    d32a:	801a      	strh	r2, [r3, #0]
    d32c:	1d7b      	adds	r3, r7, #5
    d32e:	1c0a      	adds	r2, r1, #0
    d330:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    d332:	2317      	movs	r3, #23
    d334:	18fb      	adds	r3, r7, r3
    d336:	2200      	movs	r2, #0
    d338:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    d33a:	68fb      	ldr	r3, [r7, #12]
    d33c:	2b00      	cmp	r3, #0
    d33e:	d006      	beq.n	d34e <hif_receive+0x32>
    d340:	68bb      	ldr	r3, [r7, #8]
    d342:	2b00      	cmp	r3, #0
    d344:	d003      	beq.n	d34e <hif_receive+0x32>
    d346:	1dbb      	adds	r3, r7, #6
    d348:	881b      	ldrh	r3, [r3, #0]
    d34a:	2b00      	cmp	r3, #0
    d34c:	d11e      	bne.n	d38c <hif_receive+0x70>
	{
		if(isDone)
    d34e:	1d7b      	adds	r3, r7, #5
    d350:	781b      	ldrb	r3, [r3, #0]
    d352:	2b00      	cmp	r3, #0
    d354:	d006      	beq.n	d364 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    d356:	2317      	movs	r3, #23
    d358:	18fc      	adds	r4, r7, r3
    d35a:	4b45      	ldr	r3, [pc, #276]	; (d470 <hif_receive+0x154>)
    d35c:	4798      	blx	r3
    d35e:	0003      	movs	r3, r0
    d360:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    d362:	e07c      	b.n	d45e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
    d364:	2317      	movs	r3, #23
    d366:	18fb      	adds	r3, r7, r3
    d368:	22f4      	movs	r2, #244	; 0xf4
    d36a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    d36c:	239e      	movs	r3, #158	; 0x9e
    d36e:	009a      	lsls	r2, r3, #2
    d370:	4940      	ldr	r1, [pc, #256]	; (d474 <hif_receive+0x158>)
    d372:	4b41      	ldr	r3, [pc, #260]	; (d478 <hif_receive+0x15c>)
    d374:	0018      	movs	r0, r3
    d376:	4b41      	ldr	r3, [pc, #260]	; (d47c <hif_receive+0x160>)
    d378:	4798      	blx	r3
    d37a:	4b41      	ldr	r3, [pc, #260]	; (d480 <hif_receive+0x164>)
    d37c:	0018      	movs	r0, r3
    d37e:	4b3f      	ldr	r3, [pc, #252]	; (d47c <hif_receive+0x160>)
    d380:	4798      	blx	r3
    d382:	4b40      	ldr	r3, [pc, #256]	; (d484 <hif_receive+0x168>)
    d384:	0018      	movs	r0, r3
    d386:	4b3d      	ldr	r3, [pc, #244]	; (d47c <hif_receive+0x160>)
    d388:	4798      	blx	r3
		goto ERR1;
    d38a:	e068      	b.n	d45e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    d38c:	1dbb      	adds	r3, r7, #6
    d38e:	881a      	ldrh	r2, [r3, #0]
    d390:	4b3d      	ldr	r3, [pc, #244]	; (d488 <hif_receive+0x16c>)
    d392:	68db      	ldr	r3, [r3, #12]
    d394:	429a      	cmp	r2, r3
    d396:	d917      	bls.n	d3c8 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
    d398:	2317      	movs	r3, #23
    d39a:	18fb      	adds	r3, r7, r3
    d39c:	22f4      	movs	r2, #244	; 0xf4
    d39e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    d3a0:	23a0      	movs	r3, #160	; 0xa0
    d3a2:	009a      	lsls	r2, r3, #2
    d3a4:	4933      	ldr	r1, [pc, #204]	; (d474 <hif_receive+0x158>)
    d3a6:	4b34      	ldr	r3, [pc, #208]	; (d478 <hif_receive+0x15c>)
    d3a8:	0018      	movs	r0, r3
    d3aa:	4b34      	ldr	r3, [pc, #208]	; (d47c <hif_receive+0x160>)
    d3ac:	4798      	blx	r3
    d3ae:	1dbb      	adds	r3, r7, #6
    d3b0:	8819      	ldrh	r1, [r3, #0]
    d3b2:	4b35      	ldr	r3, [pc, #212]	; (d488 <hif_receive+0x16c>)
    d3b4:	68da      	ldr	r2, [r3, #12]
    d3b6:	4b35      	ldr	r3, [pc, #212]	; (d48c <hif_receive+0x170>)
    d3b8:	0018      	movs	r0, r3
    d3ba:	4b30      	ldr	r3, [pc, #192]	; (d47c <hif_receive+0x160>)
    d3bc:	4798      	blx	r3
    d3be:	4b31      	ldr	r3, [pc, #196]	; (d484 <hif_receive+0x168>)
    d3c0:	0018      	movs	r0, r3
    d3c2:	4b2e      	ldr	r3, [pc, #184]	; (d47c <hif_receive+0x160>)
    d3c4:	4798      	blx	r3
		goto ERR1;
    d3c6:	e04a      	b.n	d45e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    d3c8:	4b2f      	ldr	r3, [pc, #188]	; (d488 <hif_receive+0x16c>)
    d3ca:	689a      	ldr	r2, [r3, #8]
    d3cc:	68fb      	ldr	r3, [r7, #12]
    d3ce:	429a      	cmp	r2, r3
    d3d0:	d80a      	bhi.n	d3e8 <hif_receive+0xcc>
    d3d2:	1dbb      	adds	r3, r7, #6
    d3d4:	881a      	ldrh	r2, [r3, #0]
    d3d6:	68fb      	ldr	r3, [r7, #12]
    d3d8:	18d2      	adds	r2, r2, r3
    d3da:	4b2b      	ldr	r3, [pc, #172]	; (d488 <hif_receive+0x16c>)
    d3dc:	6899      	ldr	r1, [r3, #8]
    d3de:	4b2a      	ldr	r3, [pc, #168]	; (d488 <hif_receive+0x16c>)
    d3e0:	68db      	ldr	r3, [r3, #12]
    d3e2:	18cb      	adds	r3, r1, r3
    d3e4:	429a      	cmp	r2, r3
    d3e6:	d912      	bls.n	d40e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
    d3e8:	2317      	movs	r3, #23
    d3ea:	18fb      	adds	r3, r7, r3
    d3ec:	22f4      	movs	r2, #244	; 0xf4
    d3ee:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    d3f0:	4a27      	ldr	r2, [pc, #156]	; (d490 <hif_receive+0x174>)
    d3f2:	4920      	ldr	r1, [pc, #128]	; (d474 <hif_receive+0x158>)
    d3f4:	4b20      	ldr	r3, [pc, #128]	; (d478 <hif_receive+0x15c>)
    d3f6:	0018      	movs	r0, r3
    d3f8:	4b20      	ldr	r3, [pc, #128]	; (d47c <hif_receive+0x160>)
    d3fa:	4798      	blx	r3
    d3fc:	4b25      	ldr	r3, [pc, #148]	; (d494 <hif_receive+0x178>)
    d3fe:	0018      	movs	r0, r3
    d400:	4b1e      	ldr	r3, [pc, #120]	; (d47c <hif_receive+0x160>)
    d402:	4798      	blx	r3
    d404:	4b1f      	ldr	r3, [pc, #124]	; (d484 <hif_receive+0x168>)
    d406:	0018      	movs	r0, r3
    d408:	4b1c      	ldr	r3, [pc, #112]	; (d47c <hif_receive+0x160>)
    d40a:	4798      	blx	r3
		goto ERR1;
    d40c:	e027      	b.n	d45e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    d40e:	1dbb      	adds	r3, r7, #6
    d410:	881a      	ldrh	r2, [r3, #0]
    d412:	2317      	movs	r3, #23
    d414:	18fc      	adds	r4, r7, r3
    d416:	68b9      	ldr	r1, [r7, #8]
    d418:	68fb      	ldr	r3, [r7, #12]
    d41a:	0018      	movs	r0, r3
    d41c:	4b1e      	ldr	r3, [pc, #120]	; (d498 <hif_receive+0x17c>)
    d41e:	4798      	blx	r3
    d420:	0003      	movs	r3, r0
    d422:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    d424:	2317      	movs	r3, #23
    d426:	18fb      	adds	r3, r7, r3
    d428:	781b      	ldrb	r3, [r3, #0]
    d42a:	b25b      	sxtb	r3, r3
    d42c:	2b00      	cmp	r3, #0
    d42e:	d115      	bne.n	d45c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    d430:	4b15      	ldr	r3, [pc, #84]	; (d488 <hif_receive+0x16c>)
    d432:	689a      	ldr	r2, [r3, #8]
    d434:	4b14      	ldr	r3, [pc, #80]	; (d488 <hif_receive+0x16c>)
    d436:	68db      	ldr	r3, [r3, #12]
    d438:	18d2      	adds	r2, r2, r3
    d43a:	1dbb      	adds	r3, r7, #6
    d43c:	8819      	ldrh	r1, [r3, #0]
    d43e:	68fb      	ldr	r3, [r7, #12]
    d440:	18cb      	adds	r3, r1, r3
    d442:	429a      	cmp	r2, r3
    d444:	d003      	beq.n	d44e <hif_receive+0x132>
    d446:	1d7b      	adds	r3, r7, #5
    d448:	781b      	ldrb	r3, [r3, #0]
    d44a:	2b00      	cmp	r3, #0
    d44c:	d007      	beq.n	d45e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    d44e:	2317      	movs	r3, #23
    d450:	18fc      	adds	r4, r7, r3
    d452:	4b07      	ldr	r3, [pc, #28]	; (d470 <hif_receive+0x154>)
    d454:	4798      	blx	r3
    d456:	0003      	movs	r3, r0
    d458:	7023      	strb	r3, [r4, #0]
    d45a:	e000      	b.n	d45e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
    d45c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    d45e:	2317      	movs	r3, #23
    d460:	18fb      	adds	r3, r7, r3
    d462:	781b      	ldrb	r3, [r3, #0]
    d464:	b25b      	sxtb	r3, r3
}
    d466:	0018      	movs	r0, r3
    d468:	46bd      	mov	sp, r7
    d46a:	b007      	add	sp, #28
    d46c:	bd90      	pop	{r4, r7, pc}
    d46e:	46c0      	nop			; (mov r8, r8)
    d470:	0000c839 	.word	0x0000c839
    d474:	00023a78 	.word	0x00023a78
    d478:	00023750 	.word	0x00023750
    d47c:	00009a6d 	.word	0x00009a6d
    d480:	0002397c 	.word	0x0002397c
    d484:	0002374c 	.word	0x0002374c
    d488:	20005454 	.word	0x20005454
    d48c:	0002399c 	.word	0x0002399c
    d490:	00000286 	.word	0x00000286
    d494:	000239e4 	.word	0x000239e4
    d498:	0000e8a5 	.word	0x0000e8a5

0000d49c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    d49c:	b580      	push	{r7, lr}
    d49e:	b084      	sub	sp, #16
    d4a0:	af00      	add	r7, sp, #0
    d4a2:	0002      	movs	r2, r0
    d4a4:	6039      	str	r1, [r7, #0]
    d4a6:	1dfb      	adds	r3, r7, #7
    d4a8:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    d4aa:	230f      	movs	r3, #15
    d4ac:	18fb      	adds	r3, r7, r3
    d4ae:	2200      	movs	r2, #0
    d4b0:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    d4b2:	1dfb      	adds	r3, r7, #7
    d4b4:	781b      	ldrb	r3, [r3, #0]
    d4b6:	2b07      	cmp	r3, #7
    d4b8:	d820      	bhi.n	d4fc <hif_register_cb+0x60>
    d4ba:	009a      	lsls	r2, r3, #2
    d4bc:	4b1e      	ldr	r3, [pc, #120]	; (d538 <hif_register_cb+0x9c>)
    d4be:	18d3      	adds	r3, r2, r3
    d4c0:	681b      	ldr	r3, [r3, #0]
    d4c2:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    d4c4:	4b1d      	ldr	r3, [pc, #116]	; (d53c <hif_register_cb+0xa0>)
    d4c6:	683a      	ldr	r2, [r7, #0]
    d4c8:	615a      	str	r2, [r3, #20]
			break;
    d4ca:	e02d      	b.n	d528 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    d4cc:	4b1b      	ldr	r3, [pc, #108]	; (d53c <hif_register_cb+0xa0>)
    d4ce:	683a      	ldr	r2, [r7, #0]
    d4d0:	611a      	str	r2, [r3, #16]
			break;
    d4d2:	e029      	b.n	d528 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    d4d4:	4b19      	ldr	r3, [pc, #100]	; (d53c <hif_register_cb+0xa0>)
    d4d6:	683a      	ldr	r2, [r7, #0]
    d4d8:	619a      	str	r2, [r3, #24]
			break;
    d4da:	e025      	b.n	d528 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    d4dc:	4b17      	ldr	r3, [pc, #92]	; (d53c <hif_register_cb+0xa0>)
    d4de:	683a      	ldr	r2, [r7, #0]
    d4e0:	621a      	str	r2, [r3, #32]
			break;
    d4e2:	e021      	b.n	d528 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    d4e4:	4b15      	ldr	r3, [pc, #84]	; (d53c <hif_register_cb+0xa0>)
    d4e6:	683a      	ldr	r2, [r7, #0]
    d4e8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    d4ea:	e01d      	b.n	d528 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    d4ec:	4b13      	ldr	r3, [pc, #76]	; (d53c <hif_register_cb+0xa0>)
    d4ee:	683a      	ldr	r2, [r7, #0]
    d4f0:	61da      	str	r2, [r3, #28]
			break;
    d4f2:	e019      	b.n	d528 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    d4f4:	4b11      	ldr	r3, [pc, #68]	; (d53c <hif_register_cb+0xa0>)
    d4f6:	683a      	ldr	r2, [r7, #0]
    d4f8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
    d4fa:	e015      	b.n	d528 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    d4fc:	4a10      	ldr	r2, [pc, #64]	; (d540 <hif_register_cb+0xa4>)
    d4fe:	4911      	ldr	r1, [pc, #68]	; (d544 <hif_register_cb+0xa8>)
    d500:	4b11      	ldr	r3, [pc, #68]	; (d548 <hif_register_cb+0xac>)
    d502:	0018      	movs	r0, r3
    d504:	4b11      	ldr	r3, [pc, #68]	; (d54c <hif_register_cb+0xb0>)
    d506:	4798      	blx	r3
    d508:	1dfb      	adds	r3, r7, #7
    d50a:	781a      	ldrb	r2, [r3, #0]
    d50c:	4b10      	ldr	r3, [pc, #64]	; (d550 <hif_register_cb+0xb4>)
    d50e:	0011      	movs	r1, r2
    d510:	0018      	movs	r0, r3
    d512:	4b0e      	ldr	r3, [pc, #56]	; (d54c <hif_register_cb+0xb0>)
    d514:	4798      	blx	r3
    d516:	4b0f      	ldr	r3, [pc, #60]	; (d554 <hif_register_cb+0xb8>)
    d518:	0018      	movs	r0, r3
    d51a:	4b0c      	ldr	r3, [pc, #48]	; (d54c <hif_register_cb+0xb0>)
    d51c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    d51e:	230f      	movs	r3, #15
    d520:	18fb      	adds	r3, r7, r3
    d522:	22f4      	movs	r2, #244	; 0xf4
    d524:	701a      	strb	r2, [r3, #0]
			break;
    d526:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    d528:	230f      	movs	r3, #15
    d52a:	18fb      	adds	r3, r7, r3
    d52c:	781b      	ldrb	r3, [r3, #0]
    d52e:	b25b      	sxtb	r3, r3
}
    d530:	0018      	movs	r0, r3
    d532:	46bd      	mov	sp, r7
    d534:	b004      	add	sp, #16
    d536:	bd80      	pop	{r7, pc}
    d538:	00023a34 	.word	0x00023a34
    d53c:	20005454 	.word	0x20005454
    d540:	000002be 	.word	0x000002be
    d544:	00023a84 	.word	0x00023a84
    d548:	00023750 	.word	0x00023750
    d54c:	00009a6d 	.word	0x00009a6d
    d550:	00023a28 	.word	0x00023a28
    d554:	0002374c 	.word	0x0002374c

0000d558 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    d558:	b590      	push	{r4, r7, lr}
    d55a:	b0af      	sub	sp, #188	; 0xbc
    d55c:	af02      	add	r7, sp, #8
    d55e:	603a      	str	r2, [r7, #0]
    d560:	1dfb      	adds	r3, r7, #7
    d562:	1c02      	adds	r2, r0, #0
    d564:	701a      	strb	r2, [r3, #0]
    d566:	1d3b      	adds	r3, r7, #4
    d568:	1c0a      	adds	r2, r1, #0
    d56a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    d56c:	1dfb      	adds	r3, r7, #7
    d56e:	781b      	ldrb	r3, [r3, #0]
    d570:	2b2c      	cmp	r3, #44	; 0x2c
    d572:	d116      	bne.n	d5a2 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    d574:	23a4      	movs	r3, #164	; 0xa4
    d576:	18f9      	adds	r1, r7, r3
    d578:	6838      	ldr	r0, [r7, #0]
    d57a:	2300      	movs	r3, #0
    d57c:	2204      	movs	r2, #4
    d57e:	4cca      	ldr	r4, [pc, #808]	; (d8a8 <m2m_wifi_cb+0x350>)
    d580:	47a0      	blx	r4
    d582:	1e03      	subs	r3, r0, #0
    d584:	d000      	beq.n	d588 <m2m_wifi_cb+0x30>
    d586:	e1b4      	b.n	d8f2 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
    d588:	4bc8      	ldr	r3, [pc, #800]	; (d8ac <m2m_wifi_cb+0x354>)
    d58a:	681b      	ldr	r3, [r3, #0]
    d58c:	2b00      	cmp	r3, #0
    d58e:	d100      	bne.n	d592 <m2m_wifi_cb+0x3a>
    d590:	e1af      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    d592:	4bc6      	ldr	r3, [pc, #792]	; (d8ac <m2m_wifi_cb+0x354>)
    d594:	681b      	ldr	r3, [r3, #0]
    d596:	22a4      	movs	r2, #164	; 0xa4
    d598:	18ba      	adds	r2, r7, r2
    d59a:	0011      	movs	r1, r2
    d59c:	202c      	movs	r0, #44	; 0x2c
    d59e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    d5a0:	e1a7      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    d5a2:	1dfb      	adds	r3, r7, #7
    d5a4:	781b      	ldrb	r3, [r3, #0]
    d5a6:	2b1b      	cmp	r3, #27
    d5a8:	d116      	bne.n	d5d8 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    d5aa:	239c      	movs	r3, #156	; 0x9c
    d5ac:	18f9      	adds	r1, r7, r3
    d5ae:	6838      	ldr	r0, [r7, #0]
    d5b0:	2300      	movs	r3, #0
    d5b2:	2208      	movs	r2, #8
    d5b4:	4cbc      	ldr	r4, [pc, #752]	; (d8a8 <m2m_wifi_cb+0x350>)
    d5b6:	47a0      	blx	r4
    d5b8:	1e03      	subs	r3, r0, #0
    d5ba:	d000      	beq.n	d5be <m2m_wifi_cb+0x66>
    d5bc:	e199      	b.n	d8f2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    d5be:	4bbb      	ldr	r3, [pc, #748]	; (d8ac <m2m_wifi_cb+0x354>)
    d5c0:	681b      	ldr	r3, [r3, #0]
    d5c2:	2b00      	cmp	r3, #0
    d5c4:	d100      	bne.n	d5c8 <m2m_wifi_cb+0x70>
    d5c6:	e194      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    d5c8:	4bb8      	ldr	r3, [pc, #736]	; (d8ac <m2m_wifi_cb+0x354>)
    d5ca:	681b      	ldr	r3, [r3, #0]
    d5cc:	229c      	movs	r2, #156	; 0x9c
    d5ce:	18ba      	adds	r2, r7, r2
    d5d0:	0011      	movs	r1, r2
    d5d2:	201b      	movs	r0, #27
    d5d4:	4798      	blx	r3
}
    d5d6:	e18c      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    d5d8:	1dfb      	adds	r3, r7, #7
    d5da:	781b      	ldrb	r3, [r3, #0]
    d5dc:	2b06      	cmp	r3, #6
    d5de:	d116      	bne.n	d60e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    d5e0:	230c      	movs	r3, #12
    d5e2:	18f9      	adds	r1, r7, r3
    d5e4:	6838      	ldr	r0, [r7, #0]
    d5e6:	2301      	movs	r3, #1
    d5e8:	2230      	movs	r2, #48	; 0x30
    d5ea:	4caf      	ldr	r4, [pc, #700]	; (d8a8 <m2m_wifi_cb+0x350>)
    d5ec:	47a0      	blx	r4
    d5ee:	1e03      	subs	r3, r0, #0
    d5f0:	d000      	beq.n	d5f4 <m2m_wifi_cb+0x9c>
    d5f2:	e17e      	b.n	d8f2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    d5f4:	4bad      	ldr	r3, [pc, #692]	; (d8ac <m2m_wifi_cb+0x354>)
    d5f6:	681b      	ldr	r3, [r3, #0]
    d5f8:	2b00      	cmp	r3, #0
    d5fa:	d100      	bne.n	d5fe <m2m_wifi_cb+0xa6>
    d5fc:	e179      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    d5fe:	4bab      	ldr	r3, [pc, #684]	; (d8ac <m2m_wifi_cb+0x354>)
    d600:	681b      	ldr	r3, [r3, #0]
    d602:	220c      	movs	r2, #12
    d604:	18ba      	adds	r2, r7, r2
    d606:	0011      	movs	r1, r2
    d608:	2006      	movs	r0, #6
    d60a:	4798      	blx	r3
}
    d60c:	e171      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    d60e:	1dfb      	adds	r3, r7, #7
    d610:	781b      	ldrb	r3, [r3, #0]
    d612:	2b0e      	cmp	r3, #14
    d614:	d100      	bne.n	d618 <m2m_wifi_cb+0xc0>
    d616:	e16c      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    d618:	1dfb      	adds	r3, r7, #7
    d61a:	781b      	ldrb	r3, [r3, #0]
    d61c:	2b32      	cmp	r3, #50	; 0x32
    d61e:	d116      	bne.n	d64e <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    d620:	2384      	movs	r3, #132	; 0x84
    d622:	18f9      	adds	r1, r7, r3
    d624:	6838      	ldr	r0, [r7, #0]
    d626:	2300      	movs	r3, #0
    d628:	2218      	movs	r2, #24
    d62a:	4c9f      	ldr	r4, [pc, #636]	; (d8a8 <m2m_wifi_cb+0x350>)
    d62c:	47a0      	blx	r4
    d62e:	1e03      	subs	r3, r0, #0
    d630:	d000      	beq.n	d634 <m2m_wifi_cb+0xdc>
    d632:	e15e      	b.n	d8f2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    d634:	4b9d      	ldr	r3, [pc, #628]	; (d8ac <m2m_wifi_cb+0x354>)
    d636:	681b      	ldr	r3, [r3, #0]
    d638:	2b00      	cmp	r3, #0
    d63a:	d100      	bne.n	d63e <m2m_wifi_cb+0xe6>
    d63c:	e159      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    d63e:	4b9b      	ldr	r3, [pc, #620]	; (d8ac <m2m_wifi_cb+0x354>)
    d640:	681b      	ldr	r3, [r3, #0]
    d642:	2284      	movs	r2, #132	; 0x84
    d644:	18ba      	adds	r2, r7, r2
    d646:	0011      	movs	r1, r2
    d648:	2032      	movs	r0, #50	; 0x32
    d64a:	4798      	blx	r3
}
    d64c:	e151      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    d64e:	1dfb      	adds	r3, r7, #7
    d650:	781b      	ldrb	r3, [r3, #0]
    d652:	2b2f      	cmp	r3, #47	; 0x2f
    d654:	d11d      	bne.n	d692 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    d656:	230c      	movs	r3, #12
    d658:	18fb      	adds	r3, r7, r3
    d65a:	2264      	movs	r2, #100	; 0x64
    d65c:	2100      	movs	r1, #0
    d65e:	0018      	movs	r0, r3
    d660:	4b93      	ldr	r3, [pc, #588]	; (d8b0 <m2m_wifi_cb+0x358>)
    d662:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    d664:	230c      	movs	r3, #12
    d666:	18f9      	adds	r1, r7, r3
    d668:	6838      	ldr	r0, [r7, #0]
    d66a:	2300      	movs	r3, #0
    d66c:	2264      	movs	r2, #100	; 0x64
    d66e:	4c8e      	ldr	r4, [pc, #568]	; (d8a8 <m2m_wifi_cb+0x350>)
    d670:	47a0      	blx	r4
    d672:	1e03      	subs	r3, r0, #0
    d674:	d000      	beq.n	d678 <m2m_wifi_cb+0x120>
    d676:	e13c      	b.n	d8f2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    d678:	4b8c      	ldr	r3, [pc, #560]	; (d8ac <m2m_wifi_cb+0x354>)
    d67a:	681b      	ldr	r3, [r3, #0]
    d67c:	2b00      	cmp	r3, #0
    d67e:	d100      	bne.n	d682 <m2m_wifi_cb+0x12a>
    d680:	e137      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    d682:	4b8a      	ldr	r3, [pc, #552]	; (d8ac <m2m_wifi_cb+0x354>)
    d684:	681b      	ldr	r3, [r3, #0]
    d686:	220c      	movs	r2, #12
    d688:	18ba      	adds	r2, r7, r2
    d68a:	0011      	movs	r1, r2
    d68c:	202f      	movs	r0, #47	; 0x2f
    d68e:	4798      	blx	r3
}
    d690:	e12f      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    d692:	1dfb      	adds	r3, r7, #7
    d694:	781b      	ldrb	r3, [r3, #0]
    d696:	2b34      	cmp	r3, #52	; 0x34
    d698:	d137      	bne.n	d70a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    d69a:	2380      	movs	r3, #128	; 0x80
    d69c:	18f9      	adds	r1, r7, r3
    d69e:	6838      	ldr	r0, [r7, #0]
    d6a0:	2300      	movs	r3, #0
    d6a2:	2204      	movs	r2, #4
    d6a4:	4c80      	ldr	r4, [pc, #512]	; (d8a8 <m2m_wifi_cb+0x350>)
    d6a6:	47a0      	blx	r4
    d6a8:	1e03      	subs	r3, r0, #0
    d6aa:	d000      	beq.n	d6ae <m2m_wifi_cb+0x156>
    d6ac:	e121      	b.n	d8f2 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    d6ae:	4b81      	ldr	r3, [pc, #516]	; (d8b4 <m2m_wifi_cb+0x35c>)
    d6b0:	0018      	movs	r0, r3
    d6b2:	4b81      	ldr	r3, [pc, #516]	; (d8b8 <m2m_wifi_cb+0x360>)
    d6b4:	4798      	blx	r3
    d6b6:	2380      	movs	r3, #128	; 0x80
    d6b8:	18fb      	adds	r3, r7, r3
    d6ba:	681b      	ldr	r3, [r3, #0]
    d6bc:	0e1b      	lsrs	r3, r3, #24
    d6be:	b2db      	uxtb	r3, r3
    d6c0:	0019      	movs	r1, r3
    d6c2:	2380      	movs	r3, #128	; 0x80
    d6c4:	18fb      	adds	r3, r7, r3
    d6c6:	681b      	ldr	r3, [r3, #0]
    d6c8:	0c1b      	lsrs	r3, r3, #16
    d6ca:	b2db      	uxtb	r3, r3
    d6cc:	001a      	movs	r2, r3
    d6ce:	2380      	movs	r3, #128	; 0x80
    d6d0:	18fb      	adds	r3, r7, r3
    d6d2:	681b      	ldr	r3, [r3, #0]
    d6d4:	0a1b      	lsrs	r3, r3, #8
    d6d6:	b2db      	uxtb	r3, r3
    d6d8:	001c      	movs	r4, r3
    d6da:	2380      	movs	r3, #128	; 0x80
    d6dc:	18fb      	adds	r3, r7, r3
    d6de:	681b      	ldr	r3, [r3, #0]
    d6e0:	b2db      	uxtb	r3, r3
    d6e2:	4876      	ldr	r0, [pc, #472]	; (d8bc <m2m_wifi_cb+0x364>)
    d6e4:	9300      	str	r3, [sp, #0]
    d6e6:	0023      	movs	r3, r4
    d6e8:	4c73      	ldr	r4, [pc, #460]	; (d8b8 <m2m_wifi_cb+0x360>)
    d6ea:	47a0      	blx	r4
    d6ec:	4b74      	ldr	r3, [pc, #464]	; (d8c0 <m2m_wifi_cb+0x368>)
    d6ee:	0018      	movs	r0, r3
    d6f0:	4b71      	ldr	r3, [pc, #452]	; (d8b8 <m2m_wifi_cb+0x360>)
    d6f2:	4798      	blx	r3
			if (gpfAppWifiCb)
    d6f4:	4b6d      	ldr	r3, [pc, #436]	; (d8ac <m2m_wifi_cb+0x354>)
    d6f6:	681b      	ldr	r3, [r3, #0]
    d6f8:	2b00      	cmp	r3, #0
    d6fa:	d100      	bne.n	d6fe <m2m_wifi_cb+0x1a6>
    d6fc:	e0f9      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    d6fe:	4b6b      	ldr	r3, [pc, #428]	; (d8ac <m2m_wifi_cb+0x354>)
    d700:	681b      	ldr	r3, [r3, #0]
    d702:	2100      	movs	r1, #0
    d704:	2034      	movs	r0, #52	; 0x34
    d706:	4798      	blx	r3
}
    d708:	e0f3      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    d70a:	1dfb      	adds	r3, r7, #7
    d70c:	781b      	ldrb	r3, [r3, #0]
    d70e:	2b11      	cmp	r3, #17
    d710:	d11e      	bne.n	d750 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
    d712:	4b6c      	ldr	r3, [pc, #432]	; (d8c4 <m2m_wifi_cb+0x36c>)
    d714:	2200      	movs	r2, #0
    d716:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    d718:	237c      	movs	r3, #124	; 0x7c
    d71a:	18f9      	adds	r1, r7, r3
    d71c:	6838      	ldr	r0, [r7, #0]
    d71e:	2300      	movs	r3, #0
    d720:	2204      	movs	r2, #4
    d722:	4c61      	ldr	r4, [pc, #388]	; (d8a8 <m2m_wifi_cb+0x350>)
    d724:	47a0      	blx	r4
    d726:	1e03      	subs	r3, r0, #0
    d728:	d000      	beq.n	d72c <m2m_wifi_cb+0x1d4>
    d72a:	e0e2      	b.n	d8f2 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
    d72c:	237c      	movs	r3, #124	; 0x7c
    d72e:	18fb      	adds	r3, r7, r3
    d730:	781a      	ldrb	r2, [r3, #0]
    d732:	4b65      	ldr	r3, [pc, #404]	; (d8c8 <m2m_wifi_cb+0x370>)
    d734:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    d736:	4b5d      	ldr	r3, [pc, #372]	; (d8ac <m2m_wifi_cb+0x354>)
    d738:	681b      	ldr	r3, [r3, #0]
    d73a:	2b00      	cmp	r3, #0
    d73c:	d100      	bne.n	d740 <m2m_wifi_cb+0x1e8>
    d73e:	e0d8      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    d740:	4b5a      	ldr	r3, [pc, #360]	; (d8ac <m2m_wifi_cb+0x354>)
    d742:	681b      	ldr	r3, [r3, #0]
    d744:	227c      	movs	r2, #124	; 0x7c
    d746:	18ba      	adds	r2, r7, r2
    d748:	0011      	movs	r1, r2
    d74a:	2011      	movs	r0, #17
    d74c:	4798      	blx	r3
}
    d74e:	e0d0      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    d750:	1dfb      	adds	r3, r7, #7
    d752:	781b      	ldrb	r3, [r3, #0]
    d754:	2b13      	cmp	r3, #19
    d756:	d116      	bne.n	d786 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    d758:	230c      	movs	r3, #12
    d75a:	18f9      	adds	r1, r7, r3
    d75c:	6838      	ldr	r0, [r7, #0]
    d75e:	2300      	movs	r3, #0
    d760:	222c      	movs	r2, #44	; 0x2c
    d762:	4c51      	ldr	r4, [pc, #324]	; (d8a8 <m2m_wifi_cb+0x350>)
    d764:	47a0      	blx	r4
    d766:	1e03      	subs	r3, r0, #0
    d768:	d000      	beq.n	d76c <m2m_wifi_cb+0x214>
    d76a:	e0c2      	b.n	d8f2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    d76c:	4b4f      	ldr	r3, [pc, #316]	; (d8ac <m2m_wifi_cb+0x354>)
    d76e:	681b      	ldr	r3, [r3, #0]
    d770:	2b00      	cmp	r3, #0
    d772:	d100      	bne.n	d776 <m2m_wifi_cb+0x21e>
    d774:	e0bd      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    d776:	4b4d      	ldr	r3, [pc, #308]	; (d8ac <m2m_wifi_cb+0x354>)
    d778:	681b      	ldr	r3, [r3, #0]
    d77a:	220c      	movs	r2, #12
    d77c:	18ba      	adds	r2, r7, r2
    d77e:	0011      	movs	r1, r2
    d780:	2013      	movs	r0, #19
    d782:	4798      	blx	r3
}
    d784:	e0b5      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    d786:	1dfb      	adds	r3, r7, #7
    d788:	781b      	ldrb	r3, [r3, #0]
    d78a:	2b04      	cmp	r3, #4
    d78c:	d116      	bne.n	d7bc <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d78e:	23a8      	movs	r3, #168	; 0xa8
    d790:	18f9      	adds	r1, r7, r3
    d792:	6838      	ldr	r0, [r7, #0]
    d794:	2300      	movs	r3, #0
    d796:	2204      	movs	r2, #4
    d798:	4c43      	ldr	r4, [pc, #268]	; (d8a8 <m2m_wifi_cb+0x350>)
    d79a:	47a0      	blx	r4
    d79c:	1e03      	subs	r3, r0, #0
    d79e:	d000      	beq.n	d7a2 <m2m_wifi_cb+0x24a>
    d7a0:	e0a7      	b.n	d8f2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    d7a2:	4b42      	ldr	r3, [pc, #264]	; (d8ac <m2m_wifi_cb+0x354>)
    d7a4:	681b      	ldr	r3, [r3, #0]
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d100      	bne.n	d7ac <m2m_wifi_cb+0x254>
    d7aa:	e0a2      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    d7ac:	4b3f      	ldr	r3, [pc, #252]	; (d8ac <m2m_wifi_cb+0x354>)
    d7ae:	681b      	ldr	r3, [r3, #0]
    d7b0:	22a8      	movs	r2, #168	; 0xa8
    d7b2:	18ba      	adds	r2, r7, r2
    d7b4:	0011      	movs	r1, r2
    d7b6:	2004      	movs	r0, #4
    d7b8:	4798      	blx	r3
}
    d7ba:	e09a      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    d7bc:	1dfb      	adds	r3, r7, #7
    d7be:	781b      	ldrb	r3, [r3, #0]
    d7c0:	2b65      	cmp	r3, #101	; 0x65
    d7c2:	d116      	bne.n	d7f2 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    d7c4:	23a8      	movs	r3, #168	; 0xa8
    d7c6:	18f9      	adds	r1, r7, r3
    d7c8:	6838      	ldr	r0, [r7, #0]
    d7ca:	2300      	movs	r3, #0
    d7cc:	2204      	movs	r2, #4
    d7ce:	4c36      	ldr	r4, [pc, #216]	; (d8a8 <m2m_wifi_cb+0x350>)
    d7d0:	47a0      	blx	r4
    d7d2:	1e03      	subs	r3, r0, #0
    d7d4:	d000      	beq.n	d7d8 <m2m_wifi_cb+0x280>
    d7d6:	e08c      	b.n	d8f2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
    d7d8:	4b34      	ldr	r3, [pc, #208]	; (d8ac <m2m_wifi_cb+0x354>)
    d7da:	681b      	ldr	r3, [r3, #0]
    d7dc:	2b00      	cmp	r3, #0
    d7de:	d100      	bne.n	d7e2 <m2m_wifi_cb+0x28a>
    d7e0:	e087      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    d7e2:	4b32      	ldr	r3, [pc, #200]	; (d8ac <m2m_wifi_cb+0x354>)
    d7e4:	681b      	ldr	r3, [r3, #0]
    d7e6:	22a8      	movs	r2, #168	; 0xa8
    d7e8:	18ba      	adds	r2, r7, r2
    d7ea:	0011      	movs	r1, r2
    d7ec:	2065      	movs	r0, #101	; 0x65
    d7ee:	4798      	blx	r3
}
    d7f0:	e07f      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    d7f2:	1dfb      	adds	r3, r7, #7
    d7f4:	781b      	ldrb	r3, [r3, #0]
    d7f6:	2b09      	cmp	r3, #9
    d7f8:	d116      	bne.n	d828 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    d7fa:	230c      	movs	r3, #12
    d7fc:	18f9      	adds	r1, r7, r3
    d7fe:	6838      	ldr	r0, [r7, #0]
    d800:	2301      	movs	r3, #1
    d802:	2264      	movs	r2, #100	; 0x64
    d804:	4c28      	ldr	r4, [pc, #160]	; (d8a8 <m2m_wifi_cb+0x350>)
    d806:	47a0      	blx	r4
    d808:	1e03      	subs	r3, r0, #0
    d80a:	d000      	beq.n	d80e <m2m_wifi_cb+0x2b6>
    d80c:	e071      	b.n	d8f2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    d80e:	4b27      	ldr	r3, [pc, #156]	; (d8ac <m2m_wifi_cb+0x354>)
    d810:	681b      	ldr	r3, [r3, #0]
    d812:	2b00      	cmp	r3, #0
    d814:	d100      	bne.n	d818 <m2m_wifi_cb+0x2c0>
    d816:	e06c      	b.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    d818:	4b24      	ldr	r3, [pc, #144]	; (d8ac <m2m_wifi_cb+0x354>)
    d81a:	681b      	ldr	r3, [r3, #0]
    d81c:	220c      	movs	r2, #12
    d81e:	18ba      	adds	r2, r7, r2
    d820:	0011      	movs	r1, r2
    d822:	2009      	movs	r0, #9
    d824:	4798      	blx	r3
}
    d826:	e064      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    d828:	1dfb      	adds	r3, r7, #7
    d82a:	781b      	ldrb	r3, [r3, #0]
    d82c:	2b2a      	cmp	r3, #42	; 0x2a
    d82e:	d114      	bne.n	d85a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    d830:	2378      	movs	r3, #120	; 0x78
    d832:	18f9      	adds	r1, r7, r3
    d834:	6838      	ldr	r0, [r7, #0]
    d836:	2301      	movs	r3, #1
    d838:	2204      	movs	r2, #4
    d83a:	4c1b      	ldr	r4, [pc, #108]	; (d8a8 <m2m_wifi_cb+0x350>)
    d83c:	47a0      	blx	r4
    d83e:	1e03      	subs	r3, r0, #0
    d840:	d157      	bne.n	d8f2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
    d842:	4b1a      	ldr	r3, [pc, #104]	; (d8ac <m2m_wifi_cb+0x354>)
    d844:	681b      	ldr	r3, [r3, #0]
    d846:	2b00      	cmp	r3, #0
    d848:	d053      	beq.n	d8f2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    d84a:	4b18      	ldr	r3, [pc, #96]	; (d8ac <m2m_wifi_cb+0x354>)
    d84c:	681b      	ldr	r3, [r3, #0]
    d84e:	2278      	movs	r2, #120	; 0x78
    d850:	18ba      	adds	r2, r7, r2
    d852:	0011      	movs	r1, r2
    d854:	202a      	movs	r0, #42	; 0x2a
    d856:	4798      	blx	r3
}
    d858:	e04b      	b.n	d8f2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    d85a:	1dfb      	adds	r3, r7, #7
    d85c:	781b      	ldrb	r3, [r3, #0]
    d85e:	2b20      	cmp	r3, #32
    d860:	d134      	bne.n	d8cc <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    d862:	2370      	movs	r3, #112	; 0x70
    d864:	18f9      	adds	r1, r7, r3
    d866:	6838      	ldr	r0, [r7, #0]
    d868:	2300      	movs	r3, #0
    d86a:	2208      	movs	r2, #8
    d86c:	4c0e      	ldr	r4, [pc, #56]	; (d8a8 <m2m_wifi_cb+0x350>)
    d86e:	47a0      	blx	r4
    d870:	1e03      	subs	r3, r0, #0
    d872:	d13e      	bne.n	d8f2 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    d874:	683b      	ldr	r3, [r7, #0]
    d876:	3308      	adds	r3, #8
    d878:	0018      	movs	r0, r3
    d87a:	2370      	movs	r3, #112	; 0x70
    d87c:	18fb      	adds	r3, r7, r3
    d87e:	6819      	ldr	r1, [r3, #0]
    d880:	2370      	movs	r3, #112	; 0x70
    d882:	18fb      	adds	r3, r7, r3
    d884:	889a      	ldrh	r2, [r3, #4]
    d886:	2301      	movs	r3, #1
    d888:	4c07      	ldr	r4, [pc, #28]	; (d8a8 <m2m_wifi_cb+0x350>)
    d88a:	47a0      	blx	r4
    d88c:	1e03      	subs	r3, r0, #0
    d88e:	d130      	bne.n	d8f2 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
    d890:	4b06      	ldr	r3, [pc, #24]	; (d8ac <m2m_wifi_cb+0x354>)
    d892:	681b      	ldr	r3, [r3, #0]
    d894:	2b00      	cmp	r3, #0
    d896:	d02c      	beq.n	d8f2 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    d898:	4b04      	ldr	r3, [pc, #16]	; (d8ac <m2m_wifi_cb+0x354>)
    d89a:	681b      	ldr	r3, [r3, #0]
    d89c:	2270      	movs	r2, #112	; 0x70
    d89e:	18ba      	adds	r2, r7, r2
    d8a0:	0011      	movs	r1, r2
    d8a2:	2020      	movs	r0, #32
    d8a4:	4798      	blx	r3
}
    d8a6:	e024      	b.n	d8f2 <m2m_wifi_cb+0x39a>
    d8a8:	0000d31d 	.word	0x0000d31d
    d8ac:	20003d10 	.word	0x20003d10
    d8b0:	0000c7a1 	.word	0x0000c7a1
    d8b4:	00023a94 	.word	0x00023a94
    d8b8:	00009a6d 	.word	0x00009a6d
    d8bc:	00023aa0 	.word	0x00023aa0
    d8c0:	00023ac0 	.word	0x00023ac0
    d8c4:	20003d0d 	.word	0x20003d0d
    d8c8:	20003d0c 	.word	0x20003d0c
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    d8cc:	2324      	movs	r3, #36	; 0x24
    d8ce:	33ff      	adds	r3, #255	; 0xff
    d8d0:	001a      	movs	r2, r3
    d8d2:	490a      	ldr	r1, [pc, #40]	; (d8fc <m2m_wifi_cb+0x3a4>)
    d8d4:	4b0a      	ldr	r3, [pc, #40]	; (d900 <m2m_wifi_cb+0x3a8>)
    d8d6:	0018      	movs	r0, r3
    d8d8:	4b0a      	ldr	r3, [pc, #40]	; (d904 <m2m_wifi_cb+0x3ac>)
    d8da:	4798      	blx	r3
    d8dc:	1dfb      	adds	r3, r7, #7
    d8de:	781a      	ldrb	r2, [r3, #0]
    d8e0:	4b09      	ldr	r3, [pc, #36]	; (d908 <m2m_wifi_cb+0x3b0>)
    d8e2:	0011      	movs	r1, r2
    d8e4:	0018      	movs	r0, r3
    d8e6:	4b07      	ldr	r3, [pc, #28]	; (d904 <m2m_wifi_cb+0x3ac>)
    d8e8:	4798      	blx	r3
    d8ea:	4b08      	ldr	r3, [pc, #32]	; (d90c <m2m_wifi_cb+0x3b4>)
    d8ec:	0018      	movs	r0, r3
    d8ee:	4b05      	ldr	r3, [pc, #20]	; (d904 <m2m_wifi_cb+0x3ac>)
    d8f0:	4798      	blx	r3
}
    d8f2:	46c0      	nop			; (mov r8, r8)
    d8f4:	46bd      	mov	sp, r7
    d8f6:	b02d      	add	sp, #180	; 0xb4
    d8f8:	bd90      	pop	{r4, r7, pc}
    d8fa:	46c0      	nop			; (mov r8, r8)
    d8fc:	00023e60 	.word	0x00023e60
    d900:	00023ac4 	.word	0x00023ac4
    d904:	00009a6d 	.word	0x00009a6d
    d908:	00023ad8 	.word	0x00023ad8
    d90c:	00023ac0 	.word	0x00023ac0

0000d910 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    d910:	b590      	push	{r4, r7, lr}
    d912:	b091      	sub	sp, #68	; 0x44
    d914:	af02      	add	r7, sp, #8
    d916:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    d918:	2337      	movs	r3, #55	; 0x37
    d91a:	18fb      	adds	r3, r7, r3
    d91c:	2200      	movs	r2, #0
    d91e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    d920:	230b      	movs	r3, #11
    d922:	18fb      	adds	r3, r7, r3
    d924:	2201      	movs	r2, #1
    d926:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    d928:	687b      	ldr	r3, [r7, #4]
    d92a:	2b00      	cmp	r3, #0
    d92c:	d104      	bne.n	d938 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    d92e:	2337      	movs	r3, #55	; 0x37
    d930:	18fb      	adds	r3, r7, r3
    d932:	22f4      	movs	r2, #244	; 0xf4
    d934:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    d936:	e0b3      	b.n	daa0 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    d938:	687b      	ldr	r3, [r7, #4]
    d93a:	681a      	ldr	r2, [r3, #0]
    d93c:	4b5c      	ldr	r3, [pc, #368]	; (dab0 <m2m_wifi_init+0x1a0>)
    d93e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    d940:	4b5c      	ldr	r3, [pc, #368]	; (dab4 <m2m_wifi_init+0x1a4>)
    d942:	2200      	movs	r2, #0
    d944:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    d946:	2337      	movs	r3, #55	; 0x37
    d948:	18fc      	adds	r4, r7, r3
    d94a:	230b      	movs	r3, #11
    d94c:	18fb      	adds	r3, r7, r3
    d94e:	0018      	movs	r0, r3
    d950:	4b59      	ldr	r3, [pc, #356]	; (dab8 <m2m_wifi_init+0x1a8>)
    d952:	4798      	blx	r3
    d954:	0003      	movs	r3, r0
    d956:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    d958:	2337      	movs	r3, #55	; 0x37
    d95a:	18fb      	adds	r3, r7, r3
    d95c:	781b      	ldrb	r3, [r3, #0]
    d95e:	b25b      	sxtb	r3, r3
    d960:	2b00      	cmp	r3, #0
    d962:	d000      	beq.n	d966 <m2m_wifi_init+0x56>
    d964:	e099      	b.n	da9a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    d966:	2337      	movs	r3, #55	; 0x37
    d968:	18fc      	adds	r4, r7, r3
    d96a:	2000      	movs	r0, #0
    d96c:	4b53      	ldr	r3, [pc, #332]	; (dabc <m2m_wifi_init+0x1ac>)
    d96e:	4798      	blx	r3
    d970:	0003      	movs	r3, r0
    d972:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    d974:	2337      	movs	r3, #55	; 0x37
    d976:	18fb      	adds	r3, r7, r3
    d978:	781b      	ldrb	r3, [r3, #0]
    d97a:	b25b      	sxtb	r3, r3
    d97c:	2b00      	cmp	r3, #0
    d97e:	d000      	beq.n	d982 <m2m_wifi_init+0x72>
    d980:	e086      	b.n	da90 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    d982:	4b4f      	ldr	r3, [pc, #316]	; (dac0 <m2m_wifi_init+0x1b0>)
    d984:	0019      	movs	r1, r3
    d986:	2001      	movs	r0, #1
    d988:	4b4e      	ldr	r3, [pc, #312]	; (dac4 <m2m_wifi_init+0x1b4>)
    d98a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    d98c:	2337      	movs	r3, #55	; 0x37
    d98e:	18fc      	adds	r4, r7, r3
    d990:	230c      	movs	r3, #12
    d992:	18fb      	adds	r3, r7, r3
    d994:	0018      	movs	r0, r3
    d996:	4b4c      	ldr	r3, [pc, #304]	; (dac8 <m2m_wifi_init+0x1b8>)
    d998:	4798      	blx	r3
    d99a:	0003      	movs	r3, r0
    d99c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    d99e:	4b4b      	ldr	r3, [pc, #300]	; (dacc <m2m_wifi_init+0x1bc>)
    d9a0:	0018      	movs	r0, r3
    d9a2:	4b4b      	ldr	r3, [pc, #300]	; (dad0 <m2m_wifi_init+0x1c0>)
    d9a4:	4798      	blx	r3
    d9a6:	230c      	movs	r3, #12
    d9a8:	18fb      	adds	r3, r7, r3
    d9aa:	791b      	ldrb	r3, [r3, #4]
    d9ac:	0019      	movs	r1, r3
    d9ae:	230c      	movs	r3, #12
    d9b0:	18fb      	adds	r3, r7, r3
    d9b2:	795b      	ldrb	r3, [r3, #5]
    d9b4:	001a      	movs	r2, r3
    d9b6:	230c      	movs	r3, #12
    d9b8:	18fb      	adds	r3, r7, r3
    d9ba:	799b      	ldrb	r3, [r3, #6]
    d9bc:	001c      	movs	r4, r3
    d9be:	230c      	movs	r3, #12
    d9c0:	18fb      	adds	r3, r7, r3
    d9c2:	8c1b      	ldrh	r3, [r3, #32]
    d9c4:	4843      	ldr	r0, [pc, #268]	; (dad4 <m2m_wifi_init+0x1c4>)
    d9c6:	9300      	str	r3, [sp, #0]
    d9c8:	0023      	movs	r3, r4
    d9ca:	4c41      	ldr	r4, [pc, #260]	; (dad0 <m2m_wifi_init+0x1c0>)
    d9cc:	47a0      	blx	r4
    d9ce:	4b42      	ldr	r3, [pc, #264]	; (dad8 <m2m_wifi_init+0x1c8>)
    d9d0:	0018      	movs	r0, r3
    d9d2:	4b3f      	ldr	r3, [pc, #252]	; (dad0 <m2m_wifi_init+0x1c0>)
    d9d4:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    d9d6:	4b3d      	ldr	r3, [pc, #244]	; (dacc <m2m_wifi_init+0x1bc>)
    d9d8:	0018      	movs	r0, r3
    d9da:	4b3d      	ldr	r3, [pc, #244]	; (dad0 <m2m_wifi_init+0x1c0>)
    d9dc:	4798      	blx	r3
    d9de:	230c      	movs	r3, #12
    d9e0:	18fb      	adds	r3, r7, r3
    d9e2:	3316      	adds	r3, #22
    d9e4:	001a      	movs	r2, r3
    d9e6:	230c      	movs	r3, #12
    d9e8:	18fb      	adds	r3, r7, r3
    d9ea:	330a      	adds	r3, #10
    d9ec:	0019      	movs	r1, r3
    d9ee:	4b3b      	ldr	r3, [pc, #236]	; (dadc <m2m_wifi_init+0x1cc>)
    d9f0:	0018      	movs	r0, r3
    d9f2:	4b37      	ldr	r3, [pc, #220]	; (dad0 <m2m_wifi_init+0x1c0>)
    d9f4:	4798      	blx	r3
    d9f6:	4b38      	ldr	r3, [pc, #224]	; (dad8 <m2m_wifi_init+0x1c8>)
    d9f8:	0018      	movs	r0, r3
    d9fa:	4b35      	ldr	r3, [pc, #212]	; (dad0 <m2m_wifi_init+0x1c0>)
    d9fc:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    d9fe:	4b33      	ldr	r3, [pc, #204]	; (dacc <m2m_wifi_init+0x1bc>)
    da00:	0018      	movs	r0, r3
    da02:	4b33      	ldr	r3, [pc, #204]	; (dad0 <m2m_wifi_init+0x1c0>)
    da04:	4798      	blx	r3
    da06:	230c      	movs	r3, #12
    da08:	18fb      	adds	r3, r7, r3
    da0a:	79db      	ldrb	r3, [r3, #7]
    da0c:	0019      	movs	r1, r3
    da0e:	230c      	movs	r3, #12
    da10:	18fb      	adds	r3, r7, r3
    da12:	7a1b      	ldrb	r3, [r3, #8]
    da14:	001a      	movs	r2, r3
    da16:	230c      	movs	r3, #12
    da18:	18fb      	adds	r3, r7, r3
    da1a:	7a5b      	ldrb	r3, [r3, #9]
    da1c:	4830      	ldr	r0, [pc, #192]	; (dae0 <m2m_wifi_init+0x1d0>)
    da1e:	4c2c      	ldr	r4, [pc, #176]	; (dad0 <m2m_wifi_init+0x1c0>)
    da20:	47a0      	blx	r4
    da22:	4b2d      	ldr	r3, [pc, #180]	; (dad8 <m2m_wifi_init+0x1c8>)
    da24:	0018      	movs	r0, r3
    da26:	4b2a      	ldr	r3, [pc, #168]	; (dad0 <m2m_wifi_init+0x1c0>)
    da28:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    da2a:	4b28      	ldr	r3, [pc, #160]	; (dacc <m2m_wifi_init+0x1bc>)
    da2c:	0018      	movs	r0, r3
    da2e:	4b28      	ldr	r3, [pc, #160]	; (dad0 <m2m_wifi_init+0x1c0>)
    da30:	4798      	blx	r3
    da32:	482c      	ldr	r0, [pc, #176]	; (dae4 <m2m_wifi_init+0x1d4>)
    da34:	2304      	movs	r3, #4
    da36:	2205      	movs	r2, #5
    da38:	2113      	movs	r1, #19
    da3a:	4c25      	ldr	r4, [pc, #148]	; (dad0 <m2m_wifi_init+0x1c0>)
    da3c:	47a0      	blx	r4
    da3e:	4b26      	ldr	r3, [pc, #152]	; (dad8 <m2m_wifi_init+0x1c8>)
    da40:	0018      	movs	r0, r3
    da42:	4b23      	ldr	r3, [pc, #140]	; (dad0 <m2m_wifi_init+0x1c0>)
    da44:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    da46:	4b21      	ldr	r3, [pc, #132]	; (dacc <m2m_wifi_init+0x1bc>)
    da48:	0018      	movs	r0, r3
    da4a:	4b21      	ldr	r3, [pc, #132]	; (dad0 <m2m_wifi_init+0x1c0>)
    da4c:	4798      	blx	r3
    da4e:	4a26      	ldr	r2, [pc, #152]	; (dae8 <m2m_wifi_init+0x1d8>)
    da50:	4926      	ldr	r1, [pc, #152]	; (daec <m2m_wifi_init+0x1dc>)
    da52:	4b27      	ldr	r3, [pc, #156]	; (daf0 <m2m_wifi_init+0x1e0>)
    da54:	0018      	movs	r0, r3
    da56:	4b1e      	ldr	r3, [pc, #120]	; (dad0 <m2m_wifi_init+0x1c0>)
    da58:	4798      	blx	r3
    da5a:	4b1f      	ldr	r3, [pc, #124]	; (dad8 <m2m_wifi_init+0x1c8>)
    da5c:	0018      	movs	r0, r3
    da5e:	4b1c      	ldr	r3, [pc, #112]	; (dad0 <m2m_wifi_init+0x1c0>)
    da60:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    da62:	2337      	movs	r3, #55	; 0x37
    da64:	18fb      	adds	r3, r7, r3
    da66:	781b      	ldrb	r3, [r3, #0]
    da68:	b25b      	sxtb	r3, r3
    da6a:	330d      	adds	r3, #13
    da6c:	d117      	bne.n	da9e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    da6e:	23e8      	movs	r3, #232	; 0xe8
    da70:	33ff      	adds	r3, #255	; 0xff
    da72:	001a      	movs	r2, r3
    da74:	491f      	ldr	r1, [pc, #124]	; (daf4 <m2m_wifi_init+0x1e4>)
    da76:	4b20      	ldr	r3, [pc, #128]	; (daf8 <m2m_wifi_init+0x1e8>)
    da78:	0018      	movs	r0, r3
    da7a:	4b15      	ldr	r3, [pc, #84]	; (dad0 <m2m_wifi_init+0x1c0>)
    da7c:	4798      	blx	r3
    da7e:	4b1f      	ldr	r3, [pc, #124]	; (dafc <m2m_wifi_init+0x1ec>)
    da80:	0018      	movs	r0, r3
    da82:	4b13      	ldr	r3, [pc, #76]	; (dad0 <m2m_wifi_init+0x1c0>)
    da84:	4798      	blx	r3
    da86:	4b14      	ldr	r3, [pc, #80]	; (dad8 <m2m_wifi_init+0x1c8>)
    da88:	0018      	movs	r0, r3
    da8a:	4b11      	ldr	r3, [pc, #68]	; (dad0 <m2m_wifi_init+0x1c0>)
    da8c:	4798      	blx	r3
	}

	goto _EXIT0;
    da8e:	e006      	b.n	da9e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    da90:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    da92:	2000      	movs	r0, #0
    da94:	4b1a      	ldr	r3, [pc, #104]	; (db00 <m2m_wifi_init+0x1f0>)
    da96:	4798      	blx	r3
    da98:	e002      	b.n	daa0 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    da9a:	46c0      	nop			; (mov r8, r8)
    da9c:	e000      	b.n	daa0 <m2m_wifi_init+0x190>
	goto _EXIT0;
    da9e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    daa0:	2337      	movs	r3, #55	; 0x37
    daa2:	18fb      	adds	r3, r7, r3
    daa4:	781b      	ldrb	r3, [r3, #0]
    daa6:	b25b      	sxtb	r3, r3
}
    daa8:	0018      	movs	r0, r3
    daaa:	46bd      	mov	sp, r7
    daac:	b00f      	add	sp, #60	; 0x3c
    daae:	bd90      	pop	{r4, r7, pc}
    dab0:	20003d10 	.word	0x20003d10
    dab4:	20003d0d 	.word	0x20003d0d
    dab8:	0000ec35 	.word	0x0000ec35
    dabc:	0000c9b9 	.word	0x0000c9b9
    dac0:	0000d559 	.word	0x0000d559
    dac4:	0000d49d 	.word	0x0000d49d
    dac8:	0000ea69 	.word	0x0000ea69
    dacc:	00023a94 	.word	0x00023a94
    dad0:	00009a6d 	.word	0x00009a6d
    dad4:	00023c38 	.word	0x00023c38
    dad8:	00023ac0 	.word	0x00023ac0
    dadc:	00023c60 	.word	0x00023c60
    dae0:	00023c7c 	.word	0x00023c7c
    dae4:	00023ca0 	.word	0x00023ca0
    dae8:	00023cb8 	.word	0x00023cb8
    daec:	00023cc4 	.word	0x00023cc4
    daf0:	00023cd0 	.word	0x00023cd0
    daf4:	00023e6c 	.word	0x00023e6c
    daf8:	00023ac4 	.word	0x00023ac4
    dafc:	00023ce8 	.word	0x00023ce8
    db00:	0000edc5 	.word	0x0000edc5

0000db04 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    db04:	b580      	push	{r7, lr}
    db06:	b082      	sub	sp, #8
    db08:	af00      	add	r7, sp, #0
    db0a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    db0c:	4b03      	ldr	r3, [pc, #12]	; (db1c <m2m_wifi_handle_events+0x18>)
    db0e:	4798      	blx	r3
    db10:	0003      	movs	r3, r0
}
    db12:	0018      	movs	r0, r3
    db14:	46bd      	mov	sp, r7
    db16:	b002      	add	sp, #8
    db18:	bd80      	pop	{r7, pc}
    db1a:	46c0      	nop			; (mov r8, r8)
    db1c:	0000d27d 	.word	0x0000d27d

0000db20 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    db20:	b590      	push	{r4, r7, lr}
    db22:	b087      	sub	sp, #28
    db24:	af02      	add	r7, sp, #8
    db26:	60f8      	str	r0, [r7, #12]
    db28:	0008      	movs	r0, r1
    db2a:	0011      	movs	r1, r2
    db2c:	607b      	str	r3, [r7, #4]
    db2e:	230b      	movs	r3, #11
    db30:	18fb      	adds	r3, r7, r3
    db32:	1c02      	adds	r2, r0, #0
    db34:	701a      	strb	r2, [r3, #0]
    db36:	230a      	movs	r3, #10
    db38:	18fb      	adds	r3, r7, r3
    db3a:	1c0a      	adds	r2, r1, #0
    db3c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    db3e:	687c      	ldr	r4, [r7, #4]
    db40:	230a      	movs	r3, #10
    db42:	18fb      	adds	r3, r7, r3
    db44:	781a      	ldrb	r2, [r3, #0]
    db46:	230b      	movs	r3, #11
    db48:	18fb      	adds	r3, r7, r3
    db4a:	7819      	ldrb	r1, [r3, #0]
    db4c:	68f8      	ldr	r0, [r7, #12]
    db4e:	2300      	movs	r3, #0
    db50:	9301      	str	r3, [sp, #4]
    db52:	2320      	movs	r3, #32
    db54:	18fb      	adds	r3, r7, r3
    db56:	881b      	ldrh	r3, [r3, #0]
    db58:	9300      	str	r3, [sp, #0]
    db5a:	0023      	movs	r3, r4
    db5c:	4c03      	ldr	r4, [pc, #12]	; (db6c <m2m_wifi_connect+0x4c>)
    db5e:	47a0      	blx	r4
    db60:	0003      	movs	r3, r0
}
    db62:	0018      	movs	r0, r3
    db64:	46bd      	mov	sp, r7
    db66:	b005      	add	sp, #20
    db68:	bd90      	pop	{r4, r7, pc}
    db6a:	46c0      	nop			; (mov r8, r8)
    db6c:	0000db71 	.word	0x0000db71

0000db70 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    db70:	b5b0      	push	{r4, r5, r7, lr}
    db72:	b0aa      	sub	sp, #168	; 0xa8
    db74:	af04      	add	r7, sp, #16
    db76:	60f8      	str	r0, [r7, #12]
    db78:	0008      	movs	r0, r1
    db7a:	0011      	movs	r1, r2
    db7c:	607b      	str	r3, [r7, #4]
    db7e:	230b      	movs	r3, #11
    db80:	18fb      	adds	r3, r7, r3
    db82:	1c02      	adds	r2, r0, #0
    db84:	701a      	strb	r2, [r3, #0]
    db86:	230a      	movs	r3, #10
    db88:	18fb      	adds	r3, r7, r3
    db8a:	1c0a      	adds	r2, r1, #0
    db8c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    db8e:	2397      	movs	r3, #151	; 0x97
    db90:	18fb      	adds	r3, r7, r3
    db92:	2200      	movs	r2, #0
    db94:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    db96:	230a      	movs	r3, #10
    db98:	18fb      	adds	r3, r7, r3
    db9a:	781b      	ldrb	r3, [r3, #0]
    db9c:	2b01      	cmp	r3, #1
    db9e:	d100      	bne.n	dba2 <m2m_wifi_connect_sc+0x32>
    dba0:	e085      	b.n	dcae <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
    dba2:	687b      	ldr	r3, [r7, #4]
    dba4:	2b00      	cmp	r3, #0
    dba6:	d112      	bne.n	dbce <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
    dba8:	4ad8      	ldr	r2, [pc, #864]	; (df0c <m2m_wifi_connect_sc+0x39c>)
    dbaa:	49d9      	ldr	r1, [pc, #868]	; (df10 <m2m_wifi_connect_sc+0x3a0>)
    dbac:	4bd9      	ldr	r3, [pc, #868]	; (df14 <m2m_wifi_connect_sc+0x3a4>)
    dbae:	0018      	movs	r0, r3
    dbb0:	4bd9      	ldr	r3, [pc, #868]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dbb2:	4798      	blx	r3
    dbb4:	4bd9      	ldr	r3, [pc, #868]	; (df1c <m2m_wifi_connect_sc+0x3ac>)
    dbb6:	0018      	movs	r0, r3
    dbb8:	4bd7      	ldr	r3, [pc, #860]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dbba:	4798      	blx	r3
    dbbc:	4bd8      	ldr	r3, [pc, #864]	; (df20 <m2m_wifi_connect_sc+0x3b0>)
    dbbe:	0018      	movs	r0, r3
    dbc0:	4bd5      	ldr	r3, [pc, #852]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dbc2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    dbc4:	2397      	movs	r3, #151	; 0x97
    dbc6:	18fb      	adds	r3, r7, r3
    dbc8:	22f4      	movs	r2, #244	; 0xf4
    dbca:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    dbcc:	e1f9      	b.n	dfc2 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    dbce:	230a      	movs	r3, #10
    dbd0:	18fb      	adds	r3, r7, r3
    dbd2:	781b      	ldrb	r3, [r3, #0]
    dbd4:	2b02      	cmp	r3, #2
    dbd6:	d16a      	bne.n	dcae <m2m_wifi_connect_sc+0x13e>
    dbd8:	687b      	ldr	r3, [r7, #4]
    dbda:	0018      	movs	r0, r3
    dbdc:	4bd1      	ldr	r3, [pc, #836]	; (df24 <m2m_wifi_connect_sc+0x3b4>)
    dbde:	4798      	blx	r3
    dbe0:	0003      	movs	r3, r0
    dbe2:	2b40      	cmp	r3, #64	; 0x40
    dbe4:	d163      	bne.n	dcae <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
    dbe6:	2396      	movs	r3, #150	; 0x96
    dbe8:	18fb      	adds	r3, r7, r3
    dbea:	2200      	movs	r2, #0
    dbec:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    dbee:	687b      	ldr	r3, [r7, #4]
    dbf0:	2290      	movs	r2, #144	; 0x90
    dbf2:	18ba      	adds	r2, r7, r2
    dbf4:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    dbf6:	e055      	b.n	dca4 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    dbf8:	2396      	movs	r3, #150	; 0x96
    dbfa:	18fb      	adds	r3, r7, r3
    dbfc:	781b      	ldrb	r3, [r3, #0]
    dbfe:	2290      	movs	r2, #144	; 0x90
    dc00:	18ba      	adds	r2, r7, r2
    dc02:	6812      	ldr	r2, [r2, #0]
    dc04:	18d3      	adds	r3, r2, r3
    dc06:	781b      	ldrb	r3, [r3, #0]
    dc08:	2b2f      	cmp	r3, #47	; 0x2f
    dc0a:	d931      	bls.n	dc70 <m2m_wifi_connect_sc+0x100>
    dc0c:	2396      	movs	r3, #150	; 0x96
    dc0e:	18fb      	adds	r3, r7, r3
    dc10:	781b      	ldrb	r3, [r3, #0]
    dc12:	2290      	movs	r2, #144	; 0x90
    dc14:	18ba      	adds	r2, r7, r2
    dc16:	6812      	ldr	r2, [r2, #0]
    dc18:	18d3      	adds	r3, r2, r3
    dc1a:	781b      	ldrb	r3, [r3, #0]
    dc1c:	2b39      	cmp	r3, #57	; 0x39
    dc1e:	d909      	bls.n	dc34 <m2m_wifi_connect_sc+0xc4>
    dc20:	2396      	movs	r3, #150	; 0x96
    dc22:	18fb      	adds	r3, r7, r3
    dc24:	781b      	ldrb	r3, [r3, #0]
    dc26:	2290      	movs	r2, #144	; 0x90
    dc28:	18ba      	adds	r2, r7, r2
    dc2a:	6812      	ldr	r2, [r2, #0]
    dc2c:	18d3      	adds	r3, r2, r3
    dc2e:	781b      	ldrb	r3, [r3, #0]
    dc30:	2b40      	cmp	r3, #64	; 0x40
    dc32:	d91d      	bls.n	dc70 <m2m_wifi_connect_sc+0x100>
    dc34:	2396      	movs	r3, #150	; 0x96
    dc36:	18fb      	adds	r3, r7, r3
    dc38:	781b      	ldrb	r3, [r3, #0]
    dc3a:	2290      	movs	r2, #144	; 0x90
    dc3c:	18ba      	adds	r2, r7, r2
    dc3e:	6812      	ldr	r2, [r2, #0]
    dc40:	18d3      	adds	r3, r2, r3
    dc42:	781b      	ldrb	r3, [r3, #0]
    dc44:	2b46      	cmp	r3, #70	; 0x46
    dc46:	d909      	bls.n	dc5c <m2m_wifi_connect_sc+0xec>
    dc48:	2396      	movs	r3, #150	; 0x96
    dc4a:	18fb      	adds	r3, r7, r3
    dc4c:	781b      	ldrb	r3, [r3, #0]
    dc4e:	2290      	movs	r2, #144	; 0x90
    dc50:	18ba      	adds	r2, r7, r2
    dc52:	6812      	ldr	r2, [r2, #0]
    dc54:	18d3      	adds	r3, r2, r3
    dc56:	781b      	ldrb	r3, [r3, #0]
    dc58:	2b60      	cmp	r3, #96	; 0x60
    dc5a:	d909      	bls.n	dc70 <m2m_wifi_connect_sc+0x100>
    dc5c:	2396      	movs	r3, #150	; 0x96
    dc5e:	18fb      	adds	r3, r7, r3
    dc60:	781b      	ldrb	r3, [r3, #0]
    dc62:	2290      	movs	r2, #144	; 0x90
    dc64:	18ba      	adds	r2, r7, r2
    dc66:	6812      	ldr	r2, [r2, #0]
    dc68:	18d3      	adds	r3, r2, r3
    dc6a:	781b      	ldrb	r3, [r3, #0]
    dc6c:	2b66      	cmp	r3, #102	; 0x66
    dc6e:	d912      	bls.n	dc96 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
    dc70:	4aad      	ldr	r2, [pc, #692]	; (df28 <m2m_wifi_connect_sc+0x3b8>)
    dc72:	49a7      	ldr	r1, [pc, #668]	; (df10 <m2m_wifi_connect_sc+0x3a0>)
    dc74:	4ba7      	ldr	r3, [pc, #668]	; (df14 <m2m_wifi_connect_sc+0x3a4>)
    dc76:	0018      	movs	r0, r3
    dc78:	4ba7      	ldr	r3, [pc, #668]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dc7a:	4798      	blx	r3
    dc7c:	4bab      	ldr	r3, [pc, #684]	; (df2c <m2m_wifi_connect_sc+0x3bc>)
    dc7e:	0018      	movs	r0, r3
    dc80:	4ba5      	ldr	r3, [pc, #660]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dc82:	4798      	blx	r3
    dc84:	4ba6      	ldr	r3, [pc, #664]	; (df20 <m2m_wifi_connect_sc+0x3b0>)
    dc86:	0018      	movs	r0, r3
    dc88:	4ba3      	ldr	r3, [pc, #652]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dc8a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    dc8c:	2397      	movs	r3, #151	; 0x97
    dc8e:	18fb      	adds	r3, r7, r3
    dc90:	22f4      	movs	r2, #244	; 0xf4
    dc92:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    dc94:	e195      	b.n	dfc2 <m2m_wifi_connect_sc+0x452>
				}
				i++;
    dc96:	2396      	movs	r3, #150	; 0x96
    dc98:	18fb      	adds	r3, r7, r3
    dc9a:	781a      	ldrb	r2, [r3, #0]
    dc9c:	2396      	movs	r3, #150	; 0x96
    dc9e:	18fb      	adds	r3, r7, r3
    dca0:	3201      	adds	r2, #1
    dca2:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    dca4:	2396      	movs	r3, #150	; 0x96
    dca6:	18fb      	adds	r3, r7, r3
    dca8:	781b      	ldrb	r3, [r3, #0]
    dcaa:	2b3f      	cmp	r3, #63	; 0x3f
    dcac:	d9a4      	bls.n	dbf8 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    dcae:	230b      	movs	r3, #11
    dcb0:	18fb      	adds	r3, r7, r3
    dcb2:	781b      	ldrb	r3, [r3, #0]
    dcb4:	2b00      	cmp	r3, #0
    dcb6:	d004      	beq.n	dcc2 <m2m_wifi_connect_sc+0x152>
    dcb8:	230b      	movs	r3, #11
    dcba:	18fb      	adds	r3, r7, r3
    dcbc:	781b      	ldrb	r3, [r3, #0]
    dcbe:	2b20      	cmp	r3, #32
    dcc0:	d913      	bls.n	dcea <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
    dcc2:	238c      	movs	r3, #140	; 0x8c
    dcc4:	009a      	lsls	r2, r3, #2
    dcc6:	4992      	ldr	r1, [pc, #584]	; (df10 <m2m_wifi_connect_sc+0x3a0>)
    dcc8:	4b92      	ldr	r3, [pc, #584]	; (df14 <m2m_wifi_connect_sc+0x3a4>)
    dcca:	0018      	movs	r0, r3
    dccc:	4b92      	ldr	r3, [pc, #584]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dcce:	4798      	blx	r3
    dcd0:	4b97      	ldr	r3, [pc, #604]	; (df30 <m2m_wifi_connect_sc+0x3c0>)
    dcd2:	0018      	movs	r0, r3
    dcd4:	4b90      	ldr	r3, [pc, #576]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dcd6:	4798      	blx	r3
    dcd8:	4b91      	ldr	r3, [pc, #580]	; (df20 <m2m_wifi_connect_sc+0x3b0>)
    dcda:	0018      	movs	r0, r3
    dcdc:	4b8e      	ldr	r3, [pc, #568]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dcde:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    dce0:	2397      	movs	r3, #151	; 0x97
    dce2:	18fb      	adds	r3, r7, r3
    dce4:	22f4      	movs	r2, #244	; 0xf4
    dce6:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    dce8:	e16b      	b.n	dfc2 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    dcea:	23a8      	movs	r3, #168	; 0xa8
    dcec:	18fb      	adds	r3, r7, r3
    dcee:	881b      	ldrh	r3, [r3, #0]
    dcf0:	2b00      	cmp	r3, #0
    dcf2:	d004      	beq.n	dcfe <m2m_wifi_connect_sc+0x18e>
    dcf4:	23a8      	movs	r3, #168	; 0xa8
    dcf6:	18fb      	adds	r3, r7, r3
    dcf8:	881b      	ldrh	r3, [r3, #0]
    dcfa:	2b0e      	cmp	r3, #14
    dcfc:	d917      	bls.n	dd2e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    dcfe:	23a8      	movs	r3, #168	; 0xa8
    dd00:	18fb      	adds	r3, r7, r3
    dd02:	881b      	ldrh	r3, [r3, #0]
    dd04:	2bff      	cmp	r3, #255	; 0xff
    dd06:	d012      	beq.n	dd2e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
    dd08:	4a8a      	ldr	r2, [pc, #552]	; (df34 <m2m_wifi_connect_sc+0x3c4>)
    dd0a:	4981      	ldr	r1, [pc, #516]	; (df10 <m2m_wifi_connect_sc+0x3a0>)
    dd0c:	4b81      	ldr	r3, [pc, #516]	; (df14 <m2m_wifi_connect_sc+0x3a4>)
    dd0e:	0018      	movs	r0, r3
    dd10:	4b81      	ldr	r3, [pc, #516]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dd12:	4798      	blx	r3
    dd14:	4b88      	ldr	r3, [pc, #544]	; (df38 <m2m_wifi_connect_sc+0x3c8>)
    dd16:	0018      	movs	r0, r3
    dd18:	4b7f      	ldr	r3, [pc, #508]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dd1a:	4798      	blx	r3
    dd1c:	4b80      	ldr	r3, [pc, #512]	; (df20 <m2m_wifi_connect_sc+0x3b0>)
    dd1e:	0018      	movs	r0, r3
    dd20:	4b7d      	ldr	r3, [pc, #500]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dd22:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    dd24:	2397      	movs	r3, #151	; 0x97
    dd26:	18fb      	adds	r3, r7, r3
    dd28:	22f4      	movs	r2, #244	; 0xf4
    dd2a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    dd2c:	e149      	b.n	dfc2 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    dd2e:	230b      	movs	r3, #11
    dd30:	18fb      	adds	r3, r7, r3
    dd32:	781a      	ldrb	r2, [r3, #0]
    dd34:	68f9      	ldr	r1, [r7, #12]
    dd36:	2314      	movs	r3, #20
    dd38:	18fb      	adds	r3, r7, r3
    dd3a:	3346      	adds	r3, #70	; 0x46
    dd3c:	0018      	movs	r0, r3
    dd3e:	4b7f      	ldr	r3, [pc, #508]	; (df3c <m2m_wifi_connect_sc+0x3cc>)
    dd40:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    dd42:	230b      	movs	r3, #11
    dd44:	18fb      	adds	r3, r7, r3
    dd46:	781b      	ldrb	r3, [r3, #0]
    dd48:	2214      	movs	r2, #20
    dd4a:	18ba      	adds	r2, r7, r2
    dd4c:	2146      	movs	r1, #70	; 0x46
    dd4e:	18d3      	adds	r3, r2, r3
    dd50:	185b      	adds	r3, r3, r1
    dd52:	2200      	movs	r2, #0
    dd54:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    dd56:	2314      	movs	r3, #20
    dd58:	18fb      	adds	r3, r7, r3
    dd5a:	22a8      	movs	r2, #168	; 0xa8
    dd5c:	18ba      	adds	r2, r7, r2
    dd5e:	2144      	movs	r1, #68	; 0x44
    dd60:	8812      	ldrh	r2, [r2, #0]
    dd62:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    dd64:	23ac      	movs	r3, #172	; 0xac
    dd66:	18fb      	adds	r3, r7, r3
    dd68:	781b      	ldrb	r3, [r3, #0]
    dd6a:	1e5a      	subs	r2, r3, #1
    dd6c:	4193      	sbcs	r3, r2
    dd6e:	b2db      	uxtb	r3, r3
    dd70:	0019      	movs	r1, r3
    dd72:	2314      	movs	r3, #20
    dd74:	18fb      	adds	r3, r7, r3
    dd76:	2267      	movs	r2, #103	; 0x67
    dd78:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    dd7a:	2314      	movs	r3, #20
    dd7c:	18fb      	adds	r3, r7, r3
    dd7e:	228c      	movs	r2, #140	; 0x8c
    dd80:	18ba      	adds	r2, r7, r2
    dd82:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    dd84:	238c      	movs	r3, #140	; 0x8c
    dd86:	18fb      	adds	r3, r7, r3
    dd88:	681b      	ldr	r3, [r3, #0]
    dd8a:	220a      	movs	r2, #10
    dd8c:	18ba      	adds	r2, r7, r2
    dd8e:	2141      	movs	r1, #65	; 0x41
    dd90:	7812      	ldrb	r2, [r2, #0]
    dd92:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    dd94:	230a      	movs	r3, #10
    dd96:	18fb      	adds	r3, r7, r3
    dd98:	781b      	ldrb	r3, [r3, #0]
    dd9a:	2b03      	cmp	r3, #3
    dd9c:	d000      	beq.n	dda0 <m2m_wifi_connect_sc+0x230>
    dd9e:	e07d      	b.n	de9c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    dda0:	687b      	ldr	r3, [r7, #4]
    dda2:	2288      	movs	r2, #136	; 0x88
    dda4:	18ba      	adds	r2, r7, r2
    dda6:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    dda8:	238c      	movs	r3, #140	; 0x8c
    ddaa:	18fb      	adds	r3, r7, r3
    ddac:	681b      	ldr	r3, [r3, #0]
    ddae:	2284      	movs	r2, #132	; 0x84
    ddb0:	18ba      	adds	r2, r7, r2
    ddb2:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    ddb4:	2388      	movs	r3, #136	; 0x88
    ddb6:	18fb      	adds	r3, r7, r3
    ddb8:	681b      	ldr	r3, [r3, #0]
    ddba:	781b      	ldrb	r3, [r3, #0]
    ddbc:	3b01      	subs	r3, #1
    ddbe:	b2da      	uxtb	r2, r3
    ddc0:	2384      	movs	r3, #132	; 0x84
    ddc2:	18fb      	adds	r3, r7, r3
    ddc4:	681b      	ldr	r3, [r3, #0]
    ddc6:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    ddc8:	2384      	movs	r3, #132	; 0x84
    ddca:	18fb      	adds	r3, r7, r3
    ddcc:	681b      	ldr	r3, [r3, #0]
    ddce:	781b      	ldrb	r3, [r3, #0]
    ddd0:	2b03      	cmp	r3, #3
    ddd2:	d919      	bls.n	de08 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    ddd4:	2394      	movs	r3, #148	; 0x94
    ddd6:	009a      	lsls	r2, r3, #2
    ddd8:	494d      	ldr	r1, [pc, #308]	; (df10 <m2m_wifi_connect_sc+0x3a0>)
    ddda:	4b4e      	ldr	r3, [pc, #312]	; (df14 <m2m_wifi_connect_sc+0x3a4>)
    dddc:	0018      	movs	r0, r3
    ddde:	4b4e      	ldr	r3, [pc, #312]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dde0:	4798      	blx	r3
    dde2:	2384      	movs	r3, #132	; 0x84
    dde4:	18fb      	adds	r3, r7, r3
    dde6:	681b      	ldr	r3, [r3, #0]
    dde8:	781b      	ldrb	r3, [r3, #0]
    ddea:	001a      	movs	r2, r3
    ddec:	4b54      	ldr	r3, [pc, #336]	; (df40 <m2m_wifi_connect_sc+0x3d0>)
    ddee:	0011      	movs	r1, r2
    ddf0:	0018      	movs	r0, r3
    ddf2:	4b49      	ldr	r3, [pc, #292]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    ddf4:	4798      	blx	r3
    ddf6:	4b4a      	ldr	r3, [pc, #296]	; (df20 <m2m_wifi_connect_sc+0x3b0>)
    ddf8:	0018      	movs	r0, r3
    ddfa:	4b47      	ldr	r3, [pc, #284]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    ddfc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    ddfe:	2397      	movs	r3, #151	; 0x97
    de00:	18fb      	adds	r3, r7, r3
    de02:	22f4      	movs	r2, #244	; 0xf4
    de04:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    de06:	e0dc      	b.n	dfc2 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    de08:	2388      	movs	r3, #136	; 0x88
    de0a:	18fb      	adds	r3, r7, r3
    de0c:	681b      	ldr	r3, [r3, #0]
    de0e:	785b      	ldrb	r3, [r3, #1]
    de10:	3b01      	subs	r3, #1
    de12:	b2da      	uxtb	r2, r3
    de14:	2384      	movs	r3, #132	; 0x84
    de16:	18fb      	adds	r3, r7, r3
    de18:	681b      	ldr	r3, [r3, #0]
    de1a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    de1c:	2384      	movs	r3, #132	; 0x84
    de1e:	18fb      	adds	r3, r7, r3
    de20:	681b      	ldr	r3, [r3, #0]
    de22:	785b      	ldrb	r3, [r3, #1]
    de24:	2b0a      	cmp	r3, #10
    de26:	d01e      	beq.n	de66 <m2m_wifi_connect_sc+0x2f6>
    de28:	2384      	movs	r3, #132	; 0x84
    de2a:	18fb      	adds	r3, r7, r3
    de2c:	681b      	ldr	r3, [r3, #0]
    de2e:	785b      	ldrb	r3, [r3, #1]
    de30:	2b1a      	cmp	r3, #26
    de32:	d018      	beq.n	de66 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    de34:	4a43      	ldr	r2, [pc, #268]	; (df44 <m2m_wifi_connect_sc+0x3d4>)
    de36:	4936      	ldr	r1, [pc, #216]	; (df10 <m2m_wifi_connect_sc+0x3a0>)
    de38:	4b36      	ldr	r3, [pc, #216]	; (df14 <m2m_wifi_connect_sc+0x3a4>)
    de3a:	0018      	movs	r0, r3
    de3c:	4b36      	ldr	r3, [pc, #216]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    de3e:	4798      	blx	r3
    de40:	2384      	movs	r3, #132	; 0x84
    de42:	18fb      	adds	r3, r7, r3
    de44:	681b      	ldr	r3, [r3, #0]
    de46:	785b      	ldrb	r3, [r3, #1]
    de48:	001a      	movs	r2, r3
    de4a:	4b3f      	ldr	r3, [pc, #252]	; (df48 <m2m_wifi_connect_sc+0x3d8>)
    de4c:	0011      	movs	r1, r2
    de4e:	0018      	movs	r0, r3
    de50:	4b31      	ldr	r3, [pc, #196]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    de52:	4798      	blx	r3
    de54:	4b32      	ldr	r3, [pc, #200]	; (df20 <m2m_wifi_connect_sc+0x3b0>)
    de56:	0018      	movs	r0, r3
    de58:	4b2f      	ldr	r3, [pc, #188]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    de5a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    de5c:	2397      	movs	r3, #151	; 0x97
    de5e:	18fb      	adds	r3, r7, r3
    de60:	22f4      	movs	r2, #244	; 0xf4
    de62:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    de64:	e0ad      	b.n	dfc2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    de66:	2384      	movs	r3, #132	; 0x84
    de68:	18fb      	adds	r3, r7, r3
    de6a:	681b      	ldr	r3, [r3, #0]
    de6c:	1c98      	adds	r0, r3, #2
    de6e:	2388      	movs	r3, #136	; 0x88
    de70:	18fb      	adds	r3, r7, r3
    de72:	681b      	ldr	r3, [r3, #0]
    de74:	1c99      	adds	r1, r3, #2
    de76:	2388      	movs	r3, #136	; 0x88
    de78:	18fb      	adds	r3, r7, r3
    de7a:	681b      	ldr	r3, [r3, #0]
    de7c:	785b      	ldrb	r3, [r3, #1]
    de7e:	001a      	movs	r2, r3
    de80:	4b2e      	ldr	r3, [pc, #184]	; (df3c <m2m_wifi_connect_sc+0x3cc>)
    de82:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    de84:	2388      	movs	r3, #136	; 0x88
    de86:	18fb      	adds	r3, r7, r3
    de88:	681b      	ldr	r3, [r3, #0]
    de8a:	785b      	ldrb	r3, [r3, #1]
    de8c:	001a      	movs	r2, r3
    de8e:	2384      	movs	r3, #132	; 0x84
    de90:	18fb      	adds	r3, r7, r3
    de92:	681b      	ldr	r3, [r3, #0]
    de94:	189b      	adds	r3, r3, r2
    de96:	2200      	movs	r2, #0
    de98:	709a      	strb	r2, [r3, #2]
    de9a:	e081      	b.n	dfa0 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    de9c:	230a      	movs	r3, #10
    de9e:	18fb      	adds	r3, r7, r3
    dea0:	781b      	ldrb	r3, [r3, #0]
    dea2:	2b02      	cmp	r3, #2
    dea4:	d156      	bne.n	df54 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    dea6:	2382      	movs	r3, #130	; 0x82
    dea8:	18fc      	adds	r4, r7, r3
    deaa:	687b      	ldr	r3, [r7, #4]
    deac:	0018      	movs	r0, r3
    deae:	4b1d      	ldr	r3, [pc, #116]	; (df24 <m2m_wifi_connect_sc+0x3b4>)
    deb0:	4798      	blx	r3
    deb2:	0003      	movs	r3, r0
    deb4:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    deb6:	2382      	movs	r3, #130	; 0x82
    deb8:	18fb      	adds	r3, r7, r3
    deba:	881b      	ldrh	r3, [r3, #0]
    debc:	2b00      	cmp	r3, #0
    debe:	d004      	beq.n	deca <m2m_wifi_connect_sc+0x35a>
    dec0:	2382      	movs	r3, #130	; 0x82
    dec2:	18fb      	adds	r3, r7, r3
    dec4:	881b      	ldrh	r3, [r3, #0]
    dec6:	2b40      	cmp	r3, #64	; 0x40
    dec8:	d912      	bls.n	def0 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
    deca:	4a20      	ldr	r2, [pc, #128]	; (df4c <m2m_wifi_connect_sc+0x3dc>)
    decc:	4910      	ldr	r1, [pc, #64]	; (df10 <m2m_wifi_connect_sc+0x3a0>)
    dece:	4b11      	ldr	r3, [pc, #68]	; (df14 <m2m_wifi_connect_sc+0x3a4>)
    ded0:	0018      	movs	r0, r3
    ded2:	4b11      	ldr	r3, [pc, #68]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    ded4:	4798      	blx	r3
    ded6:	4b1e      	ldr	r3, [pc, #120]	; (df50 <m2m_wifi_connect_sc+0x3e0>)
    ded8:	0018      	movs	r0, r3
    deda:	4b0f      	ldr	r3, [pc, #60]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dedc:	4798      	blx	r3
    dede:	4b10      	ldr	r3, [pc, #64]	; (df20 <m2m_wifi_connect_sc+0x3b0>)
    dee0:	0018      	movs	r0, r3
    dee2:	4b0d      	ldr	r3, [pc, #52]	; (df18 <m2m_wifi_connect_sc+0x3a8>)
    dee4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    dee6:	2397      	movs	r3, #151	; 0x97
    dee8:	18fb      	adds	r3, r7, r3
    deea:	22f4      	movs	r2, #244	; 0xf4
    deec:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    deee:	e068      	b.n	dfc2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    def0:	238c      	movs	r3, #140	; 0x8c
    def2:	18fb      	adds	r3, r7, r3
    def4:	6818      	ldr	r0, [r3, #0]
    def6:	2382      	movs	r3, #130	; 0x82
    def8:	18fb      	adds	r3, r7, r3
    defa:	881b      	ldrh	r3, [r3, #0]
    defc:	3301      	adds	r3, #1
    defe:	001a      	movs	r2, r3
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	0019      	movs	r1, r3
    df04:	4b0d      	ldr	r3, [pc, #52]	; (df3c <m2m_wifi_connect_sc+0x3cc>)
    df06:	4798      	blx	r3
    df08:	e04a      	b.n	dfa0 <m2m_wifi_connect_sc+0x430>
    df0a:	46c0      	nop			; (mov r8, r8)
    df0c:	0000021a 	.word	0x0000021a
    df10:	00023e7c 	.word	0x00023e7c
    df14:	00023ac4 	.word	0x00023ac4
    df18:	00009a6d 	.word	0x00009a6d
    df1c:	00023d04 	.word	0x00023d04
    df20:	00023ac0 	.word	0x00023ac0
    df24:	0000c7df 	.word	0x0000c7df
    df28:	00000226 	.word	0x00000226
    df2c:	00023d18 	.word	0x00023d18
    df30:	00023d28 	.word	0x00023d28
    df34:	00000239 	.word	0x00000239
    df38:	00023d3c 	.word	0x00023d3c
    df3c:	0000c765 	.word	0x0000c765
    df40:	00023d48 	.word	0x00023d48
    df44:	00000257 	.word	0x00000257
    df48:	00023d64 	.word	0x00023d64
    df4c:	00000266 	.word	0x00000266
    df50:	00023d80 	.word	0x00023d80
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    df54:	230a      	movs	r3, #10
    df56:	18fb      	adds	r3, r7, r3
    df58:	781b      	ldrb	r3, [r3, #0]
    df5a:	2b04      	cmp	r3, #4
    df5c:	d108      	bne.n	df70 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    df5e:	238c      	movs	r3, #140	; 0x8c
    df60:	18fb      	adds	r3, r7, r3
    df62:	681b      	ldr	r3, [r3, #0]
    df64:	6879      	ldr	r1, [r7, #4]
    df66:	223e      	movs	r2, #62	; 0x3e
    df68:	0018      	movs	r0, r3
    df6a:	4b1a      	ldr	r3, [pc, #104]	; (dfd4 <m2m_wifi_connect_sc+0x464>)
    df6c:	4798      	blx	r3
    df6e:	e017      	b.n	dfa0 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    df70:	230a      	movs	r3, #10
    df72:	18fb      	adds	r3, r7, r3
    df74:	781b      	ldrb	r3, [r3, #0]
    df76:	2b01      	cmp	r3, #1
    df78:	d012      	beq.n	dfa0 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    df7a:	4a17      	ldr	r2, [pc, #92]	; (dfd8 <m2m_wifi_connect_sc+0x468>)
    df7c:	4917      	ldr	r1, [pc, #92]	; (dfdc <m2m_wifi_connect_sc+0x46c>)
    df7e:	4b18      	ldr	r3, [pc, #96]	; (dfe0 <m2m_wifi_connect_sc+0x470>)
    df80:	0018      	movs	r0, r3
    df82:	4b18      	ldr	r3, [pc, #96]	; (dfe4 <m2m_wifi_connect_sc+0x474>)
    df84:	4798      	blx	r3
    df86:	4b18      	ldr	r3, [pc, #96]	; (dfe8 <m2m_wifi_connect_sc+0x478>)
    df88:	0018      	movs	r0, r3
    df8a:	4b16      	ldr	r3, [pc, #88]	; (dfe4 <m2m_wifi_connect_sc+0x474>)
    df8c:	4798      	blx	r3
    df8e:	4b17      	ldr	r3, [pc, #92]	; (dfec <m2m_wifi_connect_sc+0x47c>)
    df90:	0018      	movs	r0, r3
    df92:	4b14      	ldr	r3, [pc, #80]	; (dfe4 <m2m_wifi_connect_sc+0x474>)
    df94:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    df96:	2397      	movs	r3, #151	; 0x97
    df98:	18fb      	adds	r3, r7, r3
    df9a:	22f4      	movs	r2, #244	; 0xf4
    df9c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    df9e:	e010      	b.n	dfc2 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    dfa0:	2397      	movs	r3, #151	; 0x97
    dfa2:	18fc      	adds	r4, r7, r3
    dfa4:	2314      	movs	r3, #20
    dfa6:	18fa      	adds	r2, r7, r3
    dfa8:	2300      	movs	r3, #0
    dfaa:	9302      	str	r3, [sp, #8]
    dfac:	2300      	movs	r3, #0
    dfae:	9301      	str	r3, [sp, #4]
    dfb0:	2300      	movs	r3, #0
    dfb2:	9300      	str	r3, [sp, #0]
    dfb4:	236c      	movs	r3, #108	; 0x6c
    dfb6:	2128      	movs	r1, #40	; 0x28
    dfb8:	2001      	movs	r0, #1
    dfba:	4d0d      	ldr	r5, [pc, #52]	; (dff0 <m2m_wifi_connect_sc+0x480>)
    dfbc:	47a8      	blx	r5
    dfbe:	0003      	movs	r3, r0
    dfc0:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    dfc2:	2397      	movs	r3, #151	; 0x97
    dfc4:	18fb      	adds	r3, r7, r3
    dfc6:	781b      	ldrb	r3, [r3, #0]
    dfc8:	b25b      	sxtb	r3, r3
}
    dfca:	0018      	movs	r0, r3
    dfcc:	46bd      	mov	sp, r7
    dfce:	b026      	add	sp, #152	; 0x98
    dfd0:	bdb0      	pop	{r4, r5, r7, pc}
    dfd2:	46c0      	nop			; (mov r8, r8)
    dfd4:	0000c765 	.word	0x0000c765
    dfd8:	00000276 	.word	0x00000276
    dfdc:	00023e7c 	.word	0x00023e7c
    dfe0:	00023ac4 	.word	0x00023ac4
    dfe4:	00009a6d 	.word	0x00009a6d
    dfe8:	00023d9c 	.word	0x00023d9c
    dfec:	00023ac0 	.word	0x00023ac0
    dff0:	0000ca01 	.word	0x0000ca01

0000dff4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    dff4:	b580      	push	{r7, lr}
    dff6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    dff8:	2300      	movs	r3, #0
}
    dffa:	0018      	movs	r0, r3
    dffc:	46bd      	mov	sp, r7
    dffe:	bd80      	pop	{r7, pc}

0000e000 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    e000:	b590      	push	{r4, r7, lr}
    e002:	b087      	sub	sp, #28
    e004:	af00      	add	r7, sp, #0
    e006:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    e008:	2317      	movs	r3, #23
    e00a:	18fb      	adds	r3, r7, r3
    e00c:	2200      	movs	r2, #0
    e00e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    e010:	687b      	ldr	r3, [r7, #4]
    e012:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    e014:	693b      	ldr	r3, [r7, #16]
    e016:	2280      	movs	r2, #128	; 0x80
    e018:	0052      	lsls	r2, r2, #1
    e01a:	4313      	orrs	r3, r2
    e01c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    e01e:	693a      	ldr	r2, [r7, #16]
    e020:	23a5      	movs	r3, #165	; 0xa5
    e022:	015b      	lsls	r3, r3, #5
    e024:	0011      	movs	r1, r2
    e026:	0018      	movs	r0, r3
    e028:	4b12      	ldr	r3, [pc, #72]	; (e074 <chip_apply_conf+0x74>)
    e02a:	4798      	blx	r3
		if(val32 != 0) {		
    e02c:	693b      	ldr	r3, [r7, #16]
    e02e:	2b00      	cmp	r3, #0
    e030:	d018      	beq.n	e064 <chip_apply_conf+0x64>
			uint32 reg = 0;
    e032:	2300      	movs	r3, #0
    e034:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    e036:	2317      	movs	r3, #23
    e038:	18fc      	adds	r4, r7, r3
    e03a:	230c      	movs	r3, #12
    e03c:	18fa      	adds	r2, r7, r3
    e03e:	23a5      	movs	r3, #165	; 0xa5
    e040:	015b      	lsls	r3, r3, #5
    e042:	0011      	movs	r1, r2
    e044:	0018      	movs	r0, r3
    e046:	4b0c      	ldr	r3, [pc, #48]	; (e078 <chip_apply_conf+0x78>)
    e048:	4798      	blx	r3
    e04a:	0003      	movs	r3, r0
    e04c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    e04e:	2317      	movs	r3, #23
    e050:	18fb      	adds	r3, r7, r3
    e052:	781b      	ldrb	r3, [r3, #0]
    e054:	b25b      	sxtb	r3, r3
    e056:	2b00      	cmp	r3, #0
    e058:	d1e1      	bne.n	e01e <chip_apply_conf+0x1e>
				if(reg == val32)
    e05a:	68fa      	ldr	r2, [r7, #12]
    e05c:	693b      	ldr	r3, [r7, #16]
    e05e:	429a      	cmp	r2, r3
    e060:	d002      	beq.n	e068 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    e062:	e7dc      	b.n	e01e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    e064:	46c0      	nop			; (mov r8, r8)
    e066:	e000      	b.n	e06a <chip_apply_conf+0x6a>
					break;
    e068:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    e06a:	2300      	movs	r3, #0
}
    e06c:	0018      	movs	r0, r3
    e06e:	46bd      	mov	sp, r7
    e070:	b007      	add	sp, #28
    e072:	bd90      	pop	{r4, r7, pc}
    e074:	0000e855 	.word	0x0000e855
    e078:	0000e831 	.word	0x0000e831

0000e07c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    e07c:	b590      	push	{r4, r7, lr}
    e07e:	b083      	sub	sp, #12
    e080:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    e082:	2300      	movs	r3, #0
    e084:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    e086:	1dfb      	adds	r3, r7, #7
    e088:	2200      	movs	r2, #0
    e08a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    e08c:	1dfc      	adds	r4, r7, #7
    e08e:	003b      	movs	r3, r7
    e090:	4a24      	ldr	r2, [pc, #144]	; (e124 <enable_interrupts+0xa8>)
    e092:	0019      	movs	r1, r3
    e094:	0010      	movs	r0, r2
    e096:	4b24      	ldr	r3, [pc, #144]	; (e128 <enable_interrupts+0xac>)
    e098:	4798      	blx	r3
    e09a:	0003      	movs	r3, r0
    e09c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    e09e:	1dfb      	adds	r3, r7, #7
    e0a0:	781b      	ldrb	r3, [r3, #0]
    e0a2:	b25b      	sxtb	r3, r3
    e0a4:	2b00      	cmp	r3, #0
    e0a6:	d131      	bne.n	e10c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    e0a8:	683b      	ldr	r3, [r7, #0]
    e0aa:	2280      	movs	r2, #128	; 0x80
    e0ac:	0052      	lsls	r2, r2, #1
    e0ae:	4313      	orrs	r3, r2
    e0b0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    e0b2:	683b      	ldr	r3, [r7, #0]
    e0b4:	1dfc      	adds	r4, r7, #7
    e0b6:	4a1b      	ldr	r2, [pc, #108]	; (e124 <enable_interrupts+0xa8>)
    e0b8:	0019      	movs	r1, r3
    e0ba:	0010      	movs	r0, r2
    e0bc:	4b1b      	ldr	r3, [pc, #108]	; (e12c <enable_interrupts+0xb0>)
    e0be:	4798      	blx	r3
    e0c0:	0003      	movs	r3, r0
    e0c2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    e0c4:	1dfb      	adds	r3, r7, #7
    e0c6:	781b      	ldrb	r3, [r3, #0]
    e0c8:	b25b      	sxtb	r3, r3
    e0ca:	2b00      	cmp	r3, #0
    e0cc:	d120      	bne.n	e110 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    e0ce:	1dfc      	adds	r4, r7, #7
    e0d0:	003a      	movs	r2, r7
    e0d2:	23d0      	movs	r3, #208	; 0xd0
    e0d4:	015b      	lsls	r3, r3, #5
    e0d6:	0011      	movs	r1, r2
    e0d8:	0018      	movs	r0, r3
    e0da:	4b13      	ldr	r3, [pc, #76]	; (e128 <enable_interrupts+0xac>)
    e0dc:	4798      	blx	r3
    e0de:	0003      	movs	r3, r0
    e0e0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    e0e2:	1dfb      	adds	r3, r7, #7
    e0e4:	781b      	ldrb	r3, [r3, #0]
    e0e6:	b25b      	sxtb	r3, r3
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d113      	bne.n	e114 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    e0ec:	683b      	ldr	r3, [r7, #0]
    e0ee:	2280      	movs	r2, #128	; 0x80
    e0f0:	0252      	lsls	r2, r2, #9
    e0f2:	4313      	orrs	r3, r2
    e0f4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    e0f6:	683a      	ldr	r2, [r7, #0]
    e0f8:	1dfc      	adds	r4, r7, #7
    e0fa:	23d0      	movs	r3, #208	; 0xd0
    e0fc:	015b      	lsls	r3, r3, #5
    e0fe:	0011      	movs	r1, r2
    e100:	0018      	movs	r0, r3
    e102:	4b0a      	ldr	r3, [pc, #40]	; (e12c <enable_interrupts+0xb0>)
    e104:	4798      	blx	r3
    e106:	0003      	movs	r3, r0
    e108:	7023      	strb	r3, [r4, #0]
    e10a:	e004      	b.n	e116 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    e10c:	46c0      	nop			; (mov r8, r8)
    e10e:	e002      	b.n	e116 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    e110:	46c0      	nop			; (mov r8, r8)
    e112:	e000      	b.n	e116 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    e114:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    e116:	1dfb      	adds	r3, r7, #7
    e118:	781b      	ldrb	r3, [r3, #0]
    e11a:	b25b      	sxtb	r3, r3
}
    e11c:	0018      	movs	r0, r3
    e11e:	46bd      	mov	sp, r7
    e120:	b003      	add	sp, #12
    e122:	bd90      	pop	{r4, r7, pc}
    e124:	00001408 	.word	0x00001408
    e128:	0000e831 	.word	0x0000e831
    e12c:	0000e855 	.word	0x0000e855

0000e130 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    e130:	b580      	push	{r7, lr}
    e132:	b082      	sub	sp, #8
    e134:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    e136:	4b32      	ldr	r3, [pc, #200]	; (e200 <nmi_get_chipid+0xd0>)
    e138:	681b      	ldr	r3, [r3, #0]
    e13a:	2b00      	cmp	r3, #0
    e13c:	d159      	bne.n	e1f2 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    e13e:	4a30      	ldr	r2, [pc, #192]	; (e200 <nmi_get_chipid+0xd0>)
    e140:	2380      	movs	r3, #128	; 0x80
    e142:	015b      	lsls	r3, r3, #5
    e144:	0011      	movs	r1, r2
    e146:	0018      	movs	r0, r3
    e148:	4b2e      	ldr	r3, [pc, #184]	; (e204 <nmi_get_chipid+0xd4>)
    e14a:	4798      	blx	r3
    e14c:	1e03      	subs	r3, r0, #0
    e14e:	d004      	beq.n	e15a <nmi_get_chipid+0x2a>
			chipid = 0;
    e150:	4b2b      	ldr	r3, [pc, #172]	; (e200 <nmi_get_chipid+0xd0>)
    e152:	2200      	movs	r2, #0
    e154:	601a      	str	r2, [r3, #0]
			return 0;
    e156:	2300      	movs	r3, #0
    e158:	e04d      	b.n	e1f6 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    e15a:	1d3b      	adds	r3, r7, #4
    e15c:	4a2a      	ldr	r2, [pc, #168]	; (e208 <nmi_get_chipid+0xd8>)
    e15e:	0019      	movs	r1, r3
    e160:	0010      	movs	r0, r2
    e162:	4b28      	ldr	r3, [pc, #160]	; (e204 <nmi_get_chipid+0xd4>)
    e164:	4798      	blx	r3
    e166:	1e03      	subs	r3, r0, #0
    e168:	d004      	beq.n	e174 <nmi_get_chipid+0x44>
			chipid = 0;
    e16a:	4b25      	ldr	r3, [pc, #148]	; (e200 <nmi_get_chipid+0xd0>)
    e16c:	2200      	movs	r2, #0
    e16e:	601a      	str	r2, [r3, #0]
			return 0;
    e170:	2300      	movs	r3, #0
    e172:	e040      	b.n	e1f6 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    e174:	4b22      	ldr	r3, [pc, #136]	; (e200 <nmi_get_chipid+0xd0>)
    e176:	681b      	ldr	r3, [r3, #0]
    e178:	4a24      	ldr	r2, [pc, #144]	; (e20c <nmi_get_chipid+0xdc>)
    e17a:	4293      	cmp	r3, r2
    e17c:	d106      	bne.n	e18c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    e17e:	687b      	ldr	r3, [r7, #4]
    e180:	2b01      	cmp	r3, #1
    e182:	d029      	beq.n	e1d8 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    e184:	4b1e      	ldr	r3, [pc, #120]	; (e200 <nmi_get_chipid+0xd0>)
    e186:	4a22      	ldr	r2, [pc, #136]	; (e210 <nmi_get_chipid+0xe0>)
    e188:	601a      	str	r2, [r3, #0]
    e18a:	e025      	b.n	e1d8 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    e18c:	4b1c      	ldr	r3, [pc, #112]	; (e200 <nmi_get_chipid+0xd0>)
    e18e:	681b      	ldr	r3, [r3, #0]
    e190:	4a20      	ldr	r2, [pc, #128]	; (e214 <nmi_get_chipid+0xe4>)
    e192:	4293      	cmp	r3, r2
    e194:	d10d      	bne.n	e1b2 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    e196:	687b      	ldr	r3, [r7, #4]
    e198:	2b03      	cmp	r3, #3
    e19a:	d01d      	beq.n	e1d8 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    e19c:	687b      	ldr	r3, [r7, #4]
    e19e:	2b04      	cmp	r3, #4
    e1a0:	d103      	bne.n	e1aa <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    e1a2:	4b17      	ldr	r3, [pc, #92]	; (e200 <nmi_get_chipid+0xd0>)
    e1a4:	4a1c      	ldr	r2, [pc, #112]	; (e218 <nmi_get_chipid+0xe8>)
    e1a6:	601a      	str	r2, [r3, #0]
    e1a8:	e016      	b.n	e1d8 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    e1aa:	4b15      	ldr	r3, [pc, #84]	; (e200 <nmi_get_chipid+0xd0>)
    e1ac:	4a1b      	ldr	r2, [pc, #108]	; (e21c <nmi_get_chipid+0xec>)
    e1ae:	601a      	str	r2, [r3, #0]
    e1b0:	e012      	b.n	e1d8 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    e1b2:	4b13      	ldr	r3, [pc, #76]	; (e200 <nmi_get_chipid+0xd0>)
    e1b4:	681b      	ldr	r3, [r3, #0]
    e1b6:	4a1a      	ldr	r2, [pc, #104]	; (e220 <nmi_get_chipid+0xf0>)
    e1b8:	4293      	cmp	r3, r2
    e1ba:	d10d      	bne.n	e1d8 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    e1bc:	4a10      	ldr	r2, [pc, #64]	; (e200 <nmi_get_chipid+0xd0>)
    e1be:	23ec      	movs	r3, #236	; 0xec
    e1c0:	039b      	lsls	r3, r3, #14
    e1c2:	0011      	movs	r1, r2
    e1c4:	0018      	movs	r0, r3
    e1c6:	4b0f      	ldr	r3, [pc, #60]	; (e204 <nmi_get_chipid+0xd4>)
    e1c8:	4798      	blx	r3
    e1ca:	1e03      	subs	r3, r0, #0
    e1cc:	d004      	beq.n	e1d8 <nmi_get_chipid+0xa8>
			chipid = 0;
    e1ce:	4b0c      	ldr	r3, [pc, #48]	; (e200 <nmi_get_chipid+0xd0>)
    e1d0:	2200      	movs	r2, #0
    e1d2:	601a      	str	r2, [r3, #0]
			return 0;
    e1d4:	2300      	movs	r3, #0
    e1d6:	e00e      	b.n	e1f6 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    e1d8:	4b09      	ldr	r3, [pc, #36]	; (e200 <nmi_get_chipid+0xd0>)
    e1da:	681b      	ldr	r3, [r3, #0]
    e1dc:	4a11      	ldr	r2, [pc, #68]	; (e224 <nmi_get_chipid+0xf4>)
    e1de:	401a      	ands	r2, r3
    e1e0:	4b07      	ldr	r3, [pc, #28]	; (e200 <nmi_get_chipid+0xd0>)
    e1e2:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    e1e4:	4b06      	ldr	r3, [pc, #24]	; (e200 <nmi_get_chipid+0xd0>)
    e1e6:	681b      	ldr	r3, [r3, #0]
    e1e8:	22a0      	movs	r2, #160	; 0xa0
    e1ea:	02d2      	lsls	r2, r2, #11
    e1ec:	431a      	orrs	r2, r3
    e1ee:	4b04      	ldr	r3, [pc, #16]	; (e200 <nmi_get_chipid+0xd0>)
    e1f0:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    e1f2:	4b03      	ldr	r3, [pc, #12]	; (e200 <nmi_get_chipid+0xd0>)
    e1f4:	681b      	ldr	r3, [r3, #0]
}
    e1f6:	0018      	movs	r0, r3
    e1f8:	46bd      	mov	sp, r7
    e1fa:	b002      	add	sp, #8
    e1fc:	bd80      	pop	{r7, pc}
    e1fe:	46c0      	nop			; (mov r8, r8)
    e200:	20003d14 	.word	0x20003d14
    e204:	0000e831 	.word	0x0000e831
    e208:	000013f4 	.word	0x000013f4
    e20c:	001002a0 	.word	0x001002a0
    e210:	001002a1 	.word	0x001002a1
    e214:	001002b0 	.word	0x001002b0
    e218:	001002b1 	.word	0x001002b1
    e21c:	001002b2 	.word	0x001002b2
    e220:	001000f0 	.word	0x001000f0
    e224:	fff0ffff 	.word	0xfff0ffff

0000e228 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    e228:	b590      	push	{r4, r7, lr}
    e22a:	b083      	sub	sp, #12
    e22c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    e22e:	1dfb      	adds	r3, r7, #7
    e230:	2200      	movs	r2, #0
    e232:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    e234:	1dfc      	adds	r4, r7, #7
    e236:	003b      	movs	r3, r7
    e238:	0019      	movs	r1, r3
    e23a:	2010      	movs	r0, #16
    e23c:	4b2e      	ldr	r3, [pc, #184]	; (e2f8 <chip_sleep+0xd0>)
    e23e:	4798      	blx	r3
    e240:	0003      	movs	r3, r0
    e242:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    e244:	1dfb      	adds	r3, r7, #7
    e246:	781b      	ldrb	r3, [r3, #0]
    e248:	b25b      	sxtb	r3, r3
    e24a:	2b00      	cmp	r3, #0
    e24c:	d145      	bne.n	e2da <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    e24e:	683b      	ldr	r3, [r7, #0]
    e250:	2201      	movs	r2, #1
    e252:	4013      	ands	r3, r2
    e254:	d000      	beq.n	e258 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    e256:	e7ed      	b.n	e234 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    e258:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    e25a:	1dfc      	adds	r4, r7, #7
    e25c:	003b      	movs	r3, r7
    e25e:	0019      	movs	r1, r3
    e260:	2001      	movs	r0, #1
    e262:	4b25      	ldr	r3, [pc, #148]	; (e2f8 <chip_sleep+0xd0>)
    e264:	4798      	blx	r3
    e266:	0003      	movs	r3, r0
    e268:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    e26a:	1dfb      	adds	r3, r7, #7
    e26c:	781b      	ldrb	r3, [r3, #0]
    e26e:	b25b      	sxtb	r3, r3
    e270:	2b00      	cmp	r3, #0
    e272:	d134      	bne.n	e2de <chip_sleep+0xb6>
	if(reg & NBIT1)
    e274:	683b      	ldr	r3, [r7, #0]
    e276:	2202      	movs	r2, #2
    e278:	4013      	ands	r3, r2
    e27a:	d010      	beq.n	e29e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    e27c:	683b      	ldr	r3, [r7, #0]
    e27e:	2202      	movs	r2, #2
    e280:	4393      	bics	r3, r2
    e282:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    e284:	683b      	ldr	r3, [r7, #0]
    e286:	1dfc      	adds	r4, r7, #7
    e288:	0019      	movs	r1, r3
    e28a:	2001      	movs	r0, #1
    e28c:	4b1b      	ldr	r3, [pc, #108]	; (e2fc <chip_sleep+0xd4>)
    e28e:	4798      	blx	r3
    e290:	0003      	movs	r3, r0
    e292:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    e294:	1dfb      	adds	r3, r7, #7
    e296:	781b      	ldrb	r3, [r3, #0]
    e298:	b25b      	sxtb	r3, r3
    e29a:	2b00      	cmp	r3, #0
    e29c:	d121      	bne.n	e2e2 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    e29e:	1dfc      	adds	r4, r7, #7
    e2a0:	003b      	movs	r3, r7
    e2a2:	0019      	movs	r1, r3
    e2a4:	200b      	movs	r0, #11
    e2a6:	4b14      	ldr	r3, [pc, #80]	; (e2f8 <chip_sleep+0xd0>)
    e2a8:	4798      	blx	r3
    e2aa:	0003      	movs	r3, r0
    e2ac:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    e2ae:	1dfb      	adds	r3, r7, #7
    e2b0:	781b      	ldrb	r3, [r3, #0]
    e2b2:	b25b      	sxtb	r3, r3
    e2b4:	2b00      	cmp	r3, #0
    e2b6:	d116      	bne.n	e2e6 <chip_sleep+0xbe>
	if(reg & NBIT0)
    e2b8:	683b      	ldr	r3, [r7, #0]
    e2ba:	2201      	movs	r2, #1
    e2bc:	4013      	ands	r3, r2
    e2be:	d013      	beq.n	e2e8 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    e2c0:	683b      	ldr	r3, [r7, #0]
    e2c2:	2201      	movs	r2, #1
    e2c4:	4393      	bics	r3, r2
    e2c6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    e2c8:	683b      	ldr	r3, [r7, #0]
    e2ca:	1dfc      	adds	r4, r7, #7
    e2cc:	0019      	movs	r1, r3
    e2ce:	200b      	movs	r0, #11
    e2d0:	4b0a      	ldr	r3, [pc, #40]	; (e2fc <chip_sleep+0xd4>)
    e2d2:	4798      	blx	r3
    e2d4:	0003      	movs	r3, r0
    e2d6:	7023      	strb	r3, [r4, #0]
    e2d8:	e006      	b.n	e2e8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    e2da:	46c0      	nop			; (mov r8, r8)
    e2dc:	e004      	b.n	e2e8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    e2de:	46c0      	nop			; (mov r8, r8)
    e2e0:	e002      	b.n	e2e8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    e2e2:	46c0      	nop			; (mov r8, r8)
    e2e4:	e000      	b.n	e2e8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    e2e6:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    e2e8:	1dfb      	adds	r3, r7, #7
    e2ea:	781b      	ldrb	r3, [r3, #0]
    e2ec:	b25b      	sxtb	r3, r3
}
    e2ee:	0018      	movs	r0, r3
    e2f0:	46bd      	mov	sp, r7
    e2f2:	b003      	add	sp, #12
    e2f4:	bd90      	pop	{r4, r7, pc}
    e2f6:	46c0      	nop			; (mov r8, r8)
    e2f8:	0000e831 	.word	0x0000e831
    e2fc:	0000e855 	.word	0x0000e855

0000e300 <chip_wake>:
sint8 chip_wake(void)
{
    e300:	b590      	push	{r4, r7, lr}
    e302:	b085      	sub	sp, #20
    e304:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    e306:	230f      	movs	r3, #15
    e308:	18fb      	adds	r3, r7, r3
    e30a:	2200      	movs	r2, #0
    e30c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    e30e:	2300      	movs	r3, #0
    e310:	607b      	str	r3, [r7, #4]
    e312:	2300      	movs	r3, #0
    e314:	603b      	str	r3, [r7, #0]
    e316:	2300      	movs	r3, #0
    e318:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    e31a:	230f      	movs	r3, #15
    e31c:	18fc      	adds	r4, r7, r3
    e31e:	1d3b      	adds	r3, r7, #4
    e320:	0019      	movs	r1, r3
    e322:	200b      	movs	r0, #11
    e324:	4b4e      	ldr	r3, [pc, #312]	; (e460 <chip_wake+0x160>)
    e326:	4798      	blx	r3
    e328:	0003      	movs	r3, r0
    e32a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    e32c:	230f      	movs	r3, #15
    e32e:	18fb      	adds	r3, r7, r3
    e330:	781b      	ldrb	r3, [r3, #0]
    e332:	b25b      	sxtb	r3, r3
    e334:	2b00      	cmp	r3, #0
    e336:	d000      	beq.n	e33a <chip_wake+0x3a>
    e338:	e082      	b.n	e440 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
    e33a:	687b      	ldr	r3, [r7, #4]
    e33c:	2201      	movs	r2, #1
    e33e:	4013      	ands	r3, r2
    e340:	d111      	bne.n	e366 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    e342:	687b      	ldr	r3, [r7, #4]
    e344:	2201      	movs	r2, #1
    e346:	4313      	orrs	r3, r2
    e348:	220f      	movs	r2, #15
    e34a:	18bc      	adds	r4, r7, r2
    e34c:	0019      	movs	r1, r3
    e34e:	200b      	movs	r0, #11
    e350:	4b44      	ldr	r3, [pc, #272]	; (e464 <chip_wake+0x164>)
    e352:	4798      	blx	r3
    e354:	0003      	movs	r3, r0
    e356:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    e358:	230f      	movs	r3, #15
    e35a:	18fb      	adds	r3, r7, r3
    e35c:	781b      	ldrb	r3, [r3, #0]
    e35e:	b25b      	sxtb	r3, r3
    e360:	2b00      	cmp	r3, #0
    e362:	d000      	beq.n	e366 <chip_wake+0x66>
    e364:	e06e      	b.n	e444 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    e366:	230f      	movs	r3, #15
    e368:	18fc      	adds	r4, r7, r3
    e36a:	1d3b      	adds	r3, r7, #4
    e36c:	0019      	movs	r1, r3
    e36e:	2001      	movs	r0, #1
    e370:	4b3b      	ldr	r3, [pc, #236]	; (e460 <chip_wake+0x160>)
    e372:	4798      	blx	r3
    e374:	0003      	movs	r3, r0
    e376:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    e378:	230f      	movs	r3, #15
    e37a:	18fb      	adds	r3, r7, r3
    e37c:	781b      	ldrb	r3, [r3, #0]
    e37e:	b25b      	sxtb	r3, r3
    e380:	2b00      	cmp	r3, #0
    e382:	d161      	bne.n	e448 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    e384:	687b      	ldr	r3, [r7, #4]
    e386:	2202      	movs	r2, #2
    e388:	4013      	ands	r3, r2
    e38a:	d110      	bne.n	e3ae <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    e38c:	687b      	ldr	r3, [r7, #4]
    e38e:	2202      	movs	r2, #2
    e390:	4313      	orrs	r3, r2
    e392:	220f      	movs	r2, #15
    e394:	18bc      	adds	r4, r7, r2
    e396:	0019      	movs	r1, r3
    e398:	2001      	movs	r0, #1
    e39a:	4b32      	ldr	r3, [pc, #200]	; (e464 <chip_wake+0x164>)
    e39c:	4798      	blx	r3
    e39e:	0003      	movs	r3, r0
    e3a0:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    e3a2:	230f      	movs	r3, #15
    e3a4:	18fb      	adds	r3, r7, r3
    e3a6:	781b      	ldrb	r3, [r3, #0]
    e3a8:	b25b      	sxtb	r3, r3
    e3aa:	2b00      	cmp	r3, #0
    e3ac:	d14e      	bne.n	e44c <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    e3ae:	230f      	movs	r3, #15
    e3b0:	18fc      	adds	r4, r7, r3
    e3b2:	003b      	movs	r3, r7
    e3b4:	0019      	movs	r1, r3
    e3b6:	200f      	movs	r0, #15
    e3b8:	4b29      	ldr	r3, [pc, #164]	; (e460 <chip_wake+0x160>)
    e3ba:	4798      	blx	r3
    e3bc:	0003      	movs	r3, r0
    e3be:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    e3c0:	230f      	movs	r3, #15
    e3c2:	18fb      	adds	r3, r7, r3
    e3c4:	781b      	ldrb	r3, [r3, #0]
    e3c6:	b25b      	sxtb	r3, r3
    e3c8:	2b00      	cmp	r3, #0
    e3ca:	d014      	beq.n	e3f6 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    e3cc:	23a8      	movs	r3, #168	; 0xa8
    e3ce:	005a      	lsls	r2, r3, #1
    e3d0:	4925      	ldr	r1, [pc, #148]	; (e468 <chip_wake+0x168>)
    e3d2:	4b26      	ldr	r3, [pc, #152]	; (e46c <chip_wake+0x16c>)
    e3d4:	0018      	movs	r0, r3
    e3d6:	4b26      	ldr	r3, [pc, #152]	; (e470 <chip_wake+0x170>)
    e3d8:	4798      	blx	r3
    e3da:	230f      	movs	r3, #15
    e3dc:	18fb      	adds	r3, r7, r3
    e3de:	2100      	movs	r1, #0
    e3e0:	5659      	ldrsb	r1, [r3, r1]
    e3e2:	683a      	ldr	r2, [r7, #0]
    e3e4:	4b23      	ldr	r3, [pc, #140]	; (e474 <chip_wake+0x174>)
    e3e6:	0018      	movs	r0, r3
    e3e8:	4b21      	ldr	r3, [pc, #132]	; (e470 <chip_wake+0x170>)
    e3ea:	4798      	blx	r3
    e3ec:	4b22      	ldr	r3, [pc, #136]	; (e478 <chip_wake+0x178>)
    e3ee:	0018      	movs	r0, r3
    e3f0:	4b1f      	ldr	r3, [pc, #124]	; (e470 <chip_wake+0x170>)
    e3f2:	4798      	blx	r3
			goto _WAKE_EXIT;
    e3f4:	e02b      	b.n	e44e <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
    e3f6:	683b      	ldr	r3, [r7, #0]
    e3f8:	2204      	movs	r2, #4
    e3fa:	4013      	ands	r3, r2
    e3fc:	d11c      	bne.n	e438 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
    e3fe:	2002      	movs	r0, #2
    e400:	4b1e      	ldr	r3, [pc, #120]	; (e47c <chip_wake+0x17c>)
    e402:	4798      	blx	r3
		trials++;
    e404:	68bb      	ldr	r3, [r7, #8]
    e406:	3301      	adds	r3, #1
    e408:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    e40a:	68bb      	ldr	r3, [r7, #8]
    e40c:	2b04      	cmp	r3, #4
    e40e:	d9ce      	bls.n	e3ae <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
    e410:	23ad      	movs	r3, #173	; 0xad
    e412:	005a      	lsls	r2, r3, #1
    e414:	4914      	ldr	r1, [pc, #80]	; (e468 <chip_wake+0x168>)
    e416:	4b15      	ldr	r3, [pc, #84]	; (e46c <chip_wake+0x16c>)
    e418:	0018      	movs	r0, r3
    e41a:	4b15      	ldr	r3, [pc, #84]	; (e470 <chip_wake+0x170>)
    e41c:	4798      	blx	r3
    e41e:	4b18      	ldr	r3, [pc, #96]	; (e480 <chip_wake+0x180>)
    e420:	0018      	movs	r0, r3
    e422:	4b13      	ldr	r3, [pc, #76]	; (e470 <chip_wake+0x170>)
    e424:	4798      	blx	r3
    e426:	4b14      	ldr	r3, [pc, #80]	; (e478 <chip_wake+0x178>)
    e428:	0018      	movs	r0, r3
    e42a:	4b11      	ldr	r3, [pc, #68]	; (e470 <chip_wake+0x170>)
    e42c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    e42e:	230f      	movs	r3, #15
    e430:	18fb      	adds	r3, r7, r3
    e432:	22fc      	movs	r2, #252	; 0xfc
    e434:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    e436:	e00a      	b.n	e44e <chip_wake+0x14e>
			break;
    e438:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    e43a:	4b12      	ldr	r3, [pc, #72]	; (e484 <chip_wake+0x184>)
    e43c:	4798      	blx	r3
    e43e:	e006      	b.n	e44e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    e440:	46c0      	nop			; (mov r8, r8)
    e442:	e004      	b.n	e44e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    e444:	46c0      	nop			; (mov r8, r8)
    e446:	e002      	b.n	e44e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    e448:	46c0      	nop			; (mov r8, r8)
    e44a:	e000      	b.n	e44e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    e44c:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    e44e:	230f      	movs	r3, #15
    e450:	18fb      	adds	r3, r7, r3
    e452:	781b      	ldrb	r3, [r3, #0]
    e454:	b25b      	sxtb	r3, r3
}
    e456:	0018      	movs	r0, r3
    e458:	46bd      	mov	sp, r7
    e45a:	b005      	add	sp, #20
    e45c:	bd90      	pop	{r4, r7, pc}
    e45e:	46c0      	nop			; (mov r8, r8)
    e460:	0000e831 	.word	0x0000e831
    e464:	0000e855 	.word	0x0000e855
    e468:	00023f1c 	.word	0x00023f1c
    e46c:	00023e90 	.word	0x00023e90
    e470:	00009a6d 	.word	0x00009a6d
    e474:	00023ea4 	.word	0x00023ea4
    e478:	00023ebc 	.word	0x00023ebc
    e47c:	0000bec1 	.word	0x0000bec1
    e480:	00023ec0 	.word	0x00023ec0
    e484:	0000e7f1 	.word	0x0000e7f1

0000e488 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    e488:	b580      	push	{r7, lr}
    e48a:	b088      	sub	sp, #32
    e48c:	af00      	add	r7, sp, #0
    e48e:	0002      	movs	r2, r0
    e490:	1dfb      	adds	r3, r7, #7
    e492:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    e494:	2313      	movs	r3, #19
    e496:	18fb      	adds	r3, r7, r3
    e498:	2200      	movs	r2, #0
    e49a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    e49c:	2300      	movs	r3, #0
    e49e:	61fb      	str	r3, [r7, #28]
    e4a0:	2300      	movs	r3, #0
    e4a2:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    e4a4:	2300      	movs	r3, #0
    e4a6:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    e4a8:	4b4a      	ldr	r3, [pc, #296]	; (e5d4 <wait_for_bootrom+0x14c>)
    e4aa:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
    e4ac:	2300      	movs	r3, #0
    e4ae:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    e4b0:	4b49      	ldr	r3, [pc, #292]	; (e5d8 <wait_for_bootrom+0x150>)
    e4b2:	0018      	movs	r0, r3
    e4b4:	4b49      	ldr	r3, [pc, #292]	; (e5dc <wait_for_bootrom+0x154>)
    e4b6:	4798      	blx	r3
    e4b8:	0003      	movs	r3, r0
    e4ba:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    e4bc:	69fb      	ldr	r3, [r7, #28]
    e4be:	2b00      	cmp	r3, #0
    e4c0:	db03      	blt.n	e4ca <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    e4c2:	2001      	movs	r0, #1
    e4c4:	4b46      	ldr	r3, [pc, #280]	; (e5e0 <wait_for_bootrom+0x158>)
    e4c6:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    e4c8:	e7f2      	b.n	e4b0 <wait_for_bootrom+0x28>
			break;
    e4ca:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    e4cc:	4b45      	ldr	r3, [pc, #276]	; (e5e4 <wait_for_bootrom+0x15c>)
    e4ce:	0018      	movs	r0, r3
    e4d0:	4b42      	ldr	r3, [pc, #264]	; (e5dc <wait_for_bootrom+0x154>)
    e4d2:	4798      	blx	r3
    e4d4:	0003      	movs	r3, r0
    e4d6:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    e4d8:	69fb      	ldr	r3, [r7, #28]
    e4da:	2201      	movs	r2, #1
    e4dc:	4013      	ands	r3, r2
    e4de:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    e4e0:	69fb      	ldr	r3, [r7, #28]
    e4e2:	2b00      	cmp	r3, #0
    e4e4:	d112      	bne.n	e50c <wait_for_bootrom+0x84>
	{
		reg = 0;
    e4e6:	2300      	movs	r3, #0
    e4e8:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    e4ea:	e00b      	b.n	e504 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    e4ec:	2001      	movs	r0, #1
    e4ee:	4b3c      	ldr	r3, [pc, #240]	; (e5e0 <wait_for_bootrom+0x158>)
    e4f0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    e4f2:	4b3d      	ldr	r3, [pc, #244]	; (e5e8 <wait_for_bootrom+0x160>)
    e4f4:	0018      	movs	r0, r3
    e4f6:	4b39      	ldr	r3, [pc, #228]	; (e5dc <wait_for_bootrom+0x154>)
    e4f8:	4798      	blx	r3
    e4fa:	0003      	movs	r3, r0
    e4fc:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    e4fe:	69bb      	ldr	r3, [r7, #24]
    e500:	3301      	adds	r3, #1
    e502:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    e504:	69fb      	ldr	r3, [r7, #28]
    e506:	4a39      	ldr	r2, [pc, #228]	; (e5ec <wait_for_bootrom+0x164>)
    e508:	4293      	cmp	r3, r2
    e50a:	d1ef      	bne.n	e4ec <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    e50c:	1dfb      	adds	r3, r7, #7
    e50e:	781b      	ldrb	r3, [r3, #0]
    e510:	2b02      	cmp	r3, #2
    e512:	d10d      	bne.n	e530 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    e514:	4a36      	ldr	r2, [pc, #216]	; (e5f0 <wait_for_bootrom+0x168>)
    e516:	4b37      	ldr	r3, [pc, #220]	; (e5f4 <wait_for_bootrom+0x16c>)
    e518:	0011      	movs	r1, r2
    e51a:	0018      	movs	r0, r3
    e51c:	4b36      	ldr	r3, [pc, #216]	; (e5f8 <wait_for_bootrom+0x170>)
    e51e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    e520:	2380      	movs	r3, #128	; 0x80
    e522:	035b      	lsls	r3, r3, #13
    e524:	4a35      	ldr	r2, [pc, #212]	; (e5fc <wait_for_bootrom+0x174>)
    e526:	0019      	movs	r1, r3
    e528:	0010      	movs	r0, r2
    e52a:	4b33      	ldr	r3, [pc, #204]	; (e5f8 <wait_for_bootrom+0x170>)
    e52c:	4798      	blx	r3
    e52e:	e022      	b.n	e576 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    e530:	1dfb      	adds	r3, r7, #7
    e532:	781b      	ldrb	r3, [r3, #0]
    e534:	2b03      	cmp	r3, #3
    e536:	d10b      	bne.n	e550 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    e538:	4a2d      	ldr	r2, [pc, #180]	; (e5f0 <wait_for_bootrom+0x168>)
    e53a:	4b2e      	ldr	r3, [pc, #184]	; (e5f4 <wait_for_bootrom+0x16c>)
    e53c:	0011      	movs	r1, r2
    e53e:	0018      	movs	r0, r3
    e540:	4b2d      	ldr	r3, [pc, #180]	; (e5f8 <wait_for_bootrom+0x170>)
    e542:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    e544:	4b2d      	ldr	r3, [pc, #180]	; (e5fc <wait_for_bootrom+0x174>)
    e546:	2100      	movs	r1, #0
    e548:	0018      	movs	r0, r3
    e54a:	4b2b      	ldr	r3, [pc, #172]	; (e5f8 <wait_for_bootrom+0x170>)
    e54c:	4798      	blx	r3
    e54e:	e012      	b.n	e576 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    e550:	1dfb      	adds	r3, r7, #7
    e552:	781b      	ldrb	r3, [r3, #0]
    e554:	2b04      	cmp	r3, #4
    e556:	d108      	bne.n	e56a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    e558:	2380      	movs	r3, #128	; 0x80
    e55a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    e55c:	68fb      	ldr	r3, [r7, #12]
    e55e:	4a27      	ldr	r2, [pc, #156]	; (e5fc <wait_for_bootrom+0x174>)
    e560:	0019      	movs	r1, r3
    e562:	0010      	movs	r0, r2
    e564:	4b24      	ldr	r3, [pc, #144]	; (e5f8 <wait_for_bootrom+0x170>)
    e566:	4798      	blx	r3
    e568:	e005      	b.n	e576 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    e56a:	68fb      	ldr	r3, [r7, #12]
    e56c:	4a23      	ldr	r2, [pc, #140]	; (e5fc <wait_for_bootrom+0x174>)
    e56e:	0019      	movs	r1, r3
    e570:	0010      	movs	r0, r2
    e572:	4b21      	ldr	r3, [pc, #132]	; (e5f8 <wait_for_bootrom+0x170>)
    e574:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    e576:	4b22      	ldr	r3, [pc, #136]	; (e600 <wait_for_bootrom+0x178>)
    e578:	4798      	blx	r3
    e57a:	0003      	movs	r3, r0
    e57c:	051b      	lsls	r3, r3, #20
    e57e:	0d1b      	lsrs	r3, r3, #20
    e580:	4a20      	ldr	r2, [pc, #128]	; (e604 <wait_for_bootrom+0x17c>)
    e582:	4293      	cmp	r3, r2
    e584:	d906      	bls.n	e594 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    e586:	697b      	ldr	r3, [r7, #20]
    e588:	2202      	movs	r2, #2
    e58a:	4313      	orrs	r3, r2
    e58c:	0018      	movs	r0, r3
    e58e:	4b1e      	ldr	r3, [pc, #120]	; (e608 <wait_for_bootrom+0x180>)
    e590:	4798      	blx	r3
    e592:	e003      	b.n	e59c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    e594:	697b      	ldr	r3, [r7, #20]
    e596:	0018      	movs	r0, r3
    e598:	4b1b      	ldr	r3, [pc, #108]	; (e608 <wait_for_bootrom+0x180>)
    e59a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    e59c:	4b1b      	ldr	r3, [pc, #108]	; (e60c <wait_for_bootrom+0x184>)
    e59e:	0018      	movs	r0, r3
    e5a0:	4b1b      	ldr	r3, [pc, #108]	; (e610 <wait_for_bootrom+0x188>)
    e5a2:	4798      	blx	r3
    e5a4:	68fa      	ldr	r2, [r7, #12]
    e5a6:	4b1b      	ldr	r3, [pc, #108]	; (e614 <wait_for_bootrom+0x18c>)
    e5a8:	0011      	movs	r1, r2
    e5aa:	0018      	movs	r0, r3
    e5ac:	4b18      	ldr	r3, [pc, #96]	; (e610 <wait_for_bootrom+0x188>)
    e5ae:	4798      	blx	r3
    e5b0:	4b19      	ldr	r3, [pc, #100]	; (e618 <wait_for_bootrom+0x190>)
    e5b2:	0018      	movs	r0, r3
    e5b4:	4b16      	ldr	r3, [pc, #88]	; (e610 <wait_for_bootrom+0x188>)
    e5b6:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    e5b8:	4a18      	ldr	r2, [pc, #96]	; (e61c <wait_for_bootrom+0x194>)
    e5ba:	4b0b      	ldr	r3, [pc, #44]	; (e5e8 <wait_for_bootrom+0x160>)
    e5bc:	0011      	movs	r1, r2
    e5be:	0018      	movs	r0, r3
    e5c0:	4b0d      	ldr	r3, [pc, #52]	; (e5f8 <wait_for_bootrom+0x170>)
    e5c2:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    e5c4:	2313      	movs	r3, #19
    e5c6:	18fb      	adds	r3, r7, r3
    e5c8:	781b      	ldrb	r3, [r3, #0]
    e5ca:	b25b      	sxtb	r3, r3
}
    e5cc:	0018      	movs	r0, r3
    e5ce:	46bd      	mov	sp, r7
    e5d0:	b008      	add	sp, #32
    e5d2:	bd80      	pop	{r7, pc}
    e5d4:	13301354 	.word	0x13301354
    e5d8:	00001014 	.word	0x00001014
    e5dc:	0000e811 	.word	0x0000e811
    e5e0:	0000bec1 	.word	0x0000bec1
    e5e4:	000207bc 	.word	0x000207bc
    e5e8:	000c000c 	.word	0x000c000c
    e5ec:	10add09e 	.word	0x10add09e
    e5f0:	3c1cd57d 	.word	0x3c1cd57d
    e5f4:	000207ac 	.word	0x000207ac
    e5f8:	0000e855 	.word	0x0000e855
    e5fc:	0000108c 	.word	0x0000108c
    e600:	0000e131 	.word	0x0000e131
    e604:	0000039f 	.word	0x0000039f
    e608:	0000e001 	.word	0x0000e001
    e60c:	00023edc 	.word	0x00023edc
    e610:	00009a6d 	.word	0x00009a6d
    e614:	00023ee8 	.word	0x00023ee8
    e618:	00023ebc 	.word	0x00023ebc
    e61c:	ef522f61 	.word	0xef522f61

0000e620 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    e620:	b580      	push	{r7, lr}
    e622:	b088      	sub	sp, #32
    e624:	af00      	add	r7, sp, #0
    e626:	0002      	movs	r2, r0
    e628:	1dfb      	adds	r3, r7, #7
    e62a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    e62c:	231f      	movs	r3, #31
    e62e:	18fb      	adds	r3, r7, r3
    e630:	2200      	movs	r2, #0
    e632:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    e634:	2300      	movs	r3, #0
    e636:	61bb      	str	r3, [r7, #24]
    e638:	2300      	movs	r3, #0
    e63a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    e63c:	2301      	movs	r3, #1
    e63e:	425b      	negs	r3, r3
    e640:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    e642:	4b1d      	ldr	r3, [pc, #116]	; (e6b8 <wait_for_firmware_start+0x98>)
    e644:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    e646:	4b1d      	ldr	r3, [pc, #116]	; (e6bc <wait_for_firmware_start+0x9c>)
    e648:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    e64a:	1dfb      	adds	r3, r7, #7
    e64c:	781b      	ldrb	r3, [r3, #0]
    e64e:	2b02      	cmp	r3, #2
    e650:	d003      	beq.n	e65a <wait_for_firmware_start+0x3a>
    e652:	1dfb      	adds	r3, r7, #7
    e654:	781b      	ldrb	r3, [r3, #0]
    e656:	2b03      	cmp	r3, #3
    e658:	d119      	bne.n	e68e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    e65a:	4b19      	ldr	r3, [pc, #100]	; (e6c0 <wait_for_firmware_start+0xa0>)
    e65c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    e65e:	4b19      	ldr	r3, [pc, #100]	; (e6c4 <wait_for_firmware_start+0xa4>)
    e660:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    e662:	e014      	b.n	e68e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    e664:	2002      	movs	r0, #2
    e666:	4b18      	ldr	r3, [pc, #96]	; (e6c8 <wait_for_firmware_start+0xa8>)
    e668:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    e66a:	68fb      	ldr	r3, [r7, #12]
    e66c:	0018      	movs	r0, r3
    e66e:	4b17      	ldr	r3, [pc, #92]	; (e6cc <wait_for_firmware_start+0xac>)
    e670:	4798      	blx	r3
    e672:	0003      	movs	r3, r0
    e674:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    e676:	697b      	ldr	r3, [r7, #20]
    e678:	3301      	adds	r3, #1
    e67a:	617b      	str	r3, [r7, #20]
    e67c:	697a      	ldr	r2, [r7, #20]
    e67e:	693b      	ldr	r3, [r7, #16]
    e680:	429a      	cmp	r2, r3
    e682:	d304      	bcc.n	e68e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    e684:	231f      	movs	r3, #31
    e686:	18fb      	adds	r3, r7, r3
    e688:	22fb      	movs	r2, #251	; 0xfb
    e68a:	701a      	strb	r2, [r3, #0]
			goto ERR;
    e68c:	e00c      	b.n	e6a8 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    e68e:	68ba      	ldr	r2, [r7, #8]
    e690:	69bb      	ldr	r3, [r7, #24]
    e692:	429a      	cmp	r2, r3
    e694:	d1e6      	bne.n	e664 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    e696:	68bb      	ldr	r3, [r7, #8]
    e698:	4a08      	ldr	r2, [pc, #32]	; (e6bc <wait_for_firmware_start+0x9c>)
    e69a:	4293      	cmp	r3, r2
    e69c:	d104      	bne.n	e6a8 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    e69e:	4b06      	ldr	r3, [pc, #24]	; (e6b8 <wait_for_firmware_start+0x98>)
    e6a0:	2100      	movs	r1, #0
    e6a2:	0018      	movs	r0, r3
    e6a4:	4b0a      	ldr	r3, [pc, #40]	; (e6d0 <wait_for_firmware_start+0xb0>)
    e6a6:	4798      	blx	r3
	}
ERR:
	return ret;
    e6a8:	231f      	movs	r3, #31
    e6aa:	18fb      	adds	r3, r7, r3
    e6ac:	781b      	ldrb	r3, [r3, #0]
    e6ae:	b25b      	sxtb	r3, r3
}
    e6b0:	0018      	movs	r0, r3
    e6b2:	46bd      	mov	sp, r7
    e6b4:	b008      	add	sp, #32
    e6b6:	bd80      	pop	{r7, pc}
    e6b8:	0000108c 	.word	0x0000108c
    e6bc:	02532636 	.word	0x02532636
    e6c0:	000207ac 	.word	0x000207ac
    e6c4:	d75dc1c3 	.word	0xd75dc1c3
    e6c8:	0000bec1 	.word	0x0000bec1
    e6cc:	0000e811 	.word	0x0000e811
    e6d0:	0000e855 	.word	0x0000e855

0000e6d4 <chip_deinit>:

sint8 chip_deinit(void)
{
    e6d4:	b590      	push	{r4, r7, lr}
    e6d6:	b083      	sub	sp, #12
    e6d8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    e6da:	2300      	movs	r3, #0
    e6dc:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    e6de:	1dfc      	adds	r4, r7, #7
    e6e0:	003a      	movs	r2, r7
    e6e2:	23a0      	movs	r3, #160	; 0xa0
    e6e4:	015b      	lsls	r3, r3, #5
    e6e6:	0011      	movs	r1, r2
    e6e8:	0018      	movs	r0, r3
    e6ea:	4b20      	ldr	r3, [pc, #128]	; (e76c <chip_deinit+0x98>)
    e6ec:	4798      	blx	r3
    e6ee:	0003      	movs	r3, r0
    e6f0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    e6f2:	1dfb      	adds	r3, r7, #7
    e6f4:	781b      	ldrb	r3, [r3, #0]
    e6f6:	b25b      	sxtb	r3, r3
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	d00e      	beq.n	e71a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
    e6fc:	4a1c      	ldr	r2, [pc, #112]	; (e770 <chip_deinit+0x9c>)
    e6fe:	491d      	ldr	r1, [pc, #116]	; (e774 <chip_deinit+0xa0>)
    e700:	4b1d      	ldr	r3, [pc, #116]	; (e778 <chip_deinit+0xa4>)
    e702:	0018      	movs	r0, r3
    e704:	4b1d      	ldr	r3, [pc, #116]	; (e77c <chip_deinit+0xa8>)
    e706:	4798      	blx	r3
    e708:	4b1d      	ldr	r3, [pc, #116]	; (e780 <chip_deinit+0xac>)
    e70a:	0018      	movs	r0, r3
    e70c:	4b1b      	ldr	r3, [pc, #108]	; (e77c <chip_deinit+0xa8>)
    e70e:	4798      	blx	r3
    e710:	4b1c      	ldr	r3, [pc, #112]	; (e784 <chip_deinit+0xb0>)
    e712:	0018      	movs	r0, r3
    e714:	4b19      	ldr	r3, [pc, #100]	; (e77c <chip_deinit+0xa8>)
    e716:	4798      	blx	r3
		goto ERR1;
    e718:	e021      	b.n	e75e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
    e71a:	683b      	ldr	r3, [r7, #0]
    e71c:	4a1a      	ldr	r2, [pc, #104]	; (e788 <chip_deinit+0xb4>)
    e71e:	4013      	ands	r3, r2
    e720:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    e722:	683a      	ldr	r2, [r7, #0]
    e724:	1dfc      	adds	r4, r7, #7
    e726:	23a0      	movs	r3, #160	; 0xa0
    e728:	015b      	lsls	r3, r3, #5
    e72a:	0011      	movs	r1, r2
    e72c:	0018      	movs	r0, r3
    e72e:	4b17      	ldr	r3, [pc, #92]	; (e78c <chip_deinit+0xb8>)
    e730:	4798      	blx	r3
    e732:	0003      	movs	r3, r0
    e734:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    e736:	1dfb      	adds	r3, r7, #7
    e738:	781b      	ldrb	r3, [r3, #0]
    e73a:	b25b      	sxtb	r3, r3
    e73c:	2b00      	cmp	r3, #0
    e73e:	d00e      	beq.n	e75e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
    e740:	4a13      	ldr	r2, [pc, #76]	; (e790 <chip_deinit+0xbc>)
    e742:	490c      	ldr	r1, [pc, #48]	; (e774 <chip_deinit+0xa0>)
    e744:	4b0c      	ldr	r3, [pc, #48]	; (e778 <chip_deinit+0xa4>)
    e746:	0018      	movs	r0, r3
    e748:	4b0c      	ldr	r3, [pc, #48]	; (e77c <chip_deinit+0xa8>)
    e74a:	4798      	blx	r3
    e74c:	4b0c      	ldr	r3, [pc, #48]	; (e780 <chip_deinit+0xac>)
    e74e:	0018      	movs	r0, r3
    e750:	4b0a      	ldr	r3, [pc, #40]	; (e77c <chip_deinit+0xa8>)
    e752:	4798      	blx	r3
    e754:	4b0b      	ldr	r3, [pc, #44]	; (e784 <chip_deinit+0xb0>)
    e756:	0018      	movs	r0, r3
    e758:	4b08      	ldr	r3, [pc, #32]	; (e77c <chip_deinit+0xa8>)
    e75a:	4798      	blx	r3
		goto ERR1;
    e75c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    e75e:	1dfb      	adds	r3, r7, #7
    e760:	781b      	ldrb	r3, [r3, #0]
    e762:	b25b      	sxtb	r3, r3
}
    e764:	0018      	movs	r0, r3
    e766:	46bd      	mov	sp, r7
    e768:	b003      	add	sp, #12
    e76a:	bd90      	pop	{r4, r7, pc}
    e76c:	0000e831 	.word	0x0000e831
    e770:	00000201 	.word	0x00000201
    e774:	00023f28 	.word	0x00023f28
    e778:	00023e90 	.word	0x00023e90
    e77c:	00009a6d 	.word	0x00009a6d
    e780:	00023f00 	.word	0x00023f00
    e784:	00023ebc 	.word	0x00023ebc
    e788:	fffffbff 	.word	0xfffffbff
    e78c:	0000e855 	.word	0x0000e855
    e790:	00000207 	.word	0x00000207

0000e794 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    e794:	b590      	push	{r4, r7, lr}
    e796:	b085      	sub	sp, #20
    e798:	af00      	add	r7, sp, #0
    e79a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    e79c:	230f      	movs	r3, #15
    e79e:	18fb      	adds	r3, r7, r3
    e7a0:	2200      	movs	r2, #0
    e7a2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    e7a4:	230f      	movs	r3, #15
    e7a6:	18fc      	adds	r4, r7, r3
    e7a8:	687b      	ldr	r3, [r7, #4]
    e7aa:	0018      	movs	r0, r3
    e7ac:	4b05      	ldr	r3, [pc, #20]	; (e7c4 <nm_bus_iface_init+0x30>)
    e7ae:	4798      	blx	r3
    e7b0:	0003      	movs	r3, r0
    e7b2:	7023      	strb	r3, [r4, #0]
	return ret;
    e7b4:	230f      	movs	r3, #15
    e7b6:	18fb      	adds	r3, r7, r3
    e7b8:	781b      	ldrb	r3, [r3, #0]
    e7ba:	b25b      	sxtb	r3, r3
}
    e7bc:	0018      	movs	r0, r3
    e7be:	46bd      	mov	sp, r7
    e7c0:	b005      	add	sp, #20
    e7c2:	bd90      	pop	{r4, r7, pc}
    e7c4:	0000c57d 	.word	0x0000c57d

0000e7c8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    e7c8:	b590      	push	{r4, r7, lr}
    e7ca:	b083      	sub	sp, #12
    e7cc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    e7ce:	1dfb      	adds	r3, r7, #7
    e7d0:	2200      	movs	r2, #0
    e7d2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    e7d4:	1dfc      	adds	r4, r7, #7
    e7d6:	4b05      	ldr	r3, [pc, #20]	; (e7ec <nm_bus_iface_deinit+0x24>)
    e7d8:	4798      	blx	r3
    e7da:	0003      	movs	r3, r0
    e7dc:	7023      	strb	r3, [r4, #0]

	return ret;
    e7de:	1dfb      	adds	r3, r7, #7
    e7e0:	781b      	ldrb	r3, [r3, #0]
    e7e2:	b25b      	sxtb	r3, r3
}
    e7e4:	0018      	movs	r0, r3
    e7e6:	46bd      	mov	sp, r7
    e7e8:	b003      	add	sp, #12
    e7ea:	bd90      	pop	{r4, r7, pc}
    e7ec:	0000c6f5 	.word	0x0000c6f5

0000e7f0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    e7f0:	b580      	push	{r7, lr}
    e7f2:	b082      	sub	sp, #8
    e7f4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    e7f6:	1dfb      	adds	r3, r7, #7
    e7f8:	2200      	movs	r2, #0
    e7fa:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    e7fc:	4b03      	ldr	r3, [pc, #12]	; (e80c <nm_bus_reset+0x1c>)
    e7fe:	4798      	blx	r3
    e800:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    e802:	0018      	movs	r0, r3
    e804:	46bd      	mov	sp, r7
    e806:	b002      	add	sp, #8
    e808:	bd80      	pop	{r7, pc}
    e80a:	46c0      	nop			; (mov r8, r8)
    e80c:	0001061d 	.word	0x0001061d

0000e810 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    e810:	b580      	push	{r7, lr}
    e812:	b082      	sub	sp, #8
    e814:	af00      	add	r7, sp, #0
    e816:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    e818:	687b      	ldr	r3, [r7, #4]
    e81a:	0018      	movs	r0, r3
    e81c:	4b03      	ldr	r3, [pc, #12]	; (e82c <nm_read_reg+0x1c>)
    e81e:	4798      	blx	r3
    e820:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    e822:	0018      	movs	r0, r3
    e824:	46bd      	mov	sp, r7
    e826:	b002      	add	sp, #8
    e828:	bd80      	pop	{r7, pc}
    e82a:	46c0      	nop			; (mov r8, r8)
    e82c:	000107b1 	.word	0x000107b1

0000e830 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    e830:	b580      	push	{r7, lr}
    e832:	b082      	sub	sp, #8
    e834:	af00      	add	r7, sp, #0
    e836:	6078      	str	r0, [r7, #4]
    e838:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    e83a:	683a      	ldr	r2, [r7, #0]
    e83c:	687b      	ldr	r3, [r7, #4]
    e83e:	0011      	movs	r1, r2
    e840:	0018      	movs	r0, r3
    e842:	4b03      	ldr	r3, [pc, #12]	; (e850 <nm_read_reg_with_ret+0x20>)
    e844:	4798      	blx	r3
    e846:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    e848:	0018      	movs	r0, r3
    e84a:	46bd      	mov	sp, r7
    e84c:	b002      	add	sp, #8
    e84e:	bd80      	pop	{r7, pc}
    e850:	000107d5 	.word	0x000107d5

0000e854 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    e854:	b580      	push	{r7, lr}
    e856:	b082      	sub	sp, #8
    e858:	af00      	add	r7, sp, #0
    e85a:	6078      	str	r0, [r7, #4]
    e85c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    e85e:	683a      	ldr	r2, [r7, #0]
    e860:	687b      	ldr	r3, [r7, #4]
    e862:	0011      	movs	r1, r2
    e864:	0018      	movs	r0, r3
    e866:	4b03      	ldr	r3, [pc, #12]	; (e874 <nm_write_reg+0x20>)
    e868:	4798      	blx	r3
    e86a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    e86c:	0018      	movs	r0, r3
    e86e:	46bd      	mov	sp, r7
    e870:	b002      	add	sp, #8
    e872:	bd80      	pop	{r7, pc}
    e874:	00010825 	.word	0x00010825

0000e878 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    e878:	b580      	push	{r7, lr}
    e87a:	b084      	sub	sp, #16
    e87c:	af00      	add	r7, sp, #0
    e87e:	60f8      	str	r0, [r7, #12]
    e880:	60b9      	str	r1, [r7, #8]
    e882:	1dbb      	adds	r3, r7, #6
    e884:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    e886:	1dbb      	adds	r3, r7, #6
    e888:	881a      	ldrh	r2, [r3, #0]
    e88a:	68b9      	ldr	r1, [r7, #8]
    e88c:	68fb      	ldr	r3, [r7, #12]
    e88e:	0018      	movs	r0, r3
    e890:	4b03      	ldr	r3, [pc, #12]	; (e8a0 <p_nm_read_block+0x28>)
    e892:	4798      	blx	r3
    e894:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    e896:	0018      	movs	r0, r3
    e898:	46bd      	mov	sp, r7
    e89a:	b004      	add	sp, #16
    e89c:	bd80      	pop	{r7, pc}
    e89e:	46c0      	nop			; (mov r8, r8)
    e8a0:	00010875 	.word	0x00010875

0000e8a4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    e8a4:	b580      	push	{r7, lr}
    e8a6:	b086      	sub	sp, #24
    e8a8:	af00      	add	r7, sp, #0
    e8aa:	60f8      	str	r0, [r7, #12]
    e8ac:	60b9      	str	r1, [r7, #8]
    e8ae:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    e8b0:	4b2d      	ldr	r3, [pc, #180]	; (e968 <nm_read_block+0xc4>)
    e8b2:	881a      	ldrh	r2, [r3, #0]
    e8b4:	2310      	movs	r3, #16
    e8b6:	18fb      	adds	r3, r7, r3
    e8b8:	3a08      	subs	r2, #8
    e8ba:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    e8bc:	2300      	movs	r3, #0
    e8be:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    e8c0:	2313      	movs	r3, #19
    e8c2:	18fb      	adds	r3, r7, r3
    e8c4:	2200      	movs	r2, #0
    e8c6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    e8c8:	2310      	movs	r3, #16
    e8ca:	18fb      	adds	r3, r7, r3
    e8cc:	881a      	ldrh	r2, [r3, #0]
    e8ce:	687b      	ldr	r3, [r7, #4]
    e8d0:	429a      	cmp	r2, r3
    e8d2:	d313      	bcc.n	e8fc <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    e8d4:	68ba      	ldr	r2, [r7, #8]
    e8d6:	697b      	ldr	r3, [r7, #20]
    e8d8:	18d1      	adds	r1, r2, r3
    e8da:	687b      	ldr	r3, [r7, #4]
    e8dc:	b29a      	uxth	r2, r3
    e8de:	68fb      	ldr	r3, [r7, #12]
    e8e0:	0018      	movs	r0, r3
    e8e2:	4b22      	ldr	r3, [pc, #136]	; (e96c <nm_read_block+0xc8>)
    e8e4:	4798      	blx	r3
    e8e6:	0003      	movs	r3, r0
    e8e8:	b2da      	uxtb	r2, r3
    e8ea:	2313      	movs	r3, #19
    e8ec:	18fb      	adds	r3, r7, r3
    e8ee:	781b      	ldrb	r3, [r3, #0]
    e8f0:	18d3      	adds	r3, r2, r3
    e8f2:	b2da      	uxtb	r2, r3
    e8f4:	2313      	movs	r3, #19
    e8f6:	18fb      	adds	r3, r7, r3
    e8f8:	701a      	strb	r2, [r3, #0]
			break;
    e8fa:	e02d      	b.n	e958 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    e8fc:	68ba      	ldr	r2, [r7, #8]
    e8fe:	697b      	ldr	r3, [r7, #20]
    e900:	18d1      	adds	r1, r2, r3
    e902:	2310      	movs	r3, #16
    e904:	18fb      	adds	r3, r7, r3
    e906:	881a      	ldrh	r2, [r3, #0]
    e908:	68fb      	ldr	r3, [r7, #12]
    e90a:	0018      	movs	r0, r3
    e90c:	4b17      	ldr	r3, [pc, #92]	; (e96c <nm_read_block+0xc8>)
    e90e:	4798      	blx	r3
    e910:	0003      	movs	r3, r0
    e912:	b2da      	uxtb	r2, r3
    e914:	2313      	movs	r3, #19
    e916:	18fb      	adds	r3, r7, r3
    e918:	781b      	ldrb	r3, [r3, #0]
    e91a:	18d3      	adds	r3, r2, r3
    e91c:	b2da      	uxtb	r2, r3
    e91e:	2313      	movs	r3, #19
    e920:	18fb      	adds	r3, r7, r3
    e922:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    e924:	2313      	movs	r3, #19
    e926:	18fb      	adds	r3, r7, r3
    e928:	781b      	ldrb	r3, [r3, #0]
    e92a:	b25b      	sxtb	r3, r3
    e92c:	2b00      	cmp	r3, #0
    e92e:	d112      	bne.n	e956 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    e930:	2310      	movs	r3, #16
    e932:	18fb      	adds	r3, r7, r3
    e934:	881b      	ldrh	r3, [r3, #0]
    e936:	687a      	ldr	r2, [r7, #4]
    e938:	1ad3      	subs	r3, r2, r3
    e93a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    e93c:	2310      	movs	r3, #16
    e93e:	18fb      	adds	r3, r7, r3
    e940:	881b      	ldrh	r3, [r3, #0]
    e942:	697a      	ldr	r2, [r7, #20]
    e944:	18d3      	adds	r3, r2, r3
    e946:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    e948:	2310      	movs	r3, #16
    e94a:	18fb      	adds	r3, r7, r3
    e94c:	881b      	ldrh	r3, [r3, #0]
    e94e:	68fa      	ldr	r2, [r7, #12]
    e950:	18d3      	adds	r3, r2, r3
    e952:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    e954:	e7b8      	b.n	e8c8 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    e956:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    e958:	2313      	movs	r3, #19
    e95a:	18fb      	adds	r3, r7, r3
    e95c:	781b      	ldrb	r3, [r3, #0]
    e95e:	b25b      	sxtb	r3, r3
}
    e960:	0018      	movs	r0, r3
    e962:	46bd      	mov	sp, r7
    e964:	b006      	add	sp, #24
    e966:	bd80      	pop	{r7, pc}
    e968:	20000108 	.word	0x20000108
    e96c:	0000e879 	.word	0x0000e879

0000e970 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    e970:	b580      	push	{r7, lr}
    e972:	b084      	sub	sp, #16
    e974:	af00      	add	r7, sp, #0
    e976:	60f8      	str	r0, [r7, #12]
    e978:	60b9      	str	r1, [r7, #8]
    e97a:	1dbb      	adds	r3, r7, #6
    e97c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    e97e:	1dbb      	adds	r3, r7, #6
    e980:	881a      	ldrh	r2, [r3, #0]
    e982:	68b9      	ldr	r1, [r7, #8]
    e984:	68fb      	ldr	r3, [r7, #12]
    e986:	0018      	movs	r0, r3
    e988:	4b03      	ldr	r3, [pc, #12]	; (e998 <p_nm_write_block+0x28>)
    e98a:	4798      	blx	r3
    e98c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    e98e:	0018      	movs	r0, r3
    e990:	46bd      	mov	sp, r7
    e992:	b004      	add	sp, #16
    e994:	bd80      	pop	{r7, pc}
    e996:	46c0      	nop			; (mov r8, r8)
    e998:	000108cd 	.word	0x000108cd

0000e99c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    e99c:	b580      	push	{r7, lr}
    e99e:	b086      	sub	sp, #24
    e9a0:	af00      	add	r7, sp, #0
    e9a2:	60f8      	str	r0, [r7, #12]
    e9a4:	60b9      	str	r1, [r7, #8]
    e9a6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    e9a8:	4b2d      	ldr	r3, [pc, #180]	; (ea60 <nm_write_block+0xc4>)
    e9aa:	881a      	ldrh	r2, [r3, #0]
    e9ac:	2310      	movs	r3, #16
    e9ae:	18fb      	adds	r3, r7, r3
    e9b0:	3a08      	subs	r2, #8
    e9b2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    e9b4:	2300      	movs	r3, #0
    e9b6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    e9b8:	2313      	movs	r3, #19
    e9ba:	18fb      	adds	r3, r7, r3
    e9bc:	2200      	movs	r2, #0
    e9be:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    e9c0:	2310      	movs	r3, #16
    e9c2:	18fb      	adds	r3, r7, r3
    e9c4:	881a      	ldrh	r2, [r3, #0]
    e9c6:	687b      	ldr	r3, [r7, #4]
    e9c8:	429a      	cmp	r2, r3
    e9ca:	d313      	bcc.n	e9f4 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    e9cc:	68ba      	ldr	r2, [r7, #8]
    e9ce:	697b      	ldr	r3, [r7, #20]
    e9d0:	18d1      	adds	r1, r2, r3
    e9d2:	687b      	ldr	r3, [r7, #4]
    e9d4:	b29a      	uxth	r2, r3
    e9d6:	68fb      	ldr	r3, [r7, #12]
    e9d8:	0018      	movs	r0, r3
    e9da:	4b22      	ldr	r3, [pc, #136]	; (ea64 <nm_write_block+0xc8>)
    e9dc:	4798      	blx	r3
    e9de:	0003      	movs	r3, r0
    e9e0:	b2da      	uxtb	r2, r3
    e9e2:	2313      	movs	r3, #19
    e9e4:	18fb      	adds	r3, r7, r3
    e9e6:	781b      	ldrb	r3, [r3, #0]
    e9e8:	18d3      	adds	r3, r2, r3
    e9ea:	b2da      	uxtb	r2, r3
    e9ec:	2313      	movs	r3, #19
    e9ee:	18fb      	adds	r3, r7, r3
    e9f0:	701a      	strb	r2, [r3, #0]
			break;
    e9f2:	e02d      	b.n	ea50 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    e9f4:	68ba      	ldr	r2, [r7, #8]
    e9f6:	697b      	ldr	r3, [r7, #20]
    e9f8:	18d1      	adds	r1, r2, r3
    e9fa:	2310      	movs	r3, #16
    e9fc:	18fb      	adds	r3, r7, r3
    e9fe:	881a      	ldrh	r2, [r3, #0]
    ea00:	68fb      	ldr	r3, [r7, #12]
    ea02:	0018      	movs	r0, r3
    ea04:	4b17      	ldr	r3, [pc, #92]	; (ea64 <nm_write_block+0xc8>)
    ea06:	4798      	blx	r3
    ea08:	0003      	movs	r3, r0
    ea0a:	b2da      	uxtb	r2, r3
    ea0c:	2313      	movs	r3, #19
    ea0e:	18fb      	adds	r3, r7, r3
    ea10:	781b      	ldrb	r3, [r3, #0]
    ea12:	18d3      	adds	r3, r2, r3
    ea14:	b2da      	uxtb	r2, r3
    ea16:	2313      	movs	r3, #19
    ea18:	18fb      	adds	r3, r7, r3
    ea1a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    ea1c:	2313      	movs	r3, #19
    ea1e:	18fb      	adds	r3, r7, r3
    ea20:	781b      	ldrb	r3, [r3, #0]
    ea22:	b25b      	sxtb	r3, r3
    ea24:	2b00      	cmp	r3, #0
    ea26:	d112      	bne.n	ea4e <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    ea28:	2310      	movs	r3, #16
    ea2a:	18fb      	adds	r3, r7, r3
    ea2c:	881b      	ldrh	r3, [r3, #0]
    ea2e:	687a      	ldr	r2, [r7, #4]
    ea30:	1ad3      	subs	r3, r2, r3
    ea32:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    ea34:	2310      	movs	r3, #16
    ea36:	18fb      	adds	r3, r7, r3
    ea38:	881b      	ldrh	r3, [r3, #0]
    ea3a:	697a      	ldr	r2, [r7, #20]
    ea3c:	18d3      	adds	r3, r2, r3
    ea3e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    ea40:	2310      	movs	r3, #16
    ea42:	18fb      	adds	r3, r7, r3
    ea44:	881b      	ldrh	r3, [r3, #0]
    ea46:	68fa      	ldr	r2, [r7, #12]
    ea48:	18d3      	adds	r3, r2, r3
    ea4a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    ea4c:	e7b8      	b.n	e9c0 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    ea4e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    ea50:	2313      	movs	r3, #19
    ea52:	18fb      	adds	r3, r7, r3
    ea54:	781b      	ldrb	r3, [r3, #0]
    ea56:	b25b      	sxtb	r3, r3
}
    ea58:	0018      	movs	r0, r3
    ea5a:	46bd      	mov	sp, r7
    ea5c:	b006      	add	sp, #24
    ea5e:	bd80      	pop	{r7, pc}
    ea60:	20000108 	.word	0x20000108
    ea64:	0000e971 	.word	0x0000e971

0000ea68 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    ea68:	b590      	push	{r4, r7, lr}
    ea6a:	b089      	sub	sp, #36	; 0x24
    ea6c:	af00      	add	r7, sp, #0
    ea6e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    ea70:	2300      	movs	r3, #0
    ea72:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    ea74:	231f      	movs	r3, #31
    ea76:	18fb      	adds	r3, r7, r3
    ea78:	2200      	movs	r2, #0
    ea7a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    ea7c:	230c      	movs	r3, #12
    ea7e:	18fb      	adds	r3, r7, r3
    ea80:	0018      	movs	r0, r3
    ea82:	2308      	movs	r3, #8
    ea84:	001a      	movs	r2, r3
    ea86:	2100      	movs	r1, #0
    ea88:	4b64      	ldr	r3, [pc, #400]	; (ec1c <nm_get_firmware_full_info+0x1b4>)
    ea8a:	4798      	blx	r3
	if (pstrRev != NULL)
    ea8c:	687b      	ldr	r3, [r7, #4]
    ea8e:	2b00      	cmp	r3, #0
    ea90:	d100      	bne.n	ea94 <nm_get_firmware_full_info+0x2c>
    ea92:	e0ba      	b.n	ec0a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    ea94:	687b      	ldr	r3, [r7, #4]
    ea96:	2228      	movs	r2, #40	; 0x28
    ea98:	2100      	movs	r1, #0
    ea9a:	0018      	movs	r0, r3
    ea9c:	4b60      	ldr	r3, [pc, #384]	; (ec20 <nm_get_firmware_full_info+0x1b8>)
    ea9e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    eaa0:	231f      	movs	r3, #31
    eaa2:	18fc      	adds	r4, r7, r3
    eaa4:	2314      	movs	r3, #20
    eaa6:	18fb      	adds	r3, r7, r3
    eaa8:	4a5e      	ldr	r2, [pc, #376]	; (ec24 <nm_get_firmware_full_info+0x1bc>)
    eaaa:	0019      	movs	r1, r3
    eaac:	0010      	movs	r0, r2
    eaae:	4b5e      	ldr	r3, [pc, #376]	; (ec28 <nm_get_firmware_full_info+0x1c0>)
    eab0:	4798      	blx	r3
    eab2:	0003      	movs	r3, r0
    eab4:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    eab6:	231f      	movs	r3, #31
    eab8:	18fb      	adds	r3, r7, r3
    eaba:	781b      	ldrb	r3, [r3, #0]
    eabc:	b25b      	sxtb	r3, r3
    eabe:	2b00      	cmp	r3, #0
    eac0:	d000      	beq.n	eac4 <nm_get_firmware_full_info+0x5c>
    eac2:	e0a2      	b.n	ec0a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    eac4:	697b      	ldr	r3, [r7, #20]
    eac6:	2b00      	cmp	r3, #0
    eac8:	d100      	bne.n	eacc <nm_get_firmware_full_info+0x64>
    eaca:	e09a      	b.n	ec02 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    eacc:	697b      	ldr	r3, [r7, #20]
    eace:	22c0      	movs	r2, #192	; 0xc0
    ead0:	0292      	lsls	r2, r2, #10
    ead2:	4313      	orrs	r3, r2
    ead4:	221f      	movs	r2, #31
    ead6:	18bc      	adds	r4, r7, r2
    ead8:	220c      	movs	r2, #12
    eada:	18b9      	adds	r1, r7, r2
    eadc:	2208      	movs	r2, #8
    eade:	0018      	movs	r0, r3
    eae0:	4b52      	ldr	r3, [pc, #328]	; (ec2c <nm_get_firmware_full_info+0x1c4>)
    eae2:	4798      	blx	r3
    eae4:	0003      	movs	r3, r0
    eae6:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    eae8:	231f      	movs	r3, #31
    eaea:	18fb      	adds	r3, r7, r3
    eaec:	781b      	ldrb	r3, [r3, #0]
    eaee:	b25b      	sxtb	r3, r3
    eaf0:	2b00      	cmp	r3, #0
    eaf2:	d000      	beq.n	eaf6 <nm_get_firmware_full_info+0x8e>
    eaf4:	e089      	b.n	ec0a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    eaf6:	230c      	movs	r3, #12
    eaf8:	18fb      	adds	r3, r7, r3
    eafa:	685b      	ldr	r3, [r3, #4]
    eafc:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    eafe:	697b      	ldr	r3, [r7, #20]
    eb00:	041b      	lsls	r3, r3, #16
    eb02:	0c1b      	lsrs	r3, r3, #16
    eb04:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    eb06:	697b      	ldr	r3, [r7, #20]
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d100      	bne.n	eb0e <nm_get_firmware_full_info+0xa6>
    eb0c:	e074      	b.n	ebf8 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    eb0e:	697b      	ldr	r3, [r7, #20]
    eb10:	22c0      	movs	r2, #192	; 0xc0
    eb12:	0292      	lsls	r2, r2, #10
    eb14:	4313      	orrs	r3, r2
    eb16:	221f      	movs	r2, #31
    eb18:	18bc      	adds	r4, r7, r2
    eb1a:	6879      	ldr	r1, [r7, #4]
    eb1c:	2228      	movs	r2, #40	; 0x28
    eb1e:	0018      	movs	r0, r3
    eb20:	4b42      	ldr	r3, [pc, #264]	; (ec2c <nm_get_firmware_full_info+0x1c4>)
    eb22:	4798      	blx	r3
    eb24:	0003      	movs	r3, r0
    eb26:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    eb28:	231f      	movs	r3, #31
    eb2a:	18fb      	adds	r3, r7, r3
    eb2c:	781b      	ldrb	r3, [r3, #0]
    eb2e:	b25b      	sxtb	r3, r3
    eb30:	2b00      	cmp	r3, #0
    eb32:	d16a      	bne.n	ec0a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    eb34:	687b      	ldr	r3, [r7, #4]
    eb36:	791b      	ldrb	r3, [r3, #4]
    eb38:	021b      	lsls	r3, r3, #8
    eb3a:	b21a      	sxth	r2, r3
    eb3c:	687b      	ldr	r3, [r7, #4]
    eb3e:	795b      	ldrb	r3, [r3, #5]
    eb40:	011b      	lsls	r3, r3, #4
    eb42:	b21b      	sxth	r3, r3
    eb44:	21ff      	movs	r1, #255	; 0xff
    eb46:	400b      	ands	r3, r1
    eb48:	b21b      	sxth	r3, r3
    eb4a:	4313      	orrs	r3, r2
    eb4c:	b21a      	sxth	r2, r3
    eb4e:	687b      	ldr	r3, [r7, #4]
    eb50:	799b      	ldrb	r3, [r3, #6]
    eb52:	b21b      	sxth	r3, r3
    eb54:	210f      	movs	r1, #15
    eb56:	400b      	ands	r3, r1
    eb58:	b21b      	sxth	r3, r3
    eb5a:	4313      	orrs	r3, r2
    eb5c:	b21a      	sxth	r2, r3
    eb5e:	231c      	movs	r3, #28
    eb60:	18fb      	adds	r3, r7, r3
    eb62:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    eb64:	231a      	movs	r3, #26
    eb66:	18fb      	adds	r3, r7, r3
    eb68:	4a31      	ldr	r2, [pc, #196]	; (ec30 <nm_get_firmware_full_info+0x1c8>)
    eb6a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    eb6c:	687b      	ldr	r3, [r7, #4]
    eb6e:	79db      	ldrb	r3, [r3, #7]
    eb70:	021b      	lsls	r3, r3, #8
    eb72:	b21a      	sxth	r2, r3
    eb74:	687b      	ldr	r3, [r7, #4]
    eb76:	7a1b      	ldrb	r3, [r3, #8]
    eb78:	011b      	lsls	r3, r3, #4
    eb7a:	b21b      	sxth	r3, r3
    eb7c:	21ff      	movs	r1, #255	; 0xff
    eb7e:	400b      	ands	r3, r1
    eb80:	b21b      	sxth	r3, r3
    eb82:	4313      	orrs	r3, r2
    eb84:	b21a      	sxth	r2, r3
    eb86:	687b      	ldr	r3, [r7, #4]
    eb88:	7a5b      	ldrb	r3, [r3, #9]
    eb8a:	b21b      	sxth	r3, r3
    eb8c:	210f      	movs	r1, #15
    eb8e:	400b      	ands	r3, r1
    eb90:	b21b      	sxth	r3, r3
    eb92:	4313      	orrs	r3, r2
    eb94:	b21a      	sxth	r2, r3
    eb96:	2318      	movs	r3, #24
    eb98:	18fb      	adds	r3, r7, r3
    eb9a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    eb9c:	231c      	movs	r3, #28
    eb9e:	18fb      	adds	r3, r7, r3
    eba0:	881b      	ldrh	r3, [r3, #0]
    eba2:	2b00      	cmp	r3, #0
    eba4:	d009      	beq.n	ebba <nm_get_firmware_full_info+0x152>
    eba6:	2318      	movs	r3, #24
    eba8:	18fb      	adds	r3, r7, r3
    ebaa:	881b      	ldrh	r3, [r3, #0]
    ebac:	2b00      	cmp	r3, #0
    ebae:	d004      	beq.n	ebba <nm_get_firmware_full_info+0x152>
    ebb0:	2318      	movs	r3, #24
    ebb2:	18fb      	adds	r3, r7, r3
    ebb4:	881b      	ldrh	r3, [r3, #0]
    ebb6:	2b00      	cmp	r3, #0
    ebb8:	d104      	bne.n	ebc4 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    ebba:	231f      	movs	r3, #31
    ebbc:	18fb      	adds	r3, r7, r3
    ebbe:	22f4      	movs	r2, #244	; 0xf4
    ebc0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    ebc2:	e022      	b.n	ec0a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    ebc4:	231a      	movs	r3, #26
    ebc6:	18fa      	adds	r2, r7, r3
    ebc8:	2318      	movs	r3, #24
    ebca:	18fb      	adds	r3, r7, r3
    ebcc:	8812      	ldrh	r2, [r2, #0]
    ebce:	881b      	ldrh	r3, [r3, #0]
    ebd0:	429a      	cmp	r2, r3
    ebd2:	d204      	bcs.n	ebde <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    ebd4:	231f      	movs	r3, #31
    ebd6:	18fb      	adds	r3, r7, r3
    ebd8:	22f3      	movs	r2, #243	; 0xf3
    ebda:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    ebdc:	e015      	b.n	ec0a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    ebde:	231a      	movs	r3, #26
    ebe0:	18fa      	adds	r2, r7, r3
    ebe2:	231c      	movs	r3, #28
    ebe4:	18fb      	adds	r3, r7, r3
    ebe6:	8812      	ldrh	r2, [r2, #0]
    ebe8:	881b      	ldrh	r3, [r3, #0]
    ebea:	429a      	cmp	r2, r3
    ebec:	d90d      	bls.n	ec0a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    ebee:	231f      	movs	r3, #31
    ebf0:	18fb      	adds	r3, r7, r3
    ebf2:	22f3      	movs	r2, #243	; 0xf3
    ebf4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    ebf6:	e008      	b.n	ec0a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    ebf8:	231f      	movs	r3, #31
    ebfa:	18fb      	adds	r3, r7, r3
    ebfc:	22f4      	movs	r2, #244	; 0xf4
    ebfe:	701a      	strb	r2, [r3, #0]
    ec00:	e003      	b.n	ec0a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    ec02:	231f      	movs	r3, #31
    ec04:	18fb      	adds	r3, r7, r3
    ec06:	22f4      	movs	r2, #244	; 0xf4
    ec08:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    ec0a:	231f      	movs	r3, #31
    ec0c:	18fb      	adds	r3, r7, r3
    ec0e:	781b      	ldrb	r3, [r3, #0]
    ec10:	b25b      	sxtb	r3, r3
}
    ec12:	0018      	movs	r0, r3
    ec14:	46bd      	mov	sp, r7
    ec16:	b009      	add	sp, #36	; 0x24
    ec18:	bd90      	pop	{r4, r7, pc}
    ec1a:	46c0      	nop			; (mov r8, r8)
    ec1c:	00020123 	.word	0x00020123
    ec20:	0000c7a1 	.word	0x0000c7a1
    ec24:	000c0008 	.word	0x000c0008
    ec28:	0000e831 	.word	0x0000e831
    ec2c:	0000e8a5 	.word	0x0000e8a5
    ec30:	00001354 	.word	0x00001354

0000ec34 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    ec34:	b590      	push	{r4, r7, lr}
    ec36:	b085      	sub	sp, #20
    ec38:	af00      	add	r7, sp, #0
    ec3a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    ec3c:	230f      	movs	r3, #15
    ec3e:	18fb      	adds	r3, r7, r3
    ec40:	2200      	movs	r2, #0
    ec42:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    ec44:	687b      	ldr	r3, [r7, #4]
    ec46:	2b00      	cmp	r3, #0
    ec48:	d013      	beq.n	ec72 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    ec4a:	230e      	movs	r3, #14
    ec4c:	18fb      	adds	r3, r7, r3
    ec4e:	687a      	ldr	r2, [r7, #4]
    ec50:	7812      	ldrb	r2, [r2, #0]
    ec52:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    ec54:	230e      	movs	r3, #14
    ec56:	18fb      	adds	r3, r7, r3
    ec58:	781b      	ldrb	r3, [r3, #0]
    ec5a:	2b00      	cmp	r3, #0
    ec5c:	d004      	beq.n	ec68 <nm_drv_init+0x34>
    ec5e:	230e      	movs	r3, #14
    ec60:	18fb      	adds	r3, r7, r3
    ec62:	781b      	ldrb	r3, [r3, #0]
    ec64:	2b04      	cmp	r3, #4
    ec66:	d908      	bls.n	ec7a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    ec68:	230e      	movs	r3, #14
    ec6a:	18fb      	adds	r3, r7, r3
    ec6c:	2201      	movs	r2, #1
    ec6e:	701a      	strb	r2, [r3, #0]
    ec70:	e003      	b.n	ec7a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    ec72:	230e      	movs	r3, #14
    ec74:	18fb      	adds	r3, r7, r3
    ec76:	2201      	movs	r2, #1
    ec78:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    ec7a:	230f      	movs	r3, #15
    ec7c:	18fc      	adds	r4, r7, r3
    ec7e:	2000      	movs	r0, #0
    ec80:	4b41      	ldr	r3, [pc, #260]	; (ed88 <nm_drv_init+0x154>)
    ec82:	4798      	blx	r3
    ec84:	0003      	movs	r3, r0
    ec86:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    ec88:	230f      	movs	r3, #15
    ec8a:	18fb      	adds	r3, r7, r3
    ec8c:	781b      	ldrb	r3, [r3, #0]
    ec8e:	b25b      	sxtb	r3, r3
    ec90:	2b00      	cmp	r3, #0
    ec92:	d00f      	beq.n	ecb4 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    ec94:	2390      	movs	r3, #144	; 0x90
    ec96:	005a      	lsls	r2, r3, #1
    ec98:	493c      	ldr	r1, [pc, #240]	; (ed8c <nm_drv_init+0x158>)
    ec9a:	4b3d      	ldr	r3, [pc, #244]	; (ed90 <nm_drv_init+0x15c>)
    ec9c:	0018      	movs	r0, r3
    ec9e:	4b3d      	ldr	r3, [pc, #244]	; (ed94 <nm_drv_init+0x160>)
    eca0:	4798      	blx	r3
    eca2:	4b3d      	ldr	r3, [pc, #244]	; (ed98 <nm_drv_init+0x164>)
    eca4:	0018      	movs	r0, r3
    eca6:	4b3b      	ldr	r3, [pc, #236]	; (ed94 <nm_drv_init+0x160>)
    eca8:	4798      	blx	r3
    ecaa:	4b3c      	ldr	r3, [pc, #240]	; (ed9c <nm_drv_init+0x168>)
    ecac:	0018      	movs	r0, r3
    ecae:	4b39      	ldr	r3, [pc, #228]	; (ed94 <nm_drv_init+0x160>)
    ecb0:	4798      	blx	r3
		goto ERR1;
    ecb2:	e061      	b.n	ed78 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    ecb4:	4b3a      	ldr	r3, [pc, #232]	; (eda0 <nm_drv_init+0x16c>)
    ecb6:	0018      	movs	r0, r3
    ecb8:	4b36      	ldr	r3, [pc, #216]	; (ed94 <nm_drv_init+0x160>)
    ecba:	4798      	blx	r3
    ecbc:	4b39      	ldr	r3, [pc, #228]	; (eda4 <nm_drv_init+0x170>)
    ecbe:	4798      	blx	r3
    ecc0:	0002      	movs	r2, r0
    ecc2:	4b39      	ldr	r3, [pc, #228]	; (eda8 <nm_drv_init+0x174>)
    ecc4:	0011      	movs	r1, r2
    ecc6:	0018      	movs	r0, r3
    ecc8:	4b32      	ldr	r3, [pc, #200]	; (ed94 <nm_drv_init+0x160>)
    ecca:	4798      	blx	r3
    eccc:	4b33      	ldr	r3, [pc, #204]	; (ed9c <nm_drv_init+0x168>)
    ecce:	0018      	movs	r0, r3
    ecd0:	4b30      	ldr	r3, [pc, #192]	; (ed94 <nm_drv_init+0x160>)
    ecd2:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    ecd4:	4b35      	ldr	r3, [pc, #212]	; (edac <nm_drv_init+0x178>)
    ecd6:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    ecd8:	230f      	movs	r3, #15
    ecda:	18fc      	adds	r4, r7, r3
    ecdc:	230e      	movs	r3, #14
    ecde:	18fb      	adds	r3, r7, r3
    ece0:	781b      	ldrb	r3, [r3, #0]
    ece2:	0018      	movs	r0, r3
    ece4:	4b32      	ldr	r3, [pc, #200]	; (edb0 <nm_drv_init+0x17c>)
    ece6:	4798      	blx	r3
    ece8:	0003      	movs	r3, r0
    ecea:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    ecec:	230f      	movs	r3, #15
    ecee:	18fb      	adds	r3, r7, r3
    ecf0:	781b      	ldrb	r3, [r3, #0]
    ecf2:	b25b      	sxtb	r3, r3
    ecf4:	2b00      	cmp	r3, #0
    ecf6:	d13a      	bne.n	ed6e <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    ecf8:	230f      	movs	r3, #15
    ecfa:	18fc      	adds	r4, r7, r3
    ecfc:	230e      	movs	r3, #14
    ecfe:	18fb      	adds	r3, r7, r3
    ed00:	781b      	ldrb	r3, [r3, #0]
    ed02:	0018      	movs	r0, r3
    ed04:	4b2b      	ldr	r3, [pc, #172]	; (edb4 <nm_drv_init+0x180>)
    ed06:	4798      	blx	r3
    ed08:	0003      	movs	r3, r0
    ed0a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    ed0c:	230f      	movs	r3, #15
    ed0e:	18fb      	adds	r3, r7, r3
    ed10:	781b      	ldrb	r3, [r3, #0]
    ed12:	b25b      	sxtb	r3, r3
    ed14:	2b00      	cmp	r3, #0
    ed16:	d12c      	bne.n	ed72 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    ed18:	230e      	movs	r3, #14
    ed1a:	18fb      	adds	r3, r7, r3
    ed1c:	781b      	ldrb	r3, [r3, #0]
    ed1e:	2b02      	cmp	r3, #2
    ed20:	d02a      	beq.n	ed78 <nm_drv_init+0x144>
    ed22:	230e      	movs	r3, #14
    ed24:	18fb      	adds	r3, r7, r3
    ed26:	781b      	ldrb	r3, [r3, #0]
    ed28:	2b03      	cmp	r3, #3
    ed2a:	d025      	beq.n	ed78 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    ed2c:	230f      	movs	r3, #15
    ed2e:	18fc      	adds	r4, r7, r3
    ed30:	4b21      	ldr	r3, [pc, #132]	; (edb8 <nm_drv_init+0x184>)
    ed32:	4798      	blx	r3
    ed34:	0003      	movs	r3, r0
    ed36:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    ed38:	230f      	movs	r3, #15
    ed3a:	18fb      	adds	r3, r7, r3
    ed3c:	781b      	ldrb	r3, [r3, #0]
    ed3e:	b25b      	sxtb	r3, r3
    ed40:	2b00      	cmp	r3, #0
    ed42:	d00f      	beq.n	ed64 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
    ed44:	23a7      	movs	r3, #167	; 0xa7
    ed46:	005a      	lsls	r2, r3, #1
    ed48:	4910      	ldr	r1, [pc, #64]	; (ed8c <nm_drv_init+0x158>)
    ed4a:	4b11      	ldr	r3, [pc, #68]	; (ed90 <nm_drv_init+0x15c>)
    ed4c:	0018      	movs	r0, r3
    ed4e:	4b11      	ldr	r3, [pc, #68]	; (ed94 <nm_drv_init+0x160>)
    ed50:	4798      	blx	r3
    ed52:	4b1a      	ldr	r3, [pc, #104]	; (edbc <nm_drv_init+0x188>)
    ed54:	0018      	movs	r0, r3
    ed56:	4b0f      	ldr	r3, [pc, #60]	; (ed94 <nm_drv_init+0x160>)
    ed58:	4798      	blx	r3
    ed5a:	4b10      	ldr	r3, [pc, #64]	; (ed9c <nm_drv_init+0x168>)
    ed5c:	0018      	movs	r0, r3
    ed5e:	4b0d      	ldr	r3, [pc, #52]	; (ed94 <nm_drv_init+0x160>)
    ed60:	4798      	blx	r3
		goto ERR2;
    ed62:	e007      	b.n	ed74 <nm_drv_init+0x140>
	}
	return ret;
    ed64:	230f      	movs	r3, #15
    ed66:	18fb      	adds	r3, r7, r3
    ed68:	781b      	ldrb	r3, [r3, #0]
    ed6a:	b25b      	sxtb	r3, r3
    ed6c:	e008      	b.n	ed80 <nm_drv_init+0x14c>
		goto ERR2;
    ed6e:	46c0      	nop			; (mov r8, r8)
    ed70:	e000      	b.n	ed74 <nm_drv_init+0x140>
		goto ERR2;
    ed72:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    ed74:	4b12      	ldr	r3, [pc, #72]	; (edc0 <nm_drv_init+0x18c>)
    ed76:	4798      	blx	r3
ERR1:
	return ret;
    ed78:	230f      	movs	r3, #15
    ed7a:	18fb      	adds	r3, r7, r3
    ed7c:	781b      	ldrb	r3, [r3, #0]
    ed7e:	b25b      	sxtb	r3, r3
}
    ed80:	0018      	movs	r0, r3
    ed82:	46bd      	mov	sp, r7
    ed84:	b005      	add	sp, #20
    ed86:	bd90      	pop	{r4, r7, pc}
    ed88:	0000e795 	.word	0x0000e795
    ed8c:	00024004 	.word	0x00024004
    ed90:	00023f34 	.word	0x00023f34
    ed94:	00009a6d 	.word	0x00009a6d
    ed98:	00023f48 	.word	0x00023f48
    ed9c:	00023f64 	.word	0x00023f64
    eda0:	00023f68 	.word	0x00023f68
    eda4:	0000e131 	.word	0x0000e131
    eda8:	00023f74 	.word	0x00023f74
    edac:	0001064d 	.word	0x0001064d
    edb0:	0000e489 	.word	0x0000e489
    edb4:	0000e621 	.word	0x0000e621
    edb8:	0000e07d 	.word	0x0000e07d
    edbc:	00023f84 	.word	0x00023f84
    edc0:	0000e7c9 	.word	0x0000e7c9

0000edc4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    edc4:	b590      	push	{r4, r7, lr}
    edc6:	b085      	sub	sp, #20
    edc8:	af00      	add	r7, sp, #0
    edca:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    edcc:	230f      	movs	r3, #15
    edce:	18fc      	adds	r4, r7, r3
    edd0:	4b2e      	ldr	r3, [pc, #184]	; (ee8c <nm_drv_deinit+0xc8>)
    edd2:	4798      	blx	r3
    edd4:	0003      	movs	r3, r0
    edd6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    edd8:	230f      	movs	r3, #15
    edda:	18fb      	adds	r3, r7, r3
    eddc:	781b      	ldrb	r3, [r3, #0]
    edde:	b25b      	sxtb	r3, r3
    ede0:	2b00      	cmp	r3, #0
    ede2:	d010      	beq.n	ee06 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    ede4:	2366      	movs	r3, #102	; 0x66
    ede6:	33ff      	adds	r3, #255	; 0xff
    ede8:	001a      	movs	r2, r3
    edea:	4929      	ldr	r1, [pc, #164]	; (ee90 <nm_drv_deinit+0xcc>)
    edec:	4b29      	ldr	r3, [pc, #164]	; (ee94 <nm_drv_deinit+0xd0>)
    edee:	0018      	movs	r0, r3
    edf0:	4b29      	ldr	r3, [pc, #164]	; (ee98 <nm_drv_deinit+0xd4>)
    edf2:	4798      	blx	r3
    edf4:	4b29      	ldr	r3, [pc, #164]	; (ee9c <nm_drv_deinit+0xd8>)
    edf6:	0018      	movs	r0, r3
    edf8:	4b27      	ldr	r3, [pc, #156]	; (ee98 <nm_drv_deinit+0xd4>)
    edfa:	4798      	blx	r3
    edfc:	4b28      	ldr	r3, [pc, #160]	; (eea0 <nm_drv_deinit+0xdc>)
    edfe:	0018      	movs	r0, r3
    ee00:	4b25      	ldr	r3, [pc, #148]	; (ee98 <nm_drv_deinit+0xd4>)
    ee02:	4798      	blx	r3
		goto ERR1;
    ee04:	e03a      	b.n	ee7c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    ee06:	230f      	movs	r3, #15
    ee08:	18fc      	adds	r4, r7, r3
    ee0a:	2000      	movs	r0, #0
    ee0c:	4b25      	ldr	r3, [pc, #148]	; (eea4 <nm_drv_deinit+0xe0>)
    ee0e:	4798      	blx	r3
    ee10:	0003      	movs	r3, r0
    ee12:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    ee14:	230f      	movs	r3, #15
    ee16:	18fb      	adds	r3, r7, r3
    ee18:	781b      	ldrb	r3, [r3, #0]
    ee1a:	b25b      	sxtb	r3, r3
    ee1c:	2b00      	cmp	r3, #0
    ee1e:	d00f      	beq.n	ee40 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    ee20:	23b6      	movs	r3, #182	; 0xb6
    ee22:	005a      	lsls	r2, r3, #1
    ee24:	491a      	ldr	r1, [pc, #104]	; (ee90 <nm_drv_deinit+0xcc>)
    ee26:	4b1b      	ldr	r3, [pc, #108]	; (ee94 <nm_drv_deinit+0xd0>)
    ee28:	0018      	movs	r0, r3
    ee2a:	4b1b      	ldr	r3, [pc, #108]	; (ee98 <nm_drv_deinit+0xd4>)
    ee2c:	4798      	blx	r3
    ee2e:	4b1e      	ldr	r3, [pc, #120]	; (eea8 <nm_drv_deinit+0xe4>)
    ee30:	0018      	movs	r0, r3
    ee32:	4b19      	ldr	r3, [pc, #100]	; (ee98 <nm_drv_deinit+0xd4>)
    ee34:	4798      	blx	r3
    ee36:	4b1a      	ldr	r3, [pc, #104]	; (eea0 <nm_drv_deinit+0xdc>)
    ee38:	0018      	movs	r0, r3
    ee3a:	4b17      	ldr	r3, [pc, #92]	; (ee98 <nm_drv_deinit+0xd4>)
    ee3c:	4798      	blx	r3
		goto ERR1;
    ee3e:	e01d      	b.n	ee7c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
    ee40:	230f      	movs	r3, #15
    ee42:	18fc      	adds	r4, r7, r3
    ee44:	4b19      	ldr	r3, [pc, #100]	; (eeac <nm_drv_deinit+0xe8>)
    ee46:	4798      	blx	r3
    ee48:	0003      	movs	r3, r0
    ee4a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    ee4c:	230f      	movs	r3, #15
    ee4e:	18fb      	adds	r3, r7, r3
    ee50:	781b      	ldrb	r3, [r3, #0]
    ee52:	b25b      	sxtb	r3, r3
    ee54:	2b00      	cmp	r3, #0
    ee56:	d00f      	beq.n	ee78 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
    ee58:	23b9      	movs	r3, #185	; 0xb9
    ee5a:	005a      	lsls	r2, r3, #1
    ee5c:	490c      	ldr	r1, [pc, #48]	; (ee90 <nm_drv_deinit+0xcc>)
    ee5e:	4b0d      	ldr	r3, [pc, #52]	; (ee94 <nm_drv_deinit+0xd0>)
    ee60:	0018      	movs	r0, r3
    ee62:	4b0d      	ldr	r3, [pc, #52]	; (ee98 <nm_drv_deinit+0xd4>)
    ee64:	4798      	blx	r3
    ee66:	4b12      	ldr	r3, [pc, #72]	; (eeb0 <nm_drv_deinit+0xec>)
    ee68:	0018      	movs	r0, r3
    ee6a:	4b0b      	ldr	r3, [pc, #44]	; (ee98 <nm_drv_deinit+0xd4>)
    ee6c:	4798      	blx	r3
    ee6e:	4b0c      	ldr	r3, [pc, #48]	; (eea0 <nm_drv_deinit+0xdc>)
    ee70:	0018      	movs	r0, r3
    ee72:	4b09      	ldr	r3, [pc, #36]	; (ee98 <nm_drv_deinit+0xd4>)
    ee74:	4798      	blx	r3
		goto ERR1;
    ee76:	e001      	b.n	ee7c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    ee78:	4b0e      	ldr	r3, [pc, #56]	; (eeb4 <nm_drv_deinit+0xf0>)
    ee7a:	4798      	blx	r3
#endif

ERR1:
	return ret;
    ee7c:	230f      	movs	r3, #15
    ee7e:	18fb      	adds	r3, r7, r3
    ee80:	781b      	ldrb	r3, [r3, #0]
    ee82:	b25b      	sxtb	r3, r3
}
    ee84:	0018      	movs	r0, r3
    ee86:	46bd      	mov	sp, r7
    ee88:	b005      	add	sp, #20
    ee8a:	bd90      	pop	{r4, r7, pc}
    ee8c:	0000e6d5 	.word	0x0000e6d5
    ee90:	00024010 	.word	0x00024010
    ee94:	00023f34 	.word	0x00023f34
    ee98:	00009a6d 	.word	0x00009a6d
    ee9c:	00023fa4 	.word	0x00023fa4
    eea0:	00023f64 	.word	0x00023f64
    eea4:	00011af5 	.word	0x00011af5
    eea8:	00023fc4 	.word	0x00023fc4
    eeac:	0000e7c9 	.word	0x0000e7c9
    eeb0:	00023fe8 	.word	0x00023fe8
    eeb4:	00010799 	.word	0x00010799

0000eeb8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    eeb8:	b580      	push	{r7, lr}
    eeba:	b086      	sub	sp, #24
    eebc:	af00      	add	r7, sp, #0
    eebe:	6078      	str	r0, [r7, #4]
    eec0:	000a      	movs	r2, r1
    eec2:	1cbb      	adds	r3, r7, #2
    eec4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    eec6:	230c      	movs	r3, #12
    eec8:	18fb      	adds	r3, r7, r3
    eeca:	2200      	movs	r2, #0
    eecc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    eece:	230c      	movs	r3, #12
    eed0:	18fb      	adds	r3, r7, r3
    eed2:	687a      	ldr	r2, [r7, #4]
    eed4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    eed6:	230c      	movs	r3, #12
    eed8:	18fb      	adds	r3, r7, r3
    eeda:	1cba      	adds	r2, r7, #2
    eedc:	8812      	ldrh	r2, [r2, #0]
    eede:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    eee0:	230c      	movs	r3, #12
    eee2:	18fb      	adds	r3, r7, r3
    eee4:	0019      	movs	r1, r3
    eee6:	2003      	movs	r0, #3
    eee8:	4b03      	ldr	r3, [pc, #12]	; (eef8 <nmi_spi_read+0x40>)
    eeea:	4798      	blx	r3
    eeec:	0003      	movs	r3, r0
}
    eeee:	0018      	movs	r0, r3
    eef0:	46bd      	mov	sp, r7
    eef2:	b006      	add	sp, #24
    eef4:	bd80      	pop	{r7, pc}
    eef6:	46c0      	nop			; (mov r8, r8)
    eef8:	0000c665 	.word	0x0000c665

0000eefc <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    eefc:	b580      	push	{r7, lr}
    eefe:	b086      	sub	sp, #24
    ef00:	af00      	add	r7, sp, #0
    ef02:	6078      	str	r0, [r7, #4]
    ef04:	000a      	movs	r2, r1
    ef06:	1cbb      	adds	r3, r7, #2
    ef08:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    ef0a:	230c      	movs	r3, #12
    ef0c:	18fb      	adds	r3, r7, r3
    ef0e:	687a      	ldr	r2, [r7, #4]
    ef10:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    ef12:	230c      	movs	r3, #12
    ef14:	18fb      	adds	r3, r7, r3
    ef16:	2200      	movs	r2, #0
    ef18:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    ef1a:	230c      	movs	r3, #12
    ef1c:	18fb      	adds	r3, r7, r3
    ef1e:	1cba      	adds	r2, r7, #2
    ef20:	8812      	ldrh	r2, [r2, #0]
    ef22:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    ef24:	230c      	movs	r3, #12
    ef26:	18fb      	adds	r3, r7, r3
    ef28:	0019      	movs	r1, r3
    ef2a:	2003      	movs	r0, #3
    ef2c:	4b03      	ldr	r3, [pc, #12]	; (ef3c <nmi_spi_write+0x40>)
    ef2e:	4798      	blx	r3
    ef30:	0003      	movs	r3, r0
}
    ef32:	0018      	movs	r0, r3
    ef34:	46bd      	mov	sp, r7
    ef36:	b006      	add	sp, #24
    ef38:	bd80      	pop	{r7, pc}
    ef3a:	46c0      	nop			; (mov r8, r8)
    ef3c:	0000c665 	.word	0x0000c665

0000ef40 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
    ef40:	b580      	push	{r7, lr}
    ef42:	b088      	sub	sp, #32
    ef44:	af00      	add	r7, sp, #0
    ef46:	60f8      	str	r0, [r7, #12]
    ef48:	60b9      	str	r1, [r7, #8]
    ef4a:	1dbb      	adds	r3, r7, #6
    ef4c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
    ef4e:	2314      	movs	r3, #20
    ef50:	18fb      	adds	r3, r7, r3
    ef52:	68fa      	ldr	r2, [r7, #12]
    ef54:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
    ef56:	2314      	movs	r3, #20
    ef58:	18fb      	adds	r3, r7, r3
    ef5a:	68ba      	ldr	r2, [r7, #8]
    ef5c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    ef5e:	2314      	movs	r3, #20
    ef60:	18fb      	adds	r3, r7, r3
    ef62:	1dba      	adds	r2, r7, #6
    ef64:	8812      	ldrh	r2, [r2, #0]
    ef66:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
    ef68:	2314      	movs	r3, #20
    ef6a:	18fb      	adds	r3, r7, r3
    ef6c:	0019      	movs	r1, r3
    ef6e:	2003      	movs	r0, #3
    ef70:	4b03      	ldr	r3, [pc, #12]	; (ef80 <nmi_spi_rw+0x40>)
    ef72:	4798      	blx	r3
    ef74:	0003      	movs	r3, r0
}
    ef76:	0018      	movs	r0, r3
    ef78:	46bd      	mov	sp, r7
    ef7a:	b008      	add	sp, #32
    ef7c:	bd80      	pop	{r7, pc}
    ef7e:	46c0      	nop			; (mov r8, r8)
    ef80:	0000c665 	.word	0x0000c665

0000ef84 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    ef84:	b580      	push	{r7, lr}
    ef86:	b082      	sub	sp, #8
    ef88:	af00      	add	r7, sp, #0
    ef8a:	0002      	movs	r2, r0
    ef8c:	1dfb      	adds	r3, r7, #7
    ef8e:	701a      	strb	r2, [r3, #0]
    ef90:	1dbb      	adds	r3, r7, #6
    ef92:	1c0a      	adds	r2, r1, #0
    ef94:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    ef96:	1dfb      	adds	r3, r7, #7
    ef98:	781b      	ldrb	r3, [r3, #0]
    ef9a:	005a      	lsls	r2, r3, #1
    ef9c:	1dbb      	adds	r3, r7, #6
    ef9e:	781b      	ldrb	r3, [r3, #0]
    efa0:	4053      	eors	r3, r2
    efa2:	4a03      	ldr	r2, [pc, #12]	; (efb0 <crc7_byte+0x2c>)
    efa4:	5cd3      	ldrb	r3, [r2, r3]
}
    efa6:	0018      	movs	r0, r3
    efa8:	46bd      	mov	sp, r7
    efaa:	b002      	add	sp, #8
    efac:	bd80      	pop	{r7, pc}
    efae:	46c0      	nop			; (mov r8, r8)
    efb0:	00024020 	.word	0x00024020

0000efb4 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    efb4:	b590      	push	{r4, r7, lr}
    efb6:	b085      	sub	sp, #20
    efb8:	af00      	add	r7, sp, #0
    efba:	60b9      	str	r1, [r7, #8]
    efbc:	607a      	str	r2, [r7, #4]
    efbe:	230f      	movs	r3, #15
    efc0:	18fb      	adds	r3, r7, r3
    efc2:	1c02      	adds	r2, r0, #0
    efc4:	701a      	strb	r2, [r3, #0]
	while (len--)
    efc6:	e00e      	b.n	efe6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    efc8:	68bb      	ldr	r3, [r7, #8]
    efca:	1c5a      	adds	r2, r3, #1
    efcc:	60ba      	str	r2, [r7, #8]
    efce:	781a      	ldrb	r2, [r3, #0]
    efd0:	230f      	movs	r3, #15
    efd2:	18fc      	adds	r4, r7, r3
    efd4:	230f      	movs	r3, #15
    efd6:	18fb      	adds	r3, r7, r3
    efd8:	781b      	ldrb	r3, [r3, #0]
    efda:	0011      	movs	r1, r2
    efdc:	0018      	movs	r0, r3
    efde:	4b08      	ldr	r3, [pc, #32]	; (f000 <crc7+0x4c>)
    efe0:	4798      	blx	r3
    efe2:	0003      	movs	r3, r0
    efe4:	7023      	strb	r3, [r4, #0]
	while (len--)
    efe6:	687b      	ldr	r3, [r7, #4]
    efe8:	1e5a      	subs	r2, r3, #1
    efea:	607a      	str	r2, [r7, #4]
    efec:	2b00      	cmp	r3, #0
    efee:	d1eb      	bne.n	efc8 <crc7+0x14>
	return crc;
    eff0:	230f      	movs	r3, #15
    eff2:	18fb      	adds	r3, r7, r3
    eff4:	781b      	ldrb	r3, [r3, #0]
}
    eff6:	0018      	movs	r0, r3
    eff8:	46bd      	mov	sp, r7
    effa:	b005      	add	sp, #20
    effc:	bd90      	pop	{r4, r7, pc}
    effe:	46c0      	nop			; (mov r8, r8)
    f000:	0000ef85 	.word	0x0000ef85

0000f004 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    f004:	b590      	push	{r4, r7, lr}
    f006:	b089      	sub	sp, #36	; 0x24
    f008:	af00      	add	r7, sp, #0
    f00a:	60b9      	str	r1, [r7, #8]
    f00c:	607a      	str	r2, [r7, #4]
    f00e:	603b      	str	r3, [r7, #0]
    f010:	230f      	movs	r3, #15
    f012:	18fb      	adds	r3, r7, r3
    f014:	1c02      	adds	r2, r0, #0
    f016:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    f018:	231f      	movs	r3, #31
    f01a:	18fb      	adds	r3, r7, r3
    f01c:	2205      	movs	r2, #5
    f01e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    f020:	231e      	movs	r3, #30
    f022:	18fb      	adds	r3, r7, r3
    f024:	2201      	movs	r2, #1
    f026:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    f028:	2314      	movs	r3, #20
    f02a:	18fb      	adds	r3, r7, r3
    f02c:	220f      	movs	r2, #15
    f02e:	18ba      	adds	r2, r7, r2
    f030:	7812      	ldrb	r2, [r2, #0]
    f032:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    f034:	230f      	movs	r3, #15
    f036:	18fb      	adds	r3, r7, r3
    f038:	781b      	ldrb	r3, [r3, #0]
    f03a:	3bc1      	subs	r3, #193	; 0xc1
    f03c:	2b0e      	cmp	r3, #14
    f03e:	d900      	bls.n	f042 <spi_cmd+0x3e>
    f040:	e11b      	b.n	f27a <spi_cmd+0x276>
    f042:	009a      	lsls	r2, r3, #2
    f044:	4bb6      	ldr	r3, [pc, #728]	; (f320 <spi_cmd+0x31c>)
    f046:	18d3      	adds	r3, r2, r3
    f048:	681b      	ldr	r3, [r3, #0]
    f04a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    f04c:	68bb      	ldr	r3, [r7, #8]
    f04e:	0c1b      	lsrs	r3, r3, #16
    f050:	b2da      	uxtb	r2, r3
    f052:	2314      	movs	r3, #20
    f054:	18fb      	adds	r3, r7, r3
    f056:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    f058:	68bb      	ldr	r3, [r7, #8]
    f05a:	0a1b      	lsrs	r3, r3, #8
    f05c:	b2da      	uxtb	r2, r3
    f05e:	2314      	movs	r3, #20
    f060:	18fb      	adds	r3, r7, r3
    f062:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    f064:	68bb      	ldr	r3, [r7, #8]
    f066:	b2da      	uxtb	r2, r3
    f068:	2314      	movs	r3, #20
    f06a:	18fb      	adds	r3, r7, r3
    f06c:	70da      	strb	r2, [r3, #3]
		len = 5;
    f06e:	231f      	movs	r3, #31
    f070:	18fb      	adds	r3, r7, r3
    f072:	2205      	movs	r2, #5
    f074:	701a      	strb	r2, [r3, #0]
		break;
    f076:	e105      	b.n	f284 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    f078:	68bb      	ldr	r3, [r7, #8]
    f07a:	0a1b      	lsrs	r3, r3, #8
    f07c:	b2da      	uxtb	r2, r3
    f07e:	2314      	movs	r3, #20
    f080:	18fb      	adds	r3, r7, r3
    f082:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    f084:	2330      	movs	r3, #48	; 0x30
    f086:	18fb      	adds	r3, r7, r3
    f088:	781b      	ldrb	r3, [r3, #0]
    f08a:	2b00      	cmp	r3, #0
    f08c:	d009      	beq.n	f0a2 <spi_cmd+0x9e>
    f08e:	2314      	movs	r3, #20
    f090:	18fb      	adds	r3, r7, r3
    f092:	785b      	ldrb	r3, [r3, #1]
    f094:	2280      	movs	r2, #128	; 0x80
    f096:	4252      	negs	r2, r2
    f098:	4313      	orrs	r3, r2
    f09a:	b2da      	uxtb	r2, r3
    f09c:	2314      	movs	r3, #20
    f09e:	18fb      	adds	r3, r7, r3
    f0a0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    f0a2:	68bb      	ldr	r3, [r7, #8]
    f0a4:	b2da      	uxtb	r2, r3
    f0a6:	2314      	movs	r3, #20
    f0a8:	18fb      	adds	r3, r7, r3
    f0aa:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    f0ac:	2314      	movs	r3, #20
    f0ae:	18fb      	adds	r3, r7, r3
    f0b0:	2200      	movs	r2, #0
    f0b2:	70da      	strb	r2, [r3, #3]
		len = 5;
    f0b4:	231f      	movs	r3, #31
    f0b6:	18fb      	adds	r3, r7, r3
    f0b8:	2205      	movs	r2, #5
    f0ba:	701a      	strb	r2, [r3, #0]
		break;
    f0bc:	e0e2      	b.n	f284 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    f0be:	2314      	movs	r3, #20
    f0c0:	18fb      	adds	r3, r7, r3
    f0c2:	2200      	movs	r2, #0
    f0c4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    f0c6:	2314      	movs	r3, #20
    f0c8:	18fb      	adds	r3, r7, r3
    f0ca:	2200      	movs	r2, #0
    f0cc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    f0ce:	2314      	movs	r3, #20
    f0d0:	18fb      	adds	r3, r7, r3
    f0d2:	2200      	movs	r2, #0
    f0d4:	70da      	strb	r2, [r3, #3]
		len = 5;
    f0d6:	231f      	movs	r3, #31
    f0d8:	18fb      	adds	r3, r7, r3
    f0da:	2205      	movs	r2, #5
    f0dc:	701a      	strb	r2, [r3, #0]
		break;
    f0de:	e0d1      	b.n	f284 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    f0e0:	2314      	movs	r3, #20
    f0e2:	18fb      	adds	r3, r7, r3
    f0e4:	2200      	movs	r2, #0
    f0e6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    f0e8:	2314      	movs	r3, #20
    f0ea:	18fb      	adds	r3, r7, r3
    f0ec:	2200      	movs	r2, #0
    f0ee:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    f0f0:	2314      	movs	r3, #20
    f0f2:	18fb      	adds	r3, r7, r3
    f0f4:	2200      	movs	r2, #0
    f0f6:	70da      	strb	r2, [r3, #3]
		len = 5;
    f0f8:	231f      	movs	r3, #31
    f0fa:	18fb      	adds	r3, r7, r3
    f0fc:	2205      	movs	r2, #5
    f0fe:	701a      	strb	r2, [r3, #0]
		break;
    f100:	e0c0      	b.n	f284 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    f102:	2314      	movs	r3, #20
    f104:	18fb      	adds	r3, r7, r3
    f106:	22ff      	movs	r2, #255	; 0xff
    f108:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    f10a:	2314      	movs	r3, #20
    f10c:	18fb      	adds	r3, r7, r3
    f10e:	22ff      	movs	r2, #255	; 0xff
    f110:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    f112:	2314      	movs	r3, #20
    f114:	18fb      	adds	r3, r7, r3
    f116:	22ff      	movs	r2, #255	; 0xff
    f118:	70da      	strb	r2, [r3, #3]
		len = 5;
    f11a:	231f      	movs	r3, #31
    f11c:	18fb      	adds	r3, r7, r3
    f11e:	2205      	movs	r2, #5
    f120:	701a      	strb	r2, [r3, #0]
		break;
    f122:	e0af      	b.n	f284 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    f124:	68bb      	ldr	r3, [r7, #8]
    f126:	0c1b      	lsrs	r3, r3, #16
    f128:	b2da      	uxtb	r2, r3
    f12a:	2314      	movs	r3, #20
    f12c:	18fb      	adds	r3, r7, r3
    f12e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    f130:	68bb      	ldr	r3, [r7, #8]
    f132:	0a1b      	lsrs	r3, r3, #8
    f134:	b2da      	uxtb	r2, r3
    f136:	2314      	movs	r3, #20
    f138:	18fb      	adds	r3, r7, r3
    f13a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    f13c:	68bb      	ldr	r3, [r7, #8]
    f13e:	b2da      	uxtb	r2, r3
    f140:	2314      	movs	r3, #20
    f142:	18fb      	adds	r3, r7, r3
    f144:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    f146:	683b      	ldr	r3, [r7, #0]
    f148:	0a1b      	lsrs	r3, r3, #8
    f14a:	b2da      	uxtb	r2, r3
    f14c:	2314      	movs	r3, #20
    f14e:	18fb      	adds	r3, r7, r3
    f150:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    f152:	683b      	ldr	r3, [r7, #0]
    f154:	b2da      	uxtb	r2, r3
    f156:	2314      	movs	r3, #20
    f158:	18fb      	adds	r3, r7, r3
    f15a:	715a      	strb	r2, [r3, #5]
		len = 7;
    f15c:	231f      	movs	r3, #31
    f15e:	18fb      	adds	r3, r7, r3
    f160:	2207      	movs	r2, #7
    f162:	701a      	strb	r2, [r3, #0]
		break;
    f164:	e08e      	b.n	f284 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    f166:	68bb      	ldr	r3, [r7, #8]
    f168:	0c1b      	lsrs	r3, r3, #16
    f16a:	b2da      	uxtb	r2, r3
    f16c:	2314      	movs	r3, #20
    f16e:	18fb      	adds	r3, r7, r3
    f170:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    f172:	68bb      	ldr	r3, [r7, #8]
    f174:	0a1b      	lsrs	r3, r3, #8
    f176:	b2da      	uxtb	r2, r3
    f178:	2314      	movs	r3, #20
    f17a:	18fb      	adds	r3, r7, r3
    f17c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    f17e:	68bb      	ldr	r3, [r7, #8]
    f180:	b2da      	uxtb	r2, r3
    f182:	2314      	movs	r3, #20
    f184:	18fb      	adds	r3, r7, r3
    f186:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    f188:	683b      	ldr	r3, [r7, #0]
    f18a:	0c1b      	lsrs	r3, r3, #16
    f18c:	b2da      	uxtb	r2, r3
    f18e:	2314      	movs	r3, #20
    f190:	18fb      	adds	r3, r7, r3
    f192:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    f194:	683b      	ldr	r3, [r7, #0]
    f196:	0a1b      	lsrs	r3, r3, #8
    f198:	b2da      	uxtb	r2, r3
    f19a:	2314      	movs	r3, #20
    f19c:	18fb      	adds	r3, r7, r3
    f19e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    f1a0:	683b      	ldr	r3, [r7, #0]
    f1a2:	b2da      	uxtb	r2, r3
    f1a4:	2314      	movs	r3, #20
    f1a6:	18fb      	adds	r3, r7, r3
    f1a8:	719a      	strb	r2, [r3, #6]
		len = 8;
    f1aa:	231f      	movs	r3, #31
    f1ac:	18fb      	adds	r3, r7, r3
    f1ae:	2208      	movs	r2, #8
    f1b0:	701a      	strb	r2, [r3, #0]
		break;
    f1b2:	e067      	b.n	f284 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    f1b4:	68bb      	ldr	r3, [r7, #8]
    f1b6:	0a1b      	lsrs	r3, r3, #8
    f1b8:	b2da      	uxtb	r2, r3
    f1ba:	2314      	movs	r3, #20
    f1bc:	18fb      	adds	r3, r7, r3
    f1be:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    f1c0:	2330      	movs	r3, #48	; 0x30
    f1c2:	18fb      	adds	r3, r7, r3
    f1c4:	781b      	ldrb	r3, [r3, #0]
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	d009      	beq.n	f1de <spi_cmd+0x1da>
    f1ca:	2314      	movs	r3, #20
    f1cc:	18fb      	adds	r3, r7, r3
    f1ce:	785b      	ldrb	r3, [r3, #1]
    f1d0:	2280      	movs	r2, #128	; 0x80
    f1d2:	4252      	negs	r2, r2
    f1d4:	4313      	orrs	r3, r2
    f1d6:	b2da      	uxtb	r2, r3
    f1d8:	2314      	movs	r3, #20
    f1da:	18fb      	adds	r3, r7, r3
    f1dc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    f1de:	68bb      	ldr	r3, [r7, #8]
    f1e0:	b2da      	uxtb	r2, r3
    f1e2:	2314      	movs	r3, #20
    f1e4:	18fb      	adds	r3, r7, r3
    f1e6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    f1e8:	687b      	ldr	r3, [r7, #4]
    f1ea:	0e1b      	lsrs	r3, r3, #24
    f1ec:	b2da      	uxtb	r2, r3
    f1ee:	2314      	movs	r3, #20
    f1f0:	18fb      	adds	r3, r7, r3
    f1f2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    f1f4:	687b      	ldr	r3, [r7, #4]
    f1f6:	0c1b      	lsrs	r3, r3, #16
    f1f8:	b2da      	uxtb	r2, r3
    f1fa:	2314      	movs	r3, #20
    f1fc:	18fb      	adds	r3, r7, r3
    f1fe:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    f200:	687b      	ldr	r3, [r7, #4]
    f202:	0a1b      	lsrs	r3, r3, #8
    f204:	b2da      	uxtb	r2, r3
    f206:	2314      	movs	r3, #20
    f208:	18fb      	adds	r3, r7, r3
    f20a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    f20c:	687b      	ldr	r3, [r7, #4]
    f20e:	b2da      	uxtb	r2, r3
    f210:	2314      	movs	r3, #20
    f212:	18fb      	adds	r3, r7, r3
    f214:	719a      	strb	r2, [r3, #6]
		len = 8;
    f216:	231f      	movs	r3, #31
    f218:	18fb      	adds	r3, r7, r3
    f21a:	2208      	movs	r2, #8
    f21c:	701a      	strb	r2, [r3, #0]
		break;
    f21e:	e031      	b.n	f284 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    f220:	68bb      	ldr	r3, [r7, #8]
    f222:	0c1b      	lsrs	r3, r3, #16
    f224:	b2da      	uxtb	r2, r3
    f226:	2314      	movs	r3, #20
    f228:	18fb      	adds	r3, r7, r3
    f22a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    f22c:	68bb      	ldr	r3, [r7, #8]
    f22e:	0a1b      	lsrs	r3, r3, #8
    f230:	b2da      	uxtb	r2, r3
    f232:	2314      	movs	r3, #20
    f234:	18fb      	adds	r3, r7, r3
    f236:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    f238:	68bb      	ldr	r3, [r7, #8]
    f23a:	b2da      	uxtb	r2, r3
    f23c:	2314      	movs	r3, #20
    f23e:	18fb      	adds	r3, r7, r3
    f240:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    f242:	687b      	ldr	r3, [r7, #4]
    f244:	0e1b      	lsrs	r3, r3, #24
    f246:	b2da      	uxtb	r2, r3
    f248:	2314      	movs	r3, #20
    f24a:	18fb      	adds	r3, r7, r3
    f24c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    f24e:	687b      	ldr	r3, [r7, #4]
    f250:	0c1b      	lsrs	r3, r3, #16
    f252:	b2da      	uxtb	r2, r3
    f254:	2314      	movs	r3, #20
    f256:	18fb      	adds	r3, r7, r3
    f258:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    f25a:	687b      	ldr	r3, [r7, #4]
    f25c:	0a1b      	lsrs	r3, r3, #8
    f25e:	b2da      	uxtb	r2, r3
    f260:	2314      	movs	r3, #20
    f262:	18fb      	adds	r3, r7, r3
    f264:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    f266:	687b      	ldr	r3, [r7, #4]
    f268:	b2da      	uxtb	r2, r3
    f26a:	2314      	movs	r3, #20
    f26c:	18fb      	adds	r3, r7, r3
    f26e:	71da      	strb	r2, [r3, #7]
		len = 9;
    f270:	231f      	movs	r3, #31
    f272:	18fb      	adds	r3, r7, r3
    f274:	2209      	movs	r2, #9
    f276:	701a      	strb	r2, [r3, #0]
		break;
    f278:	e004      	b.n	f284 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    f27a:	231e      	movs	r3, #30
    f27c:	18fb      	adds	r3, r7, r3
    f27e:	2200      	movs	r2, #0
    f280:	701a      	strb	r2, [r3, #0]
		break;
    f282:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    f284:	231e      	movs	r3, #30
    f286:	18fb      	adds	r3, r7, r3
    f288:	781b      	ldrb	r3, [r3, #0]
    f28a:	b25b      	sxtb	r3, r3
    f28c:	2b00      	cmp	r3, #0
    f28e:	d03f      	beq.n	f310 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    f290:	4b24      	ldr	r3, [pc, #144]	; (f324 <spi_cmd+0x320>)
    f292:	781b      	ldrb	r3, [r3, #0]
    f294:	2b00      	cmp	r3, #0
    f296:	d115      	bne.n	f2c4 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    f298:	231f      	movs	r3, #31
    f29a:	18fb      	adds	r3, r7, r3
    f29c:	781b      	ldrb	r3, [r3, #0]
    f29e:	1e5c      	subs	r4, r3, #1
    f2a0:	231f      	movs	r3, #31
    f2a2:	18fb      	adds	r3, r7, r3
    f2a4:	781b      	ldrb	r3, [r3, #0]
    f2a6:	3b01      	subs	r3, #1
    f2a8:	001a      	movs	r2, r3
    f2aa:	2314      	movs	r3, #20
    f2ac:	18fb      	adds	r3, r7, r3
    f2ae:	0019      	movs	r1, r3
    f2b0:	207f      	movs	r0, #127	; 0x7f
    f2b2:	4b1d      	ldr	r3, [pc, #116]	; (f328 <spi_cmd+0x324>)
    f2b4:	4798      	blx	r3
    f2b6:	0003      	movs	r3, r0
    f2b8:	18db      	adds	r3, r3, r3
    f2ba:	b2da      	uxtb	r2, r3
    f2bc:	2314      	movs	r3, #20
    f2be:	18fb      	adds	r3, r7, r3
    f2c0:	551a      	strb	r2, [r3, r4]
    f2c2:	e006      	b.n	f2d2 <spi_cmd+0x2ce>
		else
			len-=1;
    f2c4:	231f      	movs	r3, #31
    f2c6:	18fb      	adds	r3, r7, r3
    f2c8:	221f      	movs	r2, #31
    f2ca:	18ba      	adds	r2, r7, r2
    f2cc:	7812      	ldrb	r2, [r2, #0]
    f2ce:	3a01      	subs	r2, #1
    f2d0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    f2d2:	231f      	movs	r3, #31
    f2d4:	18fb      	adds	r3, r7, r3
    f2d6:	781b      	ldrb	r3, [r3, #0]
    f2d8:	b29a      	uxth	r2, r3
    f2da:	2314      	movs	r3, #20
    f2dc:	18fb      	adds	r3, r7, r3
    f2de:	0011      	movs	r1, r2
    f2e0:	0018      	movs	r0, r3
    f2e2:	4b12      	ldr	r3, [pc, #72]	; (f32c <spi_cmd+0x328>)
    f2e4:	4798      	blx	r3
    f2e6:	1e03      	subs	r3, r0, #0
    f2e8:	d012      	beq.n	f310 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    f2ea:	2390      	movs	r3, #144	; 0x90
    f2ec:	005a      	lsls	r2, r3, #1
    f2ee:	4910      	ldr	r1, [pc, #64]	; (f330 <spi_cmd+0x32c>)
    f2f0:	4b10      	ldr	r3, [pc, #64]	; (f334 <spi_cmd+0x330>)
    f2f2:	0018      	movs	r0, r3
    f2f4:	4b10      	ldr	r3, [pc, #64]	; (f338 <spi_cmd+0x334>)
    f2f6:	4798      	blx	r3
    f2f8:	4b10      	ldr	r3, [pc, #64]	; (f33c <spi_cmd+0x338>)
    f2fa:	0018      	movs	r0, r3
    f2fc:	4b0e      	ldr	r3, [pc, #56]	; (f338 <spi_cmd+0x334>)
    f2fe:	4798      	blx	r3
    f300:	4b0f      	ldr	r3, [pc, #60]	; (f340 <spi_cmd+0x33c>)
    f302:	0018      	movs	r0, r3
    f304:	4b0c      	ldr	r3, [pc, #48]	; (f338 <spi_cmd+0x334>)
    f306:	4798      	blx	r3
			result = N_FAIL;
    f308:	231e      	movs	r3, #30
    f30a:	18fb      	adds	r3, r7, r3
    f30c:	2200      	movs	r2, #0
    f30e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    f310:	231e      	movs	r3, #30
    f312:	18fb      	adds	r3, r7, r3
    f314:	781b      	ldrb	r3, [r3, #0]
    f316:	b25b      	sxtb	r3, r3
}
    f318:	0018      	movs	r0, r3
    f31a:	46bd      	mov	sp, r7
    f31c:	b009      	add	sp, #36	; 0x24
    f31e:	bd90      	pop	{r4, r7, pc}
    f320:	00024698 	.word	0x00024698
    f324:	20003d18 	.word	0x20003d18
    f328:	0000efb5 	.word	0x0000efb5
    f32c:	0000eefd 	.word	0x0000eefd
    f330:	00024710 	.word	0x00024710
    f334:	00024120 	.word	0x00024120
    f338:	00009a6d 	.word	0x00009a6d
    f33c:	00024134 	.word	0x00024134
    f340:	00024160 	.word	0x00024160

0000f344 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    f344:	b590      	push	{r4, r7, lr}
    f346:	b085      	sub	sp, #20
    f348:	af00      	add	r7, sp, #0
    f34a:	0002      	movs	r2, r0
    f34c:	1dfb      	adds	r3, r7, #7
    f34e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    f350:	230e      	movs	r3, #14
    f352:	18fb      	adds	r3, r7, r3
    f354:	2201      	movs	r2, #1
    f356:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    f358:	4b32      	ldr	r3, [pc, #200]	; (f424 <spi_data_rsp+0xe0>)
    f35a:	781b      	ldrb	r3, [r3, #0]
    f35c:	2b00      	cmp	r3, #0
    f35e:	d104      	bne.n	f36a <spi_data_rsp+0x26>
		len = 2;
    f360:	230f      	movs	r3, #15
    f362:	18fb      	adds	r3, r7, r3
    f364:	2202      	movs	r2, #2
    f366:	701a      	strb	r2, [r3, #0]
    f368:	e003      	b.n	f372 <spi_data_rsp+0x2e>
	else
		len = 3;
    f36a:	230f      	movs	r3, #15
    f36c:	18fb      	adds	r3, r7, r3
    f36e:	2203      	movs	r2, #3
    f370:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    f372:	230f      	movs	r3, #15
    f374:	18fb      	adds	r3, r7, r3
    f376:	781b      	ldrb	r3, [r3, #0]
    f378:	b29a      	uxth	r2, r3
    f37a:	2308      	movs	r3, #8
    f37c:	18fb      	adds	r3, r7, r3
    f37e:	0011      	movs	r1, r2
    f380:	0018      	movs	r0, r3
    f382:	4b29      	ldr	r3, [pc, #164]	; (f428 <spi_data_rsp+0xe4>)
    f384:	4798      	blx	r3
    f386:	1e03      	subs	r3, r0, #0
    f388:	d013      	beq.n	f3b2 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    f38a:	239a      	movs	r3, #154	; 0x9a
    f38c:	005a      	lsls	r2, r3, #1
    f38e:	4927      	ldr	r1, [pc, #156]	; (f42c <spi_data_rsp+0xe8>)
    f390:	4b27      	ldr	r3, [pc, #156]	; (f430 <spi_data_rsp+0xec>)
    f392:	0018      	movs	r0, r3
    f394:	4b27      	ldr	r3, [pc, #156]	; (f434 <spi_data_rsp+0xf0>)
    f396:	4798      	blx	r3
    f398:	4b27      	ldr	r3, [pc, #156]	; (f438 <spi_data_rsp+0xf4>)
    f39a:	0018      	movs	r0, r3
    f39c:	4b25      	ldr	r3, [pc, #148]	; (f434 <spi_data_rsp+0xf0>)
    f39e:	4798      	blx	r3
    f3a0:	4b26      	ldr	r3, [pc, #152]	; (f43c <spi_data_rsp+0xf8>)
    f3a2:	0018      	movs	r0, r3
    f3a4:	4b23      	ldr	r3, [pc, #140]	; (f434 <spi_data_rsp+0xf0>)
    f3a6:	4798      	blx	r3
		result = N_FAIL;
    f3a8:	230e      	movs	r3, #14
    f3aa:	18fb      	adds	r3, r7, r3
    f3ac:	2200      	movs	r2, #0
    f3ae:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    f3b0:	e030      	b.n	f414 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    f3b2:	230f      	movs	r3, #15
    f3b4:	18fb      	adds	r3, r7, r3
    f3b6:	781b      	ldrb	r3, [r3, #0]
    f3b8:	3b01      	subs	r3, #1
    f3ba:	2208      	movs	r2, #8
    f3bc:	18ba      	adds	r2, r7, r2
    f3be:	5cd3      	ldrb	r3, [r2, r3]
    f3c0:	2b00      	cmp	r3, #0
    f3c2:	d108      	bne.n	f3d6 <spi_data_rsp+0x92>
    f3c4:	230f      	movs	r3, #15
    f3c6:	18fb      	adds	r3, r7, r3
    f3c8:	781b      	ldrb	r3, [r3, #0]
    f3ca:	3b02      	subs	r3, #2
    f3cc:	2208      	movs	r2, #8
    f3ce:	18ba      	adds	r2, r7, r2
    f3d0:	5cd3      	ldrb	r3, [r2, r3]
    f3d2:	2bc3      	cmp	r3, #195	; 0xc3
    f3d4:	d01e      	beq.n	f414 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    f3d6:	233c      	movs	r3, #60	; 0x3c
    f3d8:	33ff      	adds	r3, #255	; 0xff
    f3da:	001a      	movs	r2, r3
    f3dc:	4913      	ldr	r1, [pc, #76]	; (f42c <spi_data_rsp+0xe8>)
    f3de:	4b14      	ldr	r3, [pc, #80]	; (f430 <spi_data_rsp+0xec>)
    f3e0:	0018      	movs	r0, r3
    f3e2:	4b14      	ldr	r3, [pc, #80]	; (f434 <spi_data_rsp+0xf0>)
    f3e4:	4798      	blx	r3
    f3e6:	2308      	movs	r3, #8
    f3e8:	18fb      	adds	r3, r7, r3
    f3ea:	781b      	ldrb	r3, [r3, #0]
    f3ec:	0019      	movs	r1, r3
    f3ee:	2308      	movs	r3, #8
    f3f0:	18fb      	adds	r3, r7, r3
    f3f2:	785b      	ldrb	r3, [r3, #1]
    f3f4:	001a      	movs	r2, r3
    f3f6:	2308      	movs	r3, #8
    f3f8:	18fb      	adds	r3, r7, r3
    f3fa:	789b      	ldrb	r3, [r3, #2]
    f3fc:	4810      	ldr	r0, [pc, #64]	; (f440 <spi_data_rsp+0xfc>)
    f3fe:	4c0d      	ldr	r4, [pc, #52]	; (f434 <spi_data_rsp+0xf0>)
    f400:	47a0      	blx	r4
    f402:	4b0e      	ldr	r3, [pc, #56]	; (f43c <spi_data_rsp+0xf8>)
    f404:	0018      	movs	r0, r3
    f406:	4b0b      	ldr	r3, [pc, #44]	; (f434 <spi_data_rsp+0xf0>)
    f408:	4798      	blx	r3
		result = N_FAIL;
    f40a:	230e      	movs	r3, #14
    f40c:	18fb      	adds	r3, r7, r3
    f40e:	2200      	movs	r2, #0
    f410:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    f412:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    f414:	230e      	movs	r3, #14
    f416:	18fb      	adds	r3, r7, r3
    f418:	781b      	ldrb	r3, [r3, #0]
    f41a:	b25b      	sxtb	r3, r3
}
    f41c:	0018      	movs	r0, r3
    f41e:	46bd      	mov	sp, r7
    f420:	b005      	add	sp, #20
    f422:	bd90      	pop	{r4, r7, pc}
    f424:	20003d18 	.word	0x20003d18
    f428:	0000eeb9 	.word	0x0000eeb9
    f42c:	00024718 	.word	0x00024718
    f430:	00024120 	.word	0x00024120
    f434:	00009a6d 	.word	0x00009a6d
    f438:	00024164 	.word	0x00024164
    f43c:	00024160 	.word	0x00024160
    f440:	00024184 	.word	0x00024184

0000f444 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    f444:	b580      	push	{r7, lr}
    f446:	b084      	sub	sp, #16
    f448:	af00      	add	r7, sp, #0
    f44a:	0002      	movs	r2, r0
    f44c:	1dfb      	adds	r3, r7, #7
    f44e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    f450:	230f      	movs	r3, #15
    f452:	18fb      	adds	r3, r7, r3
    f454:	2201      	movs	r2, #1
    f456:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    f458:	1dfb      	adds	r3, r7, #7
    f45a:	781b      	ldrb	r3, [r3, #0]
    f45c:	2bcf      	cmp	r3, #207	; 0xcf
    f45e:	d007      	beq.n	f470 <spi_cmd_rsp+0x2c>
    f460:	1dfb      	adds	r3, r7, #7
    f462:	781b      	ldrb	r3, [r3, #0]
    f464:	2bc5      	cmp	r3, #197	; 0xc5
    f466:	d003      	beq.n	f470 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    f468:	1dfb      	adds	r3, r7, #7
    f46a:	781b      	ldrb	r3, [r3, #0]
    f46c:	2bc6      	cmp	r3, #198	; 0xc6
    f46e:	d10c      	bne.n	f48a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    f470:	230d      	movs	r3, #13
    f472:	18fb      	adds	r3, r7, r3
    f474:	2101      	movs	r1, #1
    f476:	0018      	movs	r0, r3
    f478:	4b3b      	ldr	r3, [pc, #236]	; (f568 <spi_cmd_rsp+0x124>)
    f47a:	4798      	blx	r3
    f47c:	1e03      	subs	r3, r0, #0
    f47e:	d004      	beq.n	f48a <spi_cmd_rsp+0x46>
			result = N_FAIL;
    f480:	230f      	movs	r3, #15
    f482:	18fb      	adds	r3, r7, r3
    f484:	2200      	movs	r2, #0
    f486:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    f488:	e065      	b.n	f556 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    f48a:	230e      	movs	r3, #14
    f48c:	18fb      	adds	r3, r7, r3
    f48e:	220a      	movs	r2, #10
    f490:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    f492:	230d      	movs	r3, #13
    f494:	18fb      	adds	r3, r7, r3
    f496:	2101      	movs	r1, #1
    f498:	0018      	movs	r0, r3
    f49a:	4b33      	ldr	r3, [pc, #204]	; (f568 <spi_cmd_rsp+0x124>)
    f49c:	4798      	blx	r3
    f49e:	1e03      	subs	r3, r0, #0
    f4a0:	d014      	beq.n	f4cc <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    f4a2:	235c      	movs	r3, #92	; 0x5c
    f4a4:	33ff      	adds	r3, #255	; 0xff
    f4a6:	001a      	movs	r2, r3
    f4a8:	4930      	ldr	r1, [pc, #192]	; (f56c <spi_cmd_rsp+0x128>)
    f4aa:	4b31      	ldr	r3, [pc, #196]	; (f570 <spi_cmd_rsp+0x12c>)
    f4ac:	0018      	movs	r0, r3
    f4ae:	4b31      	ldr	r3, [pc, #196]	; (f574 <spi_cmd_rsp+0x130>)
    f4b0:	4798      	blx	r3
    f4b2:	4b31      	ldr	r3, [pc, #196]	; (f578 <spi_cmd_rsp+0x134>)
    f4b4:	0018      	movs	r0, r3
    f4b6:	4b2f      	ldr	r3, [pc, #188]	; (f574 <spi_cmd_rsp+0x130>)
    f4b8:	4798      	blx	r3
    f4ba:	4b30      	ldr	r3, [pc, #192]	; (f57c <spi_cmd_rsp+0x138>)
    f4bc:	0018      	movs	r0, r3
    f4be:	4b2d      	ldr	r3, [pc, #180]	; (f574 <spi_cmd_rsp+0x130>)
    f4c0:	4798      	blx	r3
			result = N_FAIL;
    f4c2:	230f      	movs	r3, #15
    f4c4:	18fb      	adds	r3, r7, r3
    f4c6:	2200      	movs	r2, #0
    f4c8:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    f4ca:	e044      	b.n	f556 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    f4cc:	230d      	movs	r3, #13
    f4ce:	18fb      	adds	r3, r7, r3
    f4d0:	781b      	ldrb	r3, [r3, #0]
    f4d2:	1dfa      	adds	r2, r7, #7
    f4d4:	7812      	ldrb	r2, [r2, #0]
    f4d6:	429a      	cmp	r2, r3
    f4d8:	d00b      	beq.n	f4f2 <spi_cmd_rsp+0xae>
    f4da:	230e      	movs	r3, #14
    f4dc:	18fb      	adds	r3, r7, r3
    f4de:	781b      	ldrb	r3, [r3, #0]
    f4e0:	b25b      	sxtb	r3, r3
    f4e2:	b2da      	uxtb	r2, r3
    f4e4:	3a01      	subs	r2, #1
    f4e6:	b2d1      	uxtb	r1, r2
    f4e8:	220e      	movs	r2, #14
    f4ea:	18ba      	adds	r2, r7, r2
    f4ec:	7011      	strb	r1, [r2, #0]
    f4ee:	2b00      	cmp	r3, #0
    f4f0:	dccf      	bgt.n	f492 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    f4f2:	230e      	movs	r3, #14
    f4f4:	18fb      	adds	r3, r7, r3
    f4f6:	220a      	movs	r2, #10
    f4f8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    f4fa:	230d      	movs	r3, #13
    f4fc:	18fb      	adds	r3, r7, r3
    f4fe:	2101      	movs	r1, #1
    f500:	0018      	movs	r0, r3
    f502:	4b19      	ldr	r3, [pc, #100]	; (f568 <spi_cmd_rsp+0x124>)
    f504:	4798      	blx	r3
    f506:	1e03      	subs	r3, r0, #0
    f508:	d014      	beq.n	f534 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    f50a:	236a      	movs	r3, #106	; 0x6a
    f50c:	33ff      	adds	r3, #255	; 0xff
    f50e:	001a      	movs	r2, r3
    f510:	4916      	ldr	r1, [pc, #88]	; (f56c <spi_cmd_rsp+0x128>)
    f512:	4b17      	ldr	r3, [pc, #92]	; (f570 <spi_cmd_rsp+0x12c>)
    f514:	0018      	movs	r0, r3
    f516:	4b17      	ldr	r3, [pc, #92]	; (f574 <spi_cmd_rsp+0x130>)
    f518:	4798      	blx	r3
    f51a:	4b17      	ldr	r3, [pc, #92]	; (f578 <spi_cmd_rsp+0x134>)
    f51c:	0018      	movs	r0, r3
    f51e:	4b15      	ldr	r3, [pc, #84]	; (f574 <spi_cmd_rsp+0x130>)
    f520:	4798      	blx	r3
    f522:	4b16      	ldr	r3, [pc, #88]	; (f57c <spi_cmd_rsp+0x138>)
    f524:	0018      	movs	r0, r3
    f526:	4b13      	ldr	r3, [pc, #76]	; (f574 <spi_cmd_rsp+0x130>)
    f528:	4798      	blx	r3
			result = N_FAIL;
    f52a:	230f      	movs	r3, #15
    f52c:	18fb      	adds	r3, r7, r3
    f52e:	2200      	movs	r2, #0
    f530:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    f532:	e010      	b.n	f556 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    f534:	230d      	movs	r3, #13
    f536:	18fb      	adds	r3, r7, r3
    f538:	781b      	ldrb	r3, [r3, #0]
    f53a:	2b00      	cmp	r3, #0
    f53c:	d00b      	beq.n	f556 <spi_cmd_rsp+0x112>
    f53e:	230e      	movs	r3, #14
    f540:	18fb      	adds	r3, r7, r3
    f542:	781b      	ldrb	r3, [r3, #0]
    f544:	b25b      	sxtb	r3, r3
    f546:	b2da      	uxtb	r2, r3
    f548:	3a01      	subs	r2, #1
    f54a:	b2d1      	uxtb	r1, r2
    f54c:	220e      	movs	r2, #14
    f54e:	18ba      	adds	r2, r7, r2
    f550:	7011      	strb	r1, [r2, #0]
    f552:	2b00      	cmp	r3, #0
    f554:	dcd1      	bgt.n	f4fa <spi_cmd_rsp+0xb6>

_fail_:

	return result;
    f556:	230f      	movs	r3, #15
    f558:	18fb      	adds	r3, r7, r3
    f55a:	781b      	ldrb	r3, [r3, #0]
    f55c:	b25b      	sxtb	r3, r3
}
    f55e:	0018      	movs	r0, r3
    f560:	46bd      	mov	sp, r7
    f562:	b004      	add	sp, #16
    f564:	bd80      	pop	{r7, pc}
    f566:	46c0      	nop			; (mov r8, r8)
    f568:	0000eeb9 	.word	0x0000eeb9
    f56c:	00024728 	.word	0x00024728
    f570:	00024120 	.word	0x00024120
    f574:	00009a6d 	.word	0x00009a6d
    f578:	000241b4 	.word	0x000241b4
    f57c:	00024160 	.word	0x00024160

0000f580 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
    f580:	b590      	push	{r4, r7, lr}
    f582:	b09f      	sub	sp, #124	; 0x7c
    f584:	af00      	add	r7, sp, #0
    f586:	60b9      	str	r1, [r7, #8]
    f588:	607a      	str	r2, [r7, #4]
    f58a:	603b      	str	r3, [r7, #0]
    f58c:	230f      	movs	r3, #15
    f58e:	18fb      	adds	r3, r7, r3
    f590:	1c02      	adds	r2, r0, #0
    f592:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
    f594:	2300      	movs	r3, #0
    f596:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
    f598:	2301      	movs	r3, #1
    f59a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
    f59c:	2338      	movs	r3, #56	; 0x38
    f59e:	18fb      	adds	r3, r7, r3
    f5a0:	220f      	movs	r2, #15
    f5a2:	18ba      	adds	r2, r7, r2
    f5a4:	7812      	ldrb	r2, [r2, #0]
    f5a6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    f5a8:	230f      	movs	r3, #15
    f5aa:	18fb      	adds	r3, r7, r3
    f5ac:	781b      	ldrb	r3, [r3, #0]
    f5ae:	3bc1      	subs	r3, #193	; 0xc1
    f5b0:	2b0e      	cmp	r3, #14
    f5b2:	d900      	bls.n	f5b6 <spi_cmd_complete+0x36>
    f5b4:	e103      	b.n	f7be <spi_cmd_complete+0x23e>
    f5b6:	009a      	lsls	r2, r3, #2
    f5b8:	4bd1      	ldr	r3, [pc, #836]	; (f900 <spi_cmd_complete+0x380>)
    f5ba:	18d3      	adds	r3, r2, r3
    f5bc:	681b      	ldr	r3, [r3, #0]
    f5be:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
    f5c0:	68bb      	ldr	r3, [r7, #8]
    f5c2:	0c1b      	lsrs	r3, r3, #16
    f5c4:	b2da      	uxtb	r2, r3
    f5c6:	2338      	movs	r3, #56	; 0x38
    f5c8:	18fb      	adds	r3, r7, r3
    f5ca:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    f5cc:	68bb      	ldr	r3, [r7, #8]
    f5ce:	0a1b      	lsrs	r3, r3, #8
    f5d0:	b2da      	uxtb	r2, r3
    f5d2:	2338      	movs	r3, #56	; 0x38
    f5d4:	18fb      	adds	r3, r7, r3
    f5d6:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    f5d8:	68bb      	ldr	r3, [r7, #8]
    f5da:	b2da      	uxtb	r2, r3
    f5dc:	2338      	movs	r3, #56	; 0x38
    f5de:	18fb      	adds	r3, r7, r3
    f5e0:	70da      	strb	r2, [r3, #3]
		len = 5;
    f5e2:	2305      	movs	r3, #5
    f5e4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
    f5e6:	e0ed      	b.n	f7c4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
    f5e8:	68bb      	ldr	r3, [r7, #8]
    f5ea:	0a1b      	lsrs	r3, r3, #8
    f5ec:	b2da      	uxtb	r2, r3
    f5ee:	2338      	movs	r3, #56	; 0x38
    f5f0:	18fb      	adds	r3, r7, r3
    f5f2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
    f5f4:	2388      	movs	r3, #136	; 0x88
    f5f6:	18fb      	adds	r3, r7, r3
    f5f8:	781b      	ldrb	r3, [r3, #0]
    f5fa:	2b01      	cmp	r3, #1
    f5fc:	d109      	bne.n	f612 <spi_cmd_complete+0x92>
    f5fe:	2338      	movs	r3, #56	; 0x38
    f600:	18fb      	adds	r3, r7, r3
    f602:	785b      	ldrb	r3, [r3, #1]
    f604:	2280      	movs	r2, #128	; 0x80
    f606:	4252      	negs	r2, r2
    f608:	4313      	orrs	r3, r2
    f60a:	b2da      	uxtb	r2, r3
    f60c:	2338      	movs	r3, #56	; 0x38
    f60e:	18fb      	adds	r3, r7, r3
    f610:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
    f612:	68bb      	ldr	r3, [r7, #8]
    f614:	b2da      	uxtb	r2, r3
    f616:	2338      	movs	r3, #56	; 0x38
    f618:	18fb      	adds	r3, r7, r3
    f61a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
    f61c:	2338      	movs	r3, #56	; 0x38
    f61e:	18fb      	adds	r3, r7, r3
    f620:	2200      	movs	r2, #0
    f622:	70da      	strb	r2, [r3, #3]
		len = 5;
    f624:	2305      	movs	r3, #5
    f626:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    f628:	e0cc      	b.n	f7c4 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
    f62a:	2338      	movs	r3, #56	; 0x38
    f62c:	18fb      	adds	r3, r7, r3
    f62e:	2200      	movs	r2, #0
    f630:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
    f632:	2338      	movs	r3, #56	; 0x38
    f634:	18fb      	adds	r3, r7, r3
    f636:	2200      	movs	r2, #0
    f638:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
    f63a:	2338      	movs	r3, #56	; 0x38
    f63c:	18fb      	adds	r3, r7, r3
    f63e:	2200      	movs	r2, #0
    f640:	70da      	strb	r2, [r3, #3]
		len = 5;
    f642:	2305      	movs	r3, #5
    f644:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    f646:	e0bd      	b.n	f7c4 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
    f648:	2338      	movs	r3, #56	; 0x38
    f64a:	18fb      	adds	r3, r7, r3
    f64c:	2200      	movs	r2, #0
    f64e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
    f650:	2338      	movs	r3, #56	; 0x38
    f652:	18fb      	adds	r3, r7, r3
    f654:	2200      	movs	r2, #0
    f656:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
    f658:	2338      	movs	r3, #56	; 0x38
    f65a:	18fb      	adds	r3, r7, r3
    f65c:	2200      	movs	r2, #0
    f65e:	70da      	strb	r2, [r3, #3]
		len = 5;
    f660:	2305      	movs	r3, #5
    f662:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    f664:	e0ae      	b.n	f7c4 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
    f666:	2338      	movs	r3, #56	; 0x38
    f668:	18fb      	adds	r3, r7, r3
    f66a:	22ff      	movs	r2, #255	; 0xff
    f66c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
    f66e:	2338      	movs	r3, #56	; 0x38
    f670:	18fb      	adds	r3, r7, r3
    f672:	22ff      	movs	r2, #255	; 0xff
    f674:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
    f676:	2338      	movs	r3, #56	; 0x38
    f678:	18fb      	adds	r3, r7, r3
    f67a:	22ff      	movs	r2, #255	; 0xff
    f67c:	70da      	strb	r2, [r3, #3]
		len = 5;
    f67e:	2305      	movs	r3, #5
    f680:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    f682:	e09f      	b.n	f7c4 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
    f684:	68bb      	ldr	r3, [r7, #8]
    f686:	0c1b      	lsrs	r3, r3, #16
    f688:	b2da      	uxtb	r2, r3
    f68a:	2338      	movs	r3, #56	; 0x38
    f68c:	18fb      	adds	r3, r7, r3
    f68e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    f690:	68bb      	ldr	r3, [r7, #8]
    f692:	0a1b      	lsrs	r3, r3, #8
    f694:	b2da      	uxtb	r2, r3
    f696:	2338      	movs	r3, #56	; 0x38
    f698:	18fb      	adds	r3, r7, r3
    f69a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    f69c:	68bb      	ldr	r3, [r7, #8]
    f69e:	b2da      	uxtb	r2, r3
    f6a0:	2338      	movs	r3, #56	; 0x38
    f6a2:	18fb      	adds	r3, r7, r3
    f6a4:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
    f6a6:	683b      	ldr	r3, [r7, #0]
    f6a8:	0a1b      	lsrs	r3, r3, #8
    f6aa:	b2da      	uxtb	r2, r3
    f6ac:	2338      	movs	r3, #56	; 0x38
    f6ae:	18fb      	adds	r3, r7, r3
    f6b0:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
    f6b2:	683b      	ldr	r3, [r7, #0]
    f6b4:	b2da      	uxtb	r2, r3
    f6b6:	2338      	movs	r3, #56	; 0x38
    f6b8:	18fb      	adds	r3, r7, r3
    f6ba:	715a      	strb	r2, [r3, #5]
		len = 7;
    f6bc:	2307      	movs	r3, #7
    f6be:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    f6c0:	e080      	b.n	f7c4 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
    f6c2:	68bb      	ldr	r3, [r7, #8]
    f6c4:	0c1b      	lsrs	r3, r3, #16
    f6c6:	b2da      	uxtb	r2, r3
    f6c8:	2338      	movs	r3, #56	; 0x38
    f6ca:	18fb      	adds	r3, r7, r3
    f6cc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    f6ce:	68bb      	ldr	r3, [r7, #8]
    f6d0:	0a1b      	lsrs	r3, r3, #8
    f6d2:	b2da      	uxtb	r2, r3
    f6d4:	2338      	movs	r3, #56	; 0x38
    f6d6:	18fb      	adds	r3, r7, r3
    f6d8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    f6da:	68bb      	ldr	r3, [r7, #8]
    f6dc:	b2da      	uxtb	r2, r3
    f6de:	2338      	movs	r3, #56	; 0x38
    f6e0:	18fb      	adds	r3, r7, r3
    f6e2:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
    f6e4:	683b      	ldr	r3, [r7, #0]
    f6e6:	0c1b      	lsrs	r3, r3, #16
    f6e8:	b2da      	uxtb	r2, r3
    f6ea:	2338      	movs	r3, #56	; 0x38
    f6ec:	18fb      	adds	r3, r7, r3
    f6ee:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
    f6f0:	683b      	ldr	r3, [r7, #0]
    f6f2:	0a1b      	lsrs	r3, r3, #8
    f6f4:	b2da      	uxtb	r2, r3
    f6f6:	2338      	movs	r3, #56	; 0x38
    f6f8:	18fb      	adds	r3, r7, r3
    f6fa:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
    f6fc:	683b      	ldr	r3, [r7, #0]
    f6fe:	b2da      	uxtb	r2, r3
    f700:	2338      	movs	r3, #56	; 0x38
    f702:	18fb      	adds	r3, r7, r3
    f704:	719a      	strb	r2, [r3, #6]
		len = 8;
    f706:	2308      	movs	r3, #8
    f708:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    f70a:	e05b      	b.n	f7c4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
    f70c:	68bb      	ldr	r3, [r7, #8]
    f70e:	0a1b      	lsrs	r3, r3, #8
    f710:	b2da      	uxtb	r2, r3
    f712:	2338      	movs	r3, #56	; 0x38
    f714:	18fb      	adds	r3, r7, r3
    f716:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
    f718:	2388      	movs	r3, #136	; 0x88
    f71a:	18fb      	adds	r3, r7, r3
    f71c:	781b      	ldrb	r3, [r3, #0]
    f71e:	2b01      	cmp	r3, #1
    f720:	d109      	bne.n	f736 <spi_cmd_complete+0x1b6>
    f722:	2338      	movs	r3, #56	; 0x38
    f724:	18fb      	adds	r3, r7, r3
    f726:	785b      	ldrb	r3, [r3, #1]
    f728:	2280      	movs	r2, #128	; 0x80
    f72a:	4252      	negs	r2, r2
    f72c:	4313      	orrs	r3, r2
    f72e:	b2da      	uxtb	r2, r3
    f730:	2338      	movs	r3, #56	; 0x38
    f732:	18fb      	adds	r3, r7, r3
    f734:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
    f736:	68bb      	ldr	r3, [r7, #8]
    f738:	b2da      	uxtb	r2, r3
    f73a:	2338      	movs	r3, #56	; 0x38
    f73c:	18fb      	adds	r3, r7, r3
    f73e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
    f740:	687b      	ldr	r3, [r7, #4]
    f742:	78da      	ldrb	r2, [r3, #3]
    f744:	2338      	movs	r3, #56	; 0x38
    f746:	18fb      	adds	r3, r7, r3
    f748:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
    f74a:	687b      	ldr	r3, [r7, #4]
    f74c:	789a      	ldrb	r2, [r3, #2]
    f74e:	2338      	movs	r3, #56	; 0x38
    f750:	18fb      	adds	r3, r7, r3
    f752:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
    f754:	687b      	ldr	r3, [r7, #4]
    f756:	785a      	ldrb	r2, [r3, #1]
    f758:	2338      	movs	r3, #56	; 0x38
    f75a:	18fb      	adds	r3, r7, r3
    f75c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
    f75e:	687b      	ldr	r3, [r7, #4]
    f760:	781a      	ldrb	r2, [r3, #0]
    f762:	2338      	movs	r3, #56	; 0x38
    f764:	18fb      	adds	r3, r7, r3
    f766:	719a      	strb	r2, [r3, #6]
		len = 8;
    f768:	2308      	movs	r3, #8
    f76a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    f76c:	e02a      	b.n	f7c4 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
    f76e:	68bb      	ldr	r3, [r7, #8]
    f770:	0c1b      	lsrs	r3, r3, #16
    f772:	b2da      	uxtb	r2, r3
    f774:	2338      	movs	r3, #56	; 0x38
    f776:	18fb      	adds	r3, r7, r3
    f778:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    f77a:	68bb      	ldr	r3, [r7, #8]
    f77c:	0a1b      	lsrs	r3, r3, #8
    f77e:	b2da      	uxtb	r2, r3
    f780:	2338      	movs	r3, #56	; 0x38
    f782:	18fb      	adds	r3, r7, r3
    f784:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
    f786:	68bb      	ldr	r3, [r7, #8]
    f788:	b2da      	uxtb	r2, r3
    f78a:	2338      	movs	r3, #56	; 0x38
    f78c:	18fb      	adds	r3, r7, r3
    f78e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
    f790:	687b      	ldr	r3, [r7, #4]
    f792:	78da      	ldrb	r2, [r3, #3]
    f794:	2338      	movs	r3, #56	; 0x38
    f796:	18fb      	adds	r3, r7, r3
    f798:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
    f79a:	687b      	ldr	r3, [r7, #4]
    f79c:	789a      	ldrb	r2, [r3, #2]
    f79e:	2338      	movs	r3, #56	; 0x38
    f7a0:	18fb      	adds	r3, r7, r3
    f7a2:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
    f7a4:	687b      	ldr	r3, [r7, #4]
    f7a6:	785a      	ldrb	r2, [r3, #1]
    f7a8:	2338      	movs	r3, #56	; 0x38
    f7aa:	18fb      	adds	r3, r7, r3
    f7ac:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
    f7ae:	687b      	ldr	r3, [r7, #4]
    f7b0:	781a      	ldrb	r2, [r3, #0]
    f7b2:	2338      	movs	r3, #56	; 0x38
    f7b4:	18fb      	adds	r3, r7, r3
    f7b6:	71da      	strb	r2, [r3, #7]
		len = 9;
    f7b8:	2309      	movs	r3, #9
    f7ba:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
    f7bc:	e002      	b.n	f7c4 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
    f7be:	2300      	movs	r3, #0
    f7c0:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
    f7c2:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
    f7c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    f7c6:	2b01      	cmp	r3, #1
    f7c8:	d001      	beq.n	f7ce <spi_cmd_complete+0x24e>
		return result;
    f7ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    f7cc:	e33a      	b.n	fe44 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
    f7ce:	4b4d      	ldr	r3, [pc, #308]	; (f904 <spi_cmd_complete+0x384>)
    f7d0:	781b      	ldrb	r3, [r3, #0]
    f7d2:	2b00      	cmp	r3, #0
    f7d4:	d111      	bne.n	f7fa <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
    f7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    f7d8:	1e5c      	subs	r4, r3, #1
    f7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    f7dc:	3b01      	subs	r3, #1
    f7de:	001a      	movs	r2, r3
    f7e0:	2338      	movs	r3, #56	; 0x38
    f7e2:	18fb      	adds	r3, r7, r3
    f7e4:	0019      	movs	r1, r3
    f7e6:	207f      	movs	r0, #127	; 0x7f
    f7e8:	4b47      	ldr	r3, [pc, #284]	; (f908 <spi_cmd_complete+0x388>)
    f7ea:	4798      	blx	r3
    f7ec:	0003      	movs	r3, r0
    f7ee:	18db      	adds	r3, r3, r3
    f7f0:	b2da      	uxtb	r2, r3
    f7f2:	2338      	movs	r3, #56	; 0x38
    f7f4:	18fb      	adds	r3, r7, r3
    f7f6:	551a      	strb	r2, [r3, r4]
    f7f8:	e002      	b.n	f800 <spi_cmd_complete+0x280>
	} else {
		len -=1;
    f7fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    f7fc:	3b01      	subs	r3, #1
    f7fe:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
    f800:	230f      	movs	r3, #15
    f802:	18fb      	adds	r3, r7, r3
    f804:	781b      	ldrb	r3, [r3, #0]
    f806:	2bcf      	cmp	r3, #207	; 0xcf
    f808:	d009      	beq.n	f81e <spi_cmd_complete+0x29e>
    f80a:	230f      	movs	r3, #15
    f80c:	18fb      	adds	r3, r7, r3
    f80e:	781b      	ldrb	r3, [r3, #0]
    f810:	2bc5      	cmp	r3, #197	; 0xc5
    f812:	d004      	beq.n	f81e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
    f814:	230f      	movs	r3, #15
    f816:	18fb      	adds	r3, r7, r3
    f818:	781b      	ldrb	r3, [r3, #0]
    f81a:	2bc6      	cmp	r3, #198	; 0xc6
    f81c:	d103      	bne.n	f826 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
    f81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    f820:	3306      	adds	r3, #6
    f822:	673b      	str	r3, [r7, #112]	; 0x70
    f824:	e018      	b.n	f858 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
    f826:	230f      	movs	r3, #15
    f828:	18fb      	adds	r3, r7, r3
    f82a:	781b      	ldrb	r3, [r3, #0]
    f82c:	2bc4      	cmp	r3, #196	; 0xc4
    f82e:	d004      	beq.n	f83a <spi_cmd_complete+0x2ba>
    f830:	230f      	movs	r3, #15
    f832:	18fb      	adds	r3, r7, r3
    f834:	781b      	ldrb	r3, [r3, #0]
    f836:	2bca      	cmp	r3, #202	; 0xca
    f838:	d10b      	bne.n	f852 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
    f83a:	4b32      	ldr	r3, [pc, #200]	; (f904 <spi_cmd_complete+0x384>)
    f83c:	781b      	ldrb	r3, [r3, #0]
    f83e:	2b00      	cmp	r3, #0
    f840:	d103      	bne.n	f84a <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
    f842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    f844:	330c      	adds	r3, #12
    f846:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
    f848:	e006      	b.n	f858 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
    f84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    f84c:	330a      	adds	r3, #10
    f84e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
    f850:	e002      	b.n	f858 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
    f852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    f854:	3305      	adds	r3, #5
    f856:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
    f858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    f85a:	2b20      	cmp	r3, #32
    f85c:	d914      	bls.n	f888 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
    f85e:	23f7      	movs	r3, #247	; 0xf7
    f860:	005a      	lsls	r2, r3, #1
    f862:	492a      	ldr	r1, [pc, #168]	; (f90c <spi_cmd_complete+0x38c>)
    f864:	4b2a      	ldr	r3, [pc, #168]	; (f910 <spi_cmd_complete+0x390>)
    f866:	0018      	movs	r0, r3
    f868:	4b2a      	ldr	r3, [pc, #168]	; (f914 <spi_cmd_complete+0x394>)
    f86a:	4798      	blx	r3
    f86c:	6f39      	ldr	r1, [r7, #112]	; 0x70
    f86e:	4b2a      	ldr	r3, [pc, #168]	; (f918 <spi_cmd_complete+0x398>)
    f870:	2220      	movs	r2, #32
    f872:	0018      	movs	r0, r3
    f874:	4b27      	ldr	r3, [pc, #156]	; (f914 <spi_cmd_complete+0x394>)
    f876:	4798      	blx	r3
    f878:	4b28      	ldr	r3, [pc, #160]	; (f91c <spi_cmd_complete+0x39c>)
    f87a:	0018      	movs	r0, r3
    f87c:	4b25      	ldr	r3, [pc, #148]	; (f914 <spi_cmd_complete+0x394>)
    f87e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
    f880:	2300      	movs	r3, #0
    f882:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
    f884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    f886:	e2dd      	b.n	fe44 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
    f888:	2377      	movs	r3, #119	; 0x77
    f88a:	18fb      	adds	r3, r7, r3
    f88c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    f88e:	701a      	strb	r2, [r3, #0]
    f890:	e00d      	b.n	f8ae <spi_cmd_complete+0x32e>
		wb[wix] = 0;
    f892:	2377      	movs	r3, #119	; 0x77
    f894:	18fb      	adds	r3, r7, r3
    f896:	781b      	ldrb	r3, [r3, #0]
    f898:	2238      	movs	r2, #56	; 0x38
    f89a:	18ba      	adds	r2, r7, r2
    f89c:	2100      	movs	r1, #0
    f89e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
    f8a0:	2377      	movs	r3, #119	; 0x77
    f8a2:	18fb      	adds	r3, r7, r3
    f8a4:	781a      	ldrb	r2, [r3, #0]
    f8a6:	2377      	movs	r3, #119	; 0x77
    f8a8:	18fb      	adds	r3, r7, r3
    f8aa:	3201      	adds	r2, #1
    f8ac:	701a      	strb	r2, [r3, #0]
    f8ae:	2377      	movs	r3, #119	; 0x77
    f8b0:	18fb      	adds	r3, r7, r3
    f8b2:	781a      	ldrb	r2, [r3, #0]
    f8b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    f8b6:	429a      	cmp	r2, r3
    f8b8:	d3eb      	bcc.n	f892 <spi_cmd_complete+0x312>
	}
	rix = len;
    f8ba:	2376      	movs	r3, #118	; 0x76
    f8bc:	18fb      	adds	r3, r7, r3
    f8be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    f8c0:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
    f8c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    f8c4:	b29a      	uxth	r2, r3
    f8c6:	2318      	movs	r3, #24
    f8c8:	18f9      	adds	r1, r7, r3
    f8ca:	2338      	movs	r3, #56	; 0x38
    f8cc:	18fb      	adds	r3, r7, r3
    f8ce:	0018      	movs	r0, r3
    f8d0:	4b13      	ldr	r3, [pc, #76]	; (f920 <spi_cmd_complete+0x3a0>)
    f8d2:	4798      	blx	r3
    f8d4:	1e03      	subs	r3, r0, #0
    f8d6:	d027      	beq.n	f928 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    f8d8:	23fa      	movs	r3, #250	; 0xfa
    f8da:	33ff      	adds	r3, #255	; 0xff
    f8dc:	001a      	movs	r2, r3
    f8de:	490b      	ldr	r1, [pc, #44]	; (f90c <spi_cmd_complete+0x38c>)
    f8e0:	4b0b      	ldr	r3, [pc, #44]	; (f910 <spi_cmd_complete+0x390>)
    f8e2:	0018      	movs	r0, r3
    f8e4:	4b0b      	ldr	r3, [pc, #44]	; (f914 <spi_cmd_complete+0x394>)
    f8e6:	4798      	blx	r3
    f8e8:	4b0e      	ldr	r3, [pc, #56]	; (f924 <spi_cmd_complete+0x3a4>)
    f8ea:	0018      	movs	r0, r3
    f8ec:	4b09      	ldr	r3, [pc, #36]	; (f914 <spi_cmd_complete+0x394>)
    f8ee:	4798      	blx	r3
    f8f0:	4b0a      	ldr	r3, [pc, #40]	; (f91c <spi_cmd_complete+0x39c>)
    f8f2:	0018      	movs	r0, r3
    f8f4:	4b07      	ldr	r3, [pc, #28]	; (f914 <spi_cmd_complete+0x394>)
    f8f6:	4798      	blx	r3
		result = N_FAIL;
    f8f8:	2300      	movs	r3, #0
    f8fa:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
    f8fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    f8fe:	e2a1      	b.n	fe44 <spi_cmd_complete+0x8c4>
    f900:	000246d4 	.word	0x000246d4
    f904:	20003d18 	.word	0x20003d18
    f908:	0000efb5 	.word	0x0000efb5
    f90c:	00024734 	.word	0x00024734
    f910:	00024120 	.word	0x00024120
    f914:	00009a6d 	.word	0x00009a6d
    f918:	000241e8 	.word	0x000241e8
    f91c:	00024160 	.word	0x00024160
    f920:	0000ef41 	.word	0x0000ef41
    f924:	00024134 	.word	0x00024134
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    f928:	230f      	movs	r3, #15
    f92a:	18fb      	adds	r3, r7, r3
    f92c:	781b      	ldrb	r3, [r3, #0]
    f92e:	2bcf      	cmp	r3, #207	; 0xcf
    f930:	d009      	beq.n	f946 <spi_cmd_complete+0x3c6>
    f932:	230f      	movs	r3, #15
    f934:	18fb      	adds	r3, r7, r3
    f936:	781b      	ldrb	r3, [r3, #0]
    f938:	2bc5      	cmp	r3, #197	; 0xc5
    f93a:	d004      	beq.n	f946 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
    f93c:	230f      	movs	r3, #15
    f93e:	18fb      	adds	r3, r7, r3
    f940:	781b      	ldrb	r3, [r3, #0]
    f942:	2bc6      	cmp	r3, #198	; 0xc6
    f944:	d106      	bne.n	f954 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
    f946:	2376      	movs	r3, #118	; 0x76
    f948:	18fb      	adds	r3, r7, r3
    f94a:	781a      	ldrb	r2, [r3, #0]
    f94c:	2376      	movs	r3, #118	; 0x76
    f94e:	18fb      	adds	r3, r7, r3
    f950:	3201      	adds	r2, #1
    f952:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
    f954:	2376      	movs	r3, #118	; 0x76
    f956:	18fb      	adds	r3, r7, r3
    f958:	781b      	ldrb	r3, [r3, #0]
    f95a:	2276      	movs	r2, #118	; 0x76
    f95c:	18ba      	adds	r2, r7, r2
    f95e:	1c59      	adds	r1, r3, #1
    f960:	7011      	strb	r1, [r2, #0]
    f962:	001a      	movs	r2, r3
    f964:	2318      	movs	r3, #24
    f966:	18fb      	adds	r3, r7, r3
    f968:	5c9a      	ldrb	r2, [r3, r2]
    f96a:	2317      	movs	r3, #23
    f96c:	18fb      	adds	r3, r7, r3
    f96e:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
    f970:	2317      	movs	r3, #23
    f972:	18fb      	adds	r3, r7, r3
    f974:	781b      	ldrb	r3, [r3, #0]
    f976:	220f      	movs	r2, #15
    f978:	18ba      	adds	r2, r7, r2
    f97a:	7812      	ldrb	r2, [r2, #0]
    f97c:	429a      	cmp	r2, r3
    f97e:	d018      	beq.n	f9b2 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
    f980:	4add      	ldr	r2, [pc, #884]	; (fcf8 <spi_cmd_complete+0x778>)
    f982:	49de      	ldr	r1, [pc, #888]	; (fcfc <spi_cmd_complete+0x77c>)
    f984:	4bde      	ldr	r3, [pc, #888]	; (fd00 <spi_cmd_complete+0x780>)
    f986:	0018      	movs	r0, r3
    f988:	4bde      	ldr	r3, [pc, #888]	; (fd04 <spi_cmd_complete+0x784>)
    f98a:	4798      	blx	r3
    f98c:	230f      	movs	r3, #15
    f98e:	18fb      	adds	r3, r7, r3
    f990:	7819      	ldrb	r1, [r3, #0]
    f992:	2317      	movs	r3, #23
    f994:	18fb      	adds	r3, r7, r3
    f996:	781b      	ldrb	r3, [r3, #0]
    f998:	001a      	movs	r2, r3
    f99a:	4bdb      	ldr	r3, [pc, #876]	; (fd08 <spi_cmd_complete+0x788>)
    f99c:	0018      	movs	r0, r3
    f99e:	4bd9      	ldr	r3, [pc, #868]	; (fd04 <spi_cmd_complete+0x784>)
    f9a0:	4798      	blx	r3
    f9a2:	4bda      	ldr	r3, [pc, #872]	; (fd0c <spi_cmd_complete+0x78c>)
    f9a4:	0018      	movs	r0, r3
    f9a6:	4bd7      	ldr	r3, [pc, #860]	; (fd04 <spi_cmd_complete+0x784>)
    f9a8:	4798      	blx	r3
		result = N_FAIL;
    f9aa:	2300      	movs	r3, #0
    f9ac:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
    f9ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    f9b0:	e248      	b.n	fe44 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
    f9b2:	2376      	movs	r3, #118	; 0x76
    f9b4:	18fb      	adds	r3, r7, r3
    f9b6:	781b      	ldrb	r3, [r3, #0]
    f9b8:	2276      	movs	r2, #118	; 0x76
    f9ba:	18ba      	adds	r2, r7, r2
    f9bc:	1c59      	adds	r1, r3, #1
    f9be:	7011      	strb	r1, [r2, #0]
    f9c0:	001a      	movs	r2, r3
    f9c2:	2318      	movs	r3, #24
    f9c4:	18fb      	adds	r3, r7, r3
    f9c6:	5c9a      	ldrb	r2, [r3, r2]
    f9c8:	2317      	movs	r3, #23
    f9ca:	18fb      	adds	r3, r7, r3
    f9cc:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
    f9ce:	2317      	movs	r3, #23
    f9d0:	18fb      	adds	r3, r7, r3
    f9d2:	781b      	ldrb	r3, [r3, #0]
    f9d4:	2b00      	cmp	r3, #0
    f9d6:	d016      	beq.n	fa06 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
    f9d8:	4acd      	ldr	r2, [pc, #820]	; (fd10 <spi_cmd_complete+0x790>)
    f9da:	49c8      	ldr	r1, [pc, #800]	; (fcfc <spi_cmd_complete+0x77c>)
    f9dc:	4bc8      	ldr	r3, [pc, #800]	; (fd00 <spi_cmd_complete+0x780>)
    f9de:	0018      	movs	r0, r3
    f9e0:	4bc8      	ldr	r3, [pc, #800]	; (fd04 <spi_cmd_complete+0x784>)
    f9e2:	4798      	blx	r3
    f9e4:	2317      	movs	r3, #23
    f9e6:	18fb      	adds	r3, r7, r3
    f9e8:	781b      	ldrb	r3, [r3, #0]
    f9ea:	001a      	movs	r2, r3
    f9ec:	4bc9      	ldr	r3, [pc, #804]	; (fd14 <spi_cmd_complete+0x794>)
    f9ee:	0011      	movs	r1, r2
    f9f0:	0018      	movs	r0, r3
    f9f2:	4bc4      	ldr	r3, [pc, #784]	; (fd04 <spi_cmd_complete+0x784>)
    f9f4:	4798      	blx	r3
    f9f6:	4bc5      	ldr	r3, [pc, #788]	; (fd0c <spi_cmd_complete+0x78c>)
    f9f8:	0018      	movs	r0, r3
    f9fa:	4bc2      	ldr	r3, [pc, #776]	; (fd04 <spi_cmd_complete+0x784>)
    f9fc:	4798      	blx	r3
		result = N_FAIL;
    f9fe:	2300      	movs	r3, #0
    fa00:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
    fa02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fa04:	e21e      	b.n	fe44 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
    fa06:	230f      	movs	r3, #15
    fa08:	18fb      	adds	r3, r7, r3
    fa0a:	781b      	ldrb	r3, [r3, #0]
    fa0c:	2bc4      	cmp	r3, #196	; 0xc4
    fa0e:	d00f      	beq.n	fa30 <spi_cmd_complete+0x4b0>
    fa10:	230f      	movs	r3, #15
    fa12:	18fb      	adds	r3, r7, r3
    fa14:	781b      	ldrb	r3, [r3, #0]
    fa16:	2bca      	cmp	r3, #202	; 0xca
    fa18:	d00a      	beq.n	fa30 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
    fa1a:	230f      	movs	r3, #15
    fa1c:	18fb      	adds	r3, r7, r3
    fa1e:	781b      	ldrb	r3, [r3, #0]
    fa20:	2bc2      	cmp	r3, #194	; 0xc2
    fa22:	d005      	beq.n	fa30 <spi_cmd_complete+0x4b0>
    fa24:	230f      	movs	r3, #15
    fa26:	18fb      	adds	r3, r7, r3
    fa28:	781b      	ldrb	r3, [r3, #0]
    fa2a:	2bc8      	cmp	r3, #200	; 0xc8
    fa2c:	d000      	beq.n	fa30 <spi_cmd_complete+0x4b0>
    fa2e:	e208      	b.n	fe42 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
    fa30:	230a      	movs	r3, #10
    fa32:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
    fa34:	2376      	movs	r3, #118	; 0x76
    fa36:	18fb      	adds	r3, r7, r3
    fa38:	781a      	ldrb	r2, [r3, #0]
    fa3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fa3c:	429a      	cmp	r2, r3
    fa3e:	d218      	bcs.n	fa72 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
    fa40:	2376      	movs	r3, #118	; 0x76
    fa42:	18fb      	adds	r3, r7, r3
    fa44:	781b      	ldrb	r3, [r3, #0]
    fa46:	2276      	movs	r2, #118	; 0x76
    fa48:	18ba      	adds	r2, r7, r2
    fa4a:	1c59      	adds	r1, r3, #1
    fa4c:	7011      	strb	r1, [r2, #0]
    fa4e:	001a      	movs	r2, r3
    fa50:	2318      	movs	r3, #24
    fa52:	18fb      	adds	r3, r7, r3
    fa54:	5c9a      	ldrb	r2, [r3, r2]
    fa56:	2317      	movs	r3, #23
    fa58:	18fb      	adds	r3, r7, r3
    fa5a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
    fa5c:	2317      	movs	r3, #23
    fa5e:	18fb      	adds	r3, r7, r3
    fa60:	781b      	ldrb	r3, [r3, #0]
    fa62:	091b      	lsrs	r3, r3, #4
    fa64:	b2db      	uxtb	r3, r3
    fa66:	001a      	movs	r2, r3
    fa68:	230f      	movs	r3, #15
    fa6a:	4013      	ands	r3, r2
    fa6c:	2b0f      	cmp	r3, #15
    fa6e:	d103      	bne.n	fa78 <spi_cmd_complete+0x4f8>
					break;
    fa70:	e007      	b.n	fa82 <spi_cmd_complete+0x502>
					retry = 0;
    fa72:	2300      	movs	r3, #0
    fa74:	667b      	str	r3, [r7, #100]	; 0x64
					break;
    fa76:	e004      	b.n	fa82 <spi_cmd_complete+0x502>
			} while (retry--);
    fa78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fa7a:	1e5a      	subs	r2, r3, #1
    fa7c:	667a      	str	r2, [r7, #100]	; 0x64
    fa7e:	2b00      	cmp	r3, #0
    fa80:	d1d8      	bne.n	fa34 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
    fa82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fa84:	2b00      	cmp	r3, #0
    fa86:	dc18      	bgt.n	faba <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
    fa88:	2395      	movs	r3, #149	; 0x95
    fa8a:	009a      	lsls	r2, r3, #2
    fa8c:	499b      	ldr	r1, [pc, #620]	; (fcfc <spi_cmd_complete+0x77c>)
    fa8e:	4b9c      	ldr	r3, [pc, #624]	; (fd00 <spi_cmd_complete+0x780>)
    fa90:	0018      	movs	r0, r3
    fa92:	4b9c      	ldr	r3, [pc, #624]	; (fd04 <spi_cmd_complete+0x784>)
    fa94:	4798      	blx	r3
    fa96:	2317      	movs	r3, #23
    fa98:	18fb      	adds	r3, r7, r3
    fa9a:	781b      	ldrb	r3, [r3, #0]
    fa9c:	001a      	movs	r2, r3
    fa9e:	4b9e      	ldr	r3, [pc, #632]	; (fd18 <spi_cmd_complete+0x798>)
    faa0:	0011      	movs	r1, r2
    faa2:	0018      	movs	r0, r3
    faa4:	4b97      	ldr	r3, [pc, #604]	; (fd04 <spi_cmd_complete+0x784>)
    faa6:	4798      	blx	r3
    faa8:	4b98      	ldr	r3, [pc, #608]	; (fd0c <spi_cmd_complete+0x78c>)
    faaa:	0018      	movs	r0, r3
    faac:	4b95      	ldr	r3, [pc, #596]	; (fd04 <spi_cmd_complete+0x784>)
    faae:	4798      	blx	r3
				result = N_RESET;
    fab0:	2301      	movs	r3, #1
    fab2:	425b      	negs	r3, r3
    fab4:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
    fab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fab8:	e1c4      	b.n	fe44 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
    faba:	230f      	movs	r3, #15
    fabc:	18fb      	adds	r3, r7, r3
    fabe:	781b      	ldrb	r3, [r3, #0]
    fac0:	2bc4      	cmp	r3, #196	; 0xc4
    fac2:	d005      	beq.n	fad0 <spi_cmd_complete+0x550>
    fac4:	230f      	movs	r3, #15
    fac6:	18fb      	adds	r3, r7, r3
    fac8:	781b      	ldrb	r3, [r3, #0]
    faca:	2bca      	cmp	r3, #202	; 0xca
    facc:	d000      	beq.n	fad0 <spi_cmd_complete+0x550>
    face:	e08e      	b.n	fbee <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
    fad0:	2376      	movs	r3, #118	; 0x76
    fad2:	18fb      	adds	r3, r7, r3
    fad4:	781b      	ldrb	r3, [r3, #0]
    fad6:	3303      	adds	r3, #3
    fad8:	001a      	movs	r2, r3
    fada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fadc:	429a      	cmp	r2, r3
    fade:	d23c      	bcs.n	fb5a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
    fae0:	2376      	movs	r3, #118	; 0x76
    fae2:	18fb      	adds	r3, r7, r3
    fae4:	781b      	ldrb	r3, [r3, #0]
    fae6:	2276      	movs	r2, #118	; 0x76
    fae8:	18ba      	adds	r2, r7, r2
    faea:	1c59      	adds	r1, r3, #1
    faec:	7011      	strb	r1, [r2, #0]
    faee:	001a      	movs	r2, r3
    faf0:	2318      	movs	r3, #24
    faf2:	18fb      	adds	r3, r7, r3
    faf4:	5c9a      	ldrb	r2, [r3, r2]
    faf6:	687b      	ldr	r3, [r7, #4]
    faf8:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
    fafa:	687b      	ldr	r3, [r7, #4]
    fafc:	1c5a      	adds	r2, r3, #1
    fafe:	2376      	movs	r3, #118	; 0x76
    fb00:	18fb      	adds	r3, r7, r3
    fb02:	781b      	ldrb	r3, [r3, #0]
    fb04:	2176      	movs	r1, #118	; 0x76
    fb06:	1879      	adds	r1, r7, r1
    fb08:	1c58      	adds	r0, r3, #1
    fb0a:	7008      	strb	r0, [r1, #0]
    fb0c:	0019      	movs	r1, r3
    fb0e:	2318      	movs	r3, #24
    fb10:	18fb      	adds	r3, r7, r3
    fb12:	5c5b      	ldrb	r3, [r3, r1]
    fb14:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
    fb16:	687b      	ldr	r3, [r7, #4]
    fb18:	1c9a      	adds	r2, r3, #2
    fb1a:	2376      	movs	r3, #118	; 0x76
    fb1c:	18fb      	adds	r3, r7, r3
    fb1e:	781b      	ldrb	r3, [r3, #0]
    fb20:	2176      	movs	r1, #118	; 0x76
    fb22:	1879      	adds	r1, r7, r1
    fb24:	1c58      	adds	r0, r3, #1
    fb26:	7008      	strb	r0, [r1, #0]
    fb28:	0019      	movs	r1, r3
    fb2a:	2318      	movs	r3, #24
    fb2c:	18fb      	adds	r3, r7, r3
    fb2e:	5c5b      	ldrb	r3, [r3, r1]
    fb30:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
    fb32:	687b      	ldr	r3, [r7, #4]
    fb34:	1cda      	adds	r2, r3, #3
    fb36:	2376      	movs	r3, #118	; 0x76
    fb38:	18fb      	adds	r3, r7, r3
    fb3a:	781b      	ldrb	r3, [r3, #0]
    fb3c:	2176      	movs	r1, #118	; 0x76
    fb3e:	1879      	adds	r1, r7, r1
    fb40:	1c58      	adds	r0, r3, #1
    fb42:	7008      	strb	r0, [r1, #0]
    fb44:	0019      	movs	r1, r3
    fb46:	2318      	movs	r3, #24
    fb48:	18fb      	adds	r3, r7, r3
    fb4a:	5c5b      	ldrb	r3, [r3, r1]
    fb4c:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
    fb4e:	4b73      	ldr	r3, [pc, #460]	; (fd1c <spi_cmd_complete+0x79c>)
    fb50:	781b      	ldrb	r3, [r3, #0]
    fb52:	2b00      	cmp	r3, #0
    fb54:	d000      	beq.n	fb58 <spi_cmd_complete+0x5d8>
    fb56:	e174      	b.n	fe42 <spi_cmd_complete+0x8c2>
    fb58:	e011      	b.n	fb7e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
    fb5a:	4a71      	ldr	r2, [pc, #452]	; (fd20 <spi_cmd_complete+0x7a0>)
    fb5c:	4967      	ldr	r1, [pc, #412]	; (fcfc <spi_cmd_complete+0x77c>)
    fb5e:	4b68      	ldr	r3, [pc, #416]	; (fd00 <spi_cmd_complete+0x780>)
    fb60:	0018      	movs	r0, r3
    fb62:	4b68      	ldr	r3, [pc, #416]	; (fd04 <spi_cmd_complete+0x784>)
    fb64:	4798      	blx	r3
    fb66:	4b6f      	ldr	r3, [pc, #444]	; (fd24 <spi_cmd_complete+0x7a4>)
    fb68:	0018      	movs	r0, r3
    fb6a:	4b66      	ldr	r3, [pc, #408]	; (fd04 <spi_cmd_complete+0x784>)
    fb6c:	4798      	blx	r3
    fb6e:	4b67      	ldr	r3, [pc, #412]	; (fd0c <spi_cmd_complete+0x78c>)
    fb70:	0018      	movs	r0, r3
    fb72:	4b64      	ldr	r3, [pc, #400]	; (fd04 <spi_cmd_complete+0x784>)
    fb74:	4798      	blx	r3
					result = N_FAIL;
    fb76:	2300      	movs	r3, #0
    fb78:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
    fb7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fb7c:	e162      	b.n	fe44 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
    fb7e:	2376      	movs	r3, #118	; 0x76
    fb80:	18fb      	adds	r3, r7, r3
    fb82:	781b      	ldrb	r3, [r3, #0]
    fb84:	3301      	adds	r3, #1
    fb86:	001a      	movs	r2, r3
    fb88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fb8a:	429a      	cmp	r2, r3
    fb8c:	d21c      	bcs.n	fbc8 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
    fb8e:	2376      	movs	r3, #118	; 0x76
    fb90:	18fb      	adds	r3, r7, r3
    fb92:	781b      	ldrb	r3, [r3, #0]
    fb94:	2276      	movs	r2, #118	; 0x76
    fb96:	18ba      	adds	r2, r7, r2
    fb98:	1c59      	adds	r1, r3, #1
    fb9a:	7011      	strb	r1, [r2, #0]
    fb9c:	001a      	movs	r2, r3
    fb9e:	2318      	movs	r3, #24
    fba0:	18fb      	adds	r3, r7, r3
    fba2:	5c9a      	ldrb	r2, [r3, r2]
    fba4:	2314      	movs	r3, #20
    fba6:	18fb      	adds	r3, r7, r3
    fba8:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
    fbaa:	2376      	movs	r3, #118	; 0x76
    fbac:	18fb      	adds	r3, r7, r3
    fbae:	781b      	ldrb	r3, [r3, #0]
    fbb0:	2276      	movs	r2, #118	; 0x76
    fbb2:	18ba      	adds	r2, r7, r2
    fbb4:	1c59      	adds	r1, r3, #1
    fbb6:	7011      	strb	r1, [r2, #0]
    fbb8:	001a      	movs	r2, r3
    fbba:	2318      	movs	r3, #24
    fbbc:	18fb      	adds	r3, r7, r3
    fbbe:	5c9a      	ldrb	r2, [r3, r2]
    fbc0:	2314      	movs	r3, #20
    fbc2:	18fb      	adds	r3, r7, r3
    fbc4:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
    fbc6:	e13c      	b.n	fe42 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
    fbc8:	239c      	movs	r3, #156	; 0x9c
    fbca:	009a      	lsls	r2, r3, #2
    fbcc:	494b      	ldr	r1, [pc, #300]	; (fcfc <spi_cmd_complete+0x77c>)
    fbce:	4b4c      	ldr	r3, [pc, #304]	; (fd00 <spi_cmd_complete+0x780>)
    fbd0:	0018      	movs	r0, r3
    fbd2:	4b4c      	ldr	r3, [pc, #304]	; (fd04 <spi_cmd_complete+0x784>)
    fbd4:	4798      	blx	r3
    fbd6:	4b54      	ldr	r3, [pc, #336]	; (fd28 <spi_cmd_complete+0x7a8>)
    fbd8:	0018      	movs	r0, r3
    fbda:	4b4a      	ldr	r3, [pc, #296]	; (fd04 <spi_cmd_complete+0x784>)
    fbdc:	4798      	blx	r3
    fbde:	4b4b      	ldr	r3, [pc, #300]	; (fd0c <spi_cmd_complete+0x78c>)
    fbe0:	0018      	movs	r0, r3
    fbe2:	4b48      	ldr	r3, [pc, #288]	; (fd04 <spi_cmd_complete+0x784>)
    fbe4:	4798      	blx	r3
						result = N_FAIL;
    fbe6:	2300      	movs	r3, #0
    fbe8:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
    fbea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fbec:	e12a      	b.n	fe44 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
    fbee:	230f      	movs	r3, #15
    fbf0:	18fb      	adds	r3, r7, r3
    fbf2:	781b      	ldrb	r3, [r3, #0]
    fbf4:	2bc2      	cmp	r3, #194	; 0xc2
    fbf6:	d005      	beq.n	fc04 <spi_cmd_complete+0x684>
    fbf8:	230f      	movs	r3, #15
    fbfa:	18fb      	adds	r3, r7, r3
    fbfc:	781b      	ldrb	r3, [r3, #0]
    fbfe:	2bc8      	cmp	r3, #200	; 0xc8
    fc00:	d000      	beq.n	fc04 <spi_cmd_complete+0x684>
    fc02:	e11e      	b.n	fe42 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
    fc04:	2300      	movs	r3, #0
    fc06:	663b      	str	r3, [r7, #96]	; 0x60
    fc08:	e011      	b.n	fc2e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
    fc0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fc0c:	1c5a      	adds	r2, r3, #1
    fc0e:	663a      	str	r2, [r7, #96]	; 0x60
    fc10:	001a      	movs	r2, r3
    fc12:	687b      	ldr	r3, [r7, #4]
    fc14:	189a      	adds	r2, r3, r2
    fc16:	2376      	movs	r3, #118	; 0x76
    fc18:	18fb      	adds	r3, r7, r3
    fc1a:	781b      	ldrb	r3, [r3, #0]
    fc1c:	2176      	movs	r1, #118	; 0x76
    fc1e:	1879      	adds	r1, r7, r1
    fc20:	1c58      	adds	r0, r3, #1
    fc22:	7008      	strb	r0, [r1, #0]
    fc24:	0019      	movs	r1, r3
    fc26:	2318      	movs	r3, #24
    fc28:	18fb      	adds	r3, r7, r3
    fc2a:	5c5b      	ldrb	r3, [r3, r1]
    fc2c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
    fc2e:	2376      	movs	r3, #118	; 0x76
    fc30:	18fb      	adds	r3, r7, r3
    fc32:	781a      	ldrb	r2, [r3, #0]
    fc34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fc36:	429a      	cmp	r2, r3
    fc38:	d203      	bcs.n	fc42 <spi_cmd_complete+0x6c2>
    fc3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    fc3c:	683b      	ldr	r3, [r7, #0]
    fc3e:	429a      	cmp	r2, r3
    fc40:	d3e3      	bcc.n	fc0a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
    fc42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fc44:	683a      	ldr	r2, [r7, #0]
    fc46:	1ad3      	subs	r3, r2, r3
    fc48:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
    fc4a:	683b      	ldr	r3, [r7, #0]
    fc4c:	2b00      	cmp	r3, #0
    fc4e:	d100      	bne.n	fc52 <spi_cmd_complete+0x6d2>
    fc50:	e0f1      	b.n	fe36 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
    fc52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fc54:	2280      	movs	r2, #128	; 0x80
    fc56:	0192      	lsls	r2, r2, #6
    fc58:	1ad3      	subs	r3, r2, r3
    fc5a:	001a      	movs	r2, r3
    fc5c:	683b      	ldr	r3, [r7, #0]
    fc5e:	429a      	cmp	r2, r3
    fc60:	d302      	bcc.n	fc68 <spi_cmd_complete+0x6e8>
						nbytes = sz;
    fc62:	683b      	ldr	r3, [r7, #0]
    fc64:	65fb      	str	r3, [r7, #92]	; 0x5c
    fc66:	e004      	b.n	fc72 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
    fc68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fc6a:	2280      	movs	r2, #128	; 0x80
    fc6c:	0192      	lsls	r2, r2, #6
    fc6e:	1ad3      	subs	r3, r2, r3
    fc70:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
    fc72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fc74:	687a      	ldr	r2, [r7, #4]
    fc76:	18d3      	adds	r3, r2, r3
    fc78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    fc7a:	b292      	uxth	r2, r2
    fc7c:	0011      	movs	r1, r2
    fc7e:	0018      	movs	r0, r3
    fc80:	4b2a      	ldr	r3, [pc, #168]	; (fd2c <spi_cmd_complete+0x7ac>)
    fc82:	4798      	blx	r3
    fc84:	1e03      	subs	r3, r0, #0
    fc86:	d010      	beq.n	fcaa <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    fc88:	4a29      	ldr	r2, [pc, #164]	; (fd30 <spi_cmd_complete+0x7b0>)
    fc8a:	491c      	ldr	r1, [pc, #112]	; (fcfc <spi_cmd_complete+0x77c>)
    fc8c:	4b1c      	ldr	r3, [pc, #112]	; (fd00 <spi_cmd_complete+0x780>)
    fc8e:	0018      	movs	r0, r3
    fc90:	4b1c      	ldr	r3, [pc, #112]	; (fd04 <spi_cmd_complete+0x784>)
    fc92:	4798      	blx	r3
    fc94:	4b27      	ldr	r3, [pc, #156]	; (fd34 <spi_cmd_complete+0x7b4>)
    fc96:	0018      	movs	r0, r3
    fc98:	4b1a      	ldr	r3, [pc, #104]	; (fd04 <spi_cmd_complete+0x784>)
    fc9a:	4798      	blx	r3
    fc9c:	4b1b      	ldr	r3, [pc, #108]	; (fd0c <spi_cmd_complete+0x78c>)
    fc9e:	0018      	movs	r0, r3
    fca0:	4b18      	ldr	r3, [pc, #96]	; (fd04 <spi_cmd_complete+0x784>)
    fca2:	4798      	blx	r3
						result = N_FAIL;
    fca4:	2300      	movs	r3, #0
    fca6:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
    fca8:	e0cb      	b.n	fe42 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
    fcaa:	4b1c      	ldr	r3, [pc, #112]	; (fd1c <spi_cmd_complete+0x79c>)
    fcac:	781b      	ldrb	r3, [r3, #0]
    fcae:	2b00      	cmp	r3, #0
    fcb0:	d119      	bne.n	fce6 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
    fcb2:	2314      	movs	r3, #20
    fcb4:	18fb      	adds	r3, r7, r3
    fcb6:	2102      	movs	r1, #2
    fcb8:	0018      	movs	r0, r3
    fcba:	4b1c      	ldr	r3, [pc, #112]	; (fd2c <spi_cmd_complete+0x7ac>)
    fcbc:	4798      	blx	r3
    fcbe:	1e03      	subs	r3, r0, #0
    fcc0:	d011      	beq.n	fce6 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    fcc2:	23a6      	movs	r3, #166	; 0xa6
    fcc4:	009a      	lsls	r2, r3, #2
    fcc6:	490d      	ldr	r1, [pc, #52]	; (fcfc <spi_cmd_complete+0x77c>)
    fcc8:	4b0d      	ldr	r3, [pc, #52]	; (fd00 <spi_cmd_complete+0x780>)
    fcca:	0018      	movs	r0, r3
    fccc:	4b0d      	ldr	r3, [pc, #52]	; (fd04 <spi_cmd_complete+0x784>)
    fcce:	4798      	blx	r3
    fcd0:	4b19      	ldr	r3, [pc, #100]	; (fd38 <spi_cmd_complete+0x7b8>)
    fcd2:	0018      	movs	r0, r3
    fcd4:	4b0b      	ldr	r3, [pc, #44]	; (fd04 <spi_cmd_complete+0x784>)
    fcd6:	4798      	blx	r3
    fcd8:	4b0c      	ldr	r3, [pc, #48]	; (fd0c <spi_cmd_complete+0x78c>)
    fcda:	0018      	movs	r0, r3
    fcdc:	4b09      	ldr	r3, [pc, #36]	; (fd04 <spi_cmd_complete+0x784>)
    fcde:	4798      	blx	r3
							result = N_FAIL;
    fce0:	2300      	movs	r3, #0
    fce2:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
    fce4:	e0ad      	b.n	fe42 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
    fce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    fce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    fcea:	18d3      	adds	r3, r2, r3
    fcec:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
    fcee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    fcf0:	683a      	ldr	r2, [r7, #0]
    fcf2:	1ad3      	subs	r3, r2, r3
    fcf4:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
    fcf6:	e09e      	b.n	fe36 <spi_cmd_complete+0x8b6>
    fcf8:	0000022f 	.word	0x0000022f
    fcfc:	00024734 	.word	0x00024734
    fd00:	00024120 	.word	0x00024120
    fd04:	00009a6d 	.word	0x00009a6d
    fd08:	00024218 	.word	0x00024218
    fd0c:	00024160 	.word	0x00024160
    fd10:	00000239 	.word	0x00000239
    fd14:	00024254 	.word	0x00024254
    fd18:	00024288 	.word	0x00024288
    fd1c:	20003d18 	.word	0x20003d18
    fd20:	00000263 	.word	0x00000263
    fd24:	000242b8 	.word	0x000242b8
    fd28:	000242e8 	.word	0x000242e8
    fd2c:	0000eeb9 	.word	0x0000eeb9
    fd30:	0000028e 	.word	0x0000028e
    fd34:	00024318 	.word	0x00024318
    fd38:	0002434c 	.word	0x0002434c
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
    fd3c:	683a      	ldr	r2, [r7, #0]
    fd3e:	2380      	movs	r3, #128	; 0x80
    fd40:	019b      	lsls	r3, r3, #6
    fd42:	429a      	cmp	r2, r3
    fd44:	d802      	bhi.n	fd4c <spi_cmd_complete+0x7cc>
						nbytes = sz;
    fd46:	683b      	ldr	r3, [r7, #0]
    fd48:	65bb      	str	r3, [r7, #88]	; 0x58
    fd4a:	e002      	b.n	fd52 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
    fd4c:	2380      	movs	r3, #128	; 0x80
    fd4e:	019b      	lsls	r3, r3, #6
    fd50:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
    fd52:	230a      	movs	r3, #10
    fd54:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
    fd56:	2317      	movs	r3, #23
    fd58:	18fb      	adds	r3, r7, r3
    fd5a:	2101      	movs	r1, #1
    fd5c:	0018      	movs	r0, r3
    fd5e:	4b3b      	ldr	r3, [pc, #236]	; (fe4c <spi_cmd_complete+0x8cc>)
    fd60:	4798      	blx	r3
    fd62:	1e03      	subs	r3, r0, #0
    fd64:	d011      	beq.n	fd8a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    fd66:	23ae      	movs	r3, #174	; 0xae
    fd68:	009a      	lsls	r2, r3, #2
    fd6a:	4939      	ldr	r1, [pc, #228]	; (fe50 <spi_cmd_complete+0x8d0>)
    fd6c:	4b39      	ldr	r3, [pc, #228]	; (fe54 <spi_cmd_complete+0x8d4>)
    fd6e:	0018      	movs	r0, r3
    fd70:	4b39      	ldr	r3, [pc, #228]	; (fe58 <spi_cmd_complete+0x8d8>)
    fd72:	4798      	blx	r3
    fd74:	4b39      	ldr	r3, [pc, #228]	; (fe5c <spi_cmd_complete+0x8dc>)
    fd76:	0018      	movs	r0, r3
    fd78:	4b37      	ldr	r3, [pc, #220]	; (fe58 <spi_cmd_complete+0x8d8>)
    fd7a:	4798      	blx	r3
    fd7c:	4b38      	ldr	r3, [pc, #224]	; (fe60 <spi_cmd_complete+0x8e0>)
    fd7e:	0018      	movs	r0, r3
    fd80:	4b35      	ldr	r3, [pc, #212]	; (fe58 <spi_cmd_complete+0x8d8>)
    fd82:	4798      	blx	r3
							result = N_FAIL;
    fd84:	2300      	movs	r3, #0
    fd86:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
    fd88:	e010      	b.n	fdac <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
    fd8a:	2317      	movs	r3, #23
    fd8c:	18fb      	adds	r3, r7, r3
    fd8e:	781b      	ldrb	r3, [r3, #0]
    fd90:	091b      	lsrs	r3, r3, #4
    fd92:	b2db      	uxtb	r3, r3
    fd94:	001a      	movs	r2, r3
    fd96:	230f      	movs	r3, #15
    fd98:	4013      	ands	r3, r2
    fd9a:	2b0f      	cmp	r3, #15
    fd9c:	d005      	beq.n	fdaa <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
    fd9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fda0:	1e5a      	subs	r2, r3, #1
    fda2:	667a      	str	r2, [r7, #100]	; 0x64
    fda4:	2b00      	cmp	r3, #0
    fda6:	d1d6      	bne.n	fd56 <spi_cmd_complete+0x7d6>
    fda8:	e000      	b.n	fdac <spi_cmd_complete+0x82c>
							break;
    fdaa:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
    fdac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fdae:	2b00      	cmp	r3, #0
    fdb0:	d046      	beq.n	fe40 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
    fdb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fdb4:	687a      	ldr	r2, [r7, #4]
    fdb6:	18d3      	adds	r3, r2, r3
    fdb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
    fdba:	b292      	uxth	r2, r2
    fdbc:	0011      	movs	r1, r2
    fdbe:	0018      	movs	r0, r3
    fdc0:	4b22      	ldr	r3, [pc, #136]	; (fe4c <spi_cmd_complete+0x8cc>)
    fdc2:	4798      	blx	r3
    fdc4:	1e03      	subs	r3, r0, #0
    fdc6:	d011      	beq.n	fdec <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    fdc8:	23b2      	movs	r3, #178	; 0xb2
    fdca:	009a      	lsls	r2, r3, #2
    fdcc:	4920      	ldr	r1, [pc, #128]	; (fe50 <spi_cmd_complete+0x8d0>)
    fdce:	4b21      	ldr	r3, [pc, #132]	; (fe54 <spi_cmd_complete+0x8d4>)
    fdd0:	0018      	movs	r0, r3
    fdd2:	4b21      	ldr	r3, [pc, #132]	; (fe58 <spi_cmd_complete+0x8d8>)
    fdd4:	4798      	blx	r3
    fdd6:	4b23      	ldr	r3, [pc, #140]	; (fe64 <spi_cmd_complete+0x8e4>)
    fdd8:	0018      	movs	r0, r3
    fdda:	4b1f      	ldr	r3, [pc, #124]	; (fe58 <spi_cmd_complete+0x8d8>)
    fddc:	4798      	blx	r3
    fdde:	4b20      	ldr	r3, [pc, #128]	; (fe60 <spi_cmd_complete+0x8e0>)
    fde0:	0018      	movs	r0, r3
    fde2:	4b1d      	ldr	r3, [pc, #116]	; (fe58 <spi_cmd_complete+0x8d8>)
    fde4:	4798      	blx	r3
						result = N_FAIL;
    fde6:	2300      	movs	r3, #0
    fde8:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
    fdea:	e02a      	b.n	fe42 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
    fdec:	4b1e      	ldr	r3, [pc, #120]	; (fe68 <spi_cmd_complete+0x8e8>)
    fdee:	781b      	ldrb	r3, [r3, #0]
    fdf0:	2b00      	cmp	r3, #0
    fdf2:	d118      	bne.n	fe26 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
    fdf4:	2314      	movs	r3, #20
    fdf6:	18fb      	adds	r3, r7, r3
    fdf8:	2102      	movs	r1, #2
    fdfa:	0018      	movs	r0, r3
    fdfc:	4b13      	ldr	r3, [pc, #76]	; (fe4c <spi_cmd_complete+0x8cc>)
    fdfe:	4798      	blx	r3
    fe00:	1e03      	subs	r3, r0, #0
    fe02:	d010      	beq.n	fe26 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    fe04:	4a19      	ldr	r2, [pc, #100]	; (fe6c <spi_cmd_complete+0x8ec>)
    fe06:	4912      	ldr	r1, [pc, #72]	; (fe50 <spi_cmd_complete+0x8d0>)
    fe08:	4b12      	ldr	r3, [pc, #72]	; (fe54 <spi_cmd_complete+0x8d4>)
    fe0a:	0018      	movs	r0, r3
    fe0c:	4b12      	ldr	r3, [pc, #72]	; (fe58 <spi_cmd_complete+0x8d8>)
    fe0e:	4798      	blx	r3
    fe10:	4b17      	ldr	r3, [pc, #92]	; (fe70 <spi_cmd_complete+0x8f0>)
    fe12:	0018      	movs	r0, r3
    fe14:	4b10      	ldr	r3, [pc, #64]	; (fe58 <spi_cmd_complete+0x8d8>)
    fe16:	4798      	blx	r3
    fe18:	4b11      	ldr	r3, [pc, #68]	; (fe60 <spi_cmd_complete+0x8e0>)
    fe1a:	0018      	movs	r0, r3
    fe1c:	4b0e      	ldr	r3, [pc, #56]	; (fe58 <spi_cmd_complete+0x8d8>)
    fe1e:	4798      	blx	r3
							result = N_FAIL;
    fe20:	2300      	movs	r3, #0
    fe22:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
    fe24:	e00d      	b.n	fe42 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
    fe26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    fe28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    fe2a:	18d3      	adds	r3, r2, r3
    fe2c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
    fe2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    fe30:	683a      	ldr	r2, [r7, #0]
    fe32:	1ad3      	subs	r3, r2, r3
    fe34:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
    fe36:	683b      	ldr	r3, [r7, #0]
    fe38:	2b00      	cmp	r3, #0
    fe3a:	d000      	beq.n	fe3e <spi_cmd_complete+0x8be>
    fe3c:	e77e      	b.n	fd3c <spi_cmd_complete+0x7bc>
    fe3e:	e000      	b.n	fe42 <spi_cmd_complete+0x8c2>
						break;
    fe40:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
    fe42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
    fe44:	0018      	movs	r0, r3
    fe46:	46bd      	mov	sp, r7
    fe48:	b01f      	add	sp, #124	; 0x7c
    fe4a:	bd90      	pop	{r4, r7, pc}
    fe4c:	0000eeb9 	.word	0x0000eeb9
    fe50:	00024734 	.word	0x00024734
    fe54:	00024120 	.word	0x00024120
    fe58:	00009a6d 	.word	0x00009a6d
    fe5c:	00024384 	.word	0x00024384
    fe60:	00024160 	.word	0x00024160
    fe64:	00024318 	.word	0x00024318
    fe68:	20003d18 	.word	0x20003d18
    fe6c:	000002d2 	.word	0x000002d2
    fe70:	0002434c 	.word	0x0002434c

0000fe74 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    fe74:	b580      	push	{r7, lr}
    fe76:	b086      	sub	sp, #24
    fe78:	af00      	add	r7, sp, #0
    fe7a:	6078      	str	r0, [r7, #4]
    fe7c:	000a      	movs	r2, r1
    fe7e:	1cbb      	adds	r3, r7, #2
    fe80:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    fe82:	2313      	movs	r3, #19
    fe84:	18fb      	adds	r3, r7, r3
    fe86:	2201      	movs	r2, #1
    fe88:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    fe8a:	230c      	movs	r3, #12
    fe8c:	18fb      	adds	r3, r7, r3
    fe8e:	2200      	movs	r2, #0
    fe90:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    fe92:	2316      	movs	r3, #22
    fe94:	18fb      	adds	r3, r7, r3
    fe96:	2200      	movs	r2, #0
    fe98:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    fe9a:	1cbb      	adds	r3, r7, #2
    fe9c:	881a      	ldrh	r2, [r3, #0]
    fe9e:	2380      	movs	r3, #128	; 0x80
    fea0:	019b      	lsls	r3, r3, #6
    fea2:	429a      	cmp	r2, r3
    fea4:	d805      	bhi.n	feb2 <spi_data_write+0x3e>
			nbytes = sz;
    fea6:	2314      	movs	r3, #20
    fea8:	18fb      	adds	r3, r7, r3
    feaa:	1cba      	adds	r2, r7, #2
    feac:	8812      	ldrh	r2, [r2, #0]
    feae:	801a      	strh	r2, [r3, #0]
    feb0:	e004      	b.n	febc <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    feb2:	2314      	movs	r3, #20
    feb4:	18fb      	adds	r3, r7, r3
    feb6:	2280      	movs	r2, #128	; 0x80
    feb8:	0192      	lsls	r2, r2, #6
    feba:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    febc:	2311      	movs	r3, #17
    febe:	18fb      	adds	r3, r7, r3
    fec0:	22f0      	movs	r2, #240	; 0xf0
    fec2:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    fec4:	2316      	movs	r3, #22
    fec6:	18fb      	adds	r3, r7, r3
    fec8:	2200      	movs	r2, #0
    feca:	5e9b      	ldrsh	r3, [r3, r2]
    fecc:	2b00      	cmp	r3, #0
    fece:	d10f      	bne.n	fef0 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    fed0:	1cbb      	adds	r3, r7, #2
    fed2:	881a      	ldrh	r2, [r3, #0]
    fed4:	2380      	movs	r3, #128	; 0x80
    fed6:	019b      	lsls	r3, r3, #6
    fed8:	429a      	cmp	r2, r3
    feda:	d804      	bhi.n	fee6 <spi_data_write+0x72>
				order = 0x3;
    fedc:	2312      	movs	r3, #18
    fede:	18fb      	adds	r3, r7, r3
    fee0:	2203      	movs	r2, #3
    fee2:	701a      	strb	r2, [r3, #0]
    fee4:	e013      	b.n	ff0e <spi_data_write+0x9a>
			else
				order = 0x1;
    fee6:	2312      	movs	r3, #18
    fee8:	18fb      	adds	r3, r7, r3
    feea:	2201      	movs	r2, #1
    feec:	701a      	strb	r2, [r3, #0]
    feee:	e00e      	b.n	ff0e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    fef0:	1cbb      	adds	r3, r7, #2
    fef2:	881a      	ldrh	r2, [r3, #0]
    fef4:	2380      	movs	r3, #128	; 0x80
    fef6:	019b      	lsls	r3, r3, #6
    fef8:	429a      	cmp	r2, r3
    fefa:	d804      	bhi.n	ff06 <spi_data_write+0x92>
				order = 0x3;
    fefc:	2312      	movs	r3, #18
    fefe:	18fb      	adds	r3, r7, r3
    ff00:	2203      	movs	r2, #3
    ff02:	701a      	strb	r2, [r3, #0]
    ff04:	e003      	b.n	ff0e <spi_data_write+0x9a>
			else
				order = 0x2;
    ff06:	2312      	movs	r3, #18
    ff08:	18fb      	adds	r3, r7, r3
    ff0a:	2202      	movs	r2, #2
    ff0c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    ff0e:	2311      	movs	r3, #17
    ff10:	18fb      	adds	r3, r7, r3
    ff12:	781a      	ldrb	r2, [r3, #0]
    ff14:	2312      	movs	r3, #18
    ff16:	18fb      	adds	r3, r7, r3
    ff18:	781b      	ldrb	r3, [r3, #0]
    ff1a:	4313      	orrs	r3, r2
    ff1c:	b2da      	uxtb	r2, r3
    ff1e:	2311      	movs	r3, #17
    ff20:	18fb      	adds	r3, r7, r3
    ff22:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    ff24:	2311      	movs	r3, #17
    ff26:	18fb      	adds	r3, r7, r3
    ff28:	2101      	movs	r1, #1
    ff2a:	0018      	movs	r0, r3
    ff2c:	4b3c      	ldr	r3, [pc, #240]	; (10020 <spi_data_write+0x1ac>)
    ff2e:	4798      	blx	r3
    ff30:	1e03      	subs	r3, r0, #0
    ff32:	d012      	beq.n	ff5a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    ff34:	4a3b      	ldr	r2, [pc, #236]	; (10024 <spi_data_write+0x1b0>)
    ff36:	493c      	ldr	r1, [pc, #240]	; (10028 <spi_data_write+0x1b4>)
    ff38:	4b3c      	ldr	r3, [pc, #240]	; (1002c <spi_data_write+0x1b8>)
    ff3a:	0018      	movs	r0, r3
    ff3c:	4b3c      	ldr	r3, [pc, #240]	; (10030 <spi_data_write+0x1bc>)
    ff3e:	4798      	blx	r3
    ff40:	4b3c      	ldr	r3, [pc, #240]	; (10034 <spi_data_write+0x1c0>)
    ff42:	0018      	movs	r0, r3
    ff44:	4b3a      	ldr	r3, [pc, #232]	; (10030 <spi_data_write+0x1bc>)
    ff46:	4798      	blx	r3
    ff48:	4b3b      	ldr	r3, [pc, #236]	; (10038 <spi_data_write+0x1c4>)
    ff4a:	0018      	movs	r0, r3
    ff4c:	4b38      	ldr	r3, [pc, #224]	; (10030 <spi_data_write+0x1bc>)
    ff4e:	4798      	blx	r3
			result = N_FAIL;
    ff50:	2313      	movs	r3, #19
    ff52:	18fb      	adds	r3, r7, r3
    ff54:	2200      	movs	r2, #0
    ff56:	701a      	strb	r2, [r3, #0]
			break;
    ff58:	e059      	b.n	1000e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    ff5a:	2316      	movs	r3, #22
    ff5c:	18fb      	adds	r3, r7, r3
    ff5e:	2200      	movs	r2, #0
    ff60:	5e9b      	ldrsh	r3, [r3, r2]
    ff62:	687a      	ldr	r2, [r7, #4]
    ff64:	18d2      	adds	r2, r2, r3
    ff66:	2314      	movs	r3, #20
    ff68:	18fb      	adds	r3, r7, r3
    ff6a:	881b      	ldrh	r3, [r3, #0]
    ff6c:	0019      	movs	r1, r3
    ff6e:	0010      	movs	r0, r2
    ff70:	4b2b      	ldr	r3, [pc, #172]	; (10020 <spi_data_write+0x1ac>)
    ff72:	4798      	blx	r3
    ff74:	1e03      	subs	r3, r0, #0
    ff76:	d012      	beq.n	ff9e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    ff78:	4a30      	ldr	r2, [pc, #192]	; (1003c <spi_data_write+0x1c8>)
    ff7a:	492b      	ldr	r1, [pc, #172]	; (10028 <spi_data_write+0x1b4>)
    ff7c:	4b2b      	ldr	r3, [pc, #172]	; (1002c <spi_data_write+0x1b8>)
    ff7e:	0018      	movs	r0, r3
    ff80:	4b2b      	ldr	r3, [pc, #172]	; (10030 <spi_data_write+0x1bc>)
    ff82:	4798      	blx	r3
    ff84:	4b2e      	ldr	r3, [pc, #184]	; (10040 <spi_data_write+0x1cc>)
    ff86:	0018      	movs	r0, r3
    ff88:	4b29      	ldr	r3, [pc, #164]	; (10030 <spi_data_write+0x1bc>)
    ff8a:	4798      	blx	r3
    ff8c:	4b2a      	ldr	r3, [pc, #168]	; (10038 <spi_data_write+0x1c4>)
    ff8e:	0018      	movs	r0, r3
    ff90:	4b27      	ldr	r3, [pc, #156]	; (10030 <spi_data_write+0x1bc>)
    ff92:	4798      	blx	r3
			result = N_FAIL;
    ff94:	2313      	movs	r3, #19
    ff96:	18fb      	adds	r3, r7, r3
    ff98:	2200      	movs	r2, #0
    ff9a:	701a      	strb	r2, [r3, #0]
			break;
    ff9c:	e037      	b.n	1000e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    ff9e:	4b29      	ldr	r3, [pc, #164]	; (10044 <spi_data_write+0x1d0>)
    ffa0:	781b      	ldrb	r3, [r3, #0]
    ffa2:	2b00      	cmp	r3, #0
    ffa4:	d11b      	bne.n	ffde <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    ffa6:	230c      	movs	r3, #12
    ffa8:	18fb      	adds	r3, r7, r3
    ffaa:	2102      	movs	r1, #2
    ffac:	0018      	movs	r0, r3
    ffae:	4b1c      	ldr	r3, [pc, #112]	; (10020 <spi_data_write+0x1ac>)
    ffb0:	4798      	blx	r3
    ffb2:	1e03      	subs	r3, r0, #0
    ffb4:	d013      	beq.n	ffde <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    ffb6:	23d7      	movs	r3, #215	; 0xd7
    ffb8:	009a      	lsls	r2, r3, #2
    ffba:	491b      	ldr	r1, [pc, #108]	; (10028 <spi_data_write+0x1b4>)
    ffbc:	4b1b      	ldr	r3, [pc, #108]	; (1002c <spi_data_write+0x1b8>)
    ffbe:	0018      	movs	r0, r3
    ffc0:	4b1b      	ldr	r3, [pc, #108]	; (10030 <spi_data_write+0x1bc>)
    ffc2:	4798      	blx	r3
    ffc4:	4b20      	ldr	r3, [pc, #128]	; (10048 <spi_data_write+0x1d4>)
    ffc6:	0018      	movs	r0, r3
    ffc8:	4b19      	ldr	r3, [pc, #100]	; (10030 <spi_data_write+0x1bc>)
    ffca:	4798      	blx	r3
    ffcc:	4b1a      	ldr	r3, [pc, #104]	; (10038 <spi_data_write+0x1c4>)
    ffce:	0018      	movs	r0, r3
    ffd0:	4b17      	ldr	r3, [pc, #92]	; (10030 <spi_data_write+0x1bc>)
    ffd2:	4798      	blx	r3
				result = N_FAIL;
    ffd4:	2313      	movs	r3, #19
    ffd6:	18fb      	adds	r3, r7, r3
    ffd8:	2200      	movs	r2, #0
    ffda:	701a      	strb	r2, [r3, #0]
				break;
    ffdc:	e017      	b.n	1000e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
    ffde:	2316      	movs	r3, #22
    ffe0:	18fb      	adds	r3, r7, r3
    ffe2:	881a      	ldrh	r2, [r3, #0]
    ffe4:	2314      	movs	r3, #20
    ffe6:	18fb      	adds	r3, r7, r3
    ffe8:	881b      	ldrh	r3, [r3, #0]
    ffea:	18d3      	adds	r3, r2, r3
    ffec:	b29a      	uxth	r2, r3
    ffee:	2316      	movs	r3, #22
    fff0:	18fb      	adds	r3, r7, r3
    fff2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    fff4:	1cbb      	adds	r3, r7, #2
    fff6:	1cb9      	adds	r1, r7, #2
    fff8:	2214      	movs	r2, #20
    fffa:	18ba      	adds	r2, r7, r2
    fffc:	8809      	ldrh	r1, [r1, #0]
    fffe:	8812      	ldrh	r2, [r2, #0]
   10000:	1a8a      	subs	r2, r1, r2
   10002:	801a      	strh	r2, [r3, #0]
	} while (sz);
   10004:	1cbb      	adds	r3, r7, #2
   10006:	881b      	ldrh	r3, [r3, #0]
   10008:	2b00      	cmp	r3, #0
   1000a:	d000      	beq.n	1000e <spi_data_write+0x19a>
   1000c:	e745      	b.n	fe9a <spi_data_write+0x26>


	return result;
   1000e:	2313      	movs	r3, #19
   10010:	18fb      	adds	r3, r7, r3
   10012:	781b      	ldrb	r3, [r3, #0]
   10014:	b25b      	sxtb	r3, r3
}
   10016:	0018      	movs	r0, r3
   10018:	46bd      	mov	sp, r7
   1001a:	b006      	add	sp, #24
   1001c:	bd80      	pop	{r7, pc}
   1001e:	46c0      	nop			; (mov r8, r8)
   10020:	0000eefd 	.word	0x0000eefd
   10024:	00000349 	.word	0x00000349
   10028:	00024748 	.word	0x00024748
   1002c:	00024120 	.word	0x00024120
   10030:	00009a6d 	.word	0x00009a6d
   10034:	000243e8 	.word	0x000243e8
   10038:	00024160 	.word	0x00024160
   1003c:	00000352 	.word	0x00000352
   10040:	00024420 	.word	0x00024420
   10044:	20003d18 	.word	0x20003d18
   10048:	00024454 	.word	0x00024454

0001004c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   1004c:	b590      	push	{r4, r7, lr}
   1004e:	b087      	sub	sp, #28
   10050:	af02      	add	r7, sp, #8
   10052:	6078      	str	r0, [r7, #4]
   10054:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   10056:	230f      	movs	r3, #15
   10058:	18fb      	adds	r3, r7, r3
   1005a:	220a      	movs	r2, #10
   1005c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   1005e:	230c      	movs	r3, #12
   10060:	18fb      	adds	r3, r7, r3
   10062:	2201      	movs	r2, #1
   10064:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   10066:	230e      	movs	r3, #14
   10068:	18fb      	adds	r3, r7, r3
   1006a:	22c9      	movs	r2, #201	; 0xc9
   1006c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   1006e:	230d      	movs	r3, #13
   10070:	18fb      	adds	r3, r7, r3
   10072:	2200      	movs	r2, #0
   10074:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   10076:	687b      	ldr	r3, [r7, #4]
   10078:	2b30      	cmp	r3, #48	; 0x30
   1007a:	d808      	bhi.n	1008e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   1007c:	230e      	movs	r3, #14
   1007e:	18fb      	adds	r3, r7, r3
   10080:	22c3      	movs	r2, #195	; 0xc3
   10082:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   10084:	230d      	movs	r3, #13
   10086:	18fb      	adds	r3, r7, r3
   10088:	2201      	movs	r2, #1
   1008a:	701a      	strb	r2, [r3, #0]
   1008c:	e007      	b.n	1009e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   1008e:	230e      	movs	r3, #14
   10090:	18fb      	adds	r3, r7, r3
   10092:	22c9      	movs	r2, #201	; 0xc9
   10094:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   10096:	230d      	movs	r3, #13
   10098:	18fb      	adds	r3, r7, r3
   1009a:	2200      	movs	r2, #0
   1009c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   1009e:	003a      	movs	r2, r7
   100a0:	6879      	ldr	r1, [r7, #4]
   100a2:	230e      	movs	r3, #14
   100a4:	18fb      	adds	r3, r7, r3
   100a6:	7818      	ldrb	r0, [r3, #0]
   100a8:	230d      	movs	r3, #13
   100aa:	18fb      	adds	r3, r7, r3
   100ac:	781b      	ldrb	r3, [r3, #0]
   100ae:	9300      	str	r3, [sp, #0]
   100b0:	2304      	movs	r3, #4
   100b2:	4c2e      	ldr	r4, [pc, #184]	; (1016c <spi_write_reg+0x120>)
   100b4:	47a0      	blx	r4
   100b6:	0002      	movs	r2, r0
   100b8:	230c      	movs	r3, #12
   100ba:	18fb      	adds	r3, r7, r3
   100bc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   100be:	230c      	movs	r3, #12
   100c0:	18fb      	adds	r3, r7, r3
   100c2:	781b      	ldrb	r3, [r3, #0]
   100c4:	b25b      	sxtb	r3, r3
   100c6:	2b01      	cmp	r3, #1
   100c8:	d010      	beq.n	100ec <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   100ca:	4a29      	ldr	r2, [pc, #164]	; (10170 <spi_write_reg+0x124>)
   100cc:	4929      	ldr	r1, [pc, #164]	; (10174 <spi_write_reg+0x128>)
   100ce:	4b2a      	ldr	r3, [pc, #168]	; (10178 <spi_write_reg+0x12c>)
   100d0:	0018      	movs	r0, r3
   100d2:	4b2a      	ldr	r3, [pc, #168]	; (1017c <spi_write_reg+0x130>)
   100d4:	4798      	blx	r3
   100d6:	687a      	ldr	r2, [r7, #4]
   100d8:	4b29      	ldr	r3, [pc, #164]	; (10180 <spi_write_reg+0x134>)
   100da:	0011      	movs	r1, r2
   100dc:	0018      	movs	r0, r3
   100de:	4b27      	ldr	r3, [pc, #156]	; (1017c <spi_write_reg+0x130>)
   100e0:	4798      	blx	r3
   100e2:	4b28      	ldr	r3, [pc, #160]	; (10184 <spi_write_reg+0x138>)
   100e4:	0018      	movs	r0, r3
   100e6:	4b25      	ldr	r3, [pc, #148]	; (1017c <spi_write_reg+0x130>)
   100e8:	4798      	blx	r3
		goto _FAIL_;
   100ea:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   100ec:	230c      	movs	r3, #12
   100ee:	18fb      	adds	r3, r7, r3
   100f0:	781b      	ldrb	r3, [r3, #0]
   100f2:	b25b      	sxtb	r3, r3
   100f4:	2b01      	cmp	r3, #1
   100f6:	d030      	beq.n	1015a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   100f8:	2001      	movs	r0, #1
   100fa:	4b23      	ldr	r3, [pc, #140]	; (10188 <spi_write_reg+0x13c>)
   100fc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   100fe:	2300      	movs	r3, #0
   10100:	9300      	str	r3, [sp, #0]
   10102:	2300      	movs	r3, #0
   10104:	2200      	movs	r2, #0
   10106:	2100      	movs	r1, #0
   10108:	20cf      	movs	r0, #207	; 0xcf
   1010a:	4c20      	ldr	r4, [pc, #128]	; (1018c <spi_write_reg+0x140>)
   1010c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   1010e:	20cf      	movs	r0, #207	; 0xcf
   10110:	4b1f      	ldr	r3, [pc, #124]	; (10190 <spi_write_reg+0x144>)
   10112:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   10114:	23ea      	movs	r3, #234	; 0xea
   10116:	009a      	lsls	r2, r3, #2
   10118:	4916      	ldr	r1, [pc, #88]	; (10174 <spi_write_reg+0x128>)
   1011a:	4b17      	ldr	r3, [pc, #92]	; (10178 <spi_write_reg+0x12c>)
   1011c:	0018      	movs	r0, r3
   1011e:	4b17      	ldr	r3, [pc, #92]	; (1017c <spi_write_reg+0x130>)
   10120:	4798      	blx	r3
   10122:	230f      	movs	r3, #15
   10124:	18fb      	adds	r3, r7, r3
   10126:	7819      	ldrb	r1, [r3, #0]
   10128:	683b      	ldr	r3, [r7, #0]
   1012a:	687a      	ldr	r2, [r7, #4]
   1012c:	4819      	ldr	r0, [pc, #100]	; (10194 <spi_write_reg+0x148>)
   1012e:	4c13      	ldr	r4, [pc, #76]	; (1017c <spi_write_reg+0x130>)
   10130:	47a0      	blx	r4
   10132:	4b14      	ldr	r3, [pc, #80]	; (10184 <spi_write_reg+0x138>)
   10134:	0018      	movs	r0, r3
   10136:	4b11      	ldr	r3, [pc, #68]	; (1017c <spi_write_reg+0x130>)
   10138:	4798      	blx	r3
		nm_bsp_sleep(1);
   1013a:	2001      	movs	r0, #1
   1013c:	4b12      	ldr	r3, [pc, #72]	; (10188 <spi_write_reg+0x13c>)
   1013e:	4798      	blx	r3
		retry--;
   10140:	230f      	movs	r3, #15
   10142:	18fb      	adds	r3, r7, r3
   10144:	781a      	ldrb	r2, [r3, #0]
   10146:	230f      	movs	r3, #15
   10148:	18fb      	adds	r3, r7, r3
   1014a:	3a01      	subs	r2, #1
   1014c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   1014e:	230f      	movs	r3, #15
   10150:	18fb      	adds	r3, r7, r3
   10152:	781b      	ldrb	r3, [r3, #0]
   10154:	2b00      	cmp	r3, #0
   10156:	d000      	beq.n	1015a <spi_write_reg+0x10e>
   10158:	e78d      	b.n	10076 <spi_write_reg+0x2a>
	}

	return result;
   1015a:	230c      	movs	r3, #12
   1015c:	18fb      	adds	r3, r7, r3
   1015e:	781b      	ldrb	r3, [r3, #0]
   10160:	b25b      	sxtb	r3, r3
}
   10162:	0018      	movs	r0, r3
   10164:	46bd      	mov	sp, r7
   10166:	b005      	add	sp, #20
   10168:	bd90      	pop	{r4, r7, pc}
   1016a:	46c0      	nop			; (mov r8, r8)
   1016c:	0000f581 	.word	0x0000f581
   10170:	0000039d 	.word	0x0000039d
   10174:	00024758 	.word	0x00024758
   10178:	00024120 	.word	0x00024120
   1017c:	00009a6d 	.word	0x00009a6d
   10180:	0002448c 	.word	0x0002448c
   10184:	00024160 	.word	0x00024160
   10188:	0000bec1 	.word	0x0000bec1
   1018c:	0000f005 	.word	0x0000f005
   10190:	0000f445 	.word	0x0000f445
   10194:	000244b8 	.word	0x000244b8

00010198 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   10198:	b590      	push	{r4, r7, lr}
   1019a:	b089      	sub	sp, #36	; 0x24
   1019c:	af02      	add	r7, sp, #8
   1019e:	60f8      	str	r0, [r7, #12]
   101a0:	60b9      	str	r1, [r7, #8]
   101a2:	1dbb      	adds	r3, r7, #6
   101a4:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   101a6:	2316      	movs	r3, #22
   101a8:	18fb      	adds	r3, r7, r3
   101aa:	220a      	movs	r2, #10
   101ac:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   101ae:	2315      	movs	r3, #21
   101b0:	18fb      	adds	r3, r7, r3
   101b2:	22c7      	movs	r2, #199	; 0xc7
   101b4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   101b6:	1dbb      	adds	r3, r7, #6
   101b8:	881a      	ldrh	r2, [r3, #0]
   101ba:	68f9      	ldr	r1, [r7, #12]
   101bc:	2315      	movs	r3, #21
   101be:	18fb      	adds	r3, r7, r3
   101c0:	7818      	ldrb	r0, [r3, #0]
   101c2:	2300      	movs	r3, #0
   101c4:	9300      	str	r3, [sp, #0]
   101c6:	0013      	movs	r3, r2
   101c8:	2200      	movs	r2, #0
   101ca:	4c4d      	ldr	r4, [pc, #308]	; (10300 <nm_spi_write+0x168>)
   101cc:	47a0      	blx	r4
   101ce:	0002      	movs	r2, r0
   101d0:	2317      	movs	r3, #23
   101d2:	18fb      	adds	r3, r7, r3
   101d4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   101d6:	2317      	movs	r3, #23
   101d8:	18fb      	adds	r3, r7, r3
   101da:	781b      	ldrb	r3, [r3, #0]
   101dc:	b25b      	sxtb	r3, r3
   101de:	2b01      	cmp	r3, #1
   101e0:	d010      	beq.n	10204 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   101e2:	4a48      	ldr	r2, [pc, #288]	; (10304 <nm_spi_write+0x16c>)
   101e4:	4948      	ldr	r1, [pc, #288]	; (10308 <nm_spi_write+0x170>)
   101e6:	4b49      	ldr	r3, [pc, #292]	; (1030c <nm_spi_write+0x174>)
   101e8:	0018      	movs	r0, r3
   101ea:	4b49      	ldr	r3, [pc, #292]	; (10310 <nm_spi_write+0x178>)
   101ec:	4798      	blx	r3
   101ee:	68fa      	ldr	r2, [r7, #12]
   101f0:	4b48      	ldr	r3, [pc, #288]	; (10314 <nm_spi_write+0x17c>)
   101f2:	0011      	movs	r1, r2
   101f4:	0018      	movs	r0, r3
   101f6:	4b46      	ldr	r3, [pc, #280]	; (10310 <nm_spi_write+0x178>)
   101f8:	4798      	blx	r3
   101fa:	4b47      	ldr	r3, [pc, #284]	; (10318 <nm_spi_write+0x180>)
   101fc:	0018      	movs	r0, r3
   101fe:	4b44      	ldr	r3, [pc, #272]	; (10310 <nm_spi_write+0x178>)
   10200:	4798      	blx	r3
		goto _FAIL_;
   10202:	e03e      	b.n	10282 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   10204:	2317      	movs	r3, #23
   10206:	18fc      	adds	r4, r7, r3
   10208:	1dbb      	adds	r3, r7, #6
   1020a:	881a      	ldrh	r2, [r3, #0]
   1020c:	68bb      	ldr	r3, [r7, #8]
   1020e:	0011      	movs	r1, r2
   10210:	0018      	movs	r0, r3
   10212:	4b42      	ldr	r3, [pc, #264]	; (1031c <nm_spi_write+0x184>)
   10214:	4798      	blx	r3
   10216:	0003      	movs	r3, r0
   10218:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   1021a:	2317      	movs	r3, #23
   1021c:	18fb      	adds	r3, r7, r3
   1021e:	781b      	ldrb	r3, [r3, #0]
   10220:	b25b      	sxtb	r3, r3
   10222:	2b01      	cmp	r3, #1
   10224:	d00e      	beq.n	10244 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   10226:	4a3e      	ldr	r2, [pc, #248]	; (10320 <nm_spi_write+0x188>)
   10228:	4937      	ldr	r1, [pc, #220]	; (10308 <nm_spi_write+0x170>)
   1022a:	4b38      	ldr	r3, [pc, #224]	; (1030c <nm_spi_write+0x174>)
   1022c:	0018      	movs	r0, r3
   1022e:	4b38      	ldr	r3, [pc, #224]	; (10310 <nm_spi_write+0x178>)
   10230:	4798      	blx	r3
   10232:	4b3c      	ldr	r3, [pc, #240]	; (10324 <nm_spi_write+0x18c>)
   10234:	0018      	movs	r0, r3
   10236:	4b36      	ldr	r3, [pc, #216]	; (10310 <nm_spi_write+0x178>)
   10238:	4798      	blx	r3
   1023a:	4b37      	ldr	r3, [pc, #220]	; (10318 <nm_spi_write+0x180>)
   1023c:	0018      	movs	r0, r3
   1023e:	4b34      	ldr	r3, [pc, #208]	; (10310 <nm_spi_write+0x178>)
   10240:	4798      	blx	r3
		goto _FAIL_;
   10242:	e01e      	b.n	10282 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   10244:	2317      	movs	r3, #23
   10246:	18fc      	adds	r4, r7, r3
   10248:	2315      	movs	r3, #21
   1024a:	18fb      	adds	r3, r7, r3
   1024c:	781b      	ldrb	r3, [r3, #0]
   1024e:	0018      	movs	r0, r3
   10250:	4b35      	ldr	r3, [pc, #212]	; (10328 <nm_spi_write+0x190>)
   10252:	4798      	blx	r3
   10254:	0003      	movs	r3, r0
   10256:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   10258:	2317      	movs	r3, #23
   1025a:	18fb      	adds	r3, r7, r3
   1025c:	781b      	ldrb	r3, [r3, #0]
   1025e:	b25b      	sxtb	r3, r3
   10260:	2b01      	cmp	r3, #1
   10262:	d00e      	beq.n	10282 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   10264:	4a31      	ldr	r2, [pc, #196]	; (1032c <nm_spi_write+0x194>)
   10266:	4928      	ldr	r1, [pc, #160]	; (10308 <nm_spi_write+0x170>)
   10268:	4b28      	ldr	r3, [pc, #160]	; (1030c <nm_spi_write+0x174>)
   1026a:	0018      	movs	r0, r3
   1026c:	4b28      	ldr	r3, [pc, #160]	; (10310 <nm_spi_write+0x178>)
   1026e:	4798      	blx	r3
   10270:	4b2c      	ldr	r3, [pc, #176]	; (10324 <nm_spi_write+0x18c>)
   10272:	0018      	movs	r0, r3
   10274:	4b26      	ldr	r3, [pc, #152]	; (10310 <nm_spi_write+0x178>)
   10276:	4798      	blx	r3
   10278:	4b27      	ldr	r3, [pc, #156]	; (10318 <nm_spi_write+0x180>)
   1027a:	0018      	movs	r0, r3
   1027c:	4b24      	ldr	r3, [pc, #144]	; (10310 <nm_spi_write+0x178>)
   1027e:	4798      	blx	r3
		goto _FAIL_;
   10280:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   10282:	2317      	movs	r3, #23
   10284:	18fb      	adds	r3, r7, r3
   10286:	781b      	ldrb	r3, [r3, #0]
   10288:	b25b      	sxtb	r3, r3
   1028a:	2b01      	cmp	r3, #1
   1028c:	d030      	beq.n	102f0 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   1028e:	2001      	movs	r0, #1
   10290:	4b27      	ldr	r3, [pc, #156]	; (10330 <nm_spi_write+0x198>)
   10292:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10294:	2300      	movs	r3, #0
   10296:	9300      	str	r3, [sp, #0]
   10298:	2300      	movs	r3, #0
   1029a:	2200      	movs	r2, #0
   1029c:	2100      	movs	r1, #0
   1029e:	20cf      	movs	r0, #207	; 0xcf
   102a0:	4c24      	ldr	r4, [pc, #144]	; (10334 <nm_spi_write+0x19c>)
   102a2:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   102a4:	20cf      	movs	r0, #207	; 0xcf
   102a6:	4b24      	ldr	r3, [pc, #144]	; (10338 <nm_spi_write+0x1a0>)
   102a8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   102aa:	4a24      	ldr	r2, [pc, #144]	; (1033c <nm_spi_write+0x1a4>)
   102ac:	4916      	ldr	r1, [pc, #88]	; (10308 <nm_spi_write+0x170>)
   102ae:	4b17      	ldr	r3, [pc, #92]	; (1030c <nm_spi_write+0x174>)
   102b0:	0018      	movs	r0, r3
   102b2:	4b17      	ldr	r3, [pc, #92]	; (10310 <nm_spi_write+0x178>)
   102b4:	4798      	blx	r3
   102b6:	2316      	movs	r3, #22
   102b8:	18fb      	adds	r3, r7, r3
   102ba:	7819      	ldrb	r1, [r3, #0]
   102bc:	1dbb      	adds	r3, r7, #6
   102be:	881b      	ldrh	r3, [r3, #0]
   102c0:	68fa      	ldr	r2, [r7, #12]
   102c2:	481f      	ldr	r0, [pc, #124]	; (10340 <nm_spi_write+0x1a8>)
   102c4:	4c12      	ldr	r4, [pc, #72]	; (10310 <nm_spi_write+0x178>)
   102c6:	47a0      	blx	r4
   102c8:	4b13      	ldr	r3, [pc, #76]	; (10318 <nm_spi_write+0x180>)
   102ca:	0018      	movs	r0, r3
   102cc:	4b10      	ldr	r3, [pc, #64]	; (10310 <nm_spi_write+0x178>)
   102ce:	4798      	blx	r3
		nm_bsp_sleep(1);
   102d0:	2001      	movs	r0, #1
   102d2:	4b17      	ldr	r3, [pc, #92]	; (10330 <nm_spi_write+0x198>)
   102d4:	4798      	blx	r3
		retry--;
   102d6:	2316      	movs	r3, #22
   102d8:	18fb      	adds	r3, r7, r3
   102da:	781a      	ldrb	r2, [r3, #0]
   102dc:	2316      	movs	r3, #22
   102de:	18fb      	adds	r3, r7, r3
   102e0:	3a01      	subs	r2, #1
   102e2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   102e4:	2316      	movs	r3, #22
   102e6:	18fb      	adds	r3, r7, r3
   102e8:	781b      	ldrb	r3, [r3, #0]
   102ea:	2b00      	cmp	r3, #0
   102ec:	d000      	beq.n	102f0 <nm_spi_write+0x158>
   102ee:	e762      	b.n	101b6 <nm_spi_write+0x1e>
	}


	return result;
   102f0:	2317      	movs	r3, #23
   102f2:	18fb      	adds	r3, r7, r3
   102f4:	781b      	ldrb	r3, [r3, #0]
   102f6:	b25b      	sxtb	r3, r3
}
   102f8:	0018      	movs	r0, r3
   102fa:	46bd      	mov	sp, r7
   102fc:	b007      	add	sp, #28
   102fe:	bd90      	pop	{r4, r7, pc}
   10300:	0000f581 	.word	0x0000f581
   10304:	000003cf 	.word	0x000003cf
   10308:	00024768 	.word	0x00024768
   1030c:	00024120 	.word	0x00024120
   10310:	00009a6d 	.word	0x00009a6d
   10314:	000244d4 	.word	0x000244d4
   10318:	00024160 	.word	0x00024160
   1031c:	0000fe75 	.word	0x0000fe75
   10320:	000003d9 	.word	0x000003d9
   10324:	00024504 	.word	0x00024504
   10328:	0000f345 	.word	0x0000f345
   1032c:	000003e1 	.word	0x000003e1
   10330:	0000bec1 	.word	0x0000bec1
   10334:	0000f005 	.word	0x0000f005
   10338:	0000f445 	.word	0x0000f445
   1033c:	000003eb 	.word	0x000003eb
   10340:	0002452c 	.word	0x0002452c

00010344 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   10344:	b590      	push	{r4, r7, lr}
   10346:	b087      	sub	sp, #28
   10348:	af02      	add	r7, sp, #8
   1034a:	6078      	str	r0, [r7, #4]
   1034c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   1034e:	230f      	movs	r3, #15
   10350:	18fb      	adds	r3, r7, r3
   10352:	220a      	movs	r2, #10
   10354:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   10356:	230c      	movs	r3, #12
   10358:	18fb      	adds	r3, r7, r3
   1035a:	2201      	movs	r2, #1
   1035c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   1035e:	230e      	movs	r3, #14
   10360:	18fb      	adds	r3, r7, r3
   10362:	22ca      	movs	r2, #202	; 0xca
   10364:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   10366:	230d      	movs	r3, #13
   10368:	18fb      	adds	r3, r7, r3
   1036a:	2200      	movs	r2, #0
   1036c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   1036e:	687b      	ldr	r3, [r7, #4]
   10370:	2bff      	cmp	r3, #255	; 0xff
   10372:	d808      	bhi.n	10386 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   10374:	230e      	movs	r3, #14
   10376:	18fb      	adds	r3, r7, r3
   10378:	22c4      	movs	r2, #196	; 0xc4
   1037a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   1037c:	230d      	movs	r3, #13
   1037e:	18fb      	adds	r3, r7, r3
   10380:	2201      	movs	r2, #1
   10382:	701a      	strb	r2, [r3, #0]
   10384:	e007      	b.n	10396 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   10386:	230e      	movs	r3, #14
   10388:	18fb      	adds	r3, r7, r3
   1038a:	22ca      	movs	r2, #202	; 0xca
   1038c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   1038e:	230d      	movs	r3, #13
   10390:	18fb      	adds	r3, r7, r3
   10392:	2200      	movs	r2, #0
   10394:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   10396:	2308      	movs	r3, #8
   10398:	18fa      	adds	r2, r7, r3
   1039a:	6879      	ldr	r1, [r7, #4]
   1039c:	230e      	movs	r3, #14
   1039e:	18fb      	adds	r3, r7, r3
   103a0:	7818      	ldrb	r0, [r3, #0]
   103a2:	230d      	movs	r3, #13
   103a4:	18fb      	adds	r3, r7, r3
   103a6:	781b      	ldrb	r3, [r3, #0]
   103a8:	9300      	str	r3, [sp, #0]
   103aa:	2304      	movs	r3, #4
   103ac:	4c37      	ldr	r4, [pc, #220]	; (1048c <spi_read_reg+0x148>)
   103ae:	47a0      	blx	r4
   103b0:	0002      	movs	r2, r0
   103b2:	230c      	movs	r3, #12
   103b4:	18fb      	adds	r3, r7, r3
   103b6:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   103b8:	230c      	movs	r3, #12
   103ba:	18fb      	adds	r3, r7, r3
   103bc:	781b      	ldrb	r3, [r3, #0]
   103be:	b25b      	sxtb	r3, r3
   103c0:	2b01      	cmp	r3, #1
   103c2:	d010      	beq.n	103e6 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   103c4:	4a32      	ldr	r2, [pc, #200]	; (10490 <spi_read_reg+0x14c>)
   103c6:	4933      	ldr	r1, [pc, #204]	; (10494 <spi_read_reg+0x150>)
   103c8:	4b33      	ldr	r3, [pc, #204]	; (10498 <spi_read_reg+0x154>)
   103ca:	0018      	movs	r0, r3
   103cc:	4b33      	ldr	r3, [pc, #204]	; (1049c <spi_read_reg+0x158>)
   103ce:	4798      	blx	r3
   103d0:	687a      	ldr	r2, [r7, #4]
   103d2:	4b33      	ldr	r3, [pc, #204]	; (104a0 <spi_read_reg+0x15c>)
   103d4:	0011      	movs	r1, r2
   103d6:	0018      	movs	r0, r3
   103d8:	4b30      	ldr	r3, [pc, #192]	; (1049c <spi_read_reg+0x158>)
   103da:	4798      	blx	r3
   103dc:	4b31      	ldr	r3, [pc, #196]	; (104a4 <spi_read_reg+0x160>)
   103de:	0018      	movs	r0, r3
   103e0:	4b2e      	ldr	r3, [pc, #184]	; (1049c <spi_read_reg+0x158>)
   103e2:	4798      	blx	r3
		goto _FAIL_;
   103e4:	e014      	b.n	10410 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   103e6:	2308      	movs	r3, #8
   103e8:	18fb      	adds	r3, r7, r3
   103ea:	781b      	ldrb	r3, [r3, #0]
   103ec:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   103ee:	2308      	movs	r3, #8
   103f0:	18fb      	adds	r3, r7, r3
   103f2:	785b      	ldrb	r3, [r3, #1]
   103f4:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   103f6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   103f8:	2308      	movs	r3, #8
   103fa:	18fb      	adds	r3, r7, r3
   103fc:	789b      	ldrb	r3, [r3, #2]
   103fe:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   10400:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   10402:	2308      	movs	r3, #8
   10404:	18fb      	adds	r3, r7, r3
   10406:	78db      	ldrb	r3, [r3, #3]
   10408:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   1040a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   1040c:	683b      	ldr	r3, [r7, #0]
   1040e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   10410:	230c      	movs	r3, #12
   10412:	18fb      	adds	r3, r7, r3
   10414:	781b      	ldrb	r3, [r3, #0]
   10416:	b25b      	sxtb	r3, r3
   10418:	2b01      	cmp	r3, #1
   1041a:	d02f      	beq.n	1047c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   1041c:	2001      	movs	r0, #1
   1041e:	4b22      	ldr	r3, [pc, #136]	; (104a8 <spi_read_reg+0x164>)
   10420:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10422:	2300      	movs	r3, #0
   10424:	9300      	str	r3, [sp, #0]
   10426:	2300      	movs	r3, #0
   10428:	2200      	movs	r2, #0
   1042a:	2100      	movs	r1, #0
   1042c:	20cf      	movs	r0, #207	; 0xcf
   1042e:	4c1f      	ldr	r4, [pc, #124]	; (104ac <spi_read_reg+0x168>)
   10430:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   10432:	20cf      	movs	r0, #207	; 0xcf
   10434:	4b1e      	ldr	r3, [pc, #120]	; (104b0 <spi_read_reg+0x16c>)
   10436:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   10438:	4a1e      	ldr	r2, [pc, #120]	; (104b4 <spi_read_reg+0x170>)
   1043a:	4916      	ldr	r1, [pc, #88]	; (10494 <spi_read_reg+0x150>)
   1043c:	4b16      	ldr	r3, [pc, #88]	; (10498 <spi_read_reg+0x154>)
   1043e:	0018      	movs	r0, r3
   10440:	4b16      	ldr	r3, [pc, #88]	; (1049c <spi_read_reg+0x158>)
   10442:	4798      	blx	r3
   10444:	230f      	movs	r3, #15
   10446:	18fb      	adds	r3, r7, r3
   10448:	7819      	ldrb	r1, [r3, #0]
   1044a:	687a      	ldr	r2, [r7, #4]
   1044c:	4b1a      	ldr	r3, [pc, #104]	; (104b8 <spi_read_reg+0x174>)
   1044e:	0018      	movs	r0, r3
   10450:	4b12      	ldr	r3, [pc, #72]	; (1049c <spi_read_reg+0x158>)
   10452:	4798      	blx	r3
   10454:	4b13      	ldr	r3, [pc, #76]	; (104a4 <spi_read_reg+0x160>)
   10456:	0018      	movs	r0, r3
   10458:	4b10      	ldr	r3, [pc, #64]	; (1049c <spi_read_reg+0x158>)
   1045a:	4798      	blx	r3
		nm_bsp_sleep(1);
   1045c:	2001      	movs	r0, #1
   1045e:	4b12      	ldr	r3, [pc, #72]	; (104a8 <spi_read_reg+0x164>)
   10460:	4798      	blx	r3
		retry--;
   10462:	230f      	movs	r3, #15
   10464:	18fb      	adds	r3, r7, r3
   10466:	781a      	ldrb	r2, [r3, #0]
   10468:	230f      	movs	r3, #15
   1046a:	18fb      	adds	r3, r7, r3
   1046c:	3a01      	subs	r2, #1
   1046e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   10470:	230f      	movs	r3, #15
   10472:	18fb      	adds	r3, r7, r3
   10474:	781b      	ldrb	r3, [r3, #0]
   10476:	2b00      	cmp	r3, #0
   10478:	d000      	beq.n	1047c <spi_read_reg+0x138>
   1047a:	e778      	b.n	1036e <spi_read_reg+0x2a>
	}
		
	return result;
   1047c:	230c      	movs	r3, #12
   1047e:	18fb      	adds	r3, r7, r3
   10480:	781b      	ldrb	r3, [r3, #0]
   10482:	b25b      	sxtb	r3, r3
}
   10484:	0018      	movs	r0, r3
   10486:	46bd      	mov	sp, r7
   10488:	b005      	add	sp, #20
   1048a:	bd90      	pop	{r4, r7, pc}
   1048c:	0000f581 	.word	0x0000f581
   10490:	00000423 	.word	0x00000423
   10494:	00024778 	.word	0x00024778
   10498:	00024120 	.word	0x00024120
   1049c:	00009a6d 	.word	0x00009a6d
   104a0:	00024548 	.word	0x00024548
   104a4:	00024160 	.word	0x00024160
   104a8:	0000bec1 	.word	0x0000bec1
   104ac:	0000f005 	.word	0x0000f005
   104b0:	0000f445 	.word	0x0000f445
   104b4:	00000435 	.word	0x00000435
   104b8:	00024574 	.word	0x00024574

000104bc <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   104bc:	b590      	push	{r4, r7, lr}
   104be:	b089      	sub	sp, #36	; 0x24
   104c0:	af02      	add	r7, sp, #8
   104c2:	60f8      	str	r0, [r7, #12]
   104c4:	60b9      	str	r1, [r7, #8]
   104c6:	1dbb      	adds	r3, r7, #6
   104c8:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   104ca:	2316      	movs	r3, #22
   104cc:	18fb      	adds	r3, r7, r3
   104ce:	22c8      	movs	r2, #200	; 0xc8
   104d0:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   104d2:	2317      	movs	r3, #23
   104d4:	18fb      	adds	r3, r7, r3
   104d6:	220a      	movs	r2, #10
   104d8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   104da:	1dbb      	adds	r3, r7, #6
   104dc:	881c      	ldrh	r4, [r3, #0]
   104de:	68ba      	ldr	r2, [r7, #8]
   104e0:	68f9      	ldr	r1, [r7, #12]
   104e2:	2316      	movs	r3, #22
   104e4:	18fb      	adds	r3, r7, r3
   104e6:	7818      	ldrb	r0, [r3, #0]
   104e8:	2300      	movs	r3, #0
   104ea:	9300      	str	r3, [sp, #0]
   104ec:	0023      	movs	r3, r4
   104ee:	4c2e      	ldr	r4, [pc, #184]	; (105a8 <nm_spi_read+0xec>)
   104f0:	47a0      	blx	r4
   104f2:	0002      	movs	r2, r0
   104f4:	2315      	movs	r3, #21
   104f6:	18fb      	adds	r3, r7, r3
   104f8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   104fa:	2315      	movs	r3, #21
   104fc:	18fb      	adds	r3, r7, r3
   104fe:	781b      	ldrb	r3, [r3, #0]
   10500:	b25b      	sxtb	r3, r3
   10502:	2b01      	cmp	r3, #1
   10504:	d010      	beq.n	10528 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   10506:	4a29      	ldr	r2, [pc, #164]	; (105ac <nm_spi_read+0xf0>)
   10508:	4929      	ldr	r1, [pc, #164]	; (105b0 <nm_spi_read+0xf4>)
   1050a:	4b2a      	ldr	r3, [pc, #168]	; (105b4 <nm_spi_read+0xf8>)
   1050c:	0018      	movs	r0, r3
   1050e:	4b2a      	ldr	r3, [pc, #168]	; (105b8 <nm_spi_read+0xfc>)
   10510:	4798      	blx	r3
   10512:	68fa      	ldr	r2, [r7, #12]
   10514:	4b29      	ldr	r3, [pc, #164]	; (105bc <nm_spi_read+0x100>)
   10516:	0011      	movs	r1, r2
   10518:	0018      	movs	r0, r3
   1051a:	4b27      	ldr	r3, [pc, #156]	; (105b8 <nm_spi_read+0xfc>)
   1051c:	4798      	blx	r3
   1051e:	4b28      	ldr	r3, [pc, #160]	; (105c0 <nm_spi_read+0x104>)
   10520:	0018      	movs	r0, r3
   10522:	4b25      	ldr	r3, [pc, #148]	; (105b8 <nm_spi_read+0xfc>)
   10524:	4798      	blx	r3
		goto _FAIL_;
   10526:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   10528:	2315      	movs	r3, #21
   1052a:	18fb      	adds	r3, r7, r3
   1052c:	781b      	ldrb	r3, [r3, #0]
   1052e:	b25b      	sxtb	r3, r3
   10530:	2b01      	cmp	r3, #1
   10532:	d030      	beq.n	10596 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   10534:	2001      	movs	r0, #1
   10536:	4b23      	ldr	r3, [pc, #140]	; (105c4 <nm_spi_read+0x108>)
   10538:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   1053a:	2300      	movs	r3, #0
   1053c:	9300      	str	r3, [sp, #0]
   1053e:	2300      	movs	r3, #0
   10540:	2200      	movs	r2, #0
   10542:	2100      	movs	r1, #0
   10544:	20cf      	movs	r0, #207	; 0xcf
   10546:	4c20      	ldr	r4, [pc, #128]	; (105c8 <nm_spi_read+0x10c>)
   10548:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   1054a:	20cf      	movs	r0, #207	; 0xcf
   1054c:	4b1f      	ldr	r3, [pc, #124]	; (105cc <nm_spi_read+0x110>)
   1054e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   10550:	4a1f      	ldr	r2, [pc, #124]	; (105d0 <nm_spi_read+0x114>)
   10552:	4917      	ldr	r1, [pc, #92]	; (105b0 <nm_spi_read+0xf4>)
   10554:	4b17      	ldr	r3, [pc, #92]	; (105b4 <nm_spi_read+0xf8>)
   10556:	0018      	movs	r0, r3
   10558:	4b17      	ldr	r3, [pc, #92]	; (105b8 <nm_spi_read+0xfc>)
   1055a:	4798      	blx	r3
   1055c:	2317      	movs	r3, #23
   1055e:	18fb      	adds	r3, r7, r3
   10560:	7819      	ldrb	r1, [r3, #0]
   10562:	1dbb      	adds	r3, r7, #6
   10564:	881b      	ldrh	r3, [r3, #0]
   10566:	68fa      	ldr	r2, [r7, #12]
   10568:	481a      	ldr	r0, [pc, #104]	; (105d4 <nm_spi_read+0x118>)
   1056a:	4c13      	ldr	r4, [pc, #76]	; (105b8 <nm_spi_read+0xfc>)
   1056c:	47a0      	blx	r4
   1056e:	4b14      	ldr	r3, [pc, #80]	; (105c0 <nm_spi_read+0x104>)
   10570:	0018      	movs	r0, r3
   10572:	4b11      	ldr	r3, [pc, #68]	; (105b8 <nm_spi_read+0xfc>)
   10574:	4798      	blx	r3
		nm_bsp_sleep(1);
   10576:	2001      	movs	r0, #1
   10578:	4b12      	ldr	r3, [pc, #72]	; (105c4 <nm_spi_read+0x108>)
   1057a:	4798      	blx	r3
		retry--;
   1057c:	2317      	movs	r3, #23
   1057e:	18fb      	adds	r3, r7, r3
   10580:	781a      	ldrb	r2, [r3, #0]
   10582:	2317      	movs	r3, #23
   10584:	18fb      	adds	r3, r7, r3
   10586:	3a01      	subs	r2, #1
   10588:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   1058a:	2317      	movs	r3, #23
   1058c:	18fb      	adds	r3, r7, r3
   1058e:	781b      	ldrb	r3, [r3, #0]
   10590:	2b00      	cmp	r3, #0
   10592:	d000      	beq.n	10596 <nm_spi_read+0xda>
   10594:	e7a1      	b.n	104da <nm_spi_read+0x1e>
	}

	return result;
   10596:	2315      	movs	r3, #21
   10598:	18fb      	adds	r3, r7, r3
   1059a:	781b      	ldrb	r3, [r3, #0]
   1059c:	b25b      	sxtb	r3, r3
}
   1059e:	0018      	movs	r0, r3
   105a0:	46bd      	mov	sp, r7
   105a2:	b007      	add	sp, #28
   105a4:	bd90      	pop	{r4, r7, pc}
   105a6:	46c0      	nop			; (mov r8, r8)
   105a8:	0000f581 	.word	0x0000f581
   105ac:	00000472 	.word	0x00000472
   105b0:	00024788 	.word	0x00024788
   105b4:	00024120 	.word	0x00024120
   105b8:	00009a6d 	.word	0x00009a6d
   105bc:	0002458c 	.word	0x0002458c
   105c0:	00024160 	.word	0x00024160
   105c4:	0000bec1 	.word	0x0000bec1
   105c8:	0000f005 	.word	0x0000f005
   105cc:	0000f445 	.word	0x0000f445
   105d0:	0000047d 	.word	0x0000047d
   105d4:	0002452c 	.word	0x0002452c

000105d8 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   105d8:	b580      	push	{r7, lr}
   105da:	b082      	sub	sp, #8
   105dc:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   105de:	4b0c      	ldr	r3, [pc, #48]	; (10610 <spi_init_pkt_sz+0x38>)
   105e0:	0018      	movs	r0, r3
   105e2:	4b0c      	ldr	r3, [pc, #48]	; (10614 <spi_init_pkt_sz+0x3c>)
   105e4:	4798      	blx	r3
   105e6:	0003      	movs	r3, r0
   105e8:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   105ea:	687b      	ldr	r3, [r7, #4]
   105ec:	2270      	movs	r2, #112	; 0x70
   105ee:	4393      	bics	r3, r2
   105f0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   105f2:	687b      	ldr	r3, [r7, #4]
   105f4:	2250      	movs	r2, #80	; 0x50
   105f6:	4313      	orrs	r3, r2
   105f8:	607b      	str	r3, [r7, #4]
   105fa:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   105fc:	687b      	ldr	r3, [r7, #4]
   105fe:	4a04      	ldr	r2, [pc, #16]	; (10610 <spi_init_pkt_sz+0x38>)
   10600:	0019      	movs	r1, r3
   10602:	0010      	movs	r0, r2
   10604:	4b04      	ldr	r3, [pc, #16]	; (10618 <spi_init_pkt_sz+0x40>)
   10606:	4798      	blx	r3
}
   10608:	46c0      	nop			; (mov r8, r8)
   1060a:	46bd      	mov	sp, r7
   1060c:	b002      	add	sp, #8
   1060e:	bd80      	pop	{r7, pc}
   10610:	0000e824 	.word	0x0000e824
   10614:	000107b1 	.word	0x000107b1
   10618:	00010825 	.word	0x00010825

0001061c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   1061c:	b590      	push	{r4, r7, lr}
   1061e:	b083      	sub	sp, #12
   10620:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   10622:	2300      	movs	r3, #0
   10624:	9300      	str	r3, [sp, #0]
   10626:	2300      	movs	r3, #0
   10628:	2200      	movs	r2, #0
   1062a:	2100      	movs	r1, #0
   1062c:	20cf      	movs	r0, #207	; 0xcf
   1062e:	4c05      	ldr	r4, [pc, #20]	; (10644 <nm_spi_reset+0x28>)
   10630:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   10632:	20cf      	movs	r0, #207	; 0xcf
   10634:	4b04      	ldr	r3, [pc, #16]	; (10648 <nm_spi_reset+0x2c>)
   10636:	4798      	blx	r3
	return M2M_SUCCESS;
   10638:	2300      	movs	r3, #0
}
   1063a:	0018      	movs	r0, r3
   1063c:	46bd      	mov	sp, r7
   1063e:	b001      	add	sp, #4
   10640:	bd90      	pop	{r4, r7, pc}
   10642:	46c0      	nop			; (mov r8, r8)
   10644:	0000f005 	.word	0x0000f005
   10648:	0000f445 	.word	0x0000f445

0001064c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   1064c:	b580      	push	{r7, lr}
   1064e:	b082      	sub	sp, #8
   10650:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   10652:	2300      	movs	r3, #0
   10654:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   10656:	4b40      	ldr	r3, [pc, #256]	; (10758 <nm_spi_init+0x10c>)
   10658:	2200      	movs	r2, #0
   1065a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   1065c:	003b      	movs	r3, r7
   1065e:	4a3f      	ldr	r2, [pc, #252]	; (1075c <nm_spi_init+0x110>)
   10660:	0019      	movs	r1, r3
   10662:	0010      	movs	r0, r2
   10664:	4b3e      	ldr	r3, [pc, #248]	; (10760 <nm_spi_init+0x114>)
   10666:	4798      	blx	r3
   10668:	1e03      	subs	r3, r0, #0
   1066a:	d129      	bne.n	106c0 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   1066c:	4b3a      	ldr	r3, [pc, #232]	; (10758 <nm_spi_init+0x10c>)
   1066e:	2201      	movs	r2, #1
   10670:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   10672:	2398      	movs	r3, #152	; 0x98
   10674:	00da      	lsls	r2, r3, #3
   10676:	493b      	ldr	r1, [pc, #236]	; (10764 <nm_spi_init+0x118>)
   10678:	4b3b      	ldr	r3, [pc, #236]	; (10768 <nm_spi_init+0x11c>)
   1067a:	0018      	movs	r0, r3
   1067c:	4b3b      	ldr	r3, [pc, #236]	; (1076c <nm_spi_init+0x120>)
   1067e:	4798      	blx	r3
   10680:	4b3b      	ldr	r3, [pc, #236]	; (10770 <nm_spi_init+0x124>)
   10682:	0018      	movs	r0, r3
   10684:	4b39      	ldr	r3, [pc, #228]	; (1076c <nm_spi_init+0x120>)
   10686:	4798      	blx	r3
   10688:	4b3a      	ldr	r3, [pc, #232]	; (10774 <nm_spi_init+0x128>)
   1068a:	0018      	movs	r0, r3
   1068c:	4b37      	ldr	r3, [pc, #220]	; (1076c <nm_spi_init+0x120>)
   1068e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   10690:	003b      	movs	r3, r7
   10692:	4a32      	ldr	r2, [pc, #200]	; (1075c <nm_spi_init+0x110>)
   10694:	0019      	movs	r1, r3
   10696:	0010      	movs	r0, r2
   10698:	4b31      	ldr	r3, [pc, #196]	; (10760 <nm_spi_init+0x114>)
   1069a:	4798      	blx	r3
   1069c:	1e03      	subs	r3, r0, #0
   1069e:	d10f      	bne.n	106c0 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   106a0:	4a35      	ldr	r2, [pc, #212]	; (10778 <nm_spi_init+0x12c>)
   106a2:	4930      	ldr	r1, [pc, #192]	; (10764 <nm_spi_init+0x118>)
   106a4:	4b30      	ldr	r3, [pc, #192]	; (10768 <nm_spi_init+0x11c>)
   106a6:	0018      	movs	r0, r3
   106a8:	4b30      	ldr	r3, [pc, #192]	; (1076c <nm_spi_init+0x120>)
   106aa:	4798      	blx	r3
   106ac:	4b33      	ldr	r3, [pc, #204]	; (1077c <nm_spi_init+0x130>)
   106ae:	0018      	movs	r0, r3
   106b0:	4b2e      	ldr	r3, [pc, #184]	; (1076c <nm_spi_init+0x120>)
   106b2:	4798      	blx	r3
   106b4:	4b2f      	ldr	r3, [pc, #188]	; (10774 <nm_spi_init+0x128>)
   106b6:	0018      	movs	r0, r3
   106b8:	4b2c      	ldr	r3, [pc, #176]	; (1076c <nm_spi_init+0x120>)
   106ba:	4798      	blx	r3
			return 0;
   106bc:	2300      	movs	r3, #0
   106be:	e047      	b.n	10750 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   106c0:	4b25      	ldr	r3, [pc, #148]	; (10758 <nm_spi_init+0x10c>)
   106c2:	781b      	ldrb	r3, [r3, #0]
   106c4:	2b00      	cmp	r3, #0
   106c6:	d126      	bne.n	10716 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   106c8:	683b      	ldr	r3, [r7, #0]
   106ca:	220c      	movs	r2, #12
   106cc:	4393      	bics	r3, r2
   106ce:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   106d0:	683b      	ldr	r3, [r7, #0]
   106d2:	2270      	movs	r2, #112	; 0x70
   106d4:	4393      	bics	r3, r2
   106d6:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   106d8:	683b      	ldr	r3, [r7, #0]
   106da:	2250      	movs	r2, #80	; 0x50
   106dc:	4313      	orrs	r3, r2
   106de:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   106e0:	683b      	ldr	r3, [r7, #0]
   106e2:	4a1e      	ldr	r2, [pc, #120]	; (1075c <nm_spi_init+0x110>)
   106e4:	0019      	movs	r1, r3
   106e6:	0010      	movs	r0, r2
   106e8:	4b25      	ldr	r3, [pc, #148]	; (10780 <nm_spi_init+0x134>)
   106ea:	4798      	blx	r3
   106ec:	1e03      	subs	r3, r0, #0
   106ee:	d10f      	bne.n	10710 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   106f0:	4a24      	ldr	r2, [pc, #144]	; (10784 <nm_spi_init+0x138>)
   106f2:	491c      	ldr	r1, [pc, #112]	; (10764 <nm_spi_init+0x118>)
   106f4:	4b1c      	ldr	r3, [pc, #112]	; (10768 <nm_spi_init+0x11c>)
   106f6:	0018      	movs	r0, r3
   106f8:	4b1c      	ldr	r3, [pc, #112]	; (1076c <nm_spi_init+0x120>)
   106fa:	4798      	blx	r3
   106fc:	4b22      	ldr	r3, [pc, #136]	; (10788 <nm_spi_init+0x13c>)
   106fe:	0018      	movs	r0, r3
   10700:	4b1a      	ldr	r3, [pc, #104]	; (1076c <nm_spi_init+0x120>)
   10702:	4798      	blx	r3
   10704:	4b1b      	ldr	r3, [pc, #108]	; (10774 <nm_spi_init+0x128>)
   10706:	0018      	movs	r0, r3
   10708:	4b18      	ldr	r3, [pc, #96]	; (1076c <nm_spi_init+0x120>)
   1070a:	4798      	blx	r3
			return 0;
   1070c:	2300      	movs	r3, #0
   1070e:	e01f      	b.n	10750 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   10710:	4b11      	ldr	r3, [pc, #68]	; (10758 <nm_spi_init+0x10c>)
   10712:	2201      	movs	r2, #1
   10714:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   10716:	1d3a      	adds	r2, r7, #4
   10718:	2380      	movs	r3, #128	; 0x80
   1071a:	015b      	lsls	r3, r3, #5
   1071c:	0011      	movs	r1, r2
   1071e:	0018      	movs	r0, r3
   10720:	4b0f      	ldr	r3, [pc, #60]	; (10760 <nm_spi_init+0x114>)
   10722:	4798      	blx	r3
   10724:	1e03      	subs	r3, r0, #0
   10726:	d110      	bne.n	1074a <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   10728:	4a18      	ldr	r2, [pc, #96]	; (1078c <nm_spi_init+0x140>)
   1072a:	490e      	ldr	r1, [pc, #56]	; (10764 <nm_spi_init+0x118>)
   1072c:	4b0e      	ldr	r3, [pc, #56]	; (10768 <nm_spi_init+0x11c>)
   1072e:	0018      	movs	r0, r3
   10730:	4b0e      	ldr	r3, [pc, #56]	; (1076c <nm_spi_init+0x120>)
   10732:	4798      	blx	r3
   10734:	4b16      	ldr	r3, [pc, #88]	; (10790 <nm_spi_init+0x144>)
   10736:	0018      	movs	r0, r3
   10738:	4b0c      	ldr	r3, [pc, #48]	; (1076c <nm_spi_init+0x120>)
   1073a:	4798      	blx	r3
   1073c:	4b0d      	ldr	r3, [pc, #52]	; (10774 <nm_spi_init+0x128>)
   1073e:	0018      	movs	r0, r3
   10740:	4b0a      	ldr	r3, [pc, #40]	; (1076c <nm_spi_init+0x120>)
   10742:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   10744:	2306      	movs	r3, #6
   10746:	425b      	negs	r3, r3
   10748:	e002      	b.n	10750 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   1074a:	4b12      	ldr	r3, [pc, #72]	; (10794 <nm_spi_init+0x148>)
   1074c:	4798      	blx	r3


	return M2M_SUCCESS;
   1074e:	2300      	movs	r3, #0
}
   10750:	0018      	movs	r0, r3
   10752:	46bd      	mov	sp, r7
   10754:	b002      	add	sp, #8
   10756:	bd80      	pop	{r7, pc}
   10758:	20003d18 	.word	0x20003d18
   1075c:	0000e824 	.word	0x0000e824
   10760:	00010345 	.word	0x00010345
   10764:	00024794 	.word	0x00024794
   10768:	00024120 	.word	0x00024120
   1076c:	00009a6d 	.word	0x00009a6d
   10770:	000245bc 	.word	0x000245bc
   10774:	00024160 	.word	0x00024160
   10778:	000004c3 	.word	0x000004c3
   1077c:	0002460c 	.word	0x0002460c
   10780:	0001004d 	.word	0x0001004d
   10784:	000004cd 	.word	0x000004cd
   10788:	0002463c 	.word	0x0002463c
   1078c:	000004d7 	.word	0x000004d7
   10790:	00024670 	.word	0x00024670
   10794:	000105d9 	.word	0x000105d9

00010798 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   10798:	b580      	push	{r7, lr}
   1079a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   1079c:	4b03      	ldr	r3, [pc, #12]	; (107ac <nm_spi_deinit+0x14>)
   1079e:	2200      	movs	r2, #0
   107a0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   107a2:	2300      	movs	r3, #0
}
   107a4:	0018      	movs	r0, r3
   107a6:	46bd      	mov	sp, r7
   107a8:	bd80      	pop	{r7, pc}
   107aa:	46c0      	nop			; (mov r8, r8)
   107ac:	20003d18 	.word	0x20003d18

000107b0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   107b0:	b580      	push	{r7, lr}
   107b2:	b084      	sub	sp, #16
   107b4:	af00      	add	r7, sp, #0
   107b6:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   107b8:	230c      	movs	r3, #12
   107ba:	18fa      	adds	r2, r7, r3
   107bc:	687b      	ldr	r3, [r7, #4]
   107be:	0011      	movs	r1, r2
   107c0:	0018      	movs	r0, r3
   107c2:	4b03      	ldr	r3, [pc, #12]	; (107d0 <nm_spi_read_reg+0x20>)
   107c4:	4798      	blx	r3

	return u32Val;
   107c6:	68fb      	ldr	r3, [r7, #12]
}
   107c8:	0018      	movs	r0, r3
   107ca:	46bd      	mov	sp, r7
   107cc:	b004      	add	sp, #16
   107ce:	bd80      	pop	{r7, pc}
   107d0:	00010345 	.word	0x00010345

000107d4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   107d4:	b590      	push	{r4, r7, lr}
   107d6:	b085      	sub	sp, #20
   107d8:	af00      	add	r7, sp, #0
   107da:	6078      	str	r0, [r7, #4]
   107dc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   107de:	230f      	movs	r3, #15
   107e0:	18fc      	adds	r4, r7, r3
   107e2:	683a      	ldr	r2, [r7, #0]
   107e4:	687b      	ldr	r3, [r7, #4]
   107e6:	0011      	movs	r1, r2
   107e8:	0018      	movs	r0, r3
   107ea:	4b0d      	ldr	r3, [pc, #52]	; (10820 <nm_spi_read_reg_with_ret+0x4c>)
   107ec:	4798      	blx	r3
   107ee:	0003      	movs	r3, r0
   107f0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   107f2:	230f      	movs	r3, #15
   107f4:	18fb      	adds	r3, r7, r3
   107f6:	781b      	ldrb	r3, [r3, #0]
   107f8:	b25b      	sxtb	r3, r3
   107fa:	2b01      	cmp	r3, #1
   107fc:	d104      	bne.n	10808 <nm_spi_read_reg_with_ret+0x34>
   107fe:	230f      	movs	r3, #15
   10800:	18fb      	adds	r3, r7, r3
   10802:	2200      	movs	r2, #0
   10804:	701a      	strb	r2, [r3, #0]
   10806:	e003      	b.n	10810 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   10808:	230f      	movs	r3, #15
   1080a:	18fb      	adds	r3, r7, r3
   1080c:	22fa      	movs	r2, #250	; 0xfa
   1080e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   10810:	230f      	movs	r3, #15
   10812:	18fb      	adds	r3, r7, r3
   10814:	781b      	ldrb	r3, [r3, #0]
   10816:	b25b      	sxtb	r3, r3
}
   10818:	0018      	movs	r0, r3
   1081a:	46bd      	mov	sp, r7
   1081c:	b005      	add	sp, #20
   1081e:	bd90      	pop	{r4, r7, pc}
   10820:	00010345 	.word	0x00010345

00010824 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   10824:	b590      	push	{r4, r7, lr}
   10826:	b085      	sub	sp, #20
   10828:	af00      	add	r7, sp, #0
   1082a:	6078      	str	r0, [r7, #4]
   1082c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   1082e:	230f      	movs	r3, #15
   10830:	18fc      	adds	r4, r7, r3
   10832:	683a      	ldr	r2, [r7, #0]
   10834:	687b      	ldr	r3, [r7, #4]
   10836:	0011      	movs	r1, r2
   10838:	0018      	movs	r0, r3
   1083a:	4b0d      	ldr	r3, [pc, #52]	; (10870 <nm_spi_write_reg+0x4c>)
   1083c:	4798      	blx	r3
   1083e:	0003      	movs	r3, r0
   10840:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   10842:	230f      	movs	r3, #15
   10844:	18fb      	adds	r3, r7, r3
   10846:	781b      	ldrb	r3, [r3, #0]
   10848:	b25b      	sxtb	r3, r3
   1084a:	2b01      	cmp	r3, #1
   1084c:	d104      	bne.n	10858 <nm_spi_write_reg+0x34>
   1084e:	230f      	movs	r3, #15
   10850:	18fb      	adds	r3, r7, r3
   10852:	2200      	movs	r2, #0
   10854:	701a      	strb	r2, [r3, #0]
   10856:	e003      	b.n	10860 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   10858:	230f      	movs	r3, #15
   1085a:	18fb      	adds	r3, r7, r3
   1085c:	22fa      	movs	r2, #250	; 0xfa
   1085e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   10860:	230f      	movs	r3, #15
   10862:	18fb      	adds	r3, r7, r3
   10864:	781b      	ldrb	r3, [r3, #0]
   10866:	b25b      	sxtb	r3, r3
}
   10868:	0018      	movs	r0, r3
   1086a:	46bd      	mov	sp, r7
   1086c:	b005      	add	sp, #20
   1086e:	bd90      	pop	{r4, r7, pc}
   10870:	0001004d 	.word	0x0001004d

00010874 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   10874:	b590      	push	{r4, r7, lr}
   10876:	b087      	sub	sp, #28
   10878:	af00      	add	r7, sp, #0
   1087a:	60f8      	str	r0, [r7, #12]
   1087c:	60b9      	str	r1, [r7, #8]
   1087e:	1dbb      	adds	r3, r7, #6
   10880:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   10882:	2317      	movs	r3, #23
   10884:	18fc      	adds	r4, r7, r3
   10886:	1dbb      	adds	r3, r7, #6
   10888:	881a      	ldrh	r2, [r3, #0]
   1088a:	68b9      	ldr	r1, [r7, #8]
   1088c:	68fb      	ldr	r3, [r7, #12]
   1088e:	0018      	movs	r0, r3
   10890:	4b0d      	ldr	r3, [pc, #52]	; (108c8 <nm_spi_read_block+0x54>)
   10892:	4798      	blx	r3
   10894:	0003      	movs	r3, r0
   10896:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   10898:	2317      	movs	r3, #23
   1089a:	18fb      	adds	r3, r7, r3
   1089c:	781b      	ldrb	r3, [r3, #0]
   1089e:	b25b      	sxtb	r3, r3
   108a0:	2b01      	cmp	r3, #1
   108a2:	d104      	bne.n	108ae <nm_spi_read_block+0x3a>
   108a4:	2317      	movs	r3, #23
   108a6:	18fb      	adds	r3, r7, r3
   108a8:	2200      	movs	r2, #0
   108aa:	701a      	strb	r2, [r3, #0]
   108ac:	e003      	b.n	108b6 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   108ae:	2317      	movs	r3, #23
   108b0:	18fb      	adds	r3, r7, r3
   108b2:	22fa      	movs	r2, #250	; 0xfa
   108b4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   108b6:	2317      	movs	r3, #23
   108b8:	18fb      	adds	r3, r7, r3
   108ba:	781b      	ldrb	r3, [r3, #0]
   108bc:	b25b      	sxtb	r3, r3
}
   108be:	0018      	movs	r0, r3
   108c0:	46bd      	mov	sp, r7
   108c2:	b007      	add	sp, #28
   108c4:	bd90      	pop	{r4, r7, pc}
   108c6:	46c0      	nop			; (mov r8, r8)
   108c8:	000104bd 	.word	0x000104bd

000108cc <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   108cc:	b590      	push	{r4, r7, lr}
   108ce:	b087      	sub	sp, #28
   108d0:	af00      	add	r7, sp, #0
   108d2:	60f8      	str	r0, [r7, #12]
   108d4:	60b9      	str	r1, [r7, #8]
   108d6:	1dbb      	adds	r3, r7, #6
   108d8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   108da:	2317      	movs	r3, #23
   108dc:	18fc      	adds	r4, r7, r3
   108de:	1dbb      	adds	r3, r7, #6
   108e0:	881a      	ldrh	r2, [r3, #0]
   108e2:	68b9      	ldr	r1, [r7, #8]
   108e4:	68fb      	ldr	r3, [r7, #12]
   108e6:	0018      	movs	r0, r3
   108e8:	4b0d      	ldr	r3, [pc, #52]	; (10920 <nm_spi_write_block+0x54>)
   108ea:	4798      	blx	r3
   108ec:	0003      	movs	r3, r0
   108ee:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   108f0:	2317      	movs	r3, #23
   108f2:	18fb      	adds	r3, r7, r3
   108f4:	781b      	ldrb	r3, [r3, #0]
   108f6:	b25b      	sxtb	r3, r3
   108f8:	2b01      	cmp	r3, #1
   108fa:	d104      	bne.n	10906 <nm_spi_write_block+0x3a>
   108fc:	2317      	movs	r3, #23
   108fe:	18fb      	adds	r3, r7, r3
   10900:	2200      	movs	r2, #0
   10902:	701a      	strb	r2, [r3, #0]
   10904:	e003      	b.n	1090e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   10906:	2317      	movs	r3, #23
   10908:	18fb      	adds	r3, r7, r3
   1090a:	22fa      	movs	r2, #250	; 0xfa
   1090c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   1090e:	2317      	movs	r3, #23
   10910:	18fb      	adds	r3, r7, r3
   10912:	781b      	ldrb	r3, [r3, #0]
   10914:	b25b      	sxtb	r3, r3
}
   10916:	0018      	movs	r0, r3
   10918:	46bd      	mov	sp, r7
   1091a:	b007      	add	sp, #28
   1091c:	bd90      	pop	{r4, r7, pc}
   1091e:	46c0      	nop			; (mov r8, r8)
   10920:	00010199 	.word	0x00010199

00010924 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   10924:	b590      	push	{r4, r7, lr}
   10926:	b089      	sub	sp, #36	; 0x24
   10928:	af00      	add	r7, sp, #0
   1092a:	60b9      	str	r1, [r7, #8]
   1092c:	0011      	movs	r1, r2
   1092e:	607b      	str	r3, [r7, #4]
   10930:	230f      	movs	r3, #15
   10932:	18fb      	adds	r3, r7, r3
   10934:	1c02      	adds	r2, r0, #0
   10936:	701a      	strb	r2, [r3, #0]
   10938:	230e      	movs	r3, #14
   1093a:	18fb      	adds	r3, r7, r3
   1093c:	1c0a      	adds	r2, r1, #0
   1093e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   10940:	2330      	movs	r3, #48	; 0x30
   10942:	18fb      	adds	r3, r7, r3
   10944:	881b      	ldrh	r3, [r3, #0]
   10946:	2b00      	cmp	r3, #0
   10948:	d100      	bne.n	1094c <Socket_ReadSocketData+0x28>
   1094a:	e0d7      	b.n	10afc <Socket_ReadSocketData+0x1d8>
   1094c:	230f      	movs	r3, #15
   1094e:	18fb      	adds	r3, r7, r3
   10950:	2200      	movs	r2, #0
   10952:	569a      	ldrsb	r2, [r3, r2]
   10954:	4b6b      	ldr	r3, [pc, #428]	; (10b04 <Socket_ReadSocketData+0x1e0>)
   10956:	0112      	lsls	r2, r2, #4
   10958:	58d3      	ldr	r3, [r2, r3]
   1095a:	2b00      	cmp	r3, #0
   1095c:	d100      	bne.n	10960 <Socket_ReadSocketData+0x3c>
   1095e:	e0cd      	b.n	10afc <Socket_ReadSocketData+0x1d8>
   10960:	230f      	movs	r3, #15
   10962:	18fb      	adds	r3, r7, r3
   10964:	781b      	ldrb	r3, [r3, #0]
   10966:	b25b      	sxtb	r3, r3
   10968:	4a66      	ldr	r2, [pc, #408]	; (10b04 <Socket_ReadSocketData+0x1e0>)
   1096a:	011b      	lsls	r3, r3, #4
   1096c:	18d3      	adds	r3, r2, r3
   1096e:	3304      	adds	r3, #4
   10970:	881b      	ldrh	r3, [r3, #0]
   10972:	b29b      	uxth	r3, r3
   10974:	2b00      	cmp	r3, #0
   10976:	d100      	bne.n	1097a <Socket_ReadSocketData+0x56>
   10978:	e0c0      	b.n	10afc <Socket_ReadSocketData+0x1d8>
   1097a:	230f      	movs	r3, #15
   1097c:	18fb      	adds	r3, r7, r3
   1097e:	781b      	ldrb	r3, [r3, #0]
   10980:	b25b      	sxtb	r3, r3
   10982:	4a60      	ldr	r2, [pc, #384]	; (10b04 <Socket_ReadSocketData+0x1e0>)
   10984:	011b      	lsls	r3, r3, #4
   10986:	18d3      	adds	r3, r2, r3
   10988:	330a      	adds	r3, #10
   1098a:	781b      	ldrb	r3, [r3, #0]
   1098c:	b2db      	uxtb	r3, r3
   1098e:	2b01      	cmp	r3, #1
   10990:	d000      	beq.n	10994 <Socket_ReadSocketData+0x70>
   10992:	e0b3      	b.n	10afc <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   10994:	687b      	ldr	r3, [r7, #4]
   10996:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   10998:	68bb      	ldr	r3, [r7, #8]
   1099a:	2230      	movs	r2, #48	; 0x30
   1099c:	18ba      	adds	r2, r7, r2
   1099e:	8812      	ldrh	r2, [r2, #0]
   109a0:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   109a2:	2319      	movs	r3, #25
   109a4:	18fb      	adds	r3, r7, r3
   109a6:	2201      	movs	r2, #1
   109a8:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   109aa:	231a      	movs	r3, #26
   109ac:	18fb      	adds	r3, r7, r3
   109ae:	2230      	movs	r2, #48	; 0x30
   109b0:	18ba      	adds	r2, r7, r2
   109b2:	8812      	ldrh	r2, [r2, #0]
   109b4:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   109b6:	230f      	movs	r3, #15
   109b8:	18fb      	adds	r3, r7, r3
   109ba:	781b      	ldrb	r3, [r3, #0]
   109bc:	b25b      	sxtb	r3, r3
   109be:	4a51      	ldr	r2, [pc, #324]	; (10b04 <Socket_ReadSocketData+0x1e0>)
   109c0:	011b      	lsls	r3, r3, #4
   109c2:	18d3      	adds	r3, r2, r3
   109c4:	3304      	adds	r3, #4
   109c6:	881b      	ldrh	r3, [r3, #0]
   109c8:	b29b      	uxth	r3, r3
   109ca:	221a      	movs	r2, #26
   109cc:	18ba      	adds	r2, r7, r2
   109ce:	8812      	ldrh	r2, [r2, #0]
   109d0:	1ad3      	subs	r3, r2, r3
   109d2:	b29a      	uxth	r2, r3
   109d4:	2316      	movs	r3, #22
   109d6:	18fb      	adds	r3, r7, r3
   109d8:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   109da:	2316      	movs	r3, #22
   109dc:	18fb      	adds	r3, r7, r3
   109de:	2200      	movs	r2, #0
   109e0:	5e9b      	ldrsh	r3, [r3, r2]
   109e2:	2b00      	cmp	r3, #0
   109e4:	dd0f      	ble.n	10a06 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   109e6:	2319      	movs	r3, #25
   109e8:	18fb      	adds	r3, r7, r3
   109ea:	2200      	movs	r2, #0
   109ec:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   109ee:	230f      	movs	r3, #15
   109f0:	18fb      	adds	r3, r7, r3
   109f2:	2200      	movs	r2, #0
   109f4:	569a      	ldrsb	r2, [r3, r2]
   109f6:	231a      	movs	r3, #26
   109f8:	18fb      	adds	r3, r7, r3
   109fa:	4942      	ldr	r1, [pc, #264]	; (10b04 <Socket_ReadSocketData+0x1e0>)
   109fc:	0112      	lsls	r2, r2, #4
   109fe:	188a      	adds	r2, r1, r2
   10a00:	3204      	adds	r2, #4
   10a02:	8812      	ldrh	r2, [r2, #0]
   10a04:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   10a06:	230f      	movs	r3, #15
   10a08:	18fb      	adds	r3, r7, r3
   10a0a:	2200      	movs	r2, #0
   10a0c:	569a      	ldrsb	r2, [r3, r2]
   10a0e:	4b3d      	ldr	r3, [pc, #244]	; (10b04 <Socket_ReadSocketData+0x1e0>)
   10a10:	0112      	lsls	r2, r2, #4
   10a12:	58d1      	ldr	r1, [r2, r3]
   10a14:	2319      	movs	r3, #25
   10a16:	18fb      	adds	r3, r7, r3
   10a18:	781c      	ldrb	r4, [r3, #0]
   10a1a:	231a      	movs	r3, #26
   10a1c:	18fb      	adds	r3, r7, r3
   10a1e:	881a      	ldrh	r2, [r3, #0]
   10a20:	69f8      	ldr	r0, [r7, #28]
   10a22:	0023      	movs	r3, r4
   10a24:	4c38      	ldr	r4, [pc, #224]	; (10b08 <Socket_ReadSocketData+0x1e4>)
   10a26:	47a0      	blx	r4
   10a28:	1e03      	subs	r3, r0, #0
   10a2a:	d14f      	bne.n	10acc <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   10a2c:	230f      	movs	r3, #15
   10a2e:	18fb      	adds	r3, r7, r3
   10a30:	2200      	movs	r2, #0
   10a32:	569a      	ldrsb	r2, [r3, r2]
   10a34:	4b33      	ldr	r3, [pc, #204]	; (10b04 <Socket_ReadSocketData+0x1e0>)
   10a36:	0112      	lsls	r2, r2, #4
   10a38:	58d2      	ldr	r2, [r2, r3]
   10a3a:	68bb      	ldr	r3, [r7, #8]
   10a3c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   10a3e:	231a      	movs	r3, #26
   10a40:	18fb      	adds	r3, r7, r3
   10a42:	2200      	movs	r2, #0
   10a44:	5e9a      	ldrsh	r2, [r3, r2]
   10a46:	68bb      	ldr	r3, [r7, #8]
   10a48:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   10a4a:	68bb      	ldr	r3, [r7, #8]
   10a4c:	88da      	ldrh	r2, [r3, #6]
   10a4e:	231a      	movs	r3, #26
   10a50:	18fb      	adds	r3, r7, r3
   10a52:	881b      	ldrh	r3, [r3, #0]
   10a54:	1ad3      	subs	r3, r2, r3
   10a56:	b29a      	uxth	r2, r3
   10a58:	68bb      	ldr	r3, [r7, #8]
   10a5a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   10a5c:	4b2b      	ldr	r3, [pc, #172]	; (10b0c <Socket_ReadSocketData+0x1e8>)
   10a5e:	681b      	ldr	r3, [r3, #0]
   10a60:	2b00      	cmp	r3, #0
   10a62:	d00b      	beq.n	10a7c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   10a64:	4b29      	ldr	r3, [pc, #164]	; (10b0c <Socket_ReadSocketData+0x1e8>)
   10a66:	681b      	ldr	r3, [r3, #0]
   10a68:	68bc      	ldr	r4, [r7, #8]
   10a6a:	220e      	movs	r2, #14
   10a6c:	18ba      	adds	r2, r7, r2
   10a6e:	7811      	ldrb	r1, [r2, #0]
   10a70:	220f      	movs	r2, #15
   10a72:	18ba      	adds	r2, r7, r2
   10a74:	2000      	movs	r0, #0
   10a76:	5610      	ldrsb	r0, [r2, r0]
   10a78:	0022      	movs	r2, r4
   10a7a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   10a7c:	2330      	movs	r3, #48	; 0x30
   10a7e:	18f9      	adds	r1, r7, r3
   10a80:	2330      	movs	r3, #48	; 0x30
   10a82:	18fa      	adds	r2, r7, r3
   10a84:	231a      	movs	r3, #26
   10a86:	18fb      	adds	r3, r7, r3
   10a88:	8812      	ldrh	r2, [r2, #0]
   10a8a:	881b      	ldrh	r3, [r3, #0]
   10a8c:	1ad3      	subs	r3, r2, r3
   10a8e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   10a90:	231a      	movs	r3, #26
   10a92:	18fb      	adds	r3, r7, r3
   10a94:	881b      	ldrh	r3, [r3, #0]
   10a96:	69fa      	ldr	r2, [r7, #28]
   10a98:	18d3      	adds	r3, r2, r3
   10a9a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   10a9c:	230f      	movs	r3, #15
   10a9e:	18fb      	adds	r3, r7, r3
   10aa0:	781b      	ldrb	r3, [r3, #0]
   10aa2:	b25b      	sxtb	r3, r3
   10aa4:	4a17      	ldr	r2, [pc, #92]	; (10b04 <Socket_ReadSocketData+0x1e0>)
   10aa6:	011b      	lsls	r3, r3, #4
   10aa8:	18d3      	adds	r3, r2, r3
   10aaa:	330a      	adds	r3, #10
   10aac:	781b      	ldrb	r3, [r3, #0]
   10aae:	b2db      	uxtb	r3, r3
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	d11c      	bne.n	10aee <Socket_ReadSocketData+0x1ca>
   10ab4:	2330      	movs	r3, #48	; 0x30
   10ab6:	18fb      	adds	r3, r7, r3
   10ab8:	881b      	ldrh	r3, [r3, #0]
   10aba:	2b00      	cmp	r3, #0
   10abc:	d017      	beq.n	10aee <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   10abe:	2301      	movs	r3, #1
   10ac0:	2200      	movs	r2, #0
   10ac2:	2100      	movs	r1, #0
   10ac4:	2000      	movs	r0, #0
   10ac6:	4c10      	ldr	r4, [pc, #64]	; (10b08 <Socket_ReadSocketData+0x1e4>)
   10ac8:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   10aca:	e017      	b.n	10afc <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   10acc:	4b10      	ldr	r3, [pc, #64]	; (10b10 <Socket_ReadSocketData+0x1ec>)
   10ace:	0018      	movs	r0, r3
   10ad0:	4b10      	ldr	r3, [pc, #64]	; (10b14 <Socket_ReadSocketData+0x1f0>)
   10ad2:	4798      	blx	r3
   10ad4:	2330      	movs	r3, #48	; 0x30
   10ad6:	18fb      	adds	r3, r7, r3
   10ad8:	881a      	ldrh	r2, [r3, #0]
   10ada:	4b0f      	ldr	r3, [pc, #60]	; (10b18 <Socket_ReadSocketData+0x1f4>)
   10adc:	0011      	movs	r1, r2
   10ade:	0018      	movs	r0, r3
   10ae0:	4b0c      	ldr	r3, [pc, #48]	; (10b14 <Socket_ReadSocketData+0x1f0>)
   10ae2:	4798      	blx	r3
   10ae4:	4b0d      	ldr	r3, [pc, #52]	; (10b1c <Socket_ReadSocketData+0x1f8>)
   10ae6:	0018      	movs	r0, r3
   10ae8:	4b0a      	ldr	r3, [pc, #40]	; (10b14 <Socket_ReadSocketData+0x1f0>)
   10aea:	4798      	blx	r3
				break;
   10aec:	e006      	b.n	10afc <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   10aee:	2330      	movs	r3, #48	; 0x30
   10af0:	18fb      	adds	r3, r7, r3
   10af2:	881b      	ldrh	r3, [r3, #0]
   10af4:	2b00      	cmp	r3, #0
   10af6:	d000      	beq.n	10afa <Socket_ReadSocketData+0x1d6>
   10af8:	e753      	b.n	109a2 <Socket_ReadSocketData+0x7e>
	}
}
   10afa:	e7ff      	b.n	10afc <Socket_ReadSocketData+0x1d8>
   10afc:	46c0      	nop			; (mov r8, r8)
   10afe:	46bd      	mov	sp, r7
   10b00:	b009      	add	sp, #36	; 0x24
   10b02:	bd90      	pop	{r4, r7, pc}
   10b04:	20005484 	.word	0x20005484
   10b08:	0000d31d 	.word	0x0000d31d
   10b0c:	20005534 	.word	0x20005534
   10b10:	000247a0 	.word	0x000247a0
   10b14:	00009a6d 	.word	0x00009a6d
   10b18:	000247ac 	.word	0x000247ac
   10b1c:	000247c0 	.word	0x000247c0

00010b20 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   10b20:	b590      	push	{r4, r7, lr}
   10b22:	b0bb      	sub	sp, #236	; 0xec
   10b24:	af02      	add	r7, sp, #8
   10b26:	603a      	str	r2, [r7, #0]
   10b28:	1dfb      	adds	r3, r7, #7
   10b2a:	1c02      	adds	r2, r0, #0
   10b2c:	701a      	strb	r2, [r3, #0]
   10b2e:	1d3b      	adds	r3, r7, #4
   10b30:	1c0a      	adds	r2, r1, #0
   10b32:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   10b34:	1dfb      	adds	r3, r7, #7
   10b36:	781b      	ldrb	r3, [r3, #0]
   10b38:	2b41      	cmp	r3, #65	; 0x41
   10b3a:	d003      	beq.n	10b44 <m2m_ip_cb+0x24>
   10b3c:	1dfb      	adds	r3, r7, #7
   10b3e:	781b      	ldrb	r3, [r3, #0]
   10b40:	2b54      	cmp	r3, #84	; 0x54
   10b42:	d120      	bne.n	10b86 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   10b44:	23cc      	movs	r3, #204	; 0xcc
   10b46:	18f9      	adds	r1, r7, r3
   10b48:	6838      	ldr	r0, [r7, #0]
   10b4a:	2300      	movs	r3, #0
   10b4c:	2204      	movs	r2, #4
   10b4e:	4c98      	ldr	r4, [pc, #608]	; (10db0 <m2m_ip_cb+0x290>)
   10b50:	47a0      	blx	r4
   10b52:	1e03      	subs	r3, r0, #0
   10b54:	d000      	beq.n	10b58 <m2m_ip_cb+0x38>
   10b56:	e275      	b.n	11044 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   10b58:	23cc      	movs	r3, #204	; 0xcc
   10b5a:	18fb      	adds	r3, r7, r3
   10b5c:	2201      	movs	r2, #1
   10b5e:	569a      	ldrsb	r2, [r3, r2]
   10b60:	23c8      	movs	r3, #200	; 0xc8
   10b62:	18fb      	adds	r3, r7, r3
   10b64:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   10b66:	4b93      	ldr	r3, [pc, #588]	; (10db4 <m2m_ip_cb+0x294>)
   10b68:	681b      	ldr	r3, [r3, #0]
   10b6a:	2b00      	cmp	r3, #0
   10b6c:	d100      	bne.n	10b70 <m2m_ip_cb+0x50>
   10b6e:	e269      	b.n	11044 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   10b70:	4b90      	ldr	r3, [pc, #576]	; (10db4 <m2m_ip_cb+0x294>)
   10b72:	681b      	ldr	r3, [r3, #0]
   10b74:	22cc      	movs	r2, #204	; 0xcc
   10b76:	18ba      	adds	r2, r7, r2
   10b78:	2000      	movs	r0, #0
   10b7a:	5610      	ldrsb	r0, [r2, r0]
   10b7c:	22c8      	movs	r2, #200	; 0xc8
   10b7e:	18ba      	adds	r2, r7, r2
   10b80:	2101      	movs	r1, #1
   10b82:	4798      	blx	r3
	{
   10b84:	e25e      	b.n	11044 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   10b86:	1dfb      	adds	r3, r7, #7
   10b88:	781b      	ldrb	r3, [r3, #0]
   10b8a:	2b42      	cmp	r3, #66	; 0x42
   10b8c:	d120      	bne.n	10bd0 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   10b8e:	23c4      	movs	r3, #196	; 0xc4
   10b90:	18f9      	adds	r1, r7, r3
   10b92:	6838      	ldr	r0, [r7, #0]
   10b94:	2300      	movs	r3, #0
   10b96:	2204      	movs	r2, #4
   10b98:	4c85      	ldr	r4, [pc, #532]	; (10db0 <m2m_ip_cb+0x290>)
   10b9a:	47a0      	blx	r4
   10b9c:	1e03      	subs	r3, r0, #0
   10b9e:	d000      	beq.n	10ba2 <m2m_ip_cb+0x82>
   10ba0:	e257      	b.n	11052 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   10ba2:	23c4      	movs	r3, #196	; 0xc4
   10ba4:	18fb      	adds	r3, r7, r3
   10ba6:	2201      	movs	r2, #1
   10ba8:	569a      	ldrsb	r2, [r3, r2]
   10baa:	23c0      	movs	r3, #192	; 0xc0
   10bac:	18fb      	adds	r3, r7, r3
   10bae:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   10bb0:	4b80      	ldr	r3, [pc, #512]	; (10db4 <m2m_ip_cb+0x294>)
   10bb2:	681b      	ldr	r3, [r3, #0]
   10bb4:	2b00      	cmp	r3, #0
   10bb6:	d100      	bne.n	10bba <m2m_ip_cb+0x9a>
   10bb8:	e24b      	b.n	11052 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   10bba:	4b7e      	ldr	r3, [pc, #504]	; (10db4 <m2m_ip_cb+0x294>)
   10bbc:	681b      	ldr	r3, [r3, #0]
   10bbe:	22c4      	movs	r2, #196	; 0xc4
   10bc0:	18ba      	adds	r2, r7, r2
   10bc2:	2000      	movs	r0, #0
   10bc4:	5610      	ldrsb	r0, [r2, r0]
   10bc6:	22c0      	movs	r2, #192	; 0xc0
   10bc8:	18ba      	adds	r2, r7, r2
   10bca:	2102      	movs	r1, #2
   10bcc:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   10bce:	e240      	b.n	11052 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   10bd0:	1dfb      	adds	r3, r7, #7
   10bd2:	781b      	ldrb	r3, [r3, #0]
   10bd4:	2b43      	cmp	r3, #67	; 0x43
   10bd6:	d000      	beq.n	10bda <m2m_ip_cb+0xba>
   10bd8:	e086      	b.n	10ce8 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   10bda:	23b4      	movs	r3, #180	; 0xb4
   10bdc:	18f9      	adds	r1, r7, r3
   10bde:	6838      	ldr	r0, [r7, #0]
   10be0:	2300      	movs	r3, #0
   10be2:	220c      	movs	r2, #12
   10be4:	4c72      	ldr	r4, [pc, #456]	; (10db0 <m2m_ip_cb+0x290>)
   10be6:	47a0      	blx	r4
   10be8:	1e03      	subs	r3, r0, #0
   10bea:	d000      	beq.n	10bee <m2m_ip_cb+0xce>
   10bec:	e231      	b.n	11052 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   10bee:	23b4      	movs	r3, #180	; 0xb4
   10bf0:	18fb      	adds	r3, r7, r3
   10bf2:	7a5b      	ldrb	r3, [r3, #9]
   10bf4:	b25b      	sxtb	r3, r3
   10bf6:	2b00      	cmp	r3, #0
   10bf8:	db4f      	blt.n	10c9a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   10bfa:	23b4      	movs	r3, #180	; 0xb4
   10bfc:	18fb      	adds	r3, r7, r3
   10bfe:	7a5b      	ldrb	r3, [r3, #9]
   10c00:	b25b      	sxtb	r3, r3
   10c02:	0018      	movs	r0, r3
   10c04:	23b4      	movs	r3, #180	; 0xb4
   10c06:	18fb      	adds	r3, r7, r3
   10c08:	7a1b      	ldrb	r3, [r3, #8]
   10c0a:	b25b      	sxtb	r3, r3
   10c0c:	4a6a      	ldr	r2, [pc, #424]	; (10db8 <m2m_ip_cb+0x298>)
   10c0e:	011b      	lsls	r3, r3, #4
   10c10:	18d3      	adds	r3, r2, r3
   10c12:	330b      	adds	r3, #11
   10c14:	781b      	ldrb	r3, [r3, #0]
   10c16:	b2d9      	uxtb	r1, r3
   10c18:	4a67      	ldr	r2, [pc, #412]	; (10db8 <m2m_ip_cb+0x298>)
   10c1a:	0103      	lsls	r3, r0, #4
   10c1c:	18d3      	adds	r3, r2, r3
   10c1e:	330b      	adds	r3, #11
   10c20:	1c0a      	adds	r2, r1, #0
   10c22:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   10c24:	23b4      	movs	r3, #180	; 0xb4
   10c26:	18fb      	adds	r3, r7, r3
   10c28:	7a5b      	ldrb	r3, [r3, #9]
   10c2a:	b25b      	sxtb	r3, r3
   10c2c:	4a62      	ldr	r2, [pc, #392]	; (10db8 <m2m_ip_cb+0x298>)
   10c2e:	011b      	lsls	r3, r3, #4
   10c30:	18d3      	adds	r3, r2, r3
   10c32:	330a      	adds	r3, #10
   10c34:	2201      	movs	r2, #1
   10c36:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   10c38:	23b4      	movs	r3, #180	; 0xb4
   10c3a:	18fb      	adds	r3, r7, r3
   10c3c:	7a5b      	ldrb	r3, [r3, #9]
   10c3e:	b25b      	sxtb	r3, r3
   10c40:	0018      	movs	r0, r3
   10c42:	23b4      	movs	r3, #180	; 0xb4
   10c44:	18fb      	adds	r3, r7, r3
   10c46:	895b      	ldrh	r3, [r3, #10]
   10c48:	3b08      	subs	r3, #8
   10c4a:	b299      	uxth	r1, r3
   10c4c:	4a5a      	ldr	r2, [pc, #360]	; (10db8 <m2m_ip_cb+0x298>)
   10c4e:	0103      	lsls	r3, r0, #4
   10c50:	18d3      	adds	r3, r2, r3
   10c52:	3308      	adds	r3, #8
   10c54:	1c0a      	adds	r2, r1, #0
   10c56:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   10c58:	4b58      	ldr	r3, [pc, #352]	; (10dbc <m2m_ip_cb+0x29c>)
   10c5a:	881b      	ldrh	r3, [r3, #0]
   10c5c:	b29b      	uxth	r3, r3
   10c5e:	3301      	adds	r3, #1
   10c60:	b29a      	uxth	r2, r3
   10c62:	4b56      	ldr	r3, [pc, #344]	; (10dbc <m2m_ip_cb+0x29c>)
   10c64:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   10c66:	4b55      	ldr	r3, [pc, #340]	; (10dbc <m2m_ip_cb+0x29c>)
   10c68:	881b      	ldrh	r3, [r3, #0]
   10c6a:	b29b      	uxth	r3, r3
   10c6c:	2b00      	cmp	r3, #0
   10c6e:	d106      	bne.n	10c7e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   10c70:	4b52      	ldr	r3, [pc, #328]	; (10dbc <m2m_ip_cb+0x29c>)
   10c72:	881b      	ldrh	r3, [r3, #0]
   10c74:	b29b      	uxth	r3, r3
   10c76:	3301      	adds	r3, #1
   10c78:	b29a      	uxth	r2, r3
   10c7a:	4b50      	ldr	r3, [pc, #320]	; (10dbc <m2m_ip_cb+0x29c>)
   10c7c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   10c7e:	23b4      	movs	r3, #180	; 0xb4
   10c80:	18fb      	adds	r3, r7, r3
   10c82:	7a5b      	ldrb	r3, [r3, #9]
   10c84:	b25b      	sxtb	r3, r3
   10c86:	0018      	movs	r0, r3
   10c88:	4b4c      	ldr	r3, [pc, #304]	; (10dbc <m2m_ip_cb+0x29c>)
   10c8a:	881b      	ldrh	r3, [r3, #0]
   10c8c:	b299      	uxth	r1, r3
   10c8e:	4a4a      	ldr	r2, [pc, #296]	; (10db8 <m2m_ip_cb+0x298>)
   10c90:	0103      	lsls	r3, r0, #4
   10c92:	18d3      	adds	r3, r2, r3
   10c94:	3306      	adds	r3, #6
   10c96:	1c0a      	adds	r2, r1, #0
   10c98:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   10c9a:	23b4      	movs	r3, #180	; 0xb4
   10c9c:	18fb      	adds	r3, r7, r3
   10c9e:	2209      	movs	r2, #9
   10ca0:	569a      	ldrsb	r2, [r3, r2]
   10ca2:	23a0      	movs	r3, #160	; 0xa0
   10ca4:	18fb      	adds	r3, r7, r3
   10ca6:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   10ca8:	23a0      	movs	r3, #160	; 0xa0
   10caa:	18fb      	adds	r3, r7, r3
   10cac:	2202      	movs	r2, #2
   10cae:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   10cb0:	23b4      	movs	r3, #180	; 0xb4
   10cb2:	18fb      	adds	r3, r7, r3
   10cb4:	885a      	ldrh	r2, [r3, #2]
   10cb6:	23a0      	movs	r3, #160	; 0xa0
   10cb8:	18fb      	adds	r3, r7, r3
   10cba:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   10cbc:	23b4      	movs	r3, #180	; 0xb4
   10cbe:	18fb      	adds	r3, r7, r3
   10cc0:	685a      	ldr	r2, [r3, #4]
   10cc2:	23a0      	movs	r3, #160	; 0xa0
   10cc4:	18fb      	adds	r3, r7, r3
   10cc6:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   10cc8:	4b3a      	ldr	r3, [pc, #232]	; (10db4 <m2m_ip_cb+0x294>)
   10cca:	681b      	ldr	r3, [r3, #0]
   10ccc:	2b00      	cmp	r3, #0
   10cce:	d100      	bne.n	10cd2 <m2m_ip_cb+0x1b2>
   10cd0:	e1bf      	b.n	11052 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   10cd2:	4b38      	ldr	r3, [pc, #224]	; (10db4 <m2m_ip_cb+0x294>)
   10cd4:	681b      	ldr	r3, [r3, #0]
   10cd6:	22b4      	movs	r2, #180	; 0xb4
   10cd8:	18ba      	adds	r2, r7, r2
   10cda:	2008      	movs	r0, #8
   10cdc:	5610      	ldrsb	r0, [r2, r0]
   10cde:	22a0      	movs	r2, #160	; 0xa0
   10ce0:	18ba      	adds	r2, r7, r2
   10ce2:	2104      	movs	r1, #4
   10ce4:	4798      	blx	r3
}
   10ce6:	e1b4      	b.n	11052 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   10ce8:	1dfb      	adds	r3, r7, #7
   10cea:	781b      	ldrb	r3, [r3, #0]
   10cec:	2b44      	cmp	r3, #68	; 0x44
   10cee:	d003      	beq.n	10cf8 <m2m_ip_cb+0x1d8>
   10cf0:	1dfb      	adds	r3, r7, #7
   10cf2:	781b      	ldrb	r3, [r3, #0]
   10cf4:	2b4b      	cmp	r3, #75	; 0x4b
   10cf6:	d13d      	bne.n	10d74 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   10cf8:	239c      	movs	r3, #156	; 0x9c
   10cfa:	18f9      	adds	r1, r7, r3
   10cfc:	6838      	ldr	r0, [r7, #0]
   10cfe:	2300      	movs	r3, #0
   10d00:	2204      	movs	r2, #4
   10d02:	4c2b      	ldr	r4, [pc, #172]	; (10db0 <m2m_ip_cb+0x290>)
   10d04:	47a0      	blx	r4
   10d06:	1e03      	subs	r3, r0, #0
   10d08:	d000      	beq.n	10d0c <m2m_ip_cb+0x1ec>
   10d0a:	e19d      	b.n	11048 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   10d0c:	239c      	movs	r3, #156	; 0x9c
   10d0e:	18fb      	adds	r3, r7, r3
   10d10:	2200      	movs	r2, #0
   10d12:	569a      	ldrsb	r2, [r3, r2]
   10d14:	2398      	movs	r3, #152	; 0x98
   10d16:	18fb      	adds	r3, r7, r3
   10d18:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   10d1a:	239c      	movs	r3, #156	; 0x9c
   10d1c:	18fb      	adds	r3, r7, r3
   10d1e:	2201      	movs	r2, #1
   10d20:	569a      	ldrsb	r2, [r3, r2]
   10d22:	2398      	movs	r3, #152	; 0x98
   10d24:	18fb      	adds	r3, r7, r3
   10d26:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   10d28:	239c      	movs	r3, #156	; 0x9c
   10d2a:	18fb      	adds	r3, r7, r3
   10d2c:	785b      	ldrb	r3, [r3, #1]
   10d2e:	b25b      	sxtb	r3, r3
   10d30:	2b00      	cmp	r3, #0
   10d32:	d10f      	bne.n	10d54 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   10d34:	239c      	movs	r3, #156	; 0x9c
   10d36:	18fb      	adds	r3, r7, r3
   10d38:	781b      	ldrb	r3, [r3, #0]
   10d3a:	b25b      	sxtb	r3, r3
   10d3c:	0018      	movs	r0, r3
   10d3e:	239c      	movs	r3, #156	; 0x9c
   10d40:	18fb      	adds	r3, r7, r3
   10d42:	885b      	ldrh	r3, [r3, #2]
   10d44:	3b08      	subs	r3, #8
   10d46:	b299      	uxth	r1, r3
   10d48:	4a1b      	ldr	r2, [pc, #108]	; (10db8 <m2m_ip_cb+0x298>)
   10d4a:	0103      	lsls	r3, r0, #4
   10d4c:	18d3      	adds	r3, r2, r3
   10d4e:	3308      	adds	r3, #8
   10d50:	1c0a      	adds	r2, r1, #0
   10d52:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   10d54:	4b17      	ldr	r3, [pc, #92]	; (10db4 <m2m_ip_cb+0x294>)
   10d56:	681b      	ldr	r3, [r3, #0]
   10d58:	2b00      	cmp	r3, #0
   10d5a:	d100      	bne.n	10d5e <m2m_ip_cb+0x23e>
   10d5c:	e174      	b.n	11048 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   10d5e:	4b15      	ldr	r3, [pc, #84]	; (10db4 <m2m_ip_cb+0x294>)
   10d60:	681b      	ldr	r3, [r3, #0]
   10d62:	229c      	movs	r2, #156	; 0x9c
   10d64:	18ba      	adds	r2, r7, r2
   10d66:	2000      	movs	r0, #0
   10d68:	5610      	ldrsb	r0, [r2, r0]
   10d6a:	2298      	movs	r2, #152	; 0x98
   10d6c:	18ba      	adds	r2, r7, r2
   10d6e:	2105      	movs	r1, #5
   10d70:	4798      	blx	r3
	{
   10d72:	e169      	b.n	11048 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   10d74:	1dfb      	adds	r3, r7, #7
   10d76:	781b      	ldrb	r3, [r3, #0]
   10d78:	2b4a      	cmp	r3, #74	; 0x4a
   10d7a:	d123      	bne.n	10dc4 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   10d7c:	230c      	movs	r3, #12
   10d7e:	18f9      	adds	r1, r7, r3
   10d80:	6838      	ldr	r0, [r7, #0]
   10d82:	2300      	movs	r3, #0
   10d84:	2244      	movs	r2, #68	; 0x44
   10d86:	4c0a      	ldr	r4, [pc, #40]	; (10db0 <m2m_ip_cb+0x290>)
   10d88:	47a0      	blx	r4
   10d8a:	1e03      	subs	r3, r0, #0
   10d8c:	d000      	beq.n	10d90 <m2m_ip_cb+0x270>
   10d8e:	e160      	b.n	11052 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   10d90:	4b0b      	ldr	r3, [pc, #44]	; (10dc0 <m2m_ip_cb+0x2a0>)
   10d92:	681b      	ldr	r3, [r3, #0]
   10d94:	2b00      	cmp	r3, #0
   10d96:	d100      	bne.n	10d9a <m2m_ip_cb+0x27a>
   10d98:	e15b      	b.n	11052 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   10d9a:	4b09      	ldr	r3, [pc, #36]	; (10dc0 <m2m_ip_cb+0x2a0>)
   10d9c:	681a      	ldr	r2, [r3, #0]
   10d9e:	230c      	movs	r3, #12
   10da0:	18fb      	adds	r3, r7, r3
   10da2:	6c19      	ldr	r1, [r3, #64]	; 0x40
   10da4:	230c      	movs	r3, #12
   10da6:	18fb      	adds	r3, r7, r3
   10da8:	0018      	movs	r0, r3
   10daa:	4790      	blx	r2
}
   10dac:	e151      	b.n	11052 <m2m_ip_cb+0x532>
   10dae:	46c0      	nop			; (mov r8, r8)
   10db0:	0000d31d 	.word	0x0000d31d
   10db4:	20005534 	.word	0x20005534
   10db8:	20005484 	.word	0x20005484
   10dbc:	20003d1a 	.word	0x20003d1a
   10dc0:	2000553c 	.word	0x2000553c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   10dc4:	1dfb      	adds	r3, r7, #7
   10dc6:	781b      	ldrb	r3, [r3, #0]
   10dc8:	2b46      	cmp	r3, #70	; 0x46
   10dca:	d008      	beq.n	10dde <m2m_ip_cb+0x2be>
   10dcc:	1dfb      	adds	r3, r7, #7
   10dce:	781b      	ldrb	r3, [r3, #0]
   10dd0:	2b48      	cmp	r3, #72	; 0x48
   10dd2:	d004      	beq.n	10dde <m2m_ip_cb+0x2be>
   10dd4:	1dfb      	adds	r3, r7, #7
   10dd6:	781b      	ldrb	r3, [r3, #0]
   10dd8:	2b4d      	cmp	r3, #77	; 0x4d
   10dda:	d000      	beq.n	10dde <m2m_ip_cb+0x2be>
   10ddc:	e0b4      	b.n	10f48 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   10dde:	23df      	movs	r3, #223	; 0xdf
   10de0:	18fb      	adds	r3, r7, r3
   10de2:	2206      	movs	r2, #6
   10de4:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   10de6:	1dfb      	adds	r3, r7, #7
   10de8:	781b      	ldrb	r3, [r3, #0]
   10dea:	2b48      	cmp	r3, #72	; 0x48
   10dec:	d103      	bne.n	10df6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   10dee:	23df      	movs	r3, #223	; 0xdf
   10df0:	18fb      	adds	r3, r7, r3
   10df2:	2209      	movs	r2, #9
   10df4:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   10df6:	23d8      	movs	r3, #216	; 0xd8
   10df8:	18fb      	adds	r3, r7, r3
   10dfa:	2210      	movs	r2, #16
   10dfc:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   10dfe:	23d8      	movs	r3, #216	; 0xd8
   10e00:	18fb      	adds	r3, r7, r3
   10e02:	881a      	ldrh	r2, [r3, #0]
   10e04:	2388      	movs	r3, #136	; 0x88
   10e06:	18f9      	adds	r1, r7, r3
   10e08:	6838      	ldr	r0, [r7, #0]
   10e0a:	2300      	movs	r3, #0
   10e0c:	4c93      	ldr	r4, [pc, #588]	; (1105c <m2m_ip_cb+0x53c>)
   10e0e:	47a0      	blx	r4
   10e10:	1e03      	subs	r3, r0, #0
   10e12:	d000      	beq.n	10e16 <m2m_ip_cb+0x2f6>
   10e14:	e11a      	b.n	1104c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   10e16:	23d6      	movs	r3, #214	; 0xd6
   10e18:	18fb      	adds	r3, r7, r3
   10e1a:	2200      	movs	r2, #0
   10e1c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   10e1e:	23d5      	movs	r3, #213	; 0xd5
   10e20:	18fb      	adds	r3, r7, r3
   10e22:	2288      	movs	r2, #136	; 0x88
   10e24:	18ba      	adds	r2, r7, r2
   10e26:	7b12      	ldrb	r2, [r2, #12]
   10e28:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   10e2a:	23d6      	movs	r3, #214	; 0xd6
   10e2c:	18fb      	adds	r3, r7, r3
   10e2e:	2288      	movs	r2, #136	; 0x88
   10e30:	18ba      	adds	r2, r7, r2
   10e32:	89d2      	ldrh	r2, [r2, #14]
   10e34:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   10e36:	23d5      	movs	r3, #213	; 0xd5
   10e38:	18fb      	adds	r3, r7, r3
   10e3a:	781b      	ldrb	r3, [r3, #0]
   10e3c:	b25b      	sxtb	r3, r3
   10e3e:	4a88      	ldr	r2, [pc, #544]	; (11060 <m2m_ip_cb+0x540>)
   10e40:	011b      	lsls	r3, r3, #4
   10e42:	18d3      	adds	r3, r2, r3
   10e44:	330c      	adds	r3, #12
   10e46:	2200      	movs	r2, #0
   10e48:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   10e4a:	23d2      	movs	r3, #210	; 0xd2
   10e4c:	18fb      	adds	r3, r7, r3
   10e4e:	2288      	movs	r2, #136	; 0x88
   10e50:	18ba      	adds	r2, r7, r2
   10e52:	8912      	ldrh	r2, [r2, #8]
   10e54:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   10e56:	23d0      	movs	r3, #208	; 0xd0
   10e58:	18fb      	adds	r3, r7, r3
   10e5a:	2288      	movs	r2, #136	; 0x88
   10e5c:	18ba      	adds	r2, r7, r2
   10e5e:	8952      	ldrh	r2, [r2, #10]
   10e60:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   10e62:	2388      	movs	r3, #136	; 0x88
   10e64:	18fb      	adds	r3, r7, r3
   10e66:	885a      	ldrh	r2, [r3, #2]
   10e68:	2370      	movs	r3, #112	; 0x70
   10e6a:	18fb      	adds	r3, r7, r3
   10e6c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   10e6e:	2388      	movs	r3, #136	; 0x88
   10e70:	18fb      	adds	r3, r7, r3
   10e72:	685a      	ldr	r2, [r3, #4]
   10e74:	2370      	movs	r3, #112	; 0x70
   10e76:	18fb      	adds	r3, r7, r3
   10e78:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   10e7a:	23d5      	movs	r3, #213	; 0xd5
   10e7c:	18fb      	adds	r3, r7, r3
   10e7e:	781b      	ldrb	r3, [r3, #0]
   10e80:	b25b      	sxtb	r3, r3
   10e82:	4a77      	ldr	r2, [pc, #476]	; (11060 <m2m_ip_cb+0x540>)
   10e84:	011b      	lsls	r3, r3, #4
   10e86:	18d3      	adds	r3, r2, r3
   10e88:	3306      	adds	r3, #6
   10e8a:	881b      	ldrh	r3, [r3, #0]
   10e8c:	b29b      	uxth	r3, r3
   10e8e:	22d6      	movs	r2, #214	; 0xd6
   10e90:	18ba      	adds	r2, r7, r2
   10e92:	8812      	ldrh	r2, [r2, #0]
   10e94:	429a      	cmp	r2, r3
   10e96:	d148      	bne.n	10f2a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   10e98:	23d2      	movs	r3, #210	; 0xd2
   10e9a:	18fb      	adds	r3, r7, r3
   10e9c:	2200      	movs	r2, #0
   10e9e:	5e9b      	ldrsh	r3, [r3, r2]
   10ea0:	2b00      	cmp	r3, #0
   10ea2:	dd25      	ble.n	10ef0 <m2m_ip_cb+0x3d0>
   10ea4:	23d2      	movs	r3, #210	; 0xd2
   10ea6:	18fb      	adds	r3, r7, r3
   10ea8:	2200      	movs	r2, #0
   10eaa:	5e9a      	ldrsh	r2, [r3, r2]
   10eac:	1d3b      	adds	r3, r7, #4
   10eae:	881b      	ldrh	r3, [r3, #0]
   10eb0:	429a      	cmp	r2, r3
   10eb2:	da1d      	bge.n	10ef0 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   10eb4:	23d0      	movs	r3, #208	; 0xd0
   10eb6:	18fb      	adds	r3, r7, r3
   10eb8:	881b      	ldrh	r3, [r3, #0]
   10eba:	683a      	ldr	r2, [r7, #0]
   10ebc:	18d3      	adds	r3, r2, r3
   10ebe:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   10ec0:	23d8      	movs	r3, #216	; 0xd8
   10ec2:	18fb      	adds	r3, r7, r3
   10ec4:	22d2      	movs	r2, #210	; 0xd2
   10ec6:	18ba      	adds	r2, r7, r2
   10ec8:	8812      	ldrh	r2, [r2, #0]
   10eca:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   10ecc:	683c      	ldr	r4, [r7, #0]
   10ece:	23df      	movs	r3, #223	; 0xdf
   10ed0:	18fb      	adds	r3, r7, r3
   10ed2:	781a      	ldrb	r2, [r3, #0]
   10ed4:	2370      	movs	r3, #112	; 0x70
   10ed6:	18f9      	adds	r1, r7, r3
   10ed8:	23d5      	movs	r3, #213	; 0xd5
   10eda:	18fb      	adds	r3, r7, r3
   10edc:	2000      	movs	r0, #0
   10ede:	5618      	ldrsb	r0, [r3, r0]
   10ee0:	23d8      	movs	r3, #216	; 0xd8
   10ee2:	18fb      	adds	r3, r7, r3
   10ee4:	881b      	ldrh	r3, [r3, #0]
   10ee6:	9300      	str	r3, [sp, #0]
   10ee8:	0023      	movs	r3, r4
   10eea:	4c5e      	ldr	r4, [pc, #376]	; (11064 <m2m_ip_cb+0x544>)
   10eec:	47a0      	blx	r4
	{
   10eee:	e0ad      	b.n	1104c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   10ef0:	2370      	movs	r3, #112	; 0x70
   10ef2:	18fb      	adds	r3, r7, r3
   10ef4:	22d2      	movs	r2, #210	; 0xd2
   10ef6:	18ba      	adds	r2, r7, r2
   10ef8:	8812      	ldrh	r2, [r2, #0]
   10efa:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   10efc:	2370      	movs	r3, #112	; 0x70
   10efe:	18fb      	adds	r3, r7, r3
   10f00:	2200      	movs	r2, #0
   10f02:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   10f04:	4b58      	ldr	r3, [pc, #352]	; (11068 <m2m_ip_cb+0x548>)
   10f06:	681b      	ldr	r3, [r3, #0]
   10f08:	2b00      	cmp	r3, #0
   10f0a:	d100      	bne.n	10f0e <m2m_ip_cb+0x3ee>
   10f0c:	e09e      	b.n	1104c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   10f0e:	4b56      	ldr	r3, [pc, #344]	; (11068 <m2m_ip_cb+0x548>)
   10f10:	681b      	ldr	r3, [r3, #0]
   10f12:	2270      	movs	r2, #112	; 0x70
   10f14:	18bc      	adds	r4, r7, r2
   10f16:	22df      	movs	r2, #223	; 0xdf
   10f18:	18ba      	adds	r2, r7, r2
   10f1a:	7811      	ldrb	r1, [r2, #0]
   10f1c:	22d5      	movs	r2, #213	; 0xd5
   10f1e:	18ba      	adds	r2, r7, r2
   10f20:	2000      	movs	r0, #0
   10f22:	5610      	ldrsb	r0, [r2, r0]
   10f24:	0022      	movs	r2, r4
   10f26:	4798      	blx	r3
	{
   10f28:	e090      	b.n	1104c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   10f2a:	23d8      	movs	r3, #216	; 0xd8
   10f2c:	18fa      	adds	r2, r7, r3
   10f2e:	1d3b      	adds	r3, r7, #4
   10f30:	8812      	ldrh	r2, [r2, #0]
   10f32:	881b      	ldrh	r3, [r3, #0]
   10f34:	429a      	cmp	r2, r3
   10f36:	d300      	bcc.n	10f3a <m2m_ip_cb+0x41a>
   10f38:	e088      	b.n	1104c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   10f3a:	2301      	movs	r3, #1
   10f3c:	2200      	movs	r2, #0
   10f3e:	2100      	movs	r1, #0
   10f40:	2000      	movs	r0, #0
   10f42:	4c46      	ldr	r4, [pc, #280]	; (1105c <m2m_ip_cb+0x53c>)
   10f44:	47a0      	blx	r4
	{
   10f46:	e081      	b.n	1104c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   10f48:	1dfb      	adds	r3, r7, #7
   10f4a:	781b      	ldrb	r3, [r3, #0]
   10f4c:	2b45      	cmp	r3, #69	; 0x45
   10f4e:	d007      	beq.n	10f60 <m2m_ip_cb+0x440>
   10f50:	1dfb      	adds	r3, r7, #7
   10f52:	781b      	ldrb	r3, [r3, #0]
   10f54:	2b47      	cmp	r3, #71	; 0x47
   10f56:	d003      	beq.n	10f60 <m2m_ip_cb+0x440>
   10f58:	1dfb      	adds	r3, r7, #7
   10f5a:	781b      	ldrb	r3, [r3, #0]
   10f5c:	2b4c      	cmp	r3, #76	; 0x4c
   10f5e:	d14c      	bne.n	10ffa <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   10f60:	23de      	movs	r3, #222	; 0xde
   10f62:	18fb      	adds	r3, r7, r3
   10f64:	2207      	movs	r2, #7
   10f66:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   10f68:	1dfb      	adds	r3, r7, #7
   10f6a:	781b      	ldrb	r3, [r3, #0]
   10f6c:	2b47      	cmp	r3, #71	; 0x47
   10f6e:	d103      	bne.n	10f78 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   10f70:	23de      	movs	r3, #222	; 0xde
   10f72:	18fb      	adds	r3, r7, r3
   10f74:	2208      	movs	r2, #8
   10f76:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   10f78:	2364      	movs	r3, #100	; 0x64
   10f7a:	18f9      	adds	r1, r7, r3
   10f7c:	6838      	ldr	r0, [r7, #0]
   10f7e:	2300      	movs	r3, #0
   10f80:	2208      	movs	r2, #8
   10f82:	4c36      	ldr	r4, [pc, #216]	; (1105c <m2m_ip_cb+0x53c>)
   10f84:	47a0      	blx	r4
   10f86:	1e03      	subs	r3, r0, #0
   10f88:	d162      	bne.n	11050 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   10f8a:	23dc      	movs	r3, #220	; 0xdc
   10f8c:	18fb      	adds	r3, r7, r3
   10f8e:	2200      	movs	r2, #0
   10f90:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   10f92:	23db      	movs	r3, #219	; 0xdb
   10f94:	18fb      	adds	r3, r7, r3
   10f96:	2264      	movs	r2, #100	; 0x64
   10f98:	18ba      	adds	r2, r7, r2
   10f9a:	7812      	ldrb	r2, [r2, #0]
   10f9c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   10f9e:	23dc      	movs	r3, #220	; 0xdc
   10fa0:	18fb      	adds	r3, r7, r3
   10fa2:	2264      	movs	r2, #100	; 0x64
   10fa4:	18ba      	adds	r2, r7, r2
   10fa6:	8892      	ldrh	r2, [r2, #4]
   10fa8:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   10faa:	2364      	movs	r3, #100	; 0x64
   10fac:	18fb      	adds	r3, r7, r3
   10fae:	2202      	movs	r2, #2
   10fb0:	5e9a      	ldrsh	r2, [r3, r2]
   10fb2:	236e      	movs	r3, #110	; 0x6e
   10fb4:	18fb      	adds	r3, r7, r3
   10fb6:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   10fb8:	23db      	movs	r3, #219	; 0xdb
   10fba:	18fb      	adds	r3, r7, r3
   10fbc:	781b      	ldrb	r3, [r3, #0]
   10fbe:	b25b      	sxtb	r3, r3
   10fc0:	4a27      	ldr	r2, [pc, #156]	; (11060 <m2m_ip_cb+0x540>)
   10fc2:	011b      	lsls	r3, r3, #4
   10fc4:	18d3      	adds	r3, r2, r3
   10fc6:	3306      	adds	r3, #6
   10fc8:	881b      	ldrh	r3, [r3, #0]
   10fca:	b29b      	uxth	r3, r3
   10fcc:	22dc      	movs	r2, #220	; 0xdc
   10fce:	18ba      	adds	r2, r7, r2
   10fd0:	8812      	ldrh	r2, [r2, #0]
   10fd2:	429a      	cmp	r2, r3
   10fd4:	d13c      	bne.n	11050 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   10fd6:	4b24      	ldr	r3, [pc, #144]	; (11068 <m2m_ip_cb+0x548>)
   10fd8:	681b      	ldr	r3, [r3, #0]
   10fda:	2b00      	cmp	r3, #0
   10fdc:	d038      	beq.n	11050 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   10fde:	4b22      	ldr	r3, [pc, #136]	; (11068 <m2m_ip_cb+0x548>)
   10fe0:	681b      	ldr	r3, [r3, #0]
   10fe2:	226e      	movs	r2, #110	; 0x6e
   10fe4:	18bc      	adds	r4, r7, r2
   10fe6:	22de      	movs	r2, #222	; 0xde
   10fe8:	18ba      	adds	r2, r7, r2
   10fea:	7811      	ldrb	r1, [r2, #0]
   10fec:	22db      	movs	r2, #219	; 0xdb
   10fee:	18ba      	adds	r2, r7, r2
   10ff0:	2000      	movs	r0, #0
   10ff2:	5610      	ldrsb	r0, [r2, r0]
   10ff4:	0022      	movs	r2, r4
   10ff6:	4798      	blx	r3
	{
   10ff8:	e02a      	b.n	11050 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   10ffa:	1dfb      	adds	r3, r7, #7
   10ffc:	781b      	ldrb	r3, [r3, #0]
   10ffe:	2b52      	cmp	r3, #82	; 0x52
   11000:	d127      	bne.n	11052 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   11002:	2350      	movs	r3, #80	; 0x50
   11004:	18f9      	adds	r1, r7, r3
   11006:	6838      	ldr	r0, [r7, #0]
   11008:	2301      	movs	r3, #1
   1100a:	2214      	movs	r2, #20
   1100c:	4c13      	ldr	r4, [pc, #76]	; (1105c <m2m_ip_cb+0x53c>)
   1100e:	47a0      	blx	r4
   11010:	1e03      	subs	r3, r0, #0
   11012:	d11e      	bne.n	11052 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   11014:	2350      	movs	r3, #80	; 0x50
   11016:	18fb      	adds	r3, r7, r3
   11018:	685b      	ldr	r3, [r3, #4]
   1101a:	001a      	movs	r2, r3
   1101c:	4b13      	ldr	r3, [pc, #76]	; (1106c <m2m_ip_cb+0x54c>)
   1101e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   11020:	4b12      	ldr	r3, [pc, #72]	; (1106c <m2m_ip_cb+0x54c>)
   11022:	681b      	ldr	r3, [r3, #0]
   11024:	2b00      	cmp	r3, #0
   11026:	d014      	beq.n	11052 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   11028:	4b10      	ldr	r3, [pc, #64]	; (1106c <m2m_ip_cb+0x54c>)
   1102a:	681c      	ldr	r4, [r3, #0]
   1102c:	2350      	movs	r3, #80	; 0x50
   1102e:	18fb      	adds	r3, r7, r3
   11030:	6818      	ldr	r0, [r3, #0]
   11032:	2350      	movs	r3, #80	; 0x50
   11034:	18fb      	adds	r3, r7, r3
   11036:	6899      	ldr	r1, [r3, #8]
   11038:	2350      	movs	r3, #80	; 0x50
   1103a:	18fb      	adds	r3, r7, r3
   1103c:	7c1b      	ldrb	r3, [r3, #16]
   1103e:	001a      	movs	r2, r3
   11040:	47a0      	blx	r4
}
   11042:	e006      	b.n	11052 <m2m_ip_cb+0x532>
	{
   11044:	46c0      	nop			; (mov r8, r8)
   11046:	e004      	b.n	11052 <m2m_ip_cb+0x532>
	{
   11048:	46c0      	nop			; (mov r8, r8)
   1104a:	e002      	b.n	11052 <m2m_ip_cb+0x532>
	{
   1104c:	46c0      	nop			; (mov r8, r8)
   1104e:	e000      	b.n	11052 <m2m_ip_cb+0x532>
	{
   11050:	46c0      	nop			; (mov r8, r8)
}
   11052:	46c0      	nop			; (mov r8, r8)
   11054:	46bd      	mov	sp, r7
   11056:	b039      	add	sp, #228	; 0xe4
   11058:	bd90      	pop	{r4, r7, pc}
   1105a:	46c0      	nop			; (mov r8, r8)
   1105c:	0000d31d 	.word	0x0000d31d
   11060:	20005484 	.word	0x20005484
   11064:	00010925 	.word	0x00010925
   11068:	20005534 	.word	0x20005534
   1106c:	20005538 	.word	0x20005538

00011070 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   11070:	b580      	push	{r7, lr}
   11072:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   11074:	4b0c      	ldr	r3, [pc, #48]	; (110a8 <socketInit+0x38>)
   11076:	781b      	ldrb	r3, [r3, #0]
   11078:	b2db      	uxtb	r3, r3
   1107a:	2b00      	cmp	r3, #0
   1107c:	d110      	bne.n	110a0 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   1107e:	4b0b      	ldr	r3, [pc, #44]	; (110ac <socketInit+0x3c>)
   11080:	22b0      	movs	r2, #176	; 0xb0
   11082:	2100      	movs	r1, #0
   11084:	0018      	movs	r0, r3
   11086:	4b0a      	ldr	r3, [pc, #40]	; (110b0 <socketInit+0x40>)
   11088:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   1108a:	4b0a      	ldr	r3, [pc, #40]	; (110b4 <socketInit+0x44>)
   1108c:	0019      	movs	r1, r3
   1108e:	2002      	movs	r0, #2
   11090:	4b09      	ldr	r3, [pc, #36]	; (110b8 <socketInit+0x48>)
   11092:	4798      	blx	r3
		gbSocketInit	= 1;
   11094:	4b04      	ldr	r3, [pc, #16]	; (110a8 <socketInit+0x38>)
   11096:	2201      	movs	r2, #1
   11098:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   1109a:	4b08      	ldr	r3, [pc, #32]	; (110bc <socketInit+0x4c>)
   1109c:	2200      	movs	r2, #0
   1109e:	801a      	strh	r2, [r3, #0]
	}
}
   110a0:	46c0      	nop			; (mov r8, r8)
   110a2:	46bd      	mov	sp, r7
   110a4:	bd80      	pop	{r7, pc}
   110a6:	46c0      	nop			; (mov r8, r8)
   110a8:	20003d1c 	.word	0x20003d1c
   110ac:	20005484 	.word	0x20005484
   110b0:	0000c7a1 	.word	0x0000c7a1
   110b4:	00010b21 	.word	0x00010b21
   110b8:	0000d49d 	.word	0x0000d49d
   110bc:	20003d1a 	.word	0x20003d1a

000110c0 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   110c0:	b580      	push	{r7, lr}
   110c2:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   110c4:	4b0a      	ldr	r3, [pc, #40]	; (110f0 <socketDeinit+0x30>)
   110c6:	22b0      	movs	r2, #176	; 0xb0
   110c8:	2100      	movs	r1, #0
   110ca:	0018      	movs	r0, r3
   110cc:	4b09      	ldr	r3, [pc, #36]	; (110f4 <socketDeinit+0x34>)
   110ce:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   110d0:	2100      	movs	r1, #0
   110d2:	2002      	movs	r0, #2
   110d4:	4b08      	ldr	r3, [pc, #32]	; (110f8 <socketDeinit+0x38>)
   110d6:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   110d8:	4b08      	ldr	r3, [pc, #32]	; (110fc <socketDeinit+0x3c>)
   110da:	2200      	movs	r2, #0
   110dc:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   110de:	4b08      	ldr	r3, [pc, #32]	; (11100 <socketDeinit+0x40>)
   110e0:	2200      	movs	r2, #0
   110e2:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   110e4:	4b07      	ldr	r3, [pc, #28]	; (11104 <socketDeinit+0x44>)
   110e6:	2200      	movs	r2, #0
   110e8:	701a      	strb	r2, [r3, #0]
}
   110ea:	46c0      	nop			; (mov r8, r8)
   110ec:	46bd      	mov	sp, r7
   110ee:	bd80      	pop	{r7, pc}
   110f0:	20005484 	.word	0x20005484
   110f4:	0000c7a1 	.word	0x0000c7a1
   110f8:	0000d49d 	.word	0x0000d49d
   110fc:	20005534 	.word	0x20005534
   11100:	2000553c 	.word	0x2000553c
   11104:	20003d1c 	.word	0x20003d1c

00011108 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   11108:	b580      	push	{r7, lr}
   1110a:	b082      	sub	sp, #8
   1110c:	af00      	add	r7, sp, #0
   1110e:	6078      	str	r0, [r7, #4]
   11110:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   11112:	4b05      	ldr	r3, [pc, #20]	; (11128 <registerSocketCallback+0x20>)
   11114:	687a      	ldr	r2, [r7, #4]
   11116:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   11118:	4b04      	ldr	r3, [pc, #16]	; (1112c <registerSocketCallback+0x24>)
   1111a:	683a      	ldr	r2, [r7, #0]
   1111c:	601a      	str	r2, [r3, #0]
}
   1111e:	46c0      	nop			; (mov r8, r8)
   11120:	46bd      	mov	sp, r7
   11122:	b002      	add	sp, #8
   11124:	bd80      	pop	{r7, pc}
   11126:	46c0      	nop			; (mov r8, r8)
   11128:	20005534 	.word	0x20005534
   1112c:	2000553c 	.word	0x2000553c

00011130 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   11130:	b590      	push	{r4, r7, lr}
   11132:	b08d      	sub	sp, #52	; 0x34
   11134:	af04      	add	r7, sp, #16
   11136:	0004      	movs	r4, r0
   11138:	0008      	movs	r0, r1
   1113a:	0011      	movs	r1, r2
   1113c:	1dbb      	adds	r3, r7, #6
   1113e:	1c22      	adds	r2, r4, #0
   11140:	801a      	strh	r2, [r3, #0]
   11142:	1d7b      	adds	r3, r7, #5
   11144:	1c02      	adds	r2, r0, #0
   11146:	701a      	strb	r2, [r3, #0]
   11148:	1d3b      	adds	r3, r7, #4
   1114a:	1c0a      	adds	r2, r1, #0
   1114c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   1114e:	231f      	movs	r3, #31
   11150:	18fb      	adds	r3, r7, r3
   11152:	22ff      	movs	r2, #255	; 0xff
   11154:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   11156:	1dbb      	adds	r3, r7, #6
   11158:	881b      	ldrh	r3, [r3, #0]
   1115a:	2b02      	cmp	r3, #2
   1115c:	d000      	beq.n	11160 <socket+0x30>
   1115e:	e0ce      	b.n	112fe <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   11160:	1d7b      	adds	r3, r7, #5
   11162:	781b      	ldrb	r3, [r3, #0]
   11164:	2b01      	cmp	r3, #1
   11166:	d135      	bne.n	111d4 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   11168:	231e      	movs	r3, #30
   1116a:	18fb      	adds	r3, r7, r3
   1116c:	2200      	movs	r2, #0
   1116e:	701a      	strb	r2, [r3, #0]
   11170:	e02a      	b.n	111c8 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   11172:	2317      	movs	r3, #23
   11174:	18fb      	adds	r3, r7, r3
   11176:	4a66      	ldr	r2, [pc, #408]	; (11310 <socket+0x1e0>)
   11178:	7812      	ldrb	r2, [r2, #0]
   1117a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   1117c:	4b64      	ldr	r3, [pc, #400]	; (11310 <socket+0x1e0>)
   1117e:	781b      	ldrb	r3, [r3, #0]
   11180:	b2db      	uxtb	r3, r3
   11182:	011a      	lsls	r2, r3, #4
   11184:	4b63      	ldr	r3, [pc, #396]	; (11314 <socket+0x1e4>)
   11186:	18d3      	adds	r3, r2, r3
   11188:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   1118a:	4b61      	ldr	r3, [pc, #388]	; (11310 <socket+0x1e0>)
   1118c:	781b      	ldrb	r3, [r3, #0]
   1118e:	b2db      	uxtb	r3, r3
   11190:	1c5a      	adds	r2, r3, #1
   11192:	4b61      	ldr	r3, [pc, #388]	; (11318 <socket+0x1e8>)
   11194:	2107      	movs	r1, #7
   11196:	0010      	movs	r0, r2
   11198:	4798      	blx	r3
   1119a:	000b      	movs	r3, r1
   1119c:	b2da      	uxtb	r2, r3
   1119e:	4b5c      	ldr	r3, [pc, #368]	; (11310 <socket+0x1e0>)
   111a0:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   111a2:	69bb      	ldr	r3, [r7, #24]
   111a4:	7a9b      	ldrb	r3, [r3, #10]
   111a6:	b2db      	uxtb	r3, r3
   111a8:	2b00      	cmp	r3, #0
   111aa:	d106      	bne.n	111ba <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   111ac:	231f      	movs	r3, #31
   111ae:	18fb      	adds	r3, r7, r3
   111b0:	2217      	movs	r2, #23
   111b2:	18ba      	adds	r2, r7, r2
   111b4:	7812      	ldrb	r2, [r2, #0]
   111b6:	701a      	strb	r2, [r3, #0]
					break;
   111b8:	e04c      	b.n	11254 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   111ba:	231e      	movs	r3, #30
   111bc:	18fb      	adds	r3, r7, r3
   111be:	781a      	ldrb	r2, [r3, #0]
   111c0:	231e      	movs	r3, #30
   111c2:	18fb      	adds	r3, r7, r3
   111c4:	3201      	adds	r2, #1
   111c6:	701a      	strb	r2, [r3, #0]
   111c8:	231e      	movs	r3, #30
   111ca:	18fb      	adds	r3, r7, r3
   111cc:	781b      	ldrb	r3, [r3, #0]
   111ce:	2b06      	cmp	r3, #6
   111d0:	d9cf      	bls.n	11172 <socket+0x42>
   111d2:	e03f      	b.n	11254 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   111d4:	1d7b      	adds	r3, r7, #5
   111d6:	781b      	ldrb	r3, [r3, #0]
   111d8:	2b02      	cmp	r3, #2
   111da:	d13b      	bne.n	11254 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   111dc:	4b4f      	ldr	r3, [pc, #316]	; (1131c <socket+0x1ec>)
   111de:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   111e0:	231e      	movs	r3, #30
   111e2:	18fb      	adds	r3, r7, r3
   111e4:	2200      	movs	r2, #0
   111e6:	701a      	strb	r2, [r3, #0]
   111e8:	e02f      	b.n	1124a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   111ea:	2317      	movs	r3, #23
   111ec:	18fb      	adds	r3, r7, r3
   111ee:	4a4c      	ldr	r2, [pc, #304]	; (11320 <socket+0x1f0>)
   111f0:	7812      	ldrb	r2, [r2, #0]
   111f2:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   111f4:	4b4a      	ldr	r3, [pc, #296]	; (11320 <socket+0x1f0>)
   111f6:	781b      	ldrb	r3, [r3, #0]
   111f8:	b2db      	uxtb	r3, r3
   111fa:	011b      	lsls	r3, r3, #4
   111fc:	693a      	ldr	r2, [r7, #16]
   111fe:	18d3      	adds	r3, r2, r3
   11200:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   11202:	4b47      	ldr	r3, [pc, #284]	; (11320 <socket+0x1f0>)
   11204:	781b      	ldrb	r3, [r3, #0]
   11206:	b2db      	uxtb	r3, r3
   11208:	3301      	adds	r3, #1
   1120a:	4a46      	ldr	r2, [pc, #280]	; (11324 <socket+0x1f4>)
   1120c:	4013      	ands	r3, r2
   1120e:	d504      	bpl.n	1121a <socket+0xea>
   11210:	3b01      	subs	r3, #1
   11212:	2204      	movs	r2, #4
   11214:	4252      	negs	r2, r2
   11216:	4313      	orrs	r3, r2
   11218:	3301      	adds	r3, #1
   1121a:	b2da      	uxtb	r2, r3
   1121c:	4b40      	ldr	r3, [pc, #256]	; (11320 <socket+0x1f0>)
   1121e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   11220:	69bb      	ldr	r3, [r7, #24]
   11222:	7a9b      	ldrb	r3, [r3, #10]
   11224:	b2db      	uxtb	r3, r3
   11226:	2b00      	cmp	r3, #0
   11228:	d108      	bne.n	1123c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   1122a:	2317      	movs	r3, #23
   1122c:	18fb      	adds	r3, r7, r3
   1122e:	781b      	ldrb	r3, [r3, #0]
   11230:	3307      	adds	r3, #7
   11232:	b2da      	uxtb	r2, r3
   11234:	231f      	movs	r3, #31
   11236:	18fb      	adds	r3, r7, r3
   11238:	701a      	strb	r2, [r3, #0]
					break;
   1123a:	e00b      	b.n	11254 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   1123c:	231e      	movs	r3, #30
   1123e:	18fb      	adds	r3, r7, r3
   11240:	781a      	ldrb	r2, [r3, #0]
   11242:	231e      	movs	r3, #30
   11244:	18fb      	adds	r3, r7, r3
   11246:	3201      	adds	r2, #1
   11248:	701a      	strb	r2, [r3, #0]
   1124a:	231e      	movs	r3, #30
   1124c:	18fb      	adds	r3, r7, r3
   1124e:	781b      	ldrb	r3, [r3, #0]
   11250:	2b03      	cmp	r3, #3
   11252:	d9ca      	bls.n	111ea <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   11254:	231f      	movs	r3, #31
   11256:	18fb      	adds	r3, r7, r3
   11258:	781b      	ldrb	r3, [r3, #0]
   1125a:	2b7f      	cmp	r3, #127	; 0x7f
   1125c:	d84f      	bhi.n	112fe <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   1125e:	69bb      	ldr	r3, [r7, #24]
   11260:	2210      	movs	r2, #16
   11262:	2100      	movs	r1, #0
   11264:	0018      	movs	r0, r3
   11266:	4b30      	ldr	r3, [pc, #192]	; (11328 <socket+0x1f8>)
   11268:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   1126a:	69bb      	ldr	r3, [r7, #24]
   1126c:	2201      	movs	r2, #1
   1126e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   11270:	4b2e      	ldr	r3, [pc, #184]	; (1132c <socket+0x1fc>)
   11272:	881b      	ldrh	r3, [r3, #0]
   11274:	b29b      	uxth	r3, r3
   11276:	3301      	adds	r3, #1
   11278:	b29a      	uxth	r2, r3
   1127a:	4b2c      	ldr	r3, [pc, #176]	; (1132c <socket+0x1fc>)
   1127c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   1127e:	4b2b      	ldr	r3, [pc, #172]	; (1132c <socket+0x1fc>)
   11280:	881b      	ldrh	r3, [r3, #0]
   11282:	b29b      	uxth	r3, r3
   11284:	2b00      	cmp	r3, #0
   11286:	d106      	bne.n	11296 <socket+0x166>
				++gu16SessionID;
   11288:	4b28      	ldr	r3, [pc, #160]	; (1132c <socket+0x1fc>)
   1128a:	881b      	ldrh	r3, [r3, #0]
   1128c:	b29b      	uxth	r3, r3
   1128e:	3301      	adds	r3, #1
   11290:	b29a      	uxth	r2, r3
   11292:	4b26      	ldr	r3, [pc, #152]	; (1132c <socket+0x1fc>)
   11294:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   11296:	4b25      	ldr	r3, [pc, #148]	; (1132c <socket+0x1fc>)
   11298:	881b      	ldrh	r3, [r3, #0]
   1129a:	b29a      	uxth	r2, r3
   1129c:	69bb      	ldr	r3, [r7, #24]
   1129e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   112a0:	4b23      	ldr	r3, [pc, #140]	; (11330 <socket+0x200>)
   112a2:	0018      	movs	r0, r3
   112a4:	4b23      	ldr	r3, [pc, #140]	; (11334 <socket+0x204>)
   112a6:	4798      	blx	r3
   112a8:	231f      	movs	r3, #31
   112aa:	18fb      	adds	r3, r7, r3
   112ac:	2100      	movs	r1, #0
   112ae:	5659      	ldrsb	r1, [r3, r1]
   112b0:	4b1e      	ldr	r3, [pc, #120]	; (1132c <socket+0x1fc>)
   112b2:	881b      	ldrh	r3, [r3, #0]
   112b4:	b29b      	uxth	r3, r3
   112b6:	001a      	movs	r2, r3
   112b8:	4b1f      	ldr	r3, [pc, #124]	; (11338 <socket+0x208>)
   112ba:	0018      	movs	r0, r3
   112bc:	4b1d      	ldr	r3, [pc, #116]	; (11334 <socket+0x204>)
   112be:	4798      	blx	r3
   112c0:	4b1e      	ldr	r3, [pc, #120]	; (1133c <socket+0x20c>)
   112c2:	0018      	movs	r0, r3
   112c4:	4b1b      	ldr	r3, [pc, #108]	; (11334 <socket+0x204>)
   112c6:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   112c8:	1d3b      	adds	r3, r7, #4
   112ca:	781b      	ldrb	r3, [r3, #0]
   112cc:	2201      	movs	r2, #1
   112ce:	4013      	ands	r3, r2
   112d0:	d015      	beq.n	112fe <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   112d2:	230c      	movs	r3, #12
   112d4:	18fb      	adds	r3, r7, r3
   112d6:	221f      	movs	r2, #31
   112d8:	18ba      	adds	r2, r7, r2
   112da:	7812      	ldrb	r2, [r2, #0]
   112dc:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   112de:	69bb      	ldr	r3, [r7, #24]
   112e0:	2221      	movs	r2, #33	; 0x21
   112e2:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   112e4:	230c      	movs	r3, #12
   112e6:	18fa      	adds	r2, r7, r3
   112e8:	2300      	movs	r3, #0
   112ea:	9302      	str	r3, [sp, #8]
   112ec:	2300      	movs	r3, #0
   112ee:	9301      	str	r3, [sp, #4]
   112f0:	2300      	movs	r3, #0
   112f2:	9300      	str	r3, [sp, #0]
   112f4:	2304      	movs	r3, #4
   112f6:	2150      	movs	r1, #80	; 0x50
   112f8:	2002      	movs	r0, #2
   112fa:	4c11      	ldr	r4, [pc, #68]	; (11340 <socket+0x210>)
   112fc:	47a0      	blx	r4
			}
		}
	}
	return sock;
   112fe:	231f      	movs	r3, #31
   11300:	18fb      	adds	r3, r7, r3
   11302:	781b      	ldrb	r3, [r3, #0]
   11304:	b25b      	sxtb	r3, r3
}
   11306:	0018      	movs	r0, r3
   11308:	46bd      	mov	sp, r7
   1130a:	b009      	add	sp, #36	; 0x24
   1130c:	bd90      	pop	{r4, r7, pc}
   1130e:	46c0      	nop			; (mov r8, r8)
   11310:	20003d1d 	.word	0x20003d1d
   11314:	20005484 	.word	0x20005484
   11318:	0001e749 	.word	0x0001e749
   1131c:	200054f4 	.word	0x200054f4
   11320:	20003d1e 	.word	0x20003d1e
   11324:	80000003 	.word	0x80000003
   11328:	0000c7a1 	.word	0x0000c7a1
   1132c:	20003d1a 	.word	0x20003d1a
   11330:	000247a0 	.word	0x000247a0
   11334:	00009a6d 	.word	0x00009a6d
   11338:	000247c4 	.word	0x000247c4
   1133c:	000247c0 	.word	0x000247c0
   11340:	0000ca01 	.word	0x0000ca01

00011344 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   11344:	b5b0      	push	{r4, r5, r7, lr}
   11346:	b08a      	sub	sp, #40	; 0x28
   11348:	af04      	add	r7, sp, #16
   1134a:	6039      	str	r1, [r7, #0]
   1134c:	0011      	movs	r1, r2
   1134e:	1dfb      	adds	r3, r7, #7
   11350:	1c02      	adds	r2, r0, #0
   11352:	701a      	strb	r2, [r3, #0]
   11354:	1dbb      	adds	r3, r7, #6
   11356:	1c0a      	adds	r2, r1, #0
   11358:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   1135a:	2317      	movs	r3, #23
   1135c:	18fb      	adds	r3, r7, r3
   1135e:	22fa      	movs	r2, #250	; 0xfa
   11360:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   11362:	1dfb      	adds	r3, r7, #7
   11364:	781b      	ldrb	r3, [r3, #0]
   11366:	2b7f      	cmp	r3, #127	; 0x7f
   11368:	d867      	bhi.n	1143a <connect+0xf6>
   1136a:	683b      	ldr	r3, [r7, #0]
   1136c:	2b00      	cmp	r3, #0
   1136e:	d064      	beq.n	1143a <connect+0xf6>
   11370:	1dfb      	adds	r3, r7, #7
   11372:	781b      	ldrb	r3, [r3, #0]
   11374:	b25b      	sxtb	r3, r3
   11376:	4a35      	ldr	r2, [pc, #212]	; (1144c <connect+0x108>)
   11378:	011b      	lsls	r3, r3, #4
   1137a:	18d3      	adds	r3, r2, r3
   1137c:	330a      	adds	r3, #10
   1137e:	781b      	ldrb	r3, [r3, #0]
   11380:	b2db      	uxtb	r3, r3
   11382:	2b01      	cmp	r3, #1
   11384:	d159      	bne.n	1143a <connect+0xf6>
   11386:	1dbb      	adds	r3, r7, #6
   11388:	781b      	ldrb	r3, [r3, #0]
   1138a:	2b00      	cmp	r3, #0
   1138c:	d055      	beq.n	1143a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   1138e:	2316      	movs	r3, #22
   11390:	18fb      	adds	r3, r7, r3
   11392:	2244      	movs	r2, #68	; 0x44
   11394:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   11396:	1dfb      	adds	r3, r7, #7
   11398:	781b      	ldrb	r3, [r3, #0]
   1139a:	b25b      	sxtb	r3, r3
   1139c:	4a2b      	ldr	r2, [pc, #172]	; (1144c <connect+0x108>)
   1139e:	011b      	lsls	r3, r3, #4
   113a0:	18d3      	adds	r3, r2, r3
   113a2:	330b      	adds	r3, #11
   113a4:	781b      	ldrb	r3, [r3, #0]
   113a6:	b2db      	uxtb	r3, r3
   113a8:	001a      	movs	r2, r3
   113aa:	2301      	movs	r3, #1
   113ac:	4013      	ands	r3, r2
   113ae:	d00f      	beq.n	113d0 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   113b0:	2316      	movs	r3, #22
   113b2:	18fb      	adds	r3, r7, r3
   113b4:	224b      	movs	r2, #75	; 0x4b
   113b6:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   113b8:	1dfb      	adds	r3, r7, #7
   113ba:	781b      	ldrb	r3, [r3, #0]
   113bc:	b25b      	sxtb	r3, r3
   113be:	4a23      	ldr	r2, [pc, #140]	; (1144c <connect+0x108>)
   113c0:	011b      	lsls	r3, r3, #4
   113c2:	18d3      	adds	r3, r2, r3
   113c4:	330b      	adds	r3, #11
   113c6:	781b      	ldrb	r3, [r3, #0]
   113c8:	b2da      	uxtb	r2, r3
   113ca:	2308      	movs	r3, #8
   113cc:	18fb      	adds	r3, r7, r3
   113ce:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   113d0:	2308      	movs	r3, #8
   113d2:	18fb      	adds	r3, r7, r3
   113d4:	1dfa      	adds	r2, r7, #7
   113d6:	7812      	ldrb	r2, [r2, #0]
   113d8:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   113da:	6839      	ldr	r1, [r7, #0]
   113dc:	2308      	movs	r3, #8
   113de:	18fb      	adds	r3, r7, r3
   113e0:	2208      	movs	r2, #8
   113e2:	0018      	movs	r0, r3
   113e4:	4b1a      	ldr	r3, [pc, #104]	; (11450 <connect+0x10c>)
   113e6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   113e8:	1dfb      	adds	r3, r7, #7
   113ea:	781b      	ldrb	r3, [r3, #0]
   113ec:	b25b      	sxtb	r3, r3
   113ee:	4a17      	ldr	r2, [pc, #92]	; (1144c <connect+0x108>)
   113f0:	011b      	lsls	r3, r3, #4
   113f2:	18d3      	adds	r3, r2, r3
   113f4:	3306      	adds	r3, #6
   113f6:	881b      	ldrh	r3, [r3, #0]
   113f8:	b29a      	uxth	r2, r3
   113fa:	2308      	movs	r3, #8
   113fc:	18fb      	adds	r3, r7, r3
   113fe:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   11400:	2317      	movs	r3, #23
   11402:	18fc      	adds	r4, r7, r3
   11404:	2308      	movs	r3, #8
   11406:	18fa      	adds	r2, r7, r3
   11408:	2316      	movs	r3, #22
   1140a:	18fb      	adds	r3, r7, r3
   1140c:	7819      	ldrb	r1, [r3, #0]
   1140e:	2300      	movs	r3, #0
   11410:	9302      	str	r3, [sp, #8]
   11412:	2300      	movs	r3, #0
   11414:	9301      	str	r3, [sp, #4]
   11416:	2300      	movs	r3, #0
   11418:	9300      	str	r3, [sp, #0]
   1141a:	230c      	movs	r3, #12
   1141c:	2002      	movs	r0, #2
   1141e:	4d0d      	ldr	r5, [pc, #52]	; (11454 <connect+0x110>)
   11420:	47a8      	blx	r5
   11422:	0003      	movs	r3, r0
   11424:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   11426:	2317      	movs	r3, #23
   11428:	18fb      	adds	r3, r7, r3
   1142a:	781b      	ldrb	r3, [r3, #0]
   1142c:	b25b      	sxtb	r3, r3
   1142e:	2b00      	cmp	r3, #0
   11430:	d003      	beq.n	1143a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   11432:	2317      	movs	r3, #23
   11434:	18fb      	adds	r3, r7, r3
   11436:	22f7      	movs	r2, #247	; 0xf7
   11438:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   1143a:	2317      	movs	r3, #23
   1143c:	18fb      	adds	r3, r7, r3
   1143e:	781b      	ldrb	r3, [r3, #0]
   11440:	b25b      	sxtb	r3, r3
}
   11442:	0018      	movs	r0, r3
   11444:	46bd      	mov	sp, r7
   11446:	b006      	add	sp, #24
   11448:	bdb0      	pop	{r4, r5, r7, pc}
   1144a:	46c0      	nop			; (mov r8, r8)
   1144c:	20005484 	.word	0x20005484
   11450:	0000c765 	.word	0x0000c765
   11454:	0000ca01 	.word	0x0000ca01

00011458 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   11458:	b590      	push	{r4, r7, lr}
   1145a:	b08f      	sub	sp, #60	; 0x3c
   1145c:	af04      	add	r7, sp, #16
   1145e:	0004      	movs	r4, r0
   11460:	60b9      	str	r1, [r7, #8]
   11462:	0010      	movs	r0, r2
   11464:	0019      	movs	r1, r3
   11466:	230f      	movs	r3, #15
   11468:	18fb      	adds	r3, r7, r3
   1146a:	1c22      	adds	r2, r4, #0
   1146c:	701a      	strb	r2, [r3, #0]
   1146e:	230c      	movs	r3, #12
   11470:	18fb      	adds	r3, r7, r3
   11472:	1c02      	adds	r2, r0, #0
   11474:	801a      	strh	r2, [r3, #0]
   11476:	1dbb      	adds	r3, r7, #6
   11478:	1c0a      	adds	r2, r1, #0
   1147a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   1147c:	2326      	movs	r3, #38	; 0x26
   1147e:	18fb      	adds	r3, r7, r3
   11480:	2206      	movs	r2, #6
   11482:	4252      	negs	r2, r2
   11484:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   11486:	230f      	movs	r3, #15
   11488:	18fb      	adds	r3, r7, r3
   1148a:	781b      	ldrb	r3, [r3, #0]
   1148c:	2b7f      	cmp	r3, #127	; 0x7f
   1148e:	d900      	bls.n	11492 <send+0x3a>
   11490:	e087      	b.n	115a2 <send+0x14a>
   11492:	68bb      	ldr	r3, [r7, #8]
   11494:	2b00      	cmp	r3, #0
   11496:	d100      	bne.n	1149a <send+0x42>
   11498:	e083      	b.n	115a2 <send+0x14a>
   1149a:	230c      	movs	r3, #12
   1149c:	18fb      	adds	r3, r7, r3
   1149e:	881a      	ldrh	r2, [r3, #0]
   114a0:	23af      	movs	r3, #175	; 0xaf
   114a2:	00db      	lsls	r3, r3, #3
   114a4:	429a      	cmp	r2, r3
   114a6:	d900      	bls.n	114aa <send+0x52>
   114a8:	e07b      	b.n	115a2 <send+0x14a>
   114aa:	230f      	movs	r3, #15
   114ac:	18fb      	adds	r3, r7, r3
   114ae:	781b      	ldrb	r3, [r3, #0]
   114b0:	b25b      	sxtb	r3, r3
   114b2:	4a40      	ldr	r2, [pc, #256]	; (115b4 <send+0x15c>)
   114b4:	011b      	lsls	r3, r3, #4
   114b6:	18d3      	adds	r3, r2, r3
   114b8:	330a      	adds	r3, #10
   114ba:	781b      	ldrb	r3, [r3, #0]
   114bc:	b2db      	uxtb	r3, r3
   114be:	2b01      	cmp	r3, #1
   114c0:	d16f      	bne.n	115a2 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   114c2:	2323      	movs	r3, #35	; 0x23
   114c4:	18fb      	adds	r3, r7, r3
   114c6:	2245      	movs	r2, #69	; 0x45
   114c8:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   114ca:	2324      	movs	r3, #36	; 0x24
   114cc:	18fb      	adds	r3, r7, r3
   114ce:	2250      	movs	r2, #80	; 0x50
   114d0:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   114d2:	2310      	movs	r3, #16
   114d4:	18fb      	adds	r3, r7, r3
   114d6:	220f      	movs	r2, #15
   114d8:	18ba      	adds	r2, r7, r2
   114da:	7812      	ldrb	r2, [r2, #0]
   114dc:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   114de:	2310      	movs	r3, #16
   114e0:	18fb      	adds	r3, r7, r3
   114e2:	220c      	movs	r2, #12
   114e4:	18ba      	adds	r2, r7, r2
   114e6:	8812      	ldrh	r2, [r2, #0]
   114e8:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   114ea:	230f      	movs	r3, #15
   114ec:	18fb      	adds	r3, r7, r3
   114ee:	781b      	ldrb	r3, [r3, #0]
   114f0:	b25b      	sxtb	r3, r3
   114f2:	4a30      	ldr	r2, [pc, #192]	; (115b4 <send+0x15c>)
   114f4:	011b      	lsls	r3, r3, #4
   114f6:	18d3      	adds	r3, r2, r3
   114f8:	3306      	adds	r3, #6
   114fa:	881b      	ldrh	r3, [r3, #0]
   114fc:	b29a      	uxth	r2, r3
   114fe:	2310      	movs	r3, #16
   11500:	18fb      	adds	r3, r7, r3
   11502:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   11504:	230f      	movs	r3, #15
   11506:	18fb      	adds	r3, r7, r3
   11508:	781b      	ldrb	r3, [r3, #0]
   1150a:	b25b      	sxtb	r3, r3
   1150c:	2b06      	cmp	r3, #6
   1150e:	dd03      	ble.n	11518 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   11510:	2324      	movs	r3, #36	; 0x24
   11512:	18fb      	adds	r3, r7, r3
   11514:	2244      	movs	r2, #68	; 0x44
   11516:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   11518:	230f      	movs	r3, #15
   1151a:	18fb      	adds	r3, r7, r3
   1151c:	781b      	ldrb	r3, [r3, #0]
   1151e:	b25b      	sxtb	r3, r3
   11520:	4a24      	ldr	r2, [pc, #144]	; (115b4 <send+0x15c>)
   11522:	011b      	lsls	r3, r3, #4
   11524:	18d3      	adds	r3, r2, r3
   11526:	330b      	adds	r3, #11
   11528:	781b      	ldrb	r3, [r3, #0]
   1152a:	b2db      	uxtb	r3, r3
   1152c:	001a      	movs	r2, r3
   1152e:	2301      	movs	r3, #1
   11530:	4013      	ands	r3, r2
   11532:	d00f      	beq.n	11554 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   11534:	2323      	movs	r3, #35	; 0x23
   11536:	18fb      	adds	r3, r7, r3
   11538:	224c      	movs	r2, #76	; 0x4c
   1153a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   1153c:	230f      	movs	r3, #15
   1153e:	18fb      	adds	r3, r7, r3
   11540:	2200      	movs	r2, #0
   11542:	569a      	ldrsb	r2, [r3, r2]
   11544:	2324      	movs	r3, #36	; 0x24
   11546:	18fb      	adds	r3, r7, r3
   11548:	491a      	ldr	r1, [pc, #104]	; (115b4 <send+0x15c>)
   1154a:	0112      	lsls	r2, r2, #4
   1154c:	188a      	adds	r2, r1, r2
   1154e:	3208      	adds	r2, #8
   11550:	8812      	ldrh	r2, [r2, #0]
   11552:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   11554:	2323      	movs	r3, #35	; 0x23
   11556:	18fb      	adds	r3, r7, r3
   11558:	781b      	ldrb	r3, [r3, #0]
   1155a:	2280      	movs	r2, #128	; 0x80
   1155c:	4252      	negs	r2, r2
   1155e:	4313      	orrs	r3, r2
   11560:	b2d9      	uxtb	r1, r3
   11562:	2310      	movs	r3, #16
   11564:	18fa      	adds	r2, r7, r3
   11566:	2324      	movs	r3, #36	; 0x24
   11568:	18fb      	adds	r3, r7, r3
   1156a:	881b      	ldrh	r3, [r3, #0]
   1156c:	9302      	str	r3, [sp, #8]
   1156e:	230c      	movs	r3, #12
   11570:	18fb      	adds	r3, r7, r3
   11572:	881b      	ldrh	r3, [r3, #0]
   11574:	9301      	str	r3, [sp, #4]
   11576:	68bb      	ldr	r3, [r7, #8]
   11578:	9300      	str	r3, [sp, #0]
   1157a:	2310      	movs	r3, #16
   1157c:	2002      	movs	r0, #2
   1157e:	4c0e      	ldr	r4, [pc, #56]	; (115b8 <send+0x160>)
   11580:	47a0      	blx	r4
   11582:	0003      	movs	r3, r0
   11584:	001a      	movs	r2, r3
   11586:	2326      	movs	r3, #38	; 0x26
   11588:	18fb      	adds	r3, r7, r3
   1158a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   1158c:	2326      	movs	r3, #38	; 0x26
   1158e:	18fb      	adds	r3, r7, r3
   11590:	2200      	movs	r2, #0
   11592:	5e9b      	ldrsh	r3, [r3, r2]
   11594:	2b00      	cmp	r3, #0
   11596:	d004      	beq.n	115a2 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   11598:	2326      	movs	r3, #38	; 0x26
   1159a:	18fb      	adds	r3, r7, r3
   1159c:	220e      	movs	r2, #14
   1159e:	4252      	negs	r2, r2
   115a0:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   115a2:	2326      	movs	r3, #38	; 0x26
   115a4:	18fb      	adds	r3, r7, r3
   115a6:	2200      	movs	r2, #0
   115a8:	5e9b      	ldrsh	r3, [r3, r2]
}
   115aa:	0018      	movs	r0, r3
   115ac:	46bd      	mov	sp, r7
   115ae:	b00b      	add	sp, #44	; 0x2c
   115b0:	bd90      	pop	{r4, r7, pc}
   115b2:	46c0      	nop			; (mov r8, r8)
   115b4:	20005484 	.word	0x20005484
   115b8:	0000ca01 	.word	0x0000ca01

000115bc <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   115bc:	b590      	push	{r4, r7, lr}
   115be:	b08d      	sub	sp, #52	; 0x34
   115c0:	af04      	add	r7, sp, #16
   115c2:	60b9      	str	r1, [r7, #8]
   115c4:	0011      	movs	r1, r2
   115c6:	607b      	str	r3, [r7, #4]
   115c8:	230f      	movs	r3, #15
   115ca:	18fb      	adds	r3, r7, r3
   115cc:	1c02      	adds	r2, r0, #0
   115ce:	701a      	strb	r2, [r3, #0]
   115d0:	230c      	movs	r3, #12
   115d2:	18fb      	adds	r3, r7, r3
   115d4:	1c0a      	adds	r2, r1, #0
   115d6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   115d8:	231e      	movs	r3, #30
   115da:	18fb      	adds	r3, r7, r3
   115dc:	2206      	movs	r2, #6
   115de:	4252      	negs	r2, r2
   115e0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   115e2:	230f      	movs	r3, #15
   115e4:	18fb      	adds	r3, r7, r3
   115e6:	781b      	ldrb	r3, [r3, #0]
   115e8:	2b7f      	cmp	r3, #127	; 0x7f
   115ea:	d900      	bls.n	115ee <recv+0x32>
   115ec:	e099      	b.n	11722 <recv+0x166>
   115ee:	68bb      	ldr	r3, [r7, #8]
   115f0:	2b00      	cmp	r3, #0
   115f2:	d100      	bne.n	115f6 <recv+0x3a>
   115f4:	e095      	b.n	11722 <recv+0x166>
   115f6:	230c      	movs	r3, #12
   115f8:	18fb      	adds	r3, r7, r3
   115fa:	881b      	ldrh	r3, [r3, #0]
   115fc:	2b00      	cmp	r3, #0
   115fe:	d100      	bne.n	11602 <recv+0x46>
   11600:	e08f      	b.n	11722 <recv+0x166>
   11602:	230f      	movs	r3, #15
   11604:	18fb      	adds	r3, r7, r3
   11606:	781b      	ldrb	r3, [r3, #0]
   11608:	b25b      	sxtb	r3, r3
   1160a:	4a4a      	ldr	r2, [pc, #296]	; (11734 <recv+0x178>)
   1160c:	011b      	lsls	r3, r3, #4
   1160e:	18d3      	adds	r3, r2, r3
   11610:	330a      	adds	r3, #10
   11612:	781b      	ldrb	r3, [r3, #0]
   11614:	b2db      	uxtb	r3, r3
   11616:	2b01      	cmp	r3, #1
   11618:	d000      	beq.n	1161c <recv+0x60>
   1161a:	e082      	b.n	11722 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   1161c:	231e      	movs	r3, #30
   1161e:	18fb      	adds	r3, r7, r3
   11620:	2200      	movs	r2, #0
   11622:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   11624:	230f      	movs	r3, #15
   11626:	18fb      	adds	r3, r7, r3
   11628:	2200      	movs	r2, #0
   1162a:	569a      	ldrsb	r2, [r3, r2]
   1162c:	4b41      	ldr	r3, [pc, #260]	; (11734 <recv+0x178>)
   1162e:	0112      	lsls	r2, r2, #4
   11630:	68b9      	ldr	r1, [r7, #8]
   11632:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   11634:	230f      	movs	r3, #15
   11636:	18fb      	adds	r3, r7, r3
   11638:	781b      	ldrb	r3, [r3, #0]
   1163a:	b25b      	sxtb	r3, r3
   1163c:	4a3d      	ldr	r2, [pc, #244]	; (11734 <recv+0x178>)
   1163e:	011b      	lsls	r3, r3, #4
   11640:	18d3      	adds	r3, r2, r3
   11642:	3304      	adds	r3, #4
   11644:	220c      	movs	r2, #12
   11646:	18ba      	adds	r2, r7, r2
   11648:	8812      	ldrh	r2, [r2, #0]
   1164a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   1164c:	230f      	movs	r3, #15
   1164e:	18fb      	adds	r3, r7, r3
   11650:	781b      	ldrb	r3, [r3, #0]
   11652:	b25b      	sxtb	r3, r3
   11654:	4a37      	ldr	r2, [pc, #220]	; (11734 <recv+0x178>)
   11656:	011b      	lsls	r3, r3, #4
   11658:	18d3      	adds	r3, r2, r3
   1165a:	330c      	adds	r3, #12
   1165c:	781b      	ldrb	r3, [r3, #0]
   1165e:	b2db      	uxtb	r3, r3
   11660:	2b00      	cmp	r3, #0
   11662:	d15e      	bne.n	11722 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   11664:	231d      	movs	r3, #29
   11666:	18fb      	adds	r3, r7, r3
   11668:	2246      	movs	r2, #70	; 0x46
   1166a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   1166c:	230f      	movs	r3, #15
   1166e:	18fb      	adds	r3, r7, r3
   11670:	781b      	ldrb	r3, [r3, #0]
   11672:	b25b      	sxtb	r3, r3
   11674:	4a2f      	ldr	r2, [pc, #188]	; (11734 <recv+0x178>)
   11676:	011b      	lsls	r3, r3, #4
   11678:	18d3      	adds	r3, r2, r3
   1167a:	330c      	adds	r3, #12
   1167c:	2201      	movs	r2, #1
   1167e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   11680:	230f      	movs	r3, #15
   11682:	18fb      	adds	r3, r7, r3
   11684:	781b      	ldrb	r3, [r3, #0]
   11686:	b25b      	sxtb	r3, r3
   11688:	4a2a      	ldr	r2, [pc, #168]	; (11734 <recv+0x178>)
   1168a:	011b      	lsls	r3, r3, #4
   1168c:	18d3      	adds	r3, r2, r3
   1168e:	330b      	adds	r3, #11
   11690:	781b      	ldrb	r3, [r3, #0]
   11692:	b2db      	uxtb	r3, r3
   11694:	001a      	movs	r2, r3
   11696:	2301      	movs	r3, #1
   11698:	4013      	ands	r3, r2
   1169a:	d003      	beq.n	116a4 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   1169c:	231d      	movs	r3, #29
   1169e:	18fb      	adds	r3, r7, r3
   116a0:	224d      	movs	r2, #77	; 0x4d
   116a2:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   116a4:	687b      	ldr	r3, [r7, #4]
   116a6:	2b00      	cmp	r3, #0
   116a8:	d105      	bne.n	116b6 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   116aa:	2314      	movs	r3, #20
   116ac:	18fb      	adds	r3, r7, r3
   116ae:	2201      	movs	r2, #1
   116b0:	4252      	negs	r2, r2
   116b2:	601a      	str	r2, [r3, #0]
   116b4:	e003      	b.n	116be <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   116b6:	2314      	movs	r3, #20
   116b8:	18fb      	adds	r3, r7, r3
   116ba:	687a      	ldr	r2, [r7, #4]
   116bc:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   116be:	2314      	movs	r3, #20
   116c0:	18fb      	adds	r3, r7, r3
   116c2:	220f      	movs	r2, #15
   116c4:	18ba      	adds	r2, r7, r2
   116c6:	7812      	ldrb	r2, [r2, #0]
   116c8:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   116ca:	230f      	movs	r3, #15
   116cc:	18fb      	adds	r3, r7, r3
   116ce:	781b      	ldrb	r3, [r3, #0]
   116d0:	b25b      	sxtb	r3, r3
   116d2:	4a18      	ldr	r2, [pc, #96]	; (11734 <recv+0x178>)
   116d4:	011b      	lsls	r3, r3, #4
   116d6:	18d3      	adds	r3, r2, r3
   116d8:	3306      	adds	r3, #6
   116da:	881b      	ldrh	r3, [r3, #0]
   116dc:	b29a      	uxth	r2, r3
   116de:	2314      	movs	r3, #20
   116e0:	18fb      	adds	r3, r7, r3
   116e2:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   116e4:	2314      	movs	r3, #20
   116e6:	18fa      	adds	r2, r7, r3
   116e8:	231d      	movs	r3, #29
   116ea:	18fb      	adds	r3, r7, r3
   116ec:	7819      	ldrb	r1, [r3, #0]
   116ee:	2300      	movs	r3, #0
   116f0:	9302      	str	r3, [sp, #8]
   116f2:	2300      	movs	r3, #0
   116f4:	9301      	str	r3, [sp, #4]
   116f6:	2300      	movs	r3, #0
   116f8:	9300      	str	r3, [sp, #0]
   116fa:	2308      	movs	r3, #8
   116fc:	2002      	movs	r0, #2
   116fe:	4c0e      	ldr	r4, [pc, #56]	; (11738 <recv+0x17c>)
   11700:	47a0      	blx	r4
   11702:	0003      	movs	r3, r0
   11704:	001a      	movs	r2, r3
   11706:	231e      	movs	r3, #30
   11708:	18fb      	adds	r3, r7, r3
   1170a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   1170c:	231e      	movs	r3, #30
   1170e:	18fb      	adds	r3, r7, r3
   11710:	2200      	movs	r2, #0
   11712:	5e9b      	ldrsh	r3, [r3, r2]
   11714:	2b00      	cmp	r3, #0
   11716:	d004      	beq.n	11722 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   11718:	231e      	movs	r3, #30
   1171a:	18fb      	adds	r3, r7, r3
   1171c:	220e      	movs	r2, #14
   1171e:	4252      	negs	r2, r2
   11720:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   11722:	231e      	movs	r3, #30
   11724:	18fb      	adds	r3, r7, r3
   11726:	2200      	movs	r2, #0
   11728:	5e9b      	ldrsh	r3, [r3, r2]
}
   1172a:	0018      	movs	r0, r3
   1172c:	46bd      	mov	sp, r7
   1172e:	b009      	add	sp, #36	; 0x24
   11730:	bd90      	pop	{r4, r7, pc}
   11732:	46c0      	nop			; (mov r8, r8)
   11734:	20005484 	.word	0x20005484
   11738:	0000ca01 	.word	0x0000ca01

0001173c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   1173c:	b5b0      	push	{r4, r5, r7, lr}
   1173e:	b088      	sub	sp, #32
   11740:	af04      	add	r7, sp, #16
   11742:	0002      	movs	r2, r0
   11744:	1dfb      	adds	r3, r7, #7
   11746:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   11748:	230f      	movs	r3, #15
   1174a:	18fb      	adds	r3, r7, r3
   1174c:	22fa      	movs	r2, #250	; 0xfa
   1174e:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   11750:	4b43      	ldr	r3, [pc, #268]	; (11860 <close+0x124>)
   11752:	0018      	movs	r0, r3
   11754:	4b43      	ldr	r3, [pc, #268]	; (11864 <close+0x128>)
   11756:	4798      	blx	r3
   11758:	1dfb      	adds	r3, r7, #7
   1175a:	2200      	movs	r2, #0
   1175c:	569a      	ldrsb	r2, [r3, r2]
   1175e:	4b42      	ldr	r3, [pc, #264]	; (11868 <close+0x12c>)
   11760:	0011      	movs	r1, r2
   11762:	0018      	movs	r0, r3
   11764:	4b3f      	ldr	r3, [pc, #252]	; (11864 <close+0x128>)
   11766:	4798      	blx	r3
   11768:	4b40      	ldr	r3, [pc, #256]	; (1186c <close+0x130>)
   1176a:	0018      	movs	r0, r3
   1176c:	4b3d      	ldr	r3, [pc, #244]	; (11864 <close+0x128>)
   1176e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   11770:	1dfb      	adds	r3, r7, #7
   11772:	781b      	ldrb	r3, [r3, #0]
   11774:	2b7f      	cmp	r3, #127	; 0x7f
   11776:	d86a      	bhi.n	1184e <close+0x112>
   11778:	1dfb      	adds	r3, r7, #7
   1177a:	781b      	ldrb	r3, [r3, #0]
   1177c:	b25b      	sxtb	r3, r3
   1177e:	4a3c      	ldr	r2, [pc, #240]	; (11870 <close+0x134>)
   11780:	011b      	lsls	r3, r3, #4
   11782:	18d3      	adds	r3, r2, r3
   11784:	330a      	adds	r3, #10
   11786:	781b      	ldrb	r3, [r3, #0]
   11788:	b2db      	uxtb	r3, r3
   1178a:	2b01      	cmp	r3, #1
   1178c:	d15f      	bne.n	1184e <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   1178e:	230e      	movs	r3, #14
   11790:	18fb      	adds	r3, r7, r3
   11792:	2249      	movs	r2, #73	; 0x49
   11794:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   11796:	2308      	movs	r3, #8
   11798:	18fb      	adds	r3, r7, r3
   1179a:	1dfa      	adds	r2, r7, #7
   1179c:	7812      	ldrb	r2, [r2, #0]
   1179e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   117a0:	1dfb      	adds	r3, r7, #7
   117a2:	781b      	ldrb	r3, [r3, #0]
   117a4:	b25b      	sxtb	r3, r3
   117a6:	4a32      	ldr	r2, [pc, #200]	; (11870 <close+0x134>)
   117a8:	011b      	lsls	r3, r3, #4
   117aa:	18d3      	adds	r3, r2, r3
   117ac:	3306      	adds	r3, #6
   117ae:	881b      	ldrh	r3, [r3, #0]
   117b0:	b29a      	uxth	r2, r3
   117b2:	2308      	movs	r3, #8
   117b4:	18fb      	adds	r3, r7, r3
   117b6:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   117b8:	1dfb      	adds	r3, r7, #7
   117ba:	781b      	ldrb	r3, [r3, #0]
   117bc:	b25b      	sxtb	r3, r3
   117be:	4a2c      	ldr	r2, [pc, #176]	; (11870 <close+0x134>)
   117c0:	011b      	lsls	r3, r3, #4
   117c2:	18d3      	adds	r3, r2, r3
   117c4:	330a      	adds	r3, #10
   117c6:	2200      	movs	r2, #0
   117c8:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   117ca:	1dfb      	adds	r3, r7, #7
   117cc:	781b      	ldrb	r3, [r3, #0]
   117ce:	b25b      	sxtb	r3, r3
   117d0:	4a27      	ldr	r2, [pc, #156]	; (11870 <close+0x134>)
   117d2:	011b      	lsls	r3, r3, #4
   117d4:	18d3      	adds	r3, r2, r3
   117d6:	3306      	adds	r3, #6
   117d8:	2200      	movs	r2, #0
   117da:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   117dc:	1dfb      	adds	r3, r7, #7
   117de:	781b      	ldrb	r3, [r3, #0]
   117e0:	b25b      	sxtb	r3, r3
   117e2:	4a23      	ldr	r2, [pc, #140]	; (11870 <close+0x134>)
   117e4:	011b      	lsls	r3, r3, #4
   117e6:	18d3      	adds	r3, r2, r3
   117e8:	330b      	adds	r3, #11
   117ea:	781b      	ldrb	r3, [r3, #0]
   117ec:	b2db      	uxtb	r3, r3
   117ee:	001a      	movs	r2, r3
   117f0:	2301      	movs	r3, #1
   117f2:	4013      	ands	r3, r2
   117f4:	d003      	beq.n	117fe <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   117f6:	230e      	movs	r3, #14
   117f8:	18fb      	adds	r3, r7, r3
   117fa:	224e      	movs	r2, #78	; 0x4e
   117fc:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   117fe:	230f      	movs	r3, #15
   11800:	18fc      	adds	r4, r7, r3
   11802:	2308      	movs	r3, #8
   11804:	18fa      	adds	r2, r7, r3
   11806:	230e      	movs	r3, #14
   11808:	18fb      	adds	r3, r7, r3
   1180a:	7819      	ldrb	r1, [r3, #0]
   1180c:	2300      	movs	r3, #0
   1180e:	9302      	str	r3, [sp, #8]
   11810:	2300      	movs	r3, #0
   11812:	9301      	str	r3, [sp, #4]
   11814:	2300      	movs	r3, #0
   11816:	9300      	str	r3, [sp, #0]
   11818:	2304      	movs	r3, #4
   1181a:	2002      	movs	r0, #2
   1181c:	4d15      	ldr	r5, [pc, #84]	; (11874 <close+0x138>)
   1181e:	47a8      	blx	r5
   11820:	0003      	movs	r3, r0
   11822:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   11824:	230f      	movs	r3, #15
   11826:	18fb      	adds	r3, r7, r3
   11828:	781b      	ldrb	r3, [r3, #0]
   1182a:	b25b      	sxtb	r3, r3
   1182c:	2b00      	cmp	r3, #0
   1182e:	d003      	beq.n	11838 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   11830:	230f      	movs	r3, #15
   11832:	18fb      	adds	r3, r7, r3
   11834:	22f7      	movs	r2, #247	; 0xf7
   11836:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   11838:	1dfb      	adds	r3, r7, #7
   1183a:	781b      	ldrb	r3, [r3, #0]
   1183c:	b25b      	sxtb	r3, r3
   1183e:	011a      	lsls	r2, r3, #4
   11840:	4b0b      	ldr	r3, [pc, #44]	; (11870 <close+0x134>)
   11842:	18d3      	adds	r3, r2, r3
   11844:	2210      	movs	r2, #16
   11846:	2100      	movs	r1, #0
   11848:	0018      	movs	r0, r3
   1184a:	4b0b      	ldr	r3, [pc, #44]	; (11878 <close+0x13c>)
   1184c:	4798      	blx	r3
	}
	return s8Ret;
   1184e:	230f      	movs	r3, #15
   11850:	18fb      	adds	r3, r7, r3
   11852:	781b      	ldrb	r3, [r3, #0]
   11854:	b25b      	sxtb	r3, r3
}
   11856:	0018      	movs	r0, r3
   11858:	46bd      	mov	sp, r7
   1185a:	b004      	add	sp, #16
   1185c:	bdb0      	pop	{r4, r5, r7, pc}
   1185e:	46c0      	nop			; (mov r8, r8)
   11860:	000247a0 	.word	0x000247a0
   11864:	00009a6d 	.word	0x00009a6d
   11868:	000247e0 	.word	0x000247e0
   1186c:	000247c0 	.word	0x000247c0
   11870:	20005484 	.word	0x20005484
   11874:	0000ca01 	.word	0x0000ca01
   11878:	0000c7a1 	.word	0x0000c7a1

0001187c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   1187c:	b580      	push	{r7, lr}
   1187e:	b086      	sub	sp, #24
   11880:	af00      	add	r7, sp, #0
   11882:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   11884:	2300      	movs	r3, #0
   11886:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   11888:	2317      	movs	r3, #23
   1188a:	18fb      	adds	r3, r7, r3
   1188c:	2200      	movs	r2, #0
   1188e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   11890:	2316      	movs	r3, #22
   11892:	18fb      	adds	r3, r7, r3
   11894:	2200      	movs	r2, #0
   11896:	701a      	strb	r2, [r3, #0]
   11898:	e060      	b.n	1195c <nmi_inet_addr+0xe0>
	{
		j = 0;
   1189a:	2315      	movs	r3, #21
   1189c:	18fb      	adds	r3, r7, r3
   1189e:	2200      	movs	r2, #0
   118a0:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   118a2:	2314      	movs	r3, #20
   118a4:	18fb      	adds	r3, r7, r3
   118a6:	687a      	ldr	r2, [r7, #4]
   118a8:	7812      	ldrb	r2, [r2, #0]
   118aa:	701a      	strb	r2, [r3, #0]
			++j;
   118ac:	2315      	movs	r3, #21
   118ae:	18fb      	adds	r3, r7, r3
   118b0:	2215      	movs	r2, #21
   118b2:	18ba      	adds	r2, r7, r2
   118b4:	7812      	ldrb	r2, [r2, #0]
   118b6:	3201      	adds	r2, #1
   118b8:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   118ba:	2315      	movs	r3, #21
   118bc:	18fb      	adds	r3, r7, r3
   118be:	781b      	ldrb	r3, [r3, #0]
   118c0:	2b04      	cmp	r3, #4
   118c2:	d901      	bls.n	118c8 <nmi_inet_addr+0x4c>
			{
				return 0;
   118c4:	2300      	movs	r3, #0
   118c6:	e057      	b.n	11978 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   118c8:	2314      	movs	r3, #20
   118ca:	18fb      	adds	r3, r7, r3
   118cc:	781b      	ldrb	r3, [r3, #0]
   118ce:	2b2e      	cmp	r3, #46	; 0x2e
   118d0:	d004      	beq.n	118dc <nmi_inet_addr+0x60>
   118d2:	2314      	movs	r3, #20
   118d4:	18fb      	adds	r3, r7, r3
   118d6:	781b      	ldrb	r3, [r3, #0]
   118d8:	2b00      	cmp	r3, #0
   118da:	d10d      	bne.n	118f8 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   118dc:	2316      	movs	r3, #22
   118de:	18fb      	adds	r3, r7, r3
   118e0:	781b      	ldrb	r3, [r3, #0]
   118e2:	220c      	movs	r2, #12
   118e4:	18ba      	adds	r2, r7, r2
   118e6:	2117      	movs	r1, #23
   118e8:	1879      	adds	r1, r7, r1
   118ea:	7809      	ldrb	r1, [r1, #0]
   118ec:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   118ee:	2317      	movs	r3, #23
   118f0:	18fb      	adds	r3, r7, r3
   118f2:	2200      	movs	r2, #0
   118f4:	701a      	strb	r2, [r3, #0]
   118f6:	e01d      	b.n	11934 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   118f8:	2314      	movs	r3, #20
   118fa:	18fb      	adds	r3, r7, r3
   118fc:	781b      	ldrb	r3, [r3, #0]
   118fe:	2b2f      	cmp	r3, #47	; 0x2f
   11900:	d916      	bls.n	11930 <nmi_inet_addr+0xb4>
   11902:	2314      	movs	r3, #20
   11904:	18fb      	adds	r3, r7, r3
   11906:	781b      	ldrb	r3, [r3, #0]
   11908:	2b39      	cmp	r3, #57	; 0x39
   1190a:	d811      	bhi.n	11930 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   1190c:	2317      	movs	r3, #23
   1190e:	18fb      	adds	r3, r7, r3
   11910:	781b      	ldrb	r3, [r3, #0]
   11912:	1c1a      	adds	r2, r3, #0
   11914:	0092      	lsls	r2, r2, #2
   11916:	18d3      	adds	r3, r2, r3
   11918:	18db      	adds	r3, r3, r3
   1191a:	b2da      	uxtb	r2, r3
   1191c:	2314      	movs	r3, #20
   1191e:	18fb      	adds	r3, r7, r3
   11920:	781b      	ldrb	r3, [r3, #0]
   11922:	18d3      	adds	r3, r2, r3
   11924:	b2da      	uxtb	r2, r3
   11926:	2317      	movs	r3, #23
   11928:	18fb      	adds	r3, r7, r3
   1192a:	3a30      	subs	r2, #48	; 0x30
   1192c:	701a      	strb	r2, [r3, #0]
   1192e:	e001      	b.n	11934 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   11930:	2300      	movs	r3, #0
   11932:	e021      	b.n	11978 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   11934:	687b      	ldr	r3, [r7, #4]
   11936:	3301      	adds	r3, #1
   11938:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   1193a:	2314      	movs	r3, #20
   1193c:	18fb      	adds	r3, r7, r3
   1193e:	781b      	ldrb	r3, [r3, #0]
   11940:	2b2e      	cmp	r3, #46	; 0x2e
   11942:	d004      	beq.n	1194e <nmi_inet_addr+0xd2>
   11944:	2314      	movs	r3, #20
   11946:	18fb      	adds	r3, r7, r3
   11948:	781b      	ldrb	r3, [r3, #0]
   1194a:	2b00      	cmp	r3, #0
   1194c:	d1a9      	bne.n	118a2 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   1194e:	2316      	movs	r3, #22
   11950:	18fb      	adds	r3, r7, r3
   11952:	2216      	movs	r2, #22
   11954:	18ba      	adds	r2, r7, r2
   11956:	7812      	ldrb	r2, [r2, #0]
   11958:	3201      	adds	r2, #1
   1195a:	701a      	strb	r2, [r3, #0]
   1195c:	2316      	movs	r3, #22
   1195e:	18fb      	adds	r3, r7, r3
   11960:	781b      	ldrb	r3, [r3, #0]
   11962:	2b03      	cmp	r3, #3
   11964:	d999      	bls.n	1189a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   11966:	230c      	movs	r3, #12
   11968:	18f9      	adds	r1, r7, r3
   1196a:	2310      	movs	r3, #16
   1196c:	18fb      	adds	r3, r7, r3
   1196e:	2204      	movs	r2, #4
   11970:	0018      	movs	r0, r3
   11972:	4b03      	ldr	r3, [pc, #12]	; (11980 <nmi_inet_addr+0x104>)
   11974:	4798      	blx	r3
	return u32IP;
   11976:	693b      	ldr	r3, [r7, #16]
}
   11978:	0018      	movs	r0, r3
   1197a:	46bd      	mov	sp, r7
   1197c:	b006      	add	sp, #24
   1197e:	bd80      	pop	{r7, pc}
   11980:	0000c765 	.word	0x0000c765

00011984 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   11984:	b5b0      	push	{r4, r5, r7, lr}
   11986:	b088      	sub	sp, #32
   11988:	af04      	add	r7, sp, #16
   1198a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   1198c:	230f      	movs	r3, #15
   1198e:	18fb      	adds	r3, r7, r3
   11990:	22fa      	movs	r2, #250	; 0xfa
   11992:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   11994:	687b      	ldr	r3, [r7, #4]
   11996:	0018      	movs	r0, r3
   11998:	4b14      	ldr	r3, [pc, #80]	; (119ec <gethostbyname+0x68>)
   1199a:	4798      	blx	r3
   1199c:	0003      	movs	r3, r0
   1199e:	001a      	movs	r2, r3
   119a0:	230e      	movs	r3, #14
   119a2:	18fb      	adds	r3, r7, r3
   119a4:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   119a6:	230e      	movs	r3, #14
   119a8:	18fb      	adds	r3, r7, r3
   119aa:	781b      	ldrb	r3, [r3, #0]
   119ac:	2b40      	cmp	r3, #64	; 0x40
   119ae:	d815      	bhi.n	119dc <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   119b0:	230e      	movs	r3, #14
   119b2:	18fb      	adds	r3, r7, r3
   119b4:	781b      	ldrb	r3, [r3, #0]
   119b6:	b29b      	uxth	r3, r3
   119b8:	3301      	adds	r3, #1
   119ba:	b299      	uxth	r1, r3
   119bc:	230f      	movs	r3, #15
   119be:	18fc      	adds	r4, r7, r3
   119c0:	687a      	ldr	r2, [r7, #4]
   119c2:	2300      	movs	r3, #0
   119c4:	9302      	str	r3, [sp, #8]
   119c6:	2300      	movs	r3, #0
   119c8:	9301      	str	r3, [sp, #4]
   119ca:	2300      	movs	r3, #0
   119cc:	9300      	str	r3, [sp, #0]
   119ce:	000b      	movs	r3, r1
   119d0:	214a      	movs	r1, #74	; 0x4a
   119d2:	2002      	movs	r0, #2
   119d4:	4d06      	ldr	r5, [pc, #24]	; (119f0 <gethostbyname+0x6c>)
   119d6:	47a8      	blx	r5
   119d8:	0003      	movs	r3, r0
   119da:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   119dc:	230f      	movs	r3, #15
   119de:	18fb      	adds	r3, r7, r3
   119e0:	781b      	ldrb	r3, [r3, #0]
   119e2:	b25b      	sxtb	r3, r3
}
   119e4:	0018      	movs	r0, r3
   119e6:	46bd      	mov	sp, r7
   119e8:	b004      	add	sp, #16
   119ea:	bdb0      	pop	{r4, r5, r7, pc}
   119ec:	0000c7df 	.word	0x0000c7df
   119f0:	0000ca01 	.word	0x0000ca01

000119f4 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   119f4:	b580      	push	{r7, lr}
   119f6:	b082      	sub	sp, #8
   119f8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   119fa:	003b      	movs	r3, r7
   119fc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   119fe:	687b      	ldr	r3, [r7, #4]
   11a00:	22b9      	movs	r2, #185	; 0xb9
   11a02:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   11a04:	4b13      	ldr	r3, [pc, #76]	; (11a54 <spi_flash_enter_low_power_mode+0x60>)
   11a06:	2100      	movs	r1, #0
   11a08:	0018      	movs	r0, r3
   11a0a:	4b13      	ldr	r3, [pc, #76]	; (11a58 <spi_flash_enter_low_power_mode+0x64>)
   11a0c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   11a0e:	687b      	ldr	r3, [r7, #4]
   11a10:	781b      	ldrb	r3, [r3, #0]
   11a12:	001a      	movs	r2, r3
   11a14:	4b11      	ldr	r3, [pc, #68]	; (11a5c <spi_flash_enter_low_power_mode+0x68>)
   11a16:	0011      	movs	r1, r2
   11a18:	0018      	movs	r0, r3
   11a1a:	4b0f      	ldr	r3, [pc, #60]	; (11a58 <spi_flash_enter_low_power_mode+0x64>)
   11a1c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   11a1e:	4b10      	ldr	r3, [pc, #64]	; (11a60 <spi_flash_enter_low_power_mode+0x6c>)
   11a20:	2101      	movs	r1, #1
   11a22:	0018      	movs	r0, r3
   11a24:	4b0c      	ldr	r3, [pc, #48]	; (11a58 <spi_flash_enter_low_power_mode+0x64>)
   11a26:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   11a28:	4b0e      	ldr	r3, [pc, #56]	; (11a64 <spi_flash_enter_low_power_mode+0x70>)
   11a2a:	2100      	movs	r1, #0
   11a2c:	0018      	movs	r0, r3
   11a2e:	4b0a      	ldr	r3, [pc, #40]	; (11a58 <spi_flash_enter_low_power_mode+0x64>)
   11a30:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   11a32:	4b0d      	ldr	r3, [pc, #52]	; (11a68 <spi_flash_enter_low_power_mode+0x74>)
   11a34:	2181      	movs	r1, #129	; 0x81
   11a36:	0018      	movs	r0, r3
   11a38:	4b07      	ldr	r3, [pc, #28]	; (11a58 <spi_flash_enter_low_power_mode+0x64>)
   11a3a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   11a3c:	46c0      	nop			; (mov r8, r8)
   11a3e:	4b0b      	ldr	r3, [pc, #44]	; (11a6c <spi_flash_enter_low_power_mode+0x78>)
   11a40:	0018      	movs	r0, r3
   11a42:	4b0b      	ldr	r3, [pc, #44]	; (11a70 <spi_flash_enter_low_power_mode+0x7c>)
   11a44:	4798      	blx	r3
   11a46:	0003      	movs	r3, r0
   11a48:	2b01      	cmp	r3, #1
   11a4a:	d1f8      	bne.n	11a3e <spi_flash_enter_low_power_mode+0x4a>
}
   11a4c:	46c0      	nop			; (mov r8, r8)
   11a4e:	46bd      	mov	sp, r7
   11a50:	b002      	add	sp, #8
   11a52:	bd80      	pop	{r7, pc}
   11a54:	00010208 	.word	0x00010208
   11a58:	0000e855 	.word	0x0000e855
   11a5c:	0001020c 	.word	0x0001020c
   11a60:	00010214 	.word	0x00010214
   11a64:	0001021c 	.word	0x0001021c
   11a68:	00010204 	.word	0x00010204
   11a6c:	00010218 	.word	0x00010218
   11a70:	0000e811 	.word	0x0000e811

00011a74 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   11a74:	b580      	push	{r7, lr}
   11a76:	b082      	sub	sp, #8
   11a78:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   11a7a:	003b      	movs	r3, r7
   11a7c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   11a7e:	687b      	ldr	r3, [r7, #4]
   11a80:	22ab      	movs	r2, #171	; 0xab
   11a82:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   11a84:	4b13      	ldr	r3, [pc, #76]	; (11ad4 <spi_flash_leave_low_power_mode+0x60>)
   11a86:	2100      	movs	r1, #0
   11a88:	0018      	movs	r0, r3
   11a8a:	4b13      	ldr	r3, [pc, #76]	; (11ad8 <spi_flash_leave_low_power_mode+0x64>)
   11a8c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   11a8e:	687b      	ldr	r3, [r7, #4]
   11a90:	781b      	ldrb	r3, [r3, #0]
   11a92:	001a      	movs	r2, r3
   11a94:	4b11      	ldr	r3, [pc, #68]	; (11adc <spi_flash_leave_low_power_mode+0x68>)
   11a96:	0011      	movs	r1, r2
   11a98:	0018      	movs	r0, r3
   11a9a:	4b0f      	ldr	r3, [pc, #60]	; (11ad8 <spi_flash_leave_low_power_mode+0x64>)
   11a9c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   11a9e:	4b10      	ldr	r3, [pc, #64]	; (11ae0 <spi_flash_leave_low_power_mode+0x6c>)
   11aa0:	2101      	movs	r1, #1
   11aa2:	0018      	movs	r0, r3
   11aa4:	4b0c      	ldr	r3, [pc, #48]	; (11ad8 <spi_flash_leave_low_power_mode+0x64>)
   11aa6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   11aa8:	4b0e      	ldr	r3, [pc, #56]	; (11ae4 <spi_flash_leave_low_power_mode+0x70>)
   11aaa:	2100      	movs	r1, #0
   11aac:	0018      	movs	r0, r3
   11aae:	4b0a      	ldr	r3, [pc, #40]	; (11ad8 <spi_flash_leave_low_power_mode+0x64>)
   11ab0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   11ab2:	4b0d      	ldr	r3, [pc, #52]	; (11ae8 <spi_flash_leave_low_power_mode+0x74>)
   11ab4:	2181      	movs	r1, #129	; 0x81
   11ab6:	0018      	movs	r0, r3
   11ab8:	4b07      	ldr	r3, [pc, #28]	; (11ad8 <spi_flash_leave_low_power_mode+0x64>)
   11aba:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   11abc:	46c0      	nop			; (mov r8, r8)
   11abe:	4b0b      	ldr	r3, [pc, #44]	; (11aec <spi_flash_leave_low_power_mode+0x78>)
   11ac0:	0018      	movs	r0, r3
   11ac2:	4b0b      	ldr	r3, [pc, #44]	; (11af0 <spi_flash_leave_low_power_mode+0x7c>)
   11ac4:	4798      	blx	r3
   11ac6:	0003      	movs	r3, r0
   11ac8:	2b01      	cmp	r3, #1
   11aca:	d1f8      	bne.n	11abe <spi_flash_leave_low_power_mode+0x4a>
}
   11acc:	46c0      	nop			; (mov r8, r8)
   11ace:	46bd      	mov	sp, r7
   11ad0:	b002      	add	sp, #8
   11ad2:	bd80      	pop	{r7, pc}
   11ad4:	00010208 	.word	0x00010208
   11ad8:	0000e855 	.word	0x0000e855
   11adc:	0001020c 	.word	0x0001020c
   11ae0:	00010214 	.word	0x00010214
   11ae4:	0001021c 	.word	0x0001021c
   11ae8:	00010204 	.word	0x00010204
   11aec:	00010218 	.word	0x00010218
   11af0:	0000e811 	.word	0x0000e811

00011af4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   11af4:	b590      	push	{r4, r7, lr}
   11af6:	b085      	sub	sp, #20
   11af8:	af00      	add	r7, sp, #0
   11afa:	0002      	movs	r2, r0
   11afc:	1dfb      	adds	r3, r7, #7
   11afe:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   11b00:	230f      	movs	r3, #15
   11b02:	18fb      	adds	r3, r7, r3
   11b04:	2200      	movs	r2, #0
   11b06:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   11b08:	4b24      	ldr	r3, [pc, #144]	; (11b9c <spi_flash_enable+0xa8>)
   11b0a:	4798      	blx	r3
   11b0c:	0003      	movs	r3, r0
   11b0e:	051b      	lsls	r3, r3, #20
   11b10:	0d1b      	lsrs	r3, r3, #20
   11b12:	4a23      	ldr	r2, [pc, #140]	; (11ba0 <spi_flash_enable+0xac>)
   11b14:	4293      	cmp	r3, r2
   11b16:	d938      	bls.n	11b8a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   11b18:	230f      	movs	r3, #15
   11b1a:	18fc      	adds	r4, r7, r3
   11b1c:	2308      	movs	r3, #8
   11b1e:	18fb      	adds	r3, r7, r3
   11b20:	4a20      	ldr	r2, [pc, #128]	; (11ba4 <spi_flash_enable+0xb0>)
   11b22:	0019      	movs	r1, r3
   11b24:	0010      	movs	r0, r2
   11b26:	4b20      	ldr	r3, [pc, #128]	; (11ba8 <spi_flash_enable+0xb4>)
   11b28:	4798      	blx	r3
   11b2a:	0003      	movs	r3, r0
   11b2c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   11b2e:	230f      	movs	r3, #15
   11b30:	18fb      	adds	r3, r7, r3
   11b32:	781b      	ldrb	r3, [r3, #0]
   11b34:	b25b      	sxtb	r3, r3
   11b36:	2b00      	cmp	r3, #0
   11b38:	d126      	bne.n	11b88 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   11b3a:	68bb      	ldr	r3, [r7, #8]
   11b3c:	4a1b      	ldr	r2, [pc, #108]	; (11bac <spi_flash_enable+0xb8>)
   11b3e:	4013      	ands	r3, r2
   11b40:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   11b42:	68bb      	ldr	r3, [r7, #8]
   11b44:	4a1a      	ldr	r2, [pc, #104]	; (11bb0 <spi_flash_enable+0xbc>)
   11b46:	4313      	orrs	r3, r2
   11b48:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   11b4a:	68bb      	ldr	r3, [r7, #8]
   11b4c:	4a15      	ldr	r2, [pc, #84]	; (11ba4 <spi_flash_enable+0xb0>)
   11b4e:	0019      	movs	r1, r3
   11b50:	0010      	movs	r0, r2
   11b52:	4b18      	ldr	r3, [pc, #96]	; (11bb4 <spi_flash_enable+0xc0>)
   11b54:	4798      	blx	r3
		if(enable) {
   11b56:	1dfb      	adds	r3, r7, #7
   11b58:	781b      	ldrb	r3, [r3, #0]
   11b5a:	2b00      	cmp	r3, #0
   11b5c:	d002      	beq.n	11b64 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   11b5e:	4b16      	ldr	r3, [pc, #88]	; (11bb8 <spi_flash_enable+0xc4>)
   11b60:	4798      	blx	r3
   11b62:	e001      	b.n	11b68 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   11b64:	4b15      	ldr	r3, [pc, #84]	; (11bbc <spi_flash_enable+0xc8>)
   11b66:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   11b68:	68bb      	ldr	r3, [r7, #8]
   11b6a:	4a10      	ldr	r2, [pc, #64]	; (11bac <spi_flash_enable+0xb8>)
   11b6c:	4013      	ands	r3, r2
   11b6e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   11b70:	68bb      	ldr	r3, [r7, #8]
   11b72:	2280      	movs	r2, #128	; 0x80
   11b74:	0252      	lsls	r2, r2, #9
   11b76:	4313      	orrs	r3, r2
   11b78:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   11b7a:	68bb      	ldr	r3, [r7, #8]
   11b7c:	4a09      	ldr	r2, [pc, #36]	; (11ba4 <spi_flash_enable+0xb0>)
   11b7e:	0019      	movs	r1, r3
   11b80:	0010      	movs	r0, r2
   11b82:	4b0c      	ldr	r3, [pc, #48]	; (11bb4 <spi_flash_enable+0xc0>)
   11b84:	4798      	blx	r3
   11b86:	e000      	b.n	11b8a <spi_flash_enable+0x96>
			goto ERR1;
   11b88:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   11b8a:	230f      	movs	r3, #15
   11b8c:	18fb      	adds	r3, r7, r3
   11b8e:	781b      	ldrb	r3, [r3, #0]
   11b90:	b25b      	sxtb	r3, r3
}
   11b92:	0018      	movs	r0, r3
   11b94:	46bd      	mov	sp, r7
   11b96:	b005      	add	sp, #20
   11b98:	bd90      	pop	{r4, r7, pc}
   11b9a:	46c0      	nop			; (mov r8, r8)
   11b9c:	0000e131 	.word	0x0000e131
   11ba0:	0000039f 	.word	0x0000039f
   11ba4:	00001410 	.word	0x00001410
   11ba8:	0000e831 	.word	0x0000e831
   11bac:	f8888fff 	.word	0xf8888fff
   11bb0:	01111000 	.word	0x01111000
   11bb4:	0000e855 	.word	0x0000e855
   11bb8:	00011a75 	.word	0x00011a75
   11bbc:	000119f5 	.word	0x000119f5

00011bc0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   11bc0:	b580      	push	{r7, lr}
   11bc2:	b084      	sub	sp, #16
   11bc4:	af00      	add	r7, sp, #0
   11bc6:	0002      	movs	r2, r0
   11bc8:	1dfb      	adds	r3, r7, #7
   11bca:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   11bcc:	1dfb      	adds	r3, r7, #7
   11bce:	781b      	ldrb	r3, [r3, #0]
   11bd0:	2b00      	cmp	r3, #0
   11bd2:	d108      	bne.n	11be6 <mem_test_unit_ready+0x26>
   11bd4:	1dfb      	adds	r3, r7, #7
   11bd6:	781a      	ldrb	r2, [r3, #0]
   11bd8:	4b08      	ldr	r3, [pc, #32]	; (11bfc <mem_test_unit_ready+0x3c>)
   11bda:	0152      	lsls	r2, r2, #5
   11bdc:	58d3      	ldr	r3, [r2, r3]
   11bde:	4798      	blx	r3
   11be0:	0003      	movs	r3, r0
   11be2:	001a      	movs	r2, r3
   11be4:	e000      	b.n	11be8 <mem_test_unit_ready+0x28>
   11be6:	2201      	movs	r2, #1
  status =
   11be8:	230f      	movs	r3, #15
   11bea:	18fb      	adds	r3, r7, r3
   11bec:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   11bee:	230f      	movs	r3, #15
   11bf0:	18fb      	adds	r3, r7, r3
   11bf2:	781b      	ldrb	r3, [r3, #0]
}
   11bf4:	0018      	movs	r0, r3
   11bf6:	46bd      	mov	sp, r7
   11bf8:	b004      	add	sp, #16
   11bfa:	bd80      	pop	{r7, pc}
   11bfc:	0002486c 	.word	0x0002486c

00011c00 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   11c00:	b580      	push	{r7, lr}
   11c02:	b084      	sub	sp, #16
   11c04:	af00      	add	r7, sp, #0
   11c06:	0002      	movs	r2, r0
   11c08:	6039      	str	r1, [r7, #0]
   11c0a:	1dfb      	adds	r3, r7, #7
   11c0c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   11c0e:	1dfb      	adds	r3, r7, #7
   11c10:	781b      	ldrb	r3, [r3, #0]
   11c12:	2b00      	cmp	r3, #0
   11c14:	d10c      	bne.n	11c30 <mem_read_capacity+0x30>
   11c16:	1dfb      	adds	r3, r7, #7
   11c18:	781b      	ldrb	r3, [r3, #0]
   11c1a:	4a0b      	ldr	r2, [pc, #44]	; (11c48 <mem_read_capacity+0x48>)
   11c1c:	015b      	lsls	r3, r3, #5
   11c1e:	18d3      	adds	r3, r2, r3
   11c20:	3304      	adds	r3, #4
   11c22:	681b      	ldr	r3, [r3, #0]
   11c24:	683a      	ldr	r2, [r7, #0]
   11c26:	0010      	movs	r0, r2
   11c28:	4798      	blx	r3
   11c2a:	0003      	movs	r3, r0
   11c2c:	001a      	movs	r2, r3
   11c2e:	e000      	b.n	11c32 <mem_read_capacity+0x32>
   11c30:	2201      	movs	r2, #1
  status =
   11c32:	230f      	movs	r3, #15
   11c34:	18fb      	adds	r3, r7, r3
   11c36:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   11c38:	230f      	movs	r3, #15
   11c3a:	18fb      	adds	r3, r7, r3
   11c3c:	781b      	ldrb	r3, [r3, #0]
}
   11c3e:	0018      	movs	r0, r3
   11c40:	46bd      	mov	sp, r7
   11c42:	b004      	add	sp, #16
   11c44:	bd80      	pop	{r7, pc}
   11c46:	46c0      	nop			; (mov r8, r8)
   11c48:	0002486c 	.word	0x0002486c

00011c4c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   11c4c:	b580      	push	{r7, lr}
   11c4e:	b084      	sub	sp, #16
   11c50:	af00      	add	r7, sp, #0
   11c52:	0002      	movs	r2, r0
   11c54:	1dfb      	adds	r3, r7, #7
   11c56:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   11c58:	1dfb      	adds	r3, r7, #7
   11c5a:	781b      	ldrb	r3, [r3, #0]
   11c5c:	425a      	negs	r2, r3
   11c5e:	4153      	adcs	r3, r2
   11c60:	b2da      	uxtb	r2, r3
  sector_size =
   11c62:	230f      	movs	r3, #15
   11c64:	18fb      	adds	r3, r7, r3
   11c66:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   11c68:	230f      	movs	r3, #15
   11c6a:	18fb      	adds	r3, r7, r3
   11c6c:	781b      	ldrb	r3, [r3, #0]
}
   11c6e:	0018      	movs	r0, r3
   11c70:	46bd      	mov	sp, r7
   11c72:	b004      	add	sp, #16
   11c74:	bd80      	pop	{r7, pc}
	...

00011c78 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   11c78:	b580      	push	{r7, lr}
   11c7a:	b084      	sub	sp, #16
   11c7c:	af00      	add	r7, sp, #0
   11c7e:	0002      	movs	r2, r0
   11c80:	1dfb      	adds	r3, r7, #7
   11c82:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   11c84:	1dfb      	adds	r3, r7, #7
   11c86:	781b      	ldrb	r3, [r3, #0]
   11c88:	2b00      	cmp	r3, #0
   11c8a:	d109      	bne.n	11ca0 <mem_wr_protect+0x28>
   11c8c:	1dfb      	adds	r3, r7, #7
   11c8e:	781b      	ldrb	r3, [r3, #0]
   11c90:	4a0a      	ldr	r2, [pc, #40]	; (11cbc <mem_wr_protect+0x44>)
   11c92:	015b      	lsls	r3, r3, #5
   11c94:	18d3      	adds	r3, r2, r3
   11c96:	330c      	adds	r3, #12
   11c98:	681b      	ldr	r3, [r3, #0]
   11c9a:	4798      	blx	r3
   11c9c:	1e03      	subs	r3, r0, #0
   11c9e:	d001      	beq.n	11ca4 <mem_wr_protect+0x2c>
   11ca0:	2201      	movs	r2, #1
   11ca2:	e000      	b.n	11ca6 <mem_wr_protect+0x2e>
   11ca4:	2200      	movs	r2, #0
  wr_protect =
   11ca6:	230f      	movs	r3, #15
   11ca8:	18fb      	adds	r3, r7, r3
   11caa:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   11cac:	230f      	movs	r3, #15
   11cae:	18fb      	adds	r3, r7, r3
   11cb0:	781b      	ldrb	r3, [r3, #0]
}
   11cb2:	0018      	movs	r0, r3
   11cb4:	46bd      	mov	sp, r7
   11cb6:	b004      	add	sp, #16
   11cb8:	bd80      	pop	{r7, pc}
   11cba:	46c0      	nop			; (mov r8, r8)
   11cbc:	0002486c 	.word	0x0002486c

00011cc0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   11cc0:	b580      	push	{r7, lr}
   11cc2:	b086      	sub	sp, #24
   11cc4:	af00      	add	r7, sp, #0
   11cc6:	60b9      	str	r1, [r7, #8]
   11cc8:	607a      	str	r2, [r7, #4]
   11cca:	230f      	movs	r3, #15
   11ccc:	18fb      	adds	r3, r7, r3
   11cce:	1c02      	adds	r2, r0, #0
   11cd0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   11cd2:	230f      	movs	r3, #15
   11cd4:	18fb      	adds	r3, r7, r3
   11cd6:	781b      	ldrb	r3, [r3, #0]
   11cd8:	2b00      	cmp	r3, #0
   11cda:	d10e      	bne.n	11cfa <memory_2_ram+0x3a>
   11cdc:	230f      	movs	r3, #15
   11cde:	18fb      	adds	r3, r7, r3
   11ce0:	781b      	ldrb	r3, [r3, #0]
   11ce2:	4a0b      	ldr	r2, [pc, #44]	; (11d10 <memory_2_ram+0x50>)
   11ce4:	015b      	lsls	r3, r3, #5
   11ce6:	18d3      	adds	r3, r2, r3
   11ce8:	3314      	adds	r3, #20
   11cea:	681b      	ldr	r3, [r3, #0]
   11cec:	6879      	ldr	r1, [r7, #4]
   11cee:	68ba      	ldr	r2, [r7, #8]
   11cf0:	0010      	movs	r0, r2
   11cf2:	4798      	blx	r3
   11cf4:	0003      	movs	r3, r0
   11cf6:	001a      	movs	r2, r3
   11cf8:	e000      	b.n	11cfc <memory_2_ram+0x3c>
   11cfa:	2201      	movs	r2, #1
  status =
   11cfc:	2317      	movs	r3, #23
   11cfe:	18fb      	adds	r3, r7, r3
   11d00:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   11d02:	2317      	movs	r3, #23
   11d04:	18fb      	adds	r3, r7, r3
   11d06:	781b      	ldrb	r3, [r3, #0]
}
   11d08:	0018      	movs	r0, r3
   11d0a:	46bd      	mov	sp, r7
   11d0c:	b006      	add	sp, #24
   11d0e:	bd80      	pop	{r7, pc}
   11d10:	0002486c 	.word	0x0002486c

00011d14 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   11d14:	b580      	push	{r7, lr}
   11d16:	b086      	sub	sp, #24
   11d18:	af00      	add	r7, sp, #0
   11d1a:	60b9      	str	r1, [r7, #8]
   11d1c:	607a      	str	r2, [r7, #4]
   11d1e:	230f      	movs	r3, #15
   11d20:	18fb      	adds	r3, r7, r3
   11d22:	1c02      	adds	r2, r0, #0
   11d24:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   11d26:	230f      	movs	r3, #15
   11d28:	18fb      	adds	r3, r7, r3
   11d2a:	781b      	ldrb	r3, [r3, #0]
   11d2c:	2b00      	cmp	r3, #0
   11d2e:	d10e      	bne.n	11d4e <ram_2_memory+0x3a>
   11d30:	230f      	movs	r3, #15
   11d32:	18fb      	adds	r3, r7, r3
   11d34:	781b      	ldrb	r3, [r3, #0]
   11d36:	4a0b      	ldr	r2, [pc, #44]	; (11d64 <ram_2_memory+0x50>)
   11d38:	015b      	lsls	r3, r3, #5
   11d3a:	18d3      	adds	r3, r2, r3
   11d3c:	3318      	adds	r3, #24
   11d3e:	681b      	ldr	r3, [r3, #0]
   11d40:	6879      	ldr	r1, [r7, #4]
   11d42:	68ba      	ldr	r2, [r7, #8]
   11d44:	0010      	movs	r0, r2
   11d46:	4798      	blx	r3
   11d48:	0003      	movs	r3, r0
   11d4a:	001a      	movs	r2, r3
   11d4c:	e000      	b.n	11d50 <ram_2_memory+0x3c>
   11d4e:	2201      	movs	r2, #1
  status =
   11d50:	2317      	movs	r3, #23
   11d52:	18fb      	adds	r3, r7, r3
   11d54:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   11d56:	2317      	movs	r3, #23
   11d58:	18fb      	adds	r3, r7, r3
   11d5a:	781b      	ldrb	r3, [r3, #0]
}
   11d5c:	0018      	movs	r0, r3
   11d5e:	46bd      	mov	sp, r7
   11d60:	b006      	add	sp, #24
   11d62:	bd80      	pop	{r7, pc}
   11d64:	0002486c 	.word	0x0002486c

00011d68 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   11d68:	b580      	push	{r7, lr}
   11d6a:	b082      	sub	sp, #8
   11d6c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   11d6e:	4b10      	ldr	r3, [pc, #64]	; (11db0 <cpu_irq_enter_critical+0x48>)
   11d70:	681b      	ldr	r3, [r3, #0]
   11d72:	2b00      	cmp	r3, #0
   11d74:	d112      	bne.n	11d9c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   11d76:	f3ef 8310 	mrs	r3, PRIMASK
   11d7a:	607b      	str	r3, [r7, #4]
  return(result);
   11d7c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   11d7e:	2b00      	cmp	r3, #0
   11d80:	d109      	bne.n	11d96 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   11d82:	b672      	cpsid	i
   11d84:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   11d88:	4b0a      	ldr	r3, [pc, #40]	; (11db4 <cpu_irq_enter_critical+0x4c>)
   11d8a:	2200      	movs	r2, #0
   11d8c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   11d8e:	4b0a      	ldr	r3, [pc, #40]	; (11db8 <cpu_irq_enter_critical+0x50>)
   11d90:	2201      	movs	r2, #1
   11d92:	701a      	strb	r2, [r3, #0]
   11d94:	e002      	b.n	11d9c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   11d96:	4b08      	ldr	r3, [pc, #32]	; (11db8 <cpu_irq_enter_critical+0x50>)
   11d98:	2200      	movs	r2, #0
   11d9a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   11d9c:	4b04      	ldr	r3, [pc, #16]	; (11db0 <cpu_irq_enter_critical+0x48>)
   11d9e:	681b      	ldr	r3, [r3, #0]
   11da0:	1c5a      	adds	r2, r3, #1
   11da2:	4b03      	ldr	r3, [pc, #12]	; (11db0 <cpu_irq_enter_critical+0x48>)
   11da4:	601a      	str	r2, [r3, #0]
}
   11da6:	46c0      	nop			; (mov r8, r8)
   11da8:	46bd      	mov	sp, r7
   11daa:	b002      	add	sp, #8
   11dac:	bd80      	pop	{r7, pc}
   11dae:	46c0      	nop			; (mov r8, r8)
   11db0:	20003d20 	.word	0x20003d20
   11db4:	2000010a 	.word	0x2000010a
   11db8:	20003d24 	.word	0x20003d24

00011dbc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   11dbc:	b580      	push	{r7, lr}
   11dbe:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   11dc0:	4b0b      	ldr	r3, [pc, #44]	; (11df0 <cpu_irq_leave_critical+0x34>)
   11dc2:	681b      	ldr	r3, [r3, #0]
   11dc4:	1e5a      	subs	r2, r3, #1
   11dc6:	4b0a      	ldr	r3, [pc, #40]	; (11df0 <cpu_irq_leave_critical+0x34>)
   11dc8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   11dca:	4b09      	ldr	r3, [pc, #36]	; (11df0 <cpu_irq_leave_critical+0x34>)
   11dcc:	681b      	ldr	r3, [r3, #0]
   11dce:	2b00      	cmp	r3, #0
   11dd0:	d10a      	bne.n	11de8 <cpu_irq_leave_critical+0x2c>
   11dd2:	4b08      	ldr	r3, [pc, #32]	; (11df4 <cpu_irq_leave_critical+0x38>)
   11dd4:	781b      	ldrb	r3, [r3, #0]
   11dd6:	b2db      	uxtb	r3, r3
   11dd8:	2b00      	cmp	r3, #0
   11dda:	d005      	beq.n	11de8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   11ddc:	4b06      	ldr	r3, [pc, #24]	; (11df8 <cpu_irq_leave_critical+0x3c>)
   11dde:	2201      	movs	r2, #1
   11de0:	701a      	strb	r2, [r3, #0]
   11de2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   11de6:	b662      	cpsie	i
	}
}
   11de8:	46c0      	nop			; (mov r8, r8)
   11dea:	46bd      	mov	sp, r7
   11dec:	bd80      	pop	{r7, pc}
   11dee:	46c0      	nop			; (mov r8, r8)
   11df0:	20003d20 	.word	0x20003d20
   11df4:	20003d24 	.word	0x20003d24
   11df8:	2000010a 	.word	0x2000010a

00011dfc <system_pinmux_get_group_from_gpio_pin>:
{
   11dfc:	b580      	push	{r7, lr}
   11dfe:	b084      	sub	sp, #16
   11e00:	af00      	add	r7, sp, #0
   11e02:	0002      	movs	r2, r0
   11e04:	1dfb      	adds	r3, r7, #7
   11e06:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   11e08:	230f      	movs	r3, #15
   11e0a:	18fb      	adds	r3, r7, r3
   11e0c:	1dfa      	adds	r2, r7, #7
   11e0e:	7812      	ldrb	r2, [r2, #0]
   11e10:	09d2      	lsrs	r2, r2, #7
   11e12:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   11e14:	230e      	movs	r3, #14
   11e16:	18fb      	adds	r3, r7, r3
   11e18:	1dfa      	adds	r2, r7, #7
   11e1a:	7812      	ldrb	r2, [r2, #0]
   11e1c:	0952      	lsrs	r2, r2, #5
   11e1e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   11e20:	4b0d      	ldr	r3, [pc, #52]	; (11e58 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   11e22:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   11e24:	230f      	movs	r3, #15
   11e26:	18fb      	adds	r3, r7, r3
   11e28:	781b      	ldrb	r3, [r3, #0]
   11e2a:	2b00      	cmp	r3, #0
   11e2c:	d10f      	bne.n	11e4e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   11e2e:	230f      	movs	r3, #15
   11e30:	18fb      	adds	r3, r7, r3
   11e32:	781b      	ldrb	r3, [r3, #0]
   11e34:	009b      	lsls	r3, r3, #2
   11e36:	2210      	movs	r2, #16
   11e38:	4694      	mov	ip, r2
   11e3a:	44bc      	add	ip, r7
   11e3c:	4463      	add	r3, ip
   11e3e:	3b08      	subs	r3, #8
   11e40:	681a      	ldr	r2, [r3, #0]
   11e42:	230e      	movs	r3, #14
   11e44:	18fb      	adds	r3, r7, r3
   11e46:	781b      	ldrb	r3, [r3, #0]
   11e48:	01db      	lsls	r3, r3, #7
   11e4a:	18d3      	adds	r3, r2, r3
   11e4c:	e000      	b.n	11e50 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   11e4e:	2300      	movs	r3, #0
}
   11e50:	0018      	movs	r0, r3
   11e52:	46bd      	mov	sp, r7
   11e54:	b004      	add	sp, #16
   11e56:	bd80      	pop	{r7, pc}
   11e58:	41004400 	.word	0x41004400

00011e5c <port_get_group_from_gpio_pin>:
{
   11e5c:	b580      	push	{r7, lr}
   11e5e:	b082      	sub	sp, #8
   11e60:	af00      	add	r7, sp, #0
   11e62:	0002      	movs	r2, r0
   11e64:	1dfb      	adds	r3, r7, #7
   11e66:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   11e68:	1dfb      	adds	r3, r7, #7
   11e6a:	781b      	ldrb	r3, [r3, #0]
   11e6c:	0018      	movs	r0, r3
   11e6e:	4b03      	ldr	r3, [pc, #12]	; (11e7c <port_get_group_from_gpio_pin+0x20>)
   11e70:	4798      	blx	r3
   11e72:	0003      	movs	r3, r0
}
   11e74:	0018      	movs	r0, r3
   11e76:	46bd      	mov	sp, r7
   11e78:	b002      	add	sp, #8
   11e7a:	bd80      	pop	{r7, pc}
   11e7c:	00011dfd 	.word	0x00011dfd

00011e80 <port_get_config_defaults>:
{
   11e80:	b580      	push	{r7, lr}
   11e82:	b082      	sub	sp, #8
   11e84:	af00      	add	r7, sp, #0
   11e86:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   11e88:	687b      	ldr	r3, [r7, #4]
   11e8a:	2200      	movs	r2, #0
   11e8c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   11e8e:	687b      	ldr	r3, [r7, #4]
   11e90:	2201      	movs	r2, #1
   11e92:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   11e94:	687b      	ldr	r3, [r7, #4]
   11e96:	2200      	movs	r2, #0
   11e98:	709a      	strb	r2, [r3, #2]
}
   11e9a:	46c0      	nop			; (mov r8, r8)
   11e9c:	46bd      	mov	sp, r7
   11e9e:	b002      	add	sp, #8
   11ea0:	bd80      	pop	{r7, pc}
	...

00011ea4 <port_pin_set_output_level>:
{
   11ea4:	b580      	push	{r7, lr}
   11ea6:	b084      	sub	sp, #16
   11ea8:	af00      	add	r7, sp, #0
   11eaa:	0002      	movs	r2, r0
   11eac:	1dfb      	adds	r3, r7, #7
   11eae:	701a      	strb	r2, [r3, #0]
   11eb0:	1dbb      	adds	r3, r7, #6
   11eb2:	1c0a      	adds	r2, r1, #0
   11eb4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   11eb6:	1dfb      	adds	r3, r7, #7
   11eb8:	781b      	ldrb	r3, [r3, #0]
   11eba:	0018      	movs	r0, r3
   11ebc:	4b0d      	ldr	r3, [pc, #52]	; (11ef4 <port_pin_set_output_level+0x50>)
   11ebe:	4798      	blx	r3
   11ec0:	0003      	movs	r3, r0
   11ec2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   11ec4:	1dfb      	adds	r3, r7, #7
   11ec6:	781b      	ldrb	r3, [r3, #0]
   11ec8:	221f      	movs	r2, #31
   11eca:	4013      	ands	r3, r2
   11ecc:	2201      	movs	r2, #1
   11ece:	409a      	lsls	r2, r3
   11ed0:	0013      	movs	r3, r2
   11ed2:	60bb      	str	r3, [r7, #8]
	if (level) {
   11ed4:	1dbb      	adds	r3, r7, #6
   11ed6:	781b      	ldrb	r3, [r3, #0]
   11ed8:	2b00      	cmp	r3, #0
   11eda:	d003      	beq.n	11ee4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   11edc:	68fb      	ldr	r3, [r7, #12]
   11ede:	68ba      	ldr	r2, [r7, #8]
   11ee0:	619a      	str	r2, [r3, #24]
}
   11ee2:	e002      	b.n	11eea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   11ee4:	68fb      	ldr	r3, [r7, #12]
   11ee6:	68ba      	ldr	r2, [r7, #8]
   11ee8:	615a      	str	r2, [r3, #20]
}
   11eea:	46c0      	nop			; (mov r8, r8)
   11eec:	46bd      	mov	sp, r7
   11eee:	b004      	add	sp, #16
   11ef0:	bd80      	pop	{r7, pc}
   11ef2:	46c0      	nop			; (mov r8, r8)
   11ef4:	00011e5d 	.word	0x00011e5d

00011ef8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   11ef8:	b580      	push	{r7, lr}
   11efa:	b082      	sub	sp, #8
   11efc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   11efe:	1d3b      	adds	r3, r7, #4
   11f00:	0018      	movs	r0, r3
   11f02:	4b0e      	ldr	r3, [pc, #56]	; (11f3c <system_board_init+0x44>)
   11f04:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   11f06:	1d3b      	adds	r3, r7, #4
   11f08:	2201      	movs	r2, #1
   11f0a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   11f0c:	1d3b      	adds	r3, r7, #4
   11f0e:	0019      	movs	r1, r3
   11f10:	2017      	movs	r0, #23
   11f12:	4b0b      	ldr	r3, [pc, #44]	; (11f40 <system_board_init+0x48>)
   11f14:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   11f16:	2101      	movs	r1, #1
   11f18:	2017      	movs	r0, #23
   11f1a:	4b0a      	ldr	r3, [pc, #40]	; (11f44 <system_board_init+0x4c>)
   11f1c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   11f1e:	1d3b      	adds	r3, r7, #4
   11f20:	2200      	movs	r2, #0
   11f22:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   11f24:	1d3b      	adds	r3, r7, #4
   11f26:	2201      	movs	r2, #1
   11f28:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   11f2a:	1d3b      	adds	r3, r7, #4
   11f2c:	0019      	movs	r1, r3
   11f2e:	2037      	movs	r0, #55	; 0x37
   11f30:	4b03      	ldr	r3, [pc, #12]	; (11f40 <system_board_init+0x48>)
   11f32:	4798      	blx	r3
}
   11f34:	46c0      	nop			; (mov r8, r8)
   11f36:	46bd      	mov	sp, r7
   11f38:	b002      	add	sp, #8
   11f3a:	bd80      	pop	{r7, pc}
   11f3c:	00011e81 	.word	0x00011e81
   11f40:	0001256d 	.word	0x0001256d
   11f44:	00011ea5 	.word	0x00011ea5

00011f48 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   11f48:	b580      	push	{r7, lr}
   11f4a:	b084      	sub	sp, #16
   11f4c:	af00      	add	r7, sp, #0
   11f4e:	0002      	movs	r2, r0
   11f50:	1dfb      	adds	r3, r7, #7
   11f52:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   11f54:	230f      	movs	r3, #15
   11f56:	18fb      	adds	r3, r7, r3
   11f58:	1dfa      	adds	r2, r7, #7
   11f5a:	7812      	ldrb	r2, [r2, #0]
   11f5c:	0952      	lsrs	r2, r2, #5
   11f5e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   11f60:	230f      	movs	r3, #15
   11f62:	18fb      	adds	r3, r7, r3
   11f64:	781b      	ldrb	r3, [r3, #0]
   11f66:	2b00      	cmp	r3, #0
   11f68:	d10c      	bne.n	11f84 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   11f6a:	4b09      	ldr	r3, [pc, #36]	; (11f90 <_extint_get_eic_from_channel+0x48>)
   11f6c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   11f6e:	230f      	movs	r3, #15
   11f70:	18fb      	adds	r3, r7, r3
   11f72:	781b      	ldrb	r3, [r3, #0]
   11f74:	009b      	lsls	r3, r3, #2
   11f76:	2210      	movs	r2, #16
   11f78:	4694      	mov	ip, r2
   11f7a:	44bc      	add	ip, r7
   11f7c:	4463      	add	r3, ip
   11f7e:	3b08      	subs	r3, #8
   11f80:	681b      	ldr	r3, [r3, #0]
   11f82:	e000      	b.n	11f86 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   11f84:	2300      	movs	r3, #0
	}
}
   11f86:	0018      	movs	r0, r3
   11f88:	46bd      	mov	sp, r7
   11f8a:	b004      	add	sp, #16
   11f8c:	bd80      	pop	{r7, pc}
   11f8e:	46c0      	nop			; (mov r8, r8)
   11f90:	40001800 	.word	0x40001800

00011f94 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   11f94:	b580      	push	{r7, lr}
   11f96:	b084      	sub	sp, #16
   11f98:	af00      	add	r7, sp, #0
   11f9a:	0002      	movs	r2, r0
   11f9c:	1dfb      	adds	r3, r7, #7
   11f9e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   11fa0:	1dfb      	adds	r3, r7, #7
   11fa2:	781b      	ldrb	r3, [r3, #0]
   11fa4:	0018      	movs	r0, r3
   11fa6:	4b0b      	ldr	r3, [pc, #44]	; (11fd4 <extint_chan_is_detected+0x40>)
   11fa8:	4798      	blx	r3
   11faa:	0003      	movs	r3, r0
   11fac:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   11fae:	1dfb      	adds	r3, r7, #7
   11fb0:	781b      	ldrb	r3, [r3, #0]
   11fb2:	221f      	movs	r2, #31
   11fb4:	4013      	ands	r3, r2
   11fb6:	2201      	movs	r2, #1
   11fb8:	409a      	lsls	r2, r3
   11fba:	0013      	movs	r3, r2
   11fbc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   11fbe:	68fb      	ldr	r3, [r7, #12]
   11fc0:	691b      	ldr	r3, [r3, #16]
   11fc2:	68ba      	ldr	r2, [r7, #8]
   11fc4:	4013      	ands	r3, r2
   11fc6:	1e5a      	subs	r2, r3, #1
   11fc8:	4193      	sbcs	r3, r2
   11fca:	b2db      	uxtb	r3, r3
}
   11fcc:	0018      	movs	r0, r3
   11fce:	46bd      	mov	sp, r7
   11fd0:	b004      	add	sp, #16
   11fd2:	bd80      	pop	{r7, pc}
   11fd4:	00011f49 	.word	0x00011f49

00011fd8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   11fd8:	b580      	push	{r7, lr}
   11fda:	b084      	sub	sp, #16
   11fdc:	af00      	add	r7, sp, #0
   11fde:	0002      	movs	r2, r0
   11fe0:	1dfb      	adds	r3, r7, #7
   11fe2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   11fe4:	1dfb      	adds	r3, r7, #7
   11fe6:	781b      	ldrb	r3, [r3, #0]
   11fe8:	0018      	movs	r0, r3
   11fea:	4b09      	ldr	r3, [pc, #36]	; (12010 <extint_chan_clear_detected+0x38>)
   11fec:	4798      	blx	r3
   11fee:	0003      	movs	r3, r0
   11ff0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   11ff2:	1dfb      	adds	r3, r7, #7
   11ff4:	781b      	ldrb	r3, [r3, #0]
   11ff6:	221f      	movs	r2, #31
   11ff8:	4013      	ands	r3, r2
   11ffa:	2201      	movs	r2, #1
   11ffc:	409a      	lsls	r2, r3
   11ffe:	0013      	movs	r3, r2
   12000:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   12002:	68fb      	ldr	r3, [r7, #12]
   12004:	68ba      	ldr	r2, [r7, #8]
   12006:	611a      	str	r2, [r3, #16]
}
   12008:	46c0      	nop			; (mov r8, r8)
   1200a:	46bd      	mov	sp, r7
   1200c:	b004      	add	sp, #16
   1200e:	bd80      	pop	{r7, pc}
   12010:	00011f49 	.word	0x00011f49

00012014 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   12014:	b580      	push	{r7, lr}
   12016:	b082      	sub	sp, #8
   12018:	af00      	add	r7, sp, #0
   1201a:	6078      	str	r0, [r7, #4]
   1201c:	0008      	movs	r0, r1
   1201e:	0011      	movs	r1, r2
   12020:	1cfb      	adds	r3, r7, #3
   12022:	1c02      	adds	r2, r0, #0
   12024:	701a      	strb	r2, [r3, #0]
   12026:	1cbb      	adds	r3, r7, #2
   12028:	1c0a      	adds	r2, r1, #0
   1202a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   1202c:	1cbb      	adds	r3, r7, #2
   1202e:	781b      	ldrb	r3, [r3, #0]
   12030:	2b00      	cmp	r3, #0
   12032:	d001      	beq.n	12038 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   12034:	2317      	movs	r3, #23
   12036:	e019      	b.n	1206c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   12038:	1cfb      	adds	r3, r7, #3
   1203a:	781a      	ldrb	r2, [r3, #0]
   1203c:	4b0d      	ldr	r3, [pc, #52]	; (12074 <extint_register_callback+0x60>)
   1203e:	0092      	lsls	r2, r2, #2
   12040:	58d3      	ldr	r3, [r2, r3]
   12042:	2b00      	cmp	r3, #0
   12044:	d107      	bne.n	12056 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   12046:	1cfb      	adds	r3, r7, #3
   12048:	781a      	ldrb	r2, [r3, #0]
   1204a:	4b0a      	ldr	r3, [pc, #40]	; (12074 <extint_register_callback+0x60>)
   1204c:	0092      	lsls	r2, r2, #2
   1204e:	6879      	ldr	r1, [r7, #4]
   12050:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   12052:	2300      	movs	r3, #0
   12054:	e00a      	b.n	1206c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   12056:	1cfb      	adds	r3, r7, #3
   12058:	781a      	ldrb	r2, [r3, #0]
   1205a:	4b06      	ldr	r3, [pc, #24]	; (12074 <extint_register_callback+0x60>)
   1205c:	0092      	lsls	r2, r2, #2
   1205e:	58d2      	ldr	r2, [r2, r3]
   12060:	687b      	ldr	r3, [r7, #4]
   12062:	429a      	cmp	r2, r3
   12064:	d101      	bne.n	1206a <extint_register_callback+0x56>
		return STATUS_OK;
   12066:	2300      	movs	r3, #0
   12068:	e000      	b.n	1206c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   1206a:	231d      	movs	r3, #29
}
   1206c:	0018      	movs	r0, r3
   1206e:	46bd      	mov	sp, r7
   12070:	b002      	add	sp, #8
   12072:	bd80      	pop	{r7, pc}
   12074:	20005544 	.word	0x20005544

00012078 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   12078:	b580      	push	{r7, lr}
   1207a:	b084      	sub	sp, #16
   1207c:	af00      	add	r7, sp, #0
   1207e:	0002      	movs	r2, r0
   12080:	1dfb      	adds	r3, r7, #7
   12082:	701a      	strb	r2, [r3, #0]
   12084:	1dbb      	adds	r3, r7, #6
   12086:	1c0a      	adds	r2, r1, #0
   12088:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   1208a:	1dbb      	adds	r3, r7, #6
   1208c:	781b      	ldrb	r3, [r3, #0]
   1208e:	2b00      	cmp	r3, #0
   12090:	d10e      	bne.n	120b0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   12092:	1dfb      	adds	r3, r7, #7
   12094:	781b      	ldrb	r3, [r3, #0]
   12096:	0018      	movs	r0, r3
   12098:	4b08      	ldr	r3, [pc, #32]	; (120bc <extint_chan_enable_callback+0x44>)
   1209a:	4798      	blx	r3
   1209c:	0003      	movs	r3, r0
   1209e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   120a0:	1dfb      	adds	r3, r7, #7
   120a2:	781b      	ldrb	r3, [r3, #0]
   120a4:	2201      	movs	r2, #1
   120a6:	409a      	lsls	r2, r3
   120a8:	68fb      	ldr	r3, [r7, #12]
   120aa:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   120ac:	2300      	movs	r3, #0
   120ae:	e000      	b.n	120b2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   120b0:	2317      	movs	r3, #23
}
   120b2:	0018      	movs	r0, r3
   120b4:	46bd      	mov	sp, r7
   120b6:	b004      	add	sp, #16
   120b8:	bd80      	pop	{r7, pc}
   120ba:	46c0      	nop			; (mov r8, r8)
   120bc:	00011f49 	.word	0x00011f49

000120c0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   120c0:	b580      	push	{r7, lr}
   120c2:	b084      	sub	sp, #16
   120c4:	af00      	add	r7, sp, #0
   120c6:	0002      	movs	r2, r0
   120c8:	1dfb      	adds	r3, r7, #7
   120ca:	701a      	strb	r2, [r3, #0]
   120cc:	1dbb      	adds	r3, r7, #6
   120ce:	1c0a      	adds	r2, r1, #0
   120d0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   120d2:	1dbb      	adds	r3, r7, #6
   120d4:	781b      	ldrb	r3, [r3, #0]
   120d6:	2b00      	cmp	r3, #0
   120d8:	d10e      	bne.n	120f8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   120da:	1dfb      	adds	r3, r7, #7
   120dc:	781b      	ldrb	r3, [r3, #0]
   120de:	0018      	movs	r0, r3
   120e0:	4b08      	ldr	r3, [pc, #32]	; (12104 <extint_chan_disable_callback+0x44>)
   120e2:	4798      	blx	r3
   120e4:	0003      	movs	r3, r0
   120e6:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   120e8:	1dfb      	adds	r3, r7, #7
   120ea:	781b      	ldrb	r3, [r3, #0]
   120ec:	2201      	movs	r2, #1
   120ee:	409a      	lsls	r2, r3
   120f0:	68fb      	ldr	r3, [r7, #12]
   120f2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   120f4:	2300      	movs	r3, #0
   120f6:	e000      	b.n	120fa <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   120f8:	2317      	movs	r3, #23
}
   120fa:	0018      	movs	r0, r3
   120fc:	46bd      	mov	sp, r7
   120fe:	b004      	add	sp, #16
   12100:	bd80      	pop	{r7, pc}
   12102:	46c0      	nop			; (mov r8, r8)
   12104:	00011f49 	.word	0x00011f49

00012108 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   12108:	b580      	push	{r7, lr}
   1210a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1210c:	4b15      	ldr	r3, [pc, #84]	; (12164 <EIC_Handler+0x5c>)
   1210e:	2200      	movs	r2, #0
   12110:	701a      	strb	r2, [r3, #0]
   12112:	e020      	b.n	12156 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   12114:	4b13      	ldr	r3, [pc, #76]	; (12164 <EIC_Handler+0x5c>)
   12116:	781b      	ldrb	r3, [r3, #0]
   12118:	0018      	movs	r0, r3
   1211a:	4b13      	ldr	r3, [pc, #76]	; (12168 <EIC_Handler+0x60>)
   1211c:	4798      	blx	r3
   1211e:	1e03      	subs	r3, r0, #0
   12120:	d013      	beq.n	1214a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   12122:	4b10      	ldr	r3, [pc, #64]	; (12164 <EIC_Handler+0x5c>)
   12124:	781b      	ldrb	r3, [r3, #0]
   12126:	0018      	movs	r0, r3
   12128:	4b10      	ldr	r3, [pc, #64]	; (1216c <EIC_Handler+0x64>)
   1212a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   1212c:	4b0d      	ldr	r3, [pc, #52]	; (12164 <EIC_Handler+0x5c>)
   1212e:	781b      	ldrb	r3, [r3, #0]
   12130:	001a      	movs	r2, r3
   12132:	4b0f      	ldr	r3, [pc, #60]	; (12170 <EIC_Handler+0x68>)
   12134:	0092      	lsls	r2, r2, #2
   12136:	58d3      	ldr	r3, [r2, r3]
   12138:	2b00      	cmp	r3, #0
   1213a:	d006      	beq.n	1214a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   1213c:	4b09      	ldr	r3, [pc, #36]	; (12164 <EIC_Handler+0x5c>)
   1213e:	781b      	ldrb	r3, [r3, #0]
   12140:	001a      	movs	r2, r3
   12142:	4b0b      	ldr	r3, [pc, #44]	; (12170 <EIC_Handler+0x68>)
   12144:	0092      	lsls	r2, r2, #2
   12146:	58d3      	ldr	r3, [r2, r3]
   12148:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   1214a:	4b06      	ldr	r3, [pc, #24]	; (12164 <EIC_Handler+0x5c>)
   1214c:	781b      	ldrb	r3, [r3, #0]
   1214e:	3301      	adds	r3, #1
   12150:	b2da      	uxtb	r2, r3
   12152:	4b04      	ldr	r3, [pc, #16]	; (12164 <EIC_Handler+0x5c>)
   12154:	701a      	strb	r2, [r3, #0]
   12156:	4b03      	ldr	r3, [pc, #12]	; (12164 <EIC_Handler+0x5c>)
   12158:	781b      	ldrb	r3, [r3, #0]
   1215a:	2b0f      	cmp	r3, #15
   1215c:	d9da      	bls.n	12114 <EIC_Handler+0xc>
			}
		}
	}
}
   1215e:	46c0      	nop			; (mov r8, r8)
   12160:	46bd      	mov	sp, r7
   12162:	bd80      	pop	{r7, pc}
   12164:	20005540 	.word	0x20005540
   12168:	00011f95 	.word	0x00011f95
   1216c:	00011fd9 	.word	0x00011fd9
   12170:	20005544 	.word	0x20005544

00012174 <system_gclk_chan_get_config_defaults>:
{
   12174:	b580      	push	{r7, lr}
   12176:	b082      	sub	sp, #8
   12178:	af00      	add	r7, sp, #0
   1217a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1217c:	687b      	ldr	r3, [r7, #4]
   1217e:	2200      	movs	r2, #0
   12180:	701a      	strb	r2, [r3, #0]
}
   12182:	46c0      	nop			; (mov r8, r8)
   12184:	46bd      	mov	sp, r7
   12186:	b002      	add	sp, #8
   12188:	bd80      	pop	{r7, pc}
	...

0001218c <system_apb_clock_set_mask>:
{
   1218c:	b580      	push	{r7, lr}
   1218e:	b082      	sub	sp, #8
   12190:	af00      	add	r7, sp, #0
   12192:	0002      	movs	r2, r0
   12194:	6039      	str	r1, [r7, #0]
   12196:	1dfb      	adds	r3, r7, #7
   12198:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1219a:	1dfb      	adds	r3, r7, #7
   1219c:	781b      	ldrb	r3, [r3, #0]
   1219e:	2b01      	cmp	r3, #1
   121a0:	d00a      	beq.n	121b8 <system_apb_clock_set_mask+0x2c>
   121a2:	2b02      	cmp	r3, #2
   121a4:	d00f      	beq.n	121c6 <system_apb_clock_set_mask+0x3a>
   121a6:	2b00      	cmp	r3, #0
   121a8:	d114      	bne.n	121d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   121aa:	4b0e      	ldr	r3, [pc, #56]	; (121e4 <system_apb_clock_set_mask+0x58>)
   121ac:	4a0d      	ldr	r2, [pc, #52]	; (121e4 <system_apb_clock_set_mask+0x58>)
   121ae:	6991      	ldr	r1, [r2, #24]
   121b0:	683a      	ldr	r2, [r7, #0]
   121b2:	430a      	orrs	r2, r1
   121b4:	619a      	str	r2, [r3, #24]
			break;
   121b6:	e00f      	b.n	121d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   121b8:	4b0a      	ldr	r3, [pc, #40]	; (121e4 <system_apb_clock_set_mask+0x58>)
   121ba:	4a0a      	ldr	r2, [pc, #40]	; (121e4 <system_apb_clock_set_mask+0x58>)
   121bc:	69d1      	ldr	r1, [r2, #28]
   121be:	683a      	ldr	r2, [r7, #0]
   121c0:	430a      	orrs	r2, r1
   121c2:	61da      	str	r2, [r3, #28]
			break;
   121c4:	e008      	b.n	121d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   121c6:	4b07      	ldr	r3, [pc, #28]	; (121e4 <system_apb_clock_set_mask+0x58>)
   121c8:	4a06      	ldr	r2, [pc, #24]	; (121e4 <system_apb_clock_set_mask+0x58>)
   121ca:	6a11      	ldr	r1, [r2, #32]
   121cc:	683a      	ldr	r2, [r7, #0]
   121ce:	430a      	orrs	r2, r1
   121d0:	621a      	str	r2, [r3, #32]
			break;
   121d2:	e001      	b.n	121d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   121d4:	2317      	movs	r3, #23
   121d6:	e000      	b.n	121da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   121d8:	2300      	movs	r3, #0
}
   121da:	0018      	movs	r0, r3
   121dc:	46bd      	mov	sp, r7
   121de:	b002      	add	sp, #8
   121e0:	bd80      	pop	{r7, pc}
   121e2:	46c0      	nop			; (mov r8, r8)
   121e4:	40000400 	.word	0x40000400

000121e8 <system_pinmux_get_config_defaults>:
{
   121e8:	b580      	push	{r7, lr}
   121ea:	b082      	sub	sp, #8
   121ec:	af00      	add	r7, sp, #0
   121ee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   121f0:	687b      	ldr	r3, [r7, #4]
   121f2:	2280      	movs	r2, #128	; 0x80
   121f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   121f6:	687b      	ldr	r3, [r7, #4]
   121f8:	2200      	movs	r2, #0
   121fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   121fc:	687b      	ldr	r3, [r7, #4]
   121fe:	2201      	movs	r2, #1
   12200:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   12202:	687b      	ldr	r3, [r7, #4]
   12204:	2200      	movs	r2, #0
   12206:	70da      	strb	r2, [r3, #3]
}
   12208:	46c0      	nop			; (mov r8, r8)
   1220a:	46bd      	mov	sp, r7
   1220c:	b002      	add	sp, #8
   1220e:	bd80      	pop	{r7, pc}

00012210 <system_interrupt_enable>:
{
   12210:	b580      	push	{r7, lr}
   12212:	b082      	sub	sp, #8
   12214:	af00      	add	r7, sp, #0
   12216:	0002      	movs	r2, r0
   12218:	1dfb      	adds	r3, r7, #7
   1221a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1221c:	4b06      	ldr	r3, [pc, #24]	; (12238 <system_interrupt_enable+0x28>)
   1221e:	1dfa      	adds	r2, r7, #7
   12220:	7812      	ldrb	r2, [r2, #0]
   12222:	0011      	movs	r1, r2
   12224:	221f      	movs	r2, #31
   12226:	400a      	ands	r2, r1
   12228:	2101      	movs	r1, #1
   1222a:	4091      	lsls	r1, r2
   1222c:	000a      	movs	r2, r1
   1222e:	601a      	str	r2, [r3, #0]
}
   12230:	46c0      	nop			; (mov r8, r8)
   12232:	46bd      	mov	sp, r7
   12234:	b002      	add	sp, #8
   12236:	bd80      	pop	{r7, pc}
   12238:	e000e100 	.word	0xe000e100

0001223c <_extint_get_eic_from_channel>:
{
   1223c:	b580      	push	{r7, lr}
   1223e:	b084      	sub	sp, #16
   12240:	af00      	add	r7, sp, #0
   12242:	0002      	movs	r2, r0
   12244:	1dfb      	adds	r3, r7, #7
   12246:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   12248:	230f      	movs	r3, #15
   1224a:	18fb      	adds	r3, r7, r3
   1224c:	1dfa      	adds	r2, r7, #7
   1224e:	7812      	ldrb	r2, [r2, #0]
   12250:	0952      	lsrs	r2, r2, #5
   12252:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   12254:	230f      	movs	r3, #15
   12256:	18fb      	adds	r3, r7, r3
   12258:	781b      	ldrb	r3, [r3, #0]
   1225a:	2b00      	cmp	r3, #0
   1225c:	d10c      	bne.n	12278 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1225e:	4b09      	ldr	r3, [pc, #36]	; (12284 <_extint_get_eic_from_channel+0x48>)
   12260:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   12262:	230f      	movs	r3, #15
   12264:	18fb      	adds	r3, r7, r3
   12266:	781b      	ldrb	r3, [r3, #0]
   12268:	009b      	lsls	r3, r3, #2
   1226a:	2210      	movs	r2, #16
   1226c:	4694      	mov	ip, r2
   1226e:	44bc      	add	ip, r7
   12270:	4463      	add	r3, ip
   12272:	3b08      	subs	r3, #8
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	e000      	b.n	1227a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   12278:	2300      	movs	r3, #0
}
   1227a:	0018      	movs	r0, r3
   1227c:	46bd      	mov	sp, r7
   1227e:	b004      	add	sp, #16
   12280:	bd80      	pop	{r7, pc}
   12282:	46c0      	nop			; (mov r8, r8)
   12284:	40001800 	.word	0x40001800

00012288 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   12288:	b580      	push	{r7, lr}
   1228a:	b082      	sub	sp, #8
   1228c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1228e:	4b0f      	ldr	r3, [pc, #60]	; (122cc <extint_is_syncing+0x44>)
   12290:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12292:	2300      	movs	r3, #0
   12294:	607b      	str	r3, [r7, #4]
   12296:	e011      	b.n	122bc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   12298:	687b      	ldr	r3, [r7, #4]
   1229a:	009b      	lsls	r3, r3, #2
   1229c:	2208      	movs	r2, #8
   1229e:	4694      	mov	ip, r2
   122a0:	44bc      	add	ip, r7
   122a2:	4463      	add	r3, ip
   122a4:	3b08      	subs	r3, #8
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	785b      	ldrb	r3, [r3, #1]
   122aa:	b2db      	uxtb	r3, r3
   122ac:	b25b      	sxtb	r3, r3
   122ae:	2b00      	cmp	r3, #0
   122b0:	da01      	bge.n	122b6 <extint_is_syncing+0x2e>
			return true;
   122b2:	2301      	movs	r3, #1
   122b4:	e006      	b.n	122c4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   122b6:	687b      	ldr	r3, [r7, #4]
   122b8:	3301      	adds	r3, #1
   122ba:	607b      	str	r3, [r7, #4]
   122bc:	687b      	ldr	r3, [r7, #4]
   122be:	2b00      	cmp	r3, #0
   122c0:	d0ea      	beq.n	12298 <extint_is_syncing+0x10>
		}
	}
	return false;
   122c2:	2300      	movs	r3, #0
}
   122c4:	0018      	movs	r0, r3
   122c6:	46bd      	mov	sp, r7
   122c8:	b002      	add	sp, #8
   122ca:	bd80      	pop	{r7, pc}
   122cc:	40001800 	.word	0x40001800

000122d0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   122d0:	b580      	push	{r7, lr}
   122d2:	b084      	sub	sp, #16
   122d4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   122d6:	4b2d      	ldr	r3, [pc, #180]	; (1238c <_system_extint_init+0xbc>)
   122d8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   122da:	2140      	movs	r1, #64	; 0x40
   122dc:	2000      	movs	r0, #0
   122de:	4b2c      	ldr	r3, [pc, #176]	; (12390 <_system_extint_init+0xc0>)
   122e0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   122e2:	003b      	movs	r3, r7
   122e4:	0018      	movs	r0, r3
   122e6:	4b2b      	ldr	r3, [pc, #172]	; (12394 <_system_extint_init+0xc4>)
   122e8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   122ea:	003b      	movs	r3, r7
   122ec:	2200      	movs	r2, #0
   122ee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   122f0:	003b      	movs	r3, r7
   122f2:	0019      	movs	r1, r3
   122f4:	2005      	movs	r0, #5
   122f6:	4b28      	ldr	r3, [pc, #160]	; (12398 <_system_extint_init+0xc8>)
   122f8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   122fa:	2005      	movs	r0, #5
   122fc:	4b27      	ldr	r3, [pc, #156]	; (1239c <_system_extint_init+0xcc>)
   122fe:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12300:	2300      	movs	r3, #0
   12302:	60fb      	str	r3, [r7, #12]
   12304:	e018      	b.n	12338 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   12306:	68fb      	ldr	r3, [r7, #12]
   12308:	009b      	lsls	r3, r3, #2
   1230a:	2210      	movs	r2, #16
   1230c:	4694      	mov	ip, r2
   1230e:	44bc      	add	ip, r7
   12310:	4463      	add	r3, ip
   12312:	3b0c      	subs	r3, #12
   12314:	681a      	ldr	r2, [r3, #0]
   12316:	68fb      	ldr	r3, [r7, #12]
   12318:	009b      	lsls	r3, r3, #2
   1231a:	2110      	movs	r1, #16
   1231c:	468c      	mov	ip, r1
   1231e:	44bc      	add	ip, r7
   12320:	4463      	add	r3, ip
   12322:	3b0c      	subs	r3, #12
   12324:	681b      	ldr	r3, [r3, #0]
   12326:	781b      	ldrb	r3, [r3, #0]
   12328:	b2db      	uxtb	r3, r3
   1232a:	2101      	movs	r1, #1
   1232c:	430b      	orrs	r3, r1
   1232e:	b2db      	uxtb	r3, r3
   12330:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   12332:	68fb      	ldr	r3, [r7, #12]
   12334:	3301      	adds	r3, #1
   12336:	60fb      	str	r3, [r7, #12]
   12338:	68fb      	ldr	r3, [r7, #12]
   1233a:	2b00      	cmp	r3, #0
   1233c:	d0e3      	beq.n	12306 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   1233e:	46c0      	nop			; (mov r8, r8)
   12340:	4b17      	ldr	r3, [pc, #92]	; (123a0 <_system_extint_init+0xd0>)
   12342:	4798      	blx	r3
   12344:	1e03      	subs	r3, r0, #0
   12346:	d1fb      	bne.n	12340 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   12348:	230b      	movs	r3, #11
   1234a:	18fb      	adds	r3, r7, r3
   1234c:	2200      	movs	r2, #0
   1234e:	701a      	strb	r2, [r3, #0]
   12350:	e00d      	b.n	1236e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   12352:	230b      	movs	r3, #11
   12354:	18fb      	adds	r3, r7, r3
   12356:	781a      	ldrb	r2, [r3, #0]
   12358:	4b12      	ldr	r3, [pc, #72]	; (123a4 <_system_extint_init+0xd4>)
   1235a:	0092      	lsls	r2, r2, #2
   1235c:	2100      	movs	r1, #0
   1235e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   12360:	230b      	movs	r3, #11
   12362:	18fb      	adds	r3, r7, r3
   12364:	781a      	ldrb	r2, [r3, #0]
   12366:	230b      	movs	r3, #11
   12368:	18fb      	adds	r3, r7, r3
   1236a:	3201      	adds	r2, #1
   1236c:	701a      	strb	r2, [r3, #0]
   1236e:	230b      	movs	r3, #11
   12370:	18fb      	adds	r3, r7, r3
   12372:	781b      	ldrb	r3, [r3, #0]
   12374:	2b0f      	cmp	r3, #15
   12376:	d9ec      	bls.n	12352 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   12378:	2004      	movs	r0, #4
   1237a:	4b0b      	ldr	r3, [pc, #44]	; (123a8 <_system_extint_init+0xd8>)
   1237c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   1237e:	4b0b      	ldr	r3, [pc, #44]	; (123ac <_system_extint_init+0xdc>)
   12380:	4798      	blx	r3
}
   12382:	46c0      	nop			; (mov r8, r8)
   12384:	46bd      	mov	sp, r7
   12386:	b004      	add	sp, #16
   12388:	bd80      	pop	{r7, pc}
   1238a:	46c0      	nop			; (mov r8, r8)
   1238c:	40001800 	.word	0x40001800
   12390:	0001218d 	.word	0x0001218d
   12394:	00012175 	.word	0x00012175
   12398:	000159fd 	.word	0x000159fd
   1239c:	00015a41 	.word	0x00015a41
   123a0:	00012289 	.word	0x00012289
   123a4:	20005544 	.word	0x20005544
   123a8:	00012211 	.word	0x00012211
   123ac:	000123b1 	.word	0x000123b1

000123b0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   123b0:	b580      	push	{r7, lr}
   123b2:	b082      	sub	sp, #8
   123b4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   123b6:	4b15      	ldr	r3, [pc, #84]	; (1240c <_extint_enable+0x5c>)
   123b8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   123ba:	2300      	movs	r3, #0
   123bc:	607b      	str	r3, [r7, #4]
   123be:	e018      	b.n	123f2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   123c0:	687b      	ldr	r3, [r7, #4]
   123c2:	009b      	lsls	r3, r3, #2
   123c4:	2208      	movs	r2, #8
   123c6:	4694      	mov	ip, r2
   123c8:	44bc      	add	ip, r7
   123ca:	4463      	add	r3, ip
   123cc:	3b08      	subs	r3, #8
   123ce:	681a      	ldr	r2, [r3, #0]
   123d0:	687b      	ldr	r3, [r7, #4]
   123d2:	009b      	lsls	r3, r3, #2
   123d4:	2108      	movs	r1, #8
   123d6:	468c      	mov	ip, r1
   123d8:	44bc      	add	ip, r7
   123da:	4463      	add	r3, ip
   123dc:	3b08      	subs	r3, #8
   123de:	681b      	ldr	r3, [r3, #0]
   123e0:	781b      	ldrb	r3, [r3, #0]
   123e2:	b2db      	uxtb	r3, r3
   123e4:	2102      	movs	r1, #2
   123e6:	430b      	orrs	r3, r1
   123e8:	b2db      	uxtb	r3, r3
   123ea:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   123ec:	687b      	ldr	r3, [r7, #4]
   123ee:	3301      	adds	r3, #1
   123f0:	607b      	str	r3, [r7, #4]
   123f2:	687b      	ldr	r3, [r7, #4]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d0e3      	beq.n	123c0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   123f8:	46c0      	nop			; (mov r8, r8)
   123fa:	4b05      	ldr	r3, [pc, #20]	; (12410 <_extint_enable+0x60>)
   123fc:	4798      	blx	r3
   123fe:	1e03      	subs	r3, r0, #0
   12400:	d1fb      	bne.n	123fa <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   12402:	46c0      	nop			; (mov r8, r8)
   12404:	46bd      	mov	sp, r7
   12406:	b002      	add	sp, #8
   12408:	bd80      	pop	{r7, pc}
   1240a:	46c0      	nop			; (mov r8, r8)
   1240c:	40001800 	.word	0x40001800
   12410:	00012289 	.word	0x00012289

00012414 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   12414:	b580      	push	{r7, lr}
   12416:	b082      	sub	sp, #8
   12418:	af00      	add	r7, sp, #0
   1241a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   1241c:	687b      	ldr	r3, [r7, #4]
   1241e:	2200      	movs	r2, #0
   12420:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   12422:	687b      	ldr	r3, [r7, #4]
   12424:	2200      	movs	r2, #0
   12426:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   12428:	687b      	ldr	r3, [r7, #4]
   1242a:	2201      	movs	r2, #1
   1242c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   1242e:	687b      	ldr	r3, [r7, #4]
   12430:	2201      	movs	r2, #1
   12432:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   12434:	687b      	ldr	r3, [r7, #4]
   12436:	2200      	movs	r2, #0
   12438:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   1243a:	687b      	ldr	r3, [r7, #4]
   1243c:	2202      	movs	r2, #2
   1243e:	72da      	strb	r2, [r3, #11]
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	b002      	add	sp, #8
   12446:	bd80      	pop	{r7, pc}

00012448 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   12448:	b580      	push	{r7, lr}
   1244a:	b086      	sub	sp, #24
   1244c:	af00      	add	r7, sp, #0
   1244e:	0002      	movs	r2, r0
   12450:	6039      	str	r1, [r7, #0]
   12452:	1dfb      	adds	r3, r7, #7
   12454:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   12456:	2308      	movs	r3, #8
   12458:	18fb      	adds	r3, r7, r3
   1245a:	0018      	movs	r0, r3
   1245c:	4b36      	ldr	r3, [pc, #216]	; (12538 <extint_chan_set_config+0xf0>)
   1245e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   12460:	683b      	ldr	r3, [r7, #0]
   12462:	685b      	ldr	r3, [r3, #4]
   12464:	b2da      	uxtb	r2, r3
   12466:	2308      	movs	r3, #8
   12468:	18fb      	adds	r3, r7, r3
   1246a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1246c:	2308      	movs	r3, #8
   1246e:	18fb      	adds	r3, r7, r3
   12470:	2200      	movs	r2, #0
   12472:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   12474:	683b      	ldr	r3, [r7, #0]
   12476:	7a1a      	ldrb	r2, [r3, #8]
   12478:	2308      	movs	r3, #8
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   1247e:	683b      	ldr	r3, [r7, #0]
   12480:	681b      	ldr	r3, [r3, #0]
   12482:	b2db      	uxtb	r3, r3
   12484:	2208      	movs	r2, #8
   12486:	18ba      	adds	r2, r7, r2
   12488:	0011      	movs	r1, r2
   1248a:	0018      	movs	r0, r3
   1248c:	4b2b      	ldr	r3, [pc, #172]	; (1253c <extint_chan_set_config+0xf4>)
   1248e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   12490:	1dfb      	adds	r3, r7, #7
   12492:	781b      	ldrb	r3, [r3, #0]
   12494:	0018      	movs	r0, r3
   12496:	4b2a      	ldr	r3, [pc, #168]	; (12540 <extint_chan_set_config+0xf8>)
   12498:	4798      	blx	r3
   1249a:	0003      	movs	r3, r0
   1249c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   1249e:	1dfb      	adds	r3, r7, #7
   124a0:	781b      	ldrb	r3, [r3, #0]
   124a2:	2207      	movs	r2, #7
   124a4:	4013      	ands	r3, r2
   124a6:	009b      	lsls	r3, r3, #2
   124a8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   124aa:	683b      	ldr	r3, [r7, #0]
   124ac:	7adb      	ldrb	r3, [r3, #11]
   124ae:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   124b0:	683b      	ldr	r3, [r7, #0]
   124b2:	7a9b      	ldrb	r3, [r3, #10]
   124b4:	2b00      	cmp	r3, #0
   124b6:	d003      	beq.n	124c0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   124b8:	697b      	ldr	r3, [r7, #20]
   124ba:	2208      	movs	r2, #8
   124bc:	4313      	orrs	r3, r2
   124be:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   124c0:	1dfb      	adds	r3, r7, #7
   124c2:	781b      	ldrb	r3, [r3, #0]
   124c4:	08db      	lsrs	r3, r3, #3
   124c6:	b2db      	uxtb	r3, r3
   124c8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   124ca:	1dfb      	adds	r3, r7, #7
   124cc:	781b      	ldrb	r3, [r3, #0]
   124ce:	08db      	lsrs	r3, r3, #3
   124d0:	b2db      	uxtb	r3, r3
   124d2:	001a      	movs	r2, r3
   124d4:	693b      	ldr	r3, [r7, #16]
   124d6:	3206      	adds	r2, #6
   124d8:	0092      	lsls	r2, r2, #2
   124da:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   124dc:	210f      	movs	r1, #15
   124de:	68fa      	ldr	r2, [r7, #12]
   124e0:	4091      	lsls	r1, r2
   124e2:	000a      	movs	r2, r1
   124e4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   124e6:	401a      	ands	r2, r3
			(new_config << config_pos);
   124e8:	6979      	ldr	r1, [r7, #20]
   124ea:	68fb      	ldr	r3, [r7, #12]
   124ec:	4099      	lsls	r1, r3
   124ee:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   124f0:	431a      	orrs	r2, r3
   124f2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   124f4:	693b      	ldr	r3, [r7, #16]
   124f6:	1d82      	adds	r2, r0, #6
   124f8:	0092      	lsls	r2, r2, #2
   124fa:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   124fc:	683b      	ldr	r3, [r7, #0]
   124fe:	7a5b      	ldrb	r3, [r3, #9]
   12500:	2b00      	cmp	r3, #0
   12502:	d00a      	beq.n	1251a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   12504:	693b      	ldr	r3, [r7, #16]
   12506:	695a      	ldr	r2, [r3, #20]
   12508:	1dfb      	adds	r3, r7, #7
   1250a:	781b      	ldrb	r3, [r3, #0]
   1250c:	2101      	movs	r1, #1
   1250e:	4099      	lsls	r1, r3
   12510:	000b      	movs	r3, r1
   12512:	431a      	orrs	r2, r3
   12514:	693b      	ldr	r3, [r7, #16]
   12516:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   12518:	e00a      	b.n	12530 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   1251a:	693b      	ldr	r3, [r7, #16]
   1251c:	695b      	ldr	r3, [r3, #20]
   1251e:	1dfa      	adds	r2, r7, #7
   12520:	7812      	ldrb	r2, [r2, #0]
   12522:	2101      	movs	r1, #1
   12524:	4091      	lsls	r1, r2
   12526:	000a      	movs	r2, r1
   12528:	43d2      	mvns	r2, r2
   1252a:	401a      	ands	r2, r3
   1252c:	693b      	ldr	r3, [r7, #16]
   1252e:	615a      	str	r2, [r3, #20]
}
   12530:	46c0      	nop			; (mov r8, r8)
   12532:	46bd      	mov	sp, r7
   12534:	b006      	add	sp, #24
   12536:	bd80      	pop	{r7, pc}
   12538:	000121e9 	.word	0x000121e9
   1253c:	00015d5d 	.word	0x00015d5d
   12540:	0001223d 	.word	0x0001223d

00012544 <system_pinmux_get_config_defaults>:
{
   12544:	b580      	push	{r7, lr}
   12546:	b082      	sub	sp, #8
   12548:	af00      	add	r7, sp, #0
   1254a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1254c:	687b      	ldr	r3, [r7, #4]
   1254e:	2280      	movs	r2, #128	; 0x80
   12550:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12552:	687b      	ldr	r3, [r7, #4]
   12554:	2200      	movs	r2, #0
   12556:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12558:	687b      	ldr	r3, [r7, #4]
   1255a:	2201      	movs	r2, #1
   1255c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1255e:	687b      	ldr	r3, [r7, #4]
   12560:	2200      	movs	r2, #0
   12562:	70da      	strb	r2, [r3, #3]
}
   12564:	46c0      	nop			; (mov r8, r8)
   12566:	46bd      	mov	sp, r7
   12568:	b002      	add	sp, #8
   1256a:	bd80      	pop	{r7, pc}

0001256c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1256c:	b580      	push	{r7, lr}
   1256e:	b084      	sub	sp, #16
   12570:	af00      	add	r7, sp, #0
   12572:	0002      	movs	r2, r0
   12574:	6039      	str	r1, [r7, #0]
   12576:	1dfb      	adds	r3, r7, #7
   12578:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1257a:	230c      	movs	r3, #12
   1257c:	18fb      	adds	r3, r7, r3
   1257e:	0018      	movs	r0, r3
   12580:	4b10      	ldr	r3, [pc, #64]	; (125c4 <port_pin_set_config+0x58>)
   12582:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   12584:	230c      	movs	r3, #12
   12586:	18fb      	adds	r3, r7, r3
   12588:	2280      	movs	r2, #128	; 0x80
   1258a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1258c:	683b      	ldr	r3, [r7, #0]
   1258e:	781a      	ldrb	r2, [r3, #0]
   12590:	230c      	movs	r3, #12
   12592:	18fb      	adds	r3, r7, r3
   12594:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   12596:	683b      	ldr	r3, [r7, #0]
   12598:	785a      	ldrb	r2, [r3, #1]
   1259a:	230c      	movs	r3, #12
   1259c:	18fb      	adds	r3, r7, r3
   1259e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   125a0:	683b      	ldr	r3, [r7, #0]
   125a2:	789a      	ldrb	r2, [r3, #2]
   125a4:	230c      	movs	r3, #12
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   125aa:	230c      	movs	r3, #12
   125ac:	18fa      	adds	r2, r7, r3
   125ae:	1dfb      	adds	r3, r7, #7
   125b0:	781b      	ldrb	r3, [r3, #0]
   125b2:	0011      	movs	r1, r2
   125b4:	0018      	movs	r0, r3
   125b6:	4b04      	ldr	r3, [pc, #16]	; (125c8 <port_pin_set_config+0x5c>)
   125b8:	4798      	blx	r3
}
   125ba:	46c0      	nop			; (mov r8, r8)
   125bc:	46bd      	mov	sp, r7
   125be:	b004      	add	sp, #16
   125c0:	bd80      	pop	{r7, pc}
   125c2:	46c0      	nop			; (mov r8, r8)
   125c4:	00012545 	.word	0x00012545
   125c8:	00015d5d 	.word	0x00015d5d

000125cc <system_gclk_chan_get_config_defaults>:
{
   125cc:	b580      	push	{r7, lr}
   125ce:	b082      	sub	sp, #8
   125d0:	af00      	add	r7, sp, #0
   125d2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   125d4:	687b      	ldr	r3, [r7, #4]
   125d6:	2200      	movs	r2, #0
   125d8:	701a      	strb	r2, [r3, #0]
}
   125da:	46c0      	nop			; (mov r8, r8)
   125dc:	46bd      	mov	sp, r7
   125de:	b002      	add	sp, #8
   125e0:	bd80      	pop	{r7, pc}
	...

000125e4 <system_apb_clock_set_mask>:
{
   125e4:	b580      	push	{r7, lr}
   125e6:	b082      	sub	sp, #8
   125e8:	af00      	add	r7, sp, #0
   125ea:	0002      	movs	r2, r0
   125ec:	6039      	str	r1, [r7, #0]
   125ee:	1dfb      	adds	r3, r7, #7
   125f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   125f2:	1dfb      	adds	r3, r7, #7
   125f4:	781b      	ldrb	r3, [r3, #0]
   125f6:	2b01      	cmp	r3, #1
   125f8:	d00a      	beq.n	12610 <system_apb_clock_set_mask+0x2c>
   125fa:	2b02      	cmp	r3, #2
   125fc:	d00f      	beq.n	1261e <system_apb_clock_set_mask+0x3a>
   125fe:	2b00      	cmp	r3, #0
   12600:	d114      	bne.n	1262c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   12602:	4b0e      	ldr	r3, [pc, #56]	; (1263c <system_apb_clock_set_mask+0x58>)
   12604:	4a0d      	ldr	r2, [pc, #52]	; (1263c <system_apb_clock_set_mask+0x58>)
   12606:	6991      	ldr	r1, [r2, #24]
   12608:	683a      	ldr	r2, [r7, #0]
   1260a:	430a      	orrs	r2, r1
   1260c:	619a      	str	r2, [r3, #24]
			break;
   1260e:	e00f      	b.n	12630 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   12610:	4b0a      	ldr	r3, [pc, #40]	; (1263c <system_apb_clock_set_mask+0x58>)
   12612:	4a0a      	ldr	r2, [pc, #40]	; (1263c <system_apb_clock_set_mask+0x58>)
   12614:	69d1      	ldr	r1, [r2, #28]
   12616:	683a      	ldr	r2, [r7, #0]
   12618:	430a      	orrs	r2, r1
   1261a:	61da      	str	r2, [r3, #28]
			break;
   1261c:	e008      	b.n	12630 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1261e:	4b07      	ldr	r3, [pc, #28]	; (1263c <system_apb_clock_set_mask+0x58>)
   12620:	4a06      	ldr	r2, [pc, #24]	; (1263c <system_apb_clock_set_mask+0x58>)
   12622:	6a11      	ldr	r1, [r2, #32]
   12624:	683a      	ldr	r2, [r7, #0]
   12626:	430a      	orrs	r2, r1
   12628:	621a      	str	r2, [r3, #32]
			break;
   1262a:	e001      	b.n	12630 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1262c:	2317      	movs	r3, #23
   1262e:	e000      	b.n	12632 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   12630:	2300      	movs	r3, #0
}
   12632:	0018      	movs	r0, r3
   12634:	46bd      	mov	sp, r7
   12636:	b002      	add	sp, #8
   12638:	bd80      	pop	{r7, pc}
   1263a:	46c0      	nop			; (mov r8, r8)
   1263c:	40000400 	.word	0x40000400

00012640 <system_interrupt_enable>:
{
   12640:	b580      	push	{r7, lr}
   12642:	b082      	sub	sp, #8
   12644:	af00      	add	r7, sp, #0
   12646:	0002      	movs	r2, r0
   12648:	1dfb      	adds	r3, r7, #7
   1264a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1264c:	4b06      	ldr	r3, [pc, #24]	; (12668 <system_interrupt_enable+0x28>)
   1264e:	1dfa      	adds	r2, r7, #7
   12650:	7812      	ldrb	r2, [r2, #0]
   12652:	0011      	movs	r1, r2
   12654:	221f      	movs	r2, #31
   12656:	400a      	ands	r2, r1
   12658:	2101      	movs	r1, #1
   1265a:	4091      	lsls	r1, r2
   1265c:	000a      	movs	r2, r1
   1265e:	601a      	str	r2, [r3, #0]
}
   12660:	46c0      	nop			; (mov r8, r8)
   12662:	46bd      	mov	sp, r7
   12664:	b002      	add	sp, #8
   12666:	bd80      	pop	{r7, pc}
   12668:	e000e100 	.word	0xe000e100

0001266c <system_interrupt_disable>:
{
   1266c:	b580      	push	{r7, lr}
   1266e:	b082      	sub	sp, #8
   12670:	af00      	add	r7, sp, #0
   12672:	0002      	movs	r2, r0
   12674:	1dfb      	adds	r3, r7, #7
   12676:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12678:	4a07      	ldr	r2, [pc, #28]	; (12698 <system_interrupt_disable+0x2c>)
   1267a:	1dfb      	adds	r3, r7, #7
   1267c:	781b      	ldrb	r3, [r3, #0]
   1267e:	0019      	movs	r1, r3
   12680:	231f      	movs	r3, #31
   12682:	400b      	ands	r3, r1
   12684:	2101      	movs	r1, #1
   12686:	4099      	lsls	r1, r3
   12688:	000b      	movs	r3, r1
   1268a:	0019      	movs	r1, r3
   1268c:	2380      	movs	r3, #128	; 0x80
   1268e:	50d1      	str	r1, [r2, r3]
}
   12690:	46c0      	nop			; (mov r8, r8)
   12692:	46bd      	mov	sp, r7
   12694:	b002      	add	sp, #8
   12696:	bd80      	pop	{r7, pc}
   12698:	e000e100 	.word	0xe000e100

0001269c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   1269c:	b580      	push	{r7, lr}
   1269e:	b084      	sub	sp, #16
   126a0:	af00      	add	r7, sp, #0
   126a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   126a4:	687b      	ldr	r3, [r7, #4]
   126a6:	681b      	ldr	r3, [r3, #0]
   126a8:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   126aa:	68fb      	ldr	r3, [r7, #12]
   126ac:	7a9b      	ldrb	r3, [r3, #10]
   126ae:	b2db      	uxtb	r3, r3
   126b0:	b25b      	sxtb	r3, r3
   126b2:	2b00      	cmp	r3, #0
   126b4:	da01      	bge.n	126ba <rtc_calendar_is_syncing+0x1e>
                return true;
   126b6:	2301      	movs	r3, #1
   126b8:	e000      	b.n	126bc <rtc_calendar_is_syncing+0x20>
        }

        return false;
   126ba:	2300      	movs	r3, #0
}
   126bc:	0018      	movs	r0, r3
   126be:	46bd      	mov	sp, r7
   126c0:	b004      	add	sp, #16
   126c2:	bd80      	pop	{r7, pc}

000126c4 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   126c4:	b580      	push	{r7, lr}
   126c6:	b084      	sub	sp, #16
   126c8:	af00      	add	r7, sp, #0
   126ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   126cc:	687b      	ldr	r3, [r7, #4]
   126ce:	681b      	ldr	r3, [r3, #0]
   126d0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   126d2:	2003      	movs	r0, #3
   126d4:	4b0a      	ldr	r3, [pc, #40]	; (12700 <rtc_calendar_enable+0x3c>)
   126d6:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   126d8:	46c0      	nop			; (mov r8, r8)
   126da:	687b      	ldr	r3, [r7, #4]
   126dc:	0018      	movs	r0, r3
   126de:	4b09      	ldr	r3, [pc, #36]	; (12704 <rtc_calendar_enable+0x40>)
   126e0:	4798      	blx	r3
   126e2:	1e03      	subs	r3, r0, #0
   126e4:	d1f9      	bne.n	126da <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   126e6:	68fb      	ldr	r3, [r7, #12]
   126e8:	881b      	ldrh	r3, [r3, #0]
   126ea:	b29b      	uxth	r3, r3
   126ec:	2202      	movs	r2, #2
   126ee:	4313      	orrs	r3, r2
   126f0:	b29a      	uxth	r2, r3
   126f2:	68fb      	ldr	r3, [r7, #12]
   126f4:	801a      	strh	r2, [r3, #0]
}
   126f6:	46c0      	nop			; (mov r8, r8)
   126f8:	46bd      	mov	sp, r7
   126fa:	b004      	add	sp, #16
   126fc:	bd80      	pop	{r7, pc}
   126fe:	46c0      	nop			; (mov r8, r8)
   12700:	00012641 	.word	0x00012641
   12704:	0001269d 	.word	0x0001269d

00012708 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   12708:	b580      	push	{r7, lr}
   1270a:	b084      	sub	sp, #16
   1270c:	af00      	add	r7, sp, #0
   1270e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   12710:	687b      	ldr	r3, [r7, #4]
   12712:	681b      	ldr	r3, [r3, #0]
   12714:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   12716:	2003      	movs	r0, #3
   12718:	4b0d      	ldr	r3, [pc, #52]	; (12750 <rtc_calendar_disable+0x48>)
   1271a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   1271c:	46c0      	nop			; (mov r8, r8)
   1271e:	687b      	ldr	r3, [r7, #4]
   12720:	0018      	movs	r0, r3
   12722:	4b0c      	ldr	r3, [pc, #48]	; (12754 <rtc_calendar_disable+0x4c>)
   12724:	4798      	blx	r3
   12726:	1e03      	subs	r3, r0, #0
   12728:	d1f9      	bne.n	1271e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   1272a:	68fb      	ldr	r3, [r7, #12]
   1272c:	22c1      	movs	r2, #193	; 0xc1
   1272e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   12730:	68fb      	ldr	r3, [r7, #12]
   12732:	22c1      	movs	r2, #193	; 0xc1
   12734:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   12736:	68fb      	ldr	r3, [r7, #12]
   12738:	881b      	ldrh	r3, [r3, #0]
   1273a:	b29b      	uxth	r3, r3
   1273c:	2202      	movs	r2, #2
   1273e:	4393      	bics	r3, r2
   12740:	b29a      	uxth	r2, r3
   12742:	68fb      	ldr	r3, [r7, #12]
   12744:	801a      	strh	r2, [r3, #0]
}
   12746:	46c0      	nop			; (mov r8, r8)
   12748:	46bd      	mov	sp, r7
   1274a:	b004      	add	sp, #16
   1274c:	bd80      	pop	{r7, pc}
   1274e:	46c0      	nop			; (mov r8, r8)
   12750:	0001266d 	.word	0x0001266d
   12754:	0001269d 	.word	0x0001269d

00012758 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   12758:	b580      	push	{r7, lr}
   1275a:	b084      	sub	sp, #16
   1275c:	af00      	add	r7, sp, #0
   1275e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   12760:	687b      	ldr	r3, [r7, #4]
   12762:	681b      	ldr	r3, [r3, #0]
   12764:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   12766:	687b      	ldr	r3, [r7, #4]
   12768:	0018      	movs	r0, r3
   1276a:	4b0d      	ldr	r3, [pc, #52]	; (127a0 <rtc_calendar_reset+0x48>)
   1276c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   1276e:	687b      	ldr	r3, [r7, #4]
   12770:	2200      	movs	r2, #0
   12772:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   12774:	687b      	ldr	r3, [r7, #4]
   12776:	2200      	movs	r2, #0
   12778:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   1277a:	46c0      	nop			; (mov r8, r8)
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	0018      	movs	r0, r3
   12780:	4b08      	ldr	r3, [pc, #32]	; (127a4 <rtc_calendar_reset+0x4c>)
   12782:	4798      	blx	r3
   12784:	1e03      	subs	r3, r0, #0
   12786:	d1f9      	bne.n	1277c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   12788:	68fb      	ldr	r3, [r7, #12]
   1278a:	881b      	ldrh	r3, [r3, #0]
   1278c:	b29b      	uxth	r3, r3
   1278e:	2201      	movs	r2, #1
   12790:	4313      	orrs	r3, r2
   12792:	b29a      	uxth	r2, r3
   12794:	68fb      	ldr	r3, [r7, #12]
   12796:	801a      	strh	r2, [r3, #0]
}
   12798:	46c0      	nop			; (mov r8, r8)
   1279a:	46bd      	mov	sp, r7
   1279c:	b004      	add	sp, #16
   1279e:	bd80      	pop	{r7, pc}
   127a0:	00012709 	.word	0x00012709
   127a4:	0001269d 	.word	0x0001269d

000127a8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   127a8:	b580      	push	{r7, lr}
   127aa:	b084      	sub	sp, #16
   127ac:	af00      	add	r7, sp, #0
   127ae:	6078      	str	r0, [r7, #4]
   127b0:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   127b2:	683b      	ldr	r3, [r7, #0]
   127b4:	88db      	ldrh	r3, [r3, #6]
   127b6:	001a      	movs	r2, r3
   127b8:	687b      	ldr	r3, [r7, #4]
   127ba:	88db      	ldrh	r3, [r3, #6]
   127bc:	1ad3      	subs	r3, r2, r3
   127be:	069b      	lsls	r3, r3, #26
   127c0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   127c2:	683b      	ldr	r3, [r7, #0]
   127c4:	795b      	ldrb	r3, [r3, #5]
   127c6:	059b      	lsls	r3, r3, #22
   127c8:	001a      	movs	r2, r3
   127ca:	68fb      	ldr	r3, [r7, #12]
   127cc:	4313      	orrs	r3, r2
   127ce:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   127d0:	683b      	ldr	r3, [r7, #0]
   127d2:	791b      	ldrb	r3, [r3, #4]
   127d4:	045b      	lsls	r3, r3, #17
   127d6:	001a      	movs	r2, r3
   127d8:	68fb      	ldr	r3, [r7, #12]
   127da:	4313      	orrs	r3, r2
   127dc:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   127de:	683b      	ldr	r3, [r7, #0]
   127e0:	789b      	ldrb	r3, [r3, #2]
   127e2:	031b      	lsls	r3, r3, #12
   127e4:	001a      	movs	r2, r3
   127e6:	68fb      	ldr	r3, [r7, #12]
   127e8:	4313      	orrs	r3, r2
   127ea:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	791b      	ldrb	r3, [r3, #4]
   127f0:	2201      	movs	r2, #1
   127f2:	4053      	eors	r3, r2
   127f4:	b2db      	uxtb	r3, r3
   127f6:	2b00      	cmp	r3, #0
   127f8:	d008      	beq.n	1280c <rtc_calendar_time_to_register_value+0x64>
   127fa:	683b      	ldr	r3, [r7, #0]
   127fc:	78db      	ldrb	r3, [r3, #3]
   127fe:	2b00      	cmp	r3, #0
   12800:	d004      	beq.n	1280c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   12802:	68fb      	ldr	r3, [r7, #12]
   12804:	2280      	movs	r2, #128	; 0x80
   12806:	0252      	lsls	r2, r2, #9
   12808:	4313      	orrs	r3, r2
   1280a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   1280c:	683b      	ldr	r3, [r7, #0]
   1280e:	785b      	ldrb	r3, [r3, #1]
   12810:	019b      	lsls	r3, r3, #6
   12812:	001a      	movs	r2, r3
   12814:	68fb      	ldr	r3, [r7, #12]
   12816:	4313      	orrs	r3, r2
   12818:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   1281a:	683b      	ldr	r3, [r7, #0]
   1281c:	781b      	ldrb	r3, [r3, #0]
   1281e:	001a      	movs	r2, r3
   12820:	68fb      	ldr	r3, [r7, #12]
   12822:	4313      	orrs	r3, r2
   12824:	60fb      	str	r3, [r7, #12]

	return register_value;
   12826:	68fb      	ldr	r3, [r7, #12]
}
   12828:	0018      	movs	r0, r3
   1282a:	46bd      	mov	sp, r7
   1282c:	b004      	add	sp, #16
   1282e:	bd80      	pop	{r7, pc}

00012830 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   12830:	b580      	push	{r7, lr}
   12832:	b084      	sub	sp, #16
   12834:	af00      	add	r7, sp, #0
   12836:	60f8      	str	r0, [r7, #12]
   12838:	60b9      	str	r1, [r7, #8]
   1283a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1283c:	68bb      	ldr	r3, [r7, #8]
   1283e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   12840:	b29a      	uxth	r2, r3
   12842:	68fb      	ldr	r3, [r7, #12]
   12844:	88db      	ldrh	r3, [r3, #6]
   12846:	18d3      	adds	r3, r2, r3
   12848:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   1284a:	687b      	ldr	r3, [r7, #4]
   1284c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   1284e:	68bb      	ldr	r3, [r7, #8]
   12850:	0d9b      	lsrs	r3, r3, #22
   12852:	b2db      	uxtb	r3, r3
   12854:	220f      	movs	r2, #15
   12856:	4013      	ands	r3, r2
   12858:	b2da      	uxtb	r2, r3
   1285a:	687b      	ldr	r3, [r7, #4]
   1285c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   1285e:	68bb      	ldr	r3, [r7, #8]
   12860:	0c5b      	lsrs	r3, r3, #17
   12862:	b2db      	uxtb	r3, r3
   12864:	221f      	movs	r2, #31
   12866:	4013      	ands	r3, r2
   12868:	b2da      	uxtb	r2, r3
   1286a:	687b      	ldr	r3, [r7, #4]
   1286c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	791b      	ldrb	r3, [r3, #4]
   12872:	2b00      	cmp	r3, #0
   12874:	d008      	beq.n	12888 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   12876:	68bb      	ldr	r3, [r7, #8]
   12878:	0b1b      	lsrs	r3, r3, #12
   1287a:	b2db      	uxtb	r3, r3
   1287c:	221f      	movs	r2, #31
   1287e:	4013      	ands	r3, r2
   12880:	b2da      	uxtb	r2, r3
   12882:	687b      	ldr	r3, [r7, #4]
   12884:	709a      	strb	r2, [r3, #2]
   12886:	e010      	b.n	128aa <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   12888:	68bb      	ldr	r3, [r7, #8]
   1288a:	0b1b      	lsrs	r3, r3, #12
   1288c:	b2db      	uxtb	r3, r3
   1288e:	220f      	movs	r2, #15
   12890:	4013      	ands	r3, r2
   12892:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   12898:	68ba      	ldr	r2, [r7, #8]
   1289a:	2380      	movs	r3, #128	; 0x80
   1289c:	025b      	lsls	r3, r3, #9
   1289e:	4013      	ands	r3, r2
   128a0:	1e5a      	subs	r2, r3, #1
   128a2:	4193      	sbcs	r3, r2
   128a4:	b2da      	uxtb	r2, r3
   128a6:	687b      	ldr	r3, [r7, #4]
   128a8:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   128aa:	68bb      	ldr	r3, [r7, #8]
   128ac:	099b      	lsrs	r3, r3, #6
   128ae:	b2db      	uxtb	r3, r3
   128b0:	223f      	movs	r2, #63	; 0x3f
   128b2:	4013      	ands	r3, r2
   128b4:	b2da      	uxtb	r2, r3
   128b6:	687b      	ldr	r3, [r7, #4]
   128b8:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   128ba:	68bb      	ldr	r3, [r7, #8]
   128bc:	b2db      	uxtb	r3, r3
   128be:	223f      	movs	r2, #63	; 0x3f
   128c0:	4013      	ands	r3, r2
   128c2:	b2da      	uxtb	r2, r3
   128c4:	687b      	ldr	r3, [r7, #4]
   128c6:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   128c8:	46c0      	nop			; (mov r8, r8)
   128ca:	46bd      	mov	sp, r7
   128cc:	b004      	add	sp, #16
   128ce:	bd80      	pop	{r7, pc}

000128d0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   128d0:	b580      	push	{r7, lr}
   128d2:	b084      	sub	sp, #16
   128d4:	af00      	add	r7, sp, #0
   128d6:	6078      	str	r0, [r7, #4]
   128d8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   128da:	687b      	ldr	r3, [r7, #4]
   128dc:	681b      	ldr	r3, [r3, #0]
   128de:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   128e0:	683b      	ldr	r3, [r7, #0]
   128e2:	881a      	ldrh	r2, [r3, #0]
   128e4:	230e      	movs	r3, #14
   128e6:	18fb      	adds	r3, r7, r3
   128e8:	2108      	movs	r1, #8
   128ea:	430a      	orrs	r2, r1
   128ec:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   128ee:	683b      	ldr	r3, [r7, #0]
   128f0:	791b      	ldrb	r3, [r3, #4]
   128f2:	2201      	movs	r2, #1
   128f4:	4053      	eors	r3, r2
   128f6:	b2db      	uxtb	r3, r3
   128f8:	2b00      	cmp	r3, #0
   128fa:	d007      	beq.n	1290c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   128fc:	230e      	movs	r3, #14
   128fe:	18fb      	adds	r3, r7, r3
   12900:	220e      	movs	r2, #14
   12902:	18ba      	adds	r2, r7, r2
   12904:	8812      	ldrh	r2, [r2, #0]
   12906:	2140      	movs	r1, #64	; 0x40
   12908:	430a      	orrs	r2, r1
   1290a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   1290c:	683b      	ldr	r3, [r7, #0]
   1290e:	789b      	ldrb	r3, [r3, #2]
   12910:	2b00      	cmp	r3, #0
   12912:	d007      	beq.n	12924 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   12914:	230e      	movs	r3, #14
   12916:	18fb      	adds	r3, r7, r3
   12918:	220e      	movs	r2, #14
   1291a:	18ba      	adds	r2, r7, r2
   1291c:	8812      	ldrh	r2, [r2, #0]
   1291e:	2180      	movs	r1, #128	; 0x80
   12920:	430a      	orrs	r2, r1
   12922:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   12924:	68bb      	ldr	r3, [r7, #8]
   12926:	220e      	movs	r2, #14
   12928:	18ba      	adds	r2, r7, r2
   1292a:	8812      	ldrh	r2, [r2, #0]
   1292c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   1292e:	683b      	ldr	r3, [r7, #0]
   12930:	78db      	ldrb	r3, [r3, #3]
   12932:	2b00      	cmp	r3, #0
   12934:	d008      	beq.n	12948 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   12936:	68bb      	ldr	r3, [r7, #8]
   12938:	885b      	ldrh	r3, [r3, #2]
   1293a:	b29b      	uxth	r3, r3
   1293c:	2280      	movs	r2, #128	; 0x80
   1293e:	01d2      	lsls	r2, r2, #7
   12940:	4313      	orrs	r3, r2
   12942:	b29a      	uxth	r2, r3
   12944:	68bb      	ldr	r3, [r7, #8]
   12946:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   12948:	230d      	movs	r3, #13
   1294a:	18fb      	adds	r3, r7, r3
   1294c:	2200      	movs	r2, #0
   1294e:	701a      	strb	r2, [r3, #0]
   12950:	e017      	b.n	12982 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   12952:	230d      	movs	r3, #13
   12954:	18fb      	adds	r3, r7, r3
   12956:	781a      	ldrb	r2, [r3, #0]
   12958:	0013      	movs	r3, r2
   1295a:	009b      	lsls	r3, r3, #2
   1295c:	189b      	adds	r3, r3, r2
   1295e:	005b      	lsls	r3, r3, #1
   12960:	3308      	adds	r3, #8
   12962:	683a      	ldr	r2, [r7, #0]
   12964:	18d1      	adds	r1, r2, r3
   12966:	230d      	movs	r3, #13
   12968:	18fb      	adds	r3, r7, r3
   1296a:	781a      	ldrb	r2, [r3, #0]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	0018      	movs	r0, r3
   12970:	4b08      	ldr	r3, [pc, #32]	; (12994 <_rtc_calendar_set_config+0xc4>)
   12972:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   12974:	230d      	movs	r3, #13
   12976:	18fb      	adds	r3, r7, r3
   12978:	781a      	ldrb	r2, [r3, #0]
   1297a:	230d      	movs	r3, #13
   1297c:	18fb      	adds	r3, r7, r3
   1297e:	3201      	adds	r2, #1
   12980:	701a      	strb	r2, [r3, #0]
   12982:	230d      	movs	r3, #13
   12984:	18fb      	adds	r3, r7, r3
   12986:	781b      	ldrb	r3, [r3, #0]
   12988:	2b00      	cmp	r3, #0
   1298a:	d0e2      	beq.n	12952 <_rtc_calendar_set_config+0x82>
	}
}
   1298c:	46c0      	nop			; (mov r8, r8)
   1298e:	46bd      	mov	sp, r7
   12990:	b004      	add	sp, #16
   12992:	bd80      	pop	{r7, pc}
   12994:	00012ab9 	.word	0x00012ab9

00012998 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   12998:	b580      	push	{r7, lr}
   1299a:	b086      	sub	sp, #24
   1299c:	af00      	add	r7, sp, #0
   1299e:	60f8      	str	r0, [r7, #12]
   129a0:	60b9      	str	r1, [r7, #8]
   129a2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   129a4:	68fb      	ldr	r3, [r7, #12]
   129a6:	68ba      	ldr	r2, [r7, #8]
   129a8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   129aa:	2120      	movs	r1, #32
   129ac:	2000      	movs	r0, #0
   129ae:	4b18      	ldr	r3, [pc, #96]	; (12a10 <rtc_calendar_init+0x78>)
   129b0:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   129b2:	2314      	movs	r3, #20
   129b4:	18fb      	adds	r3, r7, r3
   129b6:	0018      	movs	r0, r3
   129b8:	4b16      	ldr	r3, [pc, #88]	; (12a14 <rtc_calendar_init+0x7c>)
   129ba:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   129bc:	2314      	movs	r3, #20
   129be:	18fb      	adds	r3, r7, r3
   129c0:	2202      	movs	r2, #2
   129c2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   129c4:	2314      	movs	r3, #20
   129c6:	18fb      	adds	r3, r7, r3
   129c8:	0019      	movs	r1, r3
   129ca:	2004      	movs	r0, #4
   129cc:	4b12      	ldr	r3, [pc, #72]	; (12a18 <rtc_calendar_init+0x80>)
   129ce:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   129d0:	2004      	movs	r0, #4
   129d2:	4b12      	ldr	r3, [pc, #72]	; (12a1c <rtc_calendar_init+0x84>)
   129d4:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   129d6:	68fb      	ldr	r3, [r7, #12]
   129d8:	0018      	movs	r0, r3
   129da:	4b11      	ldr	r3, [pc, #68]	; (12a20 <rtc_calendar_init+0x88>)
   129dc:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   129de:	687b      	ldr	r3, [r7, #4]
   129e0:	791a      	ldrb	r2, [r3, #4]
   129e2:	68fb      	ldr	r3, [r7, #12]
   129e4:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   129e6:	687b      	ldr	r3, [r7, #4]
   129e8:	78da      	ldrb	r2, [r3, #3]
   129ea:	68fb      	ldr	r3, [r7, #12]
   129ec:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   129ee:	687b      	ldr	r3, [r7, #4]
   129f0:	88da      	ldrh	r2, [r3, #6]
   129f2:	68fb      	ldr	r3, [r7, #12]
   129f4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   129f6:	4b0b      	ldr	r3, [pc, #44]	; (12a24 <rtc_calendar_init+0x8c>)
   129f8:	68fa      	ldr	r2, [r7, #12]
   129fa:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   129fc:	687a      	ldr	r2, [r7, #4]
   129fe:	68fb      	ldr	r3, [r7, #12]
   12a00:	0011      	movs	r1, r2
   12a02:	0018      	movs	r0, r3
   12a04:	4b08      	ldr	r3, [pc, #32]	; (12a28 <rtc_calendar_init+0x90>)
   12a06:	4798      	blx	r3
}
   12a08:	46c0      	nop			; (mov r8, r8)
   12a0a:	46bd      	mov	sp, r7
   12a0c:	b006      	add	sp, #24
   12a0e:	bd80      	pop	{r7, pc}
   12a10:	000125e5 	.word	0x000125e5
   12a14:	000125cd 	.word	0x000125cd
   12a18:	000159fd 	.word	0x000159fd
   12a1c:	00015a41 	.word	0x00015a41
   12a20:	00012759 	.word	0x00012759
   12a24:	20005584 	.word	0x20005584
   12a28:	000128d1 	.word	0x000128d1

00012a2c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   12a2c:	b580      	push	{r7, lr}
   12a2e:	b084      	sub	sp, #16
   12a30:	af00      	add	r7, sp, #0
   12a32:	6078      	str	r0, [r7, #4]
   12a34:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   12a36:	687b      	ldr	r3, [r7, #4]
   12a38:	681b      	ldr	r3, [r3, #0]
   12a3a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   12a3c:	687b      	ldr	r3, [r7, #4]
   12a3e:	795b      	ldrb	r3, [r3, #5]
   12a40:	2201      	movs	r2, #1
   12a42:	4053      	eors	r3, r2
   12a44:	b2db      	uxtb	r3, r3
   12a46:	2b00      	cmp	r3, #0
   12a48:	d00a      	beq.n	12a60 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   12a4a:	68fb      	ldr	r3, [r7, #12]
   12a4c:	4a16      	ldr	r2, [pc, #88]	; (12aa8 <rtc_calendar_get_time+0x7c>)
   12a4e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   12a50:	46c0      	nop			; (mov r8, r8)
   12a52:	687b      	ldr	r3, [r7, #4]
   12a54:	0018      	movs	r0, r3
   12a56:	4b15      	ldr	r3, [pc, #84]	; (12aac <rtc_calendar_get_time+0x80>)
   12a58:	4798      	blx	r3
   12a5a:	1e03      	subs	r3, r0, #0
   12a5c:	d1f9      	bne.n	12a52 <rtc_calendar_get_time+0x26>
   12a5e:	e016      	b.n	12a8e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   12a60:	68fb      	ldr	r3, [r7, #12]
   12a62:	885b      	ldrh	r3, [r3, #2]
   12a64:	b29b      	uxth	r3, r3
   12a66:	001a      	movs	r2, r3
   12a68:	2380      	movs	r3, #128	; 0x80
   12a6a:	01db      	lsls	r3, r3, #7
   12a6c:	4013      	ands	r3, r2
   12a6e:	d10e      	bne.n	12a8e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   12a70:	68fb      	ldr	r3, [r7, #12]
   12a72:	885b      	ldrh	r3, [r3, #2]
   12a74:	b29b      	uxth	r3, r3
   12a76:	4a0e      	ldr	r2, [pc, #56]	; (12ab0 <rtc_calendar_get_time+0x84>)
   12a78:	4313      	orrs	r3, r2
   12a7a:	b29a      	uxth	r2, r3
   12a7c:	68fb      	ldr	r3, [r7, #12]
   12a7e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   12a80:	46c0      	nop			; (mov r8, r8)
   12a82:	687b      	ldr	r3, [r7, #4]
   12a84:	0018      	movs	r0, r3
   12a86:	4b09      	ldr	r3, [pc, #36]	; (12aac <rtc_calendar_get_time+0x80>)
   12a88:	4798      	blx	r3
   12a8a:	1e03      	subs	r3, r0, #0
   12a8c:	d1f9      	bne.n	12a82 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   12a8e:	68fb      	ldr	r3, [r7, #12]
   12a90:	691b      	ldr	r3, [r3, #16]
   12a92:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   12a94:	683a      	ldr	r2, [r7, #0]
   12a96:	68b9      	ldr	r1, [r7, #8]
   12a98:	687b      	ldr	r3, [r7, #4]
   12a9a:	0018      	movs	r0, r3
   12a9c:	4b05      	ldr	r3, [pc, #20]	; (12ab4 <rtc_calendar_get_time+0x88>)
   12a9e:	4798      	blx	r3
}
   12aa0:	46c0      	nop			; (mov r8, r8)
   12aa2:	46bd      	mov	sp, r7
   12aa4:	b004      	add	sp, #16
   12aa6:	bd80      	pop	{r7, pc}
   12aa8:	ffff8000 	.word	0xffff8000
   12aac:	0001269d 	.word	0x0001269d
   12ab0:	ffffc000 	.word	0xffffc000
   12ab4:	00012831 	.word	0x00012831

00012ab8 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   12ab8:	b580      	push	{r7, lr}
   12aba:	b086      	sub	sp, #24
   12abc:	af00      	add	r7, sp, #0
   12abe:	60f8      	str	r0, [r7, #12]
   12ac0:	60b9      	str	r1, [r7, #8]
   12ac2:	1dfb      	adds	r3, r7, #7
   12ac4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   12ac6:	68fb      	ldr	r3, [r7, #12]
   12ac8:	681b      	ldr	r3, [r3, #0]
   12aca:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   12acc:	1dfb      	adds	r3, r7, #7
   12ace:	781b      	ldrb	r3, [r3, #0]
   12ad0:	2b01      	cmp	r3, #1
   12ad2:	d901      	bls.n	12ad8 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   12ad4:	2317      	movs	r3, #23
   12ad6:	e021      	b.n	12b1c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   12ad8:	68ba      	ldr	r2, [r7, #8]
   12ada:	68fb      	ldr	r3, [r7, #12]
   12adc:	0011      	movs	r1, r2
   12ade:	0018      	movs	r0, r3
   12ae0:	4b10      	ldr	r3, [pc, #64]	; (12b24 <rtc_calendar_set_alarm+0x6c>)
   12ae2:	4798      	blx	r3
   12ae4:	0003      	movs	r3, r0
   12ae6:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   12ae8:	46c0      	nop			; (mov r8, r8)
   12aea:	68fb      	ldr	r3, [r7, #12]
   12aec:	0018      	movs	r0, r3
   12aee:	4b0e      	ldr	r3, [pc, #56]	; (12b28 <rtc_calendar_set_alarm+0x70>)
   12af0:	4798      	blx	r3
   12af2:	1e03      	subs	r3, r0, #0
   12af4:	d1f9      	bne.n	12aea <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   12af6:	1dfb      	adds	r3, r7, #7
   12af8:	781a      	ldrb	r2, [r3, #0]
   12afa:	697b      	ldr	r3, [r7, #20]
   12afc:	3203      	adds	r2, #3
   12afe:	00d2      	lsls	r2, r2, #3
   12b00:	6939      	ldr	r1, [r7, #16]
   12b02:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   12b04:	1dfb      	adds	r3, r7, #7
   12b06:	781b      	ldrb	r3, [r3, #0]
   12b08:	68ba      	ldr	r2, [r7, #8]
   12b0a:	7a11      	ldrb	r1, [r2, #8]
   12b0c:	697a      	ldr	r2, [r7, #20]
   12b0e:	3303      	adds	r3, #3
   12b10:	00db      	lsls	r3, r3, #3
   12b12:	18d3      	adds	r3, r2, r3
   12b14:	3304      	adds	r3, #4
   12b16:	1c0a      	adds	r2, r1, #0
   12b18:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   12b1a:	2300      	movs	r3, #0
}
   12b1c:	0018      	movs	r0, r3
   12b1e:	46bd      	mov	sp, r7
   12b20:	b006      	add	sp, #24
   12b22:	bd80      	pop	{r7, pc}
   12b24:	000127a9 	.word	0x000127a9
   12b28:	0001269d 	.word	0x0001269d

00012b2c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b086      	sub	sp, #24
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   12b34:	4b28      	ldr	r3, [pc, #160]	; (12bd8 <_rtc_interrupt_handler+0xac>)
   12b36:	687a      	ldr	r2, [r7, #4]
   12b38:	0092      	lsls	r2, r2, #2
   12b3a:	58d3      	ldr	r3, [r2, r3]
   12b3c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   12b3e:	697b      	ldr	r3, [r7, #20]
   12b40:	681b      	ldr	r3, [r3, #0]
   12b42:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   12b44:	230e      	movs	r3, #14
   12b46:	18fb      	adds	r3, r7, r3
   12b48:	697a      	ldr	r2, [r7, #20]
   12b4a:	8a52      	ldrh	r2, [r2, #18]
   12b4c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12b4e:	697b      	ldr	r3, [r7, #20]
   12b50:	8a1b      	ldrh	r3, [r3, #16]
   12b52:	b29a      	uxth	r2, r3
   12b54:	230e      	movs	r3, #14
   12b56:	18fb      	adds	r3, r7, r3
   12b58:	210e      	movs	r1, #14
   12b5a:	1879      	adds	r1, r7, r1
   12b5c:	8809      	ldrh	r1, [r1, #0]
   12b5e:	400a      	ands	r2, r1
   12b60:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   12b62:	693b      	ldr	r3, [r7, #16]
   12b64:	7a1b      	ldrb	r3, [r3, #8]
   12b66:	b2da      	uxtb	r2, r3
   12b68:	230c      	movs	r3, #12
   12b6a:	18fb      	adds	r3, r7, r3
   12b6c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   12b6e:	693b      	ldr	r3, [r7, #16]
   12b70:	79db      	ldrb	r3, [r3, #7]
   12b72:	b2db      	uxtb	r3, r3
   12b74:	b29a      	uxth	r2, r3
   12b76:	230c      	movs	r3, #12
   12b78:	18fb      	adds	r3, r7, r3
   12b7a:	210c      	movs	r1, #12
   12b7c:	1879      	adds	r1, r7, r1
   12b7e:	8809      	ldrh	r1, [r1, #0]
   12b80:	400a      	ands	r2, r1
   12b82:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   12b84:	230c      	movs	r3, #12
   12b86:	18fb      	adds	r3, r7, r3
   12b88:	881b      	ldrh	r3, [r3, #0]
   12b8a:	2280      	movs	r2, #128	; 0x80
   12b8c:	4013      	ands	r3, r2
   12b8e:	d00c      	beq.n	12baa <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   12b90:	230e      	movs	r3, #14
   12b92:	18fb      	adds	r3, r7, r3
   12b94:	881b      	ldrh	r3, [r3, #0]
   12b96:	2202      	movs	r2, #2
   12b98:	4013      	ands	r3, r2
   12b9a:	d002      	beq.n	12ba2 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   12b9c:	697b      	ldr	r3, [r7, #20]
   12b9e:	68db      	ldr	r3, [r3, #12]
   12ba0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   12ba2:	693b      	ldr	r3, [r7, #16]
   12ba4:	2280      	movs	r2, #128	; 0x80
   12ba6:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   12ba8:	e011      	b.n	12bce <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   12baa:	230c      	movs	r3, #12
   12bac:	18fb      	adds	r3, r7, r3
   12bae:	881b      	ldrh	r3, [r3, #0]
   12bb0:	2201      	movs	r2, #1
   12bb2:	4013      	ands	r3, r2
   12bb4:	d00b      	beq.n	12bce <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   12bb6:	230e      	movs	r3, #14
   12bb8:	18fb      	adds	r3, r7, r3
   12bba:	881b      	ldrh	r3, [r3, #0]
   12bbc:	2201      	movs	r2, #1
   12bbe:	4013      	ands	r3, r2
   12bc0:	d002      	beq.n	12bc8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   12bc2:	697b      	ldr	r3, [r7, #20]
   12bc4:	689b      	ldr	r3, [r3, #8]
   12bc6:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   12bc8:	693b      	ldr	r3, [r7, #16]
   12bca:	2201      	movs	r2, #1
   12bcc:	721a      	strb	r2, [r3, #8]
}
   12bce:	46c0      	nop			; (mov r8, r8)
   12bd0:	46bd      	mov	sp, r7
   12bd2:	b006      	add	sp, #24
   12bd4:	bd80      	pop	{r7, pc}
   12bd6:	46c0      	nop			; (mov r8, r8)
   12bd8:	20005584 	.word	0x20005584

00012bdc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   12bdc:	b580      	push	{r7, lr}
   12bde:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   12be0:	2000      	movs	r0, #0
   12be2:	4b02      	ldr	r3, [pc, #8]	; (12bec <RTC_Handler+0x10>)
   12be4:	4798      	blx	r3
}
   12be6:	46c0      	nop			; (mov r8, r8)
   12be8:	46bd      	mov	sp, r7
   12bea:	bd80      	pop	{r7, pc}
   12bec:	00012b2d 	.word	0x00012b2d

00012bf0 <system_gclk_chan_get_config_defaults>:
{
   12bf0:	b580      	push	{r7, lr}
   12bf2:	b082      	sub	sp, #8
   12bf4:	af00      	add	r7, sp, #0
   12bf6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   12bf8:	687b      	ldr	r3, [r7, #4]
   12bfa:	2200      	movs	r2, #0
   12bfc:	701a      	strb	r2, [r3, #0]
}
   12bfe:	46c0      	nop			; (mov r8, r8)
   12c00:	46bd      	mov	sp, r7
   12c02:	b002      	add	sp, #8
   12c04:	bd80      	pop	{r7, pc}

00012c06 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   12c06:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c08:	b08d      	sub	sp, #52	; 0x34
   12c0a:	af00      	add	r7, sp, #0
   12c0c:	60b8      	str	r0, [r7, #8]
   12c0e:	60f9      	str	r1, [r7, #12]
   12c10:	603a      	str	r2, [r7, #0]
   12c12:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   12c14:	2300      	movs	r3, #0
   12c16:	2400      	movs	r4, #0
   12c18:	623b      	str	r3, [r7, #32]
   12c1a:	627c      	str	r4, [r7, #36]	; 0x24
   12c1c:	2300      	movs	r3, #0
   12c1e:	2400      	movs	r4, #0
   12c20:	61bb      	str	r3, [r7, #24]
   12c22:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   12c24:	233f      	movs	r3, #63	; 0x3f
   12c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   12c28:	e053      	b.n	12cd2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   12c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12c2c:	3b20      	subs	r3, #32
   12c2e:	2b00      	cmp	r3, #0
   12c30:	db04      	blt.n	12c3c <long_division+0x36>
   12c32:	2201      	movs	r2, #1
   12c34:	409a      	lsls	r2, r3
   12c36:	0013      	movs	r3, r2
   12c38:	617b      	str	r3, [r7, #20]
   12c3a:	e00b      	b.n	12c54 <long_division+0x4e>
   12c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12c3e:	2220      	movs	r2, #32
   12c40:	1ad3      	subs	r3, r2, r3
   12c42:	2201      	movs	r2, #1
   12c44:	40da      	lsrs	r2, r3
   12c46:	0013      	movs	r3, r2
   12c48:	2100      	movs	r1, #0
   12c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12c4c:	4091      	lsls	r1, r2
   12c4e:	000a      	movs	r2, r1
   12c50:	4313      	orrs	r3, r2
   12c52:	617b      	str	r3, [r7, #20]
   12c54:	2201      	movs	r2, #1
   12c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12c58:	409a      	lsls	r2, r3
   12c5a:	0013      	movs	r3, r2
   12c5c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   12c5e:	69bb      	ldr	r3, [r7, #24]
   12c60:	69fc      	ldr	r4, [r7, #28]
   12c62:	18db      	adds	r3, r3, r3
   12c64:	4164      	adcs	r4, r4
   12c66:	61bb      	str	r3, [r7, #24]
   12c68:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   12c6a:	68bb      	ldr	r3, [r7, #8]
   12c6c:	693a      	ldr	r2, [r7, #16]
   12c6e:	401a      	ands	r2, r3
   12c70:	0015      	movs	r5, r2
   12c72:	68fb      	ldr	r3, [r7, #12]
   12c74:	697a      	ldr	r2, [r7, #20]
   12c76:	401a      	ands	r2, r3
   12c78:	0016      	movs	r6, r2
   12c7a:	002b      	movs	r3, r5
   12c7c:	4333      	orrs	r3, r6
   12c7e:	d007      	beq.n	12c90 <long_division+0x8a>
			r |= 0x01;
   12c80:	69bb      	ldr	r3, [r7, #24]
   12c82:	2201      	movs	r2, #1
   12c84:	4313      	orrs	r3, r2
   12c86:	61bb      	str	r3, [r7, #24]
   12c88:	69fb      	ldr	r3, [r7, #28]
   12c8a:	2200      	movs	r2, #0
   12c8c:	4313      	orrs	r3, r2
   12c8e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   12c90:	687a      	ldr	r2, [r7, #4]
   12c92:	69fb      	ldr	r3, [r7, #28]
   12c94:	429a      	cmp	r2, r3
   12c96:	d819      	bhi.n	12ccc <long_division+0xc6>
   12c98:	687a      	ldr	r2, [r7, #4]
   12c9a:	69fb      	ldr	r3, [r7, #28]
   12c9c:	429a      	cmp	r2, r3
   12c9e:	d103      	bne.n	12ca8 <long_division+0xa2>
   12ca0:	683a      	ldr	r2, [r7, #0]
   12ca2:	69bb      	ldr	r3, [r7, #24]
   12ca4:	429a      	cmp	r2, r3
   12ca6:	d811      	bhi.n	12ccc <long_division+0xc6>
			r = r - d;
   12ca8:	69b9      	ldr	r1, [r7, #24]
   12caa:	69fa      	ldr	r2, [r7, #28]
   12cac:	683b      	ldr	r3, [r7, #0]
   12cae:	687c      	ldr	r4, [r7, #4]
   12cb0:	1ac9      	subs	r1, r1, r3
   12cb2:	41a2      	sbcs	r2, r4
   12cb4:	000b      	movs	r3, r1
   12cb6:	0014      	movs	r4, r2
   12cb8:	61bb      	str	r3, [r7, #24]
   12cba:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   12cbc:	6a3a      	ldr	r2, [r7, #32]
   12cbe:	693b      	ldr	r3, [r7, #16]
   12cc0:	4313      	orrs	r3, r2
   12cc2:	623b      	str	r3, [r7, #32]
   12cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12cc6:	697b      	ldr	r3, [r7, #20]
   12cc8:	4313      	orrs	r3, r2
   12cca:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   12ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12cce:	3b01      	subs	r3, #1
   12cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   12cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12cd4:	2b00      	cmp	r3, #0
   12cd6:	daa8      	bge.n	12c2a <long_division+0x24>
		}
	}

	return q;
   12cd8:	6a3b      	ldr	r3, [r7, #32]
   12cda:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   12cdc:	0018      	movs	r0, r3
   12cde:	0021      	movs	r1, r4
   12ce0:	46bd      	mov	sp, r7
   12ce2:	b00d      	add	sp, #52	; 0x34
   12ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012ce6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   12ce6:	b580      	push	{r7, lr}
   12ce8:	b086      	sub	sp, #24
   12cea:	af00      	add	r7, sp, #0
   12cec:	60f8      	str	r0, [r7, #12]
   12cee:	60b9      	str	r1, [r7, #8]
   12cf0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   12cf2:	2316      	movs	r3, #22
   12cf4:	18fb      	adds	r3, r7, r3
   12cf6:	2200      	movs	r2, #0
   12cf8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   12cfa:	68bb      	ldr	r3, [r7, #8]
   12cfc:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   12cfe:	68bb      	ldr	r3, [r7, #8]
   12d00:	085a      	lsrs	r2, r3, #1
   12d02:	68fb      	ldr	r3, [r7, #12]
   12d04:	429a      	cmp	r2, r3
   12d06:	d201      	bcs.n	12d0c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12d08:	2340      	movs	r3, #64	; 0x40
   12d0a:	e026      	b.n	12d5a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   12d0c:	68bb      	ldr	r3, [r7, #8]
   12d0e:	085b      	lsrs	r3, r3, #1
   12d10:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   12d12:	e00a      	b.n	12d2a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   12d14:	693a      	ldr	r2, [r7, #16]
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	1ad3      	subs	r3, r2, r3
   12d1a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   12d1c:	2316      	movs	r3, #22
   12d1e:	18fb      	adds	r3, r7, r3
   12d20:	881a      	ldrh	r2, [r3, #0]
   12d22:	2316      	movs	r3, #22
   12d24:	18fb      	adds	r3, r7, r3
   12d26:	3201      	adds	r2, #1
   12d28:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   12d2a:	693a      	ldr	r2, [r7, #16]
   12d2c:	68fb      	ldr	r3, [r7, #12]
   12d2e:	429a      	cmp	r2, r3
   12d30:	d2f0      	bcs.n	12d14 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   12d32:	2316      	movs	r3, #22
   12d34:	18fb      	adds	r3, r7, r3
   12d36:	2216      	movs	r2, #22
   12d38:	18ba      	adds	r2, r7, r2
   12d3a:	8812      	ldrh	r2, [r2, #0]
   12d3c:	3a01      	subs	r2, #1
   12d3e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   12d40:	2316      	movs	r3, #22
   12d42:	18fb      	adds	r3, r7, r3
   12d44:	881b      	ldrh	r3, [r3, #0]
   12d46:	2bff      	cmp	r3, #255	; 0xff
   12d48:	d901      	bls.n	12d4e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12d4a:	2340      	movs	r3, #64	; 0x40
   12d4c:	e005      	b.n	12d5a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   12d4e:	687b      	ldr	r3, [r7, #4]
   12d50:	2216      	movs	r2, #22
   12d52:	18ba      	adds	r2, r7, r2
   12d54:	8812      	ldrh	r2, [r2, #0]
   12d56:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   12d58:	2300      	movs	r3, #0
	}
}
   12d5a:	0018      	movs	r0, r3
   12d5c:	46bd      	mov	sp, r7
   12d5e:	b006      	add	sp, #24
   12d60:	bd80      	pop	{r7, pc}
	...

00012d64 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   12d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d66:	b0a1      	sub	sp, #132	; 0x84
   12d68:	af00      	add	r7, sp, #0
   12d6a:	64f8      	str	r0, [r7, #76]	; 0x4c
   12d6c:	64b9      	str	r1, [r7, #72]	; 0x48
   12d6e:	647a      	str	r2, [r7, #68]	; 0x44
   12d70:	2243      	movs	r2, #67	; 0x43
   12d72:	18ba      	adds	r2, r7, r2
   12d74:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   12d76:	2300      	movs	r3, #0
   12d78:	2400      	movs	r4, #0
   12d7a:	673b      	str	r3, [r7, #112]	; 0x70
   12d7c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   12d7e:	2300      	movs	r3, #0
   12d80:	2400      	movs	r4, #0
   12d82:	66bb      	str	r3, [r7, #104]	; 0x68
   12d84:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   12d86:	2300      	movs	r3, #0
   12d88:	2400      	movs	r4, #0
   12d8a:	67bb      	str	r3, [r7, #120]	; 0x78
   12d8c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   12d8e:	2300      	movs	r3, #0
   12d90:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   12d92:	2358      	movs	r3, #88	; 0x58
   12d94:	2240      	movs	r2, #64	; 0x40
   12d96:	4694      	mov	ip, r2
   12d98:	44bc      	add	ip, r7
   12d9a:	4463      	add	r3, ip
   12d9c:	781a      	ldrb	r2, [r3, #0]
   12d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12da0:	435a      	muls	r2, r3
   12da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12da4:	429a      	cmp	r2, r3
   12da6:	d901      	bls.n	12dac <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12da8:	2340      	movs	r3, #64	; 0x40
   12daa:	e0b3      	b.n	12f14 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   12dac:	2343      	movs	r3, #67	; 0x43
   12dae:	18fb      	adds	r3, r7, r3
   12db0:	781b      	ldrb	r3, [r3, #0]
   12db2:	2b00      	cmp	r3, #0
   12db4:	d13d      	bne.n	12e32 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   12db6:	2358      	movs	r3, #88	; 0x58
   12db8:	2240      	movs	r2, #64	; 0x40
   12dba:	4694      	mov	ip, r2
   12dbc:	44bc      	add	ip, r7
   12dbe:	4463      	add	r3, ip
   12dc0:	781b      	ldrb	r3, [r3, #0]
   12dc2:	b2db      	uxtb	r3, r3
   12dc4:	613b      	str	r3, [r7, #16]
   12dc6:	2300      	movs	r3, #0
   12dc8:	617b      	str	r3, [r7, #20]
   12dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12dcc:	60bb      	str	r3, [r7, #8]
   12dce:	2300      	movs	r3, #0
   12dd0:	60fb      	str	r3, [r7, #12]
   12dd2:	4c52      	ldr	r4, [pc, #328]	; (12f1c <_sercom_get_async_baud_val+0x1b8>)
   12dd4:	68ba      	ldr	r2, [r7, #8]
   12dd6:	68fb      	ldr	r3, [r7, #12]
   12dd8:	6938      	ldr	r0, [r7, #16]
   12dda:	6979      	ldr	r1, [r7, #20]
   12ddc:	47a0      	blx	r4
   12dde:	0003      	movs	r3, r0
   12de0:	000c      	movs	r4, r1
   12de2:	001b      	movs	r3, r3
   12de4:	65fb      	str	r3, [r7, #92]	; 0x5c
   12de6:	2300      	movs	r3, #0
   12de8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   12dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12dec:	603b      	str	r3, [r7, #0]
   12dee:	2300      	movs	r3, #0
   12df0:	607b      	str	r3, [r7, #4]
   12df2:	6db8      	ldr	r0, [r7, #88]	; 0x58
   12df4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   12df6:	683a      	ldr	r2, [r7, #0]
   12df8:	687b      	ldr	r3, [r7, #4]
   12dfa:	4c49      	ldr	r4, [pc, #292]	; (12f20 <_sercom_get_async_baud_val+0x1bc>)
   12dfc:	47a0      	blx	r4
   12dfe:	0003      	movs	r3, r0
   12e00:	000c      	movs	r4, r1
   12e02:	673b      	str	r3, [r7, #112]	; 0x70
   12e04:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   12e06:	2100      	movs	r1, #0
   12e08:	2201      	movs	r2, #1
   12e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   12e0c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   12e0e:	1ac9      	subs	r1, r1, r3
   12e10:	41a2      	sbcs	r2, r4
   12e12:	000b      	movs	r3, r1
   12e14:	0014      	movs	r4, r2
   12e16:	66bb      	str	r3, [r7, #104]	; 0x68
   12e18:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   12e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12e1c:	0c1b      	lsrs	r3, r3, #16
   12e1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   12e20:	0416      	lsls	r6, r2, #16
   12e22:	431e      	orrs	r6, r3
   12e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12e26:	041d      	lsls	r5, r3, #16
   12e28:	0033      	movs	r3, r6
   12e2a:	67bb      	str	r3, [r7, #120]	; 0x78
   12e2c:	2300      	movs	r3, #0
   12e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   12e30:	e06a      	b.n	12f08 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   12e32:	2343      	movs	r3, #67	; 0x43
   12e34:	18fb      	adds	r3, r7, r3
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	2b01      	cmp	r3, #1
   12e3a:	d165      	bne.n	12f08 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   12e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12e3e:	633b      	str	r3, [r7, #48]	; 0x30
   12e40:	2300      	movs	r3, #0
   12e42:	637b      	str	r3, [r7, #52]	; 0x34
   12e44:	2358      	movs	r3, #88	; 0x58
   12e46:	2240      	movs	r2, #64	; 0x40
   12e48:	4694      	mov	ip, r2
   12e4a:	44bc      	add	ip, r7
   12e4c:	4463      	add	r3, ip
   12e4e:	781b      	ldrb	r3, [r3, #0]
   12e50:	b2db      	uxtb	r3, r3
   12e52:	62bb      	str	r3, [r7, #40]	; 0x28
   12e54:	2300      	movs	r3, #0
   12e56:	62fb      	str	r3, [r7, #44]	; 0x2c
   12e58:	4c30      	ldr	r4, [pc, #192]	; (12f1c <_sercom_get_async_baud_val+0x1b8>)
   12e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12e60:	6b79      	ldr	r1, [r7, #52]	; 0x34
   12e62:	47a0      	blx	r4
   12e64:	0003      	movs	r3, r0
   12e66:	000c      	movs	r4, r1
   12e68:	65bb      	str	r3, [r7, #88]	; 0x58
   12e6a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   12e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12e6e:	623b      	str	r3, [r7, #32]
   12e70:	2300      	movs	r3, #0
   12e72:	627b      	str	r3, [r7, #36]	; 0x24
   12e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12e76:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   12e78:	001a      	movs	r2, r3
   12e7a:	0023      	movs	r3, r4
   12e7c:	6a38      	ldr	r0, [r7, #32]
   12e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   12e80:	4c27      	ldr	r4, [pc, #156]	; (12f20 <_sercom_get_async_baud_val+0x1bc>)
   12e82:	47a0      	blx	r4
   12e84:	0003      	movs	r3, r0
   12e86:	000c      	movs	r4, r1
   12e88:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   12e8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   12e8c:	2380      	movs	r3, #128	; 0x80
   12e8e:	019b      	lsls	r3, r3, #6
   12e90:	429a      	cmp	r2, r3
   12e92:	d901      	bls.n	12e98 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12e94:	2340      	movs	r3, #64	; 0x40
   12e96:	e03d      	b.n	12f14 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   12e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12e9a:	61bb      	str	r3, [r7, #24]
   12e9c:	2300      	movs	r3, #0
   12e9e:	61fb      	str	r3, [r7, #28]
   12ea0:	69b9      	ldr	r1, [r7, #24]
   12ea2:	69fa      	ldr	r2, [r7, #28]
   12ea4:	000b      	movs	r3, r1
   12ea6:	0f5b      	lsrs	r3, r3, #29
   12ea8:	0010      	movs	r0, r2
   12eaa:	00c0      	lsls	r0, r0, #3
   12eac:	63f8      	str	r0, [r7, #60]	; 0x3c
   12eae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   12eb0:	4318      	orrs	r0, r3
   12eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
   12eb4:	000b      	movs	r3, r1
   12eb6:	00db      	lsls	r3, r3, #3
   12eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   12eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12ebc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   12ebe:	001a      	movs	r2, r3
   12ec0:	0023      	movs	r3, r4
   12ec2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   12ec4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   12ec6:	4c16      	ldr	r4, [pc, #88]	; (12f20 <_sercom_get_async_baud_val+0x1bc>)
   12ec8:	47a0      	blx	r4
   12eca:	0003      	movs	r3, r0
   12ecc:	000c      	movs	r4, r1
   12ece:	65bb      	str	r3, [r7, #88]	; 0x58
   12ed0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   12ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12ed4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   12ed6:	b2d9      	uxtb	r1, r3
   12ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12eda:	b2db      	uxtb	r3, r3
   12edc:	00db      	lsls	r3, r3, #3
   12ede:	b2da      	uxtb	r2, r3
   12ee0:	2317      	movs	r3, #23
   12ee2:	2040      	movs	r0, #64	; 0x40
   12ee4:	4684      	mov	ip, r0
   12ee6:	44bc      	add	ip, r7
   12ee8:	4463      	add	r3, ip
   12eea:	1a8a      	subs	r2, r1, r2
   12eec:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   12eee:	2317      	movs	r3, #23
   12ef0:	2240      	movs	r2, #64	; 0x40
   12ef2:	4694      	mov	ip, r2
   12ef4:	44bc      	add	ip, r7
   12ef6:	4463      	add	r3, ip
   12ef8:	781b      	ldrb	r3, [r3, #0]
   12efa:	035b      	lsls	r3, r3, #13
   12efc:	001a      	movs	r2, r3
   12efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12f00:	4313      	orrs	r3, r2
   12f02:	67bb      	str	r3, [r7, #120]	; 0x78
   12f04:	2300      	movs	r3, #0
   12f06:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   12f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   12f0a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   12f0c:	b29a      	uxth	r2, r3
   12f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   12f10:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   12f12:	2300      	movs	r3, #0
}
   12f14:	0018      	movs	r0, r3
   12f16:	46bd      	mov	sp, r7
   12f18:	b021      	add	sp, #132	; 0x84
   12f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f1c:	0001e755 	.word	0x0001e755
   12f20:	00012c07 	.word	0x00012c07

00012f24 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   12f24:	b580      	push	{r7, lr}
   12f26:	b084      	sub	sp, #16
   12f28:	af00      	add	r7, sp, #0
   12f2a:	0002      	movs	r2, r0
   12f2c:	1dfb      	adds	r3, r7, #7
   12f2e:	701a      	strb	r2, [r3, #0]
   12f30:	1dbb      	adds	r3, r7, #6
   12f32:	1c0a      	adds	r2, r1, #0
   12f34:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   12f36:	4b1a      	ldr	r3, [pc, #104]	; (12fa0 <sercom_set_gclk_generator+0x7c>)
   12f38:	781b      	ldrb	r3, [r3, #0]
   12f3a:	2201      	movs	r2, #1
   12f3c:	4053      	eors	r3, r2
   12f3e:	b2db      	uxtb	r3, r3
   12f40:	2b00      	cmp	r3, #0
   12f42:	d103      	bne.n	12f4c <sercom_set_gclk_generator+0x28>
   12f44:	1dbb      	adds	r3, r7, #6
   12f46:	781b      	ldrb	r3, [r3, #0]
   12f48:	2b00      	cmp	r3, #0
   12f4a:	d01b      	beq.n	12f84 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12f4c:	230c      	movs	r3, #12
   12f4e:	18fb      	adds	r3, r7, r3
   12f50:	0018      	movs	r0, r3
   12f52:	4b14      	ldr	r3, [pc, #80]	; (12fa4 <sercom_set_gclk_generator+0x80>)
   12f54:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   12f56:	230c      	movs	r3, #12
   12f58:	18fb      	adds	r3, r7, r3
   12f5a:	1dfa      	adds	r2, r7, #7
   12f5c:	7812      	ldrb	r2, [r2, #0]
   12f5e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   12f60:	230c      	movs	r3, #12
   12f62:	18fb      	adds	r3, r7, r3
   12f64:	0019      	movs	r1, r3
   12f66:	2013      	movs	r0, #19
   12f68:	4b0f      	ldr	r3, [pc, #60]	; (12fa8 <sercom_set_gclk_generator+0x84>)
   12f6a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   12f6c:	2013      	movs	r0, #19
   12f6e:	4b0f      	ldr	r3, [pc, #60]	; (12fac <sercom_set_gclk_generator+0x88>)
   12f70:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   12f72:	4b0b      	ldr	r3, [pc, #44]	; (12fa0 <sercom_set_gclk_generator+0x7c>)
   12f74:	1dfa      	adds	r2, r7, #7
   12f76:	7812      	ldrb	r2, [r2, #0]
   12f78:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   12f7a:	4b09      	ldr	r3, [pc, #36]	; (12fa0 <sercom_set_gclk_generator+0x7c>)
   12f7c:	2201      	movs	r2, #1
   12f7e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   12f80:	2300      	movs	r3, #0
   12f82:	e008      	b.n	12f96 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   12f84:	4b06      	ldr	r3, [pc, #24]	; (12fa0 <sercom_set_gclk_generator+0x7c>)
   12f86:	785b      	ldrb	r3, [r3, #1]
   12f88:	1dfa      	adds	r2, r7, #7
   12f8a:	7812      	ldrb	r2, [r2, #0]
   12f8c:	429a      	cmp	r2, r3
   12f8e:	d101      	bne.n	12f94 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   12f90:	2300      	movs	r3, #0
   12f92:	e000      	b.n	12f96 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   12f94:	231d      	movs	r3, #29
}
   12f96:	0018      	movs	r0, r3
   12f98:	46bd      	mov	sp, r7
   12f9a:	b004      	add	sp, #16
   12f9c:	bd80      	pop	{r7, pc}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	20003d28 	.word	0x20003d28
   12fa4:	00012bf1 	.word	0x00012bf1
   12fa8:	000159fd 	.word	0x000159fd
   12fac:	00015a41 	.word	0x00015a41

00012fb0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   12fb0:	b580      	push	{r7, lr}
   12fb2:	b082      	sub	sp, #8
   12fb4:	af00      	add	r7, sp, #0
   12fb6:	6078      	str	r0, [r7, #4]
   12fb8:	000a      	movs	r2, r1
   12fba:	1cfb      	adds	r3, r7, #3
   12fbc:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   12fbe:	687b      	ldr	r3, [r7, #4]
   12fc0:	4a4d      	ldr	r2, [pc, #308]	; (130f8 <_sercom_get_default_pad+0x148>)
   12fc2:	4293      	cmp	r3, r2
   12fc4:	d03f      	beq.n	13046 <_sercom_get_default_pad+0x96>
   12fc6:	4a4c      	ldr	r2, [pc, #304]	; (130f8 <_sercom_get_default_pad+0x148>)
   12fc8:	4293      	cmp	r3, r2
   12fca:	d806      	bhi.n	12fda <_sercom_get_default_pad+0x2a>
   12fcc:	4a4b      	ldr	r2, [pc, #300]	; (130fc <_sercom_get_default_pad+0x14c>)
   12fce:	4293      	cmp	r3, r2
   12fd0:	d00f      	beq.n	12ff2 <_sercom_get_default_pad+0x42>
   12fd2:	4a4b      	ldr	r2, [pc, #300]	; (13100 <_sercom_get_default_pad+0x150>)
   12fd4:	4293      	cmp	r3, r2
   12fd6:	d021      	beq.n	1301c <_sercom_get_default_pad+0x6c>
   12fd8:	e089      	b.n	130ee <_sercom_get_default_pad+0x13e>
   12fda:	4a4a      	ldr	r2, [pc, #296]	; (13104 <_sercom_get_default_pad+0x154>)
   12fdc:	4293      	cmp	r3, r2
   12fde:	d100      	bne.n	12fe2 <_sercom_get_default_pad+0x32>
   12fe0:	e05b      	b.n	1309a <_sercom_get_default_pad+0xea>
   12fe2:	4a49      	ldr	r2, [pc, #292]	; (13108 <_sercom_get_default_pad+0x158>)
   12fe4:	4293      	cmp	r3, r2
   12fe6:	d100      	bne.n	12fea <_sercom_get_default_pad+0x3a>
   12fe8:	e06c      	b.n	130c4 <_sercom_get_default_pad+0x114>
   12fea:	4a48      	ldr	r2, [pc, #288]	; (1310c <_sercom_get_default_pad+0x15c>)
   12fec:	4293      	cmp	r3, r2
   12fee:	d03f      	beq.n	13070 <_sercom_get_default_pad+0xc0>
   12ff0:	e07d      	b.n	130ee <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   12ff2:	1cfb      	adds	r3, r7, #3
   12ff4:	781b      	ldrb	r3, [r3, #0]
   12ff6:	2b01      	cmp	r3, #1
   12ff8:	d00a      	beq.n	13010 <_sercom_get_default_pad+0x60>
   12ffa:	dc02      	bgt.n	13002 <_sercom_get_default_pad+0x52>
   12ffc:	2b00      	cmp	r3, #0
   12ffe:	d005      	beq.n	1300c <_sercom_get_default_pad+0x5c>
   13000:	e075      	b.n	130ee <_sercom_get_default_pad+0x13e>
   13002:	2b02      	cmp	r3, #2
   13004:	d006      	beq.n	13014 <_sercom_get_default_pad+0x64>
   13006:	2b03      	cmp	r3, #3
   13008:	d006      	beq.n	13018 <_sercom_get_default_pad+0x68>
   1300a:	e070      	b.n	130ee <_sercom_get_default_pad+0x13e>
   1300c:	4b40      	ldr	r3, [pc, #256]	; (13110 <_sercom_get_default_pad+0x160>)
   1300e:	e06f      	b.n	130f0 <_sercom_get_default_pad+0x140>
   13010:	4b40      	ldr	r3, [pc, #256]	; (13114 <_sercom_get_default_pad+0x164>)
   13012:	e06d      	b.n	130f0 <_sercom_get_default_pad+0x140>
   13014:	4b40      	ldr	r3, [pc, #256]	; (13118 <_sercom_get_default_pad+0x168>)
   13016:	e06b      	b.n	130f0 <_sercom_get_default_pad+0x140>
   13018:	4b40      	ldr	r3, [pc, #256]	; (1311c <_sercom_get_default_pad+0x16c>)
   1301a:	e069      	b.n	130f0 <_sercom_get_default_pad+0x140>
   1301c:	1cfb      	adds	r3, r7, #3
   1301e:	781b      	ldrb	r3, [r3, #0]
   13020:	2b01      	cmp	r3, #1
   13022:	d00a      	beq.n	1303a <_sercom_get_default_pad+0x8a>
   13024:	dc02      	bgt.n	1302c <_sercom_get_default_pad+0x7c>
   13026:	2b00      	cmp	r3, #0
   13028:	d005      	beq.n	13036 <_sercom_get_default_pad+0x86>
   1302a:	e060      	b.n	130ee <_sercom_get_default_pad+0x13e>
   1302c:	2b02      	cmp	r3, #2
   1302e:	d006      	beq.n	1303e <_sercom_get_default_pad+0x8e>
   13030:	2b03      	cmp	r3, #3
   13032:	d006      	beq.n	13042 <_sercom_get_default_pad+0x92>
   13034:	e05b      	b.n	130ee <_sercom_get_default_pad+0x13e>
   13036:	2303      	movs	r3, #3
   13038:	e05a      	b.n	130f0 <_sercom_get_default_pad+0x140>
   1303a:	4b39      	ldr	r3, [pc, #228]	; (13120 <_sercom_get_default_pad+0x170>)
   1303c:	e058      	b.n	130f0 <_sercom_get_default_pad+0x140>
   1303e:	4b39      	ldr	r3, [pc, #228]	; (13124 <_sercom_get_default_pad+0x174>)
   13040:	e056      	b.n	130f0 <_sercom_get_default_pad+0x140>
   13042:	4b39      	ldr	r3, [pc, #228]	; (13128 <_sercom_get_default_pad+0x178>)
   13044:	e054      	b.n	130f0 <_sercom_get_default_pad+0x140>
   13046:	1cfb      	adds	r3, r7, #3
   13048:	781b      	ldrb	r3, [r3, #0]
   1304a:	2b01      	cmp	r3, #1
   1304c:	d00a      	beq.n	13064 <_sercom_get_default_pad+0xb4>
   1304e:	dc02      	bgt.n	13056 <_sercom_get_default_pad+0xa6>
   13050:	2b00      	cmp	r3, #0
   13052:	d005      	beq.n	13060 <_sercom_get_default_pad+0xb0>
   13054:	e04b      	b.n	130ee <_sercom_get_default_pad+0x13e>
   13056:	2b02      	cmp	r3, #2
   13058:	d006      	beq.n	13068 <_sercom_get_default_pad+0xb8>
   1305a:	2b03      	cmp	r3, #3
   1305c:	d006      	beq.n	1306c <_sercom_get_default_pad+0xbc>
   1305e:	e046      	b.n	130ee <_sercom_get_default_pad+0x13e>
   13060:	4b32      	ldr	r3, [pc, #200]	; (1312c <_sercom_get_default_pad+0x17c>)
   13062:	e045      	b.n	130f0 <_sercom_get_default_pad+0x140>
   13064:	4b32      	ldr	r3, [pc, #200]	; (13130 <_sercom_get_default_pad+0x180>)
   13066:	e043      	b.n	130f0 <_sercom_get_default_pad+0x140>
   13068:	4b32      	ldr	r3, [pc, #200]	; (13134 <_sercom_get_default_pad+0x184>)
   1306a:	e041      	b.n	130f0 <_sercom_get_default_pad+0x140>
   1306c:	4b32      	ldr	r3, [pc, #200]	; (13138 <_sercom_get_default_pad+0x188>)
   1306e:	e03f      	b.n	130f0 <_sercom_get_default_pad+0x140>
   13070:	1cfb      	adds	r3, r7, #3
   13072:	781b      	ldrb	r3, [r3, #0]
   13074:	2b01      	cmp	r3, #1
   13076:	d00a      	beq.n	1308e <_sercom_get_default_pad+0xde>
   13078:	dc02      	bgt.n	13080 <_sercom_get_default_pad+0xd0>
   1307a:	2b00      	cmp	r3, #0
   1307c:	d005      	beq.n	1308a <_sercom_get_default_pad+0xda>
   1307e:	e036      	b.n	130ee <_sercom_get_default_pad+0x13e>
   13080:	2b02      	cmp	r3, #2
   13082:	d006      	beq.n	13092 <_sercom_get_default_pad+0xe2>
   13084:	2b03      	cmp	r3, #3
   13086:	d006      	beq.n	13096 <_sercom_get_default_pad+0xe6>
   13088:	e031      	b.n	130ee <_sercom_get_default_pad+0x13e>
   1308a:	4b2c      	ldr	r3, [pc, #176]	; (1313c <_sercom_get_default_pad+0x18c>)
   1308c:	e030      	b.n	130f0 <_sercom_get_default_pad+0x140>
   1308e:	4b2c      	ldr	r3, [pc, #176]	; (13140 <_sercom_get_default_pad+0x190>)
   13090:	e02e      	b.n	130f0 <_sercom_get_default_pad+0x140>
   13092:	4b2c      	ldr	r3, [pc, #176]	; (13144 <_sercom_get_default_pad+0x194>)
   13094:	e02c      	b.n	130f0 <_sercom_get_default_pad+0x140>
   13096:	4b2c      	ldr	r3, [pc, #176]	; (13148 <_sercom_get_default_pad+0x198>)
   13098:	e02a      	b.n	130f0 <_sercom_get_default_pad+0x140>
   1309a:	1cfb      	adds	r3, r7, #3
   1309c:	781b      	ldrb	r3, [r3, #0]
   1309e:	2b01      	cmp	r3, #1
   130a0:	d00a      	beq.n	130b8 <_sercom_get_default_pad+0x108>
   130a2:	dc02      	bgt.n	130aa <_sercom_get_default_pad+0xfa>
   130a4:	2b00      	cmp	r3, #0
   130a6:	d005      	beq.n	130b4 <_sercom_get_default_pad+0x104>
   130a8:	e021      	b.n	130ee <_sercom_get_default_pad+0x13e>
   130aa:	2b02      	cmp	r3, #2
   130ac:	d006      	beq.n	130bc <_sercom_get_default_pad+0x10c>
   130ae:	2b03      	cmp	r3, #3
   130b0:	d006      	beq.n	130c0 <_sercom_get_default_pad+0x110>
   130b2:	e01c      	b.n	130ee <_sercom_get_default_pad+0x13e>
   130b4:	4b25      	ldr	r3, [pc, #148]	; (1314c <_sercom_get_default_pad+0x19c>)
   130b6:	e01b      	b.n	130f0 <_sercom_get_default_pad+0x140>
   130b8:	4b25      	ldr	r3, [pc, #148]	; (13150 <_sercom_get_default_pad+0x1a0>)
   130ba:	e019      	b.n	130f0 <_sercom_get_default_pad+0x140>
   130bc:	4b25      	ldr	r3, [pc, #148]	; (13154 <_sercom_get_default_pad+0x1a4>)
   130be:	e017      	b.n	130f0 <_sercom_get_default_pad+0x140>
   130c0:	4b25      	ldr	r3, [pc, #148]	; (13158 <_sercom_get_default_pad+0x1a8>)
   130c2:	e015      	b.n	130f0 <_sercom_get_default_pad+0x140>
   130c4:	1cfb      	adds	r3, r7, #3
   130c6:	781b      	ldrb	r3, [r3, #0]
   130c8:	2b01      	cmp	r3, #1
   130ca:	d00a      	beq.n	130e2 <_sercom_get_default_pad+0x132>
   130cc:	dc02      	bgt.n	130d4 <_sercom_get_default_pad+0x124>
   130ce:	2b00      	cmp	r3, #0
   130d0:	d005      	beq.n	130de <_sercom_get_default_pad+0x12e>
   130d2:	e00c      	b.n	130ee <_sercom_get_default_pad+0x13e>
   130d4:	2b02      	cmp	r3, #2
   130d6:	d006      	beq.n	130e6 <_sercom_get_default_pad+0x136>
   130d8:	2b03      	cmp	r3, #3
   130da:	d006      	beq.n	130ea <_sercom_get_default_pad+0x13a>
   130dc:	e007      	b.n	130ee <_sercom_get_default_pad+0x13e>
   130de:	4b1f      	ldr	r3, [pc, #124]	; (1315c <_sercom_get_default_pad+0x1ac>)
   130e0:	e006      	b.n	130f0 <_sercom_get_default_pad+0x140>
   130e2:	4b1f      	ldr	r3, [pc, #124]	; (13160 <_sercom_get_default_pad+0x1b0>)
   130e4:	e004      	b.n	130f0 <_sercom_get_default_pad+0x140>
   130e6:	4b1f      	ldr	r3, [pc, #124]	; (13164 <_sercom_get_default_pad+0x1b4>)
   130e8:	e002      	b.n	130f0 <_sercom_get_default_pad+0x140>
   130ea:	4b1f      	ldr	r3, [pc, #124]	; (13168 <_sercom_get_default_pad+0x1b8>)
   130ec:	e000      	b.n	130f0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   130ee:	2300      	movs	r3, #0
}
   130f0:	0018      	movs	r0, r3
   130f2:	46bd      	mov	sp, r7
   130f4:	b002      	add	sp, #8
   130f6:	bd80      	pop	{r7, pc}
   130f8:	42001000 	.word	0x42001000
   130fc:	42000800 	.word	0x42000800
   13100:	42000c00 	.word	0x42000c00
   13104:	42001800 	.word	0x42001800
   13108:	42001c00 	.word	0x42001c00
   1310c:	42001400 	.word	0x42001400
   13110:	00040003 	.word	0x00040003
   13114:	00050003 	.word	0x00050003
   13118:	00060003 	.word	0x00060003
   1311c:	00070003 	.word	0x00070003
   13120:	00010003 	.word	0x00010003
   13124:	001e0003 	.word	0x001e0003
   13128:	001f0003 	.word	0x001f0003
   1312c:	00080003 	.word	0x00080003
   13130:	00090003 	.word	0x00090003
   13134:	000a0003 	.word	0x000a0003
   13138:	000b0003 	.word	0x000b0003
   1313c:	00100003 	.word	0x00100003
   13140:	00110003 	.word	0x00110003
   13144:	00120003 	.word	0x00120003
   13148:	00130003 	.word	0x00130003
   1314c:	000c0003 	.word	0x000c0003
   13150:	000d0003 	.word	0x000d0003
   13154:	000e0003 	.word	0x000e0003
   13158:	000f0003 	.word	0x000f0003
   1315c:	00160003 	.word	0x00160003
   13160:	00170003 	.word	0x00170003
   13164:	00180003 	.word	0x00180003
   13168:	00190003 	.word	0x00190003

0001316c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   1316c:	b590      	push	{r4, r7, lr}
   1316e:	b08b      	sub	sp, #44	; 0x2c
   13170:	af00      	add	r7, sp, #0
   13172:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   13174:	230c      	movs	r3, #12
   13176:	18fb      	adds	r3, r7, r3
   13178:	4a0f      	ldr	r2, [pc, #60]	; (131b8 <_sercom_get_sercom_inst_index+0x4c>)
   1317a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1317c:	c313      	stmia	r3!, {r0, r1, r4}
   1317e:	ca13      	ldmia	r2!, {r0, r1, r4}
   13180:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   13182:	2300      	movs	r3, #0
   13184:	627b      	str	r3, [r7, #36]	; 0x24
   13186:	e00e      	b.n	131a6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   13188:	230c      	movs	r3, #12
   1318a:	18fb      	adds	r3, r7, r3
   1318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1318e:	0092      	lsls	r2, r2, #2
   13190:	58d3      	ldr	r3, [r2, r3]
   13192:	001a      	movs	r2, r3
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	429a      	cmp	r2, r3
   13198:	d102      	bne.n	131a0 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1319c:	b2db      	uxtb	r3, r3
   1319e:	e006      	b.n	131ae <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131a2:	3301      	adds	r3, #1
   131a4:	627b      	str	r3, [r7, #36]	; 0x24
   131a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   131a8:	2b05      	cmp	r3, #5
   131aa:	d9ed      	bls.n	13188 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   131ac:	2300      	movs	r3, #0
}
   131ae:	0018      	movs	r0, r3
   131b0:	46bd      	mov	sp, r7
   131b2:	b00b      	add	sp, #44	; 0x2c
   131b4:	bd90      	pop	{r4, r7, pc}
   131b6:	46c0      	nop			; (mov r8, r8)
   131b8:	0002488c 	.word	0x0002488c

000131bc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   131bc:	b580      	push	{r7, lr}
   131be:	b082      	sub	sp, #8
   131c0:	af00      	add	r7, sp, #0
   131c2:	0002      	movs	r2, r0
   131c4:	1dfb      	adds	r3, r7, #7
   131c6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   131c8:	46c0      	nop			; (mov r8, r8)
   131ca:	46bd      	mov	sp, r7
   131cc:	b002      	add	sp, #8
   131ce:	bd80      	pop	{r7, pc}

000131d0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   131d0:	b580      	push	{r7, lr}
   131d2:	b084      	sub	sp, #16
   131d4:	af00      	add	r7, sp, #0
   131d6:	0002      	movs	r2, r0
   131d8:	6039      	str	r1, [r7, #0]
   131da:	1dfb      	adds	r3, r7, #7
   131dc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   131de:	4b13      	ldr	r3, [pc, #76]	; (1322c <_sercom_set_handler+0x5c>)
   131e0:	781b      	ldrb	r3, [r3, #0]
   131e2:	2201      	movs	r2, #1
   131e4:	4053      	eors	r3, r2
   131e6:	b2db      	uxtb	r3, r3
   131e8:	2b00      	cmp	r3, #0
   131ea:	d015      	beq.n	13218 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   131ec:	2300      	movs	r3, #0
   131ee:	60fb      	str	r3, [r7, #12]
   131f0:	e00c      	b.n	1320c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   131f2:	4b0f      	ldr	r3, [pc, #60]	; (13230 <_sercom_set_handler+0x60>)
   131f4:	68fa      	ldr	r2, [r7, #12]
   131f6:	0092      	lsls	r2, r2, #2
   131f8:	490e      	ldr	r1, [pc, #56]	; (13234 <_sercom_set_handler+0x64>)
   131fa:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   131fc:	4b0e      	ldr	r3, [pc, #56]	; (13238 <_sercom_set_handler+0x68>)
   131fe:	68fa      	ldr	r2, [r7, #12]
   13200:	0092      	lsls	r2, r2, #2
   13202:	2100      	movs	r1, #0
   13204:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   13206:	68fb      	ldr	r3, [r7, #12]
   13208:	3301      	adds	r3, #1
   1320a:	60fb      	str	r3, [r7, #12]
   1320c:	68fb      	ldr	r3, [r7, #12]
   1320e:	2b05      	cmp	r3, #5
   13210:	d9ef      	bls.n	131f2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   13212:	4b06      	ldr	r3, [pc, #24]	; (1322c <_sercom_set_handler+0x5c>)
   13214:	2201      	movs	r2, #1
   13216:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   13218:	1dfb      	adds	r3, r7, #7
   1321a:	781a      	ldrb	r2, [r3, #0]
   1321c:	4b04      	ldr	r3, [pc, #16]	; (13230 <_sercom_set_handler+0x60>)
   1321e:	0092      	lsls	r2, r2, #2
   13220:	6839      	ldr	r1, [r7, #0]
   13222:	50d1      	str	r1, [r2, r3]
}
   13224:	46c0      	nop			; (mov r8, r8)
   13226:	46bd      	mov	sp, r7
   13228:	b004      	add	sp, #16
   1322a:	bd80      	pop	{r7, pc}
   1322c:	20003d2a 	.word	0x20003d2a
   13230:	20003d2c 	.word	0x20003d2c
   13234:	000131bd 	.word	0x000131bd
   13238:	20005588 	.word	0x20005588

0001323c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   1323c:	b590      	push	{r4, r7, lr}
   1323e:	b085      	sub	sp, #20
   13240:	af00      	add	r7, sp, #0
   13242:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   13244:	2308      	movs	r3, #8
   13246:	18fb      	adds	r3, r7, r3
   13248:	4a0b      	ldr	r2, [pc, #44]	; (13278 <_sercom_get_interrupt_vector+0x3c>)
   1324a:	6811      	ldr	r1, [r2, #0]
   1324c:	6019      	str	r1, [r3, #0]
   1324e:	8892      	ldrh	r2, [r2, #4]
   13250:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   13252:	230f      	movs	r3, #15
   13254:	18fc      	adds	r4, r7, r3
   13256:	687b      	ldr	r3, [r7, #4]
   13258:	0018      	movs	r0, r3
   1325a:	4b08      	ldr	r3, [pc, #32]	; (1327c <_sercom_get_interrupt_vector+0x40>)
   1325c:	4798      	blx	r3
   1325e:	0003      	movs	r3, r0
   13260:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   13262:	230f      	movs	r3, #15
   13264:	18fb      	adds	r3, r7, r3
   13266:	781b      	ldrb	r3, [r3, #0]
   13268:	2208      	movs	r2, #8
   1326a:	18ba      	adds	r2, r7, r2
   1326c:	5cd3      	ldrb	r3, [r2, r3]
   1326e:	b25b      	sxtb	r3, r3
}
   13270:	0018      	movs	r0, r3
   13272:	46bd      	mov	sp, r7
   13274:	b005      	add	sp, #20
   13276:	bd90      	pop	{r4, r7, pc}
   13278:	000248a4 	.word	0x000248a4
   1327c:	0001316d 	.word	0x0001316d

00013280 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   13280:	b580      	push	{r7, lr}
   13282:	af00      	add	r7, sp, #0
   13284:	4b03      	ldr	r3, [pc, #12]	; (13294 <SERCOM0_Handler+0x14>)
   13286:	681b      	ldr	r3, [r3, #0]
   13288:	2000      	movs	r0, #0
   1328a:	4798      	blx	r3
   1328c:	46c0      	nop			; (mov r8, r8)
   1328e:	46bd      	mov	sp, r7
   13290:	bd80      	pop	{r7, pc}
   13292:	46c0      	nop			; (mov r8, r8)
   13294:	20003d2c 	.word	0x20003d2c

00013298 <SERCOM1_Handler>:
   13298:	b580      	push	{r7, lr}
   1329a:	af00      	add	r7, sp, #0
   1329c:	4b03      	ldr	r3, [pc, #12]	; (132ac <SERCOM1_Handler+0x14>)
   1329e:	685b      	ldr	r3, [r3, #4]
   132a0:	2001      	movs	r0, #1
   132a2:	4798      	blx	r3
   132a4:	46c0      	nop			; (mov r8, r8)
   132a6:	46bd      	mov	sp, r7
   132a8:	bd80      	pop	{r7, pc}
   132aa:	46c0      	nop			; (mov r8, r8)
   132ac:	20003d2c 	.word	0x20003d2c

000132b0 <SERCOM2_Handler>:
   132b0:	b580      	push	{r7, lr}
   132b2:	af00      	add	r7, sp, #0
   132b4:	4b03      	ldr	r3, [pc, #12]	; (132c4 <SERCOM2_Handler+0x14>)
   132b6:	689b      	ldr	r3, [r3, #8]
   132b8:	2002      	movs	r0, #2
   132ba:	4798      	blx	r3
   132bc:	46c0      	nop			; (mov r8, r8)
   132be:	46bd      	mov	sp, r7
   132c0:	bd80      	pop	{r7, pc}
   132c2:	46c0      	nop			; (mov r8, r8)
   132c4:	20003d2c 	.word	0x20003d2c

000132c8 <SERCOM3_Handler>:
   132c8:	b580      	push	{r7, lr}
   132ca:	af00      	add	r7, sp, #0
   132cc:	4b03      	ldr	r3, [pc, #12]	; (132dc <SERCOM3_Handler+0x14>)
   132ce:	68db      	ldr	r3, [r3, #12]
   132d0:	2003      	movs	r0, #3
   132d2:	4798      	blx	r3
   132d4:	46c0      	nop			; (mov r8, r8)
   132d6:	46bd      	mov	sp, r7
   132d8:	bd80      	pop	{r7, pc}
   132da:	46c0      	nop			; (mov r8, r8)
   132dc:	20003d2c 	.word	0x20003d2c

000132e0 <SERCOM4_Handler>:
   132e0:	b580      	push	{r7, lr}
   132e2:	af00      	add	r7, sp, #0
   132e4:	4b03      	ldr	r3, [pc, #12]	; (132f4 <SERCOM4_Handler+0x14>)
   132e6:	691b      	ldr	r3, [r3, #16]
   132e8:	2004      	movs	r0, #4
   132ea:	4798      	blx	r3
   132ec:	46c0      	nop			; (mov r8, r8)
   132ee:	46bd      	mov	sp, r7
   132f0:	bd80      	pop	{r7, pc}
   132f2:	46c0      	nop			; (mov r8, r8)
   132f4:	20003d2c 	.word	0x20003d2c

000132f8 <SERCOM5_Handler>:
   132f8:	b580      	push	{r7, lr}
   132fa:	af00      	add	r7, sp, #0
   132fc:	4b03      	ldr	r3, [pc, #12]	; (1330c <SERCOM5_Handler+0x14>)
   132fe:	695b      	ldr	r3, [r3, #20]
   13300:	2005      	movs	r0, #5
   13302:	4798      	blx	r3
   13304:	46c0      	nop			; (mov r8, r8)
   13306:	46bd      	mov	sp, r7
   13308:	bd80      	pop	{r7, pc}
   1330a:	46c0      	nop			; (mov r8, r8)
   1330c:	20003d2c 	.word	0x20003d2c

00013310 <system_pinmux_get_config_defaults>:
{
   13310:	b580      	push	{r7, lr}
   13312:	b082      	sub	sp, #8
   13314:	af00      	add	r7, sp, #0
   13316:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2280      	movs	r2, #128	; 0x80
   1331c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1331e:	687b      	ldr	r3, [r7, #4]
   13320:	2200      	movs	r2, #0
   13322:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13324:	687b      	ldr	r3, [r7, #4]
   13326:	2201      	movs	r2, #1
   13328:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1332a:	687b      	ldr	r3, [r7, #4]
   1332c:	2200      	movs	r2, #0
   1332e:	70da      	strb	r2, [r3, #3]
}
   13330:	46c0      	nop			; (mov r8, r8)
   13332:	46bd      	mov	sp, r7
   13334:	b002      	add	sp, #8
   13336:	bd80      	pop	{r7, pc}

00013338 <system_pinmux_get_group_from_gpio_pin>:
{
   13338:	b580      	push	{r7, lr}
   1333a:	b084      	sub	sp, #16
   1333c:	af00      	add	r7, sp, #0
   1333e:	0002      	movs	r2, r0
   13340:	1dfb      	adds	r3, r7, #7
   13342:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13344:	230f      	movs	r3, #15
   13346:	18fb      	adds	r3, r7, r3
   13348:	1dfa      	adds	r2, r7, #7
   1334a:	7812      	ldrb	r2, [r2, #0]
   1334c:	09d2      	lsrs	r2, r2, #7
   1334e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13350:	230e      	movs	r3, #14
   13352:	18fb      	adds	r3, r7, r3
   13354:	1dfa      	adds	r2, r7, #7
   13356:	7812      	ldrb	r2, [r2, #0]
   13358:	0952      	lsrs	r2, r2, #5
   1335a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1335c:	4b0d      	ldr	r3, [pc, #52]	; (13394 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1335e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13360:	230f      	movs	r3, #15
   13362:	18fb      	adds	r3, r7, r3
   13364:	781b      	ldrb	r3, [r3, #0]
   13366:	2b00      	cmp	r3, #0
   13368:	d10f      	bne.n	1338a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1336a:	230f      	movs	r3, #15
   1336c:	18fb      	adds	r3, r7, r3
   1336e:	781b      	ldrb	r3, [r3, #0]
   13370:	009b      	lsls	r3, r3, #2
   13372:	2210      	movs	r2, #16
   13374:	4694      	mov	ip, r2
   13376:	44bc      	add	ip, r7
   13378:	4463      	add	r3, ip
   1337a:	3b08      	subs	r3, #8
   1337c:	681a      	ldr	r2, [r3, #0]
   1337e:	230e      	movs	r3, #14
   13380:	18fb      	adds	r3, r7, r3
   13382:	781b      	ldrb	r3, [r3, #0]
   13384:	01db      	lsls	r3, r3, #7
   13386:	18d3      	adds	r3, r2, r3
   13388:	e000      	b.n	1338c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1338a:	2300      	movs	r3, #0
}
   1338c:	0018      	movs	r0, r3
   1338e:	46bd      	mov	sp, r7
   13390:	b004      	add	sp, #16
   13392:	bd80      	pop	{r7, pc}
   13394:	41004400 	.word	0x41004400

00013398 <port_get_group_from_gpio_pin>:
{
   13398:	b580      	push	{r7, lr}
   1339a:	b082      	sub	sp, #8
   1339c:	af00      	add	r7, sp, #0
   1339e:	0002      	movs	r2, r0
   133a0:	1dfb      	adds	r3, r7, #7
   133a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   133a4:	1dfb      	adds	r3, r7, #7
   133a6:	781b      	ldrb	r3, [r3, #0]
   133a8:	0018      	movs	r0, r3
   133aa:	4b03      	ldr	r3, [pc, #12]	; (133b8 <port_get_group_from_gpio_pin+0x20>)
   133ac:	4798      	blx	r3
   133ae:	0003      	movs	r3, r0
}
   133b0:	0018      	movs	r0, r3
   133b2:	46bd      	mov	sp, r7
   133b4:	b002      	add	sp, #8
   133b6:	bd80      	pop	{r7, pc}
   133b8:	00013339 	.word	0x00013339

000133bc <port_pin_set_output_level>:
{
   133bc:	b580      	push	{r7, lr}
   133be:	b084      	sub	sp, #16
   133c0:	af00      	add	r7, sp, #0
   133c2:	0002      	movs	r2, r0
   133c4:	1dfb      	adds	r3, r7, #7
   133c6:	701a      	strb	r2, [r3, #0]
   133c8:	1dbb      	adds	r3, r7, #6
   133ca:	1c0a      	adds	r2, r1, #0
   133cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   133ce:	1dfb      	adds	r3, r7, #7
   133d0:	781b      	ldrb	r3, [r3, #0]
   133d2:	0018      	movs	r0, r3
   133d4:	4b0d      	ldr	r3, [pc, #52]	; (1340c <port_pin_set_output_level+0x50>)
   133d6:	4798      	blx	r3
   133d8:	0003      	movs	r3, r0
   133da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   133dc:	1dfb      	adds	r3, r7, #7
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	221f      	movs	r2, #31
   133e2:	4013      	ands	r3, r2
   133e4:	2201      	movs	r2, #1
   133e6:	409a      	lsls	r2, r3
   133e8:	0013      	movs	r3, r2
   133ea:	60bb      	str	r3, [r7, #8]
	if (level) {
   133ec:	1dbb      	adds	r3, r7, #6
   133ee:	781b      	ldrb	r3, [r3, #0]
   133f0:	2b00      	cmp	r3, #0
   133f2:	d003      	beq.n	133fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   133f4:	68fb      	ldr	r3, [r7, #12]
   133f6:	68ba      	ldr	r2, [r7, #8]
   133f8:	619a      	str	r2, [r3, #24]
}
   133fa:	e002      	b.n	13402 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   133fc:	68fb      	ldr	r3, [r7, #12]
   133fe:	68ba      	ldr	r2, [r7, #8]
   13400:	615a      	str	r2, [r3, #20]
}
   13402:	46c0      	nop			; (mov r8, r8)
   13404:	46bd      	mov	sp, r7
   13406:	b004      	add	sp, #16
   13408:	bd80      	pop	{r7, pc}
   1340a:	46c0      	nop			; (mov r8, r8)
   1340c:	00013399 	.word	0x00013399

00013410 <system_gclk_chan_get_config_defaults>:
{
   13410:	b580      	push	{r7, lr}
   13412:	b082      	sub	sp, #8
   13414:	af00      	add	r7, sp, #0
   13416:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   13418:	687b      	ldr	r3, [r7, #4]
   1341a:	2200      	movs	r2, #0
   1341c:	701a      	strb	r2, [r3, #0]
}
   1341e:	46c0      	nop			; (mov r8, r8)
   13420:	46bd      	mov	sp, r7
   13422:	b002      	add	sp, #8
   13424:	bd80      	pop	{r7, pc}
	...

00013428 <system_apb_clock_set_mask>:
{
   13428:	b580      	push	{r7, lr}
   1342a:	b082      	sub	sp, #8
   1342c:	af00      	add	r7, sp, #0
   1342e:	0002      	movs	r2, r0
   13430:	6039      	str	r1, [r7, #0]
   13432:	1dfb      	adds	r3, r7, #7
   13434:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13436:	1dfb      	adds	r3, r7, #7
   13438:	781b      	ldrb	r3, [r3, #0]
   1343a:	2b01      	cmp	r3, #1
   1343c:	d00a      	beq.n	13454 <system_apb_clock_set_mask+0x2c>
   1343e:	2b02      	cmp	r3, #2
   13440:	d00f      	beq.n	13462 <system_apb_clock_set_mask+0x3a>
   13442:	2b00      	cmp	r3, #0
   13444:	d114      	bne.n	13470 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   13446:	4b0e      	ldr	r3, [pc, #56]	; (13480 <system_apb_clock_set_mask+0x58>)
   13448:	4a0d      	ldr	r2, [pc, #52]	; (13480 <system_apb_clock_set_mask+0x58>)
   1344a:	6991      	ldr	r1, [r2, #24]
   1344c:	683a      	ldr	r2, [r7, #0]
   1344e:	430a      	orrs	r2, r1
   13450:	619a      	str	r2, [r3, #24]
			break;
   13452:	e00f      	b.n	13474 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   13454:	4b0a      	ldr	r3, [pc, #40]	; (13480 <system_apb_clock_set_mask+0x58>)
   13456:	4a0a      	ldr	r2, [pc, #40]	; (13480 <system_apb_clock_set_mask+0x58>)
   13458:	69d1      	ldr	r1, [r2, #28]
   1345a:	683a      	ldr	r2, [r7, #0]
   1345c:	430a      	orrs	r2, r1
   1345e:	61da      	str	r2, [r3, #28]
			break;
   13460:	e008      	b.n	13474 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   13462:	4b07      	ldr	r3, [pc, #28]	; (13480 <system_apb_clock_set_mask+0x58>)
   13464:	4a06      	ldr	r2, [pc, #24]	; (13480 <system_apb_clock_set_mask+0x58>)
   13466:	6a11      	ldr	r1, [r2, #32]
   13468:	683a      	ldr	r2, [r7, #0]
   1346a:	430a      	orrs	r2, r1
   1346c:	621a      	str	r2, [r3, #32]
			break;
   1346e:	e001      	b.n	13474 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   13470:	2317      	movs	r3, #23
   13472:	e000      	b.n	13476 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   13474:	2300      	movs	r3, #0
}
   13476:	0018      	movs	r0, r3
   13478:	46bd      	mov	sp, r7
   1347a:	b002      	add	sp, #8
   1347c:	bd80      	pop	{r7, pc}
   1347e:	46c0      	nop			; (mov r8, r8)
   13480:	40000400 	.word	0x40000400

00013484 <system_is_debugger_present>:
{
   13484:	b580      	push	{r7, lr}
   13486:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   13488:	4b05      	ldr	r3, [pc, #20]	; (134a0 <system_is_debugger_present+0x1c>)
   1348a:	789b      	ldrb	r3, [r3, #2]
   1348c:	b2db      	uxtb	r3, r3
   1348e:	001a      	movs	r2, r3
   13490:	2302      	movs	r3, #2
   13492:	4013      	ands	r3, r2
   13494:	1e5a      	subs	r2, r3, #1
   13496:	4193      	sbcs	r3, r2
   13498:	b2db      	uxtb	r3, r3
}
   1349a:	0018      	movs	r0, r3
   1349c:	46bd      	mov	sp, r7
   1349e:	bd80      	pop	{r7, pc}
   134a0:	41002000 	.word	0x41002000

000134a4 <system_interrupt_enable>:
{
   134a4:	b580      	push	{r7, lr}
   134a6:	b082      	sub	sp, #8
   134a8:	af00      	add	r7, sp, #0
   134aa:	0002      	movs	r2, r0
   134ac:	1dfb      	adds	r3, r7, #7
   134ae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   134b0:	4b06      	ldr	r3, [pc, #24]	; (134cc <system_interrupt_enable+0x28>)
   134b2:	1dfa      	adds	r2, r7, #7
   134b4:	7812      	ldrb	r2, [r2, #0]
   134b6:	0011      	movs	r1, r2
   134b8:	221f      	movs	r2, #31
   134ba:	400a      	ands	r2, r1
   134bc:	2101      	movs	r1, #1
   134be:	4091      	lsls	r1, r2
   134c0:	000a      	movs	r2, r1
   134c2:	601a      	str	r2, [r3, #0]
}
   134c4:	46c0      	nop			; (mov r8, r8)
   134c6:	46bd      	mov	sp, r7
   134c8:	b002      	add	sp, #8
   134ca:	bd80      	pop	{r7, pc}
   134cc:	e000e100 	.word	0xe000e100

000134d0 <system_interrupt_disable>:
{
   134d0:	b580      	push	{r7, lr}
   134d2:	b082      	sub	sp, #8
   134d4:	af00      	add	r7, sp, #0
   134d6:	0002      	movs	r2, r0
   134d8:	1dfb      	adds	r3, r7, #7
   134da:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   134dc:	4a07      	ldr	r2, [pc, #28]	; (134fc <system_interrupt_disable+0x2c>)
   134de:	1dfb      	adds	r3, r7, #7
   134e0:	781b      	ldrb	r3, [r3, #0]
   134e2:	0019      	movs	r1, r3
   134e4:	231f      	movs	r3, #31
   134e6:	400b      	ands	r3, r1
   134e8:	2101      	movs	r1, #1
   134ea:	4099      	lsls	r1, r3
   134ec:	000b      	movs	r3, r1
   134ee:	0019      	movs	r1, r3
   134f0:	2380      	movs	r3, #128	; 0x80
   134f2:	50d1      	str	r1, [r2, r3]
}
   134f4:	46c0      	nop			; (mov r8, r8)
   134f6:	46bd      	mov	sp, r7
   134f8:	b002      	add	sp, #8
   134fa:	bd80      	pop	{r7, pc}
   134fc:	e000e100 	.word	0xe000e100

00013500 <spi_is_syncing>:
{
   13500:	b580      	push	{r7, lr}
   13502:	b084      	sub	sp, #16
   13504:	af00      	add	r7, sp, #0
   13506:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13508:	687b      	ldr	r3, [r7, #4]
   1350a:	681b      	ldr	r3, [r3, #0]
   1350c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1350e:	68fb      	ldr	r3, [r7, #12]
   13510:	69db      	ldr	r3, [r3, #28]
   13512:	1e5a      	subs	r2, r3, #1
   13514:	4193      	sbcs	r3, r2
   13516:	b2db      	uxtb	r3, r3
}
   13518:	0018      	movs	r0, r3
   1351a:	46bd      	mov	sp, r7
   1351c:	b004      	add	sp, #16
   1351e:	bd80      	pop	{r7, pc}

00013520 <spi_enable>:
{
   13520:	b580      	push	{r7, lr}
   13522:	b084      	sub	sp, #16
   13524:	af00      	add	r7, sp, #0
   13526:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13528:	687b      	ldr	r3, [r7, #4]
   1352a:	681b      	ldr	r3, [r3, #0]
   1352c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1352e:	687b      	ldr	r3, [r7, #4]
   13530:	681b      	ldr	r3, [r3, #0]
   13532:	0018      	movs	r0, r3
   13534:	4b0b      	ldr	r3, [pc, #44]	; (13564 <spi_enable+0x44>)
   13536:	4798      	blx	r3
   13538:	0003      	movs	r3, r0
   1353a:	0018      	movs	r0, r3
   1353c:	4b0a      	ldr	r3, [pc, #40]	; (13568 <spi_enable+0x48>)
   1353e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   13540:	46c0      	nop			; (mov r8, r8)
   13542:	687b      	ldr	r3, [r7, #4]
   13544:	0018      	movs	r0, r3
   13546:	4b09      	ldr	r3, [pc, #36]	; (1356c <spi_enable+0x4c>)
   13548:	4798      	blx	r3
   1354a:	1e03      	subs	r3, r0, #0
   1354c:	d1f9      	bne.n	13542 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1354e:	68fb      	ldr	r3, [r7, #12]
   13550:	681b      	ldr	r3, [r3, #0]
   13552:	2202      	movs	r2, #2
   13554:	431a      	orrs	r2, r3
   13556:	68fb      	ldr	r3, [r7, #12]
   13558:	601a      	str	r2, [r3, #0]
}
   1355a:	46c0      	nop			; (mov r8, r8)
   1355c:	46bd      	mov	sp, r7
   1355e:	b004      	add	sp, #16
   13560:	bd80      	pop	{r7, pc}
   13562:	46c0      	nop			; (mov r8, r8)
   13564:	0001323d 	.word	0x0001323d
   13568:	000134a5 	.word	0x000134a5
   1356c:	00013501 	.word	0x00013501

00013570 <spi_disable>:
{
   13570:	b580      	push	{r7, lr}
   13572:	b084      	sub	sp, #16
   13574:	af00      	add	r7, sp, #0
   13576:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13578:	687b      	ldr	r3, [r7, #4]
   1357a:	681b      	ldr	r3, [r3, #0]
   1357c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1357e:	687b      	ldr	r3, [r7, #4]
   13580:	681b      	ldr	r3, [r3, #0]
   13582:	0018      	movs	r0, r3
   13584:	4b0e      	ldr	r3, [pc, #56]	; (135c0 <spi_disable+0x50>)
   13586:	4798      	blx	r3
   13588:	0003      	movs	r3, r0
   1358a:	0018      	movs	r0, r3
   1358c:	4b0d      	ldr	r3, [pc, #52]	; (135c4 <spi_disable+0x54>)
   1358e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   13590:	46c0      	nop			; (mov r8, r8)
   13592:	687b      	ldr	r3, [r7, #4]
   13594:	0018      	movs	r0, r3
   13596:	4b0c      	ldr	r3, [pc, #48]	; (135c8 <spi_disable+0x58>)
   13598:	4798      	blx	r3
   1359a:	1e03      	subs	r3, r0, #0
   1359c:	d1f9      	bne.n	13592 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1359e:	68fb      	ldr	r3, [r7, #12]
   135a0:	228f      	movs	r2, #143	; 0x8f
   135a2:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   135a4:	68fb      	ldr	r3, [r7, #12]
   135a6:	228f      	movs	r2, #143	; 0x8f
   135a8:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   135aa:	68fb      	ldr	r3, [r7, #12]
   135ac:	681b      	ldr	r3, [r3, #0]
   135ae:	2202      	movs	r2, #2
   135b0:	4393      	bics	r3, r2
   135b2:	001a      	movs	r2, r3
   135b4:	68fb      	ldr	r3, [r7, #12]
   135b6:	601a      	str	r2, [r3, #0]
}
   135b8:	46c0      	nop			; (mov r8, r8)
   135ba:	46bd      	mov	sp, r7
   135bc:	b004      	add	sp, #16
   135be:	bd80      	pop	{r7, pc}
   135c0:	0001323d 	.word	0x0001323d
   135c4:	000134d1 	.word	0x000134d1
   135c8:	00013501 	.word	0x00013501

000135cc <spi_is_write_complete>:
{
   135cc:	b580      	push	{r7, lr}
   135ce:	b084      	sub	sp, #16
   135d0:	af00      	add	r7, sp, #0
   135d2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   135d4:	687b      	ldr	r3, [r7, #4]
   135d6:	681b      	ldr	r3, [r3, #0]
   135d8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   135da:	68fb      	ldr	r3, [r7, #12]
   135dc:	7e1b      	ldrb	r3, [r3, #24]
   135de:	b2db      	uxtb	r3, r3
   135e0:	001a      	movs	r2, r3
   135e2:	2302      	movs	r3, #2
   135e4:	4013      	ands	r3, r2
   135e6:	1e5a      	subs	r2, r3, #1
   135e8:	4193      	sbcs	r3, r2
   135ea:	b2db      	uxtb	r3, r3
}
   135ec:	0018      	movs	r0, r3
   135ee:	46bd      	mov	sp, r7
   135f0:	b004      	add	sp, #16
   135f2:	bd80      	pop	{r7, pc}

000135f4 <spi_is_ready_to_write>:
{
   135f4:	b580      	push	{r7, lr}
   135f6:	b084      	sub	sp, #16
   135f8:	af00      	add	r7, sp, #0
   135fa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   135fc:	687b      	ldr	r3, [r7, #4]
   135fe:	681b      	ldr	r3, [r3, #0]
   13600:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   13602:	68fb      	ldr	r3, [r7, #12]
   13604:	7e1b      	ldrb	r3, [r3, #24]
   13606:	b2db      	uxtb	r3, r3
   13608:	001a      	movs	r2, r3
   1360a:	2301      	movs	r3, #1
   1360c:	4013      	ands	r3, r2
   1360e:	1e5a      	subs	r2, r3, #1
   13610:	4193      	sbcs	r3, r2
   13612:	b2db      	uxtb	r3, r3
}
   13614:	0018      	movs	r0, r3
   13616:	46bd      	mov	sp, r7
   13618:	b004      	add	sp, #16
   1361a:	bd80      	pop	{r7, pc}

0001361c <spi_is_ready_to_read>:
{
   1361c:	b580      	push	{r7, lr}
   1361e:	b084      	sub	sp, #16
   13620:	af00      	add	r7, sp, #0
   13622:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13624:	687b      	ldr	r3, [r7, #4]
   13626:	681b      	ldr	r3, [r3, #0]
   13628:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1362a:	68fb      	ldr	r3, [r7, #12]
   1362c:	7e1b      	ldrb	r3, [r3, #24]
   1362e:	b2db      	uxtb	r3, r3
   13630:	001a      	movs	r2, r3
   13632:	2304      	movs	r3, #4
   13634:	4013      	ands	r3, r2
   13636:	1e5a      	subs	r2, r3, #1
   13638:	4193      	sbcs	r3, r2
   1363a:	b2db      	uxtb	r3, r3
}
   1363c:	0018      	movs	r0, r3
   1363e:	46bd      	mov	sp, r7
   13640:	b004      	add	sp, #16
   13642:	bd80      	pop	{r7, pc}

00013644 <spi_write>:
{
   13644:	b580      	push	{r7, lr}
   13646:	b084      	sub	sp, #16
   13648:	af00      	add	r7, sp, #0
   1364a:	6078      	str	r0, [r7, #4]
   1364c:	000a      	movs	r2, r1
   1364e:	1cbb      	adds	r3, r7, #2
   13650:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13652:	687b      	ldr	r3, [r7, #4]
   13654:	681b      	ldr	r3, [r3, #0]
   13656:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   13658:	687b      	ldr	r3, [r7, #4]
   1365a:	0018      	movs	r0, r3
   1365c:	4b0a      	ldr	r3, [pc, #40]	; (13688 <spi_write+0x44>)
   1365e:	4798      	blx	r3
   13660:	0003      	movs	r3, r0
   13662:	001a      	movs	r2, r3
   13664:	2301      	movs	r3, #1
   13666:	4053      	eors	r3, r2
   13668:	b2db      	uxtb	r3, r3
   1366a:	2b00      	cmp	r3, #0
   1366c:	d001      	beq.n	13672 <spi_write+0x2e>
		return STATUS_BUSY;
   1366e:	2305      	movs	r3, #5
   13670:	e006      	b.n	13680 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   13672:	1cbb      	adds	r3, r7, #2
   13674:	881b      	ldrh	r3, [r3, #0]
   13676:	05db      	lsls	r3, r3, #23
   13678:	0dda      	lsrs	r2, r3, #23
   1367a:	68fb      	ldr	r3, [r7, #12]
   1367c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   1367e:	2300      	movs	r3, #0
}
   13680:	0018      	movs	r0, r3
   13682:	46bd      	mov	sp, r7
   13684:	b004      	add	sp, #16
   13686:	bd80      	pop	{r7, pc}
   13688:	000135f5 	.word	0x000135f5

0001368c <spi_read>:
{
   1368c:	b580      	push	{r7, lr}
   1368e:	b084      	sub	sp, #16
   13690:	af00      	add	r7, sp, #0
   13692:	6078      	str	r0, [r7, #4]
   13694:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   13696:	687b      	ldr	r3, [r7, #4]
   13698:	681b      	ldr	r3, [r3, #0]
   1369a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   1369c:	687b      	ldr	r3, [r7, #4]
   1369e:	0018      	movs	r0, r3
   136a0:	4b1b      	ldr	r3, [pc, #108]	; (13710 <spi_read+0x84>)
   136a2:	4798      	blx	r3
   136a4:	0003      	movs	r3, r0
   136a6:	001a      	movs	r2, r3
   136a8:	2301      	movs	r3, #1
   136aa:	4053      	eors	r3, r2
   136ac:	b2db      	uxtb	r3, r3
   136ae:	2b00      	cmp	r3, #0
   136b0:	d001      	beq.n	136b6 <spi_read+0x2a>
		return STATUS_ERR_IO;
   136b2:	2310      	movs	r3, #16
   136b4:	e027      	b.n	13706 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   136b6:	230f      	movs	r3, #15
   136b8:	18fb      	adds	r3, r7, r3
   136ba:	2200      	movs	r2, #0
   136bc:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   136be:	68bb      	ldr	r3, [r7, #8]
   136c0:	8b5b      	ldrh	r3, [r3, #26]
   136c2:	b29b      	uxth	r3, r3
   136c4:	001a      	movs	r2, r3
   136c6:	2304      	movs	r3, #4
   136c8:	4013      	ands	r3, r2
   136ca:	d006      	beq.n	136da <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   136cc:	230f      	movs	r3, #15
   136ce:	18fb      	adds	r3, r7, r3
   136d0:	221e      	movs	r2, #30
   136d2:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   136d4:	68bb      	ldr	r3, [r7, #8]
   136d6:	2204      	movs	r2, #4
   136d8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   136da:	687b      	ldr	r3, [r7, #4]
   136dc:	799b      	ldrb	r3, [r3, #6]
   136de:	2b01      	cmp	r3, #1
   136e0:	d108      	bne.n	136f4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   136e2:	68bb      	ldr	r3, [r7, #8]
   136e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136e6:	b29b      	uxth	r3, r3
   136e8:	05db      	lsls	r3, r3, #23
   136ea:	0ddb      	lsrs	r3, r3, #23
   136ec:	b29a      	uxth	r2, r3
   136ee:	683b      	ldr	r3, [r7, #0]
   136f0:	801a      	strh	r2, [r3, #0]
   136f2:	e005      	b.n	13700 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   136f4:	68bb      	ldr	r3, [r7, #8]
   136f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136f8:	b2db      	uxtb	r3, r3
   136fa:	b29a      	uxth	r2, r3
   136fc:	683b      	ldr	r3, [r7, #0]
   136fe:	801a      	strh	r2, [r3, #0]
	return retval;
   13700:	230f      	movs	r3, #15
   13702:	18fb      	adds	r3, r7, r3
   13704:	781b      	ldrb	r3, [r3, #0]
}
   13706:	0018      	movs	r0, r3
   13708:	46bd      	mov	sp, r7
   1370a:	b004      	add	sp, #16
   1370c:	bd80      	pop	{r7, pc}
   1370e:	46c0      	nop			; (mov r8, r8)
   13710:	0001361d 	.word	0x0001361d

00013714 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   13714:	b590      	push	{r4, r7, lr}
   13716:	b089      	sub	sp, #36	; 0x24
   13718:	af00      	add	r7, sp, #0
   1371a:	6078      	str	r0, [r7, #4]
   1371c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   1371e:	230c      	movs	r3, #12
   13720:	18fb      	adds	r3, r7, r3
   13722:	2200      	movs	r2, #0
   13724:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   13726:	687b      	ldr	r3, [r7, #4]
   13728:	681b      	ldr	r3, [r3, #0]
   1372a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   1372c:	687b      	ldr	r3, [r7, #4]
   1372e:	0018      	movs	r0, r3
   13730:	4b24      	ldr	r3, [pc, #144]	; (137c4 <spi_set_baudrate+0xb0>)
   13732:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   13734:	46c0      	nop			; (mov r8, r8)
   13736:	687b      	ldr	r3, [r7, #4]
   13738:	0018      	movs	r0, r3
   1373a:	4b23      	ldr	r3, [pc, #140]	; (137c8 <spi_set_baudrate+0xb4>)
   1373c:	4798      	blx	r3
   1373e:	1e03      	subs	r3, r0, #0
   13740:	d1f9      	bne.n	13736 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13742:	687b      	ldr	r3, [r7, #4]
   13744:	681b      	ldr	r3, [r3, #0]
   13746:	0018      	movs	r0, r3
   13748:	4b20      	ldr	r3, [pc, #128]	; (137cc <spi_set_baudrate+0xb8>)
   1374a:	4798      	blx	r3
   1374c:	0003      	movs	r3, r0
   1374e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13750:	69bb      	ldr	r3, [r7, #24]
   13752:	3314      	adds	r3, #20
   13754:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	b2db      	uxtb	r3, r3
   1375a:	0018      	movs	r0, r3
   1375c:	4b1c      	ldr	r3, [pc, #112]	; (137d0 <spi_set_baudrate+0xbc>)
   1375e:	4798      	blx	r3
   13760:	0003      	movs	r3, r0
   13762:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   13764:	230f      	movs	r3, #15
   13766:	18fc      	adds	r4, r7, r3
   13768:	230c      	movs	r3, #12
   1376a:	18fa      	adds	r2, r7, r3
   1376c:	6939      	ldr	r1, [r7, #16]
   1376e:	683b      	ldr	r3, [r7, #0]
   13770:	0018      	movs	r0, r3
   13772:	4b18      	ldr	r3, [pc, #96]	; (137d4 <spi_set_baudrate+0xc0>)
   13774:	4798      	blx	r3
   13776:	0003      	movs	r3, r0
   13778:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   1377a:	230f      	movs	r3, #15
   1377c:	18fb      	adds	r3, r7, r3
   1377e:	781b      	ldrb	r3, [r3, #0]
   13780:	2b00      	cmp	r3, #0
   13782:	d001      	beq.n	13788 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   13784:	2317      	movs	r3, #23
   13786:	e018      	b.n	137ba <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   13788:	230c      	movs	r3, #12
   1378a:	18fb      	adds	r3, r7, r3
   1378c:	881b      	ldrh	r3, [r3, #0]
   1378e:	b2da      	uxtb	r2, r3
   13790:	69fb      	ldr	r3, [r7, #28]
   13792:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   13794:	46c0      	nop			; (mov r8, r8)
   13796:	687b      	ldr	r3, [r7, #4]
   13798:	0018      	movs	r0, r3
   1379a:	4b0b      	ldr	r3, [pc, #44]	; (137c8 <spi_set_baudrate+0xb4>)
   1379c:	4798      	blx	r3
   1379e:	1e03      	subs	r3, r0, #0
   137a0:	d1f9      	bne.n	13796 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   137a2:	687b      	ldr	r3, [r7, #4]
   137a4:	0018      	movs	r0, r3
   137a6:	4b0c      	ldr	r3, [pc, #48]	; (137d8 <spi_set_baudrate+0xc4>)
   137a8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   137aa:	46c0      	nop			; (mov r8, r8)
   137ac:	687b      	ldr	r3, [r7, #4]
   137ae:	0018      	movs	r0, r3
   137b0:	4b05      	ldr	r3, [pc, #20]	; (137c8 <spi_set_baudrate+0xb4>)
   137b2:	4798      	blx	r3
   137b4:	1e03      	subs	r3, r0, #0
   137b6:	d1f9      	bne.n	137ac <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   137b8:	2300      	movs	r3, #0
}
   137ba:	0018      	movs	r0, r3
   137bc:	46bd      	mov	sp, r7
   137be:	b009      	add	sp, #36	; 0x24
   137c0:	bd90      	pop	{r4, r7, pc}
   137c2:	46c0      	nop			; (mov r8, r8)
   137c4:	00013571 	.word	0x00013571
   137c8:	00013501 	.word	0x00013501
   137cc:	0001316d 	.word	0x0001316d
   137d0:	00015b21 	.word	0x00015b21
   137d4:	00012ce7 	.word	0x00012ce7
   137d8:	00013521 	.word	0x00013521

000137dc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   137dc:	b590      	push	{r4, r7, lr}
   137de:	b093      	sub	sp, #76	; 0x4c
   137e0:	af00      	add	r7, sp, #0
   137e2:	6078      	str	r0, [r7, #4]
   137e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   137e6:	687b      	ldr	r3, [r7, #4]
   137e8:	681b      	ldr	r3, [r3, #0]
   137ea:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   137ec:	687b      	ldr	r3, [r7, #4]
   137ee:	681b      	ldr	r3, [r3, #0]
   137f0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   137f2:	231c      	movs	r3, #28
   137f4:	18fb      	adds	r3, r7, r3
   137f6:	0018      	movs	r0, r3
   137f8:	4b75      	ldr	r3, [pc, #468]	; (139d0 <_spi_set_config+0x1f4>)
   137fa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   137fc:	231c      	movs	r3, #28
   137fe:	18fb      	adds	r3, r7, r3
   13800:	2200      	movs	r2, #0
   13802:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   13804:	683b      	ldr	r3, [r7, #0]
   13806:	781b      	ldrb	r3, [r3, #0]
   13808:	2b00      	cmp	r3, #0
   1380a:	d103      	bne.n	13814 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   1380c:	231c      	movs	r3, #28
   1380e:	18fb      	adds	r3, r7, r3
   13810:	2200      	movs	r2, #0
   13812:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   13814:	683b      	ldr	r3, [r7, #0]
   13816:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   13818:	230c      	movs	r3, #12
   1381a:	18fb      	adds	r3, r7, r3
   1381c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   1381e:	683b      	ldr	r3, [r7, #0]
   13820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   13822:	230c      	movs	r3, #12
   13824:	18fb      	adds	r3, r7, r3
   13826:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   13828:	683b      	ldr	r3, [r7, #0]
   1382a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   1382c:	230c      	movs	r3, #12
   1382e:	18fb      	adds	r3, r7, r3
   13830:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   13832:	683b      	ldr	r3, [r7, #0]
   13834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   13836:	230c      	movs	r3, #12
   13838:	18fb      	adds	r3, r7, r3
   1383a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   1383c:	2347      	movs	r3, #71	; 0x47
   1383e:	18fb      	adds	r3, r7, r3
   13840:	2200      	movs	r2, #0
   13842:	701a      	strb	r2, [r3, #0]
   13844:	e02c      	b.n	138a0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   13846:	2347      	movs	r3, #71	; 0x47
   13848:	18fb      	adds	r3, r7, r3
   1384a:	781a      	ldrb	r2, [r3, #0]
   1384c:	230c      	movs	r3, #12
   1384e:	18fb      	adds	r3, r7, r3
   13850:	0092      	lsls	r2, r2, #2
   13852:	58d3      	ldr	r3, [r2, r3]
   13854:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   13856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13858:	2b00      	cmp	r3, #0
   1385a:	d109      	bne.n	13870 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1385c:	2347      	movs	r3, #71	; 0x47
   1385e:	18fb      	adds	r3, r7, r3
   13860:	781a      	ldrb	r2, [r3, #0]
   13862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13864:	0011      	movs	r1, r2
   13866:	0018      	movs	r0, r3
   13868:	4b5a      	ldr	r3, [pc, #360]	; (139d4 <_spi_set_config+0x1f8>)
   1386a:	4798      	blx	r3
   1386c:	0003      	movs	r3, r0
   1386e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   13870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13872:	3301      	adds	r3, #1
   13874:	d00d      	beq.n	13892 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   13876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13878:	b2da      	uxtb	r2, r3
   1387a:	231c      	movs	r3, #28
   1387c:	18fb      	adds	r3, r7, r3
   1387e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   13880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13882:	0c1b      	lsrs	r3, r3, #16
   13884:	b2db      	uxtb	r3, r3
   13886:	221c      	movs	r2, #28
   13888:	18ba      	adds	r2, r7, r2
   1388a:	0011      	movs	r1, r2
   1388c:	0018      	movs	r0, r3
   1388e:	4b52      	ldr	r3, [pc, #328]	; (139d8 <_spi_set_config+0x1fc>)
   13890:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   13892:	2347      	movs	r3, #71	; 0x47
   13894:	18fb      	adds	r3, r7, r3
   13896:	781a      	ldrb	r2, [r3, #0]
   13898:	2347      	movs	r3, #71	; 0x47
   1389a:	18fb      	adds	r3, r7, r3
   1389c:	3201      	adds	r2, #1
   1389e:	701a      	strb	r2, [r3, #0]
   138a0:	2347      	movs	r3, #71	; 0x47
   138a2:	18fb      	adds	r3, r7, r3
   138a4:	781b      	ldrb	r3, [r3, #0]
   138a6:	2b03      	cmp	r3, #3
   138a8:	d9cd      	bls.n	13846 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   138aa:	683b      	ldr	r3, [r7, #0]
   138ac:	781a      	ldrb	r2, [r3, #0]
   138ae:	687b      	ldr	r3, [r7, #4]
   138b0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   138b2:	683b      	ldr	r3, [r7, #0]
   138b4:	7c1a      	ldrb	r2, [r3, #16]
   138b6:	687b      	ldr	r3, [r7, #4]
   138b8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   138ba:	683b      	ldr	r3, [r7, #0]
   138bc:	7c9a      	ldrb	r2, [r3, #18]
   138be:	687b      	ldr	r3, [r7, #4]
   138c0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   138c2:	683b      	ldr	r3, [r7, #0]
   138c4:	7d1a      	ldrb	r2, [r3, #20]
   138c6:	687b      	ldr	r3, [r7, #4]
   138c8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   138ca:	230a      	movs	r3, #10
   138cc:	18fb      	adds	r3, r7, r3
   138ce:	2200      	movs	r2, #0
   138d0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   138d2:	2300      	movs	r3, #0
   138d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   138d6:	2300      	movs	r3, #0
   138d8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   138da:	683b      	ldr	r3, [r7, #0]
   138dc:	781b      	ldrb	r3, [r3, #0]
   138de:	2b01      	cmp	r3, #1
   138e0:	d129      	bne.n	13936 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   138e2:	687b      	ldr	r3, [r7, #4]
   138e4:	681b      	ldr	r3, [r3, #0]
   138e6:	0018      	movs	r0, r3
   138e8:	4b3c      	ldr	r3, [pc, #240]	; (139dc <_spi_set_config+0x200>)
   138ea:	4798      	blx	r3
   138ec:	0003      	movs	r3, r0
   138ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   138f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   138f2:	3314      	adds	r3, #20
   138f4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   138f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138f8:	b2db      	uxtb	r3, r3
   138fa:	0018      	movs	r0, r3
   138fc:	4b38      	ldr	r3, [pc, #224]	; (139e0 <_spi_set_config+0x204>)
   138fe:	4798      	blx	r3
   13900:	0003      	movs	r3, r0
   13902:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   13904:	683b      	ldr	r3, [r7, #0]
   13906:	699b      	ldr	r3, [r3, #24]
   13908:	2223      	movs	r2, #35	; 0x23
   1390a:	18bc      	adds	r4, r7, r2
   1390c:	220a      	movs	r2, #10
   1390e:	18ba      	adds	r2, r7, r2
   13910:	6a79      	ldr	r1, [r7, #36]	; 0x24
   13912:	0018      	movs	r0, r3
   13914:	4b33      	ldr	r3, [pc, #204]	; (139e4 <_spi_set_config+0x208>)
   13916:	4798      	blx	r3
   13918:	0003      	movs	r3, r0
   1391a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   1391c:	2323      	movs	r3, #35	; 0x23
   1391e:	18fb      	adds	r3, r7, r3
   13920:	781b      	ldrb	r3, [r3, #0]
   13922:	2b00      	cmp	r3, #0
   13924:	d001      	beq.n	1392a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   13926:	2317      	movs	r3, #23
   13928:	e04e      	b.n	139c8 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   1392a:	230a      	movs	r3, #10
   1392c:	18fb      	adds	r3, r7, r3
   1392e:	881b      	ldrh	r3, [r3, #0]
   13930:	b2da      	uxtb	r2, r3
   13932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13934:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   13936:	683b      	ldr	r3, [r7, #0]
   13938:	685b      	ldr	r3, [r3, #4]
   1393a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1393c:	4313      	orrs	r3, r2
   1393e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   13940:	683b      	ldr	r3, [r7, #0]
   13942:	689b      	ldr	r3, [r3, #8]
   13944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13946:	4313      	orrs	r3, r2
   13948:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   1394a:	683b      	ldr	r3, [r7, #0]
   1394c:	68db      	ldr	r3, [r3, #12]
   1394e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13950:	4313      	orrs	r3, r2
   13952:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   13954:	683b      	ldr	r3, [r7, #0]
   13956:	7c1b      	ldrb	r3, [r3, #16]
   13958:	001a      	movs	r2, r3
   1395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1395c:	4313      	orrs	r3, r2
   1395e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   13960:	683b      	ldr	r3, [r7, #0]
   13962:	7c5b      	ldrb	r3, [r3, #17]
   13964:	2b00      	cmp	r3, #0
   13966:	d103      	bne.n	13970 <_spi_set_config+0x194>
   13968:	4b1f      	ldr	r3, [pc, #124]	; (139e8 <_spi_set_config+0x20c>)
   1396a:	4798      	blx	r3
   1396c:	1e03      	subs	r3, r0, #0
   1396e:	d003      	beq.n	13978 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   13970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13972:	2280      	movs	r2, #128	; 0x80
   13974:	4313      	orrs	r3, r2
   13976:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   13978:	683b      	ldr	r3, [r7, #0]
   1397a:	7c9b      	ldrb	r3, [r3, #18]
   1397c:	2b00      	cmp	r3, #0
   1397e:	d004      	beq.n	1398a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   13980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13982:	2280      	movs	r2, #128	; 0x80
   13984:	0292      	lsls	r2, r2, #10
   13986:	4313      	orrs	r3, r2
   13988:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   1398a:	683b      	ldr	r3, [r7, #0]
   1398c:	7cdb      	ldrb	r3, [r3, #19]
   1398e:	2b00      	cmp	r3, #0
   13990:	d004      	beq.n	1399c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   13992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13994:	2280      	movs	r2, #128	; 0x80
   13996:	0092      	lsls	r2, r2, #2
   13998:	4313      	orrs	r3, r2
   1399a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   1399c:	683b      	ldr	r3, [r7, #0]
   1399e:	7d1b      	ldrb	r3, [r3, #20]
   139a0:	2b00      	cmp	r3, #0
   139a2:	d004      	beq.n	139ae <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   139a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   139a6:	2280      	movs	r2, #128	; 0x80
   139a8:	0192      	lsls	r2, r2, #6
   139aa:	4313      	orrs	r3, r2
   139ac:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   139ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   139b0:	681a      	ldr	r2, [r3, #0]
   139b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   139b4:	431a      	orrs	r2, r3
   139b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   139b8:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   139ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   139bc:	685a      	ldr	r2, [r3, #4]
   139be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   139c0:	431a      	orrs	r2, r3
   139c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   139c4:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   139c6:	2300      	movs	r3, #0
}
   139c8:	0018      	movs	r0, r3
   139ca:	46bd      	mov	sp, r7
   139cc:	b013      	add	sp, #76	; 0x4c
   139ce:	bd90      	pop	{r4, r7, pc}
   139d0:	00013311 	.word	0x00013311
   139d4:	00012fb1 	.word	0x00012fb1
   139d8:	00015d5d 	.word	0x00015d5d
   139dc:	0001316d 	.word	0x0001316d
   139e0:	00015b21 	.word	0x00015b21
   139e4:	00012ce7 	.word	0x00012ce7
   139e8:	00013485 	.word	0x00013485

000139ec <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   139ec:	b590      	push	{r4, r7, lr}
   139ee:	b08b      	sub	sp, #44	; 0x2c
   139f0:	af00      	add	r7, sp, #0
   139f2:	60f8      	str	r0, [r7, #12]
   139f4:	60b9      	str	r1, [r7, #8]
   139f6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   139f8:	68fb      	ldr	r3, [r7, #12]
   139fa:	68ba      	ldr	r2, [r7, #8]
   139fc:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   139fe:	68fb      	ldr	r3, [r7, #12]
   13a00:	681b      	ldr	r3, [r3, #0]
   13a02:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   13a04:	6a3b      	ldr	r3, [r7, #32]
   13a06:	681b      	ldr	r3, [r3, #0]
   13a08:	2202      	movs	r2, #2
   13a0a:	4013      	ands	r3, r2
   13a0c:	d001      	beq.n	13a12 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   13a0e:	231c      	movs	r3, #28
   13a10:	e09c      	b.n	13b4c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   13a12:	6a3b      	ldr	r3, [r7, #32]
   13a14:	681b      	ldr	r3, [r3, #0]
   13a16:	2201      	movs	r2, #1
   13a18:	4013      	ands	r3, r2
   13a1a:	d001      	beq.n	13a20 <spi_init+0x34>
		return STATUS_BUSY;
   13a1c:	2305      	movs	r3, #5
   13a1e:	e095      	b.n	13b4c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13a20:	68fb      	ldr	r3, [r7, #12]
   13a22:	681b      	ldr	r3, [r3, #0]
   13a24:	0018      	movs	r0, r3
   13a26:	4b4b      	ldr	r3, [pc, #300]	; (13b54 <spi_init+0x168>)
   13a28:	4798      	blx	r3
   13a2a:	0003      	movs	r3, r0
   13a2c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   13a2e:	69fb      	ldr	r3, [r7, #28]
   13a30:	3302      	adds	r3, #2
   13a32:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13a34:	69fb      	ldr	r3, [r7, #28]
   13a36:	3314      	adds	r3, #20
   13a38:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   13a3a:	2201      	movs	r2, #1
   13a3c:	69bb      	ldr	r3, [r7, #24]
   13a3e:	409a      	lsls	r2, r3
   13a40:	0013      	movs	r3, r2
   13a42:	0019      	movs	r1, r3
   13a44:	2002      	movs	r0, #2
   13a46:	4b44      	ldr	r3, [pc, #272]	; (13b58 <spi_init+0x16c>)
   13a48:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13a4a:	2310      	movs	r3, #16
   13a4c:	18fb      	adds	r3, r7, r3
   13a4e:	0018      	movs	r0, r3
   13a50:	4b42      	ldr	r3, [pc, #264]	; (13b5c <spi_init+0x170>)
   13a52:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   13a54:	687b      	ldr	r3, [r7, #4]
   13a56:	2224      	movs	r2, #36	; 0x24
   13a58:	5c9a      	ldrb	r2, [r3, r2]
   13a5a:	2310      	movs	r3, #16
   13a5c:	18fb      	adds	r3, r7, r3
   13a5e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   13a60:	697b      	ldr	r3, [r7, #20]
   13a62:	b2db      	uxtb	r3, r3
   13a64:	2210      	movs	r2, #16
   13a66:	18ba      	adds	r2, r7, r2
   13a68:	0011      	movs	r1, r2
   13a6a:	0018      	movs	r0, r3
   13a6c:	4b3c      	ldr	r3, [pc, #240]	; (13b60 <spi_init+0x174>)
   13a6e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   13a70:	697b      	ldr	r3, [r7, #20]
   13a72:	b2db      	uxtb	r3, r3
   13a74:	0018      	movs	r0, r3
   13a76:	4b3b      	ldr	r3, [pc, #236]	; (13b64 <spi_init+0x178>)
   13a78:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   13a7a:	687b      	ldr	r3, [r7, #4]
   13a7c:	2224      	movs	r2, #36	; 0x24
   13a7e:	5c9b      	ldrb	r3, [r3, r2]
   13a80:	2100      	movs	r1, #0
   13a82:	0018      	movs	r0, r3
   13a84:	4b38      	ldr	r3, [pc, #224]	; (13b68 <spi_init+0x17c>)
   13a86:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   13a88:	687b      	ldr	r3, [r7, #4]
   13a8a:	781b      	ldrb	r3, [r3, #0]
   13a8c:	2b01      	cmp	r3, #1
   13a8e:	d105      	bne.n	13a9c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   13a90:	6a3b      	ldr	r3, [r7, #32]
   13a92:	681b      	ldr	r3, [r3, #0]
   13a94:	220c      	movs	r2, #12
   13a96:	431a      	orrs	r2, r3
   13a98:	6a3b      	ldr	r3, [r7, #32]
   13a9a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   13a9c:	2327      	movs	r3, #39	; 0x27
   13a9e:	18fb      	adds	r3, r7, r3
   13aa0:	2200      	movs	r2, #0
   13aa2:	701a      	strb	r2, [r3, #0]
   13aa4:	e010      	b.n	13ac8 <spi_init+0xdc>
		module->callback[i]        = NULL;
   13aa6:	2327      	movs	r3, #39	; 0x27
   13aa8:	18fb      	adds	r3, r7, r3
   13aaa:	781b      	ldrb	r3, [r3, #0]
   13aac:	68fa      	ldr	r2, [r7, #12]
   13aae:	3302      	adds	r3, #2
   13ab0:	009b      	lsls	r3, r3, #2
   13ab2:	18d3      	adds	r3, r2, r3
   13ab4:	3304      	adds	r3, #4
   13ab6:	2200      	movs	r2, #0
   13ab8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   13aba:	2327      	movs	r3, #39	; 0x27
   13abc:	18fb      	adds	r3, r7, r3
   13abe:	781a      	ldrb	r2, [r3, #0]
   13ac0:	2327      	movs	r3, #39	; 0x27
   13ac2:	18fb      	adds	r3, r7, r3
   13ac4:	3201      	adds	r2, #1
   13ac6:	701a      	strb	r2, [r3, #0]
   13ac8:	2327      	movs	r3, #39	; 0x27
   13aca:	18fb      	adds	r3, r7, r3
   13acc:	781b      	ldrb	r3, [r3, #0]
   13ace:	2b06      	cmp	r3, #6
   13ad0:	d9e9      	bls.n	13aa6 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   13ad2:	68fb      	ldr	r3, [r7, #12]
   13ad4:	2200      	movs	r2, #0
   13ad6:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   13ad8:	68fb      	ldr	r3, [r7, #12]
   13ada:	2200      	movs	r2, #0
   13adc:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   13ade:	68fb      	ldr	r3, [r7, #12]
   13ae0:	2200      	movs	r2, #0
   13ae2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   13ae4:	68fb      	ldr	r3, [r7, #12]
   13ae6:	2200      	movs	r2, #0
   13ae8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   13aea:	68fb      	ldr	r3, [r7, #12]
   13aec:	2236      	movs	r2, #54	; 0x36
   13aee:	2100      	movs	r1, #0
   13af0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   13af2:	68fb      	ldr	r3, [r7, #12]
   13af4:	2237      	movs	r2, #55	; 0x37
   13af6:	2100      	movs	r1, #0
   13af8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   13afa:	68fb      	ldr	r3, [r7, #12]
   13afc:	2238      	movs	r2, #56	; 0x38
   13afe:	2100      	movs	r1, #0
   13b00:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   13b02:	68fb      	ldr	r3, [r7, #12]
   13b04:	2203      	movs	r2, #3
   13b06:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   13b08:	68fb      	ldr	r3, [r7, #12]
   13b0a:	2200      	movs	r2, #0
   13b0c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   13b0e:	68fb      	ldr	r3, [r7, #12]
   13b10:	681b      	ldr	r3, [r3, #0]
   13b12:	2213      	movs	r2, #19
   13b14:	18bc      	adds	r4, r7, r2
   13b16:	0018      	movs	r0, r3
   13b18:	4b0e      	ldr	r3, [pc, #56]	; (13b54 <spi_init+0x168>)
   13b1a:	4798      	blx	r3
   13b1c:	0003      	movs	r3, r0
   13b1e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   13b20:	4a12      	ldr	r2, [pc, #72]	; (13b6c <spi_init+0x180>)
   13b22:	2313      	movs	r3, #19
   13b24:	18fb      	adds	r3, r7, r3
   13b26:	781b      	ldrb	r3, [r3, #0]
   13b28:	0011      	movs	r1, r2
   13b2a:	0018      	movs	r0, r3
   13b2c:	4b10      	ldr	r3, [pc, #64]	; (13b70 <spi_init+0x184>)
   13b2e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   13b30:	2313      	movs	r3, #19
   13b32:	18fb      	adds	r3, r7, r3
   13b34:	781a      	ldrb	r2, [r3, #0]
   13b36:	4b0f      	ldr	r3, [pc, #60]	; (13b74 <spi_init+0x188>)
   13b38:	0092      	lsls	r2, r2, #2
   13b3a:	68f9      	ldr	r1, [r7, #12]
   13b3c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   13b3e:	687a      	ldr	r2, [r7, #4]
   13b40:	68fb      	ldr	r3, [r7, #12]
   13b42:	0011      	movs	r1, r2
   13b44:	0018      	movs	r0, r3
   13b46:	4b0c      	ldr	r3, [pc, #48]	; (13b78 <spi_init+0x18c>)
   13b48:	4798      	blx	r3
   13b4a:	0003      	movs	r3, r0
}
   13b4c:	0018      	movs	r0, r3
   13b4e:	46bd      	mov	sp, r7
   13b50:	b00b      	add	sp, #44	; 0x2c
   13b52:	bd90      	pop	{r4, r7, pc}
   13b54:	0001316d 	.word	0x0001316d
   13b58:	00013429 	.word	0x00013429
   13b5c:	00013411 	.word	0x00013411
   13b60:	000159fd 	.word	0x000159fd
   13b64:	00015a41 	.word	0x00015a41
   13b68:	00012f25 	.word	0x00012f25
   13b6c:	00014045 	.word	0x00014045
   13b70:	000131d1 	.word	0x000131d1
   13b74:	20005588 	.word	0x20005588
   13b78:	000137dd 	.word	0x000137dd

00013b7c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   13b7c:	b590      	push	{r4, r7, lr}
   13b7e:	b087      	sub	sp, #28
   13b80:	af00      	add	r7, sp, #0
   13b82:	60f8      	str	r0, [r7, #12]
   13b84:	60b9      	str	r1, [r7, #8]
   13b86:	0019      	movs	r1, r3
   13b88:	1dbb      	adds	r3, r7, #6
   13b8a:	801a      	strh	r2, [r3, #0]
   13b8c:	1d3b      	adds	r3, r7, #4
   13b8e:	1c0a      	adds	r2, r1, #0
   13b90:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   13b92:	68fb      	ldr	r3, [r7, #12]
   13b94:	2238      	movs	r2, #56	; 0x38
   13b96:	5c9b      	ldrb	r3, [r3, r2]
   13b98:	b2db      	uxtb	r3, r3
   13b9a:	2b05      	cmp	r3, #5
   13b9c:	d101      	bne.n	13ba2 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   13b9e:	2305      	movs	r3, #5
   13ba0:	e07a      	b.n	13c98 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   13ba2:	1dbb      	adds	r3, r7, #6
   13ba4:	881b      	ldrh	r3, [r3, #0]
   13ba6:	2b00      	cmp	r3, #0
   13ba8:	d101      	bne.n	13bae <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   13baa:	2317      	movs	r3, #23
   13bac:	e074      	b.n	13c98 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   13bae:	68fb      	ldr	r3, [r7, #12]
   13bb0:	79db      	ldrb	r3, [r3, #7]
   13bb2:	2201      	movs	r2, #1
   13bb4:	4053      	eors	r3, r2
   13bb6:	b2db      	uxtb	r3, r3
   13bb8:	2b00      	cmp	r3, #0
   13bba:	d001      	beq.n	13bc0 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   13bbc:	231c      	movs	r3, #28
   13bbe:	e06b      	b.n	13c98 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   13bc0:	2316      	movs	r3, #22
   13bc2:	18fb      	adds	r3, r7, r3
   13bc4:	2200      	movs	r2, #0
   13bc6:	801a      	strh	r2, [r3, #0]

	while (length--) {
   13bc8:	e05e      	b.n	13c88 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   13bca:	68fb      	ldr	r3, [r7, #12]
   13bcc:	795b      	ldrb	r3, [r3, #5]
   13bce:	2b01      	cmp	r3, #1
   13bd0:	d112      	bne.n	13bf8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   13bd2:	46c0      	nop			; (mov r8, r8)
   13bd4:	68fb      	ldr	r3, [r7, #12]
   13bd6:	0018      	movs	r0, r3
   13bd8:	4b31      	ldr	r3, [pc, #196]	; (13ca0 <spi_read_buffer_wait+0x124>)
   13bda:	4798      	blx	r3
   13bdc:	0003      	movs	r3, r0
   13bde:	001a      	movs	r2, r3
   13be0:	2301      	movs	r3, #1
   13be2:	4053      	eors	r3, r2
   13be4:	b2db      	uxtb	r3, r3
   13be6:	2b00      	cmp	r3, #0
   13be8:	d1f4      	bne.n	13bd4 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   13bea:	1d3b      	adds	r3, r7, #4
   13bec:	881a      	ldrh	r2, [r3, #0]
   13bee:	68fb      	ldr	r3, [r7, #12]
   13bf0:	0011      	movs	r1, r2
   13bf2:	0018      	movs	r0, r3
   13bf4:	4b2b      	ldr	r3, [pc, #172]	; (13ca4 <spi_read_buffer_wait+0x128>)
   13bf6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   13bf8:	46c0      	nop			; (mov r8, r8)
   13bfa:	68fb      	ldr	r3, [r7, #12]
   13bfc:	0018      	movs	r0, r3
   13bfe:	4b2a      	ldr	r3, [pc, #168]	; (13ca8 <spi_read_buffer_wait+0x12c>)
   13c00:	4798      	blx	r3
   13c02:	0003      	movs	r3, r0
   13c04:	001a      	movs	r2, r3
   13c06:	2301      	movs	r3, #1
   13c08:	4053      	eors	r3, r2
   13c0a:	b2db      	uxtb	r3, r3
   13c0c:	2b00      	cmp	r3, #0
   13c0e:	d1f4      	bne.n	13bfa <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   13c10:	2312      	movs	r3, #18
   13c12:	18fb      	adds	r3, r7, r3
   13c14:	2200      	movs	r2, #0
   13c16:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   13c18:	2315      	movs	r3, #21
   13c1a:	18fc      	adds	r4, r7, r3
   13c1c:	2312      	movs	r3, #18
   13c1e:	18fa      	adds	r2, r7, r3
   13c20:	68fb      	ldr	r3, [r7, #12]
   13c22:	0011      	movs	r1, r2
   13c24:	0018      	movs	r0, r3
   13c26:	4b21      	ldr	r3, [pc, #132]	; (13cac <spi_read_buffer_wait+0x130>)
   13c28:	4798      	blx	r3
   13c2a:	0003      	movs	r3, r0
   13c2c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   13c2e:	2315      	movs	r3, #21
   13c30:	18fb      	adds	r3, r7, r3
   13c32:	781b      	ldrb	r3, [r3, #0]
   13c34:	2b00      	cmp	r3, #0
   13c36:	d003      	beq.n	13c40 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   13c38:	2315      	movs	r3, #21
   13c3a:	18fb      	adds	r3, r7, r3
   13c3c:	781b      	ldrb	r3, [r3, #0]
   13c3e:	e02b      	b.n	13c98 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   13c40:	2316      	movs	r3, #22
   13c42:	18fb      	adds	r3, r7, r3
   13c44:	881b      	ldrh	r3, [r3, #0]
   13c46:	2216      	movs	r2, #22
   13c48:	18ba      	adds	r2, r7, r2
   13c4a:	1c59      	adds	r1, r3, #1
   13c4c:	8011      	strh	r1, [r2, #0]
   13c4e:	001a      	movs	r2, r3
   13c50:	68bb      	ldr	r3, [r7, #8]
   13c52:	189b      	adds	r3, r3, r2
   13c54:	2212      	movs	r2, #18
   13c56:	18ba      	adds	r2, r7, r2
   13c58:	8812      	ldrh	r2, [r2, #0]
   13c5a:	b2d2      	uxtb	r2, r2
   13c5c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13c5e:	68fb      	ldr	r3, [r7, #12]
   13c60:	799b      	ldrb	r3, [r3, #6]
   13c62:	2b01      	cmp	r3, #1
   13c64:	d110      	bne.n	13c88 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   13c66:	2316      	movs	r3, #22
   13c68:	18fb      	adds	r3, r7, r3
   13c6a:	881b      	ldrh	r3, [r3, #0]
   13c6c:	2216      	movs	r2, #22
   13c6e:	18ba      	adds	r2, r7, r2
   13c70:	1c59      	adds	r1, r3, #1
   13c72:	8011      	strh	r1, [r2, #0]
   13c74:	001a      	movs	r2, r3
   13c76:	68bb      	ldr	r3, [r7, #8]
   13c78:	189b      	adds	r3, r3, r2
   13c7a:	2212      	movs	r2, #18
   13c7c:	18ba      	adds	r2, r7, r2
   13c7e:	8812      	ldrh	r2, [r2, #0]
   13c80:	0a12      	lsrs	r2, r2, #8
   13c82:	b292      	uxth	r2, r2
   13c84:	b2d2      	uxtb	r2, r2
   13c86:	701a      	strb	r2, [r3, #0]
	while (length--) {
   13c88:	1dbb      	adds	r3, r7, #6
   13c8a:	881b      	ldrh	r3, [r3, #0]
   13c8c:	1dba      	adds	r2, r7, #6
   13c8e:	1e59      	subs	r1, r3, #1
   13c90:	8011      	strh	r1, [r2, #0]
   13c92:	2b00      	cmp	r3, #0
   13c94:	d199      	bne.n	13bca <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   13c96:	2300      	movs	r3, #0
}
   13c98:	0018      	movs	r0, r3
   13c9a:	46bd      	mov	sp, r7
   13c9c:	b007      	add	sp, #28
   13c9e:	bd90      	pop	{r4, r7, pc}
   13ca0:	000135f5 	.word	0x000135f5
   13ca4:	00013645 	.word	0x00013645
   13ca8:	0001361d 	.word	0x0001361d
   13cac:	0001368d 	.word	0x0001368d

00013cb0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   13cb0:	b580      	push	{r7, lr}
   13cb2:	b086      	sub	sp, #24
   13cb4:	af00      	add	r7, sp, #0
   13cb6:	60f8      	str	r0, [r7, #12]
   13cb8:	60b9      	str	r1, [r7, #8]
   13cba:	1dfb      	adds	r3, r7, #7
   13cbc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   13cbe:	68fb      	ldr	r3, [r7, #12]
   13cc0:	795b      	ldrb	r3, [r3, #5]
   13cc2:	2b01      	cmp	r3, #1
   13cc4:	d001      	beq.n	13cca <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   13cc6:	2315      	movs	r3, #21
   13cc8:	e05c      	b.n	13d84 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   13cca:	68fb      	ldr	r3, [r7, #12]
   13ccc:	7a1b      	ldrb	r3, [r3, #8]
   13cce:	2201      	movs	r2, #1
   13cd0:	4053      	eors	r3, r2
   13cd2:	b2db      	uxtb	r3, r3
   13cd4:	2b00      	cmp	r3, #0
   13cd6:	d054      	beq.n	13d82 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   13cd8:	1dfb      	adds	r3, r7, #7
   13cda:	781b      	ldrb	r3, [r3, #0]
   13cdc:	2b00      	cmp	r3, #0
   13cde:	d04a      	beq.n	13d76 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   13ce0:	68bb      	ldr	r3, [r7, #8]
   13ce2:	785b      	ldrb	r3, [r3, #1]
   13ce4:	2b00      	cmp	r3, #0
   13ce6:	d03f      	beq.n	13d68 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   13ce8:	68fb      	ldr	r3, [r7, #12]
   13cea:	0018      	movs	r0, r3
   13cec:	4b27      	ldr	r3, [pc, #156]	; (13d8c <spi_select_slave+0xdc>)
   13cee:	4798      	blx	r3
   13cf0:	0003      	movs	r3, r0
   13cf2:	001a      	movs	r2, r3
   13cf4:	2301      	movs	r3, #1
   13cf6:	4053      	eors	r3, r2
   13cf8:	b2db      	uxtb	r3, r3
   13cfa:	2b00      	cmp	r3, #0
   13cfc:	d007      	beq.n	13d0e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   13cfe:	68bb      	ldr	r3, [r7, #8]
   13d00:	781b      	ldrb	r3, [r3, #0]
   13d02:	2101      	movs	r1, #1
   13d04:	0018      	movs	r0, r3
   13d06:	4b22      	ldr	r3, [pc, #136]	; (13d90 <spi_select_slave+0xe0>)
   13d08:	4798      	blx	r3
					return STATUS_BUSY;
   13d0a:	2305      	movs	r3, #5
   13d0c:	e03a      	b.n	13d84 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   13d0e:	68bb      	ldr	r3, [r7, #8]
   13d10:	781b      	ldrb	r3, [r3, #0]
   13d12:	2100      	movs	r1, #0
   13d14:	0018      	movs	r0, r3
   13d16:	4b1e      	ldr	r3, [pc, #120]	; (13d90 <spi_select_slave+0xe0>)
   13d18:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   13d1a:	68bb      	ldr	r3, [r7, #8]
   13d1c:	789b      	ldrb	r3, [r3, #2]
   13d1e:	b29a      	uxth	r2, r3
   13d20:	68fb      	ldr	r3, [r7, #12]
   13d22:	0011      	movs	r1, r2
   13d24:	0018      	movs	r0, r3
   13d26:	4b1b      	ldr	r3, [pc, #108]	; (13d94 <spi_select_slave+0xe4>)
   13d28:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   13d2a:	68fb      	ldr	r3, [r7, #12]
   13d2c:	79db      	ldrb	r3, [r3, #7]
   13d2e:	2201      	movs	r2, #1
   13d30:	4053      	eors	r3, r2
   13d32:	b2db      	uxtb	r3, r3
   13d34:	2b00      	cmp	r3, #0
   13d36:	d024      	beq.n	13d82 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   13d38:	46c0      	nop			; (mov r8, r8)
   13d3a:	68fb      	ldr	r3, [r7, #12]
   13d3c:	0018      	movs	r0, r3
   13d3e:	4b16      	ldr	r3, [pc, #88]	; (13d98 <spi_select_slave+0xe8>)
   13d40:	4798      	blx	r3
   13d42:	0003      	movs	r3, r0
   13d44:	001a      	movs	r2, r3
   13d46:	2301      	movs	r3, #1
   13d48:	4053      	eors	r3, r2
   13d4a:	b2db      	uxtb	r3, r3
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d1f4      	bne.n	13d3a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   13d50:	2316      	movs	r3, #22
   13d52:	18fb      	adds	r3, r7, r3
   13d54:	2200      	movs	r2, #0
   13d56:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   13d58:	2316      	movs	r3, #22
   13d5a:	18fa      	adds	r2, r7, r3
   13d5c:	68fb      	ldr	r3, [r7, #12]
   13d5e:	0011      	movs	r1, r2
   13d60:	0018      	movs	r0, r3
   13d62:	4b0e      	ldr	r3, [pc, #56]	; (13d9c <spi_select_slave+0xec>)
   13d64:	4798      	blx	r3
   13d66:	e00c      	b.n	13d82 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   13d68:	68bb      	ldr	r3, [r7, #8]
   13d6a:	781b      	ldrb	r3, [r3, #0]
   13d6c:	2100      	movs	r1, #0
   13d6e:	0018      	movs	r0, r3
   13d70:	4b07      	ldr	r3, [pc, #28]	; (13d90 <spi_select_slave+0xe0>)
   13d72:	4798      	blx	r3
   13d74:	e005      	b.n	13d82 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   13d76:	68bb      	ldr	r3, [r7, #8]
   13d78:	781b      	ldrb	r3, [r3, #0]
   13d7a:	2101      	movs	r1, #1
   13d7c:	0018      	movs	r0, r3
   13d7e:	4b04      	ldr	r3, [pc, #16]	; (13d90 <spi_select_slave+0xe0>)
   13d80:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   13d82:	2300      	movs	r3, #0
}
   13d84:	0018      	movs	r0, r3
   13d86:	46bd      	mov	sp, r7
   13d88:	b006      	add	sp, #24
   13d8a:	bd80      	pop	{r7, pc}
   13d8c:	000135f5 	.word	0x000135f5
   13d90:	000133bd 	.word	0x000133bd
   13d94:	00013645 	.word	0x00013645
   13d98:	0001361d 	.word	0x0001361d
   13d9c:	0001368d 	.word	0x0001368d

00013da0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   13da0:	b580      	push	{r7, lr}
   13da2:	b086      	sub	sp, #24
   13da4:	af00      	add	r7, sp, #0
   13da6:	60f8      	str	r0, [r7, #12]
   13da8:	60b9      	str	r1, [r7, #8]
   13daa:	1dbb      	adds	r3, r7, #6
   13dac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   13dae:	68fb      	ldr	r3, [r7, #12]
   13db0:	2238      	movs	r2, #56	; 0x38
   13db2:	5c9b      	ldrb	r3, [r3, r2]
   13db4:	b2db      	uxtb	r3, r3
   13db6:	2b05      	cmp	r3, #5
   13db8:	d101      	bne.n	13dbe <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   13dba:	2305      	movs	r3, #5
   13dbc:	e087      	b.n	13ece <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   13dbe:	1dbb      	adds	r3, r7, #6
   13dc0:	881b      	ldrh	r3, [r3, #0]
   13dc2:	2b00      	cmp	r3, #0
   13dc4:	d101      	bne.n	13dca <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   13dc6:	2317      	movs	r3, #23
   13dc8:	e081      	b.n	13ece <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   13dca:	2316      	movs	r3, #22
   13dcc:	18fb      	adds	r3, r7, r3
   13dce:	2200      	movs	r2, #0
   13dd0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   13dd2:	2314      	movs	r3, #20
   13dd4:	18fb      	adds	r3, r7, r3
   13dd6:	1dba      	adds	r2, r7, #6
   13dd8:	8812      	ldrh	r2, [r2, #0]
   13dda:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   13ddc:	e05f      	b.n	13e9e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   13dde:	46c0      	nop			; (mov r8, r8)
   13de0:	68fb      	ldr	r3, [r7, #12]
   13de2:	0018      	movs	r0, r3
   13de4:	4b3c      	ldr	r3, [pc, #240]	; (13ed8 <spi_write_buffer_wait+0x138>)
   13de6:	4798      	blx	r3
   13de8:	0003      	movs	r3, r0
   13dea:	001a      	movs	r2, r3
   13dec:	2301      	movs	r3, #1
   13dee:	4053      	eors	r3, r2
   13df0:	b2db      	uxtb	r3, r3
   13df2:	2b00      	cmp	r3, #0
   13df4:	d1f4      	bne.n	13de0 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   13df6:	2316      	movs	r3, #22
   13df8:	18fb      	adds	r3, r7, r3
   13dfa:	881b      	ldrh	r3, [r3, #0]
   13dfc:	2216      	movs	r2, #22
   13dfe:	18ba      	adds	r2, r7, r2
   13e00:	1c59      	adds	r1, r3, #1
   13e02:	8011      	strh	r1, [r2, #0]
   13e04:	001a      	movs	r2, r3
   13e06:	68bb      	ldr	r3, [r7, #8]
   13e08:	189b      	adds	r3, r3, r2
   13e0a:	781a      	ldrb	r2, [r3, #0]
   13e0c:	2312      	movs	r3, #18
   13e0e:	18fb      	adds	r3, r7, r3
   13e10:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13e12:	68fb      	ldr	r3, [r7, #12]
   13e14:	799b      	ldrb	r3, [r3, #6]
   13e16:	2b01      	cmp	r3, #1
   13e18:	d115      	bne.n	13e46 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   13e1a:	2316      	movs	r3, #22
   13e1c:	18fb      	adds	r3, r7, r3
   13e1e:	881b      	ldrh	r3, [r3, #0]
   13e20:	2216      	movs	r2, #22
   13e22:	18ba      	adds	r2, r7, r2
   13e24:	1c59      	adds	r1, r3, #1
   13e26:	8011      	strh	r1, [r2, #0]
   13e28:	001a      	movs	r2, r3
   13e2a:	68bb      	ldr	r3, [r7, #8]
   13e2c:	189b      	adds	r3, r3, r2
   13e2e:	781b      	ldrb	r3, [r3, #0]
   13e30:	021b      	lsls	r3, r3, #8
   13e32:	b21a      	sxth	r2, r3
   13e34:	2312      	movs	r3, #18
   13e36:	18fb      	adds	r3, r7, r3
   13e38:	2100      	movs	r1, #0
   13e3a:	5e5b      	ldrsh	r3, [r3, r1]
   13e3c:	4313      	orrs	r3, r2
   13e3e:	b21a      	sxth	r2, r3
   13e40:	2312      	movs	r3, #18
   13e42:	18fb      	adds	r3, r7, r3
   13e44:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   13e46:	2312      	movs	r3, #18
   13e48:	18fb      	adds	r3, r7, r3
   13e4a:	881a      	ldrh	r2, [r3, #0]
   13e4c:	68fb      	ldr	r3, [r7, #12]
   13e4e:	0011      	movs	r1, r2
   13e50:	0018      	movs	r0, r3
   13e52:	4b22      	ldr	r3, [pc, #136]	; (13edc <spi_write_buffer_wait+0x13c>)
   13e54:	4798      	blx	r3

		if (module->receiver_enabled) {
   13e56:	68fb      	ldr	r3, [r7, #12]
   13e58:	79db      	ldrb	r3, [r3, #7]
   13e5a:	2214      	movs	r2, #20
   13e5c:	18ba      	adds	r2, r7, r2
   13e5e:	2114      	movs	r1, #20
   13e60:	1879      	adds	r1, r7, r1
   13e62:	8809      	ldrh	r1, [r1, #0]
   13e64:	8011      	strh	r1, [r2, #0]
   13e66:	2b00      	cmp	r3, #0
   13e68:	d019      	beq.n	13e9e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   13e6a:	46c0      	nop			; (mov r8, r8)
   13e6c:	68fb      	ldr	r3, [r7, #12]
   13e6e:	0018      	movs	r0, r3
   13e70:	4b1b      	ldr	r3, [pc, #108]	; (13ee0 <spi_write_buffer_wait+0x140>)
   13e72:	4798      	blx	r3
   13e74:	0003      	movs	r3, r0
   13e76:	001a      	movs	r2, r3
   13e78:	2301      	movs	r3, #1
   13e7a:	4053      	eors	r3, r2
   13e7c:	b2db      	uxtb	r3, r3
   13e7e:	2b00      	cmp	r3, #0
   13e80:	d1f4      	bne.n	13e6c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   13e82:	2310      	movs	r3, #16
   13e84:	18fa      	adds	r2, r7, r3
   13e86:	68fb      	ldr	r3, [r7, #12]
   13e88:	0011      	movs	r1, r2
   13e8a:	0018      	movs	r0, r3
   13e8c:	4b15      	ldr	r3, [pc, #84]	; (13ee4 <spi_write_buffer_wait+0x144>)
   13e8e:	4798      	blx	r3
			flush_length--;
   13e90:	2314      	movs	r3, #20
   13e92:	18fb      	adds	r3, r7, r3
   13e94:	881a      	ldrh	r2, [r3, #0]
   13e96:	2314      	movs	r3, #20
   13e98:	18fb      	adds	r3, r7, r3
   13e9a:	3a01      	subs	r2, #1
   13e9c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   13e9e:	1dbb      	adds	r3, r7, #6
   13ea0:	881b      	ldrh	r3, [r3, #0]
   13ea2:	1dba      	adds	r2, r7, #6
   13ea4:	1e59      	subs	r1, r3, #1
   13ea6:	8011      	strh	r1, [r2, #0]
   13ea8:	2b00      	cmp	r3, #0
   13eaa:	d198      	bne.n	13dde <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   13eac:	68fb      	ldr	r3, [r7, #12]
   13eae:	795b      	ldrb	r3, [r3, #5]
   13eb0:	2b01      	cmp	r3, #1
   13eb2:	d10b      	bne.n	13ecc <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   13eb4:	46c0      	nop			; (mov r8, r8)
   13eb6:	68fb      	ldr	r3, [r7, #12]
   13eb8:	0018      	movs	r0, r3
   13eba:	4b0b      	ldr	r3, [pc, #44]	; (13ee8 <spi_write_buffer_wait+0x148>)
   13ebc:	4798      	blx	r3
   13ebe:	0003      	movs	r3, r0
   13ec0:	001a      	movs	r2, r3
   13ec2:	2301      	movs	r3, #1
   13ec4:	4053      	eors	r3, r2
   13ec6:	b2db      	uxtb	r3, r3
   13ec8:	2b00      	cmp	r3, #0
   13eca:	d1f4      	bne.n	13eb6 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   13ecc:	2300      	movs	r3, #0
}
   13ece:	0018      	movs	r0, r3
   13ed0:	46bd      	mov	sp, r7
   13ed2:	b006      	add	sp, #24
   13ed4:	bd80      	pop	{r7, pc}
   13ed6:	46c0      	nop			; (mov r8, r8)
   13ed8:	000135f5 	.word	0x000135f5
   13edc:	00013645 	.word	0x00013645
   13ee0:	0001361d 	.word	0x0001361d
   13ee4:	0001368d 	.word	0x0001368d
   13ee8:	000135cd 	.word	0x000135cd

00013eec <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   13eec:	b580      	push	{r7, lr}
   13eee:	b084      	sub	sp, #16
   13ef0:	af00      	add	r7, sp, #0
   13ef2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13ef4:	687b      	ldr	r3, [r7, #4]
   13ef6:	681b      	ldr	r3, [r3, #0]
   13ef8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   13efa:	687b      	ldr	r3, [r7, #4]
   13efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13efe:	781b      	ldrb	r3, [r3, #0]
   13f00:	b2da      	uxtb	r2, r3
   13f02:	230e      	movs	r3, #14
   13f04:	18fb      	adds	r3, r7, r3
   13f06:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   13f08:	687b      	ldr	r3, [r7, #4]
   13f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13f0c:	1c5a      	adds	r2, r3, #1
   13f0e:	687b      	ldr	r3, [r7, #4]
   13f10:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13f12:	687b      	ldr	r3, [r7, #4]
   13f14:	799b      	ldrb	r3, [r3, #6]
   13f16:	2b01      	cmp	r3, #1
   13f18:	d113      	bne.n	13f42 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   13f1a:	687b      	ldr	r3, [r7, #4]
   13f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13f1e:	781b      	ldrb	r3, [r3, #0]
   13f20:	b2db      	uxtb	r3, r3
   13f22:	021b      	lsls	r3, r3, #8
   13f24:	b21a      	sxth	r2, r3
   13f26:	230e      	movs	r3, #14
   13f28:	18fb      	adds	r3, r7, r3
   13f2a:	2100      	movs	r1, #0
   13f2c:	5e5b      	ldrsh	r3, [r3, r1]
   13f2e:	4313      	orrs	r3, r2
   13f30:	b21a      	sxth	r2, r3
   13f32:	230e      	movs	r3, #14
   13f34:	18fb      	adds	r3, r7, r3
   13f36:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   13f38:	687b      	ldr	r3, [r7, #4]
   13f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13f3c:	1c5a      	adds	r2, r3, #1
   13f3e:	687b      	ldr	r3, [r7, #4]
   13f40:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   13f42:	230e      	movs	r3, #14
   13f44:	18fb      	adds	r3, r7, r3
   13f46:	881b      	ldrh	r3, [r3, #0]
   13f48:	05db      	lsls	r3, r3, #23
   13f4a:	0dda      	lsrs	r2, r3, #23
   13f4c:	68bb      	ldr	r3, [r7, #8]
   13f4e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   13f50:	687b      	ldr	r3, [r7, #4]
   13f52:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13f54:	b29b      	uxth	r3, r3
   13f56:	3b01      	subs	r3, #1
   13f58:	b29a      	uxth	r2, r3
   13f5a:	687b      	ldr	r3, [r7, #4]
   13f5c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   13f5e:	46c0      	nop			; (mov r8, r8)
   13f60:	46bd      	mov	sp, r7
   13f62:	b004      	add	sp, #16
   13f64:	bd80      	pop	{r7, pc}
	...

00013f68 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   13f68:	b580      	push	{r7, lr}
   13f6a:	b084      	sub	sp, #16
   13f6c:	af00      	add	r7, sp, #0
   13f6e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13f70:	687b      	ldr	r3, [r7, #4]
   13f72:	681b      	ldr	r3, [r3, #0]
   13f74:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   13f76:	4b08      	ldr	r3, [pc, #32]	; (13f98 <_spi_write_dummy+0x30>)
   13f78:	881b      	ldrh	r3, [r3, #0]
   13f7a:	001a      	movs	r2, r3
   13f7c:	68fb      	ldr	r3, [r7, #12]
   13f7e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   13f80:	687b      	ldr	r3, [r7, #4]
   13f82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   13f84:	b29b      	uxth	r3, r3
   13f86:	3b01      	subs	r3, #1
   13f88:	b29a      	uxth	r2, r3
   13f8a:	687b      	ldr	r3, [r7, #4]
   13f8c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   13f8e:	46c0      	nop			; (mov r8, r8)
   13f90:	46bd      	mov	sp, r7
   13f92:	b004      	add	sp, #16
   13f94:	bd80      	pop	{r7, pc}
   13f96:	46c0      	nop			; (mov r8, r8)
   13f98:	200055a0 	.word	0x200055a0

00013f9c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   13f9c:	b580      	push	{r7, lr}
   13f9e:	b084      	sub	sp, #16
   13fa0:	af00      	add	r7, sp, #0
   13fa2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13fa4:	687b      	ldr	r3, [r7, #4]
   13fa6:	681b      	ldr	r3, [r3, #0]
   13fa8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   13faa:	230a      	movs	r3, #10
   13fac:	18fb      	adds	r3, r7, r3
   13fae:	2200      	movs	r2, #0
   13fb0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   13fb2:	68fb      	ldr	r3, [r7, #12]
   13fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13fb6:	230a      	movs	r3, #10
   13fb8:	18fb      	adds	r3, r7, r3
   13fba:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   13fbc:	687b      	ldr	r3, [r7, #4]
   13fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   13fc0:	b29b      	uxth	r3, r3
   13fc2:	3b01      	subs	r3, #1
   13fc4:	b29a      	uxth	r2, r3
   13fc6:	687b      	ldr	r3, [r7, #4]
   13fc8:	865a      	strh	r2, [r3, #50]	; 0x32
}
   13fca:	46c0      	nop			; (mov r8, r8)
   13fcc:	46bd      	mov	sp, r7
   13fce:	b004      	add	sp, #16
   13fd0:	bd80      	pop	{r7, pc}

00013fd2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   13fd2:	b580      	push	{r7, lr}
   13fd4:	b084      	sub	sp, #16
   13fd6:	af00      	add	r7, sp, #0
   13fd8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13fda:	687b      	ldr	r3, [r7, #4]
   13fdc:	681b      	ldr	r3, [r3, #0]
   13fde:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   13fe0:	68fb      	ldr	r3, [r7, #12]
   13fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13fe4:	b29a      	uxth	r2, r3
   13fe6:	230a      	movs	r3, #10
   13fe8:	18fb      	adds	r3, r7, r3
   13fea:	05d2      	lsls	r2, r2, #23
   13fec:	0dd2      	lsrs	r2, r2, #23
   13fee:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   13ff0:	687b      	ldr	r3, [r7, #4]
   13ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13ff4:	220a      	movs	r2, #10
   13ff6:	18ba      	adds	r2, r7, r2
   13ff8:	8812      	ldrh	r2, [r2, #0]
   13ffa:	b2d2      	uxtb	r2, r2
   13ffc:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   13ffe:	687b      	ldr	r3, [r7, #4]
   14000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14002:	1c5a      	adds	r2, r3, #1
   14004:	687b      	ldr	r3, [r7, #4]
   14006:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   14008:	687b      	ldr	r3, [r7, #4]
   1400a:	799b      	ldrb	r3, [r3, #6]
   1400c:	2b01      	cmp	r3, #1
   1400e:	d10d      	bne.n	1402c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   14010:	687b      	ldr	r3, [r7, #4]
   14012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14014:	220a      	movs	r2, #10
   14016:	18ba      	adds	r2, r7, r2
   14018:	8812      	ldrh	r2, [r2, #0]
   1401a:	0a12      	lsrs	r2, r2, #8
   1401c:	b292      	uxth	r2, r2
   1401e:	b2d2      	uxtb	r2, r2
   14020:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   14022:	687b      	ldr	r3, [r7, #4]
   14024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14026:	1c5a      	adds	r2, r3, #1
   14028:	687b      	ldr	r3, [r7, #4]
   1402a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   1402c:	687b      	ldr	r3, [r7, #4]
   1402e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   14030:	b29b      	uxth	r3, r3
   14032:	3b01      	subs	r3, #1
   14034:	b29a      	uxth	r2, r3
   14036:	687b      	ldr	r3, [r7, #4]
   14038:	861a      	strh	r2, [r3, #48]	; 0x30
}
   1403a:	46c0      	nop			; (mov r8, r8)
   1403c:	46bd      	mov	sp, r7
   1403e:	b004      	add	sp, #16
   14040:	bd80      	pop	{r7, pc}
	...

00014044 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   14044:	b580      	push	{r7, lr}
   14046:	b086      	sub	sp, #24
   14048:	af00      	add	r7, sp, #0
   1404a:	0002      	movs	r2, r0
   1404c:	1dfb      	adds	r3, r7, #7
   1404e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   14050:	1dfb      	adds	r3, r7, #7
   14052:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   14054:	4b96      	ldr	r3, [pc, #600]	; (142b0 <_spi_interrupt_handler+0x26c>)
   14056:	0092      	lsls	r2, r2, #2
   14058:	58d3      	ldr	r3, [r2, r3]
   1405a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1405c:	697b      	ldr	r3, [r7, #20]
   1405e:	681b      	ldr	r3, [r3, #0]
   14060:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   14062:	697b      	ldr	r3, [r7, #20]
   14064:	2237      	movs	r2, #55	; 0x37
   14066:	5c9a      	ldrb	r2, [r3, r2]
   14068:	697b      	ldr	r3, [r7, #20]
   1406a:	2136      	movs	r1, #54	; 0x36
   1406c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   1406e:	230f      	movs	r3, #15
   14070:	18fb      	adds	r3, r7, r3
   14072:	400a      	ands	r2, r1
   14074:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   14076:	693b      	ldr	r3, [r7, #16]
   14078:	7e1b      	ldrb	r3, [r3, #24]
   1407a:	b2da      	uxtb	r2, r3
   1407c:	230c      	movs	r3, #12
   1407e:	18fb      	adds	r3, r7, r3
   14080:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   14082:	693b      	ldr	r3, [r7, #16]
   14084:	7d9b      	ldrb	r3, [r3, #22]
   14086:	b2db      	uxtb	r3, r3
   14088:	b29a      	uxth	r2, r3
   1408a:	230c      	movs	r3, #12
   1408c:	18fb      	adds	r3, r7, r3
   1408e:	210c      	movs	r1, #12
   14090:	1879      	adds	r1, r7, r1
   14092:	8809      	ldrh	r1, [r1, #0]
   14094:	400a      	ands	r2, r1
   14096:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   14098:	230c      	movs	r3, #12
   1409a:	18fb      	adds	r3, r7, r3
   1409c:	881b      	ldrh	r3, [r3, #0]
   1409e:	2201      	movs	r2, #1
   140a0:	4013      	ands	r3, r2
   140a2:	d038      	beq.n	14116 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   140a4:	697b      	ldr	r3, [r7, #20]
   140a6:	795b      	ldrb	r3, [r3, #5]
   140a8:	2b01      	cmp	r3, #1
   140aa:	d110      	bne.n	140ce <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   140ac:	697b      	ldr	r3, [r7, #20]
   140ae:	7a5b      	ldrb	r3, [r3, #9]
   140b0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   140b2:	2b00      	cmp	r3, #0
   140b4:	d10b      	bne.n	140ce <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   140b6:	697b      	ldr	r3, [r7, #20]
   140b8:	0018      	movs	r0, r3
   140ba:	4b7e      	ldr	r3, [pc, #504]	; (142b4 <_spi_interrupt_handler+0x270>)
   140bc:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   140be:	697b      	ldr	r3, [r7, #20]
   140c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   140c2:	b29b      	uxth	r3, r3
   140c4:	2b00      	cmp	r3, #0
   140c6:	d102      	bne.n	140ce <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   140c8:	693b      	ldr	r3, [r7, #16]
   140ca:	2201      	movs	r2, #1
   140cc:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   140ce:	697b      	ldr	r3, [r7, #20]
   140d0:	795b      	ldrb	r3, [r3, #5]
		if (0
   140d2:	2b01      	cmp	r3, #1
   140d4:	d11f      	bne.n	14116 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   140d6:	697b      	ldr	r3, [r7, #20]
   140d8:	7a5b      	ldrb	r3, [r3, #9]
   140da:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   140dc:	2b00      	cmp	r3, #0
   140de:	d01a      	beq.n	14116 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   140e0:	697b      	ldr	r3, [r7, #20]
   140e2:	0018      	movs	r0, r3
   140e4:	4b74      	ldr	r3, [pc, #464]	; (142b8 <_spi_interrupt_handler+0x274>)
   140e6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   140e8:	697b      	ldr	r3, [r7, #20]
   140ea:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   140ec:	b29b      	uxth	r3, r3
   140ee:	2b00      	cmp	r3, #0
   140f0:	d111      	bne.n	14116 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   140f2:	693b      	ldr	r3, [r7, #16]
   140f4:	2201      	movs	r2, #1
   140f6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   140f8:	697b      	ldr	r3, [r7, #20]
   140fa:	7a5b      	ldrb	r3, [r3, #9]
   140fc:	b2db      	uxtb	r3, r3
   140fe:	2b01      	cmp	r3, #1
   14100:	d109      	bne.n	14116 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   14102:	697b      	ldr	r3, [r7, #20]
   14104:	79db      	ldrb	r3, [r3, #7]
   14106:	2201      	movs	r2, #1
   14108:	4053      	eors	r3, r2
   1410a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   1410c:	2b00      	cmp	r3, #0
   1410e:	d002      	beq.n	14116 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   14110:	693b      	ldr	r3, [r7, #16]
   14112:	2202      	movs	r2, #2
   14114:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   14116:	230c      	movs	r3, #12
   14118:	18fb      	adds	r3, r7, r3
   1411a:	881b      	ldrh	r3, [r3, #0]
   1411c:	2204      	movs	r2, #4
   1411e:	4013      	ands	r3, r2
   14120:	d100      	bne.n	14124 <_spi_interrupt_handler+0xe0>
   14122:	e07e      	b.n	14222 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   14124:	693b      	ldr	r3, [r7, #16]
   14126:	8b5b      	ldrh	r3, [r3, #26]
   14128:	b29b      	uxth	r3, r3
   1412a:	001a      	movs	r2, r3
   1412c:	2304      	movs	r3, #4
   1412e:	4013      	ands	r3, r2
   14130:	d022      	beq.n	14178 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   14132:	697b      	ldr	r3, [r7, #20]
   14134:	7a5b      	ldrb	r3, [r3, #9]
   14136:	b2db      	uxtb	r3, r3
   14138:	2b01      	cmp	r3, #1
   1413a:	d014      	beq.n	14166 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   1413c:	697b      	ldr	r3, [r7, #20]
   1413e:	2238      	movs	r2, #56	; 0x38
   14140:	211e      	movs	r1, #30
   14142:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   14144:	697b      	ldr	r3, [r7, #20]
   14146:	2203      	movs	r2, #3
   14148:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   1414a:	693b      	ldr	r3, [r7, #16]
   1414c:	2205      	movs	r2, #5
   1414e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   14150:	230f      	movs	r3, #15
   14152:	18fb      	adds	r3, r7, r3
   14154:	781b      	ldrb	r3, [r3, #0]
   14156:	2208      	movs	r2, #8
   14158:	4013      	ands	r3, r2
   1415a:	d004      	beq.n	14166 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   1415c:	697b      	ldr	r3, [r7, #20]
   1415e:	699b      	ldr	r3, [r3, #24]
   14160:	697a      	ldr	r2, [r7, #20]
   14162:	0010      	movs	r0, r2
   14164:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   14166:	693b      	ldr	r3, [r7, #16]
   14168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1416a:	230a      	movs	r3, #10
   1416c:	18fb      	adds	r3, r7, r3
   1416e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   14170:	693b      	ldr	r3, [r7, #16]
   14172:	2204      	movs	r2, #4
   14174:	835a      	strh	r2, [r3, #26]
   14176:	e054      	b.n	14222 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   14178:	697b      	ldr	r3, [r7, #20]
   1417a:	7a5b      	ldrb	r3, [r3, #9]
   1417c:	b2db      	uxtb	r3, r3
   1417e:	2b01      	cmp	r3, #1
   14180:	d11e      	bne.n	141c0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   14182:	697b      	ldr	r3, [r7, #20]
   14184:	0018      	movs	r0, r3
   14186:	4b4d      	ldr	r3, [pc, #308]	; (142bc <_spi_interrupt_handler+0x278>)
   14188:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   1418a:	697b      	ldr	r3, [r7, #20]
   1418c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   1418e:	b29b      	uxth	r3, r3
   14190:	2b00      	cmp	r3, #0
   14192:	d146      	bne.n	14222 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   14194:	693b      	ldr	r3, [r7, #16]
   14196:	2204      	movs	r2, #4
   14198:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   1419a:	697b      	ldr	r3, [r7, #20]
   1419c:	2238      	movs	r2, #56	; 0x38
   1419e:	2100      	movs	r1, #0
   141a0:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   141a2:	697b      	ldr	r3, [r7, #20]
   141a4:	2203      	movs	r2, #3
   141a6:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   141a8:	230f      	movs	r3, #15
   141aa:	18fb      	adds	r3, r7, r3
   141ac:	781b      	ldrb	r3, [r3, #0]
   141ae:	2201      	movs	r2, #1
   141b0:	4013      	ands	r3, r2
   141b2:	d036      	beq.n	14222 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   141b4:	697b      	ldr	r3, [r7, #20]
   141b6:	68db      	ldr	r3, [r3, #12]
   141b8:	697a      	ldr	r2, [r7, #20]
   141ba:	0010      	movs	r0, r2
   141bc:	4798      	blx	r3
   141be:	e030      	b.n	14222 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   141c0:	697b      	ldr	r3, [r7, #20]
   141c2:	0018      	movs	r0, r3
   141c4:	4b3e      	ldr	r3, [pc, #248]	; (142c0 <_spi_interrupt_handler+0x27c>)
   141c6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   141c8:	697b      	ldr	r3, [r7, #20]
   141ca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   141cc:	b29b      	uxth	r3, r3
   141ce:	2b00      	cmp	r3, #0
   141d0:	d127      	bne.n	14222 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   141d2:	697b      	ldr	r3, [r7, #20]
   141d4:	2238      	movs	r2, #56	; 0x38
   141d6:	2100      	movs	r1, #0
   141d8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   141da:	693b      	ldr	r3, [r7, #16]
   141dc:	2204      	movs	r2, #4
   141de:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   141e0:	697b      	ldr	r3, [r7, #20]
   141e2:	7a5b      	ldrb	r3, [r3, #9]
   141e4:	b2db      	uxtb	r3, r3
   141e6:	2b02      	cmp	r3, #2
   141e8:	d10b      	bne.n	14202 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   141ea:	230f      	movs	r3, #15
   141ec:	18fb      	adds	r3, r7, r3
   141ee:	781b      	ldrb	r3, [r3, #0]
   141f0:	2204      	movs	r2, #4
   141f2:	4013      	ands	r3, r2
   141f4:	d015      	beq.n	14222 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   141f6:	697b      	ldr	r3, [r7, #20]
   141f8:	695b      	ldr	r3, [r3, #20]
   141fa:	697a      	ldr	r2, [r7, #20]
   141fc:	0010      	movs	r0, r2
   141fe:	4798      	blx	r3
   14200:	e00f      	b.n	14222 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   14202:	697b      	ldr	r3, [r7, #20]
   14204:	7a5b      	ldrb	r3, [r3, #9]
   14206:	b2db      	uxtb	r3, r3
   14208:	2b00      	cmp	r3, #0
   1420a:	d10a      	bne.n	14222 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   1420c:	230f      	movs	r3, #15
   1420e:	18fb      	adds	r3, r7, r3
   14210:	781b      	ldrb	r3, [r3, #0]
   14212:	2202      	movs	r2, #2
   14214:	4013      	ands	r3, r2
   14216:	d004      	beq.n	14222 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   14218:	697b      	ldr	r3, [r7, #20]
   1421a:	691b      	ldr	r3, [r3, #16]
   1421c:	697a      	ldr	r2, [r7, #20]
   1421e:	0010      	movs	r0, r2
   14220:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   14222:	230c      	movs	r3, #12
   14224:	18fb      	adds	r3, r7, r3
   14226:	881b      	ldrh	r3, [r3, #0]
   14228:	2202      	movs	r2, #2
   1422a:	4013      	ands	r3, r2
   1422c:	d024      	beq.n	14278 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1422e:	697b      	ldr	r3, [r7, #20]
   14230:	795b      	ldrb	r3, [r3, #5]
   14232:	2b01      	cmp	r3, #1
   14234:	d120      	bne.n	14278 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   14236:	697b      	ldr	r3, [r7, #20]
   14238:	7a5b      	ldrb	r3, [r3, #9]
   1423a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   1423c:	2b01      	cmp	r3, #1
   1423e:	d11b      	bne.n	14278 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   14240:	697b      	ldr	r3, [r7, #20]
   14242:	79db      	ldrb	r3, [r3, #7]
   14244:	2201      	movs	r2, #1
   14246:	4053      	eors	r3, r2
   14248:	b2db      	uxtb	r3, r3
   1424a:	2b00      	cmp	r3, #0
   1424c:	d014      	beq.n	14278 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   1424e:	693b      	ldr	r3, [r7, #16]
   14250:	2202      	movs	r2, #2
   14252:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   14254:	697b      	ldr	r3, [r7, #20]
   14256:	2203      	movs	r2, #3
   14258:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   1425a:	697b      	ldr	r3, [r7, #20]
   1425c:	2238      	movs	r2, #56	; 0x38
   1425e:	2100      	movs	r1, #0
   14260:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   14262:	230f      	movs	r3, #15
   14264:	18fb      	adds	r3, r7, r3
   14266:	781b      	ldrb	r3, [r3, #0]
   14268:	2201      	movs	r2, #1
   1426a:	4013      	ands	r3, r2
   1426c:	d004      	beq.n	14278 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   1426e:	697b      	ldr	r3, [r7, #20]
   14270:	68db      	ldr	r3, [r3, #12]
   14272:	697a      	ldr	r2, [r7, #20]
   14274:	0010      	movs	r0, r2
   14276:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   14278:	230c      	movs	r3, #12
   1427a:	18fb      	adds	r3, r7, r3
   1427c:	881b      	ldrh	r3, [r3, #0]
   1427e:	2280      	movs	r2, #128	; 0x80
   14280:	4013      	ands	r3, r2
   14282:	d010      	beq.n	142a6 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   14284:	693b      	ldr	r3, [r7, #16]
   14286:	2280      	movs	r2, #128	; 0x80
   14288:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1428a:	693b      	ldr	r3, [r7, #16]
   1428c:	2280      	movs	r2, #128	; 0x80
   1428e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   14290:	230f      	movs	r3, #15
   14292:	18fb      	adds	r3, r7, r3
   14294:	781b      	ldrb	r3, [r3, #0]
   14296:	2240      	movs	r2, #64	; 0x40
   14298:	4013      	ands	r3, r2
   1429a:	d004      	beq.n	142a6 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1429c:	697b      	ldr	r3, [r7, #20]
   1429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   142a0:	697a      	ldr	r2, [r7, #20]
   142a2:	0010      	movs	r0, r2
   142a4:	4798      	blx	r3
		}
	}
#  endif
}
   142a6:	46c0      	nop			; (mov r8, r8)
   142a8:	46bd      	mov	sp, r7
   142aa:	b006      	add	sp, #24
   142ac:	bd80      	pop	{r7, pc}
   142ae:	46c0      	nop			; (mov r8, r8)
   142b0:	20005588 	.word	0x20005588
   142b4:	00013f69 	.word	0x00013f69
   142b8:	00013eed 	.word	0x00013eed
   142bc:	00013f9d 	.word	0x00013f9d
   142c0:	00013fd3 	.word	0x00013fd3

000142c4 <system_gclk_chan_get_config_defaults>:
{
   142c4:	b580      	push	{r7, lr}
   142c6:	b082      	sub	sp, #8
   142c8:	af00      	add	r7, sp, #0
   142ca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   142cc:	687b      	ldr	r3, [r7, #4]
   142ce:	2200      	movs	r2, #0
   142d0:	701a      	strb	r2, [r3, #0]
}
   142d2:	46c0      	nop			; (mov r8, r8)
   142d4:	46bd      	mov	sp, r7
   142d6:	b002      	add	sp, #8
   142d8:	bd80      	pop	{r7, pc}
	...

000142dc <system_apb_clock_set_mask>:
{
   142dc:	b580      	push	{r7, lr}
   142de:	b082      	sub	sp, #8
   142e0:	af00      	add	r7, sp, #0
   142e2:	0002      	movs	r2, r0
   142e4:	6039      	str	r1, [r7, #0]
   142e6:	1dfb      	adds	r3, r7, #7
   142e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   142ea:	1dfb      	adds	r3, r7, #7
   142ec:	781b      	ldrb	r3, [r3, #0]
   142ee:	2b01      	cmp	r3, #1
   142f0:	d00a      	beq.n	14308 <system_apb_clock_set_mask+0x2c>
   142f2:	2b02      	cmp	r3, #2
   142f4:	d00f      	beq.n	14316 <system_apb_clock_set_mask+0x3a>
   142f6:	2b00      	cmp	r3, #0
   142f8:	d114      	bne.n	14324 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   142fa:	4b0e      	ldr	r3, [pc, #56]	; (14334 <system_apb_clock_set_mask+0x58>)
   142fc:	4a0d      	ldr	r2, [pc, #52]	; (14334 <system_apb_clock_set_mask+0x58>)
   142fe:	6991      	ldr	r1, [r2, #24]
   14300:	683a      	ldr	r2, [r7, #0]
   14302:	430a      	orrs	r2, r1
   14304:	619a      	str	r2, [r3, #24]
			break;
   14306:	e00f      	b.n	14328 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   14308:	4b0a      	ldr	r3, [pc, #40]	; (14334 <system_apb_clock_set_mask+0x58>)
   1430a:	4a0a      	ldr	r2, [pc, #40]	; (14334 <system_apb_clock_set_mask+0x58>)
   1430c:	69d1      	ldr	r1, [r2, #28]
   1430e:	683a      	ldr	r2, [r7, #0]
   14310:	430a      	orrs	r2, r1
   14312:	61da      	str	r2, [r3, #28]
			break;
   14314:	e008      	b.n	14328 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   14316:	4b07      	ldr	r3, [pc, #28]	; (14334 <system_apb_clock_set_mask+0x58>)
   14318:	4a06      	ldr	r2, [pc, #24]	; (14334 <system_apb_clock_set_mask+0x58>)
   1431a:	6a11      	ldr	r1, [r2, #32]
   1431c:	683a      	ldr	r2, [r7, #0]
   1431e:	430a      	orrs	r2, r1
   14320:	621a      	str	r2, [r3, #32]
			break;
   14322:	e001      	b.n	14328 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   14324:	2317      	movs	r3, #23
   14326:	e000      	b.n	1432a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   14328:	2300      	movs	r3, #0
}
   1432a:	0018      	movs	r0, r3
   1432c:	46bd      	mov	sp, r7
   1432e:	b002      	add	sp, #8
   14330:	bd80      	pop	{r7, pc}
   14332:	46c0      	nop			; (mov r8, r8)
   14334:	40000400 	.word	0x40000400

00014338 <system_pinmux_get_config_defaults>:
{
   14338:	b580      	push	{r7, lr}
   1433a:	b082      	sub	sp, #8
   1433c:	af00      	add	r7, sp, #0
   1433e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   14340:	687b      	ldr	r3, [r7, #4]
   14342:	2280      	movs	r2, #128	; 0x80
   14344:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   14346:	687b      	ldr	r3, [r7, #4]
   14348:	2200      	movs	r2, #0
   1434a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1434c:	687b      	ldr	r3, [r7, #4]
   1434e:	2201      	movs	r2, #1
   14350:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   14352:	687b      	ldr	r3, [r7, #4]
   14354:	2200      	movs	r2, #0
   14356:	70da      	strb	r2, [r3, #3]
}
   14358:	46c0      	nop			; (mov r8, r8)
   1435a:	46bd      	mov	sp, r7
   1435c:	b002      	add	sp, #8
   1435e:	bd80      	pop	{r7, pc}

00014360 <system_is_debugger_present>:
{
   14360:	b580      	push	{r7, lr}
   14362:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   14364:	4b05      	ldr	r3, [pc, #20]	; (1437c <system_is_debugger_present+0x1c>)
   14366:	789b      	ldrb	r3, [r3, #2]
   14368:	b2db      	uxtb	r3, r3
   1436a:	001a      	movs	r2, r3
   1436c:	2302      	movs	r3, #2
   1436e:	4013      	ands	r3, r2
   14370:	1e5a      	subs	r2, r3, #1
   14372:	4193      	sbcs	r3, r2
   14374:	b2db      	uxtb	r3, r3
}
   14376:	0018      	movs	r0, r3
   14378:	46bd      	mov	sp, r7
   1437a:	bd80      	pop	{r7, pc}
   1437c:	41002000 	.word	0x41002000

00014380 <usart_is_syncing>:
{
   14380:	b580      	push	{r7, lr}
   14382:	b084      	sub	sp, #16
   14384:	af00      	add	r7, sp, #0
   14386:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   14388:	687b      	ldr	r3, [r7, #4]
   1438a:	681b      	ldr	r3, [r3, #0]
   1438c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1438e:	68fb      	ldr	r3, [r7, #12]
   14390:	69db      	ldr	r3, [r3, #28]
   14392:	1e5a      	subs	r2, r3, #1
   14394:	4193      	sbcs	r3, r2
   14396:	b2db      	uxtb	r3, r3
}
   14398:	0018      	movs	r0, r3
   1439a:	46bd      	mov	sp, r7
   1439c:	b004      	add	sp, #16
   1439e:	bd80      	pop	{r7, pc}

000143a0 <_usart_wait_for_sync>:
{
   143a0:	b580      	push	{r7, lr}
   143a2:	b082      	sub	sp, #8
   143a4:	af00      	add	r7, sp, #0
   143a6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   143a8:	46c0      	nop			; (mov r8, r8)
   143aa:	687b      	ldr	r3, [r7, #4]
   143ac:	0018      	movs	r0, r3
   143ae:	4b04      	ldr	r3, [pc, #16]	; (143c0 <_usart_wait_for_sync+0x20>)
   143b0:	4798      	blx	r3
   143b2:	1e03      	subs	r3, r0, #0
   143b4:	d1f9      	bne.n	143aa <_usart_wait_for_sync+0xa>
}
   143b6:	46c0      	nop			; (mov r8, r8)
   143b8:	46bd      	mov	sp, r7
   143ba:	b002      	add	sp, #8
   143bc:	bd80      	pop	{r7, pc}
   143be:	46c0      	nop			; (mov r8, r8)
   143c0:	00014381 	.word	0x00014381

000143c4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   143c4:	b5b0      	push	{r4, r5, r7, lr}
   143c6:	b08c      	sub	sp, #48	; 0x30
   143c8:	af02      	add	r7, sp, #8
   143ca:	6078      	str	r0, [r7, #4]
   143cc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   143ce:	687b      	ldr	r3, [r7, #4]
   143d0:	681b      	ldr	r3, [r3, #0]
   143d2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   143d4:	687b      	ldr	r3, [r7, #4]
   143d6:	681b      	ldr	r3, [r3, #0]
   143d8:	0018      	movs	r0, r3
   143da:	4bab      	ldr	r3, [pc, #684]	; (14688 <_usart_set_config+0x2c4>)
   143dc:	4798      	blx	r3
   143de:	0003      	movs	r3, r0
   143e0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   143e2:	697b      	ldr	r3, [r7, #20]
   143e4:	3314      	adds	r3, #20
   143e6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   143e8:	2300      	movs	r3, #0
   143ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   143ec:	2300      	movs	r3, #0
   143ee:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   143f0:	230a      	movs	r3, #10
   143f2:	18fb      	adds	r3, r7, r3
   143f4:	2200      	movs	r2, #0
   143f6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   143f8:	231f      	movs	r3, #31
   143fa:	18fb      	adds	r3, r7, r3
   143fc:	2200      	movs	r2, #0
   143fe:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   14400:	231e      	movs	r3, #30
   14402:	18fb      	adds	r3, r7, r3
   14404:	2210      	movs	r2, #16
   14406:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   14408:	683b      	ldr	r3, [r7, #0]
   1440a:	8a1b      	ldrh	r3, [r3, #16]
   1440c:	2280      	movs	r2, #128	; 0x80
   1440e:	01d2      	lsls	r2, r2, #7
   14410:	4293      	cmp	r3, r2
   14412:	d01c      	beq.n	1444e <_usart_set_config+0x8a>
   14414:	2280      	movs	r2, #128	; 0x80
   14416:	01d2      	lsls	r2, r2, #7
   14418:	4293      	cmp	r3, r2
   1441a:	dc06      	bgt.n	1442a <_usart_set_config+0x66>
   1441c:	2b00      	cmp	r3, #0
   1441e:	d00d      	beq.n	1443c <_usart_set_config+0x78>
   14420:	2280      	movs	r2, #128	; 0x80
   14422:	0192      	lsls	r2, r2, #6
   14424:	4293      	cmp	r3, r2
   14426:	d024      	beq.n	14472 <_usart_set_config+0xae>
   14428:	e035      	b.n	14496 <_usart_set_config+0xd2>
   1442a:	22c0      	movs	r2, #192	; 0xc0
   1442c:	01d2      	lsls	r2, r2, #7
   1442e:	4293      	cmp	r3, r2
   14430:	d028      	beq.n	14484 <_usart_set_config+0xc0>
   14432:	2280      	movs	r2, #128	; 0x80
   14434:	0212      	lsls	r2, r2, #8
   14436:	4293      	cmp	r3, r2
   14438:	d012      	beq.n	14460 <_usart_set_config+0x9c>
   1443a:	e02c      	b.n	14496 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1443c:	231f      	movs	r3, #31
   1443e:	18fb      	adds	r3, r7, r3
   14440:	2200      	movs	r2, #0
   14442:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   14444:	231e      	movs	r3, #30
   14446:	18fb      	adds	r3, r7, r3
   14448:	2210      	movs	r2, #16
   1444a:	701a      	strb	r2, [r3, #0]
			break;
   1444c:	e023      	b.n	14496 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   1444e:	231f      	movs	r3, #31
   14450:	18fb      	adds	r3, r7, r3
   14452:	2200      	movs	r2, #0
   14454:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   14456:	231e      	movs	r3, #30
   14458:	18fb      	adds	r3, r7, r3
   1445a:	2208      	movs	r2, #8
   1445c:	701a      	strb	r2, [r3, #0]
			break;
   1445e:	e01a      	b.n	14496 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   14460:	231f      	movs	r3, #31
   14462:	18fb      	adds	r3, r7, r3
   14464:	2200      	movs	r2, #0
   14466:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   14468:	231e      	movs	r3, #30
   1446a:	18fb      	adds	r3, r7, r3
   1446c:	2203      	movs	r2, #3
   1446e:	701a      	strb	r2, [r3, #0]
			break;
   14470:	e011      	b.n	14496 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   14472:	231f      	movs	r3, #31
   14474:	18fb      	adds	r3, r7, r3
   14476:	2201      	movs	r2, #1
   14478:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   1447a:	231e      	movs	r3, #30
   1447c:	18fb      	adds	r3, r7, r3
   1447e:	2210      	movs	r2, #16
   14480:	701a      	strb	r2, [r3, #0]
			break;
   14482:	e008      	b.n	14496 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   14484:	231f      	movs	r3, #31
   14486:	18fb      	adds	r3, r7, r3
   14488:	2201      	movs	r2, #1
   1448a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   1448c:	231e      	movs	r3, #30
   1448e:	18fb      	adds	r3, r7, r3
   14490:	2208      	movs	r2, #8
   14492:	701a      	strb	r2, [r3, #0]
			break;
   14494:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   14496:	683b      	ldr	r3, [r7, #0]
   14498:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   1449a:	683b      	ldr	r3, [r7, #0]
   1449c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   1449e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   144a0:	683b      	ldr	r3, [r7, #0]
   144a2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   144a4:	4313      	orrs	r3, r2
		config->sample_rate |
   144a6:	683a      	ldr	r2, [r7, #0]
   144a8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   144aa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   144ac:	683a      	ldr	r2, [r7, #0]
   144ae:	7e12      	ldrb	r2, [r2, #24]
   144b0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   144b2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   144b4:	683a      	ldr	r2, [r7, #0]
   144b6:	2126      	movs	r1, #38	; 0x26
   144b8:	5c52      	ldrb	r2, [r2, r1]
   144ba:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   144bc:	4313      	orrs	r3, r2
   144be:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   144c0:	231d      	movs	r3, #29
   144c2:	18fb      	adds	r3, r7, r3
   144c4:	2200      	movs	r2, #0
   144c6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   144c8:	683b      	ldr	r3, [r7, #0]
   144ca:	685b      	ldr	r3, [r3, #4]
   144cc:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   144ce:	68fb      	ldr	r3, [r7, #12]
   144d0:	2b00      	cmp	r3, #0
   144d2:	d01e      	beq.n	14512 <_usart_set_config+0x14e>
   144d4:	2280      	movs	r2, #128	; 0x80
   144d6:	0552      	lsls	r2, r2, #21
   144d8:	4293      	cmp	r3, r2
   144da:	d14f      	bne.n	1457c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   144dc:	683b      	ldr	r3, [r7, #0]
   144de:	2227      	movs	r2, #39	; 0x27
   144e0:	5c9b      	ldrb	r3, [r3, r2]
   144e2:	2201      	movs	r2, #1
   144e4:	4053      	eors	r3, r2
   144e6:	b2db      	uxtb	r3, r3
   144e8:	2b00      	cmp	r3, #0
   144ea:	d046      	beq.n	1457a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   144ec:	683b      	ldr	r3, [r7, #0]
   144ee:	6a1d      	ldr	r5, [r3, #32]
   144f0:	693b      	ldr	r3, [r7, #16]
   144f2:	b2db      	uxtb	r3, r3
   144f4:	0018      	movs	r0, r3
   144f6:	4b65      	ldr	r3, [pc, #404]	; (1468c <_usart_set_config+0x2c8>)
   144f8:	4798      	blx	r3
   144fa:	0001      	movs	r1, r0
   144fc:	231d      	movs	r3, #29
   144fe:	18fc      	adds	r4, r7, r3
   14500:	230a      	movs	r3, #10
   14502:	18fb      	adds	r3, r7, r3
   14504:	001a      	movs	r2, r3
   14506:	0028      	movs	r0, r5
   14508:	4b61      	ldr	r3, [pc, #388]	; (14690 <_usart_set_config+0x2cc>)
   1450a:	4798      	blx	r3
   1450c:	0003      	movs	r3, r0
   1450e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   14510:	e033      	b.n	1457a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   14512:	683b      	ldr	r3, [r7, #0]
   14514:	2227      	movs	r2, #39	; 0x27
   14516:	5c9b      	ldrb	r3, [r3, r2]
   14518:	2b00      	cmp	r3, #0
   1451a:	d014      	beq.n	14546 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   1451c:	683b      	ldr	r3, [r7, #0]
   1451e:	6a18      	ldr	r0, [r3, #32]
   14520:	683b      	ldr	r3, [r7, #0]
   14522:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   14524:	231d      	movs	r3, #29
   14526:	18fc      	adds	r4, r7, r3
   14528:	231f      	movs	r3, #31
   1452a:	18fb      	adds	r3, r7, r3
   1452c:	781d      	ldrb	r5, [r3, #0]
   1452e:	230a      	movs	r3, #10
   14530:	18fa      	adds	r2, r7, r3
   14532:	231e      	movs	r3, #30
   14534:	18fb      	adds	r3, r7, r3
   14536:	781b      	ldrb	r3, [r3, #0]
   14538:	9300      	str	r3, [sp, #0]
   1453a:	002b      	movs	r3, r5
   1453c:	4d55      	ldr	r5, [pc, #340]	; (14694 <_usart_set_config+0x2d0>)
   1453e:	47a8      	blx	r5
   14540:	0003      	movs	r3, r0
   14542:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   14544:	e01a      	b.n	1457c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   14546:	683b      	ldr	r3, [r7, #0]
   14548:	6a1d      	ldr	r5, [r3, #32]
   1454a:	693b      	ldr	r3, [r7, #16]
   1454c:	b2db      	uxtb	r3, r3
   1454e:	0018      	movs	r0, r3
   14550:	4b4e      	ldr	r3, [pc, #312]	; (1468c <_usart_set_config+0x2c8>)
   14552:	4798      	blx	r3
				status_code =
   14554:	231d      	movs	r3, #29
   14556:	18fc      	adds	r4, r7, r3
   14558:	231f      	movs	r3, #31
   1455a:	18fb      	adds	r3, r7, r3
   1455c:	7819      	ldrb	r1, [r3, #0]
   1455e:	230a      	movs	r3, #10
   14560:	18fa      	adds	r2, r7, r3
   14562:	231e      	movs	r3, #30
   14564:	18fb      	adds	r3, r7, r3
   14566:	781b      	ldrb	r3, [r3, #0]
   14568:	9300      	str	r3, [sp, #0]
   1456a:	000b      	movs	r3, r1
   1456c:	0001      	movs	r1, r0
   1456e:	0028      	movs	r0, r5
   14570:	4d48      	ldr	r5, [pc, #288]	; (14694 <_usart_set_config+0x2d0>)
   14572:	47a8      	blx	r5
   14574:	0003      	movs	r3, r0
   14576:	7023      	strb	r3, [r4, #0]
			break;
   14578:	e000      	b.n	1457c <_usart_set_config+0x1b8>
			break;
   1457a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   1457c:	231d      	movs	r3, #29
   1457e:	18fb      	adds	r3, r7, r3
   14580:	781b      	ldrb	r3, [r3, #0]
   14582:	2b00      	cmp	r3, #0
   14584:	d003      	beq.n	1458e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   14586:	231d      	movs	r3, #29
   14588:	18fb      	adds	r3, r7, r3
   1458a:	781b      	ldrb	r3, [r3, #0]
   1458c:	e077      	b.n	1467e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   1458e:	683b      	ldr	r3, [r7, #0]
   14590:	7e5b      	ldrb	r3, [r3, #25]
   14592:	2b00      	cmp	r3, #0
   14594:	d003      	beq.n	1459e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   14596:	683b      	ldr	r3, [r7, #0]
   14598:	7e9a      	ldrb	r2, [r3, #26]
   1459a:	69bb      	ldr	r3, [r7, #24]
   1459c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1459e:	687b      	ldr	r3, [r7, #4]
   145a0:	0018      	movs	r0, r3
   145a2:	4b3d      	ldr	r3, [pc, #244]	; (14698 <_usart_set_config+0x2d4>)
   145a4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   145a6:	230a      	movs	r3, #10
   145a8:	18fb      	adds	r3, r7, r3
   145aa:	881a      	ldrh	r2, [r3, #0]
   145ac:	69bb      	ldr	r3, [r7, #24]
   145ae:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   145b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   145b2:	68fb      	ldr	r3, [r7, #12]
   145b4:	4313      	orrs	r3, r2
   145b6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   145b8:	683b      	ldr	r3, [r7, #0]
   145ba:	2227      	movs	r2, #39	; 0x27
   145bc:	5c9b      	ldrb	r3, [r3, r2]
   145be:	2201      	movs	r2, #1
   145c0:	4053      	eors	r3, r2
   145c2:	b2db      	uxtb	r3, r3
   145c4:	2b00      	cmp	r3, #0
   145c6:	d003      	beq.n	145d0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   145c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   145ca:	2204      	movs	r2, #4
   145cc:	4313      	orrs	r3, r2
   145ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   145d0:	683b      	ldr	r3, [r7, #0]
   145d2:	7e5b      	ldrb	r3, [r3, #25]
   145d4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   145d6:	683b      	ldr	r3, [r7, #0]
   145d8:	7f1b      	ldrb	r3, [r3, #28]
   145da:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   145dc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   145de:	683b      	ldr	r3, [r7, #0]
   145e0:	7f5b      	ldrb	r3, [r3, #29]
   145e2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   145e4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   145e6:	683b      	ldr	r3, [r7, #0]
   145e8:	2124      	movs	r1, #36	; 0x24
   145ea:	5c5b      	ldrb	r3, [r3, r1]
   145ec:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   145ee:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   145f0:	683b      	ldr	r3, [r7, #0]
   145f2:	2125      	movs	r1, #37	; 0x25
   145f4:	5c5b      	ldrb	r3, [r3, r1]
   145f6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   145f8:	4313      	orrs	r3, r2
	ctrlb =  
   145fa:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   145fc:	683b      	ldr	r3, [r7, #0]
   145fe:	7a9b      	ldrb	r3, [r3, #10]
   14600:	001a      	movs	r2, r3
   14602:	6a3b      	ldr	r3, [r7, #32]
   14604:	4313      	orrs	r3, r2
   14606:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   14608:	683b      	ldr	r3, [r7, #0]
   1460a:	7adb      	ldrb	r3, [r3, #11]
   1460c:	001a      	movs	r2, r3
   1460e:	6a3b      	ldr	r3, [r7, #32]
   14610:	4313      	orrs	r3, r2
   14612:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   14614:	683b      	ldr	r3, [r7, #0]
   14616:	891b      	ldrh	r3, [r3, #8]
   14618:	2bff      	cmp	r3, #255	; 0xff
   1461a:	d00b      	beq.n	14634 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   1461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1461e:	2280      	movs	r2, #128	; 0x80
   14620:	0452      	lsls	r2, r2, #17
   14622:	4313      	orrs	r3, r2
   14624:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   14626:	683b      	ldr	r3, [r7, #0]
   14628:	891b      	ldrh	r3, [r3, #8]
   1462a:	001a      	movs	r2, r3
   1462c:	6a3b      	ldr	r3, [r7, #32]
   1462e:	4313      	orrs	r3, r2
   14630:	623b      	str	r3, [r7, #32]
   14632:	e008      	b.n	14646 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   14634:	683b      	ldr	r3, [r7, #0]
   14636:	7edb      	ldrb	r3, [r3, #27]
   14638:	2b00      	cmp	r3, #0
   1463a:	d004      	beq.n	14646 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   1463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1463e:	2280      	movs	r2, #128	; 0x80
   14640:	04d2      	lsls	r2, r2, #19
   14642:	4313      	orrs	r3, r2
   14644:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   14646:	683b      	ldr	r3, [r7, #0]
   14648:	222c      	movs	r2, #44	; 0x2c
   1464a:	5c9b      	ldrb	r3, [r3, r2]
   1464c:	2b00      	cmp	r3, #0
   1464e:	d103      	bne.n	14658 <_usart_set_config+0x294>
   14650:	4b12      	ldr	r3, [pc, #72]	; (1469c <_usart_set_config+0x2d8>)
   14652:	4798      	blx	r3
   14654:	1e03      	subs	r3, r0, #0
   14656:	d003      	beq.n	14660 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   14658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1465a:	2280      	movs	r2, #128	; 0x80
   1465c:	4313      	orrs	r3, r2
   1465e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   14660:	687b      	ldr	r3, [r7, #4]
   14662:	0018      	movs	r0, r3
   14664:	4b0c      	ldr	r3, [pc, #48]	; (14698 <_usart_set_config+0x2d4>)
   14666:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   14668:	69bb      	ldr	r3, [r7, #24]
   1466a:	6a3a      	ldr	r2, [r7, #32]
   1466c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1466e:	687b      	ldr	r3, [r7, #4]
   14670:	0018      	movs	r0, r3
   14672:	4b09      	ldr	r3, [pc, #36]	; (14698 <_usart_set_config+0x2d4>)
   14674:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   14676:	69bb      	ldr	r3, [r7, #24]
   14678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1467a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   1467c:	2300      	movs	r3, #0
}
   1467e:	0018      	movs	r0, r3
   14680:	46bd      	mov	sp, r7
   14682:	b00a      	add	sp, #40	; 0x28
   14684:	bdb0      	pop	{r4, r5, r7, pc}
   14686:	46c0      	nop			; (mov r8, r8)
   14688:	0001316d 	.word	0x0001316d
   1468c:	00015b21 	.word	0x00015b21
   14690:	00012ce7 	.word	0x00012ce7
   14694:	00012d65 	.word	0x00012d65
   14698:	000143a1 	.word	0x000143a1
   1469c:	00014361 	.word	0x00014361

000146a0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   146a0:	b590      	push	{r4, r7, lr}
   146a2:	b093      	sub	sp, #76	; 0x4c
   146a4:	af00      	add	r7, sp, #0
   146a6:	60f8      	str	r0, [r7, #12]
   146a8:	60b9      	str	r1, [r7, #8]
   146aa:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   146ac:	233b      	movs	r3, #59	; 0x3b
   146ae:	18fb      	adds	r3, r7, r3
   146b0:	2200      	movs	r2, #0
   146b2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   146b4:	68fb      	ldr	r3, [r7, #12]
   146b6:	68ba      	ldr	r2, [r7, #8]
   146b8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   146ba:	68fb      	ldr	r3, [r7, #12]
   146bc:	681b      	ldr	r3, [r3, #0]
   146be:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   146c0:	68fb      	ldr	r3, [r7, #12]
   146c2:	681b      	ldr	r3, [r3, #0]
   146c4:	0018      	movs	r0, r3
   146c6:	4b86      	ldr	r3, [pc, #536]	; (148e0 <usart_init+0x240>)
   146c8:	4798      	blx	r3
   146ca:	0003      	movs	r3, r0
   146cc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   146ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   146d0:	3302      	adds	r3, #2
   146d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   146d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   146d6:	3314      	adds	r3, #20
   146d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   146da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   146dc:	681b      	ldr	r3, [r3, #0]
   146de:	2201      	movs	r2, #1
   146e0:	4013      	ands	r3, r2
   146e2:	d001      	beq.n	146e8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   146e4:	2305      	movs	r3, #5
   146e6:	e0f6      	b.n	148d6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   146e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   146ea:	681b      	ldr	r3, [r3, #0]
   146ec:	2202      	movs	r2, #2
   146ee:	4013      	ands	r3, r2
   146f0:	d001      	beq.n	146f6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   146f2:	231c      	movs	r3, #28
   146f4:	e0ef      	b.n	148d6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   146f6:	2201      	movs	r2, #1
   146f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   146fa:	409a      	lsls	r2, r3
   146fc:	0013      	movs	r3, r2
   146fe:	0019      	movs	r1, r3
   14700:	2002      	movs	r0, #2
   14702:	4b78      	ldr	r3, [pc, #480]	; (148e4 <usart_init+0x244>)
   14704:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   14706:	2324      	movs	r3, #36	; 0x24
   14708:	18fb      	adds	r3, r7, r3
   1470a:	0018      	movs	r0, r3
   1470c:	4b76      	ldr	r3, [pc, #472]	; (148e8 <usart_init+0x248>)
   1470e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   14710:	687b      	ldr	r3, [r7, #4]
   14712:	222d      	movs	r2, #45	; 0x2d
   14714:	5c9a      	ldrb	r2, [r3, r2]
   14716:	2324      	movs	r3, #36	; 0x24
   14718:	18fb      	adds	r3, r7, r3
   1471a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1471e:	b2db      	uxtb	r3, r3
   14720:	2224      	movs	r2, #36	; 0x24
   14722:	18ba      	adds	r2, r7, r2
   14724:	0011      	movs	r1, r2
   14726:	0018      	movs	r0, r3
   14728:	4b70      	ldr	r3, [pc, #448]	; (148ec <usart_init+0x24c>)
   1472a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1472e:	b2db      	uxtb	r3, r3
   14730:	0018      	movs	r0, r3
   14732:	4b6f      	ldr	r3, [pc, #444]	; (148f0 <usart_init+0x250>)
   14734:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   14736:	687b      	ldr	r3, [r7, #4]
   14738:	222d      	movs	r2, #45	; 0x2d
   1473a:	5c9b      	ldrb	r3, [r3, r2]
   1473c:	2100      	movs	r1, #0
   1473e:	0018      	movs	r0, r3
   14740:	4b6c      	ldr	r3, [pc, #432]	; (148f4 <usart_init+0x254>)
   14742:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   14744:	687b      	ldr	r3, [r7, #4]
   14746:	7ada      	ldrb	r2, [r3, #11]
   14748:	68fb      	ldr	r3, [r7, #12]
   1474a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   1474c:	687b      	ldr	r3, [r7, #4]
   1474e:	2224      	movs	r2, #36	; 0x24
   14750:	5c9a      	ldrb	r2, [r3, r2]
   14752:	68fb      	ldr	r3, [r7, #12]
   14754:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   14756:	687b      	ldr	r3, [r7, #4]
   14758:	2225      	movs	r2, #37	; 0x25
   1475a:	5c9a      	ldrb	r2, [r3, r2]
   1475c:	68fb      	ldr	r3, [r7, #12]
   1475e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   14760:	687b      	ldr	r3, [r7, #4]
   14762:	7eda      	ldrb	r2, [r3, #27]
   14764:	68fb      	ldr	r3, [r7, #12]
   14766:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   14768:	687b      	ldr	r3, [r7, #4]
   1476a:	7f1a      	ldrb	r2, [r3, #28]
   1476c:	68fb      	ldr	r3, [r7, #12]
   1476e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   14770:	233b      	movs	r3, #59	; 0x3b
   14772:	18fc      	adds	r4, r7, r3
   14774:	687a      	ldr	r2, [r7, #4]
   14776:	68fb      	ldr	r3, [r7, #12]
   14778:	0011      	movs	r1, r2
   1477a:	0018      	movs	r0, r3
   1477c:	4b5e      	ldr	r3, [pc, #376]	; (148f8 <usart_init+0x258>)
   1477e:	4798      	blx	r3
   14780:	0003      	movs	r3, r0
   14782:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   14784:	233b      	movs	r3, #59	; 0x3b
   14786:	18fb      	adds	r3, r7, r3
   14788:	781b      	ldrb	r3, [r3, #0]
   1478a:	2b00      	cmp	r3, #0
   1478c:	d003      	beq.n	14796 <usart_init+0xf6>
		return status_code;
   1478e:	233b      	movs	r3, #59	; 0x3b
   14790:	18fb      	adds	r3, r7, r3
   14792:	781b      	ldrb	r3, [r3, #0]
   14794:	e09f      	b.n	148d6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   14796:	2320      	movs	r3, #32
   14798:	18fb      	adds	r3, r7, r3
   1479a:	0018      	movs	r0, r3
   1479c:	4b57      	ldr	r3, [pc, #348]	; (148fc <usart_init+0x25c>)
   1479e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   147a0:	2320      	movs	r3, #32
   147a2:	18fb      	adds	r3, r7, r3
   147a4:	2200      	movs	r2, #0
   147a6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   147a8:	2320      	movs	r3, #32
   147aa:	18fb      	adds	r3, r7, r3
   147ac:	2200      	movs	r2, #0
   147ae:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   147b0:	687b      	ldr	r3, [r7, #4]
   147b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   147b4:	2310      	movs	r3, #16
   147b6:	18fb      	adds	r3, r7, r3
   147b8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   147ba:	687b      	ldr	r3, [r7, #4]
   147bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   147be:	2310      	movs	r3, #16
   147c0:	18fb      	adds	r3, r7, r3
   147c2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   147c4:	687b      	ldr	r3, [r7, #4]
   147c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   147c8:	2310      	movs	r3, #16
   147ca:	18fb      	adds	r3, r7, r3
   147cc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   147ce:	687b      	ldr	r3, [r7, #4]
   147d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   147d2:	2310      	movs	r3, #16
   147d4:	18fb      	adds	r3, r7, r3
   147d6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   147d8:	2347      	movs	r3, #71	; 0x47
   147da:	18fb      	adds	r3, r7, r3
   147dc:	2200      	movs	r2, #0
   147de:	701a      	strb	r2, [r3, #0]
   147e0:	e02c      	b.n	1483c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   147e2:	2347      	movs	r3, #71	; 0x47
   147e4:	18fb      	adds	r3, r7, r3
   147e6:	781a      	ldrb	r2, [r3, #0]
   147e8:	2310      	movs	r3, #16
   147ea:	18fb      	adds	r3, r7, r3
   147ec:	0092      	lsls	r2, r2, #2
   147ee:	58d3      	ldr	r3, [r2, r3]
   147f0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   147f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   147f4:	2b00      	cmp	r3, #0
   147f6:	d109      	bne.n	1480c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   147f8:	2347      	movs	r3, #71	; 0x47
   147fa:	18fb      	adds	r3, r7, r3
   147fc:	781a      	ldrb	r2, [r3, #0]
   147fe:	68bb      	ldr	r3, [r7, #8]
   14800:	0011      	movs	r1, r2
   14802:	0018      	movs	r0, r3
   14804:	4b3e      	ldr	r3, [pc, #248]	; (14900 <usart_init+0x260>)
   14806:	4798      	blx	r3
   14808:	0003      	movs	r3, r0
   1480a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   1480c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1480e:	3301      	adds	r3, #1
   14810:	d00d      	beq.n	1482e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   14812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14814:	b2da      	uxtb	r2, r3
   14816:	2320      	movs	r3, #32
   14818:	18fb      	adds	r3, r7, r3
   1481a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   1481c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1481e:	0c1b      	lsrs	r3, r3, #16
   14820:	b2db      	uxtb	r3, r3
   14822:	2220      	movs	r2, #32
   14824:	18ba      	adds	r2, r7, r2
   14826:	0011      	movs	r1, r2
   14828:	0018      	movs	r0, r3
   1482a:	4b36      	ldr	r3, [pc, #216]	; (14904 <usart_init+0x264>)
   1482c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   1482e:	2347      	movs	r3, #71	; 0x47
   14830:	18fb      	adds	r3, r7, r3
   14832:	781a      	ldrb	r2, [r3, #0]
   14834:	2347      	movs	r3, #71	; 0x47
   14836:	18fb      	adds	r3, r7, r3
   14838:	3201      	adds	r2, #1
   1483a:	701a      	strb	r2, [r3, #0]
   1483c:	2347      	movs	r3, #71	; 0x47
   1483e:	18fb      	adds	r3, r7, r3
   14840:	781b      	ldrb	r3, [r3, #0]
   14842:	2b03      	cmp	r3, #3
   14844:	d9cd      	bls.n	147e2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   14846:	2300      	movs	r3, #0
   14848:	63fb      	str	r3, [r7, #60]	; 0x3c
   1484a:	e00a      	b.n	14862 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   1484c:	68fa      	ldr	r2, [r7, #12]
   1484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14850:	3302      	adds	r3, #2
   14852:	009b      	lsls	r3, r3, #2
   14854:	18d3      	adds	r3, r2, r3
   14856:	3304      	adds	r3, #4
   14858:	2200      	movs	r2, #0
   1485a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   1485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1485e:	3301      	adds	r3, #1
   14860:	63fb      	str	r3, [r7, #60]	; 0x3c
   14862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14864:	2b05      	cmp	r3, #5
   14866:	d9f1      	bls.n	1484c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   14868:	68fb      	ldr	r3, [r7, #12]
   1486a:	2200      	movs	r2, #0
   1486c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   1486e:	68fb      	ldr	r3, [r7, #12]
   14870:	2200      	movs	r2, #0
   14872:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   14874:	68fb      	ldr	r3, [r7, #12]
   14876:	2200      	movs	r2, #0
   14878:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1487a:	68fb      	ldr	r3, [r7, #12]
   1487c:	2200      	movs	r2, #0
   1487e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   14880:	68fb      	ldr	r3, [r7, #12]
   14882:	2230      	movs	r2, #48	; 0x30
   14884:	2100      	movs	r1, #0
   14886:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   14888:	68fb      	ldr	r3, [r7, #12]
   1488a:	2231      	movs	r2, #49	; 0x31
   1488c:	2100      	movs	r1, #0
   1488e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   14890:	68fb      	ldr	r3, [r7, #12]
   14892:	2232      	movs	r2, #50	; 0x32
   14894:	2100      	movs	r1, #0
   14896:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   14898:	68fb      	ldr	r3, [r7, #12]
   1489a:	2233      	movs	r2, #51	; 0x33
   1489c:	2100      	movs	r1, #0
   1489e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   148a0:	68fb      	ldr	r3, [r7, #12]
   148a2:	681b      	ldr	r3, [r3, #0]
   148a4:	2227      	movs	r2, #39	; 0x27
   148a6:	18bc      	adds	r4, r7, r2
   148a8:	0018      	movs	r0, r3
   148aa:	4b0d      	ldr	r3, [pc, #52]	; (148e0 <usart_init+0x240>)
   148ac:	4798      	blx	r3
   148ae:	0003      	movs	r3, r0
   148b0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   148b2:	4a15      	ldr	r2, [pc, #84]	; (14908 <usart_init+0x268>)
   148b4:	2327      	movs	r3, #39	; 0x27
   148b6:	18fb      	adds	r3, r7, r3
   148b8:	781b      	ldrb	r3, [r3, #0]
   148ba:	0011      	movs	r1, r2
   148bc:	0018      	movs	r0, r3
   148be:	4b13      	ldr	r3, [pc, #76]	; (1490c <usart_init+0x26c>)
   148c0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   148c2:	2327      	movs	r3, #39	; 0x27
   148c4:	18fb      	adds	r3, r7, r3
   148c6:	781a      	ldrb	r2, [r3, #0]
   148c8:	4b11      	ldr	r3, [pc, #68]	; (14910 <usart_init+0x270>)
   148ca:	0092      	lsls	r2, r2, #2
   148cc:	68f9      	ldr	r1, [r7, #12]
   148ce:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   148d0:	233b      	movs	r3, #59	; 0x3b
   148d2:	18fb      	adds	r3, r7, r3
   148d4:	781b      	ldrb	r3, [r3, #0]
}
   148d6:	0018      	movs	r0, r3
   148d8:	46bd      	mov	sp, r7
   148da:	b013      	add	sp, #76	; 0x4c
   148dc:	bd90      	pop	{r4, r7, pc}
   148de:	46c0      	nop			; (mov r8, r8)
   148e0:	0001316d 	.word	0x0001316d
   148e4:	000142dd 	.word	0x000142dd
   148e8:	000142c5 	.word	0x000142c5
   148ec:	000159fd 	.word	0x000159fd
   148f0:	00015a41 	.word	0x00015a41
   148f4:	00012f25 	.word	0x00012f25
   148f8:	000143c5 	.word	0x000143c5
   148fc:	00014339 	.word	0x00014339
   14900:	00012fb1 	.word	0x00012fb1
   14904:	00015d5d 	.word	0x00015d5d
   14908:	00014b7d 	.word	0x00014b7d
   1490c:	000131d1 	.word	0x000131d1
   14910:	20005588 	.word	0x20005588

00014914 <system_interrupt_enter_critical_section>:
{
   14914:	b580      	push	{r7, lr}
   14916:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   14918:	4b02      	ldr	r3, [pc, #8]	; (14924 <system_interrupt_enter_critical_section+0x10>)
   1491a:	4798      	blx	r3
}
   1491c:	46c0      	nop			; (mov r8, r8)
   1491e:	46bd      	mov	sp, r7
   14920:	bd80      	pop	{r7, pc}
   14922:	46c0      	nop			; (mov r8, r8)
   14924:	00011d69 	.word	0x00011d69

00014928 <system_interrupt_leave_critical_section>:
{
   14928:	b580      	push	{r7, lr}
   1492a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1492c:	4b02      	ldr	r3, [pc, #8]	; (14938 <system_interrupt_leave_critical_section+0x10>)
   1492e:	4798      	blx	r3
}
   14930:	46c0      	nop			; (mov r8, r8)
   14932:	46bd      	mov	sp, r7
   14934:	bd80      	pop	{r7, pc}
   14936:	46c0      	nop			; (mov r8, r8)
   14938:	00011dbd 	.word	0x00011dbd

0001493c <usart_is_syncing>:
{
   1493c:	b580      	push	{r7, lr}
   1493e:	b084      	sub	sp, #16
   14940:	af00      	add	r7, sp, #0
   14942:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   14944:	687b      	ldr	r3, [r7, #4]
   14946:	681b      	ldr	r3, [r3, #0]
   14948:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1494a:	68fb      	ldr	r3, [r7, #12]
   1494c:	69db      	ldr	r3, [r3, #28]
   1494e:	1e5a      	subs	r2, r3, #1
   14950:	4193      	sbcs	r3, r2
   14952:	b2db      	uxtb	r3, r3
}
   14954:	0018      	movs	r0, r3
   14956:	46bd      	mov	sp, r7
   14958:	b004      	add	sp, #16
   1495a:	bd80      	pop	{r7, pc}

0001495c <_usart_wait_for_sync>:
{
   1495c:	b580      	push	{r7, lr}
   1495e:	b082      	sub	sp, #8
   14960:	af00      	add	r7, sp, #0
   14962:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   14964:	46c0      	nop			; (mov r8, r8)
   14966:	687b      	ldr	r3, [r7, #4]
   14968:	0018      	movs	r0, r3
   1496a:	4b04      	ldr	r3, [pc, #16]	; (1497c <_usart_wait_for_sync+0x20>)
   1496c:	4798      	blx	r3
   1496e:	1e03      	subs	r3, r0, #0
   14970:	d1f9      	bne.n	14966 <_usart_wait_for_sync+0xa>
}
   14972:	46c0      	nop			; (mov r8, r8)
   14974:	46bd      	mov	sp, r7
   14976:	b002      	add	sp, #8
   14978:	bd80      	pop	{r7, pc}
   1497a:	46c0      	nop			; (mov r8, r8)
   1497c:	0001493d 	.word	0x0001493d

00014980 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   14980:	b580      	push	{r7, lr}
   14982:	b086      	sub	sp, #24
   14984:	af00      	add	r7, sp, #0
   14986:	60f8      	str	r0, [r7, #12]
   14988:	60b9      	str	r1, [r7, #8]
   1498a:	1dbb      	adds	r3, r7, #6
   1498c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1498e:	68fb      	ldr	r3, [r7, #12]
   14990:	681b      	ldr	r3, [r3, #0]
   14992:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   14994:	4b0f      	ldr	r3, [pc, #60]	; (149d4 <_usart_write_buffer+0x54>)
   14996:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   14998:	68fb      	ldr	r3, [r7, #12]
   1499a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1499c:	b29b      	uxth	r3, r3
   1499e:	2b00      	cmp	r3, #0
   149a0:	d003      	beq.n	149aa <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   149a2:	4b0d      	ldr	r3, [pc, #52]	; (149d8 <_usart_write_buffer+0x58>)
   149a4:	4798      	blx	r3
		return STATUS_BUSY;
   149a6:	2305      	movs	r3, #5
   149a8:	e010      	b.n	149cc <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   149aa:	68fb      	ldr	r3, [r7, #12]
   149ac:	1dba      	adds	r2, r7, #6
   149ae:	8812      	ldrh	r2, [r2, #0]
   149b0:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   149b2:	4b09      	ldr	r3, [pc, #36]	; (149d8 <_usart_write_buffer+0x58>)
   149b4:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   149b6:	68fb      	ldr	r3, [r7, #12]
   149b8:	68ba      	ldr	r2, [r7, #8]
   149ba:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   149bc:	68fb      	ldr	r3, [r7, #12]
   149be:	2233      	movs	r2, #51	; 0x33
   149c0:	2105      	movs	r1, #5
   149c2:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   149c4:	697b      	ldr	r3, [r7, #20]
   149c6:	2201      	movs	r2, #1
   149c8:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   149ca:	2300      	movs	r3, #0
}
   149cc:	0018      	movs	r0, r3
   149ce:	46bd      	mov	sp, r7
   149d0:	b006      	add	sp, #24
   149d2:	bd80      	pop	{r7, pc}
   149d4:	00014915 	.word	0x00014915
   149d8:	00014929 	.word	0x00014929

000149dc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   149dc:	b580      	push	{r7, lr}
   149de:	b086      	sub	sp, #24
   149e0:	af00      	add	r7, sp, #0
   149e2:	60f8      	str	r0, [r7, #12]
   149e4:	60b9      	str	r1, [r7, #8]
   149e6:	1dbb      	adds	r3, r7, #6
   149e8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   149ea:	68fb      	ldr	r3, [r7, #12]
   149ec:	681b      	ldr	r3, [r3, #0]
   149ee:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   149f0:	4b16      	ldr	r3, [pc, #88]	; (14a4c <_usart_read_buffer+0x70>)
   149f2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   149f4:	68fb      	ldr	r3, [r7, #12]
   149f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   149f8:	b29b      	uxth	r3, r3
   149fa:	2b00      	cmp	r3, #0
   149fc:	d003      	beq.n	14a06 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   149fe:	4b14      	ldr	r3, [pc, #80]	; (14a50 <_usart_read_buffer+0x74>)
   14a00:	4798      	blx	r3
		return STATUS_BUSY;
   14a02:	2305      	movs	r3, #5
   14a04:	e01e      	b.n	14a44 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   14a06:	68fb      	ldr	r3, [r7, #12]
   14a08:	1dba      	adds	r2, r7, #6
   14a0a:	8812      	ldrh	r2, [r2, #0]
   14a0c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   14a0e:	4b10      	ldr	r3, [pc, #64]	; (14a50 <_usart_read_buffer+0x74>)
   14a10:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   14a12:	68fb      	ldr	r3, [r7, #12]
   14a14:	68ba      	ldr	r2, [r7, #8]
   14a16:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   14a18:	68fb      	ldr	r3, [r7, #12]
   14a1a:	2232      	movs	r2, #50	; 0x32
   14a1c:	2105      	movs	r1, #5
   14a1e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   14a20:	697b      	ldr	r3, [r7, #20]
   14a22:	2204      	movs	r2, #4
   14a24:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   14a26:	68fb      	ldr	r3, [r7, #12]
   14a28:	7a1b      	ldrb	r3, [r3, #8]
   14a2a:	2b00      	cmp	r3, #0
   14a2c:	d002      	beq.n	14a34 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   14a2e:	697b      	ldr	r3, [r7, #20]
   14a30:	2220      	movs	r2, #32
   14a32:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   14a34:	68fb      	ldr	r3, [r7, #12]
   14a36:	7a5b      	ldrb	r3, [r3, #9]
   14a38:	2b00      	cmp	r3, #0
   14a3a:	d002      	beq.n	14a42 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   14a3c:	697b      	ldr	r3, [r7, #20]
   14a3e:	2208      	movs	r2, #8
   14a40:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   14a42:	2300      	movs	r3, #0
}
   14a44:	0018      	movs	r0, r3
   14a46:	46bd      	mov	sp, r7
   14a48:	b006      	add	sp, #24
   14a4a:	bd80      	pop	{r7, pc}
   14a4c:	00014915 	.word	0x00014915
   14a50:	00014929 	.word	0x00014929

00014a54 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   14a54:	b580      	push	{r7, lr}
   14a56:	b084      	sub	sp, #16
   14a58:	af00      	add	r7, sp, #0
   14a5a:	60f8      	str	r0, [r7, #12]
   14a5c:	60b9      	str	r1, [r7, #8]
   14a5e:	1dfb      	adds	r3, r7, #7
   14a60:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   14a62:	1dfb      	adds	r3, r7, #7
   14a64:	781b      	ldrb	r3, [r3, #0]
   14a66:	68fa      	ldr	r2, [r7, #12]
   14a68:	3302      	adds	r3, #2
   14a6a:	009b      	lsls	r3, r3, #2
   14a6c:	18d3      	adds	r3, r2, r3
   14a6e:	3304      	adds	r3, #4
   14a70:	68ba      	ldr	r2, [r7, #8]
   14a72:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   14a74:	68fb      	ldr	r3, [r7, #12]
   14a76:	2230      	movs	r2, #48	; 0x30
   14a78:	5c9b      	ldrb	r3, [r3, r2]
   14a7a:	b25a      	sxtb	r2, r3
   14a7c:	1dfb      	adds	r3, r7, #7
   14a7e:	781b      	ldrb	r3, [r3, #0]
   14a80:	2101      	movs	r1, #1
   14a82:	4099      	lsls	r1, r3
   14a84:	000b      	movs	r3, r1
   14a86:	b25b      	sxtb	r3, r3
   14a88:	4313      	orrs	r3, r2
   14a8a:	b25b      	sxtb	r3, r3
   14a8c:	b2d9      	uxtb	r1, r3
   14a8e:	68fb      	ldr	r3, [r7, #12]
   14a90:	2230      	movs	r2, #48	; 0x30
   14a92:	5499      	strb	r1, [r3, r2]
}
   14a94:	46c0      	nop			; (mov r8, r8)
   14a96:	46bd      	mov	sp, r7
   14a98:	b004      	add	sp, #16
   14a9a:	bd80      	pop	{r7, pc}

00014a9c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   14a9c:	b580      	push	{r7, lr}
   14a9e:	b084      	sub	sp, #16
   14aa0:	af00      	add	r7, sp, #0
   14aa2:	60f8      	str	r0, [r7, #12]
   14aa4:	60b9      	str	r1, [r7, #8]
   14aa6:	1dbb      	adds	r3, r7, #6
   14aa8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   14aaa:	1dbb      	adds	r3, r7, #6
   14aac:	881b      	ldrh	r3, [r3, #0]
   14aae:	2b00      	cmp	r3, #0
   14ab0:	d101      	bne.n	14ab6 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   14ab2:	2317      	movs	r3, #23
   14ab4:	e010      	b.n	14ad8 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   14ab6:	68fb      	ldr	r3, [r7, #12]
   14ab8:	79db      	ldrb	r3, [r3, #7]
   14aba:	2201      	movs	r2, #1
   14abc:	4053      	eors	r3, r2
   14abe:	b2db      	uxtb	r3, r3
   14ac0:	2b00      	cmp	r3, #0
   14ac2:	d001      	beq.n	14ac8 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   14ac4:	231c      	movs	r3, #28
   14ac6:	e007      	b.n	14ad8 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   14ac8:	1dbb      	adds	r3, r7, #6
   14aca:	881a      	ldrh	r2, [r3, #0]
   14acc:	68b9      	ldr	r1, [r7, #8]
   14ace:	68fb      	ldr	r3, [r7, #12]
   14ad0:	0018      	movs	r0, r3
   14ad2:	4b03      	ldr	r3, [pc, #12]	; (14ae0 <usart_write_buffer_job+0x44>)
   14ad4:	4798      	blx	r3
   14ad6:	0003      	movs	r3, r0
}
   14ad8:	0018      	movs	r0, r3
   14ada:	46bd      	mov	sp, r7
   14adc:	b004      	add	sp, #16
   14ade:	bd80      	pop	{r7, pc}
   14ae0:	00014981 	.word	0x00014981

00014ae4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   14ae4:	b580      	push	{r7, lr}
   14ae6:	b084      	sub	sp, #16
   14ae8:	af00      	add	r7, sp, #0
   14aea:	60f8      	str	r0, [r7, #12]
   14aec:	60b9      	str	r1, [r7, #8]
   14aee:	1dbb      	adds	r3, r7, #6
   14af0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   14af2:	1dbb      	adds	r3, r7, #6
   14af4:	881b      	ldrh	r3, [r3, #0]
   14af6:	2b00      	cmp	r3, #0
   14af8:	d101      	bne.n	14afe <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   14afa:	2317      	movs	r3, #23
   14afc:	e010      	b.n	14b20 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   14afe:	68fb      	ldr	r3, [r7, #12]
   14b00:	799b      	ldrb	r3, [r3, #6]
   14b02:	2201      	movs	r2, #1
   14b04:	4053      	eors	r3, r2
   14b06:	b2db      	uxtb	r3, r3
   14b08:	2b00      	cmp	r3, #0
   14b0a:	d001      	beq.n	14b10 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   14b0c:	231c      	movs	r3, #28
   14b0e:	e007      	b.n	14b20 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   14b10:	1dbb      	adds	r3, r7, #6
   14b12:	881a      	ldrh	r2, [r3, #0]
   14b14:	68b9      	ldr	r1, [r7, #8]
   14b16:	68fb      	ldr	r3, [r7, #12]
   14b18:	0018      	movs	r0, r3
   14b1a:	4b03      	ldr	r3, [pc, #12]	; (14b28 <usart_read_buffer_job+0x44>)
   14b1c:	4798      	blx	r3
   14b1e:	0003      	movs	r3, r0
}
   14b20:	0018      	movs	r0, r3
   14b22:	46bd      	mov	sp, r7
   14b24:	b004      	add	sp, #16
   14b26:	bd80      	pop	{r7, pc}
   14b28:	000149dd 	.word	0x000149dd

00014b2c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   14b2c:	b580      	push	{r7, lr}
   14b2e:	b084      	sub	sp, #16
   14b30:	af00      	add	r7, sp, #0
   14b32:	6078      	str	r0, [r7, #4]
   14b34:	000a      	movs	r2, r1
   14b36:	1cfb      	adds	r3, r7, #3
   14b38:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   14b3a:	1cfb      	adds	r3, r7, #3
   14b3c:	781b      	ldrb	r3, [r3, #0]
   14b3e:	2b00      	cmp	r3, #0
   14b40:	d002      	beq.n	14b48 <usart_get_job_status+0x1c>
   14b42:	2b01      	cmp	r3, #1
   14b44:	d007      	beq.n	14b56 <usart_get_job_status+0x2a>
   14b46:	e00d      	b.n	14b64 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   14b48:	230f      	movs	r3, #15
   14b4a:	18fb      	adds	r3, r7, r3
   14b4c:	687a      	ldr	r2, [r7, #4]
   14b4e:	2132      	movs	r1, #50	; 0x32
   14b50:	5c52      	ldrb	r2, [r2, r1]
   14b52:	701a      	strb	r2, [r3, #0]
			break;
   14b54:	e00b      	b.n	14b6e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   14b56:	230f      	movs	r3, #15
   14b58:	18fb      	adds	r3, r7, r3
   14b5a:	687a      	ldr	r2, [r7, #4]
   14b5c:	2133      	movs	r1, #51	; 0x33
   14b5e:	5c52      	ldrb	r2, [r2, r1]
   14b60:	701a      	strb	r2, [r3, #0]
			break;
   14b62:	e004      	b.n	14b6e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   14b64:	230f      	movs	r3, #15
   14b66:	18fb      	adds	r3, r7, r3
   14b68:	2217      	movs	r2, #23
   14b6a:	701a      	strb	r2, [r3, #0]
			break;
   14b6c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   14b6e:	230f      	movs	r3, #15
   14b70:	18fb      	adds	r3, r7, r3
   14b72:	781b      	ldrb	r3, [r3, #0]
}
   14b74:	0018      	movs	r0, r3
   14b76:	46bd      	mov	sp, r7
   14b78:	b004      	add	sp, #16
   14b7a:	bd80      	pop	{r7, pc}

00014b7c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   14b7c:	b580      	push	{r7, lr}
   14b7e:	b088      	sub	sp, #32
   14b80:	af00      	add	r7, sp, #0
   14b82:	0002      	movs	r2, r0
   14b84:	1dfb      	adds	r3, r7, #7
   14b86:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   14b88:	1dfb      	adds	r3, r7, #7
   14b8a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   14b8c:	4ba3      	ldr	r3, [pc, #652]	; (14e1c <_usart_interrupt_handler+0x2a0>)
   14b8e:	0092      	lsls	r2, r2, #2
   14b90:	58d3      	ldr	r3, [r2, r3]
   14b92:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   14b94:	69bb      	ldr	r3, [r7, #24]
   14b96:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   14b98:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   14b9a:	69bb      	ldr	r3, [r7, #24]
   14b9c:	0018      	movs	r0, r3
   14b9e:	4ba0      	ldr	r3, [pc, #640]	; (14e20 <_usart_interrupt_handler+0x2a4>)
   14ba0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   14ba2:	697b      	ldr	r3, [r7, #20]
   14ba4:	7e1b      	ldrb	r3, [r3, #24]
   14ba6:	b2da      	uxtb	r2, r3
   14ba8:	2312      	movs	r3, #18
   14baa:	18fb      	adds	r3, r7, r3
   14bac:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   14bae:	697b      	ldr	r3, [r7, #20]
   14bb0:	7d9b      	ldrb	r3, [r3, #22]
   14bb2:	b2db      	uxtb	r3, r3
   14bb4:	b29a      	uxth	r2, r3
   14bb6:	2312      	movs	r3, #18
   14bb8:	18fb      	adds	r3, r7, r3
   14bba:	2112      	movs	r1, #18
   14bbc:	1879      	adds	r1, r7, r1
   14bbe:	8809      	ldrh	r1, [r1, #0]
   14bc0:	400a      	ands	r2, r1
   14bc2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   14bc4:	69bb      	ldr	r3, [r7, #24]
   14bc6:	2230      	movs	r2, #48	; 0x30
   14bc8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   14bca:	69ba      	ldr	r2, [r7, #24]
   14bcc:	2131      	movs	r1, #49	; 0x31
   14bce:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   14bd0:	4013      	ands	r3, r2
   14bd2:	b2da      	uxtb	r2, r3
   14bd4:	2310      	movs	r3, #16
   14bd6:	18fb      	adds	r3, r7, r3
   14bd8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   14bda:	2312      	movs	r3, #18
   14bdc:	18fb      	adds	r3, r7, r3
   14bde:	881b      	ldrh	r3, [r3, #0]
   14be0:	2201      	movs	r2, #1
   14be2:	4013      	ands	r3, r2
   14be4:	d044      	beq.n	14c70 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   14be6:	69bb      	ldr	r3, [r7, #24]
   14be8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   14bea:	b29b      	uxth	r3, r3
   14bec:	2b00      	cmp	r3, #0
   14bee:	d03c      	beq.n	14c6a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   14bf0:	69bb      	ldr	r3, [r7, #24]
   14bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14bf4:	781b      	ldrb	r3, [r3, #0]
   14bf6:	b2da      	uxtb	r2, r3
   14bf8:	231c      	movs	r3, #28
   14bfa:	18fb      	adds	r3, r7, r3
   14bfc:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   14bfe:	69bb      	ldr	r3, [r7, #24]
   14c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14c02:	1c5a      	adds	r2, r3, #1
   14c04:	69bb      	ldr	r3, [r7, #24]
   14c06:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   14c08:	69bb      	ldr	r3, [r7, #24]
   14c0a:	795b      	ldrb	r3, [r3, #5]
   14c0c:	2b01      	cmp	r3, #1
   14c0e:	d113      	bne.n	14c38 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   14c10:	69bb      	ldr	r3, [r7, #24]
   14c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14c14:	781b      	ldrb	r3, [r3, #0]
   14c16:	b2db      	uxtb	r3, r3
   14c18:	021b      	lsls	r3, r3, #8
   14c1a:	b21a      	sxth	r2, r3
   14c1c:	231c      	movs	r3, #28
   14c1e:	18fb      	adds	r3, r7, r3
   14c20:	2100      	movs	r1, #0
   14c22:	5e5b      	ldrsh	r3, [r3, r1]
   14c24:	4313      	orrs	r3, r2
   14c26:	b21a      	sxth	r2, r3
   14c28:	231c      	movs	r3, #28
   14c2a:	18fb      	adds	r3, r7, r3
   14c2c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   14c2e:	69bb      	ldr	r3, [r7, #24]
   14c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14c32:	1c5a      	adds	r2, r3, #1
   14c34:	69bb      	ldr	r3, [r7, #24]
   14c36:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   14c38:	231c      	movs	r3, #28
   14c3a:	18fb      	adds	r3, r7, r3
   14c3c:	881b      	ldrh	r3, [r3, #0]
   14c3e:	05db      	lsls	r3, r3, #23
   14c40:	0ddb      	lsrs	r3, r3, #23
   14c42:	b29a      	uxth	r2, r3
   14c44:	697b      	ldr	r3, [r7, #20]
   14c46:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   14c48:	69bb      	ldr	r3, [r7, #24]
   14c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   14c4c:	b29b      	uxth	r3, r3
   14c4e:	3b01      	subs	r3, #1
   14c50:	b29b      	uxth	r3, r3
   14c52:	69ba      	ldr	r2, [r7, #24]
   14c54:	1c19      	adds	r1, r3, #0
   14c56:	85d1      	strh	r1, [r2, #46]	; 0x2e
   14c58:	2b00      	cmp	r3, #0
   14c5a:	d109      	bne.n	14c70 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   14c5c:	697b      	ldr	r3, [r7, #20]
   14c5e:	2201      	movs	r2, #1
   14c60:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   14c62:	697b      	ldr	r3, [r7, #20]
   14c64:	2202      	movs	r2, #2
   14c66:	759a      	strb	r2, [r3, #22]
   14c68:	e002      	b.n	14c70 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   14c6a:	697b      	ldr	r3, [r7, #20]
   14c6c:	2201      	movs	r2, #1
   14c6e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   14c70:	2312      	movs	r3, #18
   14c72:	18fb      	adds	r3, r7, r3
   14c74:	881b      	ldrh	r3, [r3, #0]
   14c76:	2202      	movs	r2, #2
   14c78:	4013      	ands	r3, r2
   14c7a:	d011      	beq.n	14ca0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   14c7c:	697b      	ldr	r3, [r7, #20]
   14c7e:	2202      	movs	r2, #2
   14c80:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   14c82:	69bb      	ldr	r3, [r7, #24]
   14c84:	2233      	movs	r2, #51	; 0x33
   14c86:	2100      	movs	r1, #0
   14c88:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   14c8a:	2310      	movs	r3, #16
   14c8c:	18fb      	adds	r3, r7, r3
   14c8e:	881b      	ldrh	r3, [r3, #0]
   14c90:	2201      	movs	r2, #1
   14c92:	4013      	ands	r3, r2
   14c94:	d004      	beq.n	14ca0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   14c96:	69bb      	ldr	r3, [r7, #24]
   14c98:	68db      	ldr	r3, [r3, #12]
   14c9a:	69ba      	ldr	r2, [r7, #24]
   14c9c:	0010      	movs	r0, r2
   14c9e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   14ca0:	2312      	movs	r3, #18
   14ca2:	18fb      	adds	r3, r7, r3
   14ca4:	881b      	ldrh	r3, [r3, #0]
   14ca6:	2204      	movs	r2, #4
   14ca8:	4013      	ands	r3, r2
   14caa:	d100      	bne.n	14cae <_usart_interrupt_handler+0x132>
   14cac:	e0bd      	b.n	14e2a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   14cae:	69bb      	ldr	r3, [r7, #24]
   14cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   14cb2:	b29b      	uxth	r3, r3
   14cb4:	2b00      	cmp	r3, #0
   14cb6:	d100      	bne.n	14cba <_usart_interrupt_handler+0x13e>
   14cb8:	e0b4      	b.n	14e24 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   14cba:	697b      	ldr	r3, [r7, #20]
   14cbc:	8b5b      	ldrh	r3, [r3, #26]
   14cbe:	b29b      	uxth	r3, r3
   14cc0:	b2da      	uxtb	r2, r3
   14cc2:	231f      	movs	r3, #31
   14cc4:	18fb      	adds	r3, r7, r3
   14cc6:	213f      	movs	r1, #63	; 0x3f
   14cc8:	400a      	ands	r2, r1
   14cca:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   14ccc:	231f      	movs	r3, #31
   14cce:	18fb      	adds	r3, r7, r3
   14cd0:	781b      	ldrb	r3, [r3, #0]
   14cd2:	2208      	movs	r2, #8
   14cd4:	4013      	ands	r3, r2
   14cd6:	d007      	beq.n	14ce8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   14cd8:	231f      	movs	r3, #31
   14cda:	18fb      	adds	r3, r7, r3
   14cdc:	221f      	movs	r2, #31
   14cde:	18ba      	adds	r2, r7, r2
   14ce0:	7812      	ldrb	r2, [r2, #0]
   14ce2:	2108      	movs	r1, #8
   14ce4:	438a      	bics	r2, r1
   14ce6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   14ce8:	231f      	movs	r3, #31
   14cea:	18fb      	adds	r3, r7, r3
   14cec:	781b      	ldrb	r3, [r3, #0]
   14cee:	2b00      	cmp	r3, #0
   14cf0:	d050      	beq.n	14d94 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   14cf2:	231f      	movs	r3, #31
   14cf4:	18fb      	adds	r3, r7, r3
   14cf6:	781b      	ldrb	r3, [r3, #0]
   14cf8:	2202      	movs	r2, #2
   14cfa:	4013      	ands	r3, r2
   14cfc:	d007      	beq.n	14d0e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   14cfe:	69bb      	ldr	r3, [r7, #24]
   14d00:	2232      	movs	r2, #50	; 0x32
   14d02:	211a      	movs	r1, #26
   14d04:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   14d06:	697b      	ldr	r3, [r7, #20]
   14d08:	2202      	movs	r2, #2
   14d0a:	835a      	strh	r2, [r3, #26]
   14d0c:	e036      	b.n	14d7c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   14d0e:	231f      	movs	r3, #31
   14d10:	18fb      	adds	r3, r7, r3
   14d12:	781b      	ldrb	r3, [r3, #0]
   14d14:	2204      	movs	r2, #4
   14d16:	4013      	ands	r3, r2
   14d18:	d007      	beq.n	14d2a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   14d1a:	69bb      	ldr	r3, [r7, #24]
   14d1c:	2232      	movs	r2, #50	; 0x32
   14d1e:	211e      	movs	r1, #30
   14d20:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   14d22:	697b      	ldr	r3, [r7, #20]
   14d24:	2204      	movs	r2, #4
   14d26:	835a      	strh	r2, [r3, #26]
   14d28:	e028      	b.n	14d7c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   14d2a:	231f      	movs	r3, #31
   14d2c:	18fb      	adds	r3, r7, r3
   14d2e:	781b      	ldrb	r3, [r3, #0]
   14d30:	2201      	movs	r2, #1
   14d32:	4013      	ands	r3, r2
   14d34:	d007      	beq.n	14d46 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   14d36:	69bb      	ldr	r3, [r7, #24]
   14d38:	2232      	movs	r2, #50	; 0x32
   14d3a:	2113      	movs	r1, #19
   14d3c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   14d3e:	697b      	ldr	r3, [r7, #20]
   14d40:	2201      	movs	r2, #1
   14d42:	835a      	strh	r2, [r3, #26]
   14d44:	e01a      	b.n	14d7c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   14d46:	231f      	movs	r3, #31
   14d48:	18fb      	adds	r3, r7, r3
   14d4a:	781b      	ldrb	r3, [r3, #0]
   14d4c:	2210      	movs	r2, #16
   14d4e:	4013      	ands	r3, r2
   14d50:	d007      	beq.n	14d62 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   14d52:	69bb      	ldr	r3, [r7, #24]
   14d54:	2232      	movs	r2, #50	; 0x32
   14d56:	2142      	movs	r1, #66	; 0x42
   14d58:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   14d5a:	697b      	ldr	r3, [r7, #20]
   14d5c:	2210      	movs	r2, #16
   14d5e:	835a      	strh	r2, [r3, #26]
   14d60:	e00c      	b.n	14d7c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   14d62:	231f      	movs	r3, #31
   14d64:	18fb      	adds	r3, r7, r3
   14d66:	781b      	ldrb	r3, [r3, #0]
   14d68:	2220      	movs	r2, #32
   14d6a:	4013      	ands	r3, r2
   14d6c:	d006      	beq.n	14d7c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   14d6e:	69bb      	ldr	r3, [r7, #24]
   14d70:	2232      	movs	r2, #50	; 0x32
   14d72:	2141      	movs	r1, #65	; 0x41
   14d74:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   14d76:	697b      	ldr	r3, [r7, #20]
   14d78:	2220      	movs	r2, #32
   14d7a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   14d7c:	2310      	movs	r3, #16
   14d7e:	18fb      	adds	r3, r7, r3
   14d80:	881b      	ldrh	r3, [r3, #0]
   14d82:	2204      	movs	r2, #4
   14d84:	4013      	ands	r3, r2
				if (callback_status
   14d86:	d050      	beq.n	14e2a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   14d88:	69bb      	ldr	r3, [r7, #24]
   14d8a:	695b      	ldr	r3, [r3, #20]
   14d8c:	69ba      	ldr	r2, [r7, #24]
   14d8e:	0010      	movs	r0, r2
   14d90:	4798      	blx	r3
   14d92:	e04a      	b.n	14e2a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   14d94:	697b      	ldr	r3, [r7, #20]
   14d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   14d98:	b29a      	uxth	r2, r3
   14d9a:	230e      	movs	r3, #14
   14d9c:	18fb      	adds	r3, r7, r3
   14d9e:	05d2      	lsls	r2, r2, #23
   14da0:	0dd2      	lsrs	r2, r2, #23
   14da2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   14da4:	69bb      	ldr	r3, [r7, #24]
   14da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14da8:	220e      	movs	r2, #14
   14daa:	18ba      	adds	r2, r7, r2
   14dac:	8812      	ldrh	r2, [r2, #0]
   14dae:	b2d2      	uxtb	r2, r2
   14db0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   14db2:	69bb      	ldr	r3, [r7, #24]
   14db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14db6:	1c5a      	adds	r2, r3, #1
   14db8:	69bb      	ldr	r3, [r7, #24]
   14dba:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   14dbc:	69bb      	ldr	r3, [r7, #24]
   14dbe:	795b      	ldrb	r3, [r3, #5]
   14dc0:	2b01      	cmp	r3, #1
   14dc2:	d10d      	bne.n	14de0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   14dc4:	69bb      	ldr	r3, [r7, #24]
   14dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14dc8:	220e      	movs	r2, #14
   14dca:	18ba      	adds	r2, r7, r2
   14dcc:	8812      	ldrh	r2, [r2, #0]
   14dce:	0a12      	lsrs	r2, r2, #8
   14dd0:	b292      	uxth	r2, r2
   14dd2:	b2d2      	uxtb	r2, r2
   14dd4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   14dd6:	69bb      	ldr	r3, [r7, #24]
   14dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14dda:	1c5a      	adds	r2, r3, #1
   14ddc:	69bb      	ldr	r3, [r7, #24]
   14dde:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   14de0:	69bb      	ldr	r3, [r7, #24]
   14de2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   14de4:	b29b      	uxth	r3, r3
   14de6:	3b01      	subs	r3, #1
   14de8:	b29b      	uxth	r3, r3
   14dea:	69ba      	ldr	r2, [r7, #24]
   14dec:	1c19      	adds	r1, r3, #0
   14dee:	8591      	strh	r1, [r2, #44]	; 0x2c
   14df0:	2b00      	cmp	r3, #0
   14df2:	d11a      	bne.n	14e2a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   14df4:	697b      	ldr	r3, [r7, #20]
   14df6:	2204      	movs	r2, #4
   14df8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   14dfa:	69bb      	ldr	r3, [r7, #24]
   14dfc:	2232      	movs	r2, #50	; 0x32
   14dfe:	2100      	movs	r1, #0
   14e00:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   14e02:	2310      	movs	r3, #16
   14e04:	18fb      	adds	r3, r7, r3
   14e06:	881b      	ldrh	r3, [r3, #0]
   14e08:	2202      	movs	r2, #2
   14e0a:	4013      	ands	r3, r2
					if (callback_status
   14e0c:	d00d      	beq.n	14e2a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   14e0e:	69bb      	ldr	r3, [r7, #24]
   14e10:	691b      	ldr	r3, [r3, #16]
   14e12:	69ba      	ldr	r2, [r7, #24]
   14e14:	0010      	movs	r0, r2
   14e16:	4798      	blx	r3
   14e18:	e007      	b.n	14e2a <_usart_interrupt_handler+0x2ae>
   14e1a:	46c0      	nop			; (mov r8, r8)
   14e1c:	20005588 	.word	0x20005588
   14e20:	0001495d 	.word	0x0001495d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   14e24:	697b      	ldr	r3, [r7, #20]
   14e26:	2204      	movs	r2, #4
   14e28:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   14e2a:	2312      	movs	r3, #18
   14e2c:	18fb      	adds	r3, r7, r3
   14e2e:	881b      	ldrh	r3, [r3, #0]
   14e30:	2210      	movs	r2, #16
   14e32:	4013      	ands	r3, r2
   14e34:	d010      	beq.n	14e58 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   14e36:	697b      	ldr	r3, [r7, #20]
   14e38:	2210      	movs	r2, #16
   14e3a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   14e3c:	697b      	ldr	r3, [r7, #20]
   14e3e:	2210      	movs	r2, #16
   14e40:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   14e42:	2310      	movs	r3, #16
   14e44:	18fb      	adds	r3, r7, r3
   14e46:	881b      	ldrh	r3, [r3, #0]
   14e48:	2210      	movs	r2, #16
   14e4a:	4013      	ands	r3, r2
   14e4c:	d004      	beq.n	14e58 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   14e4e:	69bb      	ldr	r3, [r7, #24]
   14e50:	69db      	ldr	r3, [r3, #28]
   14e52:	69ba      	ldr	r2, [r7, #24]
   14e54:	0010      	movs	r0, r2
   14e56:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   14e58:	2312      	movs	r3, #18
   14e5a:	18fb      	adds	r3, r7, r3
   14e5c:	881b      	ldrh	r3, [r3, #0]
   14e5e:	2220      	movs	r2, #32
   14e60:	4013      	ands	r3, r2
   14e62:	d010      	beq.n	14e86 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   14e64:	697b      	ldr	r3, [r7, #20]
   14e66:	2220      	movs	r2, #32
   14e68:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   14e6a:	697b      	ldr	r3, [r7, #20]
   14e6c:	2220      	movs	r2, #32
   14e6e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   14e70:	2310      	movs	r3, #16
   14e72:	18fb      	adds	r3, r7, r3
   14e74:	881b      	ldrh	r3, [r3, #0]
   14e76:	2208      	movs	r2, #8
   14e78:	4013      	ands	r3, r2
   14e7a:	d004      	beq.n	14e86 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   14e7c:	69bb      	ldr	r3, [r7, #24]
   14e7e:	699b      	ldr	r3, [r3, #24]
   14e80:	69ba      	ldr	r2, [r7, #24]
   14e82:	0010      	movs	r0, r2
   14e84:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   14e86:	2312      	movs	r3, #18
   14e88:	18fb      	adds	r3, r7, r3
   14e8a:	881b      	ldrh	r3, [r3, #0]
   14e8c:	2208      	movs	r2, #8
   14e8e:	4013      	ands	r3, r2
   14e90:	d010      	beq.n	14eb4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   14e92:	697b      	ldr	r3, [r7, #20]
   14e94:	2208      	movs	r2, #8
   14e96:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   14e98:	697b      	ldr	r3, [r7, #20]
   14e9a:	2208      	movs	r2, #8
   14e9c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   14e9e:	2310      	movs	r3, #16
   14ea0:	18fb      	adds	r3, r7, r3
   14ea2:	881b      	ldrh	r3, [r3, #0]
   14ea4:	2220      	movs	r2, #32
   14ea6:	4013      	ands	r3, r2
   14ea8:	d004      	beq.n	14eb4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   14eaa:	69bb      	ldr	r3, [r7, #24]
   14eac:	6a1b      	ldr	r3, [r3, #32]
   14eae:	69ba      	ldr	r2, [r7, #24]
   14eb0:	0010      	movs	r0, r2
   14eb2:	4798      	blx	r3
		}
	}
#endif
}
   14eb4:	46c0      	nop			; (mov r8, r8)
   14eb6:	46bd      	mov	sp, r7
   14eb8:	b008      	add	sp, #32
   14eba:	bd80      	pop	{r7, pc}

00014ebc <system_gclk_gen_get_config_defaults>:
{
   14ebc:	b580      	push	{r7, lr}
   14ebe:	b082      	sub	sp, #8
   14ec0:	af00      	add	r7, sp, #0
   14ec2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   14ec4:	687b      	ldr	r3, [r7, #4]
   14ec6:	2201      	movs	r2, #1
   14ec8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   14eca:	687b      	ldr	r3, [r7, #4]
   14ecc:	2200      	movs	r2, #0
   14ece:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   14ed0:	687b      	ldr	r3, [r7, #4]
   14ed2:	2206      	movs	r2, #6
   14ed4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   14ed6:	687b      	ldr	r3, [r7, #4]
   14ed8:	2200      	movs	r2, #0
   14eda:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   14edc:	687b      	ldr	r3, [r7, #4]
   14ede:	2200      	movs	r2, #0
   14ee0:	725a      	strb	r2, [r3, #9]
}
   14ee2:	46c0      	nop			; (mov r8, r8)
   14ee4:	46bd      	mov	sp, r7
   14ee6:	b002      	add	sp, #8
   14ee8:	bd80      	pop	{r7, pc}

00014eea <system_gclk_chan_get_config_defaults>:
{
   14eea:	b580      	push	{r7, lr}
   14eec:	b082      	sub	sp, #8
   14eee:	af00      	add	r7, sp, #0
   14ef0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   14ef2:	687b      	ldr	r3, [r7, #4]
   14ef4:	2200      	movs	r2, #0
   14ef6:	701a      	strb	r2, [r3, #0]
}
   14ef8:	46c0      	nop			; (mov r8, r8)
   14efa:	46bd      	mov	sp, r7
   14efc:	b002      	add	sp, #8
   14efe:	bd80      	pop	{r7, pc}

00014f00 <system_clock_source_osc8m_get_config_defaults>:
{
   14f00:	b580      	push	{r7, lr}
   14f02:	b082      	sub	sp, #8
   14f04:	af00      	add	r7, sp, #0
   14f06:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   14f08:	687b      	ldr	r3, [r7, #4]
   14f0a:	2203      	movs	r2, #3
   14f0c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   14f0e:	687b      	ldr	r3, [r7, #4]
   14f10:	2200      	movs	r2, #0
   14f12:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   14f14:	687b      	ldr	r3, [r7, #4]
   14f16:	2201      	movs	r2, #1
   14f18:	709a      	strb	r2, [r3, #2]
}
   14f1a:	46c0      	nop			; (mov r8, r8)
   14f1c:	46bd      	mov	sp, r7
   14f1e:	b002      	add	sp, #8
   14f20:	bd80      	pop	{r7, pc}
	...

00014f24 <system_cpu_clock_set_divider>:
{
   14f24:	b580      	push	{r7, lr}
   14f26:	b082      	sub	sp, #8
   14f28:	af00      	add	r7, sp, #0
   14f2a:	0002      	movs	r2, r0
   14f2c:	1dfb      	adds	r3, r7, #7
   14f2e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   14f30:	4a03      	ldr	r2, [pc, #12]	; (14f40 <system_cpu_clock_set_divider+0x1c>)
   14f32:	1dfb      	adds	r3, r7, #7
   14f34:	781b      	ldrb	r3, [r3, #0]
   14f36:	7213      	strb	r3, [r2, #8]
}
   14f38:	46c0      	nop			; (mov r8, r8)
   14f3a:	46bd      	mov	sp, r7
   14f3c:	b002      	add	sp, #8
   14f3e:	bd80      	pop	{r7, pc}
   14f40:	40000400 	.word	0x40000400

00014f44 <system_apb_clock_set_divider>:
{
   14f44:	b580      	push	{r7, lr}
   14f46:	b082      	sub	sp, #8
   14f48:	af00      	add	r7, sp, #0
   14f4a:	0002      	movs	r2, r0
   14f4c:	1dfb      	adds	r3, r7, #7
   14f4e:	701a      	strb	r2, [r3, #0]
   14f50:	1dbb      	adds	r3, r7, #6
   14f52:	1c0a      	adds	r2, r1, #0
   14f54:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14f56:	1dfb      	adds	r3, r7, #7
   14f58:	781b      	ldrb	r3, [r3, #0]
   14f5a:	2b01      	cmp	r3, #1
   14f5c:	d008      	beq.n	14f70 <system_apb_clock_set_divider+0x2c>
   14f5e:	2b02      	cmp	r3, #2
   14f60:	d00b      	beq.n	14f7a <system_apb_clock_set_divider+0x36>
   14f62:	2b00      	cmp	r3, #0
   14f64:	d10e      	bne.n	14f84 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   14f66:	4a0b      	ldr	r2, [pc, #44]	; (14f94 <system_apb_clock_set_divider+0x50>)
   14f68:	1dbb      	adds	r3, r7, #6
   14f6a:	781b      	ldrb	r3, [r3, #0]
   14f6c:	7253      	strb	r3, [r2, #9]
			break;
   14f6e:	e00b      	b.n	14f88 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   14f70:	4a08      	ldr	r2, [pc, #32]	; (14f94 <system_apb_clock_set_divider+0x50>)
   14f72:	1dbb      	adds	r3, r7, #6
   14f74:	781b      	ldrb	r3, [r3, #0]
   14f76:	7293      	strb	r3, [r2, #10]
			break;
   14f78:	e006      	b.n	14f88 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   14f7a:	4a06      	ldr	r2, [pc, #24]	; (14f94 <system_apb_clock_set_divider+0x50>)
   14f7c:	1dbb      	adds	r3, r7, #6
   14f7e:	781b      	ldrb	r3, [r3, #0]
   14f80:	72d3      	strb	r3, [r2, #11]
			break;
   14f82:	e001      	b.n	14f88 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   14f84:	2317      	movs	r3, #23
   14f86:	e000      	b.n	14f8a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   14f88:	2300      	movs	r3, #0
}
   14f8a:	0018      	movs	r0, r3
   14f8c:	46bd      	mov	sp, r7
   14f8e:	b002      	add	sp, #8
   14f90:	bd80      	pop	{r7, pc}
   14f92:	46c0      	nop			; (mov r8, r8)
   14f94:	40000400 	.word	0x40000400

00014f98 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   14f98:	b580      	push	{r7, lr}
   14f9a:	b082      	sub	sp, #8
   14f9c:	af00      	add	r7, sp, #0
   14f9e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   14fa0:	687b      	ldr	r3, [r7, #4]
   14fa2:	2201      	movs	r2, #1
   14fa4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   14fa6:	687b      	ldr	r3, [r7, #4]
   14fa8:	2200      	movs	r2, #0
   14faa:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   14fac:	687b      	ldr	r3, [r7, #4]
   14fae:	2200      	movs	r2, #0
   14fb0:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   14fb2:	687b      	ldr	r3, [r7, #4]
   14fb4:	2200      	movs	r2, #0
   14fb6:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   14fb8:	687b      	ldr	r3, [r7, #4]
   14fba:	2200      	movs	r2, #0
   14fbc:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   14fbe:	687b      	ldr	r3, [r7, #4]
   14fc0:	4a0a      	ldr	r2, [pc, #40]	; (14fec <system_clock_source_dpll_get_config_defaults+0x54>)
   14fc2:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   14fc4:	687b      	ldr	r3, [r7, #4]
   14fc6:	2280      	movs	r2, #128	; 0x80
   14fc8:	0212      	lsls	r2, r2, #8
   14fca:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   14fcc:	687b      	ldr	r3, [r7, #4]
   14fce:	2201      	movs	r2, #1
   14fd0:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   14fd2:	687b      	ldr	r3, [r7, #4]
   14fd4:	2200      	movs	r2, #0
   14fd6:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   14fd8:	687b      	ldr	r3, [r7, #4]
   14fda:	2200      	movs	r2, #0
   14fdc:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   14fde:	687b      	ldr	r3, [r7, #4]
   14fe0:	2200      	movs	r2, #0
   14fe2:	749a      	strb	r2, [r3, #18]
};
   14fe4:	46c0      	nop			; (mov r8, r8)
   14fe6:	46bd      	mov	sp, r7
   14fe8:	b002      	add	sp, #8
   14fea:	bd80      	pop	{r7, pc}
   14fec:	02dc6c00 	.word	0x02dc6c00

00014ff0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   14ff0:	b580      	push	{r7, lr}
   14ff2:	b082      	sub	sp, #8
   14ff4:	af00      	add	r7, sp, #0
   14ff6:	0002      	movs	r2, r0
   14ff8:	1dfb      	adds	r3, r7, #7
   14ffa:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   14ffc:	4a08      	ldr	r2, [pc, #32]	; (15020 <system_flash_set_waitstates+0x30>)
   14ffe:	1dfb      	adds	r3, r7, #7
   15000:	781b      	ldrb	r3, [r3, #0]
   15002:	210f      	movs	r1, #15
   15004:	400b      	ands	r3, r1
   15006:	b2d9      	uxtb	r1, r3
   15008:	6853      	ldr	r3, [r2, #4]
   1500a:	200f      	movs	r0, #15
   1500c:	4001      	ands	r1, r0
   1500e:	0049      	lsls	r1, r1, #1
   15010:	201e      	movs	r0, #30
   15012:	4383      	bics	r3, r0
   15014:	430b      	orrs	r3, r1
   15016:	6053      	str	r3, [r2, #4]
}
   15018:	46c0      	nop			; (mov r8, r8)
   1501a:	46bd      	mov	sp, r7
   1501c:	b002      	add	sp, #8
   1501e:	bd80      	pop	{r7, pc}
   15020:	41004000 	.word	0x41004000

00015024 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   15024:	b580      	push	{r7, lr}
   15026:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   15028:	46c0      	nop			; (mov r8, r8)
   1502a:	4b04      	ldr	r3, [pc, #16]	; (1503c <_system_dfll_wait_for_sync+0x18>)
   1502c:	68db      	ldr	r3, [r3, #12]
   1502e:	2210      	movs	r2, #16
   15030:	4013      	ands	r3, r2
   15032:	d0fa      	beq.n	1502a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   15034:	46c0      	nop			; (mov r8, r8)
   15036:	46bd      	mov	sp, r7
   15038:	bd80      	pop	{r7, pc}
   1503a:	46c0      	nop			; (mov r8, r8)
   1503c:	40000800 	.word	0x40000800

00015040 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   15040:	b580      	push	{r7, lr}
   15042:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   15044:	4b0c      	ldr	r3, [pc, #48]	; (15078 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15046:	2202      	movs	r2, #2
   15048:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   1504a:	4b0c      	ldr	r3, [pc, #48]	; (1507c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   1504c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   1504e:	4a0a      	ldr	r2, [pc, #40]	; (15078 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15050:	4b0b      	ldr	r3, [pc, #44]	; (15080 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   15052:	689b      	ldr	r3, [r3, #8]
   15054:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   15056:	4a08      	ldr	r2, [pc, #32]	; (15078 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15058:	4b09      	ldr	r3, [pc, #36]	; (15080 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1505a:	685b      	ldr	r3, [r3, #4]
   1505c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   1505e:	4b06      	ldr	r3, [pc, #24]	; (15078 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   15060:	2200      	movs	r2, #0
   15062:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   15064:	4b05      	ldr	r3, [pc, #20]	; (1507c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   15066:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   15068:	4a03      	ldr	r2, [pc, #12]	; (15078 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1506a:	4b05      	ldr	r3, [pc, #20]	; (15080 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1506c:	681b      	ldr	r3, [r3, #0]
   1506e:	b29b      	uxth	r3, r3
   15070:	8493      	strh	r3, [r2, #36]	; 0x24
}
   15072:	46c0      	nop			; (mov r8, r8)
   15074:	46bd      	mov	sp, r7
   15076:	bd80      	pop	{r7, pc}
   15078:	40000800 	.word	0x40000800
   1507c:	00015025 	.word	0x00015025
   15080:	20003d44 	.word	0x20003d44

00015084 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   15084:	b580      	push	{r7, lr}
   15086:	b082      	sub	sp, #8
   15088:	af00      	add	r7, sp, #0
   1508a:	0002      	movs	r2, r0
   1508c:	1dfb      	adds	r3, r7, #7
   1508e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   15090:	1dfb      	adds	r3, r7, #7
   15092:	781b      	ldrb	r3, [r3, #0]
   15094:	2b08      	cmp	r3, #8
   15096:	d841      	bhi.n	1511c <system_clock_source_get_hz+0x98>
   15098:	009a      	lsls	r2, r3, #2
   1509a:	4b23      	ldr	r3, [pc, #140]	; (15128 <system_clock_source_get_hz+0xa4>)
   1509c:	18d3      	adds	r3, r2, r3
   1509e:	681b      	ldr	r3, [r3, #0]
   150a0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   150a2:	4b22      	ldr	r3, [pc, #136]	; (1512c <system_clock_source_get_hz+0xa8>)
   150a4:	691b      	ldr	r3, [r3, #16]
   150a6:	e03a      	b.n	1511e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   150a8:	4b21      	ldr	r3, [pc, #132]	; (15130 <system_clock_source_get_hz+0xac>)
   150aa:	6a1b      	ldr	r3, [r3, #32]
   150ac:	059b      	lsls	r3, r3, #22
   150ae:	0f9b      	lsrs	r3, r3, #30
   150b0:	b2db      	uxtb	r3, r3
   150b2:	001a      	movs	r2, r3
   150b4:	4b1f      	ldr	r3, [pc, #124]	; (15134 <system_clock_source_get_hz+0xb0>)
   150b6:	40d3      	lsrs	r3, r2
   150b8:	e031      	b.n	1511e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   150ba:	2380      	movs	r3, #128	; 0x80
   150bc:	021b      	lsls	r3, r3, #8
   150be:	e02e      	b.n	1511e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   150c0:	2380      	movs	r3, #128	; 0x80
   150c2:	021b      	lsls	r3, r3, #8
   150c4:	e02b      	b.n	1511e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   150c6:	4b19      	ldr	r3, [pc, #100]	; (1512c <system_clock_source_get_hz+0xa8>)
   150c8:	695b      	ldr	r3, [r3, #20]
   150ca:	e028      	b.n	1511e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   150cc:	4b17      	ldr	r3, [pc, #92]	; (1512c <system_clock_source_get_hz+0xa8>)
   150ce:	681b      	ldr	r3, [r3, #0]
   150d0:	2202      	movs	r2, #2
   150d2:	4013      	ands	r3, r2
   150d4:	d101      	bne.n	150da <system_clock_source_get_hz+0x56>
			return 0;
   150d6:	2300      	movs	r3, #0
   150d8:	e021      	b.n	1511e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   150da:	4b17      	ldr	r3, [pc, #92]	; (15138 <system_clock_source_get_hz+0xb4>)
   150dc:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   150de:	4b13      	ldr	r3, [pc, #76]	; (1512c <system_clock_source_get_hz+0xa8>)
   150e0:	681b      	ldr	r3, [r3, #0]
   150e2:	2224      	movs	r2, #36	; 0x24
   150e4:	4013      	ands	r3, r2
   150e6:	2b04      	cmp	r3, #4
   150e8:	d109      	bne.n	150fe <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   150ea:	2000      	movs	r0, #0
   150ec:	4b13      	ldr	r3, [pc, #76]	; (1513c <system_clock_source_get_hz+0xb8>)
   150ee:	4798      	blx	r3
   150f0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   150f2:	4b0e      	ldr	r3, [pc, #56]	; (1512c <system_clock_source_get_hz+0xa8>)
   150f4:	689b      	ldr	r3, [r3, #8]
   150f6:	041b      	lsls	r3, r3, #16
   150f8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   150fa:	4353      	muls	r3, r2
   150fc:	e00f      	b.n	1511e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   150fe:	4b10      	ldr	r3, [pc, #64]	; (15140 <system_clock_source_get_hz+0xbc>)
   15100:	e00d      	b.n	1511e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   15102:	4a0b      	ldr	r2, [pc, #44]	; (15130 <system_clock_source_get_hz+0xac>)
   15104:	2350      	movs	r3, #80	; 0x50
   15106:	5cd3      	ldrb	r3, [r2, r3]
   15108:	b2db      	uxtb	r3, r3
   1510a:	001a      	movs	r2, r3
   1510c:	2304      	movs	r3, #4
   1510e:	4013      	ands	r3, r2
   15110:	d101      	bne.n	15116 <system_clock_source_get_hz+0x92>
			return 0;
   15112:	2300      	movs	r3, #0
   15114:	e003      	b.n	1511e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   15116:	4b05      	ldr	r3, [pc, #20]	; (1512c <system_clock_source_get_hz+0xa8>)
   15118:	68db      	ldr	r3, [r3, #12]
   1511a:	e000      	b.n	1511e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   1511c:	2300      	movs	r3, #0
	}
}
   1511e:	0018      	movs	r0, r3
   15120:	46bd      	mov	sp, r7
   15122:	b002      	add	sp, #8
   15124:	bd80      	pop	{r7, pc}
   15126:	46c0      	nop			; (mov r8, r8)
   15128:	000248ac 	.word	0x000248ac
   1512c:	20003d44 	.word	0x20003d44
   15130:	40000800 	.word	0x40000800
   15134:	007a1200 	.word	0x007a1200
   15138:	00015025 	.word	0x00015025
   1513c:	00015b21 	.word	0x00015b21
   15140:	02dc6c00 	.word	0x02dc6c00

00015144 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   15144:	b580      	push	{r7, lr}
   15146:	b084      	sub	sp, #16
   15148:	af00      	add	r7, sp, #0
   1514a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   1514c:	4b1a      	ldr	r3, [pc, #104]	; (151b8 <system_clock_source_osc8m_set_config+0x74>)
   1514e:	6a1b      	ldr	r3, [r3, #32]
   15150:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   15152:	687b      	ldr	r3, [r7, #4]
   15154:	781b      	ldrb	r3, [r3, #0]
   15156:	1c1a      	adds	r2, r3, #0
   15158:	2303      	movs	r3, #3
   1515a:	4013      	ands	r3, r2
   1515c:	b2da      	uxtb	r2, r3
   1515e:	230d      	movs	r3, #13
   15160:	18fb      	adds	r3, r7, r3
   15162:	2103      	movs	r1, #3
   15164:	400a      	ands	r2, r1
   15166:	0010      	movs	r0, r2
   15168:	781a      	ldrb	r2, [r3, #0]
   1516a:	2103      	movs	r1, #3
   1516c:	438a      	bics	r2, r1
   1516e:	1c11      	adds	r1, r2, #0
   15170:	1c02      	adds	r2, r0, #0
   15172:	430a      	orrs	r2, r1
   15174:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   15176:	687b      	ldr	r3, [r7, #4]
   15178:	789a      	ldrb	r2, [r3, #2]
   1517a:	230c      	movs	r3, #12
   1517c:	18fb      	adds	r3, r7, r3
   1517e:	01d0      	lsls	r0, r2, #7
   15180:	781a      	ldrb	r2, [r3, #0]
   15182:	217f      	movs	r1, #127	; 0x7f
   15184:	400a      	ands	r2, r1
   15186:	1c11      	adds	r1, r2, #0
   15188:	1c02      	adds	r2, r0, #0
   1518a:	430a      	orrs	r2, r1
   1518c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1518e:	687b      	ldr	r3, [r7, #4]
   15190:	785a      	ldrb	r2, [r3, #1]
   15192:	230c      	movs	r3, #12
   15194:	18fb      	adds	r3, r7, r3
   15196:	2101      	movs	r1, #1
   15198:	400a      	ands	r2, r1
   1519a:	0190      	lsls	r0, r2, #6
   1519c:	781a      	ldrb	r2, [r3, #0]
   1519e:	2140      	movs	r1, #64	; 0x40
   151a0:	438a      	bics	r2, r1
   151a2:	1c11      	adds	r1, r2, #0
   151a4:	1c02      	adds	r2, r0, #0
   151a6:	430a      	orrs	r2, r1
   151a8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   151aa:	4b03      	ldr	r3, [pc, #12]	; (151b8 <system_clock_source_osc8m_set_config+0x74>)
   151ac:	68fa      	ldr	r2, [r7, #12]
   151ae:	621a      	str	r2, [r3, #32]
}
   151b0:	46c0      	nop			; (mov r8, r8)
   151b2:	46bd      	mov	sp, r7
   151b4:	b004      	add	sp, #16
   151b6:	bd80      	pop	{r7, pc}
   151b8:	40000800 	.word	0x40000800

000151bc <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   151bc:	b580      	push	{r7, lr}
   151be:	b086      	sub	sp, #24
   151c0:	af00      	add	r7, sp, #0
   151c2:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   151c4:	687b      	ldr	r3, [r7, #4]
   151c6:	68db      	ldr	r3, [r3, #12]
   151c8:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   151ca:	687b      	ldr	r3, [r7, #4]
   151cc:	7d1b      	ldrb	r3, [r3, #20]
   151ce:	2b01      	cmp	r3, #1
   151d0:	d10a      	bne.n	151e8 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   151d2:	687b      	ldr	r3, [r7, #4]
   151d4:	8a1b      	ldrh	r3, [r3, #16]
   151d6:	3301      	adds	r3, #1
   151d8:	005b      	lsls	r3, r3, #1
   151da:	001a      	movs	r2, r3
   151dc:	4b36      	ldr	r3, [pc, #216]	; (152b8 <system_clock_source_dpll_set_config+0xfc>)
   151de:	0011      	movs	r1, r2
   151e0:	6978      	ldr	r0, [r7, #20]
   151e2:	4798      	blx	r3
   151e4:	0003      	movs	r3, r0
   151e6:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   151e8:	687b      	ldr	r3, [r7, #4]
   151ea:	689b      	ldr	r3, [r3, #8]
   151ec:	011a      	lsls	r2, r3, #4
   151ee:	4b32      	ldr	r3, [pc, #200]	; (152b8 <system_clock_source_dpll_set_config+0xfc>)
   151f0:	6979      	ldr	r1, [r7, #20]
   151f2:	0010      	movs	r0, r2
   151f4:	4798      	blx	r3
   151f6:	0003      	movs	r3, r0
   151f8:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   151fa:	693b      	ldr	r3, [r7, #16]
   151fc:	b2da      	uxtb	r2, r3
   151fe:	230f      	movs	r3, #15
   15200:	18fb      	adds	r3, r7, r3
   15202:	210f      	movs	r1, #15
   15204:	400a      	ands	r2, r1
   15206:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   15208:	693b      	ldr	r3, [r7, #16]
   1520a:	091b      	lsrs	r3, r3, #4
   1520c:	3b01      	subs	r3, #1
   1520e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   15210:	492a      	ldr	r1, [pc, #168]	; (152bc <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   15212:	687b      	ldr	r3, [r7, #4]
   15214:	781b      	ldrb	r3, [r3, #0]
   15216:	01db      	lsls	r3, r3, #7
   15218:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   1521a:	687b      	ldr	r3, [r7, #4]
   1521c:	785b      	ldrb	r3, [r3, #1]
   1521e:	019b      	lsls	r3, r3, #6
   15220:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   15222:	4313      	orrs	r3, r2
   15224:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   15226:	2344      	movs	r3, #68	; 0x44
   15228:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   1522a:	4b24      	ldr	r3, [pc, #144]	; (152bc <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   1522c:	220f      	movs	r2, #15
   1522e:	18ba      	adds	r2, r7, r2
   15230:	7812      	ldrb	r2, [r2, #0]
   15232:	0412      	lsls	r2, r2, #16
   15234:	0011      	movs	r1, r2
   15236:	22f0      	movs	r2, #240	; 0xf0
   15238:	0312      	lsls	r2, r2, #12
   1523a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   1523c:	693a      	ldr	r2, [r7, #16]
   1523e:	0512      	lsls	r2, r2, #20
   15240:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   15242:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   15244:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   15246:	4b1d      	ldr	r3, [pc, #116]	; (152bc <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   15248:	687a      	ldr	r2, [r7, #4]
   1524a:	8a12      	ldrh	r2, [r2, #16]
   1524c:	0412      	lsls	r2, r2, #16
   1524e:	0011      	movs	r1, r2
   15250:	4a1b      	ldr	r2, [pc, #108]	; (152c0 <system_clock_source_dpll_set_config+0x104>)
   15252:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   15254:	687a      	ldr	r2, [r7, #4]
   15256:	7892      	ldrb	r2, [r2, #2]
   15258:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   1525a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   1525c:	687a      	ldr	r2, [r7, #4]
   1525e:	7cd2      	ldrb	r2, [r2, #19]
   15260:	0212      	lsls	r2, r2, #8
   15262:	0010      	movs	r0, r2
   15264:	22e0      	movs	r2, #224	; 0xe0
   15266:	00d2      	lsls	r2, r2, #3
   15268:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   1526a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   1526c:	687a      	ldr	r2, [r7, #4]
   1526e:	7d12      	ldrb	r2, [r2, #20]
   15270:	0112      	lsls	r2, r2, #4
   15272:	0010      	movs	r0, r2
   15274:	2230      	movs	r2, #48	; 0x30
   15276:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   15278:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   1527a:	687a      	ldr	r2, [r7, #4]
   1527c:	78d2      	ldrb	r2, [r2, #3]
   1527e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   15280:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   15282:	687a      	ldr	r2, [r7, #4]
   15284:	7912      	ldrb	r2, [r2, #4]
   15286:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   15288:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   1528a:	687a      	ldr	r2, [r7, #4]
   1528c:	7c92      	ldrb	r2, [r2, #18]
   1528e:	0010      	movs	r0, r2
   15290:	2203      	movs	r2, #3
   15292:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   15294:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   15296:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   15298:	693b      	ldr	r3, [r7, #16]
   1529a:	3301      	adds	r3, #1
   1529c:	011a      	lsls	r2, r3, #4
   1529e:	230f      	movs	r3, #15
   152a0:	18fb      	adds	r3, r7, r3
   152a2:	781b      	ldrb	r3, [r3, #0]
   152a4:	18d3      	adds	r3, r2, r3
   152a6:	697a      	ldr	r2, [r7, #20]
   152a8:	4353      	muls	r3, r2
   152aa:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   152ac:	4b05      	ldr	r3, [pc, #20]	; (152c4 <system_clock_source_dpll_set_config+0x108>)
   152ae:	60da      	str	r2, [r3, #12]
}
   152b0:	46c0      	nop			; (mov r8, r8)
   152b2:	46bd      	mov	sp, r7
   152b4:	b006      	add	sp, #24
   152b6:	bd80      	pop	{r7, pc}
   152b8:	0001e469 	.word	0x0001e469
   152bc:	40000800 	.word	0x40000800
   152c0:	07ff0000 	.word	0x07ff0000
   152c4:	20003d44 	.word	0x20003d44

000152c8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   152c8:	b580      	push	{r7, lr}
   152ca:	b082      	sub	sp, #8
   152cc:	af00      	add	r7, sp, #0
   152ce:	0002      	movs	r2, r0
   152d0:	1dfb      	adds	r3, r7, #7
   152d2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   152d4:	1dfb      	adds	r3, r7, #7
   152d6:	781b      	ldrb	r3, [r3, #0]
   152d8:	2b08      	cmp	r3, #8
   152da:	d83b      	bhi.n	15354 <system_clock_source_enable+0x8c>
   152dc:	009a      	lsls	r2, r3, #2
   152de:	4b21      	ldr	r3, [pc, #132]	; (15364 <system_clock_source_enable+0x9c>)
   152e0:	18d3      	adds	r3, r2, r3
   152e2:	681b      	ldr	r3, [r3, #0]
   152e4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   152e6:	4b20      	ldr	r3, [pc, #128]	; (15368 <system_clock_source_enable+0xa0>)
   152e8:	4a1f      	ldr	r2, [pc, #124]	; (15368 <system_clock_source_enable+0xa0>)
   152ea:	6a12      	ldr	r2, [r2, #32]
   152ec:	2102      	movs	r1, #2
   152ee:	430a      	orrs	r2, r1
   152f0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   152f2:	2300      	movs	r3, #0
   152f4:	e031      	b.n	1535a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   152f6:	4b1c      	ldr	r3, [pc, #112]	; (15368 <system_clock_source_enable+0xa0>)
   152f8:	4a1b      	ldr	r2, [pc, #108]	; (15368 <system_clock_source_enable+0xa0>)
   152fa:	6992      	ldr	r2, [r2, #24]
   152fc:	2102      	movs	r1, #2
   152fe:	430a      	orrs	r2, r1
   15300:	619a      	str	r2, [r3, #24]
		break;
   15302:	e029      	b.n	15358 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   15304:	4a18      	ldr	r2, [pc, #96]	; (15368 <system_clock_source_enable+0xa0>)
   15306:	4b18      	ldr	r3, [pc, #96]	; (15368 <system_clock_source_enable+0xa0>)
   15308:	8a1b      	ldrh	r3, [r3, #16]
   1530a:	b29b      	uxth	r3, r3
   1530c:	2102      	movs	r1, #2
   1530e:	430b      	orrs	r3, r1
   15310:	b29b      	uxth	r3, r3
   15312:	8213      	strh	r3, [r2, #16]
		break;
   15314:	e020      	b.n	15358 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   15316:	4a14      	ldr	r2, [pc, #80]	; (15368 <system_clock_source_enable+0xa0>)
   15318:	4b13      	ldr	r3, [pc, #76]	; (15368 <system_clock_source_enable+0xa0>)
   1531a:	8a9b      	ldrh	r3, [r3, #20]
   1531c:	b29b      	uxth	r3, r3
   1531e:	2102      	movs	r1, #2
   15320:	430b      	orrs	r3, r1
   15322:	b29b      	uxth	r3, r3
   15324:	8293      	strh	r3, [r2, #20]
		break;
   15326:	e017      	b.n	15358 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   15328:	4b10      	ldr	r3, [pc, #64]	; (1536c <system_clock_source_enable+0xa4>)
   1532a:	681b      	ldr	r3, [r3, #0]
   1532c:	2202      	movs	r2, #2
   1532e:	431a      	orrs	r2, r3
   15330:	4b0e      	ldr	r3, [pc, #56]	; (1536c <system_clock_source_enable+0xa4>)
   15332:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   15334:	4b0e      	ldr	r3, [pc, #56]	; (15370 <system_clock_source_enable+0xa8>)
   15336:	4798      	blx	r3
		break;
   15338:	e00e      	b.n	15358 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   1533a:	4a0b      	ldr	r2, [pc, #44]	; (15368 <system_clock_source_enable+0xa0>)
   1533c:	490a      	ldr	r1, [pc, #40]	; (15368 <system_clock_source_enable+0xa0>)
   1533e:	2344      	movs	r3, #68	; 0x44
   15340:	5ccb      	ldrb	r3, [r1, r3]
   15342:	b2db      	uxtb	r3, r3
   15344:	2102      	movs	r1, #2
   15346:	430b      	orrs	r3, r1
   15348:	b2d9      	uxtb	r1, r3
   1534a:	2344      	movs	r3, #68	; 0x44
   1534c:	54d1      	strb	r1, [r2, r3]
		break;
   1534e:	e003      	b.n	15358 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   15350:	2300      	movs	r3, #0
   15352:	e002      	b.n	1535a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   15354:	2317      	movs	r3, #23
   15356:	e000      	b.n	1535a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   15358:	2300      	movs	r3, #0
}
   1535a:	0018      	movs	r0, r3
   1535c:	46bd      	mov	sp, r7
   1535e:	b002      	add	sp, #8
   15360:	bd80      	pop	{r7, pc}
   15362:	46c0      	nop			; (mov r8, r8)
   15364:	000248d0 	.word	0x000248d0
   15368:	40000800 	.word	0x40000800
   1536c:	20003d44 	.word	0x20003d44
   15370:	00015041 	.word	0x00015041

00015374 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   15374:	b580      	push	{r7, lr}
   15376:	b084      	sub	sp, #16
   15378:	af00      	add	r7, sp, #0
   1537a:	0002      	movs	r2, r0
   1537c:	1dfb      	adds	r3, r7, #7
   1537e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   15380:	2300      	movs	r3, #0
   15382:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   15384:	1dfb      	adds	r3, r7, #7
   15386:	781b      	ldrb	r3, [r3, #0]
   15388:	2b08      	cmp	r3, #8
   1538a:	d821      	bhi.n	153d0 <system_clock_source_is_ready+0x5c>
   1538c:	009a      	lsls	r2, r3, #2
   1538e:	4b18      	ldr	r3, [pc, #96]	; (153f0 <system_clock_source_is_ready+0x7c>)
   15390:	18d3      	adds	r3, r2, r3
   15392:	681b      	ldr	r3, [r3, #0]
   15394:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   15396:	2308      	movs	r3, #8
   15398:	60fb      	str	r3, [r7, #12]
		break;
   1539a:	e01b      	b.n	153d4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   1539c:	2304      	movs	r3, #4
   1539e:	60fb      	str	r3, [r7, #12]
		break;
   153a0:	e018      	b.n	153d4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   153a2:	2301      	movs	r3, #1
   153a4:	60fb      	str	r3, [r7, #12]
		break;
   153a6:	e015      	b.n	153d4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   153a8:	2302      	movs	r3, #2
   153aa:	60fb      	str	r3, [r7, #12]
		break;
   153ac:	e012      	b.n	153d4 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   153ae:	2310      	movs	r3, #16
   153b0:	60fb      	str	r3, [r7, #12]
		}
		break;
   153b2:	e00f      	b.n	153d4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   153b4:	4a0f      	ldr	r2, [pc, #60]	; (153f4 <system_clock_source_is_ready+0x80>)
   153b6:	2350      	movs	r3, #80	; 0x50
   153b8:	5cd3      	ldrb	r3, [r2, r3]
   153ba:	b2db      	uxtb	r3, r3
   153bc:	001a      	movs	r2, r3
   153be:	2303      	movs	r3, #3
   153c0:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   153c2:	3b03      	subs	r3, #3
   153c4:	425a      	negs	r2, r3
   153c6:	4153      	adcs	r3, r2
   153c8:	b2db      	uxtb	r3, r3
   153ca:	e00c      	b.n	153e6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   153cc:	2301      	movs	r3, #1
   153ce:	e00a      	b.n	153e6 <system_clock_source_is_ready+0x72>

	default:
		return false;
   153d0:	2300      	movs	r3, #0
   153d2:	e008      	b.n	153e6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   153d4:	4b07      	ldr	r3, [pc, #28]	; (153f4 <system_clock_source_is_ready+0x80>)
   153d6:	68db      	ldr	r3, [r3, #12]
   153d8:	68fa      	ldr	r2, [r7, #12]
   153da:	401a      	ands	r2, r3
   153dc:	68fb      	ldr	r3, [r7, #12]
   153de:	1ad3      	subs	r3, r2, r3
   153e0:	425a      	negs	r2, r3
   153e2:	4153      	adcs	r3, r2
   153e4:	b2db      	uxtb	r3, r3
}
   153e6:	0018      	movs	r0, r3
   153e8:	46bd      	mov	sp, r7
   153ea:	b004      	add	sp, #16
   153ec:	bd80      	pop	{r7, pc}
   153ee:	46c0      	nop			; (mov r8, r8)
   153f0:	000248f4 	.word	0x000248f4
   153f4:	40000800 	.word	0x40000800

000153f8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   153f8:	b580      	push	{r7, lr}
   153fa:	b082      	sub	sp, #8
   153fc:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   153fe:	003b      	movs	r3, r7
   15400:	2203      	movs	r2, #3
   15402:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   15404:	2300      	movs	r3, #0
   15406:	607b      	str	r3, [r7, #4]
   15408:	e009      	b.n	1541e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   1540a:	687b      	ldr	r3, [r7, #4]
   1540c:	b2db      	uxtb	r3, r3
   1540e:	003a      	movs	r2, r7
   15410:	0011      	movs	r1, r2
   15412:	0018      	movs	r0, r3
   15414:	4b05      	ldr	r3, [pc, #20]	; (1542c <_switch_peripheral_gclk+0x34>)
   15416:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   15418:	687b      	ldr	r3, [r7, #4]
   1541a:	3301      	adds	r3, #1
   1541c:	607b      	str	r3, [r7, #4]
   1541e:	687b      	ldr	r3, [r7, #4]
   15420:	2b24      	cmp	r3, #36	; 0x24
   15422:	d9f2      	bls.n	1540a <_switch_peripheral_gclk+0x12>
	}
}
   15424:	46c0      	nop			; (mov r8, r8)
   15426:	46bd      	mov	sp, r7
   15428:	b002      	add	sp, #8
   1542a:	bd80      	pop	{r7, pc}
   1542c:	000159fd 	.word	0x000159fd

00015430 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   15430:	b580      	push	{r7, lr}
   15432:	b0a6      	sub	sp, #152	; 0x98
   15434:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   15436:	4b92      	ldr	r3, [pc, #584]	; (15680 <system_clock_init+0x250>)
   15438:	22c2      	movs	r2, #194	; 0xc2
   1543a:	00d2      	lsls	r2, r2, #3
   1543c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   1543e:	2003      	movs	r0, #3
   15440:	4b90      	ldr	r3, [pc, #576]	; (15684 <system_clock_init+0x254>)
   15442:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   15444:	4b90      	ldr	r3, [pc, #576]	; (15688 <system_clock_init+0x258>)
   15446:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   15448:	2394      	movs	r3, #148	; 0x94
   1544a:	18fb      	adds	r3, r7, r3
   1544c:	0018      	movs	r0, r3
   1544e:	4b8f      	ldr	r3, [pc, #572]	; (1568c <system_clock_init+0x25c>)
   15450:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   15452:	2394      	movs	r3, #148	; 0x94
   15454:	18fb      	adds	r3, r7, r3
   15456:	2200      	movs	r2, #0
   15458:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   1545a:	2394      	movs	r3, #148	; 0x94
   1545c:	18fb      	adds	r3, r7, r3
   1545e:	2201      	movs	r2, #1
   15460:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   15462:	2394      	movs	r3, #148	; 0x94
   15464:	18fb      	adds	r3, r7, r3
   15466:	2200      	movs	r2, #0
   15468:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   1546a:	2394      	movs	r3, #148	; 0x94
   1546c:	18fb      	adds	r3, r7, r3
   1546e:	0018      	movs	r0, r3
   15470:	4b87      	ldr	r3, [pc, #540]	; (15690 <system_clock_init+0x260>)
   15472:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   15474:	2006      	movs	r0, #6
   15476:	4b87      	ldr	r3, [pc, #540]	; (15694 <system_clock_init+0x264>)
   15478:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1547a:	4b87      	ldr	r3, [pc, #540]	; (15698 <system_clock_init+0x268>)
   1547c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   1547e:	2360      	movs	r3, #96	; 0x60
   15480:	18fb      	adds	r3, r7, r3
   15482:	0018      	movs	r0, r3
   15484:	4b85      	ldr	r3, [pc, #532]	; (1569c <system_clock_init+0x26c>)
   15486:	4798      	blx	r3
   15488:	2360      	movs	r3, #96	; 0x60
   1548a:	18fb      	adds	r3, r7, r3
   1548c:	2206      	movs	r2, #6
   1548e:	701a      	strb	r2, [r3, #0]
   15490:	2360      	movs	r3, #96	; 0x60
   15492:	18fb      	adds	r3, r7, r3
   15494:	2208      	movs	r2, #8
   15496:	605a      	str	r2, [r3, #4]
   15498:	2360      	movs	r3, #96	; 0x60
   1549a:	18fb      	adds	r3, r7, r3
   1549c:	2200      	movs	r2, #0
   1549e:	721a      	strb	r2, [r3, #8]
   154a0:	2360      	movs	r3, #96	; 0x60
   154a2:	18fb      	adds	r3, r7, r3
   154a4:	2200      	movs	r2, #0
   154a6:	725a      	strb	r2, [r3, #9]
   154a8:	2360      	movs	r3, #96	; 0x60
   154aa:	18fb      	adds	r3, r7, r3
   154ac:	0019      	movs	r1, r3
   154ae:	2001      	movs	r0, #1
   154b0:	4b7b      	ldr	r3, [pc, #492]	; (156a0 <system_clock_init+0x270>)
   154b2:	4798      	blx	r3
   154b4:	2001      	movs	r0, #1
   154b6:	4b7b      	ldr	r3, [pc, #492]	; (156a4 <system_clock_init+0x274>)
   154b8:	4798      	blx	r3
   154ba:	2354      	movs	r3, #84	; 0x54
   154bc:	18fb      	adds	r3, r7, r3
   154be:	0018      	movs	r0, r3
   154c0:	4b76      	ldr	r3, [pc, #472]	; (1569c <system_clock_init+0x26c>)
   154c2:	4798      	blx	r3
   154c4:	2354      	movs	r3, #84	; 0x54
   154c6:	18fb      	adds	r3, r7, r3
   154c8:	2203      	movs	r2, #3
   154ca:	701a      	strb	r2, [r3, #0]
   154cc:	2354      	movs	r3, #84	; 0x54
   154ce:	18fb      	adds	r3, r7, r3
   154d0:	2201      	movs	r2, #1
   154d2:	605a      	str	r2, [r3, #4]
   154d4:	2354      	movs	r3, #84	; 0x54
   154d6:	18fb      	adds	r3, r7, r3
   154d8:	2201      	movs	r2, #1
   154da:	721a      	strb	r2, [r3, #8]
   154dc:	2354      	movs	r3, #84	; 0x54
   154de:	18fb      	adds	r3, r7, r3
   154e0:	2200      	movs	r2, #0
   154e2:	725a      	strb	r2, [r3, #9]
   154e4:	2354      	movs	r3, #84	; 0x54
   154e6:	18fb      	adds	r3, r7, r3
   154e8:	0019      	movs	r1, r3
   154ea:	2002      	movs	r0, #2
   154ec:	4b6c      	ldr	r3, [pc, #432]	; (156a0 <system_clock_init+0x270>)
   154ee:	4798      	blx	r3
   154f0:	2002      	movs	r0, #2
   154f2:	4b6c      	ldr	r3, [pc, #432]	; (156a4 <system_clock_init+0x274>)
   154f4:	4798      	blx	r3
   154f6:	233c      	movs	r3, #60	; 0x3c
   154f8:	18fb      	adds	r3, r7, r3
   154fa:	0018      	movs	r0, r3
   154fc:	4b67      	ldr	r3, [pc, #412]	; (1569c <system_clock_init+0x26c>)
   154fe:	4798      	blx	r3
   15500:	233c      	movs	r3, #60	; 0x3c
   15502:	18fb      	adds	r3, r7, r3
   15504:	2203      	movs	r2, #3
   15506:	701a      	strb	r2, [r3, #0]
   15508:	233c      	movs	r3, #60	; 0x3c
   1550a:	18fb      	adds	r3, r7, r3
   1550c:	2220      	movs	r2, #32
   1550e:	605a      	str	r2, [r3, #4]
   15510:	233c      	movs	r3, #60	; 0x3c
   15512:	18fb      	adds	r3, r7, r3
   15514:	2200      	movs	r2, #0
   15516:	721a      	strb	r2, [r3, #8]
   15518:	233c      	movs	r3, #60	; 0x3c
   1551a:	18fb      	adds	r3, r7, r3
   1551c:	2200      	movs	r2, #0
   1551e:	725a      	strb	r2, [r3, #9]
   15520:	233c      	movs	r3, #60	; 0x3c
   15522:	18fb      	adds	r3, r7, r3
   15524:	0019      	movs	r1, r3
   15526:	2004      	movs	r0, #4
   15528:	4b5d      	ldr	r3, [pc, #372]	; (156a0 <system_clock_init+0x270>)
   1552a:	4798      	blx	r3
   1552c:	2004      	movs	r0, #4
   1552e:	4b5d      	ldr	r3, [pc, #372]	; (156a4 <system_clock_init+0x274>)
   15530:	4798      	blx	r3
   15532:	2330      	movs	r3, #48	; 0x30
   15534:	18fb      	adds	r3, r7, r3
   15536:	0018      	movs	r0, r3
   15538:	4b58      	ldr	r3, [pc, #352]	; (1569c <system_clock_init+0x26c>)
   1553a:	4798      	blx	r3
   1553c:	2330      	movs	r3, #48	; 0x30
   1553e:	18fb      	adds	r3, r7, r3
   15540:	2206      	movs	r2, #6
   15542:	701a      	strb	r2, [r3, #0]
   15544:	2330      	movs	r3, #48	; 0x30
   15546:	18fb      	adds	r3, r7, r3
   15548:	2201      	movs	r2, #1
   1554a:	605a      	str	r2, [r3, #4]
   1554c:	2330      	movs	r3, #48	; 0x30
   1554e:	18fb      	adds	r3, r7, r3
   15550:	2200      	movs	r2, #0
   15552:	721a      	strb	r2, [r3, #8]
   15554:	2330      	movs	r3, #48	; 0x30
   15556:	18fb      	adds	r3, r7, r3
   15558:	2200      	movs	r2, #0
   1555a:	725a      	strb	r2, [r3, #9]
   1555c:	2330      	movs	r3, #48	; 0x30
   1555e:	18fb      	adds	r3, r7, r3
   15560:	0019      	movs	r1, r3
   15562:	2005      	movs	r0, #5
   15564:	4b4e      	ldr	r3, [pc, #312]	; (156a0 <system_clock_init+0x270>)
   15566:	4798      	blx	r3
   15568:	2005      	movs	r0, #5
   1556a:	4b4e      	ldr	r3, [pc, #312]	; (156a4 <system_clock_init+0x274>)
   1556c:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   1556e:	2390      	movs	r3, #144	; 0x90
   15570:	18fb      	adds	r3, r7, r3
   15572:	0018      	movs	r0, r3
   15574:	4b4c      	ldr	r3, [pc, #304]	; (156a8 <system_clock_init+0x278>)
   15576:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   15578:	2390      	movs	r3, #144	; 0x90
   1557a:	18fb      	adds	r3, r7, r3
   1557c:	2201      	movs	r2, #1
   1557e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   15580:	2390      	movs	r3, #144	; 0x90
   15582:	18fb      	adds	r3, r7, r3
   15584:	0019      	movs	r1, r3
   15586:	2001      	movs	r0, #1
   15588:	4b48      	ldr	r3, [pc, #288]	; (156ac <system_clock_init+0x27c>)
   1558a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   1558c:	2001      	movs	r0, #1
   1558e:	4b48      	ldr	r3, [pc, #288]	; (156b0 <system_clock_init+0x280>)
   15590:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   15592:	2378      	movs	r3, #120	; 0x78
   15594:	18fb      	adds	r3, r7, r3
   15596:	0018      	movs	r0, r3
   15598:	4b46      	ldr	r3, [pc, #280]	; (156b4 <system_clock_init+0x284>)
   1559a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   1559c:	2378      	movs	r3, #120	; 0x78
   1559e:	18fb      	adds	r3, r7, r3
   155a0:	2200      	movs	r2, #0
   155a2:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   155a4:	2378      	movs	r3, #120	; 0x78
   155a6:	18fb      	adds	r3, r7, r3
   155a8:	2200      	movs	r2, #0
   155aa:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   155ac:	2378      	movs	r3, #120	; 0x78
   155ae:	18fb      	adds	r3, r7, r3
   155b0:	2200      	movs	r2, #0
   155b2:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   155b4:	2378      	movs	r3, #120	; 0x78
   155b6:	18fb      	adds	r3, r7, r3
   155b8:	2200      	movs	r2, #0
   155ba:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   155bc:	2378      	movs	r3, #120	; 0x78
   155be:	18fb      	adds	r3, r7, r3
   155c0:	2200      	movs	r2, #0
   155c2:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   155c4:	2378      	movs	r3, #120	; 0x78
   155c6:	18fb      	adds	r3, r7, r3
   155c8:	2200      	movs	r2, #0
   155ca:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   155cc:	2378      	movs	r3, #120	; 0x78
   155ce:	18fb      	adds	r3, r7, r3
   155d0:	2200      	movs	r2, #0
   155d2:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   155d4:	2378      	movs	r3, #120	; 0x78
   155d6:	18fb      	adds	r3, r7, r3
   155d8:	2202      	movs	r2, #2
   155da:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   155dc:	2378      	movs	r3, #120	; 0x78
   155de:	18fb      	adds	r3, r7, r3
   155e0:	4a35      	ldr	r2, [pc, #212]	; (156b8 <system_clock_init+0x288>)
   155e2:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   155e4:	2378      	movs	r3, #120	; 0x78
   155e6:	18fb      	adds	r3, r7, r3
   155e8:	2201      	movs	r2, #1
   155ea:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   155ec:	2378      	movs	r3, #120	; 0x78
   155ee:	18fb      	adds	r3, r7, r3
   155f0:	4a32      	ldr	r2, [pc, #200]	; (156bc <system_clock_init+0x28c>)
   155f2:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   155f4:	2378      	movs	r3, #120	; 0x78
   155f6:	18fb      	adds	r3, r7, r3
   155f8:	0018      	movs	r0, r3
   155fa:	4b31      	ldr	r3, [pc, #196]	; (156c0 <system_clock_init+0x290>)
   155fc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   155fe:	2008      	movs	r0, #8
   15600:	4b24      	ldr	r3, [pc, #144]	; (15694 <system_clock_init+0x264>)
   15602:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   15604:	46c0      	nop			; (mov r8, r8)
   15606:	2008      	movs	r0, #8
   15608:	4b2e      	ldr	r3, [pc, #184]	; (156c4 <system_clock_init+0x294>)
   1560a:	4798      	blx	r3
   1560c:	0003      	movs	r3, r0
   1560e:	001a      	movs	r2, r3
   15610:	2301      	movs	r3, #1
   15612:	4053      	eors	r3, r2
   15614:	b2db      	uxtb	r3, r3
   15616:	2b00      	cmp	r3, #0
   15618:	d1f5      	bne.n	15606 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   1561a:	4919      	ldr	r1, [pc, #100]	; (15680 <system_clock_init+0x250>)
   1561c:	2244      	movs	r2, #68	; 0x44
   1561e:	5c8b      	ldrb	r3, [r1, r2]
   15620:	2080      	movs	r0, #128	; 0x80
   15622:	4240      	negs	r0, r0
   15624:	4303      	orrs	r3, r0
   15626:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   15628:	2000      	movs	r0, #0
   1562a:	4b27      	ldr	r3, [pc, #156]	; (156c8 <system_clock_init+0x298>)
   1562c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   1562e:	2100      	movs	r1, #0
   15630:	2000      	movs	r0, #0
   15632:	4b26      	ldr	r3, [pc, #152]	; (156cc <system_clock_init+0x29c>)
   15634:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   15636:	2100      	movs	r1, #0
   15638:	2001      	movs	r0, #1
   1563a:	4b24      	ldr	r3, [pc, #144]	; (156cc <system_clock_init+0x29c>)
   1563c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   1563e:	2100      	movs	r1, #0
   15640:	2002      	movs	r0, #2
   15642:	4b22      	ldr	r3, [pc, #136]	; (156cc <system_clock_init+0x29c>)
   15644:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   15646:	003b      	movs	r3, r7
   15648:	0018      	movs	r0, r3
   1564a:	4b14      	ldr	r3, [pc, #80]	; (1569c <system_clock_init+0x26c>)
   1564c:	4798      	blx	r3
   1564e:	003b      	movs	r3, r7
   15650:	2208      	movs	r2, #8
   15652:	701a      	strb	r2, [r3, #0]
   15654:	003b      	movs	r3, r7
   15656:	2201      	movs	r2, #1
   15658:	605a      	str	r2, [r3, #4]
   1565a:	003b      	movs	r3, r7
   1565c:	2200      	movs	r2, #0
   1565e:	721a      	strb	r2, [r3, #8]
   15660:	003b      	movs	r3, r7
   15662:	2201      	movs	r2, #1
   15664:	725a      	strb	r2, [r3, #9]
   15666:	003b      	movs	r3, r7
   15668:	0019      	movs	r1, r3
   1566a:	2000      	movs	r0, #0
   1566c:	4b0c      	ldr	r3, [pc, #48]	; (156a0 <system_clock_init+0x270>)
   1566e:	4798      	blx	r3
   15670:	2000      	movs	r0, #0
   15672:	4b0c      	ldr	r3, [pc, #48]	; (156a4 <system_clock_init+0x274>)
   15674:	4798      	blx	r3
#endif
}
   15676:	46c0      	nop			; (mov r8, r8)
   15678:	46bd      	mov	sp, r7
   1567a:	b026      	add	sp, #152	; 0x98
   1567c:	bd80      	pop	{r7, pc}
   1567e:	46c0      	nop			; (mov r8, r8)
   15680:	40000800 	.word	0x40000800
   15684:	00014ff1 	.word	0x00014ff1
   15688:	000153f9 	.word	0x000153f9
   1568c:	00014f01 	.word	0x00014f01
   15690:	00015145 	.word	0x00015145
   15694:	000152c9 	.word	0x000152c9
   15698:	00015775 	.word	0x00015775
   1569c:	00014ebd 	.word	0x00014ebd
   156a0:	000157a5 	.word	0x000157a5
   156a4:	000158c9 	.word	0x000158c9
   156a8:	00014eeb 	.word	0x00014eeb
   156ac:	000159fd 	.word	0x000159fd
   156b0:	00015a41 	.word	0x00015a41
   156b4:	00014f99 	.word	0x00014f99
   156b8:	000f4240 	.word	0x000f4240
   156bc:	02dc6c00 	.word	0x02dc6c00
   156c0:	000151bd 	.word	0x000151bd
   156c4:	00015375 	.word	0x00015375
   156c8:	00014f25 	.word	0x00014f25
   156cc:	00014f45 	.word	0x00014f45

000156d0 <system_apb_clock_set_mask>:
{
   156d0:	b580      	push	{r7, lr}
   156d2:	b082      	sub	sp, #8
   156d4:	af00      	add	r7, sp, #0
   156d6:	0002      	movs	r2, r0
   156d8:	6039      	str	r1, [r7, #0]
   156da:	1dfb      	adds	r3, r7, #7
   156dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   156de:	1dfb      	adds	r3, r7, #7
   156e0:	781b      	ldrb	r3, [r3, #0]
   156e2:	2b01      	cmp	r3, #1
   156e4:	d00a      	beq.n	156fc <system_apb_clock_set_mask+0x2c>
   156e6:	2b02      	cmp	r3, #2
   156e8:	d00f      	beq.n	1570a <system_apb_clock_set_mask+0x3a>
   156ea:	2b00      	cmp	r3, #0
   156ec:	d114      	bne.n	15718 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   156ee:	4b0e      	ldr	r3, [pc, #56]	; (15728 <system_apb_clock_set_mask+0x58>)
   156f0:	4a0d      	ldr	r2, [pc, #52]	; (15728 <system_apb_clock_set_mask+0x58>)
   156f2:	6991      	ldr	r1, [r2, #24]
   156f4:	683a      	ldr	r2, [r7, #0]
   156f6:	430a      	orrs	r2, r1
   156f8:	619a      	str	r2, [r3, #24]
			break;
   156fa:	e00f      	b.n	1571c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   156fc:	4b0a      	ldr	r3, [pc, #40]	; (15728 <system_apb_clock_set_mask+0x58>)
   156fe:	4a0a      	ldr	r2, [pc, #40]	; (15728 <system_apb_clock_set_mask+0x58>)
   15700:	69d1      	ldr	r1, [r2, #28]
   15702:	683a      	ldr	r2, [r7, #0]
   15704:	430a      	orrs	r2, r1
   15706:	61da      	str	r2, [r3, #28]
			break;
   15708:	e008      	b.n	1571c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1570a:	4b07      	ldr	r3, [pc, #28]	; (15728 <system_apb_clock_set_mask+0x58>)
   1570c:	4a06      	ldr	r2, [pc, #24]	; (15728 <system_apb_clock_set_mask+0x58>)
   1570e:	6a11      	ldr	r1, [r2, #32]
   15710:	683a      	ldr	r2, [r7, #0]
   15712:	430a      	orrs	r2, r1
   15714:	621a      	str	r2, [r3, #32]
			break;
   15716:	e001      	b.n	1571c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   15718:	2317      	movs	r3, #23
   1571a:	e000      	b.n	1571e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1571c:	2300      	movs	r3, #0
}
   1571e:	0018      	movs	r0, r3
   15720:	46bd      	mov	sp, r7
   15722:	b002      	add	sp, #8
   15724:	bd80      	pop	{r7, pc}
   15726:	46c0      	nop			; (mov r8, r8)
   15728:	40000400 	.word	0x40000400

0001572c <system_interrupt_enter_critical_section>:
{
   1572c:	b580      	push	{r7, lr}
   1572e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   15730:	4b02      	ldr	r3, [pc, #8]	; (1573c <system_interrupt_enter_critical_section+0x10>)
   15732:	4798      	blx	r3
}
   15734:	46c0      	nop			; (mov r8, r8)
   15736:	46bd      	mov	sp, r7
   15738:	bd80      	pop	{r7, pc}
   1573a:	46c0      	nop			; (mov r8, r8)
   1573c:	00011d69 	.word	0x00011d69

00015740 <system_interrupt_leave_critical_section>:
{
   15740:	b580      	push	{r7, lr}
   15742:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   15744:	4b02      	ldr	r3, [pc, #8]	; (15750 <system_interrupt_leave_critical_section+0x10>)
   15746:	4798      	blx	r3
}
   15748:	46c0      	nop			; (mov r8, r8)
   1574a:	46bd      	mov	sp, r7
   1574c:	bd80      	pop	{r7, pc}
   1574e:	46c0      	nop			; (mov r8, r8)
   15750:	00011dbd 	.word	0x00011dbd

00015754 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   15754:	b580      	push	{r7, lr}
   15756:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   15758:	4b05      	ldr	r3, [pc, #20]	; (15770 <system_gclk_is_syncing+0x1c>)
   1575a:	785b      	ldrb	r3, [r3, #1]
   1575c:	b2db      	uxtb	r3, r3
   1575e:	b25b      	sxtb	r3, r3
   15760:	2b00      	cmp	r3, #0
   15762:	da01      	bge.n	15768 <system_gclk_is_syncing+0x14>
		return true;
   15764:	2301      	movs	r3, #1
   15766:	e000      	b.n	1576a <system_gclk_is_syncing+0x16>
	}

	return false;
   15768:	2300      	movs	r3, #0
}
   1576a:	0018      	movs	r0, r3
   1576c:	46bd      	mov	sp, r7
   1576e:	bd80      	pop	{r7, pc}
   15770:	40000c00 	.word	0x40000c00

00015774 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   15774:	b580      	push	{r7, lr}
   15776:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   15778:	2108      	movs	r1, #8
   1577a:	2000      	movs	r0, #0
   1577c:	4b07      	ldr	r3, [pc, #28]	; (1579c <system_gclk_init+0x28>)
   1577e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   15780:	4b07      	ldr	r3, [pc, #28]	; (157a0 <system_gclk_init+0x2c>)
   15782:	2201      	movs	r2, #1
   15784:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   15786:	46c0      	nop			; (mov r8, r8)
   15788:	4b05      	ldr	r3, [pc, #20]	; (157a0 <system_gclk_init+0x2c>)
   1578a:	781b      	ldrb	r3, [r3, #0]
   1578c:	b2db      	uxtb	r3, r3
   1578e:	001a      	movs	r2, r3
   15790:	2301      	movs	r3, #1
   15792:	4013      	ands	r3, r2
   15794:	d1f8      	bne.n	15788 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   15796:	46c0      	nop			; (mov r8, r8)
   15798:	46bd      	mov	sp, r7
   1579a:	bd80      	pop	{r7, pc}
   1579c:	000156d1 	.word	0x000156d1
   157a0:	40000c00 	.word	0x40000c00

000157a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   157a4:	b580      	push	{r7, lr}
   157a6:	b086      	sub	sp, #24
   157a8:	af00      	add	r7, sp, #0
   157aa:	0002      	movs	r2, r0
   157ac:	6039      	str	r1, [r7, #0]
   157ae:	1dfb      	adds	r3, r7, #7
   157b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   157b2:	1dfb      	adds	r3, r7, #7
   157b4:	781b      	ldrb	r3, [r3, #0]
   157b6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   157b8:	1dfb      	adds	r3, r7, #7
   157ba:	781b      	ldrb	r3, [r3, #0]
   157bc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   157be:	683b      	ldr	r3, [r7, #0]
   157c0:	781b      	ldrb	r3, [r3, #0]
   157c2:	021b      	lsls	r3, r3, #8
   157c4:	001a      	movs	r2, r3
   157c6:	697b      	ldr	r3, [r7, #20]
   157c8:	4313      	orrs	r3, r2
   157ca:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   157cc:	683b      	ldr	r3, [r7, #0]
   157ce:	785b      	ldrb	r3, [r3, #1]
   157d0:	2b00      	cmp	r3, #0
   157d2:	d004      	beq.n	157de <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   157d4:	697b      	ldr	r3, [r7, #20]
   157d6:	2280      	movs	r2, #128	; 0x80
   157d8:	02d2      	lsls	r2, r2, #11
   157da:	4313      	orrs	r3, r2
   157dc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   157de:	683b      	ldr	r3, [r7, #0]
   157e0:	7a5b      	ldrb	r3, [r3, #9]
   157e2:	2b00      	cmp	r3, #0
   157e4:	d004      	beq.n	157f0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   157e6:	697b      	ldr	r3, [r7, #20]
   157e8:	2280      	movs	r2, #128	; 0x80
   157ea:	0312      	lsls	r2, r2, #12
   157ec:	4313      	orrs	r3, r2
   157ee:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   157f0:	683b      	ldr	r3, [r7, #0]
   157f2:	685b      	ldr	r3, [r3, #4]
   157f4:	2b01      	cmp	r3, #1
   157f6:	d92c      	bls.n	15852 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   157f8:	683b      	ldr	r3, [r7, #0]
   157fa:	685a      	ldr	r2, [r3, #4]
   157fc:	683b      	ldr	r3, [r7, #0]
   157fe:	685b      	ldr	r3, [r3, #4]
   15800:	3b01      	subs	r3, #1
   15802:	4013      	ands	r3, r2
   15804:	d11a      	bne.n	1583c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   15806:	2300      	movs	r3, #0
   15808:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1580a:	2302      	movs	r3, #2
   1580c:	60bb      	str	r3, [r7, #8]
   1580e:	e005      	b.n	1581c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   15810:	68fb      	ldr	r3, [r7, #12]
   15812:	3301      	adds	r3, #1
   15814:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   15816:	68bb      	ldr	r3, [r7, #8]
   15818:	005b      	lsls	r3, r3, #1
   1581a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   1581c:	683b      	ldr	r3, [r7, #0]
   1581e:	685a      	ldr	r2, [r3, #4]
   15820:	68bb      	ldr	r3, [r7, #8]
   15822:	429a      	cmp	r2, r3
   15824:	d8f4      	bhi.n	15810 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   15826:	68fb      	ldr	r3, [r7, #12]
   15828:	021b      	lsls	r3, r3, #8
   1582a:	693a      	ldr	r2, [r7, #16]
   1582c:	4313      	orrs	r3, r2
   1582e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   15830:	697b      	ldr	r3, [r7, #20]
   15832:	2280      	movs	r2, #128	; 0x80
   15834:	0352      	lsls	r2, r2, #13
   15836:	4313      	orrs	r3, r2
   15838:	617b      	str	r3, [r7, #20]
   1583a:	e00a      	b.n	15852 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1583c:	683b      	ldr	r3, [r7, #0]
   1583e:	685b      	ldr	r3, [r3, #4]
   15840:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   15842:	693a      	ldr	r2, [r7, #16]
   15844:	4313      	orrs	r3, r2
   15846:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   15848:	697b      	ldr	r3, [r7, #20]
   1584a:	2280      	movs	r2, #128	; 0x80
   1584c:	0292      	lsls	r2, r2, #10
   1584e:	4313      	orrs	r3, r2
   15850:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   15852:	683b      	ldr	r3, [r7, #0]
   15854:	7a1b      	ldrb	r3, [r3, #8]
   15856:	2b00      	cmp	r3, #0
   15858:	d004      	beq.n	15864 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1585a:	697b      	ldr	r3, [r7, #20]
   1585c:	2280      	movs	r2, #128	; 0x80
   1585e:	0392      	lsls	r2, r2, #14
   15860:	4313      	orrs	r3, r2
   15862:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   15864:	46c0      	nop			; (mov r8, r8)
   15866:	4b13      	ldr	r3, [pc, #76]	; (158b4 <system_gclk_gen_set_config+0x110>)
   15868:	4798      	blx	r3
   1586a:	1e03      	subs	r3, r0, #0
   1586c:	d1fb      	bne.n	15866 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1586e:	4b12      	ldr	r3, [pc, #72]	; (158b8 <system_gclk_gen_set_config+0x114>)
   15870:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   15872:	4a12      	ldr	r2, [pc, #72]	; (158bc <system_gclk_gen_set_config+0x118>)
   15874:	1dfb      	adds	r3, r7, #7
   15876:	781b      	ldrb	r3, [r3, #0]
   15878:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1587a:	46c0      	nop			; (mov r8, r8)
   1587c:	4b0d      	ldr	r3, [pc, #52]	; (158b4 <system_gclk_gen_set_config+0x110>)
   1587e:	4798      	blx	r3
   15880:	1e03      	subs	r3, r0, #0
   15882:	d1fb      	bne.n	1587c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   15884:	4b0e      	ldr	r3, [pc, #56]	; (158c0 <system_gclk_gen_set_config+0x11c>)
   15886:	693a      	ldr	r2, [r7, #16]
   15888:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   1588a:	46c0      	nop			; (mov r8, r8)
   1588c:	4b09      	ldr	r3, [pc, #36]	; (158b4 <system_gclk_gen_set_config+0x110>)
   1588e:	4798      	blx	r3
   15890:	1e03      	subs	r3, r0, #0
   15892:	d1fb      	bne.n	1588c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   15894:	4b0a      	ldr	r3, [pc, #40]	; (158c0 <system_gclk_gen_set_config+0x11c>)
   15896:	4a0a      	ldr	r2, [pc, #40]	; (158c0 <system_gclk_gen_set_config+0x11c>)
   15898:	6851      	ldr	r1, [r2, #4]
   1589a:	2280      	movs	r2, #128	; 0x80
   1589c:	0252      	lsls	r2, r2, #9
   1589e:	4011      	ands	r1, r2
   158a0:	697a      	ldr	r2, [r7, #20]
   158a2:	430a      	orrs	r2, r1
   158a4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   158a6:	4b07      	ldr	r3, [pc, #28]	; (158c4 <system_gclk_gen_set_config+0x120>)
   158a8:	4798      	blx	r3
}
   158aa:	46c0      	nop			; (mov r8, r8)
   158ac:	46bd      	mov	sp, r7
   158ae:	b006      	add	sp, #24
   158b0:	bd80      	pop	{r7, pc}
   158b2:	46c0      	nop			; (mov r8, r8)
   158b4:	00015755 	.word	0x00015755
   158b8:	0001572d 	.word	0x0001572d
   158bc:	40000c08 	.word	0x40000c08
   158c0:	40000c00 	.word	0x40000c00
   158c4:	00015741 	.word	0x00015741

000158c8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   158c8:	b580      	push	{r7, lr}
   158ca:	b082      	sub	sp, #8
   158cc:	af00      	add	r7, sp, #0
   158ce:	0002      	movs	r2, r0
   158d0:	1dfb      	adds	r3, r7, #7
   158d2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   158d4:	46c0      	nop			; (mov r8, r8)
   158d6:	4b0e      	ldr	r3, [pc, #56]	; (15910 <system_gclk_gen_enable+0x48>)
   158d8:	4798      	blx	r3
   158da:	1e03      	subs	r3, r0, #0
   158dc:	d1fb      	bne.n	158d6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   158de:	4b0d      	ldr	r3, [pc, #52]	; (15914 <system_gclk_gen_enable+0x4c>)
   158e0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   158e2:	4a0d      	ldr	r2, [pc, #52]	; (15918 <system_gclk_gen_enable+0x50>)
   158e4:	1dfb      	adds	r3, r7, #7
   158e6:	781b      	ldrb	r3, [r3, #0]
   158e8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   158ea:	46c0      	nop			; (mov r8, r8)
   158ec:	4b08      	ldr	r3, [pc, #32]	; (15910 <system_gclk_gen_enable+0x48>)
   158ee:	4798      	blx	r3
   158f0:	1e03      	subs	r3, r0, #0
   158f2:	d1fb      	bne.n	158ec <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   158f4:	4b09      	ldr	r3, [pc, #36]	; (1591c <system_gclk_gen_enable+0x54>)
   158f6:	4a09      	ldr	r2, [pc, #36]	; (1591c <system_gclk_gen_enable+0x54>)
   158f8:	6852      	ldr	r2, [r2, #4]
   158fa:	2180      	movs	r1, #128	; 0x80
   158fc:	0249      	lsls	r1, r1, #9
   158fe:	430a      	orrs	r2, r1
   15900:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   15902:	4b07      	ldr	r3, [pc, #28]	; (15920 <system_gclk_gen_enable+0x58>)
   15904:	4798      	blx	r3
}
   15906:	46c0      	nop			; (mov r8, r8)
   15908:	46bd      	mov	sp, r7
   1590a:	b002      	add	sp, #8
   1590c:	bd80      	pop	{r7, pc}
   1590e:	46c0      	nop			; (mov r8, r8)
   15910:	00015755 	.word	0x00015755
   15914:	0001572d 	.word	0x0001572d
   15918:	40000c04 	.word	0x40000c04
   1591c:	40000c00 	.word	0x40000c00
   15920:	00015741 	.word	0x00015741

00015924 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   15924:	b580      	push	{r7, lr}
   15926:	b086      	sub	sp, #24
   15928:	af00      	add	r7, sp, #0
   1592a:	0002      	movs	r2, r0
   1592c:	1dfb      	adds	r3, r7, #7
   1592e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   15930:	46c0      	nop			; (mov r8, r8)
   15932:	4b2a      	ldr	r3, [pc, #168]	; (159dc <system_gclk_gen_get_hz+0xb8>)
   15934:	4798      	blx	r3
   15936:	1e03      	subs	r3, r0, #0
   15938:	d1fb      	bne.n	15932 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1593a:	4b29      	ldr	r3, [pc, #164]	; (159e0 <system_gclk_gen_get_hz+0xbc>)
   1593c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1593e:	4a29      	ldr	r2, [pc, #164]	; (159e4 <system_gclk_gen_get_hz+0xc0>)
   15940:	1dfb      	adds	r3, r7, #7
   15942:	781b      	ldrb	r3, [r3, #0]
   15944:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   15946:	46c0      	nop			; (mov r8, r8)
   15948:	4b24      	ldr	r3, [pc, #144]	; (159dc <system_gclk_gen_get_hz+0xb8>)
   1594a:	4798      	blx	r3
   1594c:	1e03      	subs	r3, r0, #0
   1594e:	d1fb      	bne.n	15948 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   15950:	4b25      	ldr	r3, [pc, #148]	; (159e8 <system_gclk_gen_get_hz+0xc4>)
   15952:	685b      	ldr	r3, [r3, #4]
   15954:	04db      	lsls	r3, r3, #19
   15956:	0edb      	lsrs	r3, r3, #27
   15958:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1595a:	0018      	movs	r0, r3
   1595c:	4b23      	ldr	r3, [pc, #140]	; (159ec <system_gclk_gen_get_hz+0xc8>)
   1595e:	4798      	blx	r3
   15960:	0003      	movs	r3, r0
   15962:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   15964:	4a1f      	ldr	r2, [pc, #124]	; (159e4 <system_gclk_gen_get_hz+0xc0>)
   15966:	1dfb      	adds	r3, r7, #7
   15968:	781b      	ldrb	r3, [r3, #0]
   1596a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1596c:	4b1e      	ldr	r3, [pc, #120]	; (159e8 <system_gclk_gen_get_hz+0xc4>)
   1596e:	685b      	ldr	r3, [r3, #4]
   15970:	02db      	lsls	r3, r3, #11
   15972:	0fdb      	lsrs	r3, r3, #31
   15974:	b2da      	uxtb	r2, r3
   15976:	2313      	movs	r3, #19
   15978:	18fb      	adds	r3, r7, r3
   1597a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1597c:	4a1c      	ldr	r2, [pc, #112]	; (159f0 <system_gclk_gen_get_hz+0xcc>)
   1597e:	1dfb      	adds	r3, r7, #7
   15980:	781b      	ldrb	r3, [r3, #0]
   15982:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   15984:	46c0      	nop			; (mov r8, r8)
   15986:	4b15      	ldr	r3, [pc, #84]	; (159dc <system_gclk_gen_get_hz+0xb8>)
   15988:	4798      	blx	r3
   1598a:	1e03      	subs	r3, r0, #0
   1598c:	d1fb      	bne.n	15986 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1598e:	4b16      	ldr	r3, [pc, #88]	; (159e8 <system_gclk_gen_get_hz+0xc4>)
   15990:	689b      	ldr	r3, [r3, #8]
   15992:	021b      	lsls	r3, r3, #8
   15994:	0c1b      	lsrs	r3, r3, #16
   15996:	b29b      	uxth	r3, r3
   15998:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1599a:	4b16      	ldr	r3, [pc, #88]	; (159f4 <system_gclk_gen_get_hz+0xd0>)
   1599c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1599e:	2313      	movs	r3, #19
   159a0:	18fb      	adds	r3, r7, r3
   159a2:	781b      	ldrb	r3, [r3, #0]
   159a4:	2b00      	cmp	r3, #0
   159a6:	d109      	bne.n	159bc <system_gclk_gen_get_hz+0x98>
   159a8:	68fb      	ldr	r3, [r7, #12]
   159aa:	2b01      	cmp	r3, #1
   159ac:	d906      	bls.n	159bc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   159ae:	4b12      	ldr	r3, [pc, #72]	; (159f8 <system_gclk_gen_get_hz+0xd4>)
   159b0:	68f9      	ldr	r1, [r7, #12]
   159b2:	6978      	ldr	r0, [r7, #20]
   159b4:	4798      	blx	r3
   159b6:	0003      	movs	r3, r0
   159b8:	617b      	str	r3, [r7, #20]
   159ba:	e00a      	b.n	159d2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   159bc:	2313      	movs	r3, #19
   159be:	18fb      	adds	r3, r7, r3
   159c0:	781b      	ldrb	r3, [r3, #0]
   159c2:	2b00      	cmp	r3, #0
   159c4:	d005      	beq.n	159d2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   159c6:	68fb      	ldr	r3, [r7, #12]
   159c8:	3301      	adds	r3, #1
   159ca:	697a      	ldr	r2, [r7, #20]
   159cc:	40da      	lsrs	r2, r3
   159ce:	0013      	movs	r3, r2
   159d0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   159d2:	697b      	ldr	r3, [r7, #20]
}
   159d4:	0018      	movs	r0, r3
   159d6:	46bd      	mov	sp, r7
   159d8:	b006      	add	sp, #24
   159da:	bd80      	pop	{r7, pc}
   159dc:	00015755 	.word	0x00015755
   159e0:	0001572d 	.word	0x0001572d
   159e4:	40000c04 	.word	0x40000c04
   159e8:	40000c00 	.word	0x40000c00
   159ec:	00015085 	.word	0x00015085
   159f0:	40000c08 	.word	0x40000c08
   159f4:	00015741 	.word	0x00015741
   159f8:	0001e469 	.word	0x0001e469

000159fc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   159fc:	b580      	push	{r7, lr}
   159fe:	b084      	sub	sp, #16
   15a00:	af00      	add	r7, sp, #0
   15a02:	0002      	movs	r2, r0
   15a04:	6039      	str	r1, [r7, #0]
   15a06:	1dfb      	adds	r3, r7, #7
   15a08:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   15a0a:	1dfb      	adds	r3, r7, #7
   15a0c:	781b      	ldrb	r3, [r3, #0]
   15a0e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   15a10:	683b      	ldr	r3, [r7, #0]
   15a12:	781b      	ldrb	r3, [r3, #0]
   15a14:	021b      	lsls	r3, r3, #8
   15a16:	001a      	movs	r2, r3
   15a18:	68fb      	ldr	r3, [r7, #12]
   15a1a:	4313      	orrs	r3, r2
   15a1c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   15a1e:	1dfb      	adds	r3, r7, #7
   15a20:	781b      	ldrb	r3, [r3, #0]
   15a22:	0018      	movs	r0, r3
   15a24:	4b04      	ldr	r3, [pc, #16]	; (15a38 <system_gclk_chan_set_config+0x3c>)
   15a26:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   15a28:	4b04      	ldr	r3, [pc, #16]	; (15a3c <system_gclk_chan_set_config+0x40>)
   15a2a:	68fa      	ldr	r2, [r7, #12]
   15a2c:	b292      	uxth	r2, r2
   15a2e:	805a      	strh	r2, [r3, #2]
}
   15a30:	46c0      	nop			; (mov r8, r8)
   15a32:	46bd      	mov	sp, r7
   15a34:	b004      	add	sp, #16
   15a36:	bd80      	pop	{r7, pc}
   15a38:	00015a89 	.word	0x00015a89
   15a3c:	40000c00 	.word	0x40000c00

00015a40 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   15a40:	b580      	push	{r7, lr}
   15a42:	b082      	sub	sp, #8
   15a44:	af00      	add	r7, sp, #0
   15a46:	0002      	movs	r2, r0
   15a48:	1dfb      	adds	r3, r7, #7
   15a4a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   15a4c:	4b0a      	ldr	r3, [pc, #40]	; (15a78 <system_gclk_chan_enable+0x38>)
   15a4e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   15a50:	4a0a      	ldr	r2, [pc, #40]	; (15a7c <system_gclk_chan_enable+0x3c>)
   15a52:	1dfb      	adds	r3, r7, #7
   15a54:	781b      	ldrb	r3, [r3, #0]
   15a56:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   15a58:	4909      	ldr	r1, [pc, #36]	; (15a80 <system_gclk_chan_enable+0x40>)
   15a5a:	4b09      	ldr	r3, [pc, #36]	; (15a80 <system_gclk_chan_enable+0x40>)
   15a5c:	885b      	ldrh	r3, [r3, #2]
   15a5e:	b29b      	uxth	r3, r3
   15a60:	2280      	movs	r2, #128	; 0x80
   15a62:	01d2      	lsls	r2, r2, #7
   15a64:	4313      	orrs	r3, r2
   15a66:	b29b      	uxth	r3, r3
   15a68:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   15a6a:	4b06      	ldr	r3, [pc, #24]	; (15a84 <system_gclk_chan_enable+0x44>)
   15a6c:	4798      	blx	r3
}
   15a6e:	46c0      	nop			; (mov r8, r8)
   15a70:	46bd      	mov	sp, r7
   15a72:	b002      	add	sp, #8
   15a74:	bd80      	pop	{r7, pc}
   15a76:	46c0      	nop			; (mov r8, r8)
   15a78:	0001572d 	.word	0x0001572d
   15a7c:	40000c02 	.word	0x40000c02
   15a80:	40000c00 	.word	0x40000c00
   15a84:	00015741 	.word	0x00015741

00015a88 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   15a88:	b580      	push	{r7, lr}
   15a8a:	b084      	sub	sp, #16
   15a8c:	af00      	add	r7, sp, #0
   15a8e:	0002      	movs	r2, r0
   15a90:	1dfb      	adds	r3, r7, #7
   15a92:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   15a94:	4b1c      	ldr	r3, [pc, #112]	; (15b08 <system_gclk_chan_disable+0x80>)
   15a96:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   15a98:	4a1c      	ldr	r2, [pc, #112]	; (15b0c <system_gclk_chan_disable+0x84>)
   15a9a:	1dfb      	adds	r3, r7, #7
   15a9c:	781b      	ldrb	r3, [r3, #0]
   15a9e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   15aa0:	4b1b      	ldr	r3, [pc, #108]	; (15b10 <system_gclk_chan_disable+0x88>)
   15aa2:	885b      	ldrh	r3, [r3, #2]
   15aa4:	051b      	lsls	r3, r3, #20
   15aa6:	0f1b      	lsrs	r3, r3, #28
   15aa8:	b2db      	uxtb	r3, r3
   15aaa:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   15aac:	4a18      	ldr	r2, [pc, #96]	; (15b10 <system_gclk_chan_disable+0x88>)
   15aae:	8853      	ldrh	r3, [r2, #2]
   15ab0:	4918      	ldr	r1, [pc, #96]	; (15b14 <system_gclk_chan_disable+0x8c>)
   15ab2:	400b      	ands	r3, r1
   15ab4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   15ab6:	4a16      	ldr	r2, [pc, #88]	; (15b10 <system_gclk_chan_disable+0x88>)
   15ab8:	4b15      	ldr	r3, [pc, #84]	; (15b10 <system_gclk_chan_disable+0x88>)
   15aba:	885b      	ldrh	r3, [r3, #2]
   15abc:	b29b      	uxth	r3, r3
   15abe:	4916      	ldr	r1, [pc, #88]	; (15b18 <system_gclk_chan_disable+0x90>)
   15ac0:	400b      	ands	r3, r1
   15ac2:	b29b      	uxth	r3, r3
   15ac4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   15ac6:	46c0      	nop			; (mov r8, r8)
   15ac8:	4b11      	ldr	r3, [pc, #68]	; (15b10 <system_gclk_chan_disable+0x88>)
   15aca:	885b      	ldrh	r3, [r3, #2]
   15acc:	b29b      	uxth	r3, r3
   15ace:	001a      	movs	r2, r3
   15ad0:	2380      	movs	r3, #128	; 0x80
   15ad2:	01db      	lsls	r3, r3, #7
   15ad4:	4013      	ands	r3, r2
   15ad6:	d1f7      	bne.n	15ac8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   15ad8:	4a0d      	ldr	r2, [pc, #52]	; (15b10 <system_gclk_chan_disable+0x88>)
   15ada:	68fb      	ldr	r3, [r7, #12]
   15adc:	b2db      	uxtb	r3, r3
   15ade:	1c19      	adds	r1, r3, #0
   15ae0:	230f      	movs	r3, #15
   15ae2:	400b      	ands	r3, r1
   15ae4:	b2d9      	uxtb	r1, r3
   15ae6:	8853      	ldrh	r3, [r2, #2]
   15ae8:	1c08      	adds	r0, r1, #0
   15aea:	210f      	movs	r1, #15
   15aec:	4001      	ands	r1, r0
   15aee:	0208      	lsls	r0, r1, #8
   15af0:	4908      	ldr	r1, [pc, #32]	; (15b14 <system_gclk_chan_disable+0x8c>)
   15af2:	400b      	ands	r3, r1
   15af4:	1c19      	adds	r1, r3, #0
   15af6:	1c03      	adds	r3, r0, #0
   15af8:	430b      	orrs	r3, r1
   15afa:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   15afc:	4b07      	ldr	r3, [pc, #28]	; (15b1c <system_gclk_chan_disable+0x94>)
   15afe:	4798      	blx	r3
}
   15b00:	46c0      	nop			; (mov r8, r8)
   15b02:	46bd      	mov	sp, r7
   15b04:	b004      	add	sp, #16
   15b06:	bd80      	pop	{r7, pc}
   15b08:	0001572d 	.word	0x0001572d
   15b0c:	40000c02 	.word	0x40000c02
   15b10:	40000c00 	.word	0x40000c00
   15b14:	fffff0ff 	.word	0xfffff0ff
   15b18:	ffffbfff 	.word	0xffffbfff
   15b1c:	00015741 	.word	0x00015741

00015b20 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   15b20:	b580      	push	{r7, lr}
   15b22:	b084      	sub	sp, #16
   15b24:	af00      	add	r7, sp, #0
   15b26:	0002      	movs	r2, r0
   15b28:	1dfb      	adds	r3, r7, #7
   15b2a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   15b2c:	4b0d      	ldr	r3, [pc, #52]	; (15b64 <system_gclk_chan_get_hz+0x44>)
   15b2e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   15b30:	4a0d      	ldr	r2, [pc, #52]	; (15b68 <system_gclk_chan_get_hz+0x48>)
   15b32:	1dfb      	adds	r3, r7, #7
   15b34:	781b      	ldrb	r3, [r3, #0]
   15b36:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   15b38:	4b0c      	ldr	r3, [pc, #48]	; (15b6c <system_gclk_chan_get_hz+0x4c>)
   15b3a:	885b      	ldrh	r3, [r3, #2]
   15b3c:	051b      	lsls	r3, r3, #20
   15b3e:	0f1b      	lsrs	r3, r3, #28
   15b40:	b2da      	uxtb	r2, r3
   15b42:	230f      	movs	r3, #15
   15b44:	18fb      	adds	r3, r7, r3
   15b46:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   15b48:	4b09      	ldr	r3, [pc, #36]	; (15b70 <system_gclk_chan_get_hz+0x50>)
   15b4a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   15b4c:	230f      	movs	r3, #15
   15b4e:	18fb      	adds	r3, r7, r3
   15b50:	781b      	ldrb	r3, [r3, #0]
   15b52:	0018      	movs	r0, r3
   15b54:	4b07      	ldr	r3, [pc, #28]	; (15b74 <system_gclk_chan_get_hz+0x54>)
   15b56:	4798      	blx	r3
   15b58:	0003      	movs	r3, r0
}
   15b5a:	0018      	movs	r0, r3
   15b5c:	46bd      	mov	sp, r7
   15b5e:	b004      	add	sp, #16
   15b60:	bd80      	pop	{r7, pc}
   15b62:	46c0      	nop			; (mov r8, r8)
   15b64:	0001572d 	.word	0x0001572d
   15b68:	40000c02 	.word	0x40000c02
   15b6c:	40000c00 	.word	0x40000c00
   15b70:	00015741 	.word	0x00015741
   15b74:	00015925 	.word	0x00015925

00015b78 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   15b78:	b580      	push	{r7, lr}
   15b7a:	b084      	sub	sp, #16
   15b7c:	af00      	add	r7, sp, #0
   15b7e:	0002      	movs	r2, r0
   15b80:	1dfb      	adds	r3, r7, #7
   15b82:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   15b84:	230f      	movs	r3, #15
   15b86:	18fb      	adds	r3, r7, r3
   15b88:	2200      	movs	r2, #0
   15b8a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   15b8c:	1dfb      	adds	r3, r7, #7
   15b8e:	781b      	ldrb	r3, [r3, #0]
   15b90:	2b7f      	cmp	r3, #127	; 0x7f
   15b92:	d80b      	bhi.n	15bac <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   15b94:	4a13      	ldr	r2, [pc, #76]	; (15be4 <system_interrupt_clear_pending+0x6c>)
   15b96:	1dfb      	adds	r3, r7, #7
   15b98:	781b      	ldrb	r3, [r3, #0]
   15b9a:	b25b      	sxtb	r3, r3
   15b9c:	2101      	movs	r1, #1
   15b9e:	4099      	lsls	r1, r3
   15ba0:	000b      	movs	r3, r1
   15ba2:	0019      	movs	r1, r3
   15ba4:	23c0      	movs	r3, #192	; 0xc0
   15ba6:	005b      	lsls	r3, r3, #1
   15ba8:	50d1      	str	r1, [r2, r3]
   15baa:	e014      	b.n	15bd6 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   15bac:	1dfb      	adds	r3, r7, #7
   15bae:	781b      	ldrb	r3, [r3, #0]
   15bb0:	b25b      	sxtb	r3, r3
   15bb2:	330e      	adds	r3, #14
   15bb4:	d101      	bne.n	15bba <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   15bb6:	2317      	movs	r3, #23
   15bb8:	e010      	b.n	15bdc <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   15bba:	1dfb      	adds	r3, r7, #7
   15bbc:	781b      	ldrb	r3, [r3, #0]
   15bbe:	b25b      	sxtb	r3, r3
   15bc0:	3301      	adds	r3, #1
   15bc2:	d104      	bne.n	15bce <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   15bc4:	4b08      	ldr	r3, [pc, #32]	; (15be8 <system_interrupt_clear_pending+0x70>)
   15bc6:	2280      	movs	r2, #128	; 0x80
   15bc8:	0492      	lsls	r2, r2, #18
   15bca:	605a      	str	r2, [r3, #4]
   15bcc:	e003      	b.n	15bd6 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   15bce:	230f      	movs	r3, #15
   15bd0:	18fb      	adds	r3, r7, r3
   15bd2:	2217      	movs	r2, #23
   15bd4:	701a      	strb	r2, [r3, #0]
	}

	return status;
   15bd6:	230f      	movs	r3, #15
   15bd8:	18fb      	adds	r3, r7, r3
   15bda:	781b      	ldrb	r3, [r3, #0]
}
   15bdc:	0018      	movs	r0, r3
   15bde:	46bd      	mov	sp, r7
   15be0:	b004      	add	sp, #16
   15be2:	bd80      	pop	{r7, pc}
   15be4:	e000e100 	.word	0xe000e100
   15be8:	e000ed00 	.word	0xe000ed00

00015bec <system_pinmux_get_group_from_gpio_pin>:
{
   15bec:	b580      	push	{r7, lr}
   15bee:	b084      	sub	sp, #16
   15bf0:	af00      	add	r7, sp, #0
   15bf2:	0002      	movs	r2, r0
   15bf4:	1dfb      	adds	r3, r7, #7
   15bf6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15bf8:	230f      	movs	r3, #15
   15bfa:	18fb      	adds	r3, r7, r3
   15bfc:	1dfa      	adds	r2, r7, #7
   15bfe:	7812      	ldrb	r2, [r2, #0]
   15c00:	09d2      	lsrs	r2, r2, #7
   15c02:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15c04:	230e      	movs	r3, #14
   15c06:	18fb      	adds	r3, r7, r3
   15c08:	1dfa      	adds	r2, r7, #7
   15c0a:	7812      	ldrb	r2, [r2, #0]
   15c0c:	0952      	lsrs	r2, r2, #5
   15c0e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   15c10:	4b0d      	ldr	r3, [pc, #52]	; (15c48 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   15c12:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   15c14:	230f      	movs	r3, #15
   15c16:	18fb      	adds	r3, r7, r3
   15c18:	781b      	ldrb	r3, [r3, #0]
   15c1a:	2b00      	cmp	r3, #0
   15c1c:	d10f      	bne.n	15c3e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   15c1e:	230f      	movs	r3, #15
   15c20:	18fb      	adds	r3, r7, r3
   15c22:	781b      	ldrb	r3, [r3, #0]
   15c24:	009b      	lsls	r3, r3, #2
   15c26:	2210      	movs	r2, #16
   15c28:	4694      	mov	ip, r2
   15c2a:	44bc      	add	ip, r7
   15c2c:	4463      	add	r3, ip
   15c2e:	3b08      	subs	r3, #8
   15c30:	681a      	ldr	r2, [r3, #0]
   15c32:	230e      	movs	r3, #14
   15c34:	18fb      	adds	r3, r7, r3
   15c36:	781b      	ldrb	r3, [r3, #0]
   15c38:	01db      	lsls	r3, r3, #7
   15c3a:	18d3      	adds	r3, r2, r3
   15c3c:	e000      	b.n	15c40 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   15c3e:	2300      	movs	r3, #0
}
   15c40:	0018      	movs	r0, r3
   15c42:	46bd      	mov	sp, r7
   15c44:	b004      	add	sp, #16
   15c46:	bd80      	pop	{r7, pc}
   15c48:	41004400 	.word	0x41004400

00015c4c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   15c4c:	b580      	push	{r7, lr}
   15c4e:	b088      	sub	sp, #32
   15c50:	af00      	add	r7, sp, #0
   15c52:	60f8      	str	r0, [r7, #12]
   15c54:	60b9      	str	r1, [r7, #8]
   15c56:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   15c58:	2300      	movs	r3, #0
   15c5a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   15c5c:	687b      	ldr	r3, [r7, #4]
   15c5e:	78db      	ldrb	r3, [r3, #3]
   15c60:	2201      	movs	r2, #1
   15c62:	4053      	eors	r3, r2
   15c64:	b2db      	uxtb	r3, r3
   15c66:	2b00      	cmp	r3, #0
   15c68:	d035      	beq.n	15cd6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   15c6a:	687b      	ldr	r3, [r7, #4]
   15c6c:	781b      	ldrb	r3, [r3, #0]
   15c6e:	2b80      	cmp	r3, #128	; 0x80
   15c70:	d00b      	beq.n	15c8a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   15c72:	69fb      	ldr	r3, [r7, #28]
   15c74:	2280      	movs	r2, #128	; 0x80
   15c76:	0252      	lsls	r2, r2, #9
   15c78:	4313      	orrs	r3, r2
   15c7a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   15c7c:	687b      	ldr	r3, [r7, #4]
   15c7e:	781b      	ldrb	r3, [r3, #0]
   15c80:	061b      	lsls	r3, r3, #24
   15c82:	001a      	movs	r2, r3
   15c84:	69fb      	ldr	r3, [r7, #28]
   15c86:	4313      	orrs	r3, r2
   15c88:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   15c8a:	687b      	ldr	r3, [r7, #4]
   15c8c:	785b      	ldrb	r3, [r3, #1]
   15c8e:	2b00      	cmp	r3, #0
   15c90:	d003      	beq.n	15c9a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   15c92:	687b      	ldr	r3, [r7, #4]
   15c94:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   15c96:	2b02      	cmp	r3, #2
   15c98:	d110      	bne.n	15cbc <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   15c9a:	69fb      	ldr	r3, [r7, #28]
   15c9c:	2280      	movs	r2, #128	; 0x80
   15c9e:	0292      	lsls	r2, r2, #10
   15ca0:	4313      	orrs	r3, r2
   15ca2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   15ca4:	687b      	ldr	r3, [r7, #4]
   15ca6:	789b      	ldrb	r3, [r3, #2]
   15ca8:	2b00      	cmp	r3, #0
   15caa:	d004      	beq.n	15cb6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   15cac:	69fb      	ldr	r3, [r7, #28]
   15cae:	2280      	movs	r2, #128	; 0x80
   15cb0:	02d2      	lsls	r2, r2, #11
   15cb2:	4313      	orrs	r3, r2
   15cb4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   15cb6:	68fb      	ldr	r3, [r7, #12]
   15cb8:	68ba      	ldr	r2, [r7, #8]
   15cba:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15cbc:	687b      	ldr	r3, [r7, #4]
   15cbe:	785b      	ldrb	r3, [r3, #1]
   15cc0:	2b01      	cmp	r3, #1
   15cc2:	d003      	beq.n	15ccc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   15cc4:	687b      	ldr	r3, [r7, #4]
   15cc6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15cc8:	2b02      	cmp	r3, #2
   15cca:	d107      	bne.n	15cdc <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   15ccc:	69fb      	ldr	r3, [r7, #28]
   15cce:	4a22      	ldr	r2, [pc, #136]	; (15d58 <_system_pinmux_config+0x10c>)
   15cd0:	4013      	ands	r3, r2
   15cd2:	61fb      	str	r3, [r7, #28]
   15cd4:	e002      	b.n	15cdc <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   15cd6:	68fb      	ldr	r3, [r7, #12]
   15cd8:	68ba      	ldr	r2, [r7, #8]
   15cda:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   15cdc:	68bb      	ldr	r3, [r7, #8]
   15cde:	041b      	lsls	r3, r3, #16
   15ce0:	0c1b      	lsrs	r3, r3, #16
   15ce2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   15ce4:	68bb      	ldr	r3, [r7, #8]
   15ce6:	0c1b      	lsrs	r3, r3, #16
   15ce8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   15cea:	69ba      	ldr	r2, [r7, #24]
   15cec:	69fb      	ldr	r3, [r7, #28]
   15cee:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   15cf0:	22a0      	movs	r2, #160	; 0xa0
   15cf2:	05d2      	lsls	r2, r2, #23
   15cf4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   15cf6:	68fb      	ldr	r3, [r7, #12]
   15cf8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   15cfa:	697a      	ldr	r2, [r7, #20]
   15cfc:	69fb      	ldr	r3, [r7, #28]
   15cfe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   15d00:	22d0      	movs	r2, #208	; 0xd0
   15d02:	0612      	lsls	r2, r2, #24
   15d04:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   15d06:	68fb      	ldr	r3, [r7, #12]
   15d08:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   15d0a:	687b      	ldr	r3, [r7, #4]
   15d0c:	78db      	ldrb	r3, [r3, #3]
   15d0e:	2201      	movs	r2, #1
   15d10:	4053      	eors	r3, r2
   15d12:	b2db      	uxtb	r3, r3
   15d14:	2b00      	cmp	r3, #0
   15d16:	d01a      	beq.n	15d4e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   15d18:	69fa      	ldr	r2, [r7, #28]
   15d1a:	2380      	movs	r3, #128	; 0x80
   15d1c:	02db      	lsls	r3, r3, #11
   15d1e:	4013      	ands	r3, r2
   15d20:	d00a      	beq.n	15d38 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   15d22:	687b      	ldr	r3, [r7, #4]
   15d24:	789b      	ldrb	r3, [r3, #2]
   15d26:	2b01      	cmp	r3, #1
   15d28:	d103      	bne.n	15d32 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   15d2a:	68fb      	ldr	r3, [r7, #12]
   15d2c:	68ba      	ldr	r2, [r7, #8]
   15d2e:	619a      	str	r2, [r3, #24]
   15d30:	e002      	b.n	15d38 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   15d32:	68fb      	ldr	r3, [r7, #12]
   15d34:	68ba      	ldr	r2, [r7, #8]
   15d36:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15d38:	687b      	ldr	r3, [r7, #4]
   15d3a:	785b      	ldrb	r3, [r3, #1]
   15d3c:	2b01      	cmp	r3, #1
   15d3e:	d003      	beq.n	15d48 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   15d40:	687b      	ldr	r3, [r7, #4]
   15d42:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15d44:	2b02      	cmp	r3, #2
   15d46:	d102      	bne.n	15d4e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   15d48:	68fb      	ldr	r3, [r7, #12]
   15d4a:	68ba      	ldr	r2, [r7, #8]
   15d4c:	609a      	str	r2, [r3, #8]
		}
	}
}
   15d4e:	46c0      	nop			; (mov r8, r8)
   15d50:	46bd      	mov	sp, r7
   15d52:	b008      	add	sp, #32
   15d54:	bd80      	pop	{r7, pc}
   15d56:	46c0      	nop			; (mov r8, r8)
   15d58:	fffbffff 	.word	0xfffbffff

00015d5c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   15d5c:	b580      	push	{r7, lr}
   15d5e:	b084      	sub	sp, #16
   15d60:	af00      	add	r7, sp, #0
   15d62:	0002      	movs	r2, r0
   15d64:	6039      	str	r1, [r7, #0]
   15d66:	1dfb      	adds	r3, r7, #7
   15d68:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   15d6a:	1dfb      	adds	r3, r7, #7
   15d6c:	781b      	ldrb	r3, [r3, #0]
   15d6e:	0018      	movs	r0, r3
   15d70:	4b0a      	ldr	r3, [pc, #40]	; (15d9c <system_pinmux_pin_set_config+0x40>)
   15d72:	4798      	blx	r3
   15d74:	0003      	movs	r3, r0
   15d76:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   15d78:	1dfb      	adds	r3, r7, #7
   15d7a:	781b      	ldrb	r3, [r3, #0]
   15d7c:	221f      	movs	r2, #31
   15d7e:	4013      	ands	r3, r2
   15d80:	2201      	movs	r2, #1
   15d82:	409a      	lsls	r2, r3
   15d84:	0013      	movs	r3, r2
   15d86:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   15d88:	683a      	ldr	r2, [r7, #0]
   15d8a:	68b9      	ldr	r1, [r7, #8]
   15d8c:	68fb      	ldr	r3, [r7, #12]
   15d8e:	0018      	movs	r0, r3
   15d90:	4b03      	ldr	r3, [pc, #12]	; (15da0 <system_pinmux_pin_set_config+0x44>)
   15d92:	4798      	blx	r3
}
   15d94:	46c0      	nop			; (mov r8, r8)
   15d96:	46bd      	mov	sp, r7
   15d98:	b004      	add	sp, #16
   15d9a:	bd80      	pop	{r7, pc}
   15d9c:	00015bed 	.word	0x00015bed
   15da0:	00015c4d 	.word	0x00015c4d

00015da4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   15da4:	b580      	push	{r7, lr}
   15da6:	af00      	add	r7, sp, #0
	return;
   15da8:	46c0      	nop			; (mov r8, r8)
}
   15daa:	46bd      	mov	sp, r7
   15dac:	bd80      	pop	{r7, pc}
	...

00015db0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   15db0:	b580      	push	{r7, lr}
   15db2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   15db4:	4b06      	ldr	r3, [pc, #24]	; (15dd0 <system_init+0x20>)
   15db6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   15db8:	4b06      	ldr	r3, [pc, #24]	; (15dd4 <system_init+0x24>)
   15dba:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   15dbc:	4b06      	ldr	r3, [pc, #24]	; (15dd8 <system_init+0x28>)
   15dbe:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   15dc0:	4b06      	ldr	r3, [pc, #24]	; (15ddc <system_init+0x2c>)
   15dc2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   15dc4:	4b06      	ldr	r3, [pc, #24]	; (15de0 <system_init+0x30>)
   15dc6:	4798      	blx	r3
}
   15dc8:	46c0      	nop			; (mov r8, r8)
   15dca:	46bd      	mov	sp, r7
   15dcc:	bd80      	pop	{r7, pc}
   15dce:	46c0      	nop			; (mov r8, r8)
   15dd0:	00015431 	.word	0x00015431
   15dd4:	00011ef9 	.word	0x00011ef9
   15dd8:	00000669 	.word	0x00000669
   15ddc:	000122d1 	.word	0x000122d1
   15de0:	00015da5 	.word	0x00015da5

00015de4 <system_gclk_chan_get_config_defaults>:
{
   15de4:	b580      	push	{r7, lr}
   15de6:	b082      	sub	sp, #8
   15de8:	af00      	add	r7, sp, #0
   15dea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   15dec:	687b      	ldr	r3, [r7, #4]
   15dee:	2200      	movs	r2, #0
   15df0:	701a      	strb	r2, [r3, #0]
}
   15df2:	46c0      	nop			; (mov r8, r8)
   15df4:	46bd      	mov	sp, r7
   15df6:	b002      	add	sp, #8
   15df8:	bd80      	pop	{r7, pc}
	...

00015dfc <system_apb_clock_set_mask>:
{
   15dfc:	b580      	push	{r7, lr}
   15dfe:	b082      	sub	sp, #8
   15e00:	af00      	add	r7, sp, #0
   15e02:	0002      	movs	r2, r0
   15e04:	6039      	str	r1, [r7, #0]
   15e06:	1dfb      	adds	r3, r7, #7
   15e08:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   15e0a:	1dfb      	adds	r3, r7, #7
   15e0c:	781b      	ldrb	r3, [r3, #0]
   15e0e:	2b01      	cmp	r3, #1
   15e10:	d00a      	beq.n	15e28 <system_apb_clock_set_mask+0x2c>
   15e12:	2b02      	cmp	r3, #2
   15e14:	d00f      	beq.n	15e36 <system_apb_clock_set_mask+0x3a>
   15e16:	2b00      	cmp	r3, #0
   15e18:	d114      	bne.n	15e44 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   15e1a:	4b0e      	ldr	r3, [pc, #56]	; (15e54 <system_apb_clock_set_mask+0x58>)
   15e1c:	4a0d      	ldr	r2, [pc, #52]	; (15e54 <system_apb_clock_set_mask+0x58>)
   15e1e:	6991      	ldr	r1, [r2, #24]
   15e20:	683a      	ldr	r2, [r7, #0]
   15e22:	430a      	orrs	r2, r1
   15e24:	619a      	str	r2, [r3, #24]
			break;
   15e26:	e00f      	b.n	15e48 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   15e28:	4b0a      	ldr	r3, [pc, #40]	; (15e54 <system_apb_clock_set_mask+0x58>)
   15e2a:	4a0a      	ldr	r2, [pc, #40]	; (15e54 <system_apb_clock_set_mask+0x58>)
   15e2c:	69d1      	ldr	r1, [r2, #28]
   15e2e:	683a      	ldr	r2, [r7, #0]
   15e30:	430a      	orrs	r2, r1
   15e32:	61da      	str	r2, [r3, #28]
			break;
   15e34:	e008      	b.n	15e48 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   15e36:	4b07      	ldr	r3, [pc, #28]	; (15e54 <system_apb_clock_set_mask+0x58>)
   15e38:	4a06      	ldr	r2, [pc, #24]	; (15e54 <system_apb_clock_set_mask+0x58>)
   15e3a:	6a11      	ldr	r1, [r2, #32]
   15e3c:	683a      	ldr	r2, [r7, #0]
   15e3e:	430a      	orrs	r2, r1
   15e40:	621a      	str	r2, [r3, #32]
			break;
   15e42:	e001      	b.n	15e48 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   15e44:	2317      	movs	r3, #23
   15e46:	e000      	b.n	15e4a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   15e48:	2300      	movs	r3, #0
}
   15e4a:	0018      	movs	r0, r3
   15e4c:	46bd      	mov	sp, r7
   15e4e:	b002      	add	sp, #8
   15e50:	bd80      	pop	{r7, pc}
   15e52:	46c0      	nop			; (mov r8, r8)
   15e54:	40000400 	.word	0x40000400

00015e58 <system_pinmux_get_config_defaults>:
{
   15e58:	b580      	push	{r7, lr}
   15e5a:	b082      	sub	sp, #8
   15e5c:	af00      	add	r7, sp, #0
   15e5e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   15e60:	687b      	ldr	r3, [r7, #4]
   15e62:	2280      	movs	r2, #128	; 0x80
   15e64:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15e66:	687b      	ldr	r3, [r7, #4]
   15e68:	2200      	movs	r2, #0
   15e6a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   15e6c:	687b      	ldr	r3, [r7, #4]
   15e6e:	2201      	movs	r2, #1
   15e70:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   15e72:	687b      	ldr	r3, [r7, #4]
   15e74:	2200      	movs	r2, #0
   15e76:	70da      	strb	r2, [r3, #3]
}
   15e78:	46c0      	nop			; (mov r8, r8)
   15e7a:	46bd      	mov	sp, r7
   15e7c:	b002      	add	sp, #8
   15e7e:	bd80      	pop	{r7, pc}

00015e80 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   15e80:	b580      	push	{r7, lr}
   15e82:	b084      	sub	sp, #16
   15e84:	af00      	add	r7, sp, #0
   15e86:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   15e88:	2300      	movs	r3, #0
   15e8a:	60fb      	str	r3, [r7, #12]
   15e8c:	e00c      	b.n	15ea8 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   15e8e:	4b0a      	ldr	r3, [pc, #40]	; (15eb8 <_tcc_get_inst_index+0x38>)
   15e90:	68fa      	ldr	r2, [r7, #12]
   15e92:	0092      	lsls	r2, r2, #2
   15e94:	58d2      	ldr	r2, [r2, r3]
   15e96:	687b      	ldr	r3, [r7, #4]
   15e98:	429a      	cmp	r2, r3
   15e9a:	d102      	bne.n	15ea2 <_tcc_get_inst_index+0x22>
			return i;
   15e9c:	68fb      	ldr	r3, [r7, #12]
   15e9e:	b2db      	uxtb	r3, r3
   15ea0:	e006      	b.n	15eb0 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   15ea2:	68fb      	ldr	r3, [r7, #12]
   15ea4:	3301      	adds	r3, #1
   15ea6:	60fb      	str	r3, [r7, #12]
   15ea8:	68fb      	ldr	r3, [r7, #12]
   15eaa:	2b02      	cmp	r3, #2
   15eac:	d9ef      	bls.n	15e8e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   15eae:	2300      	movs	r3, #0
}
   15eb0:	0018      	movs	r0, r3
   15eb2:	46bd      	mov	sp, r7
   15eb4:	b004      	add	sp, #16
   15eb6:	bd80      	pop	{r7, pc}
   15eb8:	00024918 	.word	0x00024918

00015ebc <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   15ebc:	b590      	push	{r4, r7, lr}
   15ebe:	b085      	sub	sp, #20
   15ec0:	af00      	add	r7, sp, #0
   15ec2:	6078      	str	r0, [r7, #4]
   15ec4:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   15ec6:	230f      	movs	r3, #15
   15ec8:	18fc      	adds	r4, r7, r3
   15eca:	683b      	ldr	r3, [r7, #0]
   15ecc:	0018      	movs	r0, r3
   15ece:	4bad      	ldr	r3, [pc, #692]	; (16184 <tcc_get_config_defaults+0x2c8>)
   15ed0:	4798      	blx	r3
   15ed2:	0003      	movs	r3, r0
   15ed4:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   15ed6:	687b      	ldr	r3, [r7, #4]
   15ed8:	2200      	movs	r2, #0
   15eda:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   15edc:	230f      	movs	r3, #15
   15ede:	18fb      	adds	r3, r7, r3
   15ee0:	781a      	ldrb	r2, [r3, #0]
   15ee2:	4ba9      	ldr	r3, [pc, #676]	; (16188 <tcc_get_config_defaults+0x2cc>)
   15ee4:	0092      	lsls	r2, r2, #2
   15ee6:	58d2      	ldr	r2, [r2, r3]
   15ee8:	687b      	ldr	r3, [r7, #4]
   15eea:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   15eec:	687b      	ldr	r3, [r7, #4]
   15eee:	2200      	movs	r2, #0
   15ef0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   15ef2:	687b      	ldr	r3, [r7, #4]
   15ef4:	2200      	movs	r2, #0
   15ef6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   15ef8:	687b      	ldr	r3, [r7, #4]
   15efa:	2200      	movs	r2, #0
   15efc:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   15efe:	687b      	ldr	r3, [r7, #4]
   15f00:	2200      	movs	r2, #0
   15f02:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   15f04:	687b      	ldr	r3, [r7, #4]
   15f06:	2200      	movs	r2, #0
   15f08:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   15f0a:	687b      	ldr	r3, [r7, #4]
   15f0c:	2200      	movs	r2, #0
   15f0e:	61da      	str	r2, [r3, #28]
   15f10:	687b      	ldr	r3, [r7, #4]
   15f12:	2200      	movs	r2, #0
   15f14:	621a      	str	r2, [r3, #32]
   15f16:	687b      	ldr	r3, [r7, #4]
   15f18:	2200      	movs	r2, #0
   15f1a:	625a      	str	r2, [r3, #36]	; 0x24
   15f1c:	687b      	ldr	r3, [r7, #4]
   15f1e:	2200      	movs	r2, #0
   15f20:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   15f22:	687b      	ldr	r3, [r7, #4]
   15f24:	2200      	movs	r2, #0
   15f26:	751a      	strb	r2, [r3, #20]
   15f28:	687b      	ldr	r3, [r7, #4]
   15f2a:	2200      	movs	r2, #0
   15f2c:	755a      	strb	r2, [r3, #21]
   15f2e:	687b      	ldr	r3, [r7, #4]
   15f30:	2200      	movs	r2, #0
   15f32:	759a      	strb	r2, [r3, #22]
   15f34:	687b      	ldr	r3, [r7, #4]
   15f36:	2200      	movs	r2, #0
   15f38:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   15f3a:	687b      	ldr	r3, [r7, #4]
   15f3c:	2200      	movs	r2, #0
   15f3e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   15f40:	687b      	ldr	r3, [r7, #4]
   15f42:	2200      	movs	r2, #0
   15f44:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   15f46:	687b      	ldr	r3, [r7, #4]
   15f48:	2200      	movs	r2, #0
   15f4a:	741a      	strb	r2, [r3, #16]
   15f4c:	687b      	ldr	r3, [r7, #4]
   15f4e:	2200      	movs	r2, #0
   15f50:	745a      	strb	r2, [r3, #17]
   15f52:	687b      	ldr	r3, [r7, #4]
   15f54:	2200      	movs	r2, #0
   15f56:	749a      	strb	r2, [r3, #18]
   15f58:	687b      	ldr	r3, [r7, #4]
   15f5a:	2200      	movs	r2, #0
   15f5c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   15f5e:	687b      	ldr	r3, [r7, #4]
   15f60:	222c      	movs	r2, #44	; 0x2c
   15f62:	2100      	movs	r1, #0
   15f64:	5499      	strb	r1, [r3, r2]
   15f66:	687b      	ldr	r3, [r7, #4]
   15f68:	222d      	movs	r2, #45	; 0x2d
   15f6a:	2100      	movs	r1, #0
   15f6c:	5499      	strb	r1, [r3, r2]
   15f6e:	687b      	ldr	r3, [r7, #4]
   15f70:	222e      	movs	r2, #46	; 0x2e
   15f72:	2100      	movs	r1, #0
   15f74:	5499      	strb	r1, [r3, r2]
   15f76:	687b      	ldr	r3, [r7, #4]
   15f78:	222f      	movs	r2, #47	; 0x2f
   15f7a:	2100      	movs	r1, #0
   15f7c:	5499      	strb	r1, [r3, r2]
   15f7e:	687b      	ldr	r3, [r7, #4]
   15f80:	2230      	movs	r2, #48	; 0x30
   15f82:	2100      	movs	r1, #0
   15f84:	5499      	strb	r1, [r3, r2]
   15f86:	687b      	ldr	r3, [r7, #4]
   15f88:	2231      	movs	r2, #49	; 0x31
   15f8a:	2100      	movs	r1, #0
   15f8c:	5499      	strb	r1, [r3, r2]
   15f8e:	687b      	ldr	r3, [r7, #4]
   15f90:	2232      	movs	r2, #50	; 0x32
   15f92:	2100      	movs	r1, #0
   15f94:	5499      	strb	r1, [r3, r2]
   15f96:	687b      	ldr	r3, [r7, #4]
   15f98:	2233      	movs	r2, #51	; 0x33
   15f9a:	2100      	movs	r1, #0
   15f9c:	5499      	strb	r1, [r3, r2]
   15f9e:	687b      	ldr	r3, [r7, #4]
   15fa0:	2234      	movs	r2, #52	; 0x34
   15fa2:	2100      	movs	r1, #0
   15fa4:	5499      	strb	r1, [r3, r2]
   15fa6:	687b      	ldr	r3, [r7, #4]
   15fa8:	2235      	movs	r2, #53	; 0x35
   15faa:	2100      	movs	r1, #0
   15fac:	5499      	strb	r1, [r3, r2]
   15fae:	687b      	ldr	r3, [r7, #4]
   15fb0:	2236      	movs	r2, #54	; 0x36
   15fb2:	2100      	movs	r1, #0
   15fb4:	5499      	strb	r1, [r3, r2]
   15fb6:	687b      	ldr	r3, [r7, #4]
   15fb8:	2237      	movs	r2, #55	; 0x37
   15fba:	2100      	movs	r1, #0
   15fbc:	5499      	strb	r1, [r3, r2]
   15fbe:	687b      	ldr	r3, [r7, #4]
   15fc0:	2238      	movs	r2, #56	; 0x38
   15fc2:	2100      	movs	r1, #0
   15fc4:	5499      	strb	r1, [r3, r2]
   15fc6:	687b      	ldr	r3, [r7, #4]
   15fc8:	2239      	movs	r2, #57	; 0x39
   15fca:	2100      	movs	r1, #0
   15fcc:	5499      	strb	r1, [r3, r2]
   15fce:	687b      	ldr	r3, [r7, #4]
   15fd0:	223a      	movs	r2, #58	; 0x3a
   15fd2:	2100      	movs	r1, #0
   15fd4:	5499      	strb	r1, [r3, r2]
   15fd6:	687b      	ldr	r3, [r7, #4]
   15fd8:	223b      	movs	r2, #59	; 0x3b
   15fda:	2100      	movs	r1, #0
   15fdc:	5499      	strb	r1, [r3, r2]
   15fde:	687b      	ldr	r3, [r7, #4]
   15fe0:	223c      	movs	r2, #60	; 0x3c
   15fe2:	2100      	movs	r1, #0
   15fe4:	5499      	strb	r1, [r3, r2]
   15fe6:	687b      	ldr	r3, [r7, #4]
   15fe8:	223d      	movs	r2, #61	; 0x3d
   15fea:	2100      	movs	r1, #0
   15fec:	5499      	strb	r1, [r3, r2]
   15fee:	687b      	ldr	r3, [r7, #4]
   15ff0:	223e      	movs	r2, #62	; 0x3e
   15ff2:	2100      	movs	r1, #0
   15ff4:	5499      	strb	r1, [r3, r2]
   15ff6:	687b      	ldr	r3, [r7, #4]
   15ff8:	223f      	movs	r2, #63	; 0x3f
   15ffa:	2100      	movs	r1, #0
   15ffc:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   15ffe:	687b      	ldr	r3, [r7, #4]
   16000:	2240      	movs	r2, #64	; 0x40
   16002:	2100      	movs	r1, #0
   16004:	5499      	strb	r1, [r3, r2]
   16006:	687b      	ldr	r3, [r7, #4]
   16008:	2241      	movs	r2, #65	; 0x41
   1600a:	2100      	movs	r1, #0
   1600c:	5499      	strb	r1, [r3, r2]
   1600e:	687b      	ldr	r3, [r7, #4]
   16010:	2242      	movs	r2, #66	; 0x42
   16012:	2100      	movs	r1, #0
   16014:	5499      	strb	r1, [r3, r2]
   16016:	687b      	ldr	r3, [r7, #4]
   16018:	2243      	movs	r2, #67	; 0x43
   1601a:	2100      	movs	r1, #0
   1601c:	5499      	strb	r1, [r3, r2]
   1601e:	687b      	ldr	r3, [r7, #4]
   16020:	2244      	movs	r2, #68	; 0x44
   16022:	2100      	movs	r1, #0
   16024:	5499      	strb	r1, [r3, r2]
   16026:	687b      	ldr	r3, [r7, #4]
   16028:	2245      	movs	r2, #69	; 0x45
   1602a:	2100      	movs	r1, #0
   1602c:	5499      	strb	r1, [r3, r2]
   1602e:	687b      	ldr	r3, [r7, #4]
   16030:	2246      	movs	r2, #70	; 0x46
   16032:	2100      	movs	r1, #0
   16034:	5499      	strb	r1, [r3, r2]
   16036:	687b      	ldr	r3, [r7, #4]
   16038:	2247      	movs	r2, #71	; 0x47
   1603a:	2100      	movs	r1, #0
   1603c:	5499      	strb	r1, [r3, r2]
   1603e:	687b      	ldr	r3, [r7, #4]
   16040:	2248      	movs	r2, #72	; 0x48
   16042:	2100      	movs	r1, #0
   16044:	5499      	strb	r1, [r3, r2]
   16046:	687b      	ldr	r3, [r7, #4]
   16048:	2249      	movs	r2, #73	; 0x49
   1604a:	2100      	movs	r1, #0
   1604c:	5499      	strb	r1, [r3, r2]
   1604e:	687b      	ldr	r3, [r7, #4]
   16050:	224a      	movs	r2, #74	; 0x4a
   16052:	2100      	movs	r1, #0
   16054:	5499      	strb	r1, [r3, r2]
   16056:	687b      	ldr	r3, [r7, #4]
   16058:	224b      	movs	r2, #75	; 0x4b
   1605a:	2100      	movs	r1, #0
   1605c:	5499      	strb	r1, [r3, r2]
   1605e:	687b      	ldr	r3, [r7, #4]
   16060:	224c      	movs	r2, #76	; 0x4c
   16062:	2100      	movs	r1, #0
   16064:	5499      	strb	r1, [r3, r2]
   16066:	687b      	ldr	r3, [r7, #4]
   16068:	224d      	movs	r2, #77	; 0x4d
   1606a:	2100      	movs	r1, #0
   1606c:	5499      	strb	r1, [r3, r2]
   1606e:	687b      	ldr	r3, [r7, #4]
   16070:	224e      	movs	r2, #78	; 0x4e
   16072:	2100      	movs	r1, #0
   16074:	5499      	strb	r1, [r3, r2]
   16076:	687b      	ldr	r3, [r7, #4]
   16078:	224f      	movs	r2, #79	; 0x4f
   1607a:	2100      	movs	r1, #0
   1607c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   1607e:	687b      	ldr	r3, [r7, #4]
   16080:	2250      	movs	r2, #80	; 0x50
   16082:	2100      	movs	r1, #0
   16084:	5499      	strb	r1, [r3, r2]
   16086:	687b      	ldr	r3, [r7, #4]
   16088:	2251      	movs	r2, #81	; 0x51
   1608a:	2100      	movs	r1, #0
   1608c:	5499      	strb	r1, [r3, r2]
   1608e:	687b      	ldr	r3, [r7, #4]
   16090:	2252      	movs	r2, #82	; 0x52
   16092:	2100      	movs	r1, #0
   16094:	5499      	strb	r1, [r3, r2]
   16096:	687b      	ldr	r3, [r7, #4]
   16098:	2253      	movs	r2, #83	; 0x53
   1609a:	2100      	movs	r1, #0
   1609c:	5499      	strb	r1, [r3, r2]
   1609e:	687b      	ldr	r3, [r7, #4]
   160a0:	2254      	movs	r2, #84	; 0x54
   160a2:	2100      	movs	r1, #0
   160a4:	5499      	strb	r1, [r3, r2]
   160a6:	687b      	ldr	r3, [r7, #4]
   160a8:	2255      	movs	r2, #85	; 0x55
   160aa:	2100      	movs	r1, #0
   160ac:	5499      	strb	r1, [r3, r2]
   160ae:	687b      	ldr	r3, [r7, #4]
   160b0:	2256      	movs	r2, #86	; 0x56
   160b2:	2100      	movs	r1, #0
   160b4:	5499      	strb	r1, [r3, r2]
   160b6:	687b      	ldr	r3, [r7, #4]
   160b8:	2257      	movs	r2, #87	; 0x57
   160ba:	2100      	movs	r1, #0
   160bc:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   160be:	687b      	ldr	r3, [r7, #4]
   160c0:	2298      	movs	r2, #152	; 0x98
   160c2:	2100      	movs	r1, #0
   160c4:	5499      	strb	r1, [r3, r2]
   160c6:	687b      	ldr	r3, [r7, #4]
   160c8:	2200      	movs	r2, #0
   160ca:	659a      	str	r2, [r3, #88]	; 0x58
   160cc:	687b      	ldr	r3, [r7, #4]
   160ce:	2200      	movs	r2, #0
   160d0:	679a      	str	r2, [r3, #120]	; 0x78
   160d2:	687b      	ldr	r3, [r7, #4]
   160d4:	2299      	movs	r2, #153	; 0x99
   160d6:	2100      	movs	r1, #0
   160d8:	5499      	strb	r1, [r3, r2]
   160da:	687b      	ldr	r3, [r7, #4]
   160dc:	2200      	movs	r2, #0
   160de:	65da      	str	r2, [r3, #92]	; 0x5c
   160e0:	687b      	ldr	r3, [r7, #4]
   160e2:	2200      	movs	r2, #0
   160e4:	67da      	str	r2, [r3, #124]	; 0x7c
   160e6:	687b      	ldr	r3, [r7, #4]
   160e8:	229a      	movs	r2, #154	; 0x9a
   160ea:	2100      	movs	r1, #0
   160ec:	5499      	strb	r1, [r3, r2]
   160ee:	687b      	ldr	r3, [r7, #4]
   160f0:	2200      	movs	r2, #0
   160f2:	661a      	str	r2, [r3, #96]	; 0x60
   160f4:	687b      	ldr	r3, [r7, #4]
   160f6:	2280      	movs	r2, #128	; 0x80
   160f8:	2100      	movs	r1, #0
   160fa:	5099      	str	r1, [r3, r2]
   160fc:	687b      	ldr	r3, [r7, #4]
   160fe:	229b      	movs	r2, #155	; 0x9b
   16100:	2100      	movs	r1, #0
   16102:	5499      	strb	r1, [r3, r2]
   16104:	687b      	ldr	r3, [r7, #4]
   16106:	2200      	movs	r2, #0
   16108:	665a      	str	r2, [r3, #100]	; 0x64
   1610a:	687b      	ldr	r3, [r7, #4]
   1610c:	2284      	movs	r2, #132	; 0x84
   1610e:	2100      	movs	r1, #0
   16110:	5099      	str	r1, [r3, r2]
   16112:	687b      	ldr	r3, [r7, #4]
   16114:	229c      	movs	r2, #156	; 0x9c
   16116:	2100      	movs	r1, #0
   16118:	5499      	strb	r1, [r3, r2]
   1611a:	687b      	ldr	r3, [r7, #4]
   1611c:	2200      	movs	r2, #0
   1611e:	669a      	str	r2, [r3, #104]	; 0x68
   16120:	687b      	ldr	r3, [r7, #4]
   16122:	2288      	movs	r2, #136	; 0x88
   16124:	2100      	movs	r1, #0
   16126:	5099      	str	r1, [r3, r2]
   16128:	687b      	ldr	r3, [r7, #4]
   1612a:	229d      	movs	r2, #157	; 0x9d
   1612c:	2100      	movs	r1, #0
   1612e:	5499      	strb	r1, [r3, r2]
   16130:	687b      	ldr	r3, [r7, #4]
   16132:	2200      	movs	r2, #0
   16134:	66da      	str	r2, [r3, #108]	; 0x6c
   16136:	687b      	ldr	r3, [r7, #4]
   16138:	228c      	movs	r2, #140	; 0x8c
   1613a:	2100      	movs	r1, #0
   1613c:	5099      	str	r1, [r3, r2]
   1613e:	687b      	ldr	r3, [r7, #4]
   16140:	229e      	movs	r2, #158	; 0x9e
   16142:	2100      	movs	r1, #0
   16144:	5499      	strb	r1, [r3, r2]
   16146:	687b      	ldr	r3, [r7, #4]
   16148:	2200      	movs	r2, #0
   1614a:	671a      	str	r2, [r3, #112]	; 0x70
   1614c:	687b      	ldr	r3, [r7, #4]
   1614e:	2290      	movs	r2, #144	; 0x90
   16150:	2100      	movs	r1, #0
   16152:	5099      	str	r1, [r3, r2]
   16154:	687b      	ldr	r3, [r7, #4]
   16156:	229f      	movs	r2, #159	; 0x9f
   16158:	2100      	movs	r1, #0
   1615a:	5499      	strb	r1, [r3, r2]
   1615c:	687b      	ldr	r3, [r7, #4]
   1615e:	2200      	movs	r2, #0
   16160:	675a      	str	r2, [r3, #116]	; 0x74
   16162:	687b      	ldr	r3, [r7, #4]
   16164:	2294      	movs	r2, #148	; 0x94
   16166:	2100      	movs	r1, #0
   16168:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   1616a:	687b      	ldr	r3, [r7, #4]
   1616c:	22a0      	movs	r2, #160	; 0xa0
   1616e:	2101      	movs	r1, #1
   16170:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   16172:	687b      	ldr	r3, [r7, #4]
   16174:	22a1      	movs	r2, #161	; 0xa1
   16176:	2100      	movs	r1, #0
   16178:	5499      	strb	r1, [r3, r2]
}
   1617a:	46c0      	nop			; (mov r8, r8)
   1617c:	46bd      	mov	sp, r7
   1617e:	b005      	add	sp, #20
   16180:	bd90      	pop	{r4, r7, pc}
   16182:	46c0      	nop			; (mov r8, r8)
   16184:	00015e81 	.word	0x00015e81
   16188:	00024934 	.word	0x00024934

0001618c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   1618c:	b580      	push	{r7, lr}
   1618e:	b086      	sub	sp, #24
   16190:	af00      	add	r7, sp, #0
   16192:	60b9      	str	r1, [r7, #8]
   16194:	607a      	str	r2, [r7, #4]
   16196:	230f      	movs	r3, #15
   16198:	18fb      	adds	r3, r7, r3
   1619a:	1c02      	adds	r2, r0, #0
   1619c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   1619e:	2300      	movs	r3, #0
   161a0:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   161a2:	2300      	movs	r3, #0
   161a4:	613b      	str	r3, [r7, #16]
   161a6:	e01d      	b.n	161e4 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   161a8:	68ba      	ldr	r2, [r7, #8]
   161aa:	693b      	ldr	r3, [r7, #16]
   161ac:	18d3      	adds	r3, r2, r3
   161ae:	3310      	adds	r3, #16
   161b0:	781b      	ldrb	r3, [r3, #0]
   161b2:	2b01      	cmp	r3, #1
   161b4:	d113      	bne.n	161de <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   161b6:	230f      	movs	r3, #15
   161b8:	18fb      	adds	r3, r7, r3
   161ba:	781b      	ldrb	r3, [r3, #0]
   161bc:	4a1b      	ldr	r2, [pc, #108]	; (1622c <_tcc_build_ctrla+0xa0>)
   161be:	5cd3      	ldrb	r3, [r2, r3]
   161c0:	001a      	movs	r2, r3
   161c2:	693b      	ldr	r3, [r7, #16]
   161c4:	429a      	cmp	r2, r3
   161c6:	da01      	bge.n	161cc <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   161c8:	2317      	movs	r3, #23
   161ca:	e02a      	b.n	16222 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   161cc:	2380      	movs	r3, #128	; 0x80
   161ce:	045a      	lsls	r2, r3, #17
   161d0:	693b      	ldr	r3, [r7, #16]
   161d2:	409a      	lsls	r2, r3
   161d4:	0013      	movs	r3, r2
   161d6:	001a      	movs	r2, r3
   161d8:	697b      	ldr	r3, [r7, #20]
   161da:	4313      	orrs	r3, r2
   161dc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   161de:	693b      	ldr	r3, [r7, #16]
   161e0:	3301      	adds	r3, #1
   161e2:	613b      	str	r3, [r7, #16]
   161e4:	693b      	ldr	r3, [r7, #16]
   161e6:	2b03      	cmp	r3, #3
   161e8:	ddde      	ble.n	161a8 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   161ea:	68bb      	ldr	r3, [r7, #8]
   161ec:	22a1      	movs	r2, #161	; 0xa1
   161ee:	5c9b      	ldrb	r3, [r3, r2]
   161f0:	2b00      	cmp	r3, #0
   161f2:	d004      	beq.n	161fe <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   161f4:	697b      	ldr	r3, [r7, #20]
   161f6:	2280      	movs	r2, #128	; 0x80
   161f8:	0112      	lsls	r2, r2, #4
   161fa:	4313      	orrs	r3, r2
   161fc:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   161fe:	68bb      	ldr	r3, [r7, #8]
   16200:	7b1b      	ldrb	r3, [r3, #12]
   16202:	031b      	lsls	r3, r3, #12
   16204:	001a      	movs	r2, r3
   16206:	697b      	ldr	r3, [r7, #20]
   16208:	4313      	orrs	r3, r2
   1620a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   1620c:	68bb      	ldr	r3, [r7, #8]
   1620e:	7adb      	ldrb	r3, [r3, #11]
   16210:	021b      	lsls	r3, r3, #8
   16212:	001a      	movs	r2, r3
   16214:	697b      	ldr	r3, [r7, #20]
   16216:	4313      	orrs	r3, r2
   16218:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   1621a:	687b      	ldr	r3, [r7, #4]
   1621c:	697a      	ldr	r2, [r7, #20]
   1621e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   16220:	2300      	movs	r3, #0
}
   16222:	0018      	movs	r0, r3
   16224:	46bd      	mov	sp, r7
   16226:	b006      	add	sp, #24
   16228:	bd80      	pop	{r7, pc}
   1622a:	46c0      	nop			; (mov r8, r8)
   1622c:	00024940 	.word	0x00024940

00016230 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   16230:	b580      	push	{r7, lr}
   16232:	b086      	sub	sp, #24
   16234:	af00      	add	r7, sp, #0
   16236:	60b9      	str	r1, [r7, #8]
   16238:	607a      	str	r2, [r7, #4]
   1623a:	230f      	movs	r3, #15
   1623c:	18fb      	adds	r3, r7, r3
   1623e:	1c02      	adds	r2, r0, #0
   16240:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   16242:	2317      	movs	r3, #23
   16244:	18fb      	adds	r3, r7, r3
   16246:	2200      	movs	r2, #0
   16248:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   1624a:	68bb      	ldr	r3, [r7, #8]
   1624c:	7a1b      	ldrb	r3, [r3, #8]
   1624e:	2b00      	cmp	r3, #0
   16250:	d007      	beq.n	16262 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   16252:	2317      	movs	r3, #23
   16254:	18fb      	adds	r3, r7, r3
   16256:	2217      	movs	r2, #23
   16258:	18ba      	adds	r2, r7, r2
   1625a:	7812      	ldrb	r2, [r2, #0]
   1625c:	2104      	movs	r1, #4
   1625e:	430a      	orrs	r2, r1
   16260:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   16262:	68bb      	ldr	r3, [r7, #8]
   16264:	7a5b      	ldrb	r3, [r3, #9]
   16266:	2b01      	cmp	r3, #1
   16268:	d107      	bne.n	1627a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   1626a:	2317      	movs	r3, #23
   1626c:	18fb      	adds	r3, r7, r3
   1626e:	2217      	movs	r2, #23
   16270:	18ba      	adds	r2, r7, r2
   16272:	7812      	ldrb	r2, [r2, #0]
   16274:	2101      	movs	r1, #1
   16276:	430a      	orrs	r2, r1
   16278:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   1627a:	687b      	ldr	r3, [r7, #4]
   1627c:	2217      	movs	r2, #23
   1627e:	18ba      	adds	r2, r7, r2
   16280:	7812      	ldrb	r2, [r2, #0]
   16282:	701a      	strb	r2, [r3, #0]
}
   16284:	46c0      	nop			; (mov r8, r8)
   16286:	46bd      	mov	sp, r7
   16288:	b006      	add	sp, #24
   1628a:	bd80      	pop	{r7, pc}

0001628c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   1628c:	b580      	push	{r7, lr}
   1628e:	b088      	sub	sp, #32
   16290:	af00      	add	r7, sp, #0
   16292:	60b9      	str	r1, [r7, #8]
   16294:	607a      	str	r2, [r7, #4]
   16296:	230f      	movs	r3, #15
   16298:	18fb      	adds	r3, r7, r3
   1629a:	1c02      	adds	r2, r0, #0
   1629c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   1629e:	230f      	movs	r3, #15
   162a0:	18fb      	adds	r3, r7, r3
   162a2:	781a      	ldrb	r2, [r3, #0]
   162a4:	231b      	movs	r3, #27
   162a6:	18fb      	adds	r3, r7, r3
   162a8:	493e      	ldr	r1, [pc, #248]	; (163a4 <_tcc_build_faults+0x118>)
   162aa:	5c8a      	ldrb	r2, [r1, r2]
   162ac:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   162ae:	2300      	movs	r3, #0
   162b0:	61fb      	str	r3, [r7, #28]
   162b2:	e06e      	b.n	16392 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   162b4:	69fa      	ldr	r2, [r7, #28]
   162b6:	0013      	movs	r3, r2
   162b8:	009b      	lsls	r3, r3, #2
   162ba:	189b      	adds	r3, r3, r2
   162bc:	005b      	lsls	r3, r3, #1
   162be:	3328      	adds	r3, #40	; 0x28
   162c0:	68ba      	ldr	r2, [r7, #8]
   162c2:	18d3      	adds	r3, r2, r3
   162c4:	3304      	adds	r3, #4
   162c6:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   162c8:	697b      	ldr	r3, [r7, #20]
   162ca:	7a5b      	ldrb	r3, [r3, #9]
   162cc:	221b      	movs	r2, #27
   162ce:	18ba      	adds	r2, r7, r2
   162d0:	7812      	ldrb	r2, [r2, #0]
   162d2:	429a      	cmp	r2, r3
   162d4:	d801      	bhi.n	162da <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   162d6:	2317      	movs	r3, #23
   162d8:	e05f      	b.n	1639a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   162da:	697b      	ldr	r3, [r7, #20]
   162dc:	781b      	ldrb	r3, [r3, #0]
   162de:	2b0f      	cmp	r3, #15
   162e0:	d901      	bls.n	162e6 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   162e2:	2317      	movs	r3, #23
   162e4:	e059      	b.n	1639a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   162e6:	697b      	ldr	r3, [r7, #20]
   162e8:	781b      	ldrb	r3, [r3, #0]
   162ea:	061b      	lsls	r3, r3, #24
   162ec:	001a      	movs	r2, r3
   162ee:	23f0      	movs	r3, #240	; 0xf0
   162f0:	051b      	lsls	r3, r3, #20
   162f2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   162f4:	697b      	ldr	r3, [r7, #20]
   162f6:	785b      	ldrb	r3, [r3, #1]
   162f8:	041b      	lsls	r3, r3, #16
   162fa:	0019      	movs	r1, r3
   162fc:	23ff      	movs	r3, #255	; 0xff
   162fe:	041b      	lsls	r3, r3, #16
   16300:	400b      	ands	r3, r1
   16302:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   16304:	697b      	ldr	r3, [r7, #20]
   16306:	789b      	ldrb	r3, [r3, #2]
   16308:	2b00      	cmp	r3, #0
   1630a:	d001      	beq.n	16310 <_tcc_build_faults+0x84>
   1630c:	2380      	movs	r3, #128	; 0x80
   1630e:	e000      	b.n	16312 <_tcc_build_faults+0x86>
   16310:	2300      	movs	r3, #0
   16312:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   16314:	697b      	ldr	r3, [r7, #20]
   16316:	78db      	ldrb	r3, [r3, #3]
   16318:	2b00      	cmp	r3, #0
   1631a:	d001      	beq.n	16320 <_tcc_build_faults+0x94>
   1631c:	2308      	movs	r3, #8
   1631e:	e000      	b.n	16322 <_tcc_build_faults+0x96>
   16320:	2300      	movs	r3, #0
   16322:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   16324:	697b      	ldr	r3, [r7, #20]
   16326:	791b      	ldrb	r3, [r3, #4]
   16328:	2b00      	cmp	r3, #0
   1632a:	d001      	beq.n	16330 <_tcc_build_faults+0xa4>
   1632c:	2310      	movs	r3, #16
   1632e:	e000      	b.n	16332 <_tcc_build_faults+0xa6>
   16330:	2300      	movs	r3, #0
   16332:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   16334:	697b      	ldr	r3, [r7, #20]
   16336:	795b      	ldrb	r3, [r3, #5]
   16338:	0019      	movs	r1, r3
   1633a:	2303      	movs	r3, #3
   1633c:	400b      	ands	r3, r1
   1633e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   16340:	697b      	ldr	r3, [r7, #20]
   16342:	799b      	ldrb	r3, [r3, #6]
   16344:	015b      	lsls	r3, r3, #5
   16346:	0019      	movs	r1, r3
   16348:	2360      	movs	r3, #96	; 0x60
   1634a:	400b      	ands	r3, r1
   1634c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   1634e:	697b      	ldr	r3, [r7, #20]
   16350:	79db      	ldrb	r3, [r3, #7]
   16352:	021b      	lsls	r3, r3, #8
   16354:	0019      	movs	r1, r3
   16356:	23c0      	movs	r3, #192	; 0xc0
   16358:	009b      	lsls	r3, r3, #2
   1635a:	400b      	ands	r3, r1
   1635c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   1635e:	697b      	ldr	r3, [r7, #20]
   16360:	7a1b      	ldrb	r3, [r3, #8]
   16362:	031b      	lsls	r3, r3, #12
   16364:	0019      	movs	r1, r3
   16366:	23e0      	movs	r3, #224	; 0xe0
   16368:	01db      	lsls	r3, r3, #7
   1636a:	400b      	ands	r3, r1
   1636c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   1636e:	697b      	ldr	r3, [r7, #20]
   16370:	7a5b      	ldrb	r3, [r3, #9]
   16372:	029b      	lsls	r3, r3, #10
   16374:	0019      	movs	r1, r3
   16376:	23c0      	movs	r3, #192	; 0xc0
   16378:	011b      	lsls	r3, r3, #4
   1637a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1637c:	4313      	orrs	r3, r2
   1637e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   16380:	69fb      	ldr	r3, [r7, #28]
   16382:	009b      	lsls	r3, r3, #2
   16384:	687a      	ldr	r2, [r7, #4]
   16386:	18d3      	adds	r3, r2, r3
   16388:	693a      	ldr	r2, [r7, #16]
   1638a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   1638c:	69fb      	ldr	r3, [r7, #28]
   1638e:	3301      	adds	r3, #1
   16390:	61fb      	str	r3, [r7, #28]
   16392:	69fb      	ldr	r3, [r7, #28]
   16394:	2b01      	cmp	r3, #1
   16396:	dd8d      	ble.n	162b4 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   16398:	2300      	movs	r3, #0
}
   1639a:	0018      	movs	r0, r3
   1639c:	46bd      	mov	sp, r7
   1639e:	b008      	add	sp, #32
   163a0:	bd80      	pop	{r7, pc}
   163a2:	46c0      	nop			; (mov r8, r8)
   163a4:	00024940 	.word	0x00024940

000163a8 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   163a8:	b580      	push	{r7, lr}
   163aa:	b088      	sub	sp, #32
   163ac:	af00      	add	r7, sp, #0
   163ae:	60b9      	str	r1, [r7, #8]
   163b0:	607a      	str	r2, [r7, #4]
   163b2:	230f      	movs	r3, #15
   163b4:	18fb      	adds	r3, r7, r3
   163b6:	1c02      	adds	r2, r0, #0
   163b8:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   163ba:	230f      	movs	r3, #15
   163bc:	18fb      	adds	r3, r7, r3
   163be:	781a      	ldrb	r2, [r3, #0]
   163c0:	2317      	movs	r3, #23
   163c2:	18fb      	adds	r3, r7, r3
   163c4:	492d      	ldr	r1, [pc, #180]	; (1647c <_tcc_build_drvctrl+0xd4>)
   163c6:	5c8a      	ldrb	r2, [r1, r2]
   163c8:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   163ca:	2300      	movs	r3, #0
   163cc:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   163ce:	2300      	movs	r3, #0
   163d0:	61fb      	str	r3, [r7, #28]
   163d2:	e048      	b.n	16466 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   163d4:	68ba      	ldr	r2, [r7, #8]
   163d6:	2150      	movs	r1, #80	; 0x50
   163d8:	69fb      	ldr	r3, [r7, #28]
   163da:	18d3      	adds	r3, r2, r3
   163dc:	185b      	adds	r3, r3, r1
   163de:	781b      	ldrb	r3, [r3, #0]
   163e0:	2b00      	cmp	r3, #0
   163e2:	d010      	beq.n	16406 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   163e4:	2317      	movs	r3, #23
   163e6:	18fb      	adds	r3, r7, r3
   163e8:	781a      	ldrb	r2, [r3, #0]
   163ea:	69fb      	ldr	r3, [r7, #28]
   163ec:	429a      	cmp	r2, r3
   163ee:	d801      	bhi.n	163f4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   163f0:	2317      	movs	r3, #23
   163f2:	e03f      	b.n	16474 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   163f4:	2380      	movs	r3, #128	; 0x80
   163f6:	025a      	lsls	r2, r3, #9
   163f8:	69fb      	ldr	r3, [r7, #28]
   163fa:	409a      	lsls	r2, r3
   163fc:	0013      	movs	r3, r2
   163fe:	001a      	movs	r2, r3
   16400:	69bb      	ldr	r3, [r7, #24]
   16402:	4313      	orrs	r3, r2
   16404:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   16406:	68ba      	ldr	r2, [r7, #8]
   16408:	69fb      	ldr	r3, [r7, #28]
   1640a:	331c      	adds	r3, #28
   1640c:	005b      	lsls	r3, r3, #1
   1640e:	18d3      	adds	r3, r2, r3
   16410:	3309      	adds	r3, #9
   16412:	781b      	ldrb	r3, [r3, #0]
   16414:	2b00      	cmp	r3, #0
   16416:	d023      	beq.n	16460 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   16418:	2317      	movs	r3, #23
   1641a:	18fb      	adds	r3, r7, r3
   1641c:	781a      	ldrb	r2, [r3, #0]
   1641e:	69fb      	ldr	r3, [r7, #28]
   16420:	429a      	cmp	r2, r3
   16422:	d801      	bhi.n	16428 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   16424:	2317      	movs	r3, #23
   16426:	e025      	b.n	16474 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   16428:	68ba      	ldr	r2, [r7, #8]
   1642a:	69fb      	ldr	r3, [r7, #28]
   1642c:	331c      	adds	r3, #28
   1642e:	005b      	lsls	r3, r3, #1
   16430:	18d3      	adds	r3, r2, r3
   16432:	3309      	adds	r3, #9
   16434:	781b      	ldrb	r3, [r3, #0]
   16436:	2b02      	cmp	r3, #2
   16438:	d10a      	bne.n	16450 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1643a:	2302      	movs	r3, #2
   1643c:	33ff      	adds	r3, #255	; 0xff
   1643e:	001a      	movs	r2, r3
   16440:	69fb      	ldr	r3, [r7, #28]
   16442:	409a      	lsls	r2, r3
   16444:	0013      	movs	r3, r2
   16446:	001a      	movs	r2, r3
   16448:	69bb      	ldr	r3, [r7, #24]
   1644a:	4313      	orrs	r3, r2
   1644c:	61bb      	str	r3, [r7, #24]
   1644e:	e007      	b.n	16460 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   16450:	2201      	movs	r2, #1
   16452:	69fb      	ldr	r3, [r7, #28]
   16454:	409a      	lsls	r2, r3
   16456:	0013      	movs	r3, r2
   16458:	001a      	movs	r2, r3
   1645a:	69bb      	ldr	r3, [r7, #24]
   1645c:	4313      	orrs	r3, r2
   1645e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   16460:	69fb      	ldr	r3, [r7, #28]
   16462:	3301      	adds	r3, #1
   16464:	61fb      	str	r3, [r7, #28]
   16466:	69fb      	ldr	r3, [r7, #28]
   16468:	2b07      	cmp	r3, #7
   1646a:	d9b3      	bls.n	163d4 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   1646c:	687b      	ldr	r3, [r7, #4]
   1646e:	69ba      	ldr	r2, [r7, #24]
   16470:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   16472:	2300      	movs	r3, #0
}
   16474:	0018      	movs	r0, r3
   16476:	46bd      	mov	sp, r7
   16478:	b008      	add	sp, #32
   1647a:	bd80      	pop	{r7, pc}
   1647c:	00024944 	.word	0x00024944

00016480 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   16480:	b580      	push	{r7, lr}
   16482:	b088      	sub	sp, #32
   16484:	af00      	add	r7, sp, #0
   16486:	60b9      	str	r1, [r7, #8]
   16488:	607a      	str	r2, [r7, #4]
   1648a:	230f      	movs	r3, #15
   1648c:	18fb      	adds	r3, r7, r3
   1648e:	1c02      	adds	r2, r0, #0
   16490:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   16492:	230f      	movs	r3, #15
   16494:	18fb      	adds	r3, r7, r3
   16496:	781a      	ldrb	r2, [r3, #0]
   16498:	2317      	movs	r3, #23
   1649a:	18fb      	adds	r3, r7, r3
   1649c:	491d      	ldr	r1, [pc, #116]	; (16514 <_tcc_build_waves+0x94>)
   1649e:	5c8a      	ldrb	r2, [r1, r2]
   164a0:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   164a2:	68bb      	ldr	r3, [r7, #8]
   164a4:	3310      	adds	r3, #16
   164a6:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   164a8:	693b      	ldr	r3, [r7, #16]
   164aa:	7a5b      	ldrb	r3, [r3, #9]
   164ac:	011b      	lsls	r3, r3, #4
   164ae:	001a      	movs	r2, r3
   164b0:	2330      	movs	r3, #48	; 0x30
   164b2:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   164b4:	693b      	ldr	r3, [r7, #16]
   164b6:	7a1b      	ldrb	r3, [r3, #8]
   164b8:	0019      	movs	r1, r3
   164ba:	2307      	movs	r3, #7
   164bc:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   164be:	4313      	orrs	r3, r2
   164c0:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   164c2:	2300      	movs	r3, #0
   164c4:	61fb      	str	r3, [r7, #28]
   164c6:	e01a      	b.n	164fe <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   164c8:	693a      	ldr	r2, [r7, #16]
   164ca:	69fb      	ldr	r3, [r7, #28]
   164cc:	18d3      	adds	r3, r2, r3
   164ce:	3304      	adds	r3, #4
   164d0:	781b      	ldrb	r3, [r3, #0]
   164d2:	2b00      	cmp	r3, #0
   164d4:	d010      	beq.n	164f8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   164d6:	2317      	movs	r3, #23
   164d8:	18fb      	adds	r3, r7, r3
   164da:	781a      	ldrb	r2, [r3, #0]
   164dc:	69fb      	ldr	r3, [r7, #28]
   164de:	429a      	cmp	r2, r3
   164e0:	dc01      	bgt.n	164e6 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   164e2:	2317      	movs	r3, #23
   164e4:	e012      	b.n	1650c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   164e6:	2380      	movs	r3, #128	; 0x80
   164e8:	025a      	lsls	r2, r3, #9
   164ea:	69fb      	ldr	r3, [r7, #28]
   164ec:	409a      	lsls	r2, r3
   164ee:	0013      	movs	r3, r2
   164f0:	001a      	movs	r2, r3
   164f2:	69bb      	ldr	r3, [r7, #24]
   164f4:	4313      	orrs	r3, r2
   164f6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   164f8:	69fb      	ldr	r3, [r7, #28]
   164fa:	3301      	adds	r3, #1
   164fc:	61fb      	str	r3, [r7, #28]
   164fe:	69fb      	ldr	r3, [r7, #28]
   16500:	2b03      	cmp	r3, #3
   16502:	dde1      	ble.n	164c8 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   16504:	687b      	ldr	r3, [r7, #4]
   16506:	69ba      	ldr	r2, [r7, #24]
   16508:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   1650a:	2300      	movs	r3, #0
}
   1650c:	0018      	movs	r0, r3
   1650e:	46bd      	mov	sp, r7
   16510:	b008      	add	sp, #32
   16512:	bd80      	pop	{r7, pc}
   16514:	00024940 	.word	0x00024940

00016518 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   16518:	b590      	push	{r4, r7, lr}
   1651a:	b091      	sub	sp, #68	; 0x44
   1651c:	af00      	add	r7, sp, #0
   1651e:	60f8      	str	r0, [r7, #12]
   16520:	60b9      	str	r1, [r7, #8]
   16522:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   16524:	233b      	movs	r3, #59	; 0x3b
   16526:	18fc      	adds	r4, r7, r3
   16528:	68bb      	ldr	r3, [r7, #8]
   1652a:	0018      	movs	r0, r3
   1652c:	4bc4      	ldr	r3, [pc, #784]	; (16840 <tcc_init+0x328>)
   1652e:	4798      	blx	r3
   16530:	0003      	movs	r3, r0
   16532:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   16534:	233b      	movs	r3, #59	; 0x3b
   16536:	18fb      	adds	r3, r7, r3
   16538:	781a      	ldrb	r2, [r3, #0]
   1653a:	4bc2      	ldr	r3, [pc, #776]	; (16844 <tcc_init+0x32c>)
   1653c:	0092      	lsls	r2, r2, #2
   1653e:	58d3      	ldr	r3, [r2, r3]
   16540:	0019      	movs	r1, r3
   16542:	2002      	movs	r0, #2
   16544:	4bc0      	ldr	r3, [pc, #768]	; (16848 <tcc_init+0x330>)
   16546:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   16548:	68bb      	ldr	r3, [r7, #8]
   1654a:	681b      	ldr	r3, [r3, #0]
   1654c:	2202      	movs	r2, #2
   1654e:	4013      	ands	r3, r2
   16550:	d001      	beq.n	16556 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   16552:	231c      	movs	r3, #28
   16554:	e1be      	b.n	168d4 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   16556:	68bb      	ldr	r3, [r7, #8]
   16558:	681b      	ldr	r3, [r3, #0]
   1655a:	2201      	movs	r2, #1
   1655c:	4013      	ands	r3, r2
   1655e:	d001      	beq.n	16564 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   16560:	231c      	movs	r3, #28
   16562:	e1b7      	b.n	168d4 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   16564:	233b      	movs	r3, #59	; 0x3b
   16566:	18fb      	adds	r3, r7, r3
   16568:	781a      	ldrb	r2, [r3, #0]
   1656a:	4bb8      	ldr	r3, [pc, #736]	; (1684c <tcc_init+0x334>)
   1656c:	0092      	lsls	r2, r2, #2
   1656e:	58d3      	ldr	r3, [r2, r3]
   16570:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   16572:	687b      	ldr	r3, [r7, #4]
   16574:	681a      	ldr	r2, [r3, #0]
   16576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16578:	429a      	cmp	r2, r3
   1657a:	d804      	bhi.n	16586 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   1657c:	687b      	ldr	r3, [r7, #4]
   1657e:	685a      	ldr	r2, [r3, #4]
   16580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16582:	429a      	cmp	r2, r3
   16584:	d901      	bls.n	1658a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   16586:	2317      	movs	r3, #23
   16588:	e1a4      	b.n	168d4 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   1658a:	2300      	movs	r3, #0
   1658c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1658e:	e00e      	b.n	165ae <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   16590:	687a      	ldr	r2, [r7, #4]
   16592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16594:	3306      	adds	r3, #6
   16596:	009b      	lsls	r3, r3, #2
   16598:	18d3      	adds	r3, r2, r3
   1659a:	3304      	adds	r3, #4
   1659c:	681a      	ldr	r2, [r3, #0]
   1659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   165a0:	429a      	cmp	r2, r3
   165a2:	d901      	bls.n	165a8 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   165a4:	2317      	movs	r3, #23
   165a6:	e195      	b.n	168d4 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   165a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   165aa:	3301      	adds	r3, #1
   165ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   165ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   165b0:	2b03      	cmp	r3, #3
   165b2:	dded      	ble.n	16590 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   165b4:	2300      	movs	r3, #0
   165b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   165b8:	e019      	b.n	165ee <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   165ba:	687a      	ldr	r2, [r7, #4]
   165bc:	2198      	movs	r1, #152	; 0x98
   165be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   165c0:	18d3      	adds	r3, r2, r3
   165c2:	185b      	adds	r3, r3, r1
   165c4:	781b      	ldrb	r3, [r3, #0]
   165c6:	2201      	movs	r2, #1
   165c8:	4053      	eors	r3, r2
   165ca:	b2db      	uxtb	r3, r3
   165cc:	2b00      	cmp	r3, #0
   165ce:	d10a      	bne.n	165e6 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   165d0:	233b      	movs	r3, #59	; 0x3b
   165d2:	18fb      	adds	r3, r7, r3
   165d4:	781b      	ldrb	r3, [r3, #0]
   165d6:	4a9e      	ldr	r2, [pc, #632]	; (16850 <tcc_init+0x338>)
   165d8:	5cd3      	ldrb	r3, [r2, r3]
   165da:	001a      	movs	r2, r3
   165dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   165de:	429a      	cmp	r2, r3
   165e0:	dc02      	bgt.n	165e8 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   165e2:	2317      	movs	r3, #23
   165e4:	e176      	b.n	168d4 <tcc_init+0x3bc>
			continue;
   165e6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   165e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   165ea:	3301      	adds	r3, #1
   165ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   165ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   165f0:	2b07      	cmp	r3, #7
   165f2:	dde2      	ble.n	165ba <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   165f4:	2300      	movs	r3, #0
   165f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   165f8:	2333      	movs	r3, #51	; 0x33
   165fa:	18fc      	adds	r4, r7, r3
   165fc:	232c      	movs	r3, #44	; 0x2c
   165fe:	18fa      	adds	r2, r7, r3
   16600:	6879      	ldr	r1, [r7, #4]
   16602:	233b      	movs	r3, #59	; 0x3b
   16604:	18fb      	adds	r3, r7, r3
   16606:	781b      	ldrb	r3, [r3, #0]
   16608:	0018      	movs	r0, r3
   1660a:	4b92      	ldr	r3, [pc, #584]	; (16854 <tcc_init+0x33c>)
   1660c:	4798      	blx	r3
   1660e:	0003      	movs	r3, r0
   16610:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   16612:	2333      	movs	r3, #51	; 0x33
   16614:	18fb      	adds	r3, r7, r3
   16616:	781b      	ldrb	r3, [r3, #0]
   16618:	2b00      	cmp	r3, #0
   1661a:	d003      	beq.n	16624 <tcc_init+0x10c>
		return status;
   1661c:	2333      	movs	r3, #51	; 0x33
   1661e:	18fb      	adds	r3, r7, r3
   16620:	781b      	ldrb	r3, [r3, #0]
   16622:	e157      	b.n	168d4 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   16624:	232b      	movs	r3, #43	; 0x2b
   16626:	18fa      	adds	r2, r7, r3
   16628:	6879      	ldr	r1, [r7, #4]
   1662a:	233b      	movs	r3, #59	; 0x3b
   1662c:	18fb      	adds	r3, r7, r3
   1662e:	781b      	ldrb	r3, [r3, #0]
   16630:	0018      	movs	r0, r3
   16632:	4b89      	ldr	r3, [pc, #548]	; (16858 <tcc_init+0x340>)
   16634:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   16636:	2333      	movs	r3, #51	; 0x33
   16638:	18fc      	adds	r4, r7, r3
   1663a:	2320      	movs	r3, #32
   1663c:	18fa      	adds	r2, r7, r3
   1663e:	6879      	ldr	r1, [r7, #4]
   16640:	233b      	movs	r3, #59	; 0x3b
   16642:	18fb      	adds	r3, r7, r3
   16644:	781b      	ldrb	r3, [r3, #0]
   16646:	0018      	movs	r0, r3
   16648:	4b84      	ldr	r3, [pc, #528]	; (1685c <tcc_init+0x344>)
   1664a:	4798      	blx	r3
   1664c:	0003      	movs	r3, r0
   1664e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   16650:	2333      	movs	r3, #51	; 0x33
   16652:	18fb      	adds	r3, r7, r3
   16654:	781b      	ldrb	r3, [r3, #0]
   16656:	2b00      	cmp	r3, #0
   16658:	d003      	beq.n	16662 <tcc_init+0x14a>
		return status;
   1665a:	2333      	movs	r3, #51	; 0x33
   1665c:	18fb      	adds	r3, r7, r3
   1665e:	781b      	ldrb	r3, [r3, #0]
   16660:	e138      	b.n	168d4 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   16662:	2300      	movs	r3, #0
   16664:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   16666:	2333      	movs	r3, #51	; 0x33
   16668:	18fc      	adds	r4, r7, r3
   1666a:	231c      	movs	r3, #28
   1666c:	18fa      	adds	r2, r7, r3
   1666e:	6879      	ldr	r1, [r7, #4]
   16670:	233b      	movs	r3, #59	; 0x3b
   16672:	18fb      	adds	r3, r7, r3
   16674:	781b      	ldrb	r3, [r3, #0]
   16676:	0018      	movs	r0, r3
   16678:	4b79      	ldr	r3, [pc, #484]	; (16860 <tcc_init+0x348>)
   1667a:	4798      	blx	r3
   1667c:	0003      	movs	r3, r0
   1667e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   16680:	2333      	movs	r3, #51	; 0x33
   16682:	18fb      	adds	r3, r7, r3
   16684:	781b      	ldrb	r3, [r3, #0]
   16686:	2b00      	cmp	r3, #0
   16688:	d003      	beq.n	16692 <tcc_init+0x17a>
		return status;
   1668a:	2333      	movs	r3, #51	; 0x33
   1668c:	18fb      	adds	r3, r7, r3
   1668e:	781b      	ldrb	r3, [r3, #0]
   16690:	e120      	b.n	168d4 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   16692:	2333      	movs	r3, #51	; 0x33
   16694:	18fc      	adds	r4, r7, r3
   16696:	2318      	movs	r3, #24
   16698:	18fa      	adds	r2, r7, r3
   1669a:	6879      	ldr	r1, [r7, #4]
   1669c:	233b      	movs	r3, #59	; 0x3b
   1669e:	18fb      	adds	r3, r7, r3
   166a0:	781b      	ldrb	r3, [r3, #0]
   166a2:	0018      	movs	r0, r3
   166a4:	4b6f      	ldr	r3, [pc, #444]	; (16864 <tcc_init+0x34c>)
   166a6:	4798      	blx	r3
   166a8:	0003      	movs	r3, r0
   166aa:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   166ac:	2333      	movs	r3, #51	; 0x33
   166ae:	18fb      	adds	r3, r7, r3
   166b0:	781b      	ldrb	r3, [r3, #0]
   166b2:	2b00      	cmp	r3, #0
   166b4:	d003      	beq.n	166be <tcc_init+0x1a6>
		return status;
   166b6:	2333      	movs	r3, #51	; 0x33
   166b8:	18fb      	adds	r3, r7, r3
   166ba:	781b      	ldrb	r3, [r3, #0]
   166bc:	e10a      	b.n	168d4 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   166be:	2300      	movs	r3, #0
   166c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   166c2:	e009      	b.n	166d8 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   166c4:	68fa      	ldr	r2, [r7, #12]
   166c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   166c8:	009b      	lsls	r3, r3, #2
   166ca:	18d3      	adds	r3, r2, r3
   166cc:	3304      	adds	r3, #4
   166ce:	2200      	movs	r2, #0
   166d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   166d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   166d4:	3301      	adds	r3, #1
   166d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   166d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   166da:	2b0b      	cmp	r3, #11
   166dc:	ddf2      	ble.n	166c4 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   166de:	68fb      	ldr	r3, [r7, #12]
   166e0:	2200      	movs	r2, #0
   166e2:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   166e4:	68fb      	ldr	r3, [r7, #12]
   166e6:	2200      	movs	r2, #0
   166e8:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   166ea:	233b      	movs	r3, #59	; 0x3b
   166ec:	18fb      	adds	r3, r7, r3
   166ee:	781a      	ldrb	r2, [r3, #0]
   166f0:	4b5d      	ldr	r3, [pc, #372]	; (16868 <tcc_init+0x350>)
   166f2:	0092      	lsls	r2, r2, #2
   166f4:	68f9      	ldr	r1, [r7, #12]
   166f6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   166f8:	68fb      	ldr	r3, [r7, #12]
   166fa:	68ba      	ldr	r2, [r7, #8]
   166fc:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   166fe:	687b      	ldr	r3, [r7, #4]
   16700:	22a0      	movs	r2, #160	; 0xa0
   16702:	5c99      	ldrb	r1, [r3, r2]
   16704:	68fb      	ldr	r3, [r7, #12]
   16706:	223c      	movs	r2, #60	; 0x3c
   16708:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   1670a:	2314      	movs	r3, #20
   1670c:	18fb      	adds	r3, r7, r3
   1670e:	0018      	movs	r0, r3
   16710:	4b56      	ldr	r3, [pc, #344]	; (1686c <tcc_init+0x354>)
   16712:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   16714:	687b      	ldr	r3, [r7, #4]
   16716:	7a9a      	ldrb	r2, [r3, #10]
   16718:	2314      	movs	r3, #20
   1671a:	18fb      	adds	r3, r7, r3
   1671c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   1671e:	233b      	movs	r3, #59	; 0x3b
   16720:	18fb      	adds	r3, r7, r3
   16722:	781b      	ldrb	r3, [r3, #0]
   16724:	4a52      	ldr	r2, [pc, #328]	; (16870 <tcc_init+0x358>)
   16726:	5cd3      	ldrb	r3, [r2, r3]
   16728:	2214      	movs	r2, #20
   1672a:	18ba      	adds	r2, r7, r2
   1672c:	0011      	movs	r1, r2
   1672e:	0018      	movs	r0, r3
   16730:	4b50      	ldr	r3, [pc, #320]	; (16874 <tcc_init+0x35c>)
   16732:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   16734:	233b      	movs	r3, #59	; 0x3b
   16736:	18fb      	adds	r3, r7, r3
   16738:	781b      	ldrb	r3, [r3, #0]
   1673a:	4a4d      	ldr	r2, [pc, #308]	; (16870 <tcc_init+0x358>)
   1673c:	5cd3      	ldrb	r3, [r2, r3]
   1673e:	0018      	movs	r0, r3
   16740:	4b4d      	ldr	r3, [pc, #308]	; (16878 <tcc_init+0x360>)
   16742:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   16744:	2300      	movs	r3, #0
   16746:	63fb      	str	r3, [r7, #60]	; 0x3c
   16748:	e02d      	b.n	167a6 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   1674a:	687a      	ldr	r2, [r7, #4]
   1674c:	2198      	movs	r1, #152	; 0x98
   1674e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16750:	18d3      	adds	r3, r2, r3
   16752:	185b      	adds	r3, r3, r1
   16754:	781b      	ldrb	r3, [r3, #0]
   16756:	2201      	movs	r2, #1
   16758:	4053      	eors	r3, r2
   1675a:	b2db      	uxtb	r3, r3
   1675c:	2b00      	cmp	r3, #0
   1675e:	d11e      	bne.n	1679e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   16760:	2310      	movs	r3, #16
   16762:	18fb      	adds	r3, r7, r3
   16764:	0018      	movs	r0, r3
   16766:	4b45      	ldr	r3, [pc, #276]	; (1687c <tcc_init+0x364>)
   16768:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   1676a:	687b      	ldr	r3, [r7, #4]
   1676c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1676e:	321e      	adds	r2, #30
   16770:	0092      	lsls	r2, r2, #2
   16772:	58d3      	ldr	r3, [r2, r3]
   16774:	b2da      	uxtb	r2, r3
   16776:	2310      	movs	r3, #16
   16778:	18fb      	adds	r3, r7, r3
   1677a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   1677c:	2310      	movs	r3, #16
   1677e:	18fb      	adds	r3, r7, r3
   16780:	2201      	movs	r2, #1
   16782:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   16784:	687b      	ldr	r3, [r7, #4]
   16786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16788:	3216      	adds	r2, #22
   1678a:	0092      	lsls	r2, r2, #2
   1678c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   1678e:	b2db      	uxtb	r3, r3
   16790:	2210      	movs	r2, #16
   16792:	18ba      	adds	r2, r7, r2
   16794:	0011      	movs	r1, r2
   16796:	0018      	movs	r0, r3
   16798:	4b39      	ldr	r3, [pc, #228]	; (16880 <tcc_init+0x368>)
   1679a:	4798      	blx	r3
   1679c:	e000      	b.n	167a0 <tcc_init+0x288>
			continue;
   1679e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   167a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   167a2:	3301      	adds	r3, #1
   167a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   167a6:	233b      	movs	r3, #59	; 0x3b
   167a8:	18fb      	adds	r3, r7, r3
   167aa:	781b      	ldrb	r3, [r3, #0]
   167ac:	4a28      	ldr	r2, [pc, #160]	; (16850 <tcc_init+0x338>)
   167ae:	5cd3      	ldrb	r3, [r2, r3]
   167b0:	001a      	movs	r2, r3
   167b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   167b4:	429a      	cmp	r2, r3
   167b6:	dcc8      	bgt.n	1674a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   167b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   167ba:	68bb      	ldr	r3, [r7, #8]
   167bc:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   167be:	46c0      	nop			; (mov r8, r8)
   167c0:	68bb      	ldr	r3, [r7, #8]
   167c2:	689b      	ldr	r3, [r3, #8]
   167c4:	2204      	movs	r2, #4
   167c6:	4013      	ands	r3, r2
   167c8:	d1fa      	bne.n	167c0 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   167ca:	68bb      	ldr	r3, [r7, #8]
   167cc:	22ff      	movs	r2, #255	; 0xff
   167ce:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   167d0:	46c0      	nop			; (mov r8, r8)
   167d2:	68bb      	ldr	r3, [r7, #8]
   167d4:	689b      	ldr	r3, [r3, #8]
   167d6:	2204      	movs	r2, #4
   167d8:	4013      	ands	r3, r2
   167da:	d1fa      	bne.n	167d2 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   167dc:	232b      	movs	r3, #43	; 0x2b
   167de:	18fb      	adds	r3, r7, r3
   167e0:	781a      	ldrb	r2, [r3, #0]
   167e2:	68bb      	ldr	r3, [r7, #8]
   167e4:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   167e6:	2320      	movs	r3, #32
   167e8:	18fb      	adds	r3, r7, r3
   167ea:	681a      	ldr	r2, [r3, #0]
   167ec:	68bb      	ldr	r3, [r7, #8]
   167ee:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   167f0:	2320      	movs	r3, #32
   167f2:	18fb      	adds	r3, r7, r3
   167f4:	685a      	ldr	r2, [r3, #4]
   167f6:	68bb      	ldr	r3, [r7, #8]
   167f8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   167fa:	69fa      	ldr	r2, [r7, #28]
   167fc:	68bb      	ldr	r3, [r7, #8]
   167fe:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   16800:	46c0      	nop			; (mov r8, r8)
   16802:	68bb      	ldr	r3, [r7, #8]
   16804:	689b      	ldr	r3, [r3, #8]
   16806:	4a1f      	ldr	r2, [pc, #124]	; (16884 <tcc_init+0x36c>)
   16808:	4013      	ands	r3, r2
   1680a:	d1fa      	bne.n	16802 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   1680c:	69ba      	ldr	r2, [r7, #24]
   1680e:	68bb      	ldr	r3, [r7, #8]
   16810:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   16812:	46c0      	nop			; (mov r8, r8)
   16814:	68bb      	ldr	r3, [r7, #8]
   16816:	689b      	ldr	r3, [r3, #8]
   16818:	2210      	movs	r2, #16
   1681a:	4013      	ands	r3, r2
   1681c:	d1fa      	bne.n	16814 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   1681e:	687b      	ldr	r3, [r7, #4]
   16820:	681a      	ldr	r2, [r3, #0]
   16822:	68bb      	ldr	r3, [r7, #8]
   16824:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   16826:	46c0      	nop			; (mov r8, r8)
   16828:	68bb      	ldr	r3, [r7, #8]
   1682a:	689b      	ldr	r3, [r3, #8]
   1682c:	4a16      	ldr	r2, [pc, #88]	; (16888 <tcc_init+0x370>)
   1682e:	4013      	ands	r3, r2
   16830:	d1fa      	bne.n	16828 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   16832:	687b      	ldr	r3, [r7, #4]
   16834:	685a      	ldr	r2, [r3, #4]
   16836:	68bb      	ldr	r3, [r7, #8]
   16838:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1683a:	2300      	movs	r3, #0
   1683c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1683e:	e03f      	b.n	168c0 <tcc_init+0x3a8>
   16840:	00015e81 	.word	0x00015e81
   16844:	00024928 	.word	0x00024928
   16848:	00015dfd 	.word	0x00015dfd
   1684c:	00024934 	.word	0x00024934
   16850:	00024944 	.word	0x00024944
   16854:	0001618d 	.word	0x0001618d
   16858:	00016231 	.word	0x00016231
   1685c:	0001628d 	.word	0x0001628d
   16860:	000163a9 	.word	0x000163a9
   16864:	00016481 	.word	0x00016481
   16868:	200055a4 	.word	0x200055a4
   1686c:	00015de5 	.word	0x00015de5
   16870:	00024924 	.word	0x00024924
   16874:	000159fd 	.word	0x000159fd
   16878:	00015a41 	.word	0x00015a41
   1687c:	00015e59 	.word	0x00015e59
   16880:	00015d5d 	.word	0x00015d5d
   16884:	00020040 	.word	0x00020040
   16888:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   1688c:	46c0      	nop			; (mov r8, r8)
   1688e:	68bb      	ldr	r3, [r7, #8]
   16890:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   16892:	4912      	ldr	r1, [pc, #72]	; (168dc <tcc_init+0x3c4>)
   16894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16896:	4091      	lsls	r1, r2
   16898:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   1689a:	4013      	ands	r3, r2
   1689c:	d1f7      	bne.n	1688e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   1689e:	687a      	ldr	r2, [r7, #4]
   168a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   168a2:	3306      	adds	r3, #6
   168a4:	009b      	lsls	r3, r3, #2
   168a6:	18d3      	adds	r3, r2, r3
   168a8:	3304      	adds	r3, #4
   168aa:	681a      	ldr	r2, [r3, #0]
   168ac:	68b9      	ldr	r1, [r7, #8]
   168ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   168b0:	3310      	adds	r3, #16
   168b2:	009b      	lsls	r3, r3, #2
   168b4:	18cb      	adds	r3, r1, r3
   168b6:	3304      	adds	r3, #4
   168b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   168ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   168bc:	3301      	adds	r3, #1
   168be:	63fb      	str	r3, [r7, #60]	; 0x3c
   168c0:	233b      	movs	r3, #59	; 0x3b
   168c2:	18fb      	adds	r3, r7, r3
   168c4:	781b      	ldrb	r3, [r3, #0]
   168c6:	4a06      	ldr	r2, [pc, #24]	; (168e0 <tcc_init+0x3c8>)
   168c8:	5cd3      	ldrb	r3, [r2, r3]
   168ca:	001a      	movs	r2, r3
   168cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   168ce:	429a      	cmp	r2, r3
   168d0:	dcdc      	bgt.n	1688c <tcc_init+0x374>
	}

	return STATUS_OK;
   168d2:	2300      	movs	r3, #0
}
   168d4:	0018      	movs	r0, r3
   168d6:	46bd      	mov	sp, r7
   168d8:	b011      	add	sp, #68	; 0x44
   168da:	bd90      	pop	{r4, r7, pc}
   168dc:	00080100 	.word	0x00080100
   168e0:	00024940 	.word	0x00024940

000168e4 <system_interrupt_enable>:
{
   168e4:	b580      	push	{r7, lr}
   168e6:	b082      	sub	sp, #8
   168e8:	af00      	add	r7, sp, #0
   168ea:	0002      	movs	r2, r0
   168ec:	1dfb      	adds	r3, r7, #7
   168ee:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   168f0:	4b06      	ldr	r3, [pc, #24]	; (1690c <system_interrupt_enable+0x28>)
   168f2:	1dfa      	adds	r2, r7, #7
   168f4:	7812      	ldrb	r2, [r2, #0]
   168f6:	0011      	movs	r1, r2
   168f8:	221f      	movs	r2, #31
   168fa:	400a      	ands	r2, r1
   168fc:	2101      	movs	r1, #1
   168fe:	4091      	lsls	r1, r2
   16900:	000a      	movs	r2, r1
   16902:	601a      	str	r2, [r3, #0]
}
   16904:	46c0      	nop			; (mov r8, r8)
   16906:	46bd      	mov	sp, r7
   16908:	b002      	add	sp, #8
   1690a:	bd80      	pop	{r7, pc}
   1690c:	e000e100 	.word	0xe000e100

00016910 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   16910:	b580      	push	{r7, lr}
   16912:	b082      	sub	sp, #8
   16914:	af00      	add	r7, sp, #0
   16916:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   16918:	4a04      	ldr	r2, [pc, #16]	; (1692c <_tcc_interrupt_get_interrupt_vector+0x1c>)
   1691a:	687b      	ldr	r3, [r7, #4]
   1691c:	18d3      	adds	r3, r2, r3
   1691e:	781b      	ldrb	r3, [r3, #0]
   16920:	b25b      	sxtb	r3, r3
}
   16922:	0018      	movs	r0, r3
   16924:	46bd      	mov	sp, r7
   16926:	b002      	add	sp, #8
   16928:	bd80      	pop	{r7, pc}
   1692a:	46c0      	nop			; (mov r8, r8)
   1692c:	2000010c 	.word	0x2000010c

00016930 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   16930:	b580      	push	{r7, lr}
   16932:	b084      	sub	sp, #16
   16934:	af00      	add	r7, sp, #0
   16936:	60f8      	str	r0, [r7, #12]
   16938:	60b9      	str	r1, [r7, #8]
   1693a:	1dfb      	adds	r3, r7, #7
   1693c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1693e:	1dfb      	adds	r3, r7, #7
   16940:	781b      	ldrb	r3, [r3, #0]
   16942:	68fa      	ldr	r2, [r7, #12]
   16944:	009b      	lsls	r3, r3, #2
   16946:	18d3      	adds	r3, r2, r3
   16948:	3304      	adds	r3, #4
   1694a:	68ba      	ldr	r2, [r7, #8]
   1694c:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   1694e:	68fb      	ldr	r3, [r7, #12]
   16950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   16952:	1dfb      	adds	r3, r7, #7
   16954:	7819      	ldrb	r1, [r3, #0]
   16956:	4b05      	ldr	r3, [pc, #20]	; (1696c <tcc_register_callback+0x3c>)
   16958:	0089      	lsls	r1, r1, #2
   1695a:	58cb      	ldr	r3, [r1, r3]
   1695c:	431a      	orrs	r2, r3
   1695e:	68fb      	ldr	r3, [r7, #12]
   16960:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   16962:	2300      	movs	r3, #0
}
   16964:	0018      	movs	r0, r3
   16966:	46bd      	mov	sp, r7
   16968:	b004      	add	sp, #16
   1696a:	bd80      	pop	{r7, pc}
   1696c:	00024948 	.word	0x00024948

00016970 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   16970:	b580      	push	{r7, lr}
   16972:	b082      	sub	sp, #8
   16974:	af00      	add	r7, sp, #0
   16976:	6078      	str	r0, [r7, #4]
   16978:	000a      	movs	r2, r1
   1697a:	1cfb      	adds	r3, r7, #3
   1697c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   1697e:	687b      	ldr	r3, [r7, #4]
   16980:	681b      	ldr	r3, [r3, #0]
   16982:	0018      	movs	r0, r3
   16984:	4b0f      	ldr	r3, [pc, #60]	; (169c4 <tcc_enable_callback+0x54>)
   16986:	4798      	blx	r3
   16988:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   1698a:	0018      	movs	r0, r3
   1698c:	4b0e      	ldr	r3, [pc, #56]	; (169c8 <tcc_enable_callback+0x58>)
   1698e:	4798      	blx	r3
   16990:	0003      	movs	r3, r0
   16992:	0018      	movs	r0, r3
   16994:	4b0d      	ldr	r3, [pc, #52]	; (169cc <tcc_enable_callback+0x5c>)
   16996:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   16998:	687b      	ldr	r3, [r7, #4]
   1699a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1699c:	1cfb      	adds	r3, r7, #3
   1699e:	7819      	ldrb	r1, [r3, #0]
   169a0:	4b0b      	ldr	r3, [pc, #44]	; (169d0 <tcc_enable_callback+0x60>)
   169a2:	0089      	lsls	r1, r1, #2
   169a4:	58cb      	ldr	r3, [r1, r3]
   169a6:	431a      	orrs	r2, r3
   169a8:	687b      	ldr	r3, [r7, #4]
   169aa:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   169ac:	687b      	ldr	r3, [r7, #4]
   169ae:	681b      	ldr	r3, [r3, #0]
   169b0:	1cfa      	adds	r2, r7, #3
   169b2:	7811      	ldrb	r1, [r2, #0]
   169b4:	4a06      	ldr	r2, [pc, #24]	; (169d0 <tcc_enable_callback+0x60>)
   169b6:	0089      	lsls	r1, r1, #2
   169b8:	588a      	ldr	r2, [r1, r2]
   169ba:	629a      	str	r2, [r3, #40]	; 0x28
}
   169bc:	46c0      	nop			; (mov r8, r8)
   169be:	46bd      	mov	sp, r7
   169c0:	b002      	add	sp, #8
   169c2:	bd80      	pop	{r7, pc}
   169c4:	00015e81 	.word	0x00015e81
   169c8:	00016911 	.word	0x00016911
   169cc:	000168e5 	.word	0x000168e5
   169d0:	00024948 	.word	0x00024948

000169d4 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   169d4:	b580      	push	{r7, lr}
   169d6:	af00      	add	r7, sp, #0
   169d8:	2000      	movs	r0, #0
   169da:	4b02      	ldr	r3, [pc, #8]	; (169e4 <TCC0_Handler+0x10>)
   169dc:	4798      	blx	r3
   169de:	46c0      	nop			; (mov r8, r8)
   169e0:	46bd      	mov	sp, r7
   169e2:	bd80      	pop	{r7, pc}
   169e4:	00016a11 	.word	0x00016a11

000169e8 <TCC1_Handler>:
   169e8:	b580      	push	{r7, lr}
   169ea:	af00      	add	r7, sp, #0
   169ec:	2001      	movs	r0, #1
   169ee:	4b02      	ldr	r3, [pc, #8]	; (169f8 <TCC1_Handler+0x10>)
   169f0:	4798      	blx	r3
   169f2:	46c0      	nop			; (mov r8, r8)
   169f4:	46bd      	mov	sp, r7
   169f6:	bd80      	pop	{r7, pc}
   169f8:	00016a11 	.word	0x00016a11

000169fc <TCC2_Handler>:
   169fc:	b580      	push	{r7, lr}
   169fe:	af00      	add	r7, sp, #0
   16a00:	2002      	movs	r0, #2
   16a02:	4b02      	ldr	r3, [pc, #8]	; (16a0c <TCC2_Handler+0x10>)
   16a04:	4798      	blx	r3
   16a06:	46c0      	nop			; (mov r8, r8)
   16a08:	46bd      	mov	sp, r7
   16a0a:	bd80      	pop	{r7, pc}
   16a0c:	00016a11 	.word	0x00016a11

00016a10 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   16a10:	b580      	push	{r7, lr}
   16a12:	b086      	sub	sp, #24
   16a14:	af00      	add	r7, sp, #0
   16a16:	0002      	movs	r2, r0
   16a18:	1dfb      	adds	r3, r7, #7
   16a1a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   16a1c:	1dfb      	adds	r3, r7, #7
   16a1e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   16a20:	4b18      	ldr	r3, [pc, #96]	; (16a84 <_tcc_interrupt_handler+0x74>)
   16a22:	0092      	lsls	r2, r2, #2
   16a24:	58d3      	ldr	r3, [r2, r3]
   16a26:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   16a28:	693b      	ldr	r3, [r7, #16]
   16a2a:	681b      	ldr	r3, [r3, #0]
   16a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   16a2e:	693b      	ldr	r3, [r7, #16]
   16a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   16a32:	401a      	ands	r2, r3
			module->enable_callback_mask);
   16a34:	693b      	ldr	r3, [r7, #16]
   16a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   16a38:	4013      	ands	r3, r2
   16a3a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   16a3c:	2300      	movs	r3, #0
   16a3e:	617b      	str	r3, [r7, #20]
   16a40:	e019      	b.n	16a76 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   16a42:	4b11      	ldr	r3, [pc, #68]	; (16a88 <_tcc_interrupt_handler+0x78>)
   16a44:	697a      	ldr	r2, [r7, #20]
   16a46:	0092      	lsls	r2, r2, #2
   16a48:	58d3      	ldr	r3, [r2, r3]
   16a4a:	68fa      	ldr	r2, [r7, #12]
   16a4c:	4013      	ands	r3, r2
   16a4e:	d00f      	beq.n	16a70 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   16a50:	693a      	ldr	r2, [r7, #16]
   16a52:	697b      	ldr	r3, [r7, #20]
   16a54:	009b      	lsls	r3, r3, #2
   16a56:	18d3      	adds	r3, r2, r3
   16a58:	3304      	adds	r3, #4
   16a5a:	681b      	ldr	r3, [r3, #0]
   16a5c:	693a      	ldr	r2, [r7, #16]
   16a5e:	0010      	movs	r0, r2
   16a60:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   16a62:	693b      	ldr	r3, [r7, #16]
   16a64:	681b      	ldr	r3, [r3, #0]
   16a66:	4a08      	ldr	r2, [pc, #32]	; (16a88 <_tcc_interrupt_handler+0x78>)
   16a68:	6979      	ldr	r1, [r7, #20]
   16a6a:	0089      	lsls	r1, r1, #2
   16a6c:	588a      	ldr	r2, [r1, r2]
   16a6e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   16a70:	697b      	ldr	r3, [r7, #20]
   16a72:	3301      	adds	r3, #1
   16a74:	617b      	str	r3, [r7, #20]
   16a76:	697b      	ldr	r3, [r7, #20]
   16a78:	2b0b      	cmp	r3, #11
   16a7a:	dde2      	ble.n	16a42 <_tcc_interrupt_handler+0x32>
		}
	}
}
   16a7c:	46c0      	nop			; (mov r8, r8)
   16a7e:	46bd      	mov	sp, r7
   16a80:	b006      	add	sp, #24
   16a82:	bd80      	pop	{r7, pc}
   16a84:	200055a4 	.word	0x200055a4
   16a88:	00024948 	.word	0x00024948

00016a8c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   16a8c:	b580      	push	{r7, lr}
   16a8e:	b082      	sub	sp, #8
   16a90:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   16a92:	4b2f      	ldr	r3, [pc, #188]	; (16b50 <Reset_Handler+0xc4>)
   16a94:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   16a96:	4b2f      	ldr	r3, [pc, #188]	; (16b54 <Reset_Handler+0xc8>)
   16a98:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   16a9a:	687a      	ldr	r2, [r7, #4]
   16a9c:	683b      	ldr	r3, [r7, #0]
   16a9e:	429a      	cmp	r2, r3
   16aa0:	d00c      	beq.n	16abc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   16aa2:	e007      	b.n	16ab4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   16aa4:	683b      	ldr	r3, [r7, #0]
   16aa6:	1d1a      	adds	r2, r3, #4
   16aa8:	603a      	str	r2, [r7, #0]
   16aaa:	687a      	ldr	r2, [r7, #4]
   16aac:	1d11      	adds	r1, r2, #4
   16aae:	6079      	str	r1, [r7, #4]
   16ab0:	6812      	ldr	r2, [r2, #0]
   16ab2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   16ab4:	683a      	ldr	r2, [r7, #0]
   16ab6:	4b28      	ldr	r3, [pc, #160]	; (16b58 <Reset_Handler+0xcc>)
   16ab8:	429a      	cmp	r2, r3
   16aba:	d3f3      	bcc.n	16aa4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   16abc:	4b27      	ldr	r3, [pc, #156]	; (16b5c <Reset_Handler+0xd0>)
   16abe:	603b      	str	r3, [r7, #0]
   16ac0:	e004      	b.n	16acc <Reset_Handler+0x40>
                *pDest++ = 0;
   16ac2:	683b      	ldr	r3, [r7, #0]
   16ac4:	1d1a      	adds	r2, r3, #4
   16ac6:	603a      	str	r2, [r7, #0]
   16ac8:	2200      	movs	r2, #0
   16aca:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   16acc:	683a      	ldr	r2, [r7, #0]
   16ace:	4b24      	ldr	r3, [pc, #144]	; (16b60 <Reset_Handler+0xd4>)
   16ad0:	429a      	cmp	r2, r3
   16ad2:	d3f6      	bcc.n	16ac2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   16ad4:	4b23      	ldr	r3, [pc, #140]	; (16b64 <Reset_Handler+0xd8>)
   16ad6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   16ad8:	4b23      	ldr	r3, [pc, #140]	; (16b68 <Reset_Handler+0xdc>)
   16ada:	687a      	ldr	r2, [r7, #4]
   16adc:	21ff      	movs	r1, #255	; 0xff
   16ade:	438a      	bics	r2, r1
   16ae0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   16ae2:	4a22      	ldr	r2, [pc, #136]	; (16b6c <Reset_Handler+0xe0>)
   16ae4:	2390      	movs	r3, #144	; 0x90
   16ae6:	005b      	lsls	r3, r3, #1
   16ae8:	2102      	movs	r1, #2
   16aea:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   16aec:	4a20      	ldr	r2, [pc, #128]	; (16b70 <Reset_Handler+0xe4>)
   16aee:	78d3      	ldrb	r3, [r2, #3]
   16af0:	2103      	movs	r1, #3
   16af2:	438b      	bics	r3, r1
   16af4:	1c19      	adds	r1, r3, #0
   16af6:	2302      	movs	r3, #2
   16af8:	430b      	orrs	r3, r1
   16afa:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   16afc:	4a1c      	ldr	r2, [pc, #112]	; (16b70 <Reset_Handler+0xe4>)
   16afe:	78d3      	ldrb	r3, [r2, #3]
   16b00:	210c      	movs	r1, #12
   16b02:	438b      	bics	r3, r1
   16b04:	1c19      	adds	r1, r3, #0
   16b06:	2308      	movs	r3, #8
   16b08:	430b      	orrs	r3, r1
   16b0a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   16b0c:	4a19      	ldr	r2, [pc, #100]	; (16b74 <Reset_Handler+0xe8>)
   16b0e:	7b93      	ldrb	r3, [r2, #14]
   16b10:	2130      	movs	r1, #48	; 0x30
   16b12:	438b      	bics	r3, r1
   16b14:	1c19      	adds	r1, r3, #0
   16b16:	2320      	movs	r3, #32
   16b18:	430b      	orrs	r3, r1
   16b1a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   16b1c:	4a15      	ldr	r2, [pc, #84]	; (16b74 <Reset_Handler+0xe8>)
   16b1e:	7b93      	ldrb	r3, [r2, #14]
   16b20:	210c      	movs	r1, #12
   16b22:	438b      	bics	r3, r1
   16b24:	1c19      	adds	r1, r3, #0
   16b26:	2308      	movs	r3, #8
   16b28:	430b      	orrs	r3, r1
   16b2a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   16b2c:	4a11      	ldr	r2, [pc, #68]	; (16b74 <Reset_Handler+0xe8>)
   16b2e:	7b93      	ldrb	r3, [r2, #14]
   16b30:	2103      	movs	r1, #3
   16b32:	438b      	bics	r3, r1
   16b34:	1c19      	adds	r1, r3, #0
   16b36:	2302      	movs	r3, #2
   16b38:	430b      	orrs	r3, r1
   16b3a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   16b3c:	4a0e      	ldr	r2, [pc, #56]	; (16b78 <Reset_Handler+0xec>)
   16b3e:	6853      	ldr	r3, [r2, #4]
   16b40:	2180      	movs	r1, #128	; 0x80
   16b42:	430b      	orrs	r3, r1
   16b44:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   16b46:	4b0d      	ldr	r3, [pc, #52]	; (16b7c <Reset_Handler+0xf0>)
   16b48:	4798      	blx	r3

        /* Branch to main function */
        main();
   16b4a:	4b0d      	ldr	r3, [pc, #52]	; (16b80 <Reset_Handler+0xf4>)
   16b4c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   16b4e:	e7fe      	b.n	16b4e <Reset_Handler+0xc2>
   16b50:	00025574 	.word	0x00025574
   16b54:	20000000 	.word	0x20000000
   16b58:	200002e4 	.word	0x200002e4
   16b5c:	200002f0 	.word	0x200002f0
   16b60:	20005614 	.word	0x20005614
   16b64:	00000000 	.word	0x00000000
   16b68:	e000ed00 	.word	0xe000ed00
   16b6c:	41007000 	.word	0x41007000
   16b70:	41005000 	.word	0x41005000
   16b74:	41004800 	.word	0x41004800
   16b78:	41004000 	.word	0x41004000
   16b7c:	0002007d 	.word	0x0002007d
   16b80:	0001e2c1 	.word	0x0001e2c1

00016b84 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   16b84:	b580      	push	{r7, lr}
   16b86:	af00      	add	r7, sp, #0
  __asm volatile (
   16b88:	2004      	movs	r0, #4
   16b8a:	4671      	mov	r1, lr
   16b8c:	4208      	tst	r0, r1
   16b8e:	d002      	beq.n	16b96 <_MSP>
   16b90:	f3ef 8009 	mrs	r0, PSP
   16b94:	e001      	b.n	16b9a <_HALT>

00016b96 <_MSP>:
   16b96:	f3ef 8008 	mrs	r0, MSP

00016b9a <_HALT>:
   16b9a:	6941      	ldr	r1, [r0, #20]
   16b9c:	e004      	b.n	16ba8 <HardFault_HandlerC>
   16b9e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   16ba0:	46c0      	nop			; (mov r8, r8)
   16ba2:	46bd      	mov	sp, r7
   16ba4:	bd80      	pop	{r7, pc}
	...

00016ba8 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   16ba8:	b580      	push	{r7, lr}
   16baa:	b090      	sub	sp, #64	; 0x40
   16bac:	af00      	add	r7, sp, #0
   16bae:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   16bb0:	687b      	ldr	r3, [r7, #4]
   16bb2:	681b      	ldr	r3, [r3, #0]
   16bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   16bb6:	687b      	ldr	r3, [r7, #4]
   16bb8:	685b      	ldr	r3, [r3, #4]
   16bba:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   16bbc:	687b      	ldr	r3, [r7, #4]
   16bbe:	689b      	ldr	r3, [r3, #8]
   16bc0:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   16bc2:	687b      	ldr	r3, [r7, #4]
   16bc4:	68db      	ldr	r3, [r3, #12]
   16bc6:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   16bc8:	687b      	ldr	r3, [r7, #4]
   16bca:	691b      	ldr	r3, [r3, #16]
   16bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   16bce:	687b      	ldr	r3, [r7, #4]
   16bd0:	695b      	ldr	r3, [r3, #20]
   16bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   16bd4:	687b      	ldr	r3, [r7, #4]
   16bd6:	699b      	ldr	r3, [r3, #24]
   16bd8:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   16bda:	687b      	ldr	r3, [r7, #4]
   16bdc:	69db      	ldr	r3, [r3, #28]
   16bde:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   16be0:	4b0b      	ldr	r3, [pc, #44]	; (16c10 <HardFault_HandlerC+0x68>)
   16be2:	681b      	ldr	r3, [r3, #0]
   16be4:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   16be6:	4b0b      	ldr	r3, [pc, #44]	; (16c14 <HardFault_HandlerC+0x6c>)
   16be8:	681b      	ldr	r3, [r3, #0]
   16bea:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   16bec:	4b0a      	ldr	r3, [pc, #40]	; (16c18 <HardFault_HandlerC+0x70>)
   16bee:	681b      	ldr	r3, [r3, #0]
   16bf0:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   16bf2:	4b0a      	ldr	r3, [pc, #40]	; (16c1c <HardFault_HandlerC+0x74>)
   16bf4:	681b      	ldr	r3, [r3, #0]
   16bf6:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   16bf8:	4b09      	ldr	r3, [pc, #36]	; (16c20 <HardFault_HandlerC+0x78>)
   16bfa:	681b      	ldr	r3, [r3, #0]
   16bfc:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   16bfe:	4b09      	ldr	r3, [pc, #36]	; (16c24 <HardFault_HandlerC+0x7c>)
   16c00:	681b      	ldr	r3, [r3, #0]
   16c02:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   16c04:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   16c06:	46c0      	nop			; (mov r8, r8)
   16c08:	46bd      	mov	sp, r7
   16c0a:	b010      	add	sp, #64	; 0x40
   16c0c:	bd80      	pop	{r7, pc}
   16c0e:	46c0      	nop			; (mov r8, r8)
   16c10:	e000ed28 	.word	0xe000ed28
   16c14:	e000ed2c 	.word	0xe000ed2c
   16c18:	e000ed30 	.word	0xe000ed30
   16c1c:	e000ed3c 	.word	0xe000ed3c
   16c20:	e000ed34 	.word	0xe000ed34
   16c24:	e000ed38 	.word	0xe000ed38

00016c28 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   16c28:	b580      	push	{r7, lr}
   16c2a:	b086      	sub	sp, #24
   16c2c:	af00      	add	r7, sp, #0
   16c2e:	60f8      	str	r0, [r7, #12]
   16c30:	60b9      	str	r1, [r7, #8]
   16c32:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   16c34:	2300      	movs	r3, #0
   16c36:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   16c38:	68fb      	ldr	r3, [r7, #12]
   16c3a:	2b00      	cmp	r3, #0
   16c3c:	d012      	beq.n	16c64 <_read+0x3c>
		return -1;
   16c3e:	2301      	movs	r3, #1
   16c40:	425b      	negs	r3, r3
   16c42:	e013      	b.n	16c6c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   16c44:	4b0b      	ldr	r3, [pc, #44]	; (16c74 <_read+0x4c>)
   16c46:	681a      	ldr	r2, [r3, #0]
   16c48:	4b0b      	ldr	r3, [pc, #44]	; (16c78 <_read+0x50>)
   16c4a:	681b      	ldr	r3, [r3, #0]
   16c4c:	68b9      	ldr	r1, [r7, #8]
   16c4e:	0018      	movs	r0, r3
   16c50:	4790      	blx	r2
		ptr++;
   16c52:	68bb      	ldr	r3, [r7, #8]
   16c54:	3301      	adds	r3, #1
   16c56:	60bb      	str	r3, [r7, #8]
		nChars++;
   16c58:	697b      	ldr	r3, [r7, #20]
   16c5a:	3301      	adds	r3, #1
   16c5c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   16c5e:	687b      	ldr	r3, [r7, #4]
   16c60:	3b01      	subs	r3, #1
   16c62:	607b      	str	r3, [r7, #4]
   16c64:	687b      	ldr	r3, [r7, #4]
   16c66:	2b00      	cmp	r3, #0
   16c68:	dcec      	bgt.n	16c44 <_read+0x1c>
	}
	return nChars;
   16c6a:	697b      	ldr	r3, [r7, #20]
}
   16c6c:	0018      	movs	r0, r3
   16c6e:	46bd      	mov	sp, r7
   16c70:	b006      	add	sp, #24
   16c72:	bd80      	pop	{r7, pc}
   16c74:	200055b0 	.word	0x200055b0
   16c78:	200055b8 	.word	0x200055b8

00016c7c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   16c7c:	b580      	push	{r7, lr}
   16c7e:	b086      	sub	sp, #24
   16c80:	af00      	add	r7, sp, #0
   16c82:	60f8      	str	r0, [r7, #12]
   16c84:	60b9      	str	r1, [r7, #8]
   16c86:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   16c88:	2300      	movs	r3, #0
   16c8a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   16c8c:	68fb      	ldr	r3, [r7, #12]
   16c8e:	2b01      	cmp	r3, #1
   16c90:	d01d      	beq.n	16cce <_write+0x52>
   16c92:	68fb      	ldr	r3, [r7, #12]
   16c94:	2b02      	cmp	r3, #2
   16c96:	d01a      	beq.n	16cce <_write+0x52>
   16c98:	68fb      	ldr	r3, [r7, #12]
   16c9a:	2b03      	cmp	r3, #3
   16c9c:	d017      	beq.n	16cce <_write+0x52>
		return -1;
   16c9e:	2301      	movs	r3, #1
   16ca0:	425b      	negs	r3, r3
   16ca2:	e018      	b.n	16cd6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   16ca4:	4b0e      	ldr	r3, [pc, #56]	; (16ce0 <_write+0x64>)
   16ca6:	681a      	ldr	r2, [r3, #0]
   16ca8:	4b0e      	ldr	r3, [pc, #56]	; (16ce4 <_write+0x68>)
   16caa:	6818      	ldr	r0, [r3, #0]
   16cac:	68bb      	ldr	r3, [r7, #8]
   16cae:	1c59      	adds	r1, r3, #1
   16cb0:	60b9      	str	r1, [r7, #8]
   16cb2:	781b      	ldrb	r3, [r3, #0]
   16cb4:	0019      	movs	r1, r3
   16cb6:	4790      	blx	r2
   16cb8:	1e03      	subs	r3, r0, #0
   16cba:	da02      	bge.n	16cc2 <_write+0x46>
			return -1;
   16cbc:	2301      	movs	r3, #1
   16cbe:	425b      	negs	r3, r3
   16cc0:	e009      	b.n	16cd6 <_write+0x5a>
		}
		++nChars;
   16cc2:	697b      	ldr	r3, [r7, #20]
   16cc4:	3301      	adds	r3, #1
   16cc6:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   16cc8:	687b      	ldr	r3, [r7, #4]
   16cca:	3b01      	subs	r3, #1
   16ccc:	607b      	str	r3, [r7, #4]
   16cce:	687b      	ldr	r3, [r7, #4]
   16cd0:	2b00      	cmp	r3, #0
   16cd2:	d1e7      	bne.n	16ca4 <_write+0x28>
	}
	return nChars;
   16cd4:	697b      	ldr	r3, [r7, #20]
}
   16cd6:	0018      	movs	r0, r3
   16cd8:	46bd      	mov	sp, r7
   16cda:	b006      	add	sp, #24
   16cdc:	bd80      	pop	{r7, pc}
   16cde:	46c0      	nop			; (mov r8, r8)
   16ce0:	200055b4 	.word	0x200055b4
   16ce4:	200055b8 	.word	0x200055b8

00016ce8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   16ce8:	b580      	push	{r7, lr}
   16cea:	b084      	sub	sp, #16
   16cec:	af00      	add	r7, sp, #0
   16cee:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   16cf0:	4b0a      	ldr	r3, [pc, #40]	; (16d1c <_sbrk+0x34>)
   16cf2:	681b      	ldr	r3, [r3, #0]
   16cf4:	2b00      	cmp	r3, #0
   16cf6:	d102      	bne.n	16cfe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   16cf8:	4b08      	ldr	r3, [pc, #32]	; (16d1c <_sbrk+0x34>)
   16cfa:	4a09      	ldr	r2, [pc, #36]	; (16d20 <_sbrk+0x38>)
   16cfc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   16cfe:	4b07      	ldr	r3, [pc, #28]	; (16d1c <_sbrk+0x34>)
   16d00:	681b      	ldr	r3, [r3, #0]
   16d02:	60fb      	str	r3, [r7, #12]

	heap += incr;
   16d04:	4b05      	ldr	r3, [pc, #20]	; (16d1c <_sbrk+0x34>)
   16d06:	681a      	ldr	r2, [r3, #0]
   16d08:	687b      	ldr	r3, [r7, #4]
   16d0a:	18d2      	adds	r2, r2, r3
   16d0c:	4b03      	ldr	r3, [pc, #12]	; (16d1c <_sbrk+0x34>)
   16d0e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   16d10:	68fb      	ldr	r3, [r7, #12]
}
   16d12:	0018      	movs	r0, r3
   16d14:	46bd      	mov	sp, r7
   16d16:	b004      	add	sp, #16
   16d18:	bd80      	pop	{r7, pc}
   16d1a:	46c0      	nop			; (mov r8, r8)
   16d1c:	20003d5c 	.word	0x20003d5c
   16d20:	20007618 	.word	0x20007618

00016d24 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   16d24:	b580      	push	{r7, lr}
   16d26:	b082      	sub	sp, #8
   16d28:	af00      	add	r7, sp, #0
   16d2a:	6078      	str	r0, [r7, #4]
	return -1;
   16d2c:	2301      	movs	r3, #1
   16d2e:	425b      	negs	r3, r3
}
   16d30:	0018      	movs	r0, r3
   16d32:	46bd      	mov	sp, r7
   16d34:	b002      	add	sp, #8
   16d36:	bd80      	pop	{r7, pc}

00016d38 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   16d38:	b580      	push	{r7, lr}
   16d3a:	b082      	sub	sp, #8
   16d3c:	af00      	add	r7, sp, #0
   16d3e:	6078      	str	r0, [r7, #4]
   16d40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   16d42:	683b      	ldr	r3, [r7, #0]
   16d44:	2280      	movs	r2, #128	; 0x80
   16d46:	0192      	lsls	r2, r2, #6
   16d48:	605a      	str	r2, [r3, #4]

	return 0;
   16d4a:	2300      	movs	r3, #0
}
   16d4c:	0018      	movs	r0, r3
   16d4e:	46bd      	mov	sp, r7
   16d50:	b002      	add	sp, #8
   16d52:	bd80      	pop	{r7, pc}

00016d54 <_isatty>:

extern int _isatty(int file)
{
   16d54:	b580      	push	{r7, lr}
   16d56:	b082      	sub	sp, #8
   16d58:	af00      	add	r7, sp, #0
   16d5a:	6078      	str	r0, [r7, #4]
	return 1;
   16d5c:	2301      	movs	r3, #1
}
   16d5e:	0018      	movs	r0, r3
   16d60:	46bd      	mov	sp, r7
   16d62:	b002      	add	sp, #8
   16d64:	bd80      	pop	{r7, pc}

00016d66 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   16d66:	b580      	push	{r7, lr}
   16d68:	b084      	sub	sp, #16
   16d6a:	af00      	add	r7, sp, #0
   16d6c:	60f8      	str	r0, [r7, #12]
   16d6e:	60b9      	str	r1, [r7, #8]
   16d70:	607a      	str	r2, [r7, #4]
	return 0;
   16d72:	2300      	movs	r3, #0
}
   16d74:	0018      	movs	r0, r3
   16d76:	46bd      	mov	sp, r7
   16d78:	b004      	add	sp, #16
   16d7a:	bd80      	pop	{r7, pc}

00016d7c <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   16d7c:	b580      	push	{r7, lr}
   16d7e:	b082      	sub	sp, #8
   16d80:	af00      	add	r7, sp, #0
   16d82:	6078      	str	r0, [r7, #4]
	time->second = 0;
   16d84:	687b      	ldr	r3, [r7, #4]
   16d86:	2200      	movs	r2, #0
   16d88:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   16d8a:	687b      	ldr	r3, [r7, #4]
   16d8c:	2200      	movs	r2, #0
   16d8e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   16d90:	687b      	ldr	r3, [r7, #4]
   16d92:	2200      	movs	r2, #0
   16d94:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   16d96:	687b      	ldr	r3, [r7, #4]
   16d98:	2200      	movs	r2, #0
   16d9a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   16d9c:	687b      	ldr	r3, [r7, #4]
   16d9e:	2201      	movs	r2, #1
   16da0:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   16da2:	687b      	ldr	r3, [r7, #4]
   16da4:	2201      	movs	r2, #1
   16da6:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   16da8:	687b      	ldr	r3, [r7, #4]
   16daa:	22fa      	movs	r2, #250	; 0xfa
   16dac:	00d2      	lsls	r2, r2, #3
   16dae:	80da      	strh	r2, [r3, #6]
}
   16db0:	46c0      	nop			; (mov r8, r8)
   16db2:	46bd      	mov	sp, r7
   16db4:	b002      	add	sp, #8
   16db6:	bd80      	pop	{r7, pc}

00016db8 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   16db8:	b580      	push	{r7, lr}
   16dba:	b086      	sub	sp, #24
   16dbc:	af00      	add	r7, sp, #0
   16dbe:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   16dc0:	230c      	movs	r3, #12
   16dc2:	18fb      	adds	r3, r7, r3
   16dc4:	0018      	movs	r0, r3
   16dc6:	4b23      	ldr	r3, [pc, #140]	; (16e54 <rtc_calendar_get_config_defaults+0x9c>)
   16dc8:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   16dca:	687b      	ldr	r3, [r7, #4]
   16dcc:	22a0      	movs	r2, #160	; 0xa0
   16dce:	0112      	lsls	r2, r2, #4
   16dd0:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   16dd2:	687b      	ldr	r3, [r7, #4]
   16dd4:	2200      	movs	r2, #0
   16dd6:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   16dd8:	687b      	ldr	r3, [r7, #4]
   16dda:	2200      	movs	r2, #0
   16ddc:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   16dde:	687b      	ldr	r3, [r7, #4]
   16de0:	2200      	movs	r2, #0
   16de2:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   16de4:	687b      	ldr	r3, [r7, #4]
   16de6:	22fa      	movs	r2, #250	; 0xfa
   16de8:	00d2      	lsls	r2, r2, #3
   16dea:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   16dec:	2317      	movs	r3, #23
   16dee:	18fb      	adds	r3, r7, r3
   16df0:	2200      	movs	r2, #0
   16df2:	701a      	strb	r2, [r3, #0]
   16df4:	e025      	b.n	16e42 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   16df6:	2317      	movs	r3, #23
   16df8:	18fb      	adds	r3, r7, r3
   16dfa:	781a      	ldrb	r2, [r3, #0]
   16dfc:	6879      	ldr	r1, [r7, #4]
   16dfe:	2008      	movs	r0, #8
   16e00:	0013      	movs	r3, r2
   16e02:	009b      	lsls	r3, r3, #2
   16e04:	189b      	adds	r3, r3, r2
   16e06:	005b      	lsls	r3, r3, #1
   16e08:	18cb      	adds	r3, r1, r3
   16e0a:	181a      	adds	r2, r3, r0
   16e0c:	230c      	movs	r3, #12
   16e0e:	18fb      	adds	r3, r7, r3
   16e10:	0010      	movs	r0, r2
   16e12:	0019      	movs	r1, r3
   16e14:	2308      	movs	r3, #8
   16e16:	001a      	movs	r2, r3
   16e18:	4b0f      	ldr	r3, [pc, #60]	; (16e58 <rtc_calendar_get_config_defaults+0xa0>)
   16e1a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   16e1c:	2317      	movs	r3, #23
   16e1e:	18fb      	adds	r3, r7, r3
   16e20:	781a      	ldrb	r2, [r3, #0]
   16e22:	6879      	ldr	r1, [r7, #4]
   16e24:	0013      	movs	r3, r2
   16e26:	009b      	lsls	r3, r3, #2
   16e28:	189b      	adds	r3, r3, r2
   16e2a:	005b      	lsls	r3, r3, #1
   16e2c:	18cb      	adds	r3, r1, r3
   16e2e:	3310      	adds	r3, #16
   16e30:	2206      	movs	r2, #6
   16e32:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   16e34:	2317      	movs	r3, #23
   16e36:	18fb      	adds	r3, r7, r3
   16e38:	781a      	ldrb	r2, [r3, #0]
   16e3a:	2317      	movs	r3, #23
   16e3c:	18fb      	adds	r3, r7, r3
   16e3e:	3201      	adds	r2, #1
   16e40:	701a      	strb	r2, [r3, #0]
   16e42:	2317      	movs	r3, #23
   16e44:	18fb      	adds	r3, r7, r3
   16e46:	781b      	ldrb	r3, [r3, #0]
   16e48:	2b00      	cmp	r3, #0
   16e4a:	d0d4      	beq.n	16df6 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   16e4c:	46c0      	nop			; (mov r8, r8)
   16e4e:	46bd      	mov	sp, r7
   16e50:	b006      	add	sp, #24
   16e52:	bd80      	pop	{r7, pc}
   16e54:	00016d7d 	.word	0x00016d7d
   16e58:	000200ed 	.word	0x000200ed

00016e5c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   16e5c:	b580      	push	{r7, lr}
   16e5e:	b088      	sub	sp, #32
   16e60:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   16e62:	230c      	movs	r3, #12
   16e64:	18fb      	adds	r3, r7, r3
   16e66:	0018      	movs	r0, r3
   16e68:	4b1a      	ldr	r3, [pc, #104]	; (16ed4 <configure_rtc_calendar+0x78>)
   16e6a:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   16e6c:	1d3b      	adds	r3, r7, #4
   16e6e:	0018      	movs	r0, r3
   16e70:	4b19      	ldr	r3, [pc, #100]	; (16ed8 <configure_rtc_calendar+0x7c>)
   16e72:	4798      	blx	r3
	init_time.year   = 2014;
   16e74:	1d3b      	adds	r3, r7, #4
   16e76:	4a19      	ldr	r2, [pc, #100]	; (16edc <configure_rtc_calendar+0x80>)
   16e78:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   16e7a:	1d3b      	adds	r3, r7, #4
   16e7c:	2201      	movs	r2, #1
   16e7e:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   16e80:	1d3b      	adds	r3, r7, #4
   16e82:	2201      	movs	r2, #1
   16e84:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   16e86:	1d3b      	adds	r3, r7, #4
   16e88:	2200      	movs	r2, #0
   16e8a:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   16e8c:	1d3b      	adds	r3, r7, #4
   16e8e:	2200      	movs	r2, #0
   16e90:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   16e92:	1d3b      	adds	r3, r7, #4
   16e94:	2204      	movs	r2, #4
   16e96:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   16e98:	230c      	movs	r3, #12
   16e9a:	18fb      	adds	r3, r7, r3
   16e9c:	2201      	movs	r2, #1
   16e9e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   16ea0:	230c      	movs	r3, #12
   16ea2:	18fb      	adds	r3, r7, r3
   16ea4:	1d3a      	adds	r2, r7, #4
   16ea6:	3308      	adds	r3, #8
   16ea8:	ca03      	ldmia	r2!, {r0, r1}
   16eaa:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   16eac:	230c      	movs	r3, #12
   16eae:	18fb      	adds	r3, r7, r3
   16eb0:	2206      	movs	r2, #6
   16eb2:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   16eb4:	230c      	movs	r3, #12
   16eb6:	18fa      	adds	r2, r7, r3
   16eb8:	4909      	ldr	r1, [pc, #36]	; (16ee0 <configure_rtc_calendar+0x84>)
   16eba:	4b0a      	ldr	r3, [pc, #40]	; (16ee4 <configure_rtc_calendar+0x88>)
   16ebc:	0018      	movs	r0, r3
   16ebe:	4b0a      	ldr	r3, [pc, #40]	; (16ee8 <configure_rtc_calendar+0x8c>)
   16ec0:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   16ec2:	4b08      	ldr	r3, [pc, #32]	; (16ee4 <configure_rtc_calendar+0x88>)
   16ec4:	0018      	movs	r0, r3
   16ec6:	4b09      	ldr	r3, [pc, #36]	; (16eec <configure_rtc_calendar+0x90>)
   16ec8:	4798      	blx	r3
}
   16eca:	46c0      	nop			; (mov r8, r8)
   16ecc:	46bd      	mov	sp, r7
   16ece:	b008      	add	sp, #32
   16ed0:	bd80      	pop	{r7, pc}
   16ed2:	46c0      	nop			; (mov r8, r8)
   16ed4:	00016db9 	.word	0x00016db9
   16ed8:	00016d7d 	.word	0x00016d7d
   16edc:	000007de 	.word	0x000007de
   16ee0:	40001400 	.word	0x40001400
   16ee4:	200055bc 	.word	0x200055bc
   16ee8:	00012999 	.word	0x00012999
   16eec:	000126c5 	.word	0x000126c5

00016ef0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   16ef0:	b590      	push	{r4, r7, lr}
   16ef2:	b085      	sub	sp, #20
   16ef4:	af00      	add	r7, sp, #0
   16ef6:	0002      	movs	r2, r0
   16ef8:	1dfb      	adds	r3, r7, #7
   16efa:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   16efc:	4b1a      	ldr	r3, [pc, #104]	; (16f68 <disk_initialize+0x78>)
   16efe:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   16f00:	1dfb      	adds	r3, r7, #7
   16f02:	781b      	ldrb	r3, [r3, #0]
   16f04:	2b01      	cmp	r3, #1
   16f06:	d901      	bls.n	16f0c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   16f08:	2301      	movs	r3, #1
   16f0a:	e029      	b.n	16f60 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   16f0c:	2300      	movs	r3, #0
   16f0e:	60fb      	str	r3, [r7, #12]
   16f10:	e010      	b.n	16f34 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   16f12:	230b      	movs	r3, #11
   16f14:	18fc      	adds	r4, r7, r3
   16f16:	1dfb      	adds	r3, r7, #7
   16f18:	781b      	ldrb	r3, [r3, #0]
   16f1a:	0018      	movs	r0, r3
   16f1c:	4b13      	ldr	r3, [pc, #76]	; (16f6c <disk_initialize+0x7c>)
   16f1e:	4798      	blx	r3
   16f20:	0003      	movs	r3, r0
   16f22:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   16f24:	230b      	movs	r3, #11
   16f26:	18fb      	adds	r3, r7, r3
   16f28:	781b      	ldrb	r3, [r3, #0]
   16f2a:	2b03      	cmp	r3, #3
   16f2c:	d106      	bne.n	16f3c <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   16f2e:	68fb      	ldr	r3, [r7, #12]
   16f30:	3301      	adds	r3, #1
   16f32:	60fb      	str	r3, [r7, #12]
   16f34:	68fb      	ldr	r3, [r7, #12]
   16f36:	2b01      	cmp	r3, #1
   16f38:	ddeb      	ble.n	16f12 <disk_initialize+0x22>
   16f3a:	e000      	b.n	16f3e <disk_initialize+0x4e>
			break;
   16f3c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   16f3e:	230b      	movs	r3, #11
   16f40:	18fb      	adds	r3, r7, r3
   16f42:	781b      	ldrb	r3, [r3, #0]
   16f44:	2b00      	cmp	r3, #0
   16f46:	d001      	beq.n	16f4c <disk_initialize+0x5c>
		return STA_NOINIT;
   16f48:	2301      	movs	r3, #1
   16f4a:	e009      	b.n	16f60 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   16f4c:	1dfb      	adds	r3, r7, #7
   16f4e:	781b      	ldrb	r3, [r3, #0]
   16f50:	0018      	movs	r0, r3
   16f52:	4b07      	ldr	r3, [pc, #28]	; (16f70 <disk_initialize+0x80>)
   16f54:	4798      	blx	r3
   16f56:	1e03      	subs	r3, r0, #0
   16f58:	d001      	beq.n	16f5e <disk_initialize+0x6e>
		return STA_PROTECT;
   16f5a:	2304      	movs	r3, #4
   16f5c:	e000      	b.n	16f60 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   16f5e:	2300      	movs	r3, #0
}
   16f60:	0018      	movs	r0, r3
   16f62:	46bd      	mov	sp, r7
   16f64:	b005      	add	sp, #20
   16f66:	bd90      	pop	{r4, r7, pc}
   16f68:	00016e5d 	.word	0x00016e5d
   16f6c:	00011bc1 	.word	0x00011bc1
   16f70:	00011c79 	.word	0x00011c79

00016f74 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   16f74:	b580      	push	{r7, lr}
   16f76:	b082      	sub	sp, #8
   16f78:	af00      	add	r7, sp, #0
   16f7a:	0002      	movs	r2, r0
   16f7c:	1dfb      	adds	r3, r7, #7
   16f7e:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   16f80:	1dfb      	adds	r3, r7, #7
   16f82:	781b      	ldrb	r3, [r3, #0]
   16f84:	0018      	movs	r0, r3
   16f86:	4b08      	ldr	r3, [pc, #32]	; (16fa8 <disk_status+0x34>)
   16f88:	4798      	blx	r3
   16f8a:	1e03      	subs	r3, r0, #0
   16f8c:	d002      	beq.n	16f94 <disk_status+0x20>
   16f8e:	2b02      	cmp	r3, #2
   16f90:	d002      	beq.n	16f98 <disk_status+0x24>
   16f92:	e003      	b.n	16f9c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   16f94:	2300      	movs	r3, #0
   16f96:	e002      	b.n	16f9e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   16f98:	2303      	movs	r3, #3
   16f9a:	e000      	b.n	16f9e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   16f9c:	2301      	movs	r3, #1
	}
}
   16f9e:	0018      	movs	r0, r3
   16fa0:	46bd      	mov	sp, r7
   16fa2:	b002      	add	sp, #8
   16fa4:	bd80      	pop	{r7, pc}
   16fa6:	46c0      	nop			; (mov r8, r8)
   16fa8:	00011bc1 	.word	0x00011bc1

00016fac <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   16fac:	b590      	push	{r4, r7, lr}
   16fae:	b089      	sub	sp, #36	; 0x24
   16fb0:	af00      	add	r7, sp, #0
   16fb2:	60b9      	str	r1, [r7, #8]
   16fb4:	607a      	str	r2, [r7, #4]
   16fb6:	0019      	movs	r1, r3
   16fb8:	230f      	movs	r3, #15
   16fba:	18fb      	adds	r3, r7, r3
   16fbc:	1c02      	adds	r2, r0, #0
   16fbe:	701a      	strb	r2, [r3, #0]
   16fc0:	230e      	movs	r3, #14
   16fc2:	18fb      	adds	r3, r7, r3
   16fc4:	1c0a      	adds	r2, r1, #0
   16fc6:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   16fc8:	231b      	movs	r3, #27
   16fca:	18fc      	adds	r4, r7, r3
   16fcc:	230f      	movs	r3, #15
   16fce:	18fb      	adds	r3, r7, r3
   16fd0:	781b      	ldrb	r3, [r3, #0]
   16fd2:	0018      	movs	r0, r3
   16fd4:	4b28      	ldr	r3, [pc, #160]	; (17078 <disk_read+0xcc>)
   16fd6:	4798      	blx	r3
   16fd8:	0003      	movs	r3, r0
   16fda:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   16fdc:	231b      	movs	r3, #27
   16fde:	18fb      	adds	r3, r7, r3
   16fe0:	781b      	ldrb	r3, [r3, #0]
   16fe2:	2b00      	cmp	r3, #0
   16fe4:	d101      	bne.n	16fea <disk_read+0x3e>
		return RES_ERROR;
   16fe6:	2301      	movs	r3, #1
   16fe8:	e042      	b.n	17070 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   16fea:	2314      	movs	r3, #20
   16fec:	18fa      	adds	r2, r7, r3
   16fee:	230f      	movs	r3, #15
   16ff0:	18fb      	adds	r3, r7, r3
   16ff2:	781b      	ldrb	r3, [r3, #0]
   16ff4:	0011      	movs	r1, r2
   16ff6:	0018      	movs	r0, r3
   16ff8:	4b20      	ldr	r3, [pc, #128]	; (1707c <disk_read+0xd0>)
   16ffa:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   16ffc:	230e      	movs	r3, #14
   16ffe:	18fb      	adds	r3, r7, r3
   17000:	781b      	ldrb	r3, [r3, #0]
   17002:	221b      	movs	r2, #27
   17004:	18ba      	adds	r2, r7, r2
   17006:	7812      	ldrb	r2, [r2, #0]
   17008:	4353      	muls	r3, r2
   1700a:	001a      	movs	r2, r3
   1700c:	687b      	ldr	r3, [r7, #4]
   1700e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   17010:	697b      	ldr	r3, [r7, #20]
   17012:	3301      	adds	r3, #1
   17014:	211b      	movs	r1, #27
   17016:	1879      	adds	r1, r7, r1
   17018:	7809      	ldrb	r1, [r1, #0]
   1701a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   1701c:	429a      	cmp	r2, r3
   1701e:	d901      	bls.n	17024 <disk_read+0x78>
		return RES_PARERR;
   17020:	2304      	movs	r3, #4
   17022:	e025      	b.n	17070 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   17024:	2300      	movs	r3, #0
   17026:	61fb      	str	r3, [r7, #28]
   17028:	e01b      	b.n	17062 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   1702a:	231b      	movs	r3, #27
   1702c:	18fb      	adds	r3, r7, r3
   1702e:	781b      	ldrb	r3, [r3, #0]
   17030:	69fa      	ldr	r2, [r7, #28]
   17032:	435a      	muls	r2, r3
   17034:	687b      	ldr	r3, [r7, #4]
   17036:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   17038:	231b      	movs	r3, #27
   1703a:	18fb      	adds	r3, r7, r3
   1703c:	781b      	ldrb	r3, [r3, #0]
   1703e:	69fa      	ldr	r2, [r7, #28]
   17040:	4353      	muls	r3, r2
   17042:	025b      	lsls	r3, r3, #9
   17044:	68ba      	ldr	r2, [r7, #8]
   17046:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   17048:	230f      	movs	r3, #15
   1704a:	18fb      	adds	r3, r7, r3
   1704c:	781b      	ldrb	r3, [r3, #0]
   1704e:	0018      	movs	r0, r3
   17050:	4b0b      	ldr	r3, [pc, #44]	; (17080 <disk_read+0xd4>)
   17052:	4798      	blx	r3
   17054:	1e03      	subs	r3, r0, #0
   17056:	d001      	beq.n	1705c <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   17058:	2301      	movs	r3, #1
   1705a:	e009      	b.n	17070 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   1705c:	69fb      	ldr	r3, [r7, #28]
   1705e:	3301      	adds	r3, #1
   17060:	61fb      	str	r3, [r7, #28]
   17062:	230e      	movs	r3, #14
   17064:	18fb      	adds	r3, r7, r3
   17066:	781a      	ldrb	r2, [r3, #0]
   17068:	69fb      	ldr	r3, [r7, #28]
   1706a:	429a      	cmp	r2, r3
   1706c:	d8dd      	bhi.n	1702a <disk_read+0x7e>
		}
	}

	return RES_OK;
   1706e:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   17070:	0018      	movs	r0, r3
   17072:	46bd      	mov	sp, r7
   17074:	b009      	add	sp, #36	; 0x24
   17076:	bd90      	pop	{r4, r7, pc}
   17078:	00011c4d 	.word	0x00011c4d
   1707c:	00011c01 	.word	0x00011c01
   17080:	00011cc1 	.word	0x00011cc1

00017084 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   17084:	b590      	push	{r4, r7, lr}
   17086:	b089      	sub	sp, #36	; 0x24
   17088:	af00      	add	r7, sp, #0
   1708a:	60b9      	str	r1, [r7, #8]
   1708c:	607a      	str	r2, [r7, #4]
   1708e:	0019      	movs	r1, r3
   17090:	230f      	movs	r3, #15
   17092:	18fb      	adds	r3, r7, r3
   17094:	1c02      	adds	r2, r0, #0
   17096:	701a      	strb	r2, [r3, #0]
   17098:	230e      	movs	r3, #14
   1709a:	18fb      	adds	r3, r7, r3
   1709c:	1c0a      	adds	r2, r1, #0
   1709e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   170a0:	231b      	movs	r3, #27
   170a2:	18fc      	adds	r4, r7, r3
   170a4:	230f      	movs	r3, #15
   170a6:	18fb      	adds	r3, r7, r3
   170a8:	781b      	ldrb	r3, [r3, #0]
   170aa:	0018      	movs	r0, r3
   170ac:	4b28      	ldr	r3, [pc, #160]	; (17150 <disk_write+0xcc>)
   170ae:	4798      	blx	r3
   170b0:	0003      	movs	r3, r0
   170b2:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   170b4:	231b      	movs	r3, #27
   170b6:	18fb      	adds	r3, r7, r3
   170b8:	781b      	ldrb	r3, [r3, #0]
   170ba:	2b00      	cmp	r3, #0
   170bc:	d101      	bne.n	170c2 <disk_write+0x3e>
		return RES_ERROR;
   170be:	2301      	movs	r3, #1
   170c0:	e042      	b.n	17148 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   170c2:	2314      	movs	r3, #20
   170c4:	18fa      	adds	r2, r7, r3
   170c6:	230f      	movs	r3, #15
   170c8:	18fb      	adds	r3, r7, r3
   170ca:	781b      	ldrb	r3, [r3, #0]
   170cc:	0011      	movs	r1, r2
   170ce:	0018      	movs	r0, r3
   170d0:	4b20      	ldr	r3, [pc, #128]	; (17154 <disk_write+0xd0>)
   170d2:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   170d4:	230e      	movs	r3, #14
   170d6:	18fb      	adds	r3, r7, r3
   170d8:	781b      	ldrb	r3, [r3, #0]
   170da:	221b      	movs	r2, #27
   170dc:	18ba      	adds	r2, r7, r2
   170de:	7812      	ldrb	r2, [r2, #0]
   170e0:	4353      	muls	r3, r2
   170e2:	001a      	movs	r2, r3
   170e4:	687b      	ldr	r3, [r7, #4]
   170e6:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   170e8:	697b      	ldr	r3, [r7, #20]
   170ea:	3301      	adds	r3, #1
   170ec:	211b      	movs	r1, #27
   170ee:	1879      	adds	r1, r7, r1
   170f0:	7809      	ldrb	r1, [r1, #0]
   170f2:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   170f4:	429a      	cmp	r2, r3
   170f6:	d901      	bls.n	170fc <disk_write+0x78>
		return RES_PARERR;
   170f8:	2304      	movs	r3, #4
   170fa:	e025      	b.n	17148 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   170fc:	2300      	movs	r3, #0
   170fe:	61fb      	str	r3, [r7, #28]
   17100:	e01b      	b.n	1713a <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   17102:	231b      	movs	r3, #27
   17104:	18fb      	adds	r3, r7, r3
   17106:	781b      	ldrb	r3, [r3, #0]
   17108:	69fa      	ldr	r2, [r7, #28]
   1710a:	435a      	muls	r2, r3
   1710c:	687b      	ldr	r3, [r7, #4]
   1710e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   17110:	231b      	movs	r3, #27
   17112:	18fb      	adds	r3, r7, r3
   17114:	781b      	ldrb	r3, [r3, #0]
   17116:	69fa      	ldr	r2, [r7, #28]
   17118:	4353      	muls	r3, r2
   1711a:	025b      	lsls	r3, r3, #9
   1711c:	68ba      	ldr	r2, [r7, #8]
   1711e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   17120:	230f      	movs	r3, #15
   17122:	18fb      	adds	r3, r7, r3
   17124:	781b      	ldrb	r3, [r3, #0]
   17126:	0018      	movs	r0, r3
   17128:	4b0b      	ldr	r3, [pc, #44]	; (17158 <disk_write+0xd4>)
   1712a:	4798      	blx	r3
   1712c:	1e03      	subs	r3, r0, #0
   1712e:	d001      	beq.n	17134 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   17130:	2301      	movs	r3, #1
   17132:	e009      	b.n	17148 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   17134:	69fb      	ldr	r3, [r7, #28]
   17136:	3301      	adds	r3, #1
   17138:	61fb      	str	r3, [r7, #28]
   1713a:	230e      	movs	r3, #14
   1713c:	18fb      	adds	r3, r7, r3
   1713e:	781a      	ldrb	r2, [r3, #0]
   17140:	69fb      	ldr	r3, [r7, #28]
   17142:	429a      	cmp	r2, r3
   17144:	d8dd      	bhi.n	17102 <disk_write+0x7e>
		}
	}

	return RES_OK;
   17146:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   17148:	0018      	movs	r0, r3
   1714a:	46bd      	mov	sp, r7
   1714c:	b009      	add	sp, #36	; 0x24
   1714e:	bd90      	pop	{r4, r7, pc}
   17150:	00011c4d 	.word	0x00011c4d
   17154:	00011c01 	.word	0x00011c01
   17158:	00011d15 	.word	0x00011d15

0001715c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   1715c:	b590      	push	{r4, r7, lr}
   1715e:	b085      	sub	sp, #20
   17160:	af00      	add	r7, sp, #0
   17162:	603a      	str	r2, [r7, #0]
   17164:	1dfb      	adds	r3, r7, #7
   17166:	1c02      	adds	r2, r0, #0
   17168:	701a      	strb	r2, [r3, #0]
   1716a:	1dbb      	adds	r3, r7, #6
   1716c:	1c0a      	adds	r2, r1, #0
   1716e:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   17170:	230f      	movs	r3, #15
   17172:	18fb      	adds	r3, r7, r3
   17174:	2204      	movs	r2, #4
   17176:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   17178:	1dbb      	adds	r3, r7, #6
   1717a:	781b      	ldrb	r3, [r3, #0]
   1717c:	2b01      	cmp	r3, #1
   1717e:	d00f      	beq.n	171a0 <disk_ioctl+0x44>
   17180:	dc02      	bgt.n	17188 <disk_ioctl+0x2c>
   17182:	2b00      	cmp	r3, #0
   17184:	d044      	beq.n	17210 <disk_ioctl+0xb4>
   17186:	e054      	b.n	17232 <disk_ioctl+0xd6>
   17188:	2b02      	cmp	r3, #2
   1718a:	d01a      	beq.n	171c2 <disk_ioctl+0x66>
   1718c:	2b03      	cmp	r3, #3
   1718e:	d150      	bne.n	17232 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   17190:	683b      	ldr	r3, [r7, #0]
   17192:	2201      	movs	r2, #1
   17194:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   17196:	230f      	movs	r3, #15
   17198:	18fb      	adds	r3, r7, r3
   1719a:	2200      	movs	r2, #0
   1719c:	701a      	strb	r2, [r3, #0]
		break;
   1719e:	e04c      	b.n	1723a <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   171a0:	2308      	movs	r3, #8
   171a2:	18fa      	adds	r2, r7, r3
   171a4:	1dfb      	adds	r3, r7, #7
   171a6:	781b      	ldrb	r3, [r3, #0]
   171a8:	0011      	movs	r1, r2
   171aa:	0018      	movs	r0, r3
   171ac:	4b26      	ldr	r3, [pc, #152]	; (17248 <disk_ioctl+0xec>)
   171ae:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   171b0:	68bb      	ldr	r3, [r7, #8]
   171b2:	1c5a      	adds	r2, r3, #1
   171b4:	683b      	ldr	r3, [r7, #0]
   171b6:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   171b8:	230f      	movs	r3, #15
   171ba:	18fb      	adds	r3, r7, r3
   171bc:	2200      	movs	r2, #0
   171be:	701a      	strb	r2, [r3, #0]
	}
	break;
   171c0:	e03b      	b.n	1723a <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   171c2:	230e      	movs	r3, #14
   171c4:	18fc      	adds	r4, r7, r3
   171c6:	1dfb      	adds	r3, r7, #7
   171c8:	781b      	ldrb	r3, [r3, #0]
   171ca:	0018      	movs	r0, r3
   171cc:	4b1f      	ldr	r3, [pc, #124]	; (1724c <disk_ioctl+0xf0>)
   171ce:	4798      	blx	r3
   171d0:	0003      	movs	r3, r0
   171d2:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   171d4:	230e      	movs	r3, #14
   171d6:	18fb      	adds	r3, r7, r3
   171d8:	781b      	ldrb	r3, [r3, #0]
   171da:	2b01      	cmp	r3, #1
   171dc:	d010      	beq.n	17200 <disk_ioctl+0xa4>
   171de:	230e      	movs	r3, #14
   171e0:	18fb      	adds	r3, r7, r3
   171e2:	781b      	ldrb	r3, [r3, #0]
   171e4:	2b02      	cmp	r3, #2
   171e6:	d00b      	beq.n	17200 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   171e8:	230e      	movs	r3, #14
   171ea:	18fb      	adds	r3, r7, r3
   171ec:	781b      	ldrb	r3, [r3, #0]
   171ee:	2b04      	cmp	r3, #4
   171f0:	d006      	beq.n	17200 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   171f2:	230e      	movs	r3, #14
   171f4:	18fb      	adds	r3, r7, r3
   171f6:	781b      	ldrb	r3, [r3, #0]
   171f8:	2b08      	cmp	r3, #8
   171fa:	d001      	beq.n	17200 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   171fc:	2301      	movs	r3, #1
   171fe:	e01f      	b.n	17240 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   17200:	683b      	ldr	r3, [r7, #0]
   17202:	2200      	movs	r2, #0
   17204:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   17206:	230f      	movs	r3, #15
   17208:	18fb      	adds	r3, r7, r3
   1720a:	2200      	movs	r2, #0
   1720c:	701a      	strb	r2, [r3, #0]
	}
	break;
   1720e:	e014      	b.n	1723a <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   17210:	1dfb      	adds	r3, r7, #7
   17212:	781b      	ldrb	r3, [r3, #0]
   17214:	0018      	movs	r0, r3
   17216:	4b0e      	ldr	r3, [pc, #56]	; (17250 <disk_ioctl+0xf4>)
   17218:	4798      	blx	r3
   1721a:	1e03      	subs	r3, r0, #0
   1721c:	d104      	bne.n	17228 <disk_ioctl+0xcc>
			res = RES_OK;
   1721e:	230f      	movs	r3, #15
   17220:	18fb      	adds	r3, r7, r3
   17222:	2200      	movs	r2, #0
   17224:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   17226:	e008      	b.n	1723a <disk_ioctl+0xde>
			res = RES_NOTRDY;
   17228:	230f      	movs	r3, #15
   1722a:	18fb      	adds	r3, r7, r3
   1722c:	2203      	movs	r2, #3
   1722e:	701a      	strb	r2, [r3, #0]
		break;
   17230:	e003      	b.n	1723a <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   17232:	230f      	movs	r3, #15
   17234:	18fb      	adds	r3, r7, r3
   17236:	2204      	movs	r2, #4
   17238:	701a      	strb	r2, [r3, #0]
	}

	return res;
   1723a:	230f      	movs	r3, #15
   1723c:	18fb      	adds	r3, r7, r3
   1723e:	781b      	ldrb	r3, [r3, #0]
}
   17240:	0018      	movs	r0, r3
   17242:	46bd      	mov	sp, r7
   17244:	b005      	add	sp, #20
   17246:	bd90      	pop	{r4, r7, pc}
   17248:	00011c01 	.word	0x00011c01
   1724c:	00011c4d 	.word	0x00011c4d
   17250:	00011bc1 	.word	0x00011bc1

00017254 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   17254:	b580      	push	{r7, lr}
   17256:	b084      	sub	sp, #16
   17258:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   1725a:	1d3a      	adds	r2, r7, #4
   1725c:	4b12      	ldr	r3, [pc, #72]	; (172a8 <get_fattime+0x54>)
   1725e:	0011      	movs	r1, r2
   17260:	0018      	movs	r0, r3
   17262:	4b12      	ldr	r3, [pc, #72]	; (172ac <get_fattime+0x58>)
   17264:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   17266:	1d3b      	adds	r3, r7, #4
   17268:	88db      	ldrh	r3, [r3, #6]
   1726a:	4a11      	ldr	r2, [pc, #68]	; (172b0 <get_fattime+0x5c>)
   1726c:	4694      	mov	ip, r2
   1726e:	4463      	add	r3, ip
   17270:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   17272:	1d3b      	adds	r3, r7, #4
   17274:	795b      	ldrb	r3, [r3, #5]
   17276:	055b      	lsls	r3, r3, #21
   17278:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   1727a:	1d3b      	adds	r3, r7, #4
   1727c:	791b      	ldrb	r3, [r3, #4]
   1727e:	041b      	lsls	r3, r3, #16
   17280:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   17282:	1d3b      	adds	r3, r7, #4
   17284:	789b      	ldrb	r3, [r3, #2]
   17286:	02db      	lsls	r3, r3, #11
   17288:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   1728a:	1d3b      	adds	r3, r7, #4
   1728c:	785b      	ldrb	r3, [r3, #1]
   1728e:	015b      	lsls	r3, r3, #5
   17290:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   17292:	1d3a      	adds	r2, r7, #4
   17294:	7812      	ldrb	r2, [r2, #0]
   17296:	0852      	lsrs	r2, r2, #1
   17298:	b2d2      	uxtb	r2, r2
   1729a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   1729c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   1729e:	68fb      	ldr	r3, [r7, #12]
}
   172a0:	0018      	movs	r0, r3
   172a2:	46bd      	mov	sp, r7
   172a4:	b004      	add	sp, #16
   172a6:	bd80      	pop	{r7, pc}
   172a8:	200055bc 	.word	0x200055bc
   172ac:	00012a2d 	.word	0x00012a2d
   172b0:	fffff844 	.word	0xfffff844

000172b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   172b4:	b580      	push	{r7, lr}
   172b6:	b086      	sub	sp, #24
   172b8:	af00      	add	r7, sp, #0
   172ba:	60f8      	str	r0, [r7, #12]
   172bc:	60b9      	str	r1, [r7, #8]
   172be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   172c0:	68fb      	ldr	r3, [r7, #12]
   172c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   172c4:	68bb      	ldr	r3, [r7, #8]
   172c6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   172c8:	e007      	b.n	172da <mem_cpy+0x26>
		*d++ = *s++;
   172ca:	697b      	ldr	r3, [r7, #20]
   172cc:	1c5a      	adds	r2, r3, #1
   172ce:	617a      	str	r2, [r7, #20]
   172d0:	693a      	ldr	r2, [r7, #16]
   172d2:	1c51      	adds	r1, r2, #1
   172d4:	6139      	str	r1, [r7, #16]
   172d6:	7812      	ldrb	r2, [r2, #0]
   172d8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   172da:	687b      	ldr	r3, [r7, #4]
   172dc:	1e5a      	subs	r2, r3, #1
   172de:	607a      	str	r2, [r7, #4]
   172e0:	2b00      	cmp	r3, #0
   172e2:	d1f2      	bne.n	172ca <mem_cpy+0x16>
}
   172e4:	46c0      	nop			; (mov r8, r8)
   172e6:	46bd      	mov	sp, r7
   172e8:	b006      	add	sp, #24
   172ea:	bd80      	pop	{r7, pc}

000172ec <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   172ec:	b580      	push	{r7, lr}
   172ee:	b086      	sub	sp, #24
   172f0:	af00      	add	r7, sp, #0
   172f2:	60f8      	str	r0, [r7, #12]
   172f4:	60b9      	str	r1, [r7, #8]
   172f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   172f8:	68fb      	ldr	r3, [r7, #12]
   172fa:	617b      	str	r3, [r7, #20]

	while (cnt--)
   172fc:	e005      	b.n	1730a <mem_set+0x1e>
		*d++ = (BYTE)val;
   172fe:	697b      	ldr	r3, [r7, #20]
   17300:	1c5a      	adds	r2, r3, #1
   17302:	617a      	str	r2, [r7, #20]
   17304:	68ba      	ldr	r2, [r7, #8]
   17306:	b2d2      	uxtb	r2, r2
   17308:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   1730a:	687b      	ldr	r3, [r7, #4]
   1730c:	1e5a      	subs	r2, r3, #1
   1730e:	607a      	str	r2, [r7, #4]
   17310:	2b00      	cmp	r3, #0
   17312:	d1f4      	bne.n	172fe <mem_set+0x12>
}
   17314:	46c0      	nop			; (mov r8, r8)
   17316:	46bd      	mov	sp, r7
   17318:	b006      	add	sp, #24
   1731a:	bd80      	pop	{r7, pc}

0001731c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   1731c:	b580      	push	{r7, lr}
   1731e:	b088      	sub	sp, #32
   17320:	af00      	add	r7, sp, #0
   17322:	60f8      	str	r0, [r7, #12]
   17324:	60b9      	str	r1, [r7, #8]
   17326:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   17328:	68fb      	ldr	r3, [r7, #12]
   1732a:	61fb      	str	r3, [r7, #28]
   1732c:	68bb      	ldr	r3, [r7, #8]
   1732e:	61bb      	str	r3, [r7, #24]
	int r = 0;
   17330:	2300      	movs	r3, #0
   17332:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   17334:	46c0      	nop			; (mov r8, r8)
   17336:	687b      	ldr	r3, [r7, #4]
   17338:	1e5a      	subs	r2, r3, #1
   1733a:	607a      	str	r2, [r7, #4]
   1733c:	2b00      	cmp	r3, #0
   1733e:	d00d      	beq.n	1735c <mem_cmp+0x40>
   17340:	69fb      	ldr	r3, [r7, #28]
   17342:	1c5a      	adds	r2, r3, #1
   17344:	61fa      	str	r2, [r7, #28]
   17346:	781b      	ldrb	r3, [r3, #0]
   17348:	0019      	movs	r1, r3
   1734a:	69bb      	ldr	r3, [r7, #24]
   1734c:	1c5a      	adds	r2, r3, #1
   1734e:	61ba      	str	r2, [r7, #24]
   17350:	781b      	ldrb	r3, [r3, #0]
   17352:	1acb      	subs	r3, r1, r3
   17354:	617b      	str	r3, [r7, #20]
   17356:	697b      	ldr	r3, [r7, #20]
   17358:	2b00      	cmp	r3, #0
   1735a:	d0ec      	beq.n	17336 <mem_cmp+0x1a>
	return r;
   1735c:	697b      	ldr	r3, [r7, #20]
}
   1735e:	0018      	movs	r0, r3
   17360:	46bd      	mov	sp, r7
   17362:	b008      	add	sp, #32
   17364:	bd80      	pop	{r7, pc}

00017366 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   17366:	b580      	push	{r7, lr}
   17368:	b082      	sub	sp, #8
   1736a:	af00      	add	r7, sp, #0
   1736c:	6078      	str	r0, [r7, #4]
   1736e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   17370:	e002      	b.n	17378 <chk_chr+0x12>
   17372:	687b      	ldr	r3, [r7, #4]
   17374:	3301      	adds	r3, #1
   17376:	607b      	str	r3, [r7, #4]
   17378:	687b      	ldr	r3, [r7, #4]
   1737a:	781b      	ldrb	r3, [r3, #0]
   1737c:	2b00      	cmp	r3, #0
   1737e:	d005      	beq.n	1738c <chk_chr+0x26>
   17380:	687b      	ldr	r3, [r7, #4]
   17382:	781b      	ldrb	r3, [r3, #0]
   17384:	001a      	movs	r2, r3
   17386:	683b      	ldr	r3, [r7, #0]
   17388:	429a      	cmp	r2, r3
   1738a:	d1f2      	bne.n	17372 <chk_chr+0xc>
	return *str;
   1738c:	687b      	ldr	r3, [r7, #4]
   1738e:	781b      	ldrb	r3, [r3, #0]
}
   17390:	0018      	movs	r0, r3
   17392:	46bd      	mov	sp, r7
   17394:	b002      	add	sp, #8
   17396:	bd80      	pop	{r7, pc}

00017398 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   17398:	b590      	push	{r4, r7, lr}
   1739a:	b085      	sub	sp, #20
   1739c:	af00      	add	r7, sp, #0
   1739e:	6078      	str	r0, [r7, #4]
   173a0:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   173a2:	687b      	ldr	r3, [r7, #4]
   173a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   173a6:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   173a8:	68fa      	ldr	r2, [r7, #12]
   173aa:	683b      	ldr	r3, [r7, #0]
   173ac:	429a      	cmp	r2, r3
   173ae:	d04e      	beq.n	1744e <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   173b0:	687b      	ldr	r3, [r7, #4]
   173b2:	791b      	ldrb	r3, [r3, #4]
   173b4:	2b00      	cmp	r3, #0
   173b6:	d037      	beq.n	17428 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   173b8:	687b      	ldr	r3, [r7, #4]
   173ba:	7858      	ldrb	r0, [r3, #1]
   173bc:	687b      	ldr	r3, [r7, #4]
   173be:	3330      	adds	r3, #48	; 0x30
   173c0:	0019      	movs	r1, r3
   173c2:	68fa      	ldr	r2, [r7, #12]
   173c4:	2301      	movs	r3, #1
   173c6:	4c24      	ldr	r4, [pc, #144]	; (17458 <move_window+0xc0>)
   173c8:	47a0      	blx	r4
   173ca:	1e03      	subs	r3, r0, #0
   173cc:	d001      	beq.n	173d2 <move_window+0x3a>
				return FR_DISK_ERR;
   173ce:	2301      	movs	r3, #1
   173d0:	e03e      	b.n	17450 <move_window+0xb8>
			fs->wflag = 0;
   173d2:	687b      	ldr	r3, [r7, #4]
   173d4:	2200      	movs	r2, #0
   173d6:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   173d8:	687b      	ldr	r3, [r7, #4]
   173da:	6a1a      	ldr	r2, [r3, #32]
   173dc:	687b      	ldr	r3, [r7, #4]
   173de:	69db      	ldr	r3, [r3, #28]
   173e0:	18d2      	adds	r2, r2, r3
   173e2:	68fb      	ldr	r3, [r7, #12]
   173e4:	429a      	cmp	r2, r3
   173e6:	d91f      	bls.n	17428 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   173e8:	230b      	movs	r3, #11
   173ea:	18fb      	adds	r3, r7, r3
   173ec:	687a      	ldr	r2, [r7, #4]
   173ee:	78d2      	ldrb	r2, [r2, #3]
   173f0:	701a      	strb	r2, [r3, #0]
   173f2:	e014      	b.n	1741e <move_window+0x86>
					wsect += fs->fsize;
   173f4:	687b      	ldr	r3, [r7, #4]
   173f6:	69db      	ldr	r3, [r3, #28]
   173f8:	68fa      	ldr	r2, [r7, #12]
   173fa:	18d3      	adds	r3, r2, r3
   173fc:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   173fe:	687b      	ldr	r3, [r7, #4]
   17400:	7858      	ldrb	r0, [r3, #1]
   17402:	687b      	ldr	r3, [r7, #4]
   17404:	3330      	adds	r3, #48	; 0x30
   17406:	0019      	movs	r1, r3
   17408:	68fa      	ldr	r2, [r7, #12]
   1740a:	2301      	movs	r3, #1
   1740c:	4c12      	ldr	r4, [pc, #72]	; (17458 <move_window+0xc0>)
   1740e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   17410:	230b      	movs	r3, #11
   17412:	18fb      	adds	r3, r7, r3
   17414:	781a      	ldrb	r2, [r3, #0]
   17416:	230b      	movs	r3, #11
   17418:	18fb      	adds	r3, r7, r3
   1741a:	3a01      	subs	r2, #1
   1741c:	701a      	strb	r2, [r3, #0]
   1741e:	230b      	movs	r3, #11
   17420:	18fb      	adds	r3, r7, r3
   17422:	781b      	ldrb	r3, [r3, #0]
   17424:	2b01      	cmp	r3, #1
   17426:	d8e5      	bhi.n	173f4 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   17428:	683b      	ldr	r3, [r7, #0]
   1742a:	2b00      	cmp	r3, #0
   1742c:	d00f      	beq.n	1744e <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1742e:	687b      	ldr	r3, [r7, #4]
   17430:	7858      	ldrb	r0, [r3, #1]
   17432:	687b      	ldr	r3, [r7, #4]
   17434:	3330      	adds	r3, #48	; 0x30
   17436:	0019      	movs	r1, r3
   17438:	683a      	ldr	r2, [r7, #0]
   1743a:	2301      	movs	r3, #1
   1743c:	4c07      	ldr	r4, [pc, #28]	; (1745c <move_window+0xc4>)
   1743e:	47a0      	blx	r4
   17440:	1e03      	subs	r3, r0, #0
   17442:	d001      	beq.n	17448 <move_window+0xb0>
				return FR_DISK_ERR;
   17444:	2301      	movs	r3, #1
   17446:	e003      	b.n	17450 <move_window+0xb8>
			fs->winsect = sector;
   17448:	687b      	ldr	r3, [r7, #4]
   1744a:	683a      	ldr	r2, [r7, #0]
   1744c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   1744e:	2300      	movs	r3, #0
}
   17450:	0018      	movs	r0, r3
   17452:	46bd      	mov	sp, r7
   17454:	b005      	add	sp, #20
   17456:	bd90      	pop	{r4, r7, pc}
   17458:	00017085 	.word	0x00017085
   1745c:	00016fad 	.word	0x00016fad

00017460 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   17460:	b590      	push	{r4, r7, lr}
   17462:	b085      	sub	sp, #20
   17464:	af00      	add	r7, sp, #0
   17466:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   17468:	230f      	movs	r3, #15
   1746a:	18fc      	adds	r4, r7, r3
   1746c:	687b      	ldr	r3, [r7, #4]
   1746e:	2100      	movs	r1, #0
   17470:	0018      	movs	r0, r3
   17472:	4b52      	ldr	r3, [pc, #328]	; (175bc <sync+0x15c>)
   17474:	4798      	blx	r3
   17476:	0003      	movs	r3, r0
   17478:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   1747a:	230f      	movs	r3, #15
   1747c:	18fb      	adds	r3, r7, r3
   1747e:	781b      	ldrb	r3, [r3, #0]
   17480:	2b00      	cmp	r3, #0
   17482:	d000      	beq.n	17486 <sync+0x26>
   17484:	e093      	b.n	175ae <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   17486:	687b      	ldr	r3, [r7, #4]
   17488:	781b      	ldrb	r3, [r3, #0]
   1748a:	2b03      	cmp	r3, #3
   1748c:	d000      	beq.n	17490 <sync+0x30>
   1748e:	e081      	b.n	17594 <sync+0x134>
   17490:	687b      	ldr	r3, [r7, #4]
   17492:	795b      	ldrb	r3, [r3, #5]
   17494:	2b00      	cmp	r3, #0
   17496:	d07d      	beq.n	17594 <sync+0x134>
			fs->winsect = 0;
   17498:	687b      	ldr	r3, [r7, #4]
   1749a:	2200      	movs	r2, #0
   1749c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   1749e:	687b      	ldr	r3, [r7, #4]
   174a0:	3330      	adds	r3, #48	; 0x30
   174a2:	0018      	movs	r0, r3
   174a4:	2380      	movs	r3, #128	; 0x80
   174a6:	009b      	lsls	r3, r3, #2
   174a8:	001a      	movs	r2, r3
   174aa:	2100      	movs	r1, #0
   174ac:	4b44      	ldr	r3, [pc, #272]	; (175c0 <sync+0x160>)
   174ae:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   174b0:	687b      	ldr	r3, [r7, #4]
   174b2:	4a44      	ldr	r2, [pc, #272]	; (175c4 <sync+0x164>)
   174b4:	2155      	movs	r1, #85	; 0x55
   174b6:	5499      	strb	r1, [r3, r2]
   174b8:	687b      	ldr	r3, [r7, #4]
   174ba:	4a43      	ldr	r2, [pc, #268]	; (175c8 <sync+0x168>)
   174bc:	21aa      	movs	r1, #170	; 0xaa
   174be:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   174c0:	687b      	ldr	r3, [r7, #4]
   174c2:	2230      	movs	r2, #48	; 0x30
   174c4:	2152      	movs	r1, #82	; 0x52
   174c6:	5499      	strb	r1, [r3, r2]
   174c8:	687b      	ldr	r3, [r7, #4]
   174ca:	2231      	movs	r2, #49	; 0x31
   174cc:	2152      	movs	r1, #82	; 0x52
   174ce:	5499      	strb	r1, [r3, r2]
   174d0:	687b      	ldr	r3, [r7, #4]
   174d2:	2232      	movs	r2, #50	; 0x32
   174d4:	2161      	movs	r1, #97	; 0x61
   174d6:	5499      	strb	r1, [r3, r2]
   174d8:	687b      	ldr	r3, [r7, #4]
   174da:	2233      	movs	r2, #51	; 0x33
   174dc:	2141      	movs	r1, #65	; 0x41
   174de:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   174e0:	687a      	ldr	r2, [r7, #4]
   174e2:	2385      	movs	r3, #133	; 0x85
   174e4:	009b      	lsls	r3, r3, #2
   174e6:	2172      	movs	r1, #114	; 0x72
   174e8:	54d1      	strb	r1, [r2, r3]
   174ea:	687b      	ldr	r3, [r7, #4]
   174ec:	4a37      	ldr	r2, [pc, #220]	; (175cc <sync+0x16c>)
   174ee:	2172      	movs	r1, #114	; 0x72
   174f0:	5499      	strb	r1, [r3, r2]
   174f2:	687b      	ldr	r3, [r7, #4]
   174f4:	4a36      	ldr	r2, [pc, #216]	; (175d0 <sync+0x170>)
   174f6:	2141      	movs	r1, #65	; 0x41
   174f8:	5499      	strb	r1, [r3, r2]
   174fa:	687b      	ldr	r3, [r7, #4]
   174fc:	4a35      	ldr	r2, [pc, #212]	; (175d4 <sync+0x174>)
   174fe:	2161      	movs	r1, #97	; 0x61
   17500:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   17502:	687b      	ldr	r3, [r7, #4]
   17504:	691b      	ldr	r3, [r3, #16]
   17506:	b2d9      	uxtb	r1, r3
   17508:	687a      	ldr	r2, [r7, #4]
   1750a:	2386      	movs	r3, #134	; 0x86
   1750c:	009b      	lsls	r3, r3, #2
   1750e:	54d1      	strb	r1, [r2, r3]
   17510:	687b      	ldr	r3, [r7, #4]
   17512:	691b      	ldr	r3, [r3, #16]
   17514:	b29b      	uxth	r3, r3
   17516:	0a1b      	lsrs	r3, r3, #8
   17518:	b29b      	uxth	r3, r3
   1751a:	b2d9      	uxtb	r1, r3
   1751c:	687b      	ldr	r3, [r7, #4]
   1751e:	4a2e      	ldr	r2, [pc, #184]	; (175d8 <sync+0x178>)
   17520:	5499      	strb	r1, [r3, r2]
   17522:	687b      	ldr	r3, [r7, #4]
   17524:	691b      	ldr	r3, [r3, #16]
   17526:	0c1b      	lsrs	r3, r3, #16
   17528:	b2d9      	uxtb	r1, r3
   1752a:	687b      	ldr	r3, [r7, #4]
   1752c:	4a2b      	ldr	r2, [pc, #172]	; (175dc <sync+0x17c>)
   1752e:	5499      	strb	r1, [r3, r2]
   17530:	687b      	ldr	r3, [r7, #4]
   17532:	691b      	ldr	r3, [r3, #16]
   17534:	0e1b      	lsrs	r3, r3, #24
   17536:	b2d9      	uxtb	r1, r3
   17538:	687b      	ldr	r3, [r7, #4]
   1753a:	4a29      	ldr	r2, [pc, #164]	; (175e0 <sync+0x180>)
   1753c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   1753e:	687b      	ldr	r3, [r7, #4]
   17540:	68db      	ldr	r3, [r3, #12]
   17542:	b2d9      	uxtb	r1, r3
   17544:	687a      	ldr	r2, [r7, #4]
   17546:	2387      	movs	r3, #135	; 0x87
   17548:	009b      	lsls	r3, r3, #2
   1754a:	54d1      	strb	r1, [r2, r3]
   1754c:	687b      	ldr	r3, [r7, #4]
   1754e:	68db      	ldr	r3, [r3, #12]
   17550:	b29b      	uxth	r3, r3
   17552:	0a1b      	lsrs	r3, r3, #8
   17554:	b29b      	uxth	r3, r3
   17556:	b2d9      	uxtb	r1, r3
   17558:	687b      	ldr	r3, [r7, #4]
   1755a:	4a22      	ldr	r2, [pc, #136]	; (175e4 <sync+0x184>)
   1755c:	5499      	strb	r1, [r3, r2]
   1755e:	687b      	ldr	r3, [r7, #4]
   17560:	68db      	ldr	r3, [r3, #12]
   17562:	0c1b      	lsrs	r3, r3, #16
   17564:	b2d9      	uxtb	r1, r3
   17566:	687b      	ldr	r3, [r7, #4]
   17568:	4a1f      	ldr	r2, [pc, #124]	; (175e8 <sync+0x188>)
   1756a:	5499      	strb	r1, [r3, r2]
   1756c:	687b      	ldr	r3, [r7, #4]
   1756e:	68db      	ldr	r3, [r3, #12]
   17570:	0e1b      	lsrs	r3, r3, #24
   17572:	b2d9      	uxtb	r1, r3
   17574:	687b      	ldr	r3, [r7, #4]
   17576:	4a1d      	ldr	r2, [pc, #116]	; (175ec <sync+0x18c>)
   17578:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   1757a:	687b      	ldr	r3, [r7, #4]
   1757c:	7858      	ldrb	r0, [r3, #1]
   1757e:	687b      	ldr	r3, [r7, #4]
   17580:	3330      	adds	r3, #48	; 0x30
   17582:	0019      	movs	r1, r3
   17584:	687b      	ldr	r3, [r7, #4]
   17586:	695a      	ldr	r2, [r3, #20]
   17588:	2301      	movs	r3, #1
   1758a:	4c19      	ldr	r4, [pc, #100]	; (175f0 <sync+0x190>)
   1758c:	47a0      	blx	r4
			fs->fsi_flag = 0;
   1758e:	687b      	ldr	r3, [r7, #4]
   17590:	2200      	movs	r2, #0
   17592:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   17594:	687b      	ldr	r3, [r7, #4]
   17596:	785b      	ldrb	r3, [r3, #1]
   17598:	2200      	movs	r2, #0
   1759a:	2100      	movs	r1, #0
   1759c:	0018      	movs	r0, r3
   1759e:	4b15      	ldr	r3, [pc, #84]	; (175f4 <sync+0x194>)
   175a0:	4798      	blx	r3
   175a2:	1e03      	subs	r3, r0, #0
   175a4:	d003      	beq.n	175ae <sync+0x14e>
			res = FR_DISK_ERR;
   175a6:	230f      	movs	r3, #15
   175a8:	18fb      	adds	r3, r7, r3
   175aa:	2201      	movs	r2, #1
   175ac:	701a      	strb	r2, [r3, #0]
	}

	return res;
   175ae:	230f      	movs	r3, #15
   175b0:	18fb      	adds	r3, r7, r3
   175b2:	781b      	ldrb	r3, [r3, #0]
}
   175b4:	0018      	movs	r0, r3
   175b6:	46bd      	mov	sp, r7
   175b8:	b005      	add	sp, #20
   175ba:	bd90      	pop	{r4, r7, pc}
   175bc:	00017399 	.word	0x00017399
   175c0:	000172ed 	.word	0x000172ed
   175c4:	0000022e 	.word	0x0000022e
   175c8:	0000022f 	.word	0x0000022f
   175cc:	00000215 	.word	0x00000215
   175d0:	00000216 	.word	0x00000216
   175d4:	00000217 	.word	0x00000217
   175d8:	00000219 	.word	0x00000219
   175dc:	0000021a 	.word	0x0000021a
   175e0:	0000021b 	.word	0x0000021b
   175e4:	0000021d 	.word	0x0000021d
   175e8:	0000021e 	.word	0x0000021e
   175ec:	0000021f 	.word	0x0000021f
   175f0:	00017085 	.word	0x00017085
   175f4:	0001715d 	.word	0x0001715d

000175f8 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   175f8:	b580      	push	{r7, lr}
   175fa:	b082      	sub	sp, #8
   175fc:	af00      	add	r7, sp, #0
   175fe:	6078      	str	r0, [r7, #4]
   17600:	6039      	str	r1, [r7, #0]
	clst -= 2;
   17602:	683b      	ldr	r3, [r7, #0]
   17604:	3b02      	subs	r3, #2
   17606:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   17608:	687b      	ldr	r3, [r7, #4]
   1760a:	699b      	ldr	r3, [r3, #24]
   1760c:	1e9a      	subs	r2, r3, #2
   1760e:	683b      	ldr	r3, [r7, #0]
   17610:	429a      	cmp	r2, r3
   17612:	d801      	bhi.n	17618 <clust2sect+0x20>
   17614:	2300      	movs	r3, #0
   17616:	e007      	b.n	17628 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   17618:	687b      	ldr	r3, [r7, #4]
   1761a:	789b      	ldrb	r3, [r3, #2]
   1761c:	001a      	movs	r2, r3
   1761e:	683b      	ldr	r3, [r7, #0]
   17620:	435a      	muls	r2, r3
   17622:	687b      	ldr	r3, [r7, #4]
   17624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17626:	18d3      	adds	r3, r2, r3
}
   17628:	0018      	movs	r0, r3
   1762a:	46bd      	mov	sp, r7
   1762c:	b002      	add	sp, #8
   1762e:	bd80      	pop	{r7, pc}

00017630 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   17630:	b580      	push	{r7, lr}
   17632:	b086      	sub	sp, #24
   17634:	af00      	add	r7, sp, #0
   17636:	6078      	str	r0, [r7, #4]
   17638:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   1763a:	683b      	ldr	r3, [r7, #0]
   1763c:	2b01      	cmp	r3, #1
   1763e:	d904      	bls.n	1764a <get_fat+0x1a>
   17640:	687b      	ldr	r3, [r7, #4]
   17642:	699a      	ldr	r2, [r3, #24]
   17644:	683b      	ldr	r3, [r7, #0]
   17646:	429a      	cmp	r2, r3
   17648:	d801      	bhi.n	1764e <get_fat+0x1e>
		return 1;
   1764a:	2301      	movs	r3, #1
   1764c:	e09f      	b.n	1778e <get_fat+0x15e>

	switch (fs->fs_type) {
   1764e:	687b      	ldr	r3, [r7, #4]
   17650:	781b      	ldrb	r3, [r3, #0]
   17652:	2b02      	cmp	r3, #2
   17654:	d048      	beq.n	176e8 <get_fat+0xb8>
   17656:	2b03      	cmp	r3, #3
   17658:	d067      	beq.n	1772a <get_fat+0xfa>
   1765a:	2b01      	cmp	r3, #1
   1765c:	d000      	beq.n	17660 <get_fat+0x30>
   1765e:	e094      	b.n	1778a <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   17660:	683b      	ldr	r3, [r7, #0]
   17662:	617b      	str	r3, [r7, #20]
   17664:	697b      	ldr	r3, [r7, #20]
   17666:	085b      	lsrs	r3, r3, #1
   17668:	697a      	ldr	r2, [r7, #20]
   1766a:	18d3      	adds	r3, r2, r3
   1766c:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1766e:	687b      	ldr	r3, [r7, #4]
   17670:	6a1a      	ldr	r2, [r3, #32]
   17672:	697b      	ldr	r3, [r7, #20]
   17674:	0a5b      	lsrs	r3, r3, #9
   17676:	18d2      	adds	r2, r2, r3
   17678:	687b      	ldr	r3, [r7, #4]
   1767a:	0011      	movs	r1, r2
   1767c:	0018      	movs	r0, r3
   1767e:	4b46      	ldr	r3, [pc, #280]	; (17798 <get_fat+0x168>)
   17680:	4798      	blx	r3
   17682:	1e03      	subs	r3, r0, #0
   17684:	d000      	beq.n	17688 <get_fat+0x58>
   17686:	e079      	b.n	1777c <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   17688:	697b      	ldr	r3, [r7, #20]
   1768a:	05db      	lsls	r3, r3, #23
   1768c:	0ddb      	lsrs	r3, r3, #23
   1768e:	687a      	ldr	r2, [r7, #4]
   17690:	2130      	movs	r1, #48	; 0x30
   17692:	18d3      	adds	r3, r2, r3
   17694:	185b      	adds	r3, r3, r1
   17696:	781b      	ldrb	r3, [r3, #0]
   17698:	613b      	str	r3, [r7, #16]
   1769a:	697b      	ldr	r3, [r7, #20]
   1769c:	3301      	adds	r3, #1
   1769e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   176a0:	687b      	ldr	r3, [r7, #4]
   176a2:	6a1a      	ldr	r2, [r3, #32]
   176a4:	697b      	ldr	r3, [r7, #20]
   176a6:	0a5b      	lsrs	r3, r3, #9
   176a8:	18d2      	adds	r2, r2, r3
   176aa:	687b      	ldr	r3, [r7, #4]
   176ac:	0011      	movs	r1, r2
   176ae:	0018      	movs	r0, r3
   176b0:	4b39      	ldr	r3, [pc, #228]	; (17798 <get_fat+0x168>)
   176b2:	4798      	blx	r3
   176b4:	1e03      	subs	r3, r0, #0
   176b6:	d163      	bne.n	17780 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   176b8:	697b      	ldr	r3, [r7, #20]
   176ba:	05db      	lsls	r3, r3, #23
   176bc:	0ddb      	lsrs	r3, r3, #23
   176be:	687a      	ldr	r2, [r7, #4]
   176c0:	2130      	movs	r1, #48	; 0x30
   176c2:	18d3      	adds	r3, r2, r3
   176c4:	185b      	adds	r3, r3, r1
   176c6:	781b      	ldrb	r3, [r3, #0]
   176c8:	021b      	lsls	r3, r3, #8
   176ca:	001a      	movs	r2, r3
   176cc:	693b      	ldr	r3, [r7, #16]
   176ce:	4313      	orrs	r3, r2
   176d0:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   176d2:	683b      	ldr	r3, [r7, #0]
   176d4:	2201      	movs	r2, #1
   176d6:	4013      	ands	r3, r2
   176d8:	d002      	beq.n	176e0 <get_fat+0xb0>
   176da:	693b      	ldr	r3, [r7, #16]
   176dc:	091b      	lsrs	r3, r3, #4
   176de:	e056      	b.n	1778e <get_fat+0x15e>
   176e0:	693b      	ldr	r3, [r7, #16]
   176e2:	051b      	lsls	r3, r3, #20
   176e4:	0d1b      	lsrs	r3, r3, #20
   176e6:	e052      	b.n	1778e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   176e8:	687b      	ldr	r3, [r7, #4]
   176ea:	6a1a      	ldr	r2, [r3, #32]
   176ec:	683b      	ldr	r3, [r7, #0]
   176ee:	0a1b      	lsrs	r3, r3, #8
   176f0:	18d2      	adds	r2, r2, r3
   176f2:	687b      	ldr	r3, [r7, #4]
   176f4:	0011      	movs	r1, r2
   176f6:	0018      	movs	r0, r3
   176f8:	4b27      	ldr	r3, [pc, #156]	; (17798 <get_fat+0x168>)
   176fa:	4798      	blx	r3
   176fc:	1e03      	subs	r3, r0, #0
   176fe:	d141      	bne.n	17784 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   17700:	683b      	ldr	r3, [r7, #0]
   17702:	005a      	lsls	r2, r3, #1
   17704:	23ff      	movs	r3, #255	; 0xff
   17706:	005b      	lsls	r3, r3, #1
   17708:	4013      	ands	r3, r2
   1770a:	3330      	adds	r3, #48	; 0x30
   1770c:	687a      	ldr	r2, [r7, #4]
   1770e:	18d3      	adds	r3, r2, r3
   17710:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   17712:	68fb      	ldr	r3, [r7, #12]
   17714:	3301      	adds	r3, #1
   17716:	781b      	ldrb	r3, [r3, #0]
   17718:	021b      	lsls	r3, r3, #8
   1771a:	b21a      	sxth	r2, r3
   1771c:	68fb      	ldr	r3, [r7, #12]
   1771e:	781b      	ldrb	r3, [r3, #0]
   17720:	b21b      	sxth	r3, r3
   17722:	4313      	orrs	r3, r2
   17724:	b21b      	sxth	r3, r3
   17726:	b29b      	uxth	r3, r3
   17728:	e031      	b.n	1778e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   1772a:	687b      	ldr	r3, [r7, #4]
   1772c:	6a1a      	ldr	r2, [r3, #32]
   1772e:	683b      	ldr	r3, [r7, #0]
   17730:	09db      	lsrs	r3, r3, #7
   17732:	18d2      	adds	r2, r2, r3
   17734:	687b      	ldr	r3, [r7, #4]
   17736:	0011      	movs	r1, r2
   17738:	0018      	movs	r0, r3
   1773a:	4b17      	ldr	r3, [pc, #92]	; (17798 <get_fat+0x168>)
   1773c:	4798      	blx	r3
   1773e:	1e03      	subs	r3, r0, #0
   17740:	d122      	bne.n	17788 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   17742:	683b      	ldr	r3, [r7, #0]
   17744:	009a      	lsls	r2, r3, #2
   17746:	23fe      	movs	r3, #254	; 0xfe
   17748:	005b      	lsls	r3, r3, #1
   1774a:	4013      	ands	r3, r2
   1774c:	3330      	adds	r3, #48	; 0x30
   1774e:	687a      	ldr	r2, [r7, #4]
   17750:	18d3      	adds	r3, r2, r3
   17752:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   17754:	68fb      	ldr	r3, [r7, #12]
   17756:	3303      	adds	r3, #3
   17758:	781b      	ldrb	r3, [r3, #0]
   1775a:	061a      	lsls	r2, r3, #24
   1775c:	68fb      	ldr	r3, [r7, #12]
   1775e:	3302      	adds	r3, #2
   17760:	781b      	ldrb	r3, [r3, #0]
   17762:	041b      	lsls	r3, r3, #16
   17764:	4313      	orrs	r3, r2
   17766:	68fa      	ldr	r2, [r7, #12]
   17768:	3201      	adds	r2, #1
   1776a:	7812      	ldrb	r2, [r2, #0]
   1776c:	0212      	lsls	r2, r2, #8
   1776e:	4313      	orrs	r3, r2
   17770:	68fa      	ldr	r2, [r7, #12]
   17772:	7812      	ldrb	r2, [r2, #0]
   17774:	4313      	orrs	r3, r2
   17776:	011b      	lsls	r3, r3, #4
   17778:	091b      	lsrs	r3, r3, #4
   1777a:	e008      	b.n	1778e <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   1777c:	46c0      	nop			; (mov r8, r8)
   1777e:	e004      	b.n	1778a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   17780:	46c0      	nop			; (mov r8, r8)
   17782:	e002      	b.n	1778a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   17784:	46c0      	nop			; (mov r8, r8)
   17786:	e000      	b.n	1778a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   17788:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   1778a:	2301      	movs	r3, #1
   1778c:	425b      	negs	r3, r3
}
   1778e:	0018      	movs	r0, r3
   17790:	46bd      	mov	sp, r7
   17792:	b006      	add	sp, #24
   17794:	bd80      	pop	{r7, pc}
   17796:	46c0      	nop			; (mov r8, r8)
   17798:	00017399 	.word	0x00017399

0001779c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   1779c:	b590      	push	{r4, r7, lr}
   1779e:	b089      	sub	sp, #36	; 0x24
   177a0:	af00      	add	r7, sp, #0
   177a2:	60f8      	str	r0, [r7, #12]
   177a4:	60b9      	str	r1, [r7, #8]
   177a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   177a8:	68bb      	ldr	r3, [r7, #8]
   177aa:	2b01      	cmp	r3, #1
   177ac:	d904      	bls.n	177b8 <put_fat+0x1c>
   177ae:	68fb      	ldr	r3, [r7, #12]
   177b0:	699a      	ldr	r2, [r3, #24]
   177b2:	68bb      	ldr	r3, [r7, #8]
   177b4:	429a      	cmp	r2, r3
   177b6:	d804      	bhi.n	177c2 <put_fat+0x26>
		res = FR_INT_ERR;
   177b8:	231f      	movs	r3, #31
   177ba:	18fb      	adds	r3, r7, r3
   177bc:	2202      	movs	r2, #2
   177be:	701a      	strb	r2, [r3, #0]
   177c0:	e100      	b.n	179c4 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   177c2:	68fb      	ldr	r3, [r7, #12]
   177c4:	781b      	ldrb	r3, [r3, #0]
   177c6:	2b02      	cmp	r3, #2
   177c8:	d100      	bne.n	177cc <put_fat+0x30>
   177ca:	e078      	b.n	178be <put_fat+0x122>
   177cc:	2b03      	cmp	r3, #3
   177ce:	d100      	bne.n	177d2 <put_fat+0x36>
   177d0:	e09e      	b.n	17910 <put_fat+0x174>
   177d2:	2b01      	cmp	r3, #1
   177d4:	d000      	beq.n	177d8 <put_fat+0x3c>
   177d6:	e0e6      	b.n	179a6 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   177d8:	68bb      	ldr	r3, [r7, #8]
   177da:	61bb      	str	r3, [r7, #24]
   177dc:	69bb      	ldr	r3, [r7, #24]
   177de:	085b      	lsrs	r3, r3, #1
   177e0:	69ba      	ldr	r2, [r7, #24]
   177e2:	18d3      	adds	r3, r2, r3
   177e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   177e6:	68fb      	ldr	r3, [r7, #12]
   177e8:	6a1a      	ldr	r2, [r3, #32]
   177ea:	69bb      	ldr	r3, [r7, #24]
   177ec:	0a5b      	lsrs	r3, r3, #9
   177ee:	18d2      	adds	r2, r2, r3
   177f0:	231f      	movs	r3, #31
   177f2:	18fc      	adds	r4, r7, r3
   177f4:	68fb      	ldr	r3, [r7, #12]
   177f6:	0011      	movs	r1, r2
   177f8:	0018      	movs	r0, r3
   177fa:	4b76      	ldr	r3, [pc, #472]	; (179d4 <put_fat+0x238>)
   177fc:	4798      	blx	r3
   177fe:	0003      	movs	r3, r0
   17800:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   17802:	231f      	movs	r3, #31
   17804:	18fb      	adds	r3, r7, r3
   17806:	781b      	ldrb	r3, [r3, #0]
   17808:	2b00      	cmp	r3, #0
   1780a:	d000      	beq.n	1780e <put_fat+0x72>
   1780c:	e0d0      	b.n	179b0 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   1780e:	69bb      	ldr	r3, [r7, #24]
   17810:	05db      	lsls	r3, r3, #23
   17812:	0ddb      	lsrs	r3, r3, #23
   17814:	3330      	adds	r3, #48	; 0x30
   17816:	68fa      	ldr	r2, [r7, #12]
   17818:	18d3      	adds	r3, r2, r3
   1781a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   1781c:	68bb      	ldr	r3, [r7, #8]
   1781e:	2201      	movs	r2, #1
   17820:	4013      	ands	r3, r2
   17822:	d00d      	beq.n	17840 <put_fat+0xa4>
   17824:	697b      	ldr	r3, [r7, #20]
   17826:	781b      	ldrb	r3, [r3, #0]
   17828:	b25b      	sxtb	r3, r3
   1782a:	220f      	movs	r2, #15
   1782c:	4013      	ands	r3, r2
   1782e:	b25a      	sxtb	r2, r3
   17830:	687b      	ldr	r3, [r7, #4]
   17832:	b2db      	uxtb	r3, r3
   17834:	011b      	lsls	r3, r3, #4
   17836:	b25b      	sxtb	r3, r3
   17838:	4313      	orrs	r3, r2
   1783a:	b25b      	sxtb	r3, r3
   1783c:	b2db      	uxtb	r3, r3
   1783e:	e001      	b.n	17844 <put_fat+0xa8>
   17840:	687b      	ldr	r3, [r7, #4]
   17842:	b2db      	uxtb	r3, r3
   17844:	697a      	ldr	r2, [r7, #20]
   17846:	7013      	strb	r3, [r2, #0]
			bc++;
   17848:	69bb      	ldr	r3, [r7, #24]
   1784a:	3301      	adds	r3, #1
   1784c:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   1784e:	68fb      	ldr	r3, [r7, #12]
   17850:	2201      	movs	r2, #1
   17852:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   17854:	68fb      	ldr	r3, [r7, #12]
   17856:	6a1a      	ldr	r2, [r3, #32]
   17858:	69bb      	ldr	r3, [r7, #24]
   1785a:	0a5b      	lsrs	r3, r3, #9
   1785c:	18d2      	adds	r2, r2, r3
   1785e:	231f      	movs	r3, #31
   17860:	18fc      	adds	r4, r7, r3
   17862:	68fb      	ldr	r3, [r7, #12]
   17864:	0011      	movs	r1, r2
   17866:	0018      	movs	r0, r3
   17868:	4b5a      	ldr	r3, [pc, #360]	; (179d4 <put_fat+0x238>)
   1786a:	4798      	blx	r3
   1786c:	0003      	movs	r3, r0
   1786e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   17870:	231f      	movs	r3, #31
   17872:	18fb      	adds	r3, r7, r3
   17874:	781b      	ldrb	r3, [r3, #0]
   17876:	2b00      	cmp	r3, #0
   17878:	d000      	beq.n	1787c <put_fat+0xe0>
   1787a:	e09b      	b.n	179b4 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   1787c:	69bb      	ldr	r3, [r7, #24]
   1787e:	05db      	lsls	r3, r3, #23
   17880:	0ddb      	lsrs	r3, r3, #23
   17882:	3330      	adds	r3, #48	; 0x30
   17884:	68fa      	ldr	r2, [r7, #12]
   17886:	18d3      	adds	r3, r2, r3
   17888:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   1788a:	68bb      	ldr	r3, [r7, #8]
   1788c:	2201      	movs	r2, #1
   1788e:	4013      	ands	r3, r2
   17890:	d003      	beq.n	1789a <put_fat+0xfe>
   17892:	687b      	ldr	r3, [r7, #4]
   17894:	091b      	lsrs	r3, r3, #4
   17896:	b2db      	uxtb	r3, r3
   17898:	e00e      	b.n	178b8 <put_fat+0x11c>
   1789a:	697b      	ldr	r3, [r7, #20]
   1789c:	781b      	ldrb	r3, [r3, #0]
   1789e:	b25b      	sxtb	r3, r3
   178a0:	220f      	movs	r2, #15
   178a2:	4393      	bics	r3, r2
   178a4:	b25a      	sxtb	r2, r3
   178a6:	687b      	ldr	r3, [r7, #4]
   178a8:	0a1b      	lsrs	r3, r3, #8
   178aa:	b25b      	sxtb	r3, r3
   178ac:	210f      	movs	r1, #15
   178ae:	400b      	ands	r3, r1
   178b0:	b25b      	sxtb	r3, r3
   178b2:	4313      	orrs	r3, r2
   178b4:	b25b      	sxtb	r3, r3
   178b6:	b2db      	uxtb	r3, r3
   178b8:	697a      	ldr	r2, [r7, #20]
   178ba:	7013      	strb	r3, [r2, #0]
			break;
   178bc:	e07f      	b.n	179be <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   178be:	68fb      	ldr	r3, [r7, #12]
   178c0:	6a1a      	ldr	r2, [r3, #32]
   178c2:	68bb      	ldr	r3, [r7, #8]
   178c4:	0a1b      	lsrs	r3, r3, #8
   178c6:	18d2      	adds	r2, r2, r3
   178c8:	231f      	movs	r3, #31
   178ca:	18fc      	adds	r4, r7, r3
   178cc:	68fb      	ldr	r3, [r7, #12]
   178ce:	0011      	movs	r1, r2
   178d0:	0018      	movs	r0, r3
   178d2:	4b40      	ldr	r3, [pc, #256]	; (179d4 <put_fat+0x238>)
   178d4:	4798      	blx	r3
   178d6:	0003      	movs	r3, r0
   178d8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   178da:	231f      	movs	r3, #31
   178dc:	18fb      	adds	r3, r7, r3
   178de:	781b      	ldrb	r3, [r3, #0]
   178e0:	2b00      	cmp	r3, #0
   178e2:	d169      	bne.n	179b8 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   178e4:	68bb      	ldr	r3, [r7, #8]
   178e6:	005a      	lsls	r2, r3, #1
   178e8:	23ff      	movs	r3, #255	; 0xff
   178ea:	005b      	lsls	r3, r3, #1
   178ec:	4013      	ands	r3, r2
   178ee:	3330      	adds	r3, #48	; 0x30
   178f0:	68fa      	ldr	r2, [r7, #12]
   178f2:	18d3      	adds	r3, r2, r3
   178f4:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   178f6:	687b      	ldr	r3, [r7, #4]
   178f8:	b2da      	uxtb	r2, r3
   178fa:	697b      	ldr	r3, [r7, #20]
   178fc:	701a      	strb	r2, [r3, #0]
   178fe:	697b      	ldr	r3, [r7, #20]
   17900:	3301      	adds	r3, #1
   17902:	687a      	ldr	r2, [r7, #4]
   17904:	b292      	uxth	r2, r2
   17906:	0a12      	lsrs	r2, r2, #8
   17908:	b292      	uxth	r2, r2
   1790a:	b2d2      	uxtb	r2, r2
   1790c:	701a      	strb	r2, [r3, #0]
			break;
   1790e:	e056      	b.n	179be <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   17910:	68fb      	ldr	r3, [r7, #12]
   17912:	6a1a      	ldr	r2, [r3, #32]
   17914:	68bb      	ldr	r3, [r7, #8]
   17916:	09db      	lsrs	r3, r3, #7
   17918:	18d2      	adds	r2, r2, r3
   1791a:	231f      	movs	r3, #31
   1791c:	18fc      	adds	r4, r7, r3
   1791e:	68fb      	ldr	r3, [r7, #12]
   17920:	0011      	movs	r1, r2
   17922:	0018      	movs	r0, r3
   17924:	4b2b      	ldr	r3, [pc, #172]	; (179d4 <put_fat+0x238>)
   17926:	4798      	blx	r3
   17928:	0003      	movs	r3, r0
   1792a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   1792c:	231f      	movs	r3, #31
   1792e:	18fb      	adds	r3, r7, r3
   17930:	781b      	ldrb	r3, [r3, #0]
   17932:	2b00      	cmp	r3, #0
   17934:	d142      	bne.n	179bc <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   17936:	68bb      	ldr	r3, [r7, #8]
   17938:	009a      	lsls	r2, r3, #2
   1793a:	23fe      	movs	r3, #254	; 0xfe
   1793c:	005b      	lsls	r3, r3, #1
   1793e:	4013      	ands	r3, r2
   17940:	3330      	adds	r3, #48	; 0x30
   17942:	68fa      	ldr	r2, [r7, #12]
   17944:	18d3      	adds	r3, r2, r3
   17946:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   17948:	697b      	ldr	r3, [r7, #20]
   1794a:	3303      	adds	r3, #3
   1794c:	781b      	ldrb	r3, [r3, #0]
   1794e:	061a      	lsls	r2, r3, #24
   17950:	697b      	ldr	r3, [r7, #20]
   17952:	3302      	adds	r3, #2
   17954:	781b      	ldrb	r3, [r3, #0]
   17956:	041b      	lsls	r3, r3, #16
   17958:	4313      	orrs	r3, r2
   1795a:	697a      	ldr	r2, [r7, #20]
   1795c:	3201      	adds	r2, #1
   1795e:	7812      	ldrb	r2, [r2, #0]
   17960:	0212      	lsls	r2, r2, #8
   17962:	4313      	orrs	r3, r2
   17964:	697a      	ldr	r2, [r7, #20]
   17966:	7812      	ldrb	r2, [r2, #0]
   17968:	4313      	orrs	r3, r2
   1796a:	0f1b      	lsrs	r3, r3, #28
   1796c:	071b      	lsls	r3, r3, #28
   1796e:	687a      	ldr	r2, [r7, #4]
   17970:	4313      	orrs	r3, r2
   17972:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   17974:	687b      	ldr	r3, [r7, #4]
   17976:	b2da      	uxtb	r2, r3
   17978:	697b      	ldr	r3, [r7, #20]
   1797a:	701a      	strb	r2, [r3, #0]
   1797c:	697b      	ldr	r3, [r7, #20]
   1797e:	3301      	adds	r3, #1
   17980:	687a      	ldr	r2, [r7, #4]
   17982:	b292      	uxth	r2, r2
   17984:	0a12      	lsrs	r2, r2, #8
   17986:	b292      	uxth	r2, r2
   17988:	b2d2      	uxtb	r2, r2
   1798a:	701a      	strb	r2, [r3, #0]
   1798c:	697b      	ldr	r3, [r7, #20]
   1798e:	3302      	adds	r3, #2
   17990:	687a      	ldr	r2, [r7, #4]
   17992:	0c12      	lsrs	r2, r2, #16
   17994:	b2d2      	uxtb	r2, r2
   17996:	701a      	strb	r2, [r3, #0]
   17998:	697b      	ldr	r3, [r7, #20]
   1799a:	3303      	adds	r3, #3
   1799c:	687a      	ldr	r2, [r7, #4]
   1799e:	0e12      	lsrs	r2, r2, #24
   179a0:	b2d2      	uxtb	r2, r2
   179a2:	701a      	strb	r2, [r3, #0]
			break;
   179a4:	e00b      	b.n	179be <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   179a6:	231f      	movs	r3, #31
   179a8:	18fb      	adds	r3, r7, r3
   179aa:	2202      	movs	r2, #2
   179ac:	701a      	strb	r2, [r3, #0]
   179ae:	e006      	b.n	179be <put_fat+0x222>
			if (res != FR_OK) break;
   179b0:	46c0      	nop			; (mov r8, r8)
   179b2:	e004      	b.n	179be <put_fat+0x222>
			if (res != FR_OK) break;
   179b4:	46c0      	nop			; (mov r8, r8)
   179b6:	e002      	b.n	179be <put_fat+0x222>
			if (res != FR_OK) break;
   179b8:	46c0      	nop			; (mov r8, r8)
   179ba:	e000      	b.n	179be <put_fat+0x222>
			if (res != FR_OK) break;
   179bc:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   179be:	68fb      	ldr	r3, [r7, #12]
   179c0:	2201      	movs	r2, #1
   179c2:	711a      	strb	r2, [r3, #4]
	}

	return res;
   179c4:	231f      	movs	r3, #31
   179c6:	18fb      	adds	r3, r7, r3
   179c8:	781b      	ldrb	r3, [r3, #0]
}
   179ca:	0018      	movs	r0, r3
   179cc:	46bd      	mov	sp, r7
   179ce:	b009      	add	sp, #36	; 0x24
   179d0:	bd90      	pop	{r4, r7, pc}
   179d2:	46c0      	nop			; (mov r8, r8)
   179d4:	00017399 	.word	0x00017399

000179d8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   179d8:	b590      	push	{r4, r7, lr}
   179da:	b085      	sub	sp, #20
   179dc:	af00      	add	r7, sp, #0
   179de:	6078      	str	r0, [r7, #4]
   179e0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   179e2:	683b      	ldr	r3, [r7, #0]
   179e4:	2b01      	cmp	r3, #1
   179e6:	d904      	bls.n	179f2 <remove_chain+0x1a>
   179e8:	687b      	ldr	r3, [r7, #4]
   179ea:	699a      	ldr	r2, [r3, #24]
   179ec:	683b      	ldr	r3, [r7, #0]
   179ee:	429a      	cmp	r2, r3
   179f0:	d804      	bhi.n	179fc <remove_chain+0x24>
		res = FR_INT_ERR;
   179f2:	230f      	movs	r3, #15
   179f4:	18fb      	adds	r3, r7, r3
   179f6:	2202      	movs	r2, #2
   179f8:	701a      	strb	r2, [r3, #0]
   179fa:	e045      	b.n	17a88 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   179fc:	230f      	movs	r3, #15
   179fe:	18fb      	adds	r3, r7, r3
   17a00:	2200      	movs	r2, #0
   17a02:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   17a04:	e037      	b.n	17a76 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   17a06:	683a      	ldr	r2, [r7, #0]
   17a08:	687b      	ldr	r3, [r7, #4]
   17a0a:	0011      	movs	r1, r2
   17a0c:	0018      	movs	r0, r3
   17a0e:	4b22      	ldr	r3, [pc, #136]	; (17a98 <remove_chain+0xc0>)
   17a10:	4798      	blx	r3
   17a12:	0003      	movs	r3, r0
   17a14:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   17a16:	68bb      	ldr	r3, [r7, #8]
   17a18:	2b00      	cmp	r3, #0
   17a1a:	d032      	beq.n	17a82 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   17a1c:	68bb      	ldr	r3, [r7, #8]
   17a1e:	2b01      	cmp	r3, #1
   17a20:	d104      	bne.n	17a2c <remove_chain+0x54>
   17a22:	230f      	movs	r3, #15
   17a24:	18fb      	adds	r3, r7, r3
   17a26:	2202      	movs	r2, #2
   17a28:	701a      	strb	r2, [r3, #0]
   17a2a:	e02d      	b.n	17a88 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   17a2c:	68bb      	ldr	r3, [r7, #8]
   17a2e:	3301      	adds	r3, #1
   17a30:	d104      	bne.n	17a3c <remove_chain+0x64>
   17a32:	230f      	movs	r3, #15
   17a34:	18fb      	adds	r3, r7, r3
   17a36:	2201      	movs	r2, #1
   17a38:	701a      	strb	r2, [r3, #0]
   17a3a:	e025      	b.n	17a88 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   17a3c:	230f      	movs	r3, #15
   17a3e:	18fc      	adds	r4, r7, r3
   17a40:	6839      	ldr	r1, [r7, #0]
   17a42:	687b      	ldr	r3, [r7, #4]
   17a44:	2200      	movs	r2, #0
   17a46:	0018      	movs	r0, r3
   17a48:	4b14      	ldr	r3, [pc, #80]	; (17a9c <remove_chain+0xc4>)
   17a4a:	4798      	blx	r3
   17a4c:	0003      	movs	r3, r0
   17a4e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   17a50:	230f      	movs	r3, #15
   17a52:	18fb      	adds	r3, r7, r3
   17a54:	781b      	ldrb	r3, [r3, #0]
   17a56:	2b00      	cmp	r3, #0
   17a58:	d115      	bne.n	17a86 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   17a5a:	687b      	ldr	r3, [r7, #4]
   17a5c:	691b      	ldr	r3, [r3, #16]
   17a5e:	3301      	adds	r3, #1
   17a60:	d007      	beq.n	17a72 <remove_chain+0x9a>
				fs->free_clust++;
   17a62:	687b      	ldr	r3, [r7, #4]
   17a64:	691b      	ldr	r3, [r3, #16]
   17a66:	1c5a      	adds	r2, r3, #1
   17a68:	687b      	ldr	r3, [r7, #4]
   17a6a:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   17a6c:	687b      	ldr	r3, [r7, #4]
   17a6e:	2201      	movs	r2, #1
   17a70:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   17a72:	68bb      	ldr	r3, [r7, #8]
   17a74:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   17a76:	687b      	ldr	r3, [r7, #4]
   17a78:	699a      	ldr	r2, [r3, #24]
   17a7a:	683b      	ldr	r3, [r7, #0]
   17a7c:	429a      	cmp	r2, r3
   17a7e:	d8c2      	bhi.n	17a06 <remove_chain+0x2e>
   17a80:	e002      	b.n	17a88 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   17a82:	46c0      	nop			; (mov r8, r8)
   17a84:	e000      	b.n	17a88 <remove_chain+0xb0>
			if (res != FR_OK) break;
   17a86:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   17a88:	230f      	movs	r3, #15
   17a8a:	18fb      	adds	r3, r7, r3
   17a8c:	781b      	ldrb	r3, [r3, #0]
}
   17a8e:	0018      	movs	r0, r3
   17a90:	46bd      	mov	sp, r7
   17a92:	b005      	add	sp, #20
   17a94:	bd90      	pop	{r4, r7, pc}
   17a96:	46c0      	nop			; (mov r8, r8)
   17a98:	00017631 	.word	0x00017631
   17a9c:	0001779d 	.word	0x0001779d

00017aa0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   17aa0:	b590      	push	{r4, r7, lr}
   17aa2:	b087      	sub	sp, #28
   17aa4:	af00      	add	r7, sp, #0
   17aa6:	6078      	str	r0, [r7, #4]
   17aa8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   17aaa:	683b      	ldr	r3, [r7, #0]
   17aac:	2b00      	cmp	r3, #0
   17aae:	d10d      	bne.n	17acc <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   17ab0:	687b      	ldr	r3, [r7, #4]
   17ab2:	68db      	ldr	r3, [r3, #12]
   17ab4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   17ab6:	693b      	ldr	r3, [r7, #16]
   17ab8:	2b00      	cmp	r3, #0
   17aba:	d004      	beq.n	17ac6 <create_chain+0x26>
   17abc:	687b      	ldr	r3, [r7, #4]
   17abe:	699a      	ldr	r2, [r3, #24]
   17ac0:	693b      	ldr	r3, [r7, #16]
   17ac2:	429a      	cmp	r2, r3
   17ac4:	d818      	bhi.n	17af8 <create_chain+0x58>
   17ac6:	2301      	movs	r3, #1
   17ac8:	613b      	str	r3, [r7, #16]
   17aca:	e015      	b.n	17af8 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   17acc:	683a      	ldr	r2, [r7, #0]
   17ace:	687b      	ldr	r3, [r7, #4]
   17ad0:	0011      	movs	r1, r2
   17ad2:	0018      	movs	r0, r3
   17ad4:	4b3e      	ldr	r3, [pc, #248]	; (17bd0 <create_chain+0x130>)
   17ad6:	4798      	blx	r3
   17ad8:	0003      	movs	r3, r0
   17ada:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   17adc:	68bb      	ldr	r3, [r7, #8]
   17ade:	2b01      	cmp	r3, #1
   17ae0:	d801      	bhi.n	17ae6 <create_chain+0x46>
   17ae2:	2301      	movs	r3, #1
   17ae4:	e070      	b.n	17bc8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   17ae6:	687b      	ldr	r3, [r7, #4]
   17ae8:	699a      	ldr	r2, [r3, #24]
   17aea:	68bb      	ldr	r3, [r7, #8]
   17aec:	429a      	cmp	r2, r3
   17aee:	d901      	bls.n	17af4 <create_chain+0x54>
   17af0:	68bb      	ldr	r3, [r7, #8]
   17af2:	e069      	b.n	17bc8 <create_chain+0x128>
		scl = clst;
   17af4:	683b      	ldr	r3, [r7, #0]
   17af6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   17af8:	693b      	ldr	r3, [r7, #16]
   17afa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   17afc:	697b      	ldr	r3, [r7, #20]
   17afe:	3301      	adds	r3, #1
   17b00:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   17b02:	687b      	ldr	r3, [r7, #4]
   17b04:	699a      	ldr	r2, [r3, #24]
   17b06:	697b      	ldr	r3, [r7, #20]
   17b08:	429a      	cmp	r2, r3
   17b0a:	d807      	bhi.n	17b1c <create_chain+0x7c>
			ncl = 2;
   17b0c:	2302      	movs	r3, #2
   17b0e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   17b10:	697a      	ldr	r2, [r7, #20]
   17b12:	693b      	ldr	r3, [r7, #16]
   17b14:	429a      	cmp	r2, r3
   17b16:	d901      	bls.n	17b1c <create_chain+0x7c>
   17b18:	2300      	movs	r3, #0
   17b1a:	e055      	b.n	17bc8 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   17b1c:	697a      	ldr	r2, [r7, #20]
   17b1e:	687b      	ldr	r3, [r7, #4]
   17b20:	0011      	movs	r1, r2
   17b22:	0018      	movs	r0, r3
   17b24:	4b2a      	ldr	r3, [pc, #168]	; (17bd0 <create_chain+0x130>)
   17b26:	4798      	blx	r3
   17b28:	0003      	movs	r3, r0
   17b2a:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   17b2c:	68bb      	ldr	r3, [r7, #8]
   17b2e:	2b00      	cmp	r3, #0
   17b30:	d00d      	beq.n	17b4e <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   17b32:	68bb      	ldr	r3, [r7, #8]
   17b34:	3301      	adds	r3, #1
   17b36:	d002      	beq.n	17b3e <create_chain+0x9e>
   17b38:	68bb      	ldr	r3, [r7, #8]
   17b3a:	2b01      	cmp	r3, #1
   17b3c:	d101      	bne.n	17b42 <create_chain+0xa2>
			return cs;
   17b3e:	68bb      	ldr	r3, [r7, #8]
   17b40:	e042      	b.n	17bc8 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   17b42:	697a      	ldr	r2, [r7, #20]
   17b44:	693b      	ldr	r3, [r7, #16]
   17b46:	429a      	cmp	r2, r3
   17b48:	d1d8      	bne.n	17afc <create_chain+0x5c>
   17b4a:	2300      	movs	r3, #0
   17b4c:	e03c      	b.n	17bc8 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   17b4e:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   17b50:	230f      	movs	r3, #15
   17b52:	18fc      	adds	r4, r7, r3
   17b54:	4a1f      	ldr	r2, [pc, #124]	; (17bd4 <create_chain+0x134>)
   17b56:	6979      	ldr	r1, [r7, #20]
   17b58:	687b      	ldr	r3, [r7, #4]
   17b5a:	0018      	movs	r0, r3
   17b5c:	4b1e      	ldr	r3, [pc, #120]	; (17bd8 <create_chain+0x138>)
   17b5e:	4798      	blx	r3
   17b60:	0003      	movs	r3, r0
   17b62:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   17b64:	230f      	movs	r3, #15
   17b66:	18fb      	adds	r3, r7, r3
   17b68:	781b      	ldrb	r3, [r3, #0]
   17b6a:	2b00      	cmp	r3, #0
   17b6c:	d10c      	bne.n	17b88 <create_chain+0xe8>
   17b6e:	683b      	ldr	r3, [r7, #0]
   17b70:	2b00      	cmp	r3, #0
   17b72:	d009      	beq.n	17b88 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   17b74:	230f      	movs	r3, #15
   17b76:	18fc      	adds	r4, r7, r3
   17b78:	697a      	ldr	r2, [r7, #20]
   17b7a:	6839      	ldr	r1, [r7, #0]
   17b7c:	687b      	ldr	r3, [r7, #4]
   17b7e:	0018      	movs	r0, r3
   17b80:	4b15      	ldr	r3, [pc, #84]	; (17bd8 <create_chain+0x138>)
   17b82:	4798      	blx	r3
   17b84:	0003      	movs	r3, r0
   17b86:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   17b88:	230f      	movs	r3, #15
   17b8a:	18fb      	adds	r3, r7, r3
   17b8c:	781b      	ldrb	r3, [r3, #0]
   17b8e:	2b00      	cmp	r3, #0
   17b90:	d10f      	bne.n	17bb2 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   17b92:	687b      	ldr	r3, [r7, #4]
   17b94:	697a      	ldr	r2, [r7, #20]
   17b96:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   17b98:	687b      	ldr	r3, [r7, #4]
   17b9a:	691b      	ldr	r3, [r3, #16]
   17b9c:	3301      	adds	r3, #1
   17b9e:	d012      	beq.n	17bc6 <create_chain+0x126>
			fs->free_clust--;
   17ba0:	687b      	ldr	r3, [r7, #4]
   17ba2:	691b      	ldr	r3, [r3, #16]
   17ba4:	1e5a      	subs	r2, r3, #1
   17ba6:	687b      	ldr	r3, [r7, #4]
   17ba8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   17baa:	687b      	ldr	r3, [r7, #4]
   17bac:	2201      	movs	r2, #1
   17bae:	715a      	strb	r2, [r3, #5]
   17bb0:	e009      	b.n	17bc6 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   17bb2:	230f      	movs	r3, #15
   17bb4:	18fb      	adds	r3, r7, r3
   17bb6:	781b      	ldrb	r3, [r3, #0]
   17bb8:	2b01      	cmp	r3, #1
   17bba:	d102      	bne.n	17bc2 <create_chain+0x122>
   17bbc:	2301      	movs	r3, #1
   17bbe:	425b      	negs	r3, r3
   17bc0:	e000      	b.n	17bc4 <create_chain+0x124>
   17bc2:	2301      	movs	r3, #1
   17bc4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   17bc6:	697b      	ldr	r3, [r7, #20]
}
   17bc8:	0018      	movs	r0, r3
   17bca:	46bd      	mov	sp, r7
   17bcc:	b007      	add	sp, #28
   17bce:	bd90      	pop	{r4, r7, pc}
   17bd0:	00017631 	.word	0x00017631
   17bd4:	0fffffff 	.word	0x0fffffff
   17bd8:	0001779d 	.word	0x0001779d

00017bdc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   17bdc:	b580      	push	{r7, lr}
   17bde:	b084      	sub	sp, #16
   17be0:	af00      	add	r7, sp, #0
   17be2:	6078      	str	r0, [r7, #4]
   17be4:	000a      	movs	r2, r1
   17be6:	1cbb      	adds	r3, r7, #2
   17be8:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   17bea:	687b      	ldr	r3, [r7, #4]
   17bec:	1cba      	adds	r2, r7, #2
   17bee:	8812      	ldrh	r2, [r2, #0]
   17bf0:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   17bf2:	687b      	ldr	r3, [r7, #4]
   17bf4:	689b      	ldr	r3, [r3, #8]
   17bf6:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   17bf8:	68fb      	ldr	r3, [r7, #12]
   17bfa:	2b01      	cmp	r3, #1
   17bfc:	d005      	beq.n	17c0a <dir_sdi+0x2e>
   17bfe:	687b      	ldr	r3, [r7, #4]
   17c00:	681b      	ldr	r3, [r3, #0]
   17c02:	699a      	ldr	r2, [r3, #24]
   17c04:	68fb      	ldr	r3, [r7, #12]
   17c06:	429a      	cmp	r2, r3
   17c08:	d801      	bhi.n	17c0e <dir_sdi+0x32>
		return FR_INT_ERR;
   17c0a:	2302      	movs	r3, #2
   17c0c:	e075      	b.n	17cfa <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   17c0e:	68fb      	ldr	r3, [r7, #12]
   17c10:	2b00      	cmp	r3, #0
   17c12:	d108      	bne.n	17c26 <dir_sdi+0x4a>
   17c14:	687b      	ldr	r3, [r7, #4]
   17c16:	681b      	ldr	r3, [r3, #0]
   17c18:	781b      	ldrb	r3, [r3, #0]
   17c1a:	2b03      	cmp	r3, #3
   17c1c:	d103      	bne.n	17c26 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   17c1e:	687b      	ldr	r3, [r7, #4]
   17c20:	681b      	ldr	r3, [r3, #0]
   17c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17c24:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   17c26:	68fb      	ldr	r3, [r7, #12]
   17c28:	2b00      	cmp	r3, #0
   17c2a:	d116      	bne.n	17c5a <dir_sdi+0x7e>
		dj->clust = clst;
   17c2c:	687b      	ldr	r3, [r7, #4]
   17c2e:	68fa      	ldr	r2, [r7, #12]
   17c30:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   17c32:	687b      	ldr	r3, [r7, #4]
   17c34:	681b      	ldr	r3, [r3, #0]
   17c36:	891b      	ldrh	r3, [r3, #8]
   17c38:	1cba      	adds	r2, r7, #2
   17c3a:	8812      	ldrh	r2, [r2, #0]
   17c3c:	429a      	cmp	r2, r3
   17c3e:	d301      	bcc.n	17c44 <dir_sdi+0x68>
			return FR_INT_ERR;
   17c40:	2302      	movs	r3, #2
   17c42:	e05a      	b.n	17cfa <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   17c44:	687b      	ldr	r3, [r7, #4]
   17c46:	681b      	ldr	r3, [r3, #0]
   17c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17c4a:	1cba      	adds	r2, r7, #2
   17c4c:	8812      	ldrh	r2, [r2, #0]
   17c4e:	0912      	lsrs	r2, r2, #4
   17c50:	b292      	uxth	r2, r2
   17c52:	189a      	adds	r2, r3, r2
   17c54:	687b      	ldr	r3, [r7, #4]
   17c56:	611a      	str	r2, [r3, #16]
   17c58:	e042      	b.n	17ce0 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   17c5a:	687b      	ldr	r3, [r7, #4]
   17c5c:	681b      	ldr	r3, [r3, #0]
   17c5e:	789b      	ldrb	r3, [r3, #2]
   17c60:	b29a      	uxth	r2, r3
   17c62:	230a      	movs	r3, #10
   17c64:	18fb      	adds	r3, r7, r3
   17c66:	0112      	lsls	r2, r2, #4
   17c68:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   17c6a:	e020      	b.n	17cae <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   17c6c:	687b      	ldr	r3, [r7, #4]
   17c6e:	681b      	ldr	r3, [r3, #0]
   17c70:	68fa      	ldr	r2, [r7, #12]
   17c72:	0011      	movs	r1, r2
   17c74:	0018      	movs	r0, r3
   17c76:	4b23      	ldr	r3, [pc, #140]	; (17d04 <dir_sdi+0x128>)
   17c78:	4798      	blx	r3
   17c7a:	0003      	movs	r3, r0
   17c7c:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   17c7e:	68fb      	ldr	r3, [r7, #12]
   17c80:	3301      	adds	r3, #1
   17c82:	d101      	bne.n	17c88 <dir_sdi+0xac>
   17c84:	2301      	movs	r3, #1
   17c86:	e038      	b.n	17cfa <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   17c88:	68fb      	ldr	r3, [r7, #12]
   17c8a:	2b01      	cmp	r3, #1
   17c8c:	d905      	bls.n	17c9a <dir_sdi+0xbe>
   17c8e:	687b      	ldr	r3, [r7, #4]
   17c90:	681b      	ldr	r3, [r3, #0]
   17c92:	699a      	ldr	r2, [r3, #24]
   17c94:	68fb      	ldr	r3, [r7, #12]
   17c96:	429a      	cmp	r2, r3
   17c98:	d801      	bhi.n	17c9e <dir_sdi+0xc2>
				return FR_INT_ERR;
   17c9a:	2302      	movs	r3, #2
   17c9c:	e02d      	b.n	17cfa <dir_sdi+0x11e>
			idx -= ic;
   17c9e:	1cbb      	adds	r3, r7, #2
   17ca0:	1cb9      	adds	r1, r7, #2
   17ca2:	220a      	movs	r2, #10
   17ca4:	18ba      	adds	r2, r7, r2
   17ca6:	8809      	ldrh	r1, [r1, #0]
   17ca8:	8812      	ldrh	r2, [r2, #0]
   17caa:	1a8a      	subs	r2, r1, r2
   17cac:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   17cae:	1cba      	adds	r2, r7, #2
   17cb0:	230a      	movs	r3, #10
   17cb2:	18fb      	adds	r3, r7, r3
   17cb4:	8812      	ldrh	r2, [r2, #0]
   17cb6:	881b      	ldrh	r3, [r3, #0]
   17cb8:	429a      	cmp	r2, r3
   17cba:	d2d7      	bcs.n	17c6c <dir_sdi+0x90>
		}
		dj->clust = clst;
   17cbc:	687b      	ldr	r3, [r7, #4]
   17cbe:	68fa      	ldr	r2, [r7, #12]
   17cc0:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   17cc2:	687b      	ldr	r3, [r7, #4]
   17cc4:	681b      	ldr	r3, [r3, #0]
   17cc6:	68fa      	ldr	r2, [r7, #12]
   17cc8:	0011      	movs	r1, r2
   17cca:	0018      	movs	r0, r3
   17ccc:	4b0e      	ldr	r3, [pc, #56]	; (17d08 <dir_sdi+0x12c>)
   17cce:	4798      	blx	r3
   17cd0:	0002      	movs	r2, r0
   17cd2:	1cbb      	adds	r3, r7, #2
   17cd4:	881b      	ldrh	r3, [r3, #0]
   17cd6:	091b      	lsrs	r3, r3, #4
   17cd8:	b29b      	uxth	r3, r3
   17cda:	18d2      	adds	r2, r2, r3
   17cdc:	687b      	ldr	r3, [r7, #4]
   17cde:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   17ce0:	687b      	ldr	r3, [r7, #4]
   17ce2:	681b      	ldr	r3, [r3, #0]
   17ce4:	3330      	adds	r3, #48	; 0x30
   17ce6:	001a      	movs	r2, r3
   17ce8:	1cbb      	adds	r3, r7, #2
   17cea:	881b      	ldrh	r3, [r3, #0]
   17cec:	210f      	movs	r1, #15
   17cee:	400b      	ands	r3, r1
   17cf0:	015b      	lsls	r3, r3, #5
   17cf2:	18d2      	adds	r2, r2, r3
   17cf4:	687b      	ldr	r3, [r7, #4]
   17cf6:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   17cf8:	2300      	movs	r3, #0
}
   17cfa:	0018      	movs	r0, r3
   17cfc:	46bd      	mov	sp, r7
   17cfe:	b004      	add	sp, #16
   17d00:	bd80      	pop	{r7, pc}
   17d02:	46c0      	nop			; (mov r8, r8)
   17d04:	00017631 	.word	0x00017631
   17d08:	000175f9 	.word	0x000175f9

00017d0c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   17d0c:	b590      	push	{r4, r7, lr}
   17d0e:	b085      	sub	sp, #20
   17d10:	af00      	add	r7, sp, #0
   17d12:	6078      	str	r0, [r7, #4]
   17d14:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   17d16:	687b      	ldr	r3, [r7, #4]
   17d18:	88da      	ldrh	r2, [r3, #6]
   17d1a:	2308      	movs	r3, #8
   17d1c:	18fb      	adds	r3, r7, r3
   17d1e:	3201      	adds	r2, #1
   17d20:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   17d22:	2308      	movs	r3, #8
   17d24:	18fb      	adds	r3, r7, r3
   17d26:	881b      	ldrh	r3, [r3, #0]
   17d28:	2b00      	cmp	r3, #0
   17d2a:	d003      	beq.n	17d34 <dir_next+0x28>
   17d2c:	687b      	ldr	r3, [r7, #4]
   17d2e:	691b      	ldr	r3, [r3, #16]
   17d30:	2b00      	cmp	r3, #0
   17d32:	d101      	bne.n	17d38 <dir_next+0x2c>
		return FR_NO_FILE;
   17d34:	2304      	movs	r3, #4
   17d36:	e0d2      	b.n	17ede <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   17d38:	2308      	movs	r3, #8
   17d3a:	18fb      	adds	r3, r7, r3
   17d3c:	881b      	ldrh	r3, [r3, #0]
   17d3e:	220f      	movs	r2, #15
   17d40:	4013      	ands	r3, r2
   17d42:	b29b      	uxth	r3, r3
   17d44:	2b00      	cmp	r3, #0
   17d46:	d000      	beq.n	17d4a <dir_next+0x3e>
   17d48:	e0b6      	b.n	17eb8 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   17d4a:	687b      	ldr	r3, [r7, #4]
   17d4c:	691b      	ldr	r3, [r3, #16]
   17d4e:	1c5a      	adds	r2, r3, #1
   17d50:	687b      	ldr	r3, [r7, #4]
   17d52:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   17d54:	687b      	ldr	r3, [r7, #4]
   17d56:	68db      	ldr	r3, [r3, #12]
   17d58:	2b00      	cmp	r3, #0
   17d5a:	d10a      	bne.n	17d72 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   17d5c:	687b      	ldr	r3, [r7, #4]
   17d5e:	681b      	ldr	r3, [r3, #0]
   17d60:	891b      	ldrh	r3, [r3, #8]
   17d62:	2208      	movs	r2, #8
   17d64:	18ba      	adds	r2, r7, r2
   17d66:	8812      	ldrh	r2, [r2, #0]
   17d68:	429a      	cmp	r2, r3
   17d6a:	d200      	bcs.n	17d6e <dir_next+0x62>
   17d6c:	e0a4      	b.n	17eb8 <dir_next+0x1ac>
				return FR_NO_FILE;
   17d6e:	2304      	movs	r3, #4
   17d70:	e0b5      	b.n	17ede <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   17d72:	2308      	movs	r3, #8
   17d74:	18fb      	adds	r3, r7, r3
   17d76:	881b      	ldrh	r3, [r3, #0]
   17d78:	091b      	lsrs	r3, r3, #4
   17d7a:	b29b      	uxth	r3, r3
   17d7c:	001a      	movs	r2, r3
   17d7e:	687b      	ldr	r3, [r7, #4]
   17d80:	681b      	ldr	r3, [r3, #0]
   17d82:	789b      	ldrb	r3, [r3, #2]
   17d84:	3b01      	subs	r3, #1
   17d86:	4013      	ands	r3, r2
   17d88:	d000      	beq.n	17d8c <dir_next+0x80>
   17d8a:	e095      	b.n	17eb8 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   17d8c:	687b      	ldr	r3, [r7, #4]
   17d8e:	681a      	ldr	r2, [r3, #0]
   17d90:	687b      	ldr	r3, [r7, #4]
   17d92:	68db      	ldr	r3, [r3, #12]
   17d94:	0019      	movs	r1, r3
   17d96:	0010      	movs	r0, r2
   17d98:	4b53      	ldr	r3, [pc, #332]	; (17ee8 <dir_next+0x1dc>)
   17d9a:	4798      	blx	r3
   17d9c:	0003      	movs	r3, r0
   17d9e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   17da0:	68fb      	ldr	r3, [r7, #12]
   17da2:	2b01      	cmp	r3, #1
   17da4:	d801      	bhi.n	17daa <dir_next+0x9e>
   17da6:	2302      	movs	r3, #2
   17da8:	e099      	b.n	17ede <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   17daa:	68fb      	ldr	r3, [r7, #12]
   17dac:	3301      	adds	r3, #1
   17dae:	d101      	bne.n	17db4 <dir_next+0xa8>
   17db0:	2301      	movs	r3, #1
   17db2:	e094      	b.n	17ede <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   17db4:	687b      	ldr	r3, [r7, #4]
   17db6:	681b      	ldr	r3, [r3, #0]
   17db8:	699a      	ldr	r2, [r3, #24]
   17dba:	68fb      	ldr	r3, [r7, #12]
   17dbc:	429a      	cmp	r2, r3
   17dbe:	d900      	bls.n	17dc2 <dir_next+0xb6>
   17dc0:	e06d      	b.n	17e9e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   17dc2:	683b      	ldr	r3, [r7, #0]
   17dc4:	2b00      	cmp	r3, #0
   17dc6:	d101      	bne.n	17dcc <dir_next+0xc0>
   17dc8:	2304      	movs	r3, #4
   17dca:	e088      	b.n	17ede <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   17dcc:	687b      	ldr	r3, [r7, #4]
   17dce:	681a      	ldr	r2, [r3, #0]
   17dd0:	687b      	ldr	r3, [r7, #4]
   17dd2:	68db      	ldr	r3, [r3, #12]
   17dd4:	0019      	movs	r1, r3
   17dd6:	0010      	movs	r0, r2
   17dd8:	4b44      	ldr	r3, [pc, #272]	; (17eec <dir_next+0x1e0>)
   17dda:	4798      	blx	r3
   17ddc:	0003      	movs	r3, r0
   17dde:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   17de0:	68fb      	ldr	r3, [r7, #12]
   17de2:	2b00      	cmp	r3, #0
   17de4:	d101      	bne.n	17dea <dir_next+0xde>
   17de6:	2307      	movs	r3, #7
   17de8:	e079      	b.n	17ede <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   17dea:	68fb      	ldr	r3, [r7, #12]
   17dec:	2b01      	cmp	r3, #1
   17dee:	d101      	bne.n	17df4 <dir_next+0xe8>
   17df0:	2302      	movs	r3, #2
   17df2:	e074      	b.n	17ede <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   17df4:	68fb      	ldr	r3, [r7, #12]
   17df6:	3301      	adds	r3, #1
   17df8:	d101      	bne.n	17dfe <dir_next+0xf2>
   17dfa:	2301      	movs	r3, #1
   17dfc:	e06f      	b.n	17ede <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   17dfe:	687b      	ldr	r3, [r7, #4]
   17e00:	681b      	ldr	r3, [r3, #0]
   17e02:	2100      	movs	r1, #0
   17e04:	0018      	movs	r0, r3
   17e06:	4b3a      	ldr	r3, [pc, #232]	; (17ef0 <dir_next+0x1e4>)
   17e08:	4798      	blx	r3
   17e0a:	1e03      	subs	r3, r0, #0
   17e0c:	d001      	beq.n	17e12 <dir_next+0x106>
   17e0e:	2301      	movs	r3, #1
   17e10:	e065      	b.n	17ede <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   17e12:	687b      	ldr	r3, [r7, #4]
   17e14:	681b      	ldr	r3, [r3, #0]
   17e16:	3330      	adds	r3, #48	; 0x30
   17e18:	0018      	movs	r0, r3
   17e1a:	2380      	movs	r3, #128	; 0x80
   17e1c:	009b      	lsls	r3, r3, #2
   17e1e:	001a      	movs	r2, r3
   17e20:	2100      	movs	r1, #0
   17e22:	4b34      	ldr	r3, [pc, #208]	; (17ef4 <dir_next+0x1e8>)
   17e24:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   17e26:	687b      	ldr	r3, [r7, #4]
   17e28:	681c      	ldr	r4, [r3, #0]
   17e2a:	687b      	ldr	r3, [r7, #4]
   17e2c:	681b      	ldr	r3, [r3, #0]
   17e2e:	68fa      	ldr	r2, [r7, #12]
   17e30:	0011      	movs	r1, r2
   17e32:	0018      	movs	r0, r3
   17e34:	4b30      	ldr	r3, [pc, #192]	; (17ef8 <dir_next+0x1ec>)
   17e36:	4798      	blx	r3
   17e38:	0003      	movs	r3, r0
   17e3a:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   17e3c:	230b      	movs	r3, #11
   17e3e:	18fb      	adds	r3, r7, r3
   17e40:	2200      	movs	r2, #0
   17e42:	701a      	strb	r2, [r3, #0]
   17e44:	e019      	b.n	17e7a <dir_next+0x16e>
						dj->fs->wflag = 1;
   17e46:	687b      	ldr	r3, [r7, #4]
   17e48:	681b      	ldr	r3, [r3, #0]
   17e4a:	2201      	movs	r2, #1
   17e4c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   17e4e:	687b      	ldr	r3, [r7, #4]
   17e50:	681b      	ldr	r3, [r3, #0]
   17e52:	2100      	movs	r1, #0
   17e54:	0018      	movs	r0, r3
   17e56:	4b26      	ldr	r3, [pc, #152]	; (17ef0 <dir_next+0x1e4>)
   17e58:	4798      	blx	r3
   17e5a:	1e03      	subs	r3, r0, #0
   17e5c:	d001      	beq.n	17e62 <dir_next+0x156>
   17e5e:	2301      	movs	r3, #1
   17e60:	e03d      	b.n	17ede <dir_next+0x1d2>
						dj->fs->winsect++;
   17e62:	687b      	ldr	r3, [r7, #4]
   17e64:	681b      	ldr	r3, [r3, #0]
   17e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17e68:	3201      	adds	r2, #1
   17e6a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   17e6c:	230b      	movs	r3, #11
   17e6e:	18fb      	adds	r3, r7, r3
   17e70:	781a      	ldrb	r2, [r3, #0]
   17e72:	230b      	movs	r3, #11
   17e74:	18fb      	adds	r3, r7, r3
   17e76:	3201      	adds	r2, #1
   17e78:	701a      	strb	r2, [r3, #0]
   17e7a:	687b      	ldr	r3, [r7, #4]
   17e7c:	681b      	ldr	r3, [r3, #0]
   17e7e:	789b      	ldrb	r3, [r3, #2]
   17e80:	220b      	movs	r2, #11
   17e82:	18ba      	adds	r2, r7, r2
   17e84:	7812      	ldrb	r2, [r2, #0]
   17e86:	429a      	cmp	r2, r3
   17e88:	d3dd      	bcc.n	17e46 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   17e8a:	687b      	ldr	r3, [r7, #4]
   17e8c:	681b      	ldr	r3, [r3, #0]
   17e8e:	687a      	ldr	r2, [r7, #4]
   17e90:	6812      	ldr	r2, [r2, #0]
   17e92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   17e94:	220b      	movs	r2, #11
   17e96:	18ba      	adds	r2, r7, r2
   17e98:	7812      	ldrb	r2, [r2, #0]
   17e9a:	1a8a      	subs	r2, r1, r2
   17e9c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   17e9e:	687b      	ldr	r3, [r7, #4]
   17ea0:	68fa      	ldr	r2, [r7, #12]
   17ea2:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   17ea4:	687b      	ldr	r3, [r7, #4]
   17ea6:	681b      	ldr	r3, [r3, #0]
   17ea8:	68fa      	ldr	r2, [r7, #12]
   17eaa:	0011      	movs	r1, r2
   17eac:	0018      	movs	r0, r3
   17eae:	4b12      	ldr	r3, [pc, #72]	; (17ef8 <dir_next+0x1ec>)
   17eb0:	4798      	blx	r3
   17eb2:	0002      	movs	r2, r0
   17eb4:	687b      	ldr	r3, [r7, #4]
   17eb6:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   17eb8:	687b      	ldr	r3, [r7, #4]
   17eba:	2208      	movs	r2, #8
   17ebc:	18ba      	adds	r2, r7, r2
   17ebe:	8812      	ldrh	r2, [r2, #0]
   17ec0:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   17ec2:	687b      	ldr	r3, [r7, #4]
   17ec4:	681b      	ldr	r3, [r3, #0]
   17ec6:	3330      	adds	r3, #48	; 0x30
   17ec8:	001a      	movs	r2, r3
   17eca:	2308      	movs	r3, #8
   17ecc:	18fb      	adds	r3, r7, r3
   17ece:	881b      	ldrh	r3, [r3, #0]
   17ed0:	210f      	movs	r1, #15
   17ed2:	400b      	ands	r3, r1
   17ed4:	015b      	lsls	r3, r3, #5
   17ed6:	18d2      	adds	r2, r2, r3
   17ed8:	687b      	ldr	r3, [r7, #4]
   17eda:	615a      	str	r2, [r3, #20]

	return FR_OK;
   17edc:	2300      	movs	r3, #0
}
   17ede:	0018      	movs	r0, r3
   17ee0:	46bd      	mov	sp, r7
   17ee2:	b005      	add	sp, #20
   17ee4:	bd90      	pop	{r4, r7, pc}
   17ee6:	46c0      	nop			; (mov r8, r8)
   17ee8:	00017631 	.word	0x00017631
   17eec:	00017aa1 	.word	0x00017aa1
   17ef0:	00017399 	.word	0x00017399
   17ef4:	000172ed 	.word	0x000172ed
   17ef8:	000175f9 	.word	0x000175f9

00017efc <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   17efc:	b590      	push	{r4, r7, lr}
   17efe:	b087      	sub	sp, #28
   17f00:	af00      	add	r7, sp, #0
   17f02:	6078      	str	r0, [r7, #4]
   17f04:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   17f06:	683b      	ldr	r3, [r7, #0]
   17f08:	781b      	ldrb	r3, [r3, #0]
   17f0a:	001a      	movs	r2, r3
   17f0c:	2340      	movs	r3, #64	; 0x40
   17f0e:	439a      	bics	r2, r3
   17f10:	0013      	movs	r3, r2
   17f12:	1e5a      	subs	r2, r3, #1
   17f14:	0013      	movs	r3, r2
   17f16:	005b      	lsls	r3, r3, #1
   17f18:	189b      	adds	r3, r3, r2
   17f1a:	009b      	lsls	r3, r3, #2
   17f1c:	189b      	adds	r3, r3, r2
   17f1e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   17f20:	2300      	movs	r3, #0
   17f22:	613b      	str	r3, [r7, #16]
   17f24:	230e      	movs	r3, #14
   17f26:	18fb      	adds	r3, r7, r3
   17f28:	2201      	movs	r2, #1
   17f2a:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   17f2c:	4a31      	ldr	r2, [pc, #196]	; (17ff4 <cmp_lfn+0xf8>)
   17f2e:	693b      	ldr	r3, [r7, #16]
   17f30:	18d3      	adds	r3, r2, r3
   17f32:	781b      	ldrb	r3, [r3, #0]
   17f34:	3301      	adds	r3, #1
   17f36:	683a      	ldr	r2, [r7, #0]
   17f38:	18d3      	adds	r3, r2, r3
   17f3a:	781b      	ldrb	r3, [r3, #0]
   17f3c:	021b      	lsls	r3, r3, #8
   17f3e:	b21a      	sxth	r2, r3
   17f40:	492c      	ldr	r1, [pc, #176]	; (17ff4 <cmp_lfn+0xf8>)
   17f42:	693b      	ldr	r3, [r7, #16]
   17f44:	18cb      	adds	r3, r1, r3
   17f46:	781b      	ldrb	r3, [r3, #0]
   17f48:	0019      	movs	r1, r3
   17f4a:	683b      	ldr	r3, [r7, #0]
   17f4c:	185b      	adds	r3, r3, r1
   17f4e:	781b      	ldrb	r3, [r3, #0]
   17f50:	b21b      	sxth	r3, r3
   17f52:	4313      	orrs	r3, r2
   17f54:	b21a      	sxth	r2, r3
   17f56:	230c      	movs	r3, #12
   17f58:	18fb      	adds	r3, r7, r3
   17f5a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   17f5c:	230e      	movs	r3, #14
   17f5e:	18fb      	adds	r3, r7, r3
   17f60:	881b      	ldrh	r3, [r3, #0]
   17f62:	2b00      	cmp	r3, #0
   17f64:	d01f      	beq.n	17fa6 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   17f66:	230e      	movs	r3, #14
   17f68:	18fc      	adds	r4, r7, r3
   17f6a:	230c      	movs	r3, #12
   17f6c:	18fb      	adds	r3, r7, r3
   17f6e:	881b      	ldrh	r3, [r3, #0]
   17f70:	0018      	movs	r0, r3
   17f72:	4b21      	ldr	r3, [pc, #132]	; (17ff8 <cmp_lfn+0xfc>)
   17f74:	4798      	blx	r3
   17f76:	0003      	movs	r3, r0
   17f78:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   17f7a:	697b      	ldr	r3, [r7, #20]
   17f7c:	2bfe      	cmp	r3, #254	; 0xfe
   17f7e:	d810      	bhi.n	17fa2 <cmp_lfn+0xa6>
   17f80:	697b      	ldr	r3, [r7, #20]
   17f82:	1c5a      	adds	r2, r3, #1
   17f84:	617a      	str	r2, [r7, #20]
   17f86:	005b      	lsls	r3, r3, #1
   17f88:	687a      	ldr	r2, [r7, #4]
   17f8a:	18d3      	adds	r3, r2, r3
   17f8c:	881b      	ldrh	r3, [r3, #0]
   17f8e:	0018      	movs	r0, r3
   17f90:	4b19      	ldr	r3, [pc, #100]	; (17ff8 <cmp_lfn+0xfc>)
   17f92:	4798      	blx	r3
   17f94:	0003      	movs	r3, r0
   17f96:	001a      	movs	r2, r3
   17f98:	230e      	movs	r3, #14
   17f9a:	18fb      	adds	r3, r7, r3
   17f9c:	881b      	ldrh	r3, [r3, #0]
   17f9e:	4293      	cmp	r3, r2
   17fa0:	d009      	beq.n	17fb6 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   17fa2:	2300      	movs	r3, #0
   17fa4:	e022      	b.n	17fec <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   17fa6:	230c      	movs	r3, #12
   17fa8:	18fb      	adds	r3, r7, r3
   17faa:	881b      	ldrh	r3, [r3, #0]
   17fac:	4a13      	ldr	r2, [pc, #76]	; (17ffc <cmp_lfn+0x100>)
   17fae:	4293      	cmp	r3, r2
   17fb0:	d001      	beq.n	17fb6 <cmp_lfn+0xba>
   17fb2:	2300      	movs	r3, #0
   17fb4:	e01a      	b.n	17fec <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   17fb6:	693b      	ldr	r3, [r7, #16]
   17fb8:	3301      	adds	r3, #1
   17fba:	613b      	str	r3, [r7, #16]
   17fbc:	693b      	ldr	r3, [r7, #16]
   17fbe:	2b0c      	cmp	r3, #12
   17fc0:	d9b4      	bls.n	17f2c <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   17fc2:	683b      	ldr	r3, [r7, #0]
   17fc4:	781b      	ldrb	r3, [r3, #0]
   17fc6:	001a      	movs	r2, r3
   17fc8:	2340      	movs	r3, #64	; 0x40
   17fca:	4013      	ands	r3, r2
   17fcc:	d00d      	beq.n	17fea <cmp_lfn+0xee>
   17fce:	230e      	movs	r3, #14
   17fd0:	18fb      	adds	r3, r7, r3
   17fd2:	881b      	ldrh	r3, [r3, #0]
   17fd4:	2b00      	cmp	r3, #0
   17fd6:	d008      	beq.n	17fea <cmp_lfn+0xee>
   17fd8:	697b      	ldr	r3, [r7, #20]
   17fda:	005b      	lsls	r3, r3, #1
   17fdc:	687a      	ldr	r2, [r7, #4]
   17fde:	18d3      	adds	r3, r2, r3
   17fe0:	881b      	ldrh	r3, [r3, #0]
   17fe2:	2b00      	cmp	r3, #0
   17fe4:	d001      	beq.n	17fea <cmp_lfn+0xee>
		return 0;
   17fe6:	2300      	movs	r3, #0
   17fe8:	e000      	b.n	17fec <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   17fea:	2301      	movs	r3, #1
}
   17fec:	0018      	movs	r0, r3
   17fee:	46bd      	mov	sp, r7
   17ff0:	b007      	add	sp, #28
   17ff2:	bd90      	pop	{r4, r7, pc}
   17ff4:	00024978 	.word	0x00024978
   17ff8:	00019fa9 	.word	0x00019fa9
   17ffc:	0000ffff 	.word	0x0000ffff

00018000 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   18000:	b580      	push	{r7, lr}
   18002:	b088      	sub	sp, #32
   18004:	af00      	add	r7, sp, #0
   18006:	60f8      	str	r0, [r7, #12]
   18008:	60b9      	str	r1, [r7, #8]
   1800a:	0019      	movs	r1, r3
   1800c:	1dfb      	adds	r3, r7, #7
   1800e:	701a      	strb	r2, [r3, #0]
   18010:	1dbb      	adds	r3, r7, #6
   18012:	1c0a      	adds	r2, r1, #0
   18014:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   18016:	68bb      	ldr	r3, [r7, #8]
   18018:	330d      	adds	r3, #13
   1801a:	1dba      	adds	r2, r7, #6
   1801c:	7812      	ldrb	r2, [r2, #0]
   1801e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   18020:	68bb      	ldr	r3, [r7, #8]
   18022:	330b      	adds	r3, #11
   18024:	220f      	movs	r2, #15
   18026:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   18028:	68bb      	ldr	r3, [r7, #8]
   1802a:	330c      	adds	r3, #12
   1802c:	2200      	movs	r2, #0
   1802e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   18030:	68bb      	ldr	r3, [r7, #8]
   18032:	331a      	adds	r3, #26
   18034:	2200      	movs	r2, #0
   18036:	701a      	strb	r2, [r3, #0]
   18038:	68bb      	ldr	r3, [r7, #8]
   1803a:	331b      	adds	r3, #27
   1803c:	2200      	movs	r2, #0
   1803e:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   18040:	1dfb      	adds	r3, r7, #7
   18042:	781b      	ldrb	r3, [r3, #0]
   18044:	1e5a      	subs	r2, r3, #1
   18046:	0013      	movs	r3, r2
   18048:	005b      	lsls	r3, r3, #1
   1804a:	189b      	adds	r3, r3, r2
   1804c:	009b      	lsls	r3, r3, #2
   1804e:	189b      	adds	r3, r3, r2
   18050:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   18052:	2316      	movs	r3, #22
   18054:	18fb      	adds	r3, r7, r3
   18056:	2200      	movs	r2, #0
   18058:	801a      	strh	r2, [r3, #0]
   1805a:	2300      	movs	r3, #0
   1805c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1805e:	2316      	movs	r3, #22
   18060:	18fb      	adds	r3, r7, r3
   18062:	881b      	ldrh	r3, [r3, #0]
   18064:	4a28      	ldr	r2, [pc, #160]	; (18108 <fit_lfn+0x108>)
   18066:	4293      	cmp	r3, r2
   18068:	d009      	beq.n	1807e <fit_lfn+0x7e>
   1806a:	69fb      	ldr	r3, [r7, #28]
   1806c:	1c5a      	adds	r2, r3, #1
   1806e:	61fa      	str	r2, [r7, #28]
   18070:	005b      	lsls	r3, r3, #1
   18072:	68fa      	ldr	r2, [r7, #12]
   18074:	18d2      	adds	r2, r2, r3
   18076:	2316      	movs	r3, #22
   18078:	18fb      	adds	r3, r7, r3
   1807a:	8812      	ldrh	r2, [r2, #0]
   1807c:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   1807e:	4a23      	ldr	r2, [pc, #140]	; (1810c <fit_lfn+0x10c>)
   18080:	69bb      	ldr	r3, [r7, #24]
   18082:	18d3      	adds	r3, r2, r3
   18084:	781b      	ldrb	r3, [r3, #0]
   18086:	001a      	movs	r2, r3
   18088:	68bb      	ldr	r3, [r7, #8]
   1808a:	189b      	adds	r3, r3, r2
   1808c:	2216      	movs	r2, #22
   1808e:	18ba      	adds	r2, r7, r2
   18090:	8812      	ldrh	r2, [r2, #0]
   18092:	b2d2      	uxtb	r2, r2
   18094:	701a      	strb	r2, [r3, #0]
   18096:	4a1d      	ldr	r2, [pc, #116]	; (1810c <fit_lfn+0x10c>)
   18098:	69bb      	ldr	r3, [r7, #24]
   1809a:	18d3      	adds	r3, r2, r3
   1809c:	781b      	ldrb	r3, [r3, #0]
   1809e:	3301      	adds	r3, #1
   180a0:	68ba      	ldr	r2, [r7, #8]
   180a2:	18d3      	adds	r3, r2, r3
   180a4:	2216      	movs	r2, #22
   180a6:	18ba      	adds	r2, r7, r2
   180a8:	8812      	ldrh	r2, [r2, #0]
   180aa:	0a12      	lsrs	r2, r2, #8
   180ac:	b292      	uxth	r2, r2
   180ae:	b2d2      	uxtb	r2, r2
   180b0:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   180b2:	2316      	movs	r3, #22
   180b4:	18fb      	adds	r3, r7, r3
   180b6:	881b      	ldrh	r3, [r3, #0]
   180b8:	2b00      	cmp	r3, #0
   180ba:	d104      	bne.n	180c6 <fit_lfn+0xc6>
   180bc:	2316      	movs	r3, #22
   180be:	18fb      	adds	r3, r7, r3
   180c0:	2201      	movs	r2, #1
   180c2:	4252      	negs	r2, r2
   180c4:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   180c6:	69bb      	ldr	r3, [r7, #24]
   180c8:	3301      	adds	r3, #1
   180ca:	61bb      	str	r3, [r7, #24]
   180cc:	69bb      	ldr	r3, [r7, #24]
   180ce:	2b0c      	cmp	r3, #12
   180d0:	d9c5      	bls.n	1805e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   180d2:	2316      	movs	r3, #22
   180d4:	18fb      	adds	r3, r7, r3
   180d6:	881b      	ldrh	r3, [r3, #0]
   180d8:	4a0b      	ldr	r2, [pc, #44]	; (18108 <fit_lfn+0x108>)
   180da:	4293      	cmp	r3, r2
   180dc:	d006      	beq.n	180ec <fit_lfn+0xec>
   180de:	69fb      	ldr	r3, [r7, #28]
   180e0:	005b      	lsls	r3, r3, #1
   180e2:	68fa      	ldr	r2, [r7, #12]
   180e4:	18d3      	adds	r3, r2, r3
   180e6:	881b      	ldrh	r3, [r3, #0]
   180e8:	2b00      	cmp	r3, #0
   180ea:	d105      	bne.n	180f8 <fit_lfn+0xf8>
   180ec:	1dfb      	adds	r3, r7, #7
   180ee:	1dfa      	adds	r2, r7, #7
   180f0:	7812      	ldrb	r2, [r2, #0]
   180f2:	2140      	movs	r1, #64	; 0x40
   180f4:	430a      	orrs	r2, r1
   180f6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   180f8:	68bb      	ldr	r3, [r7, #8]
   180fa:	1dfa      	adds	r2, r7, #7
   180fc:	7812      	ldrb	r2, [r2, #0]
   180fe:	701a      	strb	r2, [r3, #0]
}
   18100:	46c0      	nop			; (mov r8, r8)
   18102:	46bd      	mov	sp, r7
   18104:	b008      	add	sp, #32
   18106:	bd80      	pop	{r7, pc}
   18108:	0000ffff 	.word	0x0000ffff
   1810c:	00024978 	.word	0x00024978

00018110 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   18110:	b580      	push	{r7, lr}
   18112:	b08a      	sub	sp, #40	; 0x28
   18114:	af00      	add	r7, sp, #0
   18116:	60f8      	str	r0, [r7, #12]
   18118:	60b9      	str	r1, [r7, #8]
   1811a:	607a      	str	r2, [r7, #4]
   1811c:	001a      	movs	r2, r3
   1811e:	1cbb      	adds	r3, r7, #2
   18120:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   18122:	68b9      	ldr	r1, [r7, #8]
   18124:	68fb      	ldr	r3, [r7, #12]
   18126:	220b      	movs	r2, #11
   18128:	0018      	movs	r0, r3
   1812a:	4b38      	ldr	r3, [pc, #224]	; (1820c <gen_numname+0xfc>)
   1812c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   1812e:	1cbb      	adds	r3, r7, #2
   18130:	881b      	ldrh	r3, [r3, #0]
   18132:	2b05      	cmp	r3, #5
   18134:	d911      	bls.n	1815a <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   18136:	1cbb      	adds	r3, r7, #2
   18138:	881b      	ldrh	r3, [r3, #0]
   1813a:	b29a      	uxth	r2, r3
   1813c:	0852      	lsrs	r2, r2, #1
   1813e:	03db      	lsls	r3, r3, #15
   18140:	4313      	orrs	r3, r2
   18142:	b299      	uxth	r1, r3
   18144:	687b      	ldr	r3, [r7, #4]
   18146:	1c9a      	adds	r2, r3, #2
   18148:	607a      	str	r2, [r7, #4]
   1814a:	881a      	ldrh	r2, [r3, #0]
   1814c:	1cbb      	adds	r3, r7, #2
   1814e:	188a      	adds	r2, r1, r2
   18150:	801a      	strh	r2, [r3, #0]
   18152:	687b      	ldr	r3, [r7, #4]
   18154:	881b      	ldrh	r3, [r3, #0]
   18156:	2b00      	cmp	r3, #0
   18158:	d1ed      	bne.n	18136 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   1815a:	2307      	movs	r3, #7
   1815c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   1815e:	1cbb      	adds	r3, r7, #2
   18160:	881b      	ldrh	r3, [r3, #0]
   18162:	b2db      	uxtb	r3, r3
   18164:	220f      	movs	r2, #15
   18166:	4013      	ands	r3, r2
   18168:	b2da      	uxtb	r2, r3
   1816a:	2327      	movs	r3, #39	; 0x27
   1816c:	18fb      	adds	r3, r7, r3
   1816e:	3230      	adds	r2, #48	; 0x30
   18170:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   18172:	2327      	movs	r3, #39	; 0x27
   18174:	18fb      	adds	r3, r7, r3
   18176:	781b      	ldrb	r3, [r3, #0]
   18178:	2b39      	cmp	r3, #57	; 0x39
   1817a:	d906      	bls.n	1818a <gen_numname+0x7a>
   1817c:	2327      	movs	r3, #39	; 0x27
   1817e:	18fb      	adds	r3, r7, r3
   18180:	2227      	movs	r2, #39	; 0x27
   18182:	18ba      	adds	r2, r7, r2
   18184:	7812      	ldrb	r2, [r2, #0]
   18186:	3207      	adds	r2, #7
   18188:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   1818a:	6a3b      	ldr	r3, [r7, #32]
   1818c:	1e5a      	subs	r2, r3, #1
   1818e:	623a      	str	r2, [r7, #32]
   18190:	2214      	movs	r2, #20
   18192:	18ba      	adds	r2, r7, r2
   18194:	2127      	movs	r1, #39	; 0x27
   18196:	1879      	adds	r1, r7, r1
   18198:	7809      	ldrb	r1, [r1, #0]
   1819a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   1819c:	1cbb      	adds	r3, r7, #2
   1819e:	1cba      	adds	r2, r7, #2
   181a0:	8812      	ldrh	r2, [r2, #0]
   181a2:	0912      	lsrs	r2, r2, #4
   181a4:	801a      	strh	r2, [r3, #0]
	} while (seq);
   181a6:	1cbb      	adds	r3, r7, #2
   181a8:	881b      	ldrh	r3, [r3, #0]
   181aa:	2b00      	cmp	r3, #0
   181ac:	d1d7      	bne.n	1815e <gen_numname+0x4e>
	ns[i] = '~';
   181ae:	2314      	movs	r3, #20
   181b0:	18fa      	adds	r2, r7, r3
   181b2:	6a3b      	ldr	r3, [r7, #32]
   181b4:	18d3      	adds	r3, r2, r3
   181b6:	227e      	movs	r2, #126	; 0x7e
   181b8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   181ba:	2300      	movs	r3, #0
   181bc:	61fb      	str	r3, [r7, #28]
   181be:	e002      	b.n	181c6 <gen_numname+0xb6>
   181c0:	69fb      	ldr	r3, [r7, #28]
   181c2:	3301      	adds	r3, #1
   181c4:	61fb      	str	r3, [r7, #28]
   181c6:	69fa      	ldr	r2, [r7, #28]
   181c8:	6a3b      	ldr	r3, [r7, #32]
   181ca:	429a      	cmp	r2, r3
   181cc:	d205      	bcs.n	181da <gen_numname+0xca>
   181ce:	68fa      	ldr	r2, [r7, #12]
   181d0:	69fb      	ldr	r3, [r7, #28]
   181d2:	18d3      	adds	r3, r2, r3
   181d4:	781b      	ldrb	r3, [r3, #0]
   181d6:	2b20      	cmp	r3, #32
   181d8:	d1f2      	bne.n	181c0 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   181da:	69fb      	ldr	r3, [r7, #28]
   181dc:	1c5a      	adds	r2, r3, #1
   181de:	61fa      	str	r2, [r7, #28]
   181e0:	68fa      	ldr	r2, [r7, #12]
   181e2:	18d2      	adds	r2, r2, r3
   181e4:	6a3b      	ldr	r3, [r7, #32]
   181e6:	2b07      	cmp	r3, #7
   181e8:	d806      	bhi.n	181f8 <gen_numname+0xe8>
   181ea:	6a3b      	ldr	r3, [r7, #32]
   181ec:	1c59      	adds	r1, r3, #1
   181ee:	6239      	str	r1, [r7, #32]
   181f0:	2114      	movs	r1, #20
   181f2:	1879      	adds	r1, r7, r1
   181f4:	5ccb      	ldrb	r3, [r1, r3]
   181f6:	e000      	b.n	181fa <gen_numname+0xea>
   181f8:	2320      	movs	r3, #32
   181fa:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   181fc:	69fb      	ldr	r3, [r7, #28]
   181fe:	2b07      	cmp	r3, #7
   18200:	d9eb      	bls.n	181da <gen_numname+0xca>
}
   18202:	46c0      	nop			; (mov r8, r8)
   18204:	46bd      	mov	sp, r7
   18206:	b00a      	add	sp, #40	; 0x28
   18208:	bd80      	pop	{r7, pc}
   1820a:	46c0      	nop			; (mov r8, r8)
   1820c:	000172b5 	.word	0x000172b5

00018210 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   18210:	b580      	push	{r7, lr}
   18212:	b084      	sub	sp, #16
   18214:	af00      	add	r7, sp, #0
   18216:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   18218:	230f      	movs	r3, #15
   1821a:	18fb      	adds	r3, r7, r3
   1821c:	2200      	movs	r2, #0
   1821e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   18220:	230b      	movs	r3, #11
   18222:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   18224:	230f      	movs	r3, #15
   18226:	18fb      	adds	r3, r7, r3
   18228:	781b      	ldrb	r3, [r3, #0]
   1822a:	b2da      	uxtb	r2, r3
   1822c:	0852      	lsrs	r2, r2, #1
   1822e:	01db      	lsls	r3, r3, #7
   18230:	4313      	orrs	r3, r2
   18232:	b2d9      	uxtb	r1, r3
   18234:	687b      	ldr	r3, [r7, #4]
   18236:	1c5a      	adds	r2, r3, #1
   18238:	607a      	str	r2, [r7, #4]
   1823a:	781a      	ldrb	r2, [r3, #0]
   1823c:	230f      	movs	r3, #15
   1823e:	18fb      	adds	r3, r7, r3
   18240:	188a      	adds	r2, r1, r2
   18242:	701a      	strb	r2, [r3, #0]
   18244:	68bb      	ldr	r3, [r7, #8]
   18246:	3b01      	subs	r3, #1
   18248:	60bb      	str	r3, [r7, #8]
   1824a:	68bb      	ldr	r3, [r7, #8]
   1824c:	2b00      	cmp	r3, #0
   1824e:	d1e9      	bne.n	18224 <sum_sfn+0x14>
	return sum;
   18250:	230f      	movs	r3, #15
   18252:	18fb      	adds	r3, r7, r3
   18254:	781b      	ldrb	r3, [r3, #0]
}
   18256:	0018      	movs	r0, r3
   18258:	46bd      	mov	sp, r7
   1825a:	b004      	add	sp, #16
   1825c:	bd80      	pop	{r7, pc}
	...

00018260 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   18260:	b590      	push	{r4, r7, lr}
   18262:	b087      	sub	sp, #28
   18264:	af00      	add	r7, sp, #0
   18266:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   18268:	2317      	movs	r3, #23
   1826a:	18fc      	adds	r4, r7, r3
   1826c:	687b      	ldr	r3, [r7, #4]
   1826e:	2100      	movs	r1, #0
   18270:	0018      	movs	r0, r3
   18272:	4b74      	ldr	r3, [pc, #464]	; (18444 <dir_find+0x1e4>)
   18274:	4798      	blx	r3
   18276:	0003      	movs	r3, r0
   18278:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   1827a:	2317      	movs	r3, #23
   1827c:	18fb      	adds	r3, r7, r3
   1827e:	781b      	ldrb	r3, [r3, #0]
   18280:	2b00      	cmp	r3, #0
   18282:	d003      	beq.n	1828c <dir_find+0x2c>
   18284:	2317      	movs	r3, #23
   18286:	18fb      	adds	r3, r7, r3
   18288:	781b      	ldrb	r3, [r3, #0]
   1828a:	e0d6      	b.n	1843a <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   1828c:	2314      	movs	r3, #20
   1828e:	18fb      	adds	r3, r7, r3
   18290:	22ff      	movs	r2, #255	; 0xff
   18292:	701a      	strb	r2, [r3, #0]
   18294:	2315      	movs	r3, #21
   18296:	18fb      	adds	r3, r7, r3
   18298:	2214      	movs	r2, #20
   1829a:	18ba      	adds	r2, r7, r2
   1829c:	7812      	ldrb	r2, [r2, #0]
   1829e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   182a0:	687b      	ldr	r3, [r7, #4]
   182a2:	681a      	ldr	r2, [r3, #0]
   182a4:	687b      	ldr	r3, [r7, #4]
   182a6:	691b      	ldr	r3, [r3, #16]
   182a8:	2117      	movs	r1, #23
   182aa:	187c      	adds	r4, r7, r1
   182ac:	0019      	movs	r1, r3
   182ae:	0010      	movs	r0, r2
   182b0:	4b65      	ldr	r3, [pc, #404]	; (18448 <dir_find+0x1e8>)
   182b2:	4798      	blx	r3
   182b4:	0003      	movs	r3, r0
   182b6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   182b8:	2317      	movs	r3, #23
   182ba:	18fb      	adds	r3, r7, r3
   182bc:	781b      	ldrb	r3, [r3, #0]
   182be:	2b00      	cmp	r3, #0
   182c0:	d000      	beq.n	182c4 <dir_find+0x64>
   182c2:	e0b2      	b.n	1842a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   182c4:	687b      	ldr	r3, [r7, #4]
   182c6:	695b      	ldr	r3, [r3, #20]
   182c8:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   182ca:	2316      	movs	r3, #22
   182cc:	18fb      	adds	r3, r7, r3
   182ce:	693a      	ldr	r2, [r7, #16]
   182d0:	7812      	ldrb	r2, [r2, #0]
   182d2:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   182d4:	2316      	movs	r3, #22
   182d6:	18fb      	adds	r3, r7, r3
   182d8:	781b      	ldrb	r3, [r3, #0]
   182da:	2b00      	cmp	r3, #0
   182dc:	d104      	bne.n	182e8 <dir_find+0x88>
   182de:	2317      	movs	r3, #23
   182e0:	18fb      	adds	r3, r7, r3
   182e2:	2204      	movs	r2, #4
   182e4:	701a      	strb	r2, [r3, #0]
   182e6:	e0a5      	b.n	18434 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   182e8:	693b      	ldr	r3, [r7, #16]
   182ea:	330b      	adds	r3, #11
   182ec:	781a      	ldrb	r2, [r3, #0]
   182ee:	230f      	movs	r3, #15
   182f0:	18fb      	adds	r3, r7, r3
   182f2:	213f      	movs	r1, #63	; 0x3f
   182f4:	400a      	ands	r2, r1
   182f6:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   182f8:	2316      	movs	r3, #22
   182fa:	18fb      	adds	r3, r7, r3
   182fc:	781b      	ldrb	r3, [r3, #0]
   182fe:	2be5      	cmp	r3, #229	; 0xe5
   18300:	d00a      	beq.n	18318 <dir_find+0xb8>
   18302:	230f      	movs	r3, #15
   18304:	18fb      	adds	r3, r7, r3
   18306:	781b      	ldrb	r3, [r3, #0]
   18308:	2208      	movs	r2, #8
   1830a:	4013      	ands	r3, r2
   1830c:	d009      	beq.n	18322 <dir_find+0xc2>
   1830e:	230f      	movs	r3, #15
   18310:	18fb      	adds	r3, r7, r3
   18312:	781b      	ldrb	r3, [r3, #0]
   18314:	2b0f      	cmp	r3, #15
   18316:	d004      	beq.n	18322 <dir_find+0xc2>
			ord = 0xFF;
   18318:	2315      	movs	r3, #21
   1831a:	18fb      	adds	r3, r7, r3
   1831c:	22ff      	movs	r2, #255	; 0xff
   1831e:	701a      	strb	r2, [r3, #0]
   18320:	e073      	b.n	1840a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   18322:	230f      	movs	r3, #15
   18324:	18fb      	adds	r3, r7, r3
   18326:	781b      	ldrb	r3, [r3, #0]
   18328:	2b0f      	cmp	r3, #15
   1832a:	d145      	bne.n	183b8 <dir_find+0x158>
				if (dj->lfn) {
   1832c:	687b      	ldr	r3, [r7, #4]
   1832e:	69db      	ldr	r3, [r3, #28]
   18330:	2b00      	cmp	r3, #0
   18332:	d100      	bne.n	18336 <dir_find+0xd6>
   18334:	e069      	b.n	1840a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   18336:	2316      	movs	r3, #22
   18338:	18fb      	adds	r3, r7, r3
   1833a:	781b      	ldrb	r3, [r3, #0]
   1833c:	2240      	movs	r2, #64	; 0x40
   1833e:	4013      	ands	r3, r2
   18340:	d016      	beq.n	18370 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   18342:	2314      	movs	r3, #20
   18344:	18fb      	adds	r3, r7, r3
   18346:	693a      	ldr	r2, [r7, #16]
   18348:	7b52      	ldrb	r2, [r2, #13]
   1834a:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   1834c:	2316      	movs	r3, #22
   1834e:	18fb      	adds	r3, r7, r3
   18350:	2216      	movs	r2, #22
   18352:	18ba      	adds	r2, r7, r2
   18354:	7812      	ldrb	r2, [r2, #0]
   18356:	2140      	movs	r1, #64	; 0x40
   18358:	438a      	bics	r2, r1
   1835a:	701a      	strb	r2, [r3, #0]
   1835c:	2315      	movs	r3, #21
   1835e:	18fb      	adds	r3, r7, r3
   18360:	2216      	movs	r2, #22
   18362:	18ba      	adds	r2, r7, r2
   18364:	7812      	ldrb	r2, [r2, #0]
   18366:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   18368:	687b      	ldr	r3, [r7, #4]
   1836a:	88da      	ldrh	r2, [r3, #6]
   1836c:	687b      	ldr	r3, [r7, #4]
   1836e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   18370:	2316      	movs	r3, #22
   18372:	18fa      	adds	r2, r7, r3
   18374:	2315      	movs	r3, #21
   18376:	18fb      	adds	r3, r7, r3
   18378:	7812      	ldrb	r2, [r2, #0]
   1837a:	781b      	ldrb	r3, [r3, #0]
   1837c:	429a      	cmp	r2, r3
   1837e:	d116      	bne.n	183ae <dir_find+0x14e>
   18380:	693b      	ldr	r3, [r7, #16]
   18382:	330d      	adds	r3, #13
   18384:	781b      	ldrb	r3, [r3, #0]
   18386:	2214      	movs	r2, #20
   18388:	18ba      	adds	r2, r7, r2
   1838a:	7812      	ldrb	r2, [r2, #0]
   1838c:	429a      	cmp	r2, r3
   1838e:	d10e      	bne.n	183ae <dir_find+0x14e>
   18390:	687b      	ldr	r3, [r7, #4]
   18392:	69db      	ldr	r3, [r3, #28]
   18394:	693a      	ldr	r2, [r7, #16]
   18396:	0011      	movs	r1, r2
   18398:	0018      	movs	r0, r3
   1839a:	4b2c      	ldr	r3, [pc, #176]	; (1844c <dir_find+0x1ec>)
   1839c:	4798      	blx	r3
   1839e:	1e03      	subs	r3, r0, #0
   183a0:	d005      	beq.n	183ae <dir_find+0x14e>
   183a2:	2315      	movs	r3, #21
   183a4:	18fb      	adds	r3, r7, r3
   183a6:	781b      	ldrb	r3, [r3, #0]
   183a8:	3b01      	subs	r3, #1
   183aa:	b2da      	uxtb	r2, r3
   183ac:	e000      	b.n	183b0 <dir_find+0x150>
   183ae:	22ff      	movs	r2, #255	; 0xff
   183b0:	2315      	movs	r3, #21
   183b2:	18fb      	adds	r3, r7, r3
   183b4:	701a      	strb	r2, [r3, #0]
   183b6:	e028      	b.n	1840a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   183b8:	2315      	movs	r3, #21
   183ba:	18fb      	adds	r3, r7, r3
   183bc:	781b      	ldrb	r3, [r3, #0]
   183be:	2b00      	cmp	r3, #0
   183c0:	d10a      	bne.n	183d8 <dir_find+0x178>
   183c2:	693b      	ldr	r3, [r7, #16]
   183c4:	0018      	movs	r0, r3
   183c6:	4b22      	ldr	r3, [pc, #136]	; (18450 <dir_find+0x1f0>)
   183c8:	4798      	blx	r3
   183ca:	0003      	movs	r3, r0
   183cc:	001a      	movs	r2, r3
   183ce:	2314      	movs	r3, #20
   183d0:	18fb      	adds	r3, r7, r3
   183d2:	781b      	ldrb	r3, [r3, #0]
   183d4:	4293      	cmp	r3, r2
   183d6:	d02a      	beq.n	1842e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   183d8:	2315      	movs	r3, #21
   183da:	18fb      	adds	r3, r7, r3
   183dc:	22ff      	movs	r2, #255	; 0xff
   183de:	701a      	strb	r2, [r3, #0]
   183e0:	687b      	ldr	r3, [r7, #4]
   183e2:	2201      	movs	r2, #1
   183e4:	4252      	negs	r2, r2
   183e6:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   183e8:	687b      	ldr	r3, [r7, #4]
   183ea:	699b      	ldr	r3, [r3, #24]
   183ec:	330b      	adds	r3, #11
   183ee:	781b      	ldrb	r3, [r3, #0]
   183f0:	001a      	movs	r2, r3
   183f2:	2301      	movs	r3, #1
   183f4:	4013      	ands	r3, r2
   183f6:	d108      	bne.n	1840a <dir_find+0x1aa>
   183f8:	687b      	ldr	r3, [r7, #4]
   183fa:	6999      	ldr	r1, [r3, #24]
   183fc:	693b      	ldr	r3, [r7, #16]
   183fe:	220b      	movs	r2, #11
   18400:	0018      	movs	r0, r3
   18402:	4b14      	ldr	r3, [pc, #80]	; (18454 <dir_find+0x1f4>)
   18404:	4798      	blx	r3
   18406:	1e03      	subs	r3, r0, #0
   18408:	d013      	beq.n	18432 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   1840a:	2317      	movs	r3, #23
   1840c:	18fc      	adds	r4, r7, r3
   1840e:	687b      	ldr	r3, [r7, #4]
   18410:	2100      	movs	r1, #0
   18412:	0018      	movs	r0, r3
   18414:	4b10      	ldr	r3, [pc, #64]	; (18458 <dir_find+0x1f8>)
   18416:	4798      	blx	r3
   18418:	0003      	movs	r3, r0
   1841a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   1841c:	2317      	movs	r3, #23
   1841e:	18fb      	adds	r3, r7, r3
   18420:	781b      	ldrb	r3, [r3, #0]
   18422:	2b00      	cmp	r3, #0
   18424:	d100      	bne.n	18428 <dir_find+0x1c8>
   18426:	e73b      	b.n	182a0 <dir_find+0x40>
   18428:	e004      	b.n	18434 <dir_find+0x1d4>
		if (res != FR_OK) break;
   1842a:	46c0      	nop			; (mov r8, r8)
   1842c:	e002      	b.n	18434 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1842e:	46c0      	nop			; (mov r8, r8)
   18430:	e000      	b.n	18434 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   18432:	46c0      	nop			; (mov r8, r8)

	return res;
   18434:	2317      	movs	r3, #23
   18436:	18fb      	adds	r3, r7, r3
   18438:	781b      	ldrb	r3, [r3, #0]
}
   1843a:	0018      	movs	r0, r3
   1843c:	46bd      	mov	sp, r7
   1843e:	b007      	add	sp, #28
   18440:	bd90      	pop	{r4, r7, pc}
   18442:	46c0      	nop			; (mov r8, r8)
   18444:	00017bdd 	.word	0x00017bdd
   18448:	00017399 	.word	0x00017399
   1844c:	00017efd 	.word	0x00017efd
   18450:	00018211 	.word	0x00018211
   18454:	0001731d 	.word	0x0001731d
   18458:	00017d0d 	.word	0x00017d0d

0001845c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   1845c:	b590      	push	{r4, r7, lr}
   1845e:	b08d      	sub	sp, #52	; 0x34
   18460:	af00      	add	r7, sp, #0
   18462:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   18464:	687b      	ldr	r3, [r7, #4]
   18466:	699b      	ldr	r3, [r3, #24]
   18468:	627b      	str	r3, [r7, #36]	; 0x24
   1846a:	687b      	ldr	r3, [r7, #4]
   1846c:	69db      	ldr	r3, [r3, #28]
   1846e:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   18470:	6a79      	ldr	r1, [r7, #36]	; 0x24
   18472:	230c      	movs	r3, #12
   18474:	18fb      	adds	r3, r7, r3
   18476:	220c      	movs	r2, #12
   18478:	0018      	movs	r0, r3
   1847a:	4bc8      	ldr	r3, [pc, #800]	; (1879c <dir_register+0x340>)
   1847c:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   1847e:	230c      	movs	r3, #12
   18480:	18fb      	adds	r3, r7, r3
   18482:	7adb      	ldrb	r3, [r3, #11]
   18484:	001a      	movs	r2, r3
   18486:	2301      	movs	r3, #1
   18488:	4013      	ands	r3, r2
   1848a:	d048      	beq.n	1851e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   1848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1848e:	330b      	adds	r3, #11
   18490:	2200      	movs	r2, #0
   18492:	701a      	strb	r2, [r3, #0]
   18494:	687b      	ldr	r3, [r7, #4]
   18496:	2200      	movs	r2, #0
   18498:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   1849a:	232c      	movs	r3, #44	; 0x2c
   1849c:	18fb      	adds	r3, r7, r3
   1849e:	2201      	movs	r2, #1
   184a0:	801a      	strh	r2, [r3, #0]
   184a2:	e01c      	b.n	184de <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   184a4:	232c      	movs	r3, #44	; 0x2c
   184a6:	18fb      	adds	r3, r7, r3
   184a8:	881b      	ldrh	r3, [r3, #0]
   184aa:	6a3a      	ldr	r2, [r7, #32]
   184ac:	210c      	movs	r1, #12
   184ae:	1879      	adds	r1, r7, r1
   184b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   184b2:	4cbb      	ldr	r4, [pc, #748]	; (187a0 <dir_register+0x344>)
   184b4:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   184b6:	232f      	movs	r3, #47	; 0x2f
   184b8:	18fc      	adds	r4, r7, r3
   184ba:	687b      	ldr	r3, [r7, #4]
   184bc:	0018      	movs	r0, r3
   184be:	4bb9      	ldr	r3, [pc, #740]	; (187a4 <dir_register+0x348>)
   184c0:	4798      	blx	r3
   184c2:	0003      	movs	r3, r0
   184c4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   184c6:	232f      	movs	r3, #47	; 0x2f
   184c8:	18fb      	adds	r3, r7, r3
   184ca:	781b      	ldrb	r3, [r3, #0]
   184cc:	2b00      	cmp	r3, #0
   184ce:	d10c      	bne.n	184ea <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   184d0:	232c      	movs	r3, #44	; 0x2c
   184d2:	18fb      	adds	r3, r7, r3
   184d4:	881a      	ldrh	r2, [r3, #0]
   184d6:	232c      	movs	r3, #44	; 0x2c
   184d8:	18fb      	adds	r3, r7, r3
   184da:	3201      	adds	r2, #1
   184dc:	801a      	strh	r2, [r3, #0]
   184de:	232c      	movs	r3, #44	; 0x2c
   184e0:	18fb      	adds	r3, r7, r3
   184e2:	881b      	ldrh	r3, [r3, #0]
   184e4:	2b63      	cmp	r3, #99	; 0x63
   184e6:	d9dd      	bls.n	184a4 <dir_register+0x48>
   184e8:	e000      	b.n	184ec <dir_register+0x90>
			if (res != FR_OK) break;
   184ea:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   184ec:	232c      	movs	r3, #44	; 0x2c
   184ee:	18fb      	adds	r3, r7, r3
   184f0:	881b      	ldrh	r3, [r3, #0]
   184f2:	2b64      	cmp	r3, #100	; 0x64
   184f4:	d101      	bne.n	184fa <dir_register+0x9e>
   184f6:	2307      	movs	r3, #7
   184f8:	e14c      	b.n	18794 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   184fa:	232f      	movs	r3, #47	; 0x2f
   184fc:	18fb      	adds	r3, r7, r3
   184fe:	781b      	ldrb	r3, [r3, #0]
   18500:	2b04      	cmp	r3, #4
   18502:	d003      	beq.n	1850c <dir_register+0xb0>
   18504:	232f      	movs	r3, #47	; 0x2f
   18506:	18fb      	adds	r3, r7, r3
   18508:	781b      	ldrb	r3, [r3, #0]
   1850a:	e143      	b.n	18794 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   1850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1850e:	330b      	adds	r3, #11
   18510:	220c      	movs	r2, #12
   18512:	18ba      	adds	r2, r7, r2
   18514:	7ad2      	ldrb	r2, [r2, #11]
   18516:	701a      	strb	r2, [r3, #0]
   18518:	687b      	ldr	r3, [r7, #4]
   1851a:	6a3a      	ldr	r2, [r7, #32]
   1851c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   1851e:	230c      	movs	r3, #12
   18520:	18fb      	adds	r3, r7, r3
   18522:	7adb      	ldrb	r3, [r3, #11]
   18524:	001a      	movs	r2, r3
   18526:	2302      	movs	r3, #2
   18528:	4013      	ands	r3, r2
   1852a:	d023      	beq.n	18574 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   1852c:	232a      	movs	r3, #42	; 0x2a
   1852e:	18fb      	adds	r3, r7, r3
   18530:	2200      	movs	r2, #0
   18532:	801a      	strh	r2, [r3, #0]
   18534:	e006      	b.n	18544 <dir_register+0xe8>
   18536:	232a      	movs	r3, #42	; 0x2a
   18538:	18fb      	adds	r3, r7, r3
   1853a:	881a      	ldrh	r2, [r3, #0]
   1853c:	232a      	movs	r3, #42	; 0x2a
   1853e:	18fb      	adds	r3, r7, r3
   18540:	3201      	adds	r2, #1
   18542:	801a      	strh	r2, [r3, #0]
   18544:	232a      	movs	r3, #42	; 0x2a
   18546:	18fb      	adds	r3, r7, r3
   18548:	881b      	ldrh	r3, [r3, #0]
   1854a:	005b      	lsls	r3, r3, #1
   1854c:	6a3a      	ldr	r2, [r7, #32]
   1854e:	18d3      	adds	r3, r2, r3
   18550:	881b      	ldrh	r3, [r3, #0]
   18552:	2b00      	cmp	r3, #0
   18554:	d1ef      	bne.n	18536 <dir_register+0xda>
		ne = (ne + 25) / 13;
   18556:	232a      	movs	r3, #42	; 0x2a
   18558:	18fb      	adds	r3, r7, r3
   1855a:	881b      	ldrh	r3, [r3, #0]
   1855c:	3319      	adds	r3, #25
   1855e:	001a      	movs	r2, r3
   18560:	4b91      	ldr	r3, [pc, #580]	; (187a8 <dir_register+0x34c>)
   18562:	210d      	movs	r1, #13
   18564:	0010      	movs	r0, r2
   18566:	4798      	blx	r3
   18568:	0003      	movs	r3, r0
   1856a:	001a      	movs	r2, r3
   1856c:	232a      	movs	r3, #42	; 0x2a
   1856e:	18fb      	adds	r3, r7, r3
   18570:	801a      	strh	r2, [r3, #0]
   18572:	e003      	b.n	1857c <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   18574:	232a      	movs	r3, #42	; 0x2a
   18576:	18fb      	adds	r3, r7, r3
   18578:	2201      	movs	r2, #1
   1857a:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   1857c:	232f      	movs	r3, #47	; 0x2f
   1857e:	18fc      	adds	r4, r7, r3
   18580:	687b      	ldr	r3, [r7, #4]
   18582:	2100      	movs	r1, #0
   18584:	0018      	movs	r0, r3
   18586:	4b89      	ldr	r3, [pc, #548]	; (187ac <dir_register+0x350>)
   18588:	4798      	blx	r3
   1858a:	0003      	movs	r3, r0
   1858c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   1858e:	232f      	movs	r3, #47	; 0x2f
   18590:	18fb      	adds	r3, r7, r3
   18592:	781b      	ldrb	r3, [r3, #0]
   18594:	2b00      	cmp	r3, #0
   18596:	d003      	beq.n	185a0 <dir_register+0x144>
   18598:	232f      	movs	r3, #47	; 0x2f
   1859a:	18fb      	adds	r3, r7, r3
   1859c:	781b      	ldrb	r3, [r3, #0]
   1859e:	e0f9      	b.n	18794 <dir_register+0x338>
	n = is = 0;
   185a0:	2328      	movs	r3, #40	; 0x28
   185a2:	18fb      	adds	r3, r7, r3
   185a4:	2200      	movs	r2, #0
   185a6:	801a      	strh	r2, [r3, #0]
   185a8:	232c      	movs	r3, #44	; 0x2c
   185aa:	18fb      	adds	r3, r7, r3
   185ac:	2228      	movs	r2, #40	; 0x28
   185ae:	18ba      	adds	r2, r7, r2
   185b0:	8812      	ldrh	r2, [r2, #0]
   185b2:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   185b4:	687b      	ldr	r3, [r7, #4]
   185b6:	681a      	ldr	r2, [r3, #0]
   185b8:	687b      	ldr	r3, [r7, #4]
   185ba:	691b      	ldr	r3, [r3, #16]
   185bc:	212f      	movs	r1, #47	; 0x2f
   185be:	187c      	adds	r4, r7, r1
   185c0:	0019      	movs	r1, r3
   185c2:	0010      	movs	r0, r2
   185c4:	4b7a      	ldr	r3, [pc, #488]	; (187b0 <dir_register+0x354>)
   185c6:	4798      	blx	r3
   185c8:	0003      	movs	r3, r0
   185ca:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   185cc:	232f      	movs	r3, #47	; 0x2f
   185ce:	18fb      	adds	r3, r7, r3
   185d0:	781b      	ldrb	r3, [r3, #0]
   185d2:	2b00      	cmp	r3, #0
   185d4:	d13c      	bne.n	18650 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   185d6:	687b      	ldr	r3, [r7, #4]
   185d8:	695a      	ldr	r2, [r3, #20]
   185da:	231f      	movs	r3, #31
   185dc:	18fb      	adds	r3, r7, r3
   185de:	7812      	ldrb	r2, [r2, #0]
   185e0:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   185e2:	231f      	movs	r3, #31
   185e4:	18fb      	adds	r3, r7, r3
   185e6:	781b      	ldrb	r3, [r3, #0]
   185e8:	2be5      	cmp	r3, #229	; 0xe5
   185ea:	d004      	beq.n	185f6 <dir_register+0x19a>
   185ec:	231f      	movs	r3, #31
   185ee:	18fb      	adds	r3, r7, r3
   185f0:	781b      	ldrb	r3, [r3, #0]
   185f2:	2b00      	cmp	r3, #0
   185f4:	d119      	bne.n	1862a <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   185f6:	232c      	movs	r3, #44	; 0x2c
   185f8:	18fb      	adds	r3, r7, r3
   185fa:	881b      	ldrh	r3, [r3, #0]
   185fc:	2b00      	cmp	r3, #0
   185fe:	d104      	bne.n	1860a <dir_register+0x1ae>
   18600:	2328      	movs	r3, #40	; 0x28
   18602:	18fb      	adds	r3, r7, r3
   18604:	687a      	ldr	r2, [r7, #4]
   18606:	88d2      	ldrh	r2, [r2, #6]
   18608:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   1860a:	232c      	movs	r3, #44	; 0x2c
   1860c:	18fb      	adds	r3, r7, r3
   1860e:	222c      	movs	r2, #44	; 0x2c
   18610:	18ba      	adds	r2, r7, r2
   18612:	8812      	ldrh	r2, [r2, #0]
   18614:	3201      	adds	r2, #1
   18616:	801a      	strh	r2, [r3, #0]
   18618:	232c      	movs	r3, #44	; 0x2c
   1861a:	18fa      	adds	r2, r7, r3
   1861c:	232a      	movs	r3, #42	; 0x2a
   1861e:	18fb      	adds	r3, r7, r3
   18620:	8812      	ldrh	r2, [r2, #0]
   18622:	881b      	ldrh	r3, [r3, #0]
   18624:	429a      	cmp	r2, r3
   18626:	d104      	bne.n	18632 <dir_register+0x1d6>
   18628:	e013      	b.n	18652 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   1862a:	232c      	movs	r3, #44	; 0x2c
   1862c:	18fb      	adds	r3, r7, r3
   1862e:	2200      	movs	r2, #0
   18630:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   18632:	232f      	movs	r3, #47	; 0x2f
   18634:	18fc      	adds	r4, r7, r3
   18636:	687b      	ldr	r3, [r7, #4]
   18638:	2101      	movs	r1, #1
   1863a:	0018      	movs	r0, r3
   1863c:	4b5d      	ldr	r3, [pc, #372]	; (187b4 <dir_register+0x358>)
   1863e:	4798      	blx	r3
   18640:	0003      	movs	r3, r0
   18642:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   18644:	232f      	movs	r3, #47	; 0x2f
   18646:	18fb      	adds	r3, r7, r3
   18648:	781b      	ldrb	r3, [r3, #0]
   1864a:	2b00      	cmp	r3, #0
   1864c:	d0b2      	beq.n	185b4 <dir_register+0x158>
   1864e:	e000      	b.n	18652 <dir_register+0x1f6>
		if (res != FR_OK) break;
   18650:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   18652:	232f      	movs	r3, #47	; 0x2f
   18654:	18fb      	adds	r3, r7, r3
   18656:	781b      	ldrb	r3, [r3, #0]
   18658:	2b00      	cmp	r3, #0
   1865a:	d163      	bne.n	18724 <dir_register+0x2c8>
   1865c:	232a      	movs	r3, #42	; 0x2a
   1865e:	18fb      	adds	r3, r7, r3
   18660:	881b      	ldrh	r3, [r3, #0]
   18662:	2b01      	cmp	r3, #1
   18664:	d95e      	bls.n	18724 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   18666:	232f      	movs	r3, #47	; 0x2f
   18668:	18fc      	adds	r4, r7, r3
   1866a:	2328      	movs	r3, #40	; 0x28
   1866c:	18fb      	adds	r3, r7, r3
   1866e:	881a      	ldrh	r2, [r3, #0]
   18670:	687b      	ldr	r3, [r7, #4]
   18672:	0011      	movs	r1, r2
   18674:	0018      	movs	r0, r3
   18676:	4b4d      	ldr	r3, [pc, #308]	; (187ac <dir_register+0x350>)
   18678:	4798      	blx	r3
   1867a:	0003      	movs	r3, r0
   1867c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   1867e:	232f      	movs	r3, #47	; 0x2f
   18680:	18fb      	adds	r3, r7, r3
   18682:	781b      	ldrb	r3, [r3, #0]
   18684:	2b00      	cmp	r3, #0
   18686:	d14d      	bne.n	18724 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   18688:	687b      	ldr	r3, [r7, #4]
   1868a:	699b      	ldr	r3, [r3, #24]
   1868c:	221e      	movs	r2, #30
   1868e:	18bc      	adds	r4, r7, r2
   18690:	0018      	movs	r0, r3
   18692:	4b49      	ldr	r3, [pc, #292]	; (187b8 <dir_register+0x35c>)
   18694:	4798      	blx	r3
   18696:	0003      	movs	r3, r0
   18698:	7023      	strb	r3, [r4, #0]
			ne--;
   1869a:	232a      	movs	r3, #42	; 0x2a
   1869c:	18fb      	adds	r3, r7, r3
   1869e:	881a      	ldrh	r2, [r3, #0]
   186a0:	232a      	movs	r3, #42	; 0x2a
   186a2:	18fb      	adds	r3, r7, r3
   186a4:	3a01      	subs	r2, #1
   186a6:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   186a8:	687b      	ldr	r3, [r7, #4]
   186aa:	681a      	ldr	r2, [r3, #0]
   186ac:	687b      	ldr	r3, [r7, #4]
   186ae:	691b      	ldr	r3, [r3, #16]
   186b0:	212f      	movs	r1, #47	; 0x2f
   186b2:	187c      	adds	r4, r7, r1
   186b4:	0019      	movs	r1, r3
   186b6:	0010      	movs	r0, r2
   186b8:	4b3d      	ldr	r3, [pc, #244]	; (187b0 <dir_register+0x354>)
   186ba:	4798      	blx	r3
   186bc:	0003      	movs	r3, r0
   186be:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   186c0:	232f      	movs	r3, #47	; 0x2f
   186c2:	18fb      	adds	r3, r7, r3
   186c4:	781b      	ldrb	r3, [r3, #0]
   186c6:	2b00      	cmp	r3, #0
   186c8:	d12b      	bne.n	18722 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   186ca:	687b      	ldr	r3, [r7, #4]
   186cc:	69d8      	ldr	r0, [r3, #28]
   186ce:	687b      	ldr	r3, [r7, #4]
   186d0:	6959      	ldr	r1, [r3, #20]
   186d2:	232a      	movs	r3, #42	; 0x2a
   186d4:	18fb      	adds	r3, r7, r3
   186d6:	881b      	ldrh	r3, [r3, #0]
   186d8:	b2da      	uxtb	r2, r3
   186da:	231e      	movs	r3, #30
   186dc:	18fb      	adds	r3, r7, r3
   186de:	781b      	ldrb	r3, [r3, #0]
   186e0:	4c36      	ldr	r4, [pc, #216]	; (187bc <dir_register+0x360>)
   186e2:	47a0      	blx	r4
				dj->fs->wflag = 1;
   186e4:	687b      	ldr	r3, [r7, #4]
   186e6:	681b      	ldr	r3, [r3, #0]
   186e8:	2201      	movs	r2, #1
   186ea:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   186ec:	232f      	movs	r3, #47	; 0x2f
   186ee:	18fc      	adds	r4, r7, r3
   186f0:	687b      	ldr	r3, [r7, #4]
   186f2:	2100      	movs	r1, #0
   186f4:	0018      	movs	r0, r3
   186f6:	4b2f      	ldr	r3, [pc, #188]	; (187b4 <dir_register+0x358>)
   186f8:	4798      	blx	r3
   186fa:	0003      	movs	r3, r0
   186fc:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   186fe:	232f      	movs	r3, #47	; 0x2f
   18700:	18fb      	adds	r3, r7, r3
   18702:	781b      	ldrb	r3, [r3, #0]
   18704:	2b00      	cmp	r3, #0
   18706:	d10d      	bne.n	18724 <dir_register+0x2c8>
   18708:	232a      	movs	r3, #42	; 0x2a
   1870a:	18fb      	adds	r3, r7, r3
   1870c:	222a      	movs	r2, #42	; 0x2a
   1870e:	18ba      	adds	r2, r7, r2
   18710:	8812      	ldrh	r2, [r2, #0]
   18712:	3a01      	subs	r2, #1
   18714:	801a      	strh	r2, [r3, #0]
   18716:	232a      	movs	r3, #42	; 0x2a
   18718:	18fb      	adds	r3, r7, r3
   1871a:	881b      	ldrh	r3, [r3, #0]
   1871c:	2b00      	cmp	r3, #0
   1871e:	d1c3      	bne.n	186a8 <dir_register+0x24c>
   18720:	e000      	b.n	18724 <dir_register+0x2c8>
				if (res != FR_OK) break;
   18722:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   18724:	232f      	movs	r3, #47	; 0x2f
   18726:	18fb      	adds	r3, r7, r3
   18728:	781b      	ldrb	r3, [r3, #0]
   1872a:	2b00      	cmp	r3, #0
   1872c:	d12f      	bne.n	1878e <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   1872e:	687b      	ldr	r3, [r7, #4]
   18730:	681a      	ldr	r2, [r3, #0]
   18732:	687b      	ldr	r3, [r7, #4]
   18734:	691b      	ldr	r3, [r3, #16]
   18736:	212f      	movs	r1, #47	; 0x2f
   18738:	187c      	adds	r4, r7, r1
   1873a:	0019      	movs	r1, r3
   1873c:	0010      	movs	r0, r2
   1873e:	4b1c      	ldr	r3, [pc, #112]	; (187b0 <dir_register+0x354>)
   18740:	4798      	blx	r3
   18742:	0003      	movs	r3, r0
   18744:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   18746:	232f      	movs	r3, #47	; 0x2f
   18748:	18fb      	adds	r3, r7, r3
   1874a:	781b      	ldrb	r3, [r3, #0]
   1874c:	2b00      	cmp	r3, #0
   1874e:	d11e      	bne.n	1878e <dir_register+0x332>
			dir = dj->dir;
   18750:	687b      	ldr	r3, [r7, #4]
   18752:	695b      	ldr	r3, [r3, #20]
   18754:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   18756:	69bb      	ldr	r3, [r7, #24]
   18758:	2220      	movs	r2, #32
   1875a:	2100      	movs	r1, #0
   1875c:	0018      	movs	r0, r3
   1875e:	4b18      	ldr	r3, [pc, #96]	; (187c0 <dir_register+0x364>)
   18760:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   18762:	687b      	ldr	r3, [r7, #4]
   18764:	6999      	ldr	r1, [r3, #24]
   18766:	69bb      	ldr	r3, [r7, #24]
   18768:	220b      	movs	r2, #11
   1876a:	0018      	movs	r0, r3
   1876c:	4b0b      	ldr	r3, [pc, #44]	; (1879c <dir_register+0x340>)
   1876e:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   18770:	69bb      	ldr	r3, [r7, #24]
   18772:	330c      	adds	r3, #12
   18774:	001a      	movs	r2, r3
   18776:	687b      	ldr	r3, [r7, #4]
   18778:	699b      	ldr	r3, [r3, #24]
   1877a:	330b      	adds	r3, #11
   1877c:	781b      	ldrb	r3, [r3, #0]
   1877e:	2118      	movs	r1, #24
   18780:	400b      	ands	r3, r1
   18782:	b2db      	uxtb	r3, r3
   18784:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   18786:	687b      	ldr	r3, [r7, #4]
   18788:	681b      	ldr	r3, [r3, #0]
   1878a:	2201      	movs	r2, #1
   1878c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   1878e:	232f      	movs	r3, #47	; 0x2f
   18790:	18fb      	adds	r3, r7, r3
   18792:	781b      	ldrb	r3, [r3, #0]
}
   18794:	0018      	movs	r0, r3
   18796:	46bd      	mov	sp, r7
   18798:	b00d      	add	sp, #52	; 0x34
   1879a:	bd90      	pop	{r4, r7, pc}
   1879c:	000172b5 	.word	0x000172b5
   187a0:	00018111 	.word	0x00018111
   187a4:	00018261 	.word	0x00018261
   187a8:	0001e57d 	.word	0x0001e57d
   187ac:	00017bdd 	.word	0x00017bdd
   187b0:	00017399 	.word	0x00017399
   187b4:	00017d0d 	.word	0x00017d0d
   187b8:	00018211 	.word	0x00018211
   187bc:	00018001 	.word	0x00018001
   187c0:	000172ed 	.word	0x000172ed

000187c4 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   187c4:	b590      	push	{r4, r7, lr}
   187c6:	b08b      	sub	sp, #44	; 0x2c
   187c8:	af00      	add	r7, sp, #0
   187ca:	6078      	str	r0, [r7, #4]
   187cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   187ce:	683b      	ldr	r3, [r7, #0]
   187d0:	681b      	ldr	r3, [r3, #0]
   187d2:	613b      	str	r3, [r7, #16]
   187d4:	e002      	b.n	187dc <create_name+0x18>
   187d6:	693b      	ldr	r3, [r7, #16]
   187d8:	3301      	adds	r3, #1
   187da:	613b      	str	r3, [r7, #16]
   187dc:	693b      	ldr	r3, [r7, #16]
   187de:	781b      	ldrb	r3, [r3, #0]
   187e0:	2b2f      	cmp	r3, #47	; 0x2f
   187e2:	d0f8      	beq.n	187d6 <create_name+0x12>
   187e4:	693b      	ldr	r3, [r7, #16]
   187e6:	781b      	ldrb	r3, [r3, #0]
   187e8:	2b5c      	cmp	r3, #92	; 0x5c
   187ea:	d0f4      	beq.n	187d6 <create_name+0x12>
	lfn = dj->lfn;
   187ec:	687b      	ldr	r3, [r7, #4]
   187ee:	69db      	ldr	r3, [r3, #28]
   187f0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   187f2:	2300      	movs	r3, #0
   187f4:	617b      	str	r3, [r7, #20]
   187f6:	697b      	ldr	r3, [r7, #20]
   187f8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   187fa:	69bb      	ldr	r3, [r7, #24]
   187fc:	1c5a      	adds	r2, r3, #1
   187fe:	61ba      	str	r2, [r7, #24]
   18800:	693a      	ldr	r2, [r7, #16]
   18802:	18d3      	adds	r3, r2, r3
   18804:	781a      	ldrb	r2, [r3, #0]
   18806:	2324      	movs	r3, #36	; 0x24
   18808:	18fb      	adds	r3, r7, r3
   1880a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   1880c:	2324      	movs	r3, #36	; 0x24
   1880e:	18fb      	adds	r3, r7, r3
   18810:	881b      	ldrh	r3, [r3, #0]
   18812:	2b1f      	cmp	r3, #31
   18814:	d944      	bls.n	188a0 <create_name+0xdc>
   18816:	2324      	movs	r3, #36	; 0x24
   18818:	18fb      	adds	r3, r7, r3
   1881a:	881b      	ldrh	r3, [r3, #0]
   1881c:	2b2f      	cmp	r3, #47	; 0x2f
   1881e:	d03f      	beq.n	188a0 <create_name+0xdc>
   18820:	2324      	movs	r3, #36	; 0x24
   18822:	18fb      	adds	r3, r7, r3
   18824:	881b      	ldrh	r3, [r3, #0]
   18826:	2b5c      	cmp	r3, #92	; 0x5c
   18828:	d03a      	beq.n	188a0 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   1882a:	697b      	ldr	r3, [r7, #20]
   1882c:	2bfe      	cmp	r3, #254	; 0xfe
   1882e:	d901      	bls.n	18834 <create_name+0x70>
			return FR_INVALID_NAME;
   18830:	2306      	movs	r3, #6
   18832:	e1e7      	b.n	18c04 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   18834:	2324      	movs	r3, #36	; 0x24
   18836:	18fb      	adds	r3, r7, r3
   18838:	2224      	movs	r2, #36	; 0x24
   1883a:	18ba      	adds	r2, r7, r2
   1883c:	8812      	ldrh	r2, [r2, #0]
   1883e:	21ff      	movs	r1, #255	; 0xff
   18840:	400a      	ands	r2, r1
   18842:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   18844:	2324      	movs	r3, #36	; 0x24
   18846:	18fc      	adds	r4, r7, r3
   18848:	2324      	movs	r3, #36	; 0x24
   1884a:	18fb      	adds	r3, r7, r3
   1884c:	881b      	ldrh	r3, [r3, #0]
   1884e:	2101      	movs	r1, #1
   18850:	0018      	movs	r0, r3
   18852:	4bba      	ldr	r3, [pc, #744]	; (18b3c <create_name+0x378>)
   18854:	4798      	blx	r3
   18856:	0003      	movs	r3, r0
   18858:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1885a:	2324      	movs	r3, #36	; 0x24
   1885c:	18fb      	adds	r3, r7, r3
   1885e:	881b      	ldrh	r3, [r3, #0]
   18860:	2b00      	cmp	r3, #0
   18862:	d101      	bne.n	18868 <create_name+0xa4>
   18864:	2306      	movs	r3, #6
   18866:	e1cd      	b.n	18c04 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   18868:	2324      	movs	r3, #36	; 0x24
   1886a:	18fb      	adds	r3, r7, r3
   1886c:	881b      	ldrh	r3, [r3, #0]
   1886e:	2b7f      	cmp	r3, #127	; 0x7f
   18870:	d80b      	bhi.n	1888a <create_name+0xc6>
   18872:	2324      	movs	r3, #36	; 0x24
   18874:	18fb      	adds	r3, r7, r3
   18876:	881a      	ldrh	r2, [r3, #0]
   18878:	4bb1      	ldr	r3, [pc, #708]	; (18b40 <create_name+0x37c>)
   1887a:	0011      	movs	r1, r2
   1887c:	0018      	movs	r0, r3
   1887e:	4bb1      	ldr	r3, [pc, #708]	; (18b44 <create_name+0x380>)
   18880:	4798      	blx	r3
   18882:	1e03      	subs	r3, r0, #0
   18884:	d001      	beq.n	1888a <create_name+0xc6>
			return FR_INVALID_NAME;
   18886:	2306      	movs	r3, #6
   18888:	e1bc      	b.n	18c04 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   1888a:	697b      	ldr	r3, [r7, #20]
   1888c:	1c5a      	adds	r2, r3, #1
   1888e:	617a      	str	r2, [r7, #20]
   18890:	005b      	lsls	r3, r3, #1
   18892:	68fa      	ldr	r2, [r7, #12]
   18894:	18d3      	adds	r3, r2, r3
   18896:	2224      	movs	r2, #36	; 0x24
   18898:	18ba      	adds	r2, r7, r2
   1889a:	8812      	ldrh	r2, [r2, #0]
   1889c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   1889e:	e7ac      	b.n	187fa <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   188a0:	693a      	ldr	r2, [r7, #16]
   188a2:	69bb      	ldr	r3, [r7, #24]
   188a4:	18d2      	adds	r2, r2, r3
   188a6:	683b      	ldr	r3, [r7, #0]
   188a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   188aa:	2324      	movs	r3, #36	; 0x24
   188ac:	18fb      	adds	r3, r7, r3
   188ae:	881b      	ldrh	r3, [r3, #0]
   188b0:	2b1f      	cmp	r3, #31
   188b2:	d801      	bhi.n	188b8 <create_name+0xf4>
   188b4:	2204      	movs	r2, #4
   188b6:	e000      	b.n	188ba <create_name+0xf6>
   188b8:	2200      	movs	r2, #0
   188ba:	2326      	movs	r3, #38	; 0x26
   188bc:	18fb      	adds	r3, r7, r3
   188be:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   188c0:	e017      	b.n	188f2 <create_name+0x12e>
		w = lfn[di-1];
   188c2:	697b      	ldr	r3, [r7, #20]
   188c4:	4aa0      	ldr	r2, [pc, #640]	; (18b48 <create_name+0x384>)
   188c6:	4694      	mov	ip, r2
   188c8:	4463      	add	r3, ip
   188ca:	005b      	lsls	r3, r3, #1
   188cc:	68fa      	ldr	r2, [r7, #12]
   188ce:	18d2      	adds	r2, r2, r3
   188d0:	2324      	movs	r3, #36	; 0x24
   188d2:	18fb      	adds	r3, r7, r3
   188d4:	8812      	ldrh	r2, [r2, #0]
   188d6:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   188d8:	2324      	movs	r3, #36	; 0x24
   188da:	18fb      	adds	r3, r7, r3
   188dc:	881b      	ldrh	r3, [r3, #0]
   188de:	2b20      	cmp	r3, #32
   188e0:	d004      	beq.n	188ec <create_name+0x128>
   188e2:	2324      	movs	r3, #36	; 0x24
   188e4:	18fb      	adds	r3, r7, r3
   188e6:	881b      	ldrh	r3, [r3, #0]
   188e8:	2b2e      	cmp	r3, #46	; 0x2e
   188ea:	d106      	bne.n	188fa <create_name+0x136>
		di--;
   188ec:	697b      	ldr	r3, [r7, #20]
   188ee:	3b01      	subs	r3, #1
   188f0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   188f2:	697b      	ldr	r3, [r7, #20]
   188f4:	2b00      	cmp	r3, #0
   188f6:	d1e4      	bne.n	188c2 <create_name+0xfe>
   188f8:	e000      	b.n	188fc <create_name+0x138>
		if (w != ' ' && w != '.') break;
   188fa:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   188fc:	697b      	ldr	r3, [r7, #20]
   188fe:	2b00      	cmp	r3, #0
   18900:	d101      	bne.n	18906 <create_name+0x142>
   18902:	2306      	movs	r3, #6
   18904:	e17e      	b.n	18c04 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   18906:	697b      	ldr	r3, [r7, #20]
   18908:	005b      	lsls	r3, r3, #1
   1890a:	68fa      	ldr	r2, [r7, #12]
   1890c:	18d3      	adds	r3, r2, r3
   1890e:	2200      	movs	r2, #0
   18910:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   18912:	687b      	ldr	r3, [r7, #4]
   18914:	699b      	ldr	r3, [r3, #24]
   18916:	220b      	movs	r2, #11
   18918:	2120      	movs	r1, #32
   1891a:	0018      	movs	r0, r3
   1891c:	4b8b      	ldr	r3, [pc, #556]	; (18b4c <create_name+0x388>)
   1891e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   18920:	2300      	movs	r3, #0
   18922:	61bb      	str	r3, [r7, #24]
   18924:	e002      	b.n	1892c <create_name+0x168>
   18926:	69bb      	ldr	r3, [r7, #24]
   18928:	3301      	adds	r3, #1
   1892a:	61bb      	str	r3, [r7, #24]
   1892c:	69bb      	ldr	r3, [r7, #24]
   1892e:	005b      	lsls	r3, r3, #1
   18930:	68fa      	ldr	r2, [r7, #12]
   18932:	18d3      	adds	r3, r2, r3
   18934:	881b      	ldrh	r3, [r3, #0]
   18936:	2b20      	cmp	r3, #32
   18938:	d0f5      	beq.n	18926 <create_name+0x162>
   1893a:	69bb      	ldr	r3, [r7, #24]
   1893c:	005b      	lsls	r3, r3, #1
   1893e:	68fa      	ldr	r2, [r7, #12]
   18940:	18d3      	adds	r3, r2, r3
   18942:	881b      	ldrh	r3, [r3, #0]
   18944:	2b2e      	cmp	r3, #46	; 0x2e
   18946:	d0ee      	beq.n	18926 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   18948:	69bb      	ldr	r3, [r7, #24]
   1894a:	2b00      	cmp	r3, #0
   1894c:	d00b      	beq.n	18966 <create_name+0x1a2>
   1894e:	2326      	movs	r3, #38	; 0x26
   18950:	18fb      	adds	r3, r7, r3
   18952:	2226      	movs	r2, #38	; 0x26
   18954:	18ba      	adds	r2, r7, r2
   18956:	7812      	ldrb	r2, [r2, #0]
   18958:	2103      	movs	r1, #3
   1895a:	430a      	orrs	r2, r1
   1895c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   1895e:	e002      	b.n	18966 <create_name+0x1a2>
   18960:	697b      	ldr	r3, [r7, #20]
   18962:	3b01      	subs	r3, #1
   18964:	617b      	str	r3, [r7, #20]
   18966:	697b      	ldr	r3, [r7, #20]
   18968:	2b00      	cmp	r3, #0
   1896a:	d009      	beq.n	18980 <create_name+0x1bc>
   1896c:	697b      	ldr	r3, [r7, #20]
   1896e:	4a76      	ldr	r2, [pc, #472]	; (18b48 <create_name+0x384>)
   18970:	4694      	mov	ip, r2
   18972:	4463      	add	r3, ip
   18974:	005b      	lsls	r3, r3, #1
   18976:	68fa      	ldr	r2, [r7, #12]
   18978:	18d3      	adds	r3, r2, r3
   1897a:	881b      	ldrh	r3, [r3, #0]
   1897c:	2b2e      	cmp	r3, #46	; 0x2e
   1897e:	d1ef      	bne.n	18960 <create_name+0x19c>

	b = i = 0; ni = 8;
   18980:	2300      	movs	r3, #0
   18982:	623b      	str	r3, [r7, #32]
   18984:	2327      	movs	r3, #39	; 0x27
   18986:	18fb      	adds	r3, r7, r3
   18988:	2200      	movs	r2, #0
   1898a:	701a      	strb	r2, [r3, #0]
   1898c:	2308      	movs	r3, #8
   1898e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   18990:	69bb      	ldr	r3, [r7, #24]
   18992:	1c5a      	adds	r2, r3, #1
   18994:	61ba      	str	r2, [r7, #24]
   18996:	005b      	lsls	r3, r3, #1
   18998:	68fa      	ldr	r2, [r7, #12]
   1899a:	18d2      	adds	r2, r2, r3
   1899c:	2324      	movs	r3, #36	; 0x24
   1899e:	18fb      	adds	r3, r7, r3
   189a0:	8812      	ldrh	r2, [r2, #0]
   189a2:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   189a4:	2324      	movs	r3, #36	; 0x24
   189a6:	18fb      	adds	r3, r7, r3
   189a8:	881b      	ldrh	r3, [r3, #0]
   189aa:	2b00      	cmp	r3, #0
   189ac:	d100      	bne.n	189b0 <create_name+0x1ec>
   189ae:	e0c3      	b.n	18b38 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   189b0:	2324      	movs	r3, #36	; 0x24
   189b2:	18fb      	adds	r3, r7, r3
   189b4:	881b      	ldrh	r3, [r3, #0]
   189b6:	2b20      	cmp	r3, #32
   189b8:	d008      	beq.n	189cc <create_name+0x208>
   189ba:	2324      	movs	r3, #36	; 0x24
   189bc:	18fb      	adds	r3, r7, r3
   189be:	881b      	ldrh	r3, [r3, #0]
   189c0:	2b2e      	cmp	r3, #46	; 0x2e
   189c2:	d10c      	bne.n	189de <create_name+0x21a>
   189c4:	69ba      	ldr	r2, [r7, #24]
   189c6:	697b      	ldr	r3, [r7, #20]
   189c8:	429a      	cmp	r2, r3
   189ca:	d008      	beq.n	189de <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   189cc:	2326      	movs	r3, #38	; 0x26
   189ce:	18fb      	adds	r3, r7, r3
   189d0:	2226      	movs	r2, #38	; 0x26
   189d2:	18ba      	adds	r2, r7, r2
   189d4:	7812      	ldrb	r2, [r2, #0]
   189d6:	2103      	movs	r1, #3
   189d8:	430a      	orrs	r2, r1
   189da:	701a      	strb	r2, [r3, #0]
   189dc:	e0ab      	b.n	18b36 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   189de:	6a3a      	ldr	r2, [r7, #32]
   189e0:	69fb      	ldr	r3, [r7, #28]
   189e2:	429a      	cmp	r2, r3
   189e4:	d203      	bcs.n	189ee <create_name+0x22a>
   189e6:	69ba      	ldr	r2, [r7, #24]
   189e8:	697b      	ldr	r3, [r7, #20]
   189ea:	429a      	cmp	r2, r3
   189ec:	d12a      	bne.n	18a44 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   189ee:	69fb      	ldr	r3, [r7, #28]
   189f0:	2b0b      	cmp	r3, #11
   189f2:	d108      	bne.n	18a06 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   189f4:	2326      	movs	r3, #38	; 0x26
   189f6:	18fb      	adds	r3, r7, r3
   189f8:	2226      	movs	r2, #38	; 0x26
   189fa:	18ba      	adds	r2, r7, r2
   189fc:	7812      	ldrb	r2, [r2, #0]
   189fe:	2103      	movs	r1, #3
   18a00:	430a      	orrs	r2, r1
   18a02:	701a      	strb	r2, [r3, #0]
   18a04:	e0a9      	b.n	18b5a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   18a06:	69ba      	ldr	r2, [r7, #24]
   18a08:	697b      	ldr	r3, [r7, #20]
   18a0a:	429a      	cmp	r2, r3
   18a0c:	d007      	beq.n	18a1e <create_name+0x25a>
   18a0e:	2326      	movs	r3, #38	; 0x26
   18a10:	18fb      	adds	r3, r7, r3
   18a12:	2226      	movs	r2, #38	; 0x26
   18a14:	18ba      	adds	r2, r7, r2
   18a16:	7812      	ldrb	r2, [r2, #0]
   18a18:	2103      	movs	r1, #3
   18a1a:	430a      	orrs	r2, r1
   18a1c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   18a1e:	69ba      	ldr	r2, [r7, #24]
   18a20:	697b      	ldr	r3, [r7, #20]
   18a22:	429a      	cmp	r2, r3
   18a24:	d900      	bls.n	18a28 <create_name+0x264>
   18a26:	e097      	b.n	18b58 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   18a28:	697b      	ldr	r3, [r7, #20]
   18a2a:	61bb      	str	r3, [r7, #24]
   18a2c:	2308      	movs	r3, #8
   18a2e:	623b      	str	r3, [r7, #32]
   18a30:	230b      	movs	r3, #11
   18a32:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   18a34:	2327      	movs	r3, #39	; 0x27
   18a36:	18fb      	adds	r3, r7, r3
   18a38:	2227      	movs	r2, #39	; 0x27
   18a3a:	18ba      	adds	r2, r7, r2
   18a3c:	7812      	ldrb	r2, [r2, #0]
   18a3e:	0092      	lsls	r2, r2, #2
   18a40:	701a      	strb	r2, [r3, #0]
   18a42:	e078      	b.n	18b36 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   18a44:	2324      	movs	r3, #36	; 0x24
   18a46:	18fb      	adds	r3, r7, r3
   18a48:	881b      	ldrh	r3, [r3, #0]
   18a4a:	2b7f      	cmp	r3, #127	; 0x7f
   18a4c:	d920      	bls.n	18a90 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   18a4e:	2324      	movs	r3, #36	; 0x24
   18a50:	18fc      	adds	r4, r7, r3
   18a52:	2324      	movs	r3, #36	; 0x24
   18a54:	18fb      	adds	r3, r7, r3
   18a56:	881b      	ldrh	r3, [r3, #0]
   18a58:	2100      	movs	r1, #0
   18a5a:	0018      	movs	r0, r3
   18a5c:	4b37      	ldr	r3, [pc, #220]	; (18b3c <create_name+0x378>)
   18a5e:	4798      	blx	r3
   18a60:	0003      	movs	r3, r0
   18a62:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   18a64:	2324      	movs	r3, #36	; 0x24
   18a66:	18fb      	adds	r3, r7, r3
   18a68:	881b      	ldrh	r3, [r3, #0]
   18a6a:	2b00      	cmp	r3, #0
   18a6c:	d008      	beq.n	18a80 <create_name+0x2bc>
   18a6e:	2324      	movs	r3, #36	; 0x24
   18a70:	18fb      	adds	r3, r7, r3
   18a72:	881b      	ldrh	r3, [r3, #0]
   18a74:	3b80      	subs	r3, #128	; 0x80
   18a76:	4a36      	ldr	r2, [pc, #216]	; (18b50 <create_name+0x38c>)
   18a78:	5cd2      	ldrb	r2, [r2, r3]
   18a7a:	2324      	movs	r3, #36	; 0x24
   18a7c:	18fb      	adds	r3, r7, r3
   18a7e:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   18a80:	2326      	movs	r3, #38	; 0x26
   18a82:	18fb      	adds	r3, r7, r3
   18a84:	2226      	movs	r2, #38	; 0x26
   18a86:	18ba      	adds	r2, r7, r2
   18a88:	7812      	ldrb	r2, [r2, #0]
   18a8a:	2102      	movs	r1, #2
   18a8c:	430a      	orrs	r2, r1
   18a8e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   18a90:	2324      	movs	r3, #36	; 0x24
   18a92:	18fb      	adds	r3, r7, r3
   18a94:	881b      	ldrh	r3, [r3, #0]
   18a96:	2b00      	cmp	r3, #0
   18a98:	d009      	beq.n	18aae <create_name+0x2ea>
   18a9a:	2324      	movs	r3, #36	; 0x24
   18a9c:	18fb      	adds	r3, r7, r3
   18a9e:	881a      	ldrh	r2, [r3, #0]
   18aa0:	4b2c      	ldr	r3, [pc, #176]	; (18b54 <create_name+0x390>)
   18aa2:	0011      	movs	r1, r2
   18aa4:	0018      	movs	r0, r3
   18aa6:	4b27      	ldr	r3, [pc, #156]	; (18b44 <create_name+0x380>)
   18aa8:	4798      	blx	r3
   18aaa:	1e03      	subs	r3, r0, #0
   18aac:	d00c      	beq.n	18ac8 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   18aae:	2324      	movs	r3, #36	; 0x24
   18ab0:	18fb      	adds	r3, r7, r3
   18ab2:	225f      	movs	r2, #95	; 0x5f
   18ab4:	801a      	strh	r2, [r3, #0]
   18ab6:	2326      	movs	r3, #38	; 0x26
   18ab8:	18fb      	adds	r3, r7, r3
   18aba:	2226      	movs	r2, #38	; 0x26
   18abc:	18ba      	adds	r2, r7, r2
   18abe:	7812      	ldrb	r2, [r2, #0]
   18ac0:	2103      	movs	r1, #3
   18ac2:	430a      	orrs	r2, r1
   18ac4:	701a      	strb	r2, [r3, #0]
   18ac6:	e02b      	b.n	18b20 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   18ac8:	2324      	movs	r3, #36	; 0x24
   18aca:	18fb      	adds	r3, r7, r3
   18acc:	881b      	ldrh	r3, [r3, #0]
   18ace:	2b40      	cmp	r3, #64	; 0x40
   18ad0:	d90d      	bls.n	18aee <create_name+0x32a>
   18ad2:	2324      	movs	r3, #36	; 0x24
   18ad4:	18fb      	adds	r3, r7, r3
   18ad6:	881b      	ldrh	r3, [r3, #0]
   18ad8:	2b5a      	cmp	r3, #90	; 0x5a
   18ada:	d808      	bhi.n	18aee <create_name+0x32a>
					b |= 2;
   18adc:	2327      	movs	r3, #39	; 0x27
   18ade:	18fb      	adds	r3, r7, r3
   18ae0:	2227      	movs	r2, #39	; 0x27
   18ae2:	18ba      	adds	r2, r7, r2
   18ae4:	7812      	ldrb	r2, [r2, #0]
   18ae6:	2102      	movs	r1, #2
   18ae8:	430a      	orrs	r2, r1
   18aea:	701a      	strb	r2, [r3, #0]
   18aec:	e018      	b.n	18b20 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   18aee:	2324      	movs	r3, #36	; 0x24
   18af0:	18fb      	adds	r3, r7, r3
   18af2:	881b      	ldrh	r3, [r3, #0]
   18af4:	2b60      	cmp	r3, #96	; 0x60
   18af6:	d913      	bls.n	18b20 <create_name+0x35c>
   18af8:	2324      	movs	r3, #36	; 0x24
   18afa:	18fb      	adds	r3, r7, r3
   18afc:	881b      	ldrh	r3, [r3, #0]
   18afe:	2b7a      	cmp	r3, #122	; 0x7a
   18b00:	d80e      	bhi.n	18b20 <create_name+0x35c>
						b |= 1; w -= 0x20;
   18b02:	2327      	movs	r3, #39	; 0x27
   18b04:	18fb      	adds	r3, r7, r3
   18b06:	2227      	movs	r2, #39	; 0x27
   18b08:	18ba      	adds	r2, r7, r2
   18b0a:	7812      	ldrb	r2, [r2, #0]
   18b0c:	2101      	movs	r1, #1
   18b0e:	430a      	orrs	r2, r1
   18b10:	701a      	strb	r2, [r3, #0]
   18b12:	2324      	movs	r3, #36	; 0x24
   18b14:	18fb      	adds	r3, r7, r3
   18b16:	2224      	movs	r2, #36	; 0x24
   18b18:	18ba      	adds	r2, r7, r2
   18b1a:	8812      	ldrh	r2, [r2, #0]
   18b1c:	3a20      	subs	r2, #32
   18b1e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   18b20:	687b      	ldr	r3, [r7, #4]
   18b22:	699a      	ldr	r2, [r3, #24]
   18b24:	6a3b      	ldr	r3, [r7, #32]
   18b26:	1c59      	adds	r1, r3, #1
   18b28:	6239      	str	r1, [r7, #32]
   18b2a:	18d3      	adds	r3, r2, r3
   18b2c:	2224      	movs	r2, #36	; 0x24
   18b2e:	18ba      	adds	r2, r7, r2
   18b30:	8812      	ldrh	r2, [r2, #0]
   18b32:	b2d2      	uxtb	r2, r2
   18b34:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   18b36:	e72b      	b.n	18990 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   18b38:	46c0      	nop			; (mov r8, r8)
   18b3a:	e00e      	b.n	18b5a <create_name+0x396>
   18b3c:	00019efd 	.word	0x00019efd
   18b40:	00024988 	.word	0x00024988
   18b44:	00017367 	.word	0x00017367
   18b48:	7fffffff 	.word	0x7fffffff
   18b4c:	000172ed 	.word	0x000172ed
   18b50:	000249d0 	.word	0x000249d0
   18b54:	00024994 	.word	0x00024994
			if (si > di) break;			/* No extension */
   18b58:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   18b5a:	687b      	ldr	r3, [r7, #4]
   18b5c:	699b      	ldr	r3, [r3, #24]
   18b5e:	781b      	ldrb	r3, [r3, #0]
   18b60:	2be5      	cmp	r3, #229	; 0xe5
   18b62:	d103      	bne.n	18b6c <create_name+0x3a8>
   18b64:	687b      	ldr	r3, [r7, #4]
   18b66:	699b      	ldr	r3, [r3, #24]
   18b68:	2205      	movs	r2, #5
   18b6a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   18b6c:	69fb      	ldr	r3, [r7, #28]
   18b6e:	2b08      	cmp	r3, #8
   18b70:	d106      	bne.n	18b80 <create_name+0x3bc>
   18b72:	2327      	movs	r3, #39	; 0x27
   18b74:	18fb      	adds	r3, r7, r3
   18b76:	2227      	movs	r2, #39	; 0x27
   18b78:	18ba      	adds	r2, r7, r2
   18b7a:	7812      	ldrb	r2, [r2, #0]
   18b7c:	0092      	lsls	r2, r2, #2
   18b7e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   18b80:	2327      	movs	r3, #39	; 0x27
   18b82:	18fb      	adds	r3, r7, r3
   18b84:	781b      	ldrb	r3, [r3, #0]
   18b86:	220c      	movs	r2, #12
   18b88:	4013      	ands	r3, r2
   18b8a:	2b0c      	cmp	r3, #12
   18b8c:	d006      	beq.n	18b9c <create_name+0x3d8>
   18b8e:	2327      	movs	r3, #39	; 0x27
   18b90:	18fb      	adds	r3, r7, r3
   18b92:	781b      	ldrb	r3, [r3, #0]
   18b94:	2203      	movs	r2, #3
   18b96:	4013      	ands	r3, r2
   18b98:	2b03      	cmp	r3, #3
   18b9a:	d107      	bne.n	18bac <create_name+0x3e8>
		cf |= NS_LFN;
   18b9c:	2326      	movs	r3, #38	; 0x26
   18b9e:	18fb      	adds	r3, r7, r3
   18ba0:	2226      	movs	r2, #38	; 0x26
   18ba2:	18ba      	adds	r2, r7, r2
   18ba4:	7812      	ldrb	r2, [r2, #0]
   18ba6:	2102      	movs	r1, #2
   18ba8:	430a      	orrs	r2, r1
   18baa:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   18bac:	2326      	movs	r3, #38	; 0x26
   18bae:	18fb      	adds	r3, r7, r3
   18bb0:	781b      	ldrb	r3, [r3, #0]
   18bb2:	2202      	movs	r2, #2
   18bb4:	4013      	ands	r3, r2
   18bb6:	d11d      	bne.n	18bf4 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   18bb8:	2327      	movs	r3, #39	; 0x27
   18bba:	18fb      	adds	r3, r7, r3
   18bbc:	781b      	ldrb	r3, [r3, #0]
   18bbe:	2203      	movs	r2, #3
   18bc0:	4013      	ands	r3, r2
   18bc2:	2b01      	cmp	r3, #1
   18bc4:	d107      	bne.n	18bd6 <create_name+0x412>
   18bc6:	2326      	movs	r3, #38	; 0x26
   18bc8:	18fb      	adds	r3, r7, r3
   18bca:	2226      	movs	r2, #38	; 0x26
   18bcc:	18ba      	adds	r2, r7, r2
   18bce:	7812      	ldrb	r2, [r2, #0]
   18bd0:	2110      	movs	r1, #16
   18bd2:	430a      	orrs	r2, r1
   18bd4:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   18bd6:	2327      	movs	r3, #39	; 0x27
   18bd8:	18fb      	adds	r3, r7, r3
   18bda:	781b      	ldrb	r3, [r3, #0]
   18bdc:	220c      	movs	r2, #12
   18bde:	4013      	ands	r3, r2
   18be0:	2b04      	cmp	r3, #4
   18be2:	d107      	bne.n	18bf4 <create_name+0x430>
   18be4:	2326      	movs	r3, #38	; 0x26
   18be6:	18fb      	adds	r3, r7, r3
   18be8:	2226      	movs	r2, #38	; 0x26
   18bea:	18ba      	adds	r2, r7, r2
   18bec:	7812      	ldrb	r2, [r2, #0]
   18bee:	2108      	movs	r1, #8
   18bf0:	430a      	orrs	r2, r1
   18bf2:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   18bf4:	687b      	ldr	r3, [r7, #4]
   18bf6:	699b      	ldr	r3, [r3, #24]
   18bf8:	330b      	adds	r3, #11
   18bfa:	2226      	movs	r2, #38	; 0x26
   18bfc:	18ba      	adds	r2, r7, r2
   18bfe:	7812      	ldrb	r2, [r2, #0]
   18c00:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   18c02:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   18c04:	0018      	movs	r0, r3
   18c06:	46bd      	mov	sp, r7
   18c08:	b00b      	add	sp, #44	; 0x2c
   18c0a:	bd90      	pop	{r4, r7, pc}

00018c0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   18c0c:	b590      	push	{r4, r7, lr}
   18c0e:	b085      	sub	sp, #20
   18c10:	af00      	add	r7, sp, #0
   18c12:	6078      	str	r0, [r7, #4]
   18c14:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   18c16:	683b      	ldr	r3, [r7, #0]
   18c18:	781b      	ldrb	r3, [r3, #0]
   18c1a:	2b2f      	cmp	r3, #47	; 0x2f
   18c1c:	d003      	beq.n	18c26 <follow_path+0x1a>
   18c1e:	683b      	ldr	r3, [r7, #0]
   18c20:	781b      	ldrb	r3, [r3, #0]
   18c22:	2b5c      	cmp	r3, #92	; 0x5c
   18c24:	d102      	bne.n	18c2c <follow_path+0x20>
		path++;
   18c26:	683b      	ldr	r3, [r7, #0]
   18c28:	3301      	adds	r3, #1
   18c2a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   18c2c:	687b      	ldr	r3, [r7, #4]
   18c2e:	2200      	movs	r2, #0
   18c30:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   18c32:	683b      	ldr	r3, [r7, #0]
   18c34:	781b      	ldrb	r3, [r3, #0]
   18c36:	2b1f      	cmp	r3, #31
   18c38:	d80c      	bhi.n	18c54 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   18c3a:	230f      	movs	r3, #15
   18c3c:	18fc      	adds	r4, r7, r3
   18c3e:	687b      	ldr	r3, [r7, #4]
   18c40:	2100      	movs	r1, #0
   18c42:	0018      	movs	r0, r3
   18c44:	4b3c      	ldr	r3, [pc, #240]	; (18d38 <follow_path+0x12c>)
   18c46:	4798      	blx	r3
   18c48:	0003      	movs	r3, r0
   18c4a:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   18c4c:	687b      	ldr	r3, [r7, #4]
   18c4e:	2200      	movs	r2, #0
   18c50:	615a      	str	r2, [r3, #20]
   18c52:	e06a      	b.n	18d2a <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   18c54:	230f      	movs	r3, #15
   18c56:	18fc      	adds	r4, r7, r3
   18c58:	003a      	movs	r2, r7
   18c5a:	687b      	ldr	r3, [r7, #4]
   18c5c:	0011      	movs	r1, r2
   18c5e:	0018      	movs	r0, r3
   18c60:	4b36      	ldr	r3, [pc, #216]	; (18d3c <follow_path+0x130>)
   18c62:	4798      	blx	r3
   18c64:	0003      	movs	r3, r0
   18c66:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   18c68:	230f      	movs	r3, #15
   18c6a:	18fb      	adds	r3, r7, r3
   18c6c:	781b      	ldrb	r3, [r3, #0]
   18c6e:	2b00      	cmp	r3, #0
   18c70:	d154      	bne.n	18d1c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   18c72:	230f      	movs	r3, #15
   18c74:	18fc      	adds	r4, r7, r3
   18c76:	687b      	ldr	r3, [r7, #4]
   18c78:	0018      	movs	r0, r3
   18c7a:	4b31      	ldr	r3, [pc, #196]	; (18d40 <follow_path+0x134>)
   18c7c:	4798      	blx	r3
   18c7e:	0003      	movs	r3, r0
   18c80:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   18c82:	687b      	ldr	r3, [r7, #4]
   18c84:	699a      	ldr	r2, [r3, #24]
   18c86:	230e      	movs	r3, #14
   18c88:	18fb      	adds	r3, r7, r3
   18c8a:	7ad2      	ldrb	r2, [r2, #11]
   18c8c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   18c8e:	230f      	movs	r3, #15
   18c90:	18fb      	adds	r3, r7, r3
   18c92:	781b      	ldrb	r3, [r3, #0]
   18c94:	2b00      	cmp	r3, #0
   18c96:	d00f      	beq.n	18cb8 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   18c98:	230f      	movs	r3, #15
   18c9a:	18fb      	adds	r3, r7, r3
   18c9c:	781b      	ldrb	r3, [r3, #0]
   18c9e:	2b04      	cmp	r3, #4
   18ca0:	d13e      	bne.n	18d20 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   18ca2:	230e      	movs	r3, #14
   18ca4:	18fb      	adds	r3, r7, r3
   18ca6:	781b      	ldrb	r3, [r3, #0]
   18ca8:	2204      	movs	r2, #4
   18caa:	4013      	ands	r3, r2
   18cac:	d13a      	bne.n	18d24 <follow_path+0x118>
   18cae:	230f      	movs	r3, #15
   18cb0:	18fb      	adds	r3, r7, r3
   18cb2:	2205      	movs	r2, #5
   18cb4:	701a      	strb	r2, [r3, #0]
				}
				break;
   18cb6:	e035      	b.n	18d24 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   18cb8:	230e      	movs	r3, #14
   18cba:	18fb      	adds	r3, r7, r3
   18cbc:	781b      	ldrb	r3, [r3, #0]
   18cbe:	2204      	movs	r2, #4
   18cc0:	4013      	ands	r3, r2
   18cc2:	d131      	bne.n	18d28 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   18cc4:	687b      	ldr	r3, [r7, #4]
   18cc6:	695b      	ldr	r3, [r3, #20]
   18cc8:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   18cca:	68bb      	ldr	r3, [r7, #8]
   18ccc:	330b      	adds	r3, #11
   18cce:	781b      	ldrb	r3, [r3, #0]
   18cd0:	001a      	movs	r2, r3
   18cd2:	2310      	movs	r3, #16
   18cd4:	4013      	ands	r3, r2
   18cd6:	d104      	bne.n	18ce2 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   18cd8:	230f      	movs	r3, #15
   18cda:	18fb      	adds	r3, r7, r3
   18cdc:	2205      	movs	r2, #5
   18cde:	701a      	strb	r2, [r3, #0]
   18ce0:	e023      	b.n	18d2a <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   18ce2:	68bb      	ldr	r3, [r7, #8]
   18ce4:	3315      	adds	r3, #21
   18ce6:	781b      	ldrb	r3, [r3, #0]
   18ce8:	021b      	lsls	r3, r3, #8
   18cea:	b21a      	sxth	r2, r3
   18cec:	68bb      	ldr	r3, [r7, #8]
   18cee:	3314      	adds	r3, #20
   18cf0:	781b      	ldrb	r3, [r3, #0]
   18cf2:	b21b      	sxth	r3, r3
   18cf4:	4313      	orrs	r3, r2
   18cf6:	b21b      	sxth	r3, r3
   18cf8:	b29b      	uxth	r3, r3
   18cfa:	041b      	lsls	r3, r3, #16
   18cfc:	68ba      	ldr	r2, [r7, #8]
   18cfe:	321b      	adds	r2, #27
   18d00:	7812      	ldrb	r2, [r2, #0]
   18d02:	0212      	lsls	r2, r2, #8
   18d04:	b211      	sxth	r1, r2
   18d06:	68ba      	ldr	r2, [r7, #8]
   18d08:	321a      	adds	r2, #26
   18d0a:	7812      	ldrb	r2, [r2, #0]
   18d0c:	b212      	sxth	r2, r2
   18d0e:	430a      	orrs	r2, r1
   18d10:	b212      	sxth	r2, r2
   18d12:	b292      	uxth	r2, r2
   18d14:	431a      	orrs	r2, r3
   18d16:	687b      	ldr	r3, [r7, #4]
   18d18:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   18d1a:	e79b      	b.n	18c54 <follow_path+0x48>
			if (res != FR_OK) break;
   18d1c:	46c0      	nop			; (mov r8, r8)
   18d1e:	e004      	b.n	18d2a <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   18d20:	46c0      	nop			; (mov r8, r8)
   18d22:	e002      	b.n	18d2a <follow_path+0x11e>
				break;
   18d24:	46c0      	nop			; (mov r8, r8)
   18d26:	e000      	b.n	18d2a <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   18d28:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   18d2a:	230f      	movs	r3, #15
   18d2c:	18fb      	adds	r3, r7, r3
   18d2e:	781b      	ldrb	r3, [r3, #0]
}
   18d30:	0018      	movs	r0, r3
   18d32:	46bd      	mov	sp, r7
   18d34:	b005      	add	sp, #20
   18d36:	bd90      	pop	{r4, r7, pc}
   18d38:	00017bdd 	.word	0x00017bdd
   18d3c:	000187c5 	.word	0x000187c5
   18d40:	00018261 	.word	0x00018261

00018d44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   18d44:	b590      	push	{r4, r7, lr}
   18d46:	b083      	sub	sp, #12
   18d48:	af00      	add	r7, sp, #0
   18d4a:	6078      	str	r0, [r7, #4]
   18d4c:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   18d4e:	687b      	ldr	r3, [r7, #4]
   18d50:	7858      	ldrb	r0, [r3, #1]
   18d52:	687b      	ldr	r3, [r7, #4]
   18d54:	3330      	adds	r3, #48	; 0x30
   18d56:	0019      	movs	r1, r3
   18d58:	683a      	ldr	r2, [r7, #0]
   18d5a:	2301      	movs	r3, #1
   18d5c:	4c2a      	ldr	r4, [pc, #168]	; (18e08 <check_fs+0xc4>)
   18d5e:	47a0      	blx	r4
   18d60:	1e03      	subs	r3, r0, #0
   18d62:	d001      	beq.n	18d68 <check_fs+0x24>
		return 3;
   18d64:	2303      	movs	r3, #3
   18d66:	e04b      	b.n	18e00 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   18d68:	687b      	ldr	r3, [r7, #4]
   18d6a:	4a28      	ldr	r2, [pc, #160]	; (18e0c <check_fs+0xc8>)
   18d6c:	4694      	mov	ip, r2
   18d6e:	4463      	add	r3, ip
   18d70:	3301      	adds	r3, #1
   18d72:	781b      	ldrb	r3, [r3, #0]
   18d74:	021b      	lsls	r3, r3, #8
   18d76:	b21a      	sxth	r2, r3
   18d78:	687b      	ldr	r3, [r7, #4]
   18d7a:	4924      	ldr	r1, [pc, #144]	; (18e0c <check_fs+0xc8>)
   18d7c:	5c5b      	ldrb	r3, [r3, r1]
   18d7e:	b21b      	sxth	r3, r3
   18d80:	4313      	orrs	r3, r2
   18d82:	b21b      	sxth	r3, r3
   18d84:	4a22      	ldr	r2, [pc, #136]	; (18e10 <check_fs+0xcc>)
   18d86:	4293      	cmp	r3, r2
   18d88:	d001      	beq.n	18d8e <check_fs+0x4a>
		return 2;
   18d8a:	2302      	movs	r3, #2
   18d8c:	e038      	b.n	18e00 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   18d8e:	687b      	ldr	r3, [r7, #4]
   18d90:	3366      	adds	r3, #102	; 0x66
   18d92:	3303      	adds	r3, #3
   18d94:	781b      	ldrb	r3, [r3, #0]
   18d96:	061a      	lsls	r2, r3, #24
   18d98:	687b      	ldr	r3, [r7, #4]
   18d9a:	3366      	adds	r3, #102	; 0x66
   18d9c:	3302      	adds	r3, #2
   18d9e:	781b      	ldrb	r3, [r3, #0]
   18da0:	041b      	lsls	r3, r3, #16
   18da2:	4313      	orrs	r3, r2
   18da4:	687a      	ldr	r2, [r7, #4]
   18da6:	3266      	adds	r2, #102	; 0x66
   18da8:	3201      	adds	r2, #1
   18daa:	7812      	ldrb	r2, [r2, #0]
   18dac:	0212      	lsls	r2, r2, #8
   18dae:	4313      	orrs	r3, r2
   18db0:	687a      	ldr	r2, [r7, #4]
   18db2:	2166      	movs	r1, #102	; 0x66
   18db4:	5c52      	ldrb	r2, [r2, r1]
   18db6:	4313      	orrs	r3, r2
   18db8:	021b      	lsls	r3, r3, #8
   18dba:	0a1b      	lsrs	r3, r3, #8
   18dbc:	4a15      	ldr	r2, [pc, #84]	; (18e14 <check_fs+0xd0>)
   18dbe:	4293      	cmp	r3, r2
   18dc0:	d101      	bne.n	18dc6 <check_fs+0x82>
		return 0;
   18dc2:	2300      	movs	r3, #0
   18dc4:	e01c      	b.n	18e00 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   18dc6:	687b      	ldr	r3, [r7, #4]
   18dc8:	3382      	adds	r3, #130	; 0x82
   18dca:	3303      	adds	r3, #3
   18dcc:	781b      	ldrb	r3, [r3, #0]
   18dce:	061a      	lsls	r2, r3, #24
   18dd0:	687b      	ldr	r3, [r7, #4]
   18dd2:	3382      	adds	r3, #130	; 0x82
   18dd4:	3302      	adds	r3, #2
   18dd6:	781b      	ldrb	r3, [r3, #0]
   18dd8:	041b      	lsls	r3, r3, #16
   18dda:	4313      	orrs	r3, r2
   18ddc:	687a      	ldr	r2, [r7, #4]
   18dde:	3282      	adds	r2, #130	; 0x82
   18de0:	3201      	adds	r2, #1
   18de2:	7812      	ldrb	r2, [r2, #0]
   18de4:	0212      	lsls	r2, r2, #8
   18de6:	4313      	orrs	r3, r2
   18de8:	687a      	ldr	r2, [r7, #4]
   18dea:	2182      	movs	r1, #130	; 0x82
   18dec:	5c52      	ldrb	r2, [r2, r1]
   18dee:	4313      	orrs	r3, r2
   18df0:	021b      	lsls	r3, r3, #8
   18df2:	0a1b      	lsrs	r3, r3, #8
   18df4:	4a07      	ldr	r2, [pc, #28]	; (18e14 <check_fs+0xd0>)
   18df6:	4293      	cmp	r3, r2
   18df8:	d101      	bne.n	18dfe <check_fs+0xba>
		return 0;
   18dfa:	2300      	movs	r3, #0
   18dfc:	e000      	b.n	18e00 <check_fs+0xbc>

	return 1;
   18dfe:	2301      	movs	r3, #1
}
   18e00:	0018      	movs	r0, r3
   18e02:	46bd      	mov	sp, r7
   18e04:	b003      	add	sp, #12
   18e06:	bd90      	pop	{r4, r7, pc}
   18e08:	00016fad 	.word	0x00016fad
   18e0c:	0000022e 	.word	0x0000022e
   18e10:	ffffaa55 	.word	0xffffaa55
   18e14:	00544146 	.word	0x00544146

00018e18 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   18e18:	b590      	push	{r4, r7, lr}
   18e1a:	b093      	sub	sp, #76	; 0x4c
   18e1c:	af00      	add	r7, sp, #0
   18e1e:	60f8      	str	r0, [r7, #12]
   18e20:	60b9      	str	r1, [r7, #8]
   18e22:	1dfb      	adds	r3, r7, #7
   18e24:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   18e26:	68fb      	ldr	r3, [r7, #12]
   18e28:	681b      	ldr	r3, [r3, #0]
   18e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   18e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18e2e:	781b      	ldrb	r3, [r3, #0]
   18e30:	3b30      	subs	r3, #48	; 0x30
   18e32:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   18e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18e36:	2b09      	cmp	r3, #9
   18e38:	d80b      	bhi.n	18e52 <chk_mounted+0x3a>
   18e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18e3c:	3301      	adds	r3, #1
   18e3e:	781b      	ldrb	r3, [r3, #0]
   18e40:	2b3a      	cmp	r3, #58	; 0x3a
   18e42:	d106      	bne.n	18e52 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   18e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18e46:	3302      	adds	r3, #2
   18e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   18e4a:	68fb      	ldr	r3, [r7, #12]
   18e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   18e4e:	601a      	str	r2, [r3, #0]
   18e50:	e001      	b.n	18e56 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   18e52:	2300      	movs	r3, #0
   18e54:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   18e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18e58:	2b07      	cmp	r3, #7
   18e5a:	d901      	bls.n	18e60 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   18e5c:	230b      	movs	r3, #11
   18e5e:	e2af      	b.n	193c0 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   18e60:	4bc5      	ldr	r3, [pc, #788]	; (19178 <chk_mounted+0x360>)
   18e62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   18e64:	0092      	lsls	r2, r2, #2
   18e66:	58d3      	ldr	r3, [r2, r3]
   18e68:	62bb      	str	r3, [r7, #40]	; 0x28
   18e6a:	68bb      	ldr	r3, [r7, #8]
   18e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18e6e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   18e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18e72:	2b00      	cmp	r3, #0
   18e74:	d101      	bne.n	18e7a <chk_mounted+0x62>
   18e76:	230c      	movs	r3, #12
   18e78:	e2a2      	b.n	193c0 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   18e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18e7c:	781b      	ldrb	r3, [r3, #0]
   18e7e:	2b00      	cmp	r3, #0
   18e80:	d01c      	beq.n	18ebc <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   18e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18e84:	785b      	ldrb	r3, [r3, #1]
   18e86:	2227      	movs	r2, #39	; 0x27
   18e88:	18bc      	adds	r4, r7, r2
   18e8a:	0018      	movs	r0, r3
   18e8c:	4bbb      	ldr	r3, [pc, #748]	; (1917c <chk_mounted+0x364>)
   18e8e:	4798      	blx	r3
   18e90:	0003      	movs	r3, r0
   18e92:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   18e94:	2327      	movs	r3, #39	; 0x27
   18e96:	18fb      	adds	r3, r7, r3
   18e98:	781b      	ldrb	r3, [r3, #0]
   18e9a:	2201      	movs	r2, #1
   18e9c:	4013      	ands	r3, r2
   18e9e:	d10d      	bne.n	18ebc <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   18ea0:	1dfb      	adds	r3, r7, #7
   18ea2:	781b      	ldrb	r3, [r3, #0]
   18ea4:	2b00      	cmp	r3, #0
   18ea6:	d007      	beq.n	18eb8 <chk_mounted+0xa0>
   18ea8:	2327      	movs	r3, #39	; 0x27
   18eaa:	18fb      	adds	r3, r7, r3
   18eac:	781b      	ldrb	r3, [r3, #0]
   18eae:	2204      	movs	r2, #4
   18eb0:	4013      	ands	r3, r2
   18eb2:	d001      	beq.n	18eb8 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   18eb4:	230a      	movs	r3, #10
   18eb6:	e283      	b.n	193c0 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   18eb8:	2300      	movs	r3, #0
   18eba:	e281      	b.n	193c0 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   18ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18ebe:	2200      	movs	r2, #0
   18ec0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   18ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18ec4:	b2da      	uxtb	r2, r3
   18ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18ec8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   18eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18ecc:	785b      	ldrb	r3, [r3, #1]
   18ece:	2227      	movs	r2, #39	; 0x27
   18ed0:	18bc      	adds	r4, r7, r2
   18ed2:	0018      	movs	r0, r3
   18ed4:	4baa      	ldr	r3, [pc, #680]	; (19180 <chk_mounted+0x368>)
   18ed6:	4798      	blx	r3
   18ed8:	0003      	movs	r3, r0
   18eda:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   18edc:	2327      	movs	r3, #39	; 0x27
   18ede:	18fb      	adds	r3, r7, r3
   18ee0:	781b      	ldrb	r3, [r3, #0]
   18ee2:	2201      	movs	r2, #1
   18ee4:	4013      	ands	r3, r2
   18ee6:	d001      	beq.n	18eec <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   18ee8:	2303      	movs	r3, #3
   18eea:	e269      	b.n	193c0 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   18eec:	1dfb      	adds	r3, r7, #7
   18eee:	781b      	ldrb	r3, [r3, #0]
   18ef0:	2b00      	cmp	r3, #0
   18ef2:	d007      	beq.n	18f04 <chk_mounted+0xec>
   18ef4:	2327      	movs	r3, #39	; 0x27
   18ef6:	18fb      	adds	r3, r7, r3
   18ef8:	781b      	ldrb	r3, [r3, #0]
   18efa:	2204      	movs	r2, #4
   18efc:	4013      	ands	r3, r2
   18efe:	d001      	beq.n	18f04 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   18f00:	230a      	movs	r3, #10
   18f02:	e25d      	b.n	193c0 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   18f04:	2300      	movs	r3, #0
   18f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   18f08:	2347      	movs	r3, #71	; 0x47
   18f0a:	18fc      	adds	r4, r7, r3
   18f0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   18f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18f10:	0011      	movs	r1, r2
   18f12:	0018      	movs	r0, r3
   18f14:	4b9b      	ldr	r3, [pc, #620]	; (19184 <chk_mounted+0x36c>)
   18f16:	4798      	blx	r3
   18f18:	0003      	movs	r3, r0
   18f1a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   18f1c:	2347      	movs	r3, #71	; 0x47
   18f1e:	18fb      	adds	r3, r7, r3
   18f20:	781b      	ldrb	r3, [r3, #0]
   18f22:	2b01      	cmp	r3, #1
   18f24:	d13b      	bne.n	18f9e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   18f26:	2346      	movs	r3, #70	; 0x46
   18f28:	18fb      	adds	r3, r7, r3
   18f2a:	2200      	movs	r2, #0
   18f2c:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   18f2e:	2346      	movs	r3, #70	; 0x46
   18f30:	18fb      	adds	r3, r7, r3
   18f32:	781b      	ldrb	r3, [r3, #0]
   18f34:	2b00      	cmp	r3, #0
   18f36:	d006      	beq.n	18f46 <chk_mounted+0x12e>
   18f38:	2346      	movs	r3, #70	; 0x46
   18f3a:	18fb      	adds	r3, r7, r3
   18f3c:	781a      	ldrb	r2, [r3, #0]
   18f3e:	2346      	movs	r3, #70	; 0x46
   18f40:	18fb      	adds	r3, r7, r3
   18f42:	3a01      	subs	r2, #1
   18f44:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   18f46:	2346      	movs	r3, #70	; 0x46
   18f48:	18fb      	adds	r3, r7, r3
   18f4a:	781b      	ldrb	r3, [r3, #0]
   18f4c:	011b      	lsls	r3, r3, #4
   18f4e:	33bf      	adds	r3, #191	; 0xbf
   18f50:	33ff      	adds	r3, #255	; 0xff
   18f52:	3330      	adds	r3, #48	; 0x30
   18f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18f56:	18d3      	adds	r3, r2, r3
   18f58:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   18f5a:	6a3b      	ldr	r3, [r7, #32]
   18f5c:	3304      	adds	r3, #4
   18f5e:	781b      	ldrb	r3, [r3, #0]
   18f60:	2b00      	cmp	r3, #0
   18f62:	d01c      	beq.n	18f9e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   18f64:	6a3b      	ldr	r3, [r7, #32]
   18f66:	330b      	adds	r3, #11
   18f68:	781b      	ldrb	r3, [r3, #0]
   18f6a:	061a      	lsls	r2, r3, #24
   18f6c:	6a3b      	ldr	r3, [r7, #32]
   18f6e:	330a      	adds	r3, #10
   18f70:	781b      	ldrb	r3, [r3, #0]
   18f72:	041b      	lsls	r3, r3, #16
   18f74:	4313      	orrs	r3, r2
   18f76:	6a3a      	ldr	r2, [r7, #32]
   18f78:	3209      	adds	r2, #9
   18f7a:	7812      	ldrb	r2, [r2, #0]
   18f7c:	0212      	lsls	r2, r2, #8
   18f7e:	4313      	orrs	r3, r2
   18f80:	6a3a      	ldr	r2, [r7, #32]
   18f82:	3208      	adds	r2, #8
   18f84:	7812      	ldrb	r2, [r2, #0]
   18f86:	4313      	orrs	r3, r2
   18f88:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   18f8a:	2347      	movs	r3, #71	; 0x47
   18f8c:	18fc      	adds	r4, r7, r3
   18f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   18f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18f92:	0011      	movs	r1, r2
   18f94:	0018      	movs	r0, r3
   18f96:	4b7b      	ldr	r3, [pc, #492]	; (19184 <chk_mounted+0x36c>)
   18f98:	4798      	blx	r3
   18f9a:	0003      	movs	r3, r0
   18f9c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   18f9e:	2347      	movs	r3, #71	; 0x47
   18fa0:	18fb      	adds	r3, r7, r3
   18fa2:	781b      	ldrb	r3, [r3, #0]
   18fa4:	2b03      	cmp	r3, #3
   18fa6:	d101      	bne.n	18fac <chk_mounted+0x194>
   18fa8:	2301      	movs	r3, #1
   18faa:	e209      	b.n	193c0 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   18fac:	2347      	movs	r3, #71	; 0x47
   18fae:	18fb      	adds	r3, r7, r3
   18fb0:	781b      	ldrb	r3, [r3, #0]
   18fb2:	2b00      	cmp	r3, #0
   18fb4:	d001      	beq.n	18fba <chk_mounted+0x1a2>
   18fb6:	230d      	movs	r3, #13
   18fb8:	e202      	b.n	193c0 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   18fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18fbc:	223c      	movs	r2, #60	; 0x3c
   18fbe:	5c9b      	ldrb	r3, [r3, r2]
   18fc0:	021b      	lsls	r3, r3, #8
   18fc2:	b21a      	sxth	r2, r3
   18fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18fc6:	213b      	movs	r1, #59	; 0x3b
   18fc8:	5c5b      	ldrb	r3, [r3, r1]
   18fca:	b21b      	sxth	r3, r3
   18fcc:	4313      	orrs	r3, r2
   18fce:	b21a      	sxth	r2, r3
   18fd0:	2380      	movs	r3, #128	; 0x80
   18fd2:	009b      	lsls	r3, r3, #2
   18fd4:	429a      	cmp	r2, r3
   18fd6:	d001      	beq.n	18fdc <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   18fd8:	230d      	movs	r3, #13
   18fda:	e1f1      	b.n	193c0 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   18fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18fde:	2247      	movs	r2, #71	; 0x47
   18fe0:	5c9b      	ldrb	r3, [r3, r2]
   18fe2:	021b      	lsls	r3, r3, #8
   18fe4:	b21a      	sxth	r2, r3
   18fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18fe8:	2146      	movs	r1, #70	; 0x46
   18fea:	5c5b      	ldrb	r3, [r3, r1]
   18fec:	b21b      	sxth	r3, r3
   18fee:	4313      	orrs	r3, r2
   18ff0:	b21b      	sxth	r3, r3
   18ff2:	b29b      	uxth	r3, r3
   18ff4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   18ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18ff8:	2b00      	cmp	r3, #0
   18ffa:	d112      	bne.n	19022 <chk_mounted+0x20a>
   18ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18ffe:	2257      	movs	r2, #87	; 0x57
   19000:	5c9b      	ldrb	r3, [r3, r2]
   19002:	061a      	lsls	r2, r3, #24
   19004:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19006:	2156      	movs	r1, #86	; 0x56
   19008:	5c5b      	ldrb	r3, [r3, r1]
   1900a:	041b      	lsls	r3, r3, #16
   1900c:	4313      	orrs	r3, r2
   1900e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19010:	2155      	movs	r1, #85	; 0x55
   19012:	5c52      	ldrb	r2, [r2, r1]
   19014:	0212      	lsls	r2, r2, #8
   19016:	4313      	orrs	r3, r2
   19018:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1901a:	2154      	movs	r1, #84	; 0x54
   1901c:	5c52      	ldrb	r2, [r2, r1]
   1901e:	4313      	orrs	r3, r2
   19020:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   19022:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19024:	6bba      	ldr	r2, [r7, #56]	; 0x38
   19026:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   19028:	231f      	movs	r3, #31
   1902a:	18fb      	adds	r3, r7, r3
   1902c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1902e:	2140      	movs	r1, #64	; 0x40
   19030:	5c52      	ldrb	r2, [r2, r1]
   19032:	701a      	strb	r2, [r3, #0]
   19034:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19036:	221f      	movs	r2, #31
   19038:	18ba      	adds	r2, r7, r2
   1903a:	7812      	ldrb	r2, [r2, #0]
   1903c:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   1903e:	231f      	movs	r3, #31
   19040:	18fb      	adds	r3, r7, r3
   19042:	781b      	ldrb	r3, [r3, #0]
   19044:	2b01      	cmp	r3, #1
   19046:	d006      	beq.n	19056 <chk_mounted+0x23e>
   19048:	231f      	movs	r3, #31
   1904a:	18fb      	adds	r3, r7, r3
   1904c:	781b      	ldrb	r3, [r3, #0]
   1904e:	2b02      	cmp	r3, #2
   19050:	d001      	beq.n	19056 <chk_mounted+0x23e>
   19052:	230d      	movs	r3, #13
   19054:	e1b4      	b.n	193c0 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   19056:	231f      	movs	r3, #31
   19058:	18fb      	adds	r3, r7, r3
   1905a:	781a      	ldrb	r2, [r3, #0]
   1905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1905e:	4353      	muls	r3, r2
   19060:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   19062:	231f      	movs	r3, #31
   19064:	18fb      	adds	r3, r7, r3
   19066:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19068:	213d      	movs	r1, #61	; 0x3d
   1906a:	5c52      	ldrb	r2, [r2, r1]
   1906c:	701a      	strb	r2, [r3, #0]
   1906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19070:	221f      	movs	r2, #31
   19072:	18ba      	adds	r2, r7, r2
   19074:	7812      	ldrb	r2, [r2, #0]
   19076:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   19078:	231f      	movs	r3, #31
   1907a:	18fb      	adds	r3, r7, r3
   1907c:	781b      	ldrb	r3, [r3, #0]
   1907e:	2b00      	cmp	r3, #0
   19080:	d008      	beq.n	19094 <chk_mounted+0x27c>
   19082:	231f      	movs	r3, #31
   19084:	18fb      	adds	r3, r7, r3
   19086:	781b      	ldrb	r3, [r3, #0]
   19088:	221f      	movs	r2, #31
   1908a:	18ba      	adds	r2, r7, r2
   1908c:	7812      	ldrb	r2, [r2, #0]
   1908e:	3a01      	subs	r2, #1
   19090:	4013      	ands	r3, r2
   19092:	d001      	beq.n	19098 <chk_mounted+0x280>
   19094:	230d      	movs	r3, #13
   19096:	e193      	b.n	193c0 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   19098:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1909a:	2242      	movs	r2, #66	; 0x42
   1909c:	5c9b      	ldrb	r3, [r3, r2]
   1909e:	021b      	lsls	r3, r3, #8
   190a0:	b21a      	sxth	r2, r3
   190a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190a4:	2141      	movs	r1, #65	; 0x41
   190a6:	5c5b      	ldrb	r3, [r3, r1]
   190a8:	b21b      	sxth	r3, r3
   190aa:	4313      	orrs	r3, r2
   190ac:	b21b      	sxth	r3, r3
   190ae:	b29a      	uxth	r2, r3
   190b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190b2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   190b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190b6:	891b      	ldrh	r3, [r3, #8]
   190b8:	220f      	movs	r2, #15
   190ba:	4013      	ands	r3, r2
   190bc:	b29b      	uxth	r3, r3
   190be:	2b00      	cmp	r3, #0
   190c0:	d001      	beq.n	190c6 <chk_mounted+0x2ae>
   190c2:	230d      	movs	r3, #13
   190c4:	e17c      	b.n	193c0 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   190c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190c8:	2244      	movs	r2, #68	; 0x44
   190ca:	5c9b      	ldrb	r3, [r3, r2]
   190cc:	021b      	lsls	r3, r3, #8
   190ce:	b21a      	sxth	r2, r3
   190d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190d2:	2143      	movs	r1, #67	; 0x43
   190d4:	5c5b      	ldrb	r3, [r3, r1]
   190d6:	b21b      	sxth	r3, r3
   190d8:	4313      	orrs	r3, r2
   190da:	b21b      	sxth	r3, r3
   190dc:	b29b      	uxth	r3, r3
   190de:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   190e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   190e2:	2b00      	cmp	r3, #0
   190e4:	d112      	bne.n	1910c <chk_mounted+0x2f4>
   190e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190e8:	2253      	movs	r2, #83	; 0x53
   190ea:	5c9b      	ldrb	r3, [r3, r2]
   190ec:	061a      	lsls	r2, r3, #24
   190ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190f0:	2152      	movs	r1, #82	; 0x52
   190f2:	5c5b      	ldrb	r3, [r3, r1]
   190f4:	041b      	lsls	r3, r3, #16
   190f6:	4313      	orrs	r3, r2
   190f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   190fa:	2151      	movs	r1, #81	; 0x51
   190fc:	5c52      	ldrb	r2, [r2, r1]
   190fe:	0212      	lsls	r2, r2, #8
   19100:	4313      	orrs	r3, r2
   19102:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19104:	2150      	movs	r1, #80	; 0x50
   19106:	5c52      	ldrb	r2, [r2, r1]
   19108:	4313      	orrs	r3, r2
   1910a:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   1910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1910e:	223f      	movs	r2, #63	; 0x3f
   19110:	5c9b      	ldrb	r3, [r3, r2]
   19112:	021b      	lsls	r3, r3, #8
   19114:	b21a      	sxth	r2, r3
   19116:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19118:	213e      	movs	r1, #62	; 0x3e
   1911a:	5c5b      	ldrb	r3, [r3, r1]
   1911c:	b21b      	sxth	r3, r3
   1911e:	4313      	orrs	r3, r2
   19120:	b21a      	sxth	r2, r3
   19122:	231c      	movs	r3, #28
   19124:	18fb      	adds	r3, r7, r3
   19126:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   19128:	231c      	movs	r3, #28
   1912a:	18fb      	adds	r3, r7, r3
   1912c:	881b      	ldrh	r3, [r3, #0]
   1912e:	2b00      	cmp	r3, #0
   19130:	d101      	bne.n	19136 <chk_mounted+0x31e>
   19132:	230d      	movs	r3, #13
   19134:	e144      	b.n	193c0 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   19136:	231c      	movs	r3, #28
   19138:	18fb      	adds	r3, r7, r3
   1913a:	881a      	ldrh	r2, [r3, #0]
   1913c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1913e:	18d3      	adds	r3, r2, r3
   19140:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19142:	8912      	ldrh	r2, [r2, #8]
   19144:	0912      	lsrs	r2, r2, #4
   19146:	b292      	uxth	r2, r2
   19148:	189b      	adds	r3, r3, r2
   1914a:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   1914c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1914e:	69bb      	ldr	r3, [r7, #24]
   19150:	429a      	cmp	r2, r3
   19152:	d201      	bcs.n	19158 <chk_mounted+0x340>
   19154:	230d      	movs	r3, #13
   19156:	e133      	b.n	193c0 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   19158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1915a:	69bb      	ldr	r3, [r7, #24]
   1915c:	1ad2      	subs	r2, r2, r3
   1915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19160:	789b      	ldrb	r3, [r3, #2]
   19162:	0019      	movs	r1, r3
   19164:	4b08      	ldr	r3, [pc, #32]	; (19188 <chk_mounted+0x370>)
   19166:	0010      	movs	r0, r2
   19168:	4798      	blx	r3
   1916a:	0003      	movs	r3, r0
   1916c:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   1916e:	697b      	ldr	r3, [r7, #20]
   19170:	2b00      	cmp	r3, #0
   19172:	d10b      	bne.n	1918c <chk_mounted+0x374>
   19174:	230d      	movs	r3, #13
   19176:	e123      	b.n	193c0 <chk_mounted+0x5a8>
   19178:	20003d60 	.word	0x20003d60
   1917c:	00016f75 	.word	0x00016f75
   19180:	00016ef1 	.word	0x00016ef1
   19184:	00018d45 	.word	0x00018d45
   19188:	0001e469 	.word	0x0001e469
	fmt = FS_FAT12;
   1918c:	2347      	movs	r3, #71	; 0x47
   1918e:	18fb      	adds	r3, r7, r3
   19190:	2201      	movs	r2, #1
   19192:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   19194:	697b      	ldr	r3, [r7, #20]
   19196:	4a8c      	ldr	r2, [pc, #560]	; (193c8 <chk_mounted+0x5b0>)
   19198:	4293      	cmp	r3, r2
   1919a:	d903      	bls.n	191a4 <chk_mounted+0x38c>
   1919c:	2347      	movs	r3, #71	; 0x47
   1919e:	18fb      	adds	r3, r7, r3
   191a0:	2202      	movs	r2, #2
   191a2:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   191a4:	697b      	ldr	r3, [r7, #20]
   191a6:	4a89      	ldr	r2, [pc, #548]	; (193cc <chk_mounted+0x5b4>)
   191a8:	4293      	cmp	r3, r2
   191aa:	d903      	bls.n	191b4 <chk_mounted+0x39c>
   191ac:	2347      	movs	r3, #71	; 0x47
   191ae:	18fb      	adds	r3, r7, r3
   191b0:	2203      	movs	r2, #3
   191b2:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   191b4:	697b      	ldr	r3, [r7, #20]
   191b6:	1c9a      	adds	r2, r3, #2
   191b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   191ba:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   191bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   191be:	69bb      	ldr	r3, [r7, #24]
   191c0:	18d2      	adds	r2, r2, r3
   191c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   191c4:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   191c6:	231c      	movs	r3, #28
   191c8:	18fb      	adds	r3, r7, r3
   191ca:	881a      	ldrh	r2, [r3, #0]
   191cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   191ce:	18d2      	adds	r2, r2, r3
   191d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   191d2:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   191d4:	2347      	movs	r3, #71	; 0x47
   191d6:	18fb      	adds	r3, r7, r3
   191d8:	781b      	ldrb	r3, [r3, #0]
   191da:	2b03      	cmp	r3, #3
   191dc:	d11e      	bne.n	1921c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   191de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   191e0:	891b      	ldrh	r3, [r3, #8]
   191e2:	2b00      	cmp	r3, #0
   191e4:	d001      	beq.n	191ea <chk_mounted+0x3d2>
   191e6:	230d      	movs	r3, #13
   191e8:	e0ea      	b.n	193c0 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   191ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   191ec:	225f      	movs	r2, #95	; 0x5f
   191ee:	5c9b      	ldrb	r3, [r3, r2]
   191f0:	061a      	lsls	r2, r3, #24
   191f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   191f4:	215e      	movs	r1, #94	; 0x5e
   191f6:	5c5b      	ldrb	r3, [r3, r1]
   191f8:	041b      	lsls	r3, r3, #16
   191fa:	4313      	orrs	r3, r2
   191fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   191fe:	215d      	movs	r1, #93	; 0x5d
   19200:	5c52      	ldrb	r2, [r2, r1]
   19202:	0212      	lsls	r2, r2, #8
   19204:	4313      	orrs	r3, r2
   19206:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19208:	215c      	movs	r1, #92	; 0x5c
   1920a:	5c52      	ldrb	r2, [r2, r1]
   1920c:	431a      	orrs	r2, r3
   1920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19210:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   19212:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19214:	699b      	ldr	r3, [r3, #24]
   19216:	009b      	lsls	r3, r3, #2
   19218:	633b      	str	r3, [r7, #48]	; 0x30
   1921a:	e020      	b.n	1925e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   1921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1921e:	891b      	ldrh	r3, [r3, #8]
   19220:	2b00      	cmp	r3, #0
   19222:	d101      	bne.n	19228 <chk_mounted+0x410>
   19224:	230d      	movs	r3, #13
   19226:	e0cb      	b.n	193c0 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   19228:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1922a:	6a1a      	ldr	r2, [r3, #32]
   1922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1922e:	18d2      	adds	r2, r2, r3
   19230:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19232:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   19234:	2347      	movs	r3, #71	; 0x47
   19236:	18fb      	adds	r3, r7, r3
   19238:	781b      	ldrb	r3, [r3, #0]
   1923a:	2b02      	cmp	r3, #2
   1923c:	d103      	bne.n	19246 <chk_mounted+0x42e>
   1923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19240:	699b      	ldr	r3, [r3, #24]
   19242:	005b      	lsls	r3, r3, #1
   19244:	e00a      	b.n	1925c <chk_mounted+0x444>
   19246:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19248:	699a      	ldr	r2, [r3, #24]
   1924a:	0013      	movs	r3, r2
   1924c:	005b      	lsls	r3, r3, #1
   1924e:	189b      	adds	r3, r3, r2
   19250:	085a      	lsrs	r2, r3, #1
   19252:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19254:	699b      	ldr	r3, [r3, #24]
   19256:	2101      	movs	r1, #1
   19258:	400b      	ands	r3, r1
   1925a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   1925c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19260:	69da      	ldr	r2, [r3, #28]
   19262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19264:	495a      	ldr	r1, [pc, #360]	; (193d0 <chk_mounted+0x5b8>)
   19266:	468c      	mov	ip, r1
   19268:	4463      	add	r3, ip
   1926a:	0a5b      	lsrs	r3, r3, #9
   1926c:	429a      	cmp	r2, r3
   1926e:	d201      	bcs.n	19274 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   19270:	230d      	movs	r3, #13
   19272:	e0a5      	b.n	193c0 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   19274:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19276:	2201      	movs	r2, #1
   19278:	4252      	negs	r2, r2
   1927a:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   1927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1927e:	2200      	movs	r2, #0
   19280:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   19282:	2347      	movs	r3, #71	; 0x47
   19284:	18fb      	adds	r3, r7, r3
   19286:	781b      	ldrb	r3, [r3, #0]
   19288:	2b03      	cmp	r3, #3
   1928a:	d000      	beq.n	1928e <chk_mounted+0x476>
   1928c:	e082      	b.n	19394 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   1928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19290:	2200      	movs	r2, #0
   19292:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   19294:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19296:	2261      	movs	r2, #97	; 0x61
   19298:	5c9b      	ldrb	r3, [r3, r2]
   1929a:	021b      	lsls	r3, r3, #8
   1929c:	b21a      	sxth	r2, r3
   1929e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   192a0:	2160      	movs	r1, #96	; 0x60
   192a2:	5c5b      	ldrb	r3, [r3, r1]
   192a4:	b21b      	sxth	r3, r3
   192a6:	4313      	orrs	r3, r2
   192a8:	b21b      	sxth	r3, r3
   192aa:	b29b      	uxth	r3, r3
   192ac:	001a      	movs	r2, r3
   192ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   192b0:	18d2      	adds	r2, r2, r3
   192b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   192b4:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   192b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   192b8:	7858      	ldrb	r0, [r3, #1]
   192ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   192bc:	3330      	adds	r3, #48	; 0x30
   192be:	0019      	movs	r1, r3
   192c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   192c2:	695a      	ldr	r2, [r3, #20]
   192c4:	2301      	movs	r3, #1
   192c6:	4c43      	ldr	r4, [pc, #268]	; (193d4 <chk_mounted+0x5bc>)
   192c8:	47a0      	blx	r4
   192ca:	1e03      	subs	r3, r0, #0
   192cc:	d162      	bne.n	19394 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   192ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   192d0:	4a41      	ldr	r2, [pc, #260]	; (193d8 <chk_mounted+0x5c0>)
   192d2:	5c9b      	ldrb	r3, [r3, r2]
   192d4:	021b      	lsls	r3, r3, #8
   192d6:	b21a      	sxth	r2, r3
   192d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   192da:	4940      	ldr	r1, [pc, #256]	; (193dc <chk_mounted+0x5c4>)
   192dc:	5c5b      	ldrb	r3, [r3, r1]
   192de:	b21b      	sxth	r3, r3
   192e0:	4313      	orrs	r3, r2
   192e2:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   192e4:	4a3e      	ldr	r2, [pc, #248]	; (193e0 <chk_mounted+0x5c8>)
   192e6:	4293      	cmp	r3, r2
   192e8:	d154      	bne.n	19394 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   192ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   192ec:	2233      	movs	r2, #51	; 0x33
   192ee:	5c9b      	ldrb	r3, [r3, r2]
   192f0:	061a      	lsls	r2, r3, #24
   192f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   192f4:	2132      	movs	r1, #50	; 0x32
   192f6:	5c5b      	ldrb	r3, [r3, r1]
   192f8:	041b      	lsls	r3, r3, #16
   192fa:	4313      	orrs	r3, r2
   192fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   192fe:	2131      	movs	r1, #49	; 0x31
   19300:	5c52      	ldrb	r2, [r2, r1]
   19302:	0212      	lsls	r2, r2, #8
   19304:	4313      	orrs	r3, r2
   19306:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19308:	2130      	movs	r1, #48	; 0x30
   1930a:	5c52      	ldrb	r2, [r2, r1]
   1930c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1930e:	4a35      	ldr	r2, [pc, #212]	; (193e4 <chk_mounted+0x5cc>)
   19310:	4293      	cmp	r3, r2
   19312:	d13f      	bne.n	19394 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   19314:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19316:	4a34      	ldr	r2, [pc, #208]	; (193e8 <chk_mounted+0x5d0>)
   19318:	5c9b      	ldrb	r3, [r3, r2]
   1931a:	061a      	lsls	r2, r3, #24
   1931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1931e:	4933      	ldr	r1, [pc, #204]	; (193ec <chk_mounted+0x5d4>)
   19320:	5c5b      	ldrb	r3, [r3, r1]
   19322:	041b      	lsls	r3, r3, #16
   19324:	4313      	orrs	r3, r2
   19326:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19328:	4931      	ldr	r1, [pc, #196]	; (193f0 <chk_mounted+0x5d8>)
   1932a:	5c52      	ldrb	r2, [r2, r1]
   1932c:	0212      	lsls	r2, r2, #8
   1932e:	4313      	orrs	r3, r2
   19330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   19332:	2285      	movs	r2, #133	; 0x85
   19334:	0092      	lsls	r2, r2, #2
   19336:	5c8a      	ldrb	r2, [r1, r2]
   19338:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   1933a:	4a2e      	ldr	r2, [pc, #184]	; (193f4 <chk_mounted+0x5dc>)
   1933c:	4293      	cmp	r3, r2
   1933e:	d129      	bne.n	19394 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   19340:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19342:	4a2d      	ldr	r2, [pc, #180]	; (193f8 <chk_mounted+0x5e0>)
   19344:	5c9b      	ldrb	r3, [r3, r2]
   19346:	061a      	lsls	r2, r3, #24
   19348:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1934a:	492c      	ldr	r1, [pc, #176]	; (193fc <chk_mounted+0x5e4>)
   1934c:	5c5b      	ldrb	r3, [r3, r1]
   1934e:	041b      	lsls	r3, r3, #16
   19350:	4313      	orrs	r3, r2
   19352:	6aba      	ldr	r2, [r7, #40]	; 0x28
   19354:	492a      	ldr	r1, [pc, #168]	; (19400 <chk_mounted+0x5e8>)
   19356:	5c52      	ldrb	r2, [r2, r1]
   19358:	0212      	lsls	r2, r2, #8
   1935a:	4313      	orrs	r3, r2
   1935c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1935e:	2287      	movs	r2, #135	; 0x87
   19360:	0092      	lsls	r2, r2, #2
   19362:	5c8a      	ldrb	r2, [r1, r2]
   19364:	431a      	orrs	r2, r3
   19366:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19368:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   1936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1936c:	4a25      	ldr	r2, [pc, #148]	; (19404 <chk_mounted+0x5ec>)
   1936e:	5c9b      	ldrb	r3, [r3, r2]
   19370:	061a      	lsls	r2, r3, #24
   19372:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19374:	4924      	ldr	r1, [pc, #144]	; (19408 <chk_mounted+0x5f0>)
   19376:	5c5b      	ldrb	r3, [r3, r1]
   19378:	041b      	lsls	r3, r3, #16
   1937a:	4313      	orrs	r3, r2
   1937c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1937e:	4923      	ldr	r1, [pc, #140]	; (1940c <chk_mounted+0x5f4>)
   19380:	5c52      	ldrb	r2, [r2, r1]
   19382:	0212      	lsls	r2, r2, #8
   19384:	4313      	orrs	r3, r2
   19386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   19388:	2286      	movs	r2, #134	; 0x86
   1938a:	0092      	lsls	r2, r2, #2
   1938c:	5c8a      	ldrb	r2, [r1, r2]
   1938e:	431a      	orrs	r2, r3
   19390:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19392:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   19394:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19396:	2247      	movs	r2, #71	; 0x47
   19398:	18ba      	adds	r2, r7, r2
   1939a:	7812      	ldrb	r2, [r2, #0]
   1939c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   1939e:	4b1c      	ldr	r3, [pc, #112]	; (19410 <chk_mounted+0x5f8>)
   193a0:	881b      	ldrh	r3, [r3, #0]
   193a2:	3301      	adds	r3, #1
   193a4:	b29a      	uxth	r2, r3
   193a6:	4b1a      	ldr	r3, [pc, #104]	; (19410 <chk_mounted+0x5f8>)
   193a8:	801a      	strh	r2, [r3, #0]
   193aa:	4b19      	ldr	r3, [pc, #100]	; (19410 <chk_mounted+0x5f8>)
   193ac:	881a      	ldrh	r2, [r3, #0]
   193ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   193b0:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   193b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   193b4:	2200      	movs	r2, #0
   193b6:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   193b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   193ba:	2200      	movs	r2, #0
   193bc:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   193be:	2300      	movs	r3, #0
}
   193c0:	0018      	movs	r0, r3
   193c2:	46bd      	mov	sp, r7
   193c4:	b013      	add	sp, #76	; 0x4c
   193c6:	bd90      	pop	{r4, r7, pc}
   193c8:	00000ff5 	.word	0x00000ff5
   193cc:	0000fff5 	.word	0x0000fff5
   193d0:	000001ff 	.word	0x000001ff
   193d4:	00016fad 	.word	0x00016fad
   193d8:	0000022f 	.word	0x0000022f
   193dc:	0000022e 	.word	0x0000022e
   193e0:	ffffaa55 	.word	0xffffaa55
   193e4:	41615252 	.word	0x41615252
   193e8:	00000217 	.word	0x00000217
   193ec:	00000216 	.word	0x00000216
   193f0:	00000215 	.word	0x00000215
   193f4:	61417272 	.word	0x61417272
   193f8:	0000021f 	.word	0x0000021f
   193fc:	0000021e 	.word	0x0000021e
   19400:	0000021d 	.word	0x0000021d
   19404:	0000021b 	.word	0x0000021b
   19408:	0000021a 	.word	0x0000021a
   1940c:	00000219 	.word	0x00000219
   19410:	20003d80 	.word	0x20003d80

00019414 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   19414:	b580      	push	{r7, lr}
   19416:	b082      	sub	sp, #8
   19418:	af00      	add	r7, sp, #0
   1941a:	6078      	str	r0, [r7, #4]
   1941c:	000a      	movs	r2, r1
   1941e:	1cbb      	adds	r3, r7, #2
   19420:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   19422:	687b      	ldr	r3, [r7, #4]
   19424:	2b00      	cmp	r3, #0
   19426:	d009      	beq.n	1943c <validate+0x28>
   19428:	687b      	ldr	r3, [r7, #4]
   1942a:	781b      	ldrb	r3, [r3, #0]
   1942c:	2b00      	cmp	r3, #0
   1942e:	d005      	beq.n	1943c <validate+0x28>
   19430:	687b      	ldr	r3, [r7, #4]
   19432:	88db      	ldrh	r3, [r3, #6]
   19434:	1cba      	adds	r2, r7, #2
   19436:	8812      	ldrh	r2, [r2, #0]
   19438:	429a      	cmp	r2, r3
   1943a:	d001      	beq.n	19440 <validate+0x2c>
		return FR_INVALID_OBJECT;
   1943c:	2309      	movs	r3, #9
   1943e:	e00c      	b.n	1945a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   19440:	687b      	ldr	r3, [r7, #4]
   19442:	785b      	ldrb	r3, [r3, #1]
   19444:	0018      	movs	r0, r3
   19446:	4b07      	ldr	r3, [pc, #28]	; (19464 <validate+0x50>)
   19448:	4798      	blx	r3
   1944a:	0003      	movs	r3, r0
   1944c:	001a      	movs	r2, r3
   1944e:	2301      	movs	r3, #1
   19450:	4013      	ands	r3, r2
   19452:	d001      	beq.n	19458 <validate+0x44>
		return FR_NOT_READY;
   19454:	2303      	movs	r3, #3
   19456:	e000      	b.n	1945a <validate+0x46>

	return FR_OK;
   19458:	2300      	movs	r3, #0
}
   1945a:	0018      	movs	r0, r3
   1945c:	46bd      	mov	sp, r7
   1945e:	b002      	add	sp, #8
   19460:	bd80      	pop	{r7, pc}
   19462:	46c0      	nop			; (mov r8, r8)
   19464:	00016f75 	.word	0x00016f75

00019468 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   19468:	b580      	push	{r7, lr}
   1946a:	b084      	sub	sp, #16
   1946c:	af00      	add	r7, sp, #0
   1946e:	0002      	movs	r2, r0
   19470:	6039      	str	r1, [r7, #0]
   19472:	1dfb      	adds	r3, r7, #7
   19474:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   19476:	1dfb      	adds	r3, r7, #7
   19478:	781b      	ldrb	r3, [r3, #0]
   1947a:	2b07      	cmp	r3, #7
   1947c:	d901      	bls.n	19482 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   1947e:	230b      	movs	r3, #11
   19480:	e018      	b.n	194b4 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   19482:	1dfb      	adds	r3, r7, #7
   19484:	781a      	ldrb	r2, [r3, #0]
   19486:	4b0d      	ldr	r3, [pc, #52]	; (194bc <f_mount+0x54>)
   19488:	0092      	lsls	r2, r2, #2
   1948a:	58d3      	ldr	r3, [r2, r3]
   1948c:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   1948e:	68fb      	ldr	r3, [r7, #12]
   19490:	2b00      	cmp	r3, #0
   19492:	d002      	beq.n	1949a <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   19494:	68fb      	ldr	r3, [r7, #12]
   19496:	2200      	movs	r2, #0
   19498:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   1949a:	683b      	ldr	r3, [r7, #0]
   1949c:	2b00      	cmp	r3, #0
   1949e:	d002      	beq.n	194a6 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   194a0:	683b      	ldr	r3, [r7, #0]
   194a2:	2200      	movs	r2, #0
   194a4:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   194a6:	1dfb      	adds	r3, r7, #7
   194a8:	781a      	ldrb	r2, [r3, #0]
   194aa:	4b04      	ldr	r3, [pc, #16]	; (194bc <f_mount+0x54>)
   194ac:	0092      	lsls	r2, r2, #2
   194ae:	6839      	ldr	r1, [r7, #0]
   194b0:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   194b2:	2300      	movs	r3, #0
}
   194b4:	0018      	movs	r0, r3
   194b6:	46bd      	mov	sp, r7
   194b8:	b004      	add	sp, #16
   194ba:	bd80      	pop	{r7, pc}
   194bc:	20003d60 	.word	0x20003d60

000194c0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   194c0:	b590      	push	{r4, r7, lr}
   194c2:	4ce5      	ldr	r4, [pc, #916]	; (19858 <f_open+0x398>)
   194c4:	44a5      	add	sp, r4
   194c6:	af00      	add	r7, sp, #0
   194c8:	60f8      	str	r0, [r7, #12]
   194ca:	60b9      	str	r1, [r7, #8]
   194cc:	4be3      	ldr	r3, [pc, #908]	; (1985c <f_open+0x39c>)
   194ce:	2194      	movs	r1, #148	; 0x94
   194d0:	0089      	lsls	r1, r1, #2
   194d2:	468c      	mov	ip, r1
   194d4:	44bc      	add	ip, r7
   194d6:	4463      	add	r3, ip
   194d8:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   194da:	68fb      	ldr	r3, [r7, #12]
   194dc:	2200      	movs	r2, #0
   194de:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   194e0:	4bde      	ldr	r3, [pc, #888]	; (1985c <f_open+0x39c>)
   194e2:	2294      	movs	r2, #148	; 0x94
   194e4:	0092      	lsls	r2, r2, #2
   194e6:	4694      	mov	ip, r2
   194e8:	44bc      	add	ip, r7
   194ea:	4463      	add	r3, ip
   194ec:	4adb      	ldr	r2, [pc, #876]	; (1985c <f_open+0x39c>)
   194ee:	2194      	movs	r1, #148	; 0x94
   194f0:	0089      	lsls	r1, r1, #2
   194f2:	468c      	mov	ip, r1
   194f4:	44bc      	add	ip, r7
   194f6:	4462      	add	r2, ip
   194f8:	7812      	ldrb	r2, [r2, #0]
   194fa:	211f      	movs	r1, #31
   194fc:	400a      	ands	r2, r1
   194fe:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   19500:	4bd6      	ldr	r3, [pc, #856]	; (1985c <f_open+0x39c>)
   19502:	2294      	movs	r2, #148	; 0x94
   19504:	0092      	lsls	r2, r2, #2
   19506:	4694      	mov	ip, r2
   19508:	44bc      	add	ip, r7
   1950a:	4463      	add	r3, ip
   1950c:	781b      	ldrb	r3, [r3, #0]
   1950e:	2201      	movs	r2, #1
   19510:	4393      	bics	r3, r2
   19512:	b2da      	uxtb	r2, r3
   19514:	4bd2      	ldr	r3, [pc, #840]	; (19860 <f_open+0x3a0>)
   19516:	18fc      	adds	r4, r7, r3
   19518:	2387      	movs	r3, #135	; 0x87
   1951a:	009b      	lsls	r3, r3, #2
   1951c:	18f9      	adds	r1, r7, r3
   1951e:	2308      	movs	r3, #8
   19520:	18fb      	adds	r3, r7, r3
   19522:	0018      	movs	r0, r3
   19524:	4bcf      	ldr	r3, [pc, #828]	; (19864 <f_open+0x3a4>)
   19526:	4798      	blx	r3
   19528:	0003      	movs	r3, r0
   1952a:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   1952c:	2387      	movs	r3, #135	; 0x87
   1952e:	009b      	lsls	r3, r3, #2
   19530:	18fb      	adds	r3, r7, r3
   19532:	2284      	movs	r2, #132	; 0x84
   19534:	0092      	lsls	r2, r2, #2
   19536:	18ba      	adds	r2, r7, r2
   19538:	619a      	str	r2, [r3, #24]
   1953a:	2387      	movs	r3, #135	; 0x87
   1953c:	009b      	lsls	r3, r3, #2
   1953e:	18fb      	adds	r3, r7, r3
   19540:	2210      	movs	r2, #16
   19542:	18ba      	adds	r2, r7, r2
   19544:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   19546:	4bc6      	ldr	r3, [pc, #792]	; (19860 <f_open+0x3a0>)
   19548:	18fb      	adds	r3, r7, r3
   1954a:	781b      	ldrb	r3, [r3, #0]
   1954c:	2b00      	cmp	r3, #0
   1954e:	d10b      	bne.n	19568 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   19550:	68ba      	ldr	r2, [r7, #8]
   19552:	4bc3      	ldr	r3, [pc, #780]	; (19860 <f_open+0x3a0>)
   19554:	18fc      	adds	r4, r7, r3
   19556:	2387      	movs	r3, #135	; 0x87
   19558:	009b      	lsls	r3, r3, #2
   1955a:	18fb      	adds	r3, r7, r3
   1955c:	0011      	movs	r1, r2
   1955e:	0018      	movs	r0, r3
   19560:	4bc1      	ldr	r3, [pc, #772]	; (19868 <f_open+0x3a8>)
   19562:	4798      	blx	r3
   19564:	0003      	movs	r3, r0
   19566:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   19568:	2387      	movs	r3, #135	; 0x87
   1956a:	009b      	lsls	r3, r3, #2
   1956c:	18fb      	adds	r3, r7, r3
   1956e:	695b      	ldr	r3, [r3, #20]
   19570:	2292      	movs	r2, #146	; 0x92
   19572:	0092      	lsls	r2, r2, #2
   19574:	18ba      	adds	r2, r7, r2
   19576:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   19578:	4bb9      	ldr	r3, [pc, #740]	; (19860 <f_open+0x3a0>)
   1957a:	18fb      	adds	r3, r7, r3
   1957c:	781b      	ldrb	r3, [r3, #0]
   1957e:	2b00      	cmp	r3, #0
   19580:	d109      	bne.n	19596 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   19582:	2392      	movs	r3, #146	; 0x92
   19584:	009b      	lsls	r3, r3, #2
   19586:	18fb      	adds	r3, r7, r3
   19588:	681b      	ldr	r3, [r3, #0]
   1958a:	2b00      	cmp	r3, #0
   1958c:	d103      	bne.n	19596 <f_open+0xd6>
			res = FR_INVALID_NAME;
   1958e:	4bb4      	ldr	r3, [pc, #720]	; (19860 <f_open+0x3a0>)
   19590:	18fb      	adds	r3, r7, r3
   19592:	2206      	movs	r2, #6
   19594:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   19596:	4bb1      	ldr	r3, [pc, #708]	; (1985c <f_open+0x39c>)
   19598:	2294      	movs	r2, #148	; 0x94
   1959a:	0092      	lsls	r2, r2, #2
   1959c:	4694      	mov	ip, r2
   1959e:	44bc      	add	ip, r7
   195a0:	4463      	add	r3, ip
   195a2:	781b      	ldrb	r3, [r3, #0]
   195a4:	221c      	movs	r2, #28
   195a6:	4013      	ands	r3, r2
   195a8:	d100      	bne.n	195ac <f_open+0xec>
   195aa:	e141      	b.n	19830 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   195ac:	4bac      	ldr	r3, [pc, #688]	; (19860 <f_open+0x3a0>)
   195ae:	18fb      	adds	r3, r7, r3
   195b0:	781b      	ldrb	r3, [r3, #0]
   195b2:	2b00      	cmp	r3, #0
   195b4:	d027      	beq.n	19606 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   195b6:	4baa      	ldr	r3, [pc, #680]	; (19860 <f_open+0x3a0>)
   195b8:	18fb      	adds	r3, r7, r3
   195ba:	781b      	ldrb	r3, [r3, #0]
   195bc:	2b04      	cmp	r3, #4
   195be:	d109      	bne.n	195d4 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   195c0:	4ba7      	ldr	r3, [pc, #668]	; (19860 <f_open+0x3a0>)
   195c2:	18fc      	adds	r4, r7, r3
   195c4:	2387      	movs	r3, #135	; 0x87
   195c6:	009b      	lsls	r3, r3, #2
   195c8:	18fb      	adds	r3, r7, r3
   195ca:	0018      	movs	r0, r3
   195cc:	4ba7      	ldr	r3, [pc, #668]	; (1986c <f_open+0x3ac>)
   195ce:	4798      	blx	r3
   195d0:	0003      	movs	r3, r0
   195d2:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   195d4:	4ba1      	ldr	r3, [pc, #644]	; (1985c <f_open+0x39c>)
   195d6:	2294      	movs	r2, #148	; 0x94
   195d8:	0092      	lsls	r2, r2, #2
   195da:	4694      	mov	ip, r2
   195dc:	44bc      	add	ip, r7
   195de:	4463      	add	r3, ip
   195e0:	4a9e      	ldr	r2, [pc, #632]	; (1985c <f_open+0x39c>)
   195e2:	2194      	movs	r1, #148	; 0x94
   195e4:	0089      	lsls	r1, r1, #2
   195e6:	468c      	mov	ip, r1
   195e8:	44bc      	add	ip, r7
   195ea:	4462      	add	r2, ip
   195ec:	7812      	ldrb	r2, [r2, #0]
   195ee:	2108      	movs	r1, #8
   195f0:	430a      	orrs	r2, r1
   195f2:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   195f4:	2387      	movs	r3, #135	; 0x87
   195f6:	009b      	lsls	r3, r3, #2
   195f8:	18fb      	adds	r3, r7, r3
   195fa:	695b      	ldr	r3, [r3, #20]
   195fc:	2292      	movs	r2, #146	; 0x92
   195fe:	0092      	lsls	r2, r2, #2
   19600:	18ba      	adds	r2, r7, r2
   19602:	6013      	str	r3, [r2, #0]
   19604:	e01c      	b.n	19640 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   19606:	2392      	movs	r3, #146	; 0x92
   19608:	009b      	lsls	r3, r3, #2
   1960a:	18fb      	adds	r3, r7, r3
   1960c:	681b      	ldr	r3, [r3, #0]
   1960e:	330b      	adds	r3, #11
   19610:	781b      	ldrb	r3, [r3, #0]
   19612:	001a      	movs	r2, r3
   19614:	2311      	movs	r3, #17
   19616:	4013      	ands	r3, r2
   19618:	d004      	beq.n	19624 <f_open+0x164>
				res = FR_DENIED;
   1961a:	4b91      	ldr	r3, [pc, #580]	; (19860 <f_open+0x3a0>)
   1961c:	18fb      	adds	r3, r7, r3
   1961e:	2207      	movs	r2, #7
   19620:	701a      	strb	r2, [r3, #0]
   19622:	e00d      	b.n	19640 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   19624:	4b8d      	ldr	r3, [pc, #564]	; (1985c <f_open+0x39c>)
   19626:	2294      	movs	r2, #148	; 0x94
   19628:	0092      	lsls	r2, r2, #2
   1962a:	4694      	mov	ip, r2
   1962c:	44bc      	add	ip, r7
   1962e:	4463      	add	r3, ip
   19630:	781b      	ldrb	r3, [r3, #0]
   19632:	2204      	movs	r2, #4
   19634:	4013      	ands	r3, r2
   19636:	d003      	beq.n	19640 <f_open+0x180>
					res = FR_EXIST;
   19638:	4b89      	ldr	r3, [pc, #548]	; (19860 <f_open+0x3a0>)
   1963a:	18fb      	adds	r3, r7, r3
   1963c:	2208      	movs	r2, #8
   1963e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   19640:	4b87      	ldr	r3, [pc, #540]	; (19860 <f_open+0x3a0>)
   19642:	18fb      	adds	r3, r7, r3
   19644:	781b      	ldrb	r3, [r3, #0]
   19646:	2b00      	cmp	r3, #0
   19648:	d000      	beq.n	1964c <f_open+0x18c>
   1964a:	e12f      	b.n	198ac <f_open+0x3ec>
   1964c:	4b83      	ldr	r3, [pc, #524]	; (1985c <f_open+0x39c>)
   1964e:	2294      	movs	r2, #148	; 0x94
   19650:	0092      	lsls	r2, r2, #2
   19652:	4694      	mov	ip, r2
   19654:	44bc      	add	ip, r7
   19656:	4463      	add	r3, ip
   19658:	781b      	ldrb	r3, [r3, #0]
   1965a:	2208      	movs	r2, #8
   1965c:	4013      	ands	r3, r2
   1965e:	d100      	bne.n	19662 <f_open+0x1a2>
   19660:	e124      	b.n	198ac <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   19662:	4b83      	ldr	r3, [pc, #524]	; (19870 <f_open+0x3b0>)
   19664:	4798      	blx	r3
   19666:	0003      	movs	r3, r0
   19668:	2291      	movs	r2, #145	; 0x91
   1966a:	0092      	lsls	r2, r2, #2
   1966c:	18ba      	adds	r2, r7, r2
   1966e:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   19670:	2392      	movs	r3, #146	; 0x92
   19672:	009b      	lsls	r3, r3, #2
   19674:	18fb      	adds	r3, r7, r3
   19676:	681b      	ldr	r3, [r3, #0]
   19678:	330e      	adds	r3, #14
   1967a:	2291      	movs	r2, #145	; 0x91
   1967c:	0092      	lsls	r2, r2, #2
   1967e:	18ba      	adds	r2, r7, r2
   19680:	6812      	ldr	r2, [r2, #0]
   19682:	b2d2      	uxtb	r2, r2
   19684:	701a      	strb	r2, [r3, #0]
   19686:	2392      	movs	r3, #146	; 0x92
   19688:	009b      	lsls	r3, r3, #2
   1968a:	18fb      	adds	r3, r7, r3
   1968c:	681b      	ldr	r3, [r3, #0]
   1968e:	330f      	adds	r3, #15
   19690:	2291      	movs	r2, #145	; 0x91
   19692:	0092      	lsls	r2, r2, #2
   19694:	18ba      	adds	r2, r7, r2
   19696:	6812      	ldr	r2, [r2, #0]
   19698:	b292      	uxth	r2, r2
   1969a:	0a12      	lsrs	r2, r2, #8
   1969c:	b292      	uxth	r2, r2
   1969e:	b2d2      	uxtb	r2, r2
   196a0:	701a      	strb	r2, [r3, #0]
   196a2:	2392      	movs	r3, #146	; 0x92
   196a4:	009b      	lsls	r3, r3, #2
   196a6:	18fb      	adds	r3, r7, r3
   196a8:	681b      	ldr	r3, [r3, #0]
   196aa:	3310      	adds	r3, #16
   196ac:	2291      	movs	r2, #145	; 0x91
   196ae:	0092      	lsls	r2, r2, #2
   196b0:	18ba      	adds	r2, r7, r2
   196b2:	6812      	ldr	r2, [r2, #0]
   196b4:	0c12      	lsrs	r2, r2, #16
   196b6:	b2d2      	uxtb	r2, r2
   196b8:	701a      	strb	r2, [r3, #0]
   196ba:	2392      	movs	r3, #146	; 0x92
   196bc:	009b      	lsls	r3, r3, #2
   196be:	18fb      	adds	r3, r7, r3
   196c0:	681b      	ldr	r3, [r3, #0]
   196c2:	3311      	adds	r3, #17
   196c4:	2291      	movs	r2, #145	; 0x91
   196c6:	0092      	lsls	r2, r2, #2
   196c8:	18ba      	adds	r2, r7, r2
   196ca:	6812      	ldr	r2, [r2, #0]
   196cc:	0e12      	lsrs	r2, r2, #24
   196ce:	b2d2      	uxtb	r2, r2
   196d0:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   196d2:	2392      	movs	r3, #146	; 0x92
   196d4:	009b      	lsls	r3, r3, #2
   196d6:	18fb      	adds	r3, r7, r3
   196d8:	681b      	ldr	r3, [r3, #0]
   196da:	330b      	adds	r3, #11
   196dc:	2200      	movs	r2, #0
   196de:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   196e0:	2392      	movs	r3, #146	; 0x92
   196e2:	009b      	lsls	r3, r3, #2
   196e4:	18fb      	adds	r3, r7, r3
   196e6:	681b      	ldr	r3, [r3, #0]
   196e8:	331c      	adds	r3, #28
   196ea:	2200      	movs	r2, #0
   196ec:	701a      	strb	r2, [r3, #0]
   196ee:	2392      	movs	r3, #146	; 0x92
   196f0:	009b      	lsls	r3, r3, #2
   196f2:	18fb      	adds	r3, r7, r3
   196f4:	681b      	ldr	r3, [r3, #0]
   196f6:	331d      	adds	r3, #29
   196f8:	2200      	movs	r2, #0
   196fa:	701a      	strb	r2, [r3, #0]
   196fc:	2392      	movs	r3, #146	; 0x92
   196fe:	009b      	lsls	r3, r3, #2
   19700:	18fb      	adds	r3, r7, r3
   19702:	681b      	ldr	r3, [r3, #0]
   19704:	331e      	adds	r3, #30
   19706:	2200      	movs	r2, #0
   19708:	701a      	strb	r2, [r3, #0]
   1970a:	2392      	movs	r3, #146	; 0x92
   1970c:	009b      	lsls	r3, r3, #2
   1970e:	18fb      	adds	r3, r7, r3
   19710:	681b      	ldr	r3, [r3, #0]
   19712:	331f      	adds	r3, #31
   19714:	2200      	movs	r2, #0
   19716:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   19718:	2392      	movs	r3, #146	; 0x92
   1971a:	009b      	lsls	r3, r3, #2
   1971c:	18fb      	adds	r3, r7, r3
   1971e:	681b      	ldr	r3, [r3, #0]
   19720:	3315      	adds	r3, #21
   19722:	781b      	ldrb	r3, [r3, #0]
   19724:	021b      	lsls	r3, r3, #8
   19726:	b21a      	sxth	r2, r3
   19728:	2392      	movs	r3, #146	; 0x92
   1972a:	009b      	lsls	r3, r3, #2
   1972c:	18fb      	adds	r3, r7, r3
   1972e:	681b      	ldr	r3, [r3, #0]
   19730:	3314      	adds	r3, #20
   19732:	781b      	ldrb	r3, [r3, #0]
   19734:	b21b      	sxth	r3, r3
   19736:	4313      	orrs	r3, r2
   19738:	b21b      	sxth	r3, r3
   1973a:	b29b      	uxth	r3, r3
   1973c:	041b      	lsls	r3, r3, #16
   1973e:	2292      	movs	r2, #146	; 0x92
   19740:	0092      	lsls	r2, r2, #2
   19742:	18ba      	adds	r2, r7, r2
   19744:	6812      	ldr	r2, [r2, #0]
   19746:	321b      	adds	r2, #27
   19748:	7812      	ldrb	r2, [r2, #0]
   1974a:	0212      	lsls	r2, r2, #8
   1974c:	b211      	sxth	r1, r2
   1974e:	2292      	movs	r2, #146	; 0x92
   19750:	0092      	lsls	r2, r2, #2
   19752:	18ba      	adds	r2, r7, r2
   19754:	6812      	ldr	r2, [r2, #0]
   19756:	321a      	adds	r2, #26
   19758:	7812      	ldrb	r2, [r2, #0]
   1975a:	b212      	sxth	r2, r2
   1975c:	430a      	orrs	r2, r1
   1975e:	b212      	sxth	r2, r2
   19760:	b292      	uxth	r2, r2
   19762:	4313      	orrs	r3, r2
   19764:	2290      	movs	r2, #144	; 0x90
   19766:	0092      	lsls	r2, r2, #2
   19768:	18ba      	adds	r2, r7, r2
   1976a:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   1976c:	2392      	movs	r3, #146	; 0x92
   1976e:	009b      	lsls	r3, r3, #2
   19770:	18fb      	adds	r3, r7, r3
   19772:	681b      	ldr	r3, [r3, #0]
   19774:	331a      	adds	r3, #26
   19776:	2200      	movs	r2, #0
   19778:	701a      	strb	r2, [r3, #0]
   1977a:	2392      	movs	r3, #146	; 0x92
   1977c:	009b      	lsls	r3, r3, #2
   1977e:	18fb      	adds	r3, r7, r3
   19780:	681b      	ldr	r3, [r3, #0]
   19782:	331b      	adds	r3, #27
   19784:	2200      	movs	r2, #0
   19786:	701a      	strb	r2, [r3, #0]
   19788:	2392      	movs	r3, #146	; 0x92
   1978a:	009b      	lsls	r3, r3, #2
   1978c:	18fb      	adds	r3, r7, r3
   1978e:	681b      	ldr	r3, [r3, #0]
   19790:	3314      	adds	r3, #20
   19792:	2200      	movs	r2, #0
   19794:	701a      	strb	r2, [r3, #0]
   19796:	2392      	movs	r3, #146	; 0x92
   19798:	009b      	lsls	r3, r3, #2
   1979a:	18fb      	adds	r3, r7, r3
   1979c:	681b      	ldr	r3, [r3, #0]
   1979e:	3315      	adds	r3, #21
   197a0:	2200      	movs	r2, #0
   197a2:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   197a4:	2387      	movs	r3, #135	; 0x87
   197a6:	009b      	lsls	r3, r3, #2
   197a8:	18fb      	adds	r3, r7, r3
   197aa:	681b      	ldr	r3, [r3, #0]
   197ac:	2201      	movs	r2, #1
   197ae:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   197b0:	2390      	movs	r3, #144	; 0x90
   197b2:	009b      	lsls	r3, r3, #2
   197b4:	18fb      	adds	r3, r7, r3
   197b6:	681b      	ldr	r3, [r3, #0]
   197b8:	2b00      	cmp	r3, #0
   197ba:	d100      	bne.n	197be <f_open+0x2fe>
   197bc:	e076      	b.n	198ac <f_open+0x3ec>
				dw = dj.fs->winsect;
   197be:	2387      	movs	r3, #135	; 0x87
   197c0:	009b      	lsls	r3, r3, #2
   197c2:	18fb      	adds	r3, r7, r3
   197c4:	681b      	ldr	r3, [r3, #0]
   197c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   197c8:	2291      	movs	r2, #145	; 0x91
   197ca:	0092      	lsls	r2, r2, #2
   197cc:	18ba      	adds	r2, r7, r2
   197ce:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   197d0:	2387      	movs	r3, #135	; 0x87
   197d2:	009b      	lsls	r3, r3, #2
   197d4:	18fb      	adds	r3, r7, r3
   197d6:	681b      	ldr	r3, [r3, #0]
   197d8:	4a21      	ldr	r2, [pc, #132]	; (19860 <f_open+0x3a0>)
   197da:	18bc      	adds	r4, r7, r2
   197dc:	2290      	movs	r2, #144	; 0x90
   197de:	0092      	lsls	r2, r2, #2
   197e0:	18ba      	adds	r2, r7, r2
   197e2:	6812      	ldr	r2, [r2, #0]
   197e4:	0011      	movs	r1, r2
   197e6:	0018      	movs	r0, r3
   197e8:	4b22      	ldr	r3, [pc, #136]	; (19874 <f_open+0x3b4>)
   197ea:	4798      	blx	r3
   197ec:	0003      	movs	r3, r0
   197ee:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   197f0:	4b1b      	ldr	r3, [pc, #108]	; (19860 <f_open+0x3a0>)
   197f2:	18fb      	adds	r3, r7, r3
   197f4:	781b      	ldrb	r3, [r3, #0]
   197f6:	2b00      	cmp	r3, #0
   197f8:	d158      	bne.n	198ac <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   197fa:	2387      	movs	r3, #135	; 0x87
   197fc:	009b      	lsls	r3, r3, #2
   197fe:	18fb      	adds	r3, r7, r3
   19800:	681b      	ldr	r3, [r3, #0]
   19802:	2290      	movs	r2, #144	; 0x90
   19804:	0092      	lsls	r2, r2, #2
   19806:	18ba      	adds	r2, r7, r2
   19808:	6812      	ldr	r2, [r2, #0]
   1980a:	3a01      	subs	r2, #1
   1980c:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   1980e:	2387      	movs	r3, #135	; 0x87
   19810:	009b      	lsls	r3, r3, #2
   19812:	18fb      	adds	r3, r7, r3
   19814:	681b      	ldr	r3, [r3, #0]
   19816:	4a12      	ldr	r2, [pc, #72]	; (19860 <f_open+0x3a0>)
   19818:	18bc      	adds	r4, r7, r2
   1981a:	2291      	movs	r2, #145	; 0x91
   1981c:	0092      	lsls	r2, r2, #2
   1981e:	18ba      	adds	r2, r7, r2
   19820:	6812      	ldr	r2, [r2, #0]
   19822:	0011      	movs	r1, r2
   19824:	0018      	movs	r0, r3
   19826:	4b14      	ldr	r3, [pc, #80]	; (19878 <f_open+0x3b8>)
   19828:	4798      	blx	r3
   1982a:	0003      	movs	r3, r0
   1982c:	7023      	strb	r3, [r4, #0]
   1982e:	e03d      	b.n	198ac <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   19830:	4b0b      	ldr	r3, [pc, #44]	; (19860 <f_open+0x3a0>)
   19832:	18fb      	adds	r3, r7, r3
   19834:	781b      	ldrb	r3, [r3, #0]
   19836:	2b00      	cmp	r3, #0
   19838:	d138      	bne.n	198ac <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1983a:	2392      	movs	r3, #146	; 0x92
   1983c:	009b      	lsls	r3, r3, #2
   1983e:	18fb      	adds	r3, r7, r3
   19840:	681b      	ldr	r3, [r3, #0]
   19842:	330b      	adds	r3, #11
   19844:	781b      	ldrb	r3, [r3, #0]
   19846:	001a      	movs	r2, r3
   19848:	2310      	movs	r3, #16
   1984a:	4013      	ands	r3, r2
   1984c:	d016      	beq.n	1987c <f_open+0x3bc>
				res = FR_NO_FILE;
   1984e:	4b04      	ldr	r3, [pc, #16]	; (19860 <f_open+0x3a0>)
   19850:	18fb      	adds	r3, r7, r3
   19852:	2204      	movs	r2, #4
   19854:	701a      	strb	r2, [r3, #0]
   19856:	e029      	b.n	198ac <f_open+0x3ec>
   19858:	fffffdac 	.word	0xfffffdac
   1985c:	fffffdb7 	.word	0xfffffdb7
   19860:	0000024f 	.word	0x0000024f
   19864:	00018e19 	.word	0x00018e19
   19868:	00018c0d 	.word	0x00018c0d
   1986c:	0001845d 	.word	0x0001845d
   19870:	00017255 	.word	0x00017255
   19874:	000179d9 	.word	0x000179d9
   19878:	00017399 	.word	0x00017399
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   1987c:	4b5a      	ldr	r3, [pc, #360]	; (199e8 <f_open+0x528>)
   1987e:	2294      	movs	r2, #148	; 0x94
   19880:	0092      	lsls	r2, r2, #2
   19882:	4694      	mov	ip, r2
   19884:	44bc      	add	ip, r7
   19886:	4463      	add	r3, ip
   19888:	781b      	ldrb	r3, [r3, #0]
   1988a:	2202      	movs	r2, #2
   1988c:	4013      	ands	r3, r2
   1988e:	d00d      	beq.n	198ac <f_open+0x3ec>
   19890:	2392      	movs	r3, #146	; 0x92
   19892:	009b      	lsls	r3, r3, #2
   19894:	18fb      	adds	r3, r7, r3
   19896:	681b      	ldr	r3, [r3, #0]
   19898:	330b      	adds	r3, #11
   1989a:	781b      	ldrb	r3, [r3, #0]
   1989c:	001a      	movs	r2, r3
   1989e:	2301      	movs	r3, #1
   198a0:	4013      	ands	r3, r2
   198a2:	d003      	beq.n	198ac <f_open+0x3ec>
					res = FR_DENIED;
   198a4:	4b51      	ldr	r3, [pc, #324]	; (199ec <f_open+0x52c>)
   198a6:	18fb      	adds	r3, r7, r3
   198a8:	2207      	movs	r2, #7
   198aa:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   198ac:	4b4f      	ldr	r3, [pc, #316]	; (199ec <f_open+0x52c>)
   198ae:	18fb      	adds	r3, r7, r3
   198b0:	781b      	ldrb	r3, [r3, #0]
   198b2:	2b00      	cmp	r3, #0
   198b4:	d126      	bne.n	19904 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   198b6:	4b4c      	ldr	r3, [pc, #304]	; (199e8 <f_open+0x528>)
   198b8:	2294      	movs	r2, #148	; 0x94
   198ba:	0092      	lsls	r2, r2, #2
   198bc:	4694      	mov	ip, r2
   198be:	44bc      	add	ip, r7
   198c0:	4463      	add	r3, ip
   198c2:	781b      	ldrb	r3, [r3, #0]
   198c4:	2208      	movs	r2, #8
   198c6:	4013      	ands	r3, r2
   198c8:	d00f      	beq.n	198ea <f_open+0x42a>
			mode |= FA__WRITTEN;
   198ca:	4b47      	ldr	r3, [pc, #284]	; (199e8 <f_open+0x528>)
   198cc:	2294      	movs	r2, #148	; 0x94
   198ce:	0092      	lsls	r2, r2, #2
   198d0:	4694      	mov	ip, r2
   198d2:	44bc      	add	ip, r7
   198d4:	4463      	add	r3, ip
   198d6:	4a44      	ldr	r2, [pc, #272]	; (199e8 <f_open+0x528>)
   198d8:	2194      	movs	r1, #148	; 0x94
   198da:	0089      	lsls	r1, r1, #2
   198dc:	468c      	mov	ip, r1
   198de:	44bc      	add	ip, r7
   198e0:	4462      	add	r2, ip
   198e2:	7812      	ldrb	r2, [r2, #0]
   198e4:	2120      	movs	r1, #32
   198e6:	430a      	orrs	r2, r1
   198e8:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   198ea:	2387      	movs	r3, #135	; 0x87
   198ec:	009b      	lsls	r3, r3, #2
   198ee:	18fb      	adds	r3, r7, r3
   198f0:	681b      	ldr	r3, [r3, #0]
   198f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   198f4:	68fb      	ldr	r3, [r7, #12]
   198f6:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   198f8:	68fb      	ldr	r3, [r7, #12]
   198fa:	2292      	movs	r2, #146	; 0x92
   198fc:	0092      	lsls	r2, r2, #2
   198fe:	18ba      	adds	r2, r7, r2
   19900:	6812      	ldr	r2, [r2, #0]
   19902:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   19904:	4b39      	ldr	r3, [pc, #228]	; (199ec <f_open+0x52c>)
   19906:	18fb      	adds	r3, r7, r3
   19908:	781b      	ldrb	r3, [r3, #0]
   1990a:	2b00      	cmp	r3, #0
   1990c:	d163      	bne.n	199d6 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   1990e:	68fb      	ldr	r3, [r7, #12]
   19910:	4a35      	ldr	r2, [pc, #212]	; (199e8 <f_open+0x528>)
   19912:	2194      	movs	r1, #148	; 0x94
   19914:	0089      	lsls	r1, r1, #2
   19916:	468c      	mov	ip, r1
   19918:	44bc      	add	ip, r7
   1991a:	4462      	add	r2, ip
   1991c:	7812      	ldrb	r2, [r2, #0]
   1991e:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   19920:	2392      	movs	r3, #146	; 0x92
   19922:	009b      	lsls	r3, r3, #2
   19924:	18fb      	adds	r3, r7, r3
   19926:	681b      	ldr	r3, [r3, #0]
   19928:	3315      	adds	r3, #21
   1992a:	781b      	ldrb	r3, [r3, #0]
   1992c:	021b      	lsls	r3, r3, #8
   1992e:	b21a      	sxth	r2, r3
   19930:	2392      	movs	r3, #146	; 0x92
   19932:	009b      	lsls	r3, r3, #2
   19934:	18fb      	adds	r3, r7, r3
   19936:	681b      	ldr	r3, [r3, #0]
   19938:	3314      	adds	r3, #20
   1993a:	781b      	ldrb	r3, [r3, #0]
   1993c:	b21b      	sxth	r3, r3
   1993e:	4313      	orrs	r3, r2
   19940:	b21b      	sxth	r3, r3
   19942:	b29b      	uxth	r3, r3
   19944:	041b      	lsls	r3, r3, #16
   19946:	2292      	movs	r2, #146	; 0x92
   19948:	0092      	lsls	r2, r2, #2
   1994a:	18ba      	adds	r2, r7, r2
   1994c:	6812      	ldr	r2, [r2, #0]
   1994e:	321b      	adds	r2, #27
   19950:	7812      	ldrb	r2, [r2, #0]
   19952:	0212      	lsls	r2, r2, #8
   19954:	b211      	sxth	r1, r2
   19956:	2292      	movs	r2, #146	; 0x92
   19958:	0092      	lsls	r2, r2, #2
   1995a:	18ba      	adds	r2, r7, r2
   1995c:	6812      	ldr	r2, [r2, #0]
   1995e:	321a      	adds	r2, #26
   19960:	7812      	ldrb	r2, [r2, #0]
   19962:	b212      	sxth	r2, r2
   19964:	430a      	orrs	r2, r1
   19966:	b212      	sxth	r2, r2
   19968:	b292      	uxth	r2, r2
   1996a:	431a      	orrs	r2, r3
   1996c:	68fb      	ldr	r3, [r7, #12]
   1996e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   19970:	2392      	movs	r3, #146	; 0x92
   19972:	009b      	lsls	r3, r3, #2
   19974:	18fb      	adds	r3, r7, r3
   19976:	681b      	ldr	r3, [r3, #0]
   19978:	331f      	adds	r3, #31
   1997a:	781b      	ldrb	r3, [r3, #0]
   1997c:	061a      	lsls	r2, r3, #24
   1997e:	2392      	movs	r3, #146	; 0x92
   19980:	009b      	lsls	r3, r3, #2
   19982:	18fb      	adds	r3, r7, r3
   19984:	681b      	ldr	r3, [r3, #0]
   19986:	331e      	adds	r3, #30
   19988:	781b      	ldrb	r3, [r3, #0]
   1998a:	041b      	lsls	r3, r3, #16
   1998c:	4313      	orrs	r3, r2
   1998e:	2292      	movs	r2, #146	; 0x92
   19990:	0092      	lsls	r2, r2, #2
   19992:	18ba      	adds	r2, r7, r2
   19994:	6812      	ldr	r2, [r2, #0]
   19996:	321d      	adds	r2, #29
   19998:	7812      	ldrb	r2, [r2, #0]
   1999a:	0212      	lsls	r2, r2, #8
   1999c:	4313      	orrs	r3, r2
   1999e:	2292      	movs	r2, #146	; 0x92
   199a0:	0092      	lsls	r2, r2, #2
   199a2:	18ba      	adds	r2, r7, r2
   199a4:	6812      	ldr	r2, [r2, #0]
   199a6:	321c      	adds	r2, #28
   199a8:	7812      	ldrb	r2, [r2, #0]
   199aa:	431a      	orrs	r2, r3
   199ac:	68fb      	ldr	r3, [r7, #12]
   199ae:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   199b0:	68fb      	ldr	r3, [r7, #12]
   199b2:	2200      	movs	r2, #0
   199b4:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   199b6:	68fb      	ldr	r3, [r7, #12]
   199b8:	2200      	movs	r2, #0
   199ba:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   199bc:	2387      	movs	r3, #135	; 0x87
   199be:	009b      	lsls	r3, r3, #2
   199c0:	18fb      	adds	r3, r7, r3
   199c2:	681a      	ldr	r2, [r3, #0]
   199c4:	68fb      	ldr	r3, [r7, #12]
   199c6:	601a      	str	r2, [r3, #0]
   199c8:	2387      	movs	r3, #135	; 0x87
   199ca:	009b      	lsls	r3, r3, #2
   199cc:	18fb      	adds	r3, r7, r3
   199ce:	681b      	ldr	r3, [r3, #0]
   199d0:	88da      	ldrh	r2, [r3, #6]
   199d2:	68fb      	ldr	r3, [r7, #12]
   199d4:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   199d6:	4b05      	ldr	r3, [pc, #20]	; (199ec <f_open+0x52c>)
   199d8:	18fb      	adds	r3, r7, r3
   199da:	781b      	ldrb	r3, [r3, #0]
}
   199dc:	0018      	movs	r0, r3
   199de:	46bd      	mov	sp, r7
   199e0:	2395      	movs	r3, #149	; 0x95
   199e2:	009b      	lsls	r3, r3, #2
   199e4:	449d      	add	sp, r3
   199e6:	bd90      	pop	{r4, r7, pc}
   199e8:	fffffdb7 	.word	0xfffffdb7
   199ec:	0000024f 	.word	0x0000024f

000199f0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   199f0:	b590      	push	{r4, r7, lr}
   199f2:	b08b      	sub	sp, #44	; 0x2c
   199f4:	af00      	add	r7, sp, #0
   199f6:	60f8      	str	r0, [r7, #12]
   199f8:	60b9      	str	r1, [r7, #8]
   199fa:	607a      	str	r2, [r7, #4]
   199fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   199fe:	68bb      	ldr	r3, [r7, #8]
   19a00:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   19a02:	683b      	ldr	r3, [r7, #0]
   19a04:	2200      	movs	r2, #0
   19a06:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   19a08:	68fb      	ldr	r3, [r7, #12]
   19a0a:	681a      	ldr	r2, [r3, #0]
   19a0c:	68fb      	ldr	r3, [r7, #12]
   19a0e:	889b      	ldrh	r3, [r3, #4]
   19a10:	2117      	movs	r1, #23
   19a12:	187c      	adds	r4, r7, r1
   19a14:	0019      	movs	r1, r3
   19a16:	0010      	movs	r0, r2
   19a18:	4bc3      	ldr	r3, [pc, #780]	; (19d28 <f_write+0x338>)
   19a1a:	4798      	blx	r3
   19a1c:	0003      	movs	r3, r0
   19a1e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   19a20:	2317      	movs	r3, #23
   19a22:	18fb      	adds	r3, r7, r3
   19a24:	781b      	ldrb	r3, [r3, #0]
   19a26:	2b00      	cmp	r3, #0
   19a28:	d003      	beq.n	19a32 <f_write+0x42>
   19a2a:	2317      	movs	r3, #23
   19a2c:	18fb      	adds	r3, r7, r3
   19a2e:	781b      	ldrb	r3, [r3, #0]
   19a30:	e176      	b.n	19d20 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   19a32:	68fb      	ldr	r3, [r7, #12]
   19a34:	799b      	ldrb	r3, [r3, #6]
   19a36:	b25b      	sxtb	r3, r3
   19a38:	2b00      	cmp	r3, #0
   19a3a:	da01      	bge.n	19a40 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   19a3c:	2302      	movs	r3, #2
   19a3e:	e16f      	b.n	19d20 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   19a40:	68fb      	ldr	r3, [r7, #12]
   19a42:	799b      	ldrb	r3, [r3, #6]
   19a44:	001a      	movs	r2, r3
   19a46:	2302      	movs	r3, #2
   19a48:	4013      	ands	r3, r2
   19a4a:	d101      	bne.n	19a50 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   19a4c:	2307      	movs	r3, #7
   19a4e:	e167      	b.n	19d20 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   19a50:	68fb      	ldr	r3, [r7, #12]
   19a52:	68da      	ldr	r2, [r3, #12]
   19a54:	687b      	ldr	r3, [r7, #4]
   19a56:	18d2      	adds	r2, r2, r3
   19a58:	68fb      	ldr	r3, [r7, #12]
   19a5a:	68db      	ldr	r3, [r3, #12]
   19a5c:	429a      	cmp	r2, r3
   19a5e:	d300      	bcc.n	19a62 <f_write+0x72>
   19a60:	e146      	b.n	19cf0 <f_write+0x300>
   19a62:	2300      	movs	r3, #0
   19a64:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   19a66:	e143      	b.n	19cf0 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   19a68:	68fb      	ldr	r3, [r7, #12]
   19a6a:	689b      	ldr	r3, [r3, #8]
   19a6c:	05db      	lsls	r3, r3, #23
   19a6e:	0ddb      	lsrs	r3, r3, #23
   19a70:	d000      	beq.n	19a74 <f_write+0x84>
   19a72:	e0f6      	b.n	19c62 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   19a74:	68fb      	ldr	r3, [r7, #12]
   19a76:	689b      	ldr	r3, [r3, #8]
   19a78:	0a5b      	lsrs	r3, r3, #9
   19a7a:	b2da      	uxtb	r2, r3
   19a7c:	68fb      	ldr	r3, [r7, #12]
   19a7e:	681b      	ldr	r3, [r3, #0]
   19a80:	789b      	ldrb	r3, [r3, #2]
   19a82:	3b01      	subs	r3, #1
   19a84:	b2d9      	uxtb	r1, r3
   19a86:	2316      	movs	r3, #22
   19a88:	18fb      	adds	r3, r7, r3
   19a8a:	400a      	ands	r2, r1
   19a8c:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   19a8e:	2316      	movs	r3, #22
   19a90:	18fb      	adds	r3, r7, r3
   19a92:	781b      	ldrb	r3, [r3, #0]
   19a94:	2b00      	cmp	r3, #0
   19a96:	d140      	bne.n	19b1a <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   19a98:	68fb      	ldr	r3, [r7, #12]
   19a9a:	689b      	ldr	r3, [r3, #8]
   19a9c:	2b00      	cmp	r3, #0
   19a9e:	d111      	bne.n	19ac4 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   19aa0:	68fb      	ldr	r3, [r7, #12]
   19aa2:	691b      	ldr	r3, [r3, #16]
   19aa4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   19aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19aa8:	2b00      	cmp	r3, #0
   19aaa:	d115      	bne.n	19ad8 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   19aac:	68fb      	ldr	r3, [r7, #12]
   19aae:	681b      	ldr	r3, [r3, #0]
   19ab0:	2100      	movs	r1, #0
   19ab2:	0018      	movs	r0, r3
   19ab4:	4b9d      	ldr	r3, [pc, #628]	; (19d2c <f_write+0x33c>)
   19ab6:	4798      	blx	r3
   19ab8:	0003      	movs	r3, r0
   19aba:	627b      	str	r3, [r7, #36]	; 0x24
   19abc:	68fb      	ldr	r3, [r7, #12]
   19abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   19ac0:	611a      	str	r2, [r3, #16]
   19ac2:	e009      	b.n	19ad8 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   19ac4:	68fb      	ldr	r3, [r7, #12]
   19ac6:	681a      	ldr	r2, [r3, #0]
   19ac8:	68fb      	ldr	r3, [r7, #12]
   19aca:	695b      	ldr	r3, [r3, #20]
   19acc:	0019      	movs	r1, r3
   19ace:	0010      	movs	r0, r2
   19ad0:	4b96      	ldr	r3, [pc, #600]	; (19d2c <f_write+0x33c>)
   19ad2:	4798      	blx	r3
   19ad4:	0003      	movs	r3, r0
   19ad6:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   19ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ada:	2b00      	cmp	r3, #0
   19adc:	d100      	bne.n	19ae0 <f_write+0xf0>
   19ade:	e10c      	b.n	19cfa <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   19ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ae2:	2b01      	cmp	r3, #1
   19ae4:	d109      	bne.n	19afa <f_write+0x10a>
   19ae6:	68fb      	ldr	r3, [r7, #12]
   19ae8:	799b      	ldrb	r3, [r3, #6]
   19aea:	2280      	movs	r2, #128	; 0x80
   19aec:	4252      	negs	r2, r2
   19aee:	4313      	orrs	r3, r2
   19af0:	b2da      	uxtb	r2, r3
   19af2:	68fb      	ldr	r3, [r7, #12]
   19af4:	719a      	strb	r2, [r3, #6]
   19af6:	2302      	movs	r3, #2
   19af8:	e112      	b.n	19d20 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   19afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19afc:	3301      	adds	r3, #1
   19afe:	d109      	bne.n	19b14 <f_write+0x124>
   19b00:	68fb      	ldr	r3, [r7, #12]
   19b02:	799b      	ldrb	r3, [r3, #6]
   19b04:	2280      	movs	r2, #128	; 0x80
   19b06:	4252      	negs	r2, r2
   19b08:	4313      	orrs	r3, r2
   19b0a:	b2da      	uxtb	r2, r3
   19b0c:	68fb      	ldr	r3, [r7, #12]
   19b0e:	719a      	strb	r2, [r3, #6]
   19b10:	2301      	movs	r3, #1
   19b12:	e105      	b.n	19d20 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   19b14:	68fb      	ldr	r3, [r7, #12]
   19b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   19b18:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   19b1a:	68fb      	ldr	r3, [r7, #12]
   19b1c:	681b      	ldr	r3, [r3, #0]
   19b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19b20:	68fb      	ldr	r3, [r7, #12]
   19b22:	699b      	ldr	r3, [r3, #24]
   19b24:	429a      	cmp	r2, r3
   19b26:	d111      	bne.n	19b4c <f_write+0x15c>
   19b28:	68fb      	ldr	r3, [r7, #12]
   19b2a:	681b      	ldr	r3, [r3, #0]
   19b2c:	2100      	movs	r1, #0
   19b2e:	0018      	movs	r0, r3
   19b30:	4b7f      	ldr	r3, [pc, #508]	; (19d30 <f_write+0x340>)
   19b32:	4798      	blx	r3
   19b34:	1e03      	subs	r3, r0, #0
   19b36:	d009      	beq.n	19b4c <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   19b38:	68fb      	ldr	r3, [r7, #12]
   19b3a:	799b      	ldrb	r3, [r3, #6]
   19b3c:	2280      	movs	r2, #128	; 0x80
   19b3e:	4252      	negs	r2, r2
   19b40:	4313      	orrs	r3, r2
   19b42:	b2da      	uxtb	r2, r3
   19b44:	68fb      	ldr	r3, [r7, #12]
   19b46:	719a      	strb	r2, [r3, #6]
   19b48:	2301      	movs	r3, #1
   19b4a:	e0e9      	b.n	19d20 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   19b4c:	68fb      	ldr	r3, [r7, #12]
   19b4e:	681a      	ldr	r2, [r3, #0]
   19b50:	68fb      	ldr	r3, [r7, #12]
   19b52:	695b      	ldr	r3, [r3, #20]
   19b54:	0019      	movs	r1, r3
   19b56:	0010      	movs	r0, r2
   19b58:	4b76      	ldr	r3, [pc, #472]	; (19d34 <f_write+0x344>)
   19b5a:	4798      	blx	r3
   19b5c:	0003      	movs	r3, r0
   19b5e:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   19b60:	693b      	ldr	r3, [r7, #16]
   19b62:	2b00      	cmp	r3, #0
   19b64:	d109      	bne.n	19b7a <f_write+0x18a>
   19b66:	68fb      	ldr	r3, [r7, #12]
   19b68:	799b      	ldrb	r3, [r3, #6]
   19b6a:	2280      	movs	r2, #128	; 0x80
   19b6c:	4252      	negs	r2, r2
   19b6e:	4313      	orrs	r3, r2
   19b70:	b2da      	uxtb	r2, r3
   19b72:	68fb      	ldr	r3, [r7, #12]
   19b74:	719a      	strb	r2, [r3, #6]
   19b76:	2302      	movs	r3, #2
   19b78:	e0d2      	b.n	19d20 <f_write+0x330>
			sect += csect;
   19b7a:	2316      	movs	r3, #22
   19b7c:	18fb      	adds	r3, r7, r3
   19b7e:	781b      	ldrb	r3, [r3, #0]
   19b80:	693a      	ldr	r2, [r7, #16]
   19b82:	18d3      	adds	r3, r2, r3
   19b84:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   19b86:	687b      	ldr	r3, [r7, #4]
   19b88:	0a5b      	lsrs	r3, r3, #9
   19b8a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   19b8c:	69fb      	ldr	r3, [r7, #28]
   19b8e:	2b00      	cmp	r3, #0
   19b90:	d048      	beq.n	19c24 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   19b92:	2316      	movs	r3, #22
   19b94:	18fb      	adds	r3, r7, r3
   19b96:	781a      	ldrb	r2, [r3, #0]
   19b98:	69fb      	ldr	r3, [r7, #28]
   19b9a:	18d2      	adds	r2, r2, r3
   19b9c:	68fb      	ldr	r3, [r7, #12]
   19b9e:	681b      	ldr	r3, [r3, #0]
   19ba0:	789b      	ldrb	r3, [r3, #2]
   19ba2:	429a      	cmp	r2, r3
   19ba4:	d908      	bls.n	19bb8 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   19ba6:	68fb      	ldr	r3, [r7, #12]
   19ba8:	681b      	ldr	r3, [r3, #0]
   19baa:	789b      	ldrb	r3, [r3, #2]
   19bac:	001a      	movs	r2, r3
   19bae:	2316      	movs	r3, #22
   19bb0:	18fb      	adds	r3, r7, r3
   19bb2:	781b      	ldrb	r3, [r3, #0]
   19bb4:	1ad3      	subs	r3, r2, r3
   19bb6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   19bb8:	68fb      	ldr	r3, [r7, #12]
   19bba:	681b      	ldr	r3, [r3, #0]
   19bbc:	7858      	ldrb	r0, [r3, #1]
   19bbe:	69fb      	ldr	r3, [r7, #28]
   19bc0:	b2db      	uxtb	r3, r3
   19bc2:	693a      	ldr	r2, [r7, #16]
   19bc4:	69b9      	ldr	r1, [r7, #24]
   19bc6:	4c5c      	ldr	r4, [pc, #368]	; (19d38 <f_write+0x348>)
   19bc8:	47a0      	blx	r4
   19bca:	1e03      	subs	r3, r0, #0
   19bcc:	d009      	beq.n	19be2 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   19bce:	68fb      	ldr	r3, [r7, #12]
   19bd0:	799b      	ldrb	r3, [r3, #6]
   19bd2:	2280      	movs	r2, #128	; 0x80
   19bd4:	4252      	negs	r2, r2
   19bd6:	4313      	orrs	r3, r2
   19bd8:	b2da      	uxtb	r2, r3
   19bda:	68fb      	ldr	r3, [r7, #12]
   19bdc:	719a      	strb	r2, [r3, #6]
   19bde:	2301      	movs	r3, #1
   19be0:	e09e      	b.n	19d20 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   19be2:	68fb      	ldr	r3, [r7, #12]
   19be4:	681b      	ldr	r3, [r3, #0]
   19be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19be8:	693b      	ldr	r3, [r7, #16]
   19bea:	1ad2      	subs	r2, r2, r3
   19bec:	69fb      	ldr	r3, [r7, #28]
   19bee:	429a      	cmp	r2, r3
   19bf0:	d214      	bcs.n	19c1c <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   19bf2:	68fb      	ldr	r3, [r7, #12]
   19bf4:	681b      	ldr	r3, [r3, #0]
   19bf6:	3330      	adds	r3, #48	; 0x30
   19bf8:	0018      	movs	r0, r3
   19bfa:	68fb      	ldr	r3, [r7, #12]
   19bfc:	681b      	ldr	r3, [r3, #0]
   19bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19c00:	693b      	ldr	r3, [r7, #16]
   19c02:	1ad3      	subs	r3, r2, r3
   19c04:	025b      	lsls	r3, r3, #9
   19c06:	69ba      	ldr	r2, [r7, #24]
   19c08:	18d1      	adds	r1, r2, r3
   19c0a:	2380      	movs	r3, #128	; 0x80
   19c0c:	009b      	lsls	r3, r3, #2
   19c0e:	001a      	movs	r2, r3
   19c10:	4b4a      	ldr	r3, [pc, #296]	; (19d3c <f_write+0x34c>)
   19c12:	4798      	blx	r3
					fp->fs->wflag = 0;
   19c14:	68fb      	ldr	r3, [r7, #12]
   19c16:	681b      	ldr	r3, [r3, #0]
   19c18:	2200      	movs	r2, #0
   19c1a:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   19c1c:	69fb      	ldr	r3, [r7, #28]
   19c1e:	025b      	lsls	r3, r3, #9
   19c20:	623b      	str	r3, [r7, #32]
				continue;
   19c22:	e051      	b.n	19cc8 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   19c24:	68fb      	ldr	r3, [r7, #12]
   19c26:	689a      	ldr	r2, [r3, #8]
   19c28:	68fb      	ldr	r3, [r7, #12]
   19c2a:	68db      	ldr	r3, [r3, #12]
   19c2c:	429a      	cmp	r2, r3
   19c2e:	d315      	bcc.n	19c5c <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   19c30:	68fb      	ldr	r3, [r7, #12]
   19c32:	681b      	ldr	r3, [r3, #0]
   19c34:	2100      	movs	r1, #0
   19c36:	0018      	movs	r0, r3
   19c38:	4b3d      	ldr	r3, [pc, #244]	; (19d30 <f_write+0x340>)
   19c3a:	4798      	blx	r3
   19c3c:	1e03      	subs	r3, r0, #0
   19c3e:	d009      	beq.n	19c54 <f_write+0x264>
   19c40:	68fb      	ldr	r3, [r7, #12]
   19c42:	799b      	ldrb	r3, [r3, #6]
   19c44:	2280      	movs	r2, #128	; 0x80
   19c46:	4252      	negs	r2, r2
   19c48:	4313      	orrs	r3, r2
   19c4a:	b2da      	uxtb	r2, r3
   19c4c:	68fb      	ldr	r3, [r7, #12]
   19c4e:	719a      	strb	r2, [r3, #6]
   19c50:	2301      	movs	r3, #1
   19c52:	e065      	b.n	19d20 <f_write+0x330>
				fp->fs->winsect = sect;
   19c54:	68fb      	ldr	r3, [r7, #12]
   19c56:	681b      	ldr	r3, [r3, #0]
   19c58:	693a      	ldr	r2, [r7, #16]
   19c5a:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   19c5c:	68fb      	ldr	r3, [r7, #12]
   19c5e:	693a      	ldr	r2, [r7, #16]
   19c60:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   19c62:	68fb      	ldr	r3, [r7, #12]
   19c64:	689b      	ldr	r3, [r3, #8]
   19c66:	05db      	lsls	r3, r3, #23
   19c68:	0ddb      	lsrs	r3, r3, #23
   19c6a:	2280      	movs	r2, #128	; 0x80
   19c6c:	0092      	lsls	r2, r2, #2
   19c6e:	1ad3      	subs	r3, r2, r3
   19c70:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   19c72:	6a3a      	ldr	r2, [r7, #32]
   19c74:	687b      	ldr	r3, [r7, #4]
   19c76:	429a      	cmp	r2, r3
   19c78:	d901      	bls.n	19c7e <f_write+0x28e>
   19c7a:	687b      	ldr	r3, [r7, #4]
   19c7c:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   19c7e:	68fb      	ldr	r3, [r7, #12]
   19c80:	681a      	ldr	r2, [r3, #0]
   19c82:	68fb      	ldr	r3, [r7, #12]
   19c84:	699b      	ldr	r3, [r3, #24]
   19c86:	0019      	movs	r1, r3
   19c88:	0010      	movs	r0, r2
   19c8a:	4b29      	ldr	r3, [pc, #164]	; (19d30 <f_write+0x340>)
   19c8c:	4798      	blx	r3
   19c8e:	1e03      	subs	r3, r0, #0
   19c90:	d009      	beq.n	19ca6 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   19c92:	68fb      	ldr	r3, [r7, #12]
   19c94:	799b      	ldrb	r3, [r3, #6]
   19c96:	2280      	movs	r2, #128	; 0x80
   19c98:	4252      	negs	r2, r2
   19c9a:	4313      	orrs	r3, r2
   19c9c:	b2da      	uxtb	r2, r3
   19c9e:	68fb      	ldr	r3, [r7, #12]
   19ca0:	719a      	strb	r2, [r3, #6]
   19ca2:	2301      	movs	r3, #1
   19ca4:	e03c      	b.n	19d20 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   19ca6:	68fb      	ldr	r3, [r7, #12]
   19ca8:	681a      	ldr	r2, [r3, #0]
   19caa:	68fb      	ldr	r3, [r7, #12]
   19cac:	689b      	ldr	r3, [r3, #8]
   19cae:	05db      	lsls	r3, r3, #23
   19cb0:	0ddb      	lsrs	r3, r3, #23
   19cb2:	3330      	adds	r3, #48	; 0x30
   19cb4:	18d3      	adds	r3, r2, r3
   19cb6:	6a3a      	ldr	r2, [r7, #32]
   19cb8:	69b9      	ldr	r1, [r7, #24]
   19cba:	0018      	movs	r0, r3
   19cbc:	4b1f      	ldr	r3, [pc, #124]	; (19d3c <f_write+0x34c>)
   19cbe:	4798      	blx	r3
		fp->fs->wflag = 1;
   19cc0:	68fb      	ldr	r3, [r7, #12]
   19cc2:	681b      	ldr	r3, [r3, #0]
   19cc4:	2201      	movs	r2, #1
   19cc6:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   19cc8:	69ba      	ldr	r2, [r7, #24]
   19cca:	6a3b      	ldr	r3, [r7, #32]
   19ccc:	18d3      	adds	r3, r2, r3
   19cce:	61bb      	str	r3, [r7, #24]
   19cd0:	68fb      	ldr	r3, [r7, #12]
   19cd2:	689a      	ldr	r2, [r3, #8]
   19cd4:	6a3b      	ldr	r3, [r7, #32]
   19cd6:	18d2      	adds	r2, r2, r3
   19cd8:	68fb      	ldr	r3, [r7, #12]
   19cda:	609a      	str	r2, [r3, #8]
   19cdc:	683b      	ldr	r3, [r7, #0]
   19cde:	681a      	ldr	r2, [r3, #0]
   19ce0:	6a3b      	ldr	r3, [r7, #32]
   19ce2:	18d2      	adds	r2, r2, r3
   19ce4:	683b      	ldr	r3, [r7, #0]
   19ce6:	601a      	str	r2, [r3, #0]
   19ce8:	687a      	ldr	r2, [r7, #4]
   19cea:	6a3b      	ldr	r3, [r7, #32]
   19cec:	1ad3      	subs	r3, r2, r3
   19cee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   19cf0:	687b      	ldr	r3, [r7, #4]
   19cf2:	2b00      	cmp	r3, #0
   19cf4:	d000      	beq.n	19cf8 <f_write+0x308>
   19cf6:	e6b7      	b.n	19a68 <f_write+0x78>
   19cf8:	e000      	b.n	19cfc <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   19cfa:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   19cfc:	68fb      	ldr	r3, [r7, #12]
   19cfe:	689a      	ldr	r2, [r3, #8]
   19d00:	68fb      	ldr	r3, [r7, #12]
   19d02:	68db      	ldr	r3, [r3, #12]
   19d04:	429a      	cmp	r2, r3
   19d06:	d903      	bls.n	19d10 <f_write+0x320>
   19d08:	68fb      	ldr	r3, [r7, #12]
   19d0a:	689a      	ldr	r2, [r3, #8]
   19d0c:	68fb      	ldr	r3, [r7, #12]
   19d0e:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   19d10:	68fb      	ldr	r3, [r7, #12]
   19d12:	799b      	ldrb	r3, [r3, #6]
   19d14:	2220      	movs	r2, #32
   19d16:	4313      	orrs	r3, r2
   19d18:	b2da      	uxtb	r2, r3
   19d1a:	68fb      	ldr	r3, [r7, #12]
   19d1c:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   19d1e:	2300      	movs	r3, #0
}
   19d20:	0018      	movs	r0, r3
   19d22:	46bd      	mov	sp, r7
   19d24:	b00b      	add	sp, #44	; 0x2c
   19d26:	bd90      	pop	{r4, r7, pc}
   19d28:	00019415 	.word	0x00019415
   19d2c:	00017aa1 	.word	0x00017aa1
   19d30:	00017399 	.word	0x00017399
   19d34:	000175f9 	.word	0x000175f9
   19d38:	00017085 	.word	0x00017085
   19d3c:	000172b5 	.word	0x000172b5

00019d40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   19d40:	b590      	push	{r4, r7, lr}
   19d42:	b087      	sub	sp, #28
   19d44:	af00      	add	r7, sp, #0
   19d46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   19d48:	687b      	ldr	r3, [r7, #4]
   19d4a:	681a      	ldr	r2, [r3, #0]
   19d4c:	687b      	ldr	r3, [r7, #4]
   19d4e:	889b      	ldrh	r3, [r3, #4]
   19d50:	2117      	movs	r1, #23
   19d52:	187c      	adds	r4, r7, r1
   19d54:	0019      	movs	r1, r3
   19d56:	0010      	movs	r0, r2
   19d58:	4b55      	ldr	r3, [pc, #340]	; (19eb0 <f_sync+0x170>)
   19d5a:	4798      	blx	r3
   19d5c:	0003      	movs	r3, r0
   19d5e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   19d60:	2317      	movs	r3, #23
   19d62:	18fb      	adds	r3, r7, r3
   19d64:	781b      	ldrb	r3, [r3, #0]
   19d66:	2b00      	cmp	r3, #0
   19d68:	d000      	beq.n	19d6c <f_sync+0x2c>
   19d6a:	e09a      	b.n	19ea2 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   19d6c:	687b      	ldr	r3, [r7, #4]
   19d6e:	799b      	ldrb	r3, [r3, #6]
   19d70:	001a      	movs	r2, r3
   19d72:	2320      	movs	r3, #32
   19d74:	4013      	ands	r3, r2
   19d76:	d100      	bne.n	19d7a <f_sync+0x3a>
   19d78:	e093      	b.n	19ea2 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   19d7a:	687b      	ldr	r3, [r7, #4]
   19d7c:	681a      	ldr	r2, [r3, #0]
   19d7e:	687b      	ldr	r3, [r7, #4]
   19d80:	69db      	ldr	r3, [r3, #28]
   19d82:	2117      	movs	r1, #23
   19d84:	187c      	adds	r4, r7, r1
   19d86:	0019      	movs	r1, r3
   19d88:	0010      	movs	r0, r2
   19d8a:	4b4a      	ldr	r3, [pc, #296]	; (19eb4 <f_sync+0x174>)
   19d8c:	4798      	blx	r3
   19d8e:	0003      	movs	r3, r0
   19d90:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   19d92:	2317      	movs	r3, #23
   19d94:	18fb      	adds	r3, r7, r3
   19d96:	781b      	ldrb	r3, [r3, #0]
   19d98:	2b00      	cmp	r3, #0
   19d9a:	d000      	beq.n	19d9e <f_sync+0x5e>
   19d9c:	e081      	b.n	19ea2 <f_sync+0x162>
				dir = fp->dir_ptr;
   19d9e:	687b      	ldr	r3, [r7, #4]
   19da0:	6a1b      	ldr	r3, [r3, #32]
   19da2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   19da4:	693b      	ldr	r3, [r7, #16]
   19da6:	330b      	adds	r3, #11
   19da8:	693a      	ldr	r2, [r7, #16]
   19daa:	320b      	adds	r2, #11
   19dac:	7812      	ldrb	r2, [r2, #0]
   19dae:	2120      	movs	r1, #32
   19db0:	430a      	orrs	r2, r1
   19db2:	b2d2      	uxtb	r2, r2
   19db4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   19db6:	693b      	ldr	r3, [r7, #16]
   19db8:	331c      	adds	r3, #28
   19dba:	001a      	movs	r2, r3
   19dbc:	687b      	ldr	r3, [r7, #4]
   19dbe:	68db      	ldr	r3, [r3, #12]
   19dc0:	b2db      	uxtb	r3, r3
   19dc2:	7013      	strb	r3, [r2, #0]
   19dc4:	693b      	ldr	r3, [r7, #16]
   19dc6:	331d      	adds	r3, #29
   19dc8:	001a      	movs	r2, r3
   19dca:	687b      	ldr	r3, [r7, #4]
   19dcc:	68db      	ldr	r3, [r3, #12]
   19dce:	b29b      	uxth	r3, r3
   19dd0:	0a1b      	lsrs	r3, r3, #8
   19dd2:	b29b      	uxth	r3, r3
   19dd4:	b2db      	uxtb	r3, r3
   19dd6:	7013      	strb	r3, [r2, #0]
   19dd8:	693b      	ldr	r3, [r7, #16]
   19dda:	331e      	adds	r3, #30
   19ddc:	001a      	movs	r2, r3
   19dde:	687b      	ldr	r3, [r7, #4]
   19de0:	68db      	ldr	r3, [r3, #12]
   19de2:	0c1b      	lsrs	r3, r3, #16
   19de4:	b2db      	uxtb	r3, r3
   19de6:	7013      	strb	r3, [r2, #0]
   19de8:	693b      	ldr	r3, [r7, #16]
   19dea:	331f      	adds	r3, #31
   19dec:	001a      	movs	r2, r3
   19dee:	687b      	ldr	r3, [r7, #4]
   19df0:	68db      	ldr	r3, [r3, #12]
   19df2:	0e1b      	lsrs	r3, r3, #24
   19df4:	b2db      	uxtb	r3, r3
   19df6:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   19df8:	693b      	ldr	r3, [r7, #16]
   19dfa:	331a      	adds	r3, #26
   19dfc:	001a      	movs	r2, r3
   19dfe:	687b      	ldr	r3, [r7, #4]
   19e00:	691b      	ldr	r3, [r3, #16]
   19e02:	b2db      	uxtb	r3, r3
   19e04:	7013      	strb	r3, [r2, #0]
   19e06:	693b      	ldr	r3, [r7, #16]
   19e08:	331b      	adds	r3, #27
   19e0a:	001a      	movs	r2, r3
   19e0c:	687b      	ldr	r3, [r7, #4]
   19e0e:	691b      	ldr	r3, [r3, #16]
   19e10:	b29b      	uxth	r3, r3
   19e12:	0a1b      	lsrs	r3, r3, #8
   19e14:	b29b      	uxth	r3, r3
   19e16:	b2db      	uxtb	r3, r3
   19e18:	7013      	strb	r3, [r2, #0]
   19e1a:	693b      	ldr	r3, [r7, #16]
   19e1c:	3314      	adds	r3, #20
   19e1e:	001a      	movs	r2, r3
   19e20:	687b      	ldr	r3, [r7, #4]
   19e22:	691b      	ldr	r3, [r3, #16]
   19e24:	0c1b      	lsrs	r3, r3, #16
   19e26:	b2db      	uxtb	r3, r3
   19e28:	7013      	strb	r3, [r2, #0]
   19e2a:	693b      	ldr	r3, [r7, #16]
   19e2c:	3315      	adds	r3, #21
   19e2e:	001a      	movs	r2, r3
   19e30:	687b      	ldr	r3, [r7, #4]
   19e32:	691b      	ldr	r3, [r3, #16]
   19e34:	0c1b      	lsrs	r3, r3, #16
   19e36:	b29b      	uxth	r3, r3
   19e38:	0a1b      	lsrs	r3, r3, #8
   19e3a:	b29b      	uxth	r3, r3
   19e3c:	b2db      	uxtb	r3, r3
   19e3e:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   19e40:	4b1d      	ldr	r3, [pc, #116]	; (19eb8 <f_sync+0x178>)
   19e42:	4798      	blx	r3
   19e44:	0003      	movs	r3, r0
   19e46:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   19e48:	693b      	ldr	r3, [r7, #16]
   19e4a:	3316      	adds	r3, #22
   19e4c:	68fa      	ldr	r2, [r7, #12]
   19e4e:	b2d2      	uxtb	r2, r2
   19e50:	701a      	strb	r2, [r3, #0]
   19e52:	693b      	ldr	r3, [r7, #16]
   19e54:	3317      	adds	r3, #23
   19e56:	68fa      	ldr	r2, [r7, #12]
   19e58:	b292      	uxth	r2, r2
   19e5a:	0a12      	lsrs	r2, r2, #8
   19e5c:	b292      	uxth	r2, r2
   19e5e:	b2d2      	uxtb	r2, r2
   19e60:	701a      	strb	r2, [r3, #0]
   19e62:	693b      	ldr	r3, [r7, #16]
   19e64:	3318      	adds	r3, #24
   19e66:	68fa      	ldr	r2, [r7, #12]
   19e68:	0c12      	lsrs	r2, r2, #16
   19e6a:	b2d2      	uxtb	r2, r2
   19e6c:	701a      	strb	r2, [r3, #0]
   19e6e:	693b      	ldr	r3, [r7, #16]
   19e70:	3319      	adds	r3, #25
   19e72:	68fa      	ldr	r2, [r7, #12]
   19e74:	0e12      	lsrs	r2, r2, #24
   19e76:	b2d2      	uxtb	r2, r2
   19e78:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   19e7a:	687b      	ldr	r3, [r7, #4]
   19e7c:	799b      	ldrb	r3, [r3, #6]
   19e7e:	2220      	movs	r2, #32
   19e80:	4393      	bics	r3, r2
   19e82:	b2da      	uxtb	r2, r3
   19e84:	687b      	ldr	r3, [r7, #4]
   19e86:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   19e88:	687b      	ldr	r3, [r7, #4]
   19e8a:	681b      	ldr	r3, [r3, #0]
   19e8c:	2201      	movs	r2, #1
   19e8e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   19e90:	687b      	ldr	r3, [r7, #4]
   19e92:	681b      	ldr	r3, [r3, #0]
   19e94:	2217      	movs	r2, #23
   19e96:	18bc      	adds	r4, r7, r2
   19e98:	0018      	movs	r0, r3
   19e9a:	4b08      	ldr	r3, [pc, #32]	; (19ebc <f_sync+0x17c>)
   19e9c:	4798      	blx	r3
   19e9e:	0003      	movs	r3, r0
   19ea0:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   19ea2:	2317      	movs	r3, #23
   19ea4:	18fb      	adds	r3, r7, r3
   19ea6:	781b      	ldrb	r3, [r3, #0]
}
   19ea8:	0018      	movs	r0, r3
   19eaa:	46bd      	mov	sp, r7
   19eac:	b007      	add	sp, #28
   19eae:	bd90      	pop	{r4, r7, pc}
   19eb0:	00019415 	.word	0x00019415
   19eb4:	00017399 	.word	0x00017399
   19eb8:	00017255 	.word	0x00017255
   19ebc:	00017461 	.word	0x00017461

00019ec0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   19ec0:	b590      	push	{r4, r7, lr}
   19ec2:	b085      	sub	sp, #20
   19ec4:	af00      	add	r7, sp, #0
   19ec6:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   19ec8:	230f      	movs	r3, #15
   19eca:	18fc      	adds	r4, r7, r3
   19ecc:	687b      	ldr	r3, [r7, #4]
   19ece:	0018      	movs	r0, r3
   19ed0:	4b09      	ldr	r3, [pc, #36]	; (19ef8 <f_close+0x38>)
   19ed2:	4798      	blx	r3
   19ed4:	0003      	movs	r3, r0
   19ed6:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   19ed8:	230f      	movs	r3, #15
   19eda:	18fb      	adds	r3, r7, r3
   19edc:	781b      	ldrb	r3, [r3, #0]
   19ede:	2b00      	cmp	r3, #0
   19ee0:	d102      	bne.n	19ee8 <f_close+0x28>
   19ee2:	687b      	ldr	r3, [r7, #4]
   19ee4:	2200      	movs	r2, #0
   19ee6:	601a      	str	r2, [r3, #0]
	return res;
   19ee8:	230f      	movs	r3, #15
   19eea:	18fb      	adds	r3, r7, r3
   19eec:	781b      	ldrb	r3, [r3, #0]
#endif
}
   19eee:	0018      	movs	r0, r3
   19ef0:	46bd      	mov	sp, r7
   19ef2:	b005      	add	sp, #20
   19ef4:	bd90      	pop	{r4, r7, pc}
   19ef6:	46c0      	nop			; (mov r8, r8)
   19ef8:	00019d41 	.word	0x00019d41

00019efc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   19efc:	b580      	push	{r7, lr}
   19efe:	b084      	sub	sp, #16
   19f00:	af00      	add	r7, sp, #0
   19f02:	0002      	movs	r2, r0
   19f04:	6039      	str	r1, [r7, #0]
   19f06:	1dbb      	adds	r3, r7, #6
   19f08:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   19f0a:	1dbb      	adds	r3, r7, #6
   19f0c:	881b      	ldrh	r3, [r3, #0]
   19f0e:	2b7f      	cmp	r3, #127	; 0x7f
   19f10:	d805      	bhi.n	19f1e <ff_convert+0x22>
		c = src;
   19f12:	230e      	movs	r3, #14
   19f14:	18fb      	adds	r3, r7, r3
   19f16:	1dba      	adds	r2, r7, #6
   19f18:	8812      	ldrh	r2, [r2, #0]
   19f1a:	801a      	strh	r2, [r3, #0]
   19f1c:	e03a      	b.n	19f94 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   19f1e:	683b      	ldr	r3, [r7, #0]
   19f20:	2b00      	cmp	r3, #0
   19f22:	d010      	beq.n	19f46 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   19f24:	1dbb      	adds	r3, r7, #6
   19f26:	881b      	ldrh	r3, [r3, #0]
   19f28:	2bff      	cmp	r3, #255	; 0xff
   19f2a:	d807      	bhi.n	19f3c <ff_convert+0x40>
   19f2c:	1dbb      	adds	r3, r7, #6
   19f2e:	881b      	ldrh	r3, [r3, #0]
   19f30:	3b80      	subs	r3, #128	; 0x80
   19f32:	001a      	movs	r2, r3
   19f34:	4b1b      	ldr	r3, [pc, #108]	; (19fa4 <ff_convert+0xa8>)
   19f36:	0052      	lsls	r2, r2, #1
   19f38:	5ad2      	ldrh	r2, [r2, r3]
   19f3a:	e000      	b.n	19f3e <ff_convert+0x42>
   19f3c:	2200      	movs	r2, #0
   19f3e:	230e      	movs	r3, #14
   19f40:	18fb      	adds	r3, r7, r3
   19f42:	801a      	strh	r2, [r3, #0]
   19f44:	e026      	b.n	19f94 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   19f46:	230e      	movs	r3, #14
   19f48:	18fb      	adds	r3, r7, r3
   19f4a:	2200      	movs	r2, #0
   19f4c:	801a      	strh	r2, [r3, #0]
   19f4e:	e010      	b.n	19f72 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   19f50:	230e      	movs	r3, #14
   19f52:	18fb      	adds	r3, r7, r3
   19f54:	881a      	ldrh	r2, [r3, #0]
   19f56:	4b13      	ldr	r3, [pc, #76]	; (19fa4 <ff_convert+0xa8>)
   19f58:	0052      	lsls	r2, r2, #1
   19f5a:	5ad3      	ldrh	r3, [r2, r3]
   19f5c:	1dba      	adds	r2, r7, #6
   19f5e:	8812      	ldrh	r2, [r2, #0]
   19f60:	429a      	cmp	r2, r3
   19f62:	d00c      	beq.n	19f7e <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   19f64:	230e      	movs	r3, #14
   19f66:	18fb      	adds	r3, r7, r3
   19f68:	881a      	ldrh	r2, [r3, #0]
   19f6a:	230e      	movs	r3, #14
   19f6c:	18fb      	adds	r3, r7, r3
   19f6e:	3201      	adds	r2, #1
   19f70:	801a      	strh	r2, [r3, #0]
   19f72:	230e      	movs	r3, #14
   19f74:	18fb      	adds	r3, r7, r3
   19f76:	881b      	ldrh	r3, [r3, #0]
   19f78:	2b7f      	cmp	r3, #127	; 0x7f
   19f7a:	d9e9      	bls.n	19f50 <ff_convert+0x54>
   19f7c:	e000      	b.n	19f80 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   19f7e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   19f80:	230e      	movs	r3, #14
   19f82:	18fb      	adds	r3, r7, r3
   19f84:	881b      	ldrh	r3, [r3, #0]
   19f86:	3380      	adds	r3, #128	; 0x80
   19f88:	b29a      	uxth	r2, r3
   19f8a:	230e      	movs	r3, #14
   19f8c:	18fb      	adds	r3, r7, r3
   19f8e:	21ff      	movs	r1, #255	; 0xff
   19f90:	400a      	ands	r2, r1
   19f92:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   19f94:	230e      	movs	r3, #14
   19f96:	18fb      	adds	r3, r7, r3
   19f98:	881b      	ldrh	r3, [r3, #0]
}
   19f9a:	0018      	movs	r0, r3
   19f9c:	46bd      	mov	sp, r7
   19f9e:	b004      	add	sp, #16
   19fa0:	bd80      	pop	{r7, pc}
   19fa2:	46c0      	nop			; (mov r8, r8)
   19fa4:	00024a50 	.word	0x00024a50

00019fa8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   19fa8:	b580      	push	{r7, lr}
   19faa:	b084      	sub	sp, #16
   19fac:	af00      	add	r7, sp, #0
   19fae:	0002      	movs	r2, r0
   19fb0:	1dbb      	adds	r3, r7, #6
   19fb2:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   19fb4:	2300      	movs	r3, #0
   19fb6:	60fb      	str	r3, [r7, #12]
   19fb8:	e002      	b.n	19fc0 <ff_wtoupper+0x18>
   19fba:	68fb      	ldr	r3, [r7, #12]
   19fbc:	3301      	adds	r3, #1
   19fbe:	60fb      	str	r3, [r7, #12]
   19fc0:	4b0f      	ldr	r3, [pc, #60]	; (1a000 <ff_wtoupper+0x58>)
   19fc2:	68fa      	ldr	r2, [r7, #12]
   19fc4:	0052      	lsls	r2, r2, #1
   19fc6:	5ad3      	ldrh	r3, [r2, r3]
   19fc8:	2b00      	cmp	r3, #0
   19fca:	d007      	beq.n	19fdc <ff_wtoupper+0x34>
   19fcc:	4b0c      	ldr	r3, [pc, #48]	; (1a000 <ff_wtoupper+0x58>)
   19fce:	68fa      	ldr	r2, [r7, #12]
   19fd0:	0052      	lsls	r2, r2, #1
   19fd2:	5ad3      	ldrh	r3, [r2, r3]
   19fd4:	1dba      	adds	r2, r7, #6
   19fd6:	8812      	ldrh	r2, [r2, #0]
   19fd8:	429a      	cmp	r2, r3
   19fda:	d1ee      	bne.n	19fba <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   19fdc:	4b08      	ldr	r3, [pc, #32]	; (1a000 <ff_wtoupper+0x58>)
   19fde:	68fa      	ldr	r2, [r7, #12]
   19fe0:	0052      	lsls	r2, r2, #1
   19fe2:	5ad3      	ldrh	r3, [r2, r3]
   19fe4:	2b00      	cmp	r3, #0
   19fe6:	d004      	beq.n	19ff2 <ff_wtoupper+0x4a>
   19fe8:	4b06      	ldr	r3, [pc, #24]	; (1a004 <ff_wtoupper+0x5c>)
   19fea:	68fa      	ldr	r2, [r7, #12]
   19fec:	0052      	lsls	r2, r2, #1
   19fee:	5ad3      	ldrh	r3, [r2, r3]
   19ff0:	e001      	b.n	19ff6 <ff_wtoupper+0x4e>
   19ff2:	1dbb      	adds	r3, r7, #6
   19ff4:	881b      	ldrh	r3, [r3, #0]
}
   19ff6:	0018      	movs	r0, r3
   19ff8:	46bd      	mov	sp, r7
   19ffa:	b004      	add	sp, #16
   19ffc:	bd80      	pop	{r7, pc}
   19ffe:	46c0      	nop			; (mov r8, r8)
   1a000:	00024b50 	.word	0x00024b50
   1a004:	00024d30 	.word	0x00024d30

0001a008 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   1a008:	b580      	push	{r7, lr}
   1a00a:	b084      	sub	sp, #16
   1a00c:	af00      	add	r7, sp, #0
   1a00e:	60f8      	str	r0, [r7, #12]
   1a010:	60b9      	str	r1, [r7, #8]
   1a012:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   1a014:	68fb      	ldr	r3, [r7, #12]
   1a016:	68ba      	ldr	r2, [r7, #8]
   1a018:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   1a01a:	68fb      	ldr	r3, [r7, #12]
   1a01c:	687a      	ldr	r2, [r7, #4]
   1a01e:	601a      	str	r2, [r3, #0]
}
   1a020:	46c0      	nop			; (mov r8, r8)
   1a022:	46bd      	mov	sp, r7
   1a024:	b004      	add	sp, #16
   1a026:	bd80      	pop	{r7, pc}

0001a028 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   1a028:	b580      	push	{r7, lr}
   1a02a:	b082      	sub	sp, #8
   1a02c:	af00      	add	r7, sp, #0
   1a02e:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1a030:	687b      	ldr	r3, [r7, #4]
   1a032:	681b      	ldr	r3, [r3, #0]
   1a034:	4a07      	ldr	r2, [pc, #28]	; (1a054 <getNextPacketId+0x2c>)
   1a036:	4293      	cmp	r3, r2
   1a038:	d003      	beq.n	1a042 <getNextPacketId+0x1a>
   1a03a:	687b      	ldr	r3, [r7, #4]
   1a03c:	681b      	ldr	r3, [r3, #0]
   1a03e:	1c5a      	adds	r2, r3, #1
   1a040:	e000      	b.n	1a044 <getNextPacketId+0x1c>
   1a042:	2201      	movs	r2, #1
   1a044:	687b      	ldr	r3, [r7, #4]
   1a046:	601a      	str	r2, [r3, #0]
   1a048:	687b      	ldr	r3, [r7, #4]
   1a04a:	681b      	ldr	r3, [r3, #0]
}
   1a04c:	0018      	movs	r0, r3
   1a04e:	46bd      	mov	sp, r7
   1a050:	b002      	add	sp, #8
   1a052:	bd80      	pop	{r7, pc}
   1a054:	0000ffff 	.word	0x0000ffff

0001a058 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   1a058:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a05a:	b087      	sub	sp, #28
   1a05c:	af00      	add	r7, sp, #0
   1a05e:	60f8      	str	r0, [r7, #12]
   1a060:	60b9      	str	r1, [r7, #8]
   1a062:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   1a064:	2301      	movs	r3, #1
   1a066:	425b      	negs	r3, r3
   1a068:	617b      	str	r3, [r7, #20]
        sent = 0;
   1a06a:	2300      	movs	r3, #0
   1a06c:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   1a06e:	e01a      	b.n	1a0a6 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1a070:	68fb      	ldr	r3, [r7, #12]
   1a072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1a074:	68dc      	ldr	r4, [r3, #12]
   1a076:	68fb      	ldr	r3, [r7, #12]
   1a078:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1a07a:	68fb      	ldr	r3, [r7, #12]
   1a07c:	691a      	ldr	r2, [r3, #16]
   1a07e:	693b      	ldr	r3, [r7, #16]
   1a080:	18d6      	adds	r6, r2, r3
   1a082:	687b      	ldr	r3, [r7, #4]
   1a084:	0018      	movs	r0, r3
   1a086:	4b1a      	ldr	r3, [pc, #104]	; (1a0f0 <sendPacket+0x98>)
   1a088:	4798      	blx	r3
   1a08a:	0003      	movs	r3, r0
   1a08c:	68ba      	ldr	r2, [r7, #8]
   1a08e:	0031      	movs	r1, r6
   1a090:	0028      	movs	r0, r5
   1a092:	47a0      	blx	r4
   1a094:	0003      	movs	r3, r0
   1a096:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   1a098:	697b      	ldr	r3, [r7, #20]
   1a09a:	2b00      	cmp	r3, #0
   1a09c:	db0e      	blt.n	1a0bc <sendPacket+0x64>
            break;
        sent += rc;
   1a09e:	693a      	ldr	r2, [r7, #16]
   1a0a0:	697b      	ldr	r3, [r7, #20]
   1a0a2:	18d3      	adds	r3, r2, r3
   1a0a4:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   1a0a6:	693a      	ldr	r2, [r7, #16]
   1a0a8:	68bb      	ldr	r3, [r7, #8]
   1a0aa:	429a      	cmp	r2, r3
   1a0ac:	da07      	bge.n	1a0be <sendPacket+0x66>
   1a0ae:	687b      	ldr	r3, [r7, #4]
   1a0b0:	0018      	movs	r0, r3
   1a0b2:	4b10      	ldr	r3, [pc, #64]	; (1a0f4 <sendPacket+0x9c>)
   1a0b4:	4798      	blx	r3
   1a0b6:	1e03      	subs	r3, r0, #0
   1a0b8:	d0da      	beq.n	1a070 <sendPacket+0x18>
   1a0ba:	e000      	b.n	1a0be <sendPacket+0x66>
            break;
   1a0bc:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   1a0be:	693a      	ldr	r2, [r7, #16]
   1a0c0:	68bb      	ldr	r3, [r7, #8]
   1a0c2:	429a      	cmp	r2, r3
   1a0c4:	d10b      	bne.n	1a0de <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   1a0c6:	68fb      	ldr	r3, [r7, #12]
   1a0c8:	3354      	adds	r3, #84	; 0x54
   1a0ca:	001a      	movs	r2, r3
   1a0cc:	68fb      	ldr	r3, [r7, #12]
   1a0ce:	699b      	ldr	r3, [r3, #24]
   1a0d0:	0019      	movs	r1, r3
   1a0d2:	0010      	movs	r0, r2
   1a0d4:	4b08      	ldr	r3, [pc, #32]	; (1a0f8 <sendPacket+0xa0>)
   1a0d6:	4798      	blx	r3
        rc = SUCCESS;
   1a0d8:	2300      	movs	r3, #0
   1a0da:	617b      	str	r3, [r7, #20]
   1a0dc:	e002      	b.n	1a0e4 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   1a0de:	2301      	movs	r3, #1
   1a0e0:	425b      	negs	r3, r3
   1a0e2:	617b      	str	r3, [r7, #20]
    return rc;
   1a0e4:	697b      	ldr	r3, [r7, #20]
}
   1a0e6:	0018      	movs	r0, r3
   1a0e8:	46bd      	mov	sp, r7
   1a0ea:	b007      	add	sp, #28
   1a0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a0ee:	46c0      	nop			; (mov r8, r8)
   1a0f0:	0001aeb9 	.word	0x0001aeb9
   1a0f4:	0001ae3d 	.word	0x0001ae3d
   1a0f8:	0001ae91 	.word	0x0001ae91

0001a0fc <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   1a0fc:	b580      	push	{r7, lr}
   1a0fe:	b086      	sub	sp, #24
   1a100:	af00      	add	r7, sp, #0
   1a102:	60f8      	str	r0, [r7, #12]
   1a104:	60b9      	str	r1, [r7, #8]
   1a106:	607a      	str	r2, [r7, #4]
   1a108:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   1a10a:	68fb      	ldr	r3, [r7, #12]
   1a10c:	68ba      	ldr	r2, [r7, #8]
   1a10e:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1a110:	2300      	movs	r3, #0
   1a112:	617b      	str	r3, [r7, #20]
   1a114:	e00a      	b.n	1a12c <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   1a116:	68fa      	ldr	r2, [r7, #12]
   1a118:	697b      	ldr	r3, [r7, #20]
   1a11a:	3304      	adds	r3, #4
   1a11c:	00db      	lsls	r3, r3, #3
   1a11e:	18d3      	adds	r3, r2, r3
   1a120:	3304      	adds	r3, #4
   1a122:	2200      	movs	r2, #0
   1a124:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1a126:	697b      	ldr	r3, [r7, #20]
   1a128:	3301      	adds	r3, #1
   1a12a:	617b      	str	r3, [r7, #20]
   1a12c:	697b      	ldr	r3, [r7, #20]
   1a12e:	2b04      	cmp	r3, #4
   1a130:	ddf1      	ble.n	1a116 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   1a132:	68fb      	ldr	r3, [r7, #12]
   1a134:	687a      	ldr	r2, [r7, #4]
   1a136:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   1a138:	68fb      	ldr	r3, [r7, #12]
   1a13a:	683a      	ldr	r2, [r7, #0]
   1a13c:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   1a13e:	68fb      	ldr	r3, [r7, #12]
   1a140:	6a3a      	ldr	r2, [r7, #32]
   1a142:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   1a144:	68fb      	ldr	r3, [r7, #12]
   1a146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1a148:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   1a14a:	68fb      	ldr	r3, [r7, #12]
   1a14c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a14e:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   1a150:	68fb      	ldr	r3, [r7, #12]
   1a152:	2200      	movs	r2, #0
   1a154:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   1a156:	68fb      	ldr	r3, [r7, #12]
   1a158:	2200      	movs	r2, #0
   1a15a:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   1a15c:	68fb      	ldr	r3, [r7, #12]
   1a15e:	2200      	movs	r2, #0
   1a160:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   1a162:	68fb      	ldr	r3, [r7, #12]
   1a164:	2201      	movs	r2, #1
   1a166:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   1a168:	68fb      	ldr	r3, [r7, #12]
   1a16a:	3354      	adds	r3, #84	; 0x54
   1a16c:	0018      	movs	r0, r3
   1a16e:	4b03      	ldr	r3, [pc, #12]	; (1a17c <MQTTClientInit+0x80>)
   1a170:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   1a172:	46c0      	nop			; (mov r8, r8)
   1a174:	46bd      	mov	sp, r7
   1a176:	b006      	add	sp, #24
   1a178:	bd80      	pop	{r7, pc}
   1a17a:	46c0      	nop			; (mov r8, r8)
   1a17c:	0001aee1 	.word	0x0001aee1

0001a180 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   1a180:	b590      	push	{r4, r7, lr}
   1a182:	b08b      	sub	sp, #44	; 0x2c
   1a184:	af00      	add	r7, sp, #0
   1a186:	60f8      	str	r0, [r7, #12]
   1a188:	60b9      	str	r1, [r7, #8]
   1a18a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   1a18c:	2301      	movs	r3, #1
   1a18e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   1a190:	2300      	movs	r3, #0
   1a192:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   1a194:	2304      	movs	r3, #4
   1a196:	61fb      	str	r3, [r7, #28]

    *value = 0;
   1a198:	68bb      	ldr	r3, [r7, #8]
   1a19a:	2200      	movs	r2, #0
   1a19c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   1a19e:	2301      	movs	r3, #1
   1a1a0:	425b      	negs	r3, r3
   1a1a2:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1a1a4:	6a3b      	ldr	r3, [r7, #32]
   1a1a6:	3301      	adds	r3, #1
   1a1a8:	623b      	str	r3, [r7, #32]
   1a1aa:	6a3a      	ldr	r2, [r7, #32]
   1a1ac:	69fb      	ldr	r3, [r7, #28]
   1a1ae:	429a      	cmp	r2, r3
   1a1b0:	dd03      	ble.n	1a1ba <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   1a1b2:	2301      	movs	r3, #1
   1a1b4:	425b      	negs	r3, r3
   1a1b6:	61bb      	str	r3, [r7, #24]
            goto exit;
   1a1b8:	e026      	b.n	1a208 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   1a1ba:	68fb      	ldr	r3, [r7, #12]
   1a1bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1a1be:	689c      	ldr	r4, [r3, #8]
   1a1c0:	68fb      	ldr	r3, [r7, #12]
   1a1c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
   1a1c4:	687b      	ldr	r3, [r7, #4]
   1a1c6:	2217      	movs	r2, #23
   1a1c8:	18b9      	adds	r1, r7, r2
   1a1ca:	2201      	movs	r2, #1
   1a1cc:	47a0      	blx	r4
   1a1ce:	0003      	movs	r3, r0
   1a1d0:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   1a1d2:	69bb      	ldr	r3, [r7, #24]
   1a1d4:	2b01      	cmp	r3, #1
   1a1d6:	d116      	bne.n	1a206 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   1a1d8:	68bb      	ldr	r3, [r7, #8]
   1a1da:	681a      	ldr	r2, [r3, #0]
   1a1dc:	2317      	movs	r3, #23
   1a1de:	18fb      	adds	r3, r7, r3
   1a1e0:	781b      	ldrb	r3, [r3, #0]
   1a1e2:	0019      	movs	r1, r3
   1a1e4:	237f      	movs	r3, #127	; 0x7f
   1a1e6:	400b      	ands	r3, r1
   1a1e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1a1ea:	434b      	muls	r3, r1
   1a1ec:	18d2      	adds	r2, r2, r3
   1a1ee:	68bb      	ldr	r3, [r7, #8]
   1a1f0:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   1a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1f4:	01db      	lsls	r3, r3, #7
   1a1f6:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   1a1f8:	2317      	movs	r3, #23
   1a1fa:	18fb      	adds	r3, r7, r3
   1a1fc:	781b      	ldrb	r3, [r3, #0]
   1a1fe:	b25b      	sxtb	r3, r3
   1a200:	2b00      	cmp	r3, #0
   1a202:	dbcc      	blt.n	1a19e <decodePacket+0x1e>
   1a204:	e000      	b.n	1a208 <decodePacket+0x88>
            goto exit;
   1a206:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   1a208:	6a3b      	ldr	r3, [r7, #32]
}
   1a20a:	0018      	movs	r0, r3
   1a20c:	46bd      	mov	sp, r7
   1a20e:	b00b      	add	sp, #44	; 0x2c
   1a210:	bd90      	pop	{r4, r7, pc}
	...

0001a214 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   1a214:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a216:	46c6      	mov	lr, r8
   1a218:	b500      	push	{lr}
   1a21a:	b086      	sub	sp, #24
   1a21c:	af00      	add	r7, sp, #0
   1a21e:	6078      	str	r0, [r7, #4]
   1a220:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   1a222:	2301      	movs	r3, #1
   1a224:	425b      	negs	r3, r3
   1a226:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   1a228:	2300      	movs	r3, #0
   1a22a:	60fb      	str	r3, [r7, #12]
    int len = 0;
   1a22c:	2300      	movs	r3, #0
   1a22e:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   1a230:	2300      	movs	r3, #0
   1a232:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   1a234:	687b      	ldr	r3, [r7, #4]
   1a236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1a238:	689c      	ldr	r4, [r3, #8]
   1a23a:	687b      	ldr	r3, [r7, #4]
   1a23c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1a23e:	687b      	ldr	r3, [r7, #4]
   1a240:	695e      	ldr	r6, [r3, #20]
   1a242:	683b      	ldr	r3, [r7, #0]
   1a244:	0018      	movs	r0, r3
   1a246:	4b2b      	ldr	r3, [pc, #172]	; (1a2f4 <readPacket+0xe0>)
   1a248:	4798      	blx	r3
   1a24a:	0003      	movs	r3, r0
   1a24c:	2201      	movs	r2, #1
   1a24e:	0031      	movs	r1, r6
   1a250:	0028      	movs	r0, r5
   1a252:	47a0      	blx	r4
   1a254:	0003      	movs	r3, r0
   1a256:	2b01      	cmp	r3, #1
   1a258:	d141      	bne.n	1a2de <readPacket+0xca>
        goto exit;

    len = 1;
   1a25a:	2301      	movs	r3, #1
   1a25c:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   1a25e:	683b      	ldr	r3, [r7, #0]
   1a260:	0018      	movs	r0, r3
   1a262:	4b24      	ldr	r3, [pc, #144]	; (1a2f4 <readPacket+0xe0>)
   1a264:	4798      	blx	r3
   1a266:	0002      	movs	r2, r0
   1a268:	2308      	movs	r3, #8
   1a26a:	18f9      	adds	r1, r7, r3
   1a26c:	687b      	ldr	r3, [r7, #4]
   1a26e:	0018      	movs	r0, r3
   1a270:	4b21      	ldr	r3, [pc, #132]	; (1a2f8 <readPacket+0xe4>)
   1a272:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1a274:	687b      	ldr	r3, [r7, #4]
   1a276:	695b      	ldr	r3, [r3, #20]
   1a278:	3301      	adds	r3, #1
   1a27a:	68ba      	ldr	r2, [r7, #8]
   1a27c:	0011      	movs	r1, r2
   1a27e:	0018      	movs	r0, r3
   1a280:	4b1e      	ldr	r3, [pc, #120]	; (1a2fc <readPacket+0xe8>)
   1a282:	4798      	blx	r3
   1a284:	0002      	movs	r2, r0
   1a286:	693b      	ldr	r3, [r7, #16]
   1a288:	189b      	adds	r3, r3, r2
   1a28a:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   1a28c:	68bb      	ldr	r3, [r7, #8]
   1a28e:	2b00      	cmp	r3, #0
   1a290:	dd17      	ble.n	1a2c2 <readPacket+0xae>
   1a292:	687b      	ldr	r3, [r7, #4]
   1a294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1a296:	689c      	ldr	r4, [r3, #8]
   1a298:	687b      	ldr	r3, [r7, #4]
   1a29a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   1a29c:	687b      	ldr	r3, [r7, #4]
   1a29e:	695a      	ldr	r2, [r3, #20]
   1a2a0:	693b      	ldr	r3, [r7, #16]
   1a2a2:	18d6      	adds	r6, r2, r3
   1a2a4:	68bb      	ldr	r3, [r7, #8]
   1a2a6:	4698      	mov	r8, r3
   1a2a8:	683b      	ldr	r3, [r7, #0]
   1a2aa:	0018      	movs	r0, r3
   1a2ac:	4b11      	ldr	r3, [pc, #68]	; (1a2f4 <readPacket+0xe0>)
   1a2ae:	4798      	blx	r3
   1a2b0:	0003      	movs	r3, r0
   1a2b2:	4642      	mov	r2, r8
   1a2b4:	0031      	movs	r1, r6
   1a2b6:	0028      	movs	r0, r5
   1a2b8:	47a0      	blx	r4
   1a2ba:	0002      	movs	r2, r0
   1a2bc:	68bb      	ldr	r3, [r7, #8]
   1a2be:	429a      	cmp	r2, r3
   1a2c0:	d10f      	bne.n	1a2e2 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   1a2c2:	687b      	ldr	r3, [r7, #4]
   1a2c4:	695b      	ldr	r3, [r3, #20]
   1a2c6:	781a      	ldrb	r2, [r3, #0]
   1a2c8:	230c      	movs	r3, #12
   1a2ca:	18fb      	adds	r3, r7, r3
   1a2cc:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   1a2ce:	230c      	movs	r3, #12
   1a2d0:	18fb      	adds	r3, r7, r3
   1a2d2:	781b      	ldrb	r3, [r3, #0]
   1a2d4:	061b      	lsls	r3, r3, #24
   1a2d6:	0f1b      	lsrs	r3, r3, #28
   1a2d8:	b2db      	uxtb	r3, r3
   1a2da:	617b      	str	r3, [r7, #20]
   1a2dc:	e002      	b.n	1a2e4 <readPacket+0xd0>
        goto exit;
   1a2de:	46c0      	nop			; (mov r8, r8)
   1a2e0:	e000      	b.n	1a2e4 <readPacket+0xd0>
        goto exit;
   1a2e2:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   1a2e4:	697b      	ldr	r3, [r7, #20]
}
   1a2e6:	0018      	movs	r0, r3
   1a2e8:	46bd      	mov	sp, r7
   1a2ea:	b006      	add	sp, #24
   1a2ec:	bc04      	pop	{r2}
   1a2ee:	4690      	mov	r8, r2
   1a2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a2f2:	46c0      	nop			; (mov r8, r8)
   1a2f4:	0001aeb9 	.word	0x0001aeb9
   1a2f8:	0001a181 	.word	0x0001a181
   1a2fc:	0001bc91 	.word	0x0001bc91

0001a300 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   1a300:	b580      	push	{r7, lr}
   1a302:	b086      	sub	sp, #24
   1a304:	af00      	add	r7, sp, #0
   1a306:	6078      	str	r0, [r7, #4]
   1a308:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   1a30a:	687b      	ldr	r3, [r7, #4]
   1a30c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   1a30e:	683b      	ldr	r3, [r7, #0]
   1a310:	689b      	ldr	r3, [r3, #8]
   1a312:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   1a314:	683b      	ldr	r3, [r7, #0]
   1a316:	685b      	ldr	r3, [r3, #4]
   1a318:	001a      	movs	r2, r3
   1a31a:	693b      	ldr	r3, [r7, #16]
   1a31c:	189b      	adds	r3, r3, r2
   1a31e:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   1a320:	e039      	b.n	1a396 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   1a322:	693b      	ldr	r3, [r7, #16]
   1a324:	781b      	ldrb	r3, [r3, #0]
   1a326:	2b2f      	cmp	r3, #47	; 0x2f
   1a328:	d103      	bne.n	1a332 <isTopicMatched+0x32>
   1a32a:	697b      	ldr	r3, [r7, #20]
   1a32c:	781b      	ldrb	r3, [r3, #0]
   1a32e:	2b2f      	cmp	r3, #47	; 0x2f
   1a330:	d13a      	bne.n	1a3a8 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   1a332:	697b      	ldr	r3, [r7, #20]
   1a334:	781b      	ldrb	r3, [r3, #0]
   1a336:	2b2b      	cmp	r3, #43	; 0x2b
   1a338:	d009      	beq.n	1a34e <isTopicMatched+0x4e>
   1a33a:	697b      	ldr	r3, [r7, #20]
   1a33c:	781b      	ldrb	r3, [r3, #0]
   1a33e:	2b23      	cmp	r3, #35	; 0x23
   1a340:	d005      	beq.n	1a34e <isTopicMatched+0x4e>
   1a342:	697b      	ldr	r3, [r7, #20]
   1a344:	781a      	ldrb	r2, [r3, #0]
   1a346:	693b      	ldr	r3, [r7, #16]
   1a348:	781b      	ldrb	r3, [r3, #0]
   1a34a:	429a      	cmp	r2, r3
   1a34c:	d12e      	bne.n	1a3ac <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   1a34e:	697b      	ldr	r3, [r7, #20]
   1a350:	781b      	ldrb	r3, [r3, #0]
   1a352:	2b2b      	cmp	r3, #43	; 0x2b
   1a354:	d112      	bne.n	1a37c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   1a356:	693b      	ldr	r3, [r7, #16]
   1a358:	3301      	adds	r3, #1
   1a35a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1a35c:	e005      	b.n	1a36a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   1a35e:	693b      	ldr	r3, [r7, #16]
   1a360:	3301      	adds	r3, #1
   1a362:	613b      	str	r3, [r7, #16]
   1a364:	693b      	ldr	r3, [r7, #16]
   1a366:	3301      	adds	r3, #1
   1a368:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   1a36a:	68fa      	ldr	r2, [r7, #12]
   1a36c:	68bb      	ldr	r3, [r7, #8]
   1a36e:	429a      	cmp	r2, r3
   1a370:	d20b      	bcs.n	1a38a <isTopicMatched+0x8a>
   1a372:	68fb      	ldr	r3, [r7, #12]
   1a374:	781b      	ldrb	r3, [r3, #0]
   1a376:	2b2f      	cmp	r3, #47	; 0x2f
   1a378:	d1f1      	bne.n	1a35e <isTopicMatched+0x5e>
   1a37a:	e006      	b.n	1a38a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   1a37c:	697b      	ldr	r3, [r7, #20]
   1a37e:	781b      	ldrb	r3, [r3, #0]
   1a380:	2b23      	cmp	r3, #35	; 0x23
   1a382:	d102      	bne.n	1a38a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   1a384:	68bb      	ldr	r3, [r7, #8]
   1a386:	3b01      	subs	r3, #1
   1a388:	613b      	str	r3, [r7, #16]
        curf++;
   1a38a:	697b      	ldr	r3, [r7, #20]
   1a38c:	3301      	adds	r3, #1
   1a38e:	617b      	str	r3, [r7, #20]
        curn++;
   1a390:	693b      	ldr	r3, [r7, #16]
   1a392:	3301      	adds	r3, #1
   1a394:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   1a396:	697b      	ldr	r3, [r7, #20]
   1a398:	781b      	ldrb	r3, [r3, #0]
   1a39a:	2b00      	cmp	r3, #0
   1a39c:	d007      	beq.n	1a3ae <isTopicMatched+0xae>
   1a39e:	693a      	ldr	r2, [r7, #16]
   1a3a0:	68bb      	ldr	r3, [r7, #8]
   1a3a2:	429a      	cmp	r2, r3
   1a3a4:	d3bd      	bcc.n	1a322 <isTopicMatched+0x22>
   1a3a6:	e002      	b.n	1a3ae <isTopicMatched+0xae>
            break;
   1a3a8:	46c0      	nop			; (mov r8, r8)
   1a3aa:	e000      	b.n	1a3ae <isTopicMatched+0xae>
            break;
   1a3ac:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   1a3ae:	693a      	ldr	r2, [r7, #16]
   1a3b0:	68bb      	ldr	r3, [r7, #8]
   1a3b2:	429a      	cmp	r2, r3
   1a3b4:	d105      	bne.n	1a3c2 <isTopicMatched+0xc2>
   1a3b6:	697b      	ldr	r3, [r7, #20]
   1a3b8:	781b      	ldrb	r3, [r3, #0]
   1a3ba:	2b00      	cmp	r3, #0
   1a3bc:	d101      	bne.n	1a3c2 <isTopicMatched+0xc2>
   1a3be:	2301      	movs	r3, #1
   1a3c0:	e000      	b.n	1a3c4 <isTopicMatched+0xc4>
   1a3c2:	2300      	movs	r3, #0
   1a3c4:	b2db      	uxtb	r3, r3
}
   1a3c6:	0018      	movs	r0, r3
   1a3c8:	46bd      	mov	sp, r7
   1a3ca:	b006      	add	sp, #24
   1a3cc:	bd80      	pop	{r7, pc}
	...

0001a3d0 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   1a3d0:	b580      	push	{r7, lr}
   1a3d2:	b08a      	sub	sp, #40	; 0x28
   1a3d4:	af00      	add	r7, sp, #0
   1a3d6:	60f8      	str	r0, [r7, #12]
   1a3d8:	60b9      	str	r1, [r7, #8]
   1a3da:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   1a3dc:	2301      	movs	r3, #1
   1a3de:	425b      	negs	r3, r3
   1a3e0:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1a3e2:	2300      	movs	r3, #0
   1a3e4:	627b      	str	r3, [r7, #36]	; 0x24
   1a3e6:	e044      	b.n	1a472 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1a3e8:	68fa      	ldr	r2, [r7, #12]
   1a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a3ec:	3304      	adds	r3, #4
   1a3ee:	00db      	lsls	r3, r3, #3
   1a3f0:	18d3      	adds	r3, r2, r3
   1a3f2:	3304      	adds	r3, #4
   1a3f4:	681b      	ldr	r3, [r3, #0]
   1a3f6:	2b00      	cmp	r3, #0
   1a3f8:	d038      	beq.n	1a46c <deliverMessage+0x9c>
   1a3fa:	68fa      	ldr	r2, [r7, #12]
   1a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a3fe:	3304      	adds	r3, #4
   1a400:	00db      	lsls	r3, r3, #3
   1a402:	18d3      	adds	r3, r2, r3
   1a404:	3304      	adds	r3, #4
   1a406:	681a      	ldr	r2, [r3, #0]
   1a408:	68bb      	ldr	r3, [r7, #8]
   1a40a:	0011      	movs	r1, r2
   1a40c:	0018      	movs	r0, r3
   1a40e:	4b28      	ldr	r3, [pc, #160]	; (1a4b0 <deliverMessage+0xe0>)
   1a410:	4798      	blx	r3
   1a412:	1e03      	subs	r3, r0, #0
   1a414:	d10d      	bne.n	1a432 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   1a416:	68fa      	ldr	r2, [r7, #12]
   1a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a41a:	3304      	adds	r3, #4
   1a41c:	00db      	lsls	r3, r3, #3
   1a41e:	18d3      	adds	r3, r2, r3
   1a420:	3304      	adds	r3, #4
   1a422:	681b      	ldr	r3, [r3, #0]
   1a424:	68ba      	ldr	r2, [r7, #8]
   1a426:	0011      	movs	r1, r2
   1a428:	0018      	movs	r0, r3
   1a42a:	4b22      	ldr	r3, [pc, #136]	; (1a4b4 <deliverMessage+0xe4>)
   1a42c:	4798      	blx	r3
   1a42e:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1a430:	d01c      	beq.n	1a46c <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   1a432:	68fa      	ldr	r2, [r7, #12]
   1a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a436:	3304      	adds	r3, #4
   1a438:	00db      	lsls	r3, r3, #3
   1a43a:	18d3      	adds	r3, r2, r3
   1a43c:	3308      	adds	r3, #8
   1a43e:	681b      	ldr	r3, [r3, #0]
   1a440:	2b00      	cmp	r3, #0
   1a442:	d013      	beq.n	1a46c <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   1a444:	687a      	ldr	r2, [r7, #4]
   1a446:	68b9      	ldr	r1, [r7, #8]
   1a448:	2318      	movs	r3, #24
   1a44a:	18fb      	adds	r3, r7, r3
   1a44c:	0018      	movs	r0, r3
   1a44e:	4b1a      	ldr	r3, [pc, #104]	; (1a4b8 <deliverMessage+0xe8>)
   1a450:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   1a452:	68fa      	ldr	r2, [r7, #12]
   1a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a456:	3304      	adds	r3, #4
   1a458:	00db      	lsls	r3, r3, #3
   1a45a:	18d3      	adds	r3, r2, r3
   1a45c:	3308      	adds	r3, #8
   1a45e:	681b      	ldr	r3, [r3, #0]
   1a460:	2218      	movs	r2, #24
   1a462:	18ba      	adds	r2, r7, r2
   1a464:	0010      	movs	r0, r2
   1a466:	4798      	blx	r3
                rc = SUCCESS;
   1a468:	2300      	movs	r3, #0
   1a46a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a46e:	3301      	adds	r3, #1
   1a470:	627b      	str	r3, [r7, #36]	; 0x24
   1a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a474:	2b04      	cmp	r3, #4
   1a476:	ddb7      	ble.n	1a3e8 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   1a478:	6a3b      	ldr	r3, [r7, #32]
   1a47a:	3301      	adds	r3, #1
   1a47c:	d112      	bne.n	1a4a4 <deliverMessage+0xd4>
   1a47e:	68fb      	ldr	r3, [r7, #12]
   1a480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a482:	2b00      	cmp	r3, #0
   1a484:	d00e      	beq.n	1a4a4 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   1a486:	687a      	ldr	r2, [r7, #4]
   1a488:	68b9      	ldr	r1, [r7, #8]
   1a48a:	2310      	movs	r3, #16
   1a48c:	18fb      	adds	r3, r7, r3
   1a48e:	0018      	movs	r0, r3
   1a490:	4b09      	ldr	r3, [pc, #36]	; (1a4b8 <deliverMessage+0xe8>)
   1a492:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   1a494:	68fb      	ldr	r3, [r7, #12]
   1a496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a498:	2210      	movs	r2, #16
   1a49a:	18ba      	adds	r2, r7, r2
   1a49c:	0010      	movs	r0, r2
   1a49e:	4798      	blx	r3
        rc = SUCCESS;
   1a4a0:	2300      	movs	r3, #0
   1a4a2:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   1a4a4:	6a3b      	ldr	r3, [r7, #32]
}
   1a4a6:	0018      	movs	r0, r3
   1a4a8:	46bd      	mov	sp, r7
   1a4aa:	b00a      	add	sp, #40	; 0x28
   1a4ac:	bd80      	pop	{r7, pc}
   1a4ae:	46c0      	nop			; (mov r8, r8)
   1a4b0:	0001c0a5 	.word	0x0001c0a5
   1a4b4:	0001a301 	.word	0x0001a301
   1a4b8:	0001a009 	.word	0x0001a009

0001a4bc <keepalive>:


int keepalive(MQTTClient* c)
{
   1a4bc:	b580      	push	{r7, lr}
   1a4be:	b088      	sub	sp, #32
   1a4c0:	af00      	add	r7, sp, #0
   1a4c2:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1a4c4:	2301      	movs	r3, #1
   1a4c6:	425b      	negs	r3, r3
   1a4c8:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   1a4ca:	687b      	ldr	r3, [r7, #4]
   1a4cc:	699b      	ldr	r3, [r3, #24]
   1a4ce:	2b00      	cmp	r3, #0
   1a4d0:	d102      	bne.n	1a4d8 <keepalive+0x1c>
    {
        rc = SUCCESS;
   1a4d2:	2300      	movs	r3, #0
   1a4d4:	61fb      	str	r3, [r7, #28]
        goto exit;
   1a4d6:	e033      	b.n	1a540 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   1a4d8:	687b      	ldr	r3, [r7, #4]
   1a4da:	3354      	adds	r3, #84	; 0x54
   1a4dc:	0018      	movs	r0, r3
   1a4de:	4b1b      	ldr	r3, [pc, #108]	; (1a54c <keepalive+0x90>)
   1a4e0:	4798      	blx	r3
   1a4e2:	1e03      	subs	r3, r0, #0
   1a4e4:	d02c      	beq.n	1a540 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   1a4e6:	687b      	ldr	r3, [r7, #4]
   1a4e8:	7f1b      	ldrb	r3, [r3, #28]
   1a4ea:	2b00      	cmp	r3, #0
   1a4ec:	d128      	bne.n	1a540 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   1a4ee:	230c      	movs	r3, #12
   1a4f0:	18fb      	adds	r3, r7, r3
   1a4f2:	0018      	movs	r0, r3
   1a4f4:	4b16      	ldr	r3, [pc, #88]	; (1a550 <keepalive+0x94>)
   1a4f6:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   1a4f8:	23fa      	movs	r3, #250	; 0xfa
   1a4fa:	009a      	lsls	r2, r3, #2
   1a4fc:	230c      	movs	r3, #12
   1a4fe:	18fb      	adds	r3, r7, r3
   1a500:	0011      	movs	r1, r2
   1a502:	0018      	movs	r0, r3
   1a504:	4b13      	ldr	r3, [pc, #76]	; (1a554 <keepalive+0x98>)
   1a506:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   1a508:	687b      	ldr	r3, [r7, #4]
   1a50a:	691a      	ldr	r2, [r3, #16]
   1a50c:	687b      	ldr	r3, [r7, #4]
   1a50e:	689b      	ldr	r3, [r3, #8]
   1a510:	0019      	movs	r1, r3
   1a512:	0010      	movs	r0, r2
   1a514:	4b10      	ldr	r3, [pc, #64]	; (1a558 <keepalive+0x9c>)
   1a516:	4798      	blx	r3
   1a518:	0003      	movs	r3, r0
   1a51a:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   1a51c:	69bb      	ldr	r3, [r7, #24]
   1a51e:	2b00      	cmp	r3, #0
   1a520:	dd0e      	ble.n	1a540 <keepalive+0x84>
   1a522:	230c      	movs	r3, #12
   1a524:	18fa      	adds	r2, r7, r3
   1a526:	69b9      	ldr	r1, [r7, #24]
   1a528:	687b      	ldr	r3, [r7, #4]
   1a52a:	0018      	movs	r0, r3
   1a52c:	4b0b      	ldr	r3, [pc, #44]	; (1a55c <keepalive+0xa0>)
   1a52e:	4798      	blx	r3
   1a530:	0003      	movs	r3, r0
   1a532:	61fb      	str	r3, [r7, #28]
   1a534:	69fb      	ldr	r3, [r7, #28]
   1a536:	2b00      	cmp	r3, #0
   1a538:	d102      	bne.n	1a540 <keepalive+0x84>
                c->ping_outstanding = 1;
   1a53a:	687b      	ldr	r3, [r7, #4]
   1a53c:	2201      	movs	r2, #1
   1a53e:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   1a540:	69fb      	ldr	r3, [r7, #28]
}
   1a542:	0018      	movs	r0, r3
   1a544:	46bd      	mov	sp, r7
   1a546:	b008      	add	sp, #32
   1a548:	bd80      	pop	{r7, pc}
   1a54a:	46c0      	nop			; (mov r8, r8)
   1a54c:	0001ae3d 	.word	0x0001ae3d
   1a550:	0001aee1 	.word	0x0001aee1
   1a554:	0001ae69 	.word	0x0001ae69
   1a558:	0001bab5 	.word	0x0001bab5
   1a55c:	0001a059 	.word	0x0001a059

0001a560 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   1a560:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a562:	b095      	sub	sp, #84	; 0x54
   1a564:	af06      	add	r7, sp, #24
   1a566:	6078      	str	r0, [r7, #4]
   1a568:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   1a56a:	683a      	ldr	r2, [r7, #0]
   1a56c:	687b      	ldr	r3, [r7, #4]
   1a56e:	0011      	movs	r1, r2
   1a570:	0018      	movs	r0, r3
   1a572:	4b70      	ldr	r3, [pc, #448]	; (1a734 <cycle+0x1d4>)
   1a574:	4798      	blx	r3
   1a576:	0002      	movs	r2, r0
   1a578:	232e      	movs	r3, #46	; 0x2e
   1a57a:	18fb      	adds	r3, r7, r3
   1a57c:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   1a57e:	2300      	movs	r3, #0
   1a580:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   1a582:	2300      	movs	r3, #0
   1a584:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   1a586:	232e      	movs	r3, #46	; 0x2e
   1a588:	18fb      	adds	r3, r7, r3
   1a58a:	881b      	ldrh	r3, [r3, #0]
   1a58c:	2b0d      	cmp	r3, #13
   1a58e:	d900      	bls.n	1a592 <cycle+0x32>
   1a590:	e0bd      	b.n	1a70e <cycle+0x1ae>
   1a592:	009a      	lsls	r2, r3, #2
   1a594:	4b68      	ldr	r3, [pc, #416]	; (1a738 <cycle+0x1d8>)
   1a596:	18d3      	adds	r3, r2, r3
   1a598:	681b      	ldr	r3, [r3, #0]
   1a59a:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1a59c:	687b      	ldr	r3, [r7, #4]
   1a59e:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   1a5a0:	687b      	ldr	r3, [r7, #4]
   1a5a2:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1a5a4:	001e      	movs	r6, r3
   1a5a6:	2310      	movs	r3, #16
   1a5a8:	18fb      	adds	r3, r7, r3
   1a5aa:	1d1d      	adds	r5, r3, #4
   1a5ac:	2310      	movs	r3, #16
   1a5ae:	18fb      	adds	r3, r7, r3
   1a5b0:	1c5c      	adds	r4, r3, #1
   1a5b2:	230c      	movs	r3, #12
   1a5b4:	18f9      	adds	r1, r7, r3
   1a5b6:	2310      	movs	r3, #16
   1a5b8:	18fb      	adds	r3, r7, r3
   1a5ba:	1c98      	adds	r0, r3, #2
   1a5bc:	9604      	str	r6, [sp, #16]
   1a5be:	9203      	str	r2, [sp, #12]
   1a5c0:	2310      	movs	r3, #16
   1a5c2:	18fb      	adds	r3, r7, r3
   1a5c4:	330c      	adds	r3, #12
   1a5c6:	9302      	str	r3, [sp, #8]
   1a5c8:	2310      	movs	r3, #16
   1a5ca:	18fb      	adds	r3, r7, r3
   1a5cc:	3308      	adds	r3, #8
   1a5ce:	9301      	str	r3, [sp, #4]
   1a5d0:	2320      	movs	r3, #32
   1a5d2:	18fb      	adds	r3, r7, r3
   1a5d4:	9300      	str	r3, [sp, #0]
   1a5d6:	002b      	movs	r3, r5
   1a5d8:	0022      	movs	r2, r4
   1a5da:	4c58      	ldr	r4, [pc, #352]	; (1a73c <cycle+0x1dc>)
   1a5dc:	47a0      	blx	r4
   1a5de:	0003      	movs	r3, r0
   1a5e0:	2b01      	cmp	r3, #1
   1a5e2:	d000      	beq.n	1a5e6 <cycle+0x86>
   1a5e4:	e098      	b.n	1a718 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   1a5e6:	68fb      	ldr	r3, [r7, #12]
   1a5e8:	b2da      	uxtb	r2, r3
   1a5ea:	2310      	movs	r3, #16
   1a5ec:	18fb      	adds	r3, r7, r3
   1a5ee:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   1a5f0:	2310      	movs	r3, #16
   1a5f2:	18fa      	adds	r2, r7, r3
   1a5f4:	2320      	movs	r3, #32
   1a5f6:	18f9      	adds	r1, r7, r3
   1a5f8:	687b      	ldr	r3, [r7, #4]
   1a5fa:	0018      	movs	r0, r3
   1a5fc:	4b50      	ldr	r3, [pc, #320]	; (1a740 <cycle+0x1e0>)
   1a5fe:	4798      	blx	r3
            if (msg.qos != QOS0)
   1a600:	2310      	movs	r3, #16
   1a602:	18fb      	adds	r3, r7, r3
   1a604:	781b      	ldrb	r3, [r3, #0]
   1a606:	2b00      	cmp	r3, #0
   1a608:	d100      	bne.n	1a60c <cycle+0xac>
   1a60a:	e07d      	b.n	1a708 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   1a60c:	2310      	movs	r3, #16
   1a60e:	18fb      	adds	r3, r7, r3
   1a610:	781b      	ldrb	r3, [r3, #0]
   1a612:	2b01      	cmp	r3, #1
   1a614:	d10f      	bne.n	1a636 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   1a616:	687b      	ldr	r3, [r7, #4]
   1a618:	6918      	ldr	r0, [r3, #16]
   1a61a:	687b      	ldr	r3, [r7, #4]
   1a61c:	689b      	ldr	r3, [r3, #8]
   1a61e:	0019      	movs	r1, r3
   1a620:	2310      	movs	r3, #16
   1a622:	18fb      	adds	r3, r7, r3
   1a624:	889b      	ldrh	r3, [r3, #4]
   1a626:	9300      	str	r3, [sp, #0]
   1a628:	2300      	movs	r3, #0
   1a62a:	2204      	movs	r2, #4
   1a62c:	4c45      	ldr	r4, [pc, #276]	; (1a744 <cycle+0x1e4>)
   1a62e:	47a0      	blx	r4
   1a630:	0003      	movs	r3, r0
   1a632:	637b      	str	r3, [r7, #52]	; 0x34
   1a634:	e013      	b.n	1a65e <cycle+0xfe>
                else if (msg.qos == QOS2)
   1a636:	2310      	movs	r3, #16
   1a638:	18fb      	adds	r3, r7, r3
   1a63a:	781b      	ldrb	r3, [r3, #0]
   1a63c:	2b02      	cmp	r3, #2
   1a63e:	d10e      	bne.n	1a65e <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   1a640:	687b      	ldr	r3, [r7, #4]
   1a642:	6918      	ldr	r0, [r3, #16]
   1a644:	687b      	ldr	r3, [r7, #4]
   1a646:	689b      	ldr	r3, [r3, #8]
   1a648:	0019      	movs	r1, r3
   1a64a:	2310      	movs	r3, #16
   1a64c:	18fb      	adds	r3, r7, r3
   1a64e:	889b      	ldrh	r3, [r3, #4]
   1a650:	9300      	str	r3, [sp, #0]
   1a652:	2300      	movs	r3, #0
   1a654:	2205      	movs	r2, #5
   1a656:	4c3b      	ldr	r4, [pc, #236]	; (1a744 <cycle+0x1e4>)
   1a658:	47a0      	blx	r4
   1a65a:	0003      	movs	r3, r0
   1a65c:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   1a65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a660:	2b00      	cmp	r3, #0
   1a662:	dc03      	bgt.n	1a66c <cycle+0x10c>
                    rc = FAILURE;
   1a664:	2301      	movs	r3, #1
   1a666:	425b      	negs	r3, r3
   1a668:	633b      	str	r3, [r7, #48]	; 0x30
   1a66a:	e007      	b.n	1a67c <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   1a66c:	683a      	ldr	r2, [r7, #0]
   1a66e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1a670:	687b      	ldr	r3, [r7, #4]
   1a672:	0018      	movs	r0, r3
   1a674:	4b34      	ldr	r3, [pc, #208]	; (1a748 <cycle+0x1e8>)
   1a676:	4798      	blx	r3
   1a678:	0003      	movs	r3, r0
   1a67a:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   1a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a67e:	3301      	adds	r3, #1
   1a680:	d142      	bne.n	1a708 <cycle+0x1a8>
                    goto exit; // there was a problem
   1a682:	46c0      	nop			; (mov r8, r8)
   1a684:	e049      	b.n	1a71a <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1a686:	687b      	ldr	r3, [r7, #4]
   1a688:	695c      	ldr	r4, [r3, #20]
   1a68a:	687b      	ldr	r3, [r7, #4]
   1a68c:	68db      	ldr	r3, [r3, #12]
   1a68e:	220a      	movs	r2, #10
   1a690:	18ba      	adds	r2, r7, r2
   1a692:	2109      	movs	r1, #9
   1a694:	1879      	adds	r1, r7, r1
   1a696:	2008      	movs	r0, #8
   1a698:	1838      	adds	r0, r7, r0
   1a69a:	9300      	str	r3, [sp, #0]
   1a69c:	0023      	movs	r3, r4
   1a69e:	4c2b      	ldr	r4, [pc, #172]	; (1a74c <cycle+0x1ec>)
   1a6a0:	47a0      	blx	r4
   1a6a2:	0003      	movs	r3, r0
   1a6a4:	2b01      	cmp	r3, #1
   1a6a6:	d003      	beq.n	1a6b0 <cycle+0x150>
                rc = FAILURE;
   1a6a8:	2301      	movs	r3, #1
   1a6aa:	425b      	negs	r3, r3
   1a6ac:	633b      	str	r3, [r7, #48]	; 0x30
   1a6ae:	e023      	b.n	1a6f8 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   1a6b0:	687b      	ldr	r3, [r7, #4]
   1a6b2:	6918      	ldr	r0, [r3, #16]
   1a6b4:	687b      	ldr	r3, [r7, #4]
   1a6b6:	689b      	ldr	r3, [r3, #8]
   1a6b8:	0019      	movs	r1, r3
   1a6ba:	230a      	movs	r3, #10
   1a6bc:	18fb      	adds	r3, r7, r3
   1a6be:	881b      	ldrh	r3, [r3, #0]
   1a6c0:	9300      	str	r3, [sp, #0]
   1a6c2:	2300      	movs	r3, #0
   1a6c4:	2206      	movs	r2, #6
   1a6c6:	4c1f      	ldr	r4, [pc, #124]	; (1a744 <cycle+0x1e4>)
   1a6c8:	47a0      	blx	r4
   1a6ca:	0003      	movs	r3, r0
   1a6cc:	637b      	str	r3, [r7, #52]	; 0x34
   1a6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a6d0:	2b00      	cmp	r3, #0
   1a6d2:	dc03      	bgt.n	1a6dc <cycle+0x17c>
                rc = FAILURE;
   1a6d4:	2301      	movs	r3, #1
   1a6d6:	425b      	negs	r3, r3
   1a6d8:	633b      	str	r3, [r7, #48]	; 0x30
   1a6da:	e00d      	b.n	1a6f8 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   1a6dc:	683a      	ldr	r2, [r7, #0]
   1a6de:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1a6e0:	687b      	ldr	r3, [r7, #4]
   1a6e2:	0018      	movs	r0, r3
   1a6e4:	4b18      	ldr	r3, [pc, #96]	; (1a748 <cycle+0x1e8>)
   1a6e6:	4798      	blx	r3
   1a6e8:	0003      	movs	r3, r0
   1a6ea:	633b      	str	r3, [r7, #48]	; 0x30
   1a6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a6ee:	2b00      	cmp	r3, #0
   1a6f0:	d002      	beq.n	1a6f8 <cycle+0x198>
                rc = FAILURE; // there was a problem
   1a6f2:	2301      	movs	r3, #1
   1a6f4:	425b      	negs	r3, r3
   1a6f6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   1a6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a6fa:	3301      	adds	r3, #1
   1a6fc:	d106      	bne.n	1a70c <cycle+0x1ac>
                goto exit; // there was a problem
   1a6fe:	e00c      	b.n	1a71a <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   1a700:	687b      	ldr	r3, [r7, #4]
   1a702:	2200      	movs	r2, #0
   1a704:	771a      	strb	r2, [r3, #28]
            break;
   1a706:	e002      	b.n	1a70e <cycle+0x1ae>
            break;
   1a708:	46c0      	nop			; (mov r8, r8)
   1a70a:	e000      	b.n	1a70e <cycle+0x1ae>
            break;
   1a70c:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   1a70e:	687b      	ldr	r3, [r7, #4]
   1a710:	0018      	movs	r0, r3
   1a712:	4b0f      	ldr	r3, [pc, #60]	; (1a750 <cycle+0x1f0>)
   1a714:	4798      	blx	r3
   1a716:	e000      	b.n	1a71a <cycle+0x1ba>
                goto exit;
   1a718:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   1a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a71c:	2b00      	cmp	r3, #0
   1a71e:	d103      	bne.n	1a728 <cycle+0x1c8>
        rc = packet_type;
   1a720:	232e      	movs	r3, #46	; 0x2e
   1a722:	18fb      	adds	r3, r7, r3
   1a724:	881b      	ldrh	r3, [r3, #0]
   1a726:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   1a728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   1a72a:	0018      	movs	r0, r3
   1a72c:	46bd      	mov	sp, r7
   1a72e:	b00f      	add	sp, #60	; 0x3c
   1a730:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a732:	46c0      	nop			; (mov r8, r8)
   1a734:	0001a215 	.word	0x0001a215
   1a738:	00024f10 	.word	0x00024f10
   1a73c:	0001bad9 	.word	0x0001bad9
   1a740:	0001a3d1 	.word	0x0001a3d1
   1a744:	0001c2d1 	.word	0x0001c2d1
   1a748:	0001a059 	.word	0x0001a059
   1a74c:	0001bbdd 	.word	0x0001bbdd
   1a750:	0001a4bd 	.word	0x0001a4bd

0001a754 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   1a754:	b580      	push	{r7, lr}
   1a756:	b086      	sub	sp, #24
   1a758:	af00      	add	r7, sp, #0
   1a75a:	6078      	str	r0, [r7, #4]
   1a75c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   1a75e:	2300      	movs	r3, #0
   1a760:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   1a762:	2308      	movs	r3, #8
   1a764:	18fb      	adds	r3, r7, r3
   1a766:	0018      	movs	r0, r3
   1a768:	4b11      	ldr	r3, [pc, #68]	; (1a7b0 <MQTTYield+0x5c>)
   1a76a:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   1a76c:	683a      	ldr	r2, [r7, #0]
   1a76e:	2308      	movs	r3, #8
   1a770:	18fb      	adds	r3, r7, r3
   1a772:	0011      	movs	r1, r2
   1a774:	0018      	movs	r0, r3
   1a776:	4b0f      	ldr	r3, [pc, #60]	; (1a7b4 <MQTTYield+0x60>)
   1a778:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   1a77a:	2308      	movs	r3, #8
   1a77c:	18fa      	adds	r2, r7, r3
   1a77e:	687b      	ldr	r3, [r7, #4]
   1a780:	0011      	movs	r1, r2
   1a782:	0018      	movs	r0, r3
   1a784:	4b0c      	ldr	r3, [pc, #48]	; (1a7b8 <MQTTYield+0x64>)
   1a786:	4798      	blx	r3
   1a788:	0003      	movs	r3, r0
   1a78a:	3301      	adds	r3, #1
   1a78c:	d103      	bne.n	1a796 <MQTTYield+0x42>
        {
            rc = FAILURE;
   1a78e:	2301      	movs	r3, #1
   1a790:	425b      	negs	r3, r3
   1a792:	617b      	str	r3, [r7, #20]
            break;
   1a794:	e006      	b.n	1a7a4 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   1a796:	2308      	movs	r3, #8
   1a798:	18fb      	adds	r3, r7, r3
   1a79a:	0018      	movs	r0, r3
   1a79c:	4b07      	ldr	r3, [pc, #28]	; (1a7bc <MQTTYield+0x68>)
   1a79e:	4798      	blx	r3
   1a7a0:	1e03      	subs	r3, r0, #0
   1a7a2:	d0ea      	beq.n	1a77a <MQTTYield+0x26>
        
    return rc;
   1a7a4:	697b      	ldr	r3, [r7, #20]
}
   1a7a6:	0018      	movs	r0, r3
   1a7a8:	46bd      	mov	sp, r7
   1a7aa:	b006      	add	sp, #24
   1a7ac:	bd80      	pop	{r7, pc}
   1a7ae:	46c0      	nop			; (mov r8, r8)
   1a7b0:	0001aee1 	.word	0x0001aee1
   1a7b4:	0001ae69 	.word	0x0001ae69
   1a7b8:	0001a561 	.word	0x0001a561
   1a7bc:	0001ae3d 	.word	0x0001ae3d

0001a7c0 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   1a7c0:	b580      	push	{r7, lr}
   1a7c2:	b086      	sub	sp, #24
   1a7c4:	af00      	add	r7, sp, #0
   1a7c6:	60f8      	str	r0, [r7, #12]
   1a7c8:	60b9      	str	r1, [r7, #8]
   1a7ca:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1a7cc:	2301      	movs	r3, #1
   1a7ce:	425b      	negs	r3, r3
   1a7d0:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   1a7d2:	687b      	ldr	r3, [r7, #4]
   1a7d4:	0018      	movs	r0, r3
   1a7d6:	4b0b      	ldr	r3, [pc, #44]	; (1a804 <waitfor+0x44>)
   1a7d8:	4798      	blx	r3
   1a7da:	1e03      	subs	r3, r0, #0
   1a7dc:	d10c      	bne.n	1a7f8 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   1a7de:	687a      	ldr	r2, [r7, #4]
   1a7e0:	68fb      	ldr	r3, [r7, #12]
   1a7e2:	0011      	movs	r1, r2
   1a7e4:	0018      	movs	r0, r3
   1a7e6:	4b08      	ldr	r3, [pc, #32]	; (1a808 <waitfor+0x48>)
   1a7e8:	4798      	blx	r3
   1a7ea:	0003      	movs	r3, r0
   1a7ec:	617b      	str	r3, [r7, #20]
   1a7ee:	697a      	ldr	r2, [r7, #20]
   1a7f0:	68bb      	ldr	r3, [r7, #8]
   1a7f2:	429a      	cmp	r2, r3
   1a7f4:	d1ed      	bne.n	1a7d2 <waitfor+0x12>
   1a7f6:	e000      	b.n	1a7fa <waitfor+0x3a>
            break; // we timed out
   1a7f8:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   1a7fa:	697b      	ldr	r3, [r7, #20]
}
   1a7fc:	0018      	movs	r0, r3
   1a7fe:	46bd      	mov	sp, r7
   1a800:	b006      	add	sp, #24
   1a802:	bd80      	pop	{r7, pc}
   1a804:	0001ae3d 	.word	0x0001ae3d
   1a808:	0001a561 	.word	0x0001a561

0001a80c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   1a80c:	b590      	push	{r4, r7, lr}
   1a80e:	b09f      	sub	sp, #124	; 0x7c
   1a810:	af00      	add	r7, sp, #0
   1a812:	6078      	str	r0, [r7, #4]
   1a814:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   1a816:	2301      	movs	r3, #1
   1a818:	425b      	negs	r3, r3
   1a81a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   1a81c:	230c      	movs	r3, #12
   1a81e:	18fa      	adds	r2, r7, r3
   1a820:	4b41      	ldr	r3, [pc, #260]	; (1a928 <MQTTConnect+0x11c>)
   1a822:	0010      	movs	r0, r2
   1a824:	0019      	movs	r1, r3
   1a826:	2358      	movs	r3, #88	; 0x58
   1a828:	001a      	movs	r2, r3
   1a82a:	4b40      	ldr	r3, [pc, #256]	; (1a92c <MQTTConnect+0x120>)
   1a82c:	4798      	blx	r3
    int len = 0;
   1a82e:	2300      	movs	r3, #0
   1a830:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   1a832:	687b      	ldr	r3, [r7, #4]
   1a834:	6a1b      	ldr	r3, [r3, #32]
   1a836:	2b00      	cmp	r3, #0
   1a838:	d166      	bne.n	1a908 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   1a83a:	2364      	movs	r3, #100	; 0x64
   1a83c:	18fb      	adds	r3, r7, r3
   1a83e:	0018      	movs	r0, r3
   1a840:	4b3b      	ldr	r3, [pc, #236]	; (1a930 <MQTTConnect+0x124>)
   1a842:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   1a844:	687b      	ldr	r3, [r7, #4]
   1a846:	685a      	ldr	r2, [r3, #4]
   1a848:	2364      	movs	r3, #100	; 0x64
   1a84a:	18fb      	adds	r3, r7, r3
   1a84c:	0011      	movs	r1, r2
   1a84e:	0018      	movs	r0, r3
   1a850:	4b38      	ldr	r3, [pc, #224]	; (1a934 <MQTTConnect+0x128>)
   1a852:	4798      	blx	r3

    if (options == 0)
   1a854:	683b      	ldr	r3, [r7, #0]
   1a856:	2b00      	cmp	r3, #0
   1a858:	d102      	bne.n	1a860 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   1a85a:	230c      	movs	r3, #12
   1a85c:	18fb      	adds	r3, r7, r3
   1a85e:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   1a860:	683b      	ldr	r3, [r7, #0]
   1a862:	8b1b      	ldrh	r3, [r3, #24]
   1a864:	001a      	movs	r2, r3
   1a866:	687b      	ldr	r3, [r7, #4]
   1a868:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   1a86a:	687b      	ldr	r3, [r7, #4]
   1a86c:	3354      	adds	r3, #84	; 0x54
   1a86e:	001a      	movs	r2, r3
   1a870:	687b      	ldr	r3, [r7, #4]
   1a872:	699b      	ldr	r3, [r3, #24]
   1a874:	0019      	movs	r1, r3
   1a876:	0010      	movs	r0, r2
   1a878:	4b2f      	ldr	r3, [pc, #188]	; (1a938 <MQTTConnect+0x12c>)
   1a87a:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   1a87c:	687b      	ldr	r3, [r7, #4]
   1a87e:	6918      	ldr	r0, [r3, #16]
   1a880:	687b      	ldr	r3, [r7, #4]
   1a882:	689b      	ldr	r3, [r3, #8]
   1a884:	0019      	movs	r1, r3
   1a886:	683b      	ldr	r3, [r7, #0]
   1a888:	001a      	movs	r2, r3
   1a88a:	4b2c      	ldr	r3, [pc, #176]	; (1a93c <MQTTConnect+0x130>)
   1a88c:	4798      	blx	r3
   1a88e:	0003      	movs	r3, r0
   1a890:	673b      	str	r3, [r7, #112]	; 0x70
   1a892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1a894:	2b00      	cmp	r3, #0
   1a896:	dd39      	ble.n	1a90c <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   1a898:	2364      	movs	r3, #100	; 0x64
   1a89a:	18fa      	adds	r2, r7, r3
   1a89c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1a89e:	687b      	ldr	r3, [r7, #4]
   1a8a0:	0018      	movs	r0, r3
   1a8a2:	4b27      	ldr	r3, [pc, #156]	; (1a940 <MQTTConnect+0x134>)
   1a8a4:	4798      	blx	r3
   1a8a6:	0003      	movs	r3, r0
   1a8a8:	677b      	str	r3, [r7, #116]	; 0x74
   1a8aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1a8ac:	2b00      	cmp	r3, #0
   1a8ae:	d12f      	bne.n	1a910 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   1a8b0:	2364      	movs	r3, #100	; 0x64
   1a8b2:	18fa      	adds	r2, r7, r3
   1a8b4:	687b      	ldr	r3, [r7, #4]
   1a8b6:	2102      	movs	r1, #2
   1a8b8:	0018      	movs	r0, r3
   1a8ba:	4b22      	ldr	r3, [pc, #136]	; (1a944 <MQTTConnect+0x138>)
   1a8bc:	4798      	blx	r3
   1a8be:	0003      	movs	r3, r0
   1a8c0:	2b02      	cmp	r3, #2
   1a8c2:	d11d      	bne.n	1a900 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   1a8c4:	230b      	movs	r3, #11
   1a8c6:	18fb      	adds	r3, r7, r3
   1a8c8:	22ff      	movs	r2, #255	; 0xff
   1a8ca:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   1a8cc:	230a      	movs	r3, #10
   1a8ce:	18fb      	adds	r3, r7, r3
   1a8d0:	2200      	movs	r2, #0
   1a8d2:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   1a8d4:	687b      	ldr	r3, [r7, #4]
   1a8d6:	695a      	ldr	r2, [r3, #20]
   1a8d8:	687b      	ldr	r3, [r7, #4]
   1a8da:	68db      	ldr	r3, [r3, #12]
   1a8dc:	210b      	movs	r1, #11
   1a8de:	1879      	adds	r1, r7, r1
   1a8e0:	200a      	movs	r0, #10
   1a8e2:	1838      	adds	r0, r7, r0
   1a8e4:	4c18      	ldr	r4, [pc, #96]	; (1a948 <MQTTConnect+0x13c>)
   1a8e6:	47a0      	blx	r4
   1a8e8:	0003      	movs	r3, r0
   1a8ea:	2b01      	cmp	r3, #1
   1a8ec:	d104      	bne.n	1a8f8 <MQTTConnect+0xec>
            rc = connack_rc;
   1a8ee:	230b      	movs	r3, #11
   1a8f0:	18fb      	adds	r3, r7, r3
   1a8f2:	781b      	ldrb	r3, [r3, #0]
   1a8f4:	677b      	str	r3, [r7, #116]	; 0x74
   1a8f6:	e00c      	b.n	1a912 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   1a8f8:	2301      	movs	r3, #1
   1a8fa:	425b      	negs	r3, r3
   1a8fc:	677b      	str	r3, [r7, #116]	; 0x74
   1a8fe:	e008      	b.n	1a912 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   1a900:	2301      	movs	r3, #1
   1a902:	425b      	negs	r3, r3
   1a904:	677b      	str	r3, [r7, #116]	; 0x74
   1a906:	e004      	b.n	1a912 <MQTTConnect+0x106>
		goto exit;
   1a908:	46c0      	nop			; (mov r8, r8)
   1a90a:	e002      	b.n	1a912 <MQTTConnect+0x106>
        goto exit;
   1a90c:	46c0      	nop			; (mov r8, r8)
   1a90e:	e000      	b.n	1a912 <MQTTConnect+0x106>
        goto exit; // there was a problem
   1a910:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   1a912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1a914:	2b00      	cmp	r3, #0
   1a916:	d102      	bne.n	1a91e <MQTTConnect+0x112>
        c->isconnected = 1;
   1a918:	687b      	ldr	r3, [r7, #4]
   1a91a:	2201      	movs	r2, #1
   1a91c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   1a91e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   1a920:	0018      	movs	r0, r3
   1a922:	46bd      	mov	sp, r7
   1a924:	b01f      	add	sp, #124	; 0x7c
   1a926:	bd90      	pop	{r4, r7, pc}
   1a928:	00024f48 	.word	0x00024f48
   1a92c:	000200ed 	.word	0x000200ed
   1a930:	0001aee1 	.word	0x0001aee1
   1a934:	0001ae69 	.word	0x0001ae69
   1a938:	0001ae91 	.word	0x0001ae91
   1a93c:	0001b6bd 	.word	0x0001b6bd
   1a940:	0001a059 	.word	0x0001a059
   1a944:	0001a7c1 	.word	0x0001a7c1
   1a948:	0001b939 	.word	0x0001b939

0001a94c <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   1a94c:	b5b0      	push	{r4, r5, r7, lr}
   1a94e:	b096      	sub	sp, #88	; 0x58
   1a950:	af04      	add	r7, sp, #16
   1a952:	60f8      	str	r0, [r7, #12]
   1a954:	60b9      	str	r1, [r7, #8]
   1a956:	603b      	str	r3, [r7, #0]
   1a958:	1dfb      	adds	r3, r7, #7
   1a95a:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   1a95c:	2301      	movs	r3, #1
   1a95e:	425b      	negs	r3, r3
   1a960:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   1a962:	2300      	movs	r3, #0
   1a964:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   1a966:	2324      	movs	r3, #36	; 0x24
   1a968:	18fb      	adds	r3, r7, r3
   1a96a:	2200      	movs	r2, #0
   1a96c:	601a      	str	r2, [r3, #0]
   1a96e:	2324      	movs	r3, #36	; 0x24
   1a970:	18fb      	adds	r3, r7, r3
   1a972:	2200      	movs	r2, #0
   1a974:	605a      	str	r2, [r3, #4]
   1a976:	2324      	movs	r3, #36	; 0x24
   1a978:	18fb      	adds	r3, r7, r3
   1a97a:	2200      	movs	r2, #0
   1a97c:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   1a97e:	1dfb      	adds	r3, r7, #7
   1a980:	781b      	ldrb	r3, [r3, #0]
   1a982:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   1a984:	2324      	movs	r3, #36	; 0x24
   1a986:	18fb      	adds	r3, r7, r3
   1a988:	68ba      	ldr	r2, [r7, #8]
   1a98a:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1a98c:	68fb      	ldr	r3, [r7, #12]
   1a98e:	6a1b      	ldr	r3, [r3, #32]
   1a990:	2b00      	cmp	r3, #0
   1a992:	d100      	bne.n	1a996 <MQTTSubscribe+0x4a>
   1a994:	e088      	b.n	1aaa8 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   1a996:	2330      	movs	r3, #48	; 0x30
   1a998:	18fb      	adds	r3, r7, r3
   1a99a:	0018      	movs	r0, r3
   1a99c:	4b47      	ldr	r3, [pc, #284]	; (1aabc <MQTTSubscribe+0x170>)
   1a99e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1a9a0:	68fb      	ldr	r3, [r7, #12]
   1a9a2:	685a      	ldr	r2, [r3, #4]
   1a9a4:	2330      	movs	r3, #48	; 0x30
   1a9a6:	18fb      	adds	r3, r7, r3
   1a9a8:	0011      	movs	r1, r2
   1a9aa:	0018      	movs	r0, r3
   1a9ac:	4b44      	ldr	r3, [pc, #272]	; (1aac0 <MQTTSubscribe+0x174>)
   1a9ae:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   1a9b0:	68fb      	ldr	r3, [r7, #12]
   1a9b2:	691c      	ldr	r4, [r3, #16]
   1a9b4:	68fb      	ldr	r3, [r7, #12]
   1a9b6:	689b      	ldr	r3, [r3, #8]
   1a9b8:	001d      	movs	r5, r3
   1a9ba:	68fb      	ldr	r3, [r7, #12]
   1a9bc:	0018      	movs	r0, r3
   1a9be:	4b41      	ldr	r3, [pc, #260]	; (1aac4 <MQTTSubscribe+0x178>)
   1a9c0:	4798      	blx	r3
   1a9c2:	0003      	movs	r3, r0
   1a9c4:	b29a      	uxth	r2, r3
   1a9c6:	2320      	movs	r3, #32
   1a9c8:	18fb      	adds	r3, r7, r3
   1a9ca:	9302      	str	r3, [sp, #8]
   1a9cc:	2324      	movs	r3, #36	; 0x24
   1a9ce:	18fb      	adds	r3, r7, r3
   1a9d0:	9301      	str	r3, [sp, #4]
   1a9d2:	2301      	movs	r3, #1
   1a9d4:	9300      	str	r3, [sp, #0]
   1a9d6:	0013      	movs	r3, r2
   1a9d8:	2200      	movs	r2, #0
   1a9da:	0029      	movs	r1, r5
   1a9dc:	0020      	movs	r0, r4
   1a9de:	4c3a      	ldr	r4, [pc, #232]	; (1aac8 <MQTTSubscribe+0x17c>)
   1a9e0:	47a0      	blx	r4
   1a9e2:	0003      	movs	r3, r0
   1a9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   1a9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a9e8:	2b00      	cmp	r3, #0
   1a9ea:	dd5f      	ble.n	1aaac <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1a9ec:	2330      	movs	r3, #48	; 0x30
   1a9ee:	18fa      	adds	r2, r7, r3
   1a9f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1a9f2:	68fb      	ldr	r3, [r7, #12]
   1a9f4:	0018      	movs	r0, r3
   1a9f6:	4b35      	ldr	r3, [pc, #212]	; (1aacc <MQTTSubscribe+0x180>)
   1a9f8:	4798      	blx	r3
   1a9fa:	0003      	movs	r3, r0
   1a9fc:	647b      	str	r3, [r7, #68]	; 0x44
   1a9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1aa00:	2b00      	cmp	r3, #0
   1aa02:	d155      	bne.n	1aab0 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   1aa04:	2330      	movs	r3, #48	; 0x30
   1aa06:	18fa      	adds	r2, r7, r3
   1aa08:	68fb      	ldr	r3, [r7, #12]
   1aa0a:	2109      	movs	r1, #9
   1aa0c:	0018      	movs	r0, r3
   1aa0e:	4b30      	ldr	r3, [pc, #192]	; (1aad0 <MQTTSubscribe+0x184>)
   1aa10:	4798      	blx	r3
   1aa12:	0003      	movs	r3, r0
   1aa14:	2b09      	cmp	r3, #9
   1aa16:	d143      	bne.n	1aaa0 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   1aa18:	2300      	movs	r3, #0
   1aa1a:	61fb      	str	r3, [r7, #28]
   1aa1c:	2301      	movs	r3, #1
   1aa1e:	425b      	negs	r3, r3
   1aa20:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   1aa22:	68fb      	ldr	r3, [r7, #12]
   1aa24:	695a      	ldr	r2, [r3, #20]
   1aa26:	68fb      	ldr	r3, [r7, #12]
   1aa28:	68db      	ldr	r3, [r3, #12]
   1aa2a:	001c      	movs	r4, r3
   1aa2c:	2318      	movs	r3, #24
   1aa2e:	18fb      	adds	r3, r7, r3
   1aa30:	211c      	movs	r1, #28
   1aa32:	1879      	adds	r1, r7, r1
   1aa34:	2016      	movs	r0, #22
   1aa36:	1838      	adds	r0, r7, r0
   1aa38:	9401      	str	r4, [sp, #4]
   1aa3a:	9200      	str	r2, [sp, #0]
   1aa3c:	000a      	movs	r2, r1
   1aa3e:	2101      	movs	r1, #1
   1aa40:	4c24      	ldr	r4, [pc, #144]	; (1aad4 <MQTTSubscribe+0x188>)
   1aa42:	47a0      	blx	r4
   1aa44:	0003      	movs	r3, r0
   1aa46:	2b01      	cmp	r3, #1
   1aa48:	d101      	bne.n	1aa4e <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   1aa4a:	69bb      	ldr	r3, [r7, #24]
   1aa4c:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   1aa4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1aa50:	2b80      	cmp	r3, #128	; 0x80
   1aa52:	d02e      	beq.n	1aab2 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1aa54:	2300      	movs	r3, #0
   1aa56:	643b      	str	r3, [r7, #64]	; 0x40
   1aa58:	e01e      	b.n	1aa98 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   1aa5a:	68fa      	ldr	r2, [r7, #12]
   1aa5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aa5e:	3304      	adds	r3, #4
   1aa60:	00db      	lsls	r3, r3, #3
   1aa62:	18d3      	adds	r3, r2, r3
   1aa64:	3304      	adds	r3, #4
   1aa66:	681b      	ldr	r3, [r3, #0]
   1aa68:	2b00      	cmp	r3, #0
   1aa6a:	d112      	bne.n	1aa92 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   1aa6c:	68fa      	ldr	r2, [r7, #12]
   1aa6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aa70:	3304      	adds	r3, #4
   1aa72:	00db      	lsls	r3, r3, #3
   1aa74:	18d3      	adds	r3, r2, r3
   1aa76:	3304      	adds	r3, #4
   1aa78:	68ba      	ldr	r2, [r7, #8]
   1aa7a:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   1aa7c:	68fa      	ldr	r2, [r7, #12]
   1aa7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aa80:	3304      	adds	r3, #4
   1aa82:	00db      	lsls	r3, r3, #3
   1aa84:	18d3      	adds	r3, r2, r3
   1aa86:	3308      	adds	r3, #8
   1aa88:	683a      	ldr	r2, [r7, #0]
   1aa8a:	601a      	str	r2, [r3, #0]
                    rc = 0;
   1aa8c:	2300      	movs	r3, #0
   1aa8e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   1aa90:	e00f      	b.n	1aab2 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1aa92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aa94:	3301      	adds	r3, #1
   1aa96:	643b      	str	r3, [r7, #64]	; 0x40
   1aa98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aa9a:	2b04      	cmp	r3, #4
   1aa9c:	dddd      	ble.n	1aa5a <MQTTSubscribe+0x10e>
   1aa9e:	e008      	b.n	1aab2 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   1aaa0:	2301      	movs	r3, #1
   1aaa2:	425b      	negs	r3, r3
   1aaa4:	647b      	str	r3, [r7, #68]	; 0x44
   1aaa6:	e004      	b.n	1aab2 <MQTTSubscribe+0x166>
		goto exit;
   1aaa8:	46c0      	nop			; (mov r8, r8)
   1aaaa:	e002      	b.n	1aab2 <MQTTSubscribe+0x166>
        goto exit;
   1aaac:	46c0      	nop			; (mov r8, r8)
   1aaae:	e000      	b.n	1aab2 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   1aab0:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1aab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1aab4:	0018      	movs	r0, r3
   1aab6:	46bd      	mov	sp, r7
   1aab8:	b012      	add	sp, #72	; 0x48
   1aaba:	bdb0      	pop	{r4, r5, r7, pc}
   1aabc:	0001aee1 	.word	0x0001aee1
   1aac0:	0001ae69 	.word	0x0001ae69
   1aac4:	0001a029 	.word	0x0001a029
   1aac8:	0001c419 	.word	0x0001c419
   1aacc:	0001a059 	.word	0x0001a059
   1aad0:	0001a7c1 	.word	0x0001a7c1
   1aad4:	0001c569 	.word	0x0001c569

0001aad8 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   1aad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aada:	46ce      	mov	lr, r9
   1aadc:	4647      	mov	r7, r8
   1aade:	b580      	push	{r7, lr}
   1aae0:	b097      	sub	sp, #92	; 0x5c
   1aae2:	af08      	add	r7, sp, #32
   1aae4:	60f8      	str	r0, [r7, #12]
   1aae6:	60b9      	str	r1, [r7, #8]
   1aae8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   1aaea:	2301      	movs	r3, #1
   1aaec:	425b      	negs	r3, r3
   1aaee:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   1aaf0:	2318      	movs	r3, #24
   1aaf2:	18fb      	adds	r3, r7, r3
   1aaf4:	2200      	movs	r2, #0
   1aaf6:	601a      	str	r2, [r3, #0]
   1aaf8:	2318      	movs	r3, #24
   1aafa:	18fb      	adds	r3, r7, r3
   1aafc:	2200      	movs	r2, #0
   1aafe:	605a      	str	r2, [r3, #4]
   1ab00:	2318      	movs	r3, #24
   1ab02:	18fb      	adds	r3, r7, r3
   1ab04:	2200      	movs	r2, #0
   1ab06:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   1ab08:	2318      	movs	r3, #24
   1ab0a:	18fb      	adds	r3, r7, r3
   1ab0c:	68ba      	ldr	r2, [r7, #8]
   1ab0e:	601a      	str	r2, [r3, #0]
    int len = 0;
   1ab10:	2300      	movs	r3, #0
   1ab12:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1ab14:	68fb      	ldr	r3, [r7, #12]
   1ab16:	6a1b      	ldr	r3, [r3, #32]
   1ab18:	2b00      	cmp	r3, #0
   1ab1a:	d100      	bne.n	1ab1e <MQTTPublish+0x46>
   1ab1c:	e0a0      	b.n	1ac60 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   1ab1e:	2324      	movs	r3, #36	; 0x24
   1ab20:	18fb      	adds	r3, r7, r3
   1ab22:	0018      	movs	r0, r3
   1ab24:	4b55      	ldr	r3, [pc, #340]	; (1ac7c <MQTTPublish+0x1a4>)
   1ab26:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1ab28:	68fb      	ldr	r3, [r7, #12]
   1ab2a:	685a      	ldr	r2, [r3, #4]
   1ab2c:	2324      	movs	r3, #36	; 0x24
   1ab2e:	18fb      	adds	r3, r7, r3
   1ab30:	0011      	movs	r1, r2
   1ab32:	0018      	movs	r0, r3
   1ab34:	4b52      	ldr	r3, [pc, #328]	; (1ac80 <MQTTPublish+0x1a8>)
   1ab36:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   1ab38:	687b      	ldr	r3, [r7, #4]
   1ab3a:	781b      	ldrb	r3, [r3, #0]
   1ab3c:	2b01      	cmp	r3, #1
   1ab3e:	d003      	beq.n	1ab48 <MQTTPublish+0x70>
   1ab40:	687b      	ldr	r3, [r7, #4]
   1ab42:	781b      	ldrb	r3, [r3, #0]
   1ab44:	2b02      	cmp	r3, #2
   1ab46:	d107      	bne.n	1ab58 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   1ab48:	68fb      	ldr	r3, [r7, #12]
   1ab4a:	0018      	movs	r0, r3
   1ab4c:	4b4d      	ldr	r3, [pc, #308]	; (1ac84 <MQTTPublish+0x1ac>)
   1ab4e:	4798      	blx	r3
   1ab50:	0003      	movs	r3, r0
   1ab52:	b29a      	uxth	r2, r3
   1ab54:	687b      	ldr	r3, [r7, #4]
   1ab56:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1ab58:	68fb      	ldr	r3, [r7, #12]
   1ab5a:	691b      	ldr	r3, [r3, #16]
   1ab5c:	469c      	mov	ip, r3
   1ab5e:	68fb      	ldr	r3, [r7, #12]
   1ab60:	689b      	ldr	r3, [r3, #8]
   1ab62:	001d      	movs	r5, r3
   1ab64:	687b      	ldr	r3, [r7, #4]
   1ab66:	781b      	ldrb	r3, [r3, #0]
   1ab68:	001e      	movs	r6, r3
   1ab6a:	687b      	ldr	r3, [r7, #4]
   1ab6c:	785b      	ldrb	r3, [r3, #1]
   1ab6e:	4698      	mov	r8, r3
   1ab70:	687b      	ldr	r3, [r7, #4]
   1ab72:	889b      	ldrh	r3, [r3, #4]
   1ab74:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   1ab76:	687b      	ldr	r3, [r7, #4]
   1ab78:	689a      	ldr	r2, [r3, #8]
   1ab7a:	687b      	ldr	r3, [r7, #4]
   1ab7c:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   1ab7e:	9306      	str	r3, [sp, #24]
   1ab80:	9205      	str	r2, [sp, #20]
   1ab82:	2318      	movs	r3, #24
   1ab84:	18fa      	adds	r2, r7, r3
   1ab86:	2308      	movs	r3, #8
   1ab88:	446b      	add	r3, sp
   1ab8a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1ab8c:	c313      	stmia	r3!, {r0, r1, r4}
   1ab8e:	464b      	mov	r3, r9
   1ab90:	9301      	str	r3, [sp, #4]
   1ab92:	4643      	mov	r3, r8
   1ab94:	9300      	str	r3, [sp, #0]
   1ab96:	0033      	movs	r3, r6
   1ab98:	2200      	movs	r2, #0
   1ab9a:	0029      	movs	r1, r5
   1ab9c:	4660      	mov	r0, ip
   1ab9e:	4c3a      	ldr	r4, [pc, #232]	; (1ac88 <MQTTPublish+0x1b0>)
   1aba0:	47a0      	blx	r4
   1aba2:	0003      	movs	r3, r0
   1aba4:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   1aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aba8:	2b00      	cmp	r3, #0
   1abaa:	dd5b      	ble.n	1ac64 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   1abac:	2324      	movs	r3, #36	; 0x24
   1abae:	18fa      	adds	r2, r7, r3
   1abb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1abb2:	68fb      	ldr	r3, [r7, #12]
   1abb4:	0018      	movs	r0, r3
   1abb6:	4b35      	ldr	r3, [pc, #212]	; (1ac8c <MQTTPublish+0x1b4>)
   1abb8:	4798      	blx	r3
   1abba:	0003      	movs	r3, r0
   1abbc:	637b      	str	r3, [r7, #52]	; 0x34
   1abbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1abc0:	2b00      	cmp	r3, #0
   1abc2:	d151      	bne.n	1ac68 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   1abc4:	687b      	ldr	r3, [r7, #4]
   1abc6:	781b      	ldrb	r3, [r3, #0]
   1abc8:	2b01      	cmp	r3, #1
   1abca:	d122      	bne.n	1ac12 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   1abcc:	2324      	movs	r3, #36	; 0x24
   1abce:	18fa      	adds	r2, r7, r3
   1abd0:	68fb      	ldr	r3, [r7, #12]
   1abd2:	2104      	movs	r1, #4
   1abd4:	0018      	movs	r0, r3
   1abd6:	4b2e      	ldr	r3, [pc, #184]	; (1ac90 <MQTTPublish+0x1b8>)
   1abd8:	4798      	blx	r3
   1abda:	0003      	movs	r3, r0
   1abdc:	2b04      	cmp	r3, #4
   1abde:	d114      	bne.n	1ac0a <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1abe0:	68fb      	ldr	r3, [r7, #12]
   1abe2:	695c      	ldr	r4, [r3, #20]
   1abe4:	68fb      	ldr	r3, [r7, #12]
   1abe6:	68db      	ldr	r3, [r3, #12]
   1abe8:	2216      	movs	r2, #22
   1abea:	18ba      	adds	r2, r7, r2
   1abec:	2115      	movs	r1, #21
   1abee:	1879      	adds	r1, r7, r1
   1abf0:	2014      	movs	r0, #20
   1abf2:	1838      	adds	r0, r7, r0
   1abf4:	9300      	str	r3, [sp, #0]
   1abf6:	0023      	movs	r3, r4
   1abf8:	4c26      	ldr	r4, [pc, #152]	; (1ac94 <MQTTPublish+0x1bc>)
   1abfa:	47a0      	blx	r4
   1abfc:	0003      	movs	r3, r0
   1abfe:	2b01      	cmp	r3, #1
   1ac00:	d033      	beq.n	1ac6a <MQTTPublish+0x192>
                rc = FAILURE;
   1ac02:	2301      	movs	r3, #1
   1ac04:	425b      	negs	r3, r3
   1ac06:	637b      	str	r3, [r7, #52]	; 0x34
   1ac08:	e02f      	b.n	1ac6a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1ac0a:	2301      	movs	r3, #1
   1ac0c:	425b      	negs	r3, r3
   1ac0e:	637b      	str	r3, [r7, #52]	; 0x34
   1ac10:	e02b      	b.n	1ac6a <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   1ac12:	687b      	ldr	r3, [r7, #4]
   1ac14:	781b      	ldrb	r3, [r3, #0]
   1ac16:	2b02      	cmp	r3, #2
   1ac18:	d127      	bne.n	1ac6a <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   1ac1a:	2324      	movs	r3, #36	; 0x24
   1ac1c:	18fa      	adds	r2, r7, r3
   1ac1e:	68fb      	ldr	r3, [r7, #12]
   1ac20:	2107      	movs	r1, #7
   1ac22:	0018      	movs	r0, r3
   1ac24:	4b1a      	ldr	r3, [pc, #104]	; (1ac90 <MQTTPublish+0x1b8>)
   1ac26:	4798      	blx	r3
   1ac28:	0003      	movs	r3, r0
   1ac2a:	2b07      	cmp	r3, #7
   1ac2c:	d114      	bne.n	1ac58 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1ac2e:	68fb      	ldr	r3, [r7, #12]
   1ac30:	695c      	ldr	r4, [r3, #20]
   1ac32:	68fb      	ldr	r3, [r7, #12]
   1ac34:	68db      	ldr	r3, [r3, #12]
   1ac36:	2212      	movs	r2, #18
   1ac38:	18ba      	adds	r2, r7, r2
   1ac3a:	2111      	movs	r1, #17
   1ac3c:	1879      	adds	r1, r7, r1
   1ac3e:	2010      	movs	r0, #16
   1ac40:	1838      	adds	r0, r7, r0
   1ac42:	9300      	str	r3, [sp, #0]
   1ac44:	0023      	movs	r3, r4
   1ac46:	4c13      	ldr	r4, [pc, #76]	; (1ac94 <MQTTPublish+0x1bc>)
   1ac48:	47a0      	blx	r4
   1ac4a:	0003      	movs	r3, r0
   1ac4c:	2b01      	cmp	r3, #1
   1ac4e:	d00c      	beq.n	1ac6a <MQTTPublish+0x192>
                rc = FAILURE;
   1ac50:	2301      	movs	r3, #1
   1ac52:	425b      	negs	r3, r3
   1ac54:	637b      	str	r3, [r7, #52]	; 0x34
   1ac56:	e008      	b.n	1ac6a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   1ac58:	2301      	movs	r3, #1
   1ac5a:	425b      	negs	r3, r3
   1ac5c:	637b      	str	r3, [r7, #52]	; 0x34
   1ac5e:	e004      	b.n	1ac6a <MQTTPublish+0x192>
		goto exit;
   1ac60:	46c0      	nop			; (mov r8, r8)
   1ac62:	e002      	b.n	1ac6a <MQTTPublish+0x192>
        goto exit;
   1ac64:	46c0      	nop			; (mov r8, r8)
   1ac66:	e000      	b.n	1ac6a <MQTTPublish+0x192>
        goto exit; // there was a problem
   1ac68:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1ac6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1ac6c:	0018      	movs	r0, r3
   1ac6e:	46bd      	mov	sp, r7
   1ac70:	b00f      	add	sp, #60	; 0x3c
   1ac72:	bc0c      	pop	{r2, r3}
   1ac74:	4690      	mov	r8, r2
   1ac76:	4699      	mov	r9, r3
   1ac78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac7a:	46c0      	nop			; (mov r8, r8)
   1ac7c:	0001aee1 	.word	0x0001aee1
   1ac80:	0001ae69 	.word	0x0001ae69
   1ac84:	0001a029 	.word	0x0001a029
   1ac88:	0001c165 	.word	0x0001c165
   1ac8c:	0001a059 	.word	0x0001a059
   1ac90:	0001a7c1 	.word	0x0001a7c1
   1ac94:	0001bbdd 	.word	0x0001bbdd

0001ac98 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   1ac98:	b580      	push	{r7, lr}
   1ac9a:	b088      	sub	sp, #32
   1ac9c:	af00      	add	r7, sp, #0
   1ac9e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   1aca0:	2301      	movs	r3, #1
   1aca2:	425b      	negs	r3, r3
   1aca4:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   1aca6:	2300      	movs	r3, #0
   1aca8:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   1acaa:	230c      	movs	r3, #12
   1acac:	18fb      	adds	r3, r7, r3
   1acae:	0018      	movs	r0, r3
   1acb0:	4b13      	ldr	r3, [pc, #76]	; (1ad00 <MQTTDisconnect+0x68>)
   1acb2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   1acb4:	687b      	ldr	r3, [r7, #4]
   1acb6:	685a      	ldr	r2, [r3, #4]
   1acb8:	230c      	movs	r3, #12
   1acba:	18fb      	adds	r3, r7, r3
   1acbc:	0011      	movs	r1, r2
   1acbe:	0018      	movs	r0, r3
   1acc0:	4b10      	ldr	r3, [pc, #64]	; (1ad04 <MQTTDisconnect+0x6c>)
   1acc2:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   1acc4:	687b      	ldr	r3, [r7, #4]
   1acc6:	691a      	ldr	r2, [r3, #16]
   1acc8:	687b      	ldr	r3, [r7, #4]
   1acca:	689b      	ldr	r3, [r3, #8]
   1accc:	0019      	movs	r1, r3
   1acce:	0010      	movs	r0, r2
   1acd0:	4b0d      	ldr	r3, [pc, #52]	; (1ad08 <MQTTDisconnect+0x70>)
   1acd2:	4798      	blx	r3
   1acd4:	0003      	movs	r3, r0
   1acd6:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   1acd8:	69bb      	ldr	r3, [r7, #24]
   1acda:	2b00      	cmp	r3, #0
   1acdc:	dd08      	ble.n	1acf0 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   1acde:	230c      	movs	r3, #12
   1ace0:	18fa      	adds	r2, r7, r3
   1ace2:	69b9      	ldr	r1, [r7, #24]
   1ace4:	687b      	ldr	r3, [r7, #4]
   1ace6:	0018      	movs	r0, r3
   1ace8:	4b08      	ldr	r3, [pc, #32]	; (1ad0c <MQTTDisconnect+0x74>)
   1acea:	4798      	blx	r3
   1acec:	0003      	movs	r3, r0
   1acee:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   1acf0:	687b      	ldr	r3, [r7, #4]
   1acf2:	2200      	movs	r2, #0
   1acf4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1acf6:	69fb      	ldr	r3, [r7, #28]
}
   1acf8:	0018      	movs	r0, r3
   1acfa:	46bd      	mov	sp, r7
   1acfc:	b008      	add	sp, #32
   1acfe:	bd80      	pop	{r7, pc}
   1ad00:	0001aee1 	.word	0x0001aee1
   1ad04:	0001ae69 	.word	0x0001ae69
   1ad08:	0001ba91 	.word	0x0001ba91
   1ad0c:	0001a059 	.word	0x0001a059

0001ad10 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   1ad10:	b580      	push	{r7, lr}
   1ad12:	b084      	sub	sp, #16
   1ad14:	af00      	add	r7, sp, #0
   1ad16:	0002      	movs	r2, r0
   1ad18:	1dfb      	adds	r3, r7, #7
   1ad1a:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1ad1c:	2300      	movs	r3, #0
   1ad1e:	60fb      	str	r3, [r7, #12]
   1ad20:	e01c      	b.n	1ad5c <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   1ad22:	4a12      	ldr	r2, [pc, #72]	; (1ad6c <isMQTTSocket+0x5c>)
   1ad24:	68fb      	ldr	r3, [r7, #12]
   1ad26:	2164      	movs	r1, #100	; 0x64
   1ad28:	434b      	muls	r3, r1
   1ad2a:	18d3      	adds	r3, r2, r3
   1ad2c:	3360      	adds	r3, #96	; 0x60
   1ad2e:	681b      	ldr	r3, [r3, #0]
   1ad30:	2b00      	cmp	r3, #0
   1ad32:	d010      	beq.n	1ad56 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   1ad34:	4a0d      	ldr	r2, [pc, #52]	; (1ad6c <isMQTTSocket+0x5c>)
   1ad36:	68fb      	ldr	r3, [r7, #12]
   1ad38:	2164      	movs	r1, #100	; 0x64
   1ad3a:	434b      	muls	r3, r1
   1ad3c:	18d3      	adds	r3, r2, r3
   1ad3e:	3360      	adds	r3, #96	; 0x60
   1ad40:	681b      	ldr	r3, [r3, #0]
   1ad42:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   1ad44:	68bb      	ldr	r3, [r7, #8]
   1ad46:	6a1a      	ldr	r2, [r3, #32]
   1ad48:	1dfb      	adds	r3, r7, #7
   1ad4a:	781b      	ldrb	r3, [r3, #0]
   1ad4c:	b25b      	sxtb	r3, r3
   1ad4e:	429a      	cmp	r2, r3
   1ad50:	d101      	bne.n	1ad56 <isMQTTSocket+0x46>
				return true;
   1ad52:	2301      	movs	r3, #1
   1ad54:	e006      	b.n	1ad64 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1ad56:	68fb      	ldr	r3, [r7, #12]
   1ad58:	3301      	adds	r3, #1
   1ad5a:	60fb      	str	r3, [r7, #12]
   1ad5c:	68fb      	ldr	r3, [r7, #12]
   1ad5e:	2b06      	cmp	r3, #6
   1ad60:	d9df      	bls.n	1ad22 <isMQTTSocket+0x12>
		}
	}
	return false;
   1ad62:	2300      	movs	r3, #0
}
   1ad64:	0018      	movs	r0, r3
   1ad66:	46bd      	mov	sp, r7
   1ad68:	b004      	add	sp, #16
   1ad6a:	bd80      	pop	{r7, pc}
   1ad6c:	20003e9c 	.word	0x20003e9c

0001ad70 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   1ad70:	b580      	push	{r7, lr}
   1ad72:	b082      	sub	sp, #8
   1ad74:	af00      	add	r7, sp, #0
   1ad76:	6078      	str	r0, [r7, #4]
   1ad78:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   1ad7a:	4b0d      	ldr	r3, [pc, #52]	; (1adb0 <dnsResolveCallback+0x40>)
   1ad7c:	781b      	ldrb	r3, [r3, #0]
   1ad7e:	2201      	movs	r2, #1
   1ad80:	4053      	eors	r3, r2
   1ad82:	b2db      	uxtb	r3, r3
   1ad84:	2b00      	cmp	r3, #0
   1ad86:	d00e      	beq.n	1ada6 <dnsResolveCallback+0x36>
   1ad88:	4b0a      	ldr	r3, [pc, #40]	; (1adb4 <dnsResolveCallback+0x44>)
   1ad8a:	681b      	ldr	r3, [r3, #0]
   1ad8c:	687a      	ldr	r2, [r7, #4]
   1ad8e:	0011      	movs	r1, r2
   1ad90:	0018      	movs	r0, r3
   1ad92:	4b09      	ldr	r3, [pc, #36]	; (1adb8 <dnsResolveCallback+0x48>)
   1ad94:	4798      	blx	r3
   1ad96:	1e03      	subs	r3, r0, #0
   1ad98:	d105      	bne.n	1ada6 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   1ad9a:	683a      	ldr	r2, [r7, #0]
   1ad9c:	4b07      	ldr	r3, [pc, #28]	; (1adbc <dnsResolveCallback+0x4c>)
   1ad9e:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   1ada0:	4b03      	ldr	r3, [pc, #12]	; (1adb0 <dnsResolveCallback+0x40>)
   1ada2:	2201      	movs	r2, #1
   1ada4:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   1ada6:	46c0      	nop			; (mov r8, r8)
   1ada8:	46bd      	mov	sp, r7
   1adaa:	b002      	add	sp, #8
   1adac:	bd80      	pop	{r7, pc}
   1adae:	46c0      	nop			; (mov r8, r8)
   1adb0:	20003d8c 	.word	0x20003d8c
   1adb4:	20003e98 	.word	0x20003e98
   1adb8:	0002047b 	.word	0x0002047b
   1adbc:	20003d84 	.word	0x20003d84

0001adc0 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   1adc0:	b580      	push	{r7, lr}
   1adc2:	b084      	sub	sp, #16
   1adc4:	af00      	add	r7, sp, #0
   1adc6:	603a      	str	r2, [r7, #0]
   1adc8:	1dfb      	adds	r3, r7, #7
   1adca:	1c02      	adds	r2, r0, #0
   1adcc:	701a      	strb	r2, [r3, #0]
   1adce:	1dbb      	adds	r3, r7, #6
   1add0:	1c0a      	adds	r2, r1, #0
   1add2:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   1add4:	1dfb      	adds	r3, r7, #7
   1add6:	781b      	ldrb	r3, [r3, #0]
   1add8:	b25b      	sxtb	r3, r3
   1adda:	0018      	movs	r0, r3
   1addc:	4b12      	ldr	r3, [pc, #72]	; (1ae28 <tcpClientSocketEventHandler+0x68>)
   1adde:	4798      	blx	r3
   1ade0:	1e03      	subs	r3, r0, #0
   1ade2:	d01c      	beq.n	1ae1e <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   1ade4:	1dbb      	adds	r3, r7, #6
   1ade6:	781b      	ldrb	r3, [r3, #0]
   1ade8:	2b06      	cmp	r3, #6
   1adea:	d00c      	beq.n	1ae06 <tcpClientSocketEventHandler+0x46>
   1adec:	2b07      	cmp	r3, #7
   1adee:	d006      	beq.n	1adfe <tcpClientSocketEventHandler+0x3e>
   1adf0:	2b05      	cmp	r3, #5
   1adf2:	d000      	beq.n	1adf6 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   1adf4:	e013      	b.n	1ae1e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   1adf6:	4b0d      	ldr	r3, [pc, #52]	; (1ae2c <tcpClientSocketEventHandler+0x6c>)
   1adf8:	2201      	movs	r2, #1
   1adfa:	701a      	strb	r2, [r3, #0]
			break;
   1adfc:	e00f      	b.n	1ae1e <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   1adfe:	4b0c      	ldr	r3, [pc, #48]	; (1ae30 <tcpClientSocketEventHandler+0x70>)
   1ae00:	2201      	movs	r2, #1
   1ae02:	701a      	strb	r2, [r3, #0]
			break;
   1ae04:	e00b      	b.n	1ae1e <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   1ae06:	683b      	ldr	r3, [r7, #0]
   1ae08:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   1ae0a:	68fb      	ldr	r3, [r7, #12]
   1ae0c:	2204      	movs	r2, #4
   1ae0e:	5e9b      	ldrsh	r3, [r3, r2]
   1ae10:	001a      	movs	r2, r3
   1ae12:	4b08      	ldr	r3, [pc, #32]	; (1ae34 <tcpClientSocketEventHandler+0x74>)
   1ae14:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   1ae16:	4b08      	ldr	r3, [pc, #32]	; (1ae38 <tcpClientSocketEventHandler+0x78>)
   1ae18:	2201      	movs	r2, #1
   1ae1a:	701a      	strb	r2, [r3, #0]
			break;
   1ae1c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   1ae1e:	46c0      	nop			; (mov r8, r8)
   1ae20:	46bd      	mov	sp, r7
   1ae22:	b004      	add	sp, #16
   1ae24:	bd80      	pop	{r7, pc}
   1ae26:	46c0      	nop			; (mov r8, r8)
   1ae28:	0001ad11 	.word	0x0001ad11
   1ae2c:	20003d8d 	.word	0x20003d8d
   1ae30:	20003d8e 	.word	0x20003d8e
   1ae34:	20003d88 	.word	0x20003d88
   1ae38:	20003d8f 	.word	0x20003d8f

0001ae3c <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   1ae3c:	b580      	push	{r7, lr}
   1ae3e:	b082      	sub	sp, #8
   1ae40:	af00      	add	r7, sp, #0
   1ae42:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   1ae44:	687b      	ldr	r3, [r7, #4]
   1ae46:	3304      	adds	r3, #4
   1ae48:	687a      	ldr	r2, [r7, #4]
   1ae4a:	0011      	movs	r1, r2
   1ae4c:	0018      	movs	r0, r3
   1ae4e:	4b05      	ldr	r3, [pc, #20]	; (1ae64 <TimerIsExpired+0x28>)
   1ae50:	4798      	blx	r3
   1ae52:	0003      	movs	r3, r0
   1ae54:	3b01      	subs	r3, #1
   1ae56:	425a      	negs	r2, r3
   1ae58:	4153      	adcs	r3, r2
   1ae5a:	b2db      	uxtb	r3, r3
}
   1ae5c:	0018      	movs	r0, r3
   1ae5e:	46bd      	mov	sp, r7
   1ae60:	b002      	add	sp, #8
   1ae62:	bd80      	pop	{r7, pc}
   1ae64:	000086d5 	.word	0x000086d5

0001ae68 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   1ae68:	b580      	push	{r7, lr}
   1ae6a:	b082      	sub	sp, #8
   1ae6c:	af00      	add	r7, sp, #0
   1ae6e:	6078      	str	r0, [r7, #4]
   1ae70:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   1ae72:	687b      	ldr	r3, [r7, #4]
   1ae74:	683a      	ldr	r2, [r7, #0]
   1ae76:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   1ae78:	687b      	ldr	r3, [r7, #4]
   1ae7a:	3304      	adds	r3, #4
   1ae7c:	0018      	movs	r0, r3
   1ae7e:	4b03      	ldr	r3, [pc, #12]	; (1ae8c <TimerCountdownMS+0x24>)
   1ae80:	4798      	blx	r3
}
   1ae82:	46c0      	nop			; (mov r8, r8)
   1ae84:	46bd      	mov	sp, r7
   1ae86:	b002      	add	sp, #8
   1ae88:	bd80      	pop	{r7, pc}
   1ae8a:	46c0      	nop			; (mov r8, r8)
   1ae8c:	00008669 	.word	0x00008669

0001ae90 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   1ae90:	b580      	push	{r7, lr}
   1ae92:	b082      	sub	sp, #8
   1ae94:	af00      	add	r7, sp, #0
   1ae96:	6078      	str	r0, [r7, #4]
   1ae98:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   1ae9a:	683b      	ldr	r3, [r7, #0]
   1ae9c:	22fa      	movs	r2, #250	; 0xfa
   1ae9e:	0092      	lsls	r2, r2, #2
   1aea0:	435a      	muls	r2, r3
   1aea2:	687b      	ldr	r3, [r7, #4]
   1aea4:	0011      	movs	r1, r2
   1aea6:	0018      	movs	r0, r3
   1aea8:	4b02      	ldr	r3, [pc, #8]	; (1aeb4 <TimerCountdown+0x24>)
   1aeaa:	4798      	blx	r3
}
   1aeac:	46c0      	nop			; (mov r8, r8)
   1aeae:	46bd      	mov	sp, r7
   1aeb0:	b002      	add	sp, #8
   1aeb2:	bd80      	pop	{r7, pc}
   1aeb4:	0001ae69 	.word	0x0001ae69

0001aeb8 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   1aeb8:	b580      	push	{r7, lr}
   1aeba:	b082      	sub	sp, #8
   1aebc:	af00      	add	r7, sp, #0
   1aebe:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   1aec0:	687b      	ldr	r3, [r7, #4]
   1aec2:	3304      	adds	r3, #4
   1aec4:	687a      	ldr	r2, [r7, #4]
   1aec6:	0011      	movs	r1, r2
   1aec8:	0018      	movs	r0, r3
   1aeca:	4b04      	ldr	r3, [pc, #16]	; (1aedc <TimerLeftMS+0x24>)
   1aecc:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   1aece:	687b      	ldr	r3, [r7, #4]
   1aed0:	681b      	ldr	r3, [r3, #0]
}
   1aed2:	0018      	movs	r0, r3
   1aed4:	46bd      	mov	sp, r7
   1aed6:	b002      	add	sp, #8
   1aed8:	bd80      	pop	{r7, pc}
   1aeda:	46c0      	nop			; (mov r8, r8)
   1aedc:	000086d5 	.word	0x000086d5

0001aee0 <TimerInit>:


void TimerInit(Timer* timer) {
   1aee0:	b580      	push	{r7, lr}
   1aee2:	b082      	sub	sp, #8
   1aee4:	af00      	add	r7, sp, #0
   1aee6:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   1aee8:	687b      	ldr	r3, [r7, #4]
   1aeea:	2200      	movs	r2, #0
   1aeec:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   1aeee:	687b      	ldr	r3, [r7, #4]
   1aef0:	3304      	adds	r3, #4
   1aef2:	2208      	movs	r2, #8
   1aef4:	2100      	movs	r1, #0
   1aef6:	0018      	movs	r0, r3
   1aef8:	4b02      	ldr	r3, [pc, #8]	; (1af04 <TimerInit+0x24>)
   1aefa:	4798      	blx	r3
}
   1aefc:	46c0      	nop			; (mov r8, r8)
   1aefe:	46bd      	mov	sp, r7
   1af00:	b002      	add	sp, #8
   1af02:	bd80      	pop	{r7, pc}
   1af04:	00020123 	.word	0x00020123

0001af08 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   1af08:	b590      	push	{r4, r7, lr}
   1af0a:	b085      	sub	sp, #20
   1af0c:	af00      	add	r7, sp, #0
   1af0e:	60f8      	str	r0, [r7, #12]
   1af10:	60b9      	str	r1, [r7, #8]
   1af12:	607a      	str	r2, [r7, #4]
   1af14:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   1af16:	683b      	ldr	r3, [r7, #0]
   1af18:	2b00      	cmp	r3, #0
   1af1a:	d101      	bne.n	1af20 <WINC1500_read+0x18>
   1af1c:	230a      	movs	r3, #10
   1af1e:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   1af20:	4b2c      	ldr	r3, [pc, #176]	; (1afd4 <WINC1500_read+0xcc>)
   1af22:	681b      	ldr	r3, [r3, #0]
   1af24:	2b00      	cmp	r3, #0
   1af26:	d131      	bne.n	1af8c <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   1af28:	4b2b      	ldr	r3, [pc, #172]	; (1afd8 <WINC1500_read+0xd0>)
   1af2a:	2200      	movs	r2, #0
   1af2c:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   1af2e:	68fb      	ldr	r3, [r7, #12]
   1af30:	681b      	ldr	r3, [r3, #0]
   1af32:	b258      	sxtb	r0, r3
   1af34:	683c      	ldr	r4, [r7, #0]
   1af36:	2380      	movs	r3, #128	; 0x80
   1af38:	005a      	lsls	r2, r3, #1
   1af3a:	4928      	ldr	r1, [pc, #160]	; (1afdc <WINC1500_read+0xd4>)
   1af3c:	0023      	movs	r3, r4
   1af3e:	4c28      	ldr	r4, [pc, #160]	; (1afe0 <WINC1500_read+0xd8>)
   1af40:	47a0      	blx	r4
   1af42:	1e03      	subs	r3, r0, #0
   1af44:	d005      	beq.n	1af52 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   1af46:	2301      	movs	r3, #1
   1af48:	425b      	negs	r3, r3
   1af4a:	e03e      	b.n	1afca <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   1af4c:	2000      	movs	r0, #0
   1af4e:	4b25      	ldr	r3, [pc, #148]	; (1afe4 <WINC1500_read+0xdc>)
   1af50:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   1af52:	4b21      	ldr	r3, [pc, #132]	; (1afd8 <WINC1500_read+0xd0>)
   1af54:	781b      	ldrb	r3, [r3, #0]
   1af56:	2201      	movs	r2, #1
   1af58:	4053      	eors	r3, r2
   1af5a:	b2db      	uxtb	r3, r3
   1af5c:	2b00      	cmp	r3, #0
   1af5e:	d1f5      	bne.n	1af4c <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   1af60:	4b21      	ldr	r3, [pc, #132]	; (1afe8 <WINC1500_read+0xe0>)
   1af62:	681b      	ldr	r3, [r3, #0]
   1af64:	2b00      	cmp	r3, #0
   1af66:	dd08      	ble.n	1af7a <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   1af68:	4b1f      	ldr	r3, [pc, #124]	; (1afe8 <WINC1500_read+0xe0>)
   1af6a:	681b      	ldr	r3, [r3, #0]
   1af6c:	001a      	movs	r2, r3
   1af6e:	4b19      	ldr	r3, [pc, #100]	; (1afd4 <WINC1500_read+0xcc>)
   1af70:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   1af72:	4b1e      	ldr	r3, [pc, #120]	; (1afec <WINC1500_read+0xe4>)
   1af74:	2200      	movs	r2, #0
   1af76:	601a      	str	r2, [r3, #0]
   1af78:	e008      	b.n	1af8c <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   1af7a:	4b16      	ldr	r3, [pc, #88]	; (1afd4 <WINC1500_read+0xcc>)
   1af7c:	2200      	movs	r2, #0
   1af7e:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   1af80:	4b1a      	ldr	r3, [pc, #104]	; (1afec <WINC1500_read+0xe4>)
   1af82:	2200      	movs	r2, #0
   1af84:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   1af86:	4b18      	ldr	r3, [pc, #96]	; (1afe8 <WINC1500_read+0xe0>)
   1af88:	681b      	ldr	r3, [r3, #0]
   1af8a:	e01e      	b.n	1afca <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   1af8c:	4b11      	ldr	r3, [pc, #68]	; (1afd4 <WINC1500_read+0xcc>)
   1af8e:	681b      	ldr	r3, [r3, #0]
   1af90:	001a      	movs	r2, r3
   1af92:	687b      	ldr	r3, [r7, #4]
   1af94:	4293      	cmp	r3, r2
   1af96:	dd02      	ble.n	1af9e <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   1af98:	2301      	movs	r3, #1
   1af9a:	425b      	negs	r3, r3
   1af9c:	e015      	b.n	1afca <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   1af9e:	4b13      	ldr	r3, [pc, #76]	; (1afec <WINC1500_read+0xe4>)
   1afa0:	681a      	ldr	r2, [r3, #0]
   1afa2:	4b0e      	ldr	r3, [pc, #56]	; (1afdc <WINC1500_read+0xd4>)
   1afa4:	18d1      	adds	r1, r2, r3
   1afa6:	687a      	ldr	r2, [r7, #4]
   1afa8:	68bb      	ldr	r3, [r7, #8]
   1afaa:	0018      	movs	r0, r3
   1afac:	4b10      	ldr	r3, [pc, #64]	; (1aff0 <WINC1500_read+0xe8>)
   1afae:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   1afb0:	4b08      	ldr	r3, [pc, #32]	; (1afd4 <WINC1500_read+0xcc>)
   1afb2:	681a      	ldr	r2, [r3, #0]
   1afb4:	687b      	ldr	r3, [r7, #4]
   1afb6:	1ad2      	subs	r2, r2, r3
   1afb8:	4b06      	ldr	r3, [pc, #24]	; (1afd4 <WINC1500_read+0xcc>)
   1afba:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   1afbc:	4b0b      	ldr	r3, [pc, #44]	; (1afec <WINC1500_read+0xe4>)
   1afbe:	681a      	ldr	r2, [r3, #0]
   1afc0:	687b      	ldr	r3, [r7, #4]
   1afc2:	18d2      	adds	r2, r2, r3
   1afc4:	4b09      	ldr	r3, [pc, #36]	; (1afec <WINC1500_read+0xe4>)
   1afc6:	601a      	str	r2, [r3, #0]
  
  return len;
   1afc8:	687b      	ldr	r3, [r7, #4]
}
   1afca:	0018      	movs	r0, r3
   1afcc:	46bd      	mov	sp, r7
   1afce:	b005      	add	sp, #20
   1afd0:	bd90      	pop	{r4, r7, pc}
   1afd2:	46c0      	nop			; (mov r8, r8)
   1afd4:	20003e94 	.word	0x20003e94
   1afd8:	20003d8f 	.word	0x20003d8f
   1afdc:	20003d90 	.word	0x20003d90
   1afe0:	000115bd 	.word	0x000115bd
   1afe4:	0000db05 	.word	0x0000db05
   1afe8:	20003d88 	.word	0x20003d88
   1afec:	20003e90 	.word	0x20003e90
   1aff0:	000200ed 	.word	0x000200ed

0001aff4 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   1aff4:	b590      	push	{r4, r7, lr}
   1aff6:	b085      	sub	sp, #20
   1aff8:	af00      	add	r7, sp, #0
   1affa:	60f8      	str	r0, [r7, #12]
   1affc:	60b9      	str	r1, [r7, #8]
   1affe:	607a      	str	r2, [r7, #4]
   1b000:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   1b002:	4b10      	ldr	r3, [pc, #64]	; (1b044 <WINC1500_write+0x50>)
   1b004:	2200      	movs	r2, #0
   1b006:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   1b008:	68fb      	ldr	r3, [r7, #12]
   1b00a:	681b      	ldr	r3, [r3, #0]
   1b00c:	b258      	sxtb	r0, r3
   1b00e:	687b      	ldr	r3, [r7, #4]
   1b010:	b29a      	uxth	r2, r3
   1b012:	68b9      	ldr	r1, [r7, #8]
   1b014:	2300      	movs	r3, #0
   1b016:	4c0c      	ldr	r4, [pc, #48]	; (1b048 <WINC1500_write+0x54>)
   1b018:	47a0      	blx	r4
   1b01a:	1e03      	subs	r3, r0, #0
   1b01c:	d005      	beq.n	1b02a <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   1b01e:	2301      	movs	r3, #1
   1b020:	425b      	negs	r3, r3
   1b022:	e00a      	b.n	1b03a <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   1b024:	2000      	movs	r0, #0
   1b026:	4b09      	ldr	r3, [pc, #36]	; (1b04c <WINC1500_write+0x58>)
   1b028:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   1b02a:	4b06      	ldr	r3, [pc, #24]	; (1b044 <WINC1500_write+0x50>)
   1b02c:	781b      	ldrb	r3, [r3, #0]
   1b02e:	2201      	movs	r2, #1
   1b030:	4053      	eors	r3, r2
   1b032:	b2db      	uxtb	r3, r3
   1b034:	2b00      	cmp	r3, #0
   1b036:	d1f5      	bne.n	1b024 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   1b038:	687b      	ldr	r3, [r7, #4]
}
   1b03a:	0018      	movs	r0, r3
   1b03c:	46bd      	mov	sp, r7
   1b03e:	b005      	add	sp, #20
   1b040:	bd90      	pop	{r4, r7, pc}
   1b042:	46c0      	nop			; (mov r8, r8)
   1b044:	20003d8e 	.word	0x20003d8e
   1b048:	00011459 	.word	0x00011459
   1b04c:	0000db05 	.word	0x0000db05

0001b050 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   1b050:	b580      	push	{r7, lr}
   1b052:	b082      	sub	sp, #8
   1b054:	af00      	add	r7, sp, #0
   1b056:	6078      	str	r0, [r7, #4]
	close(n->socket);
   1b058:	687b      	ldr	r3, [r7, #4]
   1b05a:	681b      	ldr	r3, [r3, #0]
   1b05c:	b25b      	sxtb	r3, r3
   1b05e:	0018      	movs	r0, r3
   1b060:	4b06      	ldr	r3, [pc, #24]	; (1b07c <WINC1500_disconnect+0x2c>)
   1b062:	4798      	blx	r3
	n->socket=-1;
   1b064:	687b      	ldr	r3, [r7, #4]
   1b066:	2201      	movs	r2, #1
   1b068:	4252      	negs	r2, r2
   1b06a:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   1b06c:	4b04      	ldr	r3, [pc, #16]	; (1b080 <WINC1500_disconnect+0x30>)
   1b06e:	2200      	movs	r2, #0
   1b070:	701a      	strb	r2, [r3, #0]
}
   1b072:	46c0      	nop			; (mov r8, r8)
   1b074:	46bd      	mov	sp, r7
   1b076:	b002      	add	sp, #8
   1b078:	bd80      	pop	{r7, pc}
   1b07a:	46c0      	nop			; (mov r8, r8)
   1b07c:	0001173d 	.word	0x0001173d
   1b080:	20003d8d 	.word	0x20003d8d

0001b084 <NetworkInit>:


void NetworkInit(Network* n) {
   1b084:	b580      	push	{r7, lr}
   1b086:	b082      	sub	sp, #8
   1b088:	af00      	add	r7, sp, #0
   1b08a:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   1b08c:	687b      	ldr	r3, [r7, #4]
   1b08e:	2201      	movs	r2, #1
   1b090:	4252      	negs	r2, r2
   1b092:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   1b094:	687b      	ldr	r3, [r7, #4]
   1b096:	4a06      	ldr	r2, [pc, #24]	; (1b0b0 <NetworkInit+0x2c>)
   1b098:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   1b09a:	687b      	ldr	r3, [r7, #4]
   1b09c:	4a05      	ldr	r2, [pc, #20]	; (1b0b4 <NetworkInit+0x30>)
   1b09e:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   1b0a0:	687b      	ldr	r3, [r7, #4]
   1b0a2:	4a05      	ldr	r2, [pc, #20]	; (1b0b8 <NetworkInit+0x34>)
   1b0a4:	611a      	str	r2, [r3, #16]
}
   1b0a6:	46c0      	nop			; (mov r8, r8)
   1b0a8:	46bd      	mov	sp, r7
   1b0aa:	b002      	add	sp, #8
   1b0ac:	bd80      	pop	{r7, pc}
   1b0ae:	46c0      	nop			; (mov r8, r8)
   1b0b0:	0001af09 	.word	0x0001af09
   1b0b4:	0001aff5 	.word	0x0001aff5
   1b0b8:	0001b051 	.word	0x0001b051

0001b0bc <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   1b0bc:	b580      	push	{r7, lr}
   1b0be:	b088      	sub	sp, #32
   1b0c0:	af00      	add	r7, sp, #0
   1b0c2:	60f8      	str	r0, [r7, #12]
   1b0c4:	60b9      	str	r1, [r7, #8]
   1b0c6:	607a      	str	r2, [r7, #4]
   1b0c8:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   1b0ca:	4b37      	ldr	r3, [pc, #220]	; (1b1a8 <ConnectNetwork+0xec>)
   1b0cc:	2200      	movs	r2, #0
   1b0ce:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   1b0d0:	4b36      	ldr	r3, [pc, #216]	; (1b1ac <ConnectNetwork+0xf0>)
   1b0d2:	68ba      	ldr	r2, [r7, #8]
   1b0d4:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   1b0d6:	68bb      	ldr	r3, [r7, #8]
   1b0d8:	0018      	movs	r0, r3
   1b0da:	4b35      	ldr	r3, [pc, #212]	; (1b1b0 <ConnectNetwork+0xf4>)
   1b0dc:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   1b0de:	e002      	b.n	1b0e6 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   1b0e0:	2000      	movs	r0, #0
   1b0e2:	4b34      	ldr	r3, [pc, #208]	; (1b1b4 <ConnectNetwork+0xf8>)
   1b0e4:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   1b0e6:	4b30      	ldr	r3, [pc, #192]	; (1b1a8 <ConnectNetwork+0xec>)
   1b0e8:	781b      	ldrb	r3, [r3, #0]
   1b0ea:	2201      	movs	r2, #1
   1b0ec:	4053      	eors	r3, r2
   1b0ee:	b2db      	uxtb	r3, r3
   1b0f0:	2b00      	cmp	r3, #0
   1b0f2:	d1f5      	bne.n	1b0e0 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   1b0f4:	4b30      	ldr	r3, [pc, #192]	; (1b1b8 <ConnectNetwork+0xfc>)
   1b0f6:	681a      	ldr	r2, [r3, #0]
   1b0f8:	68fb      	ldr	r3, [r7, #12]
   1b0fa:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   1b0fc:	2310      	movs	r3, #16
   1b0fe:	18fb      	adds	r3, r7, r3
   1b100:	2202      	movs	r2, #2
   1b102:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   1b104:	687b      	ldr	r3, [r7, #4]
   1b106:	b29b      	uxth	r3, r3
   1b108:	021b      	lsls	r3, r3, #8
   1b10a:	b21a      	sxth	r2, r3
   1b10c:	687b      	ldr	r3, [r7, #4]
   1b10e:	b29b      	uxth	r3, r3
   1b110:	0a1b      	lsrs	r3, r3, #8
   1b112:	b29b      	uxth	r3, r3
   1b114:	b21b      	sxth	r3, r3
   1b116:	4313      	orrs	r3, r2
   1b118:	b21b      	sxth	r3, r3
   1b11a:	b29a      	uxth	r2, r3
   1b11c:	2310      	movs	r3, #16
   1b11e:	18fb      	adds	r3, r7, r3
   1b120:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   1b122:	4b25      	ldr	r3, [pc, #148]	; (1b1b8 <ConnectNetwork+0xfc>)
   1b124:	681b      	ldr	r3, [r3, #0]
   1b126:	001a      	movs	r2, r3
   1b128:	2310      	movs	r3, #16
   1b12a:	18fb      	adds	r3, r7, r3
   1b12c:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   1b12e:	68fb      	ldr	r3, [r7, #12]
   1b130:	681b      	ldr	r3, [r3, #0]
   1b132:	2b00      	cmp	r3, #0
   1b134:	da0a      	bge.n	1b14c <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   1b136:	683b      	ldr	r3, [r7, #0]
   1b138:	b2db      	uxtb	r3, r3
   1b13a:	001a      	movs	r2, r3
   1b13c:	2101      	movs	r1, #1
   1b13e:	2002      	movs	r0, #2
   1b140:	4b1e      	ldr	r3, [pc, #120]	; (1b1bc <ConnectNetwork+0x100>)
   1b142:	4798      	blx	r3
   1b144:	0003      	movs	r3, r0
   1b146:	001a      	movs	r2, r3
   1b148:	68fb      	ldr	r3, [r7, #12]
   1b14a:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1b14c:	68fb      	ldr	r3, [r7, #12]
   1b14e:	681b      	ldr	r3, [r3, #0]
   1b150:	3301      	adds	r3, #1
   1b152:	d108      	bne.n	1b166 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   1b154:	68fb      	ldr	r3, [r7, #12]
   1b156:	681b      	ldr	r3, [r3, #0]
   1b158:	b25b      	sxtb	r3, r3
   1b15a:	0018      	movs	r0, r3
   1b15c:	4b18      	ldr	r3, [pc, #96]	; (1b1c0 <ConnectNetwork+0x104>)
   1b15e:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   1b160:	2309      	movs	r3, #9
   1b162:	425b      	negs	r3, r3
   1b164:	e01c      	b.n	1b1a0 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   1b166:	68fb      	ldr	r3, [r7, #12]
   1b168:	681b      	ldr	r3, [r3, #0]
   1b16a:	b25b      	sxtb	r3, r3
   1b16c:	2210      	movs	r2, #16
   1b16e:	18b9      	adds	r1, r7, r2
   1b170:	2210      	movs	r2, #16
   1b172:	0018      	movs	r0, r3
   1b174:	4b13      	ldr	r3, [pc, #76]	; (1b1c4 <ConnectNetwork+0x108>)
   1b176:	4798      	blx	r3
   1b178:	1e03      	subs	r3, r0, #0
   1b17a:	d002      	beq.n	1b182 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   1b17c:	2309      	movs	r3, #9
   1b17e:	425b      	negs	r3, r3
   1b180:	e00e      	b.n	1b1a0 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   1b182:	4b11      	ldr	r3, [pc, #68]	; (1b1c8 <ConnectNetwork+0x10c>)
   1b184:	2200      	movs	r2, #0
   1b186:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   1b188:	e002      	b.n	1b190 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   1b18a:	2000      	movs	r0, #0
   1b18c:	4b09      	ldr	r3, [pc, #36]	; (1b1b4 <ConnectNetwork+0xf8>)
   1b18e:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   1b190:	4b0d      	ldr	r3, [pc, #52]	; (1b1c8 <ConnectNetwork+0x10c>)
   1b192:	781b      	ldrb	r3, [r3, #0]
   1b194:	2201      	movs	r2, #1
   1b196:	4053      	eors	r3, r2
   1b198:	b2db      	uxtb	r3, r3
   1b19a:	2b00      	cmp	r3, #0
   1b19c:	d1f5      	bne.n	1b18a <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   1b19e:	2300      	movs	r3, #0
   1b1a0:	0018      	movs	r0, r3
   1b1a2:	46bd      	mov	sp, r7
   1b1a4:	b008      	add	sp, #32
   1b1a6:	bd80      	pop	{r7, pc}
   1b1a8:	20003d8c 	.word	0x20003d8c
   1b1ac:	20003e98 	.word	0x20003e98
   1b1b0:	00011985 	.word	0x00011985
   1b1b4:	0000db05 	.word	0x0000db05
   1b1b8:	20003d84 	.word	0x20003d84
   1b1bc:	00011131 	.word	0x00011131
   1b1c0:	0001173d 	.word	0x0001173d
   1b1c4:	00011345 	.word	0x00011345
   1b1c8:	20003d8d 	.word	0x20003d8d

0001b1cc <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   1b1cc:	b580      	push	{r7, lr}
   1b1ce:	b084      	sub	sp, #16
   1b1d0:	af00      	add	r7, sp, #0
   1b1d2:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   1b1d4:	687b      	ldr	r3, [r7, #4]
   1b1d6:	2b00      	cmp	r3, #0
   1b1d8:	d022      	beq.n	1b220 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1b1da:	2300      	movs	r3, #0
   1b1dc:	60fb      	str	r3, [r7, #12]
   1b1de:	e01b      	b.n	1b218 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1b1e0:	4a11      	ldr	r2, [pc, #68]	; (1b228 <allocateClient+0x5c>)
   1b1e2:	68fb      	ldr	r3, [r7, #12]
   1b1e4:	2164      	movs	r1, #100	; 0x64
   1b1e6:	434b      	muls	r3, r1
   1b1e8:	18d3      	adds	r3, r2, r3
   1b1ea:	3360      	adds	r3, #96	; 0x60
   1b1ec:	681b      	ldr	r3, [r3, #0]
   1b1ee:	2b00      	cmp	r3, #0
   1b1f0:	d10f      	bne.n	1b212 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   1b1f2:	4a0d      	ldr	r2, [pc, #52]	; (1b228 <allocateClient+0x5c>)
   1b1f4:	68fb      	ldr	r3, [r7, #12]
   1b1f6:	2164      	movs	r1, #100	; 0x64
   1b1f8:	434b      	muls	r3, r1
   1b1fa:	18d3      	adds	r3, r2, r3
   1b1fc:	3360      	adds	r3, #96	; 0x60
   1b1fe:	687a      	ldr	r2, [r7, #4]
   1b200:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   1b202:	68fb      	ldr	r3, [r7, #12]
   1b204:	2264      	movs	r2, #100	; 0x64
   1b206:	435a      	muls	r2, r3
   1b208:	4b07      	ldr	r3, [pc, #28]	; (1b228 <allocateClient+0x5c>)
   1b20a:	18d2      	adds	r2, r2, r3
   1b20c:	687b      	ldr	r3, [r7, #4]
   1b20e:	61da      	str	r2, [r3, #28]
			return;
   1b210:	e007      	b.n	1b222 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1b212:	68fb      	ldr	r3, [r7, #12]
   1b214:	3301      	adds	r3, #1
   1b216:	60fb      	str	r3, [r7, #12]
   1b218:	68fb      	ldr	r3, [r7, #12]
   1b21a:	2b06      	cmp	r3, #6
   1b21c:	d9e0      	bls.n	1b1e0 <allocateClient+0x14>
   1b21e:	e000      	b.n	1b222 <allocateClient+0x56>
		return;
   1b220:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   1b222:	46bd      	mov	sp, r7
   1b224:	b004      	add	sp, #16
   1b226:	bd80      	pop	{r7, pc}
   1b228:	20003e9c 	.word	0x20003e9c

0001b22c <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   1b22c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b22e:	b089      	sub	sp, #36	; 0x24
   1b230:	af04      	add	r7, sp, #16
   1b232:	6078      	str	r0, [r7, #4]
   1b234:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   1b236:	687b      	ldr	r3, [r7, #4]
   1b238:	2b00      	cmp	r3, #0
   1b23a:	d00a      	beq.n	1b252 <mqtt_init+0x26>
   1b23c:	683b      	ldr	r3, [r7, #0]
   1b23e:	2b00      	cmp	r3, #0
   1b240:	d007      	beq.n	1b252 <mqtt_init+0x26>
   1b242:	683b      	ldr	r3, [r7, #0]
   1b244:	691b      	ldr	r3, [r3, #16]
   1b246:	2b00      	cmp	r3, #0
   1b248:	d003      	beq.n	1b252 <mqtt_init+0x26>
   1b24a:	683b      	ldr	r3, [r7, #0]
   1b24c:	689b      	ldr	r3, [r3, #8]
   1b24e:	2b00      	cmp	r3, #0
   1b250:	d102      	bne.n	1b258 <mqtt_init+0x2c>
		return FAILURE;
   1b252:	2301      	movs	r3, #1
   1b254:	425b      	negs	r3, r3
   1b256:	e034      	b.n	1b2c2 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   1b258:	683b      	ldr	r3, [r7, #0]
   1b25a:	889b      	ldrh	r3, [r3, #4]
   1b25c:	001a      	movs	r2, r3
   1b25e:	23fa      	movs	r3, #250	; 0xfa
   1b260:	009b      	lsls	r3, r3, #2
   1b262:	4353      	muls	r3, r2
   1b264:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   1b266:	687b      	ldr	r3, [r7, #4]
   1b268:	3320      	adds	r3, #32
   1b26a:	0018      	movs	r0, r3
   1b26c:	4b17      	ldr	r3, [pc, #92]	; (1b2cc <mqtt_init+0xa0>)
   1b26e:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   1b270:	687b      	ldr	r3, [r7, #4]
   1b272:	3304      	adds	r3, #4
   1b274:	6839      	ldr	r1, [r7, #0]
   1b276:	2218      	movs	r2, #24
   1b278:	0018      	movs	r0, r3
   1b27a:	4b15      	ldr	r3, [pc, #84]	; (1b2d0 <mqtt_init+0xa4>)
   1b27c:	4798      	blx	r3
	allocateClient(module);
   1b27e:	687b      	ldr	r3, [r7, #4]
   1b280:	0018      	movs	r0, r3
   1b282:	4b14      	ldr	r3, [pc, #80]	; (1b2d4 <mqtt_init+0xa8>)
   1b284:	4798      	blx	r3
	
	if(module->client)
   1b286:	687b      	ldr	r3, [r7, #4]
   1b288:	69db      	ldr	r3, [r3, #28]
   1b28a:	2b00      	cmp	r3, #0
   1b28c:	d017      	beq.n	1b2be <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1b28e:	687b      	ldr	r3, [r7, #4]
   1b290:	69d8      	ldr	r0, [r3, #28]
   1b292:	687b      	ldr	r3, [r7, #4]
   1b294:	3320      	adds	r3, #32
   1b296:	001c      	movs	r4, r3
   1b298:	683b      	ldr	r3, [r7, #0]
   1b29a:	691e      	ldr	r6, [r3, #16]
   1b29c:	683b      	ldr	r3, [r7, #0]
   1b29e:	695a      	ldr	r2, [r3, #20]
   1b2a0:	683b      	ldr	r3, [r7, #0]
   1b2a2:	6899      	ldr	r1, [r3, #8]
   1b2a4:	683b      	ldr	r3, [r7, #0]
   1b2a6:	68db      	ldr	r3, [r3, #12]
   1b2a8:	68fd      	ldr	r5, [r7, #12]
   1b2aa:	9302      	str	r3, [sp, #8]
   1b2ac:	9101      	str	r1, [sp, #4]
   1b2ae:	9200      	str	r2, [sp, #0]
   1b2b0:	0033      	movs	r3, r6
   1b2b2:	002a      	movs	r2, r5
   1b2b4:	0021      	movs	r1, r4
   1b2b6:	4c08      	ldr	r4, [pc, #32]	; (1b2d8 <mqtt_init+0xac>)
   1b2b8:	47a0      	blx	r4
		return SUCCESS;
   1b2ba:	2300      	movs	r3, #0
   1b2bc:	e001      	b.n	1b2c2 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   1b2be:	2301      	movs	r3, #1
   1b2c0:	425b      	negs	r3, r3
}
   1b2c2:	0018      	movs	r0, r3
   1b2c4:	46bd      	mov	sp, r7
   1b2c6:	b005      	add	sp, #20
   1b2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b2ca:	46c0      	nop			; (mov r8, r8)
   1b2cc:	0001b085 	.word	0x0001b085
   1b2d0:	000200ed 	.word	0x000200ed
   1b2d4:	0001b1cd 	.word	0x0001b1cd
   1b2d8:	0001a0fd 	.word	0x0001a0fd

0001b2dc <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   1b2dc:	b580      	push	{r7, lr}
   1b2de:	b082      	sub	sp, #8
   1b2e0:	af00      	add	r7, sp, #0
   1b2e2:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   1b2e4:	687b      	ldr	r3, [r7, #4]
   1b2e6:	4a0c      	ldr	r2, [pc, #48]	; (1b318 <mqtt_get_config_defaults+0x3c>)
   1b2e8:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1b2ea:	687b      	ldr	r3, [r7, #4]
   1b2ec:	2200      	movs	r2, #0
   1b2ee:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   1b2f0:	687b      	ldr	r3, [r7, #4]
   1b2f2:	223c      	movs	r2, #60	; 0x3c
   1b2f4:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   1b2f6:	687b      	ldr	r3, [r7, #4]
   1b2f8:	2200      	movs	r2, #0
   1b2fa:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   1b2fc:	687b      	ldr	r3, [r7, #4]
   1b2fe:	2200      	movs	r2, #0
   1b300:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   1b302:	687b      	ldr	r3, [r7, #4]
   1b304:	2200      	movs	r2, #0
   1b306:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   1b308:	687b      	ldr	r3, [r7, #4]
   1b30a:	2200      	movs	r2, #0
   1b30c:	615a      	str	r2, [r3, #20]
}
   1b30e:	46c0      	nop			; (mov r8, r8)
   1b310:	46bd      	mov	sp, r7
   1b312:	b002      	add	sp, #8
   1b314:	bd80      	pop	{r7, pc}
   1b316:	46c0      	nop			; (mov r8, r8)
   1b318:	0000075b 	.word	0x0000075b

0001b31c <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   1b31c:	b580      	push	{r7, lr}
   1b31e:	b082      	sub	sp, #8
   1b320:	af00      	add	r7, sp, #0
   1b322:	6078      	str	r0, [r7, #4]
   1b324:	6039      	str	r1, [r7, #0]
	if(module)
   1b326:	687b      	ldr	r3, [r7, #4]
   1b328:	2b00      	cmp	r3, #0
   1b32a:	d004      	beq.n	1b336 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   1b32c:	687b      	ldr	r3, [r7, #4]
   1b32e:	683a      	ldr	r2, [r7, #0]
   1b330:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   1b332:	2300      	movs	r3, #0
   1b334:	e001      	b.n	1b33a <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   1b336:	2301      	movs	r3, #1
   1b338:	425b      	negs	r3, r3
}
   1b33a:	0018      	movs	r0, r3
   1b33c:	46bd      	mov	sp, r7
   1b33e:	b002      	add	sp, #8
   1b340:	bd80      	pop	{r7, pc}
	...

0001b344 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1b344:	b580      	push	{r7, lr}
   1b346:	b082      	sub	sp, #8
   1b348:	af00      	add	r7, sp, #0
   1b34a:	603a      	str	r2, [r7, #0]
   1b34c:	1dfb      	adds	r3, r7, #7
   1b34e:	1c02      	adds	r2, r0, #0
   1b350:	701a      	strb	r2, [r3, #0]
   1b352:	1dbb      	adds	r3, r7, #6
   1b354:	1c0a      	adds	r2, r1, #0
   1b356:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   1b358:	683a      	ldr	r2, [r7, #0]
   1b35a:	1dbb      	adds	r3, r7, #6
   1b35c:	7819      	ldrb	r1, [r3, #0]
   1b35e:	1dfb      	adds	r3, r7, #7
   1b360:	781b      	ldrb	r3, [r3, #0]
   1b362:	b25b      	sxtb	r3, r3
   1b364:	0018      	movs	r0, r3
   1b366:	4b03      	ldr	r3, [pc, #12]	; (1b374 <mqtt_socket_event_handler+0x30>)
   1b368:	4798      	blx	r3
}
   1b36a:	46c0      	nop			; (mov r8, r8)
   1b36c:	46bd      	mov	sp, r7
   1b36e:	b002      	add	sp, #8
   1b370:	bd80      	pop	{r7, pc}
   1b372:	46c0      	nop			; (mov r8, r8)
   1b374:	0001adc1 	.word	0x0001adc1

0001b378 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   1b378:	b580      	push	{r7, lr}
   1b37a:	b082      	sub	sp, #8
   1b37c:	af00      	add	r7, sp, #0
   1b37e:	6078      	str	r0, [r7, #4]
   1b380:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   1b382:	683a      	ldr	r2, [r7, #0]
   1b384:	687b      	ldr	r3, [r7, #4]
   1b386:	0011      	movs	r1, r2
   1b388:	0018      	movs	r0, r3
   1b38a:	4b03      	ldr	r3, [pc, #12]	; (1b398 <mqtt_socket_resolve_handler+0x20>)
   1b38c:	4798      	blx	r3
}
   1b38e:	46c0      	nop			; (mov r8, r8)
   1b390:	46bd      	mov	sp, r7
   1b392:	b002      	add	sp, #8
   1b394:	bd80      	pop	{r7, pc}
   1b396:	46c0      	nop			; (mov r8, r8)
   1b398:	0001ad71 	.word	0x0001ad71

0001b39c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   1b39c:	b590      	push	{r4, r7, lr}
   1b39e:	b085      	sub	sp, #20
   1b3a0:	af00      	add	r7, sp, #0
   1b3a2:	6078      	str	r0, [r7, #4]
   1b3a4:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   1b3a6:	687b      	ldr	r3, [r7, #4]
   1b3a8:	3320      	adds	r3, #32
   1b3aa:	0018      	movs	r0, r3
   1b3ac:	687b      	ldr	r3, [r7, #4]
   1b3ae:	889b      	ldrh	r3, [r3, #4]
   1b3b0:	001a      	movs	r2, r3
   1b3b2:	687b      	ldr	r3, [r7, #4]
   1b3b4:	799b      	ldrb	r3, [r3, #6]
   1b3b6:	6839      	ldr	r1, [r7, #0]
   1b3b8:	4c09      	ldr	r4, [pc, #36]	; (1b3e0 <mqtt_connect+0x44>)
   1b3ba:	47a0      	blx	r4
   1b3bc:	0003      	movs	r3, r0
   1b3be:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   1b3c0:	687b      	ldr	r3, [r7, #4]
   1b3c2:	681b      	ldr	r3, [r3, #0]
   1b3c4:	2b00      	cmp	r3, #0
   1b3c6:	d006      	beq.n	1b3d6 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   1b3c8:	687b      	ldr	r3, [r7, #4]
   1b3ca:	681b      	ldr	r3, [r3, #0]
   1b3cc:	220c      	movs	r2, #12
   1b3ce:	18ba      	adds	r2, r7, r2
   1b3d0:	6878      	ldr	r0, [r7, #4]
   1b3d2:	2100      	movs	r1, #0
   1b3d4:	4798      	blx	r3
	return connResult.sock_connected.result;
   1b3d6:	68fb      	ldr	r3, [r7, #12]
}
   1b3d8:	0018      	movs	r0, r3
   1b3da:	46bd      	mov	sp, r7
   1b3dc:	b005      	add	sp, #20
   1b3de:	bd90      	pop	{r4, r7, pc}
   1b3e0:	0001b0bd 	.word	0x0001b0bd

0001b3e4 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   1b3e4:	b580      	push	{r7, lr}
   1b3e6:	b09c      	sub	sp, #112	; 0x70
   1b3e8:	af00      	add	r7, sp, #0
   1b3ea:	60f8      	str	r0, [r7, #12]
   1b3ec:	607a      	str	r2, [r7, #4]
   1b3ee:	603b      	str	r3, [r7, #0]
   1b3f0:	230b      	movs	r3, #11
   1b3f2:	18fb      	adds	r3, r7, r3
   1b3f4:	1c0a      	adds	r2, r1, #0
   1b3f6:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   1b3f8:	2310      	movs	r3, #16
   1b3fa:	18fa      	adds	r2, r7, r3
   1b3fc:	4b31      	ldr	r3, [pc, #196]	; (1b4c4 <mqtt_connect_broker+0xe0>)
   1b3fe:	0010      	movs	r0, r2
   1b400:	0019      	movs	r1, r3
   1b402:	2358      	movs	r3, #88	; 0x58
   1b404:	001a      	movs	r2, r3
   1b406:	4b30      	ldr	r3, [pc, #192]	; (1b4c8 <mqtt_connect_broker+0xe4>)
   1b408:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   1b40a:	2310      	movs	r3, #16
   1b40c:	18fb      	adds	r3, r7, r3
   1b40e:	2204      	movs	r2, #4
   1b410:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   1b412:	2310      	movs	r3, #16
   1b414:	18fb      	adds	r3, r7, r3
   1b416:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1b418:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   1b41a:	2310      	movs	r3, #16
   1b41c:	18fb      	adds	r3, r7, r3
   1b41e:	687a      	ldr	r2, [r7, #4]
   1b420:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   1b422:	2310      	movs	r3, #16
   1b424:	18fb      	adds	r3, r7, r3
   1b426:	683a      	ldr	r2, [r7, #0]
   1b428:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   1b42a:	2310      	movs	r3, #16
   1b42c:	18fb      	adds	r3, r7, r3
   1b42e:	220b      	movs	r2, #11
   1b430:	18ba      	adds	r2, r7, r2
   1b432:	7812      	ldrb	r2, [r2, #0]
   1b434:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   1b436:	2310      	movs	r3, #16
   1b438:	18fb      	adds	r3, r7, r3
   1b43a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1b43c:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   1b43e:	2310      	movs	r3, #16
   1b440:	18fb      	adds	r3, r7, r3
   1b442:	2280      	movs	r2, #128	; 0x80
   1b444:	18ba      	adds	r2, r7, r2
   1b446:	6812      	ldr	r2, [r2, #0]
   1b448:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   1b44a:	2310      	movs	r3, #16
   1b44c:	18fb      	adds	r3, r7, r3
   1b44e:	228c      	movs	r2, #140	; 0x8c
   1b450:	18ba      	adds	r2, r7, r2
   1b452:	213c      	movs	r1, #60	; 0x3c
   1b454:	7812      	ldrb	r2, [r2, #0]
   1b456:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   1b458:	2310      	movs	r3, #16
   1b45a:	18fb      	adds	r3, r7, r3
   1b45c:	2288      	movs	r2, #136	; 0x88
   1b45e:	18ba      	adds	r2, r7, r2
   1b460:	213d      	movs	r1, #61	; 0x3d
   1b462:	7812      	ldrb	r2, [r2, #0]
   1b464:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   1b466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1b468:	2b00      	cmp	r3, #0
   1b46a:	d008      	beq.n	1b47e <mqtt_connect_broker+0x9a>
   1b46c:	2380      	movs	r3, #128	; 0x80
   1b46e:	18fb      	adds	r3, r7, r3
   1b470:	681b      	ldr	r3, [r3, #0]
   1b472:	2b00      	cmp	r3, #0
   1b474:	d003      	beq.n	1b47e <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   1b476:	2310      	movs	r3, #16
   1b478:	18fb      	adds	r3, r7, r3
   1b47a:	2201      	movs	r2, #1
   1b47c:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   1b47e:	68fb      	ldr	r3, [r7, #12]
   1b480:	69db      	ldr	r3, [r3, #28]
   1b482:	2210      	movs	r2, #16
   1b484:	18ba      	adds	r2, r7, r2
   1b486:	0011      	movs	r1, r2
   1b488:	0018      	movs	r0, r3
   1b48a:	4b10      	ldr	r3, [pc, #64]	; (1b4cc <mqtt_connect_broker+0xe8>)
   1b48c:	4798      	blx	r3
   1b48e:	0003      	movs	r3, r0
   1b490:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   1b492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b494:	b2da      	uxtb	r2, r3
   1b496:	2368      	movs	r3, #104	; 0x68
   1b498:	18fb      	adds	r3, r7, r3
   1b49a:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   1b49c:	68fb      	ldr	r3, [r7, #12]
   1b49e:	681b      	ldr	r3, [r3, #0]
   1b4a0:	2b00      	cmp	r3, #0
   1b4a2:	d006      	beq.n	1b4b2 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   1b4a4:	68fb      	ldr	r3, [r7, #12]
   1b4a6:	681b      	ldr	r3, [r3, #0]
   1b4a8:	2268      	movs	r2, #104	; 0x68
   1b4aa:	18ba      	adds	r2, r7, r2
   1b4ac:	68f8      	ldr	r0, [r7, #12]
   1b4ae:	2101      	movs	r1, #1
   1b4b0:	4798      	blx	r3
	
	module->isConnected = true;
   1b4b2:	68fb      	ldr	r3, [r7, #12]
   1b4b4:	2234      	movs	r2, #52	; 0x34
   1b4b6:	2101      	movs	r1, #1
   1b4b8:	5499      	strb	r1, [r3, r2]
	return rc;
   1b4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   1b4bc:	0018      	movs	r0, r3
   1b4be:	46bd      	mov	sp, r7
   1b4c0:	b01c      	add	sp, #112	; 0x70
   1b4c2:	bd80      	pop	{r7, pc}
   1b4c4:	00024fa0 	.word	0x00024fa0
   1b4c8:	000200ed 	.word	0x000200ed
   1b4cc:	0001a80d 	.word	0x0001a80d

0001b4d0 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   1b4d0:	b580      	push	{r7, lr}
   1b4d2:	b084      	sub	sp, #16
   1b4d4:	af00      	add	r7, sp, #0
   1b4d6:	6078      	str	r0, [r7, #4]
   1b4d8:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   1b4da:	687b      	ldr	r3, [r7, #4]
   1b4dc:	69db      	ldr	r3, [r3, #28]
   1b4de:	0018      	movs	r0, r3
   1b4e0:	4b0c      	ldr	r3, [pc, #48]	; (1b514 <mqtt_disconnect+0x44>)
   1b4e2:	4798      	blx	r3
   1b4e4:	0003      	movs	r3, r0
   1b4e6:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   1b4e8:	68fb      	ldr	r3, [r7, #12]
   1b4ea:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   1b4ec:	687b      	ldr	r3, [r7, #4]
   1b4ee:	681b      	ldr	r3, [r3, #0]
   1b4f0:	2b00      	cmp	r3, #0
   1b4f2:	d006      	beq.n	1b502 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   1b4f4:	687b      	ldr	r3, [r7, #4]
   1b4f6:	681b      	ldr	r3, [r3, #0]
   1b4f8:	2208      	movs	r2, #8
   1b4fa:	18ba      	adds	r2, r7, r2
   1b4fc:	6878      	ldr	r0, [r7, #4]
   1b4fe:	2105      	movs	r1, #5
   1b500:	4798      	blx	r3
	
	module->isConnected = false;
   1b502:	687b      	ldr	r3, [r7, #4]
   1b504:	2234      	movs	r2, #52	; 0x34
   1b506:	2100      	movs	r1, #0
   1b508:	5499      	strb	r1, [r3, r2]
	return rc;
   1b50a:	68fb      	ldr	r3, [r7, #12]
}
   1b50c:	0018      	movs	r0, r3
   1b50e:	46bd      	mov	sp, r7
   1b510:	b004      	add	sp, #16
   1b512:	bd80      	pop	{r7, pc}
   1b514:	0001ac99 	.word	0x0001ac99

0001b518 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   1b518:	b580      	push	{r7, lr}
   1b51a:	b08a      	sub	sp, #40	; 0x28
   1b51c:	af00      	add	r7, sp, #0
   1b51e:	60f8      	str	r0, [r7, #12]
   1b520:	60b9      	str	r1, [r7, #8]
   1b522:	607a      	str	r2, [r7, #4]
   1b524:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   1b526:	2314      	movs	r3, #20
   1b528:	18fb      	adds	r3, r7, r3
   1b52a:	2230      	movs	r2, #48	; 0x30
   1b52c:	18ba      	adds	r2, r7, r2
   1b52e:	7812      	ldrb	r2, [r2, #0]
   1b530:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   1b532:	2314      	movs	r3, #20
   1b534:	18fb      	adds	r3, r7, r3
   1b536:	687a      	ldr	r2, [r7, #4]
   1b538:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   1b53a:	2314      	movs	r3, #20
   1b53c:	18fb      	adds	r3, r7, r3
   1b53e:	683a      	ldr	r2, [r7, #0]
   1b540:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   1b542:	2314      	movs	r3, #20
   1b544:	18fb      	adds	r3, r7, r3
   1b546:	2234      	movs	r2, #52	; 0x34
   1b548:	18ba      	adds	r2, r7, r2
   1b54a:	7812      	ldrb	r2, [r2, #0]
   1b54c:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   1b54e:	68fb      	ldr	r3, [r7, #12]
   1b550:	69db      	ldr	r3, [r3, #28]
   1b552:	2214      	movs	r2, #20
   1b554:	18ba      	adds	r2, r7, r2
   1b556:	68b9      	ldr	r1, [r7, #8]
   1b558:	0018      	movs	r0, r3
   1b55a:	4b09      	ldr	r3, [pc, #36]	; (1b580 <mqtt_publish+0x68>)
   1b55c:	4798      	blx	r3
   1b55e:	0003      	movs	r3, r0
   1b560:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   1b562:	68fb      	ldr	r3, [r7, #12]
   1b564:	681b      	ldr	r3, [r3, #0]
   1b566:	2b00      	cmp	r3, #0
   1b568:	d005      	beq.n	1b576 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   1b56a:	68fb      	ldr	r3, [r7, #12]
   1b56c:	681b      	ldr	r3, [r3, #0]
   1b56e:	68f8      	ldr	r0, [r7, #12]
   1b570:	2200      	movs	r2, #0
   1b572:	2102      	movs	r1, #2
   1b574:	4798      	blx	r3
	
	return rc;
   1b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b578:	0018      	movs	r0, r3
   1b57a:	46bd      	mov	sp, r7
   1b57c:	b00a      	add	sp, #40	; 0x28
   1b57e:	bd80      	pop	{r7, pc}
   1b580:	0001aad9 	.word	0x0001aad9

0001b584 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   1b584:	b590      	push	{r4, r7, lr}
   1b586:	b087      	sub	sp, #28
   1b588:	af00      	add	r7, sp, #0
   1b58a:	60f8      	str	r0, [r7, #12]
   1b58c:	60b9      	str	r1, [r7, #8]
   1b58e:	603b      	str	r3, [r7, #0]
   1b590:	1dfb      	adds	r3, r7, #7
   1b592:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   1b594:	68fb      	ldr	r3, [r7, #12]
   1b596:	69d8      	ldr	r0, [r3, #28]
   1b598:	683c      	ldr	r4, [r7, #0]
   1b59a:	1dfb      	adds	r3, r7, #7
   1b59c:	781a      	ldrb	r2, [r3, #0]
   1b59e:	68b9      	ldr	r1, [r7, #8]
   1b5a0:	0023      	movs	r3, r4
   1b5a2:	4c09      	ldr	r4, [pc, #36]	; (1b5c8 <mqtt_subscribe+0x44>)
   1b5a4:	47a0      	blx	r4
   1b5a6:	0003      	movs	r3, r0
   1b5a8:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   1b5aa:	68fb      	ldr	r3, [r7, #12]
   1b5ac:	681b      	ldr	r3, [r3, #0]
   1b5ae:	2b00      	cmp	r3, #0
   1b5b0:	d005      	beq.n	1b5be <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   1b5b2:	68fb      	ldr	r3, [r7, #12]
   1b5b4:	681b      	ldr	r3, [r3, #0]
   1b5b6:	68f8      	ldr	r0, [r7, #12]
   1b5b8:	2200      	movs	r2, #0
   1b5ba:	2103      	movs	r1, #3
   1b5bc:	4798      	blx	r3
	
	return rc;
   1b5be:	697b      	ldr	r3, [r7, #20]
}
   1b5c0:	0018      	movs	r0, r3
   1b5c2:	46bd      	mov	sp, r7
   1b5c4:	b007      	add	sp, #28
   1b5c6:	bd90      	pop	{r4, r7, pc}
   1b5c8:	0001a94d 	.word	0x0001a94d

0001b5cc <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   1b5cc:	b580      	push	{r7, lr}
   1b5ce:	b082      	sub	sp, #8
   1b5d0:	af00      	add	r7, sp, #0
   1b5d2:	6078      	str	r0, [r7, #4]
   1b5d4:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   1b5d6:	687b      	ldr	r3, [r7, #4]
   1b5d8:	69db      	ldr	r3, [r3, #28]
   1b5da:	683a      	ldr	r2, [r7, #0]
   1b5dc:	0011      	movs	r1, r2
   1b5de:	0018      	movs	r0, r3
   1b5e0:	4b03      	ldr	r3, [pc, #12]	; (1b5f0 <mqtt_yield+0x24>)
   1b5e2:	4798      	blx	r3
   1b5e4:	0003      	movs	r3, r0
   1b5e6:	0018      	movs	r0, r3
   1b5e8:	46bd      	mov	sp, r7
   1b5ea:	b002      	add	sp, #8
   1b5ec:	bd80      	pop	{r7, pc}
   1b5ee:	46c0      	nop			; (mov r8, r8)
   1b5f0:	0001a755 	.word	0x0001a755

0001b5f4 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   1b5f4:	b590      	push	{r4, r7, lr}
   1b5f6:	b085      	sub	sp, #20
   1b5f8:	af00      	add	r7, sp, #0
   1b5fa:	6078      	str	r0, [r7, #4]
	int len = 0;
   1b5fc:	2300      	movs	r3, #0
   1b5fe:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   1b600:	687b      	ldr	r3, [r7, #4]
   1b602:	7a1b      	ldrb	r3, [r3, #8]
   1b604:	2b03      	cmp	r3, #3
   1b606:	d102      	bne.n	1b60e <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   1b608:	230c      	movs	r3, #12
   1b60a:	60fb      	str	r3, [r7, #12]
   1b60c:	e005      	b.n	1b61a <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   1b60e:	687b      	ldr	r3, [r7, #4]
   1b610:	7a1b      	ldrb	r3, [r3, #8]
   1b612:	2b04      	cmp	r3, #4
   1b614:	d101      	bne.n	1b61a <MQTTSerialize_connectLength+0x26>
		len = 10;
   1b616:	230a      	movs	r3, #10
   1b618:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   1b61a:	687b      	ldr	r3, [r7, #4]
   1b61c:	68d8      	ldr	r0, [r3, #12]
   1b61e:	6919      	ldr	r1, [r3, #16]
   1b620:	695a      	ldr	r2, [r3, #20]
   1b622:	4b25      	ldr	r3, [pc, #148]	; (1b6b8 <MQTTSerialize_connectLength+0xc4>)
   1b624:	4798      	blx	r3
   1b626:	0003      	movs	r3, r0
   1b628:	3302      	adds	r3, #2
   1b62a:	68fa      	ldr	r2, [r7, #12]
   1b62c:	18d3      	adds	r3, r2, r3
   1b62e:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   1b630:	687b      	ldr	r3, [r7, #4]
   1b632:	7edb      	ldrb	r3, [r3, #27]
   1b634:	2b00      	cmp	r3, #0
   1b636:	d013      	beq.n	1b660 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   1b638:	687b      	ldr	r3, [r7, #4]
   1b63a:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1b63c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1b63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b640:	4b1d      	ldr	r3, [pc, #116]	; (1b6b8 <MQTTSerialize_connectLength+0xc4>)
   1b642:	4798      	blx	r3
   1b644:	0003      	movs	r3, r0
   1b646:	1c9c      	adds	r4, r3, #2
   1b648:	687b      	ldr	r3, [r7, #4]
   1b64a:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1b64c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b64e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b650:	4b19      	ldr	r3, [pc, #100]	; (1b6b8 <MQTTSerialize_connectLength+0xc4>)
   1b652:	4798      	blx	r3
   1b654:	0003      	movs	r3, r0
   1b656:	18e3      	adds	r3, r4, r3
   1b658:	3302      	adds	r3, #2
   1b65a:	68fa      	ldr	r2, [r7, #12]
   1b65c:	18d3      	adds	r3, r2, r3
   1b65e:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   1b660:	687b      	ldr	r3, [r7, #4]
   1b662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b664:	2b00      	cmp	r3, #0
   1b666:	d103      	bne.n	1b670 <MQTTSerialize_connectLength+0x7c>
   1b668:	687b      	ldr	r3, [r7, #4]
   1b66a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b66c:	2b00      	cmp	r3, #0
   1b66e:	d00a      	beq.n	1b686 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   1b670:	687b      	ldr	r3, [r7, #4]
   1b672:	6c18      	ldr	r0, [r3, #64]	; 0x40
   1b674:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1b676:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b678:	4b0f      	ldr	r3, [pc, #60]	; (1b6b8 <MQTTSerialize_connectLength+0xc4>)
   1b67a:	4798      	blx	r3
   1b67c:	0003      	movs	r3, r0
   1b67e:	3302      	adds	r3, #2
   1b680:	68fa      	ldr	r2, [r7, #12]
   1b682:	18d3      	adds	r3, r2, r3
   1b684:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   1b686:	687b      	ldr	r3, [r7, #4]
   1b688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b68a:	2b00      	cmp	r3, #0
   1b68c:	d103      	bne.n	1b696 <MQTTSerialize_connectLength+0xa2>
   1b68e:	687b      	ldr	r3, [r7, #4]
   1b690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1b692:	2b00      	cmp	r3, #0
   1b694:	d00a      	beq.n	1b6ac <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   1b696:	687b      	ldr	r3, [r7, #4]
   1b698:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   1b69a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   1b69c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1b69e:	4b06      	ldr	r3, [pc, #24]	; (1b6b8 <MQTTSerialize_connectLength+0xc4>)
   1b6a0:	4798      	blx	r3
   1b6a2:	0003      	movs	r3, r0
   1b6a4:	3302      	adds	r3, #2
   1b6a6:	68fa      	ldr	r2, [r7, #12]
   1b6a8:	18d3      	adds	r3, r2, r3
   1b6aa:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   1b6ac:	68fb      	ldr	r3, [r7, #12]
}
   1b6ae:	0018      	movs	r0, r3
   1b6b0:	46bd      	mov	sp, r7
   1b6b2:	b005      	add	sp, #20
   1b6b4:	bd90      	pop	{r4, r7, pc}
   1b6b6:	46c0      	nop			; (mov r8, r8)
   1b6b8:	0001c065 	.word	0x0001c065

0001b6bc <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   1b6bc:	b590      	push	{r4, r7, lr}
   1b6be:	b08b      	sub	sp, #44	; 0x2c
   1b6c0:	af00      	add	r7, sp, #0
   1b6c2:	60f8      	str	r0, [r7, #12]
   1b6c4:	60b9      	str	r1, [r7, #8]
   1b6c6:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   1b6c8:	68fb      	ldr	r3, [r7, #12]
   1b6ca:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   1b6cc:	2300      	movs	r3, #0
   1b6ce:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   1b6d0:	2300      	movs	r3, #0
   1b6d2:	617b      	str	r3, [r7, #20]
	int len = 0;
   1b6d4:	2300      	movs	r3, #0
   1b6d6:	623b      	str	r3, [r7, #32]
	int rc = -1;
   1b6d8:	2301      	movs	r3, #1
   1b6da:	425b      	negs	r3, r3
   1b6dc:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   1b6de:	687b      	ldr	r3, [r7, #4]
   1b6e0:	0018      	movs	r0, r3
   1b6e2:	4b8c      	ldr	r3, [pc, #560]	; (1b914 <MQTTSerialize_connect+0x258>)
   1b6e4:	4798      	blx	r3
   1b6e6:	0003      	movs	r3, r0
   1b6e8:	623b      	str	r3, [r7, #32]
   1b6ea:	6a3b      	ldr	r3, [r7, #32]
   1b6ec:	0018      	movs	r0, r3
   1b6ee:	4b8a      	ldr	r3, [pc, #552]	; (1b918 <MQTTSerialize_connect+0x25c>)
   1b6f0:	4798      	blx	r3
   1b6f2:	0002      	movs	r2, r0
   1b6f4:	68bb      	ldr	r3, [r7, #8]
   1b6f6:	429a      	cmp	r2, r3
   1b6f8:	dd03      	ble.n	1b702 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1b6fa:	2302      	movs	r3, #2
   1b6fc:	425b      	negs	r3, r3
   1b6fe:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1b700:	e103      	b.n	1b90a <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   1b702:	2318      	movs	r3, #24
   1b704:	18fb      	adds	r3, r7, r3
   1b706:	2200      	movs	r2, #0
   1b708:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   1b70a:	2318      	movs	r3, #24
   1b70c:	18fb      	adds	r3, r7, r3
   1b70e:	781a      	ldrb	r2, [r3, #0]
   1b710:	210f      	movs	r1, #15
   1b712:	400a      	ands	r2, r1
   1b714:	1c11      	adds	r1, r2, #0
   1b716:	2210      	movs	r2, #16
   1b718:	430a      	orrs	r2, r1
   1b71a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1b71c:	2318      	movs	r3, #24
   1b71e:	18fb      	adds	r3, r7, r3
   1b720:	781a      	ldrb	r2, [r3, #0]
   1b722:	231c      	movs	r3, #28
   1b724:	18fb      	adds	r3, r7, r3
   1b726:	0011      	movs	r1, r2
   1b728:	0018      	movs	r0, r3
   1b72a:	4b7c      	ldr	r3, [pc, #496]	; (1b91c <MQTTSerialize_connect+0x260>)
   1b72c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   1b72e:	69fb      	ldr	r3, [r7, #28]
   1b730:	6a3a      	ldr	r2, [r7, #32]
   1b732:	0011      	movs	r1, r2
   1b734:	0018      	movs	r0, r3
   1b736:	4b7a      	ldr	r3, [pc, #488]	; (1b920 <MQTTSerialize_connect+0x264>)
   1b738:	4798      	blx	r3
   1b73a:	0002      	movs	r2, r0
   1b73c:	69fb      	ldr	r3, [r7, #28]
   1b73e:	189b      	adds	r3, r3, r2
   1b740:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   1b742:	687b      	ldr	r3, [r7, #4]
   1b744:	7a1b      	ldrb	r3, [r3, #8]
   1b746:	2b04      	cmp	r3, #4
   1b748:	d10d      	bne.n	1b766 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   1b74a:	4a76      	ldr	r2, [pc, #472]	; (1b924 <MQTTSerialize_connect+0x268>)
   1b74c:	231c      	movs	r3, #28
   1b74e:	18fb      	adds	r3, r7, r3
   1b750:	0011      	movs	r1, r2
   1b752:	0018      	movs	r0, r3
   1b754:	4b74      	ldr	r3, [pc, #464]	; (1b928 <MQTTSerialize_connect+0x26c>)
   1b756:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   1b758:	231c      	movs	r3, #28
   1b75a:	18fb      	adds	r3, r7, r3
   1b75c:	2104      	movs	r1, #4
   1b75e:	0018      	movs	r0, r3
   1b760:	4b6e      	ldr	r3, [pc, #440]	; (1b91c <MQTTSerialize_connect+0x260>)
   1b762:	4798      	blx	r3
   1b764:	e00c      	b.n	1b780 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   1b766:	4a71      	ldr	r2, [pc, #452]	; (1b92c <MQTTSerialize_connect+0x270>)
   1b768:	231c      	movs	r3, #28
   1b76a:	18fb      	adds	r3, r7, r3
   1b76c:	0011      	movs	r1, r2
   1b76e:	0018      	movs	r0, r3
   1b770:	4b6d      	ldr	r3, [pc, #436]	; (1b928 <MQTTSerialize_connect+0x26c>)
   1b772:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   1b774:	231c      	movs	r3, #28
   1b776:	18fb      	adds	r3, r7, r3
   1b778:	2103      	movs	r1, #3
   1b77a:	0018      	movs	r0, r3
   1b77c:	4b67      	ldr	r3, [pc, #412]	; (1b91c <MQTTSerialize_connect+0x260>)
   1b77e:	4798      	blx	r3
	}

	flags.all = 0;
   1b780:	2314      	movs	r3, #20
   1b782:	18fb      	adds	r3, r7, r3
   1b784:	2200      	movs	r2, #0
   1b786:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   1b788:	687b      	ldr	r3, [r7, #4]
   1b78a:	7e9b      	ldrb	r3, [r3, #26]
   1b78c:	1c1a      	adds	r2, r3, #0
   1b78e:	2301      	movs	r3, #1
   1b790:	4013      	ands	r3, r2
   1b792:	b2da      	uxtb	r2, r3
   1b794:	2314      	movs	r3, #20
   1b796:	18fb      	adds	r3, r7, r3
   1b798:	2101      	movs	r1, #1
   1b79a:	400a      	ands	r2, r1
   1b79c:	1890      	adds	r0, r2, r2
   1b79e:	781a      	ldrb	r2, [r3, #0]
   1b7a0:	2102      	movs	r1, #2
   1b7a2:	438a      	bics	r2, r1
   1b7a4:	1c11      	adds	r1, r2, #0
   1b7a6:	1c02      	adds	r2, r0, #0
   1b7a8:	430a      	orrs	r2, r1
   1b7aa:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   1b7ac:	687b      	ldr	r3, [r7, #4]
   1b7ae:	7edb      	ldrb	r3, [r3, #27]
   1b7b0:	1e5a      	subs	r2, r3, #1
   1b7b2:	4193      	sbcs	r3, r2
   1b7b4:	b2da      	uxtb	r2, r3
   1b7b6:	2314      	movs	r3, #20
   1b7b8:	18fb      	adds	r3, r7, r3
   1b7ba:	2101      	movs	r1, #1
   1b7bc:	400a      	ands	r2, r1
   1b7be:	0090      	lsls	r0, r2, #2
   1b7c0:	781a      	ldrb	r2, [r3, #0]
   1b7c2:	2104      	movs	r1, #4
   1b7c4:	438a      	bics	r2, r1
   1b7c6:	1c11      	adds	r1, r2, #0
   1b7c8:	1c02      	adds	r2, r0, #0
   1b7ca:	430a      	orrs	r2, r1
   1b7cc:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   1b7ce:	2314      	movs	r3, #20
   1b7d0:	18fb      	adds	r3, r7, r3
   1b7d2:	781b      	ldrb	r3, [r3, #0]
   1b7d4:	2204      	movs	r2, #4
   1b7d6:	4013      	ands	r3, r2
   1b7d8:	b2db      	uxtb	r3, r3
   1b7da:	2b00      	cmp	r3, #0
   1b7dc:	d025      	beq.n	1b82a <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   1b7de:	687b      	ldr	r3, [r7, #4]
   1b7e0:	223d      	movs	r2, #61	; 0x3d
   1b7e2:	5c9b      	ldrb	r3, [r3, r2]
   1b7e4:	1c1a      	adds	r2, r3, #0
   1b7e6:	2303      	movs	r3, #3
   1b7e8:	4013      	ands	r3, r2
   1b7ea:	b2da      	uxtb	r2, r3
   1b7ec:	2314      	movs	r3, #20
   1b7ee:	18fb      	adds	r3, r7, r3
   1b7f0:	2103      	movs	r1, #3
   1b7f2:	400a      	ands	r2, r1
   1b7f4:	00d0      	lsls	r0, r2, #3
   1b7f6:	781a      	ldrb	r2, [r3, #0]
   1b7f8:	2118      	movs	r1, #24
   1b7fa:	438a      	bics	r2, r1
   1b7fc:	1c11      	adds	r1, r2, #0
   1b7fe:	1c02      	adds	r2, r0, #0
   1b800:	430a      	orrs	r2, r1
   1b802:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   1b804:	687b      	ldr	r3, [r7, #4]
   1b806:	223c      	movs	r2, #60	; 0x3c
   1b808:	5c9b      	ldrb	r3, [r3, r2]
   1b80a:	1c1a      	adds	r2, r3, #0
   1b80c:	2301      	movs	r3, #1
   1b80e:	4013      	ands	r3, r2
   1b810:	b2da      	uxtb	r2, r3
   1b812:	2314      	movs	r3, #20
   1b814:	18fb      	adds	r3, r7, r3
   1b816:	2101      	movs	r1, #1
   1b818:	400a      	ands	r2, r1
   1b81a:	0150      	lsls	r0, r2, #5
   1b81c:	781a      	ldrb	r2, [r3, #0]
   1b81e:	2120      	movs	r1, #32
   1b820:	438a      	bics	r2, r1
   1b822:	1c11      	adds	r1, r2, #0
   1b824:	1c02      	adds	r2, r0, #0
   1b826:	430a      	orrs	r2, r1
   1b828:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   1b82a:	687b      	ldr	r3, [r7, #4]
   1b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b82e:	2b00      	cmp	r3, #0
   1b830:	d103      	bne.n	1b83a <MQTTSerialize_connect+0x17e>
   1b832:	687b      	ldr	r3, [r7, #4]
   1b834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b836:	2b00      	cmp	r3, #0
   1b838:	d006      	beq.n	1b848 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   1b83a:	2314      	movs	r3, #20
   1b83c:	18fb      	adds	r3, r7, r3
   1b83e:	781a      	ldrb	r2, [r3, #0]
   1b840:	2180      	movs	r1, #128	; 0x80
   1b842:	4249      	negs	r1, r1
   1b844:	430a      	orrs	r2, r1
   1b846:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   1b848:	687b      	ldr	r3, [r7, #4]
   1b84a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b84c:	2b00      	cmp	r3, #0
   1b84e:	d103      	bne.n	1b858 <MQTTSerialize_connect+0x19c>
   1b850:	687b      	ldr	r3, [r7, #4]
   1b852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1b854:	2b00      	cmp	r3, #0
   1b856:	d005      	beq.n	1b864 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   1b858:	2314      	movs	r3, #20
   1b85a:	18fb      	adds	r3, r7, r3
   1b85c:	781a      	ldrb	r2, [r3, #0]
   1b85e:	2140      	movs	r1, #64	; 0x40
   1b860:	430a      	orrs	r2, r1
   1b862:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   1b864:	2314      	movs	r3, #20
   1b866:	18fb      	adds	r3, r7, r3
   1b868:	781a      	ldrb	r2, [r3, #0]
   1b86a:	231c      	movs	r3, #28
   1b86c:	18fb      	adds	r3, r7, r3
   1b86e:	0011      	movs	r1, r2
   1b870:	0018      	movs	r0, r3
   1b872:	4b2a      	ldr	r3, [pc, #168]	; (1b91c <MQTTSerialize_connect+0x260>)
   1b874:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   1b876:	687b      	ldr	r3, [r7, #4]
   1b878:	8b1b      	ldrh	r3, [r3, #24]
   1b87a:	001a      	movs	r2, r3
   1b87c:	231c      	movs	r3, #28
   1b87e:	18fb      	adds	r3, r7, r3
   1b880:	0011      	movs	r1, r2
   1b882:	0018      	movs	r0, r3
   1b884:	4b2a      	ldr	r3, [pc, #168]	; (1b930 <MQTTSerialize_connect+0x274>)
   1b886:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   1b888:	687b      	ldr	r3, [r7, #4]
   1b88a:	221c      	movs	r2, #28
   1b88c:	18b8      	adds	r0, r7, r2
   1b88e:	68d9      	ldr	r1, [r3, #12]
   1b890:	691a      	ldr	r2, [r3, #16]
   1b892:	695b      	ldr	r3, [r3, #20]
   1b894:	4c27      	ldr	r4, [pc, #156]	; (1b934 <MQTTSerialize_connect+0x278>)
   1b896:	47a0      	blx	r4
	if (options->willFlag)
   1b898:	687b      	ldr	r3, [r7, #4]
   1b89a:	7edb      	ldrb	r3, [r3, #27]
   1b89c:	2b00      	cmp	r3, #0
   1b89e:	d00f      	beq.n	1b8c0 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   1b8a0:	687b      	ldr	r3, [r7, #4]
   1b8a2:	221c      	movs	r2, #28
   1b8a4:	18b8      	adds	r0, r7, r2
   1b8a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1b8a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b8ac:	4c21      	ldr	r4, [pc, #132]	; (1b934 <MQTTSerialize_connect+0x278>)
   1b8ae:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   1b8b0:	687b      	ldr	r3, [r7, #4]
   1b8b2:	221c      	movs	r2, #28
   1b8b4:	18b8      	adds	r0, r7, r2
   1b8b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1b8b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1b8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b8bc:	4c1d      	ldr	r4, [pc, #116]	; (1b934 <MQTTSerialize_connect+0x278>)
   1b8be:	47a0      	blx	r4
	}
	if (flags.bits.username)
   1b8c0:	2314      	movs	r3, #20
   1b8c2:	18fb      	adds	r3, r7, r3
   1b8c4:	781b      	ldrb	r3, [r3, #0]
   1b8c6:	227f      	movs	r2, #127	; 0x7f
   1b8c8:	4393      	bics	r3, r2
   1b8ca:	b2db      	uxtb	r3, r3
   1b8cc:	2b00      	cmp	r3, #0
   1b8ce:	d007      	beq.n	1b8e0 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   1b8d0:	687b      	ldr	r3, [r7, #4]
   1b8d2:	221c      	movs	r2, #28
   1b8d4:	18b8      	adds	r0, r7, r2
   1b8d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1b8d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1b8da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b8dc:	4c15      	ldr	r4, [pc, #84]	; (1b934 <MQTTSerialize_connect+0x278>)
   1b8de:	47a0      	blx	r4
	if (flags.bits.password)
   1b8e0:	2314      	movs	r3, #20
   1b8e2:	18fb      	adds	r3, r7, r3
   1b8e4:	781b      	ldrb	r3, [r3, #0]
   1b8e6:	2240      	movs	r2, #64	; 0x40
   1b8e8:	4013      	ands	r3, r2
   1b8ea:	b2db      	uxtb	r3, r3
   1b8ec:	2b00      	cmp	r3, #0
   1b8ee:	d007      	beq.n	1b900 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   1b8f0:	687b      	ldr	r3, [r7, #4]
   1b8f2:	221c      	movs	r2, #28
   1b8f4:	18b8      	adds	r0, r7, r2
   1b8f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   1b8f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   1b8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1b8fc:	4c0d      	ldr	r4, [pc, #52]	; (1b934 <MQTTSerialize_connect+0x278>)
   1b8fe:	47a0      	blx	r4

	rc = ptr - buf;
   1b900:	69fb      	ldr	r3, [r7, #28]
   1b902:	001a      	movs	r2, r3
   1b904:	68fb      	ldr	r3, [r7, #12]
   1b906:	1ad3      	subs	r3, r2, r3
   1b908:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   1b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b90c:	0018      	movs	r0, r3
   1b90e:	46bd      	mov	sp, r7
   1b910:	b00b      	add	sp, #44	; 0x2c
   1b912:	bd90      	pop	{r4, r7, pc}
   1b914:	0001b5f5 	.word	0x0001b5f5
   1b918:	0001bd89 	.word	0x0001bd89
   1b91c:	0001beab 	.word	0x0001beab
   1b920:	0001bc91 	.word	0x0001bc91
   1b924:	00024ff8 	.word	0x00024ff8
   1b928:	0001bf2d 	.word	0x0001bf2d
   1b92c:	00025000 	.word	0x00025000
   1b930:	0001bed5 	.word	0x0001bed5
   1b934:	0001bf7d 	.word	0x0001bf7d

0001b938 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   1b938:	b580      	push	{r7, lr}
   1b93a:	b08a      	sub	sp, #40	; 0x28
   1b93c:	af00      	add	r7, sp, #0
   1b93e:	60f8      	str	r0, [r7, #12]
   1b940:	60b9      	str	r1, [r7, #8]
   1b942:	607a      	str	r2, [r7, #4]
   1b944:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1b946:	2300      	movs	r3, #0
   1b948:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1b94a:	687b      	ldr	r3, [r7, #4]
   1b94c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1b94e:	2300      	movs	r3, #0
   1b950:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1b952:	2300      	movs	r3, #0
   1b954:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   1b956:	2300      	movs	r3, #0
   1b958:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1b95a:	2318      	movs	r3, #24
   1b95c:	18fb      	adds	r3, r7, r3
   1b95e:	0018      	movs	r0, r3
   1b960:	4b25      	ldr	r3, [pc, #148]	; (1b9f8 <MQTTDeserialize_connack+0xc0>)
   1b962:	4798      	blx	r3
   1b964:	0003      	movs	r3, r0
   1b966:	001a      	movs	r2, r3
   1b968:	231c      	movs	r3, #28
   1b96a:	18fb      	adds	r3, r7, r3
   1b96c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   1b96e:	231c      	movs	r3, #28
   1b970:	18fb      	adds	r3, r7, r3
   1b972:	781b      	ldrb	r3, [r3, #0]
   1b974:	220f      	movs	r2, #15
   1b976:	4393      	bics	r3, r2
   1b978:	b2db      	uxtb	r3, r3
   1b97a:	2b20      	cmp	r3, #32
   1b97c:	d134      	bne.n	1b9e8 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1b97e:	69bb      	ldr	r3, [r7, #24]
   1b980:	2214      	movs	r2, #20
   1b982:	18ba      	adds	r2, r7, r2
   1b984:	0011      	movs	r1, r2
   1b986:	0018      	movs	r0, r3
   1b988:	4b1c      	ldr	r3, [pc, #112]	; (1b9fc <MQTTDeserialize_connack+0xc4>)
   1b98a:	4798      	blx	r3
   1b98c:	0003      	movs	r3, r0
   1b98e:	627b      	str	r3, [r7, #36]	; 0x24
   1b990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b992:	69bb      	ldr	r3, [r7, #24]
   1b994:	189b      	adds	r3, r3, r2
   1b996:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1b998:	69bb      	ldr	r3, [r7, #24]
   1b99a:	697a      	ldr	r2, [r7, #20]
   1b99c:	189b      	adds	r3, r3, r2
   1b99e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1b9a0:	6a3b      	ldr	r3, [r7, #32]
   1b9a2:	69ba      	ldr	r2, [r7, #24]
   1b9a4:	1a9b      	subs	r3, r3, r2
   1b9a6:	2b01      	cmp	r3, #1
   1b9a8:	dd20      	ble.n	1b9ec <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   1b9aa:	2318      	movs	r3, #24
   1b9ac:	18fb      	adds	r3, r7, r3
   1b9ae:	0018      	movs	r0, r3
   1b9b0:	4b11      	ldr	r3, [pc, #68]	; (1b9f8 <MQTTDeserialize_connack+0xc0>)
   1b9b2:	4798      	blx	r3
   1b9b4:	0003      	movs	r3, r0
   1b9b6:	001a      	movs	r2, r3
   1b9b8:	2310      	movs	r3, #16
   1b9ba:	18fb      	adds	r3, r7, r3
   1b9bc:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   1b9be:	2310      	movs	r3, #16
   1b9c0:	18fb      	adds	r3, r7, r3
   1b9c2:	781b      	ldrb	r3, [r3, #0]
   1b9c4:	061b      	lsls	r3, r3, #24
   1b9c6:	0fdb      	lsrs	r3, r3, #31
   1b9c8:	b2db      	uxtb	r3, r3
   1b9ca:	001a      	movs	r2, r3
   1b9cc:	68fb      	ldr	r3, [r7, #12]
   1b9ce:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   1b9d0:	2318      	movs	r3, #24
   1b9d2:	18fb      	adds	r3, r7, r3
   1b9d4:	0018      	movs	r0, r3
   1b9d6:	4b08      	ldr	r3, [pc, #32]	; (1b9f8 <MQTTDeserialize_connack+0xc0>)
   1b9d8:	4798      	blx	r3
   1b9da:	0003      	movs	r3, r0
   1b9dc:	001a      	movs	r2, r3
   1b9de:	68bb      	ldr	r3, [r7, #8]
   1b9e0:	701a      	strb	r2, [r3, #0]

	rc = 1;
   1b9e2:	2301      	movs	r3, #1
   1b9e4:	627b      	str	r3, [r7, #36]	; 0x24
   1b9e6:	e002      	b.n	1b9ee <MQTTDeserialize_connack+0xb6>
		goto exit;
   1b9e8:	46c0      	nop			; (mov r8, r8)
   1b9ea:	e000      	b.n	1b9ee <MQTTDeserialize_connack+0xb6>
		goto exit;
   1b9ec:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1b9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b9f0:	0018      	movs	r0, r3
   1b9f2:	46bd      	mov	sp, r7
   1b9f4:	b00a      	add	sp, #40	; 0x28
   1b9f6:	bd80      	pop	{r7, pc}
   1b9f8:	0001be7f 	.word	0x0001be7f
   1b9fc:	0001be19 	.word	0x0001be19

0001ba00 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   1ba00:	b580      	push	{r7, lr}
   1ba02:	b088      	sub	sp, #32
   1ba04:	af00      	add	r7, sp, #0
   1ba06:	60f8      	str	r0, [r7, #12]
   1ba08:	60b9      	str	r1, [r7, #8]
   1ba0a:	1dfb      	adds	r3, r7, #7
   1ba0c:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1ba0e:	2300      	movs	r3, #0
   1ba10:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   1ba12:	2301      	movs	r3, #1
   1ba14:	425b      	negs	r3, r3
   1ba16:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1ba18:	68fb      	ldr	r3, [r7, #12]
   1ba1a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   1ba1c:	68bb      	ldr	r3, [r7, #8]
   1ba1e:	2b01      	cmp	r3, #1
   1ba20:	dc03      	bgt.n	1ba2a <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1ba22:	2302      	movs	r3, #2
   1ba24:	425b      	negs	r3, r3
   1ba26:	61fb      	str	r3, [r7, #28]
		goto exit;
   1ba28:	e029      	b.n	1ba7e <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   1ba2a:	2318      	movs	r3, #24
   1ba2c:	18fb      	adds	r3, r7, r3
   1ba2e:	2200      	movs	r2, #0
   1ba30:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   1ba32:	1dfb      	adds	r3, r7, #7
   1ba34:	781b      	ldrb	r3, [r3, #0]
   1ba36:	220f      	movs	r2, #15
   1ba38:	4013      	ands	r3, r2
   1ba3a:	b2da      	uxtb	r2, r3
   1ba3c:	2318      	movs	r3, #24
   1ba3e:	18fb      	adds	r3, r7, r3
   1ba40:	0110      	lsls	r0, r2, #4
   1ba42:	781a      	ldrb	r2, [r3, #0]
   1ba44:	210f      	movs	r1, #15
   1ba46:	400a      	ands	r2, r1
   1ba48:	1c11      	adds	r1, r2, #0
   1ba4a:	1c02      	adds	r2, r0, #0
   1ba4c:	430a      	orrs	r2, r1
   1ba4e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1ba50:	2318      	movs	r3, #24
   1ba52:	18fb      	adds	r3, r7, r3
   1ba54:	781a      	ldrb	r2, [r3, #0]
   1ba56:	2314      	movs	r3, #20
   1ba58:	18fb      	adds	r3, r7, r3
   1ba5a:	0011      	movs	r1, r2
   1ba5c:	0018      	movs	r0, r3
   1ba5e:	4b0a      	ldr	r3, [pc, #40]	; (1ba88 <MQTTSerialize_zero+0x88>)
   1ba60:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   1ba62:	697b      	ldr	r3, [r7, #20]
   1ba64:	2100      	movs	r1, #0
   1ba66:	0018      	movs	r0, r3
   1ba68:	4b08      	ldr	r3, [pc, #32]	; (1ba8c <MQTTSerialize_zero+0x8c>)
   1ba6a:	4798      	blx	r3
   1ba6c:	0002      	movs	r2, r0
   1ba6e:	697b      	ldr	r3, [r7, #20]
   1ba70:	189b      	adds	r3, r3, r2
   1ba72:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   1ba74:	697b      	ldr	r3, [r7, #20]
   1ba76:	001a      	movs	r2, r3
   1ba78:	68fb      	ldr	r3, [r7, #12]
   1ba7a:	1ad3      	subs	r3, r2, r3
   1ba7c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1ba7e:	69fb      	ldr	r3, [r7, #28]
}
   1ba80:	0018      	movs	r0, r3
   1ba82:	46bd      	mov	sp, r7
   1ba84:	b008      	add	sp, #32
   1ba86:	bd80      	pop	{r7, pc}
   1ba88:	0001beab 	.word	0x0001beab
   1ba8c:	0001bc91 	.word	0x0001bc91

0001ba90 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   1ba90:	b580      	push	{r7, lr}
   1ba92:	b082      	sub	sp, #8
   1ba94:	af00      	add	r7, sp, #0
   1ba96:	6078      	str	r0, [r7, #4]
   1ba98:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   1ba9a:	6839      	ldr	r1, [r7, #0]
   1ba9c:	687b      	ldr	r3, [r7, #4]
   1ba9e:	220e      	movs	r2, #14
   1baa0:	0018      	movs	r0, r3
   1baa2:	4b03      	ldr	r3, [pc, #12]	; (1bab0 <MQTTSerialize_disconnect+0x20>)
   1baa4:	4798      	blx	r3
   1baa6:	0003      	movs	r3, r0
}
   1baa8:	0018      	movs	r0, r3
   1baaa:	46bd      	mov	sp, r7
   1baac:	b002      	add	sp, #8
   1baae:	bd80      	pop	{r7, pc}
   1bab0:	0001ba01 	.word	0x0001ba01

0001bab4 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   1bab4:	b580      	push	{r7, lr}
   1bab6:	b082      	sub	sp, #8
   1bab8:	af00      	add	r7, sp, #0
   1baba:	6078      	str	r0, [r7, #4]
   1babc:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   1babe:	6839      	ldr	r1, [r7, #0]
   1bac0:	687b      	ldr	r3, [r7, #4]
   1bac2:	220c      	movs	r2, #12
   1bac4:	0018      	movs	r0, r3
   1bac6:	4b03      	ldr	r3, [pc, #12]	; (1bad4 <MQTTSerialize_pingreq+0x20>)
   1bac8:	4798      	blx	r3
   1baca:	0003      	movs	r3, r0
}
   1bacc:	0018      	movs	r0, r3
   1bace:	46bd      	mov	sp, r7
   1bad0:	b002      	add	sp, #8
   1bad2:	bd80      	pop	{r7, pc}
   1bad4:	0001ba01 	.word	0x0001ba01

0001bad8 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   1bad8:	b580      	push	{r7, lr}
   1bada:	b08a      	sub	sp, #40	; 0x28
   1badc:	af00      	add	r7, sp, #0
   1bade:	60f8      	str	r0, [r7, #12]
   1bae0:	60b9      	str	r1, [r7, #8]
   1bae2:	607a      	str	r2, [r7, #4]
   1bae4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1bae6:	2300      	movs	r3, #0
   1bae8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1baea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1baec:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1baee:	2300      	movs	r3, #0
   1baf0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1baf2:	2300      	movs	r3, #0
   1baf4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   1baf6:	2300      	movs	r3, #0
   1baf8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1bafa:	2318      	movs	r3, #24
   1bafc:	18fb      	adds	r3, r7, r3
   1bafe:	0018      	movs	r0, r3
   1bb00:	4b32      	ldr	r3, [pc, #200]	; (1bbcc <MQTTDeserialize_publish+0xf4>)
   1bb02:	4798      	blx	r3
   1bb04:	0003      	movs	r3, r0
   1bb06:	001a      	movs	r2, r3
   1bb08:	231c      	movs	r3, #28
   1bb0a:	18fb      	adds	r3, r7, r3
   1bb0c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   1bb0e:	231c      	movs	r3, #28
   1bb10:	18fb      	adds	r3, r7, r3
   1bb12:	781b      	ldrb	r3, [r3, #0]
   1bb14:	220f      	movs	r2, #15
   1bb16:	4393      	bics	r3, r2
   1bb18:	b2db      	uxtb	r3, r3
   1bb1a:	2b30      	cmp	r3, #48	; 0x30
   1bb1c:	d150      	bne.n	1bbc0 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   1bb1e:	231c      	movs	r3, #28
   1bb20:	18fb      	adds	r3, r7, r3
   1bb22:	781b      	ldrb	r3, [r3, #0]
   1bb24:	071b      	lsls	r3, r3, #28
   1bb26:	0fdb      	lsrs	r3, r3, #31
   1bb28:	b2db      	uxtb	r3, r3
   1bb2a:	001a      	movs	r2, r3
   1bb2c:	68fb      	ldr	r3, [r7, #12]
   1bb2e:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   1bb30:	231c      	movs	r3, #28
   1bb32:	18fb      	adds	r3, r7, r3
   1bb34:	781b      	ldrb	r3, [r3, #0]
   1bb36:	075b      	lsls	r3, r3, #29
   1bb38:	0f9b      	lsrs	r3, r3, #30
   1bb3a:	b2db      	uxtb	r3, r3
   1bb3c:	001a      	movs	r2, r3
   1bb3e:	68bb      	ldr	r3, [r7, #8]
   1bb40:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   1bb42:	231c      	movs	r3, #28
   1bb44:	18fb      	adds	r3, r7, r3
   1bb46:	781b      	ldrb	r3, [r3, #0]
   1bb48:	07db      	lsls	r3, r3, #31
   1bb4a:	0fdb      	lsrs	r3, r3, #31
   1bb4c:	b2db      	uxtb	r3, r3
   1bb4e:	001a      	movs	r2, r3
   1bb50:	687b      	ldr	r3, [r7, #4]
   1bb52:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1bb54:	69bb      	ldr	r3, [r7, #24]
   1bb56:	2214      	movs	r2, #20
   1bb58:	18ba      	adds	r2, r7, r2
   1bb5a:	0011      	movs	r1, r2
   1bb5c:	0018      	movs	r0, r3
   1bb5e:	4b1c      	ldr	r3, [pc, #112]	; (1bbd0 <MQTTDeserialize_publish+0xf8>)
   1bb60:	4798      	blx	r3
   1bb62:	0003      	movs	r3, r0
   1bb64:	627b      	str	r3, [r7, #36]	; 0x24
   1bb66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1bb68:	69bb      	ldr	r3, [r7, #24]
   1bb6a:	189b      	adds	r3, r3, r2
   1bb6c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1bb6e:	69bb      	ldr	r3, [r7, #24]
   1bb70:	697a      	ldr	r2, [r7, #20]
   1bb72:	189b      	adds	r3, r3, r2
   1bb74:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1bb76:	6a3a      	ldr	r2, [r7, #32]
   1bb78:	2318      	movs	r3, #24
   1bb7a:	18f9      	adds	r1, r7, r3
   1bb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bb7e:	0018      	movs	r0, r3
   1bb80:	4b14      	ldr	r3, [pc, #80]	; (1bbd4 <MQTTDeserialize_publish+0xfc>)
   1bb82:	4798      	blx	r3
   1bb84:	1e03      	subs	r3, r0, #0
   1bb86:	d01c      	beq.n	1bbc2 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   1bb88:	6a3b      	ldr	r3, [r7, #32]
   1bb8a:	69ba      	ldr	r2, [r7, #24]
   1bb8c:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   1bb8e:	d418      	bmi.n	1bbc2 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   1bb90:	68bb      	ldr	r3, [r7, #8]
   1bb92:	681b      	ldr	r3, [r3, #0]
   1bb94:	2b00      	cmp	r3, #0
   1bb96:	dd08      	ble.n	1bbaa <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   1bb98:	2318      	movs	r3, #24
   1bb9a:	18fb      	adds	r3, r7, r3
   1bb9c:	0018      	movs	r0, r3
   1bb9e:	4b0e      	ldr	r3, [pc, #56]	; (1bbd8 <MQTTDeserialize_publish+0x100>)
   1bba0:	4798      	blx	r3
   1bba2:	0003      	movs	r3, r0
   1bba4:	b29a      	uxth	r2, r3
   1bba6:	683b      	ldr	r3, [r7, #0]
   1bba8:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   1bbaa:	6a3b      	ldr	r3, [r7, #32]
   1bbac:	69ba      	ldr	r2, [r7, #24]
   1bbae:	1a9a      	subs	r2, r3, r2
   1bbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1bbb2:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   1bbb4:	69ba      	ldr	r2, [r7, #24]
   1bbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bbb8:	601a      	str	r2, [r3, #0]
	rc = 1;
   1bbba:	2301      	movs	r3, #1
   1bbbc:	627b      	str	r3, [r7, #36]	; 0x24
   1bbbe:	e000      	b.n	1bbc2 <MQTTDeserialize_publish+0xea>
		goto exit;
   1bbc0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1bbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1bbc4:	0018      	movs	r0, r3
   1bbc6:	46bd      	mov	sp, r7
   1bbc8:	b00a      	add	sp, #40	; 0x28
   1bbca:	bd80      	pop	{r7, pc}
   1bbcc:	0001be7f 	.word	0x0001be7f
   1bbd0:	0001be19 	.word	0x0001be19
   1bbd4:	0001bffd 	.word	0x0001bffd
   1bbd8:	0001be4d 	.word	0x0001be4d

0001bbdc <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   1bbdc:	b580      	push	{r7, lr}
   1bbde:	b08a      	sub	sp, #40	; 0x28
   1bbe0:	af00      	add	r7, sp, #0
   1bbe2:	60f8      	str	r0, [r7, #12]
   1bbe4:	60b9      	str	r1, [r7, #8]
   1bbe6:	607a      	str	r2, [r7, #4]
   1bbe8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1bbea:	2300      	movs	r3, #0
   1bbec:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1bbee:	683b      	ldr	r3, [r7, #0]
   1bbf0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1bbf2:	2300      	movs	r3, #0
   1bbf4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1bbf6:	2300      	movs	r3, #0
   1bbf8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1bbfa:	2318      	movs	r3, #24
   1bbfc:	18fb      	adds	r3, r7, r3
   1bbfe:	0018      	movs	r0, r3
   1bc00:	4b20      	ldr	r3, [pc, #128]	; (1bc84 <MQTTDeserialize_ack+0xa8>)
   1bc02:	4798      	blx	r3
   1bc04:	0003      	movs	r3, r0
   1bc06:	001a      	movs	r2, r3
   1bc08:	231c      	movs	r3, #28
   1bc0a:	18fb      	adds	r3, r7, r3
   1bc0c:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   1bc0e:	231c      	movs	r3, #28
   1bc10:	18fb      	adds	r3, r7, r3
   1bc12:	781b      	ldrb	r3, [r3, #0]
   1bc14:	071b      	lsls	r3, r3, #28
   1bc16:	0fdb      	lsrs	r3, r3, #31
   1bc18:	b2db      	uxtb	r3, r3
   1bc1a:	001a      	movs	r2, r3
   1bc1c:	68bb      	ldr	r3, [r7, #8]
   1bc1e:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   1bc20:	231c      	movs	r3, #28
   1bc22:	18fb      	adds	r3, r7, r3
   1bc24:	781b      	ldrb	r3, [r3, #0]
   1bc26:	061b      	lsls	r3, r3, #24
   1bc28:	0f1b      	lsrs	r3, r3, #28
   1bc2a:	b2db      	uxtb	r3, r3
   1bc2c:	001a      	movs	r2, r3
   1bc2e:	68fb      	ldr	r3, [r7, #12]
   1bc30:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1bc32:	69bb      	ldr	r3, [r7, #24]
   1bc34:	2214      	movs	r2, #20
   1bc36:	18ba      	adds	r2, r7, r2
   1bc38:	0011      	movs	r1, r2
   1bc3a:	0018      	movs	r0, r3
   1bc3c:	4b12      	ldr	r3, [pc, #72]	; (1bc88 <MQTTDeserialize_ack+0xac>)
   1bc3e:	4798      	blx	r3
   1bc40:	0003      	movs	r3, r0
   1bc42:	627b      	str	r3, [r7, #36]	; 0x24
   1bc44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1bc46:	69bb      	ldr	r3, [r7, #24]
   1bc48:	189b      	adds	r3, r3, r2
   1bc4a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1bc4c:	69bb      	ldr	r3, [r7, #24]
   1bc4e:	697a      	ldr	r2, [r7, #20]
   1bc50:	189b      	adds	r3, r3, r2
   1bc52:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   1bc54:	6a3b      	ldr	r3, [r7, #32]
   1bc56:	69ba      	ldr	r2, [r7, #24]
   1bc58:	1a9b      	subs	r3, r3, r2
   1bc5a:	2b01      	cmp	r3, #1
   1bc5c:	dd0b      	ble.n	1bc76 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   1bc5e:	2318      	movs	r3, #24
   1bc60:	18fb      	adds	r3, r7, r3
   1bc62:	0018      	movs	r0, r3
   1bc64:	4b09      	ldr	r3, [pc, #36]	; (1bc8c <MQTTDeserialize_ack+0xb0>)
   1bc66:	4798      	blx	r3
   1bc68:	0003      	movs	r3, r0
   1bc6a:	b29a      	uxth	r2, r3
   1bc6c:	687b      	ldr	r3, [r7, #4]
   1bc6e:	801a      	strh	r2, [r3, #0]

	rc = 1;
   1bc70:	2301      	movs	r3, #1
   1bc72:	627b      	str	r3, [r7, #36]	; 0x24
   1bc74:	e000      	b.n	1bc78 <MQTTDeserialize_ack+0x9c>
		goto exit;
   1bc76:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1bc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1bc7a:	0018      	movs	r0, r3
   1bc7c:	46bd      	mov	sp, r7
   1bc7e:	b00a      	add	sp, #40	; 0x28
   1bc80:	bd80      	pop	{r7, pc}
   1bc82:	46c0      	nop			; (mov r8, r8)
   1bc84:	0001be7f 	.word	0x0001be7f
   1bc88:	0001be19 	.word	0x0001be19
   1bc8c:	0001be4d 	.word	0x0001be4d

0001bc90 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   1bc90:	b580      	push	{r7, lr}
   1bc92:	b084      	sub	sp, #16
   1bc94:	af00      	add	r7, sp, #0
   1bc96:	6078      	str	r0, [r7, #4]
   1bc98:	6039      	str	r1, [r7, #0]
	int rc = 0;
   1bc9a:	2300      	movs	r3, #0
   1bc9c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   1bc9e:	683b      	ldr	r3, [r7, #0]
   1bca0:	4a17      	ldr	r2, [pc, #92]	; (1bd00 <MQTTPacket_encode+0x70>)
   1bca2:	4013      	ands	r3, r2
   1bca4:	d504      	bpl.n	1bcb0 <MQTTPacket_encode+0x20>
   1bca6:	3b01      	subs	r3, #1
   1bca8:	2280      	movs	r2, #128	; 0x80
   1bcaa:	4252      	negs	r2, r2
   1bcac:	4313      	orrs	r3, r2
   1bcae:	3301      	adds	r3, #1
   1bcb0:	001a      	movs	r2, r3
   1bcb2:	230b      	movs	r3, #11
   1bcb4:	18fb      	adds	r3, r7, r3
   1bcb6:	701a      	strb	r2, [r3, #0]
		length /= 128;
   1bcb8:	683b      	ldr	r3, [r7, #0]
   1bcba:	2b00      	cmp	r3, #0
   1bcbc:	da00      	bge.n	1bcc0 <MQTTPacket_encode+0x30>
   1bcbe:	337f      	adds	r3, #127	; 0x7f
   1bcc0:	11db      	asrs	r3, r3, #7
   1bcc2:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   1bcc4:	683b      	ldr	r3, [r7, #0]
   1bcc6:	2b00      	cmp	r3, #0
   1bcc8:	dd08      	ble.n	1bcdc <MQTTPacket_encode+0x4c>
			d |= 0x80;
   1bcca:	230b      	movs	r3, #11
   1bccc:	18fb      	adds	r3, r7, r3
   1bcce:	220b      	movs	r2, #11
   1bcd0:	18ba      	adds	r2, r7, r2
   1bcd2:	7812      	ldrb	r2, [r2, #0]
   1bcd4:	2180      	movs	r1, #128	; 0x80
   1bcd6:	4249      	negs	r1, r1
   1bcd8:	430a      	orrs	r2, r1
   1bcda:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   1bcdc:	68fb      	ldr	r3, [r7, #12]
   1bcde:	1c5a      	adds	r2, r3, #1
   1bce0:	60fa      	str	r2, [r7, #12]
   1bce2:	001a      	movs	r2, r3
   1bce4:	687b      	ldr	r3, [r7, #4]
   1bce6:	189b      	adds	r3, r3, r2
   1bce8:	220b      	movs	r2, #11
   1bcea:	18ba      	adds	r2, r7, r2
   1bcec:	7812      	ldrb	r2, [r2, #0]
   1bcee:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   1bcf0:	683b      	ldr	r3, [r7, #0]
   1bcf2:	2b00      	cmp	r3, #0
   1bcf4:	dcd3      	bgt.n	1bc9e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   1bcf6:	68fb      	ldr	r3, [r7, #12]
}
   1bcf8:	0018      	movs	r0, r3
   1bcfa:	46bd      	mov	sp, r7
   1bcfc:	b004      	add	sp, #16
   1bcfe:	bd80      	pop	{r7, pc}
   1bd00:	8000007f 	.word	0x8000007f

0001bd04 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   1bd04:	b580      	push	{r7, lr}
   1bd06:	b086      	sub	sp, #24
   1bd08:	af00      	add	r7, sp, #0
   1bd0a:	6078      	str	r0, [r7, #4]
   1bd0c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   1bd0e:	2301      	movs	r3, #1
   1bd10:	617b      	str	r3, [r7, #20]
	int len = 0;
   1bd12:	2300      	movs	r3, #0
   1bd14:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   1bd16:	683b      	ldr	r3, [r7, #0]
   1bd18:	2200      	movs	r2, #0
   1bd1a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   1bd1c:	2301      	movs	r3, #1
   1bd1e:	425b      	negs	r3, r3
   1bd20:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1bd22:	693b      	ldr	r3, [r7, #16]
   1bd24:	3301      	adds	r3, #1
   1bd26:	613b      	str	r3, [r7, #16]
   1bd28:	693b      	ldr	r3, [r7, #16]
   1bd2a:	2b04      	cmp	r3, #4
   1bd2c:	dd03      	ble.n	1bd36 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   1bd2e:	2301      	movs	r3, #1
   1bd30:	425b      	negs	r3, r3
   1bd32:	60fb      	str	r3, [r7, #12]
			goto exit;
   1bd34:	e022      	b.n	1bd7c <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   1bd36:	230b      	movs	r3, #11
   1bd38:	18fa      	adds	r2, r7, r3
   1bd3a:	687b      	ldr	r3, [r7, #4]
   1bd3c:	2101      	movs	r1, #1
   1bd3e:	0010      	movs	r0, r2
   1bd40:	4798      	blx	r3
   1bd42:	0003      	movs	r3, r0
   1bd44:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   1bd46:	68fb      	ldr	r3, [r7, #12]
   1bd48:	2b01      	cmp	r3, #1
   1bd4a:	d116      	bne.n	1bd7a <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   1bd4c:	683b      	ldr	r3, [r7, #0]
   1bd4e:	681a      	ldr	r2, [r3, #0]
   1bd50:	230b      	movs	r3, #11
   1bd52:	18fb      	adds	r3, r7, r3
   1bd54:	781b      	ldrb	r3, [r3, #0]
   1bd56:	0019      	movs	r1, r3
   1bd58:	237f      	movs	r3, #127	; 0x7f
   1bd5a:	400b      	ands	r3, r1
   1bd5c:	6979      	ldr	r1, [r7, #20]
   1bd5e:	434b      	muls	r3, r1
   1bd60:	18d2      	adds	r2, r2, r3
   1bd62:	683b      	ldr	r3, [r7, #0]
   1bd64:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   1bd66:	697b      	ldr	r3, [r7, #20]
   1bd68:	01db      	lsls	r3, r3, #7
   1bd6a:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   1bd6c:	230b      	movs	r3, #11
   1bd6e:	18fb      	adds	r3, r7, r3
   1bd70:	781b      	ldrb	r3, [r3, #0]
   1bd72:	b25b      	sxtb	r3, r3
   1bd74:	2b00      	cmp	r3, #0
   1bd76:	dbd1      	blt.n	1bd1c <MQTTPacket_decode+0x18>
   1bd78:	e000      	b.n	1bd7c <MQTTPacket_decode+0x78>
			goto exit;
   1bd7a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   1bd7c:	693b      	ldr	r3, [r7, #16]
}
   1bd7e:	0018      	movs	r0, r3
   1bd80:	46bd      	mov	sp, r7
   1bd82:	b006      	add	sp, #24
   1bd84:	bd80      	pop	{r7, pc}
	...

0001bd88 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   1bd88:	b580      	push	{r7, lr}
   1bd8a:	b082      	sub	sp, #8
   1bd8c:	af00      	add	r7, sp, #0
   1bd8e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   1bd90:	687b      	ldr	r3, [r7, #4]
   1bd92:	3301      	adds	r3, #1
   1bd94:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   1bd96:	687b      	ldr	r3, [r7, #4]
   1bd98:	2b7f      	cmp	r3, #127	; 0x7f
   1bd9a:	dc03      	bgt.n	1bda4 <MQTTPacket_len+0x1c>
		rem_len += 1;
   1bd9c:	687b      	ldr	r3, [r7, #4]
   1bd9e:	3301      	adds	r3, #1
   1bda0:	607b      	str	r3, [r7, #4]
   1bda2:	e012      	b.n	1bdca <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   1bda4:	687b      	ldr	r3, [r7, #4]
   1bda6:	4a0b      	ldr	r2, [pc, #44]	; (1bdd4 <MQTTPacket_len+0x4c>)
   1bda8:	4293      	cmp	r3, r2
   1bdaa:	dc03      	bgt.n	1bdb4 <MQTTPacket_len+0x2c>
		rem_len += 2;
   1bdac:	687b      	ldr	r3, [r7, #4]
   1bdae:	3302      	adds	r3, #2
   1bdb0:	607b      	str	r3, [r7, #4]
   1bdb2:	e00a      	b.n	1bdca <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   1bdb4:	687b      	ldr	r3, [r7, #4]
   1bdb6:	4a08      	ldr	r2, [pc, #32]	; (1bdd8 <MQTTPacket_len+0x50>)
   1bdb8:	4293      	cmp	r3, r2
   1bdba:	dc03      	bgt.n	1bdc4 <MQTTPacket_len+0x3c>
		rem_len += 3;
   1bdbc:	687b      	ldr	r3, [r7, #4]
   1bdbe:	3303      	adds	r3, #3
   1bdc0:	607b      	str	r3, [r7, #4]
   1bdc2:	e002      	b.n	1bdca <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   1bdc4:	687b      	ldr	r3, [r7, #4]
   1bdc6:	3304      	adds	r3, #4
   1bdc8:	607b      	str	r3, [r7, #4]
	return rem_len;
   1bdca:	687b      	ldr	r3, [r7, #4]
}
   1bdcc:	0018      	movs	r0, r3
   1bdce:	46bd      	mov	sp, r7
   1bdd0:	b002      	add	sp, #8
   1bdd2:	bd80      	pop	{r7, pc}
   1bdd4:	00003fff 	.word	0x00003fff
   1bdd8:	001ffffe 	.word	0x001ffffe

0001bddc <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   1bddc:	b580      	push	{r7, lr}
   1bdde:	b084      	sub	sp, #16
   1bde0:	af00      	add	r7, sp, #0
   1bde2:	6078      	str	r0, [r7, #4]
   1bde4:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   1bde6:	2300      	movs	r3, #0
   1bde8:	60fb      	str	r3, [r7, #12]
   1bdea:	e00a      	b.n	1be02 <bufchar+0x26>
		*c = *bufptr++;
   1bdec:	4b09      	ldr	r3, [pc, #36]	; (1be14 <bufchar+0x38>)
   1bdee:	681b      	ldr	r3, [r3, #0]
   1bdf0:	1c59      	adds	r1, r3, #1
   1bdf2:	4a08      	ldr	r2, [pc, #32]	; (1be14 <bufchar+0x38>)
   1bdf4:	6011      	str	r1, [r2, #0]
   1bdf6:	781a      	ldrb	r2, [r3, #0]
   1bdf8:	687b      	ldr	r3, [r7, #4]
   1bdfa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   1bdfc:	68fb      	ldr	r3, [r7, #12]
   1bdfe:	3301      	adds	r3, #1
   1be00:	60fb      	str	r3, [r7, #12]
   1be02:	68fa      	ldr	r2, [r7, #12]
   1be04:	683b      	ldr	r3, [r7, #0]
   1be06:	429a      	cmp	r2, r3
   1be08:	dbf0      	blt.n	1bdec <bufchar+0x10>
	return count;
   1be0a:	683b      	ldr	r3, [r7, #0]
}
   1be0c:	0018      	movs	r0, r3
   1be0e:	46bd      	mov	sp, r7
   1be10:	b004      	add	sp, #16
   1be12:	bd80      	pop	{r7, pc}
   1be14:	20004158 	.word	0x20004158

0001be18 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   1be18:	b580      	push	{r7, lr}
   1be1a:	b082      	sub	sp, #8
   1be1c:	af00      	add	r7, sp, #0
   1be1e:	6078      	str	r0, [r7, #4]
   1be20:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   1be22:	4b07      	ldr	r3, [pc, #28]	; (1be40 <MQTTPacket_decodeBuf+0x28>)
   1be24:	687a      	ldr	r2, [r7, #4]
   1be26:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   1be28:	683a      	ldr	r2, [r7, #0]
   1be2a:	4b06      	ldr	r3, [pc, #24]	; (1be44 <MQTTPacket_decodeBuf+0x2c>)
   1be2c:	0011      	movs	r1, r2
   1be2e:	0018      	movs	r0, r3
   1be30:	4b05      	ldr	r3, [pc, #20]	; (1be48 <MQTTPacket_decodeBuf+0x30>)
   1be32:	4798      	blx	r3
   1be34:	0003      	movs	r3, r0
}
   1be36:	0018      	movs	r0, r3
   1be38:	46bd      	mov	sp, r7
   1be3a:	b002      	add	sp, #8
   1be3c:	bd80      	pop	{r7, pc}
   1be3e:	46c0      	nop			; (mov r8, r8)
   1be40:	20004158 	.word	0x20004158
   1be44:	0001bddd 	.word	0x0001bddd
   1be48:	0001bd05 	.word	0x0001bd05

0001be4c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   1be4c:	b580      	push	{r7, lr}
   1be4e:	b084      	sub	sp, #16
   1be50:	af00      	add	r7, sp, #0
   1be52:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   1be54:	687b      	ldr	r3, [r7, #4]
   1be56:	681b      	ldr	r3, [r3, #0]
   1be58:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   1be5a:	68fb      	ldr	r3, [r7, #12]
   1be5c:	781b      	ldrb	r3, [r3, #0]
   1be5e:	021b      	lsls	r3, r3, #8
   1be60:	68fa      	ldr	r2, [r7, #12]
   1be62:	3201      	adds	r2, #1
   1be64:	7812      	ldrb	r2, [r2, #0]
   1be66:	189b      	adds	r3, r3, r2
   1be68:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   1be6a:	687b      	ldr	r3, [r7, #4]
   1be6c:	681b      	ldr	r3, [r3, #0]
   1be6e:	1c9a      	adds	r2, r3, #2
   1be70:	687b      	ldr	r3, [r7, #4]
   1be72:	601a      	str	r2, [r3, #0]
	return len;
   1be74:	68bb      	ldr	r3, [r7, #8]
}
   1be76:	0018      	movs	r0, r3
   1be78:	46bd      	mov	sp, r7
   1be7a:	b004      	add	sp, #16
   1be7c:	bd80      	pop	{r7, pc}

0001be7e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   1be7e:	b580      	push	{r7, lr}
   1be80:	b084      	sub	sp, #16
   1be82:	af00      	add	r7, sp, #0
   1be84:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   1be86:	687b      	ldr	r3, [r7, #4]
   1be88:	681a      	ldr	r2, [r3, #0]
   1be8a:	230f      	movs	r3, #15
   1be8c:	18fb      	adds	r3, r7, r3
   1be8e:	7812      	ldrb	r2, [r2, #0]
   1be90:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1be92:	687b      	ldr	r3, [r7, #4]
   1be94:	681b      	ldr	r3, [r3, #0]
   1be96:	1c5a      	adds	r2, r3, #1
   1be98:	687b      	ldr	r3, [r7, #4]
   1be9a:	601a      	str	r2, [r3, #0]
	return c;
   1be9c:	230f      	movs	r3, #15
   1be9e:	18fb      	adds	r3, r7, r3
   1bea0:	781b      	ldrb	r3, [r3, #0]
}
   1bea2:	0018      	movs	r0, r3
   1bea4:	46bd      	mov	sp, r7
   1bea6:	b004      	add	sp, #16
   1bea8:	bd80      	pop	{r7, pc}

0001beaa <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   1beaa:	b580      	push	{r7, lr}
   1beac:	b082      	sub	sp, #8
   1beae:	af00      	add	r7, sp, #0
   1beb0:	6078      	str	r0, [r7, #4]
   1beb2:	000a      	movs	r2, r1
   1beb4:	1cfb      	adds	r3, r7, #3
   1beb6:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   1beb8:	687b      	ldr	r3, [r7, #4]
   1beba:	681b      	ldr	r3, [r3, #0]
   1bebc:	1cfa      	adds	r2, r7, #3
   1bebe:	7812      	ldrb	r2, [r2, #0]
   1bec0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   1bec2:	687b      	ldr	r3, [r7, #4]
   1bec4:	681b      	ldr	r3, [r3, #0]
   1bec6:	1c5a      	adds	r2, r3, #1
   1bec8:	687b      	ldr	r3, [r7, #4]
   1beca:	601a      	str	r2, [r3, #0]
}
   1becc:	46c0      	nop			; (mov r8, r8)
   1bece:	46bd      	mov	sp, r7
   1bed0:	b002      	add	sp, #8
   1bed2:	bd80      	pop	{r7, pc}

0001bed4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   1bed4:	b580      	push	{r7, lr}
   1bed6:	b082      	sub	sp, #8
   1bed8:	af00      	add	r7, sp, #0
   1beda:	6078      	str	r0, [r7, #4]
   1bedc:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   1bede:	687b      	ldr	r3, [r7, #4]
   1bee0:	681a      	ldr	r2, [r3, #0]
   1bee2:	683b      	ldr	r3, [r7, #0]
   1bee4:	2b00      	cmp	r3, #0
   1bee6:	da00      	bge.n	1beea <writeInt+0x16>
   1bee8:	33ff      	adds	r3, #255	; 0xff
   1beea:	121b      	asrs	r3, r3, #8
   1beec:	b2db      	uxtb	r3, r3
   1beee:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1bef0:	687b      	ldr	r3, [r7, #4]
   1bef2:	681b      	ldr	r3, [r3, #0]
   1bef4:	1c5a      	adds	r2, r3, #1
   1bef6:	687b      	ldr	r3, [r7, #4]
   1bef8:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   1befa:	687b      	ldr	r3, [r7, #4]
   1befc:	681a      	ldr	r2, [r3, #0]
   1befe:	683b      	ldr	r3, [r7, #0]
   1bf00:	4908      	ldr	r1, [pc, #32]	; (1bf24 <writeInt+0x50>)
   1bf02:	400b      	ands	r3, r1
   1bf04:	d503      	bpl.n	1bf0e <writeInt+0x3a>
   1bf06:	3b01      	subs	r3, #1
   1bf08:	4907      	ldr	r1, [pc, #28]	; (1bf28 <writeInt+0x54>)
   1bf0a:	430b      	orrs	r3, r1
   1bf0c:	3301      	adds	r3, #1
   1bf0e:	b2db      	uxtb	r3, r3
   1bf10:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   1bf12:	687b      	ldr	r3, [r7, #4]
   1bf14:	681b      	ldr	r3, [r3, #0]
   1bf16:	1c5a      	adds	r2, r3, #1
   1bf18:	687b      	ldr	r3, [r7, #4]
   1bf1a:	601a      	str	r2, [r3, #0]
}
   1bf1c:	46c0      	nop			; (mov r8, r8)
   1bf1e:	46bd      	mov	sp, r7
   1bf20:	b002      	add	sp, #8
   1bf22:	bd80      	pop	{r7, pc}
   1bf24:	800000ff 	.word	0x800000ff
   1bf28:	ffffff00 	.word	0xffffff00

0001bf2c <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   1bf2c:	b580      	push	{r7, lr}
   1bf2e:	b084      	sub	sp, #16
   1bf30:	af00      	add	r7, sp, #0
   1bf32:	6078      	str	r0, [r7, #4]
   1bf34:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   1bf36:	683b      	ldr	r3, [r7, #0]
   1bf38:	0018      	movs	r0, r3
   1bf3a:	4b0d      	ldr	r3, [pc, #52]	; (1bf70 <writeCString+0x44>)
   1bf3c:	4798      	blx	r3
   1bf3e:	0003      	movs	r3, r0
   1bf40:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   1bf42:	68fa      	ldr	r2, [r7, #12]
   1bf44:	687b      	ldr	r3, [r7, #4]
   1bf46:	0011      	movs	r1, r2
   1bf48:	0018      	movs	r0, r3
   1bf4a:	4b0a      	ldr	r3, [pc, #40]	; (1bf74 <writeCString+0x48>)
   1bf4c:	4798      	blx	r3
	memcpy(*pptr, string, len);
   1bf4e:	687b      	ldr	r3, [r7, #4]
   1bf50:	681b      	ldr	r3, [r3, #0]
   1bf52:	68fa      	ldr	r2, [r7, #12]
   1bf54:	6839      	ldr	r1, [r7, #0]
   1bf56:	0018      	movs	r0, r3
   1bf58:	4b07      	ldr	r3, [pc, #28]	; (1bf78 <writeCString+0x4c>)
   1bf5a:	4798      	blx	r3
	*pptr += len;
   1bf5c:	687b      	ldr	r3, [r7, #4]
   1bf5e:	681a      	ldr	r2, [r3, #0]
   1bf60:	68fb      	ldr	r3, [r7, #12]
   1bf62:	18d2      	adds	r2, r2, r3
   1bf64:	687b      	ldr	r3, [r7, #4]
   1bf66:	601a      	str	r2, [r3, #0]
}
   1bf68:	46c0      	nop			; (mov r8, r8)
   1bf6a:	46bd      	mov	sp, r7
   1bf6c:	b004      	add	sp, #16
   1bf6e:	bd80      	pop	{r7, pc}
   1bf70:	000204db 	.word	0x000204db
   1bf74:	0001bed5 	.word	0x0001bed5
   1bf78:	000200ed 	.word	0x000200ed

0001bf7c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   1bf7c:	b580      	push	{r7, lr}
   1bf7e:	b084      	sub	sp, #16
   1bf80:	af00      	add	r7, sp, #0
   1bf82:	60f8      	str	r0, [r7, #12]
   1bf84:	0038      	movs	r0, r7
   1bf86:	6001      	str	r1, [r0, #0]
   1bf88:	6042      	str	r2, [r0, #4]
   1bf8a:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   1bf8c:	003b      	movs	r3, r7
   1bf8e:	685b      	ldr	r3, [r3, #4]
   1bf90:	2b00      	cmp	r3, #0
   1bf92:	dd17      	ble.n	1bfc4 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   1bf94:	003b      	movs	r3, r7
   1bf96:	685a      	ldr	r2, [r3, #4]
   1bf98:	68fb      	ldr	r3, [r7, #12]
   1bf9a:	0011      	movs	r1, r2
   1bf9c:	0018      	movs	r0, r3
   1bf9e:	4b14      	ldr	r3, [pc, #80]	; (1bff0 <writeMQTTString+0x74>)
   1bfa0:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   1bfa2:	68fb      	ldr	r3, [r7, #12]
   1bfa4:	6818      	ldr	r0, [r3, #0]
   1bfa6:	003b      	movs	r3, r7
   1bfa8:	6899      	ldr	r1, [r3, #8]
   1bfaa:	003b      	movs	r3, r7
   1bfac:	685b      	ldr	r3, [r3, #4]
   1bfae:	001a      	movs	r2, r3
   1bfb0:	4b10      	ldr	r3, [pc, #64]	; (1bff4 <writeMQTTString+0x78>)
   1bfb2:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   1bfb4:	68fb      	ldr	r3, [r7, #12]
   1bfb6:	681a      	ldr	r2, [r3, #0]
   1bfb8:	003b      	movs	r3, r7
   1bfba:	685b      	ldr	r3, [r3, #4]
   1bfbc:	18d2      	adds	r2, r2, r3
   1bfbe:	68fb      	ldr	r3, [r7, #12]
   1bfc0:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   1bfc2:	e010      	b.n	1bfe6 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   1bfc4:	003b      	movs	r3, r7
   1bfc6:	681b      	ldr	r3, [r3, #0]
   1bfc8:	2b00      	cmp	r3, #0
   1bfca:	d007      	beq.n	1bfdc <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   1bfcc:	003b      	movs	r3, r7
   1bfce:	681a      	ldr	r2, [r3, #0]
   1bfd0:	68fb      	ldr	r3, [r7, #12]
   1bfd2:	0011      	movs	r1, r2
   1bfd4:	0018      	movs	r0, r3
   1bfd6:	4b08      	ldr	r3, [pc, #32]	; (1bff8 <writeMQTTString+0x7c>)
   1bfd8:	4798      	blx	r3
}
   1bfda:	e004      	b.n	1bfe6 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   1bfdc:	68fb      	ldr	r3, [r7, #12]
   1bfde:	2100      	movs	r1, #0
   1bfe0:	0018      	movs	r0, r3
   1bfe2:	4b03      	ldr	r3, [pc, #12]	; (1bff0 <writeMQTTString+0x74>)
   1bfe4:	4798      	blx	r3
}
   1bfe6:	46c0      	nop			; (mov r8, r8)
   1bfe8:	46bd      	mov	sp, r7
   1bfea:	b004      	add	sp, #16
   1bfec:	bd80      	pop	{r7, pc}
   1bfee:	46c0      	nop			; (mov r8, r8)
   1bff0:	0001bed5 	.word	0x0001bed5
   1bff4:	000200ed 	.word	0x000200ed
   1bff8:	0001bf2d 	.word	0x0001bf2d

0001bffc <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   1bffc:	b580      	push	{r7, lr}
   1bffe:	b086      	sub	sp, #24
   1c000:	af00      	add	r7, sp, #0
   1c002:	60f8      	str	r0, [r7, #12]
   1c004:	60b9      	str	r1, [r7, #8]
   1c006:	607a      	str	r2, [r7, #4]
	int rc = 0;
   1c008:	2300      	movs	r3, #0
   1c00a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   1c00c:	687a      	ldr	r2, [r7, #4]
   1c00e:	68bb      	ldr	r3, [r7, #8]
   1c010:	681b      	ldr	r3, [r3, #0]
   1c012:	1ad3      	subs	r3, r2, r3
   1c014:	2b01      	cmp	r3, #1
   1c016:	dd1b      	ble.n	1c050 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   1c018:	68bb      	ldr	r3, [r7, #8]
   1c01a:	0018      	movs	r0, r3
   1c01c:	4b10      	ldr	r3, [pc, #64]	; (1c060 <readMQTTLenString+0x64>)
   1c01e:	4798      	blx	r3
   1c020:	0002      	movs	r2, r0
   1c022:	68fb      	ldr	r3, [r7, #12]
   1c024:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1c026:	68bb      	ldr	r3, [r7, #8]
   1c028:	681a      	ldr	r2, [r3, #0]
   1c02a:	68fb      	ldr	r3, [r7, #12]
   1c02c:	685b      	ldr	r3, [r3, #4]
   1c02e:	18d2      	adds	r2, r2, r3
   1c030:	687b      	ldr	r3, [r7, #4]
   1c032:	429a      	cmp	r2, r3
   1c034:	d80c      	bhi.n	1c050 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   1c036:	68bb      	ldr	r3, [r7, #8]
   1c038:	681a      	ldr	r2, [r3, #0]
   1c03a:	68fb      	ldr	r3, [r7, #12]
   1c03c:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   1c03e:	68bb      	ldr	r3, [r7, #8]
   1c040:	681a      	ldr	r2, [r3, #0]
   1c042:	68fb      	ldr	r3, [r7, #12]
   1c044:	685b      	ldr	r3, [r3, #4]
   1c046:	18d2      	adds	r2, r2, r3
   1c048:	68bb      	ldr	r3, [r7, #8]
   1c04a:	601a      	str	r2, [r3, #0]
			rc = 1;
   1c04c:	2301      	movs	r3, #1
   1c04e:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   1c050:	68fb      	ldr	r3, [r7, #12]
   1c052:	2200      	movs	r2, #0
   1c054:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   1c056:	697b      	ldr	r3, [r7, #20]
}
   1c058:	0018      	movs	r0, r3
   1c05a:	46bd      	mov	sp, r7
   1c05c:	b006      	add	sp, #24
   1c05e:	bd80      	pop	{r7, pc}
   1c060:	0001be4d 	.word	0x0001be4d

0001c064 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   1c064:	b580      	push	{r7, lr}
   1c066:	b086      	sub	sp, #24
   1c068:	af00      	add	r7, sp, #0
   1c06a:	1d3b      	adds	r3, r7, #4
   1c06c:	6018      	str	r0, [r3, #0]
   1c06e:	6059      	str	r1, [r3, #4]
   1c070:	609a      	str	r2, [r3, #8]
	int rc = 0;
   1c072:	2300      	movs	r3, #0
   1c074:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   1c076:	1d3b      	adds	r3, r7, #4
   1c078:	681b      	ldr	r3, [r3, #0]
   1c07a:	2b00      	cmp	r3, #0
   1c07c:	d007      	beq.n	1c08e <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   1c07e:	1d3b      	adds	r3, r7, #4
   1c080:	681b      	ldr	r3, [r3, #0]
   1c082:	0018      	movs	r0, r3
   1c084:	4b06      	ldr	r3, [pc, #24]	; (1c0a0 <MQTTstrlen+0x3c>)
   1c086:	4798      	blx	r3
   1c088:	0003      	movs	r3, r0
   1c08a:	617b      	str	r3, [r7, #20]
   1c08c:	e002      	b.n	1c094 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   1c08e:	1d3b      	adds	r3, r7, #4
   1c090:	685b      	ldr	r3, [r3, #4]
   1c092:	617b      	str	r3, [r7, #20]
	return rc;
   1c094:	697b      	ldr	r3, [r7, #20]
}
   1c096:	0018      	movs	r0, r3
   1c098:	46bd      	mov	sp, r7
   1c09a:	b006      	add	sp, #24
   1c09c:	bd80      	pop	{r7, pc}
   1c09e:	46c0      	nop			; (mov r8, r8)
   1c0a0:	000204db 	.word	0x000204db

0001c0a4 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   1c0a4:	b580      	push	{r7, lr}
   1c0a6:	b086      	sub	sp, #24
   1c0a8:	af00      	add	r7, sp, #0
   1c0aa:	6078      	str	r0, [r7, #4]
   1c0ac:	6039      	str	r1, [r7, #0]
	int alen = 0,
   1c0ae:	2300      	movs	r3, #0
   1c0b0:	617b      	str	r3, [r7, #20]
		blen = 0;
   1c0b2:	2300      	movs	r3, #0
   1c0b4:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   1c0b6:	687b      	ldr	r3, [r7, #4]
   1c0b8:	681b      	ldr	r3, [r3, #0]
   1c0ba:	2b00      	cmp	r3, #0
   1c0bc:	d00a      	beq.n	1c0d4 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   1c0be:	687b      	ldr	r3, [r7, #4]
   1c0c0:	681b      	ldr	r3, [r3, #0]
   1c0c2:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   1c0c4:	687b      	ldr	r3, [r7, #4]
   1c0c6:	681b      	ldr	r3, [r3, #0]
   1c0c8:	0018      	movs	r0, r3
   1c0ca:	4b12      	ldr	r3, [pc, #72]	; (1c114 <MQTTPacket_equals+0x70>)
   1c0cc:	4798      	blx	r3
   1c0ce:	0003      	movs	r3, r0
   1c0d0:	617b      	str	r3, [r7, #20]
   1c0d2:	e005      	b.n	1c0e0 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   1c0d4:	687b      	ldr	r3, [r7, #4]
   1c0d6:	689b      	ldr	r3, [r3, #8]
   1c0d8:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   1c0da:	687b      	ldr	r3, [r7, #4]
   1c0dc:	685b      	ldr	r3, [r3, #4]
   1c0de:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   1c0e0:	683b      	ldr	r3, [r7, #0]
   1c0e2:	0018      	movs	r0, r3
   1c0e4:	4b0b      	ldr	r3, [pc, #44]	; (1c114 <MQTTPacket_equals+0x70>)
   1c0e6:	4798      	blx	r3
   1c0e8:	0003      	movs	r3, r0
   1c0ea:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   1c0ec:	697a      	ldr	r2, [r7, #20]
   1c0ee:	68fb      	ldr	r3, [r7, #12]
   1c0f0:	429a      	cmp	r2, r3
   1c0f2:	d109      	bne.n	1c108 <MQTTPacket_equals+0x64>
   1c0f4:	697a      	ldr	r2, [r7, #20]
   1c0f6:	6839      	ldr	r1, [r7, #0]
   1c0f8:	693b      	ldr	r3, [r7, #16]
   1c0fa:	0018      	movs	r0, r3
   1c0fc:	4b06      	ldr	r3, [pc, #24]	; (1c118 <MQTTPacket_equals+0x74>)
   1c0fe:	4798      	blx	r3
   1c100:	1e03      	subs	r3, r0, #0
   1c102:	d101      	bne.n	1c108 <MQTTPacket_equals+0x64>
   1c104:	2301      	movs	r3, #1
   1c106:	e000      	b.n	1c10a <MQTTPacket_equals+0x66>
   1c108:	2300      	movs	r3, #0
}
   1c10a:	0018      	movs	r0, r3
   1c10c:	46bd      	mov	sp, r7
   1c10e:	b006      	add	sp, #24
   1c110:	bd80      	pop	{r7, pc}
   1c112:	46c0      	nop			; (mov r8, r8)
   1c114:	000204db 	.word	0x000204db
   1c118:	000204e9 	.word	0x000204e9

0001c11c <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   1c11c:	b580      	push	{r7, lr}
   1c11e:	b086      	sub	sp, #24
   1c120:	af00      	add	r7, sp, #0
   1c122:	60f8      	str	r0, [r7, #12]
   1c124:	0038      	movs	r0, r7
   1c126:	6001      	str	r1, [r0, #0]
   1c128:	6042      	str	r2, [r0, #4]
   1c12a:	6083      	str	r3, [r0, #8]
	int len = 0;
   1c12c:	2300      	movs	r3, #0
   1c12e:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   1c130:	003b      	movs	r3, r7
   1c132:	6818      	ldr	r0, [r3, #0]
   1c134:	6859      	ldr	r1, [r3, #4]
   1c136:	689a      	ldr	r2, [r3, #8]
   1c138:	4b09      	ldr	r3, [pc, #36]	; (1c160 <MQTTSerialize_publishLength+0x44>)
   1c13a:	4798      	blx	r3
   1c13c:	0003      	movs	r3, r0
   1c13e:	1c9a      	adds	r2, r3, #2
   1c140:	6a3b      	ldr	r3, [r7, #32]
   1c142:	18d3      	adds	r3, r2, r3
   1c144:	697a      	ldr	r2, [r7, #20]
   1c146:	18d3      	adds	r3, r2, r3
   1c148:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   1c14a:	68fb      	ldr	r3, [r7, #12]
   1c14c:	2b00      	cmp	r3, #0
   1c14e:	dd02      	ble.n	1c156 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   1c150:	697b      	ldr	r3, [r7, #20]
   1c152:	3302      	adds	r3, #2
   1c154:	617b      	str	r3, [r7, #20]
	return len;
   1c156:	697b      	ldr	r3, [r7, #20]
}
   1c158:	0018      	movs	r0, r3
   1c15a:	46bd      	mov	sp, r7
   1c15c:	b006      	add	sp, #24
   1c15e:	bd80      	pop	{r7, pc}
   1c160:	0001c065 	.word	0x0001c065

0001c164 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   1c164:	b590      	push	{r4, r7, lr}
   1c166:	b08b      	sub	sp, #44	; 0x2c
   1c168:	af02      	add	r7, sp, #8
   1c16a:	60f8      	str	r0, [r7, #12]
   1c16c:	60b9      	str	r1, [r7, #8]
   1c16e:	603b      	str	r3, [r7, #0]
   1c170:	1dfb      	adds	r3, r7, #7
   1c172:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   1c174:	68fb      	ldr	r3, [r7, #12]
   1c176:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   1c178:	2300      	movs	r3, #0
   1c17a:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   1c17c:	2300      	movs	r3, #0
   1c17e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1c180:	2300      	movs	r3, #0
   1c182:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   1c184:	2308      	movs	r3, #8
   1c186:	2230      	movs	r2, #48	; 0x30
   1c188:	4694      	mov	ip, r2
   1c18a:	44bc      	add	ip, r7
   1c18c:	4463      	add	r3, ip
   1c18e:	6838      	ldr	r0, [r7, #0]
   1c190:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1c192:	9200      	str	r2, [sp, #0]
   1c194:	6819      	ldr	r1, [r3, #0]
   1c196:	685a      	ldr	r2, [r3, #4]
   1c198:	689b      	ldr	r3, [r3, #8]
   1c19a:	4c46      	ldr	r4, [pc, #280]	; (1c2b4 <MQTTSerialize_publish+0x150>)
   1c19c:	47a0      	blx	r4
   1c19e:	0003      	movs	r3, r0
   1c1a0:	61bb      	str	r3, [r7, #24]
   1c1a2:	69bb      	ldr	r3, [r7, #24]
   1c1a4:	0018      	movs	r0, r3
   1c1a6:	4b44      	ldr	r3, [pc, #272]	; (1c2b8 <MQTTSerialize_publish+0x154>)
   1c1a8:	4798      	blx	r3
   1c1aa:	0002      	movs	r2, r0
   1c1ac:	68bb      	ldr	r3, [r7, #8]
   1c1ae:	429a      	cmp	r2, r3
   1c1b0:	dd03      	ble.n	1c1ba <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1c1b2:	2302      	movs	r3, #2
   1c1b4:	425b      	negs	r3, r3
   1c1b6:	61fb      	str	r3, [r7, #28]
		goto exit;
   1c1b8:	e077      	b.n	1c2aa <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   1c1ba:	2310      	movs	r3, #16
   1c1bc:	18fb      	adds	r3, r7, r3
   1c1be:	781a      	ldrb	r2, [r3, #0]
   1c1c0:	210f      	movs	r1, #15
   1c1c2:	400a      	ands	r2, r1
   1c1c4:	1c11      	adds	r1, r2, #0
   1c1c6:	2230      	movs	r2, #48	; 0x30
   1c1c8:	430a      	orrs	r2, r1
   1c1ca:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1c1cc:	1dfb      	adds	r3, r7, #7
   1c1ce:	781b      	ldrb	r3, [r3, #0]
   1c1d0:	2201      	movs	r2, #1
   1c1d2:	4013      	ands	r3, r2
   1c1d4:	b2da      	uxtb	r2, r3
   1c1d6:	2310      	movs	r3, #16
   1c1d8:	18fb      	adds	r3, r7, r3
   1c1da:	2101      	movs	r1, #1
   1c1dc:	400a      	ands	r2, r1
   1c1de:	00d0      	lsls	r0, r2, #3
   1c1e0:	781a      	ldrb	r2, [r3, #0]
   1c1e2:	2108      	movs	r1, #8
   1c1e4:	438a      	bics	r2, r1
   1c1e6:	1c11      	adds	r1, r2, #0
   1c1e8:	1c02      	adds	r2, r0, #0
   1c1ea:	430a      	orrs	r2, r1
   1c1ec:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   1c1ee:	683b      	ldr	r3, [r7, #0]
   1c1f0:	b2db      	uxtb	r3, r3
   1c1f2:	1c1a      	adds	r2, r3, #0
   1c1f4:	2303      	movs	r3, #3
   1c1f6:	4013      	ands	r3, r2
   1c1f8:	b2da      	uxtb	r2, r3
   1c1fa:	2310      	movs	r3, #16
   1c1fc:	18fb      	adds	r3, r7, r3
   1c1fe:	2103      	movs	r1, #3
   1c200:	400a      	ands	r2, r1
   1c202:	1890      	adds	r0, r2, r2
   1c204:	781a      	ldrb	r2, [r3, #0]
   1c206:	2106      	movs	r1, #6
   1c208:	438a      	bics	r2, r1
   1c20a:	1c11      	adds	r1, r2, #0
   1c20c:	1c02      	adds	r2, r0, #0
   1c20e:	430a      	orrs	r2, r1
   1c210:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   1c212:	2330      	movs	r3, #48	; 0x30
   1c214:	18fb      	adds	r3, r7, r3
   1c216:	781b      	ldrb	r3, [r3, #0]
   1c218:	2201      	movs	r2, #1
   1c21a:	4013      	ands	r3, r2
   1c21c:	b2da      	uxtb	r2, r3
   1c21e:	2310      	movs	r3, #16
   1c220:	18fb      	adds	r3, r7, r3
   1c222:	2101      	movs	r1, #1
   1c224:	400a      	ands	r2, r1
   1c226:	0010      	movs	r0, r2
   1c228:	781a      	ldrb	r2, [r3, #0]
   1c22a:	2101      	movs	r1, #1
   1c22c:	438a      	bics	r2, r1
   1c22e:	1c11      	adds	r1, r2, #0
   1c230:	1c02      	adds	r2, r0, #0
   1c232:	430a      	orrs	r2, r1
   1c234:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1c236:	2310      	movs	r3, #16
   1c238:	18fb      	adds	r3, r7, r3
   1c23a:	781a      	ldrb	r2, [r3, #0]
   1c23c:	2314      	movs	r3, #20
   1c23e:	18fb      	adds	r3, r7, r3
   1c240:	0011      	movs	r1, r2
   1c242:	0018      	movs	r0, r3
   1c244:	4b1d      	ldr	r3, [pc, #116]	; (1c2bc <MQTTSerialize_publish+0x158>)
   1c246:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1c248:	697b      	ldr	r3, [r7, #20]
   1c24a:	69ba      	ldr	r2, [r7, #24]
   1c24c:	0011      	movs	r1, r2
   1c24e:	0018      	movs	r0, r3
   1c250:	4b1b      	ldr	r3, [pc, #108]	; (1c2c0 <MQTTSerialize_publish+0x15c>)
   1c252:	4798      	blx	r3
   1c254:	0002      	movs	r2, r0
   1c256:	697b      	ldr	r3, [r7, #20]
   1c258:	189b      	adds	r3, r3, r2
   1c25a:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   1c25c:	2308      	movs	r3, #8
   1c25e:	2230      	movs	r2, #48	; 0x30
   1c260:	4694      	mov	ip, r2
   1c262:	44bc      	add	ip, r7
   1c264:	4463      	add	r3, ip
   1c266:	2214      	movs	r2, #20
   1c268:	18b8      	adds	r0, r7, r2
   1c26a:	6819      	ldr	r1, [r3, #0]
   1c26c:	685a      	ldr	r2, [r3, #4]
   1c26e:	689b      	ldr	r3, [r3, #8]
   1c270:	4c14      	ldr	r4, [pc, #80]	; (1c2c4 <MQTTSerialize_publish+0x160>)
   1c272:	47a0      	blx	r4

	if (qos > 0)
   1c274:	683b      	ldr	r3, [r7, #0]
   1c276:	2b00      	cmp	r3, #0
   1c278:	dd08      	ble.n	1c28c <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   1c27a:	2334      	movs	r3, #52	; 0x34
   1c27c:	18fb      	adds	r3, r7, r3
   1c27e:	881a      	ldrh	r2, [r3, #0]
   1c280:	2314      	movs	r3, #20
   1c282:	18fb      	adds	r3, r7, r3
   1c284:	0011      	movs	r1, r2
   1c286:	0018      	movs	r0, r3
   1c288:	4b0f      	ldr	r3, [pc, #60]	; (1c2c8 <MQTTSerialize_publish+0x164>)
   1c28a:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   1c28c:	697b      	ldr	r3, [r7, #20]
   1c28e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1c290:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1c292:	0018      	movs	r0, r3
   1c294:	4b0d      	ldr	r3, [pc, #52]	; (1c2cc <MQTTSerialize_publish+0x168>)
   1c296:	4798      	blx	r3
	ptr += payloadlen;
   1c298:	697a      	ldr	r2, [r7, #20]
   1c29a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1c29c:	18d3      	adds	r3, r2, r3
   1c29e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   1c2a0:	697b      	ldr	r3, [r7, #20]
   1c2a2:	001a      	movs	r2, r3
   1c2a4:	68fb      	ldr	r3, [r7, #12]
   1c2a6:	1ad3      	subs	r3, r2, r3
   1c2a8:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c2aa:	69fb      	ldr	r3, [r7, #28]
}
   1c2ac:	0018      	movs	r0, r3
   1c2ae:	46bd      	mov	sp, r7
   1c2b0:	b009      	add	sp, #36	; 0x24
   1c2b2:	bd90      	pop	{r4, r7, pc}
   1c2b4:	0001c11d 	.word	0x0001c11d
   1c2b8:	0001bd89 	.word	0x0001bd89
   1c2bc:	0001beab 	.word	0x0001beab
   1c2c0:	0001bc91 	.word	0x0001bc91
   1c2c4:	0001bf7d 	.word	0x0001bf7d
   1c2c8:	0001bed5 	.word	0x0001bed5
   1c2cc:	000200ed 	.word	0x000200ed

0001c2d0 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   1c2d0:	b580      	push	{r7, lr}
   1c2d2:	b088      	sub	sp, #32
   1c2d4:	af00      	add	r7, sp, #0
   1c2d6:	60f8      	str	r0, [r7, #12]
   1c2d8:	60b9      	str	r1, [r7, #8]
   1c2da:	0019      	movs	r1, r3
   1c2dc:	1dfb      	adds	r3, r7, #7
   1c2de:	701a      	strb	r2, [r3, #0]
   1c2e0:	1dbb      	adds	r3, r7, #6
   1c2e2:	1c0a      	adds	r2, r1, #0
   1c2e4:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1c2e6:	2300      	movs	r3, #0
   1c2e8:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   1c2ea:	2300      	movs	r3, #0
   1c2ec:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   1c2ee:	68fb      	ldr	r3, [r7, #12]
   1c2f0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   1c2f2:	68bb      	ldr	r3, [r7, #8]
   1c2f4:	2b03      	cmp	r3, #3
   1c2f6:	dc03      	bgt.n	1c300 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1c2f8:	2302      	movs	r3, #2
   1c2fa:	425b      	negs	r3, r3
   1c2fc:	61fb      	str	r3, [r7, #28]
		goto exit;
   1c2fe:	e055      	b.n	1c3ac <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   1c300:	1dfb      	adds	r3, r7, #7
   1c302:	781b      	ldrb	r3, [r3, #0]
   1c304:	220f      	movs	r2, #15
   1c306:	4013      	ands	r3, r2
   1c308:	b2da      	uxtb	r2, r3
   1c30a:	2318      	movs	r3, #24
   1c30c:	18fb      	adds	r3, r7, r3
   1c30e:	0110      	lsls	r0, r2, #4
   1c310:	781a      	ldrb	r2, [r3, #0]
   1c312:	210f      	movs	r1, #15
   1c314:	400a      	ands	r2, r1
   1c316:	1c11      	adds	r1, r2, #0
   1c318:	1c02      	adds	r2, r0, #0
   1c31a:	430a      	orrs	r2, r1
   1c31c:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1c31e:	1dbb      	adds	r3, r7, #6
   1c320:	781b      	ldrb	r3, [r3, #0]
   1c322:	2201      	movs	r2, #1
   1c324:	4013      	ands	r3, r2
   1c326:	b2da      	uxtb	r2, r3
   1c328:	2318      	movs	r3, #24
   1c32a:	18fb      	adds	r3, r7, r3
   1c32c:	2101      	movs	r1, #1
   1c32e:	400a      	ands	r2, r1
   1c330:	00d0      	lsls	r0, r2, #3
   1c332:	781a      	ldrb	r2, [r3, #0]
   1c334:	2108      	movs	r1, #8
   1c336:	438a      	bics	r2, r1
   1c338:	1c11      	adds	r1, r2, #0
   1c33a:	1c02      	adds	r2, r0, #0
   1c33c:	430a      	orrs	r2, r1
   1c33e:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   1c340:	1dfb      	adds	r3, r7, #7
   1c342:	781b      	ldrb	r3, [r3, #0]
   1c344:	3b06      	subs	r3, #6
   1c346:	425a      	negs	r2, r3
   1c348:	4153      	adcs	r3, r2
   1c34a:	b2db      	uxtb	r3, r3
   1c34c:	1c1a      	adds	r2, r3, #0
   1c34e:	2303      	movs	r3, #3
   1c350:	4013      	ands	r3, r2
   1c352:	b2da      	uxtb	r2, r3
   1c354:	2318      	movs	r3, #24
   1c356:	18fb      	adds	r3, r7, r3
   1c358:	2103      	movs	r1, #3
   1c35a:	400a      	ands	r2, r1
   1c35c:	1890      	adds	r0, r2, r2
   1c35e:	781a      	ldrb	r2, [r3, #0]
   1c360:	2106      	movs	r1, #6
   1c362:	438a      	bics	r2, r1
   1c364:	1c11      	adds	r1, r2, #0
   1c366:	1c02      	adds	r2, r0, #0
   1c368:	430a      	orrs	r2, r1
   1c36a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1c36c:	2318      	movs	r3, #24
   1c36e:	18fb      	adds	r3, r7, r3
   1c370:	781a      	ldrb	r2, [r3, #0]
   1c372:	2314      	movs	r3, #20
   1c374:	18fb      	adds	r3, r7, r3
   1c376:	0011      	movs	r1, r2
   1c378:	0018      	movs	r0, r3
   1c37a:	4b0f      	ldr	r3, [pc, #60]	; (1c3b8 <MQTTSerialize_ack+0xe8>)
   1c37c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   1c37e:	697b      	ldr	r3, [r7, #20]
   1c380:	2102      	movs	r1, #2
   1c382:	0018      	movs	r0, r3
   1c384:	4b0d      	ldr	r3, [pc, #52]	; (1c3bc <MQTTSerialize_ack+0xec>)
   1c386:	4798      	blx	r3
   1c388:	0002      	movs	r2, r0
   1c38a:	697b      	ldr	r3, [r7, #20]
   1c38c:	189b      	adds	r3, r3, r2
   1c38e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   1c390:	2328      	movs	r3, #40	; 0x28
   1c392:	18fb      	adds	r3, r7, r3
   1c394:	881a      	ldrh	r2, [r3, #0]
   1c396:	2314      	movs	r3, #20
   1c398:	18fb      	adds	r3, r7, r3
   1c39a:	0011      	movs	r1, r2
   1c39c:	0018      	movs	r0, r3
   1c39e:	4b08      	ldr	r3, [pc, #32]	; (1c3c0 <MQTTSerialize_ack+0xf0>)
   1c3a0:	4798      	blx	r3
	rc = ptr - buf;
   1c3a2:	697b      	ldr	r3, [r7, #20]
   1c3a4:	001a      	movs	r2, r3
   1c3a6:	68fb      	ldr	r3, [r7, #12]
   1c3a8:	1ad3      	subs	r3, r2, r3
   1c3aa:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c3ac:	69fb      	ldr	r3, [r7, #28]
}
   1c3ae:	0018      	movs	r0, r3
   1c3b0:	46bd      	mov	sp, r7
   1c3b2:	b008      	add	sp, #32
   1c3b4:	bd80      	pop	{r7, pc}
   1c3b6:	46c0      	nop			; (mov r8, r8)
   1c3b8:	0001beab 	.word	0x0001beab
   1c3bc:	0001bc91 	.word	0x0001bc91
   1c3c0:	0001bed5 	.word	0x0001bed5

0001c3c4 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   1c3c4:	b580      	push	{r7, lr}
   1c3c6:	b084      	sub	sp, #16
   1c3c8:	af00      	add	r7, sp, #0
   1c3ca:	6078      	str	r0, [r7, #4]
   1c3cc:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   1c3ce:	2302      	movs	r3, #2
   1c3d0:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   1c3d2:	2300      	movs	r3, #0
   1c3d4:	60fb      	str	r3, [r7, #12]
   1c3d6:	e014      	b.n	1c402 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   1c3d8:	68fa      	ldr	r2, [r7, #12]
   1c3da:	0013      	movs	r3, r2
   1c3dc:	005b      	lsls	r3, r3, #1
   1c3de:	189b      	adds	r3, r3, r2
   1c3e0:	009b      	lsls	r3, r3, #2
   1c3e2:	001a      	movs	r2, r3
   1c3e4:	683b      	ldr	r3, [r7, #0]
   1c3e6:	189b      	adds	r3, r3, r2
   1c3e8:	6818      	ldr	r0, [r3, #0]
   1c3ea:	6859      	ldr	r1, [r3, #4]
   1c3ec:	689a      	ldr	r2, [r3, #8]
   1c3ee:	4b09      	ldr	r3, [pc, #36]	; (1c414 <MQTTSerialize_subscribeLength+0x50>)
   1c3f0:	4798      	blx	r3
   1c3f2:	0003      	movs	r3, r0
   1c3f4:	3303      	adds	r3, #3
   1c3f6:	68ba      	ldr	r2, [r7, #8]
   1c3f8:	18d3      	adds	r3, r2, r3
   1c3fa:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   1c3fc:	68fb      	ldr	r3, [r7, #12]
   1c3fe:	3301      	adds	r3, #1
   1c400:	60fb      	str	r3, [r7, #12]
   1c402:	68fa      	ldr	r2, [r7, #12]
   1c404:	687b      	ldr	r3, [r7, #4]
   1c406:	429a      	cmp	r2, r3
   1c408:	dbe6      	blt.n	1c3d8 <MQTTSerialize_subscribeLength+0x14>
	return len;
   1c40a:	68bb      	ldr	r3, [r7, #8]
}
   1c40c:	0018      	movs	r0, r3
   1c40e:	46bd      	mov	sp, r7
   1c410:	b004      	add	sp, #16
   1c412:	bd80      	pop	{r7, pc}
   1c414:	0001c065 	.word	0x0001c065

0001c418 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   1c418:	b590      	push	{r4, r7, lr}
   1c41a:	b08b      	sub	sp, #44	; 0x2c
   1c41c:	af00      	add	r7, sp, #0
   1c41e:	60f8      	str	r0, [r7, #12]
   1c420:	60b9      	str	r1, [r7, #8]
   1c422:	0019      	movs	r1, r3
   1c424:	1dfb      	adds	r3, r7, #7
   1c426:	701a      	strb	r2, [r3, #0]
   1c428:	1d3b      	adds	r3, r7, #4
   1c42a:	1c0a      	adds	r2, r1, #0
   1c42c:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   1c42e:	68fb      	ldr	r3, [r7, #12]
   1c430:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   1c432:	2300      	movs	r3, #0
   1c434:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   1c436:	2300      	movs	r3, #0
   1c438:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   1c43a:	2300      	movs	r3, #0
   1c43c:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   1c43e:	2300      	movs	r3, #0
   1c440:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   1c442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c446:	0011      	movs	r1, r2
   1c448:	0018      	movs	r0, r3
   1c44a:	4b41      	ldr	r3, [pc, #260]	; (1c550 <MQTTSerialize_subscribe+0x138>)
   1c44c:	4798      	blx	r3
   1c44e:	0003      	movs	r3, r0
   1c450:	61fb      	str	r3, [r7, #28]
   1c452:	69fb      	ldr	r3, [r7, #28]
   1c454:	0018      	movs	r0, r3
   1c456:	4b3f      	ldr	r3, [pc, #252]	; (1c554 <MQTTSerialize_subscribe+0x13c>)
   1c458:	4798      	blx	r3
   1c45a:	0002      	movs	r2, r0
   1c45c:	68bb      	ldr	r3, [r7, #8]
   1c45e:	429a      	cmp	r2, r3
   1c460:	dd03      	ble.n	1c46a <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1c462:	2302      	movs	r3, #2
   1c464:	425b      	negs	r3, r3
   1c466:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1c468:	e06c      	b.n	1c544 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   1c46a:	2314      	movs	r3, #20
   1c46c:	18fb      	adds	r3, r7, r3
   1c46e:	2200      	movs	r2, #0
   1c470:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   1c472:	2314      	movs	r3, #20
   1c474:	18fb      	adds	r3, r7, r3
   1c476:	781a      	ldrb	r2, [r3, #0]
   1c478:	210f      	movs	r1, #15
   1c47a:	400a      	ands	r2, r1
   1c47c:	1c11      	adds	r1, r2, #0
   1c47e:	2280      	movs	r2, #128	; 0x80
   1c480:	4252      	negs	r2, r2
   1c482:	430a      	orrs	r2, r1
   1c484:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   1c486:	1dfb      	adds	r3, r7, #7
   1c488:	781b      	ldrb	r3, [r3, #0]
   1c48a:	2201      	movs	r2, #1
   1c48c:	4013      	ands	r3, r2
   1c48e:	b2da      	uxtb	r2, r3
   1c490:	2314      	movs	r3, #20
   1c492:	18fb      	adds	r3, r7, r3
   1c494:	2101      	movs	r1, #1
   1c496:	400a      	ands	r2, r1
   1c498:	00d0      	lsls	r0, r2, #3
   1c49a:	781a      	ldrb	r2, [r3, #0]
   1c49c:	2108      	movs	r1, #8
   1c49e:	438a      	bics	r2, r1
   1c4a0:	1c11      	adds	r1, r2, #0
   1c4a2:	1c02      	adds	r2, r0, #0
   1c4a4:	430a      	orrs	r2, r1
   1c4a6:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   1c4a8:	2314      	movs	r3, #20
   1c4aa:	18fb      	adds	r3, r7, r3
   1c4ac:	781a      	ldrb	r2, [r3, #0]
   1c4ae:	2106      	movs	r1, #6
   1c4b0:	438a      	bics	r2, r1
   1c4b2:	1c11      	adds	r1, r2, #0
   1c4b4:	2202      	movs	r2, #2
   1c4b6:	430a      	orrs	r2, r1
   1c4b8:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1c4ba:	2314      	movs	r3, #20
   1c4bc:	18fb      	adds	r3, r7, r3
   1c4be:	781a      	ldrb	r2, [r3, #0]
   1c4c0:	2318      	movs	r3, #24
   1c4c2:	18fb      	adds	r3, r7, r3
   1c4c4:	0011      	movs	r1, r2
   1c4c6:	0018      	movs	r0, r3
   1c4c8:	4b23      	ldr	r3, [pc, #140]	; (1c558 <MQTTSerialize_subscribe+0x140>)
   1c4ca:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   1c4cc:	69bb      	ldr	r3, [r7, #24]
   1c4ce:	69fa      	ldr	r2, [r7, #28]
   1c4d0:	0011      	movs	r1, r2
   1c4d2:	0018      	movs	r0, r3
   1c4d4:	4b21      	ldr	r3, [pc, #132]	; (1c55c <MQTTSerialize_subscribe+0x144>)
   1c4d6:	4798      	blx	r3
   1c4d8:	0002      	movs	r2, r0
   1c4da:	69bb      	ldr	r3, [r7, #24]
   1c4dc:	189b      	adds	r3, r3, r2
   1c4de:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   1c4e0:	1d3b      	adds	r3, r7, #4
   1c4e2:	881a      	ldrh	r2, [r3, #0]
   1c4e4:	2318      	movs	r3, #24
   1c4e6:	18fb      	adds	r3, r7, r3
   1c4e8:	0011      	movs	r1, r2
   1c4ea:	0018      	movs	r0, r3
   1c4ec:	4b1c      	ldr	r3, [pc, #112]	; (1c560 <MQTTSerialize_subscribe+0x148>)
   1c4ee:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   1c4f0:	2300      	movs	r3, #0
   1c4f2:	623b      	str	r3, [r7, #32]
   1c4f4:	e01d      	b.n	1c532 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   1c4f6:	6a3a      	ldr	r2, [r7, #32]
   1c4f8:	0013      	movs	r3, r2
   1c4fa:	005b      	lsls	r3, r3, #1
   1c4fc:	189b      	adds	r3, r3, r2
   1c4fe:	009b      	lsls	r3, r3, #2
   1c500:	001a      	movs	r2, r3
   1c502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c504:	189b      	adds	r3, r3, r2
   1c506:	2218      	movs	r2, #24
   1c508:	18b8      	adds	r0, r7, r2
   1c50a:	6819      	ldr	r1, [r3, #0]
   1c50c:	685a      	ldr	r2, [r3, #4]
   1c50e:	689b      	ldr	r3, [r3, #8]
   1c510:	4c14      	ldr	r4, [pc, #80]	; (1c564 <MQTTSerialize_subscribe+0x14c>)
   1c512:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   1c514:	6a3b      	ldr	r3, [r7, #32]
   1c516:	009b      	lsls	r3, r3, #2
   1c518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1c51a:	18d3      	adds	r3, r2, r3
   1c51c:	681b      	ldr	r3, [r3, #0]
   1c51e:	b2da      	uxtb	r2, r3
   1c520:	2318      	movs	r3, #24
   1c522:	18fb      	adds	r3, r7, r3
   1c524:	0011      	movs	r1, r2
   1c526:	0018      	movs	r0, r3
   1c528:	4b0b      	ldr	r3, [pc, #44]	; (1c558 <MQTTSerialize_subscribe+0x140>)
   1c52a:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   1c52c:	6a3b      	ldr	r3, [r7, #32]
   1c52e:	3301      	adds	r3, #1
   1c530:	623b      	str	r3, [r7, #32]
   1c532:	6a3a      	ldr	r2, [r7, #32]
   1c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c536:	429a      	cmp	r2, r3
   1c538:	dbdd      	blt.n	1c4f6 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   1c53a:	69bb      	ldr	r3, [r7, #24]
   1c53c:	001a      	movs	r2, r3
   1c53e:	68fb      	ldr	r3, [r7, #12]
   1c540:	1ad3      	subs	r3, r2, r3
   1c542:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c546:	0018      	movs	r0, r3
   1c548:	46bd      	mov	sp, r7
   1c54a:	b00b      	add	sp, #44	; 0x2c
   1c54c:	bd90      	pop	{r4, r7, pc}
   1c54e:	46c0      	nop			; (mov r8, r8)
   1c550:	0001c3c5 	.word	0x0001c3c5
   1c554:	0001bd89 	.word	0x0001bd89
   1c558:	0001beab 	.word	0x0001beab
   1c55c:	0001bc91 	.word	0x0001bc91
   1c560:	0001bed5 	.word	0x0001bed5
   1c564:	0001bf7d 	.word	0x0001bf7d

0001c568 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   1c568:	b590      	push	{r4, r7, lr}
   1c56a:	b08b      	sub	sp, #44	; 0x2c
   1c56c:	af00      	add	r7, sp, #0
   1c56e:	60f8      	str	r0, [r7, #12]
   1c570:	60b9      	str	r1, [r7, #8]
   1c572:	607a      	str	r2, [r7, #4]
   1c574:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   1c576:	2300      	movs	r3, #0
   1c578:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   1c57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c57c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   1c57e:	2300      	movs	r3, #0
   1c580:	623b      	str	r3, [r7, #32]
	int rc = 0;
   1c582:	2300      	movs	r3, #0
   1c584:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   1c586:	2318      	movs	r3, #24
   1c588:	18fb      	adds	r3, r7, r3
   1c58a:	0018      	movs	r0, r3
   1c58c:	4b2c      	ldr	r3, [pc, #176]	; (1c640 <MQTTDeserialize_suback+0xd8>)
   1c58e:	4798      	blx	r3
   1c590:	0003      	movs	r3, r0
   1c592:	001a      	movs	r2, r3
   1c594:	231c      	movs	r3, #28
   1c596:	18fb      	adds	r3, r7, r3
   1c598:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   1c59a:	231c      	movs	r3, #28
   1c59c:	18fb      	adds	r3, r7, r3
   1c59e:	781b      	ldrb	r3, [r3, #0]
   1c5a0:	220f      	movs	r2, #15
   1c5a2:	4393      	bics	r3, r2
   1c5a4:	b2db      	uxtb	r3, r3
   1c5a6:	2b90      	cmp	r3, #144	; 0x90
   1c5a8:	d142      	bne.n	1c630 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   1c5aa:	69bb      	ldr	r3, [r7, #24]
   1c5ac:	2214      	movs	r2, #20
   1c5ae:	18ba      	adds	r2, r7, r2
   1c5b0:	0011      	movs	r1, r2
   1c5b2:	0018      	movs	r0, r3
   1c5b4:	4b23      	ldr	r3, [pc, #140]	; (1c644 <MQTTDeserialize_suback+0xdc>)
   1c5b6:	4798      	blx	r3
   1c5b8:	0003      	movs	r3, r0
   1c5ba:	627b      	str	r3, [r7, #36]	; 0x24
   1c5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c5be:	69bb      	ldr	r3, [r7, #24]
   1c5c0:	189b      	adds	r3, r3, r2
   1c5c2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1c5c4:	69bb      	ldr	r3, [r7, #24]
   1c5c6:	697a      	ldr	r2, [r7, #20]
   1c5c8:	189b      	adds	r3, r3, r2
   1c5ca:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1c5cc:	6a3b      	ldr	r3, [r7, #32]
   1c5ce:	69ba      	ldr	r2, [r7, #24]
   1c5d0:	1a9b      	subs	r3, r3, r2
   1c5d2:	2b01      	cmp	r3, #1
   1c5d4:	dd2e      	ble.n	1c634 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   1c5d6:	2318      	movs	r3, #24
   1c5d8:	18fb      	adds	r3, r7, r3
   1c5da:	0018      	movs	r0, r3
   1c5dc:	4b1a      	ldr	r3, [pc, #104]	; (1c648 <MQTTDeserialize_suback+0xe0>)
   1c5de:	4798      	blx	r3
   1c5e0:	0003      	movs	r3, r0
   1c5e2:	b29a      	uxth	r2, r3
   1c5e4:	68fb      	ldr	r3, [r7, #12]
   1c5e6:	801a      	strh	r2, [r3, #0]

	*count = 0;
   1c5e8:	687b      	ldr	r3, [r7, #4]
   1c5ea:	2200      	movs	r2, #0
   1c5ec:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   1c5ee:	e018      	b.n	1c622 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   1c5f0:	687b      	ldr	r3, [r7, #4]
   1c5f2:	681a      	ldr	r2, [r3, #0]
   1c5f4:	68bb      	ldr	r3, [r7, #8]
   1c5f6:	429a      	cmp	r2, r3
   1c5f8:	dd03      	ble.n	1c602 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   1c5fa:	2301      	movs	r3, #1
   1c5fc:	425b      	negs	r3, r3
   1c5fe:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   1c600:	e019      	b.n	1c636 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   1c602:	687b      	ldr	r3, [r7, #4]
   1c604:	681a      	ldr	r2, [r3, #0]
   1c606:	1c51      	adds	r1, r2, #1
   1c608:	687b      	ldr	r3, [r7, #4]
   1c60a:	6019      	str	r1, [r3, #0]
   1c60c:	0013      	movs	r3, r2
   1c60e:	009b      	lsls	r3, r3, #2
   1c610:	683a      	ldr	r2, [r7, #0]
   1c612:	18d4      	adds	r4, r2, r3
   1c614:	2318      	movs	r3, #24
   1c616:	18fb      	adds	r3, r7, r3
   1c618:	0018      	movs	r0, r3
   1c61a:	4b09      	ldr	r3, [pc, #36]	; (1c640 <MQTTDeserialize_suback+0xd8>)
   1c61c:	4798      	blx	r3
   1c61e:	0003      	movs	r3, r0
   1c620:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   1c622:	69ba      	ldr	r2, [r7, #24]
   1c624:	6a3b      	ldr	r3, [r7, #32]
   1c626:	429a      	cmp	r2, r3
   1c628:	d3e2      	bcc.n	1c5f0 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   1c62a:	2301      	movs	r3, #1
   1c62c:	627b      	str	r3, [r7, #36]	; 0x24
   1c62e:	e002      	b.n	1c636 <MQTTDeserialize_suback+0xce>
		goto exit;
   1c630:	46c0      	nop			; (mov r8, r8)
   1c632:	e000      	b.n	1c636 <MQTTDeserialize_suback+0xce>
		goto exit;
   1c634:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c638:	0018      	movs	r0, r3
   1c63a:	46bd      	mov	sp, r7
   1c63c:	b00b      	add	sp, #44	; 0x2c
   1c63e:	bd90      	pop	{r4, r7, pc}
   1c640:	0001be7f 	.word	0x0001be7f
   1c644:	0001be19 	.word	0x0001be19
   1c648:	0001be4d 	.word	0x0001be4d

0001c64c <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   1c64c:	b580      	push	{r7, lr}
   1c64e:	b082      	sub	sp, #8
   1c650:	af00      	add	r7, sp, #0
   1c652:	6078      	str	r0, [r7, #4]
	config->port = 80;
   1c654:	687b      	ldr	r3, [r7, #4]
   1c656:	2250      	movs	r2, #80	; 0x50
   1c658:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   1c65a:	687b      	ldr	r3, [r7, #4]
   1c65c:	2200      	movs	r2, #0
   1c65e:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   1c660:	687b      	ldr	r3, [r7, #4]
   1c662:	4a0b      	ldr	r2, [pc, #44]	; (1c690 <http_client_get_config_defaults+0x44>)
   1c664:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   1c666:	687b      	ldr	r3, [r7, #4]
   1c668:	2200      	movs	r2, #0
   1c66a:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   1c66c:	687b      	ldr	r3, [r7, #4]
   1c66e:	2200      	movs	r2, #0
   1c670:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   1c672:	687b      	ldr	r3, [r7, #4]
   1c674:	2280      	movs	r2, #128	; 0x80
   1c676:	0052      	lsls	r2, r2, #1
   1c678:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   1c67a:	687b      	ldr	r3, [r7, #4]
   1c67c:	2252      	movs	r2, #82	; 0x52
   1c67e:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   1c680:	687b      	ldr	r3, [r7, #4]
   1c682:	4a04      	ldr	r2, [pc, #16]	; (1c694 <http_client_get_config_defaults+0x48>)
   1c684:	619a      	str	r2, [r3, #24]
}
   1c686:	46c0      	nop			; (mov r8, r8)
   1c688:	46bd      	mov	sp, r7
   1c68a:	b002      	add	sp, #8
   1c68c:	bd80      	pop	{r7, pc}
   1c68e:	46c0      	nop			; (mov r8, r8)
   1c690:	00004e20 	.word	0x00004e20
   1c694:	00025008 	.word	0x00025008

0001c698 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   1c698:	b590      	push	{r4, r7, lr}
   1c69a:	b083      	sub	sp, #12
   1c69c:	af00      	add	r7, sp, #0
   1c69e:	6078      	str	r0, [r7, #4]
   1c6a0:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   1c6a2:	687b      	ldr	r3, [r7, #4]
   1c6a4:	2b00      	cmp	r3, #0
   1c6a6:	d002      	beq.n	1c6ae <http_client_init+0x16>
   1c6a8:	683b      	ldr	r3, [r7, #0]
   1c6aa:	2b00      	cmp	r3, #0
   1c6ac:	d102      	bne.n	1c6b4 <http_client_init+0x1c>
		return -EINVAL;
   1c6ae:	2316      	movs	r3, #22
   1c6b0:	425b      	negs	r3, r3
   1c6b2:	e058      	b.n	1c766 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   1c6b4:	683b      	ldr	r3, [r7, #0]
   1c6b6:	691b      	ldr	r3, [r3, #16]
   1c6b8:	2b00      	cmp	r3, #0
   1c6ba:	d102      	bne.n	1c6c2 <http_client_init+0x2a>
		return -EINVAL;
   1c6bc:	2316      	movs	r3, #22
   1c6be:	425b      	negs	r3, r3
   1c6c0:	e051      	b.n	1c766 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   1c6c2:	683b      	ldr	r3, [r7, #0]
   1c6c4:	685b      	ldr	r3, [r3, #4]
   1c6c6:	2b00      	cmp	r3, #0
   1c6c8:	d102      	bne.n	1c6d0 <http_client_init+0x38>
		return -EINVAL;
   1c6ca:	2316      	movs	r3, #22
   1c6cc:	425b      	negs	r3, r3
   1c6ce:	e04a      	b.n	1c766 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   1c6d0:	683b      	ldr	r3, [r7, #0]
   1c6d2:	695b      	ldr	r3, [r3, #20]
   1c6d4:	2b51      	cmp	r3, #81	; 0x51
   1c6d6:	d802      	bhi.n	1c6de <http_client_init+0x46>
		return -EINVAL;
   1c6d8:	2316      	movs	r3, #22
   1c6da:	425b      	negs	r3, r3
   1c6dc:	e043      	b.n	1c766 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   1c6de:	687b      	ldr	r3, [r7, #4]
   1c6e0:	22e8      	movs	r2, #232	; 0xe8
   1c6e2:	2100      	movs	r1, #0
   1c6e4:	0018      	movs	r0, r3
   1c6e6:	4b22      	ldr	r3, [pc, #136]	; (1c770 <http_client_init+0xd8>)
   1c6e8:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   1c6ea:	687b      	ldr	r3, [r7, #4]
   1c6ec:	3350      	adds	r3, #80	; 0x50
   1c6ee:	6839      	ldr	r1, [r7, #0]
   1c6f0:	221c      	movs	r2, #28
   1c6f2:	0018      	movs	r0, r3
   1c6f4:	4b1f      	ldr	r3, [pc, #124]	; (1c774 <http_client_init+0xdc>)
   1c6f6:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   1c6f8:	687b      	ldr	r3, [r7, #4]
   1c6fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1c6fc:	2b00      	cmp	r3, #0
   1c6fe:	d115      	bne.n	1c72c <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   1c700:	683b      	ldr	r3, [r7, #0]
   1c702:	691b      	ldr	r3, [r3, #16]
   1c704:	0018      	movs	r0, r3
   1c706:	4b1c      	ldr	r3, [pc, #112]	; (1c778 <http_client_init+0xe0>)
   1c708:	4798      	blx	r3
   1c70a:	0003      	movs	r3, r0
   1c70c:	001a      	movs	r2, r3
   1c70e:	687b      	ldr	r3, [r7, #4]
   1c710:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1c712:	687b      	ldr	r3, [r7, #4]
   1c714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1c716:	2b00      	cmp	r3, #0
   1c718:	d102      	bne.n	1c720 <http_client_init+0x88>
			return -ENOMEM;
   1c71a:	230c      	movs	r3, #12
   1c71c:	425b      	negs	r3, r3
   1c71e:	e022      	b.n	1c766 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   1c720:	687b      	ldr	r3, [r7, #4]
   1c722:	2241      	movs	r2, #65	; 0x41
   1c724:	5c99      	ldrb	r1, [r3, r2]
   1c726:	2004      	movs	r0, #4
   1c728:	4301      	orrs	r1, r0
   1c72a:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   1c72c:	683b      	ldr	r3, [r7, #0]
   1c72e:	891b      	ldrh	r3, [r3, #8]
   1c730:	2b00      	cmp	r3, #0
   1c732:	d010      	beq.n	1c756 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1c734:	683b      	ldr	r3, [r7, #0]
   1c736:	6858      	ldr	r0, [r3, #4]
   1c738:	687a      	ldr	r2, [r7, #4]
   1c73a:	4910      	ldr	r1, [pc, #64]	; (1c77c <http_client_init+0xe4>)
   1c73c:	2300      	movs	r3, #0
   1c73e:	4c10      	ldr	r4, [pc, #64]	; (1c780 <http_client_init+0xe8>)
   1c740:	47a0      	blx	r4
   1c742:	0002      	movs	r2, r0
   1c744:	687b      	ldr	r3, [r7, #4]
   1c746:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   1c748:	687b      	ldr	r3, [r7, #4]
   1c74a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c74c:	2b00      	cmp	r3, #0
   1c74e:	da02      	bge.n	1c756 <http_client_init+0xbe>
			return -ENOSPC;
   1c750:	231c      	movs	r3, #28
   1c752:	425b      	negs	r3, r3
   1c754:	e007      	b.n	1c766 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   1c756:	687b      	ldr	r3, [r7, #4]
   1c758:	2200      	movs	r2, #0
   1c75a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1c75c:	687b      	ldr	r3, [r7, #4]
   1c75e:	22d8      	movs	r2, #216	; 0xd8
   1c760:	2100      	movs	r1, #0
   1c762:	5099      	str	r1, [r3, r2]

	return 0;
   1c764:	2300      	movs	r3, #0
}
   1c766:	0018      	movs	r0, r3
   1c768:	46bd      	mov	sp, r7
   1c76a:	b003      	add	sp, #12
   1c76c:	bd90      	pop	{r4, r7, pc}
   1c76e:	46c0      	nop			; (mov r8, r8)
   1c770:	00020123 	.word	0x00020123
   1c774:	000200ed 	.word	0x000200ed
   1c778:	000200c5 	.word	0x000200c5
   1c77c:	0001ca49 	.word	0x0001ca49
   1c780:	0001e0ed 	.word	0x0001e0ed

0001c784 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   1c784:	b580      	push	{r7, lr}
   1c786:	b082      	sub	sp, #8
   1c788:	af00      	add	r7, sp, #0
   1c78a:	6078      	str	r0, [r7, #4]
   1c78c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   1c78e:	687b      	ldr	r3, [r7, #4]
   1c790:	2b00      	cmp	r3, #0
   1c792:	d102      	bne.n	1c79a <http_client_register_callback+0x16>
		return -EINVAL;
   1c794:	2316      	movs	r3, #22
   1c796:	425b      	negs	r3, r3
   1c798:	e003      	b.n	1c7a2 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   1c79a:	687b      	ldr	r3, [r7, #4]
   1c79c:	683a      	ldr	r2, [r7, #0]
   1c79e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   1c7a0:	2300      	movs	r3, #0
}
   1c7a2:	0018      	movs	r0, r3
   1c7a4:	46bd      	mov	sp, r7
   1c7a6:	b002      	add	sp, #8
   1c7a8:	bd80      	pop	{r7, pc}
	...

0001c7ac <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   1c7ac:	b580      	push	{r7, lr}
   1c7ae:	b082      	sub	sp, #8
   1c7b0:	af00      	add	r7, sp, #0
   1c7b2:	6078      	str	r0, [r7, #4]
	switch (err) {
   1c7b4:	687b      	ldr	r3, [r7, #4]
   1c7b6:	330e      	adds	r3, #14
   1c7b8:	2b0e      	cmp	r3, #14
   1c7ba:	d825      	bhi.n	1c808 <_hwerr_to_stderr+0x5c>
   1c7bc:	009a      	lsls	r2, r3, #2
   1c7be:	4b18      	ldr	r3, [pc, #96]	; (1c820 <_hwerr_to_stderr+0x74>)
   1c7c0:	18d3      	adds	r3, r2, r3
   1c7c2:	681b      	ldr	r3, [r3, #0]
   1c7c4:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   1c7c6:	2305      	movs	r3, #5
   1c7c8:	425b      	negs	r3, r3
   1c7ca:	e024      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   1c7cc:	2302      	movs	r3, #2
   1c7ce:	425b      	negs	r3, r3
   1c7d0:	e021      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   1c7d2:	2370      	movs	r3, #112	; 0x70
   1c7d4:	425b      	negs	r3, r3
   1c7d6:	e01e      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   1c7d8:	230c      	movs	r3, #12
   1c7da:	425b      	negs	r3, r3
   1c7dc:	e01b      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   1c7de:	2316      	movs	r3, #22
   1c7e0:	425b      	negs	r3, r3
   1c7e2:	e018      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   1c7e4:	230c      	movs	r3, #12
   1c7e6:	425b      	negs	r3, r3
   1c7e8:	e015      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   1c7ea:	2305      	movs	r3, #5
   1c7ec:	425b      	negs	r3, r3
   1c7ee:	e012      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   1c7f0:	2379      	movs	r3, #121	; 0x79
   1c7f2:	425b      	negs	r3, r3
   1c7f4:	e00f      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   1c7f6:	2368      	movs	r3, #104	; 0x68
   1c7f8:	425b      	negs	r3, r3
   1c7fa:	e00c      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   1c7fc:	230b      	movs	r3, #11
   1c7fe:	425b      	negs	r3, r3
   1c800:	e009      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   1c802:	2310      	movs	r3, #16
   1c804:	425b      	negs	r3, r3
   1c806:	e006      	b.n	1c816 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   1c808:	687b      	ldr	r3, [r7, #4]
   1c80a:	2b00      	cmp	r3, #0
   1c80c:	da02      	bge.n	1c814 <_hwerr_to_stderr+0x68>
				return -EIO;
   1c80e:	2305      	movs	r3, #5
   1c810:	425b      	negs	r3, r3
   1c812:	e000      	b.n	1c816 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   1c814:	2300      	movs	r3, #0
	}
}
   1c816:	0018      	movs	r0, r3
   1c818:	46bd      	mov	sp, r7
   1c81a:	b002      	add	sp, #8
   1c81c:	bd80      	pop	{r7, pc}
   1c81e:	46c0      	nop			; (mov r8, r8)
   1c820:	00025144 	.word	0x00025144

0001c824 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   1c824:	b580      	push	{r7, lr}
   1c826:	b08a      	sub	sp, #40	; 0x28
   1c828:	af00      	add	r7, sp, #0
   1c82a:	603a      	str	r2, [r7, #0]
   1c82c:	1dfb      	adds	r3, r7, #7
   1c82e:	1c02      	adds	r2, r0, #0
   1c830:	701a      	strb	r2, [r3, #0]
   1c832:	1dbb      	adds	r3, r7, #6
   1c834:	1c0a      	adds	r2, r1, #0
   1c836:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   1c838:	1dfb      	adds	r3, r7, #7
   1c83a:	2200      	movs	r2, #0
   1c83c:	569a      	ldrsb	r2, [r3, r2]
   1c83e:	4b4b      	ldr	r3, [pc, #300]	; (1c96c <http_client_socket_event_handler+0x148>)
   1c840:	0092      	lsls	r2, r2, #2
   1c842:	58d3      	ldr	r3, [r2, r3]
   1c844:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   1c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c848:	2b00      	cmp	r3, #0
   1c84a:	d100      	bne.n	1c84e <http_client_socket_event_handler+0x2a>
   1c84c:	e08a      	b.n	1c964 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   1c84e:	1dbb      	adds	r3, r7, #6
   1c850:	781b      	ldrb	r3, [r3, #0]
   1c852:	2b06      	cmp	r3, #6
   1c854:	d040      	beq.n	1c8d8 <http_client_socket_event_handler+0xb4>
   1c856:	2b07      	cmp	r3, #7
   1c858:	d060      	beq.n	1c91c <http_client_socket_event_handler+0xf8>
   1c85a:	2b05      	cmp	r3, #5
   1c85c:	d000      	beq.n	1c860 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   1c85e:	e082      	b.n	1c966 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   1c860:	683b      	ldr	r3, [r7, #0]
   1c862:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   1c864:	6a3b      	ldr	r3, [r7, #32]
   1c866:	785b      	ldrb	r3, [r3, #1]
   1c868:	b25b      	sxtb	r3, r3
   1c86a:	001a      	movs	r2, r3
   1c86c:	230c      	movs	r3, #12
   1c86e:	18fb      	adds	r3, r7, r3
   1c870:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   1c872:	6a3b      	ldr	r3, [r7, #32]
   1c874:	785b      	ldrb	r3, [r3, #1]
   1c876:	b25b      	sxtb	r3, r3
   1c878:	2b00      	cmp	r3, #0
   1c87a:	da0c      	bge.n	1c896 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   1c87c:	6a3b      	ldr	r3, [r7, #32]
   1c87e:	785b      	ldrb	r3, [r3, #1]
   1c880:	b25b      	sxtb	r3, r3
   1c882:	0018      	movs	r0, r3
   1c884:	4b3a      	ldr	r3, [pc, #232]	; (1c970 <http_client_socket_event_handler+0x14c>)
   1c886:	4798      	blx	r3
   1c888:	0002      	movs	r2, r0
   1c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c88c:	0011      	movs	r1, r2
   1c88e:	0018      	movs	r0, r3
   1c890:	4b38      	ldr	r3, [pc, #224]	; (1c974 <http_client_socket_event_handler+0x150>)
   1c892:	4798      	blx	r3
    	break;
   1c894:	e067      	b.n	1c966 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   1c896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c89a:	2b00      	cmp	r3, #0
   1c89c:	d006      	beq.n	1c8ac <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   1c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c8a2:	220c      	movs	r2, #12
   1c8a4:	18ba      	adds	r2, r7, r2
   1c8a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c8a8:	2100      	movs	r1, #0
   1c8aa:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   1c8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8ae:	2203      	movs	r2, #3
   1c8b0:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   1c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8b4:	6d58      	ldr	r0, [r3, #84]	; 0x54
   1c8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8b8:	6c99      	ldr	r1, [r3, #72]	; 0x48
   1c8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8bc:	2258      	movs	r2, #88	; 0x58
   1c8be:	5a9b      	ldrh	r3, [r3, r2]
   1c8c0:	001a      	movs	r2, r3
   1c8c2:	4b2d      	ldr	r3, [pc, #180]	; (1c978 <http_client_socket_event_handler+0x154>)
   1c8c4:	4798      	blx	r3
    		_http_client_recv_packet(module);
   1c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8c8:	0018      	movs	r0, r3
   1c8ca:	4b2c      	ldr	r3, [pc, #176]	; (1c97c <http_client_socket_event_handler+0x158>)
   1c8cc:	4798      	blx	r3
			_http_client_request(module);
   1c8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8d0:	0018      	movs	r0, r3
   1c8d2:	4b2b      	ldr	r3, [pc, #172]	; (1c980 <http_client_socket_event_handler+0x15c>)
   1c8d4:	4798      	blx	r3
    	break;
   1c8d6:	e046      	b.n	1c966 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   1c8d8:	683b      	ldr	r3, [r7, #0]
   1c8da:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   1c8dc:	69fb      	ldr	r3, [r7, #28]
   1c8de:	2204      	movs	r2, #4
   1c8e0:	5e9b      	ldrsh	r3, [r3, r2]
   1c8e2:	2b00      	cmp	r3, #0
   1c8e4:	dd09      	ble.n	1c8fa <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   1c8e6:	69fb      	ldr	r3, [r7, #28]
   1c8e8:	2204      	movs	r2, #4
   1c8ea:	5e9b      	ldrsh	r3, [r3, r2]
   1c8ec:	001a      	movs	r2, r3
   1c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c8f0:	0011      	movs	r1, r2
   1c8f2:	0018      	movs	r0, r3
   1c8f4:	4b23      	ldr	r3, [pc, #140]	; (1c984 <http_client_socket_event_handler+0x160>)
   1c8f6:	4798      	blx	r3
   1c8f8:	e00b      	b.n	1c912 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   1c8fa:	69fb      	ldr	r3, [r7, #28]
   1c8fc:	2204      	movs	r2, #4
   1c8fe:	5e9b      	ldrsh	r3, [r3, r2]
   1c900:	0018      	movs	r0, r3
   1c902:	4b1b      	ldr	r3, [pc, #108]	; (1c970 <http_client_socket_event_handler+0x14c>)
   1c904:	4798      	blx	r3
   1c906:	0002      	movs	r2, r0
   1c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c90a:	0011      	movs	r1, r2
   1c90c:	0018      	movs	r0, r3
   1c90e:	4b19      	ldr	r3, [pc, #100]	; (1c974 <http_client_socket_event_handler+0x150>)
   1c910:	4798      	blx	r3
		_http_client_recv_packet(module);
   1c912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c914:	0018      	movs	r0, r3
   1c916:	4b19      	ldr	r3, [pc, #100]	; (1c97c <http_client_socket_event_handler+0x158>)
   1c918:	4798      	blx	r3
		break;
   1c91a:	e024      	b.n	1c966 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   1c91c:	231a      	movs	r3, #26
   1c91e:	18fb      	adds	r3, r7, r3
   1c920:	683a      	ldr	r2, [r7, #0]
   1c922:	8812      	ldrh	r2, [r2, #0]
   1c924:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   1c926:	231a      	movs	r3, #26
   1c928:	18fb      	adds	r3, r7, r3
   1c92a:	2200      	movs	r2, #0
   1c92c:	5e9b      	ldrsh	r3, [r3, r2]
   1c92e:	2b00      	cmp	r3, #0
   1c930:	da0d      	bge.n	1c94e <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   1c932:	231a      	movs	r3, #26
   1c934:	18fb      	adds	r3, r7, r3
   1c936:	2200      	movs	r2, #0
   1c938:	5e9b      	ldrsh	r3, [r3, r2]
   1c93a:	0018      	movs	r0, r3
   1c93c:	4b0c      	ldr	r3, [pc, #48]	; (1c970 <http_client_socket_event_handler+0x14c>)
   1c93e:	4798      	blx	r3
   1c940:	0002      	movs	r2, r0
   1c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c944:	0011      	movs	r1, r2
   1c946:	0018      	movs	r0, r3
   1c948:	4b0a      	ldr	r3, [pc, #40]	; (1c974 <http_client_socket_event_handler+0x150>)
   1c94a:	4798      	blx	r3
   1c94c:	e003      	b.n	1c956 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   1c94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c950:	0018      	movs	r0, r3
   1c952:	4b0b      	ldr	r3, [pc, #44]	; (1c980 <http_client_socket_event_handler+0x15c>)
   1c954:	4798      	blx	r3
		module->sending = 0;
   1c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c958:	2241      	movs	r2, #65	; 0x41
   1c95a:	5c99      	ldrb	r1, [r3, r2]
   1c95c:	2001      	movs	r0, #1
   1c95e:	4381      	bics	r1, r0
   1c960:	5499      	strb	r1, [r3, r2]
    	break;
   1c962:	e000      	b.n	1c966 <http_client_socket_event_handler+0x142>
		return;
   1c964:	46c0      	nop			; (mov r8, r8)
	}

}
   1c966:	46bd      	mov	sp, r7
   1c968:	b00a      	add	sp, #40	; 0x28
   1c96a:	bd80      	pop	{r7, pc}
   1c96c:	2000415c 	.word	0x2000415c
   1c970:	0001c7ad 	.word	0x0001c7ad
   1c974:	0001ce21 	.word	0x0001ce21
   1c978:	0001e17d 	.word	0x0001e17d
   1c97c:	0001d6ad 	.word	0x0001d6ad
   1c980:	0001cf75 	.word	0x0001cf75
   1c984:	0001d711 	.word	0x0001d711

0001c988 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   1c988:	b580      	push	{r7, lr}
   1c98a:	b088      	sub	sp, #32
   1c98c:	af00      	add	r7, sp, #0
   1c98e:	6078      	str	r0, [r7, #4]
   1c990:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1c992:	2300      	movs	r3, #0
   1c994:	61fb      	str	r3, [r7, #28]
   1c996:	e048      	b.n	1ca2a <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   1c998:	4b27      	ldr	r3, [pc, #156]	; (1ca38 <http_client_socket_resolve_handler+0xb0>)
   1c99a:	69fa      	ldr	r2, [r7, #28]
   1c99c:	0092      	lsls	r2, r2, #2
   1c99e:	58d3      	ldr	r3, [r2, r3]
   1c9a0:	2b00      	cmp	r3, #0
   1c9a2:	d03f      	beq.n	1ca24 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   1c9a4:	4b24      	ldr	r3, [pc, #144]	; (1ca38 <http_client_socket_resolve_handler+0xb0>)
   1c9a6:	69fa      	ldr	r2, [r7, #28]
   1c9a8:	0092      	lsls	r2, r2, #2
   1c9aa:	58d3      	ldr	r3, [r2, r3]
   1c9ac:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   1c9ae:	69bb      	ldr	r3, [r7, #24]
   1c9b0:	1c5a      	adds	r2, r3, #1
   1c9b2:	687b      	ldr	r3, [r7, #4]
   1c9b4:	0011      	movs	r1, r2
   1c9b6:	0018      	movs	r0, r3
   1c9b8:	4b20      	ldr	r3, [pc, #128]	; (1ca3c <http_client_socket_resolve_handler+0xb4>)
   1c9ba:	4798      	blx	r3
   1c9bc:	1e03      	subs	r3, r0, #0
   1c9be:	d131      	bne.n	1ca24 <http_client_socket_resolve_handler+0x9c>
   1c9c0:	69bb      	ldr	r3, [r7, #24]
   1c9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1c9c4:	2b01      	cmp	r3, #1
   1c9c6:	d12d      	bne.n	1ca24 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   1c9c8:	683b      	ldr	r3, [r7, #0]
   1c9ca:	2b00      	cmp	r3, #0
   1c9cc:	d107      	bne.n	1c9de <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   1c9ce:	2376      	movs	r3, #118	; 0x76
   1c9d0:	425a      	negs	r2, r3
   1c9d2:	69bb      	ldr	r3, [r7, #24]
   1c9d4:	0011      	movs	r1, r2
   1c9d6:	0018      	movs	r0, r3
   1c9d8:	4b19      	ldr	r3, [pc, #100]	; (1ca40 <http_client_socket_resolve_handler+0xb8>)
   1c9da:	4798      	blx	r3
					return;
   1c9dc:	e028      	b.n	1ca30 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   1c9de:	2308      	movs	r3, #8
   1c9e0:	18fb      	adds	r3, r7, r3
   1c9e2:	2202      	movs	r2, #2
   1c9e4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   1c9e6:	69bb      	ldr	r3, [r7, #24]
   1c9e8:	2250      	movs	r2, #80	; 0x50
   1c9ea:	5a9b      	ldrh	r3, [r3, r2]
   1c9ec:	021b      	lsls	r3, r3, #8
   1c9ee:	b21a      	sxth	r2, r3
   1c9f0:	69bb      	ldr	r3, [r7, #24]
   1c9f2:	2150      	movs	r1, #80	; 0x50
   1c9f4:	5a5b      	ldrh	r3, [r3, r1]
   1c9f6:	0a1b      	lsrs	r3, r3, #8
   1c9f8:	b29b      	uxth	r3, r3
   1c9fa:	b21b      	sxth	r3, r3
   1c9fc:	4313      	orrs	r3, r2
   1c9fe:	b21b      	sxth	r3, r3
   1ca00:	b29a      	uxth	r2, r3
   1ca02:	2308      	movs	r3, #8
   1ca04:	18fb      	adds	r3, r7, r3
   1ca06:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   1ca08:	2308      	movs	r3, #8
   1ca0a:	18fb      	adds	r3, r7, r3
   1ca0c:	683a      	ldr	r2, [r7, #0]
   1ca0e:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1ca10:	69bb      	ldr	r3, [r7, #24]
   1ca12:	781b      	ldrb	r3, [r3, #0]
   1ca14:	b25b      	sxtb	r3, r3
   1ca16:	2208      	movs	r2, #8
   1ca18:	18b9      	adds	r1, r7, r2
   1ca1a:	2210      	movs	r2, #16
   1ca1c:	0018      	movs	r0, r3
   1ca1e:	4b09      	ldr	r3, [pc, #36]	; (1ca44 <http_client_socket_resolve_handler+0xbc>)
   1ca20:	4798      	blx	r3
				return;
   1ca22:	e005      	b.n	1ca30 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1ca24:	69fb      	ldr	r3, [r7, #28]
   1ca26:	3301      	adds	r3, #1
   1ca28:	61fb      	str	r3, [r7, #28]
   1ca2a:	69fb      	ldr	r3, [r7, #28]
   1ca2c:	2b06      	cmp	r3, #6
   1ca2e:	ddb3      	ble.n	1c998 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   1ca30:	46bd      	mov	sp, r7
   1ca32:	b008      	add	sp, #32
   1ca34:	bd80      	pop	{r7, pc}
   1ca36:	46c0      	nop			; (mov r8, r8)
   1ca38:	2000415c 	.word	0x2000415c
   1ca3c:	0002047b 	.word	0x0002047b
   1ca40:	0001ce21 	.word	0x0001ce21
   1ca44:	00011345 	.word	0x00011345

0001ca48 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   1ca48:	b580      	push	{r7, lr}
   1ca4a:	b086      	sub	sp, #24
   1ca4c:	af00      	add	r7, sp, #0
   1ca4e:	60f8      	str	r0, [r7, #12]
   1ca50:	60b9      	str	r1, [r7, #8]
   1ca52:	607a      	str	r2, [r7, #4]
   1ca54:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   1ca56:	687b      	ldr	r3, [r7, #4]
   1ca58:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   1ca5a:	697b      	ldr	r3, [r7, #20]
   1ca5c:	2b00      	cmp	r3, #0
   1ca5e:	d007      	beq.n	1ca70 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   1ca60:	233e      	movs	r3, #62	; 0x3e
   1ca62:	425a      	negs	r2, r3
   1ca64:	697b      	ldr	r3, [r7, #20]
   1ca66:	0011      	movs	r1, r2
   1ca68:	0018      	movs	r0, r3
   1ca6a:	4b03      	ldr	r3, [pc, #12]	; (1ca78 <http_client_timer_callback+0x30>)
   1ca6c:	4798      	blx	r3
   1ca6e:	e000      	b.n	1ca72 <http_client_timer_callback+0x2a>
		return;
   1ca70:	46c0      	nop			; (mov r8, r8)
}
   1ca72:	46bd      	mov	sp, r7
   1ca74:	b006      	add	sp, #24
   1ca76:	bd80      	pop	{r7, pc}
   1ca78:	0001ce21 	.word	0x0001ce21

0001ca7c <_is_ip>:

static int _is_ip(const char *host)
{
   1ca7c:	b580      	push	{r7, lr}
   1ca7e:	b084      	sub	sp, #16
   1ca80:	af00      	add	r7, sp, #0
   1ca82:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   1ca84:	2300      	movs	r3, #0
   1ca86:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   1ca88:	e03a      	b.n	1cb00 <_is_ip+0x84>
		ch = *host++;
   1ca8a:	687b      	ldr	r3, [r7, #4]
   1ca8c:	1c5a      	adds	r2, r3, #1
   1ca8e:	607a      	str	r2, [r7, #4]
   1ca90:	220b      	movs	r2, #11
   1ca92:	18ba      	adds	r2, r7, r2
   1ca94:	781b      	ldrb	r3, [r3, #0]
   1ca96:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   1ca98:	230b      	movs	r3, #11
   1ca9a:	18fb      	adds	r3, r7, r3
   1ca9c:	781b      	ldrb	r3, [r3, #0]
   1ca9e:	2b60      	cmp	r3, #96	; 0x60
   1caa0:	d904      	bls.n	1caac <_is_ip+0x30>
   1caa2:	230b      	movs	r3, #11
   1caa4:	18fb      	adds	r3, r7, r3
   1caa6:	781b      	ldrb	r3, [r3, #0]
   1caa8:	2b66      	cmp	r3, #102	; 0x66
   1caaa:	d913      	bls.n	1cad4 <_is_ip+0x58>
   1caac:	230b      	movs	r3, #11
   1caae:	18fb      	adds	r3, r7, r3
   1cab0:	781b      	ldrb	r3, [r3, #0]
   1cab2:	2b40      	cmp	r3, #64	; 0x40
   1cab4:	d904      	bls.n	1cac0 <_is_ip+0x44>
   1cab6:	230b      	movs	r3, #11
   1cab8:	18fb      	adds	r3, r7, r3
   1caba:	781b      	ldrb	r3, [r3, #0]
   1cabc:	2b46      	cmp	r3, #70	; 0x46
   1cabe:	d909      	bls.n	1cad4 <_is_ip+0x58>
   1cac0:	230b      	movs	r3, #11
   1cac2:	18fb      	adds	r3, r7, r3
   1cac4:	781b      	ldrb	r3, [r3, #0]
   1cac6:	2b3a      	cmp	r3, #58	; 0x3a
   1cac8:	d004      	beq.n	1cad4 <_is_ip+0x58>
   1caca:	230b      	movs	r3, #11
   1cacc:	18fb      	adds	r3, r7, r3
   1cace:	781b      	ldrb	r3, [r3, #0]
   1cad0:	2b2f      	cmp	r3, #47	; 0x2f
   1cad2:	d102      	bne.n	1cada <_is_ip+0x5e>
			isv6 = 1;
   1cad4:	2301      	movs	r3, #1
   1cad6:	60fb      	str	r3, [r7, #12]
   1cad8:	e012      	b.n	1cb00 <_is_ip+0x84>
		} else if (ch == '.') {
   1cada:	230b      	movs	r3, #11
   1cadc:	18fb      	adds	r3, r7, r3
   1cade:	781b      	ldrb	r3, [r3, #0]
   1cae0:	2b2e      	cmp	r3, #46	; 0x2e
   1cae2:	d104      	bne.n	1caee <_is_ip+0x72>
			if (isv6) {
   1cae4:	68fb      	ldr	r3, [r7, #12]
   1cae6:	2b00      	cmp	r3, #0
   1cae8:	d00a      	beq.n	1cb00 <_is_ip+0x84>
				return 0;
   1caea:	2300      	movs	r3, #0
   1caec:	e00d      	b.n	1cb0a <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   1caee:	230b      	movs	r3, #11
   1caf0:	18fb      	adds	r3, r7, r3
   1caf2:	781b      	ldrb	r3, [r3, #0]
   1caf4:	2230      	movs	r2, #48	; 0x30
   1caf6:	4013      	ands	r3, r2
   1caf8:	2b30      	cmp	r3, #48	; 0x30
   1cafa:	d001      	beq.n	1cb00 <_is_ip+0x84>
			return 0;
   1cafc:	2300      	movs	r3, #0
   1cafe:	e004      	b.n	1cb0a <_is_ip+0x8e>
	while (*host != '\0') {
   1cb00:	687b      	ldr	r3, [r7, #4]
   1cb02:	781b      	ldrb	r3, [r3, #0]
   1cb04:	2b00      	cmp	r3, #0
   1cb06:	d1c0      	bne.n	1ca8a <_is_ip+0xe>
		}
	}
	return 1;
   1cb08:	2301      	movs	r3, #1
}
   1cb0a:	0018      	movs	r0, r3
   1cb0c:	46bd      	mov	sp, r7
   1cb0e:	b004      	add	sp, #16
   1cb10:	bd80      	pop	{r7, pc}
	...

0001cb14 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   1cb14:	b5b0      	push	{r4, r5, r7, lr}
   1cb16:	b08e      	sub	sp, #56	; 0x38
   1cb18:	af00      	add	r7, sp, #0
   1cb1a:	60f8      	str	r0, [r7, #12]
   1cb1c:	60b9      	str	r1, [r7, #8]
   1cb1e:	603b      	str	r3, [r7, #0]
   1cb20:	1dfb      	adds	r3, r7, #7
   1cb22:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   1cb24:	2337      	movs	r3, #55	; 0x37
   1cb26:	18fb      	adds	r3, r7, r3
   1cb28:	2200      	movs	r2, #0
   1cb2a:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   1cb2c:	2300      	movs	r3, #0
   1cb2e:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   1cb30:	2300      	movs	r3, #0
   1cb32:	633b      	str	r3, [r7, #48]	; 0x30
   1cb34:	2300      	movs	r3, #0
   1cb36:	62fb      	str	r3, [r7, #44]	; 0x2c
   1cb38:	2300      	movs	r3, #0
   1cb3a:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   1cb3c:	68fb      	ldr	r3, [r7, #12]
   1cb3e:	2b00      	cmp	r3, #0
   1cb40:	d102      	bne.n	1cb48 <http_client_send_request+0x34>
		return -EINVAL;
   1cb42:	2316      	movs	r3, #22
   1cb44:	425b      	negs	r3, r3
   1cb46:	e145      	b.n	1cdd4 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   1cb48:	68fb      	ldr	r3, [r7, #12]
   1cb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1cb4c:	2b02      	cmp	r3, #2
   1cb4e:	d902      	bls.n	1cb56 <http_client_send_request+0x42>
		return -EBUSY;
   1cb50:	2310      	movs	r3, #16
   1cb52:	425b      	negs	r3, r3
   1cb54:	e13e      	b.n	1cdd4 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   1cb56:	49a1      	ldr	r1, [pc, #644]	; (1cddc <http_client_send_request+0x2c8>)
   1cb58:	68bb      	ldr	r3, [r7, #8]
   1cb5a:	2207      	movs	r2, #7
   1cb5c:	0018      	movs	r0, r3
   1cb5e:	4ba0      	ldr	r3, [pc, #640]	; (1cde0 <http_client_send_request+0x2cc>)
   1cb60:	4798      	blx	r3
   1cb62:	1e03      	subs	r3, r0, #0
   1cb64:	d102      	bne.n	1cb6c <http_client_send_request+0x58>
		i = 7;
   1cb66:	2307      	movs	r3, #7
   1cb68:	633b      	str	r3, [r7, #48]	; 0x30
   1cb6a:	e009      	b.n	1cb80 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   1cb6c:	499d      	ldr	r1, [pc, #628]	; (1cde4 <http_client_send_request+0x2d0>)
   1cb6e:	68bb      	ldr	r3, [r7, #8]
   1cb70:	2208      	movs	r2, #8
   1cb72:	0018      	movs	r0, r3
   1cb74:	4b9a      	ldr	r3, [pc, #616]	; (1cde0 <http_client_send_request+0x2cc>)
   1cb76:	4798      	blx	r3
   1cb78:	1e03      	subs	r3, r0, #0
   1cb7a:	d101      	bne.n	1cb80 <http_client_send_request+0x6c>
		i = 8;
   1cb7c:	2308      	movs	r3, #8
   1cb7e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   1cb80:	68fb      	ldr	r3, [r7, #12]
   1cb82:	1c5c      	adds	r4, r3, #1
   1cb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cb86:	68ba      	ldr	r2, [r7, #8]
   1cb88:	18d5      	adds	r5, r2, r3
   1cb8a:	68fb      	ldr	r3, [r7, #12]
   1cb8c:	3301      	adds	r3, #1
   1cb8e:	0018      	movs	r0, r3
   1cb90:	4b95      	ldr	r3, [pc, #596]	; (1cde8 <http_client_send_request+0x2d4>)
   1cb92:	4798      	blx	r3
   1cb94:	0003      	movs	r3, r0
   1cb96:	001a      	movs	r2, r3
   1cb98:	0029      	movs	r1, r5
   1cb9a:	0020      	movs	r0, r4
   1cb9c:	4b90      	ldr	r3, [pc, #576]	; (1cde0 <http_client_send_request+0x2cc>)
   1cb9e:	4798      	blx	r3
   1cba0:	0003      	movs	r3, r0
   1cba2:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1cba4:	e00d      	b.n	1cbc2 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   1cba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cba8:	1c5a      	adds	r2, r3, #1
   1cbaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   1cbac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1cbae:	68b9      	ldr	r1, [r7, #8]
   1cbb0:	188a      	adds	r2, r1, r2
   1cbb2:	7811      	ldrb	r1, [r2, #0]
   1cbb4:	68fa      	ldr	r2, [r7, #12]
   1cbb6:	18d3      	adds	r3, r2, r3
   1cbb8:	1c0a      	adds	r2, r1, #0
   1cbba:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   1cbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cbbe:	3301      	adds	r3, #1
   1cbc0:	633b      	str	r3, [r7, #48]	; 0x30
   1cbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cbc4:	68ba      	ldr	r2, [r7, #8]
   1cbc6:	18d3      	adds	r3, r2, r3
   1cbc8:	781b      	ldrb	r3, [r3, #0]
   1cbca:	2b00      	cmp	r3, #0
   1cbcc:	d005      	beq.n	1cbda <http_client_send_request+0xc6>
   1cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cbd0:	68ba      	ldr	r2, [r7, #8]
   1cbd2:	18d3      	adds	r3, r2, r3
   1cbd4:	781b      	ldrb	r3, [r3, #0]
   1cbd6:	2b2f      	cmp	r3, #47	; 0x2f
   1cbd8:	d1e5      	bne.n	1cba6 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   1cbda:	68fa      	ldr	r2, [r7, #12]
   1cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cbde:	18d3      	adds	r3, r2, r3
   1cbe0:	3301      	adds	r3, #1
   1cbe2:	2200      	movs	r2, #0
   1cbe4:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   1cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cbe8:	68ba      	ldr	r2, [r7, #8]
   1cbea:	18d3      	adds	r3, r2, r3
   1cbec:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   1cbee:	68fb      	ldr	r3, [r7, #12]
   1cbf0:	3301      	adds	r3, #1
   1cbf2:	781b      	ldrb	r3, [r3, #0]
   1cbf4:	2b00      	cmp	r3, #0
   1cbf6:	d102      	bne.n	1cbfe <http_client_send_request+0xea>
		return -EINVAL;
   1cbf8:	2316      	movs	r3, #22
   1cbfa:	425b      	negs	r3, r3
   1cbfc:	e0ea      	b.n	1cdd4 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   1cbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cc00:	0018      	movs	r0, r3
   1cc02:	4b79      	ldr	r3, [pc, #484]	; (1cde8 <http_client_send_request+0x2d4>)
   1cc04:	4798      	blx	r3
   1cc06:	0003      	movs	r3, r0
   1cc08:	2b3f      	cmp	r3, #63	; 0x3f
   1cc0a:	d902      	bls.n	1cc12 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   1cc0c:	235b      	movs	r3, #91	; 0x5b
   1cc0e:	425b      	negs	r3, r3
   1cc10:	e0e0      	b.n	1cdd4 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   1cc12:	68fb      	ldr	r3, [r7, #12]
   1cc14:	22d4      	movs	r2, #212	; 0xd4
   1cc16:	589b      	ldr	r3, [r3, r2]
   1cc18:	2b00      	cmp	r3, #0
   1cc1a:	d005      	beq.n	1cc28 <http_client_send_request+0x114>
		free(module->req.ext_header);
   1cc1c:	68fb      	ldr	r3, [r7, #12]
   1cc1e:	22d4      	movs	r2, #212	; 0xd4
   1cc20:	589b      	ldr	r3, [r3, r2]
   1cc22:	0018      	movs	r0, r3
   1cc24:	4b71      	ldr	r3, [pc, #452]	; (1cdec <http_client_send_request+0x2d8>)
   1cc26:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   1cc28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1cc2a:	2b00      	cmp	r3, #0
   1cc2c:	d010      	beq.n	1cc50 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   1cc2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1cc30:	0018      	movs	r0, r3
   1cc32:	4b6f      	ldr	r3, [pc, #444]	; (1cdf0 <http_client_send_request+0x2dc>)
   1cc34:	4798      	blx	r3
   1cc36:	0003      	movs	r3, r0
   1cc38:	0019      	movs	r1, r3
   1cc3a:	68fb      	ldr	r3, [r7, #12]
   1cc3c:	22d4      	movs	r2, #212	; 0xd4
   1cc3e:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   1cc40:	68fb      	ldr	r3, [r7, #12]
   1cc42:	22d4      	movs	r2, #212	; 0xd4
   1cc44:	589b      	ldr	r3, [r3, r2]
   1cc46:	2b00      	cmp	r3, #0
   1cc48:	d106      	bne.n	1cc58 <http_client_send_request+0x144>
			return -ENOMEM;
   1cc4a:	230c      	movs	r3, #12
   1cc4c:	425b      	negs	r3, r3
   1cc4e:	e0c1      	b.n	1cdd4 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   1cc50:	68fb      	ldr	r3, [r7, #12]
   1cc52:	22d4      	movs	r2, #212	; 0xd4
   1cc54:	2100      	movs	r1, #0
   1cc56:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   1cc58:	68fb      	ldr	r3, [r7, #12]
   1cc5a:	2241      	movs	r2, #65	; 0x41
   1cc5c:	5c99      	ldrb	r1, [r3, r2]
   1cc5e:	2001      	movs	r0, #1
   1cc60:	4381      	bics	r1, r0
   1cc62:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   1cc64:	68fb      	ldr	r3, [r7, #12]
   1cc66:	2200      	movs	r2, #0
   1cc68:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   1cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cc6c:	781b      	ldrb	r3, [r3, #0]
   1cc6e:	2b2f      	cmp	r3, #47	; 0x2f
   1cc70:	d107      	bne.n	1cc82 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   1cc72:	68fb      	ldr	r3, [r7, #12]
   1cc74:	3370      	adds	r3, #112	; 0x70
   1cc76:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cc78:	0011      	movs	r1, r2
   1cc7a:	0018      	movs	r0, r3
   1cc7c:	4b5d      	ldr	r3, [pc, #372]	; (1cdf4 <http_client_send_request+0x2e0>)
   1cc7e:	4798      	blx	r3
   1cc80:	e00f      	b.n	1cca2 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   1cc82:	68fb      	ldr	r3, [r7, #12]
   1cc84:	2270      	movs	r2, #112	; 0x70
   1cc86:	212f      	movs	r1, #47	; 0x2f
   1cc88:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   1cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cc8c:	781b      	ldrb	r3, [r3, #0]
   1cc8e:	2b00      	cmp	r3, #0
   1cc90:	d007      	beq.n	1cca2 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   1cc92:	68fb      	ldr	r3, [r7, #12]
   1cc94:	3370      	adds	r3, #112	; 0x70
   1cc96:	3301      	adds	r3, #1
   1cc98:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cc9a:	0011      	movs	r1, r2
   1cc9c:	0018      	movs	r0, r3
   1cc9e:	4b55      	ldr	r3, [pc, #340]	; (1cdf4 <http_client_send_request+0x2e0>)
   1cca0:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   1cca2:	683b      	ldr	r3, [r7, #0]
   1cca4:	2b00      	cmp	r3, #0
   1cca6:	d007      	beq.n	1ccb8 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   1cca8:	68fb      	ldr	r3, [r7, #12]
   1ccaa:	33b0      	adds	r3, #176	; 0xb0
   1ccac:	6839      	ldr	r1, [r7, #0]
   1ccae:	2218      	movs	r2, #24
   1ccb0:	0018      	movs	r0, r3
   1ccb2:	4b51      	ldr	r3, [pc, #324]	; (1cdf8 <http_client_send_request+0x2e4>)
   1ccb4:	4798      	blx	r3
   1ccb6:	e006      	b.n	1ccc6 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   1ccb8:	68fb      	ldr	r3, [r7, #12]
   1ccba:	33b0      	adds	r3, #176	; 0xb0
   1ccbc:	2218      	movs	r2, #24
   1ccbe:	2100      	movs	r1, #0
   1ccc0:	0018      	movs	r0, r3
   1ccc2:	4b4e      	ldr	r3, [pc, #312]	; (1cdfc <http_client_send_request+0x2e8>)
   1ccc4:	4798      	blx	r3
	}

	module->req.method = method;
   1ccc6:	68fb      	ldr	r3, [r7, #12]
   1ccc8:	1dfa      	adds	r2, r7, #7
   1ccca:	21c8      	movs	r1, #200	; 0xc8
   1cccc:	7812      	ldrb	r2, [r2, #0]
   1ccce:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   1ccd0:	68fb      	ldr	r3, [r7, #12]
   1ccd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1ccd4:	2b01      	cmp	r3, #1
   1ccd6:	d003      	beq.n	1cce0 <http_client_send_request+0x1cc>
   1ccd8:	d316      	bcc.n	1cd08 <http_client_send_request+0x1f4>
   1ccda:	2b02      	cmp	r3, #2
   1ccdc:	d004      	beq.n	1cce8 <http_client_send_request+0x1d4>
   1ccde:	e074      	b.n	1cdca <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   1cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cce2:	2b00      	cmp	r3, #0
   1cce4:	d100      	bne.n	1cce8 <http_client_send_request+0x1d4>
   1cce6:	e073      	b.n	1cdd0 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   1cce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ccea:	2b00      	cmp	r3, #0
   1ccec:	d107      	bne.n	1ccfe <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   1ccee:	68fb      	ldr	r3, [r7, #12]
   1ccf0:	2203      	movs	r2, #3
   1ccf2:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   1ccf4:	68fb      	ldr	r3, [r7, #12]
   1ccf6:	0018      	movs	r0, r3
   1ccf8:	4b41      	ldr	r3, [pc, #260]	; (1ce00 <http_client_send_request+0x2ec>)
   1ccfa:	4798      	blx	r3
			break;
   1ccfc:	e069      	b.n	1cdd2 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   1ccfe:	68fb      	ldr	r3, [r7, #12]
   1cd00:	2100      	movs	r1, #0
   1cd02:	0018      	movs	r0, r3
   1cd04:	4b3f      	ldr	r3, [pc, #252]	; (1ce04 <http_client_send_request+0x2f0>)
   1cd06:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   1cd08:	68fb      	ldr	r3, [r7, #12]
   1cd0a:	2252      	movs	r2, #82	; 0x52
   1cd0c:	5c9b      	ldrb	r3, [r3, r2]
   1cd0e:	2b00      	cmp	r3, #0
   1cd10:	d007      	beq.n	1cd22 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   1cd12:	2337      	movs	r3, #55	; 0x37
   1cd14:	18fb      	adds	r3, r7, r3
   1cd16:	2237      	movs	r2, #55	; 0x37
   1cd18:	18ba      	adds	r2, r7, r2
   1cd1a:	7812      	ldrb	r2, [r2, #0]
   1cd1c:	2101      	movs	r1, #1
   1cd1e:	430a      	orrs	r2, r1
   1cd20:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   1cd22:	2337      	movs	r3, #55	; 0x37
   1cd24:	18fb      	adds	r3, r7, r3
   1cd26:	781b      	ldrb	r3, [r3, #0]
   1cd28:	001a      	movs	r2, r3
   1cd2a:	2101      	movs	r1, #1
   1cd2c:	2002      	movs	r0, #2
   1cd2e:	4b36      	ldr	r3, [pc, #216]	; (1ce08 <http_client_send_request+0x2f4>)
   1cd30:	4798      	blx	r3
   1cd32:	0003      	movs	r3, r0
   1cd34:	001a      	movs	r2, r3
   1cd36:	68fb      	ldr	r3, [r7, #12]
   1cd38:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   1cd3a:	68fb      	ldr	r3, [r7, #12]
   1cd3c:	781b      	ldrb	r3, [r3, #0]
   1cd3e:	b25b      	sxtb	r3, r3
   1cd40:	2b00      	cmp	r3, #0
   1cd42:	db3f      	blt.n	1cdc4 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   1cd44:	68fb      	ldr	r3, [r7, #12]
   1cd46:	781b      	ldrb	r3, [r3, #0]
   1cd48:	b25b      	sxtb	r3, r3
   1cd4a:	001a      	movs	r2, r3
   1cd4c:	4b2f      	ldr	r3, [pc, #188]	; (1ce0c <http_client_send_request+0x2f8>)
   1cd4e:	0092      	lsls	r2, r2, #2
   1cd50:	68f9      	ldr	r1, [r7, #12]
   1cd52:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   1cd54:	68fb      	ldr	r3, [r7, #12]
   1cd56:	3301      	adds	r3, #1
   1cd58:	0018      	movs	r0, r3
   1cd5a:	4b2d      	ldr	r3, [pc, #180]	; (1ce10 <http_client_send_request+0x2fc>)
   1cd5c:	4798      	blx	r3
   1cd5e:	1e03      	subs	r3, r0, #0
   1cd60:	d027      	beq.n	1cdb2 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   1cd62:	2314      	movs	r3, #20
   1cd64:	18fb      	adds	r3, r7, r3
   1cd66:	2202      	movs	r2, #2
   1cd68:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   1cd6a:	68fb      	ldr	r3, [r7, #12]
   1cd6c:	2250      	movs	r2, #80	; 0x50
   1cd6e:	5a9b      	ldrh	r3, [r3, r2]
   1cd70:	021b      	lsls	r3, r3, #8
   1cd72:	b21a      	sxth	r2, r3
   1cd74:	68fb      	ldr	r3, [r7, #12]
   1cd76:	2150      	movs	r1, #80	; 0x50
   1cd78:	5a5b      	ldrh	r3, [r3, r1]
   1cd7a:	0a1b      	lsrs	r3, r3, #8
   1cd7c:	b29b      	uxth	r3, r3
   1cd7e:	b21b      	sxth	r3, r3
   1cd80:	4313      	orrs	r3, r2
   1cd82:	b21b      	sxth	r3, r3
   1cd84:	b29a      	uxth	r2, r3
   1cd86:	2314      	movs	r3, #20
   1cd88:	18fb      	adds	r3, r7, r3
   1cd8a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   1cd8c:	68fb      	ldr	r3, [r7, #12]
   1cd8e:	3301      	adds	r3, #1
   1cd90:	0018      	movs	r0, r3
   1cd92:	4b20      	ldr	r3, [pc, #128]	; (1ce14 <http_client_send_request+0x300>)
   1cd94:	4798      	blx	r3
   1cd96:	0002      	movs	r2, r0
   1cd98:	2314      	movs	r3, #20
   1cd9a:	18fb      	adds	r3, r7, r3
   1cd9c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1cd9e:	68fb      	ldr	r3, [r7, #12]
   1cda0:	781b      	ldrb	r3, [r3, #0]
   1cda2:	b25b      	sxtb	r3, r3
   1cda4:	2214      	movs	r2, #20
   1cda6:	18b9      	adds	r1, r7, r2
   1cda8:	2210      	movs	r2, #16
   1cdaa:	0018      	movs	r0, r3
   1cdac:	4b1a      	ldr	r3, [pc, #104]	; (1ce18 <http_client_send_request+0x304>)
   1cdae:	4798      	blx	r3
   1cdb0:	e004      	b.n	1cdbc <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   1cdb2:	68fb      	ldr	r3, [r7, #12]
   1cdb4:	3301      	adds	r3, #1
   1cdb6:	0018      	movs	r0, r3
   1cdb8:	4b18      	ldr	r3, [pc, #96]	; (1ce1c <http_client_send_request+0x308>)
   1cdba:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   1cdbc:	68fb      	ldr	r3, [r7, #12]
   1cdbe:	2201      	movs	r2, #1
   1cdc0:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   1cdc2:	e006      	b.n	1cdd2 <http_client_send_request+0x2be>
			return -ENOSPC;
   1cdc4:	231c      	movs	r3, #28
   1cdc6:	425b      	negs	r3, r3
   1cdc8:	e004      	b.n	1cdd4 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   1cdca:	230b      	movs	r3, #11
   1cdcc:	425b      	negs	r3, r3
   1cdce:	e001      	b.n	1cdd4 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   1cdd0:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   1cdd2:	2300      	movs	r3, #0
}
   1cdd4:	0018      	movs	r0, r3
   1cdd6:	46bd      	mov	sp, r7
   1cdd8:	b00e      	add	sp, #56	; 0x38
   1cdda:	bdb0      	pop	{r4, r5, r7, pc}
   1cddc:	00025014 	.word	0x00025014
   1cde0:	000204e9 	.word	0x000204e9
   1cde4:	0002501c 	.word	0x0002501c
   1cde8:	000204db 	.word	0x000204db
   1cdec:	000200d9 	.word	0x000200d9
   1cdf0:	000204a1 	.word	0x000204a1
   1cdf4:	0002048f 	.word	0x0002048f
   1cdf8:	000200ed 	.word	0x000200ed
   1cdfc:	00020123 	.word	0x00020123
   1ce00:	0001cf75 	.word	0x0001cf75
   1ce04:	0001ce21 	.word	0x0001ce21
   1ce08:	00011131 	.word	0x00011131
   1ce0c:	2000415c 	.word	0x2000415c
   1ce10:	0001ca7d 	.word	0x0001ca7d
   1ce14:	0001187d 	.word	0x0001187d
   1ce18:	00011345 	.word	0x00011345
   1ce1c:	00011985 	.word	0x00011985

0001ce20 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   1ce20:	b580      	push	{r7, lr}
   1ce22:	b086      	sub	sp, #24
   1ce24:	af00      	add	r7, sp, #0
   1ce26:	6078      	str	r0, [r7, #4]
   1ce28:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   1ce2a:	687b      	ldr	r3, [r7, #4]
   1ce2c:	22c0      	movs	r2, #192	; 0xc0
   1ce2e:	589b      	ldr	r3, [r3, r2]
   1ce30:	2b00      	cmp	r3, #0
   1ce32:	d007      	beq.n	1ce44 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   1ce34:	687b      	ldr	r3, [r7, #4]
   1ce36:	22c0      	movs	r2, #192	; 0xc0
   1ce38:	589b      	ldr	r3, [r3, r2]
   1ce3a:	687a      	ldr	r2, [r7, #4]
   1ce3c:	21c4      	movs	r1, #196	; 0xc4
   1ce3e:	5852      	ldr	r2, [r2, r1]
   1ce40:	0010      	movs	r0, r2
   1ce42:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   1ce44:	687b      	ldr	r3, [r7, #4]
   1ce46:	33b0      	adds	r3, #176	; 0xb0
   1ce48:	2218      	movs	r2, #24
   1ce4a:	2100      	movs	r1, #0
   1ce4c:	0018      	movs	r0, r3
   1ce4e:	4b24      	ldr	r3, [pc, #144]	; (1cee0 <_http_client_clear_conn+0xc0>)
   1ce50:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   1ce52:	687b      	ldr	r3, [r7, #4]
   1ce54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1ce56:	2b00      	cmp	r3, #0
   1ce58:	d005      	beq.n	1ce66 <_http_client_clear_conn+0x46>
		close(module->sock);
   1ce5a:	687b      	ldr	r3, [r7, #4]
   1ce5c:	781b      	ldrb	r3, [r3, #0]
   1ce5e:	b25b      	sxtb	r3, r3
   1ce60:	0018      	movs	r0, r3
   1ce62:	4b20      	ldr	r3, [pc, #128]	; (1cee4 <_http_client_clear_conn+0xc4>)
   1ce64:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   1ce66:	687b      	ldr	r3, [r7, #4]
   1ce68:	781b      	ldrb	r3, [r3, #0]
   1ce6a:	b25b      	sxtb	r3, r3
   1ce6c:	001a      	movs	r2, r3
   1ce6e:	4b1e      	ldr	r3, [pc, #120]	; (1cee8 <_http_client_clear_conn+0xc8>)
   1ce70:	0092      	lsls	r2, r2, #2
   1ce72:	2100      	movs	r1, #0
   1ce74:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   1ce76:	687b      	ldr	r3, [r7, #4]
   1ce78:	336c      	adds	r3, #108	; 0x6c
   1ce7a:	226c      	movs	r2, #108	; 0x6c
   1ce7c:	2100      	movs	r1, #0
   1ce7e:	0018      	movs	r0, r3
   1ce80:	4b17      	ldr	r3, [pc, #92]	; (1cee0 <_http_client_clear_conn+0xc0>)
   1ce82:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   1ce84:	687b      	ldr	r3, [r7, #4]
   1ce86:	33d8      	adds	r3, #216	; 0xd8
   1ce88:	2210      	movs	r2, #16
   1ce8a:	2100      	movs	r1, #0
   1ce8c:	0018      	movs	r0, r3
   1ce8e:	4b14      	ldr	r3, [pc, #80]	; (1cee0 <_http_client_clear_conn+0xc0>)
   1ce90:	4798      	blx	r3
	module->req.state = STATE_INIT;
   1ce92:	687b      	ldr	r3, [r7, #4]
   1ce94:	2200      	movs	r2, #0
   1ce96:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1ce98:	687b      	ldr	r3, [r7, #4]
   1ce9a:	22d8      	movs	r2, #216	; 0xd8
   1ce9c:	2100      	movs	r1, #0
   1ce9e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   1cea0:	687b      	ldr	r3, [r7, #4]
   1cea2:	2241      	movs	r2, #65	; 0x41
   1cea4:	5c99      	ldrb	r1, [r3, r2]
   1cea6:	2001      	movs	r0, #1
   1cea8:	4381      	bics	r1, r0
   1ceaa:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   1ceac:	687b      	ldr	r3, [r7, #4]
   1ceae:	2241      	movs	r2, #65	; 0x41
   1ceb0:	5c99      	ldrb	r1, [r3, r2]
   1ceb2:	2002      	movs	r0, #2
   1ceb4:	4381      	bics	r1, r0
   1ceb6:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   1ceb8:	230c      	movs	r3, #12
   1ceba:	18fb      	adds	r3, r7, r3
   1cebc:	683a      	ldr	r2, [r7, #0]
   1cebe:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   1cec0:	687b      	ldr	r3, [r7, #4]
   1cec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1cec4:	2b00      	cmp	r3, #0
   1cec6:	d006      	beq.n	1ced6 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   1cec8:	687b      	ldr	r3, [r7, #4]
   1ceca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1cecc:	220c      	movs	r2, #12
   1cece:	18ba      	adds	r2, r7, r2
   1ced0:	6878      	ldr	r0, [r7, #4]
   1ced2:	2104      	movs	r1, #4
   1ced4:	4798      	blx	r3
	}
}
   1ced6:	46c0      	nop			; (mov r8, r8)
   1ced8:	46bd      	mov	sp, r7
   1ceda:	b006      	add	sp, #24
   1cedc:	bd80      	pop	{r7, pc}
   1cede:	46c0      	nop			; (mov r8, r8)
   1cee0:	00020123 	.word	0x00020123
   1cee4:	0001173d 	.word	0x0001173d
   1cee8:	2000415c 	.word	0x2000415c

0001ceec <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   1ceec:	b590      	push	{r4, r7, lr}
   1ceee:	b087      	sub	sp, #28
   1cef0:	af00      	add	r7, sp, #0
   1cef2:	60f8      	str	r0, [r7, #12]
   1cef4:	60b9      	str	r1, [r7, #8]
   1cef6:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   1cef8:	68fb      	ldr	r3, [r7, #12]
   1cefa:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   1cefc:	697b      	ldr	r3, [r7, #20]
   1cefe:	2241      	movs	r2, #65	; 0x41
   1cf00:	5c99      	ldrb	r1, [r3, r2]
   1cf02:	2001      	movs	r0, #1
   1cf04:	4301      	orrs	r1, r0
   1cf06:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   1cf08:	697b      	ldr	r3, [r7, #20]
   1cf0a:	2000      	movs	r0, #0
   1cf0c:	5618      	ldrsb	r0, [r3, r0]
   1cf0e:	687b      	ldr	r3, [r7, #4]
   1cf10:	b29a      	uxth	r2, r3
   1cf12:	68b9      	ldr	r1, [r7, #8]
   1cf14:	2300      	movs	r3, #0
   1cf16:	4c14      	ldr	r4, [pc, #80]	; (1cf68 <_http_client_send_wait+0x7c>)
   1cf18:	47a0      	blx	r4
   1cf1a:	0003      	movs	r3, r0
   1cf1c:	613b      	str	r3, [r7, #16]
   1cf1e:	693b      	ldr	r3, [r7, #16]
   1cf20:	2b00      	cmp	r3, #0
   1cf22:	da0f      	bge.n	1cf44 <_http_client_send_wait+0x58>
		module->sending = 0;
   1cf24:	697b      	ldr	r3, [r7, #20]
   1cf26:	2241      	movs	r2, #65	; 0x41
   1cf28:	5c99      	ldrb	r1, [r3, r2]
   1cf2a:	2001      	movs	r0, #1
   1cf2c:	4381      	bics	r1, r0
   1cf2e:	5499      	strb	r1, [r3, r2]
		return result;
   1cf30:	693b      	ldr	r3, [r7, #16]
   1cf32:	e014      	b.n	1cf5e <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   1cf34:	2000      	movs	r0, #0
   1cf36:	4b0d      	ldr	r3, [pc, #52]	; (1cf6c <_http_client_send_wait+0x80>)
   1cf38:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   1cf3a:	697b      	ldr	r3, [r7, #20]
   1cf3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1cf3e:	0018      	movs	r0, r3
   1cf40:	4b0b      	ldr	r3, [pc, #44]	; (1cf70 <_http_client_send_wait+0x84>)
   1cf42:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   1cf44:	697b      	ldr	r3, [r7, #20]
   1cf46:	2241      	movs	r2, #65	; 0x41
   1cf48:	5c9b      	ldrb	r3, [r3, r2]
   1cf4a:	2201      	movs	r2, #1
   1cf4c:	4013      	ands	r3, r2
   1cf4e:	b2db      	uxtb	r3, r3
   1cf50:	2b00      	cmp	r3, #0
   1cf52:	d003      	beq.n	1cf5c <_http_client_send_wait+0x70>
   1cf54:	697b      	ldr	r3, [r7, #20]
   1cf56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1cf58:	2b02      	cmp	r3, #2
   1cf5a:	d8eb      	bhi.n	1cf34 <_http_client_send_wait+0x48>
	}

	return 0;
   1cf5c:	2300      	movs	r3, #0
}
   1cf5e:	0018      	movs	r0, r3
   1cf60:	46bd      	mov	sp, r7
   1cf62:	b007      	add	sp, #28
   1cf64:	bd90      	pop	{r4, r7, pc}
   1cf66:	46c0      	nop			; (mov r8, r8)
   1cf68:	00011459 	.word	0x00011459
   1cf6c:	0000db05 	.word	0x0000db05
   1cf70:	0001e1f9 	.word	0x0001e1f9

0001cf74 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   1cf74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf76:	46c6      	mov	lr, r8
   1cf78:	b500      	push	{lr}
   1cf7a:	b0a0      	sub	sp, #128	; 0x80
   1cf7c:	af02      	add	r7, sp, #8
   1cf7e:	61f8      	str	r0, [r7, #28]
   1cf80:	4668      	mov	r0, sp
   1cf82:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   1cf84:	2318      	movs	r3, #24
   1cf86:	2218      	movs	r2, #24
   1cf88:	18ba      	adds	r2, r7, r2
   1cf8a:	18d0      	adds	r0, r2, r3
   1cf8c:	4bbd      	ldr	r3, [pc, #756]	; (1d284 <_http_client_request+0x310>)
   1cf8e:	469c      	mov	ip, r3
   1cf90:	4663      	mov	r3, ip
   1cf92:	cb16      	ldmia	r3!, {r1, r2, r4}
   1cf94:	c016      	stmia	r0!, {r1, r2, r4}
   1cf96:	469c      	mov	ip, r3
   1cf98:	4663      	mov	r3, ip
   1cf9a:	681b      	ldr	r3, [r3, #0]
   1cf9c:	469c      	mov	ip, r3
   1cf9e:	4663      	mov	r3, ip
   1cfa0:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   1cfa2:	69f8      	ldr	r0, [r7, #28]
   1cfa4:	6e40      	ldr	r0, [r0, #100]	; 0x64
   1cfa6:	4684      	mov	ip, r0
   1cfa8:	2301      	movs	r3, #1
   1cfaa:	425b      	negs	r3, r3
   1cfac:	4698      	mov	r8, r3
   1cfae:	44c4      	add	ip, r8
   1cfb0:	4663      	mov	r3, ip
   1cfb2:	66fb      	str	r3, [r7, #108]	; 0x6c
   1cfb4:	6038      	str	r0, [r7, #0]
   1cfb6:	2300      	movs	r3, #0
   1cfb8:	607b      	str	r3, [r7, #4]
   1cfba:	6839      	ldr	r1, [r7, #0]
   1cfbc:	687a      	ldr	r2, [r7, #4]
   1cfbe:	000b      	movs	r3, r1
   1cfc0:	0f5b      	lsrs	r3, r3, #29
   1cfc2:	469c      	mov	ip, r3
   1cfc4:	0013      	movs	r3, r2
   1cfc6:	00db      	lsls	r3, r3, #3
   1cfc8:	617b      	str	r3, [r7, #20]
   1cfca:	4663      	mov	r3, ip
   1cfcc:	697c      	ldr	r4, [r7, #20]
   1cfce:	431c      	orrs	r4, r3
   1cfd0:	617c      	str	r4, [r7, #20]
   1cfd2:	000b      	movs	r3, r1
   1cfd4:	00db      	lsls	r3, r3, #3
   1cfd6:	613b      	str	r3, [r7, #16]
   1cfd8:	0005      	movs	r5, r0
   1cfda:	2200      	movs	r2, #0
   1cfdc:	0016      	movs	r6, r2
   1cfde:	0f6a      	lsrs	r2, r5, #29
   1cfe0:	00f3      	lsls	r3, r6, #3
   1cfe2:	60fb      	str	r3, [r7, #12]
   1cfe4:	68fb      	ldr	r3, [r7, #12]
   1cfe6:	4313      	orrs	r3, r2
   1cfe8:	60fb      	str	r3, [r7, #12]
   1cfea:	00eb      	lsls	r3, r5, #3
   1cfec:	60bb      	str	r3, [r7, #8]
   1cfee:	1dc3      	adds	r3, r0, #7
   1cff0:	08db      	lsrs	r3, r3, #3
   1cff2:	00db      	lsls	r3, r3, #3
   1cff4:	466a      	mov	r2, sp
   1cff6:	1ad3      	subs	r3, r2, r3
   1cff8:	469d      	mov	sp, r3
   1cffa:	ab02      	add	r3, sp, #8
   1cffc:	3300      	adds	r3, #0
   1cffe:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   1d000:	69fb      	ldr	r3, [r7, #28]
   1d002:	2b00      	cmp	r3, #0
   1d004:	d100      	bne.n	1d008 <_http_client_request+0x94>
   1d006:	e346      	b.n	1d696 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   1d008:	69fb      	ldr	r3, [r7, #28]
   1d00a:	2241      	movs	r2, #65	; 0x41
   1d00c:	5c9b      	ldrb	r3, [r3, r2]
   1d00e:	2201      	movs	r2, #1
   1d010:	4013      	ands	r3, r2
   1d012:	b2db      	uxtb	r3, r3
   1d014:	2b00      	cmp	r3, #0
   1d016:	d000      	beq.n	1d01a <_http_client_request+0xa6>
   1d018:	e33f      	b.n	1d69a <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   1d01a:	69fb      	ldr	r3, [r7, #28]
   1d01c:	33b0      	adds	r3, #176	; 0xb0
   1d01e:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   1d020:	69fb      	ldr	r3, [r7, #28]
   1d022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1d024:	2b03      	cmp	r3, #3
   1d026:	d003      	beq.n	1d030 <_http_client_request+0xbc>
   1d028:	2b04      	cmp	r3, #4
   1d02a:	d100      	bne.n	1d02e <_http_client_request+0xba>
   1d02c:	e1b3      	b.n	1d396 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   1d02e:	e32f      	b.n	1d690 <_http_client_request+0x71c>
		module->req.content_length = 0;
   1d030:	69fb      	ldr	r3, [r7, #28]
   1d032:	22cc      	movs	r2, #204	; 0xcc
   1d034:	2100      	movs	r1, #0
   1d036:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   1d038:	69fb      	ldr	r3, [r7, #28]
   1d03a:	22d0      	movs	r2, #208	; 0xd0
   1d03c:	2100      	movs	r1, #0
   1d03e:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   1d040:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1d042:	69fb      	ldr	r3, [r7, #28]
   1d044:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1d046:	4c90      	ldr	r4, [pc, #576]	; (1d288 <_http_client_request+0x314>)
   1d048:	2334      	movs	r3, #52	; 0x34
   1d04a:	2018      	movs	r0, #24
   1d04c:	1838      	adds	r0, r7, r0
   1d04e:	18c0      	adds	r0, r0, r3
   1d050:	69fb      	ldr	r3, [r7, #28]
   1d052:	9300      	str	r3, [sp, #0]
   1d054:	0023      	movs	r3, r4
   1d056:	4c8d      	ldr	r4, [pc, #564]	; (1d28c <_http_client_request+0x318>)
   1d058:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   1d05a:	69fb      	ldr	r3, [r7, #28]
   1d05c:	22c8      	movs	r2, #200	; 0xc8
   1d05e:	5c9b      	ldrb	r3, [r3, r2]
   1d060:	2b01      	cmp	r3, #1
   1d062:	d10a      	bne.n	1d07a <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   1d064:	498a      	ldr	r1, [pc, #552]	; (1d290 <_http_client_request+0x31c>)
   1d066:	2334      	movs	r3, #52	; 0x34
   1d068:	2218      	movs	r2, #24
   1d06a:	4694      	mov	ip, r2
   1d06c:	44bc      	add	ip, r7
   1d06e:	4463      	add	r3, ip
   1d070:	2204      	movs	r2, #4
   1d072:	0018      	movs	r0, r3
   1d074:	4b87      	ldr	r3, [pc, #540]	; (1d294 <_http_client_request+0x320>)
   1d076:	4798      	blx	r3
   1d078:	e04e      	b.n	1d118 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   1d07a:	69fb      	ldr	r3, [r7, #28]
   1d07c:	22c8      	movs	r2, #200	; 0xc8
   1d07e:	5c9b      	ldrb	r3, [r3, r2]
   1d080:	2b02      	cmp	r3, #2
   1d082:	d10a      	bne.n	1d09a <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   1d084:	4984      	ldr	r1, [pc, #528]	; (1d298 <_http_client_request+0x324>)
   1d086:	2334      	movs	r3, #52	; 0x34
   1d088:	2218      	movs	r2, #24
   1d08a:	4694      	mov	ip, r2
   1d08c:	44bc      	add	ip, r7
   1d08e:	4463      	add	r3, ip
   1d090:	2205      	movs	r2, #5
   1d092:	0018      	movs	r0, r3
   1d094:	4b7f      	ldr	r3, [pc, #508]	; (1d294 <_http_client_request+0x320>)
   1d096:	4798      	blx	r3
   1d098:	e03e      	b.n	1d118 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   1d09a:	69fb      	ldr	r3, [r7, #28]
   1d09c:	22c8      	movs	r2, #200	; 0xc8
   1d09e:	5c9b      	ldrb	r3, [r3, r2]
   1d0a0:	2b03      	cmp	r3, #3
   1d0a2:	d10a      	bne.n	1d0ba <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   1d0a4:	497d      	ldr	r1, [pc, #500]	; (1d29c <_http_client_request+0x328>)
   1d0a6:	2334      	movs	r3, #52	; 0x34
   1d0a8:	2218      	movs	r2, #24
   1d0aa:	4694      	mov	ip, r2
   1d0ac:	44bc      	add	ip, r7
   1d0ae:	4463      	add	r3, ip
   1d0b0:	2207      	movs	r2, #7
   1d0b2:	0018      	movs	r0, r3
   1d0b4:	4b77      	ldr	r3, [pc, #476]	; (1d294 <_http_client_request+0x320>)
   1d0b6:	4798      	blx	r3
   1d0b8:	e02e      	b.n	1d118 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   1d0ba:	69fb      	ldr	r3, [r7, #28]
   1d0bc:	22c8      	movs	r2, #200	; 0xc8
   1d0be:	5c9b      	ldrb	r3, [r3, r2]
   1d0c0:	2b04      	cmp	r3, #4
   1d0c2:	d10a      	bne.n	1d0da <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   1d0c4:	4976      	ldr	r1, [pc, #472]	; (1d2a0 <_http_client_request+0x32c>)
   1d0c6:	2334      	movs	r3, #52	; 0x34
   1d0c8:	2218      	movs	r2, #24
   1d0ca:	4694      	mov	ip, r2
   1d0cc:	44bc      	add	ip, r7
   1d0ce:	4463      	add	r3, ip
   1d0d0:	2204      	movs	r2, #4
   1d0d2:	0018      	movs	r0, r3
   1d0d4:	4b6f      	ldr	r3, [pc, #444]	; (1d294 <_http_client_request+0x320>)
   1d0d6:	4798      	blx	r3
   1d0d8:	e01e      	b.n	1d118 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   1d0da:	69fb      	ldr	r3, [r7, #28]
   1d0dc:	22c8      	movs	r2, #200	; 0xc8
   1d0de:	5c9b      	ldrb	r3, [r3, r2]
   1d0e0:	2b05      	cmp	r3, #5
   1d0e2:	d10a      	bne.n	1d0fa <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   1d0e4:	496f      	ldr	r1, [pc, #444]	; (1d2a4 <_http_client_request+0x330>)
   1d0e6:	2334      	movs	r3, #52	; 0x34
   1d0e8:	2218      	movs	r2, #24
   1d0ea:	4694      	mov	ip, r2
   1d0ec:	44bc      	add	ip, r7
   1d0ee:	4463      	add	r3, ip
   1d0f0:	2208      	movs	r2, #8
   1d0f2:	0018      	movs	r0, r3
   1d0f4:	4b67      	ldr	r3, [pc, #412]	; (1d294 <_http_client_request+0x320>)
   1d0f6:	4798      	blx	r3
   1d0f8:	e00e      	b.n	1d118 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   1d0fa:	69fb      	ldr	r3, [r7, #28]
   1d0fc:	22c8      	movs	r2, #200	; 0xc8
   1d0fe:	5c9b      	ldrb	r3, [r3, r2]
   1d100:	2b06      	cmp	r3, #6
   1d102:	d109      	bne.n	1d118 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   1d104:	4968      	ldr	r1, [pc, #416]	; (1d2a8 <_http_client_request+0x334>)
   1d106:	2334      	movs	r3, #52	; 0x34
   1d108:	2218      	movs	r2, #24
   1d10a:	4694      	mov	ip, r2
   1d10c:	44bc      	add	ip, r7
   1d10e:	4463      	add	r3, ip
   1d110:	2205      	movs	r2, #5
   1d112:	0018      	movs	r0, r3
   1d114:	4b5f      	ldr	r3, [pc, #380]	; (1d294 <_http_client_request+0x320>)
   1d116:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   1d118:	69fb      	ldr	r3, [r7, #28]
   1d11a:	3370      	adds	r3, #112	; 0x70
   1d11c:	001c      	movs	r4, r3
   1d11e:	69fb      	ldr	r3, [r7, #28]
   1d120:	3370      	adds	r3, #112	; 0x70
   1d122:	0018      	movs	r0, r3
   1d124:	4b61      	ldr	r3, [pc, #388]	; (1d2ac <_http_client_request+0x338>)
   1d126:	4798      	blx	r3
   1d128:	0002      	movs	r2, r0
   1d12a:	2334      	movs	r3, #52	; 0x34
   1d12c:	2118      	movs	r1, #24
   1d12e:	468c      	mov	ip, r1
   1d130:	44bc      	add	ip, r7
   1d132:	4463      	add	r3, ip
   1d134:	0021      	movs	r1, r4
   1d136:	0018      	movs	r0, r3
   1d138:	4b56      	ldr	r3, [pc, #344]	; (1d294 <_http_client_request+0x320>)
   1d13a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   1d13c:	495c      	ldr	r1, [pc, #368]	; (1d2b0 <_http_client_request+0x33c>)
   1d13e:	2334      	movs	r3, #52	; 0x34
   1d140:	2218      	movs	r2, #24
   1d142:	4694      	mov	ip, r2
   1d144:	44bc      	add	ip, r7
   1d146:	4463      	add	r3, ip
   1d148:	220b      	movs	r2, #11
   1d14a:	0018      	movs	r0, r3
   1d14c:	4b51      	ldr	r3, [pc, #324]	; (1d294 <_http_client_request+0x320>)
   1d14e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   1d150:	4958      	ldr	r1, [pc, #352]	; (1d2b4 <_http_client_request+0x340>)
   1d152:	2334      	movs	r3, #52	; 0x34
   1d154:	2218      	movs	r2, #24
   1d156:	4694      	mov	ip, r2
   1d158:	44bc      	add	ip, r7
   1d15a:	4463      	add	r3, ip
   1d15c:	220c      	movs	r2, #12
   1d15e:	0018      	movs	r0, r3
   1d160:	4b4c      	ldr	r3, [pc, #304]	; (1d294 <_http_client_request+0x320>)
   1d162:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   1d164:	69fb      	ldr	r3, [r7, #28]
   1d166:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   1d168:	69fb      	ldr	r3, [r7, #28]
   1d16a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1d16c:	0018      	movs	r0, r3
   1d16e:	4b4f      	ldr	r3, [pc, #316]	; (1d2ac <_http_client_request+0x338>)
   1d170:	4798      	blx	r3
   1d172:	0002      	movs	r2, r0
   1d174:	2334      	movs	r3, #52	; 0x34
   1d176:	2118      	movs	r1, #24
   1d178:	468c      	mov	ip, r1
   1d17a:	44bc      	add	ip, r7
   1d17c:	4463      	add	r3, ip
   1d17e:	0021      	movs	r1, r4
   1d180:	0018      	movs	r0, r3
   1d182:	4b44      	ldr	r3, [pc, #272]	; (1d294 <_http_client_request+0x320>)
   1d184:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1d186:	494c      	ldr	r1, [pc, #304]	; (1d2b8 <_http_client_request+0x344>)
   1d188:	2334      	movs	r3, #52	; 0x34
   1d18a:	2218      	movs	r2, #24
   1d18c:	4694      	mov	ip, r2
   1d18e:	44bc      	add	ip, r7
   1d190:	4463      	add	r3, ip
   1d192:	2202      	movs	r2, #2
   1d194:	0018      	movs	r0, r3
   1d196:	4b3f      	ldr	r3, [pc, #252]	; (1d294 <_http_client_request+0x320>)
   1d198:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   1d19a:	4948      	ldr	r1, [pc, #288]	; (1d2bc <_http_client_request+0x348>)
   1d19c:	2334      	movs	r3, #52	; 0x34
   1d19e:	2218      	movs	r2, #24
   1d1a0:	4694      	mov	ip, r2
   1d1a2:	44bc      	add	ip, r7
   1d1a4:	4463      	add	r3, ip
   1d1a6:	2206      	movs	r2, #6
   1d1a8:	0018      	movs	r0, r3
   1d1aa:	4b3a      	ldr	r3, [pc, #232]	; (1d294 <_http_client_request+0x320>)
   1d1ac:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   1d1ae:	69fb      	ldr	r3, [r7, #28]
   1d1b0:	1c5c      	adds	r4, r3, #1
   1d1b2:	69fb      	ldr	r3, [r7, #28]
   1d1b4:	3301      	adds	r3, #1
   1d1b6:	0018      	movs	r0, r3
   1d1b8:	4b3c      	ldr	r3, [pc, #240]	; (1d2ac <_http_client_request+0x338>)
   1d1ba:	4798      	blx	r3
   1d1bc:	0002      	movs	r2, r0
   1d1be:	2334      	movs	r3, #52	; 0x34
   1d1c0:	2118      	movs	r1, #24
   1d1c2:	468c      	mov	ip, r1
   1d1c4:	44bc      	add	ip, r7
   1d1c6:	4463      	add	r3, ip
   1d1c8:	0021      	movs	r1, r4
   1d1ca:	0018      	movs	r0, r3
   1d1cc:	4b31      	ldr	r3, [pc, #196]	; (1d294 <_http_client_request+0x320>)
   1d1ce:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1d1d0:	4939      	ldr	r1, [pc, #228]	; (1d2b8 <_http_client_request+0x344>)
   1d1d2:	2334      	movs	r3, #52	; 0x34
   1d1d4:	2218      	movs	r2, #24
   1d1d6:	4694      	mov	ip, r2
   1d1d8:	44bc      	add	ip, r7
   1d1da:	4463      	add	r3, ip
   1d1dc:	2202      	movs	r2, #2
   1d1de:	0018      	movs	r0, r3
   1d1e0:	4b2c      	ldr	r3, [pc, #176]	; (1d294 <_http_client_request+0x320>)
   1d1e2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   1d1e4:	4936      	ldr	r1, [pc, #216]	; (1d2c0 <_http_client_request+0x34c>)
   1d1e6:	2334      	movs	r3, #52	; 0x34
   1d1e8:	2218      	movs	r2, #24
   1d1ea:	4694      	mov	ip, r2
   1d1ec:	44bc      	add	ip, r7
   1d1ee:	4463      	add	r3, ip
   1d1f0:	2218      	movs	r2, #24
   1d1f2:	0018      	movs	r0, r3
   1d1f4:	4b27      	ldr	r3, [pc, #156]	; (1d294 <_http_client_request+0x320>)
   1d1f6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   1d1f8:	4932      	ldr	r1, [pc, #200]	; (1d2c4 <_http_client_request+0x350>)
   1d1fa:	2334      	movs	r3, #52	; 0x34
   1d1fc:	2218      	movs	r2, #24
   1d1fe:	4694      	mov	ip, r2
   1d200:	44bc      	add	ip, r7
   1d202:	4463      	add	r3, ip
   1d204:	2213      	movs	r2, #19
   1d206:	0018      	movs	r0, r3
   1d208:	4b22      	ldr	r3, [pc, #136]	; (1d294 <_http_client_request+0x320>)
   1d20a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   1d20c:	492e      	ldr	r1, [pc, #184]	; (1d2c8 <_http_client_request+0x354>)
   1d20e:	2334      	movs	r3, #52	; 0x34
   1d210:	2218      	movs	r2, #24
   1d212:	4694      	mov	ip, r2
   1d214:	44bc      	add	ip, r7
   1d216:	4463      	add	r3, ip
   1d218:	2217      	movs	r2, #23
   1d21a:	0018      	movs	r0, r3
   1d21c:	4b1d      	ldr	r3, [pc, #116]	; (1d294 <_http_client_request+0x320>)
   1d21e:	4798      	blx	r3
		if (entity->read != NULL) {
   1d220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d222:	68db      	ldr	r3, [r3, #12]
   1d224:	2b00      	cmp	r3, #0
   1d226:	d100      	bne.n	1d22a <_http_client_request+0x2b6>
   1d228:	e088      	b.n	1d33c <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   1d22a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d22c:	781b      	ldrb	r3, [r3, #0]
   1d22e:	2b00      	cmp	r3, #0
   1d230:	d00f      	beq.n	1d252 <_http_client_request+0x2de>
				module->req.content_length = -1;
   1d232:	69fb      	ldr	r3, [r7, #28]
   1d234:	21cc      	movs	r1, #204	; 0xcc
   1d236:	2201      	movs	r2, #1
   1d238:	4252      	negs	r2, r2
   1d23a:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   1d23c:	4923      	ldr	r1, [pc, #140]	; (1d2cc <_http_client_request+0x358>)
   1d23e:	2334      	movs	r3, #52	; 0x34
   1d240:	2218      	movs	r2, #24
   1d242:	4694      	mov	ip, r2
   1d244:	44bc      	add	ip, r7
   1d246:	4463      	add	r3, ip
   1d248:	221c      	movs	r2, #28
   1d24a:	0018      	movs	r0, r3
   1d24c:	4b11      	ldr	r3, [pc, #68]	; (1d294 <_http_client_request+0x320>)
   1d24e:	4798      	blx	r3
   1d250:	e074      	b.n	1d33c <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   1d252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d254:	689b      	ldr	r3, [r3, #8]
   1d256:	2b00      	cmp	r3, #0
   1d258:	d070      	beq.n	1d33c <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   1d25a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d25c:	689a      	ldr	r2, [r3, #8]
   1d25e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d260:	695b      	ldr	r3, [r3, #20]
   1d262:	0018      	movs	r0, r3
   1d264:	4790      	blx	r2
   1d266:	0001      	movs	r1, r0
   1d268:	69fb      	ldr	r3, [r7, #28]
   1d26a:	22cc      	movs	r2, #204	; 0xcc
   1d26c:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   1d26e:	69fb      	ldr	r3, [r7, #28]
   1d270:	22cc      	movs	r2, #204	; 0xcc
   1d272:	589b      	ldr	r3, [r3, r2]
   1d274:	2b00      	cmp	r3, #0
   1d276:	da2b      	bge.n	1d2d0 <_http_client_request+0x35c>
					module->req.content_length = 0;
   1d278:	69fb      	ldr	r3, [r7, #28]
   1d27a:	22cc      	movs	r2, #204	; 0xcc
   1d27c:	2100      	movs	r1, #0
   1d27e:	5099      	str	r1, [r3, r2]
   1d280:	e05c      	b.n	1d33c <_http_client_request+0x3c8>
   1d282:	46c0      	nop			; (mov r8, r8)
   1d284:	00025104 	.word	0x00025104
   1d288:	0001ceed 	.word	0x0001ceed
   1d28c:	0001de55 	.word	0x0001de55
   1d290:	00025028 	.word	0x00025028
   1d294:	0001ded5 	.word	0x0001ded5
   1d298:	00025030 	.word	0x00025030
   1d29c:	00025038 	.word	0x00025038
   1d2a0:	00025040 	.word	0x00025040
   1d2a4:	00025048 	.word	0x00025048
   1d2a8:	00025054 	.word	0x00025054
   1d2ac:	000204db 	.word	0x000204db
   1d2b0:	0002505c 	.word	0x0002505c
   1d2b4:	00025068 	.word	0x00025068
   1d2b8:	00025078 	.word	0x00025078
   1d2bc:	0002507c 	.word	0x0002507c
   1d2c0:	00025084 	.word	0x00025084
   1d2c4:	000250a0 	.word	0x000250a0
   1d2c8:	000250b4 	.word	0x000250b4
   1d2cc:	000250cc 	.word	0x000250cc
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   1d2d0:	69fb      	ldr	r3, [r7, #28]
   1d2d2:	22cc      	movs	r2, #204	; 0xcc
   1d2d4:	589b      	ldr	r3, [r3, r2]
   1d2d6:	001a      	movs	r2, r3
   1d2d8:	49e0      	ldr	r1, [pc, #896]	; (1d65c <_http_client_request+0x6e8>)
   1d2da:	2328      	movs	r3, #40	; 0x28
   1d2dc:	2018      	movs	r0, #24
   1d2de:	4684      	mov	ip, r0
   1d2e0:	44bc      	add	ip, r7
   1d2e2:	4463      	add	r3, ip
   1d2e4:	0018      	movs	r0, r3
   1d2e6:	4bde      	ldr	r3, [pc, #888]	; (1d660 <_http_client_request+0x6ec>)
   1d2e8:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   1d2ea:	49de      	ldr	r1, [pc, #888]	; (1d664 <_http_client_request+0x6f0>)
   1d2ec:	2334      	movs	r3, #52	; 0x34
   1d2ee:	2218      	movs	r2, #24
   1d2f0:	4694      	mov	ip, r2
   1d2f2:	44bc      	add	ip, r7
   1d2f4:	4463      	add	r3, ip
   1d2f6:	2210      	movs	r2, #16
   1d2f8:	0018      	movs	r0, r3
   1d2fa:	4bdb      	ldr	r3, [pc, #876]	; (1d668 <_http_client_request+0x6f4>)
   1d2fc:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   1d2fe:	2328      	movs	r3, #40	; 0x28
   1d300:	2218      	movs	r2, #24
   1d302:	4694      	mov	ip, r2
   1d304:	44bc      	add	ip, r7
   1d306:	4463      	add	r3, ip
   1d308:	0018      	movs	r0, r3
   1d30a:	4bd8      	ldr	r3, [pc, #864]	; (1d66c <_http_client_request+0x6f8>)
   1d30c:	4798      	blx	r3
   1d30e:	0002      	movs	r2, r0
   1d310:	2328      	movs	r3, #40	; 0x28
   1d312:	2118      	movs	r1, #24
   1d314:	1879      	adds	r1, r7, r1
   1d316:	18c9      	adds	r1, r1, r3
   1d318:	2334      	movs	r3, #52	; 0x34
   1d31a:	2018      	movs	r0, #24
   1d31c:	4684      	mov	ip, r0
   1d31e:	44bc      	add	ip, r7
   1d320:	4463      	add	r3, ip
   1d322:	0018      	movs	r0, r3
   1d324:	4bd0      	ldr	r3, [pc, #832]	; (1d668 <_http_client_request+0x6f4>)
   1d326:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1d328:	49d1      	ldr	r1, [pc, #836]	; (1d670 <_http_client_request+0x6fc>)
   1d32a:	2334      	movs	r3, #52	; 0x34
   1d32c:	2218      	movs	r2, #24
   1d32e:	4694      	mov	ip, r2
   1d330:	44bc      	add	ip, r7
   1d332:	4463      	add	r3, ip
   1d334:	2202      	movs	r2, #2
   1d336:	0018      	movs	r0, r3
   1d338:	4bcb      	ldr	r3, [pc, #812]	; (1d668 <_http_client_request+0x6f4>)
   1d33a:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   1d33c:	69fb      	ldr	r3, [r7, #28]
   1d33e:	22d4      	movs	r2, #212	; 0xd4
   1d340:	589b      	ldr	r3, [r3, r2]
   1d342:	2b00      	cmp	r3, #0
   1d344:	d012      	beq.n	1d36c <_http_client_request+0x3f8>
				module->req.ext_header,
   1d346:	69fb      	ldr	r3, [r7, #28]
   1d348:	22d4      	movs	r2, #212	; 0xd4
   1d34a:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   1d34c:	69fb      	ldr	r3, [r7, #28]
   1d34e:	22d4      	movs	r2, #212	; 0xd4
   1d350:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   1d352:	0018      	movs	r0, r3
   1d354:	4bc5      	ldr	r3, [pc, #788]	; (1d66c <_http_client_request+0x6f8>)
   1d356:	4798      	blx	r3
   1d358:	0002      	movs	r2, r0
   1d35a:	2334      	movs	r3, #52	; 0x34
   1d35c:	2118      	movs	r1, #24
   1d35e:	468c      	mov	ip, r1
   1d360:	44bc      	add	ip, r7
   1d362:	4463      	add	r3, ip
   1d364:	0021      	movs	r1, r4
   1d366:	0018      	movs	r0, r3
   1d368:	4bbf      	ldr	r3, [pc, #764]	; (1d668 <_http_client_request+0x6f4>)
   1d36a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1d36c:	49c0      	ldr	r1, [pc, #768]	; (1d670 <_http_client_request+0x6fc>)
   1d36e:	2334      	movs	r3, #52	; 0x34
   1d370:	2218      	movs	r2, #24
   1d372:	4694      	mov	ip, r2
   1d374:	44bc      	add	ip, r7
   1d376:	4463      	add	r3, ip
   1d378:	2202      	movs	r2, #2
   1d37a:	0018      	movs	r0, r3
   1d37c:	4bba      	ldr	r3, [pc, #744]	; (1d668 <_http_client_request+0x6f4>)
   1d37e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   1d380:	2334      	movs	r3, #52	; 0x34
   1d382:	2218      	movs	r2, #24
   1d384:	4694      	mov	ip, r2
   1d386:	44bc      	add	ip, r7
   1d388:	4463      	add	r3, ip
   1d38a:	0018      	movs	r0, r3
   1d38c:	4bb9      	ldr	r3, [pc, #740]	; (1d674 <_http_client_request+0x700>)
   1d38e:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   1d390:	69fb      	ldr	r3, [r7, #28]
   1d392:	2204      	movs	r2, #4
   1d394:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   1d396:	69fb      	ldr	r3, [r7, #28]
   1d398:	22cc      	movs	r2, #204	; 0xcc
   1d39a:	589b      	ldr	r3, [r3, r2]
   1d39c:	2b00      	cmp	r3, #0
   1d39e:	db00      	blt.n	1d3a2 <_http_client_request+0x42e>
   1d3a0:	e0c6      	b.n	1d530 <_http_client_request+0x5bc>
   1d3a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d3a4:	68db      	ldr	r3, [r3, #12]
   1d3a6:	2b00      	cmp	r3, #0
   1d3a8:	d100      	bne.n	1d3ac <_http_client_request+0x438>
   1d3aa:	e0c1      	b.n	1d530 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1d3ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d3ae:	68dc      	ldr	r4, [r3, #12]
   1d3b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d3b2:	6958      	ldr	r0, [r3, #20]
   1d3b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1d3b6:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1d3b8:	69fb      	ldr	r3, [r7, #28]
   1d3ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1d3bc:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1d3be:	69fb      	ldr	r3, [r7, #28]
   1d3c0:	22d0      	movs	r2, #208	; 0xd0
   1d3c2:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1d3c4:	002a      	movs	r2, r5
   1d3c6:	47a0      	blx	r4
   1d3c8:	0003      	movs	r3, r0
   1d3ca:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   1d3cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d3ce:	2b00      	cmp	r3, #0
   1d3d0:	da01      	bge.n	1d3d6 <_http_client_request+0x462>
				size = 0;
   1d3d2:	2300      	movs	r3, #0
   1d3d4:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   1d3d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1d3d8:	220a      	movs	r2, #10
   1d3da:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   1d3dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1d3de:	220d      	movs	r2, #13
   1d3e0:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   1d3e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d3e4:	3305      	adds	r3, #5
   1d3e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1d3e8:	210d      	movs	r1, #13
   1d3ea:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   1d3ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d3ee:	3306      	adds	r3, #6
   1d3f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1d3f2:	210a      	movs	r1, #10
   1d3f4:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   1d3f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d3f8:	2b00      	cmp	r3, #0
   1d3fa:	db14      	blt.n	1d426 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   1d3fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1d3fe:	3302      	adds	r3, #2
   1d400:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   1d402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d404:	4a9c      	ldr	r2, [pc, #624]	; (1d678 <_http_client_request+0x704>)
   1d406:	4013      	ands	r3, r2
   1d408:	d504      	bpl.n	1d414 <_http_client_request+0x4a0>
   1d40a:	3b01      	subs	r3, #1
   1d40c:	2210      	movs	r2, #16
   1d40e:	4252      	negs	r2, r2
   1d410:	4313      	orrs	r3, r2
   1d412:	3301      	adds	r3, #1
   1d414:	001a      	movs	r2, r3
   1d416:	2318      	movs	r3, #24
   1d418:	2118      	movs	r1, #24
   1d41a:	468c      	mov	ip, r1
   1d41c:	44bc      	add	ip, r7
   1d41e:	4463      	add	r3, ip
   1d420:	5c9a      	ldrb	r2, [r3, r2]
   1d422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1d424:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   1d426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d428:	2b0f      	cmp	r3, #15
   1d42a:	dd19      	ble.n	1d460 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   1d42c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1d42e:	3301      	adds	r3, #1
   1d430:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   1d432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d434:	2b00      	cmp	r3, #0
   1d436:	da00      	bge.n	1d43a <_http_client_request+0x4c6>
   1d438:	330f      	adds	r3, #15
   1d43a:	111b      	asrs	r3, r3, #4
   1d43c:	001a      	movs	r2, r3
   1d43e:	4b8e      	ldr	r3, [pc, #568]	; (1d678 <_http_client_request+0x704>)
   1d440:	4013      	ands	r3, r2
   1d442:	d504      	bpl.n	1d44e <_http_client_request+0x4da>
   1d444:	3b01      	subs	r3, #1
   1d446:	2210      	movs	r2, #16
   1d448:	4252      	negs	r2, r2
   1d44a:	4313      	orrs	r3, r2
   1d44c:	3301      	adds	r3, #1
   1d44e:	001a      	movs	r2, r3
   1d450:	2318      	movs	r3, #24
   1d452:	2118      	movs	r1, #24
   1d454:	468c      	mov	ip, r1
   1d456:	44bc      	add	ip, r7
   1d458:	4463      	add	r3, ip
   1d45a:	5c9a      	ldrb	r2, [r3, r2]
   1d45c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1d45e:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   1d460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d462:	2bff      	cmp	r3, #255	; 0xff
   1d464:	dd18      	ble.n	1d498 <_http_client_request+0x524>
				ptr = buffer;
   1d466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1d468:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   1d46a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d46c:	2b00      	cmp	r3, #0
   1d46e:	da00      	bge.n	1d472 <_http_client_request+0x4fe>
   1d470:	33ff      	adds	r3, #255	; 0xff
   1d472:	121b      	asrs	r3, r3, #8
   1d474:	001a      	movs	r2, r3
   1d476:	4b80      	ldr	r3, [pc, #512]	; (1d678 <_http_client_request+0x704>)
   1d478:	4013      	ands	r3, r2
   1d47a:	d504      	bpl.n	1d486 <_http_client_request+0x512>
   1d47c:	3b01      	subs	r3, #1
   1d47e:	2210      	movs	r2, #16
   1d480:	4252      	negs	r2, r2
   1d482:	4313      	orrs	r3, r2
   1d484:	3301      	adds	r3, #1
   1d486:	001a      	movs	r2, r3
   1d488:	2318      	movs	r3, #24
   1d48a:	2118      	movs	r1, #24
   1d48c:	468c      	mov	ip, r1
   1d48e:	44bc      	add	ip, r7
   1d490:	4463      	add	r3, ip
   1d492:	5c9a      	ldrb	r2, [r3, r2]
   1d494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1d496:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   1d498:	69fb      	ldr	r3, [r7, #28]
   1d49a:	2000      	movs	r0, #0
   1d49c:	5618      	ldrsb	r0, [r3, r0]
   1d49e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1d4a0:	3303      	adds	r3, #3
   1d4a2:	001a      	movs	r2, r3
   1d4a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1d4a6:	1ad3      	subs	r3, r2, r3
   1d4a8:	b29a      	uxth	r2, r3
   1d4aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d4ac:	b29b      	uxth	r3, r3
   1d4ae:	18d3      	adds	r3, r2, r3
   1d4b0:	b29b      	uxth	r3, r3
   1d4b2:	3304      	adds	r3, #4
   1d4b4:	b29a      	uxth	r2, r3
   1d4b6:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1d4b8:	2300      	movs	r3, #0
   1d4ba:	4c70      	ldr	r4, [pc, #448]	; (1d67c <_http_client_request+0x708>)
   1d4bc:	47a0      	blx	r4
   1d4be:	0003      	movs	r3, r0
   1d4c0:	663b      	str	r3, [r7, #96]	; 0x60
   1d4c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1d4c4:	2b00      	cmp	r3, #0
   1d4c6:	da07      	bge.n	1d4d8 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   1d4c8:	2305      	movs	r3, #5
   1d4ca:	425a      	negs	r2, r3
   1d4cc:	69fb      	ldr	r3, [r7, #28]
   1d4ce:	0011      	movs	r1, r2
   1d4d0:	0018      	movs	r0, r3
   1d4d2:	4b6b      	ldr	r3, [pc, #428]	; (1d680 <_http_client_request+0x70c>)
   1d4d4:	4798      	blx	r3
				return;
   1d4d6:	e0e1      	b.n	1d69c <_http_client_request+0x728>
			module->req.sent_length += size;
   1d4d8:	69fb      	ldr	r3, [r7, #28]
   1d4da:	22d0      	movs	r2, #208	; 0xd0
   1d4dc:	589a      	ldr	r2, [r3, r2]
   1d4de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d4e0:	18d2      	adds	r2, r2, r3
   1d4e2:	69fb      	ldr	r3, [r7, #28]
   1d4e4:	21d0      	movs	r1, #208	; 0xd0
   1d4e6:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   1d4e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d4ea:	2b00      	cmp	r3, #0
   1d4ec:	d000      	beq.n	1d4f0 <_http_client_request+0x57c>
   1d4ee:	e0c9      	b.n	1d684 <_http_client_request+0x710>
				if (module->req.entity.close) {
   1d4f0:	69fb      	ldr	r3, [r7, #28]
   1d4f2:	22c0      	movs	r2, #192	; 0xc0
   1d4f4:	589b      	ldr	r3, [r3, r2]
   1d4f6:	2b00      	cmp	r3, #0
   1d4f8:	d007      	beq.n	1d50a <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   1d4fa:	69fb      	ldr	r3, [r7, #28]
   1d4fc:	22c0      	movs	r2, #192	; 0xc0
   1d4fe:	589b      	ldr	r3, [r3, r2]
   1d500:	69fa      	ldr	r2, [r7, #28]
   1d502:	21c4      	movs	r1, #196	; 0xc4
   1d504:	5852      	ldr	r2, [r2, r1]
   1d506:	0010      	movs	r0, r2
   1d508:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1d50a:	69fb      	ldr	r3, [r7, #28]
   1d50c:	2202      	movs	r2, #2
   1d50e:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   1d510:	69fb      	ldr	r3, [r7, #28]
   1d512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d514:	2b00      	cmp	r3, #0
   1d516:	d100      	bne.n	1d51a <_http_client_request+0x5a6>
   1d518:	e0b5      	b.n	1d686 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1d51a:	69fb      	ldr	r3, [r7, #28]
   1d51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d51e:	220c      	movs	r2, #12
   1d520:	2118      	movs	r1, #24
   1d522:	468c      	mov	ip, r1
   1d524:	44bc      	add	ip, r7
   1d526:	4462      	add	r2, ip
   1d528:	69f8      	ldr	r0, [r7, #28]
   1d52a:	2101      	movs	r1, #1
   1d52c:	4798      	blx	r3
				break;
   1d52e:	e0aa      	b.n	1d686 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   1d530:	69fb      	ldr	r3, [r7, #28]
   1d532:	22cc      	movs	r2, #204	; 0xcc
   1d534:	589b      	ldr	r3, [r3, r2]
   1d536:	2b00      	cmp	r3, #0
   1d538:	dc00      	bgt.n	1d53c <_http_client_request+0x5c8>
   1d53a:	e07c      	b.n	1d636 <_http_client_request+0x6c2>
   1d53c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d53e:	68db      	ldr	r3, [r3, #12]
   1d540:	2b00      	cmp	r3, #0
   1d542:	d100      	bne.n	1d546 <_http_client_request+0x5d2>
   1d544:	e077      	b.n	1d636 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   1d546:	69fb      	ldr	r3, [r7, #28]
   1d548:	22d0      	movs	r2, #208	; 0xd0
   1d54a:	589a      	ldr	r2, [r3, r2]
   1d54c:	69fb      	ldr	r3, [r7, #28]
   1d54e:	21cc      	movs	r1, #204	; 0xcc
   1d550:	585b      	ldr	r3, [r3, r1]
   1d552:	429a      	cmp	r2, r3
   1d554:	db1f      	blt.n	1d596 <_http_client_request+0x622>
				if (module->req.entity.close) {
   1d556:	69fb      	ldr	r3, [r7, #28]
   1d558:	22c0      	movs	r2, #192	; 0xc0
   1d55a:	589b      	ldr	r3, [r3, r2]
   1d55c:	2b00      	cmp	r3, #0
   1d55e:	d007      	beq.n	1d570 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   1d560:	69fb      	ldr	r3, [r7, #28]
   1d562:	22c0      	movs	r2, #192	; 0xc0
   1d564:	589b      	ldr	r3, [r3, r2]
   1d566:	69fa      	ldr	r2, [r7, #28]
   1d568:	21c4      	movs	r1, #196	; 0xc4
   1d56a:	5852      	ldr	r2, [r2, r1]
   1d56c:	0010      	movs	r0, r2
   1d56e:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   1d570:	69fb      	ldr	r3, [r7, #28]
   1d572:	2202      	movs	r2, #2
   1d574:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   1d576:	69fb      	ldr	r3, [r7, #28]
   1d578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d57a:	2b00      	cmp	r3, #0
   1d57c:	d100      	bne.n	1d580 <_http_client_request+0x60c>
   1d57e:	e084      	b.n	1d68a <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1d580:	69fb      	ldr	r3, [r7, #28]
   1d582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d584:	220c      	movs	r2, #12
   1d586:	2118      	movs	r1, #24
   1d588:	468c      	mov	ip, r1
   1d58a:	44bc      	add	ip, r7
   1d58c:	4462      	add	r2, ip
   1d58e:	69f8      	ldr	r0, [r7, #28]
   1d590:	2101      	movs	r1, #1
   1d592:	4798      	blx	r3
				break;
   1d594:	e079      	b.n	1d68a <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   1d596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d598:	68dc      	ldr	r4, [r3, #12]
   1d59a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1d59c:	6958      	ldr	r0, [r3, #20]
   1d59e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1d5a0:	69fb      	ldr	r3, [r7, #28]
   1d5a2:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   1d5a4:	69fb      	ldr	r3, [r7, #28]
   1d5a6:	22d0      	movs	r2, #208	; 0xd0
   1d5a8:	589b      	ldr	r3, [r3, r2]
   1d5aa:	002a      	movs	r2, r5
   1d5ac:	47a0      	blx	r4
   1d5ae:	0003      	movs	r3, r0
   1d5b0:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   1d5b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d5b4:	2b00      	cmp	r3, #0
   1d5b6:	da0d      	bge.n	1d5d4 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   1d5b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d5ba:	2b00      	cmp	r3, #0
   1d5bc:	d102      	bne.n	1d5c4 <_http_client_request+0x650>
   1d5be:	234d      	movs	r3, #77	; 0x4d
   1d5c0:	425b      	negs	r3, r3
   1d5c2:	e001      	b.n	1d5c8 <_http_client_request+0x654>
   1d5c4:	2305      	movs	r3, #5
   1d5c6:	425b      	negs	r3, r3
   1d5c8:	69fa      	ldr	r2, [r7, #28]
   1d5ca:	0019      	movs	r1, r3
   1d5cc:	0010      	movs	r0, r2
   1d5ce:	4b2c      	ldr	r3, [pc, #176]	; (1d680 <_http_client_request+0x70c>)
   1d5d0:	4798      	blx	r3
			if (size < 0) {
   1d5d2:	e057      	b.n	1d684 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   1d5d4:	69fb      	ldr	r3, [r7, #28]
   1d5d6:	22cc      	movs	r2, #204	; 0xcc
   1d5d8:	589a      	ldr	r2, [r3, r2]
   1d5da:	69fb      	ldr	r3, [r7, #28]
   1d5dc:	21d0      	movs	r1, #208	; 0xd0
   1d5de:	585b      	ldr	r3, [r3, r1]
   1d5e0:	1ad2      	subs	r2, r2, r3
   1d5e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d5e4:	429a      	cmp	r2, r3
   1d5e6:	da07      	bge.n	1d5f8 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   1d5e8:	69fb      	ldr	r3, [r7, #28]
   1d5ea:	22cc      	movs	r2, #204	; 0xcc
   1d5ec:	589a      	ldr	r2, [r3, r2]
   1d5ee:	69fb      	ldr	r3, [r7, #28]
   1d5f0:	21d0      	movs	r1, #208	; 0xd0
   1d5f2:	585b      	ldr	r3, [r3, r1]
   1d5f4:	1ad3      	subs	r3, r2, r3
   1d5f6:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   1d5f8:	69fb      	ldr	r3, [r7, #28]
   1d5fa:	2000      	movs	r0, #0
   1d5fc:	5618      	ldrsb	r0, [r3, r0]
   1d5fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   1d600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d602:	b29a      	uxth	r2, r3
   1d604:	2300      	movs	r3, #0
   1d606:	4c1d      	ldr	r4, [pc, #116]	; (1d67c <_http_client_request+0x708>)
   1d608:	47a0      	blx	r4
   1d60a:	0003      	movs	r3, r0
   1d60c:	663b      	str	r3, [r7, #96]	; 0x60
   1d60e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1d610:	2b00      	cmp	r3, #0
   1d612:	da07      	bge.n	1d624 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   1d614:	2305      	movs	r3, #5
   1d616:	425a      	negs	r2, r3
   1d618:	69fb      	ldr	r3, [r7, #28]
   1d61a:	0011      	movs	r1, r2
   1d61c:	0018      	movs	r0, r3
   1d61e:	4b18      	ldr	r3, [pc, #96]	; (1d680 <_http_client_request+0x70c>)
   1d620:	4798      	blx	r3
					return;
   1d622:	e03b      	b.n	1d69c <_http_client_request+0x728>
				module->req.sent_length += size;
   1d624:	69fb      	ldr	r3, [r7, #28]
   1d626:	22d0      	movs	r2, #208	; 0xd0
   1d628:	589a      	ldr	r2, [r3, r2]
   1d62a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1d62c:	18d2      	adds	r2, r2, r3
   1d62e:	69fb      	ldr	r3, [r7, #28]
   1d630:	21d0      	movs	r1, #208	; 0xd0
   1d632:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   1d634:	e026      	b.n	1d684 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   1d636:	69fb      	ldr	r3, [r7, #28]
   1d638:	2202      	movs	r2, #2
   1d63a:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   1d63c:	69fb      	ldr	r3, [r7, #28]
   1d63e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d640:	2b00      	cmp	r3, #0
   1d642:	d024      	beq.n	1d68e <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1d644:	69fb      	ldr	r3, [r7, #28]
   1d646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d648:	220c      	movs	r2, #12
   1d64a:	2118      	movs	r1, #24
   1d64c:	468c      	mov	ip, r1
   1d64e:	44bc      	add	ip, r7
   1d650:	4462      	add	r2, ip
   1d652:	69f8      	ldr	r0, [r7, #28]
   1d654:	2101      	movs	r1, #1
   1d656:	4798      	blx	r3
			break;
   1d658:	e019      	b.n	1d68e <_http_client_request+0x71a>
   1d65a:	46c0      	nop			; (mov r8, r8)
   1d65c:	000250ec 	.word	0x000250ec
   1d660:	000203e1 	.word	0x000203e1
   1d664:	000250f0 	.word	0x000250f0
   1d668:	0001ded5 	.word	0x0001ded5
   1d66c:	000204db 	.word	0x000204db
   1d670:	00025078 	.word	0x00025078
   1d674:	0001df11 	.word	0x0001df11
   1d678:	8000000f 	.word	0x8000000f
   1d67c:	00011459 	.word	0x00011459
   1d680:	0001ce21 	.word	0x0001ce21
		break;
   1d684:	e004      	b.n	1d690 <_http_client_request+0x71c>
				break;
   1d686:	46c0      	nop			; (mov r8, r8)
   1d688:	e002      	b.n	1d690 <_http_client_request+0x71c>
				break;
   1d68a:	46c0      	nop			; (mov r8, r8)
   1d68c:	e000      	b.n	1d690 <_http_client_request+0x71c>
			break;
   1d68e:	46c0      	nop			; (mov r8, r8)
   1d690:	69bb      	ldr	r3, [r7, #24]
   1d692:	469d      	mov	sp, r3
   1d694:	e004      	b.n	1d6a0 <_http_client_request+0x72c>
		return;
   1d696:	46c0      	nop			; (mov r8, r8)
   1d698:	e000      	b.n	1d69c <_http_client_request+0x728>
		return;
   1d69a:	46c0      	nop			; (mov r8, r8)
   1d69c:	69bb      	ldr	r3, [r7, #24]
   1d69e:	469d      	mov	sp, r3
	}
}
   1d6a0:	46bd      	mov	sp, r7
   1d6a2:	b01e      	add	sp, #120	; 0x78
   1d6a4:	bc04      	pop	{r2}
   1d6a6:	4690      	mov	r8, r2
   1d6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d6aa:	46c0      	nop			; (mov r8, r8)

0001d6ac <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   1d6ac:	b590      	push	{r4, r7, lr}
   1d6ae:	b083      	sub	sp, #12
   1d6b0:	af00      	add	r7, sp, #0
   1d6b2:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   1d6b4:	687b      	ldr	r3, [r7, #4]
   1d6b6:	2b00      	cmp	r3, #0
   1d6b8:	d021      	beq.n	1d6fe <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   1d6ba:	687b      	ldr	r3, [r7, #4]
   1d6bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d6be:	687b      	ldr	r3, [r7, #4]
   1d6c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1d6c2:	429a      	cmp	r2, r3
   1d6c4:	d307      	bcc.n	1d6d6 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   1d6c6:	238b      	movs	r3, #139	; 0x8b
   1d6c8:	425a      	negs	r2, r3
   1d6ca:	687b      	ldr	r3, [r7, #4]
   1d6cc:	0011      	movs	r1, r2
   1d6ce:	0018      	movs	r0, r3
   1d6d0:	4b0d      	ldr	r3, [pc, #52]	; (1d708 <_http_client_recv_packet+0x5c>)
   1d6d2:	4798      	blx	r3
		return;
   1d6d4:	e014      	b.n	1d700 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   1d6d6:	687b      	ldr	r3, [r7, #4]
   1d6d8:	2000      	movs	r0, #0
   1d6da:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   1d6dc:	687b      	ldr	r3, [r7, #4]
   1d6de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1d6e0:	687b      	ldr	r3, [r7, #4]
   1d6e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d6e4:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   1d6e6:	687b      	ldr	r3, [r7, #4]
   1d6e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   1d6ea:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   1d6ec:	687b      	ldr	r3, [r7, #4]
   1d6ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   1d6f0:	b29b      	uxth	r3, r3
   1d6f2:	1ad3      	subs	r3, r2, r3
   1d6f4:	b29a      	uxth	r2, r3
   1d6f6:	2300      	movs	r3, #0
   1d6f8:	4c04      	ldr	r4, [pc, #16]	; (1d70c <_http_client_recv_packet+0x60>)
   1d6fa:	47a0      	blx	r4
   1d6fc:	e000      	b.n	1d700 <_http_client_recv_packet+0x54>
		return;
   1d6fe:	46c0      	nop			; (mov r8, r8)
}
   1d700:	46bd      	mov	sp, r7
   1d702:	b003      	add	sp, #12
   1d704:	bd90      	pop	{r4, r7, pc}
   1d706:	46c0      	nop			; (mov r8, r8)
   1d708:	0001ce21 	.word	0x0001ce21
   1d70c:	000115bd 	.word	0x000115bd

0001d710 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   1d710:	b580      	push	{r7, lr}
   1d712:	b082      	sub	sp, #8
   1d714:	af00      	add	r7, sp, #0
   1d716:	6078      	str	r0, [r7, #4]
   1d718:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   1d71a:	687b      	ldr	r3, [r7, #4]
   1d71c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d71e:	683b      	ldr	r3, [r7, #0]
   1d720:	18d2      	adds	r2, r2, r3
   1d722:	687b      	ldr	r3, [r7, #4]
   1d724:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   1d726:	687b      	ldr	r3, [r7, #4]
   1d728:	2258      	movs	r2, #88	; 0x58
   1d72a:	5a9b      	ldrh	r3, [r3, r2]
   1d72c:	2b00      	cmp	r3, #0
   1d72e:	d007      	beq.n	1d740 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   1d730:	687b      	ldr	r3, [r7, #4]
   1d732:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1d734:	687b      	ldr	r3, [r7, #4]
   1d736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d738:	0019      	movs	r1, r3
   1d73a:	0010      	movs	r0, r2
   1d73c:	4b06      	ldr	r3, [pc, #24]	; (1d758 <_http_client_recved_packet+0x48>)
   1d73e:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   1d740:	46c0      	nop			; (mov r8, r8)
   1d742:	687b      	ldr	r3, [r7, #4]
   1d744:	0018      	movs	r0, r3
   1d746:	4b05      	ldr	r3, [pc, #20]	; (1d75c <_http_client_recved_packet+0x4c>)
   1d748:	4798      	blx	r3
   1d74a:	1e03      	subs	r3, r0, #0
   1d74c:	d1f9      	bne.n	1d742 <_http_client_recved_packet+0x32>
}
   1d74e:	46c0      	nop			; (mov r8, r8)
   1d750:	46bd      	mov	sp, r7
   1d752:	b002      	add	sp, #8
   1d754:	bd80      	pop	{r7, pc}
   1d756:	46c0      	nop			; (mov r8, r8)
   1d758:	0001e1cd 	.word	0x0001e1cd
   1d75c:	0001d761 	.word	0x0001d761

0001d760 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   1d760:	b580      	push	{r7, lr}
   1d762:	b082      	sub	sp, #8
   1d764:	af00      	add	r7, sp, #0
   1d766:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   1d768:	687b      	ldr	r3, [r7, #4]
   1d76a:	22d8      	movs	r2, #216	; 0xd8
   1d76c:	589b      	ldr	r3, [r3, r2]
   1d76e:	2b00      	cmp	r3, #0
   1d770:	d002      	beq.n	1d778 <_http_client_handle_response+0x18>
   1d772:	2b01      	cmp	r3, #1
   1d774:	d006      	beq.n	1d784 <_http_client_handle_response+0x24>
   1d776:	e00b      	b.n	1d790 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   1d778:	687b      	ldr	r3, [r7, #4]
   1d77a:	0018      	movs	r0, r3
   1d77c:	4b07      	ldr	r3, [pc, #28]	; (1d79c <_http_client_handle_response+0x3c>)
   1d77e:	4798      	blx	r3
   1d780:	0003      	movs	r3, r0
   1d782:	e006      	b.n	1d792 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   1d784:	687b      	ldr	r3, [r7, #4]
   1d786:	0018      	movs	r0, r3
   1d788:	4b05      	ldr	r3, [pc, #20]	; (1d7a0 <_http_client_handle_response+0x40>)
   1d78a:	4798      	blx	r3
   1d78c:	0003      	movs	r3, r0
   1d78e:	e000      	b.n	1d792 <_http_client_handle_response+0x32>
	}
	return 0;
   1d790:	2300      	movs	r3, #0
}
   1d792:	0018      	movs	r0, r3
   1d794:	46bd      	mov	sp, r7
   1d796:	b002      	add	sp, #8
   1d798:	bd80      	pop	{r7, pc}
   1d79a:	46c0      	nop			; (mov r8, r8)
   1d79c:	0001d7a5 	.word	0x0001d7a5
   1d7a0:	0001dc5d 	.word	0x0001dc5d

0001d7a4 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   1d7a4:	b590      	push	{r4, r7, lr}
   1d7a6:	b08b      	sub	sp, #44	; 0x2c
   1d7a8:	af00      	add	r7, sp, #0
   1d7aa:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   1d7ac:	687b      	ldr	r3, [r7, #4]
   1d7ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1d7b0:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1d7b2:	4b9a      	ldr	r3, [pc, #616]	; (1da1c <_http_client_handle_header+0x278>)
   1d7b4:	681a      	ldr	r2, [r3, #0]
   1d7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d7b8:	0011      	movs	r1, r2
   1d7ba:	0018      	movs	r0, r3
   1d7bc:	4b98      	ldr	r3, [pc, #608]	; (1da20 <_http_client_handle_header+0x27c>)
   1d7be:	4798      	blx	r3
   1d7c0:	0003      	movs	r3, r0
   1d7c2:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   1d7c4:	69bb      	ldr	r3, [r7, #24]
   1d7c6:	2b00      	cmp	r3, #0
   1d7c8:	d007      	beq.n	1d7da <_http_client_handle_header+0x36>
   1d7ca:	687b      	ldr	r3, [r7, #4]
   1d7cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1d7ce:	687b      	ldr	r3, [r7, #4]
   1d7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d7d2:	18d2      	adds	r2, r2, r3
   1d7d4:	69bb      	ldr	r3, [r7, #24]
   1d7d6:	429a      	cmp	r2, r3
   1d7d8:	d807      	bhi.n	1d7ea <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   1d7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d7dc:	687b      	ldr	r3, [r7, #4]
   1d7de:	0011      	movs	r1, r2
   1d7e0:	0018      	movs	r0, r3
   1d7e2:	4b90      	ldr	r3, [pc, #576]	; (1da24 <_http_client_handle_header+0x280>)
   1d7e4:	4798      	blx	r3
			return 0;
   1d7e6:	2300      	movs	r3, #0
   1d7e8:	e114      	b.n	1da14 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   1d7ea:	4b8c      	ldr	r3, [pc, #560]	; (1da1c <_http_client_handle_header+0x278>)
   1d7ec:	681c      	ldr	r4, [r3, #0]
   1d7ee:	4b8b      	ldr	r3, [pc, #556]	; (1da1c <_http_client_handle_header+0x278>)
   1d7f0:	681b      	ldr	r3, [r3, #0]
   1d7f2:	0018      	movs	r0, r3
   1d7f4:	4b8c      	ldr	r3, [pc, #560]	; (1da28 <_http_client_handle_header+0x284>)
   1d7f6:	4798      	blx	r3
   1d7f8:	0002      	movs	r2, r0
   1d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d7fc:	0021      	movs	r1, r4
   1d7fe:	0018      	movs	r0, r3
   1d800:	4b8a      	ldr	r3, [pc, #552]	; (1da2c <_http_client_handle_header+0x288>)
   1d802:	4798      	blx	r3
   1d804:	1e03      	subs	r3, r0, #0
   1d806:	d15d      	bne.n	1d8c4 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   1d808:	4b84      	ldr	r3, [pc, #528]	; (1da1c <_http_client_handle_header+0x278>)
   1d80a:	681b      	ldr	r3, [r3, #0]
   1d80c:	0018      	movs	r0, r3
   1d80e:	4b86      	ldr	r3, [pc, #536]	; (1da28 <_http_client_handle_header+0x284>)
   1d810:	4798      	blx	r3
   1d812:	0002      	movs	r2, r0
   1d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d816:	189a      	adds	r2, r3, r2
   1d818:	687b      	ldr	r3, [r7, #4]
   1d81a:	0011      	movs	r1, r2
   1d81c:	0018      	movs	r0, r3
   1d81e:	4b81      	ldr	r3, [pc, #516]	; (1da24 <_http_client_handle_header+0x280>)
   1d820:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   1d822:	687b      	ldr	r3, [r7, #4]
   1d824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d826:	2b00      	cmp	r3, #0
   1d828:	d046      	beq.n	1d8b8 <_http_client_handle_header+0x114>
   1d82a:	687b      	ldr	r3, [r7, #4]
   1d82c:	22e4      	movs	r2, #228	; 0xe4
   1d82e:	5a9b      	ldrh	r3, [r3, r2]
   1d830:	2b00      	cmp	r3, #0
   1d832:	d041      	beq.n	1d8b8 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   1d834:	687b      	ldr	r3, [r7, #4]
   1d836:	22dc      	movs	r2, #220	; 0xdc
   1d838:	589b      	ldr	r3, [r3, r2]
   1d83a:	2b00      	cmp	r3, #0
   1d83c:	da19      	bge.n	1d872 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   1d83e:	687b      	ldr	r3, [r7, #4]
   1d840:	22e4      	movs	r2, #228	; 0xe4
   1d842:	5a9a      	ldrh	r2, [r3, r2]
   1d844:	230c      	movs	r3, #12
   1d846:	18fb      	adds	r3, r7, r3
   1d848:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   1d84a:	230c      	movs	r3, #12
   1d84c:	18fb      	adds	r3, r7, r3
   1d84e:	2201      	movs	r2, #1
   1d850:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   1d852:	687b      	ldr	r3, [r7, #4]
   1d854:	22e0      	movs	r2, #224	; 0xe0
   1d856:	2100      	movs	r1, #0
   1d858:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   1d85a:	230c      	movs	r3, #12
   1d85c:	18fb      	adds	r3, r7, r3
   1d85e:	2200      	movs	r2, #0
   1d860:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1d862:	687b      	ldr	r3, [r7, #4]
   1d864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d866:	220c      	movs	r2, #12
   1d868:	18ba      	adds	r2, r7, r2
   1d86a:	6878      	ldr	r0, [r7, #4]
   1d86c:	2102      	movs	r1, #2
   1d86e:	4798      	blx	r3
   1d870:	e022      	b.n	1d8b8 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   1d872:	687b      	ldr	r3, [r7, #4]
   1d874:	22dc      	movs	r2, #220	; 0xdc
   1d876:	589a      	ldr	r2, [r3, r2]
   1d878:	687b      	ldr	r3, [r7, #4]
   1d87a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1d87c:	429a      	cmp	r2, r3
   1d87e:	dd1b      	ble.n	1d8b8 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   1d880:	687b      	ldr	r3, [r7, #4]
   1d882:	22e4      	movs	r2, #228	; 0xe4
   1d884:	5a9a      	ldrh	r2, [r3, r2]
   1d886:	230c      	movs	r3, #12
   1d888:	18fb      	adds	r3, r7, r3
   1d88a:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   1d88c:	687b      	ldr	r3, [r7, #4]
   1d88e:	22dc      	movs	r2, #220	; 0xdc
   1d890:	589b      	ldr	r3, [r3, r2]
   1d892:	001a      	movs	r2, r3
   1d894:	230c      	movs	r3, #12
   1d896:	18fb      	adds	r3, r7, r3
   1d898:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   1d89a:	230c      	movs	r3, #12
   1d89c:	18fb      	adds	r3, r7, r3
   1d89e:	2200      	movs	r2, #0
   1d8a0:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   1d8a2:	687b      	ldr	r3, [r7, #4]
   1d8a4:	22e0      	movs	r2, #224	; 0xe0
   1d8a6:	2100      	movs	r1, #0
   1d8a8:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1d8aa:	687b      	ldr	r3, [r7, #4]
   1d8ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1d8ae:	220c      	movs	r2, #12
   1d8b0:	18ba      	adds	r2, r7, r2
   1d8b2:	6878      	ldr	r0, [r7, #4]
   1d8b4:	2102      	movs	r1, #2
   1d8b6:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   1d8b8:	687b      	ldr	r3, [r7, #4]
   1d8ba:	22d8      	movs	r2, #216	; 0xd8
   1d8bc:	2101      	movs	r1, #1
   1d8be:	5099      	str	r1, [r3, r2]
			return 1;
   1d8c0:	2301      	movs	r3, #1
   1d8c2:	e0a7      	b.n	1da14 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   1d8c4:	495a      	ldr	r1, [pc, #360]	; (1da30 <_http_client_handle_header+0x28c>)
   1d8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d8c8:	2210      	movs	r2, #16
   1d8ca:	0018      	movs	r0, r3
   1d8cc:	4b57      	ldr	r3, [pc, #348]	; (1da2c <_http_client_handle_header+0x288>)
   1d8ce:	4798      	blx	r3
   1d8d0:	1e03      	subs	r3, r0, #0
   1d8d2:	d109      	bne.n	1d8e8 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   1d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d8d6:	3310      	adds	r3, #16
   1d8d8:	0018      	movs	r0, r3
   1d8da:	4b56      	ldr	r3, [pc, #344]	; (1da34 <_http_client_handle_header+0x290>)
   1d8dc:	4798      	blx	r3
   1d8de:	0001      	movs	r1, r0
   1d8e0:	687b      	ldr	r3, [r7, #4]
   1d8e2:	22dc      	movs	r2, #220	; 0xdc
   1d8e4:	5099      	str	r1, [r3, r2]
   1d8e6:	e08b      	b.n	1da00 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   1d8e8:	4953      	ldr	r1, [pc, #332]	; (1da38 <_http_client_handle_header+0x294>)
   1d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d8ec:	2213      	movs	r2, #19
   1d8ee:	0018      	movs	r0, r3
   1d8f0:	4b4e      	ldr	r3, [pc, #312]	; (1da2c <_http_client_handle_header+0x288>)
   1d8f2:	4798      	blx	r3
   1d8f4:	1e03      	subs	r3, r0, #0
   1d8f6:	d127      	bne.n	1d948 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   1d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d8fa:	3313      	adds	r3, #19
   1d8fc:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1d8fe:	e01e      	b.n	1d93e <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   1d900:	6a3b      	ldr	r3, [r7, #32]
   1d902:	781b      	ldrb	r3, [r3, #0]
   1d904:	2b20      	cmp	r3, #32
   1d906:	d103      	bne.n	1d910 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1d908:	6a3b      	ldr	r3, [r7, #32]
   1d90a:	3301      	adds	r3, #1
   1d90c:	623b      	str	r3, [r7, #32]
   1d90e:	e016      	b.n	1d93e <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   1d910:	6a3b      	ldr	r3, [r7, #32]
   1d912:	781b      	ldrb	r3, [r3, #0]
   1d914:	2b43      	cmp	r3, #67	; 0x43
   1d916:	d003      	beq.n	1d920 <_http_client_handle_header+0x17c>
   1d918:	6a3b      	ldr	r3, [r7, #32]
   1d91a:	781b      	ldrb	r3, [r3, #0]
   1d91c:	2b63      	cmp	r3, #99	; 0x63
   1d91e:	d105      	bne.n	1d92c <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   1d920:	687b      	ldr	r3, [r7, #4]
   1d922:	21cc      	movs	r1, #204	; 0xcc
   1d924:	2201      	movs	r2, #1
   1d926:	4252      	negs	r2, r2
   1d928:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   1d92a:	e069      	b.n	1da00 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   1d92c:	2386      	movs	r3, #134	; 0x86
   1d92e:	425a      	negs	r2, r3
   1d930:	687b      	ldr	r3, [r7, #4]
   1d932:	0011      	movs	r1, r2
   1d934:	0018      	movs	r0, r3
   1d936:	4b41      	ldr	r3, [pc, #260]	; (1da3c <_http_client_handle_header+0x298>)
   1d938:	4798      	blx	r3
					return 0;
   1d93a:	2300      	movs	r3, #0
   1d93c:	e06a      	b.n	1da14 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1d93e:	69ba      	ldr	r2, [r7, #24]
   1d940:	6a3b      	ldr	r3, [r7, #32]
   1d942:	429a      	cmp	r2, r3
   1d944:	d8dc      	bhi.n	1d900 <_http_client_handle_header+0x15c>
   1d946:	e05b      	b.n	1da00 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   1d948:	493d      	ldr	r1, [pc, #244]	; (1da40 <_http_client_handle_header+0x29c>)
   1d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d94c:	220c      	movs	r2, #12
   1d94e:	0018      	movs	r0, r3
   1d950:	4b36      	ldr	r3, [pc, #216]	; (1da2c <_http_client_handle_header+0x288>)
   1d952:	4798      	blx	r3
   1d954:	1e03      	subs	r3, r0, #0
   1d956:	d126      	bne.n	1d9a6 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   1d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d95a:	330c      	adds	r3, #12
   1d95c:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1d95e:	e01d      	b.n	1d99c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   1d960:	69fb      	ldr	r3, [r7, #28]
   1d962:	781b      	ldrb	r3, [r3, #0]
   1d964:	2b20      	cmp	r3, #32
   1d966:	d103      	bne.n	1d970 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1d968:	69fb      	ldr	r3, [r7, #28]
   1d96a:	3301      	adds	r3, #1
   1d96c:	61fb      	str	r3, [r7, #28]
   1d96e:	e015      	b.n	1d99c <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   1d970:	69fb      	ldr	r3, [r7, #28]
   1d972:	781b      	ldrb	r3, [r3, #0]
   1d974:	2b4b      	cmp	r3, #75	; 0x4b
   1d976:	d003      	beq.n	1d980 <_http_client_handle_header+0x1dc>
   1d978:	69fb      	ldr	r3, [r7, #28]
   1d97a:	781b      	ldrb	r3, [r3, #0]
   1d97c:	2b6b      	cmp	r3, #107	; 0x6b
   1d97e:	d106      	bne.n	1d98e <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   1d980:	687b      	ldr	r3, [r7, #4]
   1d982:	2241      	movs	r2, #65	; 0x41
   1d984:	5c99      	ldrb	r1, [r3, r2]
   1d986:	2002      	movs	r0, #2
   1d988:	4301      	orrs	r1, r0
   1d98a:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   1d98c:	e038      	b.n	1da00 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   1d98e:	687b      	ldr	r3, [r7, #4]
   1d990:	2241      	movs	r2, #65	; 0x41
   1d992:	5c99      	ldrb	r1, [r3, r2]
   1d994:	2002      	movs	r0, #2
   1d996:	4381      	bics	r1, r0
   1d998:	5499      	strb	r1, [r3, r2]
				break;
   1d99a:	e031      	b.n	1da00 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1d99c:	69ba      	ldr	r2, [r7, #24]
   1d99e:	69fb      	ldr	r3, [r7, #28]
   1d9a0:	429a      	cmp	r2, r3
   1d9a2:	d8dd      	bhi.n	1d960 <_http_client_handle_header+0x1bc>
   1d9a4:	e02c      	b.n	1da00 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   1d9a6:	4927      	ldr	r1, [pc, #156]	; (1da44 <_http_client_handle_header+0x2a0>)
   1d9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d9aa:	2205      	movs	r2, #5
   1d9ac:	0018      	movs	r0, r3
   1d9ae:	4b1f      	ldr	r3, [pc, #124]	; (1da2c <_http_client_handle_header+0x288>)
   1d9b0:	4798      	blx	r3
   1d9b2:	1e03      	subs	r3, r0, #0
   1d9b4:	d124      	bne.n	1da00 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   1d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d9b8:	3309      	adds	r3, #9
   1d9ba:	0018      	movs	r0, r3
   1d9bc:	4b1d      	ldr	r3, [pc, #116]	; (1da34 <_http_client_handle_header+0x290>)
   1d9be:	4798      	blx	r3
   1d9c0:	0003      	movs	r3, r0
   1d9c2:	b299      	uxth	r1, r3
   1d9c4:	687b      	ldr	r3, [r7, #4]
   1d9c6:	22e4      	movs	r2, #228	; 0xe4
   1d9c8:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   1d9ca:	687b      	ldr	r3, [r7, #4]
   1d9cc:	22dc      	movs	r2, #220	; 0xdc
   1d9ce:	2100      	movs	r1, #0
   1d9d0:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   1d9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d9d4:	3305      	adds	r3, #5
   1d9d6:	781b      	ldrb	r3, [r3, #0]
   1d9d8:	2b31      	cmp	r3, #49	; 0x31
   1d9da:	d804      	bhi.n	1d9e6 <_http_client_handle_header+0x242>
   1d9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d9de:	3307      	adds	r3, #7
   1d9e0:	781b      	ldrb	r3, [r3, #0]
   1d9e2:	2b30      	cmp	r3, #48	; 0x30
   1d9e4:	d906      	bls.n	1d9f4 <_http_client_handle_header+0x250>
				module->permanent = 1;
   1d9e6:	687b      	ldr	r3, [r7, #4]
   1d9e8:	2241      	movs	r2, #65	; 0x41
   1d9ea:	5c99      	ldrb	r1, [r3, r2]
   1d9ec:	2002      	movs	r0, #2
   1d9ee:	4301      	orrs	r1, r0
   1d9f0:	5499      	strb	r1, [r3, r2]
   1d9f2:	e005      	b.n	1da00 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   1d9f4:	687b      	ldr	r3, [r7, #4]
   1d9f6:	2241      	movs	r2, #65	; 0x41
   1d9f8:	5c99      	ldrb	r1, [r3, r2]
   1d9fa:	2002      	movs	r0, #2
   1d9fc:	4381      	bics	r1, r0
   1d9fe:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   1da00:	4b06      	ldr	r3, [pc, #24]	; (1da1c <_http_client_handle_header+0x278>)
   1da02:	681b      	ldr	r3, [r3, #0]
   1da04:	0018      	movs	r0, r3
   1da06:	4b08      	ldr	r3, [pc, #32]	; (1da28 <_http_client_handle_header+0x284>)
   1da08:	4798      	blx	r3
   1da0a:	0002      	movs	r2, r0
   1da0c:	69bb      	ldr	r3, [r7, #24]
   1da0e:	189b      	adds	r3, r3, r2
   1da10:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1da12:	e6ce      	b.n	1d7b2 <_http_client_handle_header+0xe>
	}
}
   1da14:	0018      	movs	r0, r3
   1da16:	46bd      	mov	sp, r7
   1da18:	b00b      	add	sp, #44	; 0x2c
   1da1a:	bd90      	pop	{r4, r7, pc}
   1da1c:	20000110 	.word	0x20000110
   1da20:	00020559 	.word	0x00020559
   1da24:	0001de09 	.word	0x0001de09
   1da28:	000204db 	.word	0x000204db
   1da2c:	000204e9 	.word	0x000204e9
   1da30:	000250f0 	.word	0x000250f0
   1da34:	00020071 	.word	0x00020071
   1da38:	00025114 	.word	0x00025114
   1da3c:	0001ce21 	.word	0x0001ce21
   1da40:	00025128 	.word	0x00025128
   1da44:	00025138 	.word	0x00025138

0001da48 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   1da48:	b580      	push	{r7, lr}
   1da4a:	b088      	sub	sp, #32
   1da4c:	af00      	add	r7, sp, #0
   1da4e:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   1da50:	687b      	ldr	r3, [r7, #4]
   1da52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1da54:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   1da56:	2300      	movs	r3, #0
   1da58:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   1da5a:	687b      	ldr	r3, [r7, #4]
   1da5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1da5e:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   1da60:	687b      	ldr	r3, [r7, #4]
   1da62:	22e0      	movs	r2, #224	; 0xe0
   1da64:	589b      	ldr	r3, [r3, r2]
   1da66:	2b00      	cmp	r3, #0
   1da68:	db71      	blt.n	1db4e <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   1da6a:	687b      	ldr	r3, [r7, #4]
   1da6c:	22e0      	movs	r2, #224	; 0xe0
   1da6e:	589b      	ldr	r3, [r3, r2]
   1da70:	2b00      	cmp	r3, #0
   1da72:	d134      	bne.n	1dade <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   1da74:	687b      	ldr	r3, [r7, #4]
   1da76:	22d8      	movs	r2, #216	; 0xd8
   1da78:	2100      	movs	r1, #0
   1da7a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1da7c:	687b      	ldr	r3, [r7, #4]
   1da7e:	22e4      	movs	r2, #228	; 0xe4
   1da80:	2100      	movs	r1, #0
   1da82:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   1da84:	2308      	movs	r3, #8
   1da86:	18fb      	adds	r3, r7, r3
   1da88:	2201      	movs	r2, #1
   1da8a:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   1da8c:	2308      	movs	r3, #8
   1da8e:	18fb      	adds	r3, r7, r3
   1da90:	2200      	movs	r2, #0
   1da92:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   1da94:	2308      	movs	r3, #8
   1da96:	18fb      	adds	r3, r7, r3
   1da98:	2200      	movs	r2, #0
   1da9a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   1da9c:	687b      	ldr	r3, [r7, #4]
   1da9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1daa0:	2b00      	cmp	r3, #0
   1daa2:	d006      	beq.n	1dab2 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1daa4:	687b      	ldr	r3, [r7, #4]
   1daa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1daa8:	2208      	movs	r2, #8
   1daaa:	18ba      	adds	r2, r7, r2
   1daac:	6878      	ldr	r0, [r7, #4]
   1daae:	2103      	movs	r1, #3
   1dab0:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   1dab2:	687b      	ldr	r3, [r7, #4]
   1dab4:	2241      	movs	r2, #65	; 0x41
   1dab6:	5c9b      	ldrb	r3, [r3, r2]
   1dab8:	2202      	movs	r2, #2
   1daba:	4013      	ands	r3, r2
   1dabc:	b2db      	uxtb	r3, r3
   1dabe:	2b00      	cmp	r3, #0
   1dac0:	d105      	bne.n	1dace <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   1dac2:	687b      	ldr	r3, [r7, #4]
   1dac4:	2100      	movs	r1, #0
   1dac6:	0018      	movs	r0, r3
   1dac8:	4b62      	ldr	r3, [pc, #392]	; (1dc54 <_http_client_read_chuked_entity+0x20c>)
   1daca:	4798      	blx	r3
					return;
   1dacc:	e0bf      	b.n	1dc4e <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   1dace:	697b      	ldr	r3, [r7, #20]
   1dad0:	1c9a      	adds	r2, r3, #2
   1dad2:	687b      	ldr	r3, [r7, #4]
   1dad4:	0011      	movs	r1, r2
   1dad6:	0018      	movs	r0, r3
   1dad8:	4b5f      	ldr	r3, [pc, #380]	; (1dc58 <_http_client_read_chuked_entity+0x210>)
   1dada:	4798      	blx	r3
   1dadc:	e0b2      	b.n	1dc44 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   1dade:	687b      	ldr	r3, [r7, #4]
   1dae0:	22e0      	movs	r2, #224	; 0xe0
   1dae2:	589a      	ldr	r2, [r3, r2]
   1dae4:	69fb      	ldr	r3, [r7, #28]
   1dae6:	429a      	cmp	r2, r3
   1dae8:	dd00      	ble.n	1daec <_http_client_read_chuked_entity+0xa4>
   1daea:	e0ab      	b.n	1dc44 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   1daec:	687b      	ldr	r3, [r7, #4]
   1daee:	22e0      	movs	r2, #224	; 0xe0
   1daf0:	589b      	ldr	r3, [r3, r2]
   1daf2:	001a      	movs	r2, r3
   1daf4:	2308      	movs	r3, #8
   1daf6:	18fb      	adds	r3, r7, r3
   1daf8:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   1dafa:	2308      	movs	r3, #8
   1dafc:	18fb      	adds	r3, r7, r3
   1dafe:	697a      	ldr	r2, [r7, #20]
   1db00:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   1db02:	2308      	movs	r3, #8
   1db04:	18fb      	adds	r3, r7, r3
   1db06:	2200      	movs	r2, #0
   1db08:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   1db0a:	687b      	ldr	r3, [r7, #4]
   1db0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1db0e:	2b00      	cmp	r3, #0
   1db10:	d006      	beq.n	1db20 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1db12:	687b      	ldr	r3, [r7, #4]
   1db14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1db16:	2208      	movs	r2, #8
   1db18:	18ba      	adds	r2, r7, r2
   1db1a:	6878      	ldr	r0, [r7, #4]
   1db1c:	2103      	movs	r1, #3
   1db1e:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   1db20:	687b      	ldr	r3, [r7, #4]
   1db22:	22e0      	movs	r2, #224	; 0xe0
   1db24:	589b      	ldr	r3, [r3, r2]
   1db26:	3302      	adds	r3, #2
   1db28:	697a      	ldr	r2, [r7, #20]
   1db2a:	18d2      	adds	r2, r2, r3
   1db2c:	687b      	ldr	r3, [r7, #4]
   1db2e:	0011      	movs	r1, r2
   1db30:	0018      	movs	r0, r3
   1db32:	4b49      	ldr	r3, [pc, #292]	; (1dc58 <_http_client_read_chuked_entity+0x210>)
   1db34:	4798      	blx	r3
				length = (int)module->recved_size;
   1db36:	687b      	ldr	r3, [r7, #4]
   1db38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1db3a:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   1db3c:	687b      	ldr	r3, [r7, #4]
   1db3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1db40:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   1db42:	687b      	ldr	r3, [r7, #4]
   1db44:	21e0      	movs	r1, #224	; 0xe0
   1db46:	2201      	movs	r2, #1
   1db48:	4252      	negs	r2, r2
   1db4a:	505a      	str	r2, [r3, r1]
   1db4c:	e07a      	b.n	1dc44 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   1db4e:	687b      	ldr	r3, [r7, #4]
   1db50:	22e0      	movs	r2, #224	; 0xe0
   1db52:	2100      	movs	r1, #0
   1db54:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   1db56:	e05a      	b.n	1dc0e <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   1db58:	697b      	ldr	r3, [r7, #20]
   1db5a:	781b      	ldrb	r3, [r3, #0]
   1db5c:	2b0a      	cmp	r3, #10
   1db5e:	d106      	bne.n	1db6e <_http_client_read_chuked_entity+0x126>
					buffer++;
   1db60:	697b      	ldr	r3, [r7, #20]
   1db62:	3301      	adds	r3, #1
   1db64:	617b      	str	r3, [r7, #20]
					length--;
   1db66:	69fb      	ldr	r3, [r7, #28]
   1db68:	3b01      	subs	r3, #1
   1db6a:	61fb      	str	r3, [r7, #28]
					break;
   1db6c:	e052      	b.n	1dc14 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   1db6e:	69bb      	ldr	r3, [r7, #24]
   1db70:	2b00      	cmp	r3, #0
   1db72:	d145      	bne.n	1dc00 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   1db74:	697b      	ldr	r3, [r7, #20]
   1db76:	781b      	ldrb	r3, [r3, #0]
   1db78:	2b2f      	cmp	r3, #47	; 0x2f
   1db7a:	d910      	bls.n	1db9e <_http_client_read_chuked_entity+0x156>
   1db7c:	697b      	ldr	r3, [r7, #20]
   1db7e:	781b      	ldrb	r3, [r3, #0]
   1db80:	2b39      	cmp	r3, #57	; 0x39
   1db82:	d80c      	bhi.n	1db9e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   1db84:	687b      	ldr	r3, [r7, #4]
   1db86:	22e0      	movs	r2, #224	; 0xe0
   1db88:	589b      	ldr	r3, [r3, r2]
   1db8a:	011b      	lsls	r3, r3, #4
   1db8c:	697a      	ldr	r2, [r7, #20]
   1db8e:	7812      	ldrb	r2, [r2, #0]
   1db90:	189b      	adds	r3, r3, r2
   1db92:	3b30      	subs	r3, #48	; 0x30
   1db94:	001a      	movs	r2, r3
   1db96:	687b      	ldr	r3, [r7, #4]
   1db98:	21e0      	movs	r1, #224	; 0xe0
   1db9a:	505a      	str	r2, [r3, r1]
   1db9c:	e031      	b.n	1dc02 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   1db9e:	697b      	ldr	r3, [r7, #20]
   1dba0:	781b      	ldrb	r3, [r3, #0]
   1dba2:	2b60      	cmp	r3, #96	; 0x60
   1dba4:	d910      	bls.n	1dbc8 <_http_client_read_chuked_entity+0x180>
   1dba6:	697b      	ldr	r3, [r7, #20]
   1dba8:	781b      	ldrb	r3, [r3, #0]
   1dbaa:	2b66      	cmp	r3, #102	; 0x66
   1dbac:	d80c      	bhi.n	1dbc8 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   1dbae:	687b      	ldr	r3, [r7, #4]
   1dbb0:	22e0      	movs	r2, #224	; 0xe0
   1dbb2:	589b      	ldr	r3, [r3, r2]
   1dbb4:	011b      	lsls	r3, r3, #4
   1dbb6:	697a      	ldr	r2, [r7, #20]
   1dbb8:	7812      	ldrb	r2, [r2, #0]
   1dbba:	189b      	adds	r3, r3, r2
   1dbbc:	3b61      	subs	r3, #97	; 0x61
   1dbbe:	001a      	movs	r2, r3
   1dbc0:	687b      	ldr	r3, [r7, #4]
   1dbc2:	21e0      	movs	r1, #224	; 0xe0
   1dbc4:	505a      	str	r2, [r3, r1]
   1dbc6:	e01c      	b.n	1dc02 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   1dbc8:	697b      	ldr	r3, [r7, #20]
   1dbca:	781b      	ldrb	r3, [r3, #0]
   1dbcc:	2b40      	cmp	r3, #64	; 0x40
   1dbce:	d910      	bls.n	1dbf2 <_http_client_read_chuked_entity+0x1aa>
   1dbd0:	697b      	ldr	r3, [r7, #20]
   1dbd2:	781b      	ldrb	r3, [r3, #0]
   1dbd4:	2b46      	cmp	r3, #70	; 0x46
   1dbd6:	d80c      	bhi.n	1dbf2 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   1dbd8:	687b      	ldr	r3, [r7, #4]
   1dbda:	22e0      	movs	r2, #224	; 0xe0
   1dbdc:	589b      	ldr	r3, [r3, r2]
   1dbde:	011b      	lsls	r3, r3, #4
   1dbe0:	697a      	ldr	r2, [r7, #20]
   1dbe2:	7812      	ldrb	r2, [r2, #0]
   1dbe4:	189b      	adds	r3, r3, r2
   1dbe6:	3b41      	subs	r3, #65	; 0x41
   1dbe8:	001a      	movs	r2, r3
   1dbea:	687b      	ldr	r3, [r7, #4]
   1dbec:	21e0      	movs	r1, #224	; 0xe0
   1dbee:	505a      	str	r2, [r3, r1]
   1dbf0:	e007      	b.n	1dc02 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   1dbf2:	697b      	ldr	r3, [r7, #20]
   1dbf4:	781b      	ldrb	r3, [r3, #0]
   1dbf6:	2b3b      	cmp	r3, #59	; 0x3b
   1dbf8:	d103      	bne.n	1dc02 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   1dbfa:	2301      	movs	r3, #1
   1dbfc:	61bb      	str	r3, [r7, #24]
   1dbfe:	e000      	b.n	1dc02 <_http_client_read_chuked_entity+0x1ba>
					continue;
   1dc00:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   1dc02:	697b      	ldr	r3, [r7, #20]
   1dc04:	3301      	adds	r3, #1
   1dc06:	617b      	str	r3, [r7, #20]
   1dc08:	69fb      	ldr	r3, [r7, #28]
   1dc0a:	3b01      	subs	r3, #1
   1dc0c:	61fb      	str	r3, [r7, #28]
   1dc0e:	69fb      	ldr	r3, [r7, #28]
   1dc10:	2b00      	cmp	r3, #0
   1dc12:	dca1      	bgt.n	1db58 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   1dc14:	687b      	ldr	r3, [r7, #4]
   1dc16:	22e0      	movs	r2, #224	; 0xe0
   1dc18:	589a      	ldr	r2, [r3, r2]
   1dc1a:	687b      	ldr	r3, [r7, #4]
   1dc1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1dc1e:	429a      	cmp	r2, r3
   1dc20:	dd07      	ble.n	1dc32 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   1dc22:	238b      	movs	r3, #139	; 0x8b
   1dc24:	425a      	negs	r2, r3
   1dc26:	687b      	ldr	r3, [r7, #4]
   1dc28:	0011      	movs	r1, r2
   1dc2a:	0018      	movs	r0, r3
   1dc2c:	4b09      	ldr	r3, [pc, #36]	; (1dc54 <_http_client_read_chuked_entity+0x20c>)
   1dc2e:	4798      	blx	r3
				return;
   1dc30:	e00d      	b.n	1dc4e <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   1dc32:	69fb      	ldr	r3, [r7, #28]
   1dc34:	2b00      	cmp	r3, #0
   1dc36:	d105      	bne.n	1dc44 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   1dc38:	687b      	ldr	r3, [r7, #4]
   1dc3a:	21e0      	movs	r1, #224	; 0xe0
   1dc3c:	2201      	movs	r2, #1
   1dc3e:	4252      	negs	r2, r2
   1dc40:	505a      	str	r2, [r3, r1]
				return;
   1dc42:	e004      	b.n	1dc4e <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   1dc44:	687b      	ldr	r3, [r7, #4]
   1dc46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dc48:	2b00      	cmp	r3, #0
   1dc4a:	d000      	beq.n	1dc4e <_http_client_read_chuked_entity+0x206>
   1dc4c:	e708      	b.n	1da60 <_http_client_read_chuked_entity+0x18>
}
   1dc4e:	46bd      	mov	sp, r7
   1dc50:	b008      	add	sp, #32
   1dc52:	bd80      	pop	{r7, pc}
   1dc54:	0001ce21 	.word	0x0001ce21
   1dc58:	0001de09 	.word	0x0001de09

0001dc5c <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   1dc5c:	b580      	push	{r7, lr}
   1dc5e:	b086      	sub	sp, #24
   1dc60:	af00      	add	r7, sp, #0
   1dc62:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   1dc64:	687b      	ldr	r3, [r7, #4]
   1dc66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1dc68:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   1dc6a:	687b      	ldr	r3, [r7, #4]
   1dc6c:	22dc      	movs	r2, #220	; 0xdc
   1dc6e:	589b      	ldr	r3, [r3, r2]
   1dc70:	2b00      	cmp	r3, #0
   1dc72:	db58      	blt.n	1dd26 <_http_client_handle_entity+0xca>
   1dc74:	687b      	ldr	r3, [r7, #4]
   1dc76:	22dc      	movs	r2, #220	; 0xdc
   1dc78:	589a      	ldr	r2, [r3, r2]
   1dc7a:	687b      	ldr	r3, [r7, #4]
   1dc7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1dc7e:	429a      	cmp	r2, r3
   1dc80:	dc51      	bgt.n	1dd26 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   1dc82:	687b      	ldr	r3, [r7, #4]
   1dc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dc86:	0019      	movs	r1, r3
   1dc88:	687b      	ldr	r3, [r7, #4]
   1dc8a:	22dc      	movs	r2, #220	; 0xdc
   1dc8c:	589b      	ldr	r3, [r3, r2]
   1dc8e:	4299      	cmp	r1, r3
   1dc90:	da00      	bge.n	1dc94 <_http_client_handle_entity+0x38>
   1dc92:	e0a9      	b.n	1dde8 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   1dc94:	687b      	ldr	r3, [r7, #4]
   1dc96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dc98:	2b00      	cmp	r3, #0
   1dc9a:	d020      	beq.n	1dcde <_http_client_handle_entity+0x82>
   1dc9c:	687b      	ldr	r3, [r7, #4]
   1dc9e:	22e4      	movs	r2, #228	; 0xe4
   1dca0:	5a9b      	ldrh	r3, [r3, r2]
   1dca2:	2b00      	cmp	r3, #0
   1dca4:	d01b      	beq.n	1dcde <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   1dca6:	687b      	ldr	r3, [r7, #4]
   1dca8:	22e4      	movs	r2, #228	; 0xe4
   1dcaa:	5a9a      	ldrh	r2, [r3, r2]
   1dcac:	2308      	movs	r3, #8
   1dcae:	18fb      	adds	r3, r7, r3
   1dcb0:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   1dcb2:	2308      	movs	r3, #8
   1dcb4:	18fb      	adds	r3, r7, r3
   1dcb6:	2200      	movs	r2, #0
   1dcb8:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   1dcba:	687b      	ldr	r3, [r7, #4]
   1dcbc:	22dc      	movs	r2, #220	; 0xdc
   1dcbe:	589b      	ldr	r3, [r3, r2]
   1dcc0:	001a      	movs	r2, r3
   1dcc2:	2308      	movs	r3, #8
   1dcc4:	18fb      	adds	r3, r7, r3
   1dcc6:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   1dcc8:	2308      	movs	r3, #8
   1dcca:	18fb      	adds	r3, r7, r3
   1dccc:	697a      	ldr	r2, [r7, #20]
   1dcce:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1dcd0:	687b      	ldr	r3, [r7, #4]
   1dcd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dcd4:	2208      	movs	r2, #8
   1dcd6:	18ba      	adds	r2, r7, r2
   1dcd8:	6878      	ldr	r0, [r7, #4]
   1dcda:	2102      	movs	r1, #2
   1dcdc:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   1dcde:	687b      	ldr	r3, [r7, #4]
   1dce0:	22d8      	movs	r2, #216	; 0xd8
   1dce2:	2100      	movs	r1, #0
   1dce4:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   1dce6:	687b      	ldr	r3, [r7, #4]
   1dce8:	22e4      	movs	r2, #228	; 0xe4
   1dcea:	2100      	movs	r1, #0
   1dcec:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   1dcee:	687b      	ldr	r3, [r7, #4]
   1dcf0:	2241      	movs	r2, #65	; 0x41
   1dcf2:	5c9b      	ldrb	r3, [r3, r2]
   1dcf4:	2202      	movs	r2, #2
   1dcf6:	4013      	ands	r3, r2
   1dcf8:	b2db      	uxtb	r3, r3
   1dcfa:	2b00      	cmp	r3, #0
   1dcfc:	d105      	bne.n	1dd0a <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   1dcfe:	687b      	ldr	r3, [r7, #4]
   1dd00:	2100      	movs	r1, #0
   1dd02:	0018      	movs	r0, r3
   1dd04:	4b3b      	ldr	r3, [pc, #236]	; (1ddf4 <_http_client_handle_entity+0x198>)
   1dd06:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   1dd08:	e06e      	b.n	1dde8 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   1dd0a:	687b      	ldr	r3, [r7, #4]
   1dd0c:	22dc      	movs	r2, #220	; 0xdc
   1dd0e:	589b      	ldr	r3, [r3, r2]
   1dd10:	001a      	movs	r2, r3
   1dd12:	697b      	ldr	r3, [r7, #20]
   1dd14:	189a      	adds	r2, r3, r2
   1dd16:	687b      	ldr	r3, [r7, #4]
   1dd18:	0011      	movs	r1, r2
   1dd1a:	0018      	movs	r0, r3
   1dd1c:	4b36      	ldr	r3, [pc, #216]	; (1ddf8 <_http_client_handle_entity+0x19c>)
   1dd1e:	4798      	blx	r3
				return module->recved_size;
   1dd20:	687b      	ldr	r3, [r7, #4]
   1dd22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dd24:	e061      	b.n	1ddea <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   1dd26:	687b      	ldr	r3, [r7, #4]
   1dd28:	22dc      	movs	r2, #220	; 0xdc
   1dd2a:	589b      	ldr	r3, [r3, r2]
   1dd2c:	2b00      	cmp	r3, #0
   1dd2e:	db57      	blt.n	1dde0 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   1dd30:	687b      	ldr	r3, [r7, #4]
   1dd32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dd34:	2308      	movs	r3, #8
   1dd36:	18fb      	adds	r3, r7, r3
   1dd38:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   1dd3a:	2308      	movs	r3, #8
   1dd3c:	18fb      	adds	r3, r7, r3
   1dd3e:	697a      	ldr	r2, [r7, #20]
   1dd40:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   1dd42:	687b      	ldr	r3, [r7, #4]
   1dd44:	22e0      	movs	r2, #224	; 0xe0
   1dd46:	589a      	ldr	r2, [r3, r2]
   1dd48:	687b      	ldr	r3, [r7, #4]
   1dd4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dd4c:	18d2      	adds	r2, r2, r3
   1dd4e:	687b      	ldr	r3, [r7, #4]
   1dd50:	21e0      	movs	r1, #224	; 0xe0
   1dd52:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   1dd54:	687b      	ldr	r3, [r7, #4]
   1dd56:	22dc      	movs	r2, #220	; 0xdc
   1dd58:	589a      	ldr	r2, [r3, r2]
   1dd5a:	687b      	ldr	r3, [r7, #4]
   1dd5c:	21e0      	movs	r1, #224	; 0xe0
   1dd5e:	585b      	ldr	r3, [r3, r1]
   1dd60:	429a      	cmp	r2, r3
   1dd62:	dc0c      	bgt.n	1dd7e <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   1dd64:	687b      	ldr	r3, [r7, #4]
   1dd66:	22d8      	movs	r2, #216	; 0xd8
   1dd68:	2100      	movs	r1, #0
   1dd6a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1dd6c:	687b      	ldr	r3, [r7, #4]
   1dd6e:	22e4      	movs	r2, #228	; 0xe4
   1dd70:	2100      	movs	r1, #0
   1dd72:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   1dd74:	2308      	movs	r3, #8
   1dd76:	18fb      	adds	r3, r7, r3
   1dd78:	2201      	movs	r2, #1
   1dd7a:	721a      	strb	r2, [r3, #8]
   1dd7c:	e003      	b.n	1dd86 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   1dd7e:	2308      	movs	r3, #8
   1dd80:	18fb      	adds	r3, r7, r3
   1dd82:	2200      	movs	r2, #0
   1dd84:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   1dd86:	687b      	ldr	r3, [r7, #4]
   1dd88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dd8a:	2b00      	cmp	r3, #0
   1dd8c:	d006      	beq.n	1dd9c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1dd8e:	687b      	ldr	r3, [r7, #4]
   1dd90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1dd92:	2208      	movs	r2, #8
   1dd94:	18ba      	adds	r2, r7, r2
   1dd96:	6878      	ldr	r0, [r7, #4]
   1dd98:	2103      	movs	r1, #3
   1dd9a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   1dd9c:	2308      	movs	r3, #8
   1dd9e:	18fb      	adds	r3, r7, r3
   1dda0:	7a1b      	ldrb	r3, [r3, #8]
   1dda2:	2b01      	cmp	r3, #1
   1dda4:	d112      	bne.n	1ddcc <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   1dda6:	687b      	ldr	r3, [r7, #4]
   1dda8:	2241      	movs	r2, #65	; 0x41
   1ddaa:	5c9b      	ldrb	r3, [r3, r2]
   1ddac:	2202      	movs	r2, #2
   1ddae:	4013      	ands	r3, r2
   1ddb0:	b2db      	uxtb	r3, r3
   1ddb2:	2b00      	cmp	r3, #0
   1ddb4:	d10a      	bne.n	1ddcc <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   1ddb6:	4b11      	ldr	r3, [pc, #68]	; (1ddfc <_http_client_handle_entity+0x1a0>)
   1ddb8:	0018      	movs	r0, r3
   1ddba:	4b11      	ldr	r3, [pc, #68]	; (1de00 <_http_client_handle_entity+0x1a4>)
   1ddbc:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   1ddbe:	687b      	ldr	r3, [r7, #4]
   1ddc0:	2100      	movs	r1, #0
   1ddc2:	0018      	movs	r0, r3
   1ddc4:	4b0b      	ldr	r3, [pc, #44]	; (1ddf4 <_http_client_handle_entity+0x198>)
   1ddc6:	4798      	blx	r3
					return 0;
   1ddc8:	2300      	movs	r3, #0
   1ddca:	e00e      	b.n	1ddea <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   1ddcc:	687b      	ldr	r3, [r7, #4]
   1ddce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ddd0:	697a      	ldr	r2, [r7, #20]
   1ddd2:	18d2      	adds	r2, r2, r3
   1ddd4:	687b      	ldr	r3, [r7, #4]
   1ddd6:	0011      	movs	r1, r2
   1ddd8:	0018      	movs	r0, r3
   1ddda:	4b07      	ldr	r3, [pc, #28]	; (1ddf8 <_http_client_handle_entity+0x19c>)
   1dddc:	4798      	blx	r3
   1ddde:	e003      	b.n	1dde8 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   1dde0:	687b      	ldr	r3, [r7, #4]
   1dde2:	0018      	movs	r0, r3
   1dde4:	4b07      	ldr	r3, [pc, #28]	; (1de04 <_http_client_handle_entity+0x1a8>)
   1dde6:	4798      	blx	r3
		}
	}

	return 0;
   1dde8:	2300      	movs	r3, #0
}
   1ddea:	0018      	movs	r0, r3
   1ddec:	46bd      	mov	sp, r7
   1ddee:	b006      	add	sp, #24
   1ddf0:	bd80      	pop	{r7, pc}
   1ddf2:	46c0      	nop			; (mov r8, r8)
   1ddf4:	0001ce21 	.word	0x0001ce21
   1ddf8:	0001de09 	.word	0x0001de09
   1ddfc:	00025140 	.word	0x00025140
   1de00:	00020345 	.word	0x00020345
   1de04:	0001da49 	.word	0x0001da49

0001de08 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   1de08:	b580      	push	{r7, lr}
   1de0a:	b084      	sub	sp, #16
   1de0c:	af00      	add	r7, sp, #0
   1de0e:	6078      	str	r0, [r7, #4]
   1de10:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   1de12:	687b      	ldr	r3, [r7, #4]
   1de14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1de16:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   1de18:	687b      	ldr	r3, [r7, #4]
   1de1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1de1c:	001a      	movs	r2, r3
   1de1e:	683b      	ldr	r3, [r7, #0]
   1de20:	1ad2      	subs	r2, r2, r3
   1de22:	68fb      	ldr	r3, [r7, #12]
   1de24:	18d3      	adds	r3, r2, r3
   1de26:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   1de28:	68bb      	ldr	r3, [r7, #8]
   1de2a:	2b00      	cmp	r3, #0
   1de2c:	dd09      	ble.n	1de42 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   1de2e:	68ba      	ldr	r2, [r7, #8]
   1de30:	6839      	ldr	r1, [r7, #0]
   1de32:	68fb      	ldr	r3, [r7, #12]
   1de34:	0018      	movs	r0, r3
   1de36:	4b06      	ldr	r3, [pc, #24]	; (1de50 <_http_client_move_buffer+0x48>)
   1de38:	4798      	blx	r3
		module->recved_size = remain;
   1de3a:	68ba      	ldr	r2, [r7, #8]
   1de3c:	687b      	ldr	r3, [r7, #4]
   1de3e:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   1de40:	e002      	b.n	1de48 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   1de42:	687b      	ldr	r3, [r7, #4]
   1de44:	2200      	movs	r2, #0
   1de46:	645a      	str	r2, [r3, #68]	; 0x44
}
   1de48:	46c0      	nop			; (mov r8, r8)
   1de4a:	46bd      	mov	sp, r7
   1de4c:	b004      	add	sp, #16
   1de4e:	bd80      	pop	{r7, pc}
   1de50:	000200ff 	.word	0x000200ff

0001de54 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   1de54:	b580      	push	{r7, lr}
   1de56:	b084      	sub	sp, #16
   1de58:	af00      	add	r7, sp, #0
   1de5a:	60f8      	str	r0, [r7, #12]
   1de5c:	60b9      	str	r1, [r7, #8]
   1de5e:	607a      	str	r2, [r7, #4]
   1de60:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   1de62:	68fb      	ldr	r3, [r7, #12]
   1de64:	687a      	ldr	r2, [r7, #4]
   1de66:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   1de68:	68fb      	ldr	r3, [r7, #12]
   1de6a:	68ba      	ldr	r2, [r7, #8]
   1de6c:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   1de6e:	68fb      	ldr	r3, [r7, #12]
   1de70:	2200      	movs	r2, #0
   1de72:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   1de74:	68fb      	ldr	r3, [r7, #12]
   1de76:	683a      	ldr	r2, [r7, #0]
   1de78:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   1de7a:	68fb      	ldr	r3, [r7, #12]
   1de7c:	69ba      	ldr	r2, [r7, #24]
   1de7e:	60da      	str	r2, [r3, #12]
}
   1de80:	46c0      	nop			; (mov r8, r8)
   1de82:	46bd      	mov	sp, r7
   1de84:	b004      	add	sp, #16
   1de86:	bd80      	pop	{r7, pc}

0001de88 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   1de88:	b580      	push	{r7, lr}
   1de8a:	b084      	sub	sp, #16
   1de8c:	af00      	add	r7, sp, #0
   1de8e:	6078      	str	r0, [r7, #4]
   1de90:	000a      	movs	r2, r1
   1de92:	1cfb      	adds	r3, r7, #3
   1de94:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   1de96:	687b      	ldr	r3, [r7, #4]
   1de98:	681a      	ldr	r2, [r3, #0]
   1de9a:	687b      	ldr	r3, [r7, #4]
   1de9c:	685b      	ldr	r3, [r3, #4]
   1de9e:	1ad3      	subs	r3, r2, r3
   1dea0:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   1dea2:	68fb      	ldr	r3, [r7, #12]
   1dea4:	2b00      	cmp	r3, #0
   1dea6:	dc03      	bgt.n	1deb0 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   1dea8:	687b      	ldr	r3, [r7, #4]
   1deaa:	0018      	movs	r0, r3
   1deac:	4b08      	ldr	r3, [pc, #32]	; (1ded0 <stream_writer_send_8+0x48>)
   1deae:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   1deb0:	687b      	ldr	r3, [r7, #4]
   1deb2:	6919      	ldr	r1, [r3, #16]
   1deb4:	687b      	ldr	r3, [r7, #4]
   1deb6:	685b      	ldr	r3, [r3, #4]
   1deb8:	1c58      	adds	r0, r3, #1
   1deba:	687a      	ldr	r2, [r7, #4]
   1debc:	6050      	str	r0, [r2, #4]
   1debe:	18cb      	adds	r3, r1, r3
   1dec0:	1cfa      	adds	r2, r7, #3
   1dec2:	7812      	ldrb	r2, [r2, #0]
   1dec4:	701a      	strb	r2, [r3, #0]
}
   1dec6:	46c0      	nop			; (mov r8, r8)
   1dec8:	46bd      	mov	sp, r7
   1deca:	b004      	add	sp, #16
   1decc:	bd80      	pop	{r7, pc}
   1dece:	46c0      	nop			; (mov r8, r8)
   1ded0:	0001df11 	.word	0x0001df11

0001ded4 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   1ded4:	b580      	push	{r7, lr}
   1ded6:	b084      	sub	sp, #16
   1ded8:	af00      	add	r7, sp, #0
   1deda:	60f8      	str	r0, [r7, #12]
   1dedc:	60b9      	str	r1, [r7, #8]
   1dede:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   1dee0:	e00d      	b.n	1defe <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   1dee2:	68bb      	ldr	r3, [r7, #8]
   1dee4:	781b      	ldrb	r3, [r3, #0]
   1dee6:	b25a      	sxtb	r2, r3
   1dee8:	68fb      	ldr	r3, [r7, #12]
   1deea:	0011      	movs	r1, r2
   1deec:	0018      	movs	r0, r3
   1deee:	4b07      	ldr	r3, [pc, #28]	; (1df0c <stream_writer_send_buffer+0x38>)
   1def0:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   1def2:	687b      	ldr	r3, [r7, #4]
   1def4:	3b01      	subs	r3, #1
   1def6:	607b      	str	r3, [r7, #4]
   1def8:	68bb      	ldr	r3, [r7, #8]
   1defa:	3301      	adds	r3, #1
   1defc:	60bb      	str	r3, [r7, #8]
   1defe:	687b      	ldr	r3, [r7, #4]
   1df00:	2b00      	cmp	r3, #0
   1df02:	d1ee      	bne.n	1dee2 <stream_writer_send_buffer+0xe>
	}
}
   1df04:	46c0      	nop			; (mov r8, r8)
   1df06:	46bd      	mov	sp, r7
   1df08:	b004      	add	sp, #16
   1df0a:	bd80      	pop	{r7, pc}
   1df0c:	0001de89 	.word	0x0001de89

0001df10 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   1df10:	b590      	push	{r4, r7, lr}
   1df12:	b083      	sub	sp, #12
   1df14:	af00      	add	r7, sp, #0
   1df16:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   1df18:	687b      	ldr	r3, [r7, #4]
   1df1a:	685b      	ldr	r3, [r3, #4]
   1df1c:	2b00      	cmp	r3, #0
   1df1e:	d00c      	beq.n	1df3a <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   1df20:	687b      	ldr	r3, [r7, #4]
   1df22:	689c      	ldr	r4, [r3, #8]
   1df24:	687b      	ldr	r3, [r7, #4]
   1df26:	68d8      	ldr	r0, [r3, #12]
   1df28:	687b      	ldr	r3, [r7, #4]
   1df2a:	6919      	ldr	r1, [r3, #16]
   1df2c:	687b      	ldr	r3, [r7, #4]
   1df2e:	685b      	ldr	r3, [r3, #4]
   1df30:	001a      	movs	r2, r3
   1df32:	47a0      	blx	r4
		writer->written = 0;
   1df34:	687b      	ldr	r3, [r7, #4]
   1df36:	2200      	movs	r2, #0
   1df38:	605a      	str	r2, [r3, #4]
	}
}
   1df3a:	46c0      	nop			; (mov r8, r8)
   1df3c:	46bd      	mov	sp, r7
   1df3e:	b003      	add	sp, #12
   1df40:	bd90      	pop	{r4, r7, pc}
	...

0001df44 <system_cpu_clock_get_hz>:
{
   1df44:	b580      	push	{r7, lr}
   1df46:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1df48:	2000      	movs	r0, #0
   1df4a:	4b05      	ldr	r3, [pc, #20]	; (1df60 <system_cpu_clock_get_hz+0x1c>)
   1df4c:	4798      	blx	r3
   1df4e:	0002      	movs	r2, r0
   1df50:	4b04      	ldr	r3, [pc, #16]	; (1df64 <system_cpu_clock_get_hz+0x20>)
   1df52:	7a1b      	ldrb	r3, [r3, #8]
   1df54:	b2db      	uxtb	r3, r3
   1df56:	40da      	lsrs	r2, r3
   1df58:	0013      	movs	r3, r2
}
   1df5a:	0018      	movs	r0, r3
   1df5c:	46bd      	mov	sp, r7
   1df5e:	bd80      	pop	{r7, pc}
   1df60:	00015925 	.word	0x00015925
   1df64:	40000400 	.word	0x40000400

0001df68 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   1df68:	b580      	push	{r7, lr}
   1df6a:	b084      	sub	sp, #16
   1df6c:	af00      	add	r7, sp, #0
   1df6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   1df70:	687b      	ldr	r3, [r7, #4]
   1df72:	681b      	ldr	r3, [r3, #0]
   1df74:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   1df76:	46c0      	nop			; (mov r8, r8)
   1df78:	68fb      	ldr	r3, [r7, #12]
   1df7a:	689b      	ldr	r3, [r3, #8]
   1df7c:	2202      	movs	r2, #2
   1df7e:	4013      	ands	r3, r2
   1df80:	d1fa      	bne.n	1df78 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   1df82:	68fb      	ldr	r3, [r7, #12]
   1df84:	681b      	ldr	r3, [r3, #0]
   1df86:	2202      	movs	r2, #2
   1df88:	431a      	orrs	r2, r3
   1df8a:	68fb      	ldr	r3, [r7, #12]
   1df8c:	601a      	str	r2, [r3, #0]
}
   1df8e:	46c0      	nop			; (mov r8, r8)
   1df90:	46bd      	mov	sp, r7
   1df92:	b004      	add	sp, #16
   1df94:	bd80      	pop	{r7, pc}
	...

0001df98 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   1df98:	b580      	push	{r7, lr}
   1df9a:	b082      	sub	sp, #8
   1df9c:	af00      	add	r7, sp, #0
   1df9e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   1dfa0:	4b04      	ldr	r3, [pc, #16]	; (1dfb4 <sw_timer_tcc_callback+0x1c>)
   1dfa2:	681b      	ldr	r3, [r3, #0]
   1dfa4:	1c5a      	adds	r2, r3, #1
   1dfa6:	4b03      	ldr	r3, [pc, #12]	; (1dfb4 <sw_timer_tcc_callback+0x1c>)
   1dfa8:	601a      	str	r2, [r3, #0]
}
   1dfaa:	46c0      	nop			; (mov r8, r8)
   1dfac:	46bd      	mov	sp, r7
   1dfae:	b002      	add	sp, #8
   1dfb0:	bd80      	pop	{r7, pc}
   1dfb2:	46c0      	nop			; (mov r8, r8)
   1dfb4:	20004178 	.word	0x20004178

0001dfb8 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   1dfb8:	b580      	push	{r7, lr}
   1dfba:	b082      	sub	sp, #8
   1dfbc:	af00      	add	r7, sp, #0
   1dfbe:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   1dfc0:	687b      	ldr	r3, [r7, #4]
   1dfc2:	2264      	movs	r2, #100	; 0x64
   1dfc4:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   1dfc6:	687b      	ldr	r3, [r7, #4]
   1dfc8:	2200      	movs	r2, #0
   1dfca:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   1dfcc:	687b      	ldr	r3, [r7, #4]
   1dfce:	2200      	movs	r2, #0
   1dfd0:	705a      	strb	r2, [r3, #1]
}
   1dfd2:	46c0      	nop			; (mov r8, r8)
   1dfd4:	46bd      	mov	sp, r7
   1dfd6:	b002      	add	sp, #8
   1dfd8:	bd80      	pop	{r7, pc}
	...

0001dfdc <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   1dfdc:	b590      	push	{r4, r7, lr}
   1dfde:	b0b1      	sub	sp, #196	; 0xc4
   1dfe0:	af00      	add	r7, sp, #0
   1dfe2:	6078      	str	r0, [r7, #4]
   1dfe4:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   1dfe6:	230c      	movs	r3, #12
   1dfe8:	18fb      	adds	r3, r7, r3
   1dfea:	4a2e      	ldr	r2, [pc, #184]	; (1e0a4 <sw_timer_init+0xc8>)
   1dfec:	ca13      	ldmia	r2!, {r0, r1, r4}
   1dfee:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   1dff0:	683b      	ldr	r3, [r7, #0]
   1dff2:	885b      	ldrh	r3, [r3, #2]
   1dff4:	001a      	movs	r2, r3
   1dff6:	687b      	ldr	r3, [r7, #4]
   1dff8:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   1dffa:	687b      	ldr	r3, [r7, #4]
   1dffc:	3314      	adds	r3, #20
   1dffe:	22bc      	movs	r2, #188	; 0xbc
   1e000:	18ba      	adds	r2, r7, r2
   1e002:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   1e004:	683b      	ldr	r3, [r7, #0]
   1e006:	781b      	ldrb	r3, [r3, #0]
   1e008:	001a      	movs	r2, r3
   1e00a:	230c      	movs	r3, #12
   1e00c:	18fb      	adds	r3, r7, r3
   1e00e:	0092      	lsls	r2, r2, #2
   1e010:	58d2      	ldr	r2, [r2, r3]
   1e012:	2318      	movs	r3, #24
   1e014:	18fb      	adds	r3, r7, r3
   1e016:	0011      	movs	r1, r2
   1e018:	0018      	movs	r0, r3
   1e01a:	4b23      	ldr	r3, [pc, #140]	; (1e0a8 <sw_timer_init+0xcc>)
   1e01c:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   1e01e:	4b23      	ldr	r3, [pc, #140]	; (1e0ac <sw_timer_init+0xd0>)
   1e020:	4798      	blx	r3
   1e022:	0004      	movs	r4, r0
   1e024:	683b      	ldr	r3, [r7, #0]
   1e026:	885b      	ldrh	r3, [r3, #2]
   1e028:	001a      	movs	r2, r3
   1e02a:	4b21      	ldr	r3, [pc, #132]	; (1e0b0 <sw_timer_init+0xd4>)
   1e02c:	0011      	movs	r1, r2
   1e02e:	22fa      	movs	r2, #250	; 0xfa
   1e030:	0210      	lsls	r0, r2, #8
   1e032:	4798      	blx	r3
   1e034:	0003      	movs	r3, r0
   1e036:	001a      	movs	r2, r3
   1e038:	4b1e      	ldr	r3, [pc, #120]	; (1e0b4 <sw_timer_init+0xd8>)
   1e03a:	0011      	movs	r1, r2
   1e03c:	0020      	movs	r0, r4
   1e03e:	4798      	blx	r3
   1e040:	0003      	movs	r3, r0
   1e042:	001a      	movs	r2, r3
   1e044:	2318      	movs	r3, #24
   1e046:	18fb      	adds	r3, r7, r3
   1e048:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   1e04a:	2318      	movs	r3, #24
   1e04c:	18fb      	adds	r3, r7, r3
   1e04e:	2205      	movs	r2, #5
   1e050:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   1e052:	683b      	ldr	r3, [r7, #0]
   1e054:	781b      	ldrb	r3, [r3, #0]
   1e056:	001a      	movs	r2, r3
   1e058:	230c      	movs	r3, #12
   1e05a:	18fb      	adds	r3, r7, r3
   1e05c:	0092      	lsls	r2, r2, #2
   1e05e:	58d1      	ldr	r1, [r2, r3]
   1e060:	2318      	movs	r3, #24
   1e062:	18fa      	adds	r2, r7, r3
   1e064:	23bc      	movs	r3, #188	; 0xbc
   1e066:	18fb      	adds	r3, r7, r3
   1e068:	681b      	ldr	r3, [r3, #0]
   1e06a:	0018      	movs	r0, r3
   1e06c:	4b12      	ldr	r3, [pc, #72]	; (1e0b8 <sw_timer_init+0xdc>)
   1e06e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1e070:	683b      	ldr	r3, [r7, #0]
   1e072:	785b      	ldrb	r3, [r3, #1]
   1e074:	3308      	adds	r3, #8
   1e076:	b2da      	uxtb	r2, r3
   1e078:	4910      	ldr	r1, [pc, #64]	; (1e0bc <sw_timer_init+0xe0>)
   1e07a:	23bc      	movs	r3, #188	; 0xbc
   1e07c:	18fb      	adds	r3, r7, r3
   1e07e:	681b      	ldr	r3, [r3, #0]
   1e080:	0018      	movs	r0, r3
   1e082:	4b0f      	ldr	r3, [pc, #60]	; (1e0c0 <sw_timer_init+0xe4>)
   1e084:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1e086:	683b      	ldr	r3, [r7, #0]
   1e088:	785b      	ldrb	r3, [r3, #1]
   1e08a:	3308      	adds	r3, #8
   1e08c:	b2da      	uxtb	r2, r3
   1e08e:	23bc      	movs	r3, #188	; 0xbc
   1e090:	18fb      	adds	r3, r7, r3
   1e092:	681b      	ldr	r3, [r3, #0]
   1e094:	0011      	movs	r1, r2
   1e096:	0018      	movs	r0, r3
   1e098:	4b0a      	ldr	r3, [pc, #40]	; (1e0c4 <sw_timer_init+0xe8>)
   1e09a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   1e09c:	46c0      	nop			; (mov r8, r8)
   1e09e:	46bd      	mov	sp, r7
   1e0a0:	b031      	add	sp, #196	; 0xc4
   1e0a2:	bd90      	pop	{r4, r7, pc}
   1e0a4:	00025180 	.word	0x00025180
   1e0a8:	00015ebd 	.word	0x00015ebd
   1e0ac:	0001df45 	.word	0x0001df45
   1e0b0:	0001e57d 	.word	0x0001e57d
   1e0b4:	0001e469 	.word	0x0001e469
   1e0b8:	00016519 	.word	0x00016519
   1e0bc:	0001df99 	.word	0x0001df99
   1e0c0:	00016931 	.word	0x00016931
   1e0c4:	00016971 	.word	0x00016971

0001e0c8 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   1e0c8:	b580      	push	{r7, lr}
   1e0ca:	b084      	sub	sp, #16
   1e0cc:	af00      	add	r7, sp, #0
   1e0ce:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   1e0d0:	687b      	ldr	r3, [r7, #4]
   1e0d2:	3314      	adds	r3, #20
   1e0d4:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   1e0d6:	68fb      	ldr	r3, [r7, #12]
   1e0d8:	0018      	movs	r0, r3
   1e0da:	4b03      	ldr	r3, [pc, #12]	; (1e0e8 <sw_timer_enable+0x20>)
   1e0dc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   1e0de:	46c0      	nop			; (mov r8, r8)
   1e0e0:	46bd      	mov	sp, r7
   1e0e2:	b004      	add	sp, #16
   1e0e4:	bd80      	pop	{r7, pc}
   1e0e6:	46c0      	nop			; (mov r8, r8)
   1e0e8:	0001df69 	.word	0x0001df69

0001e0ec <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   1e0ec:	b580      	push	{r7, lr}
   1e0ee:	b086      	sub	sp, #24
   1e0f0:	af00      	add	r7, sp, #0
   1e0f2:	60f8      	str	r0, [r7, #12]
   1e0f4:	60b9      	str	r1, [r7, #8]
   1e0f6:	607a      	str	r2, [r7, #4]
   1e0f8:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1e0fa:	2300      	movs	r3, #0
   1e0fc:	617b      	str	r3, [r7, #20]
   1e0fe:	e032      	b.n	1e166 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   1e100:	68f9      	ldr	r1, [r7, #12]
   1e102:	697a      	ldr	r2, [r7, #20]
   1e104:	0013      	movs	r3, r2
   1e106:	009b      	lsls	r3, r3, #2
   1e108:	189b      	adds	r3, r3, r2
   1e10a:	009b      	lsls	r3, r3, #2
   1e10c:	5c5b      	ldrb	r3, [r3, r1]
   1e10e:	07db      	lsls	r3, r3, #31
   1e110:	0fdb      	lsrs	r3, r3, #31
   1e112:	b2db      	uxtb	r3, r3
   1e114:	2b00      	cmp	r3, #0
   1e116:	d123      	bne.n	1e160 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   1e118:	697a      	ldr	r2, [r7, #20]
   1e11a:	0013      	movs	r3, r2
   1e11c:	009b      	lsls	r3, r3, #2
   1e11e:	189b      	adds	r3, r3, r2
   1e120:	009b      	lsls	r3, r3, #2
   1e122:	68fa      	ldr	r2, [r7, #12]
   1e124:	18d3      	adds	r3, r2, r3
   1e126:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   1e128:	693b      	ldr	r3, [r7, #16]
   1e12a:	68ba      	ldr	r2, [r7, #8]
   1e12c:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   1e12e:	693b      	ldr	r3, [r7, #16]
   1e130:	781a      	ldrb	r2, [r3, #0]
   1e132:	2102      	movs	r1, #2
   1e134:	438a      	bics	r2, r1
   1e136:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   1e138:	693b      	ldr	r3, [r7, #16]
   1e13a:	687a      	ldr	r2, [r7, #4]
   1e13c:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   1e13e:	68fb      	ldr	r3, [r7, #12]
   1e140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1e142:	4b0d      	ldr	r3, [pc, #52]	; (1e178 <sw_timer_register_callback+0x8c>)
   1e144:	0011      	movs	r1, r2
   1e146:	6838      	ldr	r0, [r7, #0]
   1e148:	4798      	blx	r3
   1e14a:	0003      	movs	r3, r0
   1e14c:	001a      	movs	r2, r3
   1e14e:	693b      	ldr	r3, [r7, #16]
   1e150:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   1e152:	693b      	ldr	r3, [r7, #16]
   1e154:	781a      	ldrb	r2, [r3, #0]
   1e156:	2101      	movs	r1, #1
   1e158:	430a      	orrs	r2, r1
   1e15a:	701a      	strb	r2, [r3, #0]
			return index;
   1e15c:	697b      	ldr	r3, [r7, #20]
   1e15e:	e007      	b.n	1e170 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1e160:	697b      	ldr	r3, [r7, #20]
   1e162:	3301      	adds	r3, #1
   1e164:	617b      	str	r3, [r7, #20]
   1e166:	697b      	ldr	r3, [r7, #20]
   1e168:	2b00      	cmp	r3, #0
   1e16a:	ddc9      	ble.n	1e100 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   1e16c:	2301      	movs	r3, #1
   1e16e:	425b      	negs	r3, r3
}
   1e170:	0018      	movs	r0, r3
   1e172:	46bd      	mov	sp, r7
   1e174:	b006      	add	sp, #24
   1e176:	bd80      	pop	{r7, pc}
   1e178:	0001e469 	.word	0x0001e469

0001e17c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   1e17c:	b580      	push	{r7, lr}
   1e17e:	b086      	sub	sp, #24
   1e180:	af00      	add	r7, sp, #0
   1e182:	60f8      	str	r0, [r7, #12]
   1e184:	60b9      	str	r1, [r7, #8]
   1e186:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   1e188:	68ba      	ldr	r2, [r7, #8]
   1e18a:	0013      	movs	r3, r2
   1e18c:	009b      	lsls	r3, r3, #2
   1e18e:	189b      	adds	r3, r3, r2
   1e190:	009b      	lsls	r3, r3, #2
   1e192:	68fa      	ldr	r2, [r7, #12]
   1e194:	18d3      	adds	r3, r2, r3
   1e196:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   1e198:	697b      	ldr	r3, [r7, #20]
   1e19a:	781a      	ldrb	r2, [r3, #0]
   1e19c:	2102      	movs	r1, #2
   1e19e:	430a      	orrs	r2, r1
   1e1a0:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   1e1a2:	68fb      	ldr	r3, [r7, #12]
   1e1a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1e1a6:	4b07      	ldr	r3, [pc, #28]	; (1e1c4 <sw_timer_enable_callback+0x48>)
   1e1a8:	0011      	movs	r1, r2
   1e1aa:	6878      	ldr	r0, [r7, #4]
   1e1ac:	4798      	blx	r3
   1e1ae:	0003      	movs	r3, r0
   1e1b0:	001a      	movs	r2, r3
   1e1b2:	4b05      	ldr	r3, [pc, #20]	; (1e1c8 <sw_timer_enable_callback+0x4c>)
   1e1b4:	681b      	ldr	r3, [r3, #0]
   1e1b6:	18d2      	adds	r2, r2, r3
   1e1b8:	697b      	ldr	r3, [r7, #20]
   1e1ba:	611a      	str	r2, [r3, #16]
}
   1e1bc:	46c0      	nop			; (mov r8, r8)
   1e1be:	46bd      	mov	sp, r7
   1e1c0:	b006      	add	sp, #24
   1e1c2:	bd80      	pop	{r7, pc}
   1e1c4:	0001e469 	.word	0x0001e469
   1e1c8:	20004178 	.word	0x20004178

0001e1cc <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   1e1cc:	b580      	push	{r7, lr}
   1e1ce:	b084      	sub	sp, #16
   1e1d0:	af00      	add	r7, sp, #0
   1e1d2:	6078      	str	r0, [r7, #4]
   1e1d4:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   1e1d6:	683a      	ldr	r2, [r7, #0]
   1e1d8:	0013      	movs	r3, r2
   1e1da:	009b      	lsls	r3, r3, #2
   1e1dc:	189b      	adds	r3, r3, r2
   1e1de:	009b      	lsls	r3, r3, #2
   1e1e0:	687a      	ldr	r2, [r7, #4]
   1e1e2:	18d3      	adds	r3, r2, r3
   1e1e4:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   1e1e6:	68fb      	ldr	r3, [r7, #12]
   1e1e8:	781a      	ldrb	r2, [r3, #0]
   1e1ea:	2102      	movs	r1, #2
   1e1ec:	438a      	bics	r2, r1
   1e1ee:	701a      	strb	r2, [r3, #0]
}
   1e1f0:	46c0      	nop			; (mov r8, r8)
   1e1f2:	46bd      	mov	sp, r7
   1e1f4:	b004      	add	sp, #16
   1e1f6:	bd80      	pop	{r7, pc}

0001e1f8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   1e1f8:	b590      	push	{r4, r7, lr}
   1e1fa:	b085      	sub	sp, #20
   1e1fc:	af00      	add	r7, sp, #0
   1e1fe:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1e200:	2300      	movs	r3, #0
   1e202:	60fb      	str	r3, [r7, #12]
   1e204:	e053      	b.n	1e2ae <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   1e206:	6879      	ldr	r1, [r7, #4]
   1e208:	68fa      	ldr	r2, [r7, #12]
   1e20a:	0013      	movs	r3, r2
   1e20c:	009b      	lsls	r3, r3, #2
   1e20e:	189b      	adds	r3, r3, r2
   1e210:	009b      	lsls	r3, r3, #2
   1e212:	5c5b      	ldrb	r3, [r3, r1]
   1e214:	07db      	lsls	r3, r3, #31
   1e216:	0fdb      	lsrs	r3, r3, #31
   1e218:	b2db      	uxtb	r3, r3
   1e21a:	2b00      	cmp	r3, #0
   1e21c:	d044      	beq.n	1e2a8 <sw_timer_task+0xb0>
   1e21e:	6879      	ldr	r1, [r7, #4]
   1e220:	68fa      	ldr	r2, [r7, #12]
   1e222:	0013      	movs	r3, r2
   1e224:	009b      	lsls	r3, r3, #2
   1e226:	189b      	adds	r3, r3, r2
   1e228:	009b      	lsls	r3, r3, #2
   1e22a:	5c5b      	ldrb	r3, [r3, r1]
   1e22c:	079b      	lsls	r3, r3, #30
   1e22e:	0fdb      	lsrs	r3, r3, #31
   1e230:	b2db      	uxtb	r3, r3
   1e232:	2b00      	cmp	r3, #0
   1e234:	d038      	beq.n	1e2a8 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   1e236:	68fa      	ldr	r2, [r7, #12]
   1e238:	0013      	movs	r3, r2
   1e23a:	009b      	lsls	r3, r3, #2
   1e23c:	189b      	adds	r3, r3, r2
   1e23e:	009b      	lsls	r3, r3, #2
   1e240:	687a      	ldr	r2, [r7, #4]
   1e242:	18d3      	adds	r3, r2, r3
   1e244:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   1e246:	68bb      	ldr	r3, [r7, #8]
   1e248:	691a      	ldr	r2, [r3, #16]
   1e24a:	4b1c      	ldr	r3, [pc, #112]	; (1e2bc <sw_timer_task+0xc4>)
   1e24c:	681b      	ldr	r3, [r3, #0]
   1e24e:	1ad3      	subs	r3, r2, r3
   1e250:	d52a      	bpl.n	1e2a8 <sw_timer_task+0xb0>
   1e252:	68bb      	ldr	r3, [r7, #8]
   1e254:	781b      	ldrb	r3, [r3, #0]
   1e256:	2204      	movs	r2, #4
   1e258:	4013      	ands	r3, r2
   1e25a:	b2db      	uxtb	r3, r3
   1e25c:	2b00      	cmp	r3, #0
   1e25e:	d123      	bne.n	1e2a8 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   1e260:	68bb      	ldr	r3, [r7, #8]
   1e262:	781a      	ldrb	r2, [r3, #0]
   1e264:	2104      	movs	r1, #4
   1e266:	430a      	orrs	r2, r1
   1e268:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   1e26a:	68bb      	ldr	r3, [r7, #8]
   1e26c:	68db      	ldr	r3, [r3, #12]
   1e26e:	2b00      	cmp	r3, #0
   1e270:	d007      	beq.n	1e282 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   1e272:	68bb      	ldr	r3, [r7, #8]
   1e274:	68da      	ldr	r2, [r3, #12]
   1e276:	4b11      	ldr	r3, [pc, #68]	; (1e2bc <sw_timer_task+0xc4>)
   1e278:	681b      	ldr	r3, [r3, #0]
   1e27a:	18d2      	adds	r2, r2, r3
   1e27c:	68bb      	ldr	r3, [r7, #8]
   1e27e:	611a      	str	r2, [r3, #16]
   1e280:	e004      	b.n	1e28c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   1e282:	68bb      	ldr	r3, [r7, #8]
   1e284:	781a      	ldrb	r2, [r3, #0]
   1e286:	2102      	movs	r1, #2
   1e288:	438a      	bics	r2, r1
   1e28a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   1e28c:	68bb      	ldr	r3, [r7, #8]
   1e28e:	685c      	ldr	r4, [r3, #4]
   1e290:	68bb      	ldr	r3, [r7, #8]
   1e292:	689a      	ldr	r2, [r3, #8]
   1e294:	68bb      	ldr	r3, [r7, #8]
   1e296:	68db      	ldr	r3, [r3, #12]
   1e298:	68f9      	ldr	r1, [r7, #12]
   1e29a:	6878      	ldr	r0, [r7, #4]
   1e29c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   1e29e:	68bb      	ldr	r3, [r7, #8]
   1e2a0:	781a      	ldrb	r2, [r3, #0]
   1e2a2:	2104      	movs	r1, #4
   1e2a4:	438a      	bics	r2, r1
   1e2a6:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   1e2a8:	68fb      	ldr	r3, [r7, #12]
   1e2aa:	3301      	adds	r3, #1
   1e2ac:	60fb      	str	r3, [r7, #12]
   1e2ae:	68fb      	ldr	r3, [r7, #12]
   1e2b0:	2b00      	cmp	r3, #0
   1e2b2:	dda8      	ble.n	1e206 <sw_timer_task+0xe>
			}
		}
	}
}
   1e2b4:	46c0      	nop			; (mov r8, r8)
   1e2b6:	46bd      	mov	sp, r7
   1e2b8:	b005      	add	sp, #20
   1e2ba:	bd90      	pop	{r4, r7, pc}
   1e2bc:	20004178 	.word	0x20004178

0001e2c0 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   1e2c0:	b580      	push	{r7, lr}
   1e2c2:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   1e2c4:	4b06      	ldr	r3, [pc, #24]	; (1e2e0 <main+0x20>)
   1e2c6:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   1e2c8:	4b06      	ldr	r3, [pc, #24]	; (1e2e4 <main+0x24>)
   1e2ca:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   1e2cc:	2001      	movs	r0, #1
   1e2ce:	4b06      	ldr	r3, [pc, #24]	; (1e2e8 <main+0x28>)
   1e2d0:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   1e2d2:	4b06      	ldr	r3, [pc, #24]	; (1e2ec <main+0x2c>)
   1e2d4:	4798      	blx	r3

    return 0;  // Will not get here
   1e2d6:	2300      	movs	r3, #0
}
   1e2d8:	0018      	movs	r0, r3
   1e2da:	46bd      	mov	sp, r7
   1e2dc:	bd80      	pop	{r7, pc}
   1e2de:	46c0      	nop			; (mov r8, r8)
   1e2e0:	00015db1 	.word	0x00015db1
   1e2e4:	000098b9 	.word	0x000098b9
   1e2e8:	00003f85 	.word	0x00003f85
   1e2ec:	00007f11 	.word	0x00007f11

0001e2f0 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   1e2f0:	b580      	push	{r7, lr}
   1e2f2:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   1e2f4:	4b0f      	ldr	r3, [pc, #60]	; (1e334 <vApplicationDaemonTaskStartupHook+0x44>)
   1e2f6:	0018      	movs	r0, r3
   1e2f8:	4b0f      	ldr	r3, [pc, #60]	; (1e338 <vApplicationDaemonTaskStartupHook+0x48>)
   1e2fa:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   1e2fc:	4b0f      	ldr	r3, [pc, #60]	; (1e33c <vApplicationDaemonTaskStartupHook+0x4c>)
   1e2fe:	0018      	movs	r0, r3
   1e300:	4b0d      	ldr	r3, [pc, #52]	; (1e338 <vApplicationDaemonTaskStartupHook+0x48>)
   1e302:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   1e304:	4b0e      	ldr	r3, [pc, #56]	; (1e340 <vApplicationDaemonTaskStartupHook+0x50>)
   1e306:	4798      	blx	r3
   1e308:	1e03      	subs	r3, r0, #0
   1e30a:	d004      	beq.n	1e316 <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   1e30c:	4b0d      	ldr	r3, [pc, #52]	; (1e344 <vApplicationDaemonTaskStartupHook+0x54>)
   1e30e:	0018      	movs	r0, r3
   1e310:	4b09      	ldr	r3, [pc, #36]	; (1e338 <vApplicationDaemonTaskStartupHook+0x48>)
   1e312:	4798      	blx	r3
   1e314:	e003      	b.n	1e31e <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   1e316:	4b0c      	ldr	r3, [pc, #48]	; (1e348 <vApplicationDaemonTaskStartupHook+0x58>)
   1e318:	0018      	movs	r0, r3
   1e31a:	4b07      	ldr	r3, [pc, #28]	; (1e338 <vApplicationDaemonTaskStartupHook+0x48>)
   1e31c:	4798      	blx	r3
    }

    StartTasks();
   1e31e:	4b0b      	ldr	r3, [pc, #44]	; (1e34c <vApplicationDaemonTaskStartupHook+0x5c>)
   1e320:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   1e322:	4b0b      	ldr	r3, [pc, #44]	; (1e350 <vApplicationDaemonTaskStartupHook+0x60>)
   1e324:	681b      	ldr	r3, [r3, #0]
   1e326:	0018      	movs	r0, r3
   1e328:	4b0a      	ldr	r3, [pc, #40]	; (1e354 <vApplicationDaemonTaskStartupHook+0x64>)
   1e32a:	4798      	blx	r3
}
   1e32c:	46c0      	nop			; (mov r8, r8)
   1e32e:	46bd      	mov	sp, r7
   1e330:	bd80      	pop	{r7, pc}
   1e332:	46c0      	nop			; (mov r8, r8)
   1e334:	0002518c 	.word	0x0002518c
   1e338:	00009929 	.word	0x00009929
   1e33c:	000251b0 	.word	0x000251b0
   1e340:	00001635 	.word	0x00001635
   1e344:	000251c8 	.word	0x000251c8
   1e348:	000251ec 	.word	0x000251ec
   1e34c:	0001e359 	.word	0x0001e359
   1e350:	20004180 	.word	0x20004180
   1e354:	00007db5 	.word	0x00007db5

0001e358 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   1e358:	b590      	push	{r4, r7, lr}
   1e35a:	b083      	sub	sp, #12
   1e35c:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   1e35e:	4b26      	ldr	r3, [pc, #152]	; (1e3f8 <StartTasks+0xa0>)
   1e360:	4798      	blx	r3
   1e362:	0003      	movs	r3, r0
   1e364:	4a25      	ldr	r2, [pc, #148]	; (1e3fc <StartTasks+0xa4>)
   1e366:	4826      	ldr	r0, [pc, #152]	; (1e400 <StartTasks+0xa8>)
   1e368:	2140      	movs	r1, #64	; 0x40
   1e36a:	4c26      	ldr	r4, [pc, #152]	; (1e404 <StartTasks+0xac>)
   1e36c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1e36e:	4b24      	ldr	r3, [pc, #144]	; (1e400 <StartTasks+0xa8>)
   1e370:	0018      	movs	r0, r3
   1e372:	4b25      	ldr	r3, [pc, #148]	; (1e408 <StartTasks+0xb0>)
   1e374:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   1e376:	23c8      	movs	r3, #200	; 0xc8
   1e378:	005a      	lsls	r2, r3, #1
   1e37a:	4924      	ldr	r1, [pc, #144]	; (1e40c <StartTasks+0xb4>)
   1e37c:	4824      	ldr	r0, [pc, #144]	; (1e410 <StartTasks+0xb8>)
   1e37e:	4b25      	ldr	r3, [pc, #148]	; (1e414 <StartTasks+0xbc>)
   1e380:	9301      	str	r3, [sp, #4]
   1e382:	2304      	movs	r3, #4
   1e384:	9300      	str	r3, [sp, #0]
   1e386:	2300      	movs	r3, #0
   1e388:	4c23      	ldr	r4, [pc, #140]	; (1e418 <StartTasks+0xc0>)
   1e38a:	47a0      	blx	r4
   1e38c:	0003      	movs	r3, r0
   1e38e:	2b01      	cmp	r3, #1
   1e390:	d003      	beq.n	1e39a <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   1e392:	4b22      	ldr	r3, [pc, #136]	; (1e41c <StartTasks+0xc4>)
   1e394:	0018      	movs	r0, r3
   1e396:	4b1c      	ldr	r3, [pc, #112]	; (1e408 <StartTasks+0xb0>)
   1e398:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   1e39a:	4b17      	ldr	r3, [pc, #92]	; (1e3f8 <StartTasks+0xa0>)
   1e39c:	4798      	blx	r3
   1e39e:	0003      	movs	r3, r0
   1e3a0:	4a1f      	ldr	r2, [pc, #124]	; (1e420 <StartTasks+0xc8>)
   1e3a2:	4817      	ldr	r0, [pc, #92]	; (1e400 <StartTasks+0xa8>)
   1e3a4:	2140      	movs	r1, #64	; 0x40
   1e3a6:	4c17      	ldr	r4, [pc, #92]	; (1e404 <StartTasks+0xac>)
   1e3a8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1e3aa:	4b15      	ldr	r3, [pc, #84]	; (1e400 <StartTasks+0xa8>)
   1e3ac:	0018      	movs	r0, r3
   1e3ae:	4b16      	ldr	r3, [pc, #88]	; (1e408 <StartTasks+0xb0>)
   1e3b0:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   1e3b2:	23fa      	movs	r3, #250	; 0xfa
   1e3b4:	009a      	lsls	r2, r3, #2
   1e3b6:	491b      	ldr	r1, [pc, #108]	; (1e424 <StartTasks+0xcc>)
   1e3b8:	481b      	ldr	r0, [pc, #108]	; (1e428 <StartTasks+0xd0>)
   1e3ba:	4b1c      	ldr	r3, [pc, #112]	; (1e42c <StartTasks+0xd4>)
   1e3bc:	9301      	str	r3, [sp, #4]
   1e3be:	2303      	movs	r3, #3
   1e3c0:	9300      	str	r3, [sp, #0]
   1e3c2:	2300      	movs	r3, #0
   1e3c4:	4c14      	ldr	r4, [pc, #80]	; (1e418 <StartTasks+0xc0>)
   1e3c6:	47a0      	blx	r4
   1e3c8:	0003      	movs	r3, r0
   1e3ca:	2b01      	cmp	r3, #1
   1e3cc:	d003      	beq.n	1e3d6 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   1e3ce:	4b18      	ldr	r3, [pc, #96]	; (1e430 <StartTasks+0xd8>)
   1e3d0:	0018      	movs	r0, r3
   1e3d2:	4b0d      	ldr	r3, [pc, #52]	; (1e408 <StartTasks+0xb0>)
   1e3d4:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   1e3d6:	4b08      	ldr	r3, [pc, #32]	; (1e3f8 <StartTasks+0xa0>)
   1e3d8:	4798      	blx	r3
   1e3da:	0003      	movs	r3, r0
   1e3dc:	4a15      	ldr	r2, [pc, #84]	; (1e434 <StartTasks+0xdc>)
   1e3de:	4808      	ldr	r0, [pc, #32]	; (1e400 <StartTasks+0xa8>)
   1e3e0:	2140      	movs	r1, #64	; 0x40
   1e3e2:	4c08      	ldr	r4, [pc, #32]	; (1e404 <StartTasks+0xac>)
   1e3e4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   1e3e6:	4b06      	ldr	r3, [pc, #24]	; (1e400 <StartTasks+0xa8>)
   1e3e8:	0018      	movs	r0, r3
   1e3ea:	4b07      	ldr	r3, [pc, #28]	; (1e408 <StartTasks+0xb0>)
   1e3ec:	4798      	blx	r3
}
   1e3ee:	46c0      	nop			; (mov r8, r8)
   1e3f0:	46bd      	mov	sp, r7
   1e3f2:	b001      	add	sp, #4
   1e3f4:	bd90      	pop	{r4, r7, pc}
   1e3f6:	46c0      	nop			; (mov r8, r8)
   1e3f8:	00005ef1 	.word	0x00005ef1
   1e3fc:	00025208 	.word	0x00025208
   1e400:	200055d0 	.word	0x200055d0
   1e404:	0002037d 	.word	0x0002037d
   1e408:	00009929 	.word	0x00009929
   1e40c:	0002522c 	.word	0x0002522c
   1e410:	00000cd9 	.word	0x00000cd9
   1e414:	2000417c 	.word	0x2000417c
   1e418:	00007939 	.word	0x00007939
   1e41c:	00025238 	.word	0x00025238
   1e420:	00025264 	.word	0x00025264
   1e424:	00025284 	.word	0x00025284
   1e428:	00002e19 	.word	0x00002e19
   1e42c:	20004184 	.word	0x20004184
   1e430:	00025290 	.word	0x00025290
   1e434:	000252bc 	.word	0x000252bc

0001e438 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   1e438:	b580      	push	{r7, lr}
   1e43a:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   1e43c:	4b02      	ldr	r3, [pc, #8]	; (1e448 <vApplicationMallocFailedHook+0x10>)
   1e43e:	0018      	movs	r0, r3
   1e440:	4b02      	ldr	r3, [pc, #8]	; (1e44c <vApplicationMallocFailedHook+0x14>)
   1e442:	4798      	blx	r3
    while (1)
   1e444:	e7fe      	b.n	1e444 <vApplicationMallocFailedHook+0xc>
   1e446:	46c0      	nop			; (mov r8, r8)
   1e448:	000252dc 	.word	0x000252dc
   1e44c:	00009929 	.word	0x00009929

0001e450 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   1e450:	b580      	push	{r7, lr}
   1e452:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   1e454:	4b02      	ldr	r3, [pc, #8]	; (1e460 <vApplicationStackOverflowHook+0x10>)
   1e456:	0018      	movs	r0, r3
   1e458:	4b02      	ldr	r3, [pc, #8]	; (1e464 <vApplicationStackOverflowHook+0x14>)
   1e45a:	4798      	blx	r3
    while (1)
   1e45c:	e7fe      	b.n	1e45c <vApplicationStackOverflowHook+0xc>
   1e45e:	46c0      	nop			; (mov r8, r8)
   1e460:	00025308 	.word	0x00025308
   1e464:	00009929 	.word	0x00009929

0001e468 <__udivsi3>:
   1e468:	2200      	movs	r2, #0
   1e46a:	0843      	lsrs	r3, r0, #1
   1e46c:	428b      	cmp	r3, r1
   1e46e:	d374      	bcc.n	1e55a <__udivsi3+0xf2>
   1e470:	0903      	lsrs	r3, r0, #4
   1e472:	428b      	cmp	r3, r1
   1e474:	d35f      	bcc.n	1e536 <__udivsi3+0xce>
   1e476:	0a03      	lsrs	r3, r0, #8
   1e478:	428b      	cmp	r3, r1
   1e47a:	d344      	bcc.n	1e506 <__udivsi3+0x9e>
   1e47c:	0b03      	lsrs	r3, r0, #12
   1e47e:	428b      	cmp	r3, r1
   1e480:	d328      	bcc.n	1e4d4 <__udivsi3+0x6c>
   1e482:	0c03      	lsrs	r3, r0, #16
   1e484:	428b      	cmp	r3, r1
   1e486:	d30d      	bcc.n	1e4a4 <__udivsi3+0x3c>
   1e488:	22ff      	movs	r2, #255	; 0xff
   1e48a:	0209      	lsls	r1, r1, #8
   1e48c:	ba12      	rev	r2, r2
   1e48e:	0c03      	lsrs	r3, r0, #16
   1e490:	428b      	cmp	r3, r1
   1e492:	d302      	bcc.n	1e49a <__udivsi3+0x32>
   1e494:	1212      	asrs	r2, r2, #8
   1e496:	0209      	lsls	r1, r1, #8
   1e498:	d065      	beq.n	1e566 <__udivsi3+0xfe>
   1e49a:	0b03      	lsrs	r3, r0, #12
   1e49c:	428b      	cmp	r3, r1
   1e49e:	d319      	bcc.n	1e4d4 <__udivsi3+0x6c>
   1e4a0:	e000      	b.n	1e4a4 <__udivsi3+0x3c>
   1e4a2:	0a09      	lsrs	r1, r1, #8
   1e4a4:	0bc3      	lsrs	r3, r0, #15
   1e4a6:	428b      	cmp	r3, r1
   1e4a8:	d301      	bcc.n	1e4ae <__udivsi3+0x46>
   1e4aa:	03cb      	lsls	r3, r1, #15
   1e4ac:	1ac0      	subs	r0, r0, r3
   1e4ae:	4152      	adcs	r2, r2
   1e4b0:	0b83      	lsrs	r3, r0, #14
   1e4b2:	428b      	cmp	r3, r1
   1e4b4:	d301      	bcc.n	1e4ba <__udivsi3+0x52>
   1e4b6:	038b      	lsls	r3, r1, #14
   1e4b8:	1ac0      	subs	r0, r0, r3
   1e4ba:	4152      	adcs	r2, r2
   1e4bc:	0b43      	lsrs	r3, r0, #13
   1e4be:	428b      	cmp	r3, r1
   1e4c0:	d301      	bcc.n	1e4c6 <__udivsi3+0x5e>
   1e4c2:	034b      	lsls	r3, r1, #13
   1e4c4:	1ac0      	subs	r0, r0, r3
   1e4c6:	4152      	adcs	r2, r2
   1e4c8:	0b03      	lsrs	r3, r0, #12
   1e4ca:	428b      	cmp	r3, r1
   1e4cc:	d301      	bcc.n	1e4d2 <__udivsi3+0x6a>
   1e4ce:	030b      	lsls	r3, r1, #12
   1e4d0:	1ac0      	subs	r0, r0, r3
   1e4d2:	4152      	adcs	r2, r2
   1e4d4:	0ac3      	lsrs	r3, r0, #11
   1e4d6:	428b      	cmp	r3, r1
   1e4d8:	d301      	bcc.n	1e4de <__udivsi3+0x76>
   1e4da:	02cb      	lsls	r3, r1, #11
   1e4dc:	1ac0      	subs	r0, r0, r3
   1e4de:	4152      	adcs	r2, r2
   1e4e0:	0a83      	lsrs	r3, r0, #10
   1e4e2:	428b      	cmp	r3, r1
   1e4e4:	d301      	bcc.n	1e4ea <__udivsi3+0x82>
   1e4e6:	028b      	lsls	r3, r1, #10
   1e4e8:	1ac0      	subs	r0, r0, r3
   1e4ea:	4152      	adcs	r2, r2
   1e4ec:	0a43      	lsrs	r3, r0, #9
   1e4ee:	428b      	cmp	r3, r1
   1e4f0:	d301      	bcc.n	1e4f6 <__udivsi3+0x8e>
   1e4f2:	024b      	lsls	r3, r1, #9
   1e4f4:	1ac0      	subs	r0, r0, r3
   1e4f6:	4152      	adcs	r2, r2
   1e4f8:	0a03      	lsrs	r3, r0, #8
   1e4fa:	428b      	cmp	r3, r1
   1e4fc:	d301      	bcc.n	1e502 <__udivsi3+0x9a>
   1e4fe:	020b      	lsls	r3, r1, #8
   1e500:	1ac0      	subs	r0, r0, r3
   1e502:	4152      	adcs	r2, r2
   1e504:	d2cd      	bcs.n	1e4a2 <__udivsi3+0x3a>
   1e506:	09c3      	lsrs	r3, r0, #7
   1e508:	428b      	cmp	r3, r1
   1e50a:	d301      	bcc.n	1e510 <__udivsi3+0xa8>
   1e50c:	01cb      	lsls	r3, r1, #7
   1e50e:	1ac0      	subs	r0, r0, r3
   1e510:	4152      	adcs	r2, r2
   1e512:	0983      	lsrs	r3, r0, #6
   1e514:	428b      	cmp	r3, r1
   1e516:	d301      	bcc.n	1e51c <__udivsi3+0xb4>
   1e518:	018b      	lsls	r3, r1, #6
   1e51a:	1ac0      	subs	r0, r0, r3
   1e51c:	4152      	adcs	r2, r2
   1e51e:	0943      	lsrs	r3, r0, #5
   1e520:	428b      	cmp	r3, r1
   1e522:	d301      	bcc.n	1e528 <__udivsi3+0xc0>
   1e524:	014b      	lsls	r3, r1, #5
   1e526:	1ac0      	subs	r0, r0, r3
   1e528:	4152      	adcs	r2, r2
   1e52a:	0903      	lsrs	r3, r0, #4
   1e52c:	428b      	cmp	r3, r1
   1e52e:	d301      	bcc.n	1e534 <__udivsi3+0xcc>
   1e530:	010b      	lsls	r3, r1, #4
   1e532:	1ac0      	subs	r0, r0, r3
   1e534:	4152      	adcs	r2, r2
   1e536:	08c3      	lsrs	r3, r0, #3
   1e538:	428b      	cmp	r3, r1
   1e53a:	d301      	bcc.n	1e540 <__udivsi3+0xd8>
   1e53c:	00cb      	lsls	r3, r1, #3
   1e53e:	1ac0      	subs	r0, r0, r3
   1e540:	4152      	adcs	r2, r2
   1e542:	0883      	lsrs	r3, r0, #2
   1e544:	428b      	cmp	r3, r1
   1e546:	d301      	bcc.n	1e54c <__udivsi3+0xe4>
   1e548:	008b      	lsls	r3, r1, #2
   1e54a:	1ac0      	subs	r0, r0, r3
   1e54c:	4152      	adcs	r2, r2
   1e54e:	0843      	lsrs	r3, r0, #1
   1e550:	428b      	cmp	r3, r1
   1e552:	d301      	bcc.n	1e558 <__udivsi3+0xf0>
   1e554:	004b      	lsls	r3, r1, #1
   1e556:	1ac0      	subs	r0, r0, r3
   1e558:	4152      	adcs	r2, r2
   1e55a:	1a41      	subs	r1, r0, r1
   1e55c:	d200      	bcs.n	1e560 <__udivsi3+0xf8>
   1e55e:	4601      	mov	r1, r0
   1e560:	4152      	adcs	r2, r2
   1e562:	4610      	mov	r0, r2
   1e564:	4770      	bx	lr
   1e566:	e7ff      	b.n	1e568 <__udivsi3+0x100>
   1e568:	b501      	push	{r0, lr}
   1e56a:	2000      	movs	r0, #0
   1e56c:	f000 f8f0 	bl	1e750 <__aeabi_idiv0>
   1e570:	bd02      	pop	{r1, pc}
   1e572:	46c0      	nop			; (mov r8, r8)

0001e574 <__aeabi_uidivmod>:
   1e574:	2900      	cmp	r1, #0
   1e576:	d0f7      	beq.n	1e568 <__udivsi3+0x100>
   1e578:	e776      	b.n	1e468 <__udivsi3>
   1e57a:	4770      	bx	lr

0001e57c <__divsi3>:
   1e57c:	4603      	mov	r3, r0
   1e57e:	430b      	orrs	r3, r1
   1e580:	d47f      	bmi.n	1e682 <__divsi3+0x106>
   1e582:	2200      	movs	r2, #0
   1e584:	0843      	lsrs	r3, r0, #1
   1e586:	428b      	cmp	r3, r1
   1e588:	d374      	bcc.n	1e674 <__divsi3+0xf8>
   1e58a:	0903      	lsrs	r3, r0, #4
   1e58c:	428b      	cmp	r3, r1
   1e58e:	d35f      	bcc.n	1e650 <__divsi3+0xd4>
   1e590:	0a03      	lsrs	r3, r0, #8
   1e592:	428b      	cmp	r3, r1
   1e594:	d344      	bcc.n	1e620 <__divsi3+0xa4>
   1e596:	0b03      	lsrs	r3, r0, #12
   1e598:	428b      	cmp	r3, r1
   1e59a:	d328      	bcc.n	1e5ee <__divsi3+0x72>
   1e59c:	0c03      	lsrs	r3, r0, #16
   1e59e:	428b      	cmp	r3, r1
   1e5a0:	d30d      	bcc.n	1e5be <__divsi3+0x42>
   1e5a2:	22ff      	movs	r2, #255	; 0xff
   1e5a4:	0209      	lsls	r1, r1, #8
   1e5a6:	ba12      	rev	r2, r2
   1e5a8:	0c03      	lsrs	r3, r0, #16
   1e5aa:	428b      	cmp	r3, r1
   1e5ac:	d302      	bcc.n	1e5b4 <__divsi3+0x38>
   1e5ae:	1212      	asrs	r2, r2, #8
   1e5b0:	0209      	lsls	r1, r1, #8
   1e5b2:	d065      	beq.n	1e680 <__divsi3+0x104>
   1e5b4:	0b03      	lsrs	r3, r0, #12
   1e5b6:	428b      	cmp	r3, r1
   1e5b8:	d319      	bcc.n	1e5ee <__divsi3+0x72>
   1e5ba:	e000      	b.n	1e5be <__divsi3+0x42>
   1e5bc:	0a09      	lsrs	r1, r1, #8
   1e5be:	0bc3      	lsrs	r3, r0, #15
   1e5c0:	428b      	cmp	r3, r1
   1e5c2:	d301      	bcc.n	1e5c8 <__divsi3+0x4c>
   1e5c4:	03cb      	lsls	r3, r1, #15
   1e5c6:	1ac0      	subs	r0, r0, r3
   1e5c8:	4152      	adcs	r2, r2
   1e5ca:	0b83      	lsrs	r3, r0, #14
   1e5cc:	428b      	cmp	r3, r1
   1e5ce:	d301      	bcc.n	1e5d4 <__divsi3+0x58>
   1e5d0:	038b      	lsls	r3, r1, #14
   1e5d2:	1ac0      	subs	r0, r0, r3
   1e5d4:	4152      	adcs	r2, r2
   1e5d6:	0b43      	lsrs	r3, r0, #13
   1e5d8:	428b      	cmp	r3, r1
   1e5da:	d301      	bcc.n	1e5e0 <__divsi3+0x64>
   1e5dc:	034b      	lsls	r3, r1, #13
   1e5de:	1ac0      	subs	r0, r0, r3
   1e5e0:	4152      	adcs	r2, r2
   1e5e2:	0b03      	lsrs	r3, r0, #12
   1e5e4:	428b      	cmp	r3, r1
   1e5e6:	d301      	bcc.n	1e5ec <__divsi3+0x70>
   1e5e8:	030b      	lsls	r3, r1, #12
   1e5ea:	1ac0      	subs	r0, r0, r3
   1e5ec:	4152      	adcs	r2, r2
   1e5ee:	0ac3      	lsrs	r3, r0, #11
   1e5f0:	428b      	cmp	r3, r1
   1e5f2:	d301      	bcc.n	1e5f8 <__divsi3+0x7c>
   1e5f4:	02cb      	lsls	r3, r1, #11
   1e5f6:	1ac0      	subs	r0, r0, r3
   1e5f8:	4152      	adcs	r2, r2
   1e5fa:	0a83      	lsrs	r3, r0, #10
   1e5fc:	428b      	cmp	r3, r1
   1e5fe:	d301      	bcc.n	1e604 <__divsi3+0x88>
   1e600:	028b      	lsls	r3, r1, #10
   1e602:	1ac0      	subs	r0, r0, r3
   1e604:	4152      	adcs	r2, r2
   1e606:	0a43      	lsrs	r3, r0, #9
   1e608:	428b      	cmp	r3, r1
   1e60a:	d301      	bcc.n	1e610 <__divsi3+0x94>
   1e60c:	024b      	lsls	r3, r1, #9
   1e60e:	1ac0      	subs	r0, r0, r3
   1e610:	4152      	adcs	r2, r2
   1e612:	0a03      	lsrs	r3, r0, #8
   1e614:	428b      	cmp	r3, r1
   1e616:	d301      	bcc.n	1e61c <__divsi3+0xa0>
   1e618:	020b      	lsls	r3, r1, #8
   1e61a:	1ac0      	subs	r0, r0, r3
   1e61c:	4152      	adcs	r2, r2
   1e61e:	d2cd      	bcs.n	1e5bc <__divsi3+0x40>
   1e620:	09c3      	lsrs	r3, r0, #7
   1e622:	428b      	cmp	r3, r1
   1e624:	d301      	bcc.n	1e62a <__divsi3+0xae>
   1e626:	01cb      	lsls	r3, r1, #7
   1e628:	1ac0      	subs	r0, r0, r3
   1e62a:	4152      	adcs	r2, r2
   1e62c:	0983      	lsrs	r3, r0, #6
   1e62e:	428b      	cmp	r3, r1
   1e630:	d301      	bcc.n	1e636 <__divsi3+0xba>
   1e632:	018b      	lsls	r3, r1, #6
   1e634:	1ac0      	subs	r0, r0, r3
   1e636:	4152      	adcs	r2, r2
   1e638:	0943      	lsrs	r3, r0, #5
   1e63a:	428b      	cmp	r3, r1
   1e63c:	d301      	bcc.n	1e642 <__divsi3+0xc6>
   1e63e:	014b      	lsls	r3, r1, #5
   1e640:	1ac0      	subs	r0, r0, r3
   1e642:	4152      	adcs	r2, r2
   1e644:	0903      	lsrs	r3, r0, #4
   1e646:	428b      	cmp	r3, r1
   1e648:	d301      	bcc.n	1e64e <__divsi3+0xd2>
   1e64a:	010b      	lsls	r3, r1, #4
   1e64c:	1ac0      	subs	r0, r0, r3
   1e64e:	4152      	adcs	r2, r2
   1e650:	08c3      	lsrs	r3, r0, #3
   1e652:	428b      	cmp	r3, r1
   1e654:	d301      	bcc.n	1e65a <__divsi3+0xde>
   1e656:	00cb      	lsls	r3, r1, #3
   1e658:	1ac0      	subs	r0, r0, r3
   1e65a:	4152      	adcs	r2, r2
   1e65c:	0883      	lsrs	r3, r0, #2
   1e65e:	428b      	cmp	r3, r1
   1e660:	d301      	bcc.n	1e666 <__divsi3+0xea>
   1e662:	008b      	lsls	r3, r1, #2
   1e664:	1ac0      	subs	r0, r0, r3
   1e666:	4152      	adcs	r2, r2
   1e668:	0843      	lsrs	r3, r0, #1
   1e66a:	428b      	cmp	r3, r1
   1e66c:	d301      	bcc.n	1e672 <__divsi3+0xf6>
   1e66e:	004b      	lsls	r3, r1, #1
   1e670:	1ac0      	subs	r0, r0, r3
   1e672:	4152      	adcs	r2, r2
   1e674:	1a41      	subs	r1, r0, r1
   1e676:	d200      	bcs.n	1e67a <__divsi3+0xfe>
   1e678:	4601      	mov	r1, r0
   1e67a:	4152      	adcs	r2, r2
   1e67c:	4610      	mov	r0, r2
   1e67e:	4770      	bx	lr
   1e680:	e05d      	b.n	1e73e <__divsi3+0x1c2>
   1e682:	0fca      	lsrs	r2, r1, #31
   1e684:	d000      	beq.n	1e688 <__divsi3+0x10c>
   1e686:	4249      	negs	r1, r1
   1e688:	1003      	asrs	r3, r0, #32
   1e68a:	d300      	bcc.n	1e68e <__divsi3+0x112>
   1e68c:	4240      	negs	r0, r0
   1e68e:	4053      	eors	r3, r2
   1e690:	2200      	movs	r2, #0
   1e692:	469c      	mov	ip, r3
   1e694:	0903      	lsrs	r3, r0, #4
   1e696:	428b      	cmp	r3, r1
   1e698:	d32d      	bcc.n	1e6f6 <__divsi3+0x17a>
   1e69a:	0a03      	lsrs	r3, r0, #8
   1e69c:	428b      	cmp	r3, r1
   1e69e:	d312      	bcc.n	1e6c6 <__divsi3+0x14a>
   1e6a0:	22fc      	movs	r2, #252	; 0xfc
   1e6a2:	0189      	lsls	r1, r1, #6
   1e6a4:	ba12      	rev	r2, r2
   1e6a6:	0a03      	lsrs	r3, r0, #8
   1e6a8:	428b      	cmp	r3, r1
   1e6aa:	d30c      	bcc.n	1e6c6 <__divsi3+0x14a>
   1e6ac:	0189      	lsls	r1, r1, #6
   1e6ae:	1192      	asrs	r2, r2, #6
   1e6b0:	428b      	cmp	r3, r1
   1e6b2:	d308      	bcc.n	1e6c6 <__divsi3+0x14a>
   1e6b4:	0189      	lsls	r1, r1, #6
   1e6b6:	1192      	asrs	r2, r2, #6
   1e6b8:	428b      	cmp	r3, r1
   1e6ba:	d304      	bcc.n	1e6c6 <__divsi3+0x14a>
   1e6bc:	0189      	lsls	r1, r1, #6
   1e6be:	d03a      	beq.n	1e736 <__divsi3+0x1ba>
   1e6c0:	1192      	asrs	r2, r2, #6
   1e6c2:	e000      	b.n	1e6c6 <__divsi3+0x14a>
   1e6c4:	0989      	lsrs	r1, r1, #6
   1e6c6:	09c3      	lsrs	r3, r0, #7
   1e6c8:	428b      	cmp	r3, r1
   1e6ca:	d301      	bcc.n	1e6d0 <__divsi3+0x154>
   1e6cc:	01cb      	lsls	r3, r1, #7
   1e6ce:	1ac0      	subs	r0, r0, r3
   1e6d0:	4152      	adcs	r2, r2
   1e6d2:	0983      	lsrs	r3, r0, #6
   1e6d4:	428b      	cmp	r3, r1
   1e6d6:	d301      	bcc.n	1e6dc <__divsi3+0x160>
   1e6d8:	018b      	lsls	r3, r1, #6
   1e6da:	1ac0      	subs	r0, r0, r3
   1e6dc:	4152      	adcs	r2, r2
   1e6de:	0943      	lsrs	r3, r0, #5
   1e6e0:	428b      	cmp	r3, r1
   1e6e2:	d301      	bcc.n	1e6e8 <__divsi3+0x16c>
   1e6e4:	014b      	lsls	r3, r1, #5
   1e6e6:	1ac0      	subs	r0, r0, r3
   1e6e8:	4152      	adcs	r2, r2
   1e6ea:	0903      	lsrs	r3, r0, #4
   1e6ec:	428b      	cmp	r3, r1
   1e6ee:	d301      	bcc.n	1e6f4 <__divsi3+0x178>
   1e6f0:	010b      	lsls	r3, r1, #4
   1e6f2:	1ac0      	subs	r0, r0, r3
   1e6f4:	4152      	adcs	r2, r2
   1e6f6:	08c3      	lsrs	r3, r0, #3
   1e6f8:	428b      	cmp	r3, r1
   1e6fa:	d301      	bcc.n	1e700 <__divsi3+0x184>
   1e6fc:	00cb      	lsls	r3, r1, #3
   1e6fe:	1ac0      	subs	r0, r0, r3
   1e700:	4152      	adcs	r2, r2
   1e702:	0883      	lsrs	r3, r0, #2
   1e704:	428b      	cmp	r3, r1
   1e706:	d301      	bcc.n	1e70c <__divsi3+0x190>
   1e708:	008b      	lsls	r3, r1, #2
   1e70a:	1ac0      	subs	r0, r0, r3
   1e70c:	4152      	adcs	r2, r2
   1e70e:	d2d9      	bcs.n	1e6c4 <__divsi3+0x148>
   1e710:	0843      	lsrs	r3, r0, #1
   1e712:	428b      	cmp	r3, r1
   1e714:	d301      	bcc.n	1e71a <__divsi3+0x19e>
   1e716:	004b      	lsls	r3, r1, #1
   1e718:	1ac0      	subs	r0, r0, r3
   1e71a:	4152      	adcs	r2, r2
   1e71c:	1a41      	subs	r1, r0, r1
   1e71e:	d200      	bcs.n	1e722 <__divsi3+0x1a6>
   1e720:	4601      	mov	r1, r0
   1e722:	4663      	mov	r3, ip
   1e724:	4152      	adcs	r2, r2
   1e726:	105b      	asrs	r3, r3, #1
   1e728:	4610      	mov	r0, r2
   1e72a:	d301      	bcc.n	1e730 <__divsi3+0x1b4>
   1e72c:	4240      	negs	r0, r0
   1e72e:	2b00      	cmp	r3, #0
   1e730:	d500      	bpl.n	1e734 <__divsi3+0x1b8>
   1e732:	4249      	negs	r1, r1
   1e734:	4770      	bx	lr
   1e736:	4663      	mov	r3, ip
   1e738:	105b      	asrs	r3, r3, #1
   1e73a:	d300      	bcc.n	1e73e <__divsi3+0x1c2>
   1e73c:	4240      	negs	r0, r0
   1e73e:	b501      	push	{r0, lr}
   1e740:	2000      	movs	r0, #0
   1e742:	f000 f805 	bl	1e750 <__aeabi_idiv0>
   1e746:	bd02      	pop	{r1, pc}

0001e748 <__aeabi_idivmod>:
   1e748:	2900      	cmp	r1, #0
   1e74a:	d0f8      	beq.n	1e73e <__divsi3+0x1c2>
   1e74c:	e716      	b.n	1e57c <__divsi3>
   1e74e:	4770      	bx	lr

0001e750 <__aeabi_idiv0>:
   1e750:	4770      	bx	lr
   1e752:	46c0      	nop			; (mov r8, r8)

0001e754 <__aeabi_lmul>:
   1e754:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e756:	46ce      	mov	lr, r9
   1e758:	4647      	mov	r7, r8
   1e75a:	0415      	lsls	r5, r2, #16
   1e75c:	0c2d      	lsrs	r5, r5, #16
   1e75e:	002e      	movs	r6, r5
   1e760:	b580      	push	{r7, lr}
   1e762:	0407      	lsls	r7, r0, #16
   1e764:	0c14      	lsrs	r4, r2, #16
   1e766:	0c3f      	lsrs	r7, r7, #16
   1e768:	4699      	mov	r9, r3
   1e76a:	0c03      	lsrs	r3, r0, #16
   1e76c:	437e      	muls	r6, r7
   1e76e:	435d      	muls	r5, r3
   1e770:	4367      	muls	r7, r4
   1e772:	4363      	muls	r3, r4
   1e774:	197f      	adds	r7, r7, r5
   1e776:	0c34      	lsrs	r4, r6, #16
   1e778:	19e4      	adds	r4, r4, r7
   1e77a:	469c      	mov	ip, r3
   1e77c:	42a5      	cmp	r5, r4
   1e77e:	d903      	bls.n	1e788 <__aeabi_lmul+0x34>
   1e780:	2380      	movs	r3, #128	; 0x80
   1e782:	025b      	lsls	r3, r3, #9
   1e784:	4698      	mov	r8, r3
   1e786:	44c4      	add	ip, r8
   1e788:	464b      	mov	r3, r9
   1e78a:	4351      	muls	r1, r2
   1e78c:	4343      	muls	r3, r0
   1e78e:	0436      	lsls	r6, r6, #16
   1e790:	0c36      	lsrs	r6, r6, #16
   1e792:	0c25      	lsrs	r5, r4, #16
   1e794:	0424      	lsls	r4, r4, #16
   1e796:	4465      	add	r5, ip
   1e798:	19a4      	adds	r4, r4, r6
   1e79a:	1859      	adds	r1, r3, r1
   1e79c:	1949      	adds	r1, r1, r5
   1e79e:	0020      	movs	r0, r4
   1e7a0:	bc0c      	pop	{r2, r3}
   1e7a2:	4690      	mov	r8, r2
   1e7a4:	4699      	mov	r9, r3
   1e7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e7a8 <__aeabi_dadd>:
   1e7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7aa:	4645      	mov	r5, r8
   1e7ac:	46de      	mov	lr, fp
   1e7ae:	4657      	mov	r7, sl
   1e7b0:	464e      	mov	r6, r9
   1e7b2:	030c      	lsls	r4, r1, #12
   1e7b4:	b5e0      	push	{r5, r6, r7, lr}
   1e7b6:	004e      	lsls	r6, r1, #1
   1e7b8:	0fc9      	lsrs	r1, r1, #31
   1e7ba:	4688      	mov	r8, r1
   1e7bc:	000d      	movs	r5, r1
   1e7be:	0a61      	lsrs	r1, r4, #9
   1e7c0:	0f44      	lsrs	r4, r0, #29
   1e7c2:	430c      	orrs	r4, r1
   1e7c4:	00c7      	lsls	r7, r0, #3
   1e7c6:	0319      	lsls	r1, r3, #12
   1e7c8:	0058      	lsls	r0, r3, #1
   1e7ca:	0fdb      	lsrs	r3, r3, #31
   1e7cc:	469b      	mov	fp, r3
   1e7ce:	0a4b      	lsrs	r3, r1, #9
   1e7d0:	0f51      	lsrs	r1, r2, #29
   1e7d2:	430b      	orrs	r3, r1
   1e7d4:	0d76      	lsrs	r6, r6, #21
   1e7d6:	0d40      	lsrs	r0, r0, #21
   1e7d8:	0019      	movs	r1, r3
   1e7da:	00d2      	lsls	r2, r2, #3
   1e7dc:	45d8      	cmp	r8, fp
   1e7de:	d100      	bne.n	1e7e2 <__aeabi_dadd+0x3a>
   1e7e0:	e0ae      	b.n	1e940 <__aeabi_dadd+0x198>
   1e7e2:	1a35      	subs	r5, r6, r0
   1e7e4:	2d00      	cmp	r5, #0
   1e7e6:	dc00      	bgt.n	1e7ea <__aeabi_dadd+0x42>
   1e7e8:	e0f6      	b.n	1e9d8 <__aeabi_dadd+0x230>
   1e7ea:	2800      	cmp	r0, #0
   1e7ec:	d10f      	bne.n	1e80e <__aeabi_dadd+0x66>
   1e7ee:	4313      	orrs	r3, r2
   1e7f0:	d100      	bne.n	1e7f4 <__aeabi_dadd+0x4c>
   1e7f2:	e0db      	b.n	1e9ac <__aeabi_dadd+0x204>
   1e7f4:	1e6b      	subs	r3, r5, #1
   1e7f6:	2b00      	cmp	r3, #0
   1e7f8:	d000      	beq.n	1e7fc <__aeabi_dadd+0x54>
   1e7fa:	e137      	b.n	1ea6c <__aeabi_dadd+0x2c4>
   1e7fc:	1aba      	subs	r2, r7, r2
   1e7fe:	4297      	cmp	r7, r2
   1e800:	41bf      	sbcs	r7, r7
   1e802:	1a64      	subs	r4, r4, r1
   1e804:	427f      	negs	r7, r7
   1e806:	1be4      	subs	r4, r4, r7
   1e808:	2601      	movs	r6, #1
   1e80a:	0017      	movs	r7, r2
   1e80c:	e024      	b.n	1e858 <__aeabi_dadd+0xb0>
   1e80e:	4bc6      	ldr	r3, [pc, #792]	; (1eb28 <__aeabi_dadd+0x380>)
   1e810:	429e      	cmp	r6, r3
   1e812:	d04d      	beq.n	1e8b0 <__aeabi_dadd+0x108>
   1e814:	2380      	movs	r3, #128	; 0x80
   1e816:	041b      	lsls	r3, r3, #16
   1e818:	4319      	orrs	r1, r3
   1e81a:	2d38      	cmp	r5, #56	; 0x38
   1e81c:	dd00      	ble.n	1e820 <__aeabi_dadd+0x78>
   1e81e:	e107      	b.n	1ea30 <__aeabi_dadd+0x288>
   1e820:	2d1f      	cmp	r5, #31
   1e822:	dd00      	ble.n	1e826 <__aeabi_dadd+0x7e>
   1e824:	e138      	b.n	1ea98 <__aeabi_dadd+0x2f0>
   1e826:	2020      	movs	r0, #32
   1e828:	1b43      	subs	r3, r0, r5
   1e82a:	469a      	mov	sl, r3
   1e82c:	000b      	movs	r3, r1
   1e82e:	4650      	mov	r0, sl
   1e830:	4083      	lsls	r3, r0
   1e832:	4699      	mov	r9, r3
   1e834:	0013      	movs	r3, r2
   1e836:	4648      	mov	r0, r9
   1e838:	40eb      	lsrs	r3, r5
   1e83a:	4318      	orrs	r0, r3
   1e83c:	0003      	movs	r3, r0
   1e83e:	4650      	mov	r0, sl
   1e840:	4082      	lsls	r2, r0
   1e842:	1e50      	subs	r0, r2, #1
   1e844:	4182      	sbcs	r2, r0
   1e846:	40e9      	lsrs	r1, r5
   1e848:	431a      	orrs	r2, r3
   1e84a:	1aba      	subs	r2, r7, r2
   1e84c:	1a61      	subs	r1, r4, r1
   1e84e:	4297      	cmp	r7, r2
   1e850:	41a4      	sbcs	r4, r4
   1e852:	0017      	movs	r7, r2
   1e854:	4264      	negs	r4, r4
   1e856:	1b0c      	subs	r4, r1, r4
   1e858:	0223      	lsls	r3, r4, #8
   1e85a:	d562      	bpl.n	1e922 <__aeabi_dadd+0x17a>
   1e85c:	0264      	lsls	r4, r4, #9
   1e85e:	0a65      	lsrs	r5, r4, #9
   1e860:	2d00      	cmp	r5, #0
   1e862:	d100      	bne.n	1e866 <__aeabi_dadd+0xbe>
   1e864:	e0df      	b.n	1ea26 <__aeabi_dadd+0x27e>
   1e866:	0028      	movs	r0, r5
   1e868:	f001 fbe4 	bl	20034 <__clzsi2>
   1e86c:	0003      	movs	r3, r0
   1e86e:	3b08      	subs	r3, #8
   1e870:	2b1f      	cmp	r3, #31
   1e872:	dd00      	ble.n	1e876 <__aeabi_dadd+0xce>
   1e874:	e0d2      	b.n	1ea1c <__aeabi_dadd+0x274>
   1e876:	2220      	movs	r2, #32
   1e878:	003c      	movs	r4, r7
   1e87a:	1ad2      	subs	r2, r2, r3
   1e87c:	409d      	lsls	r5, r3
   1e87e:	40d4      	lsrs	r4, r2
   1e880:	409f      	lsls	r7, r3
   1e882:	4325      	orrs	r5, r4
   1e884:	429e      	cmp	r6, r3
   1e886:	dd00      	ble.n	1e88a <__aeabi_dadd+0xe2>
   1e888:	e0c4      	b.n	1ea14 <__aeabi_dadd+0x26c>
   1e88a:	1b9e      	subs	r6, r3, r6
   1e88c:	1c73      	adds	r3, r6, #1
   1e88e:	2b1f      	cmp	r3, #31
   1e890:	dd00      	ble.n	1e894 <__aeabi_dadd+0xec>
   1e892:	e0f1      	b.n	1ea78 <__aeabi_dadd+0x2d0>
   1e894:	2220      	movs	r2, #32
   1e896:	0038      	movs	r0, r7
   1e898:	0029      	movs	r1, r5
   1e89a:	1ad2      	subs	r2, r2, r3
   1e89c:	40d8      	lsrs	r0, r3
   1e89e:	4091      	lsls	r1, r2
   1e8a0:	4097      	lsls	r7, r2
   1e8a2:	002c      	movs	r4, r5
   1e8a4:	4301      	orrs	r1, r0
   1e8a6:	1e78      	subs	r0, r7, #1
   1e8a8:	4187      	sbcs	r7, r0
   1e8aa:	40dc      	lsrs	r4, r3
   1e8ac:	2600      	movs	r6, #0
   1e8ae:	430f      	orrs	r7, r1
   1e8b0:	077b      	lsls	r3, r7, #29
   1e8b2:	d009      	beq.n	1e8c8 <__aeabi_dadd+0x120>
   1e8b4:	230f      	movs	r3, #15
   1e8b6:	403b      	ands	r3, r7
   1e8b8:	2b04      	cmp	r3, #4
   1e8ba:	d005      	beq.n	1e8c8 <__aeabi_dadd+0x120>
   1e8bc:	1d3b      	adds	r3, r7, #4
   1e8be:	42bb      	cmp	r3, r7
   1e8c0:	41bf      	sbcs	r7, r7
   1e8c2:	427f      	negs	r7, r7
   1e8c4:	19e4      	adds	r4, r4, r7
   1e8c6:	001f      	movs	r7, r3
   1e8c8:	0223      	lsls	r3, r4, #8
   1e8ca:	d52c      	bpl.n	1e926 <__aeabi_dadd+0x17e>
   1e8cc:	4b96      	ldr	r3, [pc, #600]	; (1eb28 <__aeabi_dadd+0x380>)
   1e8ce:	3601      	adds	r6, #1
   1e8d0:	429e      	cmp	r6, r3
   1e8d2:	d100      	bne.n	1e8d6 <__aeabi_dadd+0x12e>
   1e8d4:	e09a      	b.n	1ea0c <__aeabi_dadd+0x264>
   1e8d6:	4645      	mov	r5, r8
   1e8d8:	4b94      	ldr	r3, [pc, #592]	; (1eb2c <__aeabi_dadd+0x384>)
   1e8da:	08ff      	lsrs	r7, r7, #3
   1e8dc:	401c      	ands	r4, r3
   1e8de:	0760      	lsls	r0, r4, #29
   1e8e0:	0576      	lsls	r6, r6, #21
   1e8e2:	0264      	lsls	r4, r4, #9
   1e8e4:	4307      	orrs	r7, r0
   1e8e6:	0b24      	lsrs	r4, r4, #12
   1e8e8:	0d76      	lsrs	r6, r6, #21
   1e8ea:	2100      	movs	r1, #0
   1e8ec:	0324      	lsls	r4, r4, #12
   1e8ee:	0b23      	lsrs	r3, r4, #12
   1e8f0:	0d0c      	lsrs	r4, r1, #20
   1e8f2:	4a8f      	ldr	r2, [pc, #572]	; (1eb30 <__aeabi_dadd+0x388>)
   1e8f4:	0524      	lsls	r4, r4, #20
   1e8f6:	431c      	orrs	r4, r3
   1e8f8:	4014      	ands	r4, r2
   1e8fa:	0533      	lsls	r3, r6, #20
   1e8fc:	4323      	orrs	r3, r4
   1e8fe:	005b      	lsls	r3, r3, #1
   1e900:	07ed      	lsls	r5, r5, #31
   1e902:	085b      	lsrs	r3, r3, #1
   1e904:	432b      	orrs	r3, r5
   1e906:	0038      	movs	r0, r7
   1e908:	0019      	movs	r1, r3
   1e90a:	bc3c      	pop	{r2, r3, r4, r5}
   1e90c:	4690      	mov	r8, r2
   1e90e:	4699      	mov	r9, r3
   1e910:	46a2      	mov	sl, r4
   1e912:	46ab      	mov	fp, r5
   1e914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e916:	4664      	mov	r4, ip
   1e918:	4304      	orrs	r4, r0
   1e91a:	d100      	bne.n	1e91e <__aeabi_dadd+0x176>
   1e91c:	e211      	b.n	1ed42 <__aeabi_dadd+0x59a>
   1e91e:	0004      	movs	r4, r0
   1e920:	4667      	mov	r7, ip
   1e922:	077b      	lsls	r3, r7, #29
   1e924:	d1c6      	bne.n	1e8b4 <__aeabi_dadd+0x10c>
   1e926:	4645      	mov	r5, r8
   1e928:	0760      	lsls	r0, r4, #29
   1e92a:	08ff      	lsrs	r7, r7, #3
   1e92c:	4307      	orrs	r7, r0
   1e92e:	08e4      	lsrs	r4, r4, #3
   1e930:	4b7d      	ldr	r3, [pc, #500]	; (1eb28 <__aeabi_dadd+0x380>)
   1e932:	429e      	cmp	r6, r3
   1e934:	d030      	beq.n	1e998 <__aeabi_dadd+0x1f0>
   1e936:	0324      	lsls	r4, r4, #12
   1e938:	0576      	lsls	r6, r6, #21
   1e93a:	0b24      	lsrs	r4, r4, #12
   1e93c:	0d76      	lsrs	r6, r6, #21
   1e93e:	e7d4      	b.n	1e8ea <__aeabi_dadd+0x142>
   1e940:	1a33      	subs	r3, r6, r0
   1e942:	469a      	mov	sl, r3
   1e944:	2b00      	cmp	r3, #0
   1e946:	dd78      	ble.n	1ea3a <__aeabi_dadd+0x292>
   1e948:	2800      	cmp	r0, #0
   1e94a:	d031      	beq.n	1e9b0 <__aeabi_dadd+0x208>
   1e94c:	4876      	ldr	r0, [pc, #472]	; (1eb28 <__aeabi_dadd+0x380>)
   1e94e:	4286      	cmp	r6, r0
   1e950:	d0ae      	beq.n	1e8b0 <__aeabi_dadd+0x108>
   1e952:	2080      	movs	r0, #128	; 0x80
   1e954:	0400      	lsls	r0, r0, #16
   1e956:	4301      	orrs	r1, r0
   1e958:	4653      	mov	r3, sl
   1e95a:	2b38      	cmp	r3, #56	; 0x38
   1e95c:	dc00      	bgt.n	1e960 <__aeabi_dadd+0x1b8>
   1e95e:	e0e9      	b.n	1eb34 <__aeabi_dadd+0x38c>
   1e960:	430a      	orrs	r2, r1
   1e962:	1e51      	subs	r1, r2, #1
   1e964:	418a      	sbcs	r2, r1
   1e966:	2100      	movs	r1, #0
   1e968:	19d2      	adds	r2, r2, r7
   1e96a:	42ba      	cmp	r2, r7
   1e96c:	41bf      	sbcs	r7, r7
   1e96e:	1909      	adds	r1, r1, r4
   1e970:	427c      	negs	r4, r7
   1e972:	0017      	movs	r7, r2
   1e974:	190c      	adds	r4, r1, r4
   1e976:	0223      	lsls	r3, r4, #8
   1e978:	d5d3      	bpl.n	1e922 <__aeabi_dadd+0x17a>
   1e97a:	4b6b      	ldr	r3, [pc, #428]	; (1eb28 <__aeabi_dadd+0x380>)
   1e97c:	3601      	adds	r6, #1
   1e97e:	429e      	cmp	r6, r3
   1e980:	d100      	bne.n	1e984 <__aeabi_dadd+0x1dc>
   1e982:	e13a      	b.n	1ebfa <__aeabi_dadd+0x452>
   1e984:	2001      	movs	r0, #1
   1e986:	4b69      	ldr	r3, [pc, #420]	; (1eb2c <__aeabi_dadd+0x384>)
   1e988:	401c      	ands	r4, r3
   1e98a:	087b      	lsrs	r3, r7, #1
   1e98c:	4007      	ands	r7, r0
   1e98e:	431f      	orrs	r7, r3
   1e990:	07e0      	lsls	r0, r4, #31
   1e992:	4307      	orrs	r7, r0
   1e994:	0864      	lsrs	r4, r4, #1
   1e996:	e78b      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1e998:	0023      	movs	r3, r4
   1e99a:	433b      	orrs	r3, r7
   1e99c:	d100      	bne.n	1e9a0 <__aeabi_dadd+0x1f8>
   1e99e:	e1cb      	b.n	1ed38 <__aeabi_dadd+0x590>
   1e9a0:	2280      	movs	r2, #128	; 0x80
   1e9a2:	0312      	lsls	r2, r2, #12
   1e9a4:	4314      	orrs	r4, r2
   1e9a6:	0324      	lsls	r4, r4, #12
   1e9a8:	0b24      	lsrs	r4, r4, #12
   1e9aa:	e79e      	b.n	1e8ea <__aeabi_dadd+0x142>
   1e9ac:	002e      	movs	r6, r5
   1e9ae:	e77f      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1e9b0:	0008      	movs	r0, r1
   1e9b2:	4310      	orrs	r0, r2
   1e9b4:	d100      	bne.n	1e9b8 <__aeabi_dadd+0x210>
   1e9b6:	e0b4      	b.n	1eb22 <__aeabi_dadd+0x37a>
   1e9b8:	1e58      	subs	r0, r3, #1
   1e9ba:	2800      	cmp	r0, #0
   1e9bc:	d000      	beq.n	1e9c0 <__aeabi_dadd+0x218>
   1e9be:	e0de      	b.n	1eb7e <__aeabi_dadd+0x3d6>
   1e9c0:	18ba      	adds	r2, r7, r2
   1e9c2:	42ba      	cmp	r2, r7
   1e9c4:	419b      	sbcs	r3, r3
   1e9c6:	1864      	adds	r4, r4, r1
   1e9c8:	425b      	negs	r3, r3
   1e9ca:	18e4      	adds	r4, r4, r3
   1e9cc:	0017      	movs	r7, r2
   1e9ce:	2601      	movs	r6, #1
   1e9d0:	0223      	lsls	r3, r4, #8
   1e9d2:	d5a6      	bpl.n	1e922 <__aeabi_dadd+0x17a>
   1e9d4:	2602      	movs	r6, #2
   1e9d6:	e7d5      	b.n	1e984 <__aeabi_dadd+0x1dc>
   1e9d8:	2d00      	cmp	r5, #0
   1e9da:	d16e      	bne.n	1eaba <__aeabi_dadd+0x312>
   1e9dc:	1c70      	adds	r0, r6, #1
   1e9de:	0540      	lsls	r0, r0, #21
   1e9e0:	0d40      	lsrs	r0, r0, #21
   1e9e2:	2801      	cmp	r0, #1
   1e9e4:	dc00      	bgt.n	1e9e8 <__aeabi_dadd+0x240>
   1e9e6:	e0f9      	b.n	1ebdc <__aeabi_dadd+0x434>
   1e9e8:	1ab8      	subs	r0, r7, r2
   1e9ea:	4684      	mov	ip, r0
   1e9ec:	4287      	cmp	r7, r0
   1e9ee:	4180      	sbcs	r0, r0
   1e9f0:	1ae5      	subs	r5, r4, r3
   1e9f2:	4240      	negs	r0, r0
   1e9f4:	1a2d      	subs	r5, r5, r0
   1e9f6:	0228      	lsls	r0, r5, #8
   1e9f8:	d400      	bmi.n	1e9fc <__aeabi_dadd+0x254>
   1e9fa:	e089      	b.n	1eb10 <__aeabi_dadd+0x368>
   1e9fc:	1bd7      	subs	r7, r2, r7
   1e9fe:	42ba      	cmp	r2, r7
   1ea00:	4192      	sbcs	r2, r2
   1ea02:	1b1c      	subs	r4, r3, r4
   1ea04:	4252      	negs	r2, r2
   1ea06:	1aa5      	subs	r5, r4, r2
   1ea08:	46d8      	mov	r8, fp
   1ea0a:	e729      	b.n	1e860 <__aeabi_dadd+0xb8>
   1ea0c:	4645      	mov	r5, r8
   1ea0e:	2400      	movs	r4, #0
   1ea10:	2700      	movs	r7, #0
   1ea12:	e76a      	b.n	1e8ea <__aeabi_dadd+0x142>
   1ea14:	4c45      	ldr	r4, [pc, #276]	; (1eb2c <__aeabi_dadd+0x384>)
   1ea16:	1af6      	subs	r6, r6, r3
   1ea18:	402c      	ands	r4, r5
   1ea1a:	e749      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1ea1c:	003d      	movs	r5, r7
   1ea1e:	3828      	subs	r0, #40	; 0x28
   1ea20:	4085      	lsls	r5, r0
   1ea22:	2700      	movs	r7, #0
   1ea24:	e72e      	b.n	1e884 <__aeabi_dadd+0xdc>
   1ea26:	0038      	movs	r0, r7
   1ea28:	f001 fb04 	bl	20034 <__clzsi2>
   1ea2c:	3020      	adds	r0, #32
   1ea2e:	e71d      	b.n	1e86c <__aeabi_dadd+0xc4>
   1ea30:	430a      	orrs	r2, r1
   1ea32:	1e51      	subs	r1, r2, #1
   1ea34:	418a      	sbcs	r2, r1
   1ea36:	2100      	movs	r1, #0
   1ea38:	e707      	b.n	1e84a <__aeabi_dadd+0xa2>
   1ea3a:	2b00      	cmp	r3, #0
   1ea3c:	d000      	beq.n	1ea40 <__aeabi_dadd+0x298>
   1ea3e:	e0f3      	b.n	1ec28 <__aeabi_dadd+0x480>
   1ea40:	1c70      	adds	r0, r6, #1
   1ea42:	0543      	lsls	r3, r0, #21
   1ea44:	0d5b      	lsrs	r3, r3, #21
   1ea46:	2b01      	cmp	r3, #1
   1ea48:	dc00      	bgt.n	1ea4c <__aeabi_dadd+0x2a4>
   1ea4a:	e0ad      	b.n	1eba8 <__aeabi_dadd+0x400>
   1ea4c:	4b36      	ldr	r3, [pc, #216]	; (1eb28 <__aeabi_dadd+0x380>)
   1ea4e:	4298      	cmp	r0, r3
   1ea50:	d100      	bne.n	1ea54 <__aeabi_dadd+0x2ac>
   1ea52:	e0d1      	b.n	1ebf8 <__aeabi_dadd+0x450>
   1ea54:	18ba      	adds	r2, r7, r2
   1ea56:	42ba      	cmp	r2, r7
   1ea58:	41bf      	sbcs	r7, r7
   1ea5a:	1864      	adds	r4, r4, r1
   1ea5c:	427f      	negs	r7, r7
   1ea5e:	19e4      	adds	r4, r4, r7
   1ea60:	07e7      	lsls	r7, r4, #31
   1ea62:	0852      	lsrs	r2, r2, #1
   1ea64:	4317      	orrs	r7, r2
   1ea66:	0864      	lsrs	r4, r4, #1
   1ea68:	0006      	movs	r6, r0
   1ea6a:	e721      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1ea6c:	482e      	ldr	r0, [pc, #184]	; (1eb28 <__aeabi_dadd+0x380>)
   1ea6e:	4285      	cmp	r5, r0
   1ea70:	d100      	bne.n	1ea74 <__aeabi_dadd+0x2cc>
   1ea72:	e093      	b.n	1eb9c <__aeabi_dadd+0x3f4>
   1ea74:	001d      	movs	r5, r3
   1ea76:	e6d0      	b.n	1e81a <__aeabi_dadd+0x72>
   1ea78:	0029      	movs	r1, r5
   1ea7a:	3e1f      	subs	r6, #31
   1ea7c:	40f1      	lsrs	r1, r6
   1ea7e:	2b20      	cmp	r3, #32
   1ea80:	d100      	bne.n	1ea84 <__aeabi_dadd+0x2dc>
   1ea82:	e08d      	b.n	1eba0 <__aeabi_dadd+0x3f8>
   1ea84:	2240      	movs	r2, #64	; 0x40
   1ea86:	1ad3      	subs	r3, r2, r3
   1ea88:	409d      	lsls	r5, r3
   1ea8a:	432f      	orrs	r7, r5
   1ea8c:	1e7d      	subs	r5, r7, #1
   1ea8e:	41af      	sbcs	r7, r5
   1ea90:	2400      	movs	r4, #0
   1ea92:	430f      	orrs	r7, r1
   1ea94:	2600      	movs	r6, #0
   1ea96:	e744      	b.n	1e922 <__aeabi_dadd+0x17a>
   1ea98:	002b      	movs	r3, r5
   1ea9a:	0008      	movs	r0, r1
   1ea9c:	3b20      	subs	r3, #32
   1ea9e:	40d8      	lsrs	r0, r3
   1eaa0:	0003      	movs	r3, r0
   1eaa2:	2d20      	cmp	r5, #32
   1eaa4:	d100      	bne.n	1eaa8 <__aeabi_dadd+0x300>
   1eaa6:	e07d      	b.n	1eba4 <__aeabi_dadd+0x3fc>
   1eaa8:	2040      	movs	r0, #64	; 0x40
   1eaaa:	1b45      	subs	r5, r0, r5
   1eaac:	40a9      	lsls	r1, r5
   1eaae:	430a      	orrs	r2, r1
   1eab0:	1e51      	subs	r1, r2, #1
   1eab2:	418a      	sbcs	r2, r1
   1eab4:	2100      	movs	r1, #0
   1eab6:	431a      	orrs	r2, r3
   1eab8:	e6c7      	b.n	1e84a <__aeabi_dadd+0xa2>
   1eaba:	2e00      	cmp	r6, #0
   1eabc:	d050      	beq.n	1eb60 <__aeabi_dadd+0x3b8>
   1eabe:	4e1a      	ldr	r6, [pc, #104]	; (1eb28 <__aeabi_dadd+0x380>)
   1eac0:	42b0      	cmp	r0, r6
   1eac2:	d057      	beq.n	1eb74 <__aeabi_dadd+0x3cc>
   1eac4:	2680      	movs	r6, #128	; 0x80
   1eac6:	426b      	negs	r3, r5
   1eac8:	4699      	mov	r9, r3
   1eaca:	0436      	lsls	r6, r6, #16
   1eacc:	4334      	orrs	r4, r6
   1eace:	464b      	mov	r3, r9
   1ead0:	2b38      	cmp	r3, #56	; 0x38
   1ead2:	dd00      	ble.n	1ead6 <__aeabi_dadd+0x32e>
   1ead4:	e0d6      	b.n	1ec84 <__aeabi_dadd+0x4dc>
   1ead6:	2b1f      	cmp	r3, #31
   1ead8:	dd00      	ble.n	1eadc <__aeabi_dadd+0x334>
   1eada:	e135      	b.n	1ed48 <__aeabi_dadd+0x5a0>
   1eadc:	2620      	movs	r6, #32
   1eade:	1af5      	subs	r5, r6, r3
   1eae0:	0026      	movs	r6, r4
   1eae2:	40ae      	lsls	r6, r5
   1eae4:	46b2      	mov	sl, r6
   1eae6:	003e      	movs	r6, r7
   1eae8:	40de      	lsrs	r6, r3
   1eaea:	46ac      	mov	ip, r5
   1eaec:	0035      	movs	r5, r6
   1eaee:	4656      	mov	r6, sl
   1eaf0:	432e      	orrs	r6, r5
   1eaf2:	4665      	mov	r5, ip
   1eaf4:	40af      	lsls	r7, r5
   1eaf6:	1e7d      	subs	r5, r7, #1
   1eaf8:	41af      	sbcs	r7, r5
   1eafa:	40dc      	lsrs	r4, r3
   1eafc:	4337      	orrs	r7, r6
   1eafe:	1bd7      	subs	r7, r2, r7
   1eb00:	42ba      	cmp	r2, r7
   1eb02:	4192      	sbcs	r2, r2
   1eb04:	1b0c      	subs	r4, r1, r4
   1eb06:	4252      	negs	r2, r2
   1eb08:	1aa4      	subs	r4, r4, r2
   1eb0a:	0006      	movs	r6, r0
   1eb0c:	46d8      	mov	r8, fp
   1eb0e:	e6a3      	b.n	1e858 <__aeabi_dadd+0xb0>
   1eb10:	4664      	mov	r4, ip
   1eb12:	4667      	mov	r7, ip
   1eb14:	432c      	orrs	r4, r5
   1eb16:	d000      	beq.n	1eb1a <__aeabi_dadd+0x372>
   1eb18:	e6a2      	b.n	1e860 <__aeabi_dadd+0xb8>
   1eb1a:	2500      	movs	r5, #0
   1eb1c:	2600      	movs	r6, #0
   1eb1e:	2700      	movs	r7, #0
   1eb20:	e706      	b.n	1e930 <__aeabi_dadd+0x188>
   1eb22:	001e      	movs	r6, r3
   1eb24:	e6c4      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1eb26:	46c0      	nop			; (mov r8, r8)
   1eb28:	000007ff 	.word	0x000007ff
   1eb2c:	ff7fffff 	.word	0xff7fffff
   1eb30:	800fffff 	.word	0x800fffff
   1eb34:	2b1f      	cmp	r3, #31
   1eb36:	dc63      	bgt.n	1ec00 <__aeabi_dadd+0x458>
   1eb38:	2020      	movs	r0, #32
   1eb3a:	1ac3      	subs	r3, r0, r3
   1eb3c:	0008      	movs	r0, r1
   1eb3e:	4098      	lsls	r0, r3
   1eb40:	469c      	mov	ip, r3
   1eb42:	4683      	mov	fp, r0
   1eb44:	4653      	mov	r3, sl
   1eb46:	0010      	movs	r0, r2
   1eb48:	40d8      	lsrs	r0, r3
   1eb4a:	0003      	movs	r3, r0
   1eb4c:	4658      	mov	r0, fp
   1eb4e:	4318      	orrs	r0, r3
   1eb50:	4663      	mov	r3, ip
   1eb52:	409a      	lsls	r2, r3
   1eb54:	1e53      	subs	r3, r2, #1
   1eb56:	419a      	sbcs	r2, r3
   1eb58:	4653      	mov	r3, sl
   1eb5a:	4302      	orrs	r2, r0
   1eb5c:	40d9      	lsrs	r1, r3
   1eb5e:	e703      	b.n	1e968 <__aeabi_dadd+0x1c0>
   1eb60:	0026      	movs	r6, r4
   1eb62:	433e      	orrs	r6, r7
   1eb64:	d006      	beq.n	1eb74 <__aeabi_dadd+0x3cc>
   1eb66:	43eb      	mvns	r3, r5
   1eb68:	4699      	mov	r9, r3
   1eb6a:	2b00      	cmp	r3, #0
   1eb6c:	d0c7      	beq.n	1eafe <__aeabi_dadd+0x356>
   1eb6e:	4e94      	ldr	r6, [pc, #592]	; (1edc0 <__aeabi_dadd+0x618>)
   1eb70:	42b0      	cmp	r0, r6
   1eb72:	d1ac      	bne.n	1eace <__aeabi_dadd+0x326>
   1eb74:	000c      	movs	r4, r1
   1eb76:	0017      	movs	r7, r2
   1eb78:	0006      	movs	r6, r0
   1eb7a:	46d8      	mov	r8, fp
   1eb7c:	e698      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1eb7e:	4b90      	ldr	r3, [pc, #576]	; (1edc0 <__aeabi_dadd+0x618>)
   1eb80:	459a      	cmp	sl, r3
   1eb82:	d00b      	beq.n	1eb9c <__aeabi_dadd+0x3f4>
   1eb84:	4682      	mov	sl, r0
   1eb86:	e6e7      	b.n	1e958 <__aeabi_dadd+0x1b0>
   1eb88:	2800      	cmp	r0, #0
   1eb8a:	d000      	beq.n	1eb8e <__aeabi_dadd+0x3e6>
   1eb8c:	e09e      	b.n	1eccc <__aeabi_dadd+0x524>
   1eb8e:	0018      	movs	r0, r3
   1eb90:	4310      	orrs	r0, r2
   1eb92:	d100      	bne.n	1eb96 <__aeabi_dadd+0x3ee>
   1eb94:	e0e9      	b.n	1ed6a <__aeabi_dadd+0x5c2>
   1eb96:	001c      	movs	r4, r3
   1eb98:	0017      	movs	r7, r2
   1eb9a:	46d8      	mov	r8, fp
   1eb9c:	4e88      	ldr	r6, [pc, #544]	; (1edc0 <__aeabi_dadd+0x618>)
   1eb9e:	e687      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1eba0:	2500      	movs	r5, #0
   1eba2:	e772      	b.n	1ea8a <__aeabi_dadd+0x2e2>
   1eba4:	2100      	movs	r1, #0
   1eba6:	e782      	b.n	1eaae <__aeabi_dadd+0x306>
   1eba8:	0023      	movs	r3, r4
   1ebaa:	433b      	orrs	r3, r7
   1ebac:	2e00      	cmp	r6, #0
   1ebae:	d000      	beq.n	1ebb2 <__aeabi_dadd+0x40a>
   1ebb0:	e0ab      	b.n	1ed0a <__aeabi_dadd+0x562>
   1ebb2:	2b00      	cmp	r3, #0
   1ebb4:	d100      	bne.n	1ebb8 <__aeabi_dadd+0x410>
   1ebb6:	e0e7      	b.n	1ed88 <__aeabi_dadd+0x5e0>
   1ebb8:	000b      	movs	r3, r1
   1ebba:	4313      	orrs	r3, r2
   1ebbc:	d100      	bne.n	1ebc0 <__aeabi_dadd+0x418>
   1ebbe:	e677      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1ebc0:	18ba      	adds	r2, r7, r2
   1ebc2:	42ba      	cmp	r2, r7
   1ebc4:	41bf      	sbcs	r7, r7
   1ebc6:	1864      	adds	r4, r4, r1
   1ebc8:	427f      	negs	r7, r7
   1ebca:	19e4      	adds	r4, r4, r7
   1ebcc:	0223      	lsls	r3, r4, #8
   1ebce:	d400      	bmi.n	1ebd2 <__aeabi_dadd+0x42a>
   1ebd0:	e0f2      	b.n	1edb8 <__aeabi_dadd+0x610>
   1ebd2:	4b7c      	ldr	r3, [pc, #496]	; (1edc4 <__aeabi_dadd+0x61c>)
   1ebd4:	0017      	movs	r7, r2
   1ebd6:	401c      	ands	r4, r3
   1ebd8:	0006      	movs	r6, r0
   1ebda:	e669      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1ebdc:	0020      	movs	r0, r4
   1ebde:	4338      	orrs	r0, r7
   1ebe0:	2e00      	cmp	r6, #0
   1ebe2:	d1d1      	bne.n	1eb88 <__aeabi_dadd+0x3e0>
   1ebe4:	2800      	cmp	r0, #0
   1ebe6:	d15b      	bne.n	1eca0 <__aeabi_dadd+0x4f8>
   1ebe8:	001c      	movs	r4, r3
   1ebea:	4314      	orrs	r4, r2
   1ebec:	d100      	bne.n	1ebf0 <__aeabi_dadd+0x448>
   1ebee:	e0a8      	b.n	1ed42 <__aeabi_dadd+0x59a>
   1ebf0:	001c      	movs	r4, r3
   1ebf2:	0017      	movs	r7, r2
   1ebf4:	46d8      	mov	r8, fp
   1ebf6:	e65b      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1ebf8:	0006      	movs	r6, r0
   1ebfa:	2400      	movs	r4, #0
   1ebfc:	2700      	movs	r7, #0
   1ebfe:	e697      	b.n	1e930 <__aeabi_dadd+0x188>
   1ec00:	4650      	mov	r0, sl
   1ec02:	000b      	movs	r3, r1
   1ec04:	3820      	subs	r0, #32
   1ec06:	40c3      	lsrs	r3, r0
   1ec08:	4699      	mov	r9, r3
   1ec0a:	4653      	mov	r3, sl
   1ec0c:	2b20      	cmp	r3, #32
   1ec0e:	d100      	bne.n	1ec12 <__aeabi_dadd+0x46a>
   1ec10:	e095      	b.n	1ed3e <__aeabi_dadd+0x596>
   1ec12:	2340      	movs	r3, #64	; 0x40
   1ec14:	4650      	mov	r0, sl
   1ec16:	1a1b      	subs	r3, r3, r0
   1ec18:	4099      	lsls	r1, r3
   1ec1a:	430a      	orrs	r2, r1
   1ec1c:	1e51      	subs	r1, r2, #1
   1ec1e:	418a      	sbcs	r2, r1
   1ec20:	464b      	mov	r3, r9
   1ec22:	2100      	movs	r1, #0
   1ec24:	431a      	orrs	r2, r3
   1ec26:	e69f      	b.n	1e968 <__aeabi_dadd+0x1c0>
   1ec28:	2e00      	cmp	r6, #0
   1ec2a:	d130      	bne.n	1ec8e <__aeabi_dadd+0x4e6>
   1ec2c:	0026      	movs	r6, r4
   1ec2e:	433e      	orrs	r6, r7
   1ec30:	d067      	beq.n	1ed02 <__aeabi_dadd+0x55a>
   1ec32:	43db      	mvns	r3, r3
   1ec34:	469a      	mov	sl, r3
   1ec36:	2b00      	cmp	r3, #0
   1ec38:	d01c      	beq.n	1ec74 <__aeabi_dadd+0x4cc>
   1ec3a:	4e61      	ldr	r6, [pc, #388]	; (1edc0 <__aeabi_dadd+0x618>)
   1ec3c:	42b0      	cmp	r0, r6
   1ec3e:	d060      	beq.n	1ed02 <__aeabi_dadd+0x55a>
   1ec40:	4653      	mov	r3, sl
   1ec42:	2b38      	cmp	r3, #56	; 0x38
   1ec44:	dd00      	ble.n	1ec48 <__aeabi_dadd+0x4a0>
   1ec46:	e096      	b.n	1ed76 <__aeabi_dadd+0x5ce>
   1ec48:	2b1f      	cmp	r3, #31
   1ec4a:	dd00      	ble.n	1ec4e <__aeabi_dadd+0x4a6>
   1ec4c:	e09f      	b.n	1ed8e <__aeabi_dadd+0x5e6>
   1ec4e:	2620      	movs	r6, #32
   1ec50:	1af3      	subs	r3, r6, r3
   1ec52:	0026      	movs	r6, r4
   1ec54:	409e      	lsls	r6, r3
   1ec56:	469c      	mov	ip, r3
   1ec58:	46b3      	mov	fp, r6
   1ec5a:	4653      	mov	r3, sl
   1ec5c:	003e      	movs	r6, r7
   1ec5e:	40de      	lsrs	r6, r3
   1ec60:	0033      	movs	r3, r6
   1ec62:	465e      	mov	r6, fp
   1ec64:	431e      	orrs	r6, r3
   1ec66:	4663      	mov	r3, ip
   1ec68:	409f      	lsls	r7, r3
   1ec6a:	1e7b      	subs	r3, r7, #1
   1ec6c:	419f      	sbcs	r7, r3
   1ec6e:	4653      	mov	r3, sl
   1ec70:	40dc      	lsrs	r4, r3
   1ec72:	4337      	orrs	r7, r6
   1ec74:	18bf      	adds	r7, r7, r2
   1ec76:	4297      	cmp	r7, r2
   1ec78:	4192      	sbcs	r2, r2
   1ec7a:	1864      	adds	r4, r4, r1
   1ec7c:	4252      	negs	r2, r2
   1ec7e:	18a4      	adds	r4, r4, r2
   1ec80:	0006      	movs	r6, r0
   1ec82:	e678      	b.n	1e976 <__aeabi_dadd+0x1ce>
   1ec84:	4327      	orrs	r7, r4
   1ec86:	1e7c      	subs	r4, r7, #1
   1ec88:	41a7      	sbcs	r7, r4
   1ec8a:	2400      	movs	r4, #0
   1ec8c:	e737      	b.n	1eafe <__aeabi_dadd+0x356>
   1ec8e:	4e4c      	ldr	r6, [pc, #304]	; (1edc0 <__aeabi_dadd+0x618>)
   1ec90:	42b0      	cmp	r0, r6
   1ec92:	d036      	beq.n	1ed02 <__aeabi_dadd+0x55a>
   1ec94:	2680      	movs	r6, #128	; 0x80
   1ec96:	425b      	negs	r3, r3
   1ec98:	0436      	lsls	r6, r6, #16
   1ec9a:	469a      	mov	sl, r3
   1ec9c:	4334      	orrs	r4, r6
   1ec9e:	e7cf      	b.n	1ec40 <__aeabi_dadd+0x498>
   1eca0:	0018      	movs	r0, r3
   1eca2:	4310      	orrs	r0, r2
   1eca4:	d100      	bne.n	1eca8 <__aeabi_dadd+0x500>
   1eca6:	e603      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1eca8:	1ab8      	subs	r0, r7, r2
   1ecaa:	4684      	mov	ip, r0
   1ecac:	4567      	cmp	r7, ip
   1ecae:	41ad      	sbcs	r5, r5
   1ecb0:	1ae0      	subs	r0, r4, r3
   1ecb2:	426d      	negs	r5, r5
   1ecb4:	1b40      	subs	r0, r0, r5
   1ecb6:	0205      	lsls	r5, r0, #8
   1ecb8:	d400      	bmi.n	1ecbc <__aeabi_dadd+0x514>
   1ecba:	e62c      	b.n	1e916 <__aeabi_dadd+0x16e>
   1ecbc:	1bd7      	subs	r7, r2, r7
   1ecbe:	42ba      	cmp	r2, r7
   1ecc0:	4192      	sbcs	r2, r2
   1ecc2:	1b1c      	subs	r4, r3, r4
   1ecc4:	4252      	negs	r2, r2
   1ecc6:	1aa4      	subs	r4, r4, r2
   1ecc8:	46d8      	mov	r8, fp
   1ecca:	e5f1      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1eccc:	0018      	movs	r0, r3
   1ecce:	4310      	orrs	r0, r2
   1ecd0:	d100      	bne.n	1ecd4 <__aeabi_dadd+0x52c>
   1ecd2:	e763      	b.n	1eb9c <__aeabi_dadd+0x3f4>
   1ecd4:	08f8      	lsrs	r0, r7, #3
   1ecd6:	0767      	lsls	r7, r4, #29
   1ecd8:	4307      	orrs	r7, r0
   1ecda:	2080      	movs	r0, #128	; 0x80
   1ecdc:	08e4      	lsrs	r4, r4, #3
   1ecde:	0300      	lsls	r0, r0, #12
   1ece0:	4204      	tst	r4, r0
   1ece2:	d008      	beq.n	1ecf6 <__aeabi_dadd+0x54e>
   1ece4:	08dd      	lsrs	r5, r3, #3
   1ece6:	4205      	tst	r5, r0
   1ece8:	d105      	bne.n	1ecf6 <__aeabi_dadd+0x54e>
   1ecea:	08d2      	lsrs	r2, r2, #3
   1ecec:	0759      	lsls	r1, r3, #29
   1ecee:	4311      	orrs	r1, r2
   1ecf0:	000f      	movs	r7, r1
   1ecf2:	002c      	movs	r4, r5
   1ecf4:	46d8      	mov	r8, fp
   1ecf6:	0f7b      	lsrs	r3, r7, #29
   1ecf8:	00e4      	lsls	r4, r4, #3
   1ecfa:	431c      	orrs	r4, r3
   1ecfc:	00ff      	lsls	r7, r7, #3
   1ecfe:	4e30      	ldr	r6, [pc, #192]	; (1edc0 <__aeabi_dadd+0x618>)
   1ed00:	e5d6      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1ed02:	000c      	movs	r4, r1
   1ed04:	0017      	movs	r7, r2
   1ed06:	0006      	movs	r6, r0
   1ed08:	e5d2      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1ed0a:	2b00      	cmp	r3, #0
   1ed0c:	d038      	beq.n	1ed80 <__aeabi_dadd+0x5d8>
   1ed0e:	000b      	movs	r3, r1
   1ed10:	4313      	orrs	r3, r2
   1ed12:	d100      	bne.n	1ed16 <__aeabi_dadd+0x56e>
   1ed14:	e742      	b.n	1eb9c <__aeabi_dadd+0x3f4>
   1ed16:	08f8      	lsrs	r0, r7, #3
   1ed18:	0767      	lsls	r7, r4, #29
   1ed1a:	4307      	orrs	r7, r0
   1ed1c:	2080      	movs	r0, #128	; 0x80
   1ed1e:	08e4      	lsrs	r4, r4, #3
   1ed20:	0300      	lsls	r0, r0, #12
   1ed22:	4204      	tst	r4, r0
   1ed24:	d0e7      	beq.n	1ecf6 <__aeabi_dadd+0x54e>
   1ed26:	08cb      	lsrs	r3, r1, #3
   1ed28:	4203      	tst	r3, r0
   1ed2a:	d1e4      	bne.n	1ecf6 <__aeabi_dadd+0x54e>
   1ed2c:	08d2      	lsrs	r2, r2, #3
   1ed2e:	0749      	lsls	r1, r1, #29
   1ed30:	4311      	orrs	r1, r2
   1ed32:	000f      	movs	r7, r1
   1ed34:	001c      	movs	r4, r3
   1ed36:	e7de      	b.n	1ecf6 <__aeabi_dadd+0x54e>
   1ed38:	2700      	movs	r7, #0
   1ed3a:	2400      	movs	r4, #0
   1ed3c:	e5d5      	b.n	1e8ea <__aeabi_dadd+0x142>
   1ed3e:	2100      	movs	r1, #0
   1ed40:	e76b      	b.n	1ec1a <__aeabi_dadd+0x472>
   1ed42:	2500      	movs	r5, #0
   1ed44:	2700      	movs	r7, #0
   1ed46:	e5f3      	b.n	1e930 <__aeabi_dadd+0x188>
   1ed48:	464e      	mov	r6, r9
   1ed4a:	0025      	movs	r5, r4
   1ed4c:	3e20      	subs	r6, #32
   1ed4e:	40f5      	lsrs	r5, r6
   1ed50:	464b      	mov	r3, r9
   1ed52:	002e      	movs	r6, r5
   1ed54:	2b20      	cmp	r3, #32
   1ed56:	d02d      	beq.n	1edb4 <__aeabi_dadd+0x60c>
   1ed58:	2540      	movs	r5, #64	; 0x40
   1ed5a:	1aed      	subs	r5, r5, r3
   1ed5c:	40ac      	lsls	r4, r5
   1ed5e:	4327      	orrs	r7, r4
   1ed60:	1e7c      	subs	r4, r7, #1
   1ed62:	41a7      	sbcs	r7, r4
   1ed64:	2400      	movs	r4, #0
   1ed66:	4337      	orrs	r7, r6
   1ed68:	e6c9      	b.n	1eafe <__aeabi_dadd+0x356>
   1ed6a:	2480      	movs	r4, #128	; 0x80
   1ed6c:	2500      	movs	r5, #0
   1ed6e:	0324      	lsls	r4, r4, #12
   1ed70:	4e13      	ldr	r6, [pc, #76]	; (1edc0 <__aeabi_dadd+0x618>)
   1ed72:	2700      	movs	r7, #0
   1ed74:	e5dc      	b.n	1e930 <__aeabi_dadd+0x188>
   1ed76:	4327      	orrs	r7, r4
   1ed78:	1e7c      	subs	r4, r7, #1
   1ed7a:	41a7      	sbcs	r7, r4
   1ed7c:	2400      	movs	r4, #0
   1ed7e:	e779      	b.n	1ec74 <__aeabi_dadd+0x4cc>
   1ed80:	000c      	movs	r4, r1
   1ed82:	0017      	movs	r7, r2
   1ed84:	4e0e      	ldr	r6, [pc, #56]	; (1edc0 <__aeabi_dadd+0x618>)
   1ed86:	e593      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1ed88:	000c      	movs	r4, r1
   1ed8a:	0017      	movs	r7, r2
   1ed8c:	e590      	b.n	1e8b0 <__aeabi_dadd+0x108>
   1ed8e:	4656      	mov	r6, sl
   1ed90:	0023      	movs	r3, r4
   1ed92:	3e20      	subs	r6, #32
   1ed94:	40f3      	lsrs	r3, r6
   1ed96:	4699      	mov	r9, r3
   1ed98:	4653      	mov	r3, sl
   1ed9a:	2b20      	cmp	r3, #32
   1ed9c:	d00e      	beq.n	1edbc <__aeabi_dadd+0x614>
   1ed9e:	2340      	movs	r3, #64	; 0x40
   1eda0:	4656      	mov	r6, sl
   1eda2:	1b9b      	subs	r3, r3, r6
   1eda4:	409c      	lsls	r4, r3
   1eda6:	4327      	orrs	r7, r4
   1eda8:	1e7c      	subs	r4, r7, #1
   1edaa:	41a7      	sbcs	r7, r4
   1edac:	464b      	mov	r3, r9
   1edae:	2400      	movs	r4, #0
   1edb0:	431f      	orrs	r7, r3
   1edb2:	e75f      	b.n	1ec74 <__aeabi_dadd+0x4cc>
   1edb4:	2400      	movs	r4, #0
   1edb6:	e7d2      	b.n	1ed5e <__aeabi_dadd+0x5b6>
   1edb8:	0017      	movs	r7, r2
   1edba:	e5b2      	b.n	1e922 <__aeabi_dadd+0x17a>
   1edbc:	2400      	movs	r4, #0
   1edbe:	e7f2      	b.n	1eda6 <__aeabi_dadd+0x5fe>
   1edc0:	000007ff 	.word	0x000007ff
   1edc4:	ff7fffff 	.word	0xff7fffff

0001edc8 <__aeabi_ddiv>:
   1edc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1edca:	4657      	mov	r7, sl
   1edcc:	4645      	mov	r5, r8
   1edce:	46de      	mov	lr, fp
   1edd0:	464e      	mov	r6, r9
   1edd2:	b5e0      	push	{r5, r6, r7, lr}
   1edd4:	004c      	lsls	r4, r1, #1
   1edd6:	030e      	lsls	r6, r1, #12
   1edd8:	b087      	sub	sp, #28
   1edda:	4683      	mov	fp, r0
   1eddc:	4692      	mov	sl, r2
   1edde:	001d      	movs	r5, r3
   1ede0:	4680      	mov	r8, r0
   1ede2:	0b36      	lsrs	r6, r6, #12
   1ede4:	0d64      	lsrs	r4, r4, #21
   1ede6:	0fcf      	lsrs	r7, r1, #31
   1ede8:	2c00      	cmp	r4, #0
   1edea:	d04f      	beq.n	1ee8c <__aeabi_ddiv+0xc4>
   1edec:	4b6f      	ldr	r3, [pc, #444]	; (1efac <__aeabi_ddiv+0x1e4>)
   1edee:	429c      	cmp	r4, r3
   1edf0:	d035      	beq.n	1ee5e <__aeabi_ddiv+0x96>
   1edf2:	2380      	movs	r3, #128	; 0x80
   1edf4:	0f42      	lsrs	r2, r0, #29
   1edf6:	041b      	lsls	r3, r3, #16
   1edf8:	00f6      	lsls	r6, r6, #3
   1edfa:	4313      	orrs	r3, r2
   1edfc:	4333      	orrs	r3, r6
   1edfe:	4699      	mov	r9, r3
   1ee00:	00c3      	lsls	r3, r0, #3
   1ee02:	4698      	mov	r8, r3
   1ee04:	4b6a      	ldr	r3, [pc, #424]	; (1efb0 <__aeabi_ddiv+0x1e8>)
   1ee06:	2600      	movs	r6, #0
   1ee08:	469c      	mov	ip, r3
   1ee0a:	2300      	movs	r3, #0
   1ee0c:	4464      	add	r4, ip
   1ee0e:	9303      	str	r3, [sp, #12]
   1ee10:	032b      	lsls	r3, r5, #12
   1ee12:	0b1b      	lsrs	r3, r3, #12
   1ee14:	469b      	mov	fp, r3
   1ee16:	006b      	lsls	r3, r5, #1
   1ee18:	0fed      	lsrs	r5, r5, #31
   1ee1a:	4650      	mov	r0, sl
   1ee1c:	0d5b      	lsrs	r3, r3, #21
   1ee1e:	9501      	str	r5, [sp, #4]
   1ee20:	d05e      	beq.n	1eee0 <__aeabi_ddiv+0x118>
   1ee22:	4a62      	ldr	r2, [pc, #392]	; (1efac <__aeabi_ddiv+0x1e4>)
   1ee24:	4293      	cmp	r3, r2
   1ee26:	d053      	beq.n	1eed0 <__aeabi_ddiv+0x108>
   1ee28:	465a      	mov	r2, fp
   1ee2a:	00d1      	lsls	r1, r2, #3
   1ee2c:	2280      	movs	r2, #128	; 0x80
   1ee2e:	0f40      	lsrs	r0, r0, #29
   1ee30:	0412      	lsls	r2, r2, #16
   1ee32:	4302      	orrs	r2, r0
   1ee34:	430a      	orrs	r2, r1
   1ee36:	4693      	mov	fp, r2
   1ee38:	4652      	mov	r2, sl
   1ee3a:	00d1      	lsls	r1, r2, #3
   1ee3c:	4a5c      	ldr	r2, [pc, #368]	; (1efb0 <__aeabi_ddiv+0x1e8>)
   1ee3e:	4694      	mov	ip, r2
   1ee40:	2200      	movs	r2, #0
   1ee42:	4463      	add	r3, ip
   1ee44:	0038      	movs	r0, r7
   1ee46:	4068      	eors	r0, r5
   1ee48:	4684      	mov	ip, r0
   1ee4a:	9002      	str	r0, [sp, #8]
   1ee4c:	1ae4      	subs	r4, r4, r3
   1ee4e:	4316      	orrs	r6, r2
   1ee50:	2e0f      	cmp	r6, #15
   1ee52:	d900      	bls.n	1ee56 <__aeabi_ddiv+0x8e>
   1ee54:	e0b4      	b.n	1efc0 <__aeabi_ddiv+0x1f8>
   1ee56:	4b57      	ldr	r3, [pc, #348]	; (1efb4 <__aeabi_ddiv+0x1ec>)
   1ee58:	00b6      	lsls	r6, r6, #2
   1ee5a:	599b      	ldr	r3, [r3, r6]
   1ee5c:	469f      	mov	pc, r3
   1ee5e:	0003      	movs	r3, r0
   1ee60:	4333      	orrs	r3, r6
   1ee62:	4699      	mov	r9, r3
   1ee64:	d16c      	bne.n	1ef40 <__aeabi_ddiv+0x178>
   1ee66:	2300      	movs	r3, #0
   1ee68:	4698      	mov	r8, r3
   1ee6a:	3302      	adds	r3, #2
   1ee6c:	2608      	movs	r6, #8
   1ee6e:	9303      	str	r3, [sp, #12]
   1ee70:	e7ce      	b.n	1ee10 <__aeabi_ddiv+0x48>
   1ee72:	46cb      	mov	fp, r9
   1ee74:	4641      	mov	r1, r8
   1ee76:	9a03      	ldr	r2, [sp, #12]
   1ee78:	9701      	str	r7, [sp, #4]
   1ee7a:	2a02      	cmp	r2, #2
   1ee7c:	d165      	bne.n	1ef4a <__aeabi_ddiv+0x182>
   1ee7e:	9b01      	ldr	r3, [sp, #4]
   1ee80:	4c4a      	ldr	r4, [pc, #296]	; (1efac <__aeabi_ddiv+0x1e4>)
   1ee82:	469c      	mov	ip, r3
   1ee84:	2300      	movs	r3, #0
   1ee86:	2200      	movs	r2, #0
   1ee88:	4698      	mov	r8, r3
   1ee8a:	e06b      	b.n	1ef64 <__aeabi_ddiv+0x19c>
   1ee8c:	0003      	movs	r3, r0
   1ee8e:	4333      	orrs	r3, r6
   1ee90:	4699      	mov	r9, r3
   1ee92:	d04e      	beq.n	1ef32 <__aeabi_ddiv+0x16a>
   1ee94:	2e00      	cmp	r6, #0
   1ee96:	d100      	bne.n	1ee9a <__aeabi_ddiv+0xd2>
   1ee98:	e1bc      	b.n	1f214 <__aeabi_ddiv+0x44c>
   1ee9a:	0030      	movs	r0, r6
   1ee9c:	f001 f8ca 	bl	20034 <__clzsi2>
   1eea0:	0003      	movs	r3, r0
   1eea2:	3b0b      	subs	r3, #11
   1eea4:	2b1c      	cmp	r3, #28
   1eea6:	dd00      	ble.n	1eeaa <__aeabi_ddiv+0xe2>
   1eea8:	e1ac      	b.n	1f204 <__aeabi_ddiv+0x43c>
   1eeaa:	221d      	movs	r2, #29
   1eeac:	1ad3      	subs	r3, r2, r3
   1eeae:	465a      	mov	r2, fp
   1eeb0:	0001      	movs	r1, r0
   1eeb2:	40da      	lsrs	r2, r3
   1eeb4:	3908      	subs	r1, #8
   1eeb6:	408e      	lsls	r6, r1
   1eeb8:	0013      	movs	r3, r2
   1eeba:	4333      	orrs	r3, r6
   1eebc:	4699      	mov	r9, r3
   1eebe:	465b      	mov	r3, fp
   1eec0:	408b      	lsls	r3, r1
   1eec2:	4698      	mov	r8, r3
   1eec4:	2300      	movs	r3, #0
   1eec6:	4c3c      	ldr	r4, [pc, #240]	; (1efb8 <__aeabi_ddiv+0x1f0>)
   1eec8:	2600      	movs	r6, #0
   1eeca:	1a24      	subs	r4, r4, r0
   1eecc:	9303      	str	r3, [sp, #12]
   1eece:	e79f      	b.n	1ee10 <__aeabi_ddiv+0x48>
   1eed0:	4651      	mov	r1, sl
   1eed2:	465a      	mov	r2, fp
   1eed4:	4311      	orrs	r1, r2
   1eed6:	d129      	bne.n	1ef2c <__aeabi_ddiv+0x164>
   1eed8:	2200      	movs	r2, #0
   1eeda:	4693      	mov	fp, r2
   1eedc:	3202      	adds	r2, #2
   1eede:	e7b1      	b.n	1ee44 <__aeabi_ddiv+0x7c>
   1eee0:	4659      	mov	r1, fp
   1eee2:	4301      	orrs	r1, r0
   1eee4:	d01e      	beq.n	1ef24 <__aeabi_ddiv+0x15c>
   1eee6:	465b      	mov	r3, fp
   1eee8:	2b00      	cmp	r3, #0
   1eeea:	d100      	bne.n	1eeee <__aeabi_ddiv+0x126>
   1eeec:	e19e      	b.n	1f22c <__aeabi_ddiv+0x464>
   1eeee:	4658      	mov	r0, fp
   1eef0:	f001 f8a0 	bl	20034 <__clzsi2>
   1eef4:	0003      	movs	r3, r0
   1eef6:	3b0b      	subs	r3, #11
   1eef8:	2b1c      	cmp	r3, #28
   1eefa:	dd00      	ble.n	1eefe <__aeabi_ddiv+0x136>
   1eefc:	e18f      	b.n	1f21e <__aeabi_ddiv+0x456>
   1eefe:	0002      	movs	r2, r0
   1ef00:	4659      	mov	r1, fp
   1ef02:	3a08      	subs	r2, #8
   1ef04:	4091      	lsls	r1, r2
   1ef06:	468b      	mov	fp, r1
   1ef08:	211d      	movs	r1, #29
   1ef0a:	1acb      	subs	r3, r1, r3
   1ef0c:	4651      	mov	r1, sl
   1ef0e:	40d9      	lsrs	r1, r3
   1ef10:	000b      	movs	r3, r1
   1ef12:	4659      	mov	r1, fp
   1ef14:	430b      	orrs	r3, r1
   1ef16:	4651      	mov	r1, sl
   1ef18:	469b      	mov	fp, r3
   1ef1a:	4091      	lsls	r1, r2
   1ef1c:	4b26      	ldr	r3, [pc, #152]	; (1efb8 <__aeabi_ddiv+0x1f0>)
   1ef1e:	2200      	movs	r2, #0
   1ef20:	1a1b      	subs	r3, r3, r0
   1ef22:	e78f      	b.n	1ee44 <__aeabi_ddiv+0x7c>
   1ef24:	2300      	movs	r3, #0
   1ef26:	2201      	movs	r2, #1
   1ef28:	469b      	mov	fp, r3
   1ef2a:	e78b      	b.n	1ee44 <__aeabi_ddiv+0x7c>
   1ef2c:	4651      	mov	r1, sl
   1ef2e:	2203      	movs	r2, #3
   1ef30:	e788      	b.n	1ee44 <__aeabi_ddiv+0x7c>
   1ef32:	2300      	movs	r3, #0
   1ef34:	4698      	mov	r8, r3
   1ef36:	3301      	adds	r3, #1
   1ef38:	2604      	movs	r6, #4
   1ef3a:	2400      	movs	r4, #0
   1ef3c:	9303      	str	r3, [sp, #12]
   1ef3e:	e767      	b.n	1ee10 <__aeabi_ddiv+0x48>
   1ef40:	2303      	movs	r3, #3
   1ef42:	46b1      	mov	r9, r6
   1ef44:	9303      	str	r3, [sp, #12]
   1ef46:	260c      	movs	r6, #12
   1ef48:	e762      	b.n	1ee10 <__aeabi_ddiv+0x48>
   1ef4a:	2a03      	cmp	r2, #3
   1ef4c:	d100      	bne.n	1ef50 <__aeabi_ddiv+0x188>
   1ef4e:	e25c      	b.n	1f40a <__aeabi_ddiv+0x642>
   1ef50:	9b01      	ldr	r3, [sp, #4]
   1ef52:	2a01      	cmp	r2, #1
   1ef54:	d000      	beq.n	1ef58 <__aeabi_ddiv+0x190>
   1ef56:	e1e4      	b.n	1f322 <__aeabi_ddiv+0x55a>
   1ef58:	4013      	ands	r3, r2
   1ef5a:	469c      	mov	ip, r3
   1ef5c:	2300      	movs	r3, #0
   1ef5e:	2400      	movs	r4, #0
   1ef60:	2200      	movs	r2, #0
   1ef62:	4698      	mov	r8, r3
   1ef64:	2100      	movs	r1, #0
   1ef66:	0312      	lsls	r2, r2, #12
   1ef68:	0b13      	lsrs	r3, r2, #12
   1ef6a:	0d0a      	lsrs	r2, r1, #20
   1ef6c:	0512      	lsls	r2, r2, #20
   1ef6e:	431a      	orrs	r2, r3
   1ef70:	0523      	lsls	r3, r4, #20
   1ef72:	4c12      	ldr	r4, [pc, #72]	; (1efbc <__aeabi_ddiv+0x1f4>)
   1ef74:	4640      	mov	r0, r8
   1ef76:	4022      	ands	r2, r4
   1ef78:	4313      	orrs	r3, r2
   1ef7a:	4662      	mov	r2, ip
   1ef7c:	005b      	lsls	r3, r3, #1
   1ef7e:	07d2      	lsls	r2, r2, #31
   1ef80:	085b      	lsrs	r3, r3, #1
   1ef82:	4313      	orrs	r3, r2
   1ef84:	0019      	movs	r1, r3
   1ef86:	b007      	add	sp, #28
   1ef88:	bc3c      	pop	{r2, r3, r4, r5}
   1ef8a:	4690      	mov	r8, r2
   1ef8c:	4699      	mov	r9, r3
   1ef8e:	46a2      	mov	sl, r4
   1ef90:	46ab      	mov	fp, r5
   1ef92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ef94:	2300      	movs	r3, #0
   1ef96:	2280      	movs	r2, #128	; 0x80
   1ef98:	469c      	mov	ip, r3
   1ef9a:	0312      	lsls	r2, r2, #12
   1ef9c:	4698      	mov	r8, r3
   1ef9e:	4c03      	ldr	r4, [pc, #12]	; (1efac <__aeabi_ddiv+0x1e4>)
   1efa0:	e7e0      	b.n	1ef64 <__aeabi_ddiv+0x19c>
   1efa2:	2300      	movs	r3, #0
   1efa4:	4c01      	ldr	r4, [pc, #4]	; (1efac <__aeabi_ddiv+0x1e4>)
   1efa6:	2200      	movs	r2, #0
   1efa8:	4698      	mov	r8, r3
   1efaa:	e7db      	b.n	1ef64 <__aeabi_ddiv+0x19c>
   1efac:	000007ff 	.word	0x000007ff
   1efb0:	fffffc01 	.word	0xfffffc01
   1efb4:	00025330 	.word	0x00025330
   1efb8:	fffffc0d 	.word	0xfffffc0d
   1efbc:	800fffff 	.word	0x800fffff
   1efc0:	45d9      	cmp	r9, fp
   1efc2:	d900      	bls.n	1efc6 <__aeabi_ddiv+0x1fe>
   1efc4:	e139      	b.n	1f23a <__aeabi_ddiv+0x472>
   1efc6:	d100      	bne.n	1efca <__aeabi_ddiv+0x202>
   1efc8:	e134      	b.n	1f234 <__aeabi_ddiv+0x46c>
   1efca:	2300      	movs	r3, #0
   1efcc:	4646      	mov	r6, r8
   1efce:	464d      	mov	r5, r9
   1efd0:	469a      	mov	sl, r3
   1efd2:	3c01      	subs	r4, #1
   1efd4:	465b      	mov	r3, fp
   1efd6:	0e0a      	lsrs	r2, r1, #24
   1efd8:	021b      	lsls	r3, r3, #8
   1efda:	431a      	orrs	r2, r3
   1efdc:	020b      	lsls	r3, r1, #8
   1efde:	0c17      	lsrs	r7, r2, #16
   1efe0:	9303      	str	r3, [sp, #12]
   1efe2:	0413      	lsls	r3, r2, #16
   1efe4:	0c1b      	lsrs	r3, r3, #16
   1efe6:	0039      	movs	r1, r7
   1efe8:	0028      	movs	r0, r5
   1efea:	4690      	mov	r8, r2
   1efec:	9301      	str	r3, [sp, #4]
   1efee:	f7ff fa3b 	bl	1e468 <__udivsi3>
   1eff2:	0002      	movs	r2, r0
   1eff4:	9b01      	ldr	r3, [sp, #4]
   1eff6:	4683      	mov	fp, r0
   1eff8:	435a      	muls	r2, r3
   1effa:	0028      	movs	r0, r5
   1effc:	0039      	movs	r1, r7
   1effe:	4691      	mov	r9, r2
   1f000:	f7ff fab8 	bl	1e574 <__aeabi_uidivmod>
   1f004:	0c35      	lsrs	r5, r6, #16
   1f006:	0409      	lsls	r1, r1, #16
   1f008:	430d      	orrs	r5, r1
   1f00a:	45a9      	cmp	r9, r5
   1f00c:	d90d      	bls.n	1f02a <__aeabi_ddiv+0x262>
   1f00e:	465b      	mov	r3, fp
   1f010:	4445      	add	r5, r8
   1f012:	3b01      	subs	r3, #1
   1f014:	45a8      	cmp	r8, r5
   1f016:	d900      	bls.n	1f01a <__aeabi_ddiv+0x252>
   1f018:	e13a      	b.n	1f290 <__aeabi_ddiv+0x4c8>
   1f01a:	45a9      	cmp	r9, r5
   1f01c:	d800      	bhi.n	1f020 <__aeabi_ddiv+0x258>
   1f01e:	e137      	b.n	1f290 <__aeabi_ddiv+0x4c8>
   1f020:	2302      	movs	r3, #2
   1f022:	425b      	negs	r3, r3
   1f024:	469c      	mov	ip, r3
   1f026:	4445      	add	r5, r8
   1f028:	44e3      	add	fp, ip
   1f02a:	464b      	mov	r3, r9
   1f02c:	1aeb      	subs	r3, r5, r3
   1f02e:	0039      	movs	r1, r7
   1f030:	0018      	movs	r0, r3
   1f032:	9304      	str	r3, [sp, #16]
   1f034:	f7ff fa18 	bl	1e468 <__udivsi3>
   1f038:	9b01      	ldr	r3, [sp, #4]
   1f03a:	0005      	movs	r5, r0
   1f03c:	4343      	muls	r3, r0
   1f03e:	0039      	movs	r1, r7
   1f040:	9804      	ldr	r0, [sp, #16]
   1f042:	4699      	mov	r9, r3
   1f044:	f7ff fa96 	bl	1e574 <__aeabi_uidivmod>
   1f048:	0433      	lsls	r3, r6, #16
   1f04a:	0409      	lsls	r1, r1, #16
   1f04c:	0c1b      	lsrs	r3, r3, #16
   1f04e:	430b      	orrs	r3, r1
   1f050:	4599      	cmp	r9, r3
   1f052:	d909      	bls.n	1f068 <__aeabi_ddiv+0x2a0>
   1f054:	4443      	add	r3, r8
   1f056:	1e6a      	subs	r2, r5, #1
   1f058:	4598      	cmp	r8, r3
   1f05a:	d900      	bls.n	1f05e <__aeabi_ddiv+0x296>
   1f05c:	e11a      	b.n	1f294 <__aeabi_ddiv+0x4cc>
   1f05e:	4599      	cmp	r9, r3
   1f060:	d800      	bhi.n	1f064 <__aeabi_ddiv+0x29c>
   1f062:	e117      	b.n	1f294 <__aeabi_ddiv+0x4cc>
   1f064:	3d02      	subs	r5, #2
   1f066:	4443      	add	r3, r8
   1f068:	464a      	mov	r2, r9
   1f06a:	1a9b      	subs	r3, r3, r2
   1f06c:	465a      	mov	r2, fp
   1f06e:	0412      	lsls	r2, r2, #16
   1f070:	432a      	orrs	r2, r5
   1f072:	9903      	ldr	r1, [sp, #12]
   1f074:	4693      	mov	fp, r2
   1f076:	0c10      	lsrs	r0, r2, #16
   1f078:	0c0a      	lsrs	r2, r1, #16
   1f07a:	4691      	mov	r9, r2
   1f07c:	0409      	lsls	r1, r1, #16
   1f07e:	465a      	mov	r2, fp
   1f080:	0c09      	lsrs	r1, r1, #16
   1f082:	464e      	mov	r6, r9
   1f084:	000d      	movs	r5, r1
   1f086:	0412      	lsls	r2, r2, #16
   1f088:	0c12      	lsrs	r2, r2, #16
   1f08a:	4345      	muls	r5, r0
   1f08c:	9105      	str	r1, [sp, #20]
   1f08e:	4351      	muls	r1, r2
   1f090:	4372      	muls	r2, r6
   1f092:	4370      	muls	r0, r6
   1f094:	1952      	adds	r2, r2, r5
   1f096:	0c0e      	lsrs	r6, r1, #16
   1f098:	18b2      	adds	r2, r6, r2
   1f09a:	4295      	cmp	r5, r2
   1f09c:	d903      	bls.n	1f0a6 <__aeabi_ddiv+0x2de>
   1f09e:	2580      	movs	r5, #128	; 0x80
   1f0a0:	026d      	lsls	r5, r5, #9
   1f0a2:	46ac      	mov	ip, r5
   1f0a4:	4460      	add	r0, ip
   1f0a6:	0c15      	lsrs	r5, r2, #16
   1f0a8:	0409      	lsls	r1, r1, #16
   1f0aa:	0412      	lsls	r2, r2, #16
   1f0ac:	0c09      	lsrs	r1, r1, #16
   1f0ae:	1828      	adds	r0, r5, r0
   1f0b0:	1852      	adds	r2, r2, r1
   1f0b2:	4283      	cmp	r3, r0
   1f0b4:	d200      	bcs.n	1f0b8 <__aeabi_ddiv+0x2f0>
   1f0b6:	e0ce      	b.n	1f256 <__aeabi_ddiv+0x48e>
   1f0b8:	d100      	bne.n	1f0bc <__aeabi_ddiv+0x2f4>
   1f0ba:	e0c8      	b.n	1f24e <__aeabi_ddiv+0x486>
   1f0bc:	1a1d      	subs	r5, r3, r0
   1f0be:	4653      	mov	r3, sl
   1f0c0:	1a9e      	subs	r6, r3, r2
   1f0c2:	45b2      	cmp	sl, r6
   1f0c4:	4192      	sbcs	r2, r2
   1f0c6:	4252      	negs	r2, r2
   1f0c8:	1aab      	subs	r3, r5, r2
   1f0ca:	469a      	mov	sl, r3
   1f0cc:	4598      	cmp	r8, r3
   1f0ce:	d100      	bne.n	1f0d2 <__aeabi_ddiv+0x30a>
   1f0d0:	e117      	b.n	1f302 <__aeabi_ddiv+0x53a>
   1f0d2:	0039      	movs	r1, r7
   1f0d4:	0018      	movs	r0, r3
   1f0d6:	f7ff f9c7 	bl	1e468 <__udivsi3>
   1f0da:	9b01      	ldr	r3, [sp, #4]
   1f0dc:	0005      	movs	r5, r0
   1f0de:	4343      	muls	r3, r0
   1f0e0:	0039      	movs	r1, r7
   1f0e2:	4650      	mov	r0, sl
   1f0e4:	9304      	str	r3, [sp, #16]
   1f0e6:	f7ff fa45 	bl	1e574 <__aeabi_uidivmod>
   1f0ea:	9804      	ldr	r0, [sp, #16]
   1f0ec:	040b      	lsls	r3, r1, #16
   1f0ee:	0c31      	lsrs	r1, r6, #16
   1f0f0:	4319      	orrs	r1, r3
   1f0f2:	4288      	cmp	r0, r1
   1f0f4:	d909      	bls.n	1f10a <__aeabi_ddiv+0x342>
   1f0f6:	4441      	add	r1, r8
   1f0f8:	1e6b      	subs	r3, r5, #1
   1f0fa:	4588      	cmp	r8, r1
   1f0fc:	d900      	bls.n	1f100 <__aeabi_ddiv+0x338>
   1f0fe:	e107      	b.n	1f310 <__aeabi_ddiv+0x548>
   1f100:	4288      	cmp	r0, r1
   1f102:	d800      	bhi.n	1f106 <__aeabi_ddiv+0x33e>
   1f104:	e104      	b.n	1f310 <__aeabi_ddiv+0x548>
   1f106:	3d02      	subs	r5, #2
   1f108:	4441      	add	r1, r8
   1f10a:	9b04      	ldr	r3, [sp, #16]
   1f10c:	1acb      	subs	r3, r1, r3
   1f10e:	0018      	movs	r0, r3
   1f110:	0039      	movs	r1, r7
   1f112:	9304      	str	r3, [sp, #16]
   1f114:	f7ff f9a8 	bl	1e468 <__udivsi3>
   1f118:	9b01      	ldr	r3, [sp, #4]
   1f11a:	4682      	mov	sl, r0
   1f11c:	4343      	muls	r3, r0
   1f11e:	0039      	movs	r1, r7
   1f120:	9804      	ldr	r0, [sp, #16]
   1f122:	9301      	str	r3, [sp, #4]
   1f124:	f7ff fa26 	bl	1e574 <__aeabi_uidivmod>
   1f128:	9801      	ldr	r0, [sp, #4]
   1f12a:	040b      	lsls	r3, r1, #16
   1f12c:	0431      	lsls	r1, r6, #16
   1f12e:	0c09      	lsrs	r1, r1, #16
   1f130:	4319      	orrs	r1, r3
   1f132:	4288      	cmp	r0, r1
   1f134:	d90d      	bls.n	1f152 <__aeabi_ddiv+0x38a>
   1f136:	4653      	mov	r3, sl
   1f138:	4441      	add	r1, r8
   1f13a:	3b01      	subs	r3, #1
   1f13c:	4588      	cmp	r8, r1
   1f13e:	d900      	bls.n	1f142 <__aeabi_ddiv+0x37a>
   1f140:	e0e8      	b.n	1f314 <__aeabi_ddiv+0x54c>
   1f142:	4288      	cmp	r0, r1
   1f144:	d800      	bhi.n	1f148 <__aeabi_ddiv+0x380>
   1f146:	e0e5      	b.n	1f314 <__aeabi_ddiv+0x54c>
   1f148:	2302      	movs	r3, #2
   1f14a:	425b      	negs	r3, r3
   1f14c:	469c      	mov	ip, r3
   1f14e:	4441      	add	r1, r8
   1f150:	44e2      	add	sl, ip
   1f152:	9b01      	ldr	r3, [sp, #4]
   1f154:	042d      	lsls	r5, r5, #16
   1f156:	1ace      	subs	r6, r1, r3
   1f158:	4651      	mov	r1, sl
   1f15a:	4329      	orrs	r1, r5
   1f15c:	9d05      	ldr	r5, [sp, #20]
   1f15e:	464f      	mov	r7, r9
   1f160:	002a      	movs	r2, r5
   1f162:	040b      	lsls	r3, r1, #16
   1f164:	0c08      	lsrs	r0, r1, #16
   1f166:	0c1b      	lsrs	r3, r3, #16
   1f168:	435a      	muls	r2, r3
   1f16a:	4345      	muls	r5, r0
   1f16c:	437b      	muls	r3, r7
   1f16e:	4378      	muls	r0, r7
   1f170:	195b      	adds	r3, r3, r5
   1f172:	0c17      	lsrs	r7, r2, #16
   1f174:	18fb      	adds	r3, r7, r3
   1f176:	429d      	cmp	r5, r3
   1f178:	d903      	bls.n	1f182 <__aeabi_ddiv+0x3ba>
   1f17a:	2580      	movs	r5, #128	; 0x80
   1f17c:	026d      	lsls	r5, r5, #9
   1f17e:	46ac      	mov	ip, r5
   1f180:	4460      	add	r0, ip
   1f182:	0c1d      	lsrs	r5, r3, #16
   1f184:	0412      	lsls	r2, r2, #16
   1f186:	041b      	lsls	r3, r3, #16
   1f188:	0c12      	lsrs	r2, r2, #16
   1f18a:	1828      	adds	r0, r5, r0
   1f18c:	189b      	adds	r3, r3, r2
   1f18e:	4286      	cmp	r6, r0
   1f190:	d200      	bcs.n	1f194 <__aeabi_ddiv+0x3cc>
   1f192:	e093      	b.n	1f2bc <__aeabi_ddiv+0x4f4>
   1f194:	d100      	bne.n	1f198 <__aeabi_ddiv+0x3d0>
   1f196:	e08e      	b.n	1f2b6 <__aeabi_ddiv+0x4ee>
   1f198:	2301      	movs	r3, #1
   1f19a:	4319      	orrs	r1, r3
   1f19c:	4ba0      	ldr	r3, [pc, #640]	; (1f420 <__aeabi_ddiv+0x658>)
   1f19e:	18e3      	adds	r3, r4, r3
   1f1a0:	2b00      	cmp	r3, #0
   1f1a2:	dc00      	bgt.n	1f1a6 <__aeabi_ddiv+0x3de>
   1f1a4:	e099      	b.n	1f2da <__aeabi_ddiv+0x512>
   1f1a6:	074a      	lsls	r2, r1, #29
   1f1a8:	d000      	beq.n	1f1ac <__aeabi_ddiv+0x3e4>
   1f1aa:	e09e      	b.n	1f2ea <__aeabi_ddiv+0x522>
   1f1ac:	465a      	mov	r2, fp
   1f1ae:	01d2      	lsls	r2, r2, #7
   1f1b0:	d506      	bpl.n	1f1c0 <__aeabi_ddiv+0x3f8>
   1f1b2:	465a      	mov	r2, fp
   1f1b4:	4b9b      	ldr	r3, [pc, #620]	; (1f424 <__aeabi_ddiv+0x65c>)
   1f1b6:	401a      	ands	r2, r3
   1f1b8:	2380      	movs	r3, #128	; 0x80
   1f1ba:	4693      	mov	fp, r2
   1f1bc:	00db      	lsls	r3, r3, #3
   1f1be:	18e3      	adds	r3, r4, r3
   1f1c0:	4a99      	ldr	r2, [pc, #612]	; (1f428 <__aeabi_ddiv+0x660>)
   1f1c2:	4293      	cmp	r3, r2
   1f1c4:	dd68      	ble.n	1f298 <__aeabi_ddiv+0x4d0>
   1f1c6:	2301      	movs	r3, #1
   1f1c8:	9a02      	ldr	r2, [sp, #8]
   1f1ca:	4c98      	ldr	r4, [pc, #608]	; (1f42c <__aeabi_ddiv+0x664>)
   1f1cc:	401a      	ands	r2, r3
   1f1ce:	2300      	movs	r3, #0
   1f1d0:	4694      	mov	ip, r2
   1f1d2:	4698      	mov	r8, r3
   1f1d4:	2200      	movs	r2, #0
   1f1d6:	e6c5      	b.n	1ef64 <__aeabi_ddiv+0x19c>
   1f1d8:	2280      	movs	r2, #128	; 0x80
   1f1da:	464b      	mov	r3, r9
   1f1dc:	0312      	lsls	r2, r2, #12
   1f1de:	4213      	tst	r3, r2
   1f1e0:	d00a      	beq.n	1f1f8 <__aeabi_ddiv+0x430>
   1f1e2:	465b      	mov	r3, fp
   1f1e4:	4213      	tst	r3, r2
   1f1e6:	d106      	bne.n	1f1f6 <__aeabi_ddiv+0x42e>
   1f1e8:	431a      	orrs	r2, r3
   1f1ea:	0312      	lsls	r2, r2, #12
   1f1ec:	0b12      	lsrs	r2, r2, #12
   1f1ee:	46ac      	mov	ip, r5
   1f1f0:	4688      	mov	r8, r1
   1f1f2:	4c8e      	ldr	r4, [pc, #568]	; (1f42c <__aeabi_ddiv+0x664>)
   1f1f4:	e6b6      	b.n	1ef64 <__aeabi_ddiv+0x19c>
   1f1f6:	464b      	mov	r3, r9
   1f1f8:	431a      	orrs	r2, r3
   1f1fa:	0312      	lsls	r2, r2, #12
   1f1fc:	0b12      	lsrs	r2, r2, #12
   1f1fe:	46bc      	mov	ip, r7
   1f200:	4c8a      	ldr	r4, [pc, #552]	; (1f42c <__aeabi_ddiv+0x664>)
   1f202:	e6af      	b.n	1ef64 <__aeabi_ddiv+0x19c>
   1f204:	0003      	movs	r3, r0
   1f206:	465a      	mov	r2, fp
   1f208:	3b28      	subs	r3, #40	; 0x28
   1f20a:	409a      	lsls	r2, r3
   1f20c:	2300      	movs	r3, #0
   1f20e:	4691      	mov	r9, r2
   1f210:	4698      	mov	r8, r3
   1f212:	e657      	b.n	1eec4 <__aeabi_ddiv+0xfc>
   1f214:	4658      	mov	r0, fp
   1f216:	f000 ff0d 	bl	20034 <__clzsi2>
   1f21a:	3020      	adds	r0, #32
   1f21c:	e640      	b.n	1eea0 <__aeabi_ddiv+0xd8>
   1f21e:	0003      	movs	r3, r0
   1f220:	4652      	mov	r2, sl
   1f222:	3b28      	subs	r3, #40	; 0x28
   1f224:	409a      	lsls	r2, r3
   1f226:	2100      	movs	r1, #0
   1f228:	4693      	mov	fp, r2
   1f22a:	e677      	b.n	1ef1c <__aeabi_ddiv+0x154>
   1f22c:	f000 ff02 	bl	20034 <__clzsi2>
   1f230:	3020      	adds	r0, #32
   1f232:	e65f      	b.n	1eef4 <__aeabi_ddiv+0x12c>
   1f234:	4588      	cmp	r8, r1
   1f236:	d200      	bcs.n	1f23a <__aeabi_ddiv+0x472>
   1f238:	e6c7      	b.n	1efca <__aeabi_ddiv+0x202>
   1f23a:	464b      	mov	r3, r9
   1f23c:	07de      	lsls	r6, r3, #31
   1f23e:	085d      	lsrs	r5, r3, #1
   1f240:	4643      	mov	r3, r8
   1f242:	085b      	lsrs	r3, r3, #1
   1f244:	431e      	orrs	r6, r3
   1f246:	4643      	mov	r3, r8
   1f248:	07db      	lsls	r3, r3, #31
   1f24a:	469a      	mov	sl, r3
   1f24c:	e6c2      	b.n	1efd4 <__aeabi_ddiv+0x20c>
   1f24e:	2500      	movs	r5, #0
   1f250:	4592      	cmp	sl, r2
   1f252:	d300      	bcc.n	1f256 <__aeabi_ddiv+0x48e>
   1f254:	e733      	b.n	1f0be <__aeabi_ddiv+0x2f6>
   1f256:	9e03      	ldr	r6, [sp, #12]
   1f258:	4659      	mov	r1, fp
   1f25a:	46b4      	mov	ip, r6
   1f25c:	44e2      	add	sl, ip
   1f25e:	45b2      	cmp	sl, r6
   1f260:	41ad      	sbcs	r5, r5
   1f262:	426d      	negs	r5, r5
   1f264:	4445      	add	r5, r8
   1f266:	18eb      	adds	r3, r5, r3
   1f268:	3901      	subs	r1, #1
   1f26a:	4598      	cmp	r8, r3
   1f26c:	d207      	bcs.n	1f27e <__aeabi_ddiv+0x4b6>
   1f26e:	4298      	cmp	r0, r3
   1f270:	d900      	bls.n	1f274 <__aeabi_ddiv+0x4ac>
   1f272:	e07f      	b.n	1f374 <__aeabi_ddiv+0x5ac>
   1f274:	d100      	bne.n	1f278 <__aeabi_ddiv+0x4b0>
   1f276:	e0bc      	b.n	1f3f2 <__aeabi_ddiv+0x62a>
   1f278:	1a1d      	subs	r5, r3, r0
   1f27a:	468b      	mov	fp, r1
   1f27c:	e71f      	b.n	1f0be <__aeabi_ddiv+0x2f6>
   1f27e:	4598      	cmp	r8, r3
   1f280:	d1fa      	bne.n	1f278 <__aeabi_ddiv+0x4b0>
   1f282:	9d03      	ldr	r5, [sp, #12]
   1f284:	4555      	cmp	r5, sl
   1f286:	d9f2      	bls.n	1f26e <__aeabi_ddiv+0x4a6>
   1f288:	4643      	mov	r3, r8
   1f28a:	468b      	mov	fp, r1
   1f28c:	1a1d      	subs	r5, r3, r0
   1f28e:	e716      	b.n	1f0be <__aeabi_ddiv+0x2f6>
   1f290:	469b      	mov	fp, r3
   1f292:	e6ca      	b.n	1f02a <__aeabi_ddiv+0x262>
   1f294:	0015      	movs	r5, r2
   1f296:	e6e7      	b.n	1f068 <__aeabi_ddiv+0x2a0>
   1f298:	465a      	mov	r2, fp
   1f29a:	08c9      	lsrs	r1, r1, #3
   1f29c:	0752      	lsls	r2, r2, #29
   1f29e:	430a      	orrs	r2, r1
   1f2a0:	055b      	lsls	r3, r3, #21
   1f2a2:	4690      	mov	r8, r2
   1f2a4:	0d5c      	lsrs	r4, r3, #21
   1f2a6:	465a      	mov	r2, fp
   1f2a8:	2301      	movs	r3, #1
   1f2aa:	9902      	ldr	r1, [sp, #8]
   1f2ac:	0252      	lsls	r2, r2, #9
   1f2ae:	4019      	ands	r1, r3
   1f2b0:	0b12      	lsrs	r2, r2, #12
   1f2b2:	468c      	mov	ip, r1
   1f2b4:	e656      	b.n	1ef64 <__aeabi_ddiv+0x19c>
   1f2b6:	2b00      	cmp	r3, #0
   1f2b8:	d100      	bne.n	1f2bc <__aeabi_ddiv+0x4f4>
   1f2ba:	e76f      	b.n	1f19c <__aeabi_ddiv+0x3d4>
   1f2bc:	4446      	add	r6, r8
   1f2be:	1e4a      	subs	r2, r1, #1
   1f2c0:	45b0      	cmp	r8, r6
   1f2c2:	d929      	bls.n	1f318 <__aeabi_ddiv+0x550>
   1f2c4:	0011      	movs	r1, r2
   1f2c6:	4286      	cmp	r6, r0
   1f2c8:	d000      	beq.n	1f2cc <__aeabi_ddiv+0x504>
   1f2ca:	e765      	b.n	1f198 <__aeabi_ddiv+0x3d0>
   1f2cc:	9a03      	ldr	r2, [sp, #12]
   1f2ce:	4293      	cmp	r3, r2
   1f2d0:	d000      	beq.n	1f2d4 <__aeabi_ddiv+0x50c>
   1f2d2:	e761      	b.n	1f198 <__aeabi_ddiv+0x3d0>
   1f2d4:	e762      	b.n	1f19c <__aeabi_ddiv+0x3d4>
   1f2d6:	2101      	movs	r1, #1
   1f2d8:	4249      	negs	r1, r1
   1f2da:	2001      	movs	r0, #1
   1f2dc:	1ac2      	subs	r2, r0, r3
   1f2de:	2a38      	cmp	r2, #56	; 0x38
   1f2e0:	dd21      	ble.n	1f326 <__aeabi_ddiv+0x55e>
   1f2e2:	9b02      	ldr	r3, [sp, #8]
   1f2e4:	4003      	ands	r3, r0
   1f2e6:	469c      	mov	ip, r3
   1f2e8:	e638      	b.n	1ef5c <__aeabi_ddiv+0x194>
   1f2ea:	220f      	movs	r2, #15
   1f2ec:	400a      	ands	r2, r1
   1f2ee:	2a04      	cmp	r2, #4
   1f2f0:	d100      	bne.n	1f2f4 <__aeabi_ddiv+0x52c>
   1f2f2:	e75b      	b.n	1f1ac <__aeabi_ddiv+0x3e4>
   1f2f4:	000a      	movs	r2, r1
   1f2f6:	1d11      	adds	r1, r2, #4
   1f2f8:	4291      	cmp	r1, r2
   1f2fa:	4192      	sbcs	r2, r2
   1f2fc:	4252      	negs	r2, r2
   1f2fe:	4493      	add	fp, r2
   1f300:	e754      	b.n	1f1ac <__aeabi_ddiv+0x3e4>
   1f302:	4b47      	ldr	r3, [pc, #284]	; (1f420 <__aeabi_ddiv+0x658>)
   1f304:	18e3      	adds	r3, r4, r3
   1f306:	2b00      	cmp	r3, #0
   1f308:	dde5      	ble.n	1f2d6 <__aeabi_ddiv+0x50e>
   1f30a:	2201      	movs	r2, #1
   1f30c:	4252      	negs	r2, r2
   1f30e:	e7f2      	b.n	1f2f6 <__aeabi_ddiv+0x52e>
   1f310:	001d      	movs	r5, r3
   1f312:	e6fa      	b.n	1f10a <__aeabi_ddiv+0x342>
   1f314:	469a      	mov	sl, r3
   1f316:	e71c      	b.n	1f152 <__aeabi_ddiv+0x38a>
   1f318:	42b0      	cmp	r0, r6
   1f31a:	d839      	bhi.n	1f390 <__aeabi_ddiv+0x5c8>
   1f31c:	d06e      	beq.n	1f3fc <__aeabi_ddiv+0x634>
   1f31e:	0011      	movs	r1, r2
   1f320:	e73a      	b.n	1f198 <__aeabi_ddiv+0x3d0>
   1f322:	9302      	str	r3, [sp, #8]
   1f324:	e73a      	b.n	1f19c <__aeabi_ddiv+0x3d4>
   1f326:	2a1f      	cmp	r2, #31
   1f328:	dc3c      	bgt.n	1f3a4 <__aeabi_ddiv+0x5dc>
   1f32a:	2320      	movs	r3, #32
   1f32c:	1a9b      	subs	r3, r3, r2
   1f32e:	000c      	movs	r4, r1
   1f330:	4658      	mov	r0, fp
   1f332:	4099      	lsls	r1, r3
   1f334:	4098      	lsls	r0, r3
   1f336:	1e4b      	subs	r3, r1, #1
   1f338:	4199      	sbcs	r1, r3
   1f33a:	465b      	mov	r3, fp
   1f33c:	40d4      	lsrs	r4, r2
   1f33e:	40d3      	lsrs	r3, r2
   1f340:	4320      	orrs	r0, r4
   1f342:	4308      	orrs	r0, r1
   1f344:	001a      	movs	r2, r3
   1f346:	0743      	lsls	r3, r0, #29
   1f348:	d009      	beq.n	1f35e <__aeabi_ddiv+0x596>
   1f34a:	230f      	movs	r3, #15
   1f34c:	4003      	ands	r3, r0
   1f34e:	2b04      	cmp	r3, #4
   1f350:	d005      	beq.n	1f35e <__aeabi_ddiv+0x596>
   1f352:	0001      	movs	r1, r0
   1f354:	1d08      	adds	r0, r1, #4
   1f356:	4288      	cmp	r0, r1
   1f358:	419b      	sbcs	r3, r3
   1f35a:	425b      	negs	r3, r3
   1f35c:	18d2      	adds	r2, r2, r3
   1f35e:	0213      	lsls	r3, r2, #8
   1f360:	d53a      	bpl.n	1f3d8 <__aeabi_ddiv+0x610>
   1f362:	2301      	movs	r3, #1
   1f364:	9a02      	ldr	r2, [sp, #8]
   1f366:	2401      	movs	r4, #1
   1f368:	401a      	ands	r2, r3
   1f36a:	2300      	movs	r3, #0
   1f36c:	4694      	mov	ip, r2
   1f36e:	4698      	mov	r8, r3
   1f370:	2200      	movs	r2, #0
   1f372:	e5f7      	b.n	1ef64 <__aeabi_ddiv+0x19c>
   1f374:	2102      	movs	r1, #2
   1f376:	4249      	negs	r1, r1
   1f378:	468c      	mov	ip, r1
   1f37a:	9d03      	ldr	r5, [sp, #12]
   1f37c:	44e3      	add	fp, ip
   1f37e:	46ac      	mov	ip, r5
   1f380:	44e2      	add	sl, ip
   1f382:	45aa      	cmp	sl, r5
   1f384:	41ad      	sbcs	r5, r5
   1f386:	426d      	negs	r5, r5
   1f388:	4445      	add	r5, r8
   1f38a:	18ed      	adds	r5, r5, r3
   1f38c:	1a2d      	subs	r5, r5, r0
   1f38e:	e696      	b.n	1f0be <__aeabi_ddiv+0x2f6>
   1f390:	1e8a      	subs	r2, r1, #2
   1f392:	9903      	ldr	r1, [sp, #12]
   1f394:	004d      	lsls	r5, r1, #1
   1f396:	428d      	cmp	r5, r1
   1f398:	4189      	sbcs	r1, r1
   1f39a:	4249      	negs	r1, r1
   1f39c:	4441      	add	r1, r8
   1f39e:	1876      	adds	r6, r6, r1
   1f3a0:	9503      	str	r5, [sp, #12]
   1f3a2:	e78f      	b.n	1f2c4 <__aeabi_ddiv+0x4fc>
   1f3a4:	201f      	movs	r0, #31
   1f3a6:	4240      	negs	r0, r0
   1f3a8:	1ac3      	subs	r3, r0, r3
   1f3aa:	4658      	mov	r0, fp
   1f3ac:	40d8      	lsrs	r0, r3
   1f3ae:	0003      	movs	r3, r0
   1f3b0:	2a20      	cmp	r2, #32
   1f3b2:	d028      	beq.n	1f406 <__aeabi_ddiv+0x63e>
   1f3b4:	2040      	movs	r0, #64	; 0x40
   1f3b6:	465d      	mov	r5, fp
   1f3b8:	1a82      	subs	r2, r0, r2
   1f3ba:	4095      	lsls	r5, r2
   1f3bc:	4329      	orrs	r1, r5
   1f3be:	1e4a      	subs	r2, r1, #1
   1f3c0:	4191      	sbcs	r1, r2
   1f3c2:	4319      	orrs	r1, r3
   1f3c4:	2307      	movs	r3, #7
   1f3c6:	2200      	movs	r2, #0
   1f3c8:	400b      	ands	r3, r1
   1f3ca:	d009      	beq.n	1f3e0 <__aeabi_ddiv+0x618>
   1f3cc:	230f      	movs	r3, #15
   1f3ce:	2200      	movs	r2, #0
   1f3d0:	400b      	ands	r3, r1
   1f3d2:	0008      	movs	r0, r1
   1f3d4:	2b04      	cmp	r3, #4
   1f3d6:	d1bd      	bne.n	1f354 <__aeabi_ddiv+0x58c>
   1f3d8:	0001      	movs	r1, r0
   1f3da:	0753      	lsls	r3, r2, #29
   1f3dc:	0252      	lsls	r2, r2, #9
   1f3de:	0b12      	lsrs	r2, r2, #12
   1f3e0:	08c9      	lsrs	r1, r1, #3
   1f3e2:	4319      	orrs	r1, r3
   1f3e4:	2301      	movs	r3, #1
   1f3e6:	4688      	mov	r8, r1
   1f3e8:	9902      	ldr	r1, [sp, #8]
   1f3ea:	2400      	movs	r4, #0
   1f3ec:	4019      	ands	r1, r3
   1f3ee:	468c      	mov	ip, r1
   1f3f0:	e5b8      	b.n	1ef64 <__aeabi_ddiv+0x19c>
   1f3f2:	4552      	cmp	r2, sl
   1f3f4:	d8be      	bhi.n	1f374 <__aeabi_ddiv+0x5ac>
   1f3f6:	468b      	mov	fp, r1
   1f3f8:	2500      	movs	r5, #0
   1f3fa:	e660      	b.n	1f0be <__aeabi_ddiv+0x2f6>
   1f3fc:	9d03      	ldr	r5, [sp, #12]
   1f3fe:	429d      	cmp	r5, r3
   1f400:	d3c6      	bcc.n	1f390 <__aeabi_ddiv+0x5c8>
   1f402:	0011      	movs	r1, r2
   1f404:	e762      	b.n	1f2cc <__aeabi_ddiv+0x504>
   1f406:	2500      	movs	r5, #0
   1f408:	e7d8      	b.n	1f3bc <__aeabi_ddiv+0x5f4>
   1f40a:	2280      	movs	r2, #128	; 0x80
   1f40c:	465b      	mov	r3, fp
   1f40e:	0312      	lsls	r2, r2, #12
   1f410:	431a      	orrs	r2, r3
   1f412:	9b01      	ldr	r3, [sp, #4]
   1f414:	0312      	lsls	r2, r2, #12
   1f416:	0b12      	lsrs	r2, r2, #12
   1f418:	469c      	mov	ip, r3
   1f41a:	4688      	mov	r8, r1
   1f41c:	4c03      	ldr	r4, [pc, #12]	; (1f42c <__aeabi_ddiv+0x664>)
   1f41e:	e5a1      	b.n	1ef64 <__aeabi_ddiv+0x19c>
   1f420:	000003ff 	.word	0x000003ff
   1f424:	feffffff 	.word	0xfeffffff
   1f428:	000007fe 	.word	0x000007fe
   1f42c:	000007ff 	.word	0x000007ff

0001f430 <__aeabi_dmul>:
   1f430:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f432:	4657      	mov	r7, sl
   1f434:	4645      	mov	r5, r8
   1f436:	46de      	mov	lr, fp
   1f438:	464e      	mov	r6, r9
   1f43a:	b5e0      	push	{r5, r6, r7, lr}
   1f43c:	030c      	lsls	r4, r1, #12
   1f43e:	4698      	mov	r8, r3
   1f440:	004e      	lsls	r6, r1, #1
   1f442:	0b23      	lsrs	r3, r4, #12
   1f444:	b087      	sub	sp, #28
   1f446:	0007      	movs	r7, r0
   1f448:	4692      	mov	sl, r2
   1f44a:	469b      	mov	fp, r3
   1f44c:	0d76      	lsrs	r6, r6, #21
   1f44e:	0fcd      	lsrs	r5, r1, #31
   1f450:	2e00      	cmp	r6, #0
   1f452:	d06b      	beq.n	1f52c <__aeabi_dmul+0xfc>
   1f454:	4b6d      	ldr	r3, [pc, #436]	; (1f60c <__aeabi_dmul+0x1dc>)
   1f456:	429e      	cmp	r6, r3
   1f458:	d035      	beq.n	1f4c6 <__aeabi_dmul+0x96>
   1f45a:	2480      	movs	r4, #128	; 0x80
   1f45c:	465b      	mov	r3, fp
   1f45e:	0f42      	lsrs	r2, r0, #29
   1f460:	0424      	lsls	r4, r4, #16
   1f462:	00db      	lsls	r3, r3, #3
   1f464:	4314      	orrs	r4, r2
   1f466:	431c      	orrs	r4, r3
   1f468:	00c3      	lsls	r3, r0, #3
   1f46a:	4699      	mov	r9, r3
   1f46c:	4b68      	ldr	r3, [pc, #416]	; (1f610 <__aeabi_dmul+0x1e0>)
   1f46e:	46a3      	mov	fp, r4
   1f470:	469c      	mov	ip, r3
   1f472:	2300      	movs	r3, #0
   1f474:	2700      	movs	r7, #0
   1f476:	4466      	add	r6, ip
   1f478:	9302      	str	r3, [sp, #8]
   1f47a:	4643      	mov	r3, r8
   1f47c:	031c      	lsls	r4, r3, #12
   1f47e:	005a      	lsls	r2, r3, #1
   1f480:	0fdb      	lsrs	r3, r3, #31
   1f482:	4650      	mov	r0, sl
   1f484:	0b24      	lsrs	r4, r4, #12
   1f486:	0d52      	lsrs	r2, r2, #21
   1f488:	4698      	mov	r8, r3
   1f48a:	d100      	bne.n	1f48e <__aeabi_dmul+0x5e>
   1f48c:	e076      	b.n	1f57c <__aeabi_dmul+0x14c>
   1f48e:	4b5f      	ldr	r3, [pc, #380]	; (1f60c <__aeabi_dmul+0x1dc>)
   1f490:	429a      	cmp	r2, r3
   1f492:	d06d      	beq.n	1f570 <__aeabi_dmul+0x140>
   1f494:	2380      	movs	r3, #128	; 0x80
   1f496:	0f41      	lsrs	r1, r0, #29
   1f498:	041b      	lsls	r3, r3, #16
   1f49a:	430b      	orrs	r3, r1
   1f49c:	495c      	ldr	r1, [pc, #368]	; (1f610 <__aeabi_dmul+0x1e0>)
   1f49e:	00e4      	lsls	r4, r4, #3
   1f4a0:	468c      	mov	ip, r1
   1f4a2:	431c      	orrs	r4, r3
   1f4a4:	00c3      	lsls	r3, r0, #3
   1f4a6:	2000      	movs	r0, #0
   1f4a8:	4462      	add	r2, ip
   1f4aa:	4641      	mov	r1, r8
   1f4ac:	18b6      	adds	r6, r6, r2
   1f4ae:	4069      	eors	r1, r5
   1f4b0:	1c72      	adds	r2, r6, #1
   1f4b2:	9101      	str	r1, [sp, #4]
   1f4b4:	4694      	mov	ip, r2
   1f4b6:	4307      	orrs	r7, r0
   1f4b8:	2f0f      	cmp	r7, #15
   1f4ba:	d900      	bls.n	1f4be <__aeabi_dmul+0x8e>
   1f4bc:	e0b0      	b.n	1f620 <__aeabi_dmul+0x1f0>
   1f4be:	4a55      	ldr	r2, [pc, #340]	; (1f614 <__aeabi_dmul+0x1e4>)
   1f4c0:	00bf      	lsls	r7, r7, #2
   1f4c2:	59d2      	ldr	r2, [r2, r7]
   1f4c4:	4697      	mov	pc, r2
   1f4c6:	465b      	mov	r3, fp
   1f4c8:	4303      	orrs	r3, r0
   1f4ca:	4699      	mov	r9, r3
   1f4cc:	d000      	beq.n	1f4d0 <__aeabi_dmul+0xa0>
   1f4ce:	e087      	b.n	1f5e0 <__aeabi_dmul+0x1b0>
   1f4d0:	2300      	movs	r3, #0
   1f4d2:	469b      	mov	fp, r3
   1f4d4:	3302      	adds	r3, #2
   1f4d6:	2708      	movs	r7, #8
   1f4d8:	9302      	str	r3, [sp, #8]
   1f4da:	e7ce      	b.n	1f47a <__aeabi_dmul+0x4a>
   1f4dc:	4642      	mov	r2, r8
   1f4de:	9201      	str	r2, [sp, #4]
   1f4e0:	2802      	cmp	r0, #2
   1f4e2:	d067      	beq.n	1f5b4 <__aeabi_dmul+0x184>
   1f4e4:	2803      	cmp	r0, #3
   1f4e6:	d100      	bne.n	1f4ea <__aeabi_dmul+0xba>
   1f4e8:	e20e      	b.n	1f908 <__aeabi_dmul+0x4d8>
   1f4ea:	2801      	cmp	r0, #1
   1f4ec:	d000      	beq.n	1f4f0 <__aeabi_dmul+0xc0>
   1f4ee:	e162      	b.n	1f7b6 <__aeabi_dmul+0x386>
   1f4f0:	2300      	movs	r3, #0
   1f4f2:	2400      	movs	r4, #0
   1f4f4:	2200      	movs	r2, #0
   1f4f6:	4699      	mov	r9, r3
   1f4f8:	9901      	ldr	r1, [sp, #4]
   1f4fa:	4001      	ands	r1, r0
   1f4fc:	b2cd      	uxtb	r5, r1
   1f4fe:	2100      	movs	r1, #0
   1f500:	0312      	lsls	r2, r2, #12
   1f502:	0d0b      	lsrs	r3, r1, #20
   1f504:	0b12      	lsrs	r2, r2, #12
   1f506:	051b      	lsls	r3, r3, #20
   1f508:	4313      	orrs	r3, r2
   1f50a:	4a43      	ldr	r2, [pc, #268]	; (1f618 <__aeabi_dmul+0x1e8>)
   1f50c:	0524      	lsls	r4, r4, #20
   1f50e:	4013      	ands	r3, r2
   1f510:	431c      	orrs	r4, r3
   1f512:	0064      	lsls	r4, r4, #1
   1f514:	07ed      	lsls	r5, r5, #31
   1f516:	0864      	lsrs	r4, r4, #1
   1f518:	432c      	orrs	r4, r5
   1f51a:	4648      	mov	r0, r9
   1f51c:	0021      	movs	r1, r4
   1f51e:	b007      	add	sp, #28
   1f520:	bc3c      	pop	{r2, r3, r4, r5}
   1f522:	4690      	mov	r8, r2
   1f524:	4699      	mov	r9, r3
   1f526:	46a2      	mov	sl, r4
   1f528:	46ab      	mov	fp, r5
   1f52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f52c:	4303      	orrs	r3, r0
   1f52e:	4699      	mov	r9, r3
   1f530:	d04f      	beq.n	1f5d2 <__aeabi_dmul+0x1a2>
   1f532:	465b      	mov	r3, fp
   1f534:	2b00      	cmp	r3, #0
   1f536:	d100      	bne.n	1f53a <__aeabi_dmul+0x10a>
   1f538:	e189      	b.n	1f84e <__aeabi_dmul+0x41e>
   1f53a:	4658      	mov	r0, fp
   1f53c:	f000 fd7a 	bl	20034 <__clzsi2>
   1f540:	0003      	movs	r3, r0
   1f542:	3b0b      	subs	r3, #11
   1f544:	2b1c      	cmp	r3, #28
   1f546:	dd00      	ble.n	1f54a <__aeabi_dmul+0x11a>
   1f548:	e17a      	b.n	1f840 <__aeabi_dmul+0x410>
   1f54a:	221d      	movs	r2, #29
   1f54c:	1ad3      	subs	r3, r2, r3
   1f54e:	003a      	movs	r2, r7
   1f550:	0001      	movs	r1, r0
   1f552:	465c      	mov	r4, fp
   1f554:	40da      	lsrs	r2, r3
   1f556:	3908      	subs	r1, #8
   1f558:	408c      	lsls	r4, r1
   1f55a:	0013      	movs	r3, r2
   1f55c:	408f      	lsls	r7, r1
   1f55e:	4323      	orrs	r3, r4
   1f560:	469b      	mov	fp, r3
   1f562:	46b9      	mov	r9, r7
   1f564:	2300      	movs	r3, #0
   1f566:	4e2d      	ldr	r6, [pc, #180]	; (1f61c <__aeabi_dmul+0x1ec>)
   1f568:	2700      	movs	r7, #0
   1f56a:	1a36      	subs	r6, r6, r0
   1f56c:	9302      	str	r3, [sp, #8]
   1f56e:	e784      	b.n	1f47a <__aeabi_dmul+0x4a>
   1f570:	4653      	mov	r3, sl
   1f572:	4323      	orrs	r3, r4
   1f574:	d12a      	bne.n	1f5cc <__aeabi_dmul+0x19c>
   1f576:	2400      	movs	r4, #0
   1f578:	2002      	movs	r0, #2
   1f57a:	e796      	b.n	1f4aa <__aeabi_dmul+0x7a>
   1f57c:	4653      	mov	r3, sl
   1f57e:	4323      	orrs	r3, r4
   1f580:	d020      	beq.n	1f5c4 <__aeabi_dmul+0x194>
   1f582:	2c00      	cmp	r4, #0
   1f584:	d100      	bne.n	1f588 <__aeabi_dmul+0x158>
   1f586:	e157      	b.n	1f838 <__aeabi_dmul+0x408>
   1f588:	0020      	movs	r0, r4
   1f58a:	f000 fd53 	bl	20034 <__clzsi2>
   1f58e:	0003      	movs	r3, r0
   1f590:	3b0b      	subs	r3, #11
   1f592:	2b1c      	cmp	r3, #28
   1f594:	dd00      	ble.n	1f598 <__aeabi_dmul+0x168>
   1f596:	e149      	b.n	1f82c <__aeabi_dmul+0x3fc>
   1f598:	211d      	movs	r1, #29
   1f59a:	1acb      	subs	r3, r1, r3
   1f59c:	4651      	mov	r1, sl
   1f59e:	0002      	movs	r2, r0
   1f5a0:	40d9      	lsrs	r1, r3
   1f5a2:	4653      	mov	r3, sl
   1f5a4:	3a08      	subs	r2, #8
   1f5a6:	4094      	lsls	r4, r2
   1f5a8:	4093      	lsls	r3, r2
   1f5aa:	430c      	orrs	r4, r1
   1f5ac:	4a1b      	ldr	r2, [pc, #108]	; (1f61c <__aeabi_dmul+0x1ec>)
   1f5ae:	1a12      	subs	r2, r2, r0
   1f5b0:	2000      	movs	r0, #0
   1f5b2:	e77a      	b.n	1f4aa <__aeabi_dmul+0x7a>
   1f5b4:	2501      	movs	r5, #1
   1f5b6:	9b01      	ldr	r3, [sp, #4]
   1f5b8:	4c14      	ldr	r4, [pc, #80]	; (1f60c <__aeabi_dmul+0x1dc>)
   1f5ba:	401d      	ands	r5, r3
   1f5bc:	2300      	movs	r3, #0
   1f5be:	2200      	movs	r2, #0
   1f5c0:	4699      	mov	r9, r3
   1f5c2:	e79c      	b.n	1f4fe <__aeabi_dmul+0xce>
   1f5c4:	2400      	movs	r4, #0
   1f5c6:	2200      	movs	r2, #0
   1f5c8:	2001      	movs	r0, #1
   1f5ca:	e76e      	b.n	1f4aa <__aeabi_dmul+0x7a>
   1f5cc:	4653      	mov	r3, sl
   1f5ce:	2003      	movs	r0, #3
   1f5d0:	e76b      	b.n	1f4aa <__aeabi_dmul+0x7a>
   1f5d2:	2300      	movs	r3, #0
   1f5d4:	469b      	mov	fp, r3
   1f5d6:	3301      	adds	r3, #1
   1f5d8:	2704      	movs	r7, #4
   1f5da:	2600      	movs	r6, #0
   1f5dc:	9302      	str	r3, [sp, #8]
   1f5de:	e74c      	b.n	1f47a <__aeabi_dmul+0x4a>
   1f5e0:	2303      	movs	r3, #3
   1f5e2:	4681      	mov	r9, r0
   1f5e4:	270c      	movs	r7, #12
   1f5e6:	9302      	str	r3, [sp, #8]
   1f5e8:	e747      	b.n	1f47a <__aeabi_dmul+0x4a>
   1f5ea:	2280      	movs	r2, #128	; 0x80
   1f5ec:	2300      	movs	r3, #0
   1f5ee:	2500      	movs	r5, #0
   1f5f0:	0312      	lsls	r2, r2, #12
   1f5f2:	4699      	mov	r9, r3
   1f5f4:	4c05      	ldr	r4, [pc, #20]	; (1f60c <__aeabi_dmul+0x1dc>)
   1f5f6:	e782      	b.n	1f4fe <__aeabi_dmul+0xce>
   1f5f8:	465c      	mov	r4, fp
   1f5fa:	464b      	mov	r3, r9
   1f5fc:	9802      	ldr	r0, [sp, #8]
   1f5fe:	e76f      	b.n	1f4e0 <__aeabi_dmul+0xb0>
   1f600:	465c      	mov	r4, fp
   1f602:	464b      	mov	r3, r9
   1f604:	9501      	str	r5, [sp, #4]
   1f606:	9802      	ldr	r0, [sp, #8]
   1f608:	e76a      	b.n	1f4e0 <__aeabi_dmul+0xb0>
   1f60a:	46c0      	nop			; (mov r8, r8)
   1f60c:	000007ff 	.word	0x000007ff
   1f610:	fffffc01 	.word	0xfffffc01
   1f614:	00025370 	.word	0x00025370
   1f618:	800fffff 	.word	0x800fffff
   1f61c:	fffffc0d 	.word	0xfffffc0d
   1f620:	464a      	mov	r2, r9
   1f622:	4649      	mov	r1, r9
   1f624:	0c17      	lsrs	r7, r2, #16
   1f626:	0c1a      	lsrs	r2, r3, #16
   1f628:	041b      	lsls	r3, r3, #16
   1f62a:	0c1b      	lsrs	r3, r3, #16
   1f62c:	0408      	lsls	r0, r1, #16
   1f62e:	0019      	movs	r1, r3
   1f630:	0c00      	lsrs	r0, r0, #16
   1f632:	4341      	muls	r1, r0
   1f634:	0015      	movs	r5, r2
   1f636:	4688      	mov	r8, r1
   1f638:	0019      	movs	r1, r3
   1f63a:	437d      	muls	r5, r7
   1f63c:	4379      	muls	r1, r7
   1f63e:	9503      	str	r5, [sp, #12]
   1f640:	4689      	mov	r9, r1
   1f642:	0029      	movs	r1, r5
   1f644:	0015      	movs	r5, r2
   1f646:	4345      	muls	r5, r0
   1f648:	444d      	add	r5, r9
   1f64a:	9502      	str	r5, [sp, #8]
   1f64c:	4645      	mov	r5, r8
   1f64e:	0c2d      	lsrs	r5, r5, #16
   1f650:	46aa      	mov	sl, r5
   1f652:	9d02      	ldr	r5, [sp, #8]
   1f654:	4455      	add	r5, sl
   1f656:	45a9      	cmp	r9, r5
   1f658:	d906      	bls.n	1f668 <__aeabi_dmul+0x238>
   1f65a:	468a      	mov	sl, r1
   1f65c:	2180      	movs	r1, #128	; 0x80
   1f65e:	0249      	lsls	r1, r1, #9
   1f660:	4689      	mov	r9, r1
   1f662:	44ca      	add	sl, r9
   1f664:	4651      	mov	r1, sl
   1f666:	9103      	str	r1, [sp, #12]
   1f668:	0c29      	lsrs	r1, r5, #16
   1f66a:	9104      	str	r1, [sp, #16]
   1f66c:	4641      	mov	r1, r8
   1f66e:	0409      	lsls	r1, r1, #16
   1f670:	042d      	lsls	r5, r5, #16
   1f672:	0c09      	lsrs	r1, r1, #16
   1f674:	4688      	mov	r8, r1
   1f676:	0029      	movs	r1, r5
   1f678:	0c25      	lsrs	r5, r4, #16
   1f67a:	0424      	lsls	r4, r4, #16
   1f67c:	4441      	add	r1, r8
   1f67e:	0c24      	lsrs	r4, r4, #16
   1f680:	9105      	str	r1, [sp, #20]
   1f682:	0021      	movs	r1, r4
   1f684:	4341      	muls	r1, r0
   1f686:	4688      	mov	r8, r1
   1f688:	0021      	movs	r1, r4
   1f68a:	4379      	muls	r1, r7
   1f68c:	468a      	mov	sl, r1
   1f68e:	4368      	muls	r0, r5
   1f690:	4641      	mov	r1, r8
   1f692:	4450      	add	r0, sl
   1f694:	4681      	mov	r9, r0
   1f696:	0c08      	lsrs	r0, r1, #16
   1f698:	4448      	add	r0, r9
   1f69a:	436f      	muls	r7, r5
   1f69c:	4582      	cmp	sl, r0
   1f69e:	d903      	bls.n	1f6a8 <__aeabi_dmul+0x278>
   1f6a0:	2180      	movs	r1, #128	; 0x80
   1f6a2:	0249      	lsls	r1, r1, #9
   1f6a4:	4689      	mov	r9, r1
   1f6a6:	444f      	add	r7, r9
   1f6a8:	0c01      	lsrs	r1, r0, #16
   1f6aa:	4689      	mov	r9, r1
   1f6ac:	0039      	movs	r1, r7
   1f6ae:	4449      	add	r1, r9
   1f6b0:	9102      	str	r1, [sp, #8]
   1f6b2:	4641      	mov	r1, r8
   1f6b4:	040f      	lsls	r7, r1, #16
   1f6b6:	9904      	ldr	r1, [sp, #16]
   1f6b8:	0c3f      	lsrs	r7, r7, #16
   1f6ba:	4688      	mov	r8, r1
   1f6bc:	0400      	lsls	r0, r0, #16
   1f6be:	19c0      	adds	r0, r0, r7
   1f6c0:	4480      	add	r8, r0
   1f6c2:	4641      	mov	r1, r8
   1f6c4:	9104      	str	r1, [sp, #16]
   1f6c6:	4659      	mov	r1, fp
   1f6c8:	0c0f      	lsrs	r7, r1, #16
   1f6ca:	0409      	lsls	r1, r1, #16
   1f6cc:	0c09      	lsrs	r1, r1, #16
   1f6ce:	4688      	mov	r8, r1
   1f6d0:	4359      	muls	r1, r3
   1f6d2:	468a      	mov	sl, r1
   1f6d4:	0039      	movs	r1, r7
   1f6d6:	4351      	muls	r1, r2
   1f6d8:	4689      	mov	r9, r1
   1f6da:	4641      	mov	r1, r8
   1f6dc:	434a      	muls	r2, r1
   1f6de:	4651      	mov	r1, sl
   1f6e0:	0c09      	lsrs	r1, r1, #16
   1f6e2:	468b      	mov	fp, r1
   1f6e4:	437b      	muls	r3, r7
   1f6e6:	18d2      	adds	r2, r2, r3
   1f6e8:	445a      	add	r2, fp
   1f6ea:	4293      	cmp	r3, r2
   1f6ec:	d903      	bls.n	1f6f6 <__aeabi_dmul+0x2c6>
   1f6ee:	2380      	movs	r3, #128	; 0x80
   1f6f0:	025b      	lsls	r3, r3, #9
   1f6f2:	469b      	mov	fp, r3
   1f6f4:	44d9      	add	r9, fp
   1f6f6:	4651      	mov	r1, sl
   1f6f8:	0409      	lsls	r1, r1, #16
   1f6fa:	0c09      	lsrs	r1, r1, #16
   1f6fc:	468a      	mov	sl, r1
   1f6fe:	4641      	mov	r1, r8
   1f700:	4361      	muls	r1, r4
   1f702:	437c      	muls	r4, r7
   1f704:	0c13      	lsrs	r3, r2, #16
   1f706:	0412      	lsls	r2, r2, #16
   1f708:	444b      	add	r3, r9
   1f70a:	4452      	add	r2, sl
   1f70c:	46a1      	mov	r9, r4
   1f70e:	468a      	mov	sl, r1
   1f710:	003c      	movs	r4, r7
   1f712:	4641      	mov	r1, r8
   1f714:	436c      	muls	r4, r5
   1f716:	434d      	muls	r5, r1
   1f718:	4651      	mov	r1, sl
   1f71a:	444d      	add	r5, r9
   1f71c:	0c0f      	lsrs	r7, r1, #16
   1f71e:	197d      	adds	r5, r7, r5
   1f720:	45a9      	cmp	r9, r5
   1f722:	d903      	bls.n	1f72c <__aeabi_dmul+0x2fc>
   1f724:	2180      	movs	r1, #128	; 0x80
   1f726:	0249      	lsls	r1, r1, #9
   1f728:	4688      	mov	r8, r1
   1f72a:	4444      	add	r4, r8
   1f72c:	9f04      	ldr	r7, [sp, #16]
   1f72e:	9903      	ldr	r1, [sp, #12]
   1f730:	46b8      	mov	r8, r7
   1f732:	4441      	add	r1, r8
   1f734:	468b      	mov	fp, r1
   1f736:	4583      	cmp	fp, r0
   1f738:	4180      	sbcs	r0, r0
   1f73a:	4241      	negs	r1, r0
   1f73c:	4688      	mov	r8, r1
   1f73e:	4651      	mov	r1, sl
   1f740:	0408      	lsls	r0, r1, #16
   1f742:	042f      	lsls	r7, r5, #16
   1f744:	0c00      	lsrs	r0, r0, #16
   1f746:	183f      	adds	r7, r7, r0
   1f748:	4658      	mov	r0, fp
   1f74a:	9902      	ldr	r1, [sp, #8]
   1f74c:	1810      	adds	r0, r2, r0
   1f74e:	4689      	mov	r9, r1
   1f750:	4290      	cmp	r0, r2
   1f752:	4192      	sbcs	r2, r2
   1f754:	444f      	add	r7, r9
   1f756:	46ba      	mov	sl, r7
   1f758:	4252      	negs	r2, r2
   1f75a:	4699      	mov	r9, r3
   1f75c:	4693      	mov	fp, r2
   1f75e:	44c2      	add	sl, r8
   1f760:	44d1      	add	r9, sl
   1f762:	44cb      	add	fp, r9
   1f764:	428f      	cmp	r7, r1
   1f766:	41bf      	sbcs	r7, r7
   1f768:	45c2      	cmp	sl, r8
   1f76a:	4189      	sbcs	r1, r1
   1f76c:	4599      	cmp	r9, r3
   1f76e:	419b      	sbcs	r3, r3
   1f770:	4593      	cmp	fp, r2
   1f772:	4192      	sbcs	r2, r2
   1f774:	427f      	negs	r7, r7
   1f776:	4249      	negs	r1, r1
   1f778:	0c2d      	lsrs	r5, r5, #16
   1f77a:	4252      	negs	r2, r2
   1f77c:	430f      	orrs	r7, r1
   1f77e:	425b      	negs	r3, r3
   1f780:	4313      	orrs	r3, r2
   1f782:	197f      	adds	r7, r7, r5
   1f784:	18ff      	adds	r7, r7, r3
   1f786:	465b      	mov	r3, fp
   1f788:	193c      	adds	r4, r7, r4
   1f78a:	0ddb      	lsrs	r3, r3, #23
   1f78c:	9a05      	ldr	r2, [sp, #20]
   1f78e:	0264      	lsls	r4, r4, #9
   1f790:	431c      	orrs	r4, r3
   1f792:	0243      	lsls	r3, r0, #9
   1f794:	4313      	orrs	r3, r2
   1f796:	1e5d      	subs	r5, r3, #1
   1f798:	41ab      	sbcs	r3, r5
   1f79a:	465a      	mov	r2, fp
   1f79c:	0dc0      	lsrs	r0, r0, #23
   1f79e:	4303      	orrs	r3, r0
   1f7a0:	0252      	lsls	r2, r2, #9
   1f7a2:	4313      	orrs	r3, r2
   1f7a4:	01e2      	lsls	r2, r4, #7
   1f7a6:	d556      	bpl.n	1f856 <__aeabi_dmul+0x426>
   1f7a8:	2001      	movs	r0, #1
   1f7aa:	085a      	lsrs	r2, r3, #1
   1f7ac:	4003      	ands	r3, r0
   1f7ae:	4313      	orrs	r3, r2
   1f7b0:	07e2      	lsls	r2, r4, #31
   1f7b2:	4313      	orrs	r3, r2
   1f7b4:	0864      	lsrs	r4, r4, #1
   1f7b6:	485a      	ldr	r0, [pc, #360]	; (1f920 <__aeabi_dmul+0x4f0>)
   1f7b8:	4460      	add	r0, ip
   1f7ba:	2800      	cmp	r0, #0
   1f7bc:	dd4d      	ble.n	1f85a <__aeabi_dmul+0x42a>
   1f7be:	075a      	lsls	r2, r3, #29
   1f7c0:	d009      	beq.n	1f7d6 <__aeabi_dmul+0x3a6>
   1f7c2:	220f      	movs	r2, #15
   1f7c4:	401a      	ands	r2, r3
   1f7c6:	2a04      	cmp	r2, #4
   1f7c8:	d005      	beq.n	1f7d6 <__aeabi_dmul+0x3a6>
   1f7ca:	1d1a      	adds	r2, r3, #4
   1f7cc:	429a      	cmp	r2, r3
   1f7ce:	419b      	sbcs	r3, r3
   1f7d0:	425b      	negs	r3, r3
   1f7d2:	18e4      	adds	r4, r4, r3
   1f7d4:	0013      	movs	r3, r2
   1f7d6:	01e2      	lsls	r2, r4, #7
   1f7d8:	d504      	bpl.n	1f7e4 <__aeabi_dmul+0x3b4>
   1f7da:	2080      	movs	r0, #128	; 0x80
   1f7dc:	4a51      	ldr	r2, [pc, #324]	; (1f924 <__aeabi_dmul+0x4f4>)
   1f7de:	00c0      	lsls	r0, r0, #3
   1f7e0:	4014      	ands	r4, r2
   1f7e2:	4460      	add	r0, ip
   1f7e4:	4a50      	ldr	r2, [pc, #320]	; (1f928 <__aeabi_dmul+0x4f8>)
   1f7e6:	4290      	cmp	r0, r2
   1f7e8:	dd00      	ble.n	1f7ec <__aeabi_dmul+0x3bc>
   1f7ea:	e6e3      	b.n	1f5b4 <__aeabi_dmul+0x184>
   1f7ec:	2501      	movs	r5, #1
   1f7ee:	08db      	lsrs	r3, r3, #3
   1f7f0:	0762      	lsls	r2, r4, #29
   1f7f2:	431a      	orrs	r2, r3
   1f7f4:	0264      	lsls	r4, r4, #9
   1f7f6:	9b01      	ldr	r3, [sp, #4]
   1f7f8:	4691      	mov	r9, r2
   1f7fa:	0b22      	lsrs	r2, r4, #12
   1f7fc:	0544      	lsls	r4, r0, #21
   1f7fe:	0d64      	lsrs	r4, r4, #21
   1f800:	401d      	ands	r5, r3
   1f802:	e67c      	b.n	1f4fe <__aeabi_dmul+0xce>
   1f804:	2280      	movs	r2, #128	; 0x80
   1f806:	4659      	mov	r1, fp
   1f808:	0312      	lsls	r2, r2, #12
   1f80a:	4211      	tst	r1, r2
   1f80c:	d008      	beq.n	1f820 <__aeabi_dmul+0x3f0>
   1f80e:	4214      	tst	r4, r2
   1f810:	d106      	bne.n	1f820 <__aeabi_dmul+0x3f0>
   1f812:	4322      	orrs	r2, r4
   1f814:	0312      	lsls	r2, r2, #12
   1f816:	0b12      	lsrs	r2, r2, #12
   1f818:	4645      	mov	r5, r8
   1f81a:	4699      	mov	r9, r3
   1f81c:	4c43      	ldr	r4, [pc, #268]	; (1f92c <__aeabi_dmul+0x4fc>)
   1f81e:	e66e      	b.n	1f4fe <__aeabi_dmul+0xce>
   1f820:	465b      	mov	r3, fp
   1f822:	431a      	orrs	r2, r3
   1f824:	0312      	lsls	r2, r2, #12
   1f826:	0b12      	lsrs	r2, r2, #12
   1f828:	4c40      	ldr	r4, [pc, #256]	; (1f92c <__aeabi_dmul+0x4fc>)
   1f82a:	e668      	b.n	1f4fe <__aeabi_dmul+0xce>
   1f82c:	0003      	movs	r3, r0
   1f82e:	4654      	mov	r4, sl
   1f830:	3b28      	subs	r3, #40	; 0x28
   1f832:	409c      	lsls	r4, r3
   1f834:	2300      	movs	r3, #0
   1f836:	e6b9      	b.n	1f5ac <__aeabi_dmul+0x17c>
   1f838:	f000 fbfc 	bl	20034 <__clzsi2>
   1f83c:	3020      	adds	r0, #32
   1f83e:	e6a6      	b.n	1f58e <__aeabi_dmul+0x15e>
   1f840:	0003      	movs	r3, r0
   1f842:	3b28      	subs	r3, #40	; 0x28
   1f844:	409f      	lsls	r7, r3
   1f846:	2300      	movs	r3, #0
   1f848:	46bb      	mov	fp, r7
   1f84a:	4699      	mov	r9, r3
   1f84c:	e68a      	b.n	1f564 <__aeabi_dmul+0x134>
   1f84e:	f000 fbf1 	bl	20034 <__clzsi2>
   1f852:	3020      	adds	r0, #32
   1f854:	e674      	b.n	1f540 <__aeabi_dmul+0x110>
   1f856:	46b4      	mov	ip, r6
   1f858:	e7ad      	b.n	1f7b6 <__aeabi_dmul+0x386>
   1f85a:	2501      	movs	r5, #1
   1f85c:	1a2a      	subs	r2, r5, r0
   1f85e:	2a38      	cmp	r2, #56	; 0x38
   1f860:	dd06      	ble.n	1f870 <__aeabi_dmul+0x440>
   1f862:	9b01      	ldr	r3, [sp, #4]
   1f864:	2400      	movs	r4, #0
   1f866:	401d      	ands	r5, r3
   1f868:	2300      	movs	r3, #0
   1f86a:	2200      	movs	r2, #0
   1f86c:	4699      	mov	r9, r3
   1f86e:	e646      	b.n	1f4fe <__aeabi_dmul+0xce>
   1f870:	2a1f      	cmp	r2, #31
   1f872:	dc21      	bgt.n	1f8b8 <__aeabi_dmul+0x488>
   1f874:	2520      	movs	r5, #32
   1f876:	0020      	movs	r0, r4
   1f878:	1aad      	subs	r5, r5, r2
   1f87a:	001e      	movs	r6, r3
   1f87c:	40ab      	lsls	r3, r5
   1f87e:	40a8      	lsls	r0, r5
   1f880:	40d6      	lsrs	r6, r2
   1f882:	1e5d      	subs	r5, r3, #1
   1f884:	41ab      	sbcs	r3, r5
   1f886:	4330      	orrs	r0, r6
   1f888:	4318      	orrs	r0, r3
   1f88a:	40d4      	lsrs	r4, r2
   1f88c:	0743      	lsls	r3, r0, #29
   1f88e:	d009      	beq.n	1f8a4 <__aeabi_dmul+0x474>
   1f890:	230f      	movs	r3, #15
   1f892:	4003      	ands	r3, r0
   1f894:	2b04      	cmp	r3, #4
   1f896:	d005      	beq.n	1f8a4 <__aeabi_dmul+0x474>
   1f898:	0003      	movs	r3, r0
   1f89a:	1d18      	adds	r0, r3, #4
   1f89c:	4298      	cmp	r0, r3
   1f89e:	419b      	sbcs	r3, r3
   1f8a0:	425b      	negs	r3, r3
   1f8a2:	18e4      	adds	r4, r4, r3
   1f8a4:	0223      	lsls	r3, r4, #8
   1f8a6:	d521      	bpl.n	1f8ec <__aeabi_dmul+0x4bc>
   1f8a8:	2501      	movs	r5, #1
   1f8aa:	9b01      	ldr	r3, [sp, #4]
   1f8ac:	2401      	movs	r4, #1
   1f8ae:	401d      	ands	r5, r3
   1f8b0:	2300      	movs	r3, #0
   1f8b2:	2200      	movs	r2, #0
   1f8b4:	4699      	mov	r9, r3
   1f8b6:	e622      	b.n	1f4fe <__aeabi_dmul+0xce>
   1f8b8:	251f      	movs	r5, #31
   1f8ba:	0021      	movs	r1, r4
   1f8bc:	426d      	negs	r5, r5
   1f8be:	1a28      	subs	r0, r5, r0
   1f8c0:	40c1      	lsrs	r1, r0
   1f8c2:	0008      	movs	r0, r1
   1f8c4:	2a20      	cmp	r2, #32
   1f8c6:	d01d      	beq.n	1f904 <__aeabi_dmul+0x4d4>
   1f8c8:	355f      	adds	r5, #95	; 0x5f
   1f8ca:	1aaa      	subs	r2, r5, r2
   1f8cc:	4094      	lsls	r4, r2
   1f8ce:	4323      	orrs	r3, r4
   1f8d0:	1e5c      	subs	r4, r3, #1
   1f8d2:	41a3      	sbcs	r3, r4
   1f8d4:	2507      	movs	r5, #7
   1f8d6:	4303      	orrs	r3, r0
   1f8d8:	401d      	ands	r5, r3
   1f8da:	2200      	movs	r2, #0
   1f8dc:	2d00      	cmp	r5, #0
   1f8de:	d009      	beq.n	1f8f4 <__aeabi_dmul+0x4c4>
   1f8e0:	220f      	movs	r2, #15
   1f8e2:	2400      	movs	r4, #0
   1f8e4:	401a      	ands	r2, r3
   1f8e6:	0018      	movs	r0, r3
   1f8e8:	2a04      	cmp	r2, #4
   1f8ea:	d1d6      	bne.n	1f89a <__aeabi_dmul+0x46a>
   1f8ec:	0003      	movs	r3, r0
   1f8ee:	0765      	lsls	r5, r4, #29
   1f8f0:	0264      	lsls	r4, r4, #9
   1f8f2:	0b22      	lsrs	r2, r4, #12
   1f8f4:	08db      	lsrs	r3, r3, #3
   1f8f6:	432b      	orrs	r3, r5
   1f8f8:	2501      	movs	r5, #1
   1f8fa:	4699      	mov	r9, r3
   1f8fc:	9b01      	ldr	r3, [sp, #4]
   1f8fe:	2400      	movs	r4, #0
   1f900:	401d      	ands	r5, r3
   1f902:	e5fc      	b.n	1f4fe <__aeabi_dmul+0xce>
   1f904:	2400      	movs	r4, #0
   1f906:	e7e2      	b.n	1f8ce <__aeabi_dmul+0x49e>
   1f908:	2280      	movs	r2, #128	; 0x80
   1f90a:	2501      	movs	r5, #1
   1f90c:	0312      	lsls	r2, r2, #12
   1f90e:	4322      	orrs	r2, r4
   1f910:	9901      	ldr	r1, [sp, #4]
   1f912:	0312      	lsls	r2, r2, #12
   1f914:	0b12      	lsrs	r2, r2, #12
   1f916:	400d      	ands	r5, r1
   1f918:	4699      	mov	r9, r3
   1f91a:	4c04      	ldr	r4, [pc, #16]	; (1f92c <__aeabi_dmul+0x4fc>)
   1f91c:	e5ef      	b.n	1f4fe <__aeabi_dmul+0xce>
   1f91e:	46c0      	nop			; (mov r8, r8)
   1f920:	000003ff 	.word	0x000003ff
   1f924:	feffffff 	.word	0xfeffffff
   1f928:	000007fe 	.word	0x000007fe
   1f92c:	000007ff 	.word	0x000007ff

0001f930 <__aeabi_dsub>:
   1f930:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f932:	4646      	mov	r6, r8
   1f934:	46d6      	mov	lr, sl
   1f936:	464f      	mov	r7, r9
   1f938:	030c      	lsls	r4, r1, #12
   1f93a:	b5c0      	push	{r6, r7, lr}
   1f93c:	0fcd      	lsrs	r5, r1, #31
   1f93e:	004e      	lsls	r6, r1, #1
   1f940:	0a61      	lsrs	r1, r4, #9
   1f942:	0f44      	lsrs	r4, r0, #29
   1f944:	430c      	orrs	r4, r1
   1f946:	00c1      	lsls	r1, r0, #3
   1f948:	0058      	lsls	r0, r3, #1
   1f94a:	0d40      	lsrs	r0, r0, #21
   1f94c:	4684      	mov	ip, r0
   1f94e:	468a      	mov	sl, r1
   1f950:	000f      	movs	r7, r1
   1f952:	0319      	lsls	r1, r3, #12
   1f954:	0f50      	lsrs	r0, r2, #29
   1f956:	0a49      	lsrs	r1, r1, #9
   1f958:	4301      	orrs	r1, r0
   1f95a:	48c6      	ldr	r0, [pc, #792]	; (1fc74 <__aeabi_dsub+0x344>)
   1f95c:	0d76      	lsrs	r6, r6, #21
   1f95e:	46a8      	mov	r8, r5
   1f960:	0fdb      	lsrs	r3, r3, #31
   1f962:	00d2      	lsls	r2, r2, #3
   1f964:	4584      	cmp	ip, r0
   1f966:	d100      	bne.n	1f96a <__aeabi_dsub+0x3a>
   1f968:	e0d8      	b.n	1fb1c <__aeabi_dsub+0x1ec>
   1f96a:	2001      	movs	r0, #1
   1f96c:	4043      	eors	r3, r0
   1f96e:	42ab      	cmp	r3, r5
   1f970:	d100      	bne.n	1f974 <__aeabi_dsub+0x44>
   1f972:	e0a6      	b.n	1fac2 <__aeabi_dsub+0x192>
   1f974:	4660      	mov	r0, ip
   1f976:	1a35      	subs	r5, r6, r0
   1f978:	2d00      	cmp	r5, #0
   1f97a:	dc00      	bgt.n	1f97e <__aeabi_dsub+0x4e>
   1f97c:	e105      	b.n	1fb8a <__aeabi_dsub+0x25a>
   1f97e:	2800      	cmp	r0, #0
   1f980:	d110      	bne.n	1f9a4 <__aeabi_dsub+0x74>
   1f982:	000b      	movs	r3, r1
   1f984:	4313      	orrs	r3, r2
   1f986:	d100      	bne.n	1f98a <__aeabi_dsub+0x5a>
   1f988:	e0d7      	b.n	1fb3a <__aeabi_dsub+0x20a>
   1f98a:	1e6b      	subs	r3, r5, #1
   1f98c:	2b00      	cmp	r3, #0
   1f98e:	d000      	beq.n	1f992 <__aeabi_dsub+0x62>
   1f990:	e14b      	b.n	1fc2a <__aeabi_dsub+0x2fa>
   1f992:	4653      	mov	r3, sl
   1f994:	1a9f      	subs	r7, r3, r2
   1f996:	45ba      	cmp	sl, r7
   1f998:	4180      	sbcs	r0, r0
   1f99a:	1a64      	subs	r4, r4, r1
   1f99c:	4240      	negs	r0, r0
   1f99e:	1a24      	subs	r4, r4, r0
   1f9a0:	2601      	movs	r6, #1
   1f9a2:	e01e      	b.n	1f9e2 <__aeabi_dsub+0xb2>
   1f9a4:	4bb3      	ldr	r3, [pc, #716]	; (1fc74 <__aeabi_dsub+0x344>)
   1f9a6:	429e      	cmp	r6, r3
   1f9a8:	d048      	beq.n	1fa3c <__aeabi_dsub+0x10c>
   1f9aa:	2380      	movs	r3, #128	; 0x80
   1f9ac:	041b      	lsls	r3, r3, #16
   1f9ae:	4319      	orrs	r1, r3
   1f9b0:	2d38      	cmp	r5, #56	; 0x38
   1f9b2:	dd00      	ble.n	1f9b6 <__aeabi_dsub+0x86>
   1f9b4:	e119      	b.n	1fbea <__aeabi_dsub+0x2ba>
   1f9b6:	2d1f      	cmp	r5, #31
   1f9b8:	dd00      	ble.n	1f9bc <__aeabi_dsub+0x8c>
   1f9ba:	e14c      	b.n	1fc56 <__aeabi_dsub+0x326>
   1f9bc:	2320      	movs	r3, #32
   1f9be:	000f      	movs	r7, r1
   1f9c0:	1b5b      	subs	r3, r3, r5
   1f9c2:	0010      	movs	r0, r2
   1f9c4:	409a      	lsls	r2, r3
   1f9c6:	409f      	lsls	r7, r3
   1f9c8:	40e8      	lsrs	r0, r5
   1f9ca:	1e53      	subs	r3, r2, #1
   1f9cc:	419a      	sbcs	r2, r3
   1f9ce:	40e9      	lsrs	r1, r5
   1f9d0:	4307      	orrs	r7, r0
   1f9d2:	4317      	orrs	r7, r2
   1f9d4:	4653      	mov	r3, sl
   1f9d6:	1bdf      	subs	r7, r3, r7
   1f9d8:	1a61      	subs	r1, r4, r1
   1f9da:	45ba      	cmp	sl, r7
   1f9dc:	41a4      	sbcs	r4, r4
   1f9de:	4264      	negs	r4, r4
   1f9e0:	1b0c      	subs	r4, r1, r4
   1f9e2:	0223      	lsls	r3, r4, #8
   1f9e4:	d400      	bmi.n	1f9e8 <__aeabi_dsub+0xb8>
   1f9e6:	e0c5      	b.n	1fb74 <__aeabi_dsub+0x244>
   1f9e8:	0264      	lsls	r4, r4, #9
   1f9ea:	0a65      	lsrs	r5, r4, #9
   1f9ec:	2d00      	cmp	r5, #0
   1f9ee:	d100      	bne.n	1f9f2 <__aeabi_dsub+0xc2>
   1f9f0:	e0f6      	b.n	1fbe0 <__aeabi_dsub+0x2b0>
   1f9f2:	0028      	movs	r0, r5
   1f9f4:	f000 fb1e 	bl	20034 <__clzsi2>
   1f9f8:	0003      	movs	r3, r0
   1f9fa:	3b08      	subs	r3, #8
   1f9fc:	2b1f      	cmp	r3, #31
   1f9fe:	dd00      	ble.n	1fa02 <__aeabi_dsub+0xd2>
   1fa00:	e0e9      	b.n	1fbd6 <__aeabi_dsub+0x2a6>
   1fa02:	2220      	movs	r2, #32
   1fa04:	003c      	movs	r4, r7
   1fa06:	1ad2      	subs	r2, r2, r3
   1fa08:	409d      	lsls	r5, r3
   1fa0a:	40d4      	lsrs	r4, r2
   1fa0c:	409f      	lsls	r7, r3
   1fa0e:	4325      	orrs	r5, r4
   1fa10:	429e      	cmp	r6, r3
   1fa12:	dd00      	ble.n	1fa16 <__aeabi_dsub+0xe6>
   1fa14:	e0db      	b.n	1fbce <__aeabi_dsub+0x29e>
   1fa16:	1b9e      	subs	r6, r3, r6
   1fa18:	1c73      	adds	r3, r6, #1
   1fa1a:	2b1f      	cmp	r3, #31
   1fa1c:	dd00      	ble.n	1fa20 <__aeabi_dsub+0xf0>
   1fa1e:	e10a      	b.n	1fc36 <__aeabi_dsub+0x306>
   1fa20:	2220      	movs	r2, #32
   1fa22:	0038      	movs	r0, r7
   1fa24:	1ad2      	subs	r2, r2, r3
   1fa26:	0029      	movs	r1, r5
   1fa28:	4097      	lsls	r7, r2
   1fa2a:	002c      	movs	r4, r5
   1fa2c:	4091      	lsls	r1, r2
   1fa2e:	40d8      	lsrs	r0, r3
   1fa30:	1e7a      	subs	r2, r7, #1
   1fa32:	4197      	sbcs	r7, r2
   1fa34:	40dc      	lsrs	r4, r3
   1fa36:	2600      	movs	r6, #0
   1fa38:	4301      	orrs	r1, r0
   1fa3a:	430f      	orrs	r7, r1
   1fa3c:	077b      	lsls	r3, r7, #29
   1fa3e:	d009      	beq.n	1fa54 <__aeabi_dsub+0x124>
   1fa40:	230f      	movs	r3, #15
   1fa42:	403b      	ands	r3, r7
   1fa44:	2b04      	cmp	r3, #4
   1fa46:	d005      	beq.n	1fa54 <__aeabi_dsub+0x124>
   1fa48:	1d3b      	adds	r3, r7, #4
   1fa4a:	42bb      	cmp	r3, r7
   1fa4c:	41bf      	sbcs	r7, r7
   1fa4e:	427f      	negs	r7, r7
   1fa50:	19e4      	adds	r4, r4, r7
   1fa52:	001f      	movs	r7, r3
   1fa54:	0223      	lsls	r3, r4, #8
   1fa56:	d525      	bpl.n	1faa4 <__aeabi_dsub+0x174>
   1fa58:	4b86      	ldr	r3, [pc, #536]	; (1fc74 <__aeabi_dsub+0x344>)
   1fa5a:	3601      	adds	r6, #1
   1fa5c:	429e      	cmp	r6, r3
   1fa5e:	d100      	bne.n	1fa62 <__aeabi_dsub+0x132>
   1fa60:	e0af      	b.n	1fbc2 <__aeabi_dsub+0x292>
   1fa62:	4b85      	ldr	r3, [pc, #532]	; (1fc78 <__aeabi_dsub+0x348>)
   1fa64:	2501      	movs	r5, #1
   1fa66:	401c      	ands	r4, r3
   1fa68:	4643      	mov	r3, r8
   1fa6a:	0762      	lsls	r2, r4, #29
   1fa6c:	08ff      	lsrs	r7, r7, #3
   1fa6e:	0264      	lsls	r4, r4, #9
   1fa70:	0576      	lsls	r6, r6, #21
   1fa72:	4317      	orrs	r7, r2
   1fa74:	0b24      	lsrs	r4, r4, #12
   1fa76:	0d76      	lsrs	r6, r6, #21
   1fa78:	401d      	ands	r5, r3
   1fa7a:	2100      	movs	r1, #0
   1fa7c:	0324      	lsls	r4, r4, #12
   1fa7e:	0b23      	lsrs	r3, r4, #12
   1fa80:	0d0c      	lsrs	r4, r1, #20
   1fa82:	4a7e      	ldr	r2, [pc, #504]	; (1fc7c <__aeabi_dsub+0x34c>)
   1fa84:	0524      	lsls	r4, r4, #20
   1fa86:	431c      	orrs	r4, r3
   1fa88:	4014      	ands	r4, r2
   1fa8a:	0533      	lsls	r3, r6, #20
   1fa8c:	4323      	orrs	r3, r4
   1fa8e:	005b      	lsls	r3, r3, #1
   1fa90:	07ed      	lsls	r5, r5, #31
   1fa92:	085b      	lsrs	r3, r3, #1
   1fa94:	432b      	orrs	r3, r5
   1fa96:	0038      	movs	r0, r7
   1fa98:	0019      	movs	r1, r3
   1fa9a:	bc1c      	pop	{r2, r3, r4}
   1fa9c:	4690      	mov	r8, r2
   1fa9e:	4699      	mov	r9, r3
   1faa0:	46a2      	mov	sl, r4
   1faa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1faa4:	2501      	movs	r5, #1
   1faa6:	4643      	mov	r3, r8
   1faa8:	0762      	lsls	r2, r4, #29
   1faaa:	08ff      	lsrs	r7, r7, #3
   1faac:	4317      	orrs	r7, r2
   1faae:	08e4      	lsrs	r4, r4, #3
   1fab0:	401d      	ands	r5, r3
   1fab2:	4b70      	ldr	r3, [pc, #448]	; (1fc74 <__aeabi_dsub+0x344>)
   1fab4:	429e      	cmp	r6, r3
   1fab6:	d036      	beq.n	1fb26 <__aeabi_dsub+0x1f6>
   1fab8:	0324      	lsls	r4, r4, #12
   1faba:	0576      	lsls	r6, r6, #21
   1fabc:	0b24      	lsrs	r4, r4, #12
   1fabe:	0d76      	lsrs	r6, r6, #21
   1fac0:	e7db      	b.n	1fa7a <__aeabi_dsub+0x14a>
   1fac2:	4663      	mov	r3, ip
   1fac4:	1af3      	subs	r3, r6, r3
   1fac6:	2b00      	cmp	r3, #0
   1fac8:	dc00      	bgt.n	1facc <__aeabi_dsub+0x19c>
   1faca:	e094      	b.n	1fbf6 <__aeabi_dsub+0x2c6>
   1facc:	4660      	mov	r0, ip
   1face:	2800      	cmp	r0, #0
   1fad0:	d035      	beq.n	1fb3e <__aeabi_dsub+0x20e>
   1fad2:	4868      	ldr	r0, [pc, #416]	; (1fc74 <__aeabi_dsub+0x344>)
   1fad4:	4286      	cmp	r6, r0
   1fad6:	d0b1      	beq.n	1fa3c <__aeabi_dsub+0x10c>
   1fad8:	2780      	movs	r7, #128	; 0x80
   1fada:	043f      	lsls	r7, r7, #16
   1fadc:	4339      	orrs	r1, r7
   1fade:	2b38      	cmp	r3, #56	; 0x38
   1fae0:	dc00      	bgt.n	1fae4 <__aeabi_dsub+0x1b4>
   1fae2:	e0fd      	b.n	1fce0 <__aeabi_dsub+0x3b0>
   1fae4:	430a      	orrs	r2, r1
   1fae6:	0017      	movs	r7, r2
   1fae8:	2100      	movs	r1, #0
   1faea:	1e7a      	subs	r2, r7, #1
   1faec:	4197      	sbcs	r7, r2
   1faee:	4457      	add	r7, sl
   1faf0:	4557      	cmp	r7, sl
   1faf2:	4180      	sbcs	r0, r0
   1faf4:	1909      	adds	r1, r1, r4
   1faf6:	4244      	negs	r4, r0
   1faf8:	190c      	adds	r4, r1, r4
   1fafa:	0223      	lsls	r3, r4, #8
   1fafc:	d53a      	bpl.n	1fb74 <__aeabi_dsub+0x244>
   1fafe:	4b5d      	ldr	r3, [pc, #372]	; (1fc74 <__aeabi_dsub+0x344>)
   1fb00:	3601      	adds	r6, #1
   1fb02:	429e      	cmp	r6, r3
   1fb04:	d100      	bne.n	1fb08 <__aeabi_dsub+0x1d8>
   1fb06:	e14b      	b.n	1fda0 <__aeabi_dsub+0x470>
   1fb08:	2201      	movs	r2, #1
   1fb0a:	4b5b      	ldr	r3, [pc, #364]	; (1fc78 <__aeabi_dsub+0x348>)
   1fb0c:	401c      	ands	r4, r3
   1fb0e:	087b      	lsrs	r3, r7, #1
   1fb10:	4017      	ands	r7, r2
   1fb12:	431f      	orrs	r7, r3
   1fb14:	07e2      	lsls	r2, r4, #31
   1fb16:	4317      	orrs	r7, r2
   1fb18:	0864      	lsrs	r4, r4, #1
   1fb1a:	e78f      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fb1c:	0008      	movs	r0, r1
   1fb1e:	4310      	orrs	r0, r2
   1fb20:	d000      	beq.n	1fb24 <__aeabi_dsub+0x1f4>
   1fb22:	e724      	b.n	1f96e <__aeabi_dsub+0x3e>
   1fb24:	e721      	b.n	1f96a <__aeabi_dsub+0x3a>
   1fb26:	0023      	movs	r3, r4
   1fb28:	433b      	orrs	r3, r7
   1fb2a:	d100      	bne.n	1fb2e <__aeabi_dsub+0x1fe>
   1fb2c:	e1b9      	b.n	1fea2 <__aeabi_dsub+0x572>
   1fb2e:	2280      	movs	r2, #128	; 0x80
   1fb30:	0312      	lsls	r2, r2, #12
   1fb32:	4314      	orrs	r4, r2
   1fb34:	0324      	lsls	r4, r4, #12
   1fb36:	0b24      	lsrs	r4, r4, #12
   1fb38:	e79f      	b.n	1fa7a <__aeabi_dsub+0x14a>
   1fb3a:	002e      	movs	r6, r5
   1fb3c:	e77e      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fb3e:	0008      	movs	r0, r1
   1fb40:	4310      	orrs	r0, r2
   1fb42:	d100      	bne.n	1fb46 <__aeabi_dsub+0x216>
   1fb44:	e0ca      	b.n	1fcdc <__aeabi_dsub+0x3ac>
   1fb46:	1e58      	subs	r0, r3, #1
   1fb48:	4684      	mov	ip, r0
   1fb4a:	2800      	cmp	r0, #0
   1fb4c:	d000      	beq.n	1fb50 <__aeabi_dsub+0x220>
   1fb4e:	e0e7      	b.n	1fd20 <__aeabi_dsub+0x3f0>
   1fb50:	4452      	add	r2, sl
   1fb52:	4552      	cmp	r2, sl
   1fb54:	4180      	sbcs	r0, r0
   1fb56:	1864      	adds	r4, r4, r1
   1fb58:	4240      	negs	r0, r0
   1fb5a:	1824      	adds	r4, r4, r0
   1fb5c:	0017      	movs	r7, r2
   1fb5e:	2601      	movs	r6, #1
   1fb60:	0223      	lsls	r3, r4, #8
   1fb62:	d507      	bpl.n	1fb74 <__aeabi_dsub+0x244>
   1fb64:	2602      	movs	r6, #2
   1fb66:	e7cf      	b.n	1fb08 <__aeabi_dsub+0x1d8>
   1fb68:	4664      	mov	r4, ip
   1fb6a:	432c      	orrs	r4, r5
   1fb6c:	d100      	bne.n	1fb70 <__aeabi_dsub+0x240>
   1fb6e:	e1b3      	b.n	1fed8 <__aeabi_dsub+0x5a8>
   1fb70:	002c      	movs	r4, r5
   1fb72:	4667      	mov	r7, ip
   1fb74:	077b      	lsls	r3, r7, #29
   1fb76:	d000      	beq.n	1fb7a <__aeabi_dsub+0x24a>
   1fb78:	e762      	b.n	1fa40 <__aeabi_dsub+0x110>
   1fb7a:	0763      	lsls	r3, r4, #29
   1fb7c:	08ff      	lsrs	r7, r7, #3
   1fb7e:	431f      	orrs	r7, r3
   1fb80:	2501      	movs	r5, #1
   1fb82:	4643      	mov	r3, r8
   1fb84:	08e4      	lsrs	r4, r4, #3
   1fb86:	401d      	ands	r5, r3
   1fb88:	e793      	b.n	1fab2 <__aeabi_dsub+0x182>
   1fb8a:	2d00      	cmp	r5, #0
   1fb8c:	d178      	bne.n	1fc80 <__aeabi_dsub+0x350>
   1fb8e:	1c75      	adds	r5, r6, #1
   1fb90:	056d      	lsls	r5, r5, #21
   1fb92:	0d6d      	lsrs	r5, r5, #21
   1fb94:	2d01      	cmp	r5, #1
   1fb96:	dc00      	bgt.n	1fb9a <__aeabi_dsub+0x26a>
   1fb98:	e0f2      	b.n	1fd80 <__aeabi_dsub+0x450>
   1fb9a:	4650      	mov	r0, sl
   1fb9c:	1a80      	subs	r0, r0, r2
   1fb9e:	4582      	cmp	sl, r0
   1fba0:	41bf      	sbcs	r7, r7
   1fba2:	1a65      	subs	r5, r4, r1
   1fba4:	427f      	negs	r7, r7
   1fba6:	1bed      	subs	r5, r5, r7
   1fba8:	4684      	mov	ip, r0
   1fbaa:	0228      	lsls	r0, r5, #8
   1fbac:	d400      	bmi.n	1fbb0 <__aeabi_dsub+0x280>
   1fbae:	e08c      	b.n	1fcca <__aeabi_dsub+0x39a>
   1fbb0:	4650      	mov	r0, sl
   1fbb2:	1a17      	subs	r7, r2, r0
   1fbb4:	42ba      	cmp	r2, r7
   1fbb6:	4192      	sbcs	r2, r2
   1fbb8:	1b0c      	subs	r4, r1, r4
   1fbba:	4255      	negs	r5, r2
   1fbbc:	1b65      	subs	r5, r4, r5
   1fbbe:	4698      	mov	r8, r3
   1fbc0:	e714      	b.n	1f9ec <__aeabi_dsub+0xbc>
   1fbc2:	2501      	movs	r5, #1
   1fbc4:	4643      	mov	r3, r8
   1fbc6:	2400      	movs	r4, #0
   1fbc8:	401d      	ands	r5, r3
   1fbca:	2700      	movs	r7, #0
   1fbcc:	e755      	b.n	1fa7a <__aeabi_dsub+0x14a>
   1fbce:	4c2a      	ldr	r4, [pc, #168]	; (1fc78 <__aeabi_dsub+0x348>)
   1fbd0:	1af6      	subs	r6, r6, r3
   1fbd2:	402c      	ands	r4, r5
   1fbd4:	e732      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fbd6:	003d      	movs	r5, r7
   1fbd8:	3828      	subs	r0, #40	; 0x28
   1fbda:	4085      	lsls	r5, r0
   1fbdc:	2700      	movs	r7, #0
   1fbde:	e717      	b.n	1fa10 <__aeabi_dsub+0xe0>
   1fbe0:	0038      	movs	r0, r7
   1fbe2:	f000 fa27 	bl	20034 <__clzsi2>
   1fbe6:	3020      	adds	r0, #32
   1fbe8:	e706      	b.n	1f9f8 <__aeabi_dsub+0xc8>
   1fbea:	430a      	orrs	r2, r1
   1fbec:	0017      	movs	r7, r2
   1fbee:	2100      	movs	r1, #0
   1fbf0:	1e7a      	subs	r2, r7, #1
   1fbf2:	4197      	sbcs	r7, r2
   1fbf4:	e6ee      	b.n	1f9d4 <__aeabi_dsub+0xa4>
   1fbf6:	2b00      	cmp	r3, #0
   1fbf8:	d000      	beq.n	1fbfc <__aeabi_dsub+0x2cc>
   1fbfa:	e0e5      	b.n	1fdc8 <__aeabi_dsub+0x498>
   1fbfc:	1c73      	adds	r3, r6, #1
   1fbfe:	469c      	mov	ip, r3
   1fc00:	055b      	lsls	r3, r3, #21
   1fc02:	0d5b      	lsrs	r3, r3, #21
   1fc04:	2b01      	cmp	r3, #1
   1fc06:	dc00      	bgt.n	1fc0a <__aeabi_dsub+0x2da>
   1fc08:	e09f      	b.n	1fd4a <__aeabi_dsub+0x41a>
   1fc0a:	4b1a      	ldr	r3, [pc, #104]	; (1fc74 <__aeabi_dsub+0x344>)
   1fc0c:	459c      	cmp	ip, r3
   1fc0e:	d100      	bne.n	1fc12 <__aeabi_dsub+0x2e2>
   1fc10:	e0c5      	b.n	1fd9e <__aeabi_dsub+0x46e>
   1fc12:	4452      	add	r2, sl
   1fc14:	4552      	cmp	r2, sl
   1fc16:	4180      	sbcs	r0, r0
   1fc18:	1864      	adds	r4, r4, r1
   1fc1a:	4240      	negs	r0, r0
   1fc1c:	1824      	adds	r4, r4, r0
   1fc1e:	07e7      	lsls	r7, r4, #31
   1fc20:	0852      	lsrs	r2, r2, #1
   1fc22:	4317      	orrs	r7, r2
   1fc24:	0864      	lsrs	r4, r4, #1
   1fc26:	4666      	mov	r6, ip
   1fc28:	e708      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fc2a:	4812      	ldr	r0, [pc, #72]	; (1fc74 <__aeabi_dsub+0x344>)
   1fc2c:	4285      	cmp	r5, r0
   1fc2e:	d100      	bne.n	1fc32 <__aeabi_dsub+0x302>
   1fc30:	e085      	b.n	1fd3e <__aeabi_dsub+0x40e>
   1fc32:	001d      	movs	r5, r3
   1fc34:	e6bc      	b.n	1f9b0 <__aeabi_dsub+0x80>
   1fc36:	0029      	movs	r1, r5
   1fc38:	3e1f      	subs	r6, #31
   1fc3a:	40f1      	lsrs	r1, r6
   1fc3c:	2b20      	cmp	r3, #32
   1fc3e:	d100      	bne.n	1fc42 <__aeabi_dsub+0x312>
   1fc40:	e07f      	b.n	1fd42 <__aeabi_dsub+0x412>
   1fc42:	2240      	movs	r2, #64	; 0x40
   1fc44:	1ad3      	subs	r3, r2, r3
   1fc46:	409d      	lsls	r5, r3
   1fc48:	432f      	orrs	r7, r5
   1fc4a:	1e7d      	subs	r5, r7, #1
   1fc4c:	41af      	sbcs	r7, r5
   1fc4e:	2400      	movs	r4, #0
   1fc50:	430f      	orrs	r7, r1
   1fc52:	2600      	movs	r6, #0
   1fc54:	e78e      	b.n	1fb74 <__aeabi_dsub+0x244>
   1fc56:	002b      	movs	r3, r5
   1fc58:	000f      	movs	r7, r1
   1fc5a:	3b20      	subs	r3, #32
   1fc5c:	40df      	lsrs	r7, r3
   1fc5e:	2d20      	cmp	r5, #32
   1fc60:	d071      	beq.n	1fd46 <__aeabi_dsub+0x416>
   1fc62:	2340      	movs	r3, #64	; 0x40
   1fc64:	1b5d      	subs	r5, r3, r5
   1fc66:	40a9      	lsls	r1, r5
   1fc68:	430a      	orrs	r2, r1
   1fc6a:	1e51      	subs	r1, r2, #1
   1fc6c:	418a      	sbcs	r2, r1
   1fc6e:	2100      	movs	r1, #0
   1fc70:	4317      	orrs	r7, r2
   1fc72:	e6af      	b.n	1f9d4 <__aeabi_dsub+0xa4>
   1fc74:	000007ff 	.word	0x000007ff
   1fc78:	ff7fffff 	.word	0xff7fffff
   1fc7c:	800fffff 	.word	0x800fffff
   1fc80:	2e00      	cmp	r6, #0
   1fc82:	d03e      	beq.n	1fd02 <__aeabi_dsub+0x3d2>
   1fc84:	4eb3      	ldr	r6, [pc, #716]	; (1ff54 <__aeabi_dsub+0x624>)
   1fc86:	45b4      	cmp	ip, r6
   1fc88:	d045      	beq.n	1fd16 <__aeabi_dsub+0x3e6>
   1fc8a:	2680      	movs	r6, #128	; 0x80
   1fc8c:	0436      	lsls	r6, r6, #16
   1fc8e:	426d      	negs	r5, r5
   1fc90:	4334      	orrs	r4, r6
   1fc92:	2d38      	cmp	r5, #56	; 0x38
   1fc94:	dd00      	ble.n	1fc98 <__aeabi_dsub+0x368>
   1fc96:	e0a8      	b.n	1fdea <__aeabi_dsub+0x4ba>
   1fc98:	2d1f      	cmp	r5, #31
   1fc9a:	dd00      	ble.n	1fc9e <__aeabi_dsub+0x36e>
   1fc9c:	e11f      	b.n	1fede <__aeabi_dsub+0x5ae>
   1fc9e:	2620      	movs	r6, #32
   1fca0:	0027      	movs	r7, r4
   1fca2:	4650      	mov	r0, sl
   1fca4:	1b76      	subs	r6, r6, r5
   1fca6:	40b7      	lsls	r7, r6
   1fca8:	40e8      	lsrs	r0, r5
   1fcaa:	4307      	orrs	r7, r0
   1fcac:	4650      	mov	r0, sl
   1fcae:	40b0      	lsls	r0, r6
   1fcb0:	1e46      	subs	r6, r0, #1
   1fcb2:	41b0      	sbcs	r0, r6
   1fcb4:	40ec      	lsrs	r4, r5
   1fcb6:	4338      	orrs	r0, r7
   1fcb8:	1a17      	subs	r7, r2, r0
   1fcba:	42ba      	cmp	r2, r7
   1fcbc:	4192      	sbcs	r2, r2
   1fcbe:	1b0c      	subs	r4, r1, r4
   1fcc0:	4252      	negs	r2, r2
   1fcc2:	1aa4      	subs	r4, r4, r2
   1fcc4:	4666      	mov	r6, ip
   1fcc6:	4698      	mov	r8, r3
   1fcc8:	e68b      	b.n	1f9e2 <__aeabi_dsub+0xb2>
   1fcca:	4664      	mov	r4, ip
   1fccc:	4667      	mov	r7, ip
   1fcce:	432c      	orrs	r4, r5
   1fcd0:	d000      	beq.n	1fcd4 <__aeabi_dsub+0x3a4>
   1fcd2:	e68b      	b.n	1f9ec <__aeabi_dsub+0xbc>
   1fcd4:	2500      	movs	r5, #0
   1fcd6:	2600      	movs	r6, #0
   1fcd8:	2700      	movs	r7, #0
   1fcda:	e6ea      	b.n	1fab2 <__aeabi_dsub+0x182>
   1fcdc:	001e      	movs	r6, r3
   1fcde:	e6ad      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fce0:	2b1f      	cmp	r3, #31
   1fce2:	dc60      	bgt.n	1fda6 <__aeabi_dsub+0x476>
   1fce4:	2720      	movs	r7, #32
   1fce6:	1af8      	subs	r0, r7, r3
   1fce8:	000f      	movs	r7, r1
   1fcea:	4684      	mov	ip, r0
   1fcec:	4087      	lsls	r7, r0
   1fcee:	0010      	movs	r0, r2
   1fcf0:	40d8      	lsrs	r0, r3
   1fcf2:	4307      	orrs	r7, r0
   1fcf4:	4660      	mov	r0, ip
   1fcf6:	4082      	lsls	r2, r0
   1fcf8:	1e50      	subs	r0, r2, #1
   1fcfa:	4182      	sbcs	r2, r0
   1fcfc:	40d9      	lsrs	r1, r3
   1fcfe:	4317      	orrs	r7, r2
   1fd00:	e6f5      	b.n	1faee <__aeabi_dsub+0x1be>
   1fd02:	0026      	movs	r6, r4
   1fd04:	4650      	mov	r0, sl
   1fd06:	4306      	orrs	r6, r0
   1fd08:	d005      	beq.n	1fd16 <__aeabi_dsub+0x3e6>
   1fd0a:	43ed      	mvns	r5, r5
   1fd0c:	2d00      	cmp	r5, #0
   1fd0e:	d0d3      	beq.n	1fcb8 <__aeabi_dsub+0x388>
   1fd10:	4e90      	ldr	r6, [pc, #576]	; (1ff54 <__aeabi_dsub+0x624>)
   1fd12:	45b4      	cmp	ip, r6
   1fd14:	d1bd      	bne.n	1fc92 <__aeabi_dsub+0x362>
   1fd16:	000c      	movs	r4, r1
   1fd18:	0017      	movs	r7, r2
   1fd1a:	4666      	mov	r6, ip
   1fd1c:	4698      	mov	r8, r3
   1fd1e:	e68d      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fd20:	488c      	ldr	r0, [pc, #560]	; (1ff54 <__aeabi_dsub+0x624>)
   1fd22:	4283      	cmp	r3, r0
   1fd24:	d00b      	beq.n	1fd3e <__aeabi_dsub+0x40e>
   1fd26:	4663      	mov	r3, ip
   1fd28:	e6d9      	b.n	1fade <__aeabi_dsub+0x1ae>
   1fd2a:	2d00      	cmp	r5, #0
   1fd2c:	d000      	beq.n	1fd30 <__aeabi_dsub+0x400>
   1fd2e:	e096      	b.n	1fe5e <__aeabi_dsub+0x52e>
   1fd30:	0008      	movs	r0, r1
   1fd32:	4310      	orrs	r0, r2
   1fd34:	d100      	bne.n	1fd38 <__aeabi_dsub+0x408>
   1fd36:	e0e2      	b.n	1fefe <__aeabi_dsub+0x5ce>
   1fd38:	000c      	movs	r4, r1
   1fd3a:	0017      	movs	r7, r2
   1fd3c:	4698      	mov	r8, r3
   1fd3e:	4e85      	ldr	r6, [pc, #532]	; (1ff54 <__aeabi_dsub+0x624>)
   1fd40:	e67c      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fd42:	2500      	movs	r5, #0
   1fd44:	e780      	b.n	1fc48 <__aeabi_dsub+0x318>
   1fd46:	2100      	movs	r1, #0
   1fd48:	e78e      	b.n	1fc68 <__aeabi_dsub+0x338>
   1fd4a:	0023      	movs	r3, r4
   1fd4c:	4650      	mov	r0, sl
   1fd4e:	4303      	orrs	r3, r0
   1fd50:	2e00      	cmp	r6, #0
   1fd52:	d000      	beq.n	1fd56 <__aeabi_dsub+0x426>
   1fd54:	e0a8      	b.n	1fea8 <__aeabi_dsub+0x578>
   1fd56:	2b00      	cmp	r3, #0
   1fd58:	d100      	bne.n	1fd5c <__aeabi_dsub+0x42c>
   1fd5a:	e0de      	b.n	1ff1a <__aeabi_dsub+0x5ea>
   1fd5c:	000b      	movs	r3, r1
   1fd5e:	4313      	orrs	r3, r2
   1fd60:	d100      	bne.n	1fd64 <__aeabi_dsub+0x434>
   1fd62:	e66b      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fd64:	4452      	add	r2, sl
   1fd66:	4552      	cmp	r2, sl
   1fd68:	4180      	sbcs	r0, r0
   1fd6a:	1864      	adds	r4, r4, r1
   1fd6c:	4240      	negs	r0, r0
   1fd6e:	1824      	adds	r4, r4, r0
   1fd70:	0017      	movs	r7, r2
   1fd72:	0223      	lsls	r3, r4, #8
   1fd74:	d400      	bmi.n	1fd78 <__aeabi_dsub+0x448>
   1fd76:	e6fd      	b.n	1fb74 <__aeabi_dsub+0x244>
   1fd78:	4b77      	ldr	r3, [pc, #476]	; (1ff58 <__aeabi_dsub+0x628>)
   1fd7a:	4666      	mov	r6, ip
   1fd7c:	401c      	ands	r4, r3
   1fd7e:	e65d      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fd80:	0025      	movs	r5, r4
   1fd82:	4650      	mov	r0, sl
   1fd84:	4305      	orrs	r5, r0
   1fd86:	2e00      	cmp	r6, #0
   1fd88:	d1cf      	bne.n	1fd2a <__aeabi_dsub+0x3fa>
   1fd8a:	2d00      	cmp	r5, #0
   1fd8c:	d14f      	bne.n	1fe2e <__aeabi_dsub+0x4fe>
   1fd8e:	000c      	movs	r4, r1
   1fd90:	4314      	orrs	r4, r2
   1fd92:	d100      	bne.n	1fd96 <__aeabi_dsub+0x466>
   1fd94:	e0a0      	b.n	1fed8 <__aeabi_dsub+0x5a8>
   1fd96:	000c      	movs	r4, r1
   1fd98:	0017      	movs	r7, r2
   1fd9a:	4698      	mov	r8, r3
   1fd9c:	e64e      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fd9e:	4666      	mov	r6, ip
   1fda0:	2400      	movs	r4, #0
   1fda2:	2700      	movs	r7, #0
   1fda4:	e685      	b.n	1fab2 <__aeabi_dsub+0x182>
   1fda6:	001f      	movs	r7, r3
   1fda8:	0008      	movs	r0, r1
   1fdaa:	3f20      	subs	r7, #32
   1fdac:	40f8      	lsrs	r0, r7
   1fdae:	0007      	movs	r7, r0
   1fdb0:	2b20      	cmp	r3, #32
   1fdb2:	d100      	bne.n	1fdb6 <__aeabi_dsub+0x486>
   1fdb4:	e08e      	b.n	1fed4 <__aeabi_dsub+0x5a4>
   1fdb6:	2040      	movs	r0, #64	; 0x40
   1fdb8:	1ac3      	subs	r3, r0, r3
   1fdba:	4099      	lsls	r1, r3
   1fdbc:	430a      	orrs	r2, r1
   1fdbe:	1e51      	subs	r1, r2, #1
   1fdc0:	418a      	sbcs	r2, r1
   1fdc2:	2100      	movs	r1, #0
   1fdc4:	4317      	orrs	r7, r2
   1fdc6:	e692      	b.n	1faee <__aeabi_dsub+0x1be>
   1fdc8:	2e00      	cmp	r6, #0
   1fdca:	d114      	bne.n	1fdf6 <__aeabi_dsub+0x4c6>
   1fdcc:	0026      	movs	r6, r4
   1fdce:	4650      	mov	r0, sl
   1fdd0:	4306      	orrs	r6, r0
   1fdd2:	d062      	beq.n	1fe9a <__aeabi_dsub+0x56a>
   1fdd4:	43db      	mvns	r3, r3
   1fdd6:	2b00      	cmp	r3, #0
   1fdd8:	d15c      	bne.n	1fe94 <__aeabi_dsub+0x564>
   1fdda:	1887      	adds	r7, r0, r2
   1fddc:	4297      	cmp	r7, r2
   1fdde:	4192      	sbcs	r2, r2
   1fde0:	1864      	adds	r4, r4, r1
   1fde2:	4252      	negs	r2, r2
   1fde4:	18a4      	adds	r4, r4, r2
   1fde6:	4666      	mov	r6, ip
   1fde8:	e687      	b.n	1fafa <__aeabi_dsub+0x1ca>
   1fdea:	4650      	mov	r0, sl
   1fdec:	4320      	orrs	r0, r4
   1fdee:	1e44      	subs	r4, r0, #1
   1fdf0:	41a0      	sbcs	r0, r4
   1fdf2:	2400      	movs	r4, #0
   1fdf4:	e760      	b.n	1fcb8 <__aeabi_dsub+0x388>
   1fdf6:	4e57      	ldr	r6, [pc, #348]	; (1ff54 <__aeabi_dsub+0x624>)
   1fdf8:	45b4      	cmp	ip, r6
   1fdfa:	d04e      	beq.n	1fe9a <__aeabi_dsub+0x56a>
   1fdfc:	2680      	movs	r6, #128	; 0x80
   1fdfe:	0436      	lsls	r6, r6, #16
   1fe00:	425b      	negs	r3, r3
   1fe02:	4334      	orrs	r4, r6
   1fe04:	2b38      	cmp	r3, #56	; 0x38
   1fe06:	dd00      	ble.n	1fe0a <__aeabi_dsub+0x4da>
   1fe08:	e07f      	b.n	1ff0a <__aeabi_dsub+0x5da>
   1fe0a:	2b1f      	cmp	r3, #31
   1fe0c:	dd00      	ble.n	1fe10 <__aeabi_dsub+0x4e0>
   1fe0e:	e08b      	b.n	1ff28 <__aeabi_dsub+0x5f8>
   1fe10:	2620      	movs	r6, #32
   1fe12:	0027      	movs	r7, r4
   1fe14:	4650      	mov	r0, sl
   1fe16:	1af6      	subs	r6, r6, r3
   1fe18:	40b7      	lsls	r7, r6
   1fe1a:	40d8      	lsrs	r0, r3
   1fe1c:	4307      	orrs	r7, r0
   1fe1e:	4650      	mov	r0, sl
   1fe20:	40b0      	lsls	r0, r6
   1fe22:	1e46      	subs	r6, r0, #1
   1fe24:	41b0      	sbcs	r0, r6
   1fe26:	4307      	orrs	r7, r0
   1fe28:	40dc      	lsrs	r4, r3
   1fe2a:	18bf      	adds	r7, r7, r2
   1fe2c:	e7d6      	b.n	1fddc <__aeabi_dsub+0x4ac>
   1fe2e:	000d      	movs	r5, r1
   1fe30:	4315      	orrs	r5, r2
   1fe32:	d100      	bne.n	1fe36 <__aeabi_dsub+0x506>
   1fe34:	e602      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fe36:	4650      	mov	r0, sl
   1fe38:	1a80      	subs	r0, r0, r2
   1fe3a:	4582      	cmp	sl, r0
   1fe3c:	41bf      	sbcs	r7, r7
   1fe3e:	1a65      	subs	r5, r4, r1
   1fe40:	427f      	negs	r7, r7
   1fe42:	1bed      	subs	r5, r5, r7
   1fe44:	4684      	mov	ip, r0
   1fe46:	0228      	lsls	r0, r5, #8
   1fe48:	d400      	bmi.n	1fe4c <__aeabi_dsub+0x51c>
   1fe4a:	e68d      	b.n	1fb68 <__aeabi_dsub+0x238>
   1fe4c:	4650      	mov	r0, sl
   1fe4e:	1a17      	subs	r7, r2, r0
   1fe50:	42ba      	cmp	r2, r7
   1fe52:	4192      	sbcs	r2, r2
   1fe54:	1b0c      	subs	r4, r1, r4
   1fe56:	4252      	negs	r2, r2
   1fe58:	1aa4      	subs	r4, r4, r2
   1fe5a:	4698      	mov	r8, r3
   1fe5c:	e5ee      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fe5e:	000d      	movs	r5, r1
   1fe60:	4315      	orrs	r5, r2
   1fe62:	d100      	bne.n	1fe66 <__aeabi_dsub+0x536>
   1fe64:	e76b      	b.n	1fd3e <__aeabi_dsub+0x40e>
   1fe66:	4650      	mov	r0, sl
   1fe68:	0767      	lsls	r7, r4, #29
   1fe6a:	08c0      	lsrs	r0, r0, #3
   1fe6c:	4307      	orrs	r7, r0
   1fe6e:	2080      	movs	r0, #128	; 0x80
   1fe70:	08e4      	lsrs	r4, r4, #3
   1fe72:	0300      	lsls	r0, r0, #12
   1fe74:	4204      	tst	r4, r0
   1fe76:	d007      	beq.n	1fe88 <__aeabi_dsub+0x558>
   1fe78:	08cd      	lsrs	r5, r1, #3
   1fe7a:	4205      	tst	r5, r0
   1fe7c:	d104      	bne.n	1fe88 <__aeabi_dsub+0x558>
   1fe7e:	002c      	movs	r4, r5
   1fe80:	4698      	mov	r8, r3
   1fe82:	08d7      	lsrs	r7, r2, #3
   1fe84:	0749      	lsls	r1, r1, #29
   1fe86:	430f      	orrs	r7, r1
   1fe88:	0f7b      	lsrs	r3, r7, #29
   1fe8a:	00e4      	lsls	r4, r4, #3
   1fe8c:	431c      	orrs	r4, r3
   1fe8e:	00ff      	lsls	r7, r7, #3
   1fe90:	4e30      	ldr	r6, [pc, #192]	; (1ff54 <__aeabi_dsub+0x624>)
   1fe92:	e5d3      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fe94:	4e2f      	ldr	r6, [pc, #188]	; (1ff54 <__aeabi_dsub+0x624>)
   1fe96:	45b4      	cmp	ip, r6
   1fe98:	d1b4      	bne.n	1fe04 <__aeabi_dsub+0x4d4>
   1fe9a:	000c      	movs	r4, r1
   1fe9c:	0017      	movs	r7, r2
   1fe9e:	4666      	mov	r6, ip
   1fea0:	e5cc      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1fea2:	2700      	movs	r7, #0
   1fea4:	2400      	movs	r4, #0
   1fea6:	e5e8      	b.n	1fa7a <__aeabi_dsub+0x14a>
   1fea8:	2b00      	cmp	r3, #0
   1feaa:	d039      	beq.n	1ff20 <__aeabi_dsub+0x5f0>
   1feac:	000b      	movs	r3, r1
   1feae:	4313      	orrs	r3, r2
   1feb0:	d100      	bne.n	1feb4 <__aeabi_dsub+0x584>
   1feb2:	e744      	b.n	1fd3e <__aeabi_dsub+0x40e>
   1feb4:	08c0      	lsrs	r0, r0, #3
   1feb6:	0767      	lsls	r7, r4, #29
   1feb8:	4307      	orrs	r7, r0
   1feba:	2080      	movs	r0, #128	; 0x80
   1febc:	08e4      	lsrs	r4, r4, #3
   1febe:	0300      	lsls	r0, r0, #12
   1fec0:	4204      	tst	r4, r0
   1fec2:	d0e1      	beq.n	1fe88 <__aeabi_dsub+0x558>
   1fec4:	08cb      	lsrs	r3, r1, #3
   1fec6:	4203      	tst	r3, r0
   1fec8:	d1de      	bne.n	1fe88 <__aeabi_dsub+0x558>
   1feca:	08d7      	lsrs	r7, r2, #3
   1fecc:	0749      	lsls	r1, r1, #29
   1fece:	430f      	orrs	r7, r1
   1fed0:	001c      	movs	r4, r3
   1fed2:	e7d9      	b.n	1fe88 <__aeabi_dsub+0x558>
   1fed4:	2100      	movs	r1, #0
   1fed6:	e771      	b.n	1fdbc <__aeabi_dsub+0x48c>
   1fed8:	2500      	movs	r5, #0
   1feda:	2700      	movs	r7, #0
   1fedc:	e5e9      	b.n	1fab2 <__aeabi_dsub+0x182>
   1fede:	002e      	movs	r6, r5
   1fee0:	0027      	movs	r7, r4
   1fee2:	3e20      	subs	r6, #32
   1fee4:	40f7      	lsrs	r7, r6
   1fee6:	2d20      	cmp	r5, #32
   1fee8:	d02f      	beq.n	1ff4a <__aeabi_dsub+0x61a>
   1feea:	2640      	movs	r6, #64	; 0x40
   1feec:	1b75      	subs	r5, r6, r5
   1feee:	40ac      	lsls	r4, r5
   1fef0:	4650      	mov	r0, sl
   1fef2:	4320      	orrs	r0, r4
   1fef4:	1e44      	subs	r4, r0, #1
   1fef6:	41a0      	sbcs	r0, r4
   1fef8:	2400      	movs	r4, #0
   1fefa:	4338      	orrs	r0, r7
   1fefc:	e6dc      	b.n	1fcb8 <__aeabi_dsub+0x388>
   1fefe:	2480      	movs	r4, #128	; 0x80
   1ff00:	2500      	movs	r5, #0
   1ff02:	0324      	lsls	r4, r4, #12
   1ff04:	4e13      	ldr	r6, [pc, #76]	; (1ff54 <__aeabi_dsub+0x624>)
   1ff06:	2700      	movs	r7, #0
   1ff08:	e5d3      	b.n	1fab2 <__aeabi_dsub+0x182>
   1ff0a:	4650      	mov	r0, sl
   1ff0c:	4320      	orrs	r0, r4
   1ff0e:	0007      	movs	r7, r0
   1ff10:	1e78      	subs	r0, r7, #1
   1ff12:	4187      	sbcs	r7, r0
   1ff14:	2400      	movs	r4, #0
   1ff16:	18bf      	adds	r7, r7, r2
   1ff18:	e760      	b.n	1fddc <__aeabi_dsub+0x4ac>
   1ff1a:	000c      	movs	r4, r1
   1ff1c:	0017      	movs	r7, r2
   1ff1e:	e58d      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1ff20:	000c      	movs	r4, r1
   1ff22:	0017      	movs	r7, r2
   1ff24:	4e0b      	ldr	r6, [pc, #44]	; (1ff54 <__aeabi_dsub+0x624>)
   1ff26:	e589      	b.n	1fa3c <__aeabi_dsub+0x10c>
   1ff28:	001e      	movs	r6, r3
   1ff2a:	0027      	movs	r7, r4
   1ff2c:	3e20      	subs	r6, #32
   1ff2e:	40f7      	lsrs	r7, r6
   1ff30:	2b20      	cmp	r3, #32
   1ff32:	d00c      	beq.n	1ff4e <__aeabi_dsub+0x61e>
   1ff34:	2640      	movs	r6, #64	; 0x40
   1ff36:	1af3      	subs	r3, r6, r3
   1ff38:	409c      	lsls	r4, r3
   1ff3a:	4650      	mov	r0, sl
   1ff3c:	4320      	orrs	r0, r4
   1ff3e:	1e44      	subs	r4, r0, #1
   1ff40:	41a0      	sbcs	r0, r4
   1ff42:	4307      	orrs	r7, r0
   1ff44:	2400      	movs	r4, #0
   1ff46:	18bf      	adds	r7, r7, r2
   1ff48:	e748      	b.n	1fddc <__aeabi_dsub+0x4ac>
   1ff4a:	2400      	movs	r4, #0
   1ff4c:	e7d0      	b.n	1fef0 <__aeabi_dsub+0x5c0>
   1ff4e:	2400      	movs	r4, #0
   1ff50:	e7f3      	b.n	1ff3a <__aeabi_dsub+0x60a>
   1ff52:	46c0      	nop			; (mov r8, r8)
   1ff54:	000007ff 	.word	0x000007ff
   1ff58:	ff7fffff 	.word	0xff7fffff

0001ff5c <__aeabi_d2iz>:
   1ff5c:	b530      	push	{r4, r5, lr}
   1ff5e:	4d13      	ldr	r5, [pc, #76]	; (1ffac <__aeabi_d2iz+0x50>)
   1ff60:	030a      	lsls	r2, r1, #12
   1ff62:	004b      	lsls	r3, r1, #1
   1ff64:	0b12      	lsrs	r2, r2, #12
   1ff66:	0d5b      	lsrs	r3, r3, #21
   1ff68:	0fc9      	lsrs	r1, r1, #31
   1ff6a:	2400      	movs	r4, #0
   1ff6c:	42ab      	cmp	r3, r5
   1ff6e:	dd10      	ble.n	1ff92 <__aeabi_d2iz+0x36>
   1ff70:	4c0f      	ldr	r4, [pc, #60]	; (1ffb0 <__aeabi_d2iz+0x54>)
   1ff72:	42a3      	cmp	r3, r4
   1ff74:	dc0f      	bgt.n	1ff96 <__aeabi_d2iz+0x3a>
   1ff76:	2480      	movs	r4, #128	; 0x80
   1ff78:	4d0e      	ldr	r5, [pc, #56]	; (1ffb4 <__aeabi_d2iz+0x58>)
   1ff7a:	0364      	lsls	r4, r4, #13
   1ff7c:	4322      	orrs	r2, r4
   1ff7e:	1aed      	subs	r5, r5, r3
   1ff80:	2d1f      	cmp	r5, #31
   1ff82:	dd0b      	ble.n	1ff9c <__aeabi_d2iz+0x40>
   1ff84:	480c      	ldr	r0, [pc, #48]	; (1ffb8 <__aeabi_d2iz+0x5c>)
   1ff86:	1ac3      	subs	r3, r0, r3
   1ff88:	40da      	lsrs	r2, r3
   1ff8a:	4254      	negs	r4, r2
   1ff8c:	2900      	cmp	r1, #0
   1ff8e:	d100      	bne.n	1ff92 <__aeabi_d2iz+0x36>
   1ff90:	0014      	movs	r4, r2
   1ff92:	0020      	movs	r0, r4
   1ff94:	bd30      	pop	{r4, r5, pc}
   1ff96:	4b09      	ldr	r3, [pc, #36]	; (1ffbc <__aeabi_d2iz+0x60>)
   1ff98:	18cc      	adds	r4, r1, r3
   1ff9a:	e7fa      	b.n	1ff92 <__aeabi_d2iz+0x36>
   1ff9c:	4c08      	ldr	r4, [pc, #32]	; (1ffc0 <__aeabi_d2iz+0x64>)
   1ff9e:	40e8      	lsrs	r0, r5
   1ffa0:	46a4      	mov	ip, r4
   1ffa2:	4463      	add	r3, ip
   1ffa4:	409a      	lsls	r2, r3
   1ffa6:	4302      	orrs	r2, r0
   1ffa8:	e7ef      	b.n	1ff8a <__aeabi_d2iz+0x2e>
   1ffaa:	46c0      	nop			; (mov r8, r8)
   1ffac:	000003fe 	.word	0x000003fe
   1ffb0:	0000041d 	.word	0x0000041d
   1ffb4:	00000433 	.word	0x00000433
   1ffb8:	00000413 	.word	0x00000413
   1ffbc:	7fffffff 	.word	0x7fffffff
   1ffc0:	fffffbed 	.word	0xfffffbed

0001ffc4 <__aeabi_ui2d>:
   1ffc4:	b510      	push	{r4, lr}
   1ffc6:	1e04      	subs	r4, r0, #0
   1ffc8:	d028      	beq.n	2001c <__aeabi_ui2d+0x58>
   1ffca:	f000 f833 	bl	20034 <__clzsi2>
   1ffce:	4b15      	ldr	r3, [pc, #84]	; (20024 <__aeabi_ui2d+0x60>)
   1ffd0:	4a15      	ldr	r2, [pc, #84]	; (20028 <__aeabi_ui2d+0x64>)
   1ffd2:	1a1b      	subs	r3, r3, r0
   1ffd4:	1ad2      	subs	r2, r2, r3
   1ffd6:	2a1f      	cmp	r2, #31
   1ffd8:	dd15      	ble.n	20006 <__aeabi_ui2d+0x42>
   1ffda:	4a14      	ldr	r2, [pc, #80]	; (2002c <__aeabi_ui2d+0x68>)
   1ffdc:	1ad2      	subs	r2, r2, r3
   1ffde:	4094      	lsls	r4, r2
   1ffe0:	2200      	movs	r2, #0
   1ffe2:	0324      	lsls	r4, r4, #12
   1ffe4:	055b      	lsls	r3, r3, #21
   1ffe6:	0b24      	lsrs	r4, r4, #12
   1ffe8:	0d5b      	lsrs	r3, r3, #21
   1ffea:	2100      	movs	r1, #0
   1ffec:	0010      	movs	r0, r2
   1ffee:	0324      	lsls	r4, r4, #12
   1fff0:	0d0a      	lsrs	r2, r1, #20
   1fff2:	0b24      	lsrs	r4, r4, #12
   1fff4:	0512      	lsls	r2, r2, #20
   1fff6:	4322      	orrs	r2, r4
   1fff8:	4c0d      	ldr	r4, [pc, #52]	; (20030 <__aeabi_ui2d+0x6c>)
   1fffa:	051b      	lsls	r3, r3, #20
   1fffc:	4022      	ands	r2, r4
   1fffe:	4313      	orrs	r3, r2
   20000:	005b      	lsls	r3, r3, #1
   20002:	0859      	lsrs	r1, r3, #1
   20004:	bd10      	pop	{r4, pc}
   20006:	0021      	movs	r1, r4
   20008:	4091      	lsls	r1, r2
   2000a:	000a      	movs	r2, r1
   2000c:	210b      	movs	r1, #11
   2000e:	1a08      	subs	r0, r1, r0
   20010:	40c4      	lsrs	r4, r0
   20012:	055b      	lsls	r3, r3, #21
   20014:	0324      	lsls	r4, r4, #12
   20016:	0b24      	lsrs	r4, r4, #12
   20018:	0d5b      	lsrs	r3, r3, #21
   2001a:	e7e6      	b.n	1ffea <__aeabi_ui2d+0x26>
   2001c:	2300      	movs	r3, #0
   2001e:	2400      	movs	r4, #0
   20020:	2200      	movs	r2, #0
   20022:	e7e2      	b.n	1ffea <__aeabi_ui2d+0x26>
   20024:	0000041e 	.word	0x0000041e
   20028:	00000433 	.word	0x00000433
   2002c:	00000413 	.word	0x00000413
   20030:	800fffff 	.word	0x800fffff

00020034 <__clzsi2>:
   20034:	211c      	movs	r1, #28
   20036:	2301      	movs	r3, #1
   20038:	041b      	lsls	r3, r3, #16
   2003a:	4298      	cmp	r0, r3
   2003c:	d301      	bcc.n	20042 <__clzsi2+0xe>
   2003e:	0c00      	lsrs	r0, r0, #16
   20040:	3910      	subs	r1, #16
   20042:	0a1b      	lsrs	r3, r3, #8
   20044:	4298      	cmp	r0, r3
   20046:	d301      	bcc.n	2004c <__clzsi2+0x18>
   20048:	0a00      	lsrs	r0, r0, #8
   2004a:	3908      	subs	r1, #8
   2004c:	091b      	lsrs	r3, r3, #4
   2004e:	4298      	cmp	r0, r3
   20050:	d301      	bcc.n	20056 <__clzsi2+0x22>
   20052:	0900      	lsrs	r0, r0, #4
   20054:	3904      	subs	r1, #4
   20056:	a202      	add	r2, pc, #8	; (adr r2, 20060 <__clzsi2+0x2c>)
   20058:	5c10      	ldrb	r0, [r2, r0]
   2005a:	1840      	adds	r0, r0, r1
   2005c:	4770      	bx	lr
   2005e:	46c0      	nop			; (mov r8, r8)
   20060:	02020304 	.word	0x02020304
   20064:	01010101 	.word	0x01010101
	...

00020070 <atoi>:
   20070:	b510      	push	{r4, lr}
   20072:	220a      	movs	r2, #10
   20074:	2100      	movs	r1, #0
   20076:	f000 fb0d 	bl	20694 <strtol>
   2007a:	bd10      	pop	{r4, pc}

0002007c <__libc_init_array>:
   2007c:	b570      	push	{r4, r5, r6, lr}
   2007e:	2600      	movs	r6, #0
   20080:	4d0c      	ldr	r5, [pc, #48]	; (200b4 <__libc_init_array+0x38>)
   20082:	4c0d      	ldr	r4, [pc, #52]	; (200b8 <__libc_init_array+0x3c>)
   20084:	1b64      	subs	r4, r4, r5
   20086:	10a4      	asrs	r4, r4, #2
   20088:	42a6      	cmp	r6, r4
   2008a:	d109      	bne.n	200a0 <__libc_init_array+0x24>
   2008c:	2600      	movs	r6, #0
   2008e:	f005 fa61 	bl	25554 <_init>
   20092:	4d0a      	ldr	r5, [pc, #40]	; (200bc <__libc_init_array+0x40>)
   20094:	4c0a      	ldr	r4, [pc, #40]	; (200c0 <__libc_init_array+0x44>)
   20096:	1b64      	subs	r4, r4, r5
   20098:	10a4      	asrs	r4, r4, #2
   2009a:	42a6      	cmp	r6, r4
   2009c:	d105      	bne.n	200aa <__libc_init_array+0x2e>
   2009e:	bd70      	pop	{r4, r5, r6, pc}
   200a0:	00b3      	lsls	r3, r6, #2
   200a2:	58eb      	ldr	r3, [r5, r3]
   200a4:	4798      	blx	r3
   200a6:	3601      	adds	r6, #1
   200a8:	e7ee      	b.n	20088 <__libc_init_array+0xc>
   200aa:	00b3      	lsls	r3, r6, #2
   200ac:	58eb      	ldr	r3, [r5, r3]
   200ae:	4798      	blx	r3
   200b0:	3601      	adds	r6, #1
   200b2:	e7f2      	b.n	2009a <__libc_init_array+0x1e>
   200b4:	00025560 	.word	0x00025560
   200b8:	00025560 	.word	0x00025560
   200bc:	00025560 	.word	0x00025560
   200c0:	00025564 	.word	0x00025564

000200c4 <malloc>:
   200c4:	b510      	push	{r4, lr}
   200c6:	4b03      	ldr	r3, [pc, #12]	; (200d4 <malloc+0x10>)
   200c8:	0001      	movs	r1, r0
   200ca:	6818      	ldr	r0, [r3, #0]
   200cc:	f000 f87c 	bl	201c8 <_malloc_r>
   200d0:	bd10      	pop	{r4, pc}
   200d2:	46c0      	nop			; (mov r8, r8)
   200d4:	20000114 	.word	0x20000114

000200d8 <free>:
   200d8:	b510      	push	{r4, lr}
   200da:	4b03      	ldr	r3, [pc, #12]	; (200e8 <free+0x10>)
   200dc:	0001      	movs	r1, r0
   200de:	6818      	ldr	r0, [r3, #0]
   200e0:	f000 f828 	bl	20134 <_free_r>
   200e4:	bd10      	pop	{r4, pc}
   200e6:	46c0      	nop			; (mov r8, r8)
   200e8:	20000114 	.word	0x20000114

000200ec <memcpy>:
   200ec:	2300      	movs	r3, #0
   200ee:	b510      	push	{r4, lr}
   200f0:	429a      	cmp	r2, r3
   200f2:	d100      	bne.n	200f6 <memcpy+0xa>
   200f4:	bd10      	pop	{r4, pc}
   200f6:	5ccc      	ldrb	r4, [r1, r3]
   200f8:	54c4      	strb	r4, [r0, r3]
   200fa:	3301      	adds	r3, #1
   200fc:	e7f8      	b.n	200f0 <memcpy+0x4>

000200fe <memmove>:
   200fe:	b510      	push	{r4, lr}
   20100:	4288      	cmp	r0, r1
   20102:	d902      	bls.n	2010a <memmove+0xc>
   20104:	188b      	adds	r3, r1, r2
   20106:	4298      	cmp	r0, r3
   20108:	d308      	bcc.n	2011c <memmove+0x1e>
   2010a:	2300      	movs	r3, #0
   2010c:	429a      	cmp	r2, r3
   2010e:	d007      	beq.n	20120 <memmove+0x22>
   20110:	5ccc      	ldrb	r4, [r1, r3]
   20112:	54c4      	strb	r4, [r0, r3]
   20114:	3301      	adds	r3, #1
   20116:	e7f9      	b.n	2010c <memmove+0xe>
   20118:	5c8b      	ldrb	r3, [r1, r2]
   2011a:	5483      	strb	r3, [r0, r2]
   2011c:	3a01      	subs	r2, #1
   2011e:	d2fb      	bcs.n	20118 <memmove+0x1a>
   20120:	bd10      	pop	{r4, pc}

00020122 <memset>:
   20122:	0003      	movs	r3, r0
   20124:	1882      	adds	r2, r0, r2
   20126:	4293      	cmp	r3, r2
   20128:	d100      	bne.n	2012c <memset+0xa>
   2012a:	4770      	bx	lr
   2012c:	7019      	strb	r1, [r3, #0]
   2012e:	3301      	adds	r3, #1
   20130:	e7f9      	b.n	20126 <memset+0x4>
	...

00020134 <_free_r>:
   20134:	b570      	push	{r4, r5, r6, lr}
   20136:	0005      	movs	r5, r0
   20138:	2900      	cmp	r1, #0
   2013a:	d010      	beq.n	2015e <_free_r+0x2a>
   2013c:	1f0c      	subs	r4, r1, #4
   2013e:	6823      	ldr	r3, [r4, #0]
   20140:	2b00      	cmp	r3, #0
   20142:	da00      	bge.n	20146 <_free_r+0x12>
   20144:	18e4      	adds	r4, r4, r3
   20146:	0028      	movs	r0, r5
   20148:	f000 fdd8 	bl	20cfc <__malloc_lock>
   2014c:	4a1d      	ldr	r2, [pc, #116]	; (201c4 <_free_r+0x90>)
   2014e:	6813      	ldr	r3, [r2, #0]
   20150:	2b00      	cmp	r3, #0
   20152:	d105      	bne.n	20160 <_free_r+0x2c>
   20154:	6063      	str	r3, [r4, #4]
   20156:	6014      	str	r4, [r2, #0]
   20158:	0028      	movs	r0, r5
   2015a:	f000 fdd0 	bl	20cfe <__malloc_unlock>
   2015e:	bd70      	pop	{r4, r5, r6, pc}
   20160:	42a3      	cmp	r3, r4
   20162:	d909      	bls.n	20178 <_free_r+0x44>
   20164:	6821      	ldr	r1, [r4, #0]
   20166:	1860      	adds	r0, r4, r1
   20168:	4283      	cmp	r3, r0
   2016a:	d1f3      	bne.n	20154 <_free_r+0x20>
   2016c:	6818      	ldr	r0, [r3, #0]
   2016e:	685b      	ldr	r3, [r3, #4]
   20170:	1841      	adds	r1, r0, r1
   20172:	6021      	str	r1, [r4, #0]
   20174:	e7ee      	b.n	20154 <_free_r+0x20>
   20176:	0013      	movs	r3, r2
   20178:	685a      	ldr	r2, [r3, #4]
   2017a:	2a00      	cmp	r2, #0
   2017c:	d001      	beq.n	20182 <_free_r+0x4e>
   2017e:	42a2      	cmp	r2, r4
   20180:	d9f9      	bls.n	20176 <_free_r+0x42>
   20182:	6819      	ldr	r1, [r3, #0]
   20184:	1858      	adds	r0, r3, r1
   20186:	42a0      	cmp	r0, r4
   20188:	d10b      	bne.n	201a2 <_free_r+0x6e>
   2018a:	6820      	ldr	r0, [r4, #0]
   2018c:	1809      	adds	r1, r1, r0
   2018e:	1858      	adds	r0, r3, r1
   20190:	6019      	str	r1, [r3, #0]
   20192:	4282      	cmp	r2, r0
   20194:	d1e0      	bne.n	20158 <_free_r+0x24>
   20196:	6810      	ldr	r0, [r2, #0]
   20198:	6852      	ldr	r2, [r2, #4]
   2019a:	1841      	adds	r1, r0, r1
   2019c:	6019      	str	r1, [r3, #0]
   2019e:	605a      	str	r2, [r3, #4]
   201a0:	e7da      	b.n	20158 <_free_r+0x24>
   201a2:	42a0      	cmp	r0, r4
   201a4:	d902      	bls.n	201ac <_free_r+0x78>
   201a6:	230c      	movs	r3, #12
   201a8:	602b      	str	r3, [r5, #0]
   201aa:	e7d5      	b.n	20158 <_free_r+0x24>
   201ac:	6821      	ldr	r1, [r4, #0]
   201ae:	1860      	adds	r0, r4, r1
   201b0:	4282      	cmp	r2, r0
   201b2:	d103      	bne.n	201bc <_free_r+0x88>
   201b4:	6810      	ldr	r0, [r2, #0]
   201b6:	6852      	ldr	r2, [r2, #4]
   201b8:	1841      	adds	r1, r0, r1
   201ba:	6021      	str	r1, [r4, #0]
   201bc:	6062      	str	r2, [r4, #4]
   201be:	605c      	str	r4, [r3, #4]
   201c0:	e7ca      	b.n	20158 <_free_r+0x24>
   201c2:	46c0      	nop			; (mov r8, r8)
   201c4:	20004188 	.word	0x20004188

000201c8 <_malloc_r>:
   201c8:	2303      	movs	r3, #3
   201ca:	b570      	push	{r4, r5, r6, lr}
   201cc:	1ccd      	adds	r5, r1, #3
   201ce:	439d      	bics	r5, r3
   201d0:	3508      	adds	r5, #8
   201d2:	0006      	movs	r6, r0
   201d4:	2d0c      	cmp	r5, #12
   201d6:	d21e      	bcs.n	20216 <_malloc_r+0x4e>
   201d8:	250c      	movs	r5, #12
   201da:	42a9      	cmp	r1, r5
   201dc:	d81d      	bhi.n	2021a <_malloc_r+0x52>
   201de:	0030      	movs	r0, r6
   201e0:	f000 fd8c 	bl	20cfc <__malloc_lock>
   201e4:	4a25      	ldr	r2, [pc, #148]	; (2027c <_malloc_r+0xb4>)
   201e6:	6814      	ldr	r4, [r2, #0]
   201e8:	0021      	movs	r1, r4
   201ea:	2900      	cmp	r1, #0
   201ec:	d119      	bne.n	20222 <_malloc_r+0x5a>
   201ee:	4c24      	ldr	r4, [pc, #144]	; (20280 <_malloc_r+0xb8>)
   201f0:	6823      	ldr	r3, [r4, #0]
   201f2:	2b00      	cmp	r3, #0
   201f4:	d103      	bne.n	201fe <_malloc_r+0x36>
   201f6:	0030      	movs	r0, r6
   201f8:	f000 f8ae 	bl	20358 <_sbrk_r>
   201fc:	6020      	str	r0, [r4, #0]
   201fe:	0029      	movs	r1, r5
   20200:	0030      	movs	r0, r6
   20202:	f000 f8a9 	bl	20358 <_sbrk_r>
   20206:	1c43      	adds	r3, r0, #1
   20208:	d12c      	bne.n	20264 <_malloc_r+0x9c>
   2020a:	230c      	movs	r3, #12
   2020c:	0030      	movs	r0, r6
   2020e:	6033      	str	r3, [r6, #0]
   20210:	f000 fd75 	bl	20cfe <__malloc_unlock>
   20214:	e003      	b.n	2021e <_malloc_r+0x56>
   20216:	2d00      	cmp	r5, #0
   20218:	dadf      	bge.n	201da <_malloc_r+0x12>
   2021a:	230c      	movs	r3, #12
   2021c:	6033      	str	r3, [r6, #0]
   2021e:	2000      	movs	r0, #0
   20220:	bd70      	pop	{r4, r5, r6, pc}
   20222:	680b      	ldr	r3, [r1, #0]
   20224:	1b5b      	subs	r3, r3, r5
   20226:	d41a      	bmi.n	2025e <_malloc_r+0x96>
   20228:	2b0b      	cmp	r3, #11
   2022a:	d903      	bls.n	20234 <_malloc_r+0x6c>
   2022c:	600b      	str	r3, [r1, #0]
   2022e:	18cc      	adds	r4, r1, r3
   20230:	6025      	str	r5, [r4, #0]
   20232:	e003      	b.n	2023c <_malloc_r+0x74>
   20234:	428c      	cmp	r4, r1
   20236:	d10e      	bne.n	20256 <_malloc_r+0x8e>
   20238:	6863      	ldr	r3, [r4, #4]
   2023a:	6013      	str	r3, [r2, #0]
   2023c:	0030      	movs	r0, r6
   2023e:	f000 fd5e 	bl	20cfe <__malloc_unlock>
   20242:	0020      	movs	r0, r4
   20244:	2207      	movs	r2, #7
   20246:	300b      	adds	r0, #11
   20248:	1d23      	adds	r3, r4, #4
   2024a:	4390      	bics	r0, r2
   2024c:	1ac3      	subs	r3, r0, r3
   2024e:	d0e7      	beq.n	20220 <_malloc_r+0x58>
   20250:	425a      	negs	r2, r3
   20252:	50e2      	str	r2, [r4, r3]
   20254:	e7e4      	b.n	20220 <_malloc_r+0x58>
   20256:	684b      	ldr	r3, [r1, #4]
   20258:	6063      	str	r3, [r4, #4]
   2025a:	000c      	movs	r4, r1
   2025c:	e7ee      	b.n	2023c <_malloc_r+0x74>
   2025e:	000c      	movs	r4, r1
   20260:	6849      	ldr	r1, [r1, #4]
   20262:	e7c2      	b.n	201ea <_malloc_r+0x22>
   20264:	2303      	movs	r3, #3
   20266:	1cc4      	adds	r4, r0, #3
   20268:	439c      	bics	r4, r3
   2026a:	42a0      	cmp	r0, r4
   2026c:	d0e0      	beq.n	20230 <_malloc_r+0x68>
   2026e:	1a21      	subs	r1, r4, r0
   20270:	0030      	movs	r0, r6
   20272:	f000 f871 	bl	20358 <_sbrk_r>
   20276:	1c43      	adds	r3, r0, #1
   20278:	d1da      	bne.n	20230 <_malloc_r+0x68>
   2027a:	e7c6      	b.n	2020a <_malloc_r+0x42>
   2027c:	20004188 	.word	0x20004188
   20280:	2000418c 	.word	0x2000418c

00020284 <_puts_r>:
   20284:	b570      	push	{r4, r5, r6, lr}
   20286:	0005      	movs	r5, r0
   20288:	000e      	movs	r6, r1
   2028a:	2800      	cmp	r0, #0
   2028c:	d004      	beq.n	20298 <_puts_r+0x14>
   2028e:	6983      	ldr	r3, [r0, #24]
   20290:	2b00      	cmp	r3, #0
   20292:	d101      	bne.n	20298 <_puts_r+0x14>
   20294:	f000 fc0e 	bl	20ab4 <__sinit>
   20298:	69ab      	ldr	r3, [r5, #24]
   2029a:	68ac      	ldr	r4, [r5, #8]
   2029c:	2b00      	cmp	r3, #0
   2029e:	d102      	bne.n	202a6 <_puts_r+0x22>
   202a0:	0028      	movs	r0, r5
   202a2:	f000 fc07 	bl	20ab4 <__sinit>
   202a6:	4b24      	ldr	r3, [pc, #144]	; (20338 <_puts_r+0xb4>)
   202a8:	429c      	cmp	r4, r3
   202aa:	d10f      	bne.n	202cc <_puts_r+0x48>
   202ac:	686c      	ldr	r4, [r5, #4]
   202ae:	89a3      	ldrh	r3, [r4, #12]
   202b0:	071b      	lsls	r3, r3, #28
   202b2:	d502      	bpl.n	202ba <_puts_r+0x36>
   202b4:	6923      	ldr	r3, [r4, #16]
   202b6:	2b00      	cmp	r3, #0
   202b8:	d120      	bne.n	202fc <_puts_r+0x78>
   202ba:	0021      	movs	r1, r4
   202bc:	0028      	movs	r0, r5
   202be:	f000 fa8b 	bl	207d8 <__swsetup_r>
   202c2:	2800      	cmp	r0, #0
   202c4:	d01a      	beq.n	202fc <_puts_r+0x78>
   202c6:	2001      	movs	r0, #1
   202c8:	4240      	negs	r0, r0
   202ca:	bd70      	pop	{r4, r5, r6, pc}
   202cc:	4b1b      	ldr	r3, [pc, #108]	; (2033c <_puts_r+0xb8>)
   202ce:	429c      	cmp	r4, r3
   202d0:	d101      	bne.n	202d6 <_puts_r+0x52>
   202d2:	68ac      	ldr	r4, [r5, #8]
   202d4:	e7eb      	b.n	202ae <_puts_r+0x2a>
   202d6:	4b1a      	ldr	r3, [pc, #104]	; (20340 <_puts_r+0xbc>)
   202d8:	429c      	cmp	r4, r3
   202da:	d1e8      	bne.n	202ae <_puts_r+0x2a>
   202dc:	68ec      	ldr	r4, [r5, #12]
   202de:	e7e6      	b.n	202ae <_puts_r+0x2a>
   202e0:	3b01      	subs	r3, #1
   202e2:	3601      	adds	r6, #1
   202e4:	60a3      	str	r3, [r4, #8]
   202e6:	2b00      	cmp	r3, #0
   202e8:	da04      	bge.n	202f4 <_puts_r+0x70>
   202ea:	69a2      	ldr	r2, [r4, #24]
   202ec:	4293      	cmp	r3, r2
   202ee:	db16      	blt.n	2031e <_puts_r+0x9a>
   202f0:	290a      	cmp	r1, #10
   202f2:	d014      	beq.n	2031e <_puts_r+0x9a>
   202f4:	6823      	ldr	r3, [r4, #0]
   202f6:	1c5a      	adds	r2, r3, #1
   202f8:	6022      	str	r2, [r4, #0]
   202fa:	7019      	strb	r1, [r3, #0]
   202fc:	7831      	ldrb	r1, [r6, #0]
   202fe:	68a3      	ldr	r3, [r4, #8]
   20300:	2900      	cmp	r1, #0
   20302:	d1ed      	bne.n	202e0 <_puts_r+0x5c>
   20304:	3b01      	subs	r3, #1
   20306:	60a3      	str	r3, [r4, #8]
   20308:	2b00      	cmp	r3, #0
   2030a:	da0f      	bge.n	2032c <_puts_r+0xa8>
   2030c:	0022      	movs	r2, r4
   2030e:	310a      	adds	r1, #10
   20310:	0028      	movs	r0, r5
   20312:	f000 fa0b 	bl	2072c <__swbuf_r>
   20316:	1c43      	adds	r3, r0, #1
   20318:	d0d5      	beq.n	202c6 <_puts_r+0x42>
   2031a:	200a      	movs	r0, #10
   2031c:	e7d5      	b.n	202ca <_puts_r+0x46>
   2031e:	0022      	movs	r2, r4
   20320:	0028      	movs	r0, r5
   20322:	f000 fa03 	bl	2072c <__swbuf_r>
   20326:	1c43      	adds	r3, r0, #1
   20328:	d1e8      	bne.n	202fc <_puts_r+0x78>
   2032a:	e7cc      	b.n	202c6 <_puts_r+0x42>
   2032c:	200a      	movs	r0, #10
   2032e:	6823      	ldr	r3, [r4, #0]
   20330:	1c5a      	adds	r2, r3, #1
   20332:	6022      	str	r2, [r4, #0]
   20334:	7018      	strb	r0, [r3, #0]
   20336:	e7c8      	b.n	202ca <_puts_r+0x46>
   20338:	000253d4 	.word	0x000253d4
   2033c:	000253f4 	.word	0x000253f4
   20340:	000253b4 	.word	0x000253b4

00020344 <puts>:
   20344:	b510      	push	{r4, lr}
   20346:	4b03      	ldr	r3, [pc, #12]	; (20354 <puts+0x10>)
   20348:	0001      	movs	r1, r0
   2034a:	6818      	ldr	r0, [r3, #0]
   2034c:	f7ff ff9a 	bl	20284 <_puts_r>
   20350:	bd10      	pop	{r4, pc}
   20352:	46c0      	nop			; (mov r8, r8)
   20354:	20000114 	.word	0x20000114

00020358 <_sbrk_r>:
   20358:	2300      	movs	r3, #0
   2035a:	b570      	push	{r4, r5, r6, lr}
   2035c:	4c06      	ldr	r4, [pc, #24]	; (20378 <_sbrk_r+0x20>)
   2035e:	0005      	movs	r5, r0
   20360:	0008      	movs	r0, r1
   20362:	6023      	str	r3, [r4, #0]
   20364:	f7f6 fcc0 	bl	16ce8 <_sbrk>
   20368:	1c43      	adds	r3, r0, #1
   2036a:	d103      	bne.n	20374 <_sbrk_r+0x1c>
   2036c:	6823      	ldr	r3, [r4, #0]
   2036e:	2b00      	cmp	r3, #0
   20370:	d000      	beq.n	20374 <_sbrk_r+0x1c>
   20372:	602b      	str	r3, [r5, #0]
   20374:	bd70      	pop	{r4, r5, r6, pc}
   20376:	46c0      	nop			; (mov r8, r8)
   20378:	20005610 	.word	0x20005610

0002037c <sniprintf>:
   2037c:	b40c      	push	{r2, r3}
   2037e:	b530      	push	{r4, r5, lr}
   20380:	4b16      	ldr	r3, [pc, #88]	; (203dc <sniprintf+0x60>)
   20382:	b09d      	sub	sp, #116	; 0x74
   20384:	1e0c      	subs	r4, r1, #0
   20386:	681d      	ldr	r5, [r3, #0]
   20388:	da08      	bge.n	2039c <sniprintf+0x20>
   2038a:	238b      	movs	r3, #139	; 0x8b
   2038c:	2001      	movs	r0, #1
   2038e:	602b      	str	r3, [r5, #0]
   20390:	4240      	negs	r0, r0
   20392:	b01d      	add	sp, #116	; 0x74
   20394:	bc30      	pop	{r4, r5}
   20396:	bc08      	pop	{r3}
   20398:	b002      	add	sp, #8
   2039a:	4718      	bx	r3
   2039c:	2382      	movs	r3, #130	; 0x82
   2039e:	a902      	add	r1, sp, #8
   203a0:	009b      	lsls	r3, r3, #2
   203a2:	818b      	strh	r3, [r1, #12]
   203a4:	2300      	movs	r3, #0
   203a6:	9002      	str	r0, [sp, #8]
   203a8:	6108      	str	r0, [r1, #16]
   203aa:	429c      	cmp	r4, r3
   203ac:	d000      	beq.n	203b0 <sniprintf+0x34>
   203ae:	1e63      	subs	r3, r4, #1
   203b0:	608b      	str	r3, [r1, #8]
   203b2:	614b      	str	r3, [r1, #20]
   203b4:	2301      	movs	r3, #1
   203b6:	425b      	negs	r3, r3
   203b8:	81cb      	strh	r3, [r1, #14]
   203ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
   203bc:	ab21      	add	r3, sp, #132	; 0x84
   203be:	0028      	movs	r0, r5
   203c0:	9301      	str	r3, [sp, #4]
   203c2:	f000 fcff 	bl	20dc4 <_svfiprintf_r>
   203c6:	1c43      	adds	r3, r0, #1
   203c8:	da01      	bge.n	203ce <sniprintf+0x52>
   203ca:	238b      	movs	r3, #139	; 0x8b
   203cc:	602b      	str	r3, [r5, #0]
   203ce:	2c00      	cmp	r4, #0
   203d0:	d0df      	beq.n	20392 <sniprintf+0x16>
   203d2:	2300      	movs	r3, #0
   203d4:	9a02      	ldr	r2, [sp, #8]
   203d6:	7013      	strb	r3, [r2, #0]
   203d8:	e7db      	b.n	20392 <sniprintf+0x16>
   203da:	46c0      	nop			; (mov r8, r8)
   203dc:	20000114 	.word	0x20000114

000203e0 <siprintf>:
   203e0:	b40e      	push	{r1, r2, r3}
   203e2:	b510      	push	{r4, lr}
   203e4:	b09d      	sub	sp, #116	; 0x74
   203e6:	a902      	add	r1, sp, #8
   203e8:	9002      	str	r0, [sp, #8]
   203ea:	6108      	str	r0, [r1, #16]
   203ec:	480b      	ldr	r0, [pc, #44]	; (2041c <siprintf+0x3c>)
   203ee:	2482      	movs	r4, #130	; 0x82
   203f0:	6088      	str	r0, [r1, #8]
   203f2:	6148      	str	r0, [r1, #20]
   203f4:	2001      	movs	r0, #1
   203f6:	4240      	negs	r0, r0
   203f8:	ab1f      	add	r3, sp, #124	; 0x7c
   203fa:	81c8      	strh	r0, [r1, #14]
   203fc:	4808      	ldr	r0, [pc, #32]	; (20420 <siprintf+0x40>)
   203fe:	cb04      	ldmia	r3!, {r2}
   20400:	00a4      	lsls	r4, r4, #2
   20402:	6800      	ldr	r0, [r0, #0]
   20404:	9301      	str	r3, [sp, #4]
   20406:	818c      	strh	r4, [r1, #12]
   20408:	f000 fcdc 	bl	20dc4 <_svfiprintf_r>
   2040c:	2300      	movs	r3, #0
   2040e:	9a02      	ldr	r2, [sp, #8]
   20410:	7013      	strb	r3, [r2, #0]
   20412:	b01d      	add	sp, #116	; 0x74
   20414:	bc10      	pop	{r4}
   20416:	bc08      	pop	{r3}
   20418:	b003      	add	sp, #12
   2041a:	4718      	bx	r3
   2041c:	7fffffff 	.word	0x7fffffff
   20420:	20000114 	.word	0x20000114

00020424 <strcasecmp>:
   20424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20426:	0007      	movs	r7, r0
   20428:	000e      	movs	r6, r1
   2042a:	783c      	ldrb	r4, [r7, #0]
   2042c:	f000 fbda 	bl	20be4 <__locale_ctype_ptr>
   20430:	2203      	movs	r2, #3
   20432:	1900      	adds	r0, r0, r4
   20434:	7843      	ldrb	r3, [r0, #1]
   20436:	4013      	ands	r3, r2
   20438:	2b01      	cmp	r3, #1
   2043a:	d100      	bne.n	2043e <strcasecmp+0x1a>
   2043c:	3420      	adds	r4, #32
   2043e:	7835      	ldrb	r5, [r6, #0]
   20440:	f000 fbd0 	bl	20be4 <__locale_ctype_ptr>
   20444:	2203      	movs	r2, #3
   20446:	1940      	adds	r0, r0, r5
   20448:	7843      	ldrb	r3, [r0, #1]
   2044a:	4013      	ands	r3, r2
   2044c:	2b01      	cmp	r3, #1
   2044e:	d100      	bne.n	20452 <strcasecmp+0x2e>
   20450:	3520      	adds	r5, #32
   20452:	1b60      	subs	r0, r4, r5
   20454:	d103      	bne.n	2045e <strcasecmp+0x3a>
   20456:	3701      	adds	r7, #1
   20458:	3601      	adds	r6, #1
   2045a:	2d00      	cmp	r5, #0
   2045c:	d1e5      	bne.n	2042a <strcasecmp+0x6>
   2045e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020460 <strcat>:
   20460:	0002      	movs	r2, r0
   20462:	b510      	push	{r4, lr}
   20464:	7813      	ldrb	r3, [r2, #0]
   20466:	2b00      	cmp	r3, #0
   20468:	d105      	bne.n	20476 <strcat+0x16>
   2046a:	5ccc      	ldrb	r4, [r1, r3]
   2046c:	54d4      	strb	r4, [r2, r3]
   2046e:	3301      	adds	r3, #1
   20470:	2c00      	cmp	r4, #0
   20472:	d1fa      	bne.n	2046a <strcat+0xa>
   20474:	bd10      	pop	{r4, pc}
   20476:	3201      	adds	r2, #1
   20478:	e7f4      	b.n	20464 <strcat+0x4>

0002047a <strcmp>:
   2047a:	7802      	ldrb	r2, [r0, #0]
   2047c:	780b      	ldrb	r3, [r1, #0]
   2047e:	2a00      	cmp	r2, #0
   20480:	d003      	beq.n	2048a <strcmp+0x10>
   20482:	3001      	adds	r0, #1
   20484:	3101      	adds	r1, #1
   20486:	429a      	cmp	r2, r3
   20488:	d0f7      	beq.n	2047a <strcmp>
   2048a:	1ad0      	subs	r0, r2, r3
   2048c:	4770      	bx	lr

0002048e <strcpy>:
   2048e:	1c03      	adds	r3, r0, #0
   20490:	780a      	ldrb	r2, [r1, #0]
   20492:	3101      	adds	r1, #1
   20494:	701a      	strb	r2, [r3, #0]
   20496:	3301      	adds	r3, #1
   20498:	2a00      	cmp	r2, #0
   2049a:	d1f9      	bne.n	20490 <strcpy+0x2>
   2049c:	4770      	bx	lr
	...

000204a0 <strdup>:
   204a0:	b510      	push	{r4, lr}
   204a2:	4b03      	ldr	r3, [pc, #12]	; (204b0 <strdup+0x10>)
   204a4:	0001      	movs	r1, r0
   204a6:	6818      	ldr	r0, [r3, #0]
   204a8:	f000 f804 	bl	204b4 <_strdup_r>
   204ac:	bd10      	pop	{r4, pc}
   204ae:	46c0      	nop			; (mov r8, r8)
   204b0:	20000114 	.word	0x20000114

000204b4 <_strdup_r>:
   204b4:	b570      	push	{r4, r5, r6, lr}
   204b6:	0005      	movs	r5, r0
   204b8:	0008      	movs	r0, r1
   204ba:	000e      	movs	r6, r1
   204bc:	f000 f80d 	bl	204da <strlen>
   204c0:	1c44      	adds	r4, r0, #1
   204c2:	0021      	movs	r1, r4
   204c4:	0028      	movs	r0, r5
   204c6:	f7ff fe7f 	bl	201c8 <_malloc_r>
   204ca:	1e05      	subs	r5, r0, #0
   204cc:	d003      	beq.n	204d6 <_strdup_r+0x22>
   204ce:	0022      	movs	r2, r4
   204d0:	0031      	movs	r1, r6
   204d2:	f7ff fe0b 	bl	200ec <memcpy>
   204d6:	0028      	movs	r0, r5
   204d8:	bd70      	pop	{r4, r5, r6, pc}

000204da <strlen>:
   204da:	2300      	movs	r3, #0
   204dc:	5cc2      	ldrb	r2, [r0, r3]
   204de:	3301      	adds	r3, #1
   204e0:	2a00      	cmp	r2, #0
   204e2:	d1fb      	bne.n	204dc <strlen+0x2>
   204e4:	1e58      	subs	r0, r3, #1
   204e6:	4770      	bx	lr

000204e8 <strncmp>:
   204e8:	2300      	movs	r3, #0
   204ea:	b530      	push	{r4, r5, lr}
   204ec:	429a      	cmp	r2, r3
   204ee:	d00a      	beq.n	20506 <strncmp+0x1e>
   204f0:	3a01      	subs	r2, #1
   204f2:	5cc4      	ldrb	r4, [r0, r3]
   204f4:	5ccd      	ldrb	r5, [r1, r3]
   204f6:	42ac      	cmp	r4, r5
   204f8:	d104      	bne.n	20504 <strncmp+0x1c>
   204fa:	429a      	cmp	r2, r3
   204fc:	d002      	beq.n	20504 <strncmp+0x1c>
   204fe:	3301      	adds	r3, #1
   20500:	2c00      	cmp	r4, #0
   20502:	d1f6      	bne.n	204f2 <strncmp+0xa>
   20504:	1b63      	subs	r3, r4, r5
   20506:	0018      	movs	r0, r3
   20508:	bd30      	pop	{r4, r5, pc}

0002050a <strncpy>:
   2050a:	b570      	push	{r4, r5, r6, lr}
   2050c:	0004      	movs	r4, r0
   2050e:	2a00      	cmp	r2, #0
   20510:	d100      	bne.n	20514 <strncpy+0xa>
   20512:	bd70      	pop	{r4, r5, r6, pc}
   20514:	780d      	ldrb	r5, [r1, #0]
   20516:	1e56      	subs	r6, r2, #1
   20518:	1c63      	adds	r3, r4, #1
   2051a:	7025      	strb	r5, [r4, #0]
   2051c:	3101      	adds	r1, #1
   2051e:	2d00      	cmp	r5, #0
   20520:	d105      	bne.n	2052e <strncpy+0x24>
   20522:	18a4      	adds	r4, r4, r2
   20524:	429c      	cmp	r4, r3
   20526:	d0f4      	beq.n	20512 <strncpy+0x8>
   20528:	701d      	strb	r5, [r3, #0]
   2052a:	3301      	adds	r3, #1
   2052c:	e7fa      	b.n	20524 <strncpy+0x1a>
   2052e:	001c      	movs	r4, r3
   20530:	0032      	movs	r2, r6
   20532:	e7ec      	b.n	2050e <strncpy+0x4>

00020534 <strrchr>:
   20534:	b570      	push	{r4, r5, r6, lr}
   20536:	000d      	movs	r5, r1
   20538:	2400      	movs	r4, #0
   2053a:	2900      	cmp	r1, #0
   2053c:	d105      	bne.n	2054a <strrchr+0x16>
   2053e:	f000 ff19 	bl	21374 <strchr>
   20542:	0004      	movs	r4, r0
   20544:	e006      	b.n	20554 <strrchr+0x20>
   20546:	001c      	movs	r4, r3
   20548:	1c58      	adds	r0, r3, #1
   2054a:	0029      	movs	r1, r5
   2054c:	f000 ff12 	bl	21374 <strchr>
   20550:	1e03      	subs	r3, r0, #0
   20552:	d1f8      	bne.n	20546 <strrchr+0x12>
   20554:	0020      	movs	r0, r4
   20556:	bd70      	pop	{r4, r5, r6, pc}

00020558 <strstr>:
   20558:	b510      	push	{r4, lr}
   2055a:	0002      	movs	r2, r0
   2055c:	7800      	ldrb	r0, [r0, #0]
   2055e:	2800      	cmp	r0, #0
   20560:	d104      	bne.n	2056c <strstr+0x14>
   20562:	7809      	ldrb	r1, [r1, #0]
   20564:	2900      	cmp	r1, #0
   20566:	d00d      	beq.n	20584 <strstr+0x2c>
   20568:	bd10      	pop	{r4, pc}
   2056a:	3201      	adds	r2, #1
   2056c:	7810      	ldrb	r0, [r2, #0]
   2056e:	2800      	cmp	r0, #0
   20570:	d0fa      	beq.n	20568 <strstr+0x10>
   20572:	2300      	movs	r3, #0
   20574:	5cc8      	ldrb	r0, [r1, r3]
   20576:	2800      	cmp	r0, #0
   20578:	d004      	beq.n	20584 <strstr+0x2c>
   2057a:	5cd4      	ldrb	r4, [r2, r3]
   2057c:	4284      	cmp	r4, r0
   2057e:	d1f4      	bne.n	2056a <strstr+0x12>
   20580:	3301      	adds	r3, #1
   20582:	e7f7      	b.n	20574 <strstr+0x1c>
   20584:	0010      	movs	r0, r2
   20586:	e7ef      	b.n	20568 <strstr+0x10>

00020588 <_strtol_l.isra.0>:
   20588:	b5f0      	push	{r4, r5, r6, r7, lr}
   2058a:	001f      	movs	r7, r3
   2058c:	000e      	movs	r6, r1
   2058e:	b087      	sub	sp, #28
   20590:	9005      	str	r0, [sp, #20]
   20592:	9103      	str	r1, [sp, #12]
   20594:	9202      	str	r2, [sp, #8]
   20596:	980c      	ldr	r0, [sp, #48]	; 0x30
   20598:	7834      	ldrb	r4, [r6, #0]
   2059a:	f000 fb20 	bl	20bde <__locale_ctype_ptr_l>
   2059e:	2208      	movs	r2, #8
   205a0:	1900      	adds	r0, r0, r4
   205a2:	7843      	ldrb	r3, [r0, #1]
   205a4:	1c75      	adds	r5, r6, #1
   205a6:	4013      	ands	r3, r2
   205a8:	d10c      	bne.n	205c4 <_strtol_l.isra.0+0x3c>
   205aa:	2c2d      	cmp	r4, #45	; 0x2d
   205ac:	d10c      	bne.n	205c8 <_strtol_l.isra.0+0x40>
   205ae:	3301      	adds	r3, #1
   205b0:	782c      	ldrb	r4, [r5, #0]
   205b2:	9301      	str	r3, [sp, #4]
   205b4:	1cb5      	adds	r5, r6, #2
   205b6:	2f00      	cmp	r7, #0
   205b8:	d00c      	beq.n	205d4 <_strtol_l.isra.0+0x4c>
   205ba:	2f10      	cmp	r7, #16
   205bc:	d114      	bne.n	205e8 <_strtol_l.isra.0+0x60>
   205be:	2c30      	cmp	r4, #48	; 0x30
   205c0:	d00a      	beq.n	205d8 <_strtol_l.isra.0+0x50>
   205c2:	e011      	b.n	205e8 <_strtol_l.isra.0+0x60>
   205c4:	002e      	movs	r6, r5
   205c6:	e7e6      	b.n	20596 <_strtol_l.isra.0+0xe>
   205c8:	9301      	str	r3, [sp, #4]
   205ca:	2c2b      	cmp	r4, #43	; 0x2b
   205cc:	d1f3      	bne.n	205b6 <_strtol_l.isra.0+0x2e>
   205ce:	782c      	ldrb	r4, [r5, #0]
   205d0:	1cb5      	adds	r5, r6, #2
   205d2:	e7f0      	b.n	205b6 <_strtol_l.isra.0+0x2e>
   205d4:	2c30      	cmp	r4, #48	; 0x30
   205d6:	d12f      	bne.n	20638 <_strtol_l.isra.0+0xb0>
   205d8:	2220      	movs	r2, #32
   205da:	782b      	ldrb	r3, [r5, #0]
   205dc:	4393      	bics	r3, r2
   205de:	2b58      	cmp	r3, #88	; 0x58
   205e0:	d151      	bne.n	20686 <_strtol_l.isra.0+0xfe>
   205e2:	2710      	movs	r7, #16
   205e4:	786c      	ldrb	r4, [r5, #1]
   205e6:	3502      	adds	r5, #2
   205e8:	9b01      	ldr	r3, [sp, #4]
   205ea:	4a29      	ldr	r2, [pc, #164]	; (20690 <_strtol_l.isra.0+0x108>)
   205ec:	0039      	movs	r1, r7
   205ee:	189e      	adds	r6, r3, r2
   205f0:	0030      	movs	r0, r6
   205f2:	f7fd ffbf 	bl	1e574 <__aeabi_uidivmod>
   205f6:	0030      	movs	r0, r6
   205f8:	9104      	str	r1, [sp, #16]
   205fa:	0039      	movs	r1, r7
   205fc:	f7fd ff34 	bl	1e468 <__udivsi3>
   20600:	2101      	movs	r1, #1
   20602:	2300      	movs	r3, #0
   20604:	4249      	negs	r1, r1
   20606:	0002      	movs	r2, r0
   20608:	468c      	mov	ip, r1
   2060a:	0018      	movs	r0, r3
   2060c:	0021      	movs	r1, r4
   2060e:	3930      	subs	r1, #48	; 0x30
   20610:	2909      	cmp	r1, #9
   20612:	d813      	bhi.n	2063c <_strtol_l.isra.0+0xb4>
   20614:	000c      	movs	r4, r1
   20616:	42a7      	cmp	r7, r4
   20618:	dd1c      	ble.n	20654 <_strtol_l.isra.0+0xcc>
   2061a:	1c59      	adds	r1, r3, #1
   2061c:	d009      	beq.n	20632 <_strtol_l.isra.0+0xaa>
   2061e:	4663      	mov	r3, ip
   20620:	4282      	cmp	r2, r0
   20622:	d306      	bcc.n	20632 <_strtol_l.isra.0+0xaa>
   20624:	d102      	bne.n	2062c <_strtol_l.isra.0+0xa4>
   20626:	9904      	ldr	r1, [sp, #16]
   20628:	42a1      	cmp	r1, r4
   2062a:	db02      	blt.n	20632 <_strtol_l.isra.0+0xaa>
   2062c:	2301      	movs	r3, #1
   2062e:	4378      	muls	r0, r7
   20630:	1820      	adds	r0, r4, r0
   20632:	782c      	ldrb	r4, [r5, #0]
   20634:	3501      	adds	r5, #1
   20636:	e7e9      	b.n	2060c <_strtol_l.isra.0+0x84>
   20638:	270a      	movs	r7, #10
   2063a:	e7d5      	b.n	205e8 <_strtol_l.isra.0+0x60>
   2063c:	0021      	movs	r1, r4
   2063e:	3941      	subs	r1, #65	; 0x41
   20640:	2919      	cmp	r1, #25
   20642:	d801      	bhi.n	20648 <_strtol_l.isra.0+0xc0>
   20644:	3c37      	subs	r4, #55	; 0x37
   20646:	e7e6      	b.n	20616 <_strtol_l.isra.0+0x8e>
   20648:	0021      	movs	r1, r4
   2064a:	3961      	subs	r1, #97	; 0x61
   2064c:	2919      	cmp	r1, #25
   2064e:	d801      	bhi.n	20654 <_strtol_l.isra.0+0xcc>
   20650:	3c57      	subs	r4, #87	; 0x57
   20652:	e7e0      	b.n	20616 <_strtol_l.isra.0+0x8e>
   20654:	1c5a      	adds	r2, r3, #1
   20656:	d108      	bne.n	2066a <_strtol_l.isra.0+0xe2>
   20658:	9a05      	ldr	r2, [sp, #20]
   2065a:	3323      	adds	r3, #35	; 0x23
   2065c:	6013      	str	r3, [r2, #0]
   2065e:	9b02      	ldr	r3, [sp, #8]
   20660:	0030      	movs	r0, r6
   20662:	2b00      	cmp	r3, #0
   20664:	d10b      	bne.n	2067e <_strtol_l.isra.0+0xf6>
   20666:	b007      	add	sp, #28
   20668:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2066a:	9a01      	ldr	r2, [sp, #4]
   2066c:	2a00      	cmp	r2, #0
   2066e:	d000      	beq.n	20672 <_strtol_l.isra.0+0xea>
   20670:	4240      	negs	r0, r0
   20672:	9a02      	ldr	r2, [sp, #8]
   20674:	2a00      	cmp	r2, #0
   20676:	d0f6      	beq.n	20666 <_strtol_l.isra.0+0xde>
   20678:	9a03      	ldr	r2, [sp, #12]
   2067a:	2b00      	cmp	r3, #0
   2067c:	d000      	beq.n	20680 <_strtol_l.isra.0+0xf8>
   2067e:	1e6a      	subs	r2, r5, #1
   20680:	9b02      	ldr	r3, [sp, #8]
   20682:	601a      	str	r2, [r3, #0]
   20684:	e7ef      	b.n	20666 <_strtol_l.isra.0+0xde>
   20686:	2430      	movs	r4, #48	; 0x30
   20688:	2f00      	cmp	r7, #0
   2068a:	d1ad      	bne.n	205e8 <_strtol_l.isra.0+0x60>
   2068c:	3708      	adds	r7, #8
   2068e:	e7ab      	b.n	205e8 <_strtol_l.isra.0+0x60>
   20690:	7fffffff 	.word	0x7fffffff

00020694 <strtol>:
   20694:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20696:	0013      	movs	r3, r2
   20698:	4a06      	ldr	r2, [pc, #24]	; (206b4 <strtol+0x20>)
   2069a:	0005      	movs	r5, r0
   2069c:	6810      	ldr	r0, [r2, #0]
   2069e:	6a04      	ldr	r4, [r0, #32]
   206a0:	2c00      	cmp	r4, #0
   206a2:	d100      	bne.n	206a6 <strtol+0x12>
   206a4:	4c04      	ldr	r4, [pc, #16]	; (206b8 <strtol+0x24>)
   206a6:	000a      	movs	r2, r1
   206a8:	9400      	str	r4, [sp, #0]
   206aa:	0029      	movs	r1, r5
   206ac:	f7ff ff6c 	bl	20588 <_strtol_l.isra.0>
   206b0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   206b2:	46c0      	nop			; (mov r8, r8)
   206b4:	20000114 	.word	0x20000114
   206b8:	20000178 	.word	0x20000178

000206bc <_vsniprintf_r>:
   206bc:	b530      	push	{r4, r5, lr}
   206be:	0014      	movs	r4, r2
   206c0:	b09b      	sub	sp, #108	; 0x6c
   206c2:	0005      	movs	r5, r0
   206c4:	001a      	movs	r2, r3
   206c6:	2c00      	cmp	r4, #0
   206c8:	da05      	bge.n	206d6 <_vsniprintf_r+0x1a>
   206ca:	238b      	movs	r3, #139	; 0x8b
   206cc:	6003      	str	r3, [r0, #0]
   206ce:	2001      	movs	r0, #1
   206d0:	4240      	negs	r0, r0
   206d2:	b01b      	add	sp, #108	; 0x6c
   206d4:	bd30      	pop	{r4, r5, pc}
   206d6:	2382      	movs	r3, #130	; 0x82
   206d8:	4668      	mov	r0, sp
   206da:	009b      	lsls	r3, r3, #2
   206dc:	8183      	strh	r3, [r0, #12]
   206de:	2300      	movs	r3, #0
   206e0:	9100      	str	r1, [sp, #0]
   206e2:	9104      	str	r1, [sp, #16]
   206e4:	429c      	cmp	r4, r3
   206e6:	d000      	beq.n	206ea <_vsniprintf_r+0x2e>
   206e8:	1e63      	subs	r3, r4, #1
   206ea:	9302      	str	r3, [sp, #8]
   206ec:	9305      	str	r3, [sp, #20]
   206ee:	2301      	movs	r3, #1
   206f0:	4669      	mov	r1, sp
   206f2:	425b      	negs	r3, r3
   206f4:	81cb      	strh	r3, [r1, #14]
   206f6:	0028      	movs	r0, r5
   206f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   206fa:	f000 fb63 	bl	20dc4 <_svfiprintf_r>
   206fe:	1c43      	adds	r3, r0, #1
   20700:	da01      	bge.n	20706 <_vsniprintf_r+0x4a>
   20702:	238b      	movs	r3, #139	; 0x8b
   20704:	602b      	str	r3, [r5, #0]
   20706:	2c00      	cmp	r4, #0
   20708:	d0e3      	beq.n	206d2 <_vsniprintf_r+0x16>
   2070a:	2300      	movs	r3, #0
   2070c:	9a00      	ldr	r2, [sp, #0]
   2070e:	7013      	strb	r3, [r2, #0]
   20710:	e7df      	b.n	206d2 <_vsniprintf_r+0x16>
	...

00020714 <vsniprintf>:
   20714:	b507      	push	{r0, r1, r2, lr}
   20716:	9300      	str	r3, [sp, #0]
   20718:	0013      	movs	r3, r2
   2071a:	000a      	movs	r2, r1
   2071c:	0001      	movs	r1, r0
   2071e:	4802      	ldr	r0, [pc, #8]	; (20728 <vsniprintf+0x14>)
   20720:	6800      	ldr	r0, [r0, #0]
   20722:	f7ff ffcb 	bl	206bc <_vsniprintf_r>
   20726:	bd0e      	pop	{r1, r2, r3, pc}
   20728:	20000114 	.word	0x20000114

0002072c <__swbuf_r>:
   2072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2072e:	0005      	movs	r5, r0
   20730:	000e      	movs	r6, r1
   20732:	0014      	movs	r4, r2
   20734:	2800      	cmp	r0, #0
   20736:	d004      	beq.n	20742 <__swbuf_r+0x16>
   20738:	6983      	ldr	r3, [r0, #24]
   2073a:	2b00      	cmp	r3, #0
   2073c:	d101      	bne.n	20742 <__swbuf_r+0x16>
   2073e:	f000 f9b9 	bl	20ab4 <__sinit>
   20742:	4b22      	ldr	r3, [pc, #136]	; (207cc <__swbuf_r+0xa0>)
   20744:	429c      	cmp	r4, r3
   20746:	d12d      	bne.n	207a4 <__swbuf_r+0x78>
   20748:	686c      	ldr	r4, [r5, #4]
   2074a:	69a3      	ldr	r3, [r4, #24]
   2074c:	60a3      	str	r3, [r4, #8]
   2074e:	89a3      	ldrh	r3, [r4, #12]
   20750:	071b      	lsls	r3, r3, #28
   20752:	d531      	bpl.n	207b8 <__swbuf_r+0x8c>
   20754:	6923      	ldr	r3, [r4, #16]
   20756:	2b00      	cmp	r3, #0
   20758:	d02e      	beq.n	207b8 <__swbuf_r+0x8c>
   2075a:	6823      	ldr	r3, [r4, #0]
   2075c:	6922      	ldr	r2, [r4, #16]
   2075e:	b2f7      	uxtb	r7, r6
   20760:	1a98      	subs	r0, r3, r2
   20762:	6963      	ldr	r3, [r4, #20]
   20764:	b2f6      	uxtb	r6, r6
   20766:	4298      	cmp	r0, r3
   20768:	db05      	blt.n	20776 <__swbuf_r+0x4a>
   2076a:	0021      	movs	r1, r4
   2076c:	0028      	movs	r0, r5
   2076e:	f000 f933 	bl	209d8 <_fflush_r>
   20772:	2800      	cmp	r0, #0
   20774:	d126      	bne.n	207c4 <__swbuf_r+0x98>
   20776:	68a3      	ldr	r3, [r4, #8]
   20778:	3001      	adds	r0, #1
   2077a:	3b01      	subs	r3, #1
   2077c:	60a3      	str	r3, [r4, #8]
   2077e:	6823      	ldr	r3, [r4, #0]
   20780:	1c5a      	adds	r2, r3, #1
   20782:	6022      	str	r2, [r4, #0]
   20784:	701f      	strb	r7, [r3, #0]
   20786:	6963      	ldr	r3, [r4, #20]
   20788:	4298      	cmp	r0, r3
   2078a:	d004      	beq.n	20796 <__swbuf_r+0x6a>
   2078c:	89a3      	ldrh	r3, [r4, #12]
   2078e:	07db      	lsls	r3, r3, #31
   20790:	d51a      	bpl.n	207c8 <__swbuf_r+0x9c>
   20792:	2e0a      	cmp	r6, #10
   20794:	d118      	bne.n	207c8 <__swbuf_r+0x9c>
   20796:	0021      	movs	r1, r4
   20798:	0028      	movs	r0, r5
   2079a:	f000 f91d 	bl	209d8 <_fflush_r>
   2079e:	2800      	cmp	r0, #0
   207a0:	d012      	beq.n	207c8 <__swbuf_r+0x9c>
   207a2:	e00f      	b.n	207c4 <__swbuf_r+0x98>
   207a4:	4b0a      	ldr	r3, [pc, #40]	; (207d0 <__swbuf_r+0xa4>)
   207a6:	429c      	cmp	r4, r3
   207a8:	d101      	bne.n	207ae <__swbuf_r+0x82>
   207aa:	68ac      	ldr	r4, [r5, #8]
   207ac:	e7cd      	b.n	2074a <__swbuf_r+0x1e>
   207ae:	4b09      	ldr	r3, [pc, #36]	; (207d4 <__swbuf_r+0xa8>)
   207b0:	429c      	cmp	r4, r3
   207b2:	d1ca      	bne.n	2074a <__swbuf_r+0x1e>
   207b4:	68ec      	ldr	r4, [r5, #12]
   207b6:	e7c8      	b.n	2074a <__swbuf_r+0x1e>
   207b8:	0021      	movs	r1, r4
   207ba:	0028      	movs	r0, r5
   207bc:	f000 f80c 	bl	207d8 <__swsetup_r>
   207c0:	2800      	cmp	r0, #0
   207c2:	d0ca      	beq.n	2075a <__swbuf_r+0x2e>
   207c4:	2601      	movs	r6, #1
   207c6:	4276      	negs	r6, r6
   207c8:	0030      	movs	r0, r6
   207ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   207cc:	000253d4 	.word	0x000253d4
   207d0:	000253f4 	.word	0x000253f4
   207d4:	000253b4 	.word	0x000253b4

000207d8 <__swsetup_r>:
   207d8:	4b36      	ldr	r3, [pc, #216]	; (208b4 <__swsetup_r+0xdc>)
   207da:	b570      	push	{r4, r5, r6, lr}
   207dc:	681d      	ldr	r5, [r3, #0]
   207de:	0006      	movs	r6, r0
   207e0:	000c      	movs	r4, r1
   207e2:	2d00      	cmp	r5, #0
   207e4:	d005      	beq.n	207f2 <__swsetup_r+0x1a>
   207e6:	69ab      	ldr	r3, [r5, #24]
   207e8:	2b00      	cmp	r3, #0
   207ea:	d102      	bne.n	207f2 <__swsetup_r+0x1a>
   207ec:	0028      	movs	r0, r5
   207ee:	f000 f961 	bl	20ab4 <__sinit>
   207f2:	4b31      	ldr	r3, [pc, #196]	; (208b8 <__swsetup_r+0xe0>)
   207f4:	429c      	cmp	r4, r3
   207f6:	d10f      	bne.n	20818 <__swsetup_r+0x40>
   207f8:	686c      	ldr	r4, [r5, #4]
   207fa:	230c      	movs	r3, #12
   207fc:	5ee2      	ldrsh	r2, [r4, r3]
   207fe:	b293      	uxth	r3, r2
   20800:	0719      	lsls	r1, r3, #28
   20802:	d42d      	bmi.n	20860 <__swsetup_r+0x88>
   20804:	06d9      	lsls	r1, r3, #27
   20806:	d411      	bmi.n	2082c <__swsetup_r+0x54>
   20808:	2309      	movs	r3, #9
   2080a:	2001      	movs	r0, #1
   2080c:	6033      	str	r3, [r6, #0]
   2080e:	3337      	adds	r3, #55	; 0x37
   20810:	4313      	orrs	r3, r2
   20812:	81a3      	strh	r3, [r4, #12]
   20814:	4240      	negs	r0, r0
   20816:	bd70      	pop	{r4, r5, r6, pc}
   20818:	4b28      	ldr	r3, [pc, #160]	; (208bc <__swsetup_r+0xe4>)
   2081a:	429c      	cmp	r4, r3
   2081c:	d101      	bne.n	20822 <__swsetup_r+0x4a>
   2081e:	68ac      	ldr	r4, [r5, #8]
   20820:	e7eb      	b.n	207fa <__swsetup_r+0x22>
   20822:	4b27      	ldr	r3, [pc, #156]	; (208c0 <__swsetup_r+0xe8>)
   20824:	429c      	cmp	r4, r3
   20826:	d1e8      	bne.n	207fa <__swsetup_r+0x22>
   20828:	68ec      	ldr	r4, [r5, #12]
   2082a:	e7e6      	b.n	207fa <__swsetup_r+0x22>
   2082c:	075b      	lsls	r3, r3, #29
   2082e:	d513      	bpl.n	20858 <__swsetup_r+0x80>
   20830:	6b61      	ldr	r1, [r4, #52]	; 0x34
   20832:	2900      	cmp	r1, #0
   20834:	d008      	beq.n	20848 <__swsetup_r+0x70>
   20836:	0023      	movs	r3, r4
   20838:	3344      	adds	r3, #68	; 0x44
   2083a:	4299      	cmp	r1, r3
   2083c:	d002      	beq.n	20844 <__swsetup_r+0x6c>
   2083e:	0030      	movs	r0, r6
   20840:	f7ff fc78 	bl	20134 <_free_r>
   20844:	2300      	movs	r3, #0
   20846:	6363      	str	r3, [r4, #52]	; 0x34
   20848:	2224      	movs	r2, #36	; 0x24
   2084a:	89a3      	ldrh	r3, [r4, #12]
   2084c:	4393      	bics	r3, r2
   2084e:	81a3      	strh	r3, [r4, #12]
   20850:	2300      	movs	r3, #0
   20852:	6063      	str	r3, [r4, #4]
   20854:	6923      	ldr	r3, [r4, #16]
   20856:	6023      	str	r3, [r4, #0]
   20858:	2308      	movs	r3, #8
   2085a:	89a2      	ldrh	r2, [r4, #12]
   2085c:	4313      	orrs	r3, r2
   2085e:	81a3      	strh	r3, [r4, #12]
   20860:	6923      	ldr	r3, [r4, #16]
   20862:	2b00      	cmp	r3, #0
   20864:	d10b      	bne.n	2087e <__swsetup_r+0xa6>
   20866:	21a0      	movs	r1, #160	; 0xa0
   20868:	2280      	movs	r2, #128	; 0x80
   2086a:	89a3      	ldrh	r3, [r4, #12]
   2086c:	0089      	lsls	r1, r1, #2
   2086e:	0092      	lsls	r2, r2, #2
   20870:	400b      	ands	r3, r1
   20872:	4293      	cmp	r3, r2
   20874:	d003      	beq.n	2087e <__swsetup_r+0xa6>
   20876:	0021      	movs	r1, r4
   20878:	0030      	movs	r0, r6
   2087a:	f000 f9e9 	bl	20c50 <__smakebuf_r>
   2087e:	2301      	movs	r3, #1
   20880:	89a2      	ldrh	r2, [r4, #12]
   20882:	4013      	ands	r3, r2
   20884:	d011      	beq.n	208aa <__swsetup_r+0xd2>
   20886:	2300      	movs	r3, #0
   20888:	60a3      	str	r3, [r4, #8]
   2088a:	6963      	ldr	r3, [r4, #20]
   2088c:	425b      	negs	r3, r3
   2088e:	61a3      	str	r3, [r4, #24]
   20890:	2000      	movs	r0, #0
   20892:	6923      	ldr	r3, [r4, #16]
   20894:	4283      	cmp	r3, r0
   20896:	d1be      	bne.n	20816 <__swsetup_r+0x3e>
   20898:	230c      	movs	r3, #12
   2089a:	5ee2      	ldrsh	r2, [r4, r3]
   2089c:	0613      	lsls	r3, r2, #24
   2089e:	d5ba      	bpl.n	20816 <__swsetup_r+0x3e>
   208a0:	2340      	movs	r3, #64	; 0x40
   208a2:	4313      	orrs	r3, r2
   208a4:	81a3      	strh	r3, [r4, #12]
   208a6:	3801      	subs	r0, #1
   208a8:	e7b5      	b.n	20816 <__swsetup_r+0x3e>
   208aa:	0792      	lsls	r2, r2, #30
   208ac:	d400      	bmi.n	208b0 <__swsetup_r+0xd8>
   208ae:	6963      	ldr	r3, [r4, #20]
   208b0:	60a3      	str	r3, [r4, #8]
   208b2:	e7ed      	b.n	20890 <__swsetup_r+0xb8>
   208b4:	20000114 	.word	0x20000114
   208b8:	000253d4 	.word	0x000253d4
   208bc:	000253f4 	.word	0x000253f4
   208c0:	000253b4 	.word	0x000253b4

000208c4 <__sflush_r>:
   208c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   208c6:	898a      	ldrh	r2, [r1, #12]
   208c8:	0005      	movs	r5, r0
   208ca:	000c      	movs	r4, r1
   208cc:	0713      	lsls	r3, r2, #28
   208ce:	d460      	bmi.n	20992 <__sflush_r+0xce>
   208d0:	684b      	ldr	r3, [r1, #4]
   208d2:	2b00      	cmp	r3, #0
   208d4:	dc04      	bgt.n	208e0 <__sflush_r+0x1c>
   208d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   208d8:	2b00      	cmp	r3, #0
   208da:	dc01      	bgt.n	208e0 <__sflush_r+0x1c>
   208dc:	2000      	movs	r0, #0
   208de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   208e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   208e2:	2f00      	cmp	r7, #0
   208e4:	d0fa      	beq.n	208dc <__sflush_r+0x18>
   208e6:	2300      	movs	r3, #0
   208e8:	682e      	ldr	r6, [r5, #0]
   208ea:	602b      	str	r3, [r5, #0]
   208ec:	2380      	movs	r3, #128	; 0x80
   208ee:	015b      	lsls	r3, r3, #5
   208f0:	401a      	ands	r2, r3
   208f2:	d034      	beq.n	2095e <__sflush_r+0x9a>
   208f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   208f6:	89a3      	ldrh	r3, [r4, #12]
   208f8:	075b      	lsls	r3, r3, #29
   208fa:	d506      	bpl.n	2090a <__sflush_r+0x46>
   208fc:	6863      	ldr	r3, [r4, #4]
   208fe:	1ac0      	subs	r0, r0, r3
   20900:	6b63      	ldr	r3, [r4, #52]	; 0x34
   20902:	2b00      	cmp	r3, #0
   20904:	d001      	beq.n	2090a <__sflush_r+0x46>
   20906:	6c23      	ldr	r3, [r4, #64]	; 0x40
   20908:	1ac0      	subs	r0, r0, r3
   2090a:	0002      	movs	r2, r0
   2090c:	6a21      	ldr	r1, [r4, #32]
   2090e:	2300      	movs	r3, #0
   20910:	0028      	movs	r0, r5
   20912:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   20914:	47b8      	blx	r7
   20916:	89a1      	ldrh	r1, [r4, #12]
   20918:	1c43      	adds	r3, r0, #1
   2091a:	d106      	bne.n	2092a <__sflush_r+0x66>
   2091c:	682b      	ldr	r3, [r5, #0]
   2091e:	2b1d      	cmp	r3, #29
   20920:	d831      	bhi.n	20986 <__sflush_r+0xc2>
   20922:	4a2c      	ldr	r2, [pc, #176]	; (209d4 <__sflush_r+0x110>)
   20924:	40da      	lsrs	r2, r3
   20926:	07d3      	lsls	r3, r2, #31
   20928:	d52d      	bpl.n	20986 <__sflush_r+0xc2>
   2092a:	2300      	movs	r3, #0
   2092c:	6063      	str	r3, [r4, #4]
   2092e:	6923      	ldr	r3, [r4, #16]
   20930:	6023      	str	r3, [r4, #0]
   20932:	04cb      	lsls	r3, r1, #19
   20934:	d505      	bpl.n	20942 <__sflush_r+0x7e>
   20936:	1c43      	adds	r3, r0, #1
   20938:	d102      	bne.n	20940 <__sflush_r+0x7c>
   2093a:	682b      	ldr	r3, [r5, #0]
   2093c:	2b00      	cmp	r3, #0
   2093e:	d100      	bne.n	20942 <__sflush_r+0x7e>
   20940:	6560      	str	r0, [r4, #84]	; 0x54
   20942:	6b61      	ldr	r1, [r4, #52]	; 0x34
   20944:	602e      	str	r6, [r5, #0]
   20946:	2900      	cmp	r1, #0
   20948:	d0c8      	beq.n	208dc <__sflush_r+0x18>
   2094a:	0023      	movs	r3, r4
   2094c:	3344      	adds	r3, #68	; 0x44
   2094e:	4299      	cmp	r1, r3
   20950:	d002      	beq.n	20958 <__sflush_r+0x94>
   20952:	0028      	movs	r0, r5
   20954:	f7ff fbee 	bl	20134 <_free_r>
   20958:	2000      	movs	r0, #0
   2095a:	6360      	str	r0, [r4, #52]	; 0x34
   2095c:	e7bf      	b.n	208de <__sflush_r+0x1a>
   2095e:	2301      	movs	r3, #1
   20960:	6a21      	ldr	r1, [r4, #32]
   20962:	0028      	movs	r0, r5
   20964:	47b8      	blx	r7
   20966:	1c43      	adds	r3, r0, #1
   20968:	d1c5      	bne.n	208f6 <__sflush_r+0x32>
   2096a:	682b      	ldr	r3, [r5, #0]
   2096c:	2b00      	cmp	r3, #0
   2096e:	d0c2      	beq.n	208f6 <__sflush_r+0x32>
   20970:	2b1d      	cmp	r3, #29
   20972:	d001      	beq.n	20978 <__sflush_r+0xb4>
   20974:	2b16      	cmp	r3, #22
   20976:	d101      	bne.n	2097c <__sflush_r+0xb8>
   20978:	602e      	str	r6, [r5, #0]
   2097a:	e7af      	b.n	208dc <__sflush_r+0x18>
   2097c:	2340      	movs	r3, #64	; 0x40
   2097e:	89a2      	ldrh	r2, [r4, #12]
   20980:	4313      	orrs	r3, r2
   20982:	81a3      	strh	r3, [r4, #12]
   20984:	e7ab      	b.n	208de <__sflush_r+0x1a>
   20986:	2340      	movs	r3, #64	; 0x40
   20988:	430b      	orrs	r3, r1
   2098a:	2001      	movs	r0, #1
   2098c:	81a3      	strh	r3, [r4, #12]
   2098e:	4240      	negs	r0, r0
   20990:	e7a5      	b.n	208de <__sflush_r+0x1a>
   20992:	690f      	ldr	r7, [r1, #16]
   20994:	2f00      	cmp	r7, #0
   20996:	d0a1      	beq.n	208dc <__sflush_r+0x18>
   20998:	680b      	ldr	r3, [r1, #0]
   2099a:	600f      	str	r7, [r1, #0]
   2099c:	1bdb      	subs	r3, r3, r7
   2099e:	9301      	str	r3, [sp, #4]
   209a0:	2300      	movs	r3, #0
   209a2:	0792      	lsls	r2, r2, #30
   209a4:	d100      	bne.n	209a8 <__sflush_r+0xe4>
   209a6:	694b      	ldr	r3, [r1, #20]
   209a8:	60a3      	str	r3, [r4, #8]
   209aa:	9b01      	ldr	r3, [sp, #4]
   209ac:	2b00      	cmp	r3, #0
   209ae:	dc00      	bgt.n	209b2 <__sflush_r+0xee>
   209b0:	e794      	b.n	208dc <__sflush_r+0x18>
   209b2:	9b01      	ldr	r3, [sp, #4]
   209b4:	003a      	movs	r2, r7
   209b6:	6a21      	ldr	r1, [r4, #32]
   209b8:	0028      	movs	r0, r5
   209ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   209bc:	47b0      	blx	r6
   209be:	2800      	cmp	r0, #0
   209c0:	dc03      	bgt.n	209ca <__sflush_r+0x106>
   209c2:	2340      	movs	r3, #64	; 0x40
   209c4:	89a2      	ldrh	r2, [r4, #12]
   209c6:	4313      	orrs	r3, r2
   209c8:	e7df      	b.n	2098a <__sflush_r+0xc6>
   209ca:	9b01      	ldr	r3, [sp, #4]
   209cc:	183f      	adds	r7, r7, r0
   209ce:	1a1b      	subs	r3, r3, r0
   209d0:	9301      	str	r3, [sp, #4]
   209d2:	e7ea      	b.n	209aa <__sflush_r+0xe6>
   209d4:	20400001 	.word	0x20400001

000209d8 <_fflush_r>:
   209d8:	690b      	ldr	r3, [r1, #16]
   209da:	b570      	push	{r4, r5, r6, lr}
   209dc:	0005      	movs	r5, r0
   209de:	000c      	movs	r4, r1
   209e0:	2b00      	cmp	r3, #0
   209e2:	d101      	bne.n	209e8 <_fflush_r+0x10>
   209e4:	2000      	movs	r0, #0
   209e6:	bd70      	pop	{r4, r5, r6, pc}
   209e8:	2800      	cmp	r0, #0
   209ea:	d004      	beq.n	209f6 <_fflush_r+0x1e>
   209ec:	6983      	ldr	r3, [r0, #24]
   209ee:	2b00      	cmp	r3, #0
   209f0:	d101      	bne.n	209f6 <_fflush_r+0x1e>
   209f2:	f000 f85f 	bl	20ab4 <__sinit>
   209f6:	4b0b      	ldr	r3, [pc, #44]	; (20a24 <_fflush_r+0x4c>)
   209f8:	429c      	cmp	r4, r3
   209fa:	d109      	bne.n	20a10 <_fflush_r+0x38>
   209fc:	686c      	ldr	r4, [r5, #4]
   209fe:	220c      	movs	r2, #12
   20a00:	5ea3      	ldrsh	r3, [r4, r2]
   20a02:	2b00      	cmp	r3, #0
   20a04:	d0ee      	beq.n	209e4 <_fflush_r+0xc>
   20a06:	0021      	movs	r1, r4
   20a08:	0028      	movs	r0, r5
   20a0a:	f7ff ff5b 	bl	208c4 <__sflush_r>
   20a0e:	e7ea      	b.n	209e6 <_fflush_r+0xe>
   20a10:	4b05      	ldr	r3, [pc, #20]	; (20a28 <_fflush_r+0x50>)
   20a12:	429c      	cmp	r4, r3
   20a14:	d101      	bne.n	20a1a <_fflush_r+0x42>
   20a16:	68ac      	ldr	r4, [r5, #8]
   20a18:	e7f1      	b.n	209fe <_fflush_r+0x26>
   20a1a:	4b04      	ldr	r3, [pc, #16]	; (20a2c <_fflush_r+0x54>)
   20a1c:	429c      	cmp	r4, r3
   20a1e:	d1ee      	bne.n	209fe <_fflush_r+0x26>
   20a20:	68ec      	ldr	r4, [r5, #12]
   20a22:	e7ec      	b.n	209fe <_fflush_r+0x26>
   20a24:	000253d4 	.word	0x000253d4
   20a28:	000253f4 	.word	0x000253f4
   20a2c:	000253b4 	.word	0x000253b4

00020a30 <_cleanup_r>:
   20a30:	b510      	push	{r4, lr}
   20a32:	4902      	ldr	r1, [pc, #8]	; (20a3c <_cleanup_r+0xc>)
   20a34:	f000 f8b2 	bl	20b9c <_fwalk_reent>
   20a38:	bd10      	pop	{r4, pc}
   20a3a:	46c0      	nop			; (mov r8, r8)
   20a3c:	000209d9 	.word	0x000209d9

00020a40 <std.isra.0>:
   20a40:	2300      	movs	r3, #0
   20a42:	b510      	push	{r4, lr}
   20a44:	0004      	movs	r4, r0
   20a46:	6003      	str	r3, [r0, #0]
   20a48:	6043      	str	r3, [r0, #4]
   20a4a:	6083      	str	r3, [r0, #8]
   20a4c:	8181      	strh	r1, [r0, #12]
   20a4e:	6643      	str	r3, [r0, #100]	; 0x64
   20a50:	81c2      	strh	r2, [r0, #14]
   20a52:	6103      	str	r3, [r0, #16]
   20a54:	6143      	str	r3, [r0, #20]
   20a56:	6183      	str	r3, [r0, #24]
   20a58:	0019      	movs	r1, r3
   20a5a:	2208      	movs	r2, #8
   20a5c:	305c      	adds	r0, #92	; 0x5c
   20a5e:	f7ff fb60 	bl	20122 <memset>
   20a62:	4b05      	ldr	r3, [pc, #20]	; (20a78 <std.isra.0+0x38>)
   20a64:	6224      	str	r4, [r4, #32]
   20a66:	6263      	str	r3, [r4, #36]	; 0x24
   20a68:	4b04      	ldr	r3, [pc, #16]	; (20a7c <std.isra.0+0x3c>)
   20a6a:	62a3      	str	r3, [r4, #40]	; 0x28
   20a6c:	4b04      	ldr	r3, [pc, #16]	; (20a80 <std.isra.0+0x40>)
   20a6e:	62e3      	str	r3, [r4, #44]	; 0x2c
   20a70:	4b04      	ldr	r3, [pc, #16]	; (20a84 <std.isra.0+0x44>)
   20a72:	6323      	str	r3, [r4, #48]	; 0x30
   20a74:	bd10      	pop	{r4, pc}
   20a76:	46c0      	nop			; (mov r8, r8)
   20a78:	000212dd 	.word	0x000212dd
   20a7c:	00021305 	.word	0x00021305
   20a80:	0002133d 	.word	0x0002133d
   20a84:	00021369 	.word	0x00021369

00020a88 <__sfmoreglue>:
   20a88:	b570      	push	{r4, r5, r6, lr}
   20a8a:	2568      	movs	r5, #104	; 0x68
   20a8c:	1e4a      	subs	r2, r1, #1
   20a8e:	4355      	muls	r5, r2
   20a90:	000e      	movs	r6, r1
   20a92:	0029      	movs	r1, r5
   20a94:	3174      	adds	r1, #116	; 0x74
   20a96:	f7ff fb97 	bl	201c8 <_malloc_r>
   20a9a:	1e04      	subs	r4, r0, #0
   20a9c:	d008      	beq.n	20ab0 <__sfmoreglue+0x28>
   20a9e:	2100      	movs	r1, #0
   20aa0:	002a      	movs	r2, r5
   20aa2:	6001      	str	r1, [r0, #0]
   20aa4:	6046      	str	r6, [r0, #4]
   20aa6:	300c      	adds	r0, #12
   20aa8:	60a0      	str	r0, [r4, #8]
   20aaa:	3268      	adds	r2, #104	; 0x68
   20aac:	f7ff fb39 	bl	20122 <memset>
   20ab0:	0020      	movs	r0, r4
   20ab2:	bd70      	pop	{r4, r5, r6, pc}

00020ab4 <__sinit>:
   20ab4:	6983      	ldr	r3, [r0, #24]
   20ab6:	b513      	push	{r0, r1, r4, lr}
   20ab8:	0004      	movs	r4, r0
   20aba:	2b00      	cmp	r3, #0
   20abc:	d128      	bne.n	20b10 <__sinit+0x5c>
   20abe:	6483      	str	r3, [r0, #72]	; 0x48
   20ac0:	64c3      	str	r3, [r0, #76]	; 0x4c
   20ac2:	6503      	str	r3, [r0, #80]	; 0x50
   20ac4:	4b13      	ldr	r3, [pc, #76]	; (20b14 <__sinit+0x60>)
   20ac6:	4a14      	ldr	r2, [pc, #80]	; (20b18 <__sinit+0x64>)
   20ac8:	681b      	ldr	r3, [r3, #0]
   20aca:	6282      	str	r2, [r0, #40]	; 0x28
   20acc:	9301      	str	r3, [sp, #4]
   20ace:	4298      	cmp	r0, r3
   20ad0:	d101      	bne.n	20ad6 <__sinit+0x22>
   20ad2:	2301      	movs	r3, #1
   20ad4:	6183      	str	r3, [r0, #24]
   20ad6:	0020      	movs	r0, r4
   20ad8:	f000 f820 	bl	20b1c <__sfp>
   20adc:	6060      	str	r0, [r4, #4]
   20ade:	0020      	movs	r0, r4
   20ae0:	f000 f81c 	bl	20b1c <__sfp>
   20ae4:	60a0      	str	r0, [r4, #8]
   20ae6:	0020      	movs	r0, r4
   20ae8:	f000 f818 	bl	20b1c <__sfp>
   20aec:	2200      	movs	r2, #0
   20aee:	60e0      	str	r0, [r4, #12]
   20af0:	2104      	movs	r1, #4
   20af2:	6860      	ldr	r0, [r4, #4]
   20af4:	f7ff ffa4 	bl	20a40 <std.isra.0>
   20af8:	2201      	movs	r2, #1
   20afa:	2109      	movs	r1, #9
   20afc:	68a0      	ldr	r0, [r4, #8]
   20afe:	f7ff ff9f 	bl	20a40 <std.isra.0>
   20b02:	2202      	movs	r2, #2
   20b04:	2112      	movs	r1, #18
   20b06:	68e0      	ldr	r0, [r4, #12]
   20b08:	f7ff ff9a 	bl	20a40 <std.isra.0>
   20b0c:	2301      	movs	r3, #1
   20b0e:	61a3      	str	r3, [r4, #24]
   20b10:	bd13      	pop	{r0, r1, r4, pc}
   20b12:	46c0      	nop			; (mov r8, r8)
   20b14:	000253b0 	.word	0x000253b0
   20b18:	00020a31 	.word	0x00020a31

00020b1c <__sfp>:
   20b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b1e:	4b1e      	ldr	r3, [pc, #120]	; (20b98 <__sfp+0x7c>)
   20b20:	0007      	movs	r7, r0
   20b22:	681e      	ldr	r6, [r3, #0]
   20b24:	69b3      	ldr	r3, [r6, #24]
   20b26:	2b00      	cmp	r3, #0
   20b28:	d102      	bne.n	20b30 <__sfp+0x14>
   20b2a:	0030      	movs	r0, r6
   20b2c:	f7ff ffc2 	bl	20ab4 <__sinit>
   20b30:	3648      	adds	r6, #72	; 0x48
   20b32:	68b4      	ldr	r4, [r6, #8]
   20b34:	6873      	ldr	r3, [r6, #4]
   20b36:	3b01      	subs	r3, #1
   20b38:	d504      	bpl.n	20b44 <__sfp+0x28>
   20b3a:	6833      	ldr	r3, [r6, #0]
   20b3c:	2b00      	cmp	r3, #0
   20b3e:	d007      	beq.n	20b50 <__sfp+0x34>
   20b40:	6836      	ldr	r6, [r6, #0]
   20b42:	e7f6      	b.n	20b32 <__sfp+0x16>
   20b44:	220c      	movs	r2, #12
   20b46:	5ea5      	ldrsh	r5, [r4, r2]
   20b48:	2d00      	cmp	r5, #0
   20b4a:	d00d      	beq.n	20b68 <__sfp+0x4c>
   20b4c:	3468      	adds	r4, #104	; 0x68
   20b4e:	e7f2      	b.n	20b36 <__sfp+0x1a>
   20b50:	2104      	movs	r1, #4
   20b52:	0038      	movs	r0, r7
   20b54:	f7ff ff98 	bl	20a88 <__sfmoreglue>
   20b58:	6030      	str	r0, [r6, #0]
   20b5a:	2800      	cmp	r0, #0
   20b5c:	d1f0      	bne.n	20b40 <__sfp+0x24>
   20b5e:	230c      	movs	r3, #12
   20b60:	0004      	movs	r4, r0
   20b62:	603b      	str	r3, [r7, #0]
   20b64:	0020      	movs	r0, r4
   20b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20b68:	2301      	movs	r3, #1
   20b6a:	0020      	movs	r0, r4
   20b6c:	425b      	negs	r3, r3
   20b6e:	81e3      	strh	r3, [r4, #14]
   20b70:	3302      	adds	r3, #2
   20b72:	81a3      	strh	r3, [r4, #12]
   20b74:	6665      	str	r5, [r4, #100]	; 0x64
   20b76:	6025      	str	r5, [r4, #0]
   20b78:	60a5      	str	r5, [r4, #8]
   20b7a:	6065      	str	r5, [r4, #4]
   20b7c:	6125      	str	r5, [r4, #16]
   20b7e:	6165      	str	r5, [r4, #20]
   20b80:	61a5      	str	r5, [r4, #24]
   20b82:	2208      	movs	r2, #8
   20b84:	0029      	movs	r1, r5
   20b86:	305c      	adds	r0, #92	; 0x5c
   20b88:	f7ff facb 	bl	20122 <memset>
   20b8c:	6365      	str	r5, [r4, #52]	; 0x34
   20b8e:	63a5      	str	r5, [r4, #56]	; 0x38
   20b90:	64a5      	str	r5, [r4, #72]	; 0x48
   20b92:	64e5      	str	r5, [r4, #76]	; 0x4c
   20b94:	e7e6      	b.n	20b64 <__sfp+0x48>
   20b96:	46c0      	nop			; (mov r8, r8)
   20b98:	000253b0 	.word	0x000253b0

00020b9c <_fwalk_reent>:
   20b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20b9e:	0004      	movs	r4, r0
   20ba0:	0007      	movs	r7, r0
   20ba2:	2600      	movs	r6, #0
   20ba4:	9101      	str	r1, [sp, #4]
   20ba6:	3448      	adds	r4, #72	; 0x48
   20ba8:	2c00      	cmp	r4, #0
   20baa:	d101      	bne.n	20bb0 <_fwalk_reent+0x14>
   20bac:	0030      	movs	r0, r6
   20bae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   20bb0:	6863      	ldr	r3, [r4, #4]
   20bb2:	68a5      	ldr	r5, [r4, #8]
   20bb4:	9300      	str	r3, [sp, #0]
   20bb6:	9b00      	ldr	r3, [sp, #0]
   20bb8:	3b01      	subs	r3, #1
   20bba:	9300      	str	r3, [sp, #0]
   20bbc:	d501      	bpl.n	20bc2 <_fwalk_reent+0x26>
   20bbe:	6824      	ldr	r4, [r4, #0]
   20bc0:	e7f2      	b.n	20ba8 <_fwalk_reent+0xc>
   20bc2:	89ab      	ldrh	r3, [r5, #12]
   20bc4:	2b01      	cmp	r3, #1
   20bc6:	d908      	bls.n	20bda <_fwalk_reent+0x3e>
   20bc8:	220e      	movs	r2, #14
   20bca:	5eab      	ldrsh	r3, [r5, r2]
   20bcc:	3301      	adds	r3, #1
   20bce:	d004      	beq.n	20bda <_fwalk_reent+0x3e>
   20bd0:	0029      	movs	r1, r5
   20bd2:	0038      	movs	r0, r7
   20bd4:	9b01      	ldr	r3, [sp, #4]
   20bd6:	4798      	blx	r3
   20bd8:	4306      	orrs	r6, r0
   20bda:	3568      	adds	r5, #104	; 0x68
   20bdc:	e7eb      	b.n	20bb6 <_fwalk_reent+0x1a>

00020bde <__locale_ctype_ptr_l>:
   20bde:	30ec      	adds	r0, #236	; 0xec
   20be0:	6800      	ldr	r0, [r0, #0]
   20be2:	4770      	bx	lr

00020be4 <__locale_ctype_ptr>:
   20be4:	4b04      	ldr	r3, [pc, #16]	; (20bf8 <__locale_ctype_ptr+0x14>)
   20be6:	681b      	ldr	r3, [r3, #0]
   20be8:	6a1b      	ldr	r3, [r3, #32]
   20bea:	2b00      	cmp	r3, #0
   20bec:	d100      	bne.n	20bf0 <__locale_ctype_ptr+0xc>
   20bee:	4b03      	ldr	r3, [pc, #12]	; (20bfc <__locale_ctype_ptr+0x18>)
   20bf0:	33ec      	adds	r3, #236	; 0xec
   20bf2:	6818      	ldr	r0, [r3, #0]
   20bf4:	4770      	bx	lr
   20bf6:	46c0      	nop			; (mov r8, r8)
   20bf8:	20000114 	.word	0x20000114
   20bfc:	20000178 	.word	0x20000178

00020c00 <__swhatbuf_r>:
   20c00:	b570      	push	{r4, r5, r6, lr}
   20c02:	000e      	movs	r6, r1
   20c04:	001d      	movs	r5, r3
   20c06:	230e      	movs	r3, #14
   20c08:	5ec9      	ldrsh	r1, [r1, r3]
   20c0a:	b090      	sub	sp, #64	; 0x40
   20c0c:	0014      	movs	r4, r2
   20c0e:	2900      	cmp	r1, #0
   20c10:	da07      	bge.n	20c22 <__swhatbuf_r+0x22>
   20c12:	2300      	movs	r3, #0
   20c14:	602b      	str	r3, [r5, #0]
   20c16:	89b3      	ldrh	r3, [r6, #12]
   20c18:	061b      	lsls	r3, r3, #24
   20c1a:	d411      	bmi.n	20c40 <__swhatbuf_r+0x40>
   20c1c:	2380      	movs	r3, #128	; 0x80
   20c1e:	00db      	lsls	r3, r3, #3
   20c20:	e00f      	b.n	20c42 <__swhatbuf_r+0x42>
   20c22:	aa01      	add	r2, sp, #4
   20c24:	f000 fbe6 	bl	213f4 <_fstat_r>
   20c28:	2800      	cmp	r0, #0
   20c2a:	dbf2      	blt.n	20c12 <__swhatbuf_r+0x12>
   20c2c:	22f0      	movs	r2, #240	; 0xf0
   20c2e:	9b02      	ldr	r3, [sp, #8]
   20c30:	0212      	lsls	r2, r2, #8
   20c32:	4013      	ands	r3, r2
   20c34:	4a05      	ldr	r2, [pc, #20]	; (20c4c <__swhatbuf_r+0x4c>)
   20c36:	189b      	adds	r3, r3, r2
   20c38:	425a      	negs	r2, r3
   20c3a:	4153      	adcs	r3, r2
   20c3c:	602b      	str	r3, [r5, #0]
   20c3e:	e7ed      	b.n	20c1c <__swhatbuf_r+0x1c>
   20c40:	2340      	movs	r3, #64	; 0x40
   20c42:	2000      	movs	r0, #0
   20c44:	6023      	str	r3, [r4, #0]
   20c46:	b010      	add	sp, #64	; 0x40
   20c48:	bd70      	pop	{r4, r5, r6, pc}
   20c4a:	46c0      	nop			; (mov r8, r8)
   20c4c:	ffffe000 	.word	0xffffe000

00020c50 <__smakebuf_r>:
   20c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20c52:	2602      	movs	r6, #2
   20c54:	898b      	ldrh	r3, [r1, #12]
   20c56:	0005      	movs	r5, r0
   20c58:	000c      	movs	r4, r1
   20c5a:	4233      	tst	r3, r6
   20c5c:	d006      	beq.n	20c6c <__smakebuf_r+0x1c>
   20c5e:	0023      	movs	r3, r4
   20c60:	3347      	adds	r3, #71	; 0x47
   20c62:	6023      	str	r3, [r4, #0]
   20c64:	6123      	str	r3, [r4, #16]
   20c66:	2301      	movs	r3, #1
   20c68:	6163      	str	r3, [r4, #20]
   20c6a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   20c6c:	ab01      	add	r3, sp, #4
   20c6e:	466a      	mov	r2, sp
   20c70:	f7ff ffc6 	bl	20c00 <__swhatbuf_r>
   20c74:	9900      	ldr	r1, [sp, #0]
   20c76:	0007      	movs	r7, r0
   20c78:	0028      	movs	r0, r5
   20c7a:	f7ff faa5 	bl	201c8 <_malloc_r>
   20c7e:	2800      	cmp	r0, #0
   20c80:	d108      	bne.n	20c94 <__smakebuf_r+0x44>
   20c82:	220c      	movs	r2, #12
   20c84:	5ea3      	ldrsh	r3, [r4, r2]
   20c86:	059a      	lsls	r2, r3, #22
   20c88:	d4ef      	bmi.n	20c6a <__smakebuf_r+0x1a>
   20c8a:	2203      	movs	r2, #3
   20c8c:	4393      	bics	r3, r2
   20c8e:	431e      	orrs	r6, r3
   20c90:	81a6      	strh	r6, [r4, #12]
   20c92:	e7e4      	b.n	20c5e <__smakebuf_r+0xe>
   20c94:	4b0f      	ldr	r3, [pc, #60]	; (20cd4 <__smakebuf_r+0x84>)
   20c96:	62ab      	str	r3, [r5, #40]	; 0x28
   20c98:	2380      	movs	r3, #128	; 0x80
   20c9a:	89a2      	ldrh	r2, [r4, #12]
   20c9c:	6020      	str	r0, [r4, #0]
   20c9e:	4313      	orrs	r3, r2
   20ca0:	81a3      	strh	r3, [r4, #12]
   20ca2:	9b00      	ldr	r3, [sp, #0]
   20ca4:	6120      	str	r0, [r4, #16]
   20ca6:	6163      	str	r3, [r4, #20]
   20ca8:	9b01      	ldr	r3, [sp, #4]
   20caa:	2b00      	cmp	r3, #0
   20cac:	d00d      	beq.n	20cca <__smakebuf_r+0x7a>
   20cae:	230e      	movs	r3, #14
   20cb0:	5ee1      	ldrsh	r1, [r4, r3]
   20cb2:	0028      	movs	r0, r5
   20cb4:	f000 fbb0 	bl	21418 <_isatty_r>
   20cb8:	2800      	cmp	r0, #0
   20cba:	d006      	beq.n	20cca <__smakebuf_r+0x7a>
   20cbc:	2203      	movs	r2, #3
   20cbe:	89a3      	ldrh	r3, [r4, #12]
   20cc0:	4393      	bics	r3, r2
   20cc2:	001a      	movs	r2, r3
   20cc4:	2301      	movs	r3, #1
   20cc6:	4313      	orrs	r3, r2
   20cc8:	81a3      	strh	r3, [r4, #12]
   20cca:	89a0      	ldrh	r0, [r4, #12]
   20ccc:	4338      	orrs	r0, r7
   20cce:	81a0      	strh	r0, [r4, #12]
   20cd0:	e7cb      	b.n	20c6a <__smakebuf_r+0x1a>
   20cd2:	46c0      	nop			; (mov r8, r8)
   20cd4:	00020a31 	.word	0x00020a31

00020cd8 <__ascii_mbtowc>:
   20cd8:	b082      	sub	sp, #8
   20cda:	2900      	cmp	r1, #0
   20cdc:	d100      	bne.n	20ce0 <__ascii_mbtowc+0x8>
   20cde:	a901      	add	r1, sp, #4
   20ce0:	1e10      	subs	r0, r2, #0
   20ce2:	d006      	beq.n	20cf2 <__ascii_mbtowc+0x1a>
   20ce4:	2b00      	cmp	r3, #0
   20ce6:	d006      	beq.n	20cf6 <__ascii_mbtowc+0x1e>
   20ce8:	7813      	ldrb	r3, [r2, #0]
   20cea:	600b      	str	r3, [r1, #0]
   20cec:	7810      	ldrb	r0, [r2, #0]
   20cee:	1e43      	subs	r3, r0, #1
   20cf0:	4198      	sbcs	r0, r3
   20cf2:	b002      	add	sp, #8
   20cf4:	4770      	bx	lr
   20cf6:	2002      	movs	r0, #2
   20cf8:	4240      	negs	r0, r0
   20cfa:	e7fa      	b.n	20cf2 <__ascii_mbtowc+0x1a>

00020cfc <__malloc_lock>:
   20cfc:	4770      	bx	lr

00020cfe <__malloc_unlock>:
   20cfe:	4770      	bx	lr

00020d00 <__ssputs_r>:
   20d00:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d02:	688e      	ldr	r6, [r1, #8]
   20d04:	b085      	sub	sp, #20
   20d06:	0007      	movs	r7, r0
   20d08:	000c      	movs	r4, r1
   20d0a:	9203      	str	r2, [sp, #12]
   20d0c:	9301      	str	r3, [sp, #4]
   20d0e:	429e      	cmp	r6, r3
   20d10:	d839      	bhi.n	20d86 <__ssputs_r+0x86>
   20d12:	2390      	movs	r3, #144	; 0x90
   20d14:	898a      	ldrh	r2, [r1, #12]
   20d16:	00db      	lsls	r3, r3, #3
   20d18:	421a      	tst	r2, r3
   20d1a:	d034      	beq.n	20d86 <__ssputs_r+0x86>
   20d1c:	2503      	movs	r5, #3
   20d1e:	6909      	ldr	r1, [r1, #16]
   20d20:	6823      	ldr	r3, [r4, #0]
   20d22:	1a5b      	subs	r3, r3, r1
   20d24:	9302      	str	r3, [sp, #8]
   20d26:	6963      	ldr	r3, [r4, #20]
   20d28:	9802      	ldr	r0, [sp, #8]
   20d2a:	435d      	muls	r5, r3
   20d2c:	0feb      	lsrs	r3, r5, #31
   20d2e:	195d      	adds	r5, r3, r5
   20d30:	9b01      	ldr	r3, [sp, #4]
   20d32:	106d      	asrs	r5, r5, #1
   20d34:	3301      	adds	r3, #1
   20d36:	181b      	adds	r3, r3, r0
   20d38:	42ab      	cmp	r3, r5
   20d3a:	d900      	bls.n	20d3e <__ssputs_r+0x3e>
   20d3c:	001d      	movs	r5, r3
   20d3e:	0553      	lsls	r3, r2, #21
   20d40:	d532      	bpl.n	20da8 <__ssputs_r+0xa8>
   20d42:	0029      	movs	r1, r5
   20d44:	0038      	movs	r0, r7
   20d46:	f7ff fa3f 	bl	201c8 <_malloc_r>
   20d4a:	1e06      	subs	r6, r0, #0
   20d4c:	d109      	bne.n	20d62 <__ssputs_r+0x62>
   20d4e:	230c      	movs	r3, #12
   20d50:	603b      	str	r3, [r7, #0]
   20d52:	2340      	movs	r3, #64	; 0x40
   20d54:	2001      	movs	r0, #1
   20d56:	89a2      	ldrh	r2, [r4, #12]
   20d58:	4240      	negs	r0, r0
   20d5a:	4313      	orrs	r3, r2
   20d5c:	81a3      	strh	r3, [r4, #12]
   20d5e:	b005      	add	sp, #20
   20d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20d62:	9a02      	ldr	r2, [sp, #8]
   20d64:	6921      	ldr	r1, [r4, #16]
   20d66:	f7ff f9c1 	bl	200ec <memcpy>
   20d6a:	89a3      	ldrh	r3, [r4, #12]
   20d6c:	4a14      	ldr	r2, [pc, #80]	; (20dc0 <__ssputs_r+0xc0>)
   20d6e:	401a      	ands	r2, r3
   20d70:	2380      	movs	r3, #128	; 0x80
   20d72:	4313      	orrs	r3, r2
   20d74:	81a3      	strh	r3, [r4, #12]
   20d76:	9b02      	ldr	r3, [sp, #8]
   20d78:	6126      	str	r6, [r4, #16]
   20d7a:	18f6      	adds	r6, r6, r3
   20d7c:	6026      	str	r6, [r4, #0]
   20d7e:	6165      	str	r5, [r4, #20]
   20d80:	9e01      	ldr	r6, [sp, #4]
   20d82:	1aed      	subs	r5, r5, r3
   20d84:	60a5      	str	r5, [r4, #8]
   20d86:	9b01      	ldr	r3, [sp, #4]
   20d88:	42b3      	cmp	r3, r6
   20d8a:	d200      	bcs.n	20d8e <__ssputs_r+0x8e>
   20d8c:	001e      	movs	r6, r3
   20d8e:	0032      	movs	r2, r6
   20d90:	9903      	ldr	r1, [sp, #12]
   20d92:	6820      	ldr	r0, [r4, #0]
   20d94:	f7ff f9b3 	bl	200fe <memmove>
   20d98:	68a3      	ldr	r3, [r4, #8]
   20d9a:	2000      	movs	r0, #0
   20d9c:	1b9b      	subs	r3, r3, r6
   20d9e:	60a3      	str	r3, [r4, #8]
   20da0:	6823      	ldr	r3, [r4, #0]
   20da2:	199e      	adds	r6, r3, r6
   20da4:	6026      	str	r6, [r4, #0]
   20da6:	e7da      	b.n	20d5e <__ssputs_r+0x5e>
   20da8:	002a      	movs	r2, r5
   20daa:	0038      	movs	r0, r7
   20dac:	f000 fb65 	bl	2147a <_realloc_r>
   20db0:	1e06      	subs	r6, r0, #0
   20db2:	d1e0      	bne.n	20d76 <__ssputs_r+0x76>
   20db4:	6921      	ldr	r1, [r4, #16]
   20db6:	0038      	movs	r0, r7
   20db8:	f7ff f9bc 	bl	20134 <_free_r>
   20dbc:	e7c7      	b.n	20d4e <__ssputs_r+0x4e>
   20dbe:	46c0      	nop			; (mov r8, r8)
   20dc0:	fffffb7f 	.word	0xfffffb7f

00020dc4 <_svfiprintf_r>:
   20dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   20dc6:	b09f      	sub	sp, #124	; 0x7c
   20dc8:	9002      	str	r0, [sp, #8]
   20dca:	9305      	str	r3, [sp, #20]
   20dcc:	898b      	ldrh	r3, [r1, #12]
   20dce:	000f      	movs	r7, r1
   20dd0:	0016      	movs	r6, r2
   20dd2:	061b      	lsls	r3, r3, #24
   20dd4:	d511      	bpl.n	20dfa <_svfiprintf_r+0x36>
   20dd6:	690b      	ldr	r3, [r1, #16]
   20dd8:	2b00      	cmp	r3, #0
   20dda:	d10e      	bne.n	20dfa <_svfiprintf_r+0x36>
   20ddc:	2140      	movs	r1, #64	; 0x40
   20dde:	f7ff f9f3 	bl	201c8 <_malloc_r>
   20de2:	6038      	str	r0, [r7, #0]
   20de4:	6138      	str	r0, [r7, #16]
   20de6:	2800      	cmp	r0, #0
   20de8:	d105      	bne.n	20df6 <_svfiprintf_r+0x32>
   20dea:	230c      	movs	r3, #12
   20dec:	9a02      	ldr	r2, [sp, #8]
   20dee:	3801      	subs	r0, #1
   20df0:	6013      	str	r3, [r2, #0]
   20df2:	b01f      	add	sp, #124	; 0x7c
   20df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20df6:	2340      	movs	r3, #64	; 0x40
   20df8:	617b      	str	r3, [r7, #20]
   20dfa:	2300      	movs	r3, #0
   20dfc:	ad06      	add	r5, sp, #24
   20dfe:	616b      	str	r3, [r5, #20]
   20e00:	3320      	adds	r3, #32
   20e02:	766b      	strb	r3, [r5, #25]
   20e04:	3310      	adds	r3, #16
   20e06:	76ab      	strb	r3, [r5, #26]
   20e08:	0034      	movs	r4, r6
   20e0a:	7823      	ldrb	r3, [r4, #0]
   20e0c:	2b00      	cmp	r3, #0
   20e0e:	d147      	bne.n	20ea0 <_svfiprintf_r+0xdc>
   20e10:	1ba3      	subs	r3, r4, r6
   20e12:	9304      	str	r3, [sp, #16]
   20e14:	d00d      	beq.n	20e32 <_svfiprintf_r+0x6e>
   20e16:	1ba3      	subs	r3, r4, r6
   20e18:	0032      	movs	r2, r6
   20e1a:	0039      	movs	r1, r7
   20e1c:	9802      	ldr	r0, [sp, #8]
   20e1e:	f7ff ff6f 	bl	20d00 <__ssputs_r>
   20e22:	1c43      	adds	r3, r0, #1
   20e24:	d100      	bne.n	20e28 <_svfiprintf_r+0x64>
   20e26:	e0b5      	b.n	20f94 <_svfiprintf_r+0x1d0>
   20e28:	696a      	ldr	r2, [r5, #20]
   20e2a:	9b04      	ldr	r3, [sp, #16]
   20e2c:	4694      	mov	ip, r2
   20e2e:	4463      	add	r3, ip
   20e30:	616b      	str	r3, [r5, #20]
   20e32:	7823      	ldrb	r3, [r4, #0]
   20e34:	2b00      	cmp	r3, #0
   20e36:	d100      	bne.n	20e3a <_svfiprintf_r+0x76>
   20e38:	e0ac      	b.n	20f94 <_svfiprintf_r+0x1d0>
   20e3a:	2201      	movs	r2, #1
   20e3c:	2300      	movs	r3, #0
   20e3e:	4252      	negs	r2, r2
   20e40:	606a      	str	r2, [r5, #4]
   20e42:	a902      	add	r1, sp, #8
   20e44:	3254      	adds	r2, #84	; 0x54
   20e46:	1852      	adds	r2, r2, r1
   20e48:	3401      	adds	r4, #1
   20e4a:	602b      	str	r3, [r5, #0]
   20e4c:	60eb      	str	r3, [r5, #12]
   20e4e:	60ab      	str	r3, [r5, #8]
   20e50:	7013      	strb	r3, [r2, #0]
   20e52:	65ab      	str	r3, [r5, #88]	; 0x58
   20e54:	4e58      	ldr	r6, [pc, #352]	; (20fb8 <_svfiprintf_r+0x1f4>)
   20e56:	2205      	movs	r2, #5
   20e58:	7821      	ldrb	r1, [r4, #0]
   20e5a:	0030      	movs	r0, r6
   20e5c:	f000 fb02 	bl	21464 <memchr>
   20e60:	1c62      	adds	r2, r4, #1
   20e62:	2800      	cmp	r0, #0
   20e64:	d120      	bne.n	20ea8 <_svfiprintf_r+0xe4>
   20e66:	6829      	ldr	r1, [r5, #0]
   20e68:	06cb      	lsls	r3, r1, #27
   20e6a:	d504      	bpl.n	20e76 <_svfiprintf_r+0xb2>
   20e6c:	2353      	movs	r3, #83	; 0x53
   20e6e:	ae02      	add	r6, sp, #8
   20e70:	3020      	adds	r0, #32
   20e72:	199b      	adds	r3, r3, r6
   20e74:	7018      	strb	r0, [r3, #0]
   20e76:	070b      	lsls	r3, r1, #28
   20e78:	d504      	bpl.n	20e84 <_svfiprintf_r+0xc0>
   20e7a:	2353      	movs	r3, #83	; 0x53
   20e7c:	202b      	movs	r0, #43	; 0x2b
   20e7e:	ae02      	add	r6, sp, #8
   20e80:	199b      	adds	r3, r3, r6
   20e82:	7018      	strb	r0, [r3, #0]
   20e84:	7823      	ldrb	r3, [r4, #0]
   20e86:	2b2a      	cmp	r3, #42	; 0x2a
   20e88:	d016      	beq.n	20eb8 <_svfiprintf_r+0xf4>
   20e8a:	2000      	movs	r0, #0
   20e8c:	210a      	movs	r1, #10
   20e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20e90:	7822      	ldrb	r2, [r4, #0]
   20e92:	3a30      	subs	r2, #48	; 0x30
   20e94:	2a09      	cmp	r2, #9
   20e96:	d955      	bls.n	20f44 <_svfiprintf_r+0x180>
   20e98:	2800      	cmp	r0, #0
   20e9a:	d015      	beq.n	20ec8 <_svfiprintf_r+0x104>
   20e9c:	9309      	str	r3, [sp, #36]	; 0x24
   20e9e:	e013      	b.n	20ec8 <_svfiprintf_r+0x104>
   20ea0:	2b25      	cmp	r3, #37	; 0x25
   20ea2:	d0b5      	beq.n	20e10 <_svfiprintf_r+0x4c>
   20ea4:	3401      	adds	r4, #1
   20ea6:	e7b0      	b.n	20e0a <_svfiprintf_r+0x46>
   20ea8:	2301      	movs	r3, #1
   20eaa:	1b80      	subs	r0, r0, r6
   20eac:	4083      	lsls	r3, r0
   20eae:	6829      	ldr	r1, [r5, #0]
   20eb0:	0014      	movs	r4, r2
   20eb2:	430b      	orrs	r3, r1
   20eb4:	602b      	str	r3, [r5, #0]
   20eb6:	e7cd      	b.n	20e54 <_svfiprintf_r+0x90>
   20eb8:	9b05      	ldr	r3, [sp, #20]
   20eba:	1d18      	adds	r0, r3, #4
   20ebc:	681b      	ldr	r3, [r3, #0]
   20ebe:	9005      	str	r0, [sp, #20]
   20ec0:	2b00      	cmp	r3, #0
   20ec2:	db39      	blt.n	20f38 <_svfiprintf_r+0x174>
   20ec4:	9309      	str	r3, [sp, #36]	; 0x24
   20ec6:	0014      	movs	r4, r2
   20ec8:	7823      	ldrb	r3, [r4, #0]
   20eca:	2b2e      	cmp	r3, #46	; 0x2e
   20ecc:	d10b      	bne.n	20ee6 <_svfiprintf_r+0x122>
   20ece:	7863      	ldrb	r3, [r4, #1]
   20ed0:	1c62      	adds	r2, r4, #1
   20ed2:	2b2a      	cmp	r3, #42	; 0x2a
   20ed4:	d13e      	bne.n	20f54 <_svfiprintf_r+0x190>
   20ed6:	9b05      	ldr	r3, [sp, #20]
   20ed8:	3402      	adds	r4, #2
   20eda:	1d1a      	adds	r2, r3, #4
   20edc:	681b      	ldr	r3, [r3, #0]
   20ede:	9205      	str	r2, [sp, #20]
   20ee0:	2b00      	cmp	r3, #0
   20ee2:	db34      	blt.n	20f4e <_svfiprintf_r+0x18a>
   20ee4:	9307      	str	r3, [sp, #28]
   20ee6:	4e35      	ldr	r6, [pc, #212]	; (20fbc <_svfiprintf_r+0x1f8>)
   20ee8:	7821      	ldrb	r1, [r4, #0]
   20eea:	2203      	movs	r2, #3
   20eec:	0030      	movs	r0, r6
   20eee:	f000 fab9 	bl	21464 <memchr>
   20ef2:	2800      	cmp	r0, #0
   20ef4:	d006      	beq.n	20f04 <_svfiprintf_r+0x140>
   20ef6:	2340      	movs	r3, #64	; 0x40
   20ef8:	1b80      	subs	r0, r0, r6
   20efa:	4083      	lsls	r3, r0
   20efc:	682a      	ldr	r2, [r5, #0]
   20efe:	3401      	adds	r4, #1
   20f00:	4313      	orrs	r3, r2
   20f02:	602b      	str	r3, [r5, #0]
   20f04:	7821      	ldrb	r1, [r4, #0]
   20f06:	2206      	movs	r2, #6
   20f08:	482d      	ldr	r0, [pc, #180]	; (20fc0 <_svfiprintf_r+0x1fc>)
   20f0a:	1c66      	adds	r6, r4, #1
   20f0c:	7629      	strb	r1, [r5, #24]
   20f0e:	f000 faa9 	bl	21464 <memchr>
   20f12:	2800      	cmp	r0, #0
   20f14:	d046      	beq.n	20fa4 <_svfiprintf_r+0x1e0>
   20f16:	4b2b      	ldr	r3, [pc, #172]	; (20fc4 <_svfiprintf_r+0x200>)
   20f18:	2b00      	cmp	r3, #0
   20f1a:	d12f      	bne.n	20f7c <_svfiprintf_r+0x1b8>
   20f1c:	6829      	ldr	r1, [r5, #0]
   20f1e:	9b05      	ldr	r3, [sp, #20]
   20f20:	2207      	movs	r2, #7
   20f22:	05c9      	lsls	r1, r1, #23
   20f24:	d528      	bpl.n	20f78 <_svfiprintf_r+0x1b4>
   20f26:	189b      	adds	r3, r3, r2
   20f28:	4393      	bics	r3, r2
   20f2a:	3308      	adds	r3, #8
   20f2c:	9305      	str	r3, [sp, #20]
   20f2e:	696b      	ldr	r3, [r5, #20]
   20f30:	9a03      	ldr	r2, [sp, #12]
   20f32:	189b      	adds	r3, r3, r2
   20f34:	616b      	str	r3, [r5, #20]
   20f36:	e767      	b.n	20e08 <_svfiprintf_r+0x44>
   20f38:	425b      	negs	r3, r3
   20f3a:	60eb      	str	r3, [r5, #12]
   20f3c:	2302      	movs	r3, #2
   20f3e:	430b      	orrs	r3, r1
   20f40:	602b      	str	r3, [r5, #0]
   20f42:	e7c0      	b.n	20ec6 <_svfiprintf_r+0x102>
   20f44:	434b      	muls	r3, r1
   20f46:	3401      	adds	r4, #1
   20f48:	189b      	adds	r3, r3, r2
   20f4a:	2001      	movs	r0, #1
   20f4c:	e7a0      	b.n	20e90 <_svfiprintf_r+0xcc>
   20f4e:	2301      	movs	r3, #1
   20f50:	425b      	negs	r3, r3
   20f52:	e7c7      	b.n	20ee4 <_svfiprintf_r+0x120>
   20f54:	2300      	movs	r3, #0
   20f56:	0014      	movs	r4, r2
   20f58:	200a      	movs	r0, #10
   20f5a:	001a      	movs	r2, r3
   20f5c:	606b      	str	r3, [r5, #4]
   20f5e:	7821      	ldrb	r1, [r4, #0]
   20f60:	3930      	subs	r1, #48	; 0x30
   20f62:	2909      	cmp	r1, #9
   20f64:	d903      	bls.n	20f6e <_svfiprintf_r+0x1aa>
   20f66:	2b00      	cmp	r3, #0
   20f68:	d0bd      	beq.n	20ee6 <_svfiprintf_r+0x122>
   20f6a:	9207      	str	r2, [sp, #28]
   20f6c:	e7bb      	b.n	20ee6 <_svfiprintf_r+0x122>
   20f6e:	4342      	muls	r2, r0
   20f70:	3401      	adds	r4, #1
   20f72:	1852      	adds	r2, r2, r1
   20f74:	2301      	movs	r3, #1
   20f76:	e7f2      	b.n	20f5e <_svfiprintf_r+0x19a>
   20f78:	3307      	adds	r3, #7
   20f7a:	e7d5      	b.n	20f28 <_svfiprintf_r+0x164>
   20f7c:	ab05      	add	r3, sp, #20
   20f7e:	9300      	str	r3, [sp, #0]
   20f80:	003a      	movs	r2, r7
   20f82:	4b11      	ldr	r3, [pc, #68]	; (20fc8 <_svfiprintf_r+0x204>)
   20f84:	0029      	movs	r1, r5
   20f86:	9802      	ldr	r0, [sp, #8]
   20f88:	e000      	b.n	20f8c <_svfiprintf_r+0x1c8>
   20f8a:	bf00      	nop
   20f8c:	9003      	str	r0, [sp, #12]
   20f8e:	9b03      	ldr	r3, [sp, #12]
   20f90:	3301      	adds	r3, #1
   20f92:	d1cc      	bne.n	20f2e <_svfiprintf_r+0x16a>
   20f94:	89bb      	ldrh	r3, [r7, #12]
   20f96:	980b      	ldr	r0, [sp, #44]	; 0x2c
   20f98:	065b      	lsls	r3, r3, #25
   20f9a:	d400      	bmi.n	20f9e <_svfiprintf_r+0x1da>
   20f9c:	e729      	b.n	20df2 <_svfiprintf_r+0x2e>
   20f9e:	2001      	movs	r0, #1
   20fa0:	4240      	negs	r0, r0
   20fa2:	e726      	b.n	20df2 <_svfiprintf_r+0x2e>
   20fa4:	ab05      	add	r3, sp, #20
   20fa6:	9300      	str	r3, [sp, #0]
   20fa8:	003a      	movs	r2, r7
   20faa:	4b07      	ldr	r3, [pc, #28]	; (20fc8 <_svfiprintf_r+0x204>)
   20fac:	0029      	movs	r1, r5
   20fae:	9802      	ldr	r0, [sp, #8]
   20fb0:	f000 f87a 	bl	210a8 <_printf_i>
   20fb4:	e7ea      	b.n	20f8c <_svfiprintf_r+0x1c8>
   20fb6:	46c0      	nop			; (mov r8, r8)
   20fb8:	0002541e 	.word	0x0002541e
   20fbc:	00025424 	.word	0x00025424
   20fc0:	00025428 	.word	0x00025428
   20fc4:	00000000 	.word	0x00000000
   20fc8:	00020d01 	.word	0x00020d01

00020fcc <_printf_common>:
   20fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20fce:	0015      	movs	r5, r2
   20fd0:	9301      	str	r3, [sp, #4]
   20fd2:	688a      	ldr	r2, [r1, #8]
   20fd4:	690b      	ldr	r3, [r1, #16]
   20fd6:	9000      	str	r0, [sp, #0]
   20fd8:	000c      	movs	r4, r1
   20fda:	4293      	cmp	r3, r2
   20fdc:	da00      	bge.n	20fe0 <_printf_common+0x14>
   20fde:	0013      	movs	r3, r2
   20fe0:	0022      	movs	r2, r4
   20fe2:	602b      	str	r3, [r5, #0]
   20fe4:	3243      	adds	r2, #67	; 0x43
   20fe6:	7812      	ldrb	r2, [r2, #0]
   20fe8:	2a00      	cmp	r2, #0
   20fea:	d001      	beq.n	20ff0 <_printf_common+0x24>
   20fec:	3301      	adds	r3, #1
   20fee:	602b      	str	r3, [r5, #0]
   20ff0:	6823      	ldr	r3, [r4, #0]
   20ff2:	069b      	lsls	r3, r3, #26
   20ff4:	d502      	bpl.n	20ffc <_printf_common+0x30>
   20ff6:	682b      	ldr	r3, [r5, #0]
   20ff8:	3302      	adds	r3, #2
   20ffa:	602b      	str	r3, [r5, #0]
   20ffc:	2706      	movs	r7, #6
   20ffe:	6823      	ldr	r3, [r4, #0]
   21000:	401f      	ands	r7, r3
   21002:	d027      	beq.n	21054 <_printf_common+0x88>
   21004:	0023      	movs	r3, r4
   21006:	3343      	adds	r3, #67	; 0x43
   21008:	781b      	ldrb	r3, [r3, #0]
   2100a:	1e5a      	subs	r2, r3, #1
   2100c:	4193      	sbcs	r3, r2
   2100e:	6822      	ldr	r2, [r4, #0]
   21010:	0692      	lsls	r2, r2, #26
   21012:	d430      	bmi.n	21076 <_printf_common+0xaa>
   21014:	0022      	movs	r2, r4
   21016:	9901      	ldr	r1, [sp, #4]
   21018:	3243      	adds	r2, #67	; 0x43
   2101a:	9800      	ldr	r0, [sp, #0]
   2101c:	9e08      	ldr	r6, [sp, #32]
   2101e:	47b0      	blx	r6
   21020:	1c43      	adds	r3, r0, #1
   21022:	d025      	beq.n	21070 <_printf_common+0xa4>
   21024:	2306      	movs	r3, #6
   21026:	6820      	ldr	r0, [r4, #0]
   21028:	682a      	ldr	r2, [r5, #0]
   2102a:	68e1      	ldr	r1, [r4, #12]
   2102c:	4003      	ands	r3, r0
   2102e:	2500      	movs	r5, #0
   21030:	2b04      	cmp	r3, #4
   21032:	d103      	bne.n	2103c <_printf_common+0x70>
   21034:	1a8d      	subs	r5, r1, r2
   21036:	43eb      	mvns	r3, r5
   21038:	17db      	asrs	r3, r3, #31
   2103a:	401d      	ands	r5, r3
   2103c:	68a3      	ldr	r3, [r4, #8]
   2103e:	6922      	ldr	r2, [r4, #16]
   21040:	4293      	cmp	r3, r2
   21042:	dd01      	ble.n	21048 <_printf_common+0x7c>
   21044:	1a9b      	subs	r3, r3, r2
   21046:	18ed      	adds	r5, r5, r3
   21048:	2700      	movs	r7, #0
   2104a:	42bd      	cmp	r5, r7
   2104c:	d120      	bne.n	21090 <_printf_common+0xc4>
   2104e:	2000      	movs	r0, #0
   21050:	e010      	b.n	21074 <_printf_common+0xa8>
   21052:	3701      	adds	r7, #1
   21054:	68e3      	ldr	r3, [r4, #12]
   21056:	682a      	ldr	r2, [r5, #0]
   21058:	1a9b      	subs	r3, r3, r2
   2105a:	429f      	cmp	r7, r3
   2105c:	dad2      	bge.n	21004 <_printf_common+0x38>
   2105e:	0022      	movs	r2, r4
   21060:	2301      	movs	r3, #1
   21062:	3219      	adds	r2, #25
   21064:	9901      	ldr	r1, [sp, #4]
   21066:	9800      	ldr	r0, [sp, #0]
   21068:	9e08      	ldr	r6, [sp, #32]
   2106a:	47b0      	blx	r6
   2106c:	1c43      	adds	r3, r0, #1
   2106e:	d1f0      	bne.n	21052 <_printf_common+0x86>
   21070:	2001      	movs	r0, #1
   21072:	4240      	negs	r0, r0
   21074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   21076:	2030      	movs	r0, #48	; 0x30
   21078:	18e1      	adds	r1, r4, r3
   2107a:	3143      	adds	r1, #67	; 0x43
   2107c:	7008      	strb	r0, [r1, #0]
   2107e:	0021      	movs	r1, r4
   21080:	1c5a      	adds	r2, r3, #1
   21082:	3145      	adds	r1, #69	; 0x45
   21084:	7809      	ldrb	r1, [r1, #0]
   21086:	18a2      	adds	r2, r4, r2
   21088:	3243      	adds	r2, #67	; 0x43
   2108a:	3302      	adds	r3, #2
   2108c:	7011      	strb	r1, [r2, #0]
   2108e:	e7c1      	b.n	21014 <_printf_common+0x48>
   21090:	0022      	movs	r2, r4
   21092:	2301      	movs	r3, #1
   21094:	321a      	adds	r2, #26
   21096:	9901      	ldr	r1, [sp, #4]
   21098:	9800      	ldr	r0, [sp, #0]
   2109a:	9e08      	ldr	r6, [sp, #32]
   2109c:	47b0      	blx	r6
   2109e:	1c43      	adds	r3, r0, #1
   210a0:	d0e6      	beq.n	21070 <_printf_common+0xa4>
   210a2:	3701      	adds	r7, #1
   210a4:	e7d1      	b.n	2104a <_printf_common+0x7e>
	...

000210a8 <_printf_i>:
   210a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   210aa:	b08b      	sub	sp, #44	; 0x2c
   210ac:	9206      	str	r2, [sp, #24]
   210ae:	000a      	movs	r2, r1
   210b0:	3243      	adds	r2, #67	; 0x43
   210b2:	9307      	str	r3, [sp, #28]
   210b4:	9005      	str	r0, [sp, #20]
   210b6:	9204      	str	r2, [sp, #16]
   210b8:	7e0a      	ldrb	r2, [r1, #24]
   210ba:	000c      	movs	r4, r1
   210bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   210be:	2a6e      	cmp	r2, #110	; 0x6e
   210c0:	d100      	bne.n	210c4 <_printf_i+0x1c>
   210c2:	e08f      	b.n	211e4 <_printf_i+0x13c>
   210c4:	d817      	bhi.n	210f6 <_printf_i+0x4e>
   210c6:	2a63      	cmp	r2, #99	; 0x63
   210c8:	d02c      	beq.n	21124 <_printf_i+0x7c>
   210ca:	d808      	bhi.n	210de <_printf_i+0x36>
   210cc:	2a00      	cmp	r2, #0
   210ce:	d100      	bne.n	210d2 <_printf_i+0x2a>
   210d0:	e099      	b.n	21206 <_printf_i+0x15e>
   210d2:	2a58      	cmp	r2, #88	; 0x58
   210d4:	d054      	beq.n	21180 <_printf_i+0xd8>
   210d6:	0026      	movs	r6, r4
   210d8:	3642      	adds	r6, #66	; 0x42
   210da:	7032      	strb	r2, [r6, #0]
   210dc:	e029      	b.n	21132 <_printf_i+0x8a>
   210de:	2a64      	cmp	r2, #100	; 0x64
   210e0:	d001      	beq.n	210e6 <_printf_i+0x3e>
   210e2:	2a69      	cmp	r2, #105	; 0x69
   210e4:	d1f7      	bne.n	210d6 <_printf_i+0x2e>
   210e6:	6821      	ldr	r1, [r4, #0]
   210e8:	681a      	ldr	r2, [r3, #0]
   210ea:	0608      	lsls	r0, r1, #24
   210ec:	d523      	bpl.n	21136 <_printf_i+0x8e>
   210ee:	1d11      	adds	r1, r2, #4
   210f0:	6019      	str	r1, [r3, #0]
   210f2:	6815      	ldr	r5, [r2, #0]
   210f4:	e025      	b.n	21142 <_printf_i+0x9a>
   210f6:	2a73      	cmp	r2, #115	; 0x73
   210f8:	d100      	bne.n	210fc <_printf_i+0x54>
   210fa:	e088      	b.n	2120e <_printf_i+0x166>
   210fc:	d808      	bhi.n	21110 <_printf_i+0x68>
   210fe:	2a6f      	cmp	r2, #111	; 0x6f
   21100:	d029      	beq.n	21156 <_printf_i+0xae>
   21102:	2a70      	cmp	r2, #112	; 0x70
   21104:	d1e7      	bne.n	210d6 <_printf_i+0x2e>
   21106:	2220      	movs	r2, #32
   21108:	6809      	ldr	r1, [r1, #0]
   2110a:	430a      	orrs	r2, r1
   2110c:	6022      	str	r2, [r4, #0]
   2110e:	e003      	b.n	21118 <_printf_i+0x70>
   21110:	2a75      	cmp	r2, #117	; 0x75
   21112:	d020      	beq.n	21156 <_printf_i+0xae>
   21114:	2a78      	cmp	r2, #120	; 0x78
   21116:	d1de      	bne.n	210d6 <_printf_i+0x2e>
   21118:	0022      	movs	r2, r4
   2111a:	2178      	movs	r1, #120	; 0x78
   2111c:	3245      	adds	r2, #69	; 0x45
   2111e:	7011      	strb	r1, [r2, #0]
   21120:	4a6c      	ldr	r2, [pc, #432]	; (212d4 <_printf_i+0x22c>)
   21122:	e030      	b.n	21186 <_printf_i+0xde>
   21124:	000e      	movs	r6, r1
   21126:	681a      	ldr	r2, [r3, #0]
   21128:	3642      	adds	r6, #66	; 0x42
   2112a:	1d11      	adds	r1, r2, #4
   2112c:	6019      	str	r1, [r3, #0]
   2112e:	6813      	ldr	r3, [r2, #0]
   21130:	7033      	strb	r3, [r6, #0]
   21132:	2301      	movs	r3, #1
   21134:	e079      	b.n	2122a <_printf_i+0x182>
   21136:	0649      	lsls	r1, r1, #25
   21138:	d5d9      	bpl.n	210ee <_printf_i+0x46>
   2113a:	1d11      	adds	r1, r2, #4
   2113c:	6019      	str	r1, [r3, #0]
   2113e:	2300      	movs	r3, #0
   21140:	5ed5      	ldrsh	r5, [r2, r3]
   21142:	2d00      	cmp	r5, #0
   21144:	da03      	bge.n	2114e <_printf_i+0xa6>
   21146:	232d      	movs	r3, #45	; 0x2d
   21148:	9a04      	ldr	r2, [sp, #16]
   2114a:	426d      	negs	r5, r5
   2114c:	7013      	strb	r3, [r2, #0]
   2114e:	4b62      	ldr	r3, [pc, #392]	; (212d8 <_printf_i+0x230>)
   21150:	270a      	movs	r7, #10
   21152:	9303      	str	r3, [sp, #12]
   21154:	e02f      	b.n	211b6 <_printf_i+0x10e>
   21156:	6820      	ldr	r0, [r4, #0]
   21158:	6819      	ldr	r1, [r3, #0]
   2115a:	0605      	lsls	r5, r0, #24
   2115c:	d503      	bpl.n	21166 <_printf_i+0xbe>
   2115e:	1d08      	adds	r0, r1, #4
   21160:	6018      	str	r0, [r3, #0]
   21162:	680d      	ldr	r5, [r1, #0]
   21164:	e005      	b.n	21172 <_printf_i+0xca>
   21166:	0640      	lsls	r0, r0, #25
   21168:	d5f9      	bpl.n	2115e <_printf_i+0xb6>
   2116a:	680d      	ldr	r5, [r1, #0]
   2116c:	1d08      	adds	r0, r1, #4
   2116e:	6018      	str	r0, [r3, #0]
   21170:	b2ad      	uxth	r5, r5
   21172:	4b59      	ldr	r3, [pc, #356]	; (212d8 <_printf_i+0x230>)
   21174:	2708      	movs	r7, #8
   21176:	9303      	str	r3, [sp, #12]
   21178:	2a6f      	cmp	r2, #111	; 0x6f
   2117a:	d018      	beq.n	211ae <_printf_i+0x106>
   2117c:	270a      	movs	r7, #10
   2117e:	e016      	b.n	211ae <_printf_i+0x106>
   21180:	3145      	adds	r1, #69	; 0x45
   21182:	700a      	strb	r2, [r1, #0]
   21184:	4a54      	ldr	r2, [pc, #336]	; (212d8 <_printf_i+0x230>)
   21186:	9203      	str	r2, [sp, #12]
   21188:	681a      	ldr	r2, [r3, #0]
   2118a:	6821      	ldr	r1, [r4, #0]
   2118c:	1d10      	adds	r0, r2, #4
   2118e:	6018      	str	r0, [r3, #0]
   21190:	6815      	ldr	r5, [r2, #0]
   21192:	0608      	lsls	r0, r1, #24
   21194:	d522      	bpl.n	211dc <_printf_i+0x134>
   21196:	07cb      	lsls	r3, r1, #31
   21198:	d502      	bpl.n	211a0 <_printf_i+0xf8>
   2119a:	2320      	movs	r3, #32
   2119c:	4319      	orrs	r1, r3
   2119e:	6021      	str	r1, [r4, #0]
   211a0:	2710      	movs	r7, #16
   211a2:	2d00      	cmp	r5, #0
   211a4:	d103      	bne.n	211ae <_printf_i+0x106>
   211a6:	2320      	movs	r3, #32
   211a8:	6822      	ldr	r2, [r4, #0]
   211aa:	439a      	bics	r2, r3
   211ac:	6022      	str	r2, [r4, #0]
   211ae:	0023      	movs	r3, r4
   211b0:	2200      	movs	r2, #0
   211b2:	3343      	adds	r3, #67	; 0x43
   211b4:	701a      	strb	r2, [r3, #0]
   211b6:	6863      	ldr	r3, [r4, #4]
   211b8:	60a3      	str	r3, [r4, #8]
   211ba:	2b00      	cmp	r3, #0
   211bc:	db5c      	blt.n	21278 <_printf_i+0x1d0>
   211be:	2204      	movs	r2, #4
   211c0:	6821      	ldr	r1, [r4, #0]
   211c2:	4391      	bics	r1, r2
   211c4:	6021      	str	r1, [r4, #0]
   211c6:	2d00      	cmp	r5, #0
   211c8:	d158      	bne.n	2127c <_printf_i+0x1d4>
   211ca:	9e04      	ldr	r6, [sp, #16]
   211cc:	2b00      	cmp	r3, #0
   211ce:	d064      	beq.n	2129a <_printf_i+0x1f2>
   211d0:	0026      	movs	r6, r4
   211d2:	9b03      	ldr	r3, [sp, #12]
   211d4:	3642      	adds	r6, #66	; 0x42
   211d6:	781b      	ldrb	r3, [r3, #0]
   211d8:	7033      	strb	r3, [r6, #0]
   211da:	e05e      	b.n	2129a <_printf_i+0x1f2>
   211dc:	0648      	lsls	r0, r1, #25
   211de:	d5da      	bpl.n	21196 <_printf_i+0xee>
   211e0:	b2ad      	uxth	r5, r5
   211e2:	e7d8      	b.n	21196 <_printf_i+0xee>
   211e4:	6809      	ldr	r1, [r1, #0]
   211e6:	681a      	ldr	r2, [r3, #0]
   211e8:	0608      	lsls	r0, r1, #24
   211ea:	d505      	bpl.n	211f8 <_printf_i+0x150>
   211ec:	1d11      	adds	r1, r2, #4
   211ee:	6019      	str	r1, [r3, #0]
   211f0:	6813      	ldr	r3, [r2, #0]
   211f2:	6962      	ldr	r2, [r4, #20]
   211f4:	601a      	str	r2, [r3, #0]
   211f6:	e006      	b.n	21206 <_printf_i+0x15e>
   211f8:	0649      	lsls	r1, r1, #25
   211fa:	d5f7      	bpl.n	211ec <_printf_i+0x144>
   211fc:	1d11      	adds	r1, r2, #4
   211fe:	6019      	str	r1, [r3, #0]
   21200:	6813      	ldr	r3, [r2, #0]
   21202:	8aa2      	ldrh	r2, [r4, #20]
   21204:	801a      	strh	r2, [r3, #0]
   21206:	2300      	movs	r3, #0
   21208:	9e04      	ldr	r6, [sp, #16]
   2120a:	6123      	str	r3, [r4, #16]
   2120c:	e054      	b.n	212b8 <_printf_i+0x210>
   2120e:	681a      	ldr	r2, [r3, #0]
   21210:	1d11      	adds	r1, r2, #4
   21212:	6019      	str	r1, [r3, #0]
   21214:	6816      	ldr	r6, [r2, #0]
   21216:	2100      	movs	r1, #0
   21218:	6862      	ldr	r2, [r4, #4]
   2121a:	0030      	movs	r0, r6
   2121c:	f000 f922 	bl	21464 <memchr>
   21220:	2800      	cmp	r0, #0
   21222:	d001      	beq.n	21228 <_printf_i+0x180>
   21224:	1b80      	subs	r0, r0, r6
   21226:	6060      	str	r0, [r4, #4]
   21228:	6863      	ldr	r3, [r4, #4]
   2122a:	6123      	str	r3, [r4, #16]
   2122c:	2300      	movs	r3, #0
   2122e:	9a04      	ldr	r2, [sp, #16]
   21230:	7013      	strb	r3, [r2, #0]
   21232:	e041      	b.n	212b8 <_printf_i+0x210>
   21234:	6923      	ldr	r3, [r4, #16]
   21236:	0032      	movs	r2, r6
   21238:	9906      	ldr	r1, [sp, #24]
   2123a:	9805      	ldr	r0, [sp, #20]
   2123c:	9d07      	ldr	r5, [sp, #28]
   2123e:	47a8      	blx	r5
   21240:	1c43      	adds	r3, r0, #1
   21242:	d043      	beq.n	212cc <_printf_i+0x224>
   21244:	6823      	ldr	r3, [r4, #0]
   21246:	2500      	movs	r5, #0
   21248:	079b      	lsls	r3, r3, #30
   2124a:	d40f      	bmi.n	2126c <_printf_i+0x1c4>
   2124c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2124e:	68e0      	ldr	r0, [r4, #12]
   21250:	4298      	cmp	r0, r3
   21252:	da3d      	bge.n	212d0 <_printf_i+0x228>
   21254:	0018      	movs	r0, r3
   21256:	e03b      	b.n	212d0 <_printf_i+0x228>
   21258:	0022      	movs	r2, r4
   2125a:	2301      	movs	r3, #1
   2125c:	3219      	adds	r2, #25
   2125e:	9906      	ldr	r1, [sp, #24]
   21260:	9805      	ldr	r0, [sp, #20]
   21262:	9e07      	ldr	r6, [sp, #28]
   21264:	47b0      	blx	r6
   21266:	1c43      	adds	r3, r0, #1
   21268:	d030      	beq.n	212cc <_printf_i+0x224>
   2126a:	3501      	adds	r5, #1
   2126c:	68e3      	ldr	r3, [r4, #12]
   2126e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21270:	1a9b      	subs	r3, r3, r2
   21272:	429d      	cmp	r5, r3
   21274:	dbf0      	blt.n	21258 <_printf_i+0x1b0>
   21276:	e7e9      	b.n	2124c <_printf_i+0x1a4>
   21278:	2d00      	cmp	r5, #0
   2127a:	d0a9      	beq.n	211d0 <_printf_i+0x128>
   2127c:	9e04      	ldr	r6, [sp, #16]
   2127e:	0028      	movs	r0, r5
   21280:	0039      	movs	r1, r7
   21282:	f7fd f977 	bl	1e574 <__aeabi_uidivmod>
   21286:	9b03      	ldr	r3, [sp, #12]
   21288:	3e01      	subs	r6, #1
   2128a:	5c5b      	ldrb	r3, [r3, r1]
   2128c:	0028      	movs	r0, r5
   2128e:	7033      	strb	r3, [r6, #0]
   21290:	0039      	movs	r1, r7
   21292:	f7fd f8e9 	bl	1e468 <__udivsi3>
   21296:	1e05      	subs	r5, r0, #0
   21298:	d1f1      	bne.n	2127e <_printf_i+0x1d6>
   2129a:	2f08      	cmp	r7, #8
   2129c:	d109      	bne.n	212b2 <_printf_i+0x20a>
   2129e:	6823      	ldr	r3, [r4, #0]
   212a0:	07db      	lsls	r3, r3, #31
   212a2:	d506      	bpl.n	212b2 <_printf_i+0x20a>
   212a4:	6863      	ldr	r3, [r4, #4]
   212a6:	6922      	ldr	r2, [r4, #16]
   212a8:	4293      	cmp	r3, r2
   212aa:	dc02      	bgt.n	212b2 <_printf_i+0x20a>
   212ac:	2330      	movs	r3, #48	; 0x30
   212ae:	3e01      	subs	r6, #1
   212b0:	7033      	strb	r3, [r6, #0]
   212b2:	9b04      	ldr	r3, [sp, #16]
   212b4:	1b9b      	subs	r3, r3, r6
   212b6:	6123      	str	r3, [r4, #16]
   212b8:	9b07      	ldr	r3, [sp, #28]
   212ba:	aa09      	add	r2, sp, #36	; 0x24
   212bc:	9300      	str	r3, [sp, #0]
   212be:	0021      	movs	r1, r4
   212c0:	9b06      	ldr	r3, [sp, #24]
   212c2:	9805      	ldr	r0, [sp, #20]
   212c4:	f7ff fe82 	bl	20fcc <_printf_common>
   212c8:	1c43      	adds	r3, r0, #1
   212ca:	d1b3      	bne.n	21234 <_printf_i+0x18c>
   212cc:	2001      	movs	r0, #1
   212ce:	4240      	negs	r0, r0
   212d0:	b00b      	add	sp, #44	; 0x2c
   212d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   212d4:	00025440 	.word	0x00025440
   212d8:	0002542f 	.word	0x0002542f

000212dc <__sread>:
   212dc:	b570      	push	{r4, r5, r6, lr}
   212de:	000c      	movs	r4, r1
   212e0:	250e      	movs	r5, #14
   212e2:	5f49      	ldrsh	r1, [r1, r5]
   212e4:	f000 f8f0 	bl	214c8 <_read_r>
   212e8:	2800      	cmp	r0, #0
   212ea:	db03      	blt.n	212f4 <__sread+0x18>
   212ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
   212ee:	181b      	adds	r3, r3, r0
   212f0:	6563      	str	r3, [r4, #84]	; 0x54
   212f2:	bd70      	pop	{r4, r5, r6, pc}
   212f4:	89a3      	ldrh	r3, [r4, #12]
   212f6:	4a02      	ldr	r2, [pc, #8]	; (21300 <__sread+0x24>)
   212f8:	4013      	ands	r3, r2
   212fa:	81a3      	strh	r3, [r4, #12]
   212fc:	e7f9      	b.n	212f2 <__sread+0x16>
   212fe:	46c0      	nop			; (mov r8, r8)
   21300:	ffffefff 	.word	0xffffefff

00021304 <__swrite>:
   21304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21306:	001f      	movs	r7, r3
   21308:	898b      	ldrh	r3, [r1, #12]
   2130a:	0005      	movs	r5, r0
   2130c:	000c      	movs	r4, r1
   2130e:	0016      	movs	r6, r2
   21310:	05db      	lsls	r3, r3, #23
   21312:	d505      	bpl.n	21320 <__swrite+0x1c>
   21314:	230e      	movs	r3, #14
   21316:	5ec9      	ldrsh	r1, [r1, r3]
   21318:	2200      	movs	r2, #0
   2131a:	2302      	movs	r3, #2
   2131c:	f000 f88e 	bl	2143c <_lseek_r>
   21320:	89a3      	ldrh	r3, [r4, #12]
   21322:	4a05      	ldr	r2, [pc, #20]	; (21338 <__swrite+0x34>)
   21324:	0028      	movs	r0, r5
   21326:	4013      	ands	r3, r2
   21328:	81a3      	strh	r3, [r4, #12]
   2132a:	0032      	movs	r2, r6
   2132c:	230e      	movs	r3, #14
   2132e:	5ee1      	ldrsh	r1, [r4, r3]
   21330:	003b      	movs	r3, r7
   21332:	f000 f839 	bl	213a8 <_write_r>
   21336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21338:	ffffefff 	.word	0xffffefff

0002133c <__sseek>:
   2133c:	b570      	push	{r4, r5, r6, lr}
   2133e:	000c      	movs	r4, r1
   21340:	250e      	movs	r5, #14
   21342:	5f49      	ldrsh	r1, [r1, r5]
   21344:	f000 f87a 	bl	2143c <_lseek_r>
   21348:	89a3      	ldrh	r3, [r4, #12]
   2134a:	1c42      	adds	r2, r0, #1
   2134c:	d103      	bne.n	21356 <__sseek+0x1a>
   2134e:	4a05      	ldr	r2, [pc, #20]	; (21364 <__sseek+0x28>)
   21350:	4013      	ands	r3, r2
   21352:	81a3      	strh	r3, [r4, #12]
   21354:	bd70      	pop	{r4, r5, r6, pc}
   21356:	2280      	movs	r2, #128	; 0x80
   21358:	0152      	lsls	r2, r2, #5
   2135a:	4313      	orrs	r3, r2
   2135c:	81a3      	strh	r3, [r4, #12]
   2135e:	6560      	str	r0, [r4, #84]	; 0x54
   21360:	e7f8      	b.n	21354 <__sseek+0x18>
   21362:	46c0      	nop			; (mov r8, r8)
   21364:	ffffefff 	.word	0xffffefff

00021368 <__sclose>:
   21368:	b510      	push	{r4, lr}
   2136a:	230e      	movs	r3, #14
   2136c:	5ec9      	ldrsh	r1, [r1, r3]
   2136e:	f000 f82f 	bl	213d0 <_close_r>
   21372:	bd10      	pop	{r4, pc}

00021374 <strchr>:
   21374:	b2c9      	uxtb	r1, r1
   21376:	7803      	ldrb	r3, [r0, #0]
   21378:	2b00      	cmp	r3, #0
   2137a:	d004      	beq.n	21386 <strchr+0x12>
   2137c:	4299      	cmp	r1, r3
   2137e:	d100      	bne.n	21382 <strchr+0xe>
   21380:	4770      	bx	lr
   21382:	3001      	adds	r0, #1
   21384:	e7f7      	b.n	21376 <strchr+0x2>
   21386:	424b      	negs	r3, r1
   21388:	4159      	adcs	r1, r3
   2138a:	4249      	negs	r1, r1
   2138c:	4008      	ands	r0, r1
   2138e:	e7f7      	b.n	21380 <strchr+0xc>

00021390 <__ascii_wctomb>:
   21390:	1e0b      	subs	r3, r1, #0
   21392:	d004      	beq.n	2139e <__ascii_wctomb+0xe>
   21394:	2aff      	cmp	r2, #255	; 0xff
   21396:	d904      	bls.n	213a2 <__ascii_wctomb+0x12>
   21398:	238a      	movs	r3, #138	; 0x8a
   2139a:	6003      	str	r3, [r0, #0]
   2139c:	3b8b      	subs	r3, #139	; 0x8b
   2139e:	0018      	movs	r0, r3
   213a0:	4770      	bx	lr
   213a2:	700a      	strb	r2, [r1, #0]
   213a4:	2301      	movs	r3, #1
   213a6:	e7fa      	b.n	2139e <__ascii_wctomb+0xe>

000213a8 <_write_r>:
   213a8:	b570      	push	{r4, r5, r6, lr}
   213aa:	0005      	movs	r5, r0
   213ac:	0008      	movs	r0, r1
   213ae:	0011      	movs	r1, r2
   213b0:	2200      	movs	r2, #0
   213b2:	4c06      	ldr	r4, [pc, #24]	; (213cc <_write_r+0x24>)
   213b4:	6022      	str	r2, [r4, #0]
   213b6:	001a      	movs	r2, r3
   213b8:	f7f5 fc60 	bl	16c7c <_write>
   213bc:	1c43      	adds	r3, r0, #1
   213be:	d103      	bne.n	213c8 <_write_r+0x20>
   213c0:	6823      	ldr	r3, [r4, #0]
   213c2:	2b00      	cmp	r3, #0
   213c4:	d000      	beq.n	213c8 <_write_r+0x20>
   213c6:	602b      	str	r3, [r5, #0]
   213c8:	bd70      	pop	{r4, r5, r6, pc}
   213ca:	46c0      	nop			; (mov r8, r8)
   213cc:	20005610 	.word	0x20005610

000213d0 <_close_r>:
   213d0:	2300      	movs	r3, #0
   213d2:	b570      	push	{r4, r5, r6, lr}
   213d4:	4c06      	ldr	r4, [pc, #24]	; (213f0 <_close_r+0x20>)
   213d6:	0005      	movs	r5, r0
   213d8:	0008      	movs	r0, r1
   213da:	6023      	str	r3, [r4, #0]
   213dc:	f7f5 fca2 	bl	16d24 <_close>
   213e0:	1c43      	adds	r3, r0, #1
   213e2:	d103      	bne.n	213ec <_close_r+0x1c>
   213e4:	6823      	ldr	r3, [r4, #0]
   213e6:	2b00      	cmp	r3, #0
   213e8:	d000      	beq.n	213ec <_close_r+0x1c>
   213ea:	602b      	str	r3, [r5, #0]
   213ec:	bd70      	pop	{r4, r5, r6, pc}
   213ee:	46c0      	nop			; (mov r8, r8)
   213f0:	20005610 	.word	0x20005610

000213f4 <_fstat_r>:
   213f4:	2300      	movs	r3, #0
   213f6:	b570      	push	{r4, r5, r6, lr}
   213f8:	4c06      	ldr	r4, [pc, #24]	; (21414 <_fstat_r+0x20>)
   213fa:	0005      	movs	r5, r0
   213fc:	0008      	movs	r0, r1
   213fe:	0011      	movs	r1, r2
   21400:	6023      	str	r3, [r4, #0]
   21402:	f7f5 fc99 	bl	16d38 <_fstat>
   21406:	1c43      	adds	r3, r0, #1
   21408:	d103      	bne.n	21412 <_fstat_r+0x1e>
   2140a:	6823      	ldr	r3, [r4, #0]
   2140c:	2b00      	cmp	r3, #0
   2140e:	d000      	beq.n	21412 <_fstat_r+0x1e>
   21410:	602b      	str	r3, [r5, #0]
   21412:	bd70      	pop	{r4, r5, r6, pc}
   21414:	20005610 	.word	0x20005610

00021418 <_isatty_r>:
   21418:	2300      	movs	r3, #0
   2141a:	b570      	push	{r4, r5, r6, lr}
   2141c:	4c06      	ldr	r4, [pc, #24]	; (21438 <_isatty_r+0x20>)
   2141e:	0005      	movs	r5, r0
   21420:	0008      	movs	r0, r1
   21422:	6023      	str	r3, [r4, #0]
   21424:	f7f5 fc96 	bl	16d54 <_isatty>
   21428:	1c43      	adds	r3, r0, #1
   2142a:	d103      	bne.n	21434 <_isatty_r+0x1c>
   2142c:	6823      	ldr	r3, [r4, #0]
   2142e:	2b00      	cmp	r3, #0
   21430:	d000      	beq.n	21434 <_isatty_r+0x1c>
   21432:	602b      	str	r3, [r5, #0]
   21434:	bd70      	pop	{r4, r5, r6, pc}
   21436:	46c0      	nop			; (mov r8, r8)
   21438:	20005610 	.word	0x20005610

0002143c <_lseek_r>:
   2143c:	b570      	push	{r4, r5, r6, lr}
   2143e:	0005      	movs	r5, r0
   21440:	0008      	movs	r0, r1
   21442:	0011      	movs	r1, r2
   21444:	2200      	movs	r2, #0
   21446:	4c06      	ldr	r4, [pc, #24]	; (21460 <_lseek_r+0x24>)
   21448:	6022      	str	r2, [r4, #0]
   2144a:	001a      	movs	r2, r3
   2144c:	f7f5 fc8b 	bl	16d66 <_lseek>
   21450:	1c43      	adds	r3, r0, #1
   21452:	d103      	bne.n	2145c <_lseek_r+0x20>
   21454:	6823      	ldr	r3, [r4, #0]
   21456:	2b00      	cmp	r3, #0
   21458:	d000      	beq.n	2145c <_lseek_r+0x20>
   2145a:	602b      	str	r3, [r5, #0]
   2145c:	bd70      	pop	{r4, r5, r6, pc}
   2145e:	46c0      	nop			; (mov r8, r8)
   21460:	20005610 	.word	0x20005610

00021464 <memchr>:
   21464:	b2c9      	uxtb	r1, r1
   21466:	1882      	adds	r2, r0, r2
   21468:	4290      	cmp	r0, r2
   2146a:	d101      	bne.n	21470 <memchr+0xc>
   2146c:	2000      	movs	r0, #0
   2146e:	4770      	bx	lr
   21470:	7803      	ldrb	r3, [r0, #0]
   21472:	428b      	cmp	r3, r1
   21474:	d0fb      	beq.n	2146e <memchr+0xa>
   21476:	3001      	adds	r0, #1
   21478:	e7f6      	b.n	21468 <memchr+0x4>

0002147a <_realloc_r>:
   2147a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2147c:	0007      	movs	r7, r0
   2147e:	000d      	movs	r5, r1
   21480:	0016      	movs	r6, r2
   21482:	2900      	cmp	r1, #0
   21484:	d105      	bne.n	21492 <_realloc_r+0x18>
   21486:	0011      	movs	r1, r2
   21488:	f7fe fe9e 	bl	201c8 <_malloc_r>
   2148c:	0004      	movs	r4, r0
   2148e:	0020      	movs	r0, r4
   21490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21492:	2a00      	cmp	r2, #0
   21494:	d103      	bne.n	2149e <_realloc_r+0x24>
   21496:	f7fe fe4d 	bl	20134 <_free_r>
   2149a:	0034      	movs	r4, r6
   2149c:	e7f7      	b.n	2148e <_realloc_r+0x14>
   2149e:	f000 f827 	bl	214f0 <_malloc_usable_size_r>
   214a2:	002c      	movs	r4, r5
   214a4:	4286      	cmp	r6, r0
   214a6:	d9f2      	bls.n	2148e <_realloc_r+0x14>
   214a8:	0031      	movs	r1, r6
   214aa:	0038      	movs	r0, r7
   214ac:	f7fe fe8c 	bl	201c8 <_malloc_r>
   214b0:	1e04      	subs	r4, r0, #0
   214b2:	d0ec      	beq.n	2148e <_realloc_r+0x14>
   214b4:	0029      	movs	r1, r5
   214b6:	0032      	movs	r2, r6
   214b8:	f7fe fe18 	bl	200ec <memcpy>
   214bc:	0029      	movs	r1, r5
   214be:	0038      	movs	r0, r7
   214c0:	f7fe fe38 	bl	20134 <_free_r>
   214c4:	e7e3      	b.n	2148e <_realloc_r+0x14>
	...

000214c8 <_read_r>:
   214c8:	b570      	push	{r4, r5, r6, lr}
   214ca:	0005      	movs	r5, r0
   214cc:	0008      	movs	r0, r1
   214ce:	0011      	movs	r1, r2
   214d0:	2200      	movs	r2, #0
   214d2:	4c06      	ldr	r4, [pc, #24]	; (214ec <_read_r+0x24>)
   214d4:	6022      	str	r2, [r4, #0]
   214d6:	001a      	movs	r2, r3
   214d8:	f7f5 fba6 	bl	16c28 <_read>
   214dc:	1c43      	adds	r3, r0, #1
   214de:	d103      	bne.n	214e8 <_read_r+0x20>
   214e0:	6823      	ldr	r3, [r4, #0]
   214e2:	2b00      	cmp	r3, #0
   214e4:	d000      	beq.n	214e8 <_read_r+0x20>
   214e6:	602b      	str	r3, [r5, #0]
   214e8:	bd70      	pop	{r4, r5, r6, pc}
   214ea:	46c0      	nop			; (mov r8, r8)
   214ec:	20005610 	.word	0x20005610

000214f0 <_malloc_usable_size_r>:
   214f0:	1f0b      	subs	r3, r1, #4
   214f2:	681b      	ldr	r3, [r3, #0]
   214f4:	1f18      	subs	r0, r3, #4
   214f6:	2b00      	cmp	r3, #0
   214f8:	da01      	bge.n	214fe <_malloc_usable_size_r+0xe>
   214fa:	580b      	ldr	r3, [r1, r0]
   214fc:	18c0      	adds	r0, r0, r3
   214fe:	4770      	bx	lr

00021500 <pcWelcomeMessage>:
   21500:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   21510:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   21520:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   21530:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   21540:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   21550:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   21560:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   21570:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   21580:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   21590:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   215a0:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   215b0:	7375 0a0d 0000 0000 6576 7372 6f69 006e     us......version.
   215c0:	6576 7372 6f69 3a6e 5020 6972 746e 2073     version: Prints 
   215d0:	6874 2065 6966 6d72 6177 6572 7620 7265     the firmware ver
   215e0:	6973 6e6f 0d2e 000a 6974 6b63 0073 0000     sion....ticks...
   215f0:	6974 6b63 3a73 5020 6972 746e 2073 6874     ticks: Prints th
   21600:	2065 756e 626d 7265 6f20 2066 6974 6b63     e number of tick
   21610:	2073 6973 636e 2065 6874 2065 6373 6568     s since the sche
   21620:	7564 656c 2072 7473 7261 6574 2e64 0a0d     duler started...
   21630:	0000 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   21640:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   21650:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   21660:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   21670:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   21680:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   21690:	6325 325b 004a 0000 2e30 2e30 0031 0000     %c[2J...0.0.1...
   216a0:	6946 6d72 6177 6572 5620 7265 6973 6e6f     Firmware Version
   216b0:	203a 7325 0a0d 0000 6954 6b63 2073 6973     : %s....Ticks si
   216c0:	636e 2065 7473 7261 3a74 2520 756c 0a0d     nce start: %lu..
   216d0:	0000 0000 2030 3120 2020 2032 3320 2020     ....0  1  2  3  
   216e0:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   216f0:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   21700:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   21710:	2058 0000                                   X ..

00021714 <xOTAUCommand>:
   21714:	1544 0002 1548 0002 1099 0000 0000 0000     D...H...........

00021724 <xResetCommand>:
   21724:	1578 0002 1580 0002 10b9 0000 0000 0000     x...............

00021734 <xI2cScan>:
   21734:	159c 0002 15a0 0002 1141 0000 0000 0000     ........A.......

00021744 <xVersionCommand>:
   21744:	15b8 0002 15c0 0002 10d9 0000 0000 0000     ................

00021754 <xTicksCommand>:
   21754:	15e8 0002 15f0 0002 1109 0000 0000 0000     ................

00021764 <xClearScreen>:
   21764:	1634 0002 1638 0002 1051 0000 0000 0000     4...8...Q.......

00021774 <main_mqtt_broker>:
   21774:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   21784:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   21794:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   217a4:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   217b4:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   217c4:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   217d4:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   217e4:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   217f4:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   21804:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   21814:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   21824:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   21834:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   21844:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   21854:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   21864:	2e2e 0d2e 000a 0000 7468 7074 2f3a 322f     ........http://2
   21874:	2e30 3332 2e31 3032 2e35 3032 2f33 6f49     0.231.205.203/Io
   21884:	2e54 6470 0066 0000 7473 726f 5f65 6966     T.pdf...store_fi
   21894:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   218a4:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   218b4:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   218c4:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   218d4:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   218e4:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   218f4:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   21904:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   21914:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   21924:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   21934:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   21944:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   21954:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   21964:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   21974:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   21984:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   21994:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   219a4:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   219b4:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   219c4:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   219d4:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   219e4:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   219f4:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   21a04:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   21a14:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   21a24:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   21a34:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   21a44:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   21a54:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   21a64:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   21a74:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   21a84:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   21a94:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   21aa4:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   21ab4:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   21ac4:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   21ad4:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   21ae4:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   21af4:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   21b04:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   21b14:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   21b24:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   21b34:	7564 6b6e 6e69 616b 6b6d 6168 006f 0000     dunkinkamkhao...
   21b44:	6854 6572 2065 754d 6b73 7465 6565 7372     Three Musketeers
   21b54:	0000 0000 6977 6966 635f 3a62 4920 2050     ....wifi_cb: IP 
   21b64:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   21b74:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
   21b84:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
   21b94:	514d 5454 4220 6f72 656b 2172 0a0d 0000     MQTT Broker!....
   21ba4:	6e69 7469 735f 6f74 6172 6567 203a 6c70     init_storage: pl
   21bb4:	6165 6573 7020 756c 2067 6e61 5320 2f44     ease plug an SD/
   21bc4:	4d4d 2043 6163 6472 6920 206e 6c73 746f     MMC card in slot
   21bd4:	2e2e 0d2e 000a 0000 6e69 7469 735f 6f74     ........init_sto
   21be4:	6172 6567 203a 4453 4320 7261 2064 6e69     rage: SD Card in
   21bf4:	7473 6c61 206c 6166 6c69 6465 0d2e 000a     stall failed....
   21c04:	6e69 7469 735f 6f74 6172 6567 203a 7274     init_storage: tr
   21c14:	2079 6e75 6c70 6775 6120 646e 7220 2d65     y unplug and re-
   21c24:	6c70 6775 7420 6568 6320 7261 2e64 0a0d     plug the card...
   21c34:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   21c44:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   21c54:	6472 2e2e 0d2e 000a 6e69 7469 735f 6f74     rd......init_sto
   21c64:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   21c74:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   21c84:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   21c94:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   21ca4:	6e75 2074 4b4f 0d2e 000a 0000 6f63 666e     unt OK......conf
   21cb4:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   21cc4:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   21cd4:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   21ce4:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   21cf4:	0000 0000 0a0d 2520 2a2e 0073 6772 2862     ...... %.*s.rgb(
   21d04:	0000 0000 0a0d 4752 2042 6425 2520 2064     ......RGB %d %d 
   21d14:	6425 0a0d 0000 0000 227b 6167 656d 3a22     %d......{"game":
   21d24:	005b 0000 0a0d 6147 656d 6d20 7365 6173     [.....Game messa
   21d34:	6567 7220 6365 6965 6576 2164 0a0d 0000     ge received!....
   21d44:	2e25 732a 0000 0000 0a0d 6150 7372 6465     %.*s......Parsed
   21d54:	4320 6d6f 616d 646e 203a 0000 6425 002c      Command: ..%d,.
   21d64:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   21d74:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   21d84:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   21d94:	0a0d 4d49 2055 6f74 6970 2063 6572 6563     ..IMU topic rece
   21da4:	7669 6465 0d21 000a 0a0d 6944 7473 6e61     ived!.....Distan
   21db4:	6563 7420 706f 6369 7220 6365 6965 6576     ce topic receive
   21dc4:	2164 0a0d 0000 0000 3e20 203e 0000 0000     d!...... >> ....
   21dd4:	3150 4c5f 4445 455f 4553 3135 5f36 3054     P1_LED_ESE516_T0
   21de4:	0000 0000 6166 736c 0065 0000 7274 6575     ....false...true
   21df4:	0000 0000 0a0d 6f43 6e6e 6365 6974 676e     ......Connecting
   21e04:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   21e14:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
   21e24:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
   21e34:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   21e44:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   21e54:	0d72 000a 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   21e64:	6465 7420 206f 7262 6b6f 7265 0a0d 0000     ed to broker....
   21e74:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   21e84:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   21e94:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   21ea4:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   21eb4:	5345 3545 3631 545f 0030 0000 3150 495f     ESE516_T0...P1_I
   21ec4:	554d 455f 4553 3135 5f36 3054 0000 0000     MU_ESE516_T0....
   21ed4:	514d 5454 4320 6e6f 656e 7463 6465 0a0d     MQTT Connected..
   21ee4:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
   21ef4:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   21f04:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   21f14:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   21f24:	6f63 6e6e 6365 6574 0d64 000a 514d 5454     connected...MQTT
   21f34:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   21f44:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   21f54:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   21f64:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   21f74:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   21f84:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   21f94:	0d29 000a 227b 2264 7b3a 7422 6d65 2270     )...{"d":{"temp"
   21fa4:	253a 7d64 007d 0000 465b 4941 5d4c 7220     :%d}}...[FAIL] r
   21fb4:	7365 2520 0d64 000a 6c46 6761 2e41 7874     es %d...FlagA.tx
   21fc4:	2074 6461 6564 2164 0a0d 0000 3a30 6c46     t added!....0:Fl
   21fd4:	6761 2e41 7874 0074 6f43 6e6e 6365 6574     agA.txt.Connecte
   21fe4:	2064 6f74 4d20 5451 2054 7242 6b6f 7265     d to MQTT Broker
   21ff4:	0d21 000a 227b 6d69 7875 3a22 6425 202c     !...{"imux":%d, 
   22004:	6922 756d 2279 203a 6425 202c 6922 756d     "imuy": %d, "imu
   22014:	227a 203a 6425 007d 6425 0000 7d5d 0000     z": %d}.%d..]}..
   22024:	0a0d 0000 3250 475f 4d41 5f45 5345 3545     ....P2_GAME_ESE5
   22034:	3631 545f 0030 0000 5245 4f52 2052 6e49     16_T0...ERROR In
   22044:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   22054:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   22064:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   22074:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   22084:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   22094:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   220a4:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   220b4:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   220c4:	4120 2050 7325 2e2e 0d2e 000a 3150 545f      AP %s......P1_T
   220d4:	4d45 4550 4152 5554 4552 455f 4553 3135     EMPERATURE_ESE51
   220e4:	5f36 3054 0000 0000 514d 5454 7320 6e65     6_T0....MQTT sen
   220f4:	2064 7325 0a0d 0000 1fe4 0000 1ff0 0000     d %s............
   22104:	2002 0000 2058 0000 2078 0000 6568 706c     . ..X ..x ..help
   22114:	0000 0000 0a0d 6568 706c 0d3a 200a 694c     ......help:.. Li
   22124:	7473 2073 6c61 206c 6874 2065 6572 6967     sts all the regi
   22134:	7473 7265 6465 6320 6d6f 616d 646e 0d73     stered commands.
   22144:	0d0a 000a 6e49 6f63 7272 6365 2074 6f63     ....Incorrect co
   22154:	6d6d 6e61 2064 6170 6172 656d 6574 2872     mmand parameter(
   22164:	2973 202e 4520 746e 7265 2220 6568 706c     s).  Enter "help
   22174:	2022 6f74 7620 6569 2077 2061 696c 7473     " to view a list
   22184:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   22194:	6d6d 6e61 7364 0d2e 0d0a 000a 6f43 6d6d     mmands......Comm
   221a4:	6e61 2064 6f6e 2074 6572 6f63 6e67 7369     and not recognis
   221b4:	6465 202e 4520 746e 7265 2720 6568 706c     ed.  Enter 'help
   221c4:	2027 6f74 7620 6569 2077 2061 696c 7473     ' to view a list
   221d4:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   221e4:	6d6d 6e61 7364 0d2e 0d0a 000a               mmands......

000221f0 <xHelpCommand>:
   221f0:	2110 0002 2118 0002 3b99 0000 0000 0000     .!...!...;......
   22200:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   22210:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   22220:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   22230:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   22240:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   22250:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   22260:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   22270:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   22280:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   22290:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   222a0:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   222b0:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   222c0:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   222d0:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   222e0:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   222f0:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   22300:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   22310:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   22320:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   22330:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   22340:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   22350:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   22360:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   22370:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   22380:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   22390:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   223a0:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   223b0:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   223c0:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   223d0:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   223e0:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   223f0:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   22400:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   22410:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   22420:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   22430:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   22440:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   22450:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   22460:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   22470:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   22480:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   22490:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   224a0:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   224b0:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   224c0:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   224d0:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   224e0:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   224f0:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   22500:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   22510:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   22520:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   22530:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   22540:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   22550:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   22560:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   22570:	6365 6374 616c 7373 0021 0000 42be 0000     ectclass!....B..
   22580:	42b6 0000 42ba 0000 42ae 0000 42b2 0000     .B...B...B...B..
   22590:	42c2 0000 42c6 0000 42ca 0000 42ce 0000     .B...B...B...B..
   225a0:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   225b0:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   225c0:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   225d0:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   225e0:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   225f0:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   22600:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   22610:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   22620:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   22630:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   22640:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   22650:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   22660:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   22670:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   22680:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   22690:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   226a0:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   226b0:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   226c0:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   226d0:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   226e0:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   226f0:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   22700:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   22710:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   22720:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   22730:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   22740:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   22750:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   22760:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   22770:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   22780:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   22790:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   227a0:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   227b0:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   227c0:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   227d0:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   227e0:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   227f0:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   22800:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   22810:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   22820:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   22830:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   22840:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   22850:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   22860:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   22870:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   22880:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   22890:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   228a0:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   228b0:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   228c0:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   228d0:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   228e0:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   228f0:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   22900:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   22910:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   22920:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   22930:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   22940:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   22950:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   22960:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   22970:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   22980:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   22990:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   229a0:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   229b0:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   229c0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   229d0:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   229e0:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   229f0:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   22a00:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   22a10:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   22a20:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   22a30:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   22a40:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   22a50:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   22a60:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   22a70:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   22a80:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   22a90:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   22aa0:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   22ab0:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   22ac0:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   22ad0:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   22ae0:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   22af0:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   22b00:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   22b10:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   22b20:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   22b30:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   22b40:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   22b50:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   22b60:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   22b70:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   22b80:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   22b90:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   22ba0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   22bb0:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   22bc0:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   22bd0:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   22be0:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   22bf0:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   22c00:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   22c10:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   22c20:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   22c30:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   22c40:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   22c50:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   22c60:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   22c70:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   22c80:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   22c90:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   22ca0:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   22cb0:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   22cc0:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   22cd0:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   22ce0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   22cf0:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   22d00:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   22d10:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   22d20:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   22d30:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   22d40:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   22d50:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   22d60:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   22d70:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   22d80:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   22d90:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   22da0:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   22db0:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   22dc0:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   22dd0:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   22de0:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   22df0:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   22e00:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   22e10:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   22e20:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   22e30:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   22e40:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   22e50:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   22e60:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   22e70:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   22e80:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   22e90:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   22ea0:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   22eb0:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   22ec0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   22ed0:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   22ee0:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   22ef0:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   22f00:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   22f10:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   22f20:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   22f30:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   22f40:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   22f50:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   22f60:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   22f70:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   22f80:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   22f90:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   22fa0:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   22fb0:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   22fc0:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   22fd0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   22fe0:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   22ff0:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   23000:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   23010:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   23020:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   23030:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   23040:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   23050:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23060:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   23070:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   23080:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   23090:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   230a0:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   230b0:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   230c0:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   230d0:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   230e0:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   230f0:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   23100:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   23110:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   23120:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   23130:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   23140:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   23150:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   23160:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   23170:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   23180:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   23190:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   231a0:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   231b0:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   231c0:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   231d0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   231e0:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   231f0:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   23200:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   23210:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   23220:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   23230:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   23240:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   23250:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   23260:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23270:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   23280:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   23290:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   232a0:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   232b0:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   232c0:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   232d0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   232e0:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   232f0:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   23300:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   23310:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   23320:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   23330:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   23340:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   23350:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   23360:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   23370:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   23380:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   23390:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   233a0:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   233b0:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   233c0:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   233d0:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   233e0:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   233f0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   23400:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   23410:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   23420:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   23430:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   23440:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   23450:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   23460:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   23470:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   23480:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   23490:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   234a0:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   234b0:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   234c0:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   234d0:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   234e0:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   234f0:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   23500:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   23510:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   23520:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   23530:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   23540:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   23550:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   23560:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   23570:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   23580:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   23590:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   235a0:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   235b0:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   235c0:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   235d0:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   235e0:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   235f0:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   23600:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   23610:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   23620:	0000 0000 6d54 2072 7653 0063 935c 0000     ....Tmr Svc.\...
   23630:	935c 0000 935c 0000 93ea 0000 93b4 0000     \...\...........
   23640:	93de 0000 935c 0000 935c 0000 93ea 0000     ....\...\.......
   23650:	93b4 0000                                   ....

00023654 <sd_mmc_trans_units>:
   23654:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00023670 <sd_trans_multipliers>:
   23670:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   23680:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   23690:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   236a0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

000236b0 <mmc_trans_multipliers>:
   236b0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   236c0:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   236d0:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   236e0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   236f0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   23700:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   23710:	746c 6320 646d 000a 000d 0000               lt cmd......

0002371c <__FUNCTION__.16824>:
   2371c:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   2372c:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   2373c:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   2374c:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   2375c:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   2376c:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   2377c:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   2378c:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   2379c:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   237ac:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   237bc:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   237cc:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   237dc:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   237ec:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   237fc:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   2380c:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   2381c:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   2382c:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   2383c:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   2384c:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   2385c:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   2386c:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   2387c:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   2388c:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   2389c:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   238ac:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   238bc:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   238cc:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   238dc:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   238ec:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   238fc:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   2390c:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   2391c:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   2392c:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   2393c:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   2394c:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   2395c:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   2396c:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   2397c:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   2398c:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   2399c:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   239ac:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   239bc:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   239cc:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   239dc:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   239ec:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   239fc:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   23a0c:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   23a1c:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   23a2c:	203f 6425 000a 0000 d4fc 0000 d4cc 0000     ? %d............
   23a3c:	d4c4 0000 d4dc 0000 d4d4 0000 d4f4 0000     ................
   23a4c:	d4e4 0000 d4ec 0000                         ........

00023a54 <__FUNCTION__.17692>:
   23a54:	6968 5f66 6573 646e 0000 0000               hif_send....

00023a60 <__FUNCTION__.17702>:
   23a60:	6968 5f66 7369 0072                         hif_isr.

00023a68 <__FUNCTION__.17711>:
   23a68:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00023a78 <__FUNCTION__.17723>:
   23a78:	6968 5f66 6572 6563 7669 0065               hif_receive.

00023a84 <__FUNCTION__.17739>:
   23a84:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   23a94:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   23aa4:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   23ab4:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   23ac4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   23ad4:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   23ae4:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   23af4:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   23b04:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   23b14:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   23b24:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   23b34:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   23b44:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   23b54:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   23b64:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   23b74:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   23b84:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   23b94:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   23ba4:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   23bb4:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   23bc4:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   23bd4:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   23be4:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   23bf4:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   23c04:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   23c14:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   23c24:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   23c34:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   23c44:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   23c54:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   23c64:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   23c74:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   23c84:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   23c94:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   23ca4:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   23cb4:	000a 0000 3431 303a 3a33 3431 0000 0000     ....14:03:14....
   23cc4:	614d 2072 3831 3220 3230 0034 7244 7669     Mar 18 2024.Driv
   23cd4:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   23ce4:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   23cf4:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   23d04:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   23d14:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   23d24:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   23d34:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   23d44:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   23d54:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   23d64:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   23d74:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   23d84:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   23d94:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   23da4:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   23db4:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   23dc4:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   23dd4:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   23de4:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   23df4:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   23e04:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   23e14:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   23e24:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   23e34:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   23e44:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   23e54:	4220 6675 6566 0a72 0000 0000                Buffer.....

00023e60 <__FUNCTION__.17674>:
   23e60:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00023e6c <__FUNCTION__.17703>:
   23e6c:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00023e7c <__FUNCTION__.17734>:
   23e7c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   23e8c:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   23e9c:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   23eac:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   23ebc:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   23ecc:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   23edc:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   23eec:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   23efc:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   23f0c:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00023f1c <__FUNCTION__.17531>:
   23f1c:	6863 7069 775f 6b61 0065 0000               chip_wake...

00023f28 <__FUNCTION__.17580>:
   23f28:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   23f38:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   23f48:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   23f58:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   23f68:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   23f78:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   23f88:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   23f98:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   23fa8:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   23fb8:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   23fc8:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   23fd8:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   23fe8:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   23ff8:	6920 696e 2074 7562 0a73 0000                init bus...

00024004 <__FUNCTION__.17578>:
   24004:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00024010 <__FUNCTION__.17585>:
   24010:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00024020 <crc7_syndrome_table>:
   24020:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   24030:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   24040:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   24050:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   24060:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   24070:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   24080:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   24090:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   240a0:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   240b0:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   240c0:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   240d0:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   240e0:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   240f0:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   24100:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   24110:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   24120:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   24130:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   24140:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   24150:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   24160:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   24170:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   24180:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   24190:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   241a0:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   241b0:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   241c0:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   241d0:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   241e0:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   241f0:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   24200:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   24210:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   24220:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   24230:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   24240:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   24250:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   24260:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   24270:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   24280:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   24290:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   242a0:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   242b0:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   242c0:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   242d0:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   242e0:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   242f0:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   24300:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   24310:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   24320:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   24330:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   24340:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   24350:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   24360:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   24370:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   24380:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   24390:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   243a0:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   243b0:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   243c0:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   243d0:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   243e0:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   243f0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   24400:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   24410:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   24420:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   24430:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   24440:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   24450:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   24460:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   24470:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   24480:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   24490:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   244a0:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   244b0:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   244c0:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   244d0:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   244e0:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   244f0:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   24500:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   24510:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   24520:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   24530:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   24540:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   24550:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   24560:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   24570:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   24580:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   24590:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   245a0:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   245b0:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   245c0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   245d0:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   245e0:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   245f0:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   24600:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   24610:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   24620:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   24630:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   24640:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   24650:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   24660:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   24670:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   24680:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   24690:	2e2e 0a2e 0000 0000 f124 0000 f124 0000     ........$...$...
   246a0:	f1b4 0000 f078 0000 f0be 0000 f0e0 0000     ....x...........
   246b0:	f166 0000 f166 0000 f220 0000 f04c 0000     f...f... ...L...
   246c0:	f27a 0000 f27a 0000 f27a 0000 f27a 0000     z...z...z...z...
   246d0:	f102 0000 f684 0000 f684 0000 f70c 0000     ................
   246e0:	f5e8 0000 f62a 0000 f648 0000 f6c2 0000     ....*...H.......
   246f0:	f6c2 0000 f76e 0000 f5c0 0000 f7be 0000     ....n...........
   24700:	f7be 0000 f7be 0000 f7be 0000 f666 0000     ............f...

00024710 <__FUNCTION__.16853>:
   24710:	7073 5f69 6d63 0064                         spi_cmd.

00024718 <__FUNCTION__.16860>:
   24718:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00024728 <__FUNCTION__.16869>:
   24728:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00024734 <__FUNCTION__.16902>:
   24734:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   24744:	0000 0000                                   ....

00024748 <__FUNCTION__.16948>:
   24748:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00024758 <__FUNCTION__.16960>:
   24758:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00024768 <__FUNCTION__.16971>:
   24768:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00024778 <__FUNCTION__.16983>:
   24778:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00024788 <__FUNCTION__.16994>:
   24788:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00024794 <__FUNCTION__.17015>:
   24794:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   247a4:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   247b4:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   247c4:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   247d4:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   247e4:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   247f4:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   24804:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   24814:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   24824:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   24834:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   24844:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   24854:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   24864:	2074 2230 0000 0000                         t 0"....

0002486c <lun_desc>:
   2486c:	ad81 0000 add9 0000 ae25 0000 ae71 0000     ........%...q...
   2487c:	aea1 0000 af25 0000 afb5 0000 4854 0002     ....%.......TH..
   2488c:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   2489c:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   248ac:	50a2 0001 511c 0001 511c 0001 50c0 0001     .P...Q...Q...P..
   248bc:	50ba 0001 50c6 0001 50a8 0001 50cc 0001     .P...P...P...P..
   248cc:	5102 0001 5304 0001 5354 0001 5354 0001     .Q...S..TS..TS..
   248dc:	5350 0001 52f6 0001 5316 0001 52e6 0001     PS...R...S...R..
   248ec:	5328 0001 533a 0001 53a2 0001 53d0 0001     (S..:S...S...S..
   248fc:	53d0 0001 53cc 0001 539c 0001 53a8 0001     .S...S...S...S..
   2490c:	5396 0001 53ae 0001 53b4 0001               .S...S...S..

00024918 <tcc_modules>:
   24918:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00024924 <_tcc_gclk_ids>:
   24924:	1a1a 001b                                   ....

00024928 <_tcc_apbcmasks>:
   24928:	0100 0000 0200 0000 0400 0000               ............

00024934 <_tcc_maxs>:
   24934:	ffff 00ff ffff 00ff ffff 0000               ............

00024940 <_tcc_cc_nums>:
   24940:	0204 0002                                   ....

00024944 <_tcc_ow_nums>:
   24944:	0408 0002                                   ....

00024948 <_tcc_intflag>:
   24948:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   24958:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   24968:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00024978 <LfnOfs>:
   24978:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   24988:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   24998:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   249a8:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   249b8:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   249c8:	5441 2020 2020 0020                         AT     .

000249d0 <excvt.4558>:
   249d0:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   249e0:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   249f0:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   24a00:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   24a10:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   24a20:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   24a30:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   24a40:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00024a50 <Tbl>:
   24a50:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   24a60:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   24a70:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   24a80:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   24a90:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   24aa0:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   24ab0:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   24ac0:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   24ad0:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   24ae0:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   24af0:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   24b00:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   24b10:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   24b20:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   24b30:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   24b40:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00024b50 <tbl_lower.4308>:
   24b50:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   24b60:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   24b70:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   24b80:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   24b90:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   24ba0:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   24bb0:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   24bc0:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   24bd0:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   24be0:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   24bf0:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   24c00:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   24c10:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   24c20:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   24c30:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   24c40:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   24c50:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   24c60:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   24c70:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   24c80:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   24c90:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   24ca0:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   24cb0:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   24cc0:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   24cd0:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   24ce0:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   24cf0:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   24d00:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   24d10:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   24d20:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00024d30 <tbl_upper.4309>:
   24d30:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   24d40:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   24d50:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   24d60:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   24d70:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   24d80:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   24d90:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   24da0:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   24db0:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   24dc0:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   24dd0:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   24de0:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   24df0:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   24e00:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   24e10:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   24e20:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   24e30:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   24e40:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   24e50:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   24e60:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   24e70:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   24e80:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   24e90:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   24ea0:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   24eb0:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   24ec0:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   24ed0:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   24ee0:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   24ef0:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   24f00:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   24f10:	a70e 0001 a70e 0001 a70e 0001 a59c 0001     ................
   24f20:	a70e 0001 a686 0001 a70e 0001 a70e 0001     ................
   24f30:	a70e 0001 a70e 0001 a70e 0001 a70e 0001     ................
   24f40:	a70e 0001 a700 0001 514d 4354 0000 0000     ........MQTC....
   24f50:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   24f60:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   24fa0:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   24fb8:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   24ff8:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   25008:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   25018:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   25028:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   25038:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   25048:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   25058:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   25068:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   25078:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   25088:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   25098:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   250a8:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   250b8:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   250c8:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   250d8:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   250e8:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   250f8:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   25108:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   25118:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   25128:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   25138:	5448 5054 002f 0000 0d31 0000 c802 0001     HTTP/...1.......
   25148:	c7fc 0001 c7f6 0001 c7f0 0001 c808 0001     ................
   25158:	c7ea 0001 c808 0001 c7e4 0001 c7de 0001     ................
   25168:	c808 0001 c7d8 0001 c7d8 0001 c7d2 0001     ................
   25178:	c7cc 0001 c7c6 0001 2000 4200 2400 4200     ......... .B.$.B
   25188:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   25198:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   251a8:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   251b8:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   251c8:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   251d8:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   251e8:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   251f8:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   25208:	6548 7061 6220 6665 726f 2065 7473 7261     Heap before star
   25218:	6974 676e 7420 7361 736b 203a 6425 0a0d     ting tasks: %d..
   25228:	0000 0000 4c43 5f49 4154 4b53 0000 0000     ....CLI_TASK....
   25238:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   25248:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   25258:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   25268:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   25278:	4c43 3a49 2520 0d64 000a 0000 4957 4946     CLI: %d.....WIFI
   25288:	545f 5341 004b 0000 5245 3a52 5720 4649     _TASK...ERR: WIF
   25298:	2049 6174 6b73 6320 756f 646c 6e20 746f     I task could not
   252a8:	6220 2065 6e69 7469 6169 696c 657a 2164      be initialized!
   252b8:	0a0d 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   252c8:	6174 7472 6e69 2067 4957 4946 203a 6425     tarting WIFI: %d
   252d8:	0a0d 0000 7245 6f72 2072 6e6f 6d20 6d65     ....Error on mem
   252e8:	726f 2079 6c61 6f6c 6163 6974 6e6f 6f20     ory allocation o
   252f8:	206e 5246 4545 5452 534f 0d21 000a 0000     n FREERTOS!.....
   25308:	7245 6f72 2072 6e6f 7320 6174 6b63 6f20     Error on stack o
   25318:	6576 6672 6f6c 2077 6e6f 4620 4552 5245     verflow on FREER
   25328:	4f54 2153 0a0d 0000 efc0 0001 efa2 0001     TOS!............
   25338:	ef5c 0001 ee7a 0001 ef5c 0001 ef94 0001     \...z...\.......
   25348:	ef5c 0001 ee7a 0001 efa2 0001 efa2 0001     \...z...........
   25358:	ef94 0001 ee7a 0001 ee72 0001 ee72 0001     ....z...r...r...
   25368:	ee72 0001 f1d8 0001 f620 0001 f4e0 0001     r....... .......
   25378:	f4e0 0001 f4dc 0001 f5f8 0001 f5f8 0001     ................
   25388:	f5ea 0001 f4dc 0001 f5f8 0001 f5ea 0001     ................
   25398:	f5f8 0001 f4dc 0001 f600 0001 f600 0001     ................
   253a8:	f600 0001 f804 0001                         ........

000253b0 <_global_impure_ptr>:
   253b0:	0118 2000                                   ... 

000253b4 <__sf_fake_stderr>:
	...

000253d4 <__sf_fake_stdin>:
	...

000253f4 <__sf_fake_stdout>:
	...
   25414:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   25424:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   25434:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   25444:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00025451 <_ctype_>:
   25451:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   25461:	2020 2020 2020 2020 2020 2020 2020 2020                     
   25471:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   25481:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   25491:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   254a1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   254b1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   254c1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   254d1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00025554 <_init>:
   25554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25556:	46c0      	nop			; (mov r8, r8)
   25558:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2555a:	bc08      	pop	{r3}
   2555c:	469e      	mov	lr, r3
   2555e:	4770      	bx	lr

00025560 <__init_array_start>:
   25560:	000000dd 	.word	0x000000dd

00025564 <_fini>:
   25564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25566:	46c0      	nop			; (mov r8, r8)
   25568:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2556a:	bc08      	pop	{r3}
   2556c:	469e      	mov	lr, r3
   2556e:	4770      	bx	lr

00025570 <__fini_array_start>:
   25570:	000000b5 	.word	0x000000b5
