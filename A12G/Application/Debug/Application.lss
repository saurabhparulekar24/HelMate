
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b3d8  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000023c  20000000  0001d3d8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004628  20000240  0001d620  00010240  2**4
                  ALLOC
  3 .stack        00002000  20004868  00021c48  00010240  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001023c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010264  2**0
                  CONTENTS, READONLY
  6 .debug_info   00082683  00000000  00000000  000102bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000b33c  00000000  00000000  00092940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00016398  00000000  00000000  0009dc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000018c8  00000000  00000000  000b4014  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002940  00000000  00000000  000b58dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000180cd  00000000  00000000  000b821c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002d4dc  00000000  00000000  000d02e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000acd36  00000000  00000000  000fd7c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004ff0  00000000  00000000  001aa4fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	68 68 00 20 35 8a 01 00 19 8a 01 00 19 8a 01 00     hh. 5...........
	...
   1202c:	f5 50 01 00 00 00 00 00 00 00 00 00 d1 51 01 00     .P...........Q..
   1203c:	15 52 01 00 19 8a 01 00 19 8a 01 00 19 8a 01 00     .R..............
   1204c:	75 79 01 00 81 78 01 00 19 8a 01 00 65 22 01 00     uy...x......e"..
   1205c:	19 8a 01 00 09 23 01 00 19 7d 01 00 29 7d 01 00     .....#...}..)}..
   1206c:	39 7d 01 00 49 7d 01 00 59 7d 01 00 69 7d 01 00     9}..I}..Y}..i}..
   1207c:	e9 89 01 00 f9 89 01 00 09 8a 01 00 01 3e 01 00     .............>..
   1208c:	11 3e 01 00 21 3e 01 00 00 00 00 00 00 00 00 00     .>..!>..........
   1209c:	35 21 01 00 19 8a 01 00 e1 21 01 00 19 8a 01 00     5!.......!......
   120ac:	19 8a 01 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000240 	.word	0x20000240
   120d4:	00000000 	.word	0x00000000
   120d8:	0001d3d8 	.word	0x0001d3d8

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000244 	.word	0x20000244
   12108:	0001d3d8 	.word	0x0001d3d8
   1210c:	0001d3d8 	.word	0x0001d3d8
   12110:	00000000 	.word	0x00000000

00012114 <adc_start_conversion>:
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12114:	6803      	ldr	r3, [r0, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12116:	7e5a      	ldrb	r2, [r3, #25]
   12118:	b252      	sxtb	r2, r2
   1211a:	2a00      	cmp	r2, #0
   1211c:	dbfb      	blt.n	12116 <adc_start_conversion+0x2>

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   1211e:	2202      	movs	r2, #2
   12120:	7b19      	ldrb	r1, [r3, #12]
   12122:	430a      	orrs	r2, r1
   12124:	731a      	strb	r2, [r3, #12]
	Adc *const adc_module = module_inst->hw;
   12126:	6802      	ldr	r2, [r0, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12128:	7e53      	ldrb	r3, [r2, #25]
   1212a:	b25b      	sxtb	r3, r3
   1212c:	2b00      	cmp	r3, #0
   1212e:	dbfb      	blt.n	12128 <adc_start_conversion+0x14>

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}
}
   12130:	4770      	bx	lr
	...

00012134 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12134:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
   12136:	4b28      	ldr	r3, [pc, #160]	; (121d8 <ADC_Handler+0xa4>)
   12138:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   1213a:	6823      	ldr	r3, [r4, #0]
   1213c:	7e1a      	ldrb	r2, [r3, #24]
   1213e:	7ddd      	ldrb	r5, [r3, #23]
   12140:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
   12142:	2201      	movs	r2, #1
   12144:	4215      	tst	r5, r2
   12146:	d028      	beq.n	1219a <ADC_Handler+0x66>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12148:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
   1214a:	6821      	ldr	r1, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1214c:	7e4b      	ldrb	r3, [r1, #25]
   1214e:	b25b      	sxtb	r3, r3
   12150:	2b00      	cmp	r3, #0
   12152:	dbfb      	blt.n	1214c <ADC_Handler+0x18>
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12154:	6962      	ldr	r2, [r4, #20]
   12156:	1c93      	adds	r3, r2, #2
   12158:	6163      	str	r3, [r4, #20]
   1215a:	8b4b      	ldrh	r3, [r1, #26]
   1215c:	b29b      	uxth	r3, r3
   1215e:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
   12160:	8b23      	ldrh	r3, [r4, #24]
   12162:	3b01      	subs	r3, #1
   12164:	b29b      	uxth	r3, r3
   12166:	8323      	strh	r3, [r4, #24]
   12168:	2b00      	cmp	r3, #0
   1216a:	d110      	bne.n	1218e <ADC_Handler+0x5a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   1216c:	2201      	movs	r2, #1
   1216e:	6821      	ldr	r1, [r4, #0]
   12170:	758a      	strb	r2, [r1, #22]
			if (module->job_status == STATUS_BUSY) {
   12172:	7f21      	ldrb	r1, [r4, #28]
   12174:	2905      	cmp	r1, #5
   12176:	d110      	bne.n	1219a <ADC_Handler+0x66>
				module->job_status = STATUS_OK;
   12178:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
   1217a:	7ee3      	ldrb	r3, [r4, #27]
   1217c:	4213      	tst	r3, r2
   1217e:	d00c      	beq.n	1219a <ADC_Handler+0x66>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12180:	7ea3      	ldrb	r3, [r4, #26]
   12182:	4213      	tst	r3, r2
   12184:	d009      	beq.n	1219a <ADC_Handler+0x66>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12186:	0020      	movs	r0, r4
   12188:	68a3      	ldr	r3, [r4, #8]
   1218a:	4798      	blx	r3
   1218c:	e005      	b.n	1219a <ADC_Handler+0x66>
			if (module->software_trigger == true) {
   1218e:	7f63      	ldrb	r3, [r4, #29]
   12190:	2b00      	cmp	r3, #0
   12192:	d002      	beq.n	1219a <ADC_Handler+0x66>
				adc_start_conversion(module);
   12194:	0020      	movs	r0, r4
   12196:	4b11      	ldr	r3, [pc, #68]	; (121dc <ADC_Handler+0xa8>)
   12198:	4798      	blx	r3
	if (flags & ADC_INTFLAG_WINMON) {
   1219a:	2304      	movs	r3, #4
   1219c:	421d      	tst	r5, r3
   1219e:	d00b      	beq.n	121b8 <ADC_Handler+0x84>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   121a0:	6822      	ldr	r2, [r4, #0]
   121a2:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   121a4:	7ee2      	ldrb	r2, [r4, #27]
   121a6:	3b02      	subs	r3, #2
   121a8:	421a      	tst	r2, r3
   121aa:	d005      	beq.n	121b8 <ADC_Handler+0x84>
   121ac:	7ea2      	ldrb	r2, [r4, #26]
   121ae:	421a      	tst	r2, r3
   121b0:	d002      	beq.n	121b8 <ADC_Handler+0x84>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   121b2:	0020      	movs	r0, r4
   121b4:	68e3      	ldr	r3, [r4, #12]
   121b6:	4798      	blx	r3
	if (flags & ADC_INTFLAG_OVERRUN) {
   121b8:	2302      	movs	r3, #2
   121ba:	421d      	tst	r5, r3
   121bc:	d00b      	beq.n	121d6 <ADC_Handler+0xa2>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   121be:	6822      	ldr	r2, [r4, #0]
   121c0:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   121c2:	7ee2      	ldrb	r2, [r4, #27]
   121c4:	18db      	adds	r3, r3, r3
   121c6:	421a      	tst	r2, r3
   121c8:	d005      	beq.n	121d6 <ADC_Handler+0xa2>
   121ca:	7ea2      	ldrb	r2, [r4, #26]
   121cc:	421a      	tst	r2, r3
   121ce:	d002      	beq.n	121d6 <ADC_Handler+0xa2>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   121d0:	6923      	ldr	r3, [r4, #16]
   121d2:	0020      	movs	r0, r4
   121d4:	4798      	blx	r3
	_adc_interrupt_handler(0);
}
   121d6:	bd70      	pop	{r4, r5, r6, pc}
   121d8:	20003564 	.word	0x20003564
   121dc:	00012115 	.word	0x00012115

000121e0 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   121e0:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
   121e2:	4b1e      	ldr	r3, [pc, #120]	; (1225c <DAC_Handler+0x7c>)
   121e4:	681c      	ldr	r4, [r3, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   121e6:	2301      	movs	r3, #1
	Dac *const dac_hw = module->hw;
   121e8:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   121ea:	79aa      	ldrb	r2, [r5, #6]
   121ec:	421a      	tst	r2, r3
   121ee:	d006      	beq.n	121fe <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   121f0:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
   121f2:	7c63      	ldrb	r3, [r4, #17]
   121f4:	2b00      	cmp	r3, #0
   121f6:	d002      	beq.n	121fe <DAC_Handler+0x1e>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   121f8:	2000      	movs	r0, #0
   121fa:	69a3      	ldr	r3, [r4, #24]
   121fc:	4798      	blx	r3
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   121fe:	2202      	movs	r2, #2
   12200:	79ab      	ldrb	r3, [r5, #6]
   12202:	4213      	tst	r3, r2
   12204:	d029      	beq.n	1225a <DAC_Handler+0x7a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12206:	71aa      	strb	r2, [r5, #6]
		if (module->remaining_conversions) {
   12208:	89a3      	ldrh	r3, [r4, #12]
   1220a:	2b00      	cmp	r3, #0
   1220c:	d01f      	beq.n	1224e <DAC_Handler+0x6e>
				module->job_buffer[module->transferred_conversions++];
   1220e:	89e3      	ldrh	r3, [r4, #14]
   12210:	b29b      	uxth	r3, r3
   12212:	1c59      	adds	r1, r3, #1
   12214:	b289      	uxth	r1, r1
   12216:	81e1      	strh	r1, [r4, #14]
   12218:	68a1      	ldr	r1, [r4, #8]
   1221a:	005b      	lsls	r3, r3, #1
   1221c:	18cb      	adds	r3, r1, r3
   1221e:	881b      	ldrh	r3, [r3, #0]
   12220:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
   12222:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
   12224:	89a3      	ldrh	r3, [r4, #12]
   12226:	3b01      	subs	r3, #1
   12228:	b29b      	uxth	r3, r3
   1222a:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
   1222c:	89a0      	ldrh	r0, [r4, #12]
   1222e:	b280      	uxth	r0, r0
   12230:	2800      	cmp	r0, #0
   12232:	d10c      	bne.n	1224e <DAC_Handler+0x6e>
				module->job_status = STATUS_OK;
   12234:	1c63      	adds	r3, r4, #1
   12236:	77d8      	strb	r0, [r3, #31]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12238:	712a      	strb	r2, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1223a:	71aa      	strb	r2, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1223c:	2280      	movs	r2, #128	; 0x80
   1223e:	4b08      	ldr	r3, [pc, #32]	; (12260 <DAC_Handler+0x80>)
   12240:	0492      	lsls	r2, r2, #18
   12242:	67da      	str	r2, [r3, #124]	; 0x7c
				if ((module->callback) &&
   12244:	7ca3      	ldrb	r3, [r4, #18]
   12246:	2b00      	cmp	r3, #0
   12248:	d001      	beq.n	1224e <DAC_Handler+0x6e>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   1224a:	69e3      	ldr	r3, [r4, #28]
   1224c:	4798      	blx	r3
		if ((module->callback) &&
   1224e:	7c23      	ldrb	r3, [r4, #16]
   12250:	2b00      	cmp	r3, #0
   12252:	d002      	beq.n	1225a <DAC_Handler+0x7a>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12254:	6963      	ldr	r3, [r4, #20]
   12256:	2000      	movs	r0, #0
   12258:	4798      	blx	r3
	_dac_interrupt_handler(0);
}
   1225a:	bd70      	pop	{r4, r5, r6, pc}
   1225c:	20003568 	.word	0x20003568
   12260:	e000e104 	.word	0xe000e104

00012264 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12264:	b570      	push	{r4, r5, r6, lr}
	cpu_irq_enter_critical();
   12266:	4b20      	ldr	r3, [pc, #128]	; (122e8 <DMAC_Handler+0x84>)
   12268:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1226a:	220f      	movs	r2, #15
   1226c:	4b1f      	ldr	r3, [pc, #124]	; (122ec <DMAC_Handler+0x88>)

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1226e:	4920      	ldr	r1, [pc, #128]	; (122f0 <DMAC_Handler+0x8c>)
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12270:	8c1b      	ldrh	r3, [r3, #32]
	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
	isr = DMAC->CHINTFLAG.reg;

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12272:	4c20      	ldr	r4, [pc, #128]	; (122f4 <DMAC_Handler+0x90>)
	resource = _dma_active_resource[active_channel];
   12274:	4013      	ands	r3, r2
   12276:	009b      	lsls	r3, r3, #2
   12278:	5858      	ldr	r0, [r3, r1]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1227a:	4d1f      	ldr	r5, [pc, #124]	; (122f8 <DMAC_Handler+0x94>)
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1227c:	7803      	ldrb	r3, [r0, #0]
   1227e:	4013      	ands	r3, r2
   12280:	4a1e      	ldr	r2, [pc, #120]	; (122fc <DMAC_Handler+0x98>)
   12282:	7013      	strb	r3, [r2, #0]
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12284:	7801      	ldrb	r1, [r0, #0]
	isr = DMAC->CHINTFLAG.reg;
   12286:	4a1e      	ldr	r2, [pc, #120]	; (12300 <DMAC_Handler+0x9c>)
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12288:	0109      	lsls	r1, r1, #4
   1228a:	1864      	adds	r4, r4, r1
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1228c:	1869      	adds	r1, r5, r1
	isr = DMAC->CHINTFLAG.reg;
   1228e:	7813      	ldrb	r3, [r2, #0]
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12290:	8864      	ldrh	r4, [r4, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12292:	8849      	ldrh	r1, [r1, #2]
	isr = DMAC->CHINTFLAG.reg;
   12294:	b2db      	uxtb	r3, r3
	resource->transfered_size = total_size - write_size;
   12296:	1a61      	subs	r1, r4, r1
   12298:	6141      	str	r1, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   1229a:	001c      	movs	r4, r3
   1229c:	2101      	movs	r1, #1
   1229e:	400c      	ands	r4, r1
   122a0:	d00c      	beq.n	122bc <DMAC_Handler+0x58>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   122a2:	2310      	movs	r3, #16
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   122a4:	7011      	strb	r1, [r2, #0]
		resource->job_status = STATUS_ERR_IO;
   122a6:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   122a8:	7c03      	ldrb	r3, [r0, #16]
   122aa:	420b      	tst	r3, r1
   122ac:	d003      	beq.n	122b6 <DMAC_Handler+0x52>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   122ae:	6843      	ldr	r3, [r0, #4]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   122b0:	2b00      	cmp	r3, #0
   122b2:	d000      	beq.n	122b6 <DMAC_Handler+0x52>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   122b4:	4798      	blx	r3
	cpu_irq_leave_critical();
   122b6:	4b13      	ldr	r3, [pc, #76]	; (12304 <DMAC_Handler+0xa0>)
   122b8:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
}
   122ba:	bd70      	pop	{r4, r5, r6, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   122bc:	2102      	movs	r1, #2
   122be:	420b      	tst	r3, r1
   122c0:	d006      	beq.n	122d0 <DMAC_Handler+0x6c>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   122c2:	7011      	strb	r1, [r2, #0]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   122c4:	7c03      	ldrb	r3, [r0, #16]
		resource->job_status = STATUS_OK;
   122c6:	7444      	strb	r4, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   122c8:	420b      	tst	r3, r1
   122ca:	d0f4      	beq.n	122b6 <DMAC_Handler+0x52>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   122cc:	6883      	ldr	r3, [r0, #8]
   122ce:	e7ef      	b.n	122b0 <DMAC_Handler+0x4c>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   122d0:	2104      	movs	r1, #4
   122d2:	420b      	tst	r3, r1
   122d4:	d0ef      	beq.n	122b6 <DMAC_Handler+0x52>
		resource->job_status = STATUS_SUSPEND;
   122d6:	2306      	movs	r3, #6
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   122d8:	7011      	strb	r1, [r2, #0]
		resource->job_status = STATUS_SUSPEND;
   122da:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   122dc:	7c03      	ldrb	r3, [r0, #16]
   122de:	420b      	tst	r3, r1
   122e0:	d0e9      	beq.n	122b6 <DMAC_Handler+0x52>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   122e2:	68c3      	ldr	r3, [r0, #12]
   122e4:	e7e4      	b.n	122b0 <DMAC_Handler+0x4c>
   122e6:	46c0      	nop			; (mov r8, r8)
   122e8:	000177cd 	.word	0x000177cd
   122ec:	41004800 	.word	0x41004800
   122f0:	2000025c 	.word	0x2000025c
   122f4:	20003570 	.word	0x20003570
   122f8:	20000270 	.word	0x20000270
   122fc:	4100483f 	.word	0x4100483f
   12300:	4100484e 	.word	0x4100484e
   12304:	00017801 	.word	0x00017801

00012308 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12308:	b570      	push	{r4, r5, r6, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   1230a:	4a0a      	ldr	r2, [pc, #40]	; (12334 <EVSYS_Handler+0x2c>)
	struct events_hook *current_hook = _events_inst.hook_list;
   1230c:	4c0a      	ldr	r4, [pc, #40]	; (12338 <EVSYS_Handler+0x30>)
	flag = EVSYS->INTFLAG.reg;
   1230e:	6993      	ldr	r3, [r2, #24]
	_events_inst.interrupt_flag_buffer |= flag;
   12310:	68a1      	ldr	r1, [r4, #8]
	struct events_hook *current_hook = _events_inst.hook_list;
   12312:	6925      	ldr	r5, [r4, #16]
	_events_inst.interrupt_flag_buffer |= flag;
   12314:	430b      	orrs	r3, r1
   12316:	60a3      	str	r3, [r4, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12318:	4b08      	ldr	r3, [pc, #32]	; (1233c <EVSYS_Handler+0x34>)
   1231a:	6193      	str	r3, [r2, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   1231c:	2d00      	cmp	r5, #0
   1231e:	d104      	bne.n	1232a <EVSYS_Handler+0x22>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12320:	68e2      	ldr	r2, [r4, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12322:	68a3      	ldr	r3, [r4, #8]
   12324:	4393      	bics	r3, r2
   12326:	60a3      	str	r3, [r4, #8]
}
   12328:	bd70      	pop	{r4, r5, r6, pc}
		current_hook->hook_func(current_hook->resource);
   1232a:	6828      	ldr	r0, [r5, #0]
   1232c:	686b      	ldr	r3, [r5, #4]
   1232e:	4798      	blx	r3
		current_hook = current_hook->next;
   12330:	68ad      	ldr	r5, [r5, #8]
   12332:	e7f3      	b.n	1231c <EVSYS_Handler+0x14>
   12334:	42000400 	.word	0x42000400
   12338:	20000000 	.word	0x20000000
   1233c:	0f0fffff 	.word	0x0f0fffff

00012340 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12340:	2302      	movs	r3, #2
   12342:	4a05      	ldr	r2, [pc, #20]	; (12358 <_system_events_init+0x18>)
   12344:	6a11      	ldr	r1, [r2, #32]
   12346:	430b      	orrs	r3, r1
   12348:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1234a:	2301      	movs	r3, #1
   1234c:	4a03      	ldr	r2, [pc, #12]	; (1235c <_system_events_init+0x1c>)
   1234e:	7013      	strb	r3, [r2, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   12350:	7811      	ldrb	r1, [r2, #0]
   12352:	4219      	tst	r1, r3
   12354:	d1fc      	bne.n	12350 <_system_events_init+0x10>
	}
}
   12356:	4770      	bx	lr
   12358:	40000400 	.word	0x40000400
   1235c:	42000400 	.word	0x42000400

00012360 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12360:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   12362:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12364:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   12366:	421a      	tst	r2, r3
   12368:	d1fc      	bne.n	12364 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
   1236a:	4770      	bx	lr

0001236c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   1236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1236e:	6805      	ldr	r5, [r0, #0]
{
   12370:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12372:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12374:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
   12376:	8b83      	ldrh	r3, [r0, #28]
   12378:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
   1237a:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
   1237c:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
   1237e:	3b01      	subs	r3, #1
   12380:	b29b      	uxth	r3, r3
   12382:	8383      	strh	r3, [r0, #28]
   12384:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
   12386:	0112      	lsls	r2, r2, #4
   12388:	d50a      	bpl.n	123a0 <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
   1238a:	2b00      	cmp	r3, #0
   1238c:	d00d      	beq.n	123aa <_i2c_master_read+0x3e>
   1238e:	8b83      	ldrh	r3, [r0, #28]
   12390:	2b01      	cmp	r3, #1
   12392:	d10a      	bne.n	123aa <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12394:	2380      	movs	r3, #128	; 0x80
   12396:	686a      	ldr	r2, [r5, #4]
   12398:	02db      	lsls	r3, r3, #11
   1239a:	4313      	orrs	r3, r2
   1239c:	606b      	str	r3, [r5, #4]
   1239e:	e004      	b.n	123aa <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
   123a0:	2b00      	cmp	r3, #0
   123a2:	d002      	beq.n	123aa <_i2c_master_read+0x3e>
   123a4:	8b83      	ldrh	r3, [r0, #28]
   123a6:	2b00      	cmp	r3, #0
   123a8:	d0f4      	beq.n	12394 <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
   123aa:	8ba3      	ldrh	r3, [r4, #28]
   123ac:	4f0a      	ldr	r7, [pc, #40]	; (123d8 <_i2c_master_read+0x6c>)
   123ae:	2b00      	cmp	r3, #0
   123b0:	d109      	bne.n	123c6 <_i2c_master_read+0x5a>
		if (module->send_stop) {
   123b2:	7aa3      	ldrb	r3, [r4, #10]
   123b4:	2b00      	cmp	r3, #0
   123b6:	d006      	beq.n	123c6 <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   123b8:	0020      	movs	r0, r4
   123ba:	47b8      	blx	r7
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   123bc:	23c0      	movs	r3, #192	; 0xc0
   123be:	686a      	ldr	r2, [r5, #4]
   123c0:	029b      	lsls	r3, r3, #10
   123c2:	4313      	orrs	r3, r2
   123c4:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   123c6:	0020      	movs	r0, r4
   123c8:	47b8      	blx	r7
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   123ca:	6a23      	ldr	r3, [r4, #32]
   123cc:	3528      	adds	r5, #40	; 0x28
   123ce:	199e      	adds	r6, r3, r6
   123d0:	782b      	ldrb	r3, [r5, #0]
   123d2:	b2db      	uxtb	r3, r3
   123d4:	7033      	strb	r3, [r6, #0]
}
   123d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   123d8:	00012361 	.word	0x00012361

000123dc <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   123dc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   123de:	6806      	ldr	r6, [r0, #0]
{
   123e0:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   123e2:	8b73      	ldrh	r3, [r6, #26]
   123e4:	075b      	lsls	r3, r3, #29
   123e6:	d503      	bpl.n	123f0 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   123e8:	231e      	movs	r3, #30
   123ea:	3406      	adds	r4, #6
   123ec:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
   123ee:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
   123f0:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
   123f2:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
   123f4:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
   123f6:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
   123f8:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
   123fa:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
   123fc:	3b01      	subs	r3, #1
   123fe:	b29b      	uxth	r3, r3
   12400:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
   12402:	4b04      	ldr	r3, [pc, #16]	; (12414 <_i2c_master_write+0x38>)
   12404:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   12406:	6a23      	ldr	r3, [r4, #32]
   12408:	195d      	adds	r5, r3, r5
   1240a:	782b      	ldrb	r3, [r5, #0]
   1240c:	b2db      	uxtb	r3, r3
   1240e:	7033      	strb	r3, [r6, #0]
   12410:	e7ed      	b.n	123ee <_i2c_master_write+0x12>
   12412:	46c0      	nop			; (mov r8, r8)
   12414:	00012361 	.word	0x00012361

00012418 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12418:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1241a:	7a4b      	ldrb	r3, [r1, #9]
{
   1241c:	0005      	movs	r5, r0
   1241e:	000e      	movs	r6, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12420:	6804      	ldr	r4, [r0, #0]
	if (packet->high_speed) {
   12422:	2b00      	cmp	r3, #0
   12424:	d002      	beq.n	1242c <_i2c_master_write_packet+0x14>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12426:	7a89      	ldrb	r1, [r1, #10]
   12428:	4b0f      	ldr	r3, [pc, #60]	; (12468 <_i2c_master_write_packet+0x50>)
   1242a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   1242c:	6863      	ldr	r3, [r4, #4]
   1242e:	4a0f      	ldr	r2, [pc, #60]	; (1246c <_i2c_master_write_packet+0x54>)
   12430:	4013      	ands	r3, r2

	/* Save packet to software module */
	module->buffer             = packet->data;
	module->buffer_remaining   = packet->data_length;
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12432:	2200      	movs	r2, #0
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12434:	6063      	str	r3, [r4, #4]
	module->buffer             = packet->data;
   12436:	6873      	ldr	r3, [r6, #4]
   12438:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
   1243a:	8873      	ldrh	r3, [r6, #2]
   1243c:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   1243e:	1d6b      	adds	r3, r5, #5
   12440:	77da      	strb	r2, [r3, #31]
	module->status             = STATUS_BUSY;
   12442:	2305      	movs	r3, #5
   12444:	3506      	adds	r5, #6
   12446:	77eb      	strb	r3, [r5, #31]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12448:	3b02      	subs	r3, #2
   1244a:	75a3      	strb	r3, [r4, #22]
   1244c:	7a72      	ldrb	r2, [r6, #9]
   1244e:	8833      	ldrh	r3, [r6, #0]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12450:	7a31      	ldrb	r1, [r6, #8]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12452:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12454:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12456:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
   12458:	2900      	cmp	r1, #0
   1245a:	d002      	beq.n	12462 <_i2c_master_write_packet+0x4a>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1245c:	2280      	movs	r2, #128	; 0x80
   1245e:	0212      	lsls	r2, r2, #8
   12460:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	return STATUS_OK;
}
   12462:	2000      	movs	r0, #0
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12464:	6263      	str	r3, [r4, #36]	; 0x24
}
   12466:	bd70      	pop	{r4, r5, r6, pc}
   12468:	00013d85 	.word	0x00013d85
   1246c:	fffbffff 	.word	0xfffbffff

00012470 <_i2c_master_read_packet>:
	module->transfer_direction = I2C_TRANSFER_READ;
   12470:	2201      	movs	r2, #1
{
   12472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	module->buffer             = packet->data;
   12474:	684b      	ldr	r3, [r1, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12476:	6804      	ldr	r4, [r0, #0]
	module->buffer             = packet->data;
   12478:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
   1247a:	884b      	ldrh	r3, [r1, #2]
{
   1247c:	0006      	movs	r6, r0
	module->buffer_remaining   = packet->data_length;
   1247e:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12480:	1d43      	adds	r3, r0, #5
   12482:	77da      	strb	r2, [r3, #31]
	module->status             = STATUS_BUSY;
   12484:	1d83      	adds	r3, r0, #6
   12486:	3204      	adds	r2, #4
   12488:	77da      	strb	r2, [r3, #31]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1248a:	6827      	ldr	r7, [r4, #0]
	if (packet->high_speed) {
   1248c:	7a4b      	ldrb	r3, [r1, #9]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1248e:	013f      	lsls	r7, r7, #4
{
   12490:	000d      	movs	r5, r1
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12492:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
   12494:	2b00      	cmp	r3, #0
   12496:	d002      	beq.n	1249e <_i2c_master_read_packet+0x2e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12498:	7a89      	ldrb	r1, [r1, #10]
   1249a:	4b20      	ldr	r3, [pc, #128]	; (1251c <_i2c_master_read_packet+0xac>)
   1249c:	4798      	blx	r3
	if ((sclsm_flag) && (packet->data_length == 1)) {
   1249e:	2f00      	cmp	r7, #0
   124a0:	d02f      	beq.n	12502 <_i2c_master_read_packet+0x92>
   124a2:	886b      	ldrh	r3, [r5, #2]
   124a4:	2b01      	cmp	r3, #1
   124a6:	d12c      	bne.n	12502 <_i2c_master_read_packet+0x92>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   124a8:	2380      	movs	r3, #128	; 0x80
   124aa:	6862      	ldr	r2, [r4, #4]
   124ac:	02db      	lsls	r3, r3, #11
   124ae:	4313      	orrs	r3, r2
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   124b0:	6063      	str	r3, [r4, #4]
	if (packet->ten_bit_address) {
   124b2:	7a28      	ldrb	r0, [r5, #8]
   124b4:	2800      	cmp	r0, #0
   124b6:	d028      	beq.n	1250a <_i2c_master_read_packet+0x9a>
		i2c_module->ADDR.reg = (packet->address << 1) |
   124b8:	882b      	ldrh	r3, [r5, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   124ba:	7a6a      	ldrb	r2, [r5, #9]
		i2c_module->ADDR.reg = (packet->address << 1) |
   124bc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   124be:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   124c0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   124c2:	2280      	movs	r2, #128	; 0x80
   124c4:	0212      	lsls	r2, r2, #8
   124c6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
   124c8:	6263      	str	r3, [r4, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
   124ca:	0030      	movs	r0, r6
   124cc:	4b14      	ldr	r3, [pc, #80]	; (12520 <_i2c_master_read_packet+0xb0>)
   124ce:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   124d0:	6863      	ldr	r3, [r4, #4]
   124d2:	4a14      	ldr	r2, [pc, #80]	; (12524 <_i2c_master_read_packet+0xb4>)
   124d4:	4013      	ands	r3, r2
   124d6:	6063      	str	r3, [r4, #4]
		if (tmp_status == STATUS_OK) {
   124d8:	2800      	cmp	r0, #0
   124da:	d111      	bne.n	12500 <_i2c_master_read_packet+0x90>
			tmp_status = _i2c_master_address_response(module);
   124dc:	0030      	movs	r0, r6
   124de:	4b12      	ldr	r3, [pc, #72]	; (12528 <_i2c_master_read_packet+0xb8>)
   124e0:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
   124e2:	2800      	cmp	r0, #0
   124e4:	d10c      	bne.n	12500 <_i2c_master_read_packet+0x90>
			i2c_module->INTENSET.reg =
   124e6:	2303      	movs	r3, #3
   124e8:	75a3      	strb	r3, [r4, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   124ea:	882a      	ldrh	r2, [r5, #0]
   124ec:	3375      	adds	r3, #117	; 0x75
   124ee:	0a12      	lsrs	r2, r2, #8
   124f0:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   124f2:	2201      	movs	r2, #1
   124f4:	7a69      	ldrb	r1, [r5, #9]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   124f6:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   124f8:	0389      	lsls	r1, r1, #14
   124fa:	430a      	orrs	r2, r1
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   124fc:	4313      	orrs	r3, r2
   124fe:	6263      	str	r3, [r4, #36]	; 0x24
}
   12500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12502:	6863      	ldr	r3, [r4, #4]
   12504:	4a07      	ldr	r2, [pc, #28]	; (12524 <_i2c_master_read_packet+0xb4>)
   12506:	4013      	ands	r3, r2
   12508:	e7d2      	b.n	124b0 <_i2c_master_read_packet+0x40>
		i2c_module->INTENSET.reg =
   1250a:	2303      	movs	r3, #3
   1250c:	75a3      	strb	r3, [r4, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1250e:	882b      	ldrh	r3, [r5, #0]
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12510:	7a6a      	ldrb	r2, [r5, #9]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12512:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12514:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12516:	4313      	orrs	r3, r2
   12518:	2201      	movs	r2, #1
   1251a:	e7ef      	b.n	124fc <_i2c_master_read_packet+0x8c>
   1251c:	00013d85 	.word	0x00013d85
   12520:	00013d5d 	.word	0x00013d5d
   12524:	fffbffff 	.word	0xfffbffff
   12528:	00013d31 	.word	0x00013d31

0001252c <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
   1252c:	1c93      	adds	r3, r2, #2
   1252e:	009b      	lsls	r3, r3, #2
   12530:	18c3      	adds	r3, r0, r3
   12532:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
   12534:	2301      	movs	r3, #1
   12536:	4093      	lsls	r3, r2
   12538:	7e01      	ldrb	r1, [r0, #24]
   1253a:	430b      	orrs	r3, r1
   1253c:	b2db      	uxtb	r3, r3
   1253e:	7603      	strb	r3, [r0, #24]
}
   12540:	4770      	bx	lr
	...

00012544 <i2c_master_read_packet_job>:
{
   12544:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
   12546:	8b82      	ldrh	r2, [r0, #28]
{
   12548:	0003      	movs	r3, r0
		return STATUS_BUSY;
   1254a:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
   1254c:	2a00      	cmp	r2, #0
   1254e:	d105      	bne.n	1255c <i2c_master_read_packet_job+0x18>
	module->send_stop = true;
   12550:	3201      	adds	r2, #1
   12552:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12554:	72da      	strb	r2, [r3, #11]
	return _i2c_master_read_packet(module, packet);
   12556:	0018      	movs	r0, r3
   12558:	4b01      	ldr	r3, [pc, #4]	; (12560 <i2c_master_read_packet_job+0x1c>)
   1255a:	4798      	blx	r3
}
   1255c:	bd10      	pop	{r4, pc}
   1255e:	46c0      	nop			; (mov r8, r8)
   12560:	00012471 	.word	0x00012471

00012564 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12564:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12566:	8b82      	ldrh	r2, [r0, #28]
{
   12568:	0003      	movs	r3, r0
		return STATUS_BUSY;
   1256a:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
   1256c:	2a00      	cmp	r2, #0
   1256e:	d105      	bne.n	1257c <i2c_master_write_packet_job+0x18>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12570:	3201      	adds	r2, #1
   12572:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12574:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12576:	0018      	movs	r0, r3
   12578:	4b01      	ldr	r3, [pc, #4]	; (12580 <i2c_master_write_packet_job+0x1c>)
   1257a:	4798      	blx	r3
}
   1257c:	bd10      	pop	{r4, pc}
   1257e:	46c0      	nop			; (mov r8, r8)
   12580:	00012419 	.word	0x00012419

00012584 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
   12586:	4b5e      	ldr	r3, [pc, #376]	; (12700 <_i2c_master_interrupt_handler+0x17c>)
   12588:	0080      	lsls	r0, r0, #2
   1258a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1258c:	6825      	ldr	r5, [r4, #0]
   1258e:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12590:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12592:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
   12594:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12596:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
   12598:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   1259a:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1259c:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   1259e:	2a00      	cmp	r2, #0
   125a0:	d12e      	bne.n	12600 <_i2c_master_interrupt_handler+0x7c>
   125a2:	8ba2      	ldrh	r2, [r4, #28]
   125a4:	2a00      	cmp	r2, #0
   125a6:	d02b      	beq.n	12600 <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   125a8:	2301      	movs	r3, #1
   125aa:	7e2a      	ldrb	r2, [r5, #24]
   125ac:	421a      	tst	r2, r3
   125ae:	d006      	beq.n	125be <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   125b0:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   125b2:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   125b4:	8b6b      	ldrh	r3, [r5, #26]
   125b6:	4013      	ands	r3, r2
   125b8:	d010      	beq.n	125dc <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
   125ba:	2341      	movs	r3, #65	; 0x41
   125bc:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
   125be:	8ba3      	ldrh	r3, [r4, #28]
   125c0:	b29b      	uxth	r3, r3
   125c2:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
   125c4:	7ff3      	ldrb	r3, [r6, #31]
   125c6:	2b05      	cmp	r3, #5
   125c8:	d13c      	bne.n	12644 <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   125ca:	1d63      	adds	r3, r4, #5
   125cc:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
   125ce:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   125d0:	2b00      	cmp	r3, #0
   125d2:	d000      	beq.n	125d6 <_i2c_master_interrupt_handler+0x52>
   125d4:	e08a      	b.n	126ec <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
   125d6:	4b4b      	ldr	r3, [pc, #300]	; (12704 <_i2c_master_interrupt_handler+0x180>)
		} else {
			_i2c_master_read(module);
   125d8:	4798      	blx	r3
   125da:	e033      	b.n	12644 <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   125dc:	8b6a      	ldrh	r2, [r5, #26]
   125de:	0752      	lsls	r2, r2, #29
   125e0:	d5ed      	bpl.n	125be <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   125e2:	2218      	movs	r2, #24
   125e4:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
   125e6:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
   125e8:	7aa3      	ldrb	r3, [r4, #10]
   125ea:	2b00      	cmp	r3, #0
   125ec:	d0e7      	beq.n	125be <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
   125ee:	4b46      	ldr	r3, [pc, #280]	; (12708 <_i2c_master_interrupt_handler+0x184>)
   125f0:	0020      	movs	r0, r4
   125f2:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   125f4:	23c0      	movs	r3, #192	; 0xc0
   125f6:	686a      	ldr	r2, [r5, #4]
   125f8:	029b      	lsls	r3, r3, #10
   125fa:	4313      	orrs	r3, r2
   125fc:	606b      	str	r3, [r5, #4]
   125fe:	e7de      	b.n	125be <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12600:	8b62      	ldrh	r2, [r4, #26]
   12602:	2a00      	cmp	r2, #0
   12604:	d05f      	beq.n	126c6 <_i2c_master_interrupt_handler+0x142>
   12606:	8ba2      	ldrh	r2, [r4, #28]
   12608:	2a00      	cmp	r2, #0
   1260a:	d15c      	bne.n	126c6 <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
   1260c:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   1260e:	2a05      	cmp	r2, #5
   12610:	d159      	bne.n	126c6 <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12612:	1d62      	adds	r2, r4, #5
   12614:	7fd2      	ldrb	r2, [r2, #31]
   12616:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
   12618:	2a00      	cmp	r2, #0
   1261a:	d154      	bne.n	126c6 <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
   1261c:	2303      	movs	r3, #3
   1261e:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
   12620:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
   12622:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
   12624:	7aa3      	ldrb	r3, [r4, #10]
   12626:	2b00      	cmp	r3, #0
   12628:	d04a      	beq.n	126c0 <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
   1262a:	4b37      	ldr	r3, [pc, #220]	; (12708 <_i2c_master_interrupt_handler+0x184>)
   1262c:	0020      	movs	r0, r4
   1262e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12630:	23c0      	movs	r3, #192	; 0xc0
   12632:	686a      	ldr	r2, [r5, #4]
   12634:	029b      	lsls	r3, r3, #10
   12636:	4313      	orrs	r3, r2
   12638:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1263a:	07fb      	lsls	r3, r7, #31
   1263c:	d502      	bpl.n	12644 <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   1263e:	68e3      	ldr	r3, [r4, #12]
   12640:	0020      	movs	r0, r4
   12642:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12644:	8b63      	ldrh	r3, [r4, #26]
   12646:	2b00      	cmp	r3, #0
   12648:	d01b      	beq.n	12682 <_i2c_master_interrupt_handler+0xfe>
   1264a:	8ba3      	ldrh	r3, [r4, #28]
   1264c:	2b00      	cmp	r3, #0
   1264e:	d118      	bne.n	12682 <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
   12650:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12652:	2b05      	cmp	r3, #5
   12654:	d115      	bne.n	12682 <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12656:	1d63      	adds	r3, r4, #5
   12658:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
   1265a:	2a01      	cmp	r2, #1
   1265c:	d111      	bne.n	12682 <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1265e:	7e29      	ldrb	r1, [r5, #24]
   12660:	3201      	adds	r2, #1
   12662:	4211      	tst	r1, r2
   12664:	d000      	beq.n	12668 <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12666:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12668:	2203      	movs	r2, #3
   1266a:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1266c:	2200      	movs	r2, #0
   1266e:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
   12670:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12672:	07ba      	lsls	r2, r7, #30
   12674:	d53c      	bpl.n	126f0 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12676:	7fda      	ldrb	r2, [r3, #31]
   12678:	2a01      	cmp	r2, #1
   1267a:	d139      	bne.n	126f0 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   1267c:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   1267e:	0020      	movs	r0, r4
   12680:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12682:	7ff3      	ldrb	r3, [r6, #31]
   12684:	2b05      	cmp	r3, #5
   12686:	d01a      	beq.n	126be <_i2c_master_interrupt_handler+0x13a>
   12688:	7ff3      	ldrb	r3, [r6, #31]
   1268a:	2b00      	cmp	r3, #0
   1268c:	d017      	beq.n	126be <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   1268e:	2303      	movs	r3, #3
   12690:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12692:	2300      	movs	r3, #0
   12694:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
   12696:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12698:	7ff3      	ldrb	r3, [r6, #31]
   1269a:	2b41      	cmp	r3, #65	; 0x41
   1269c:	d00a      	beq.n	126b4 <_i2c_master_interrupt_handler+0x130>
   1269e:	7aa3      	ldrb	r3, [r4, #10]
   126a0:	2b00      	cmp	r3, #0
   126a2:	d007      	beq.n	126b4 <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
   126a4:	4b18      	ldr	r3, [pc, #96]	; (12708 <_i2c_master_interrupt_handler+0x184>)
   126a6:	0020      	movs	r0, r4
   126a8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   126aa:	23e0      	movs	r3, #224	; 0xe0
   126ac:	686a      	ldr	r2, [r5, #4]
   126ae:	02db      	lsls	r3, r3, #11
   126b0:	4313      	orrs	r3, r2
   126b2:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   126b4:	077b      	lsls	r3, r7, #29
   126b6:	d502      	bpl.n	126be <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   126b8:	6963      	ldr	r3, [r4, #20]
   126ba:	0020      	movs	r0, r4
   126bc:	4798      	blx	r3
		}
	}
}
   126be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   126c0:	2301      	movs	r3, #1
   126c2:	762b      	strb	r3, [r5, #24]
   126c4:	e7b9      	b.n	1263a <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   126c6:	8b62      	ldrh	r2, [r4, #26]
   126c8:	2a00      	cmp	r2, #0
   126ca:	d0bb      	beq.n	12644 <_i2c_master_interrupt_handler+0xc0>
   126cc:	8ba2      	ldrh	r2, [r4, #28]
   126ce:	2a00      	cmp	r2, #0
   126d0:	d0b8      	beq.n	12644 <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   126d2:	8b6a      	ldrh	r2, [r5, #26]
   126d4:	0692      	lsls	r2, r2, #26
   126d6:	d500      	bpl.n	126da <_i2c_master_interrupt_handler+0x156>
   126d8:	e777      	b.n	125ca <_i2c_master_interrupt_handler+0x46>
   126da:	2b00      	cmp	r3, #0
   126dc:	d003      	beq.n	126e6 <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   126de:	8ba3      	ldrh	r3, [r4, #28]
   126e0:	2b01      	cmp	r3, #1
   126e2:	d100      	bne.n	126e6 <_i2c_master_interrupt_handler+0x162>
   126e4:	e771      	b.n	125ca <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
   126e6:	2341      	movs	r3, #65	; 0x41
   126e8:	77f3      	strb	r3, [r6, #31]
   126ea:	e7ab      	b.n	12644 <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
   126ec:	4b07      	ldr	r3, [pc, #28]	; (1270c <_i2c_master_interrupt_handler+0x188>)
   126ee:	e773      	b.n	125d8 <_i2c_master_interrupt_handler+0x54>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   126f0:	07fa      	lsls	r2, r7, #31
   126f2:	d5c6      	bpl.n	12682 <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   126f4:	7fdb      	ldrb	r3, [r3, #31]
   126f6:	2b00      	cmp	r3, #0
   126f8:	d1c3      	bne.n	12682 <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   126fa:	68e3      	ldr	r3, [r4, #12]
   126fc:	e7bf      	b.n	1267e <_i2c_master_interrupt_handler+0xfa>
   126fe:	46c0      	nop			; (mov r8, r8)
   12700:	20004800 	.word	0x20004800
   12704:	000123dd 	.word	0x000123dd
   12708:	00012361 	.word	0x00012361
   1270c:	0001236d 	.word	0x0001236d

00012710 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   12710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12712:	0006      	movs	r6, r0
   12714:	000f      	movs	r7, r1
    char clearScreen = ASCII_ESC;
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   12716:	4d06      	ldr	r5, [pc, #24]	; (12730 <xCliClearTerminalScreen+0x20>)
   12718:	231b      	movs	r3, #27
   1271a:	0028      	movs	r0, r5
   1271c:	4c05      	ldr	r4, [pc, #20]	; (12734 <xCliClearTerminalScreen+0x24>)
   1271e:	4a06      	ldr	r2, [pc, #24]	; (12738 <xCliClearTerminalScreen+0x28>)
   12720:	210f      	movs	r1, #15
   12722:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   12724:	002a      	movs	r2, r5
   12726:	0039      	movs	r1, r7
   12728:	0030      	movs	r0, r6
   1272a:	47a0      	blx	r4
    return pdFALSE;
}
   1272c:	2000      	movs	r0, #0
   1272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12730:	200002cc 	.word	0x200002cc
   12734:	0001b695 	.word	0x0001b695
   12738:	0001c1d0 	.word	0x0001c1d0

0001273c <CLI_Version>:
    system_reset();
    return pdFALSE;
}
// Version CLI Command 
BaseType_t CLI_Version(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1273c:	b510      	push	{r4, lr}
	// Use snprintf to safely format the firmware version string into the provided buffer
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Firmware Version: %s\r\n", FIRMWARE_VERSION);
   1273e:	4b03      	ldr	r3, [pc, #12]	; (1274c <CLI_Version+0x10>)
   12740:	4a03      	ldr	r2, [pc, #12]	; (12750 <CLI_Version+0x14>)
   12742:	4c04      	ldr	r4, [pc, #16]	; (12754 <CLI_Version+0x18>)
   12744:	47a0      	blx	r4
	return pdFALSE; // Indicates no further output is expected
}
   12746:	2000      	movs	r0, #0
   12748:	bd10      	pop	{r4, pc}
   1274a:	46c0      	nop			; (mov r8, r8)
   1274c:	0001bf6b 	.word	0x0001bf6b
   12750:	0001bf71 	.word	0x0001bf71
   12754:	0001b695 	.word	0x0001b695

00012758 <CLI_OTAU>:
{
   12758:	b510      	push	{r4, lr}
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   1275a:	2002      	movs	r0, #2
   1275c:	4b06      	ldr	r3, [pc, #24]	; (12778 <CLI_OTAU+0x20>)
   1275e:	4798      	blx	r3
    vTaskDelay(100000); 
   12760:	4806      	ldr	r0, [pc, #24]	; (1277c <CLI_OTAU+0x24>)
   12762:	4b07      	ldr	r3, [pc, #28]	; (12780 <CLI_OTAU+0x28>)
   12764:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12766:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   1276a:	4a06      	ldr	r2, [pc, #24]	; (12784 <CLI_OTAU+0x2c>)
   1276c:	4b06      	ldr	r3, [pc, #24]	; (12788 <CLI_OTAU+0x30>)
   1276e:	60da      	str	r2, [r3, #12]
   12770:	f3bf 8f4f 	dsb	sy
   12774:	e7fe      	b.n	12774 <CLI_OTAU+0x1c>
   12776:	46c0      	nop			; (mov r8, r8)
   12778:	000139c1 	.word	0x000139c1
   1277c:	000186a0 	.word	0x000186a0
   12780:	0001693d 	.word	0x0001693d
   12784:	05fa0004 	.word	0x05fa0004
   12788:	e000ed00 	.word	0xe000ed00

0001278c <CLI_Ticks>:

// Ticks CLI Command 
BaseType_t CLI_Ticks(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1278c:	b570      	push	{r4, r5, r6, lr}
	// Retrieve the current tick count using FreeRTOS's xTaskGetTickCount()
	const TickType_t ticks = xTaskGetTickCount();
   1278e:	4b06      	ldr	r3, [pc, #24]	; (127a8 <CLI_Ticks+0x1c>)
{
   12790:	000d      	movs	r5, r1
   12792:	0004      	movs	r4, r0
	const TickType_t ticks = xTaskGetTickCount();
   12794:	4798      	blx	r3
	// Format the tick count into the provided buffer
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Ticks since start: %lu\r\n", (unsigned long)ticks);
   12796:	0029      	movs	r1, r5
	const TickType_t ticks = xTaskGetTickCount();
   12798:	0003      	movs	r3, r0
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Ticks since start: %lu\r\n", (unsigned long)ticks);
   1279a:	4a04      	ldr	r2, [pc, #16]	; (127ac <CLI_Ticks+0x20>)
   1279c:	0020      	movs	r0, r4
   1279e:	4c04      	ldr	r4, [pc, #16]	; (127b0 <CLI_Ticks+0x24>)
   127a0:	47a0      	blx	r4
	return pdFALSE; // Indicates no further output is expected
}
   127a2:	2000      	movs	r0, #0
   127a4:	bd70      	pop	{r4, r5, r6, pc}
   127a6:	46c0      	nop			; (mov r8, r8)
   127a8:	000166b1 	.word	0x000166b1
   127ac:	0001bf52 	.word	0x0001bf52
   127b0:	0001b695 	.word	0x0001b695

000127b4 <CLI_i2cScan>:
 * @param    p_cli
 * @param    argc
 * @param    argv
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   127b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    I2C_Data i2cDevice;
    uint8_t address;
    // Send 0 command byte
    uint8_t dataOut[2] = {0, 0};
   127b6:	2400      	movs	r4, #0
{
   127b8:	b089      	sub	sp, #36	; 0x24
    uint8_t dataOut[2] = {0, 0};
   127ba:	ab02      	add	r3, sp, #8
    uint8_t dataIn[2];
    dataOut[0] = 0;
    dataOut[1] = 0;
    i2cDevice.address = 0;
   127bc:	ad04      	add	r5, sp, #16
    uint8_t dataOut[2] = {0, 0};
   127be:	701c      	strb	r4, [r3, #0]
   127c0:	705c      	strb	r4, [r3, #1]
    i2cDevice.msgIn = (uint8_t *)&dataIn[0];
   127c2:	ab03      	add	r3, sp, #12
   127c4:	60ab      	str	r3, [r5, #8]
    i2cDevice.lenOut = 1;
   127c6:	2301      	movs	r3, #1
    i2cDevice.msgOut = (const uint8_t *)&dataOut[0];
   127c8:	aa02      	add	r2, sp, #8
    i2cDevice.lenOut = 1;
   127ca:	81eb      	strh	r3, [r5, #14]
    i2cDevice.lenIn = 1;
   127cc:	81ab      	strh	r3, [r5, #12]

    SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   127ce:	481e      	ldr	r0, [pc, #120]	; (12848 <CLI_i2cScan+0x94>)
   127d0:	4b1e      	ldr	r3, [pc, #120]	; (1284c <CLI_i2cScan+0x98>)
    i2cDevice.address = 0;
   127d2:	702c      	strb	r4, [r5, #0]
    i2cDevice.msgOut = (const uint8_t *)&dataOut[0];
   127d4:	606a      	str	r2, [r5, #4]
    SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   127d6:	4798      	blx	r3
    for (int i = 0; i < 128; i += 16) {
        snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   127d8:	4e1d      	ldr	r6, [pc, #116]	; (12850 <CLI_i2cScan+0x9c>)
   127da:	0023      	movs	r3, r4
   127dc:	4a1d      	ldr	r2, [pc, #116]	; (12854 <CLI_i2cScan+0xa0>)
   127de:	210f      	movs	r1, #15
   127e0:	4f1d      	ldr	r7, [pc, #116]	; (12858 <CLI_i2cScan+0xa4>)
   127e2:	0030      	movs	r0, r6
   127e4:	47b8      	blx	r7
        SerialConsoleWriteString(bufCli);
   127e6:	4b19      	ldr	r3, [pc, #100]	; (1284c <CLI_i2cScan+0x98>)
   127e8:	0030      	movs	r0, r6
   127ea:	4798      	blx	r3
   127ec:	b2e3      	uxtb	r3, r4
   127ee:	005f      	lsls	r7, r3, #1
   127f0:	3310      	adds	r3, #16
   127f2:	005b      	lsls	r3, r3, #1
   127f4:	b2db      	uxtb	r3, r3
   127f6:	b2ff      	uxtb	r7, r7
   127f8:	9301      	str	r3, [sp, #4]

        for (int j = 0; j < 16; j++) {
            i2cDevice.address = (i + j) << 1;

            int32_t ret = I2cWriteDataWait(&i2cDevice, 100, SERCOM_0);
   127fa:	2200      	movs	r2, #0
   127fc:	2164      	movs	r1, #100	; 0x64
   127fe:	0028      	movs	r0, r5
   12800:	4b16      	ldr	r3, [pc, #88]	; (1285c <CLI_i2cScan+0xa8>)
            i2cDevice.address = (i + j) << 1;
   12802:	702f      	strb	r7, [r5, #0]
            int32_t ret = I2cWriteDataWait(&i2cDevice, 100, SERCOM_0);
   12804:	4798      	blx	r3
            if (ret == 0) {
   12806:	2800      	cmp	r0, #0
   12808:	d119      	bne.n	1283e <CLI_i2cScan+0x8a>
                snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cDevice.address);
   1280a:	782b      	ldrb	r3, [r5, #0]
   1280c:	4a11      	ldr	r2, [pc, #68]	; (12854 <CLI_i2cScan+0xa0>)
   1280e:	210f      	movs	r1, #15
   12810:	480f      	ldr	r0, [pc, #60]	; (12850 <CLI_i2cScan+0x9c>)
   12812:	4e11      	ldr	r6, [pc, #68]	; (12858 <CLI_i2cScan+0xa4>)
   12814:	47b0      	blx	r6
                SerialConsoleWriteString(bufCli);
            } else {
                snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
                SerialConsoleWriteString(bufCli);
   12816:	4b0d      	ldr	r3, [pc, #52]	; (1284c <CLI_i2cScan+0x98>)
   12818:	480d      	ldr	r0, [pc, #52]	; (12850 <CLI_i2cScan+0x9c>)
   1281a:	4798      	blx	r3
   1281c:	3702      	adds	r7, #2
        for (int j = 0; j < 16; j++) {
   1281e:	9b01      	ldr	r3, [sp, #4]
   12820:	b2ff      	uxtb	r7, r7
   12822:	429f      	cmp	r7, r3
   12824:	d1e9      	bne.n	127fa <CLI_i2cScan+0x46>
            }
        }
        SerialConsoleWriteString("\r\n");
   12826:	4f0e      	ldr	r7, [pc, #56]	; (12860 <CLI_i2cScan+0xac>)
   12828:	4e08      	ldr	r6, [pc, #32]	; (1284c <CLI_i2cScan+0x98>)
   1282a:	0038      	movs	r0, r7
    for (int i = 0; i < 128; i += 16) {
   1282c:	3410      	adds	r4, #16
        SerialConsoleWriteString("\r\n");
   1282e:	47b0      	blx	r6
    for (int i = 0; i < 128; i += 16) {
   12830:	2c80      	cmp	r4, #128	; 0x80
   12832:	d1d1      	bne.n	127d8 <CLI_i2cScan+0x24>
    }
    SerialConsoleWriteString("\r\n");
   12834:	0038      	movs	r0, r7
   12836:	47b0      	blx	r6
    return pdFALSE;
}
   12838:	2000      	movs	r0, #0
   1283a:	b009      	add	sp, #36	; 0x24
   1283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   1283e:	4909      	ldr	r1, [pc, #36]	; (12864 <CLI_i2cScan+0xb0>)
   12840:	4b09      	ldr	r3, [pc, #36]	; (12868 <CLI_i2cScan+0xb4>)
   12842:	4803      	ldr	r0, [pc, #12]	; (12850 <CLI_i2cScan+0x9c>)
   12844:	4798      	blx	r3
   12846:	e7e6      	b.n	12816 <CLI_i2cScan+0x62>
   12848:	0001bf88 	.word	0x0001bf88
   1284c:	00017695 	.word	0x00017695
   12850:	200002cc 	.word	0x200002cc
   12854:	0001bfb9 	.word	0x0001bfb9
   12858:	0001b695 	.word	0x0001b695
   1285c:	0001313d 	.word	0x0001313d
   12860:	0001c2bd 	.word	0x0001c2bd
   12864:	0001bfc0 	.word	0x0001bfc0
   12868:	0001b779 	.word	0x0001b779

0001286c <CLI_IMU_data>:
 * @param pcWriteBuffer 
 * @param xWriteBufferLen 
 * @param pcCommandString 
 * @return BaseType_t 
 */
BaseType_t CLI_IMU_data(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   1286c:	b5f0      	push	{r4, r5, r6, r7, lr}
    static int16_t raw_acceleration_data[3];
    static float acceleration_mg[3];
    uint8_t data_ready_flag;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
    data_ready_flag = 0;
   1286e:	250f      	movs	r5, #15
BaseType_t CLI_IMU_data(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   12870:	b087      	sub	sp, #28
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   12872:	4b1d      	ldr	r3, [pc, #116]	; (128e8 <CLI_IMU_data+0x7c>)
BaseType_t CLI_IMU_data(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   12874:	000e      	movs	r6, r1
   12876:	9002      	str	r0, [sp, #8]
    data_ready_flag = 0;
   12878:	2700      	movs	r7, #0
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   1287a:	4798      	blx	r3
    data_ready_flag = 0;
   1287c:	ab02      	add	r3, sp, #8
   1287e:	18ed      	adds	r5, r5, r3
    xl_flag_data_ready_get(dev_ctx, &data_ready_flag);
   12880:	0029      	movs	r1, r5
   12882:	4b1a      	ldr	r3, [pc, #104]	; (128ec <CLI_IMU_data+0x80>)
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   12884:	0004      	movs	r4, r0
    data_ready_flag = 0;
   12886:	702f      	strb	r7, [r5, #0]
    xl_flag_data_ready_get(dev_ctx, &data_ready_flag);
   12888:	4798      	blx	r3
    if(data_ready_flag){
   1288a:	782b      	ldrb	r3, [r5, #0]
   1288c:	42bb      	cmp	r3, r7
   1288e:	d028      	beq.n	128e2 <CLI_IMU_data+0x76>
        memset(raw_acceleration_data, 0x00, 3 * sizeof(int16_t));
   12890:	4d17      	ldr	r5, [pc, #92]	; (128f0 <CLI_IMU_data+0x84>)
   12892:	2206      	movs	r2, #6
   12894:	0039      	movs	r1, r7
   12896:	0028      	movs	r0, r5
   12898:	4b16      	ldr	r3, [pc, #88]	; (128f4 <CLI_IMU_data+0x88>)
   1289a:	4798      	blx	r3
        acceleration_raw_get(dev_ctx, raw_acceleration_data);
   1289c:	4b16      	ldr	r3, [pc, #88]	; (128f8 <CLI_IMU_data+0x8c>)
   1289e:	0029      	movs	r1, r5
   128a0:	0020      	movs	r0, r4
   128a2:	4798      	blx	r3
        acceleration_mg[0] = from_fs2_to_mg(raw_acceleration_data[0]);
   128a4:	4f15      	ldr	r7, [pc, #84]	; (128fc <CLI_IMU_data+0x90>)
   128a6:	2300      	movs	r3, #0
   128a8:	5ee8      	ldrsh	r0, [r5, r3]
   128aa:	47b8      	blx	r7
   128ac:	4c14      	ldr	r4, [pc, #80]	; (12900 <CLI_IMU_data+0x94>)
   128ae:	6020      	str	r0, [r4, #0]
        acceleration_mg[1] = from_fs2_to_mg(raw_acceleration_data[1]);
   128b0:	2302      	movs	r3, #2
   128b2:	5ee8      	ldrsh	r0, [r5, r3]
   128b4:	47b8      	blx	r7
   128b6:	6060      	str	r0, [r4, #4]
        acceleration_mg[2] = from_fs2_to_mg(raw_acceleration_data[2]);
   128b8:	2304      	movs	r3, #4
   128ba:	5ee8      	ldrsh	r0, [r5, r3]
   128bc:	47b8      	blx	r7
        snprintf(pcWriteBuffer, xWriteBufferLen, "Ax: %d, Ay: %d, Az: %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   128be:	4d11      	ldr	r5, [pc, #68]	; (12904 <CLI_IMU_data+0x98>)
        acceleration_mg[2] = from_fs2_to_mg(raw_acceleration_data[2]);
   128c0:	60a0      	str	r0, [r4, #8]
   128c2:	1c07      	adds	r7, r0, #0
        snprintf(pcWriteBuffer, xWriteBufferLen, "Ax: %d, Ay: %d, Az: %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   128c4:	6820      	ldr	r0, [r4, #0]
   128c6:	47a8      	blx	r5
   128c8:	9003      	str	r0, [sp, #12]
   128ca:	1c38      	adds	r0, r7, #0
   128cc:	47a8      	blx	r5
   128ce:	9001      	str	r0, [sp, #4]
   128d0:	6860      	ldr	r0, [r4, #4]
   128d2:	47a8      	blx	r5
   128d4:	9b03      	ldr	r3, [sp, #12]
   128d6:	9000      	str	r0, [sp, #0]
   128d8:	4a0b      	ldr	r2, [pc, #44]	; (12908 <CLI_IMU_data+0x9c>)
   128da:	0031      	movs	r1, r6
   128dc:	9802      	ldr	r0, [sp, #8]
   128de:	4c0b      	ldr	r4, [pc, #44]	; (1290c <CLI_IMU_data+0xa0>)
   128e0:	47a0      	blx	r4
        // SerialConsoleWriteString(bufCli);
    }
    // SerialConsoleWriteString("\r\n");
    return pdFALSE;
    
}
   128e2:	2000      	movs	r0, #0
   128e4:	b007      	add	sp, #28
   128e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   128e8:	00013359 	.word	0x00013359
   128ec:	00013301 	.word	0x00013301
   128f0:	200003aa 	.word	0x200003aa
   128f4:	0001b50f 	.word	0x0001b50f
   128f8:	00013321 	.word	0x00013321
   128fc:	000132e9 	.word	0x000132e9
   12900:	200002c0 	.word	0x200002c0
   12904:	000197ad 	.word	0x000197ad
   12908:	0001bf10 	.word	0x0001bf10
   1290c:	0001b695 	.word	0x0001b695

00012910 <CLI_Haptic>:

BaseType_t CLI_Haptic(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   12910:	b570      	push	{r4, r5, r6, lr}
   12912:	000e      	movs	r6, r1
   12914:	0005      	movs	r5, r0
    // hapdev_ctx_t *dev_ctx;
    // dev_ctx = GetHapStruct();
    // drv2605_go(dev_ctx);
    HapticGo_dir(RIGHT);
   12916:	4c06      	ldr	r4, [pc, #24]	; (12930 <CLI_Haptic+0x20>)
   12918:	2001      	movs	r0, #1
   1291a:	47a0      	blx	r4
    HapticGo_dir(LEFT);
   1291c:	2000      	movs	r0, #0
   1291e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, "Go Command Sent\r\n");
   12920:	0031      	movs	r1, r6
   12922:	0028      	movs	r0, r5
   12924:	4a03      	ldr	r2, [pc, #12]	; (12934 <CLI_Haptic+0x24>)
   12926:	4b04      	ldr	r3, [pc, #16]	; (12938 <CLI_Haptic+0x28>)
   12928:	4798      	blx	r3
    return pdFALSE;
}
   1292a:	2000      	movs	r0, #0
   1292c:	bd70      	pop	{r4, r5, r6, pc}
   1292e:	46c0      	nop			; (mov r8, r8)
   12930:	00012d31 	.word	0x00012d31
   12934:	0001befe 	.word	0x0001befe
   12938:	0001b695 	.word	0x0001b695

0001293c <CLI_LED>:

BaseType_t CLI_LED(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   1293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    LEDdev_ctx_t *dev_ctx;
    BaseType_t *pxParameterStringLength;
    char *parameter;
    dev_ctx = GetLEDStruct();
   1293e:	4b0e      	ldr	r3, [pc, #56]	; (12978 <CLI_LED+0x3c>)
BaseType_t CLI_LED(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   12940:	000e      	movs	r6, r1
   12942:	0005      	movs	r5, r0
    dev_ctx = GetLEDStruct();
   12944:	4798      	blx	r3
    setLEDBrightness_all(dev_ctx, 5);
   12946:	2105      	movs	r1, #5
   12948:	4b0c      	ldr	r3, [pc, #48]	; (1297c <CLI_LED+0x40>)
    dev_ctx = GetLEDStruct();
   1294a:	0004      	movs	r4, r0
    setLEDBrightness_all(dev_ctx, 5);
   1294c:	4798      	blx	r3
    // parameter = FreeRTOS_CLIGetParameter(pcCommandString, 1, pxParameterStringLength);
    setLEDColor_all(dev_ctx, 255, 0, 0);
   1294e:	2300      	movs	r3, #0
   12950:	21ff      	movs	r1, #255	; 0xff
   12952:	001a      	movs	r2, r3
   12954:	4f0a      	ldr	r7, [pc, #40]	; (12980 <CLI_LED+0x44>)
   12956:	0020      	movs	r0, r4
   12958:	47b8      	blx	r7
    vTaskDelay(pdMS_TO_TICKS(2000));
   1295a:	20fa      	movs	r0, #250	; 0xfa
   1295c:	4b09      	ldr	r3, [pc, #36]	; (12984 <CLI_LED+0x48>)
   1295e:	00c0      	lsls	r0, r0, #3
   12960:	4798      	blx	r3
    LEDOff(dev_ctx);
   12962:	0020      	movs	r0, r4
   12964:	4b08      	ldr	r3, [pc, #32]	; (12988 <CLI_LED+0x4c>)
   12966:	4798      	blx	r3
    snprintf(pcWriteBuffer, xWriteBufferLen, "LED Command sent\r\n");
   12968:	0031      	movs	r1, r6
   1296a:	0028      	movs	r0, r5
   1296c:	4a07      	ldr	r2, [pc, #28]	; (1298c <CLI_LED+0x50>)
   1296e:	4b08      	ldr	r3, [pc, #32]	; (12990 <CLI_LED+0x54>)
   12970:	4798      	blx	r3
    return pdFALSE;
}
   12972:	2000      	movs	r0, #0
   12974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12976:	46c0      	nop			; (mov r8, r8)
   12978:	000135fd 	.word	0x000135fd
   1297c:	000135cd 	.word	0x000135cd
   12980:	00013441 	.word	0x00013441
   12984:	0001693d 	.word	0x0001693d
   12988:	000135e5 	.word	0x000135e5
   1298c:	0001bf3f 	.word	0x0001bf3f
   12990:	0001b695 	.word	0x0001b695

00012994 <CLI_IR>:

BaseType_t CLI_IR(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   12994:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12996:	0005      	movs	r5, r0
   12998:	000e      	movs	r6, r1
    struct SensorData sensor_data;
    read_sensor(&sensor_data);
   1299a:	ac03      	add	r4, sp, #12
   1299c:	0020      	movs	r0, r4
   1299e:	4b06      	ldr	r3, [pc, #24]	; (129b8 <CLI_IR+0x24>)
   129a0:	4798      	blx	r3
    snprintf(pcWriteBuffer, xWriteBufferLen, "Left: %d, Right: %d\r\n", sensor_data.left_side, sensor_data.right_side);
   129a2:	7862      	ldrb	r2, [r4, #1]
   129a4:	7823      	ldrb	r3, [r4, #0]
   129a6:	0031      	movs	r1, r6
   129a8:	9200      	str	r2, [sp, #0]
   129aa:	0028      	movs	r0, r5
   129ac:	4a03      	ldr	r2, [pc, #12]	; (129bc <CLI_IR+0x28>)
   129ae:	4c04      	ldr	r4, [pc, #16]	; (129c0 <CLI_IR+0x2c>)
   129b0:	47a0      	blx	r4
    return pdFALSE;
}
   129b2:	2000      	movs	r0, #0
   129b4:	b004      	add	sp, #16
   129b6:	bd70      	pop	{r4, r5, r6, pc}
   129b8:	00013389 	.word	0x00013389
   129bc:	0001bf29 	.word	0x0001bf29
   129c0:	0001b695 	.word	0x0001b695

000129c4 <CLI_ResetDevice>:
   129c4:	f3bf 8f4f 	dsb	sy
   129c8:	4a02      	ldr	r2, [pc, #8]	; (129d4 <CLI_ResetDevice+0x10>)
   129ca:	4b03      	ldr	r3, [pc, #12]	; (129d8 <CLI_ResetDevice+0x14>)
   129cc:	60da      	str	r2, [r3, #12]
   129ce:	f3bf 8f4f 	dsb	sy
   129d2:	e7fe      	b.n	129d2 <CLI_ResetDevice+0xe>
   129d4:	05fa0004 	.word	0x05fa0004
   129d8:	e000ed00 	.word	0xe000ed00

000129dc <vCommandConsoleTask>:
{
   129dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   129de:	4c64      	ldr	r4, [pc, #400]	; (12b70 <vCommandConsoleTask+0x194>)
   129e0:	4864      	ldr	r0, [pc, #400]	; (12b74 <vCommandConsoleTask+0x198>)
   129e2:	47a0      	blx	r4
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   129e4:	4864      	ldr	r0, [pc, #400]	; (12b78 <vCommandConsoleTask+0x19c>)
   129e6:	47a0      	blx	r4
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   129e8:	4864      	ldr	r0, [pc, #400]	; (12b7c <vCommandConsoleTask+0x1a0>)
   129ea:	47a0      	blx	r4
    FreeRTOS_CLIRegisterCommand(&xI2cScan);
   129ec:	4864      	ldr	r0, [pc, #400]	; (12b80 <vCommandConsoleTask+0x1a4>)
   129ee:	47a0      	blx	r4
	FreeRTOS_CLIRegisterCommand(&xVersionCommand);
   129f0:	4864      	ldr	r0, [pc, #400]	; (12b84 <vCommandConsoleTask+0x1a8>)
   129f2:	47a0      	blx	r4
	FreeRTOS_CLIRegisterCommand(&xTicksCommand);
   129f4:	4864      	ldr	r0, [pc, #400]	; (12b88 <vCommandConsoleTask+0x1ac>)
   129f6:	47a0      	blx	r4
    FreeRTOS_CLIRegisterCommand(&xGetIMUDataCommand);
   129f8:	4864      	ldr	r0, [pc, #400]	; (12b8c <vCommandConsoleTask+0x1b0>)
   129fa:	47a0      	blx	r4
    FreeRTOS_CLIRegisterCommand(&xGetHapticCommand);
   129fc:	4864      	ldr	r0, [pc, #400]	; (12b90 <vCommandConsoleTask+0x1b4>)
   129fe:	47a0      	blx	r4
    FreeRTOS_CLIRegisterCommand(&xSetLEDCommand);
   12a00:	4864      	ldr	r0, [pc, #400]	; (12b94 <vCommandConsoleTask+0x1b8>)
   12a02:	47a0      	blx	r4
    FreeRTOS_CLIRegisterCommand(&xSetIRSensorCommand);
   12a04:	4864      	ldr	r0, [pc, #400]	; (12b98 <vCommandConsoleTask+0x1bc>)
   12a06:	47a0      	blx	r4
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   12a08:	4864      	ldr	r0, [pc, #400]	; (12b9c <vCommandConsoleTask+0x1c0>)
   12a0a:	4f65      	ldr	r7, [pc, #404]	; (12ba0 <vCommandConsoleTask+0x1c4>)
   12a0c:	47b8      	blx	r7
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   12a0e:	4b65      	ldr	r3, [pc, #404]	; (12ba4 <vCommandConsoleTask+0x1c8>)
   12a10:	2203      	movs	r2, #3
   12a12:	2100      	movs	r1, #0
   12a14:	2001      	movs	r0, #1
   12a16:	4798      	blx	r3
   12a18:	4b63      	ldr	r3, [pc, #396]	; (12ba8 <vCommandConsoleTask+0x1cc>)
   12a1a:	1e04      	subs	r4, r0, #0
   12a1c:	6018      	str	r0, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   12a1e:	d106      	bne.n	12a2e <vCommandConsoleTask+0x52>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   12a20:	2003      	movs	r0, #3
   12a22:	4b62      	ldr	r3, [pc, #392]	; (12bac <vCommandConsoleTask+0x1d0>)
   12a24:	4962      	ldr	r1, [pc, #392]	; (12bb0 <vCommandConsoleTask+0x1d4>)
   12a26:	4798      	blx	r3
        vTaskSuspend(NULL);
   12a28:	0020      	movs	r0, r4
   12a2a:	4b62      	ldr	r3, [pc, #392]	; (12bb4 <vCommandConsoleTask+0x1d8>)
   12a2c:	4798      	blx	r3
            cInputIndex = 0;
   12a2e:	2600      	movs	r6, #0
    int is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
   12a30:	4668      	mov	r0, sp
   12a32:	4c61      	ldr	r4, [pc, #388]	; (12bb8 <vCommandConsoleTask+0x1dc>)
            is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
   12a34:	47a0      	blx	r4
    while(is_rx_char==-1){
   12a36:	1c43      	adds	r3, r0, #1
   12a38:	d02e      	beq.n	12a98 <vCommandConsoleTask+0xbc>
        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   12a3a:	466b      	mov	r3, sp
   12a3c:	781b      	ldrb	r3, [r3, #0]
   12a3e:	4d5f      	ldr	r5, [pc, #380]	; (12bbc <vCommandConsoleTask+0x1e0>)
   12a40:	2b0a      	cmp	r3, #10
   12a42:	d001      	beq.n	12a48 <vCommandConsoleTask+0x6c>
   12a44:	2b0d      	cmp	r3, #13
   12a46:	d131      	bne.n	12aac <vCommandConsoleTask+0xd0>
            isEscapeCode = false;
   12a48:	2400      	movs	r4, #0
            SerialConsoleWriteString((char *)"\r\n");
   12a4a:	485d      	ldr	r0, [pc, #372]	; (12bc0 <vCommandConsoleTask+0x1e4>)
   12a4c:	47b8      	blx	r7
            pcEscapeCodePos = 0;
   12a4e:	4b5d      	ldr	r3, [pc, #372]	; (12bc4 <vCommandConsoleTask+0x1e8>)
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12a50:	4e5d      	ldr	r6, [pc, #372]	; (12bc8 <vCommandConsoleTask+0x1ec>)
            isEscapeCode = false;
   12a52:	702c      	strb	r4, [r5, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12a54:	4d5d      	ldr	r5, [pc, #372]	; (12bcc <vCommandConsoleTask+0x1f0>)
            pcEscapeCodePos = 0;
   12a56:	701c      	strb	r4, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12a58:	0030      	movs	r0, r6
   12a5a:	2231      	movs	r2, #49	; 0x31
   12a5c:	0029      	movs	r1, r5
   12a5e:	4b5c      	ldr	r3, [pc, #368]	; (12bd0 <vCommandConsoleTask+0x1f4>)
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12a60:	3631      	adds	r6, #49	; 0x31
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12a62:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12a64:	7034      	strb	r4, [r6, #0]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12a66:	4c5b      	ldr	r4, [pc, #364]	; (12bd4 <vCommandConsoleTask+0x1f8>)
   12a68:	2264      	movs	r2, #100	; 0x64
   12a6a:	4b5b      	ldr	r3, [pc, #364]	; (12bd8 <vCommandConsoleTask+0x1fc>)
   12a6c:	0021      	movs	r1, r4
   12a6e:	0028      	movs	r0, r5
   12a70:	4798      	blx	r3
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12a72:	0023      	movs	r3, r4
   12a74:	2200      	movs	r2, #0
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12a76:	0006      	movs	r6, r0
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12a78:	3363      	adds	r3, #99	; 0x63
                SerialConsoleWriteString(pcOutputString);
   12a7a:	0020      	movs	r0, r4
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12a7c:	701a      	strb	r2, [r3, #0]
                SerialConsoleWriteString(pcOutputString);
   12a7e:	47b8      	blx	r7
            } while (xMoreDataToFollow != pdFALSE);
   12a80:	2e00      	cmp	r6, #0
   12a82:	d1f0      	bne.n	12a66 <vCommandConsoleTask+0x8a>
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12a84:	0031      	movs	r1, r6
   12a86:	2232      	movs	r2, #50	; 0x32
   12a88:	0028      	movs	r0, r5
   12a8a:	4d54      	ldr	r5, [pc, #336]	; (12bdc <vCommandConsoleTask+0x200>)
   12a8c:	47a8      	blx	r5
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   12a8e:	2264      	movs	r2, #100	; 0x64
   12a90:	0031      	movs	r1, r6
   12a92:	0020      	movs	r0, r4
   12a94:	47a8      	blx	r5
   12a96:	e7cb      	b.n	12a30 <vCommandConsoleTask+0x54>
        if(xSemaphoreTake(cliCharReadySemaphore,portMAX_DELAY)){
   12a98:	2101      	movs	r1, #1
   12a9a:	4b43      	ldr	r3, [pc, #268]	; (12ba8 <vCommandConsoleTask+0x1cc>)
   12a9c:	4249      	negs	r1, r1
   12a9e:	6818      	ldr	r0, [r3, #0]
   12aa0:	4b4f      	ldr	r3, [pc, #316]	; (12be0 <vCommandConsoleTask+0x204>)
   12aa2:	4798      	blx	r3
   12aa4:	2800      	cmp	r0, #0
   12aa6:	d0f7      	beq.n	12a98 <vCommandConsoleTask+0xbc>
            is_rx_char = SerialConsoleReadCharacter((uint8_t *)character);
   12aa8:	4668      	mov	r0, sp
   12aaa:	e7c3      	b.n	12a34 <vCommandConsoleTask+0x58>
            if (true == isEscapeCode) {
   12aac:	782a      	ldrb	r2, [r5, #0]
   12aae:	2a00      	cmp	r2, #0
   12ab0:	d037      	beq.n	12b22 <vCommandConsoleTask+0x146>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12ab2:	4a44      	ldr	r2, [pc, #272]	; (12bc4 <vCommandConsoleTask+0x1e8>)
   12ab4:	7811      	ldrb	r1, [r2, #0]
   12ab6:	2903      	cmp	r1, #3
   12ab8:	d82f      	bhi.n	12b1a <vCommandConsoleTask+0x13e>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12aba:	1c48      	adds	r0, r1, #1
   12abc:	7010      	strb	r0, [r2, #0]
   12abe:	4849      	ldr	r0, [pc, #292]	; (12be4 <vCommandConsoleTask+0x208>)
   12ac0:	5443      	strb	r3, [r0, r1]
                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12ac2:	7813      	ldrb	r3, [r2, #0]
   12ac4:	2b01      	cmp	r3, #1
   12ac6:	d9b3      	bls.n	12a30 <vCommandConsoleTask+0x54>
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   12ac8:	4947      	ldr	r1, [pc, #284]	; (12be8 <vCommandConsoleTask+0x20c>)
   12aca:	4846      	ldr	r0, [pc, #280]	; (12be4 <vCommandConsoleTask+0x208>)
   12acc:	4b47      	ldr	r3, [pc, #284]	; (12bec <vCommandConsoleTask+0x210>)
   12ace:	4798      	blx	r3
   12ad0:	2800      	cmp	r0, #0
   12ad2:	d01d      	beq.n	12b10 <vCommandConsoleTask+0x134>
                        sprintf(pcInputString, "%c[2K\r>", 27);
   12ad4:	4c3d      	ldr	r4, [pc, #244]	; (12bcc <vCommandConsoleTask+0x1f0>)
   12ad6:	221b      	movs	r2, #27
   12ad8:	4945      	ldr	r1, [pc, #276]	; (12bf0 <vCommandConsoleTask+0x214>)
   12ada:	4b46      	ldr	r3, [pc, #280]	; (12bf4 <vCommandConsoleTask+0x218>)
   12adc:	0020      	movs	r0, r4
   12ade:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   12ae0:	0020      	movs	r0, r4
   12ae2:	47b8      	blx	r7
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12ae4:	2232      	movs	r2, #50	; 0x32
   12ae6:	2100      	movs	r1, #0
   12ae8:	4b3c      	ldr	r3, [pc, #240]	; (12bdc <vCommandConsoleTask+0x200>)
   12aea:	0020      	movs	r0, r4
   12aec:	4798      	blx	r3
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   12aee:	4b38      	ldr	r3, [pc, #224]	; (12bd0 <vCommandConsoleTask+0x1f4>)
   12af0:	2231      	movs	r2, #49	; 0x31
   12af2:	4935      	ldr	r1, [pc, #212]	; (12bc8 <vCommandConsoleTask+0x1ec>)
   12af4:	0020      	movs	r0, r4
   12af6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   12af8:	0020      	movs	r0, r4
   12afa:	4e3f      	ldr	r6, [pc, #252]	; (12bf8 <vCommandConsoleTask+0x21c>)
   12afc:	47b0      	blx	r6
   12afe:	0003      	movs	r3, r0
   12b00:	2031      	movs	r0, #49	; 0x31
   12b02:	2b30      	cmp	r3, #48	; 0x30
   12b04:	d801      	bhi.n	12b0a <vCommandConsoleTask+0x12e>
   12b06:	4830      	ldr	r0, [pc, #192]	; (12bc8 <vCommandConsoleTask+0x1ec>)
   12b08:	47b0      	blx	r6
   12b0a:	b2c6      	uxtb	r6, r0
                        SerialConsoleWriteString(pcInputString);
   12b0c:	0020      	movs	r0, r4
   12b0e:	47b8      	blx	r7
                    isEscapeCode = false;
   12b10:	2300      	movs	r3, #0
                    pcEscapeCodePos = 0;
   12b12:	4a2c      	ldr	r2, [pc, #176]	; (12bc4 <vCommandConsoleTask+0x1e8>)
                    isEscapeCode = false;
   12b14:	702b      	strb	r3, [r5, #0]
                    pcEscapeCodePos = 0;
   12b16:	7013      	strb	r3, [r2, #0]
   12b18:	e78a      	b.n	12a30 <vCommandConsoleTask+0x54>
                    isEscapeCode = false;
   12b1a:	2300      	movs	r3, #0
   12b1c:	702b      	strb	r3, [r5, #0]
                    pcEscapeCodePos = 0;
   12b1e:	7013      	strb	r3, [r2, #0]
   12b20:	e7cf      	b.n	12ac2 <vCommandConsoleTask+0xe6>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   12b22:	2b08      	cmp	r3, #8
   12b24:	d001      	beq.n	12b2a <vCommandConsoleTask+0x14e>
   12b26:	2b7f      	cmp	r3, #127	; 0x7f
   12b28:	d10f      	bne.n	12b4a <vCommandConsoleTask+0x16e>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   12b2a:	2204      	movs	r2, #4
   12b2c:	4933      	ldr	r1, [pc, #204]	; (12bfc <vCommandConsoleTask+0x220>)
   12b2e:	a801      	add	r0, sp, #4
   12b30:	4b33      	ldr	r3, [pc, #204]	; (12c00 <vCommandConsoleTask+0x224>)
   12b32:	4798      	blx	r3
                SerialConsoleWriteString(erase);
   12b34:	a801      	add	r0, sp, #4
   12b36:	47b8      	blx	r7
                if (cInputIndex > 0) {
   12b38:	2e00      	cmp	r6, #0
   12b3a:	d100      	bne.n	12b3e <vCommandConsoleTask+0x162>
   12b3c:	e778      	b.n	12a30 <vCommandConsoleTask+0x54>
                    pcInputString[cInputIndex] = 0;
   12b3e:	2200      	movs	r2, #0
                    cInputIndex--;
   12b40:	3e01      	subs	r6, #1
                    pcInputString[cInputIndex] = 0;
   12b42:	4b22      	ldr	r3, [pc, #136]	; (12bcc <vCommandConsoleTask+0x1f0>)
                    cInputIndex--;
   12b44:	b2f6      	uxtb	r6, r6
                    pcInputString[cInputIndex] = 0;
   12b46:	559a      	strb	r2, [r3, r6]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   12b48:	e772      	b.n	12a30 <vCommandConsoleTask+0x54>
            else if (cRxedChar[0] == ASCII_ESC) {
   12b4a:	2b1b      	cmp	r3, #27
   12b4c:	d104      	bne.n	12b58 <vCommandConsoleTask+0x17c>
                isEscapeCode = true;  // Next characters will be code arguments
   12b4e:	3b1a      	subs	r3, #26
   12b50:	702b      	strb	r3, [r5, #0]
                pcEscapeCodePos = 0;
   12b52:	4b1c      	ldr	r3, [pc, #112]	; (12bc4 <vCommandConsoleTask+0x1e8>)
   12b54:	701a      	strb	r2, [r3, #0]
   12b56:	e76b      	b.n	12a30 <vCommandConsoleTask+0x54>
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   12b58:	2e31      	cmp	r6, #49	; 0x31
   12b5a:	d803      	bhi.n	12b64 <vCommandConsoleTask+0x188>
                    pcInputString[cInputIndex] = cRxedChar[0];
   12b5c:	4a1b      	ldr	r2, [pc, #108]	; (12bcc <vCommandConsoleTask+0x1f0>)
   12b5e:	5593      	strb	r3, [r2, r6]
                    cInputIndex++;
   12b60:	3601      	adds	r6, #1
   12b62:	b2f6      	uxtb	r6, r6
                cRxedChar[1] = 0;
   12b64:	2300      	movs	r3, #0
   12b66:	466a      	mov	r2, sp
                SerialConsoleWriteString(&cRxedChar[0]);
   12b68:	4668      	mov	r0, sp
                cRxedChar[1] = 0;
   12b6a:	7053      	strb	r3, [r2, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   12b6c:	47b8      	blx	r7
   12b6e:	e75f      	b.n	12a30 <vCommandConsoleTask+0x54>
   12b70:	00013e61 	.word	0x00013e61
   12b74:	0001c208 	.word	0x0001c208
   12b78:	0001c1c0 	.word	0x0001c1c0
   12b7c:	0001c218 	.word	0x0001c218
   12b80:	0001c1f8 	.word	0x0001c1f8
   12b84:	0001c258 	.word	0x0001c258
   12b88:	0001c248 	.word	0x0001c248
   12b8c:	0001c1e8 	.word	0x0001c1e8
   12b90:	0001c1d8 	.word	0x0001c1d8
   12b94:	0001c238 	.word	0x0001c238
   12b98:	0001c228 	.word	0x0001c228
   12b9c:	0001bfc3 	.word	0x0001bfc3
   12ba0:	00017695 	.word	0x00017695
   12ba4:	000155b9 	.word	0x000155b9
   12ba8:	200035c0 	.word	0x200035c0
   12bac:	00017739 	.word	0x00017739
   12bb0:	0001c196 	.word	0x0001c196
   12bb4:	00016a9d 	.word	0x00016a9d
   12bb8:	0001770d 	.word	0x0001770d
   12bbc:	200002dc 	.word	0x200002dc
   12bc0:	0001c2bd 	.word	0x0001c2bd
   12bc4:	200002dd 	.word	0x200002dd
   12bc8:	20000314 	.word	0x20000314
   12bcc:	200002e2 	.word	0x200002e2
   12bd0:	0001b7b9 	.word	0x0001b7b9
   12bd4:	20000346 	.word	0x20000346
   12bd8:	00013ea5 	.word	0x00013ea5
   12bdc:	0001b50f 	.word	0x0001b50f
   12be0:	00015f2d 	.word	0x00015f2d
   12be4:	200002de 	.word	0x200002de
   12be8:	0001c1b5 	.word	0x0001c1b5
   12bec:	0001b73d 	.word	0x0001b73d
   12bf0:	0001c1b8 	.word	0x0001c1b8
   12bf4:	0001b6f9 	.word	0x0001b6f9
   12bf8:	0001b789 	.word	0x0001b789
   12bfc:	0001befa 	.word	0x0001befa
   12c00:	0001b4d9 	.word	0x0001b4d9

00012c04 <CliCharReadySemaphoreGiveFromISR>:
    xHigherPriorityTaskWoken = pdFALSE;
   12c04:	2300      	movs	r3, #0
{
   12c06:	b510      	push	{r4, lr}
    xHigherPriorityTaskWoken = pdFALSE;
   12c08:	4c07      	ldr	r4, [pc, #28]	; (12c28 <CliCharReadySemaphoreGiveFromISR+0x24>)
   12c0a:	6023      	str	r3, [r4, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   12c0c:	4b07      	ldr	r3, [pc, #28]	; (12c2c <CliCharReadySemaphoreGiveFromISR+0x28>)
   12c0e:	0021      	movs	r1, r4
   12c10:	6818      	ldr	r0, [r3, #0]
   12c12:	4b07      	ldr	r3, [pc, #28]	; (12c30 <CliCharReadySemaphoreGiveFromISR+0x2c>)
   12c14:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   12c16:	6823      	ldr	r3, [r4, #0]
   12c18:	2b00      	cmp	r3, #0
   12c1a:	d003      	beq.n	12c24 <CliCharReadySemaphoreGiveFromISR+0x20>
   12c1c:	2280      	movs	r2, #128	; 0x80
   12c1e:	4b05      	ldr	r3, [pc, #20]	; (12c34 <CliCharReadySemaphoreGiveFromISR+0x30>)
   12c20:	0552      	lsls	r2, r2, #21
   12c22:	601a      	str	r2, [r3, #0]
}
   12c24:	bd10      	pop	{r4, pc}
   12c26:	46c0      	nop			; (mov r8, r8)
   12c28:	200003b0 	.word	0x200003b0
   12c2c:	200035c0 	.word	0x200035c0
   12c30:	00015c85 	.word	0x00015c85
   12c34:	e000ed04 	.word	0xe000ed04

00012c38 <platform_read>:
 * @param[out]   bufp Pointer to the data to write to (write what was read)
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   12c38:	b510      	push	{r4, lr}

	msgOutHap[0] = reg;
	HapData.address = DRV2605_ADDR;
   12c3a:	4807      	ldr	r0, [pc, #28]	; (12c58 <platform_read+0x20>)
	msgOutHap[0] = reg;
   12c3c:	4c07      	ldr	r4, [pc, #28]	; (12c5c <platform_read+0x24>)
	HapData.msgIn = bufp;
   12c3e:	6082      	str	r2, [r0, #8]
	msgOutHap[0] = reg;
   12c40:	7021      	strb	r1, [r4, #0]
	HapData.lenIn = len;
	HapData.lenOut = 1;
	HapData.msgOut = &msgOutHap;
	
	return I2cReadDataWait(&HapData, 100, 100, SERCOM_3);
   12c42:	2264      	movs	r2, #100	; 0x64
	HapData.address = DRV2605_ADDR;
   12c44:	215a      	movs	r1, #90	; 0x5a
	HapData.lenIn = len;
   12c46:	8183      	strh	r3, [r0, #12]
	HapData.lenOut = 1;
   12c48:	2301      	movs	r3, #1
	HapData.address = DRV2605_ADDR;
   12c4a:	7001      	strb	r1, [r0, #0]
	HapData.msgOut = &msgOutHap;
   12c4c:	6044      	str	r4, [r0, #4]
	return I2cReadDataWait(&HapData, 100, 100, SERCOM_3);
   12c4e:	0011      	movs	r1, r2
   12c50:	4c03      	ldr	r4, [pc, #12]	; (12c60 <platform_read+0x28>)
	HapData.lenOut = 1;
   12c52:	81c3      	strh	r3, [r0, #14]
	return I2cReadDataWait(&HapData, 100, 100, SERCOM_3);
   12c54:	47a0      	blx	r4
}
   12c56:	bd10      	pop	{r4, pc}
   12c58:	200035c4 	.word	0x200035c4
   12c5c:	200035d4 	.word	0x200035d4
   12c60:	000131ad 	.word	0x000131ad

00012c64 <platform_write>:
{
   12c64:	b570      	push	{r4, r5, r6, lr}
  msgOutHap[0] = reg;
   12c66:	4c0c      	ldr	r4, [pc, #48]	; (12c98 <platform_write+0x34>)
   12c68:	7021      	strb	r1, [r4, #0]
	for(uint16_t i=0; i < len; i++){
   12c6a:	2100      	movs	r1, #0
   12c6c:	b288      	uxth	r0, r1
   12c6e:	4283      	cmp	r3, r0
   12c70:	d80c      	bhi.n	12c8c <platform_write+0x28>
	HapData.address = DRV2605_ADDR;
   12c72:	215a      	movs	r1, #90	; 0x5a
   12c74:	4809      	ldr	r0, [pc, #36]	; (12c9c <platform_write+0x38>)
   12c76:	7001      	strb	r1, [r0, #0]
	HapData.lenOut = len + 1;
   12c78:	1c59      	adds	r1, r3, #1
   12c7a:	81c1      	strh	r1, [r0, #14]
	HapData.lenIn = len;
   12c7c:	8183      	strh	r3, [r0, #12]
	HapData.msgIn = bufp;
   12c7e:	6082      	str	r2, [r0, #8]
  return I2cWriteDataWait(&HapData, 100, SERCOM_3);
   12c80:	2164      	movs	r1, #100	; 0x64
   12c82:	2201      	movs	r2, #1
   12c84:	4b06      	ldr	r3, [pc, #24]	; (12ca0 <platform_write+0x3c>)
	HapData.msgOut = &msgOutHap;
   12c86:	6044      	str	r4, [r0, #4]
  return I2cWriteDataWait(&HapData, 100, SERCOM_3);
   12c88:	4798      	blx	r3
}
   12c8a:	bd70      	pop	{r4, r5, r6, pc}
		msgOutHap[i+1] = bufp[i];
   12c8c:	5c55      	ldrb	r5, [r2, r1]
   12c8e:	1860      	adds	r0, r4, r1
   12c90:	7045      	strb	r5, [r0, #1]
   12c92:	3101      	adds	r1, #1
   12c94:	e7ea      	b.n	12c6c <platform_write+0x8>
   12c96:	46c0      	nop			; (mov r8, r8)
   12c98:	200035d4 	.word	0x200035d4
   12c9c:	200035c4 	.word	0x200035c4
   12ca0:	0001313d 	.word	0x0001313d

00012ca4 <select_dir.part.0>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
   12ca4:	2380      	movs	r3, #128	; 0x80
 * Selects the direction for the haptic output by setting the respective pins' output levels.
 * There's a delay after each pin setting to ensure the direction is set properly.
 *
 * @param dir The direction to set (LEFT, RIGHT, or NONE_SELECT).
 */
static void select_dir(enum direction dir){
   12ca6:	b510      	push	{r4, lr}
   12ca8:	4c04      	ldr	r4, [pc, #16]	; (12cbc <select_dir.part.0+0x18>)
   12caa:	039b      	lsls	r3, r3, #14
   12cac:	61a3      	str	r3, [r4, #24]
        vTaskDelay(5);
        port_pin_set_output_level(RIGHT_EN_PIN, false);
    }
    else if(dir==RIGHT){
      port_pin_set_output_level(RIGHT_EN_PIN, true);
      vTaskDelay(5);
   12cae:	2005      	movs	r0, #5
   12cb0:	4b03      	ldr	r3, [pc, #12]	; (12cc0 <select_dir.part.0+0x1c>)
   12cb2:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
   12cb4:	2380      	movs	r3, #128	; 0x80
   12cb6:	035b      	lsls	r3, r3, #13
   12cb8:	6163      	str	r3, [r4, #20]
    else{
        port_pin_set_output_level(LEFT_EN_PIN, false);
        port_pin_set_output_level(RIGHT_EN_PIN, false);
        vTaskDelay(5);
    }
}
   12cba:	bd10      	pop	{r4, pc}
   12cbc:	41004400 	.word	0x41004400
   12cc0:	0001693d 	.word	0x0001693d

00012cc4 <select_dir>:
static void select_dir(enum direction dir){
   12cc4:	b510      	push	{r4, lr}
    if(dir==LEFT){
   12cc6:	2800      	cmp	r0, #0
   12cc8:	d10a      	bne.n	12ce0 <select_dir+0x1c>
		port_base->OUTSET.reg = pin_mask;
   12cca:	2380      	movs	r3, #128	; 0x80
   12ccc:	4c0c      	ldr	r4, [pc, #48]	; (12d00 <select_dir+0x3c>)
   12cce:	035b      	lsls	r3, r3, #13
   12cd0:	61a3      	str	r3, [r4, #24]
        vTaskDelay(5);
   12cd2:	3005      	adds	r0, #5
   12cd4:	4b0b      	ldr	r3, [pc, #44]	; (12d04 <select_dir+0x40>)
   12cd6:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   12cd8:	2380      	movs	r3, #128	; 0x80
   12cda:	039b      	lsls	r3, r3, #14
   12cdc:	6163      	str	r3, [r4, #20]
}
   12cde:	bd10      	pop	{r4, pc}
    else if(dir==RIGHT){
   12ce0:	2801      	cmp	r0, #1
   12ce2:	d102      	bne.n	12cea <select_dir+0x26>
   12ce4:	4b08      	ldr	r3, [pc, #32]	; (12d08 <select_dir+0x44>)
   12ce6:	4798      	blx	r3
   12ce8:	e7f9      	b.n	12cde <select_dir+0x1a>
   12cea:	2280      	movs	r2, #128	; 0x80
   12cec:	4b04      	ldr	r3, [pc, #16]	; (12d00 <select_dir+0x3c>)
   12cee:	0352      	lsls	r2, r2, #13
   12cf0:	615a      	str	r2, [r3, #20]
   12cf2:	2280      	movs	r2, #128	; 0x80
   12cf4:	0392      	lsls	r2, r2, #14
   12cf6:	615a      	str	r2, [r3, #20]
        vTaskDelay(5);
   12cf8:	2005      	movs	r0, #5
   12cfa:	4b02      	ldr	r3, [pc, #8]	; (12d04 <select_dir+0x40>)
   12cfc:	4798      	blx	r3
}
   12cfe:	e7ee      	b.n	12cde <select_dir+0x1a>
   12d00:	41004400 	.word	0x41004400
   12d04:	0001693d 	.word	0x0001693d
   12d08:	00012ca5 	.word	0x00012ca5

00012d0c <drv2605_write_reg>:
{
   12d0c:	b510      	push	{r4, lr}
    ret = ctx->write_reg(ctx->handle, reg, data, len);
   12d0e:	6804      	ldr	r4, [r0, #0]
   12d10:	6880      	ldr	r0, [r0, #8]
   12d12:	47a0      	blx	r4
}
   12d14:	bd10      	pop	{r4, pc}
	...

00012d18 <drv2605_go>:
void drv2605_go(hapdev_ctx_t *ctx) { 
   12d18:	b513      	push	{r0, r1, r4, lr}
    uint8_t reg = 1;
   12d1a:	466b      	mov	r3, sp
   12d1c:	1dda      	adds	r2, r3, #7
   12d1e:	2301      	movs	r3, #1
    drv2605_write_reg(ctx, DRV2605_REG_GO, &reg, 1); 
   12d20:	210c      	movs	r1, #12
   12d22:	4c02      	ldr	r4, [pc, #8]	; (12d2c <drv2605_go+0x14>)
    uint8_t reg = 1;
   12d24:	7013      	strb	r3, [r2, #0]
    drv2605_write_reg(ctx, DRV2605_REG_GO, &reg, 1); 
   12d26:	47a0      	blx	r4
}
   12d28:	bd13      	pop	{r0, r1, r4, pc}
   12d2a:	46c0      	nop			; (mov r8, r8)
   12d2c:	00012d0d 	.word	0x00012d0d

00012d30 <HapticGo_dir>:
 * Sets the direction, activates the haptic device, then resets the direction to none.
 * The function includes significant delays to ensure the action completes.
 *
 * @param dir The direction to activate the haptic device.
 */
void HapticGo_dir(enum direction dir){
   12d30:	b510      	push	{r4, lr}
    select_dir(dir);
   12d32:	4c06      	ldr	r4, [pc, #24]	; (12d4c <HapticGo_dir+0x1c>)
   12d34:	47a0      	blx	r4
    drv2605_go(&dev_ctx_drv2605);
   12d36:	4806      	ldr	r0, [pc, #24]	; (12d50 <HapticGo_dir+0x20>)
   12d38:	4b06      	ldr	r3, [pc, #24]	; (12d54 <HapticGo_dir+0x24>)
   12d3a:	4798      	blx	r3
    vTaskDelay(300);
   12d3c:	2096      	movs	r0, #150	; 0x96
   12d3e:	4b06      	ldr	r3, [pc, #24]	; (12d58 <HapticGo_dir+0x28>)
   12d40:	0040      	lsls	r0, r0, #1
   12d42:	4798      	blx	r3
    select_dir(NONE_SELECT);
   12d44:	2002      	movs	r0, #2
   12d46:	47a0      	blx	r4
}
   12d48:	bd10      	pop	{r4, pc}
   12d4a:	46c0      	nop			; (mov r8, r8)
   12d4c:	00012cc5 	.word	0x00012cc5
   12d50:	20000014 	.word	0x20000014
   12d54:	00012d19 	.word	0x00012d19
   12d58:	0001693d 	.word	0x0001693d

00012d5c <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   12d5c:	b513      	push	{r0, r1, r4, lr}
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    I2cSensorBusState.rxDoneFlag = true;
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12d5e:	2400      	movs	r4, #0

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   12d60:	4b07      	ldr	r3, [pc, #28]	; (12d80 <I2cSensorsRxComplete+0x24>)
   12d62:	a901      	add	r1, sp, #4
   12d64:	6818      	ldr	r0, [r3, #0]
   12d66:	4b07      	ldr	r3, [pc, #28]	; (12d84 <I2cSensorsRxComplete+0x28>)
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12d68:	9401      	str	r4, [sp, #4]
    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   12d6a:	4798      	blx	r3
    sensorTransmitError = false;
   12d6c:	4b06      	ldr	r3, [pc, #24]	; (12d88 <I2cSensorsRxComplete+0x2c>)
   12d6e:	701c      	strb	r4, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   12d70:	9b01      	ldr	r3, [sp, #4]
   12d72:	42a3      	cmp	r3, r4
   12d74:	d003      	beq.n	12d7e <I2cSensorsRxComplete+0x22>
   12d76:	2280      	movs	r2, #128	; 0x80
   12d78:	4b04      	ldr	r3, [pc, #16]	; (12d8c <I2cSensorsRxComplete+0x30>)
   12d7a:	0552      	lsls	r2, r2, #21
   12d7c:	601a      	str	r2, [r3, #0]
}
   12d7e:	bd13      	pop	{r0, r1, r4, pc}
   12d80:	20003640 	.word	0x20003640
   12d84:	00015c85 	.word	0x00015c85
   12d88:	200003b4 	.word	0x200003b4
   12d8c:	e000ed04 	.word	0xe000ed04

00012d90 <I2cSensorsTxComplete>:
   12d90:	b510      	push	{r4, lr}
   12d92:	4b01      	ldr	r3, [pc, #4]	; (12d98 <I2cSensorsTxComplete+0x8>)
   12d94:	4798      	blx	r3
   12d96:	bd10      	pop	{r4, pc}
   12d98:	00012d5d 	.word	0x00012d5d

00012d9c <I2cSensorsError>:
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
    I2cSensorBusState.i2cState = I2C_BUS_READY;
    I2cSensorBusState.txDoneFlag = true;
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12d9c:	2300      	movs	r3, #0
{
   12d9e:	b507      	push	{r0, r1, r2, lr}
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12da0:	9301      	str	r3, [sp, #4]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   12da2:	4b08      	ldr	r3, [pc, #32]	; (12dc4 <I2cSensorsError+0x28>)
   12da4:	a901      	add	r1, sp, #4
   12da6:	6818      	ldr	r0, [r3, #0]
   12da8:	4b07      	ldr	r3, [pc, #28]	; (12dc8 <I2cSensorsError+0x2c>)
   12daa:	4798      	blx	r3
    sensorTransmitError = true;
   12dac:	2201      	movs	r2, #1
   12dae:	4b07      	ldr	r3, [pc, #28]	; (12dcc <I2cSensorsError+0x30>)
   12db0:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   12db2:	9b01      	ldr	r3, [sp, #4]
   12db4:	2b00      	cmp	r3, #0
   12db6:	d003      	beq.n	12dc0 <I2cSensorsError+0x24>
   12db8:	2280      	movs	r2, #128	; 0x80
   12dba:	4b05      	ldr	r3, [pc, #20]	; (12dd0 <I2cSensorsError+0x34>)
   12dbc:	0552      	lsls	r2, r2, #21
   12dbe:	601a      	str	r2, [r3, #0]
}
   12dc0:	bd07      	pop	{r0, r1, r2, pc}
   12dc2:	46c0      	nop			; (mov r8, r8)
   12dc4:	20003640 	.word	0x20003640
   12dc8:	00015c85 	.word	0x00015c85
   12dcc:	200003b4 	.word	0x200003b4
   12dd0:	e000ed04 	.word	0xe000ed04

00012dd4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   12dd4:	b570      	push	{r4, r5, r6, lr}
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12dd6:	2207      	movs	r2, #7
{
   12dd8:	0006      	movs	r6, r0
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12dda:	6805      	ldr	r5, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12ddc:	69ec      	ldr	r4, [r5, #28]
   12dde:	4014      	ands	r4, r2
	while (i2c_master_is_syncing(module)) {
   12de0:	d1fc      	bne.n	12ddc <i2c_master_enable+0x8>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   12de2:	2302      	movs	r3, #2
   12de4:	682a      	ldr	r2, [r5, #0]
   12de6:	4313      	orrs	r3, r2
   12de8:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   12dea:	6830      	ldr	r0, [r6, #0]
   12dec:	4b08      	ldr	r3, [pc, #32]	; (12e10 <i2c_master_enable+0x3c>)
   12dee:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12df0:	231f      	movs	r3, #31
   12df2:	4018      	ands	r0, r3
   12df4:	3b1e      	subs	r3, #30
   12df6:	4083      	lsls	r3, r0
   12df8:	4a06      	ldr	r2, [pc, #24]	; (12e14 <i2c_master_enable+0x40>)
   12dfa:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   12dfc:	2210      	movs	r2, #16
   12dfe:	8b69      	ldrh	r1, [r5, #26]
   12e00:	4211      	tst	r1, r2
   12e02:	d104      	bne.n	12e0e <i2c_master_enable+0x3a>
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   12e04:	88f1      	ldrh	r1, [r6, #6]
		timeout_counter++;
   12e06:	3401      	adds	r4, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   12e08:	428c      	cmp	r4, r1
   12e0a:	d3f8      	bcc.n	12dfe <i2c_master_enable+0x2a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   12e0c:	836a      	strh	r2, [r5, #26]
			/* Workaround #1 */
			return;
		}
	}
}
   12e0e:	bd70      	pop	{r4, r5, r6, pc}
   12e10:	00017ced 	.word	0x00017ced
   12e14:	e000e100 	.word	0xe000e100

00012e18 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   12e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   12e1a:	2601      	movs	r6, #1
   12e1c:	2702      	movs	r7, #2
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance1, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   12e1e:	4c18      	ldr	r4, [pc, #96]	; (12e80 <I2cDriverRegisterSensorBusCallbacks+0x68>)
   12e20:	4d18      	ldr	r5, [pc, #96]	; (12e84 <I2cDriverRegisterSensorBusCallbacks+0x6c>)
   12e22:	0020      	movs	r0, r4
   12e24:	2200      	movs	r2, #0
   12e26:	4918      	ldr	r1, [pc, #96]	; (12e88 <I2cDriverRegisterSensorBusCallbacks+0x70>)
   12e28:	47a8      	blx	r5
   12e2a:	7e63      	ldrb	r3, [r4, #25]
    i2c_master_enable_callback(&i2cSensorBusInstance1, I2C_MASTER_CALLBACK_WRITE_COMPLETE);

    i2c_master_register_callback(&i2cSensorBusInstance1, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   12e2c:	0032      	movs	r2, r6
   12e2e:	4333      	orrs	r3, r6
   12e30:	0020      	movs	r0, r4
   12e32:	4916      	ldr	r1, [pc, #88]	; (12e8c <I2cDriverRegisterSensorBusCallbacks+0x74>)
   12e34:	7663      	strb	r3, [r4, #25]
   12e36:	47a8      	blx	r5
   12e38:	7e63      	ldrb	r3, [r4, #25]
    i2c_master_enable_callback(&i2cSensorBusInstance1, I2C_MASTER_CALLBACK_READ_COMPLETE);

    i2c_master_register_callback(&i2cSensorBusInstance1, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   12e3a:	003a      	movs	r2, r7
   12e3c:	433b      	orrs	r3, r7
   12e3e:	0020      	movs	r0, r4
   12e40:	4913      	ldr	r1, [pc, #76]	; (12e90 <I2cDriverRegisterSensorBusCallbacks+0x78>)
   12e42:	7663      	strb	r3, [r4, #25]
   12e44:	47a8      	blx	r5
   12e46:	2204      	movs	r2, #4
   12e48:	7e63      	ldrb	r3, [r4, #25]
    i2c_master_enable_callback(&i2cSensorBusInstance1, I2C_MASTER_CALLBACK_ERROR);

    //*************************************************************************************

    i2c_master_register_callback(&i2cSensorBusInstance2, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   12e4a:	490f      	ldr	r1, [pc, #60]	; (12e88 <I2cDriverRegisterSensorBusCallbacks+0x70>)
   12e4c:	4313      	orrs	r3, r2
   12e4e:	7663      	strb	r3, [r4, #25]
   12e50:	4c10      	ldr	r4, [pc, #64]	; (12e94 <I2cDriverRegisterSensorBusCallbacks+0x7c>)
   12e52:	2200      	movs	r2, #0
   12e54:	0020      	movs	r0, r4
   12e56:	47a8      	blx	r5
   12e58:	7e63      	ldrb	r3, [r4, #25]
    i2c_master_enable_callback(&i2cSensorBusInstance2, I2C_MASTER_CALLBACK_WRITE_COMPLETE);

    i2c_master_register_callback(&i2cSensorBusInstance2, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   12e5a:	0032      	movs	r2, r6
   12e5c:	4333      	orrs	r3, r6
   12e5e:	0020      	movs	r0, r4
   12e60:	490a      	ldr	r1, [pc, #40]	; (12e8c <I2cDriverRegisterSensorBusCallbacks+0x74>)
   12e62:	7663      	strb	r3, [r4, #25]
   12e64:	47a8      	blx	r5
   12e66:	7e63      	ldrb	r3, [r4, #25]
    i2c_master_enable_callback(&i2cSensorBusInstance2, I2C_MASTER_CALLBACK_READ_COMPLETE);

    i2c_master_register_callback(&i2cSensorBusInstance2, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   12e68:	003a      	movs	r2, r7
   12e6a:	433b      	orrs	r3, r7
   12e6c:	4908      	ldr	r1, [pc, #32]	; (12e90 <I2cDriverRegisterSensorBusCallbacks+0x78>)
   12e6e:	0020      	movs	r0, r4
   12e70:	7663      	strb	r3, [r4, #25]
   12e72:	47a8      	blx	r5
   12e74:	2204      	movs	r2, #4
   12e76:	7e63      	ldrb	r3, [r4, #25]
   12e78:	4313      	orrs	r3, r2
   12e7a:	7663      	strb	r3, [r4, #25]
    i2c_master_enable_callback(&i2cSensorBusInstance2, I2C_MASTER_CALLBACK_ERROR);
}
   12e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e7e:	46c0      	nop			; (mov r8, r8)
   12e80:	20003644 	.word	0x20003644
   12e84:	0001252d 	.word	0x0001252d
   12e88:	00012d91 	.word	0x00012d91
   12e8c:	00012d5d 	.word	0x00012d5d
   12e90:	00012d9d 	.word	0x00012d9d
   12e94:	20003614 	.word	0x20003614

00012e98 <I2cInitializeDriver>:
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   12e98:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   12e9a:	2364      	movs	r3, #100	; 0x64
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   12e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e9e:	b091      	sub	sp, #68	; 0x44
   12ea0:	af03      	add	r7, sp, #12
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   12ea2:	0389      	lsls	r1, r1, #14
   12ea4:	6139      	str	r1, [r7, #16]
	config->unknown_bus_state_timeout = 65535;
   12ea6:	2101      	movs	r1, #1
	config->scl_low_timeout  = false;
   12ea8:	2028      	movs	r0, #40	; 0x28
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   12eaa:	9303      	str	r3, [sp, #12]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   12eac:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
   12eae:	4249      	negs	r1, r1
   12eb0:	82b9      	strh	r1, [r7, #20]
	config->scl_low_timeout  = false;
   12eb2:	a902      	add	r1, sp, #8
   12eb4:	1809      	adds	r1, r1, r0
   12eb6:	700b      	strb	r3, [r1, #0]
	config->slave_scl_low_extend_timeout   = false;
   12eb8:	3009      	adds	r0, #9
   12eba:	a902      	add	r1, sp, #8
   12ebc:	1809      	adds	r1, r1, r0
   12ebe:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
   12ec0:	3001      	adds	r0, #1
   12ec2:	a902      	add	r1, sp, #8
	config->scl_stretch_only_after_ack_bit = false;
   12ec4:	ad0e      	add	r5, sp, #56	; 0x38
	config->master_scl_low_extend_timeout  = false;
   12ec6:	1809      	adds	r1, r1, r0
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   12ec8:	60bb      	str	r3, [r7, #8]
	config->generator_source = GCLK_GENERATOR_0;
   12eca:	733b      	strb	r3, [r7, #12]
	config->run_in_standby   = false;
   12ecc:	763b      	strb	r3, [r7, #24]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   12ece:	62bb      	str	r3, [r7, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
   12ed0:	702b      	strb	r3, [r5, #0]
	config->master_scl_low_extend_timeout  = false;
   12ed2:	700b      	strb	r3, [r1, #0]
	config->sda_scl_rise_time_ns = 215;
   12ed4:	33d7      	adds	r3, #215	; 0xd7
   12ed6:	863b      	strh	r3, [r7, #48]	; 0x30
    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   12ed8:	4b38      	ldr	r3, [pc, #224]	; (12fbc <I2cInitializeDriver+0x124>)
    config_i2c_master.buffer_timeout = 1000;
   12eda:	2403      	movs	r4, #3
    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   12edc:	61fb      	str	r3, [r7, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   12ede:	4b38      	ldr	r3, [pc, #224]	; (12fc0 <I2cInitializeDriver+0x128>)
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   12ee0:	4a38      	ldr	r2, [pc, #224]	; (12fc4 <I2cInitializeDriver+0x12c>)
   12ee2:	623b      	str	r3, [r7, #32]
    config_i2c_master.buffer_timeout = 1000;
   12ee4:	23fa      	movs	r3, #250	; 0xfa
   12ee6:	009b      	lsls	r3, r3, #2
   12ee8:	607a      	str	r2, [r7, #4]
   12eea:	82fb      	strh	r3, [r7, #22]
   12eec:	9201      	str	r2, [sp, #4]
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance1, SERCOM0, &config_i2c_master);
   12eee:	4e36      	ldr	r6, [pc, #216]	; (12fc8 <I2cInitializeDriver+0x130>)
   12ef0:	003a      	movs	r2, r7
   12ef2:	4936      	ldr	r1, [pc, #216]	; (12fcc <I2cInitializeDriver+0x134>)
   12ef4:	0030      	movs	r0, r6
   12ef6:	4b36      	ldr	r3, [pc, #216]	; (12fd0 <I2cInitializeDriver+0x138>)
   12ef8:	4798      	blx	r3
        if (STATUS_OK == errCodeAsf) {
   12efa:	2800      	cmp	r0, #0
   12efc:	d147      	bne.n	12f8e <I2cInitializeDriver+0xf6>
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   12efe:	2280      	movs	r2, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   12f00:	2364      	movs	r3, #100	; 0x64
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   12f02:	0392      	lsls	r2, r2, #14
   12f04:	613a      	str	r2, [r7, #16]
	config->unknown_bus_state_timeout = 65535;
   12f06:	2201      	movs	r2, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   12f08:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   12f0a:	9b01      	ldr	r3, [sp, #4]
	config->scl_low_timeout  = false;
   12f0c:	2128      	movs	r1, #40	; 0x28
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   12f0e:	607b      	str	r3, [r7, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   12f10:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
   12f12:	4252      	negs	r2, r2
   12f14:	82ba      	strh	r2, [r7, #20]
	config->scl_low_timeout  = false;
   12f16:	aa02      	add	r2, sp, #8
   12f18:	1852      	adds	r2, r2, r1
   12f1a:	7013      	strb	r3, [r2, #0]
	config->slave_scl_low_extend_timeout   = false;
   12f1c:	3109      	adds	r1, #9
   12f1e:	aa02      	add	r2, sp, #8
   12f20:	1852      	adds	r2, r2, r1
   12f22:	7013      	strb	r3, [r2, #0]
	config->master_scl_low_extend_timeout  = false;
   12f24:	3101      	adds	r1, #1
   12f26:	aa02      	add	r2, sp, #8
   12f28:	1852      	adds	r2, r2, r1
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   12f2a:	60bb      	str	r3, [r7, #8]
	config->generator_source = GCLK_GENERATOR_0;
   12f2c:	733b      	strb	r3, [r7, #12]
	config->run_in_standby   = false;
   12f2e:	763b      	strb	r3, [r7, #24]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   12f30:	62bb      	str	r3, [r7, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
   12f32:	702b      	strb	r3, [r5, #0]
	config->master_scl_low_extend_timeout  = false;
   12f34:	7013      	strb	r3, [r2, #0]
	config->sda_scl_rise_time_ns = 215;
   12f36:	33d7      	adds	r3, #215	; 0xd7
   12f38:	863b      	strh	r3, [r7, #48]	; 0x30
    config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
   12f3a:	4b26      	ldr	r3, [pc, #152]	; (12fd4 <I2cInitializeDriver+0x13c>)
    config_i2c_master.buffer_timeout = 1000;
   12f3c:	2403      	movs	r4, #3
    config_i2c_master.pinmux_pad0 = PINMUX_PA22C_SERCOM3_PAD0;
   12f3e:	61fb      	str	r3, [r7, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA17D_SERCOM3_PAD1;
   12f40:	4b25      	ldr	r3, [pc, #148]	; (12fd8 <I2cInitializeDriver+0x140>)
   12f42:	623b      	str	r3, [r7, #32]
    config_i2c_master.buffer_timeout = 1000;
   12f44:	23fa      	movs	r3, #250	; 0xfa
   12f46:	009b      	lsls	r3, r3, #2
   12f48:	82fb      	strh	r3, [r7, #22]
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance2, SERCOM3, &config_i2c_master);
   12f4a:	4d24      	ldr	r5, [pc, #144]	; (12fdc <I2cInitializeDriver+0x144>)
   12f4c:	003a      	movs	r2, r7
   12f4e:	4924      	ldr	r1, [pc, #144]	; (12fe0 <I2cInitializeDriver+0x148>)
   12f50:	0028      	movs	r0, r5
   12f52:	4b1f      	ldr	r3, [pc, #124]	; (12fd0 <I2cInitializeDriver+0x138>)
   12f54:	4798      	blx	r3
        if (STATUS_OK == errCodeAsf) {
   12f56:	2800      	cmp	r0, #0
   12f58:	d121      	bne.n	12f9e <I2cInitializeDriver+0x106>
    i2c_master_enable(&i2cSensorBusInstance1);
   12f5a:	4c22      	ldr	r4, [pc, #136]	; (12fe4 <I2cInitializeDriver+0x14c>)
   12f5c:	0030      	movs	r0, r6
   12f5e:	47a0      	blx	r4
    i2c_master_enable(&i2cSensorBusInstance2);
   12f60:	0028      	movs	r0, r5
   12f62:	47a0      	blx	r4
    int32_t error = STATUS_OK;

    error = I2cDriverConfigureSensorBus();
    if (STATUS_OK != error) goto exit;

    I2cDriverRegisterSensorBusCallbacks();
   12f64:	4b20      	ldr	r3, [pc, #128]	; (12fe8 <I2cInitializeDriver+0x150>)
   12f66:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   12f68:	4b20      	ldr	r3, [pc, #128]	; (12fec <I2cInitializeDriver+0x154>)
   12f6a:	2001      	movs	r0, #1
   12f6c:	4798      	blx	r3
   12f6e:	4c20      	ldr	r4, [pc, #128]	; (12ff0 <I2cInitializeDriver+0x158>)

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   12f70:	2203      	movs	r2, #3
    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   12f72:	6020      	str	r0, [r4, #0]
    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   12f74:	4b1f      	ldr	r3, [pc, #124]	; (12ff4 <I2cInitializeDriver+0x15c>)
   12f76:	2100      	movs	r1, #0
   12f78:	2001      	movs	r0, #1
   12f7a:	4798      	blx	r3
   12f7c:	4a1e      	ldr	r2, [pc, #120]	; (12ff8 <I2cInitializeDriver+0x160>)
   12f7e:	0003      	movs	r3, r0
   12f80:	6010      	str	r0, [r2, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   12f82:	6822      	ldr	r2, [r4, #0]
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   12f84:	2006      	movs	r0, #6
    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   12f86:	2a00      	cmp	r2, #0
   12f88:	d111      	bne.n	12fae <I2cInitializeDriver+0x116>
        goto exit;
    }

exit:
    return error;
}
   12f8a:	b011      	add	sp, #68	; 0x44
   12f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f8e:	3c01      	subs	r4, #1
            i2c_master_reset(&i2cSensorBusInstance1);
   12f90:	0030      	movs	r0, r6
   12f92:	4b1a      	ldr	r3, [pc, #104]	; (12ffc <I2cInitializeDriver+0x164>)
   12f94:	b2e4      	uxtb	r4, r4
   12f96:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   12f98:	2c00      	cmp	r4, #0
   12f9a:	d1a8      	bne.n	12eee <I2cInitializeDriver+0x56>
   12f9c:	e7af      	b.n	12efe <I2cInitializeDriver+0x66>
   12f9e:	3c01      	subs	r4, #1
            i2c_master_reset(&i2cSensorBusInstance2);
   12fa0:	0028      	movs	r0, r5
   12fa2:	4b16      	ldr	r3, [pc, #88]	; (12ffc <I2cInitializeDriver+0x164>)
   12fa4:	b2e4      	uxtb	r4, r4
   12fa6:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   12fa8:	2c00      	cmp	r4, #0
   12faa:	d1ce      	bne.n	12f4a <I2cInitializeDriver+0xb2>
   12fac:	e7d5      	b.n	12f5a <I2cInitializeDriver+0xc2>
    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   12fae:	425a      	negs	r2, r3
   12fb0:	4153      	adcs	r3, r2
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   12fb2:	2006      	movs	r0, #6
    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   12fb4:	425b      	negs	r3, r3
   12fb6:	4018      	ands	r0, r3
   12fb8:	e7e7      	b.n	12f8a <I2cInitializeDriver+0xf2>
   12fba:	46c0      	nop			; (mov r8, r8)
   12fbc:	00080002 	.word	0x00080002
   12fc0:	00090002 	.word	0x00090002
   12fc4:	00000d48 	.word	0x00000d48
   12fc8:	20003644 	.word	0x20003644
   12fcc:	42000800 	.word	0x42000800
   12fd0:	000139f1 	.word	0x000139f1
   12fd4:	00160002 	.word	0x00160002
   12fd8:	00110003 	.word	0x00110003
   12fdc:	20003614 	.word	0x20003614
   12fe0:	42001400 	.word	0x42001400
   12fe4:	00012dd5 	.word	0x00012dd5
   12fe8:	00012e19 	.word	0x00012e19
   12fec:	00015985 	.word	0x00015985
   12ff0:	2000363c 	.word	0x2000363c
   12ff4:	000155b9 	.word	0x000155b9
   12ff8:	20003640 	.word	0x20003640
   12ffc:	00013cc9 	.word	0x00013cc9

00013000 <I2cWriteData_SERCOM0>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData_SERCOM0(I2C_Data *data)
{
   13000:	b510      	push	{r4, lr}
    int32_t error = ERROR_NONE;
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13002:	2800      	cmp	r0, #0
   13004:	d011      	beq.n	1302a <I2cWriteData_SERCOM0+0x2a>
   13006:	6843      	ldr	r3, [r0, #4]
   13008:	2b00      	cmp	r3, #0
   1300a:	d00e      	beq.n	1302a <I2cWriteData_SERCOM0+0x2a>
        error = ERR_INVALID_ARG;
        goto exit;
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   1300c:	7802      	ldrb	r2, [r0, #0]
   1300e:	4908      	ldr	r1, [pc, #32]	; (13030 <I2cWriteData_SERCOM0+0x30>)
   13010:	800a      	strh	r2, [r1, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13012:	604b      	str	r3, [r1, #4]
    sensorPacketWrite.data_length = data->lenOut;
   13014:	89c3      	ldrh	r3, [r0, #14]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance1, &sensorPacketWrite);
   13016:	4807      	ldr	r0, [pc, #28]	; (13034 <I2cWriteData_SERCOM0+0x34>)
    sensorPacketWrite.data_length = data->lenOut;
   13018:	804b      	strh	r3, [r1, #2]
    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance1, &sensorPacketWrite);
   1301a:	4b07      	ldr	r3, [pc, #28]	; (13038 <I2cWriteData_SERCOM0+0x38>)
   1301c:	4798      	blx	r3
    int32_t error = ERROR_NONE;
   1301e:	2300      	movs	r3, #0

    if (STATUS_OK != hwError) {
   13020:	4298      	cmp	r0, r3
   13022:	d000      	beq.n	13026 <I2cWriteData_SERCOM0+0x26>
        error = ERROR_IO;
   13024:	3b06      	subs	r3, #6
        goto exit;
    }

exit:
    return error;
}
   13026:	0018      	movs	r0, r3
   13028:	bd10      	pop	{r4, pc}
        error = ERR_INVALID_ARG;
   1302a:	2308      	movs	r3, #8
   1302c:	425b      	negs	r3, r3
   1302e:	e7fa      	b.n	13026 <I2cWriteData_SERCOM0+0x26>
   13030:	2000366c 	.word	0x2000366c
   13034:	20003644 	.word	0x20003644
   13038:	00012565 	.word	0x00012565

0001303c <I2cWriteData_SERCOM3>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData_SERCOM3(I2C_Data *data)
{
   1303c:	b510      	push	{r4, lr}
    int32_t error = ERROR_NONE;
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   1303e:	2800      	cmp	r0, #0
   13040:	d011      	beq.n	13066 <I2cWriteData_SERCOM3+0x2a>
   13042:	6843      	ldr	r3, [r0, #4]
   13044:	2b00      	cmp	r3, #0
   13046:	d00e      	beq.n	13066 <I2cWriteData_SERCOM3+0x2a>
        error = ERR_INVALID_ARG;
        goto exit;
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   13048:	7802      	ldrb	r2, [r0, #0]
   1304a:	4908      	ldr	r1, [pc, #32]	; (1306c <I2cWriteData_SERCOM3+0x30>)
   1304c:	800a      	strh	r2, [r1, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   1304e:	604b      	str	r3, [r1, #4]
    sensorPacketWrite.data_length = data->lenOut;
   13050:	89c3      	ldrh	r3, [r0, #14]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance2, &sensorPacketWrite);
   13052:	4807      	ldr	r0, [pc, #28]	; (13070 <I2cWriteData_SERCOM3+0x34>)
    sensorPacketWrite.data_length = data->lenOut;
   13054:	804b      	strh	r3, [r1, #2]
    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance2, &sensorPacketWrite);
   13056:	4b07      	ldr	r3, [pc, #28]	; (13074 <I2cWriteData_SERCOM3+0x38>)
   13058:	4798      	blx	r3
    int32_t error = ERROR_NONE;
   1305a:	2300      	movs	r3, #0

    if (STATUS_OK != hwError) {
   1305c:	4298      	cmp	r0, r3
   1305e:	d000      	beq.n	13062 <I2cWriteData_SERCOM3+0x26>
        error = ERROR_IO;
   13060:	3b06      	subs	r3, #6
        goto exit;
    }

exit:
    return error;
}
   13062:	0018      	movs	r0, r3
   13064:	bd10      	pop	{r4, pc}
        error = ERR_INVALID_ARG;
   13066:	2308      	movs	r3, #8
   13068:	425b      	negs	r3, r3
   1306a:	e7fa      	b.n	13062 <I2cWriteData_SERCOM3+0x26>
   1306c:	2000366c 	.word	0x2000366c
   13070:	20003614 	.word	0x20003614
   13074:	00012565 	.word	0x00012565

00013078 <I2cReadData_SERCOM0>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData_SERCOM0(I2C_Data *data)
{
   13078:	b510      	push	{r4, lr}
    int32_t error = ERROR_NONE;
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   1307a:	2800      	cmp	r0, #0
   1307c:	d012      	beq.n	130a4 <I2cReadData_SERCOM0+0x2c>
   1307e:	6843      	ldr	r3, [r0, #4]
   13080:	2b00      	cmp	r3, #0
   13082:	d00f      	beq.n	130a4 <I2cReadData_SERCOM0+0x2c>
        error = ERR_INVALID_ARG;
        goto exit;
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   13084:	7803      	ldrb	r3, [r0, #0]
   13086:	4909      	ldr	r1, [pc, #36]	; (130ac <I2cReadData_SERCOM0+0x34>)
   13088:	800b      	strh	r3, [r1, #0]
    sensorPacketWrite.data = data->msgIn;
   1308a:	6883      	ldr	r3, [r0, #8]
   1308c:	604b      	str	r3, [r1, #4]
    sensorPacketWrite.data_length = data->lenIn;
   1308e:	8983      	ldrh	r3, [r0, #12]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance1, &sensorPacketWrite);
   13090:	4807      	ldr	r0, [pc, #28]	; (130b0 <I2cReadData_SERCOM0+0x38>)
    sensorPacketWrite.data_length = data->lenIn;
   13092:	804b      	strh	r3, [r1, #2]
    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance1, &sensorPacketWrite);
   13094:	4b07      	ldr	r3, [pc, #28]	; (130b4 <I2cReadData_SERCOM0+0x3c>)
   13096:	4798      	blx	r3
    int32_t error = ERROR_NONE;
   13098:	2300      	movs	r3, #0

    if (STATUS_OK != hwError) {
   1309a:	4298      	cmp	r0, r3
   1309c:	d000      	beq.n	130a0 <I2cReadData_SERCOM0+0x28>
        error = ERROR_IO;
   1309e:	3b06      	subs	r3, #6
        goto exit;
    }

exit:
    return error;
}
   130a0:	0018      	movs	r0, r3
   130a2:	bd10      	pop	{r4, pc}
        error = ERR_INVALID_ARG;
   130a4:	2308      	movs	r3, #8
   130a6:	425b      	negs	r3, r3
   130a8:	e7fa      	b.n	130a0 <I2cReadData_SERCOM0+0x28>
   130aa:	46c0      	nop			; (mov r8, r8)
   130ac:	2000366c 	.word	0x2000366c
   130b0:	20003644 	.word	0x20003644
   130b4:	00012545 	.word	0x00012545

000130b8 <I2cReadData_SERCOM3>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData_SERCOM3(I2C_Data *data)
{
   130b8:	b510      	push	{r4, lr}
    int32_t error = ERROR_NONE;
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   130ba:	2800      	cmp	r0, #0
   130bc:	d012      	beq.n	130e4 <I2cReadData_SERCOM3+0x2c>
   130be:	6843      	ldr	r3, [r0, #4]
   130c0:	2b00      	cmp	r3, #0
   130c2:	d00f      	beq.n	130e4 <I2cReadData_SERCOM3+0x2c>
        error = ERR_INVALID_ARG;
        goto exit;
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   130c4:	7803      	ldrb	r3, [r0, #0]
   130c6:	4909      	ldr	r1, [pc, #36]	; (130ec <I2cReadData_SERCOM3+0x34>)
   130c8:	800b      	strh	r3, [r1, #0]
    sensorPacketWrite.data = data->msgIn;
   130ca:	6883      	ldr	r3, [r0, #8]
   130cc:	604b      	str	r3, [r1, #4]
    sensorPacketWrite.data_length = data->lenIn;
   130ce:	8983      	ldrh	r3, [r0, #12]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance2, &sensorPacketWrite);
   130d0:	4807      	ldr	r0, [pc, #28]	; (130f0 <I2cReadData_SERCOM3+0x38>)
    sensorPacketWrite.data_length = data->lenIn;
   130d2:	804b      	strh	r3, [r1, #2]
    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance2, &sensorPacketWrite);
   130d4:	4b07      	ldr	r3, [pc, #28]	; (130f4 <I2cReadData_SERCOM3+0x3c>)
   130d6:	4798      	blx	r3
    int32_t error = ERROR_NONE;
   130d8:	2300      	movs	r3, #0

    if (STATUS_OK != hwError) {
   130da:	4298      	cmp	r0, r3
   130dc:	d000      	beq.n	130e0 <I2cReadData_SERCOM3+0x28>
        error = ERROR_IO;
   130de:	3b06      	subs	r3, #6
        goto exit;
    }

exit:
    return error;
}
   130e0:	0018      	movs	r0, r3
   130e2:	bd10      	pop	{r4, pc}
        error = ERR_INVALID_ARG;
   130e4:	2308      	movs	r3, #8
   130e6:	425b      	negs	r3, r3
   130e8:	e7fa      	b.n	130e0 <I2cReadData_SERCOM3+0x28>
   130ea:	46c0      	nop			; (mov r8, r8)
   130ec:	2000366c 	.word	0x2000366c
   130f0:	20003614 	.word	0x20003614
   130f4:	00012545 	.word	0x00012545

000130f8 <I2cFreeMutex>:
 */
int32_t I2cFreeMutex(void)
{
    int32_t error = ERROR_NONE;

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   130f8:	2300      	movs	r3, #0
{
   130fa:	b510      	push	{r4, lr}
    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   130fc:	4805      	ldr	r0, [pc, #20]	; (13114 <I2cFreeMutex+0x1c>)
   130fe:	001a      	movs	r2, r3
   13100:	0019      	movs	r1, r3
   13102:	6800      	ldr	r0, [r0, #0]
   13104:	4c04      	ldr	r4, [pc, #16]	; (13118 <I2cFreeMutex+0x20>)
   13106:	47a0      	blx	r4
    int32_t error = ERROR_NONE;
   13108:	2300      	movs	r3, #0
    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   1310a:	2801      	cmp	r0, #1
   1310c:	d000      	beq.n	13110 <I2cFreeMutex+0x18>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   1310e:	3b14      	subs	r3, #20
    }
    return error;
}
   13110:	0018      	movs	r0, r3
   13112:	bd10      	pop	{r4, pc}
   13114:	2000363c 	.word	0x2000363c
   13118:	000156ed 	.word	0x000156ed

0001311c <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   1311c:	b510      	push	{r4, lr}
    int32_t error = ERROR_NONE;
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   1311e:	4b05      	ldr	r3, [pc, #20]	; (13134 <I2cGetMutex+0x18>)
{
   13120:	0001      	movs	r1, r0
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   13122:	6818      	ldr	r0, [r3, #0]
   13124:	4b04      	ldr	r3, [pc, #16]	; (13138 <I2cGetMutex+0x1c>)
   13126:	4798      	blx	r3
    int32_t error = ERROR_NONE;
   13128:	2300      	movs	r3, #0
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   1312a:	2801      	cmp	r0, #1
   1312c:	d000      	beq.n	13130 <I2cGetMutex+0x14>
        error = ERROR_NOT_READY;
   1312e:	3b1d      	subs	r3, #29
    }
    return error;
}
   13130:	0018      	movs	r0, r3
   13132:	bd10      	pop	{r4, pc}
   13134:	2000363c 	.word	0x2000363c
   13138:	00015f2d 	.word	0x00015f2d

0001313c <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime, I2CInterface i2cChannel)
{
   1313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1313e:	0005      	movs	r5, r0
    int32_t error = ERROR_NONE;
    SemaphoreHandle_t semHandle = NULL;

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13140:	2096      	movs	r0, #150	; 0x96
   13142:	4b13      	ldr	r3, [pc, #76]	; (13190 <I2cWriteDataWait+0x54>)
   13144:	0040      	lsls	r0, r0, #1
{
   13146:	000f      	movs	r7, r1
   13148:	0014      	movs	r4, r2
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   1314a:	4798      	blx	r3
    if (ERROR_NONE != error) goto exit;
   1314c:	2800      	cmp	r0, #0
   1314e:	d11a      	bne.n	13186 <I2cWriteDataWait+0x4a>
    *handle = sensorI2cSemaphoreHandle;
   13150:	4b10      	ldr	r3, [pc, #64]	; (13194 <I2cWriteDataWait+0x58>)
    error = I2cGetSemaphoreHandle(&semHandle);
    if (ERROR_NONE != error) goto exit;

    //--limbo select which interface to send on
    if(i2cChannel == SERCOM_0){
        error = I2cWriteData_SERCOM0(data);
   13152:	0028      	movs	r0, r5
    *handle = sensorI2cSemaphoreHandle;
   13154:	681e      	ldr	r6, [r3, #0]
        error = I2cWriteData_SERCOM0(data);
   13156:	4b10      	ldr	r3, [pc, #64]	; (13198 <I2cWriteDataWait+0x5c>)
    if(i2cChannel == SERCOM_0){
   13158:	2c01      	cmp	r4, #1
   1315a:	d100      	bne.n	1315e <I2cWriteDataWait+0x22>
    }
    else if(i2cChannel == SERCOM_3){
        error = I2cWriteData_SERCOM3(data);
   1315c:	4b0f      	ldr	r3, [pc, #60]	; (1319c <I2cWriteDataWait+0x60>)
   1315e:	4798      	blx	r3
   13160:	4d0f      	ldr	r5, [pc, #60]	; (131a0 <I2cWriteDataWait+0x64>)
   13162:	1e04      	subs	r4, r0, #0
    }

    //---2. Initiate sending data

    // error = I2cWriteData(data);
    if (ERROR_NONE != error) {
   13164:	d10b      	bne.n	1317e <I2cWriteDataWait+0x42>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13166:	0039      	movs	r1, r7
   13168:	0030      	movs	r0, r6
   1316a:	4b0e      	ldr	r3, [pc, #56]	; (131a4 <I2cWriteDataWait+0x68>)
   1316c:	4798      	blx	r3
   1316e:	2801      	cmp	r0, #1
   13170:	d10a      	bne.n	13188 <I2cWriteDataWait+0x4c>
    return sensorTransmitError;
   13172:	4b0d      	ldr	r3, [pc, #52]	; (131a8 <I2cWriteDataWait+0x6c>)
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13174:	781a      	ldrb	r2, [r3, #0]
   13176:	2a00      	cmp	r2, #0
   13178:	d004      	beq.n	13184 <I2cWriteDataWait+0x48>
    sensorTransmitError = value;
   1317a:	701c      	strb	r4, [r3, #0]
            I2cSetTaskErrorStatus(false);
            if (error != ERROR_NONE) {
                error = ERROR_I2C_HANG_RESET;
            } else {
                error = ERROR_ABORTED;
   1317c:	3c03      	subs	r4, #3
// xSemaphoreGive(semHandle);
exit:
    return error;

exitError0:
    error |= I2cFreeMutex();
   1317e:	47a8      	blx	r5
   13180:	4320      	orrs	r0, r4
    // xSemaphoreGive(semHandle);
    return error;
   13182:	e000      	b.n	13186 <I2cWriteDataWait+0x4a>
    error |= I2cFreeMutex();
   13184:	47a8      	blx	r5
}
   13186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        error = ERR_TIMEOUT;
   13188:	2403      	movs	r4, #3
   1318a:	4264      	negs	r4, r4
   1318c:	e7f7      	b.n	1317e <I2cWriteDataWait+0x42>
   1318e:	46c0      	nop			; (mov r8, r8)
   13190:	0001311d 	.word	0x0001311d
   13194:	20003640 	.word	0x20003640
   13198:	00013001 	.word	0x00013001
   1319c:	0001303d 	.word	0x0001303d
   131a0:	000130f9 	.word	0x000130f9
   131a4:	00015f2d 	.word	0x00015f2d
   131a8:	200003b4 	.word	0x200003b4

000131ac <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime, I2CInterface i2cChannel)
{
   131ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   131ae:	0004      	movs	r4, r0
    int32_t error = ERROR_NONE;
    SemaphoreHandle_t semHandle = NULL;

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   131b0:	2096      	movs	r0, #150	; 0x96
{
   131b2:	9300      	str	r3, [sp, #0]
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   131b4:	0040      	lsls	r0, r0, #1
   131b6:	4b1c      	ldr	r3, [pc, #112]	; (13228 <I2cReadDataWait+0x7c>)
{
   131b8:	9101      	str	r1, [sp, #4]
   131ba:	0017      	movs	r7, r2
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   131bc:	4798      	blx	r3
    if (ERROR_NONE != error) goto exit;
   131be:	2800      	cmp	r0, #0
   131c0:	d117      	bne.n	131f2 <I2cReadDataWait+0x46>
    *handle = sensorI2cSemaphoreHandle;
   131c2:	4b1a      	ldr	r3, [pc, #104]	; (1322c <I2cReadDataWait+0x80>)
    error = I2cGetSemaphoreHandle(&semHandle);
    if (ERROR_NONE != error) goto exit;

    //--limbo select which interface to send on
    if(i2cChannel == SERCOM_0){
        error = I2cWriteData_SERCOM0(data);
   131c4:	0020      	movs	r0, r4
    *handle = sensorI2cSemaphoreHandle;
   131c6:	681e      	ldr	r6, [r3, #0]
    if(i2cChannel == SERCOM_0){
   131c8:	9b00      	ldr	r3, [sp, #0]
   131ca:	2b01      	cmp	r3, #1
   131cc:	d012      	beq.n	131f4 <I2cReadDataWait+0x48>
        error = I2cWriteData_SERCOM0(data);
   131ce:	4b18      	ldr	r3, [pc, #96]	; (13230 <I2cReadDataWait+0x84>)
    }
    else if(i2cChannel == SERCOM_3){
        error = I2cWriteData_SERCOM3(data);
   131d0:	4798      	blx	r3
    }

    //---2. Initiate sending data

    // error = I2cWriteData(data);
    if (ERROR_NONE != error) {
   131d2:	2800      	cmp	r0, #0
   131d4:	d10b      	bne.n	131ee <I2cReadDataWait+0x42>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   131d6:	0039      	movs	r1, r7
   131d8:	0030      	movs	r0, r6
   131da:	4b16      	ldr	r3, [pc, #88]	; (13234 <I2cReadDataWait+0x88>)
   131dc:	4798      	blx	r3
   131de:	2801      	cmp	r0, #1
   131e0:	d105      	bne.n	131ee <I2cReadDataWait+0x42>
    return sensorTransmitError;
   131e2:	4d15      	ldr	r5, [pc, #84]	; (13238 <I2cReadDataWait+0x8c>)
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   131e4:	782b      	ldrb	r3, [r5, #0]
   131e6:	2b00      	cmp	r3, #0
   131e8:	d006      	beq.n	131f8 <I2cReadDataWait+0x4c>
    sensorTransmitError = value;
   131ea:	2300      	movs	r3, #0
   131ec:	702b      	strb	r3, [r5, #0]
// xSemaphoreGive(semHandle);
exit:
    return error;

exitError0:
    error = I2cFreeMutex();
   131ee:	4b13      	ldr	r3, [pc, #76]	; (1323c <I2cReadDataWait+0x90>)
   131f0:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
}
   131f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        error = I2cWriteData_SERCOM3(data);
   131f4:	4b12      	ldr	r3, [pc, #72]	; (13240 <I2cReadDataWait+0x94>)
   131f6:	e7eb      	b.n	131d0 <I2cReadDataWait+0x24>
        vTaskDelay(delay);
   131f8:	9801      	ldr	r0, [sp, #4]
   131fa:	4b12      	ldr	r3, [pc, #72]	; (13244 <I2cReadDataWait+0x98>)
   131fc:	4798      	blx	r3
    if(i2cChannel == SERCOM_0){
   131fe:	9b00      	ldr	r3, [sp, #0]
        error = I2cReadData_SERCOM0(data);
   13200:	0020      	movs	r0, r4
    if(i2cChannel == SERCOM_0){
   13202:	2b01      	cmp	r3, #1
   13204:	d00d      	beq.n	13222 <I2cReadDataWait+0x76>
        error = I2cReadData_SERCOM0(data);
   13206:	4b10      	ldr	r3, [pc, #64]	; (13248 <I2cReadDataWait+0x9c>)
        error = I2cReadData_SERCOM3(data);
   13208:	4798      	blx	r3
    if (ERROR_NONE != error) {
   1320a:	2800      	cmp	r0, #0
   1320c:	d1ef      	bne.n	131ee <I2cReadDataWait+0x42>
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1320e:	0039      	movs	r1, r7
   13210:	0030      	movs	r0, r6
   13212:	4b08      	ldr	r3, [pc, #32]	; (13234 <I2cReadDataWait+0x88>)
   13214:	4798      	blx	r3
   13216:	2801      	cmp	r0, #1
   13218:	d1e9      	bne.n	131ee <I2cReadDataWait+0x42>
        if (I2cGetTaskErrorStatus()) {
   1321a:	782b      	ldrb	r3, [r5, #0]
   1321c:	2b00      	cmp	r3, #0
   1321e:	d1e4      	bne.n	131ea <I2cReadDataWait+0x3e>
   13220:	e7e5      	b.n	131ee <I2cReadDataWait+0x42>
        error = I2cReadData_SERCOM3(data);
   13222:	4b0a      	ldr	r3, [pc, #40]	; (1324c <I2cReadDataWait+0xa0>)
   13224:	e7f0      	b.n	13208 <I2cReadDataWait+0x5c>
   13226:	46c0      	nop			; (mov r8, r8)
   13228:	0001311d 	.word	0x0001311d
   1322c:	20003640 	.word	0x20003640
   13230:	00013001 	.word	0x00013001
   13234:	00015f2d 	.word	0x00015f2d
   13238:	200003b4 	.word	0x200003b4
   1323c:	000130f9 	.word	0x000130f9
   13240:	0001303d 	.word	0x0001303d
   13244:	0001693d 	.word	0x0001693d
   13248:	00013079 	.word	0x00013079
   1324c:	000130b9 	.word	0x000130b9

00013250 <platform_delay>:
 * This is a simple wrapper function around the `delay_ms` function to add abstraction
 * and possibly make future changes to the delay mechanism easier to manage.
 *
 * @param ms Number of milliseconds to delay.
 */
static void platform_delay(uint32_t ms){
   13250:	b510      	push	{r4, lr}
  delay_ms(ms);
   13252:	4b03      	ldr	r3, [pc, #12]	; (13260 <platform_delay+0x10>)
   13254:	2800      	cmp	r0, #0
   13256:	d101      	bne.n	1325c <platform_delay+0xc>
   13258:	2001      	movs	r0, #1
   1325a:	4b02      	ldr	r3, [pc, #8]	; (13264 <platform_delay+0x14>)
   1325c:	4798      	blx	r3
}
   1325e:	bd10      	pop	{r4, pc}
   13260:	000177a1 	.word	0x000177a1
   13264:	00017775 	.word	0x00017775

00013268 <platform_read>:
{
   13268:	b510      	push	{r4, lr}
	imuData.address = 0x19;
   1326a:	4807      	ldr	r0, [pc, #28]	; (13288 <platform_read+0x20>)
	msgOutImu[0] = reg;
   1326c:	4c07      	ldr	r4, [pc, #28]	; (1328c <platform_read+0x24>)
	imuData.msgIn = bufp;
   1326e:	6082      	str	r2, [r0, #8]
	msgOutImu[0] = reg;
   13270:	7021      	strb	r1, [r4, #0]
	return I2cReadDataWait(&imuData, 100, 100, SERCOM_3);
   13272:	2264      	movs	r2, #100	; 0x64
	imuData.address = 0x19;
   13274:	2119      	movs	r1, #25
	imuData.lenIn = len;
   13276:	8183      	strh	r3, [r0, #12]
	imuData.lenOut = 1;
   13278:	2301      	movs	r3, #1
	imuData.address = 0x19;
   1327a:	7001      	strb	r1, [r0, #0]
	imuData.msgOut = &msgOutImu;
   1327c:	6044      	str	r4, [r0, #4]
	return I2cReadDataWait(&imuData, 100, 100, SERCOM_3);
   1327e:	0011      	movs	r1, r2
   13280:	4c03      	ldr	r4, [pc, #12]	; (13290 <platform_read+0x28>)
	imuData.lenOut = 1;
   13282:	81c3      	strh	r3, [r0, #14]
	return I2cReadDataWait(&imuData, 100, 100, SERCOM_3);
   13284:	47a0      	blx	r4
}
   13286:	bd10      	pop	{r4, pc}
   13288:	200036b8 	.word	0x200036b8
   1328c:	20003678 	.word	0x20003678
   13290:	000131ad 	.word	0x000131ad

00013294 <platform_write>:
{
   13294:	b570      	push	{r4, r5, r6, lr}
  msgOutImu[0] = reg;
   13296:	4c0c      	ldr	r4, [pc, #48]	; (132c8 <platform_write+0x34>)
   13298:	7021      	strb	r1, [r4, #0]
	for(uint16_t i=0; i < len; i++){
   1329a:	2100      	movs	r1, #0
   1329c:	b288      	uxth	r0, r1
   1329e:	4283      	cmp	r3, r0
   132a0:	d80c      	bhi.n	132bc <platform_write+0x28>
	imuData.address = 0x19;
   132a2:	2119      	movs	r1, #25
   132a4:	4809      	ldr	r0, [pc, #36]	; (132cc <platform_write+0x38>)
   132a6:	7001      	strb	r1, [r0, #0]
	imuData.lenOut = len + 1;
   132a8:	1c59      	adds	r1, r3, #1
   132aa:	81c1      	strh	r1, [r0, #14]
	imuData.lenIn = len;
   132ac:	8183      	strh	r3, [r0, #12]
	imuData.msgIn = bufp;
   132ae:	6082      	str	r2, [r0, #8]
  return I2cWriteDataWait(&imuData, 100, SERCOM_3);
   132b0:	2164      	movs	r1, #100	; 0x64
   132b2:	2201      	movs	r2, #1
   132b4:	4b06      	ldr	r3, [pc, #24]	; (132d0 <platform_write+0x3c>)
	imuData.msgOut = &msgOutImu;
   132b6:	6044      	str	r4, [r0, #4]
  return I2cWriteDataWait(&imuData, 100, SERCOM_3);
   132b8:	4798      	blx	r3
}
   132ba:	bd70      	pop	{r4, r5, r6, pc}
		msgOutImu[i+1] = bufp[i];
   132bc:	5c55      	ldrb	r5, [r2, r1]
   132be:	1860      	adds	r0, r4, r1
   132c0:	7045      	strb	r5, [r0, #1]
   132c2:	3101      	adds	r1, #1
   132c4:	e7ea      	b.n	1329c <platform_write+0x8>
   132c6:	46c0      	nop			; (mov r8, r8)
   132c8:	20003678 	.word	0x20003678
   132cc:	200036b8 	.word	0x200036b8
   132d0:	0001313d 	.word	0x0001313d

000132d4 <lis2dh_read_reg>:
{
   132d4:	b510      	push	{r4, lr}
  if (ctx == NULL)
   132d6:	2800      	cmp	r0, #0
   132d8:	d003      	beq.n	132e2 <lis2dh_read_reg+0xe>
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   132da:	6844      	ldr	r4, [r0, #4]
   132dc:	68c0      	ldr	r0, [r0, #12]
   132de:	47a0      	blx	r4
}
   132e0:	bd10      	pop	{r4, pc}
    return -1;
   132e2:	2001      	movs	r0, #1
   132e4:	4240      	negs	r0, r0
   132e6:	e7fb      	b.n	132e0 <lis2dh_read_reg+0xc>

000132e8 <lis2dh_from_fs2_hr_to_mg>:
{
   132e8:	b510      	push	{r4, lr}
  return ((float_t)lsb / 16.0f) * 1.0f;
   132ea:	4b03      	ldr	r3, [pc, #12]	; (132f8 <lis2dh_from_fs2_hr_to_mg+0x10>)
   132ec:	4798      	blx	r3
   132ee:	21f6      	movs	r1, #246	; 0xf6
   132f0:	4b02      	ldr	r3, [pc, #8]	; (132fc <lis2dh_from_fs2_hr_to_mg+0x14>)
   132f2:	0589      	lsls	r1, r1, #22
   132f4:	4798      	blx	r3
}
   132f6:	bd10      	pop	{r4, pc}
   132f8:	000197ed 	.word	0x000197ed
   132fc:	00019235 	.word	0x00019235

00013300 <lis2dh_xl_data_ready_get>:
{
   13300:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13302:	000c      	movs	r4, r1
  ret = lis2dh_read_reg(ctx, LIS2DH_STATUS_REG,
   13304:	ad01      	add	r5, sp, #4
   13306:	002a      	movs	r2, r5
   13308:	4e04      	ldr	r6, [pc, #16]	; (1331c <lis2dh_xl_data_ready_get+0x1c>)
   1330a:	2301      	movs	r3, #1
   1330c:	2127      	movs	r1, #39	; 0x27
   1330e:	47b0      	blx	r6
  *val = status_reg.zyxda;
   13310:	782b      	ldrb	r3, [r5, #0]
   13312:	071b      	lsls	r3, r3, #28
   13314:	0fdb      	lsrs	r3, r3, #31
   13316:	7023      	strb	r3, [r4, #0]
}
   13318:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1331a:	46c0      	nop			; (mov r8, r8)
   1331c:	000132d5 	.word	0x000132d5

00013320 <lis2dh_acceleration_raw_get>:
{
   13320:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = lis2dh_read_reg(ctx, LIS2DH_OUT_X_L | 0x80, buff, 6);
   13322:	2306      	movs	r3, #6
{
   13324:	000c      	movs	r4, r1
  ret = lis2dh_read_reg(ctx, LIS2DH_OUT_X_L | 0x80, buff, 6);
   13326:	466a      	mov	r2, sp
   13328:	4d0a      	ldr	r5, [pc, #40]	; (13354 <lis2dh_acceleration_raw_get+0x34>)
   1332a:	21a8      	movs	r1, #168	; 0xa8
   1332c:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   1332e:	466b      	mov	r3, sp
   13330:	785a      	ldrb	r2, [r3, #1]
   13332:	781b      	ldrb	r3, [r3, #0]
   13334:	0212      	lsls	r2, r2, #8
   13336:	189b      	adds	r3, r3, r2
   13338:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   1333a:	466b      	mov	r3, sp
   1333c:	78da      	ldrb	r2, [r3, #3]
   1333e:	789b      	ldrb	r3, [r3, #2]
   13340:	0212      	lsls	r2, r2, #8
   13342:	189b      	adds	r3, r3, r2
   13344:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   13346:	466b      	mov	r3, sp
   13348:	795a      	ldrb	r2, [r3, #5]
   1334a:	791b      	ldrb	r3, [r3, #4]
   1334c:	0212      	lsls	r2, r2, #8
   1334e:	189b      	adds	r3, r3, r2
   13350:	80a3      	strh	r3, [r4, #4]
}
   13352:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   13354:	000132d5 	.word	0x000132d5

00013358 <GetImuStruct>:
 * @return Pointer to the IMU device context.
 */
stmdev_ctx_t * GetImuStruct(void)
{
return &dev_ctx;
}
   13358:	4800      	ldr	r0, [pc, #0]	; (1335c <GetImuStruct+0x4>)
   1335a:	4770      	bx	lr
   1335c:	20000020 	.word	0x20000020

00013360 <InitIRSensor>:
 * It ensures that the sensors are ready to report their status without any pull-up or pull-down,
 * allowing for accurate distance sensing.
 * 
 * @return uint32_t Returns 0 if initialization is successful, a non-zero error code otherwise.
 */
uint32_t InitIRSensor(void){
   13360:	b573      	push	{r0, r1, r4, r5, r6, lr}
	config->input_pull = PORT_PIN_PULL_UP;
   13362:	2301      	movs	r3, #1
	config->direction  = PORT_PIN_DIR_INPUT;
   13364:	2500      	movs	r5, #0
   13366:	ac01      	add	r4, sp, #4
    struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

    pin_conf.direction  = PORT_PIN_DIR_INPUT;
    pin_conf.direction  = PORT_PIN_PULL_NONE;
	port_pin_set_config(LEFT_IR_SENSOR_PIN, &pin_conf);
   13368:	4e06      	ldr	r6, [pc, #24]	; (13384 <InitIRSensor+0x24>)
   1336a:	0021      	movs	r1, r4
   1336c:	2006      	movs	r0, #6
   1336e:	7025      	strb	r5, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   13370:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
   13372:	70a5      	strb	r5, [r4, #2]
   13374:	47b0      	blx	r6

    pin_conf.direction  = PORT_PIN_DIR_INPUT;
    pin_conf.direction  = PORT_PIN_PULL_NONE;
	port_pin_set_config(RIGHT_IR_SENSOR_PIN, &pin_conf);
   13376:	0021      	movs	r1, r4
   13378:	2005      	movs	r0, #5
    pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1337a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RIGHT_IR_SENSOR_PIN, &pin_conf);
   1337c:	47b0      	blx	r6

    return error;
}
   1337e:	0028      	movs	r0, r5
   13380:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   13382:	46c0      	nop			; (mov r8, r8)
   13384:	00017955 	.word	0x00017955

00013388 <read_sensor>:
	return (port_base->IN.reg & pin_mask);
   13388:	2101      	movs	r1, #1
   1338a:	4b05      	ldr	r3, [pc, #20]	; (133a0 <read_sensor+0x18>)
   1338c:	6a1a      	ldr	r2, [r3, #32]
   1338e:	0992      	lsrs	r2, r2, #6
   13390:	400a      	ands	r2, r1
 * indicates the presence of an object within the sensor's detection range.
 * 
 * @param sensor_data Pointer to a SensorData struct where the current states of the IR sensors will be stored.
 */
void read_sensor(struct SensorData *sensor_data){
    sensor_data->left_side = port_pin_get_input_level(LEFT_IR_SENSOR_PIN);
   13392:	7002      	strb	r2, [r0, #0]
   13394:	6a1b      	ldr	r3, [r3, #32]
   13396:	095b      	lsrs	r3, r3, #5
   13398:	400b      	ands	r3, r1
    sensor_data->right_side = port_pin_get_input_level(RIGHT_IR_SENSOR_PIN);
   1339a:	7043      	strb	r3, [r0, #1]
}
   1339c:	4770      	bx	lr
   1339e:	46c0      	nop			; (mov r8, r8)
   133a0:	41004400 	.word	0x41004400

000133a4 <apa102c_write_reg>:
  *
  */
static int32_t apa102c_write_reg(LEDdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   133a4:	b510      	push	{r4, lr}
    int32_t ret;

    ret = ctx->write_reg(ctx->handle, reg, data, len);
   133a6:	6804      	ldr	r4, [r0, #0]
   133a8:	6880      	ldr	r0, [r0, #8]
   133aa:	47a0      	blx	r4

    return ret; 
}
   133ac:	bd10      	pop	{r4, pc}
	...

000133b0 <platform_read>:
 * @param[out]   bufp Pointer to the data to write to (write what was read)
 * @param[in]   len Length of the data to be read
 * @return      Returns If no error returns ERROR_NONE
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   133b0:	b510      	push	{r4, lr}
	//YOUR JOB: Fill out the structure "LEDData" to send to the device
	//TIP: Check the structure "LEDData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	msgOutLED[0] = reg;
	LEDData.address = _LEDAddress;
   133b2:	4808      	ldr	r0, [pc, #32]	; (133d4 <platform_read+0x24>)
	msgOutLED[0] = reg;
   133b4:	4c08      	ldr	r4, [pc, #32]	; (133d8 <platform_read+0x28>)
	LEDData.msgIn = bufp;
   133b6:	6082      	str	r2, [r0, #8]
	msgOutLED[0] = reg;
   133b8:	7021      	strb	r1, [r4, #0]
	LEDData.lenIn = len;
	LEDData.lenOut = 1;
	LEDData.msgOut = &msgOutLED;
	
	return I2cReadDataWait(&LEDData, 100, 100, SERCOM_0);
   133ba:	2264      	movs	r2, #100	; 0x64
	LEDData.address = _LEDAddress;
   133bc:	2123      	movs	r1, #35	; 0x23
	LEDData.lenIn = len;
   133be:	8183      	strh	r3, [r0, #12]
	LEDData.lenOut = 1;
   133c0:	2301      	movs	r3, #1
	LEDData.address = _LEDAddress;
   133c2:	7001      	strb	r1, [r0, #0]
	LEDData.lenOut = 1;
   133c4:	81c3      	strh	r3, [r0, #14]
	LEDData.msgOut = &msgOutLED;
   133c6:	6044      	str	r4, [r0, #4]
	return I2cReadDataWait(&LEDData, 100, 100, SERCOM_0);
   133c8:	2300      	movs	r3, #0
   133ca:	0011      	movs	r1, r2
   133cc:	4c03      	ldr	r4, [pc, #12]	; (133dc <platform_read+0x2c>)
   133ce:	47a0      	blx	r4
}
   133d0:	bd10      	pop	{r4, pc}
   133d2:	46c0      	nop			; (mov r8, r8)
   133d4:	200036c8 	.word	0x200036c8
   133d8:	200036d8 	.word	0x200036d8
   133dc:	000131ad 	.word	0x000131ad

000133e0 <platform_write>:
{
   133e0:	b570      	push	{r4, r5, r6, lr}
  msgOutLED[0] = reg;
   133e2:	4c0c      	ldr	r4, [pc, #48]	; (13414 <platform_write+0x34>)
   133e4:	7021      	strb	r1, [r4, #0]
	for(uint16_t i=0; i < len; i++){
   133e6:	2100      	movs	r1, #0
   133e8:	b288      	uxth	r0, r1
   133ea:	4283      	cmp	r3, r0
   133ec:	d80c      	bhi.n	13408 <platform_write+0x28>
	LEDData.address = _LEDAddress;
   133ee:	2123      	movs	r1, #35	; 0x23
   133f0:	4809      	ldr	r0, [pc, #36]	; (13418 <platform_write+0x38>)
   133f2:	7001      	strb	r1, [r0, #0]
	LEDData.lenOut = len + 1;
   133f4:	1c59      	adds	r1, r3, #1
   133f6:	81c1      	strh	r1, [r0, #14]
	LEDData.lenIn = len;
   133f8:	8183      	strh	r3, [r0, #12]
	LEDData.msgIn = bufp;
   133fa:	6082      	str	r2, [r0, #8]
  return I2cWriteDataWait(&LEDData, 100, SERCOM_0);
   133fc:	2164      	movs	r1, #100	; 0x64
   133fe:	2200      	movs	r2, #0
   13400:	4b06      	ldr	r3, [pc, #24]	; (1341c <platform_write+0x3c>)
	LEDData.msgOut = &msgOutLED;
   13402:	6044      	str	r4, [r0, #4]
  return I2cWriteDataWait(&LEDData, 100, SERCOM_0);
   13404:	4798      	blx	r3
}
   13406:	bd70      	pop	{r4, r5, r6, pc}
		msgOutLED[i+1] = bufp[i];
   13408:	5c55      	ldrb	r5, [r2, r1]
   1340a:	1860      	adds	r0, r4, r1
   1340c:	7045      	strb	r5, [r0, #1]
   1340e:	3101      	adds	r1, #1
   13410:	e7ea      	b.n	133e8 <platform_write+0x8>
   13412:	46c0      	nop			; (mov r8, r8)
   13414:	200036d8 	.word	0x200036d8
   13418:	200036c8 	.word	0x200036c8
   1341c:	0001313d 	.word	0x0001313d

00013420 <setLEDColor_index>:
uint32_t setLEDColor_index(LEDdev_ctx_t *ctx, uint8_t number, uint8_t red, uint8_t green, uint8_t blue) {
   13420:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13422:	ac06      	add	r4, sp, #24
   13424:	7825      	ldrb	r5, [r4, #0]
reg[0] = number;
   13426:	ac01      	add	r4, sp, #4
reg[3] = blue;
   13428:	70e5      	strb	r5, [r4, #3]
reg[0] = number;
   1342a:	7021      	strb	r1, [r4, #0]
reg[1] = red;
   1342c:	7062      	strb	r2, [r4, #1]
reg[2] = green;
   1342e:	70a3      	strb	r3, [r4, #2]
error = apa102c_write_reg(ctx, COMMAND_WRITE_SINGLE_LED_COLOR, &reg, 4);
   13430:	0022      	movs	r2, r4
   13432:	2304      	movs	r3, #4
   13434:	2171      	movs	r1, #113	; 0x71
   13436:	4c01      	ldr	r4, [pc, #4]	; (1343c <setLEDColor_index+0x1c>)
   13438:	47a0      	blx	r4
}
   1343a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1343c:	000133a5 	.word	0x000133a5

00013440 <setLEDColor_all>:
uint32_t setLEDColor_all(LEDdev_ctx_t *ctx, uint8_t red, uint8_t green, uint8_t blue) {
   13440:	b513      	push	{r0, r1, r4, lr}
  reg[0] = red;
   13442:	ac01      	add	r4, sp, #4
   13444:	7021      	strb	r1, [r4, #0]
  reg[1] = green;
   13446:	7062      	strb	r2, [r4, #1]
  reg[2] = blue;
   13448:	70a3      	strb	r3, [r4, #2]
  error = apa102c_write_reg(ctx, COMMAND_WRITE_ALL_LED_COLOR, &reg, 3);
   1344a:	0022      	movs	r2, r4
   1344c:	2303      	movs	r3, #3
   1344e:	2172      	movs	r1, #114	; 0x72
   13450:	4c01      	ldr	r4, [pc, #4]	; (13458 <setLEDColor_all+0x18>)
   13452:	47a0      	blx	r4
}
   13454:	bd16      	pop	{r1, r2, r4, pc}
   13456:	46c0      	nop			; (mov r8, r8)
   13458:	000133a5 	.word	0x000133a5

0001345c <setLEDColor_index_all>:
uint32_t setLEDColor_index_all(LEDdev_ctx_t *ctx, uint8_t redArray[], uint8_t greenArray[], uint8_t blueArray[], uint8_t length) {
   1345c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1345e:	b08f      	sub	sp, #60	; 0x3c
   13460:	9304      	str	r3, [sp, #16]
   13462:	ab14      	add	r3, sp, #80	; 0x50
   13464:	781d      	ldrb	r5, [r3, #0]
   13466:	9001      	str	r0, [sp, #4]
   13468:	9103      	str	r1, [sp, #12]
  uint8_t len = length % 12; //value for remainder of division length/12
   1346a:	0028      	movs	r0, r5
   1346c:	4b54      	ldr	r3, [pc, #336]	; (135c0 <setLEDColor_index_all+0x164>)
   1346e:	210c      	movs	r1, #12
uint32_t setLEDColor_index_all(LEDdev_ctx_t *ctx, uint8_t redArray[], uint8_t greenArray[], uint8_t blueArray[], uint8_t length) {
   13470:	0017      	movs	r7, r2
  uint8_t len = length % 12; //value for remainder of division length/12
   13472:	4798      	blx	r3
  for (n = 0; n < length / 12; n++) { //will repeat for the # of times 12 goes into length evenly
   13474:	0028      	movs	r0, r5
   13476:	4b53      	ldr	r3, [pc, #332]	; (135c4 <setLEDColor_index_all+0x168>)
  uint8_t len = length % 12; //value for remainder of division length/12
   13478:	b2ce      	uxtb	r6, r1
  for (n = 0; n < length / 12; n++) { //will repeat for the # of times 12 goes into length evenly
   1347a:	210c      	movs	r1, #12
   1347c:	4798      	blx	r3
   1347e:	b2c3      	uxtb	r3, r0
   13480:	9302      	str	r3, [sp, #8]
   13482:	230c      	movs	r3, #12
   13484:	9903      	ldr	r1, [sp, #12]
  uint32_t error = ERROR_NONE;
   13486:	2000      	movs	r0, #0
  for (n = 0; n < length / 12; n++) { //will repeat for the # of times 12 goes into length evenly
   13488:	000d      	movs	r5, r1
   1348a:	9a02      	ldr	r2, [sp, #8]
    reg[0] = 12;
   1348c:	9307      	str	r3, [sp, #28]
   1348e:	435a      	muls	r2, r3
   13490:	9205      	str	r2, [sp, #20]
   13492:	188a      	adds	r2, r1, r2
   13494:	9206      	str	r2, [sp, #24]
  for (n = 0; n < length / 12; n++) { //will repeat for the # of times 12 goes into length evenly
   13496:	9b06      	ldr	r3, [sp, #24]
   13498:	429d      	cmp	r5, r3
   1349a:	d145      	bne.n	13528 <setLEDColor_index_all+0xcc>
  if (len != 0) { //will transmit if there is a remainder of the division length/12
   1349c:	2e00      	cmp	r6, #0
   1349e:	d00f      	beq.n	134c0 <setLEDColor_index_all+0x64>
    reg[1] = n * 12;
   134a0:	210c      	movs	r1, #12
   134a2:	9b02      	ldr	r3, [sp, #8]
        reg[i + 2] = redArray[n * 12 + i];
   134a4:	9803      	ldr	r0, [sp, #12]
    reg[1] = n * 12;
   134a6:	4359      	muls	r1, r3
    for(uint32_t i=0; i < len; i++){
   134a8:	2300      	movs	r3, #0
    reg[0] = len;
   134aa:	aa09      	add	r2, sp, #36	; 0x24
   134ac:	7016      	strb	r6, [r2, #0]
    reg[1] = n * 12;
   134ae:	7051      	strb	r1, [r2, #1]
        reg[i + 2] = redArray[n * 12 + i];
   134b0:	1844      	adds	r4, r0, r1
    for(uint32_t i=0; i < len; i++){
   134b2:	42b3      	cmp	r3, r6
   134b4:	d34d      	bcc.n	13552 <setLEDColor_index_all+0xf6>
    error = apa102c_write_reg(ctx, COMMAND_WRITE_RED_ARRAY, &reg, len+2);
   134b6:	1cb3      	adds	r3, r6, #2
   134b8:	2173      	movs	r1, #115	; 0x73
   134ba:	9801      	ldr	r0, [sp, #4]
   134bc:	4c42      	ldr	r4, [pc, #264]	; (135c8 <setLEDColor_index_all+0x16c>)
   134be:	47a0      	blx	r4
    for(uint32_t i=0; i < 12; i++){
   134c0:	003c      	movs	r4, r7
   134c2:	9b05      	ldr	r3, [sp, #20]
   134c4:	18fb      	adds	r3, r7, r3
   134c6:	9303      	str	r3, [sp, #12]
  for (n = 0; n < length / 12; n++) {
   134c8:	9b03      	ldr	r3, [sp, #12]
   134ca:	429c      	cmp	r4, r3
   134cc:	d146      	bne.n	1355c <setLEDColor_index_all+0x100>
  if (len != 0) {
   134ce:	2e00      	cmp	r6, #0
   134d0:	d00e      	beq.n	134f0 <setLEDColor_index_all+0x94>
    reg[1] = n * 12;
   134d2:	230c      	movs	r3, #12
   134d4:	9902      	ldr	r1, [sp, #8]
    reg[0] = len;
   134d6:	aa09      	add	r2, sp, #36	; 0x24
    reg[1] = n * 12;
   134d8:	434b      	muls	r3, r1
    for(uint32_t i=0; i < len; i++){
   134da:	2100      	movs	r1, #0
    reg[0] = len;
   134dc:	7016      	strb	r6, [r2, #0]
    reg[1] = n * 12;
   134de:	7053      	strb	r3, [r2, #1]
        reg[i + 2] = greenArray[n * 12 + i];
   134e0:	18ff      	adds	r7, r7, r3
    for(uint32_t i=0; i < len; i++){
   134e2:	42b1      	cmp	r1, r6
   134e4:	d34d      	bcc.n	13582 <setLEDColor_index_all+0x126>
    error = apa102c_write_reg(ctx, COMMAND_WRITE_GREEN_ARRAY, &reg, len+2);
   134e6:	1cb3      	adds	r3, r6, #2
   134e8:	2174      	movs	r1, #116	; 0x74
   134ea:	9801      	ldr	r0, [sp, #4]
   134ec:	4c36      	ldr	r4, [pc, #216]	; (135c8 <setLEDColor_index_all+0x16c>)
   134ee:	47a0      	blx	r4
   134f0:	9a04      	ldr	r2, [sp, #16]
   134f2:	9b05      	ldr	r3, [sp, #20]
   134f4:	4694      	mov	ip, r2
   134f6:	4463      	add	r3, ip
   134f8:	001c      	movs	r4, r3
    for(uint32_t i=0; i < 12; i++){
   134fa:	0015      	movs	r5, r2
  for (n = 0; n < length / 12; n++) {
   134fc:	42a5      	cmp	r5, r4
   134fe:	d145      	bne.n	1358c <setLEDColor_index_all+0x130>
  if (len != 0) {
   13500:	2e00      	cmp	r6, #0
   13502:	d00f      	beq.n	13524 <setLEDColor_index_all+0xc8>
    reg[1] = n * 12;
   13504:	200c      	movs	r0, #12
   13506:	9b02      	ldr	r3, [sp, #8]
        reg[i + 2] = blueArray[n * 12 + i];
   13508:	9904      	ldr	r1, [sp, #16]
    reg[1] = n * 12;
   1350a:	4358      	muls	r0, r3
    for(uint32_t i=0; i < len; i++){
   1350c:	2300      	movs	r3, #0
    reg[0] = len;
   1350e:	aa09      	add	r2, sp, #36	; 0x24
    reg[1] = n * 12;
   13510:	7050      	strb	r0, [r2, #1]
    reg[0] = len;
   13512:	7016      	strb	r6, [r2, #0]
        reg[i + 2] = blueArray[n * 12 + i];
   13514:	1808      	adds	r0, r1, r0
    for(uint32_t i=0; i < len; i++){
   13516:	42b3      	cmp	r3, r6
   13518:	d34c      	bcc.n	135b4 <setLEDColor_index_all+0x158>
    error = apa102c_write_reg(ctx, COMMAND_WRITE_BLUE_ARRAY, &reg, len+2);
   1351a:	1cb3      	adds	r3, r6, #2
   1351c:	2175      	movs	r1, #117	; 0x75
   1351e:	9801      	ldr	r0, [sp, #4]
   13520:	4c29      	ldr	r4, [pc, #164]	; (135c8 <setLEDColor_index_all+0x16c>)
   13522:	47a0      	blx	r4
}
   13524:	b00f      	add	sp, #60	; 0x3c
   13526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    reg[0] = 12;
   13528:	466b      	mov	r3, sp
   1352a:	7f1b      	ldrb	r3, [r3, #28]
   1352c:	aa09      	add	r2, sp, #36	; 0x24
   1352e:	7013      	strb	r3, [r2, #0]
    reg[1] = n * 12;
   13530:	9b03      	ldr	r3, [sp, #12]
   13532:	1aeb      	subs	r3, r5, r3
   13534:	7053      	strb	r3, [r2, #1]
    for(uint32_t i=0; i < 12; i++){
   13536:	2300      	movs	r3, #0
        reg[i + 2] = redArray[n * 12 + i];
   13538:	5ce8      	ldrb	r0, [r5, r3]
   1353a:	18d1      	adds	r1, r2, r3
    for(uint32_t i=0; i < 12; i++){
   1353c:	3301      	adds	r3, #1
        reg[i + 2] = redArray[n * 12 + i];
   1353e:	7088      	strb	r0, [r1, #2]
    for(uint32_t i=0; i < 12; i++){
   13540:	2b0c      	cmp	r3, #12
   13542:	d1f9      	bne.n	13538 <setLEDColor_index_all+0xdc>
    error = apa102c_write_reg(ctx, COMMAND_WRITE_RED_ARRAY, &reg, 14);
   13544:	3302      	adds	r3, #2
   13546:	2173      	movs	r1, #115	; 0x73
   13548:	9801      	ldr	r0, [sp, #4]
   1354a:	4c1f      	ldr	r4, [pc, #124]	; (135c8 <setLEDColor_index_all+0x16c>)
   1354c:	47a0      	blx	r4
   1354e:	350c      	adds	r5, #12
   13550:	e7a1      	b.n	13496 <setLEDColor_index_all+0x3a>
        reg[i + 2] = redArray[n * 12 + i];
   13552:	5ce0      	ldrb	r0, [r4, r3]
   13554:	18d1      	adds	r1, r2, r3
   13556:	7088      	strb	r0, [r1, #2]
    for(uint32_t i=0; i < len; i++){
   13558:	3301      	adds	r3, #1
   1355a:	e7aa      	b.n	134b2 <setLEDColor_index_all+0x56>
    reg[0] = 12;
   1355c:	230c      	movs	r3, #12
   1355e:	aa09      	add	r2, sp, #36	; 0x24
   13560:	7013      	strb	r3, [r2, #0]
    reg[1] = n * 12;
   13562:	1be3      	subs	r3, r4, r7
   13564:	7053      	strb	r3, [r2, #1]
    for(uint32_t i=0; i < 12; i++){
   13566:	2300      	movs	r3, #0
        reg[i + 2] = greenArray[n * 12 + i];
   13568:	5ce0      	ldrb	r0, [r4, r3]
   1356a:	18d1      	adds	r1, r2, r3
    for(uint32_t i=0; i < 12; i++){
   1356c:	3301      	adds	r3, #1
        reg[i + 2] = greenArray[n * 12 + i];
   1356e:	7088      	strb	r0, [r1, #2]
    for(uint32_t i=0; i < 12; i++){
   13570:	2b0c      	cmp	r3, #12
   13572:	d1f9      	bne.n	13568 <setLEDColor_index_all+0x10c>
    error = apa102c_write_reg(ctx, COMMAND_WRITE_GREEN_ARRAY, &reg, 14);
   13574:	3302      	adds	r3, #2
   13576:	2174      	movs	r1, #116	; 0x74
   13578:	9801      	ldr	r0, [sp, #4]
   1357a:	4d13      	ldr	r5, [pc, #76]	; (135c8 <setLEDColor_index_all+0x16c>)
   1357c:	47a8      	blx	r5
   1357e:	340c      	adds	r4, #12
   13580:	e7a2      	b.n	134c8 <setLEDColor_index_all+0x6c>
        reg[i + 2] = greenArray[n * 12 + i];
   13582:	5c78      	ldrb	r0, [r7, r1]
   13584:	1853      	adds	r3, r2, r1
   13586:	7098      	strb	r0, [r3, #2]
    for(uint32_t i=0; i < len; i++){
   13588:	3101      	adds	r1, #1
   1358a:	e7aa      	b.n	134e2 <setLEDColor_index_all+0x86>
    reg[0] = 12;
   1358c:	230c      	movs	r3, #12
   1358e:	aa09      	add	r2, sp, #36	; 0x24
   13590:	7013      	strb	r3, [r2, #0]
    reg[1] = n * 12;
   13592:	9b04      	ldr	r3, [sp, #16]
   13594:	1aeb      	subs	r3, r5, r3
   13596:	7053      	strb	r3, [r2, #1]
    for(uint32_t i=0; i < 12; i++){
   13598:	2300      	movs	r3, #0
        reg[i + 2] = blueArray[n * 12 + i];
   1359a:	5ce8      	ldrb	r0, [r5, r3]
   1359c:	18d1      	adds	r1, r2, r3
    for(uint32_t i=0; i < 12; i++){
   1359e:	3301      	adds	r3, #1
        reg[i + 2] = blueArray[n * 12 + i];
   135a0:	7088      	strb	r0, [r1, #2]
    for(uint32_t i=0; i < 12; i++){
   135a2:	2b0c      	cmp	r3, #12
   135a4:	d1f9      	bne.n	1359a <setLEDColor_index_all+0x13e>
    error = apa102c_write_reg(ctx, COMMAND_WRITE_BLUE_ARRAY, &reg, 14);
   135a6:	3302      	adds	r3, #2
   135a8:	2175      	movs	r1, #117	; 0x75
   135aa:	9801      	ldr	r0, [sp, #4]
   135ac:	4f06      	ldr	r7, [pc, #24]	; (135c8 <setLEDColor_index_all+0x16c>)
   135ae:	47b8      	blx	r7
   135b0:	350c      	adds	r5, #12
   135b2:	e7a3      	b.n	134fc <setLEDColor_index_all+0xa0>
        reg[i + 2] = blueArray[n * 12 + i];
   135b4:	5cc4      	ldrb	r4, [r0, r3]
   135b6:	18d1      	adds	r1, r2, r3
   135b8:	708c      	strb	r4, [r1, #2]
    for(uint32_t i=0; i < len; i++){
   135ba:	3301      	adds	r3, #1
   135bc:	e7ab      	b.n	13516 <setLEDColor_index_all+0xba>
   135be:	46c0      	nop			; (mov r8, r8)
   135c0:	00018f31 	.word	0x00018f31
   135c4:	00018e25 	.word	0x00018e25
   135c8:	000133a5 	.word	0x000133a5

000135cc <setLEDBrightness_all>:
uint32_t setLEDBrightness_all(LEDdev_ctx_t *ctx, uint8_t brightness) {
   135cc:	b513      	push	{r0, r1, r4, lr}
  uint8_t reg = brightness;
   135ce:	466b      	mov	r3, sp
   135d0:	1dda      	adds	r2, r3, #7
   135d2:	7011      	strb	r1, [r2, #0]
  error = apa102c_write_reg(ctx, COMMAND_WRITE_ALL_LED_BRIGHTNESS, &reg, 1);
   135d4:	2301      	movs	r3, #1
   135d6:	2177      	movs	r1, #119	; 0x77
   135d8:	4c01      	ldr	r4, [pc, #4]	; (135e0 <setLEDBrightness_all+0x14>)
   135da:	47a0      	blx	r4
}
   135dc:	bd16      	pop	{r1, r2, r4, pc}
   135de:	46c0      	nop			; (mov r8, r8)
   135e0:	000133a5 	.word	0x000133a5

000135e4 <LEDOff>:
uint32_t LEDOff(LEDdev_ctx_t *ctx) {
   135e4:	b513      	push	{r0, r1, r4, lr}
    uint8_t reg = 0;
   135e6:	466b      	mov	r3, sp
   135e8:	1dda      	adds	r2, r3, #7
   135ea:	2300      	movs	r3, #0
    error = apa102c_write_reg(ctx, COMMAND_WRITE_ALL_LED_OFF, &reg, 0);
   135ec:	2178      	movs	r1, #120	; 0x78
   135ee:	4c02      	ldr	r4, [pc, #8]	; (135f8 <LEDOff+0x14>)
    uint8_t reg = 0;
   135f0:	7013      	strb	r3, [r2, #0]
    error = apa102c_write_reg(ctx, COMMAND_WRITE_ALL_LED_OFF, &reg, 0);
   135f2:	47a0      	blx	r4
}
   135f4:	bd16      	pop	{r1, r2, r4, pc}
   135f6:	46c0      	nop			; (mov r8, r8)
   135f8:	000133a5 	.word	0x000133a5

000135fc <GetLEDStruct>:
 * @return LEDdev_ctx_t* 
 */
LEDdev_ctx_t * GetLEDStruct(void)
{
return &dev_ctx_APA102C;
}
   135fc:	4800      	ldr	r0, [pc, #0]	; (13600 <GetLEDStruct+0x4>)
   135fe:	4770      	bx	lr
   13600:	20000030 	.word	0x20000030

00013604 <InitLED>:
 * Can be customized to whatever is needed during Init
 * Perhaps a Initializes LED dance
 * @return int32_t If no error returns ERROR_NONE
 */
int32_t InitLED(void)
{
   13604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
uint8_t rst;
int32_t error = ERROR_NONE;
setLEDBrightness_all(&dev_ctx_APA102C, PER_BRIGHTNESS(10));
   13606:	4e0d      	ldr	r6, [pc, #52]	; (1363c <InitLED+0x38>)
   13608:	2103      	movs	r1, #3
   1360a:	0030      	movs	r0, r6
   1360c:	4b0c      	ldr	r3, [pc, #48]	; (13640 <InitLED+0x3c>)
   1360e:	4798      	blx	r3
for(uint8_t i=0; i<10; i++){
   13610:	2400      	movs	r4, #0
    setLEDColor_index(&dev_ctx_APA102C, i, 0, 200, 0);
   13612:	2500      	movs	r5, #0
   13614:	0021      	movs	r1, r4
   13616:	23c8      	movs	r3, #200	; 0xc8
   13618:	002a      	movs	r2, r5
   1361a:	9500      	str	r5, [sp, #0]
   1361c:	0030      	movs	r0, r6
   1361e:	4f09      	ldr	r7, [pc, #36]	; (13644 <InitLED+0x40>)
   13620:	47b8      	blx	r7
    delay_ms(300);
   13622:	2096      	movs	r0, #150	; 0x96
for(uint8_t i=0; i<10; i++){
   13624:	3401      	adds	r4, #1
    delay_ms(300);
   13626:	0040      	lsls	r0, r0, #1
   13628:	4b07      	ldr	r3, [pc, #28]	; (13648 <InitLED+0x44>)
for(uint8_t i=0; i<10; i++){
   1362a:	b2e4      	uxtb	r4, r4
    delay_ms(300);
   1362c:	4798      	blx	r3
for(uint8_t i=0; i<10; i++){
   1362e:	2c0a      	cmp	r4, #10
   13630:	d1ef      	bne.n	13612 <InitLED+0xe>
}
LEDOff(&dev_ctx_APA102C);
   13632:	0030      	movs	r0, r6
   13634:	4b05      	ldr	r3, [pc, #20]	; (1364c <InitLED+0x48>)
   13636:	4798      	blx	r3
return error;
}
   13638:	0028      	movs	r0, r5
   1363a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1363c:	20000030 	.word	0x20000030
   13640:	000135cd 	.word	0x000135cd
   13644:	00013421 	.word	0x00013421
   13648:	000177a1 	.word	0x000177a1
   1364c:	000135e5 	.word	0x000135e5

00013650 <blink_red>:
 * It uses a 250ms on-off cycle.
 *
 * @param led_ctx Pointer to LED device context for controlling LED hardware.
 */
static void blink_red(LEDdev_ctx_t *led_ctx){
    setLEDColor_all(led_ctx, 255, 0, 0);
   13650:	2300      	movs	r3, #0
static void blink_red(LEDdev_ctx_t *led_ctx){
   13652:	b570      	push	{r4, r5, r6, lr}
    setLEDColor_all(led_ctx, 255, 0, 0);
   13654:	001a      	movs	r2, r3
   13656:	4d07      	ldr	r5, [pc, #28]	; (13674 <blink_red+0x24>)
   13658:	21ff      	movs	r1, #255	; 0xff
static void blink_red(LEDdev_ctx_t *led_ctx){
   1365a:	0006      	movs	r6, r0
    setLEDColor_all(led_ctx, 255, 0, 0);
   1365c:	47a8      	blx	r5
    vTaskDelay(250 / portTICK_PERIOD_MS);
   1365e:	4c06      	ldr	r4, [pc, #24]	; (13678 <blink_red+0x28>)
   13660:	20fa      	movs	r0, #250	; 0xfa
   13662:	47a0      	blx	r4
    setLEDColor_all(led_ctx, 0, 0, 0);
   13664:	2300      	movs	r3, #0
   13666:	0030      	movs	r0, r6
   13668:	001a      	movs	r2, r3
   1366a:	0019      	movs	r1, r3
   1366c:	47a8      	blx	r5
    vTaskDelay(250 / portTICK_PERIOD_MS);
   1366e:	20fa      	movs	r0, #250	; 0xfa
   13670:	47a0      	blx	r4
}
   13672:	bd70      	pop	{r4, r5, r6, pc}
   13674:	00013441 	.word	0x00013441
   13678:	0001693d 	.word	0x0001693d

0001367c <LedTask>:
 * @brief Main task function for controlling LEDs based on bike mode.
 *
 * This function initializes the LED device, sets the initial system state, and
 * continuously checks and updates the LED states based on the current bike mode.
 */
void LedTask(void *pvParameters){
   1367c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1367e:	b095      	sub	sp, #84	; 0x54
   13680:	af02      	add	r7, sp, #8
    uint8_t r_value, g_value, b_value;
    // static struct ImuDataPacket imudataVar = {.xmg=0,.ymg=0,.zmg=0};
    int16_t raw_acceleration_data[3];                                ///< Buffer for raw acceleration data
    struct ImuDataPacket imudataVar;                                         ///< Data packet for IMU data      
    uint8_t data_ready_flag;                                            ///< Flag to check if new IMU data is available
    vTaskDelay(100);
   13682:	2064      	movs	r0, #100	; 0x64
   13684:	4bb1      	ldr	r3, [pc, #708]	; (1394c <LedTask+0x2d0>)
   13686:	4798      	blx	r3
    // stmdev_ctx_t *dev_ctx = GetImuStruct();                                 ///< IMU device context
    LEDdev_ctx_t *led_dev = GetLEDStruct();                   ///< LED device context for controlling LED hardware.
   13688:	4bb1      	ldr	r3, [pc, #708]	; (13950 <LedTask+0x2d4>)
   1368a:	4798      	blx	r3
    LEDOff(led_dev);
   1368c:	4bb1      	ldr	r3, [pc, #708]	; (13954 <LedTask+0x2d8>)
    LEDdev_ctx_t *led_dev = GetLEDStruct();                   ///< LED device context for controlling LED hardware.
   1368e:	61f8      	str	r0, [r7, #28]
    LEDOff(led_dev);
   13690:	4798      	blx	r3
    setLEDBrightness_all(led_dev, 1);
   13692:	4bb1      	ldr	r3, [pc, #708]	; (13958 <LedTask+0x2dc>)
   13694:	2101      	movs	r1, #1
   13696:	69f8      	ldr	r0, [r7, #28]
   13698:	4798      	blx	r3
    current_state = state;
   1369a:	2302      	movs	r3, #2
   1369c:	4aaf      	ldr	r2, [pc, #700]	; (1395c <LedTask+0x2e0>)
   1369e:	7013      	strb	r3, [r2, #0]
    bike_mode_state = state;
   136a0:	4aaf      	ldr	r2, [pc, #700]	; (13960 <LedTask+0x2e4>)
   136a2:	7013      	strb	r3, [r2, #0]
        //     imudataVar.ymg = (int16_t)from_fs2_to_mg(raw_acceleration_data[1]);
        //     imudataVar.zmg = (int16_t)from_fs2_to_mg(raw_acceleration_data[2]);
        //     WifiAddImuDataToQueue(&imudataVar);
            // vTaskDelay(50);
        // }
        switch (current_state)
   136a4:	4bad      	ldr	r3, [pc, #692]	; (1395c <LedTask+0x2e0>)
   136a6:	781a      	ldrb	r2, [r3, #0]
   136a8:	2a01      	cmp	r2, #1
   136aa:	d07c      	beq.n	137a6 <LedTask+0x12a>
   136ac:	2a00      	cmp	r2, #0
   136ae:	d033      	beq.n	13718 <LedTask+0x9c>
   136b0:	2a02      	cmp	r2, #2
   136b2:	d1f9      	bne.n	136a8 <LedTask+0x2c>
static void WalkingRainbow(LEDdev_ctx_t *led_ctx, int rainbowLength, int LEDLength, int delayTime) {
   136b4:	466b      	mov	r3, sp
   136b6:	603b      	str	r3, [r7, #0]
   136b8:	2301      	movs	r3, #1
   136ba:	60fb      	str	r3, [r7, #12]
            setLEDColor_index(led_ctx, i, led_state ? 255 : 0, led_state ? 165 : 0, 0);
   136bc:	2400      	movs	r4, #0
   136be:	68fb      	ldr	r3, [r7, #12]
   136c0:	61bb      	str	r3, [r7, #24]
      int n = i + 1 - j;
   136c2:	69bd      	ldr	r5, [r7, #24]
      if (n <= 0) {
   136c4:	2d00      	cmp	r5, #0
   136c6:	dc00      	bgt.n	136ca <LedTask+0x4e>
   136c8:	3514      	adds	r5, #20
      if (n <= floor(rainbowLength / 6)) {
   136ca:	4ba6      	ldr	r3, [pc, #664]	; (13964 <LedTask+0x2e8>)
   136cc:	0028      	movs	r0, r5
   136ce:	4798      	blx	r3
   136d0:	2200      	movs	r2, #0
   136d2:	6138      	str	r0, [r7, #16]
   136d4:	6179      	str	r1, [r7, #20]
   136d6:	4ba4      	ldr	r3, [pc, #656]	; (13968 <LedTask+0x2ec>)
   136d8:	4ea4      	ldr	r6, [pc, #656]	; (1396c <LedTask+0x2f0>)
   136da:	47b0      	blx	r6
   136dc:	60b8      	str	r0, [r7, #8]
   136de:	2800      	cmp	r0, #0
   136e0:	d06c      	beq.n	137bc <LedTask+0x140>
        redArray[i] = 255;
   136e2:	2324      	movs	r3, #36	; 0x24
   136e4:	22ff      	movs	r2, #255	; 0xff
   136e6:	18fb      	adds	r3, r7, r3
   136e8:	54e2      	strb	r2, [r4, r3]
        greenArray[i] = floor(6 * 255 / (float) rainbowLength * n);
   136ea:	0028      	movs	r0, r5
   136ec:	4ba0      	ldr	r3, [pc, #640]	; (13970 <LedTask+0x2f4>)
   136ee:	4798      	blx	r3
   136f0:	49a0      	ldr	r1, [pc, #640]	; (13974 <LedTask+0x2f8>)
   136f2:	4ba1      	ldr	r3, [pc, #644]	; (13978 <LedTask+0x2fc>)
   136f4:	4798      	blx	r3
   136f6:	4ba1      	ldr	r3, [pc, #644]	; (1397c <LedTask+0x300>)
   136f8:	4798      	blx	r3
   136fa:	4ba1      	ldr	r3, [pc, #644]	; (13980 <LedTask+0x304>)
   136fc:	4798      	blx	r3
   136fe:	4ba1      	ldr	r3, [pc, #644]	; (13984 <LedTask+0x308>)
   13700:	4798      	blx	r3
   13702:	2220      	movs	r2, #32
   13704:	2310      	movs	r3, #16
   13706:	18ba      	adds	r2, r7, r2
   13708:	18d3      	adds	r3, r2, r3
        blueArray[i] = 0;
   1370a:	2200      	movs	r2, #0
        greenArray[i] = floor(6 * 255 / (float) rainbowLength * n);
   1370c:	54e0      	strb	r0, [r4, r3]
        blueArray[i] = 255;
   1370e:	2120      	movs	r1, #32
   13710:	231c      	movs	r3, #28
   13712:	1879      	adds	r1, r7, r1
   13714:	18cb      	adds	r3, r1, r3
   13716:	e076      	b.n	13806 <LedTask+0x18a>
        {
            case MODE_BIKE:
                lock_alert = ALERT_INACTIVE;
   13718:	4b9b      	ldr	r3, [pc, #620]	; (13988 <LedTask+0x30c>)
   1371a:	701a      	strb	r2, [r3, #0]
                if (bike_mode_state == STOPPING) {
   1371c:	4b90      	ldr	r3, [pc, #576]	; (13960 <LedTask+0x2e4>)
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2b02      	cmp	r3, #2
   13722:	d105      	bne.n	13730 <LedTask+0xb4>
        setLEDColor_all(led_ctx, 255, 0, 0);
   13724:	0013      	movs	r3, r2
   13726:	21ff      	movs	r1, #255	; 0xff
   13728:	69f8      	ldr	r0, [r7, #28]
   1372a:	4c98      	ldr	r4, [pc, #608]	; (1398c <LedTask+0x310>)
   1372c:	47a0      	blx	r4
   1372e:	e7b9      	b.n	136a4 <LedTask+0x28>
    if (state == TURN_LEFT || state == TURN_RIGHT) {
   13730:	2b01      	cmp	r3, #1
   13732:	d8b7      	bhi.n	136a4 <LedTask+0x28>
        int start = (state == TURN_LEFT) ? LEFT_LED_START : RIGHT_LED_START;
   13734:	2b00      	cmp	r3, #0
   13736:	d117      	bne.n	13768 <LedTask+0xec>
        int opposite_start = (state == TURN_LEFT) ? RIGHT_LED_START : LEFT_LED_START;
   13738:	2507      	movs	r5, #7
        int start = (state == TURN_LEFT) ? LEFT_LED_START : RIGHT_LED_START;
   1373a:	0014      	movs	r4, r2
        int end = (state == TURN_LEFT) ? LEFT_LED_END : RIGHT_LED_END;
   1373c:	3302      	adds	r3, #2
   1373e:	613b      	str	r3, [r7, #16]
        int opposite_end = (state == TURN_LEFT) ? RIGHT_LED_END : LEFT_LED_END;
   13740:	195b      	adds	r3, r3, r5
   13742:	61bb      	str	r3, [r7, #24]
        for (int i = opposite_start; i <= opposite_end; i++) {
   13744:	69bb      	ldr	r3, [r7, #24]
   13746:	429d      	cmp	r5, r3
   13748:	dd14      	ble.n	13774 <LedTask+0xf8>
        vTaskDelay(10);
   1374a:	200a      	movs	r0, #10
   1374c:	4d7f      	ldr	r5, [pc, #508]	; (1394c <LedTask+0x2d0>)
   1374e:	47a8      	blx	r5
        for (int i = start; i <= end; i++) {
   13750:	693a      	ldr	r2, [r7, #16]
   13752:	4b8f      	ldr	r3, [pc, #572]	; (13990 <LedTask+0x314>)
   13754:	4294      	cmp	r4, r2
   13756:	dd16      	ble.n	13786 <LedTask+0x10a>
        led_state = !led_state;
   13758:	2201      	movs	r2, #1
        vTaskDelay(pdMS_TO_TICKS(1000));
   1375a:	20fa      	movs	r0, #250	; 0xfa
        led_state = !led_state;
   1375c:	7819      	ldrb	r1, [r3, #0]
        vTaskDelay(pdMS_TO_TICKS(1000));
   1375e:	0080      	lsls	r0, r0, #2
        led_state = !led_state;
   13760:	404a      	eors	r2, r1
   13762:	701a      	strb	r2, [r3, #0]
        vTaskDelay(pdMS_TO_TICKS(1000));
   13764:	47a8      	blx	r5
   13766:	e79d      	b.n	136a4 <LedTask+0x28>
        int end = (state == TURN_LEFT) ? LEFT_LED_END : RIGHT_LED_END;
   13768:	2309      	movs	r3, #9
        int opposite_start = (state == TURN_LEFT) ? RIGHT_LED_START : LEFT_LED_START;
   1376a:	0015      	movs	r5, r2
        int end = (state == TURN_LEFT) ? LEFT_LED_END : RIGHT_LED_END;
   1376c:	613b      	str	r3, [r7, #16]
        int start = (state == TURN_LEFT) ? LEFT_LED_START : RIGHT_LED_START;
   1376e:	2407      	movs	r4, #7
        int opposite_end = (state == TURN_LEFT) ? RIGHT_LED_END : LEFT_LED_END;
   13770:	3b07      	subs	r3, #7
   13772:	e7e6      	b.n	13742 <LedTask+0xc6>
            setLEDColor_index(led_ctx, i, 0, 0, 0);
   13774:	2200      	movs	r2, #0
   13776:	9200      	str	r2, [sp, #0]
   13778:	b2e9      	uxtb	r1, r5
   1377a:	0013      	movs	r3, r2
   1377c:	69f8      	ldr	r0, [r7, #28]
   1377e:	4e85      	ldr	r6, [pc, #532]	; (13994 <LedTask+0x318>)
   13780:	47b0      	blx	r6
        for (int i = opposite_start; i <= opposite_end; i++) {
   13782:	3501      	adds	r5, #1
   13784:	e7de      	b.n	13744 <LedTask+0xc8>
   13786:	2000      	movs	r0, #0
            setLEDColor_index(led_ctx, i, led_state ? 255 : 0, led_state ? 165 : 0, 0);
   13788:	781b      	ldrb	r3, [r3, #0]
   1378a:	b2e1      	uxtb	r1, r4
   1378c:	4283      	cmp	r3, r0
   1378e:	d007      	beq.n	137a0 <LedTask+0x124>
   13790:	22ff      	movs	r2, #255	; 0xff
   13792:	23a5      	movs	r3, #165	; 0xa5
   13794:	9000      	str	r0, [sp, #0]
   13796:	69f8      	ldr	r0, [r7, #28]
   13798:	4e7e      	ldr	r6, [pc, #504]	; (13994 <LedTask+0x318>)
   1379a:	47b0      	blx	r6
        for (int i = start; i <= end; i++) {
   1379c:	3401      	adds	r4, #1
   1379e:	e7d7      	b.n	13750 <LedTask+0xd4>
            setLEDColor_index(led_ctx, i, led_state ? 255 : 0, led_state ? 165 : 0, 0);
   137a0:	0002      	movs	r2, r0
   137a2:	0003      	movs	r3, r0
   137a4:	e7f6      	b.n	13794 <LedTask+0x118>
                else{
                    turn_indicator(bike_mode_state, led_dev);
                }
                break;
            case MODE_LOCK:
                if(lock_alert==ALERT_ACTIVE){
   137a6:	4b78      	ldr	r3, [pc, #480]	; (13988 <LedTask+0x30c>)
                    blink_red(led_dev);
   137a8:	69f8      	ldr	r0, [r7, #28]
                if(lock_alert==ALERT_ACTIVE){
   137aa:	781b      	ldrb	r3, [r3, #0]
   137ac:	2b01      	cmp	r3, #1
   137ae:	d102      	bne.n	137b6 <LedTask+0x13a>
                    blink_red(led_dev);
   137b0:	4b79      	ldr	r3, [pc, #484]	; (13998 <LedTask+0x31c>)
   137b2:	4798      	blx	r3
   137b4:	e776      	b.n	136a4 <LedTask+0x28>
                }
                else if(imudataVar.xmg > LOCK_THRESHOLD || imudataVar.ymg > LOCK_THRESHOLD || imudataVar.zmg > LOCK_THRESHOLD){
                    lock_alert = ALERT_ACTIVE;
                }
                else{
                    LEDOff(led_dev);
   137b6:	4b67      	ldr	r3, [pc, #412]	; (13954 <LedTask+0x2d8>)
   137b8:	4798      	blx	r3
   137ba:	e773      	b.n	136a4 <LedTask+0x28>
      else if (n <= floor(rainbowLength / 3)) {
   137bc:	2200      	movs	r2, #0
   137be:	6938      	ldr	r0, [r7, #16]
   137c0:	6979      	ldr	r1, [r7, #20]
   137c2:	4b76      	ldr	r3, [pc, #472]	; (1399c <LedTask+0x320>)
   137c4:	4e69      	ldr	r6, [pc, #420]	; (1396c <LedTask+0x2f0>)
   137c6:	47b0      	blx	r6
   137c8:	6078      	str	r0, [r7, #4]
   137ca:	2800      	cmp	r0, #0
   137cc:	d03e      	beq.n	1384c <LedTask+0x1d0>
        redArray[i] = floor(510 - 6 * 255 / (float) rainbowLength * n);
   137ce:	4b68      	ldr	r3, [pc, #416]	; (13970 <LedTask+0x2f4>)
   137d0:	0028      	movs	r0, r5
   137d2:	4798      	blx	r3
   137d4:	4967      	ldr	r1, [pc, #412]	; (13974 <LedTask+0x2f8>)
   137d6:	4b68      	ldr	r3, [pc, #416]	; (13978 <LedTask+0x2fc>)
   137d8:	4798      	blx	r3
   137da:	4b71      	ldr	r3, [pc, #452]	; (139a0 <LedTask+0x324>)
   137dc:	1c01      	adds	r1, r0, #0
   137de:	4871      	ldr	r0, [pc, #452]	; (139a4 <LedTask+0x328>)
   137e0:	4798      	blx	r3
   137e2:	4b66      	ldr	r3, [pc, #408]	; (1397c <LedTask+0x300>)
   137e4:	4798      	blx	r3
   137e6:	4b66      	ldr	r3, [pc, #408]	; (13980 <LedTask+0x304>)
   137e8:	4798      	blx	r3
   137ea:	4b66      	ldr	r3, [pc, #408]	; (13984 <LedTask+0x308>)
   137ec:	4798      	blx	r3
   137ee:	2324      	movs	r3, #36	; 0x24
        greenArray[i] = 255;
   137f0:	2120      	movs	r1, #32
        redArray[i] = floor(510 - 6 * 255 / (float) rainbowLength * n);
   137f2:	18fb      	adds	r3, r7, r3
   137f4:	54e0      	strb	r0, [r4, r3]
        greenArray[i] = 255;
   137f6:	2310      	movs	r3, #16
   137f8:	22ff      	movs	r2, #255	; 0xff
   137fa:	1879      	adds	r1, r7, r1
   137fc:	18cb      	adds	r3, r1, r3
   137fe:	54e2      	strb	r2, [r4, r3]
        blueArray[i] = 0;
   13800:	231c      	movs	r3, #28
   13802:	7a3a      	ldrb	r2, [r7, #8]
   13804:	18cb      	adds	r3, r1, r3
   13806:	54e2      	strb	r2, [r4, r3]
   13808:	69bb      	ldr	r3, [r7, #24]
   1380a:	3401      	adds	r4, #1
   1380c:	3301      	adds	r3, #1
   1380e:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0 ; i < LEDLength ; i++) {
   13810:	2c0a      	cmp	r4, #10
   13812:	d000      	beq.n	13816 <LedTask+0x19a>
   13814:	e755      	b.n	136c2 <LedTask+0x46>
    setLEDColor_index_all(led_ctx, redArray, greenArray, blueArray, LEDLength);
   13816:	2220      	movs	r2, #32
   13818:	231c      	movs	r3, #28
   1381a:	18ba      	adds	r2, r7, r2
   1381c:	2120      	movs	r1, #32
   1381e:	18d3      	adds	r3, r2, r3
   13820:	2210      	movs	r2, #16
   13822:	1879      	adds	r1, r7, r1
   13824:	188a      	adds	r2, r1, r2
   13826:	2124      	movs	r1, #36	; 0x24
   13828:	9400      	str	r4, [sp, #0]
   1382a:	1879      	adds	r1, r7, r1
   1382c:	69f8      	ldr	r0, [r7, #28]
   1382e:	4c5e      	ldr	r4, [pc, #376]	; (139a8 <LedTask+0x32c>)
   13830:	47a0      	blx	r4
    vTaskDelay(delayTime+100);
   13832:	2096      	movs	r0, #150	; 0x96
   13834:	4b45      	ldr	r3, [pc, #276]	; (1394c <LedTask+0x2d0>)
   13836:	0040      	lsls	r0, r0, #1
   13838:	4798      	blx	r3
   1383a:	68fb      	ldr	r3, [r7, #12]
   1383c:	3b01      	subs	r3, #1
   1383e:	60fb      	str	r3, [r7, #12]
  for (uint8_t j = 0; j < rainbowLength; j++) {
   13840:	3313      	adds	r3, #19
   13842:	d000      	beq.n	13846 <LedTask+0x1ca>
   13844:	e73a      	b.n	136bc <LedTask+0x40>
   13846:	683b      	ldr	r3, [r7, #0]
   13848:	469d      	mov	sp, r3
   1384a:	e72b      	b.n	136a4 <LedTask+0x28>
      else if (n <= floor(rainbowLength / 2)) {
   1384c:	2200      	movs	r2, #0
   1384e:	6938      	ldr	r0, [r7, #16]
   13850:	6979      	ldr	r1, [r7, #20]
   13852:	4b56      	ldr	r3, [pc, #344]	; (139ac <LedTask+0x330>)
   13854:	4e45      	ldr	r6, [pc, #276]	; (1396c <LedTask+0x2f0>)
   13856:	47b0      	blx	r6
   13858:	60b8      	str	r0, [r7, #8]
   1385a:	2800      	cmp	r0, #0
   1385c:	d01e      	beq.n	1389c <LedTask+0x220>
        redArray[i] = 0;
   1385e:	2324      	movs	r3, #36	; 0x24
   13860:	793a      	ldrb	r2, [r7, #4]
   13862:	18fb      	adds	r3, r7, r3
        greenArray[i] = 255;
   13864:	2120      	movs	r1, #32
        redArray[i] = 0;
   13866:	54e2      	strb	r2, [r4, r3]
        greenArray[i] = 255;
   13868:	2310      	movs	r3, #16
   1386a:	22ff      	movs	r2, #255	; 0xff
   1386c:	1879      	adds	r1, r7, r1
   1386e:	18cb      	adds	r3, r1, r3
   13870:	54e2      	strb	r2, [r4, r3]
        blueArray[i] = floor( 6 * 255 / (float) rainbowLength * n - 510);
   13872:	0028      	movs	r0, r5
   13874:	4b3e      	ldr	r3, [pc, #248]	; (13970 <LedTask+0x2f4>)
   13876:	4798      	blx	r3
   13878:	493e      	ldr	r1, [pc, #248]	; (13974 <LedTask+0x2f8>)
   1387a:	4b3f      	ldr	r3, [pc, #252]	; (13978 <LedTask+0x2fc>)
   1387c:	4798      	blx	r3
   1387e:	4949      	ldr	r1, [pc, #292]	; (139a4 <LedTask+0x328>)
        blueArray[i] = floor(1530 - (6 * 255 / (float)rainbowLength * n));;
   13880:	4b47      	ldr	r3, [pc, #284]	; (139a0 <LedTask+0x324>)
   13882:	4798      	blx	r3
   13884:	4b3d      	ldr	r3, [pc, #244]	; (1397c <LedTask+0x300>)
   13886:	4798      	blx	r3
   13888:	4b3d      	ldr	r3, [pc, #244]	; (13980 <LedTask+0x304>)
   1388a:	4798      	blx	r3
   1388c:	4b3d      	ldr	r3, [pc, #244]	; (13984 <LedTask+0x308>)
   1388e:	4798      	blx	r3
   13890:	2220      	movs	r2, #32
   13892:	231c      	movs	r3, #28
   13894:	18ba      	adds	r2, r7, r2
   13896:	18d3      	adds	r3, r2, r3
   13898:	54e0      	strb	r0, [r4, r3]
   1389a:	e7b5      	b.n	13808 <LedTask+0x18c>
      else if ( n <= floor(2 * rainbowLength / 3)) {
   1389c:	2200      	movs	r2, #0
   1389e:	6938      	ldr	r0, [r7, #16]
   138a0:	6979      	ldr	r1, [r7, #20]
   138a2:	4b43      	ldr	r3, [pc, #268]	; (139b0 <LedTask+0x334>)
   138a4:	4e31      	ldr	r6, [pc, #196]	; (1396c <LedTask+0x2f0>)
   138a6:	47b0      	blx	r6
   138a8:	6078      	str	r0, [r7, #4]
   138aa:	2800      	cmp	r0, #0
   138ac:	d01a      	beq.n	138e4 <LedTask+0x268>
        redArray[i] = 0;
   138ae:	2324      	movs	r3, #36	; 0x24
   138b0:	7a3a      	ldrb	r2, [r7, #8]
   138b2:	18fb      	adds	r3, r7, r3
   138b4:	54e2      	strb	r2, [r4, r3]
        greenArray[i] = floor(1020 - 6 * 255 / (float) rainbowLength * n);
   138b6:	0028      	movs	r0, r5
   138b8:	4b2d      	ldr	r3, [pc, #180]	; (13970 <LedTask+0x2f4>)
   138ba:	4798      	blx	r3
   138bc:	492d      	ldr	r1, [pc, #180]	; (13974 <LedTask+0x2f8>)
   138be:	4b2e      	ldr	r3, [pc, #184]	; (13978 <LedTask+0x2fc>)
   138c0:	4798      	blx	r3
   138c2:	4b37      	ldr	r3, [pc, #220]	; (139a0 <LedTask+0x324>)
   138c4:	1c01      	adds	r1, r0, #0
   138c6:	483b      	ldr	r0, [pc, #236]	; (139b4 <LedTask+0x338>)
   138c8:	4798      	blx	r3
   138ca:	4b2c      	ldr	r3, [pc, #176]	; (1397c <LedTask+0x300>)
   138cc:	4798      	blx	r3
   138ce:	4b2c      	ldr	r3, [pc, #176]	; (13980 <LedTask+0x304>)
   138d0:	4798      	blx	r3
   138d2:	4b2c      	ldr	r3, [pc, #176]	; (13984 <LedTask+0x308>)
   138d4:	4798      	blx	r3
   138d6:	2220      	movs	r2, #32
   138d8:	2310      	movs	r3, #16
   138da:	18ba      	adds	r2, r7, r2
   138dc:	18d3      	adds	r3, r2, r3
   138de:	54e0      	strb	r0, [r4, r3]
        blueArray[i] = 255;
   138e0:	22ff      	movs	r2, #255	; 0xff
   138e2:	e714      	b.n	1370e <LedTask+0x92>
      else if (n <= floor(5 * rainbowLength / 6)) {
   138e4:	2200      	movs	r2, #0
   138e6:	6938      	ldr	r0, [r7, #16]
   138e8:	6979      	ldr	r1, [r7, #20]
   138ea:	4b33      	ldr	r3, [pc, #204]	; (139b8 <LedTask+0x33c>)
   138ec:	4e1f      	ldr	r6, [pc, #124]	; (1396c <LedTask+0x2f0>)
   138ee:	47b0      	blx	r6
   138f0:	2800      	cmp	r0, #0
   138f2:	d018      	beq.n	13926 <LedTask+0x2aa>
        redArray[i] = floor(6 * 255 / (float) rainbowLength * n - 1020);
   138f4:	4b1e      	ldr	r3, [pc, #120]	; (13970 <LedTask+0x2f4>)
   138f6:	0028      	movs	r0, r5
   138f8:	4798      	blx	r3
   138fa:	491e      	ldr	r1, [pc, #120]	; (13974 <LedTask+0x2f8>)
   138fc:	4b1e      	ldr	r3, [pc, #120]	; (13978 <LedTask+0x2fc>)
   138fe:	4798      	blx	r3
   13900:	492c      	ldr	r1, [pc, #176]	; (139b4 <LedTask+0x338>)
   13902:	4b27      	ldr	r3, [pc, #156]	; (139a0 <LedTask+0x324>)
   13904:	4798      	blx	r3
   13906:	4b1d      	ldr	r3, [pc, #116]	; (1397c <LedTask+0x300>)
   13908:	4798      	blx	r3
   1390a:	4b1d      	ldr	r3, [pc, #116]	; (13980 <LedTask+0x304>)
   1390c:	4798      	blx	r3
   1390e:	4b1d      	ldr	r3, [pc, #116]	; (13984 <LedTask+0x308>)
   13910:	4798      	blx	r3
   13912:	2324      	movs	r3, #36	; 0x24
        greenArray[i] = 0;
   13914:	2220      	movs	r2, #32
        redArray[i] = floor(6 * 255 / (float) rainbowLength * n - 1020);
   13916:	18fb      	adds	r3, r7, r3
   13918:	54e0      	strb	r0, [r4, r3]
        greenArray[i] = 0;
   1391a:	2310      	movs	r3, #16
   1391c:	18ba      	adds	r2, r7, r2
   1391e:	18d3      	adds	r3, r2, r3
   13920:	793a      	ldrb	r2, [r7, #4]
   13922:	54e2      	strb	r2, [r4, r3]
   13924:	e7dc      	b.n	138e0 <LedTask+0x264>
        redArray[i] = 255;
   13926:	2324      	movs	r3, #36	; 0x24
   13928:	22ff      	movs	r2, #255	; 0xff
   1392a:	18fb      	adds	r3, r7, r3
   1392c:	54e2      	strb	r2, [r4, r3]
        greenArray[i] = 0;
   1392e:	2310      	movs	r3, #16
   13930:	3adf      	subs	r2, #223	; 0xdf
   13932:	18ba      	adds	r2, r7, r2
   13934:	18d3      	adds	r3, r2, r3
   13936:	54e0      	strb	r0, [r4, r3]
        blueArray[i] = floor(1530 - (6 * 255 / (float)rainbowLength * n));;
   13938:	4b0d      	ldr	r3, [pc, #52]	; (13970 <LedTask+0x2f4>)
   1393a:	0028      	movs	r0, r5
   1393c:	4798      	blx	r3
   1393e:	490d      	ldr	r1, [pc, #52]	; (13974 <LedTask+0x2f8>)
   13940:	4b0d      	ldr	r3, [pc, #52]	; (13978 <LedTask+0x2fc>)
   13942:	4798      	blx	r3
   13944:	1c01      	adds	r1, r0, #0
   13946:	481d      	ldr	r0, [pc, #116]	; (139bc <LedTask+0x340>)
   13948:	e79a      	b.n	13880 <LedTask+0x204>
   1394a:	46c0      	nop			; (mov r8, r8)
   1394c:	0001693d 	.word	0x0001693d
   13950:	000135fd 	.word	0x000135fd
   13954:	000135e5 	.word	0x000135e5
   13958:	000135cd 	.word	0x000135cd
   1395c:	200003b6 	.word	0x200003b6
   13960:	200003b5 	.word	0x200003b5
   13964:	0001b2a9 	.word	0x0001b2a9
   13968:	40080000 	.word	0x40080000
   1396c:	00019169 	.word	0x00019169
   13970:	000197ed 	.word	0x000197ed
   13974:	42990000 	.word	0x42990000
   13978:	00019235 	.word	0x00019235
   1397c:	0001b39d 	.word	0x0001b39d
   13980:	00018ce1 	.word	0x00018ce1
   13984:	000191f9 	.word	0x000191f9
   13988:	200003b7 	.word	0x200003b7
   1398c:	00013441 	.word	0x00013441
   13990:	2000003c 	.word	0x2000003c
   13994:	00013421 	.word	0x00013421
   13998:	00013651 	.word	0x00013651
   1399c:	40180000 	.word	0x40180000
   139a0:	00019475 	.word	0x00019475
   139a4:	43ff0000 	.word	0x43ff0000
   139a8:	0001345d 	.word	0x0001345d
   139ac:	40240000 	.word	0x40240000
   139b0:	402a0000 	.word	0x402a0000
   139b4:	447f0000 	.word	0x447f0000
   139b8:	40300000 	.word	0x40300000
   139bc:	44bf4000 	.word	0x44bf4000

000139c0 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   139c0:	b513      	push	{r0, r1, r4, lr}
   139c2:	466b      	mov	r3, sp
   139c4:	1dd9      	adds	r1, r3, #7
   139c6:	7008      	strb	r0, [r1, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   139c8:	2803      	cmp	r0, #3
   139ca:	d805      	bhi.n	139d8 <WifiHandlerSetState+0x18>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   139cc:	4803      	ldr	r0, [pc, #12]	; (139dc <WifiHandlerSetState+0x1c>)
   139ce:	2300      	movs	r3, #0
   139d0:	220a      	movs	r2, #10
   139d2:	6800      	ldr	r0, [r0, #0]
   139d4:	4c02      	ldr	r4, [pc, #8]	; (139e0 <WifiHandlerSetState+0x20>)
   139d6:	47a0      	blx	r4
    }
}
   139d8:	bd13      	pop	{r0, r1, r4, pc}
   139da:	46c0      	nop			; (mov r8, r8)
   139dc:	200003b8 	.word	0x200003b8
   139e0:	000156ed 	.word	0x000156ed

000139e4 <_i2c_master_wait_for_sync>:
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   139e4:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   139e6:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   139e8:	69ca      	ldr	r2, [r1, #28]
	while (i2c_master_is_syncing(module)) {
   139ea:	421a      	tst	r2, r3
   139ec:	d1fc      	bne.n	139e8 <_i2c_master_wait_for_sync+0x4>
}
   139ee:	4770      	bx	lr

000139f0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   139f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   139f2:	0007      	movs	r7, r0
   139f4:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   139f6:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   139f8:	0008      	movs	r0, r1
   139fa:	4b9b      	ldr	r3, [pc, #620]	; (13c68 <i2c_master_init+0x278>)
{
   139fc:	0014      	movs	r4, r2
   139fe:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13a00:	4798      	blx	r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   13a02:	2501      	movs	r5, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   13a04:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   13a06:	409d      	lsls	r5, r3
   13a08:	002b      	movs	r3, r5
   13a0a:	4a98      	ldr	r2, [pc, #608]	; (13c6c <i2c_master_init+0x27c>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13a0c:	3014      	adds	r0, #20
   13a0e:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   13a10:	b2c5      	uxtb	r5, r0
   13a12:	430b      	orrs	r3, r1
   13a14:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   13a16:	7b23      	ldrb	r3, [r4, #12]
   13a18:	aa08      	add	r2, sp, #32
   13a1a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   13a1c:	0011      	movs	r1, r2
   13a1e:	0028      	movs	r0, r5
   13a20:	4b93      	ldr	r3, [pc, #588]	; (13c70 <i2c_master_init+0x280>)
   13a22:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   13a24:	0028      	movs	r0, r5
   13a26:	4b93      	ldr	r3, [pc, #588]	; (13c74 <i2c_master_init+0x284>)
   13a28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   13a2a:	4b93      	ldr	r3, [pc, #588]	; (13c78 <i2c_master_init+0x288>)
   13a2c:	7b20      	ldrb	r0, [r4, #12]
   13a2e:	2100      	movs	r1, #0
   13a30:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   13a32:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
   13a34:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   13a36:	079b      	lsls	r3, r3, #30
   13a38:	d500      	bpl.n	13a3c <i2c_master_init+0x4c>
   13a3a:	e109      	b.n	13c50 <i2c_master_init+0x260>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   13a3c:	2301      	movs	r3, #1
   13a3e:	6835      	ldr	r5, [r6, #0]
		return STATUS_BUSY;
   13a40:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   13a42:	401d      	ands	r5, r3
   13a44:	d000      	beq.n	13a48 <i2c_master_init+0x58>
   13a46:	e103      	b.n	13c50 <i2c_master_init+0x260>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   13a48:	4b87      	ldr	r3, [pc, #540]	; (13c68 <i2c_master_init+0x278>)
   13a4a:	6838      	ldr	r0, [r7, #0]
   13a4c:	4798      	blx	r3
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   13a4e:	498b      	ldr	r1, [pc, #556]	; (13c7c <i2c_master_init+0x28c>)
   13a50:	4b8b      	ldr	r3, [pc, #556]	; (13c80 <i2c_master_init+0x290>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   13a52:	9004      	str	r0, [sp, #16]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   13a54:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   13a56:	9b04      	ldr	r3, [sp, #16]

	/* Initialize values in module. */
	module->registered_callback = 0;
   13a58:	763d      	strb	r5, [r7, #24]
	_sercom_instances[instance_index] = module;
   13a5a:	009a      	lsls	r2, r3, #2
   13a5c:	4b89      	ldr	r3, [pc, #548]	; (13c84 <i2c_master_init+0x294>)
	module->enabled_callback = 0;
   13a5e:	767d      	strb	r5, [r7, #25]
	_sercom_instances[instance_index] = module;
   13a60:	50d7      	str	r7, [r2, r3]
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
   13a62:	1dbb      	adds	r3, r7, #6
	module->buffer_length = 0;
   13a64:	837d      	strh	r5, [r7, #26]
	module->buffer_remaining = 0;
   13a66:	83bd      	strh	r5, [r7, #28]
	module->status = STATUS_OK;
   13a68:	77dd      	strb	r5, [r3, #31]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   13a6a:	2314      	movs	r3, #20
	module->buffer = NULL;
   13a6c:	623d      	str	r5, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   13a6e:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13a70:	683b      	ldr	r3, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13a72:	ae09      	add	r6, sp, #36	; 0x24
   13a74:	9304      	str	r3, [sp, #16]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   13a76:	0018      	movs	r0, r3
   13a78:	4b7b      	ldr	r3, [pc, #492]	; (13c68 <i2c_master_init+0x278>)
   13a7a:	4798      	blx	r3
   13a7c:	2380      	movs	r3, #128	; 0x80
   13a7e:	9000      	str	r0, [sp, #0]
	uint32_t pad0 = config->pinmux_pad0;
   13a80:	69e0      	ldr	r0, [r4, #28]
   13a82:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13a84:	3b7f      	subs	r3, #127	; 0x7f
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13a86:	7075      	strb	r5, [r6, #1]
	config->powersave    = false;
   13a88:	70f5      	strb	r5, [r6, #3]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13a8a:	70b3      	strb	r3, [r6, #2]
	uint32_t pad1 = config->pinmux_pad1;
   13a8c:	6a25      	ldr	r5, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
   13a8e:	2800      	cmp	r0, #0
   13a90:	d103      	bne.n	13a9a <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   13a92:	0001      	movs	r1, r0
   13a94:	4b7c      	ldr	r3, [pc, #496]	; (13c88 <i2c_master_init+0x298>)
   13a96:	9804      	ldr	r0, [sp, #16]
   13a98:	4798      	blx	r3
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   13a9a:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
   13a9c:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   13a9e:	0c00      	lsrs	r0, r0, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   13aa0:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   13aa2:	b2c0      	uxtb	r0, r0
   13aa4:	0031      	movs	r1, r6
   13aa6:	4b79      	ldr	r3, [pc, #484]	; (13c8c <i2c_master_init+0x29c>)
   13aa8:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
   13aaa:	2d00      	cmp	r5, #0
   13aac:	d104      	bne.n	13ab8 <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   13aae:	2101      	movs	r1, #1
   13ab0:	9804      	ldr	r0, [sp, #16]
   13ab2:	4b75      	ldr	r3, [pc, #468]	; (13c88 <i2c_master_init+0x298>)
   13ab4:	4798      	blx	r3
   13ab6:	0005      	movs	r5, r0
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   13ab8:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
   13aba:	7035      	strb	r5, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   13abc:	0c2d      	lsrs	r5, r5, #16
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   13abe:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   13ac0:	b2e8      	uxtb	r0, r5
   13ac2:	4b72      	ldr	r3, [pc, #456]	; (13c8c <i2c_master_init+0x29c>)
   13ac4:	0031      	movs	r1, r6
   13ac6:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   13ac8:	8aa3      	ldrh	r3, [r4, #20]
   13aca:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
   13acc:	8ae3      	ldrh	r3, [r4, #22]
   13ace:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
   13ad0:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   13ad2:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
   13ad4:	2a00      	cmp	r2, #0
   13ad6:	d106      	bne.n	13ae6 <i2c_master_init+0xf6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   13ad8:	4b6d      	ldr	r3, [pc, #436]	; (13c90 <i2c_master_init+0x2a0>)
   13ada:	3202      	adds	r2, #2
   13adc:	789b      	ldrb	r3, [r3, #2]
   13ade:	4013      	ands	r3, r2
		tmp_ctrla = 0;
   13ae0:	1e5f      	subs	r7, r3, #1
   13ae2:	41bb      	sbcs	r3, r7
   13ae4:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
   13ae6:	68a2      	ldr	r2, [r4, #8]
   13ae8:	6927      	ldr	r7, [r4, #16]
   13aea:	4317      	orrs	r7, r2
   13aec:	431f      	orrs	r7, r3
	if (config->scl_low_timeout) {
   13aee:	1d63      	adds	r3, r4, #5
   13af0:	7fdb      	ldrb	r3, [r3, #31]
   13af2:	2b00      	cmp	r3, #0
   13af4:	d002      	beq.n	13afc <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   13af6:	2380      	movs	r3, #128	; 0x80
   13af8:	05db      	lsls	r3, r3, #23
   13afa:	431f      	orrs	r7, r3
		tmp_ctrla |= config->inactive_timeout;
   13afc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13afe:	431f      	orrs	r7, r3
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   13b00:	0023      	movs	r3, r4
   13b02:	332c      	adds	r3, #44	; 0x2c
   13b04:	781b      	ldrb	r3, [r3, #0]
   13b06:	2b00      	cmp	r3, #0
   13b08:	d103      	bne.n	13b12 <i2c_master_init+0x122>
   13b0a:	2380      	movs	r3, #128	; 0x80
   13b0c:	049b      	lsls	r3, r3, #18
   13b0e:	429a      	cmp	r2, r3
   13b10:	d102      	bne.n	13b18 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   13b12:	2380      	movs	r3, #128	; 0x80
   13b14:	051b      	lsls	r3, r3, #20
   13b16:	431f      	orrs	r7, r3
	if (config->slave_scl_low_extend_timeout) {
   13b18:	0023      	movs	r3, r4
   13b1a:	332d      	adds	r3, #45	; 0x2d
   13b1c:	781b      	ldrb	r3, [r3, #0]
   13b1e:	2b00      	cmp	r3, #0
   13b20:	d002      	beq.n	13b28 <i2c_master_init+0x138>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   13b22:	2380      	movs	r3, #128	; 0x80
   13b24:	041b      	lsls	r3, r3, #16
   13b26:	431f      	orrs	r7, r3
	if (config->master_scl_low_extend_timeout) {
   13b28:	0023      	movs	r3, r4
   13b2a:	332e      	adds	r3, #46	; 0x2e
   13b2c:	781b      	ldrb	r3, [r3, #0]
   13b2e:	2b00      	cmp	r3, #0
   13b30:	d002      	beq.n	13b38 <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   13b32:	2380      	movs	r3, #128	; 0x80
   13b34:	03db      	lsls	r3, r3, #15
   13b36:	431f      	orrs	r7, r3
	i2c_module->CTRLA.reg |= tmp_ctrla;
   13b38:	9b04      	ldr	r3, [sp, #16]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   13b3a:	9800      	ldr	r0, [sp, #0]
	i2c_module->CTRLA.reg |= tmp_ctrla;
   13b3c:	681b      	ldr	r3, [r3, #0]
	uint32_t fscl        = 1000 * config->baud_rate;
   13b3e:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLA.reg |= tmp_ctrla;
   13b40:	431f      	orrs	r7, r3
   13b42:	9b04      	ldr	r3, [sp, #16]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   13b44:	9a04      	ldr	r2, [sp, #16]
	i2c_module->CTRLA.reg |= tmp_ctrla;
   13b46:	601f      	str	r7, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   13b48:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   13b4a:	3014      	adds	r0, #20
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   13b4c:	005b      	lsls	r3, r3, #1
   13b4e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   13b50:	b2c0      	uxtb	r0, r0
   13b52:	4b50      	ldr	r3, [pc, #320]	; (13c94 <i2c_master_init+0x2a4>)
   13b54:	4798      	blx	r3
	uint32_t fscl        = 1000 * config->baud_rate;
   13b56:	6823      	ldr	r3, [r4, #0]
   13b58:	00ad      	lsls	r5, r5, #2
   13b5a:	435d      	muls	r5, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   13b5c:	6863      	ldr	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   13b5e:	0007      	movs	r7, r0
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   13b60:	9305      	str	r3, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
   13b62:	4b4d      	ldr	r3, [pc, #308]	; (13c98 <i2c_master_init+0x2a8>)
   13b64:	4798      	blx	r3
   13b66:	4b4c      	ldr	r3, [pc, #304]	; (13c98 <i2c_master_init+0x2a8>)
   13b68:	9000      	str	r0, [sp, #0]
   13b6a:	9101      	str	r1, [sp, #4]
   13b6c:	0068      	lsls	r0, r5, #1
   13b6e:	4798      	blx	r3
   13b70:	9002      	str	r0, [sp, #8]
   13b72:	9103      	str	r1, [sp, #12]
   13b74:	4b48      	ldr	r3, [pc, #288]	; (13c98 <i2c_master_init+0x2a8>)
   13b76:	8e20      	ldrh	r0, [r4, #48]	; 0x30
   13b78:	4798      	blx	r3
   13b7a:	4e48      	ldr	r6, [pc, #288]	; (13c9c <i2c_master_init+0x2ac>)
   13b7c:	9006      	str	r0, [sp, #24]
   13b7e:	9107      	str	r1, [sp, #28]
   13b80:	9800      	ldr	r0, [sp, #0]
   13b82:	9901      	ldr	r1, [sp, #4]
   13b84:	4a46      	ldr	r2, [pc, #280]	; (13ca0 <i2c_master_init+0x2b0>)
   13b86:	4b47      	ldr	r3, [pc, #284]	; (13ca4 <i2c_master_init+0x2b4>)
   13b88:	47b0      	blx	r6
   13b8a:	0002      	movs	r2, r0
   13b8c:	000b      	movs	r3, r1
   13b8e:	9806      	ldr	r0, [sp, #24]
   13b90:	9907      	ldr	r1, [sp, #28]
   13b92:	47b0      	blx	r6
   13b94:	4e44      	ldr	r6, [pc, #272]	; (13ca8 <i2c_master_init+0x2b8>)
   13b96:	2200      	movs	r2, #0
   13b98:	4b44      	ldr	r3, [pc, #272]	; (13cac <i2c_master_init+0x2bc>)
   13b9a:	47b0      	blx	r6
   13b9c:	4b3e      	ldr	r3, [pc, #248]	; (13c98 <i2c_master_init+0x2a8>)
   13b9e:	9006      	str	r0, [sp, #24]
   13ba0:	9107      	str	r1, [sp, #28]
   13ba2:	0028      	movs	r0, r5
   13ba4:	4798      	blx	r3
   13ba6:	4d3d      	ldr	r5, [pc, #244]	; (13c9c <i2c_master_init+0x2ac>)
   13ba8:	0002      	movs	r2, r0
   13baa:	000b      	movs	r3, r1
   13bac:	9806      	ldr	r0, [sp, #24]
   13bae:	9907      	ldr	r1, [sp, #28]
   13bb0:	47a8      	blx	r5
   13bb2:	4d3f      	ldr	r5, [pc, #252]	; (13cb0 <i2c_master_init+0x2c0>)
   13bb4:	0002      	movs	r2, r0
   13bb6:	000b      	movs	r3, r1
   13bb8:	9800      	ldr	r0, [sp, #0]
   13bba:	9901      	ldr	r1, [sp, #4]
   13bbc:	47a8      	blx	r5
   13bbe:	9a02      	ldr	r2, [sp, #8]
   13bc0:	9b03      	ldr	r3, [sp, #12]
   13bc2:	47b0      	blx	r6
   13bc4:	2200      	movs	r2, #0
   13bc6:	4b3b      	ldr	r3, [pc, #236]	; (13cb4 <i2c_master_init+0x2c4>)
   13bc8:	47a8      	blx	r5
   13bca:	9a02      	ldr	r2, [sp, #8]
   13bcc:	9b03      	ldr	r3, [sp, #12]
   13bce:	4e3a      	ldr	r6, [pc, #232]	; (13cb8 <i2c_master_init+0x2c8>)
   13bd0:	47b0      	blx	r6
   13bd2:	4b3a      	ldr	r3, [pc, #232]	; (13cbc <i2c_master_init+0x2cc>)
   13bd4:	4798      	blx	r3
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   13bd6:	2380      	movs	r3, #128	; 0x80
	tmp_baud = (int32_t)(div_ceil(
   13bd8:	9002      	str	r0, [sp, #8]
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   13bda:	68a2      	ldr	r2, [r4, #8]
   13bdc:	049b      	lsls	r3, r3, #18
   13bde:	429a      	cmp	r2, r3
   13be0:	d13e      	bne.n	13c60 <i2c_master_init+0x270>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   13be2:	23fa      	movs	r3, #250	; 0xfa
   13be4:	9c05      	ldr	r4, [sp, #20]
   13be6:	009b      	lsls	r3, r3, #2
   13be8:	435c      	muls	r4, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   13bea:	9a00      	ldr	r2, [sp, #0]
   13bec:	9b01      	ldr	r3, [sp, #4]
   13bee:	4e2e      	ldr	r6, [pc, #184]	; (13ca8 <i2c_master_init+0x2b8>)
   13bf0:	0010      	movs	r0, r2
   13bf2:	0019      	movs	r1, r3
   13bf4:	47b0      	blx	r6
   13bf6:	4b28      	ldr	r3, [pc, #160]	; (13c98 <i2c_master_init+0x2a8>)
   13bf8:	9000      	str	r0, [sp, #0]
   13bfa:	9101      	str	r1, [sp, #4]
   13bfc:	0020      	movs	r0, r4
   13bfe:	4798      	blx	r3
   13c00:	2200      	movs	r2, #0
   13c02:	4b2f      	ldr	r3, [pc, #188]	; (13cc0 <i2c_master_init+0x2d0>)
   13c04:	4e25      	ldr	r6, [pc, #148]	; (13c9c <i2c_master_init+0x2ac>)
   13c06:	47b0      	blx	r6
   13c08:	4e2b      	ldr	r6, [pc, #172]	; (13cb8 <i2c_master_init+0x2c8>)
   13c0a:	0002      	movs	r2, r0
   13c0c:	000b      	movs	r3, r1
   13c0e:	9800      	ldr	r0, [sp, #0]
   13c10:	9901      	ldr	r1, [sp, #4]
   13c12:	47b0      	blx	r6
   13c14:	2200      	movs	r2, #0
   13c16:	4b27      	ldr	r3, [pc, #156]	; (13cb4 <i2c_master_init+0x2c4>)
   13c18:	47a8      	blx	r5
   13c1a:	4b28      	ldr	r3, [pc, #160]	; (13cbc <i2c_master_init+0x2cc>)
   13c1c:	4798      	blx	r3
   13c1e:	4b29      	ldr	r3, [pc, #164]	; (13cc4 <i2c_master_init+0x2d4>)
   13c20:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
   13c22:	d017      	beq.n	13c54 <i2c_master_init+0x264>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   13c24:	0021      	movs	r1, r4
   13c26:	0038      	movs	r0, r7
   13c28:	4798      	blx	r3
   13c2a:	3802      	subs	r0, #2
   13c2c:	1b83      	subs	r3, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   13c2e:	9a02      	ldr	r2, [sp, #8]
   13c30:	2040      	movs	r0, #64	; 0x40
   13c32:	2aff      	cmp	r2, #255	; 0xff
   13c34:	d80c      	bhi.n	13c50 <i2c_master_init+0x260>
   13c36:	2bff      	cmp	r3, #255	; 0xff
   13c38:	d80a      	bhi.n	13c50 <i2c_master_init+0x260>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   13c3a:	20ff      	movs	r0, #255	; 0xff
   13c3c:	0015      	movs	r5, r2
   13c3e:	0400      	lsls	r0, r0, #16
   13c40:	041b      	lsls	r3, r3, #16
   13c42:	4003      	ands	r3, r0
	enum status_code tmp_status_code = STATUS_OK;
   13c44:	2000      	movs	r0, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   13c46:	0636      	lsls	r6, r6, #24
   13c48:	4335      	orrs	r5, r6
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   13c4a:	9a04      	ldr	r2, [sp, #16]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   13c4c:	432b      	orrs	r3, r5
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   13c4e:	60d3      	str	r3, [r2, #12]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
   13c50:	b00b      	add	sp, #44	; 0x2c
   13c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   13c54:	0061      	lsls	r1, r4, #1
   13c56:	1e48      	subs	r0, r1, #1
   13c58:	19c0      	adds	r0, r0, r7
   13c5a:	4798      	blx	r3
   13c5c:	1e43      	subs	r3, r0, #1
   13c5e:	e7e6      	b.n	13c2e <i2c_master_init+0x23e>
	int32_t tmp_baudlow_hs = 0;
   13c60:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
   13c62:	0033      	movs	r3, r6
   13c64:	e7e3      	b.n	13c2e <i2c_master_init+0x23e>
   13c66:	46c0      	nop			; (mov r8, r8)
   13c68:	00017c81 	.word	0x00017c81
   13c6c:	40000400 	.word	0x40000400
   13c70:	0001884d 	.word	0x0001884d
   13c74:	000187c5 	.word	0x000187c5
   13c78:	00017ae1 	.word	0x00017ae1
   13c7c:	00012585 	.word	0x00012585
   13c80:	00017cb5 	.word	0x00017cb5
   13c84:	20004800 	.word	0x20004800
   13c88:	00017b25 	.word	0x00017b25
   13c8c:	00018951 	.word	0x00018951
   13c90:	41002000 	.word	0x41002000
   13c94:	00018869 	.word	0x00018869
   13c98:	0001b32d 	.word	0x0001b32d
   13c9c:	0001a715 	.word	0x0001a715
   13ca0:	e826d695 	.word	0xe826d695
   13ca4:	3e112e0b 	.word	0x3e112e0b
   13ca8:	0001988d 	.word	0x0001988d
   13cac:	40240000 	.word	0x40240000
   13cb0:	0001ac15 	.word	0x0001ac15
   13cb4:	3ff00000 	.word	0x3ff00000
   13cb8:	00019ead 	.word	0x00019ead
   13cbc:	0001b241 	.word	0x0001b241
   13cc0:	40080000 	.word	0x40080000
   13cc4:	00018e25 	.word	0x00018e25

00013cc8 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   13cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13cca:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13ccc:	6803      	ldr	r3, [r0, #0]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   13cce:	4e12      	ldr	r6, [pc, #72]	; (13d18 <i2c_master_reset+0x50>)
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13cd0:	9301      	str	r3, [sp, #4]
	_i2c_master_wait_for_sync(module);
   13cd2:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13cd4:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   13cd6:	4f11      	ldr	r7, [pc, #68]	; (13d1c <i2c_master_reset+0x54>)
   13cd8:	0028      	movs	r0, r5
   13cda:	47b8      	blx	r7
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13cdc:	231f      	movs	r3, #31
   13cde:	2201      	movs	r2, #1
   13ce0:	4018      	ands	r0, r3
   13ce2:	4082      	lsls	r2, r0
   13ce4:	4b0e      	ldr	r3, [pc, #56]	; (13d20 <i2c_master_reset+0x58>)
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   13ce6:	0020      	movs	r0, r4
   13ce8:	67da      	str	r2, [r3, #124]	; 0x7c
   13cea:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   13cec:	2383      	movs	r3, #131	; 0x83
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   13cee:	2202      	movs	r2, #2
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   13cf0:	752b      	strb	r3, [r5, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   13cf2:	762b      	strb	r3, [r5, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   13cf4:	682b      	ldr	r3, [r5, #0]
   13cf6:	4393      	bics	r3, r2
   13cf8:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
   13cfa:	4b0a      	ldr	r3, [pc, #40]	; (13d24 <i2c_master_reset+0x5c>)
   13cfc:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   13cfe:	6820      	ldr	r0, [r4, #0]
   13d00:	47b8      	blx	r7
   13d02:	4b09      	ldr	r3, [pc, #36]	; (13d28 <i2c_master_reset+0x60>)
   13d04:	4798      	blx	r3
	cpu_irq_leave_critical();
   13d06:	4b09      	ldr	r3, [pc, #36]	; (13d2c <i2c_master_reset+0x64>)
   13d08:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   13d0a:	0020      	movs	r0, r4
   13d0c:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   13d0e:	2201      	movs	r2, #1
   13d10:	9b01      	ldr	r3, [sp, #4]
   13d12:	601a      	str	r2, [r3, #0]
}
   13d14:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   13d16:	46c0      	nop			; (mov r8, r8)
   13d18:	000139e5 	.word	0x000139e5
   13d1c:	00017ced 	.word	0x00017ced
   13d20:	e000e104 	.word	0xe000e104
   13d24:	000177cd 	.word	0x000177cd
   13d28:	0001889d 	.word	0x0001889d
   13d2c:	00017801 	.word	0x00017801

00013d30 <_i2c_master_address_response>:

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   13d30:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13d32:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   13d34:	7e19      	ldrb	r1, [r3, #24]
   13d36:	4211      	tst	r1, r2
   13d38:	d006      	beq.n	13d48 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13d3a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13d3c:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   13d3e:	2041      	movs	r0, #65	; 0x41
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13d40:	4213      	tst	r3, r2
   13d42:	d10a      	bne.n	13d5a <_i2c_master_address_response+0x2a>

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
   13d44:	2000      	movs	r0, #0
   13d46:	e008      	b.n	13d5a <_i2c_master_address_response+0x2a>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   13d48:	8b5a      	ldrh	r2, [r3, #26]
   13d4a:	0752      	lsls	r2, r2, #29
   13d4c:	d5fa      	bpl.n	13d44 <_i2c_master_address_response+0x14>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13d4e:	22c0      	movs	r2, #192	; 0xc0
		return STATUS_ERR_BAD_ADDRESS;
   13d50:	2018      	movs	r0, #24
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13d52:	6859      	ldr	r1, [r3, #4]
   13d54:	0292      	lsls	r2, r2, #10
   13d56:	430a      	orrs	r2, r1
   13d58:	605a      	str	r2, [r3, #4]
}
   13d5a:	4770      	bx	lr

00013d5c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   13d5c:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   13d5e:	2200      	movs	r2, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   13d60:	2601      	movs	r6, #1
   13d62:	2402      	movs	r4, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13d64:	6801      	ldr	r1, [r0, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   13d66:	7e0b      	ldrb	r3, [r1, #24]
   13d68:	4033      	ands	r3, r6
   13d6a:	d102      	bne.n	13d72 <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   13d6c:	7e0d      	ldrb	r5, [r1, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   13d6e:	4225      	tst	r5, r4
   13d70:	d001      	beq.n	13d76 <_i2c_master_wait_for_bus+0x1a>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
   13d72:	2000      	movs	r0, #0
   13d74:	e005      	b.n	13d82 <_i2c_master_wait_for_bus+0x26>
		if (++timeout_counter >= module->buffer_timeout) {
   13d76:	3201      	adds	r2, #1
   13d78:	8903      	ldrh	r3, [r0, #8]
   13d7a:	b292      	uxth	r2, r2
   13d7c:	4293      	cmp	r3, r2
   13d7e:	d8f2      	bhi.n	13d66 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
   13d80:	2012      	movs	r0, #18
}
   13d82:	bd70      	pop	{r4, r5, r6, pc}

00013d84 <_i2c_master_send_hs_master_code>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13d84:	2380      	movs	r3, #128	; 0x80
{
   13d86:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13d88:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13d8a:	02db      	lsls	r3, r3, #11
   13d8c:	6862      	ldr	r2, [r4, #4]
   13d8e:	4313      	orrs	r3, r2
   13d90:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   13d92:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   13d94:	4b02      	ldr	r3, [pc, #8]	; (13da0 <_i2c_master_send_hs_master_code+0x1c>)
   13d96:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13d98:	2301      	movs	r3, #1
   13d9a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
   13d9c:	bd10      	pop	{r4, pc}
   13d9e:	46c0      	nop			; (mov r8, r8)
   13da0:	00013d5d 	.word	0x00013d5d

00013da4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   13da4:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   13da6:	2601      	movs	r6, #1
	struct tc_module *module
   13da8:	4b14      	ldr	r3, [pc, #80]	; (13dfc <_tc_interrupt_handler+0x58>)
   13daa:	0080      	lsls	r0, r0, #2
   13dac:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   13dae:	6823      	ldr	r3, [r4, #0]
   13db0:	7e22      	ldrb	r2, [r4, #24]
   13db2:	7e65      	ldrb	r5, [r4, #25]
   13db4:	7b9b      	ldrb	r3, [r3, #14]
   13db6:	4015      	ands	r5, r2
   13db8:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   13dba:	4235      	tst	r5, r6
   13dbc:	d004      	beq.n	13dc8 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   13dbe:	68a3      	ldr	r3, [r4, #8]
   13dc0:	0020      	movs	r0, r4
   13dc2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   13dc4:	6823      	ldr	r3, [r4, #0]
   13dc6:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   13dc8:	2602      	movs	r6, #2
   13dca:	4235      	tst	r5, r6
   13dcc:	d004      	beq.n	13dd8 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   13dce:	68e3      	ldr	r3, [r4, #12]
   13dd0:	0020      	movs	r0, r4
   13dd2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   13dd4:	6823      	ldr	r3, [r4, #0]
   13dd6:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   13dd8:	2610      	movs	r6, #16
   13dda:	4235      	tst	r5, r6
   13ddc:	d004      	beq.n	13de8 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   13dde:	6923      	ldr	r3, [r4, #16]
   13de0:	0020      	movs	r0, r4
   13de2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   13de4:	6823      	ldr	r3, [r4, #0]
   13de6:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   13de8:	2620      	movs	r6, #32
   13dea:	4235      	tst	r5, r6
   13dec:	d004      	beq.n	13df8 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   13dee:	6963      	ldr	r3, [r4, #20]
   13df0:	0020      	movs	r0, r4
   13df2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   13df4:	6823      	ldr	r3, [r4, #0]
   13df6:	739e      	strb	r6, [r3, #14]
	}
}
   13df8:	bd70      	pop	{r4, r5, r6, pc}
   13dfa:	46c0      	nop			; (mov r8, r8)
   13dfc:	20003718 	.word	0x20003718

00013e00 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   13e00:	b510      	push	{r4, lr}
   13e02:	2000      	movs	r0, #0
   13e04:	4b01      	ldr	r3, [pc, #4]	; (13e0c <TC3_Handler+0xc>)
   13e06:	4798      	blx	r3
   13e08:	bd10      	pop	{r4, pc}
   13e0a:	46c0      	nop			; (mov r8, r8)
   13e0c:	00013da5 	.word	0x00013da5

00013e10 <TC4_Handler>:
   13e10:	b510      	push	{r4, lr}
   13e12:	2001      	movs	r0, #1
   13e14:	4b01      	ldr	r3, [pc, #4]	; (13e1c <TC4_Handler+0xc>)
   13e16:	4798      	blx	r3
   13e18:	bd10      	pop	{r4, pc}
   13e1a:	46c0      	nop			; (mov r8, r8)
   13e1c:	00013da5 	.word	0x00013da5

00013e20 <TC5_Handler>:
   13e20:	b510      	push	{r4, lr}
   13e22:	2002      	movs	r0, #2
   13e24:	4b01      	ldr	r3, [pc, #4]	; (13e2c <TC5_Handler+0xc>)
   13e26:	4798      	blx	r3
   13e28:	bd10      	pop	{r4, pc}
   13e2a:	46c0      	nop			; (mov r8, r8)
   13e2c:	00013da5 	.word	0x00013da5

00013e30 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   13e30:	b570      	push	{r4, r5, r6, lr}
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   13e32:	4c08      	ldr	r4, [pc, #32]	; (13e54 <prvHelpCommand+0x24>)
{
   13e34:	000a      	movs	r2, r1
	if( pxCommand == NULL )
   13e36:	6823      	ldr	r3, [r4, #0]
   13e38:	2b00      	cmp	r3, #0
   13e3a:	d101      	bne.n	13e40 <prvHelpCommand+0x10>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   13e3c:	4b06      	ldr	r3, [pc, #24]	; (13e58 <prvHelpCommand+0x28>)
   13e3e:	6023      	str	r3, [r4, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   13e40:	6825      	ldr	r5, [r4, #0]
   13e42:	682b      	ldr	r3, [r5, #0]
   13e44:	6859      	ldr	r1, [r3, #4]
   13e46:	4b05      	ldr	r3, [pc, #20]	; (13e5c <prvHelpCommand+0x2c>)
   13e48:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   13e4a:	6868      	ldr	r0, [r5, #4]
   13e4c:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
   13e4e:	1e43      	subs	r3, r0, #1
   13e50:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
   13e52:	bd70      	pop	{r4, r5, r6, pc}
   13e54:	200003c0 	.word	0x200003c0
   13e58:	20000044 	.word	0x20000044
   13e5c:	0001b7b9 	.word	0x0001b7b9

00013e60 <FreeRTOS_CLIRegisterCommand>:
{
   13e60:	b570      	push	{r4, r5, r6, lr}
   13e62:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
   13e64:	d101      	bne.n	13e6a <FreeRTOS_CLIRegisterCommand+0xa>
   13e66:	b672      	cpsid	i
   13e68:	e7fe      	b.n	13e68 <FreeRTOS_CLIRegisterCommand+0x8>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   13e6a:	2008      	movs	r0, #8
   13e6c:	4b09      	ldr	r3, [pc, #36]	; (13e94 <FreeRTOS_CLIRegisterCommand+0x34>)
   13e6e:	4798      	blx	r3
   13e70:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
   13e72:	d101      	bne.n	13e78 <FreeRTOS_CLIRegisterCommand+0x18>
   13e74:	b672      	cpsid	i
   13e76:	e7fe      	b.n	13e76 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
   13e78:	4b07      	ldr	r3, [pc, #28]	; (13e98 <FreeRTOS_CLIRegisterCommand+0x38>)
   13e7a:	4798      	blx	r3
			pxNewListItem->pxNext = NULL;
   13e7c:	2300      	movs	r3, #0
   13e7e:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
   13e80:	4b06      	ldr	r3, [pc, #24]	; (13e9c <FreeRTOS_CLIRegisterCommand+0x3c>)
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   13e82:	6025      	str	r5, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
   13e84:	681a      	ldr	r2, [r3, #0]
			pxLastCommandInList = pxNewListItem;
   13e86:	601c      	str	r4, [r3, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
   13e88:	6054      	str	r4, [r2, #4]
		taskEXIT_CRITICAL();
   13e8a:	4b05      	ldr	r3, [pc, #20]	; (13ea0 <FreeRTOS_CLIRegisterCommand+0x40>)
   13e8c:	4798      	blx	r3
}
   13e8e:	2001      	movs	r0, #1
   13e90:	bd70      	pop	{r4, r5, r6, pc}
   13e92:	46c0      	nop			; (mov r8, r8)
   13e94:	00015245 	.word	0x00015245
   13e98:	00015181 	.word	0x00015181
   13e9c:	20000040 	.word	0x20000040
   13ea0:	00015199 	.word	0x00015199

00013ea4 <FreeRTOS_CLIProcessCommand>:
{
   13ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( pxCommand == NULL )
   13ea6:	4b32      	ldr	r3, [pc, #200]	; (13f70 <FreeRTOS_CLIProcessCommand+0xcc>)
{
   13ea8:	b085      	sub	sp, #20
   13eaa:	9202      	str	r2, [sp, #8]
	if( pxCommand == NULL )
   13eac:	681a      	ldr	r2, [r3, #0]
{
   13eae:	0006      	movs	r6, r0
   13eb0:	9101      	str	r1, [sp, #4]
	if( pxCommand == NULL )
   13eb2:	2a00      	cmp	r2, #0
   13eb4:	d00f      	beq.n	13ed6 <FreeRTOS_CLIProcessCommand+0x32>
BaseType_t xReturn = pdTRUE;
   13eb6:	2301      	movs	r3, #1
   13eb8:	001c      	movs	r4, r3
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   13eba:	4f2d      	ldr	r7, [pc, #180]	; (13f70 <FreeRTOS_CLIProcessCommand+0xcc>)
   13ebc:	683d      	ldr	r5, [r7, #0]
   13ebe:	2d00      	cmp	r5, #0
   13ec0:	d04e      	beq.n	13f60 <FreeRTOS_CLIProcessCommand+0xbc>
   13ec2:	2c00      	cmp	r4, #0
   13ec4:	d140      	bne.n	13f48 <FreeRTOS_CLIProcessCommand+0xa4>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   13ec6:	4b2b      	ldr	r3, [pc, #172]	; (13f74 <FreeRTOS_CLIProcessCommand+0xd0>)
   13ec8:	9a02      	ldr	r2, [sp, #8]
   13eca:	492b      	ldr	r1, [pc, #172]	; (13f78 <FreeRTOS_CLIProcessCommand+0xd4>)
   13ecc:	9801      	ldr	r0, [sp, #4]
   13ece:	4798      	blx	r3
		pxCommand = NULL;
   13ed0:	0023      	movs	r3, r4
			pxCommand = NULL;
   13ed2:	603b      	str	r3, [r7, #0]
   13ed4:	e041      	b.n	13f5a <FreeRTOS_CLIProcessCommand+0xb6>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   13ed6:	4a29      	ldr	r2, [pc, #164]	; (13f7c <FreeRTOS_CLIProcessCommand+0xd8>)
   13ed8:	9303      	str	r3, [sp, #12]
   13eda:	601a      	str	r2, [r3, #0]
   13edc:	9b03      	ldr	r3, [sp, #12]
   13ede:	681c      	ldr	r4, [r3, #0]
   13ee0:	2c00      	cmp	r4, #0
   13ee2:	d0e8      	beq.n	13eb6 <FreeRTOS_CLIProcessCommand+0x12>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   13ee4:	6827      	ldr	r7, [r4, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   13ee6:	4b26      	ldr	r3, [pc, #152]	; (13f80 <FreeRTOS_CLIProcessCommand+0xdc>)
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   13ee8:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   13eea:	0028      	movs	r0, r5
   13eec:	4798      	blx	r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   13eee:	2120      	movs	r1, #32
   13ef0:	5c33      	ldrb	r3, [r6, r0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   13ef2:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   13ef4:	438b      	bics	r3, r1
   13ef6:	d123      	bne.n	13f40 <FreeRTOS_CLIProcessCommand+0x9c>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   13ef8:	0029      	movs	r1, r5
   13efa:	0030      	movs	r0, r6
   13efc:	4b21      	ldr	r3, [pc, #132]	; (13f84 <FreeRTOS_CLIProcessCommand+0xe0>)
   13efe:	4798      	blx	r3
   13f00:	2800      	cmp	r0, #0
   13f02:	d11d      	bne.n	13f40 <FreeRTOS_CLIProcessCommand+0x9c>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   13f04:	230c      	movs	r3, #12
   13f06:	56fb      	ldrsb	r3, [r7, r3]
   13f08:	2b00      	cmp	r3, #0
   13f0a:	dbd4      	blt.n	13eb6 <FreeRTOS_CLIProcessCommand+0x12>
   13f0c:	0032      	movs	r2, r6
   13f0e:	0004      	movs	r4, r0
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
			{
				cParameters++;
				xLastCharacterWasSpace = pdTRUE;
   13f10:	2101      	movs	r1, #1
	while( *pcCommandString != 0x00 )
   13f12:	7815      	ldrb	r5, [r2, #0]
   13f14:	2d00      	cmp	r5, #0
   13f16:	d108      	bne.n	13f2a <FreeRTOS_CLIProcessCommand+0x86>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   13f18:	2801      	cmp	r0, #1
   13f1a:	d101      	bne.n	13f20 <FreeRTOS_CLIProcessCommand+0x7c>
	{
		cParameters--;
   13f1c:	3c01      	subs	r4, #1
   13f1e:	b264      	sxtb	r4, r4
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   13f20:	1b1c      	subs	r4, r3, r4
BaseType_t xReturn = pdTRUE;
   13f22:	4262      	negs	r2, r4
   13f24:	4162      	adcs	r2, r4
   13f26:	0014      	movs	r4, r2
   13f28:	e7c7      	b.n	13eba <FreeRTOS_CLIProcessCommand+0x16>
		if( ( *pcCommandString ) == ' ' )
   13f2a:	2d20      	cmp	r5, #32
   13f2c:	d106      	bne.n	13f3c <FreeRTOS_CLIProcessCommand+0x98>
			if( xLastCharacterWasSpace != pdTRUE )
   13f2e:	2801      	cmp	r0, #1
   13f30:	d002      	beq.n	13f38 <FreeRTOS_CLIProcessCommand+0x94>
				xLastCharacterWasSpace = pdTRUE;
   13f32:	0008      	movs	r0, r1
				cParameters++;
   13f34:	3401      	adds	r4, #1
   13f36:	b264      	sxtb	r4, r4
		pcCommandString++;
   13f38:	3201      	adds	r2, #1
   13f3a:	e7ea      	b.n	13f12 <FreeRTOS_CLIProcessCommand+0x6e>
			xLastCharacterWasSpace = pdFALSE;
   13f3c:	2000      	movs	r0, #0
   13f3e:	e7fb      	b.n	13f38 <FreeRTOS_CLIProcessCommand+0x94>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   13f40:	6862      	ldr	r2, [r4, #4]
   13f42:	4b0b      	ldr	r3, [pc, #44]	; (13f70 <FreeRTOS_CLIProcessCommand+0xcc>)
   13f44:	601a      	str	r2, [r3, #0]
   13f46:	e7c9      	b.n	13edc <FreeRTOS_CLIProcessCommand+0x38>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   13f48:	682b      	ldr	r3, [r5, #0]
   13f4a:	0032      	movs	r2, r6
   13f4c:	689b      	ldr	r3, [r3, #8]
   13f4e:	9902      	ldr	r1, [sp, #8]
   13f50:	9801      	ldr	r0, [sp, #4]
   13f52:	4798      	blx	r3
   13f54:	0004      	movs	r4, r0
		if( xReturn == pdFALSE )
   13f56:	1e03      	subs	r3, r0, #0
   13f58:	d0bb      	beq.n	13ed2 <FreeRTOS_CLIProcessCommand+0x2e>
}
   13f5a:	0020      	movs	r0, r4
   13f5c:	b005      	add	sp, #20
   13f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   13f60:	9a02      	ldr	r2, [sp, #8]
   13f62:	4909      	ldr	r1, [pc, #36]	; (13f88 <FreeRTOS_CLIProcessCommand+0xe4>)
   13f64:	9801      	ldr	r0, [sp, #4]
   13f66:	4b03      	ldr	r3, [pc, #12]	; (13f74 <FreeRTOS_CLIProcessCommand+0xd0>)
   13f68:	4798      	blx	r3
		xReturn = pdFALSE;
   13f6a:	002c      	movs	r4, r5
	return xReturn;
   13f6c:	e7f5      	b.n	13f5a <FreeRTOS_CLIProcessCommand+0xb6>
   13f6e:	46c0      	nop			; (mov r8, r8)
   13f70:	200003bc 	.word	0x200003bc
   13f74:	0001b7b9 	.word	0x0001b7b9
   13f78:	0001c268 	.word	0x0001c268
   13f7c:	20000044 	.word	0x20000044
   13f80:	0001b789 	.word	0x0001b789
   13f84:	0001b797 	.word	0x0001b797
   13f88:	0001c2c0 	.word	0x0001c2c0

00013f8c <prvTraceGetQueueType>:
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   13f8c:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   13f8e:	4b01      	ldr	r3, [pc, #4]	; (13f94 <prvTraceGetQueueType+0x8>)
   13f90:	4798      	blx	r3
}
   13f92:	bd10      	pop	{r4, pc}
   13f94:	00016251 	.word	0x00016251

00013f98 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   13f98:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   13f9a:	4b02      	ldr	r3, [pc, #8]	; (13fa4 <prvTraceGetTaskNumberLow16+0xc>)
   13f9c:	4798      	blx	r3
   13f9e:	b280      	uxth	r0, r0
}
   13fa0:	bd10      	pop	{r4, pc}
   13fa2:	46c0      	nop			; (mov r8, r8)
   13fa4:	00016d9d 	.word	0x00016d9d

00013fa8 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   13fa8:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   13faa:	4b02      	ldr	r3, [pc, #8]	; (13fb4 <prvTraceGetTaskNumberHigh16+0xc>)
   13fac:	4798      	blx	r3
   13fae:	0c00      	lsrs	r0, r0, #16
}
   13fb0:	bd10      	pop	{r4, pc}
   13fb2:	46c0      	nop			; (mov r8, r8)
   13fb4:	00016d9d 	.word	0x00016d9d

00013fb8 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   13fb8:	b570      	push	{r4, r5, r6, lr}
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   13fba:	4b05      	ldr	r3, [pc, #20]	; (13fd0 <prvTraceSetTaskNumberLow16+0x18>)
{
   13fbc:	000d      	movs	r5, r1
   13fbe:	0004      	movs	r4, r0
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   13fc0:	4798      	blx	r3
   13fc2:	0c01      	lsrs	r1, r0, #16
   13fc4:	0409      	lsls	r1, r1, #16
   13fc6:	4329      	orrs	r1, r5
   13fc8:	0020      	movs	r0, r4
   13fca:	4b02      	ldr	r3, [pc, #8]	; (13fd4 <prvTraceSetTaskNumberLow16+0x1c>)
   13fcc:	4798      	blx	r3
}
   13fce:	bd70      	pop	{r4, r5, r6, pc}
   13fd0:	00016d9d 	.word	0x00016d9d
   13fd4:	00016da5 	.word	0x00016da5

00013fd8 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   13fd8:	b570      	push	{r4, r5, r6, lr}
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   13fda:	4b05      	ldr	r3, [pc, #20]	; (13ff0 <prvTraceSetTaskNumberHigh16+0x18>)
{
   13fdc:	0004      	movs	r4, r0
   13fde:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   13fe0:	4798      	blx	r3
   13fe2:	042d      	lsls	r5, r5, #16
   13fe4:	b281      	uxth	r1, r0
   13fe6:	4329      	orrs	r1, r5
   13fe8:	0020      	movs	r0, r4
   13fea:	4b02      	ldr	r3, [pc, #8]	; (13ff4 <prvTraceSetTaskNumberHigh16+0x1c>)
   13fec:	4798      	blx	r3
}
   13fee:	bd70      	pop	{r4, r5, r6, pc}
   13ff0:	00016d9d 	.word	0x00016d9d
   13ff4:	00016da5 	.word	0x00016da5

00013ff8 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   13ff8:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   13ffa:	4b02      	ldr	r3, [pc, #8]	; (14004 <prvTraceGetQueueNumberLow16+0xc>)
   13ffc:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   13ffe:	b280      	uxth	r0, r0
}
   14000:	bd10      	pop	{r4, pc}
   14002:	46c0      	nop			; (mov r8, r8)
   14004:	00016249 	.word	0x00016249

00014008 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   14008:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1400a:	4b02      	ldr	r3, [pc, #8]	; (14014 <prvTraceGetQueueNumberHigh16+0xc>)
   1400c:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   1400e:	0c00      	lsrs	r0, r0, #16
}
   14010:	bd10      	pop	{r4, pc}
   14012:	46c0      	nop			; (mov r8, r8)
   14014:	00016249 	.word	0x00016249

00014018 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   14018:	b570      	push	{r4, r5, r6, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1401a:	4b05      	ldr	r3, [pc, #20]	; (14030 <prvTraceSetQueueNumberLow16+0x18>)
{
   1401c:	000d      	movs	r5, r1
   1401e:	0004      	movs	r4, r0
	return (uint32_t)uxQueueGetQueueNumber(handle);
   14020:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   14022:	0c01      	lsrs	r1, r0, #16
   14024:	0409      	lsls	r1, r1, #16
   14026:	4329      	orrs	r1, r5
   14028:	0020      	movs	r0, r4
   1402a:	4b02      	ldr	r3, [pc, #8]	; (14034 <prvTraceSetQueueNumberLow16+0x1c>)
   1402c:	4798      	blx	r3
}
   1402e:	bd70      	pop	{r4, r5, r6, pc}
   14030:	00016249 	.word	0x00016249
   14034:	0001624d 	.word	0x0001624d

00014038 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   14038:	b570      	push	{r4, r5, r6, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1403a:	4b05      	ldr	r3, [pc, #20]	; (14050 <prvTraceSetQueueNumberHigh16+0x18>)
{
   1403c:	0004      	movs	r4, r0
   1403e:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
   14040:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   14042:	042d      	lsls	r5, r5, #16
   14044:	b281      	uxth	r1, r0
   14046:	4329      	orrs	r1, r5
   14048:	0020      	movs	r0, r4
   1404a:	4b02      	ldr	r3, [pc, #8]	; (14054 <prvTraceSetQueueNumberHigh16+0x1c>)
   1404c:	4798      	blx	r3
}
   1404e:	bd70      	pop	{r4, r5, r6, pc}
   14050:	00016249 	.word	0x00016249
   14054:	0001624d 	.word	0x0001624d

00014058 <prvAddTaskToStackMonitor>:
void prvAddTaskToStackMonitor(void* task)
{
	int foundEmptySlot = 0;

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   14058:	2200      	movs	r2, #0
{
   1405a:	b510      	push	{r4, lr}
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1405c:	4b09      	ldr	r3, [pc, #36]	; (14084 <prvAddTaskToStackMonitor+0x2c>)
   1405e:	00d1      	lsls	r1, r2, #3
   14060:	58cc      	ldr	r4, [r1, r3]
   14062:	2c00      	cmp	r4, #0
   14064:	d105      	bne.n	14072 <prvAddTaskToStackMonitor+0x1a>
		{
			tasksInStackMonitor[i].tcb = task;
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   14066:	2201      	movs	r2, #1
			tasksInStackMonitor[i].tcb = task;
   14068:	50c8      	str	r0, [r1, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   1406a:	4252      	negs	r2, r2
   1406c:	185b      	adds	r3, r3, r1
   1406e:	605a      	str	r2, [r3, #4]

	if (foundEmptySlot == 0)
	{
		tasksNotIncluded++;
	}
}
   14070:	bd10      	pop	{r4, pc}
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   14072:	3201      	adds	r2, #1
   14074:	2a0a      	cmp	r2, #10
   14076:	d1f2      	bne.n	1405e <prvAddTaskToStackMonitor+0x6>
		tasksNotIncluded++;
   14078:	4a03      	ldr	r2, [pc, #12]	; (14088 <prvAddTaskToStackMonitor+0x30>)
   1407a:	6813      	ldr	r3, [r2, #0]
   1407c:	3301      	adds	r3, #1
   1407e:	6013      	str	r3, [r2, #0]
   14080:	e7f6      	b.n	14070 <prvAddTaskToStackMonitor+0x18>
   14082:	46c0      	nop			; (mov r8, r8)
   14084:	200003cc 	.word	0x200003cc
   14088:	2000041c 	.word	0x2000041c

0001408c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1408c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1408e:	2701      	movs	r7, #1
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   14090:	4c15      	ldr	r4, [pc, #84]	; (140e8 <prvReportStackUsage+0x5c>)
   14092:	6823      	ldr	r3, [r4, #0]
   14094:	9301      	str	r3, [sp, #4]
		if (tasksInStackMonitor[i].tcb != NULL)
   14096:	6823      	ldr	r3, [r4, #0]
   14098:	4d14      	ldr	r5, [pc, #80]	; (140ec <prvReportStackUsage+0x60>)
   1409a:	00db      	lsls	r3, r3, #3
   1409c:	5958      	ldr	r0, [r3, r5]
   1409e:	1e06      	subs	r6, r0, #0
   140a0:	d016      	beq.n	140d0 <prvReportStackUsage+0x44>
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   140a2:	4b13      	ldr	r3, [pc, #76]	; (140f0 <prvReportStackUsage+0x64>)
   140a4:	4798      	blx	r3
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   140a6:	6823      	ldr	r3, [r4, #0]
   140a8:	00db      	lsls	r3, r3, #3
   140aa:	18ea      	adds	r2, r5, r3
   140ac:	6851      	ldr	r1, [r2, #4]
   140ae:	4288      	cmp	r0, r1
   140b0:	d200      	bcs.n	140b4 <prvReportStackUsage+0x28>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   140b2:	6050      	str	r0, [r2, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   140b4:	58e8      	ldr	r0, [r5, r3]
   140b6:	4b0f      	ldr	r3, [pc, #60]	; (140f4 <prvReportStackUsage+0x68>)
   140b8:	4798      	blx	r3
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   140ba:	22ff      	movs	r2, #255	; 0xff
   140bc:	6823      	ldr	r3, [r4, #0]
   140be:	4002      	ands	r2, r0
   140c0:	00db      	lsls	r3, r3, #3
   140c2:	18ed      	adds	r5, r5, r3
   140c4:	686b      	ldr	r3, [r5, #4]
   140c6:	2103      	movs	r1, #3
   140c8:	20ea      	movs	r0, #234	; 0xea
   140ca:	4d0b      	ldr	r5, [pc, #44]	; (140f8 <prvReportStackUsage+0x6c>)
   140cc:	47a8      	blx	r5
			count++;
   140ce:	003e      	movs	r6, r7
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   140d0:	6823      	ldr	r3, [r4, #0]
   140d2:	210a      	movs	r1, #10
   140d4:	1c58      	adds	r0, r3, #1
   140d6:	4b09      	ldr	r3, [pc, #36]	; (140fc <prvReportStackUsage+0x70>)
   140d8:	4798      	blx	r3
   140da:	6021      	str	r1, [r4, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   140dc:	2e00      	cmp	r6, #0
   140de:	d102      	bne.n	140e6 <prvReportStackUsage+0x5a>
   140e0:	9b01      	ldr	r3, [sp, #4]
   140e2:	428b      	cmp	r3, r1
   140e4:	d1d7      	bne.n	14096 <prvReportStackUsage+0xa>
}
   140e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   140e8:	200003c8 	.word	0x200003c8
   140ec:	200003cc 	.word	0x200003cc
   140f0:	00016dad 	.word	0x00016dad
   140f4:	00016d9d 	.word	0x00016d9d
   140f8:	00014ced 	.word	0x00014ced
   140fc:	00019105 	.word	0x00019105

00014100 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   14100:	b510      	push	{r4, lr}
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   14102:	4b05      	ldr	r3, [pc, #20]	; (14118 <TzCtrl+0x18>)
   14104:	4798      	blx	r3
   14106:	2800      	cmp	r0, #0
   14108:	d001      	beq.n	1410e <TzCtrl+0xe>
		{
			prvReportStackUsage();
   1410a:	4b04      	ldr	r3, [pc, #16]	; (1411c <TzCtrl+0x1c>)
   1410c:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   1410e:	2004      	movs	r0, #4
   14110:	4b03      	ldr	r3, [pc, #12]	; (14120 <TzCtrl+0x20>)
   14112:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   14114:	e7f5      	b.n	14102 <TzCtrl+0x2>
   14116:	46c0      	nop			; (mov r8, r8)
   14118:	000142f1 	.word	0x000142f1
   1411c:	0001408d 	.word	0x0001408d
   14120:	0001693d 	.word	0x0001693d

00014124 <prvTraceGetCurrentTaskHandle>:
{
   14124:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
   14126:	4b01      	ldr	r3, [pc, #4]	; (1412c <prvTraceGetCurrentTaskHandle+0x8>)
   14128:	4798      	blx	r3
}
   1412a:	bd10      	pop	{r4, pc}
   1412c:	00016dd1 	.word	0x00016dd1

00014130 <vTraceEnable>:
{
   14130:	b513      	push	{r0, r1, r4, lr}
	prvTraceInitTraceData();
   14132:	4b0e      	ldr	r3, [pc, #56]	; (1416c <vTraceEnable+0x3c>)
{
   14134:	0004      	movs	r4, r0
	prvTraceInitTraceData();
   14136:	4798      	blx	r3
	if (startOption == TRC_START)
   14138:	2c01      	cmp	r4, #1
   1413a:	d10e      	bne.n	1415a <vTraceEnable+0x2a>
		vTraceStart();
   1413c:	4b0c      	ldr	r3, [pc, #48]	; (14170 <vTraceEnable+0x40>)
   1413e:	4798      	blx	r3
	if (HandleTzCtrl == NULL)
   14140:	4a0c      	ldr	r2, [pc, #48]	; (14174 <vTraceEnable+0x44>)
   14142:	6813      	ldr	r3, [r2, #0]
   14144:	2b00      	cmp	r3, #0
   14146:	d107      	bne.n	14158 <vTraceEnable+0x28>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   14148:	9201      	str	r2, [sp, #4]
   1414a:	2204      	movs	r2, #4
   1414c:	490a      	ldr	r1, [pc, #40]	; (14178 <vTraceEnable+0x48>)
   1414e:	9200      	str	r2, [sp, #0]
   14150:	480a      	ldr	r0, [pc, #40]	; (1417c <vTraceEnable+0x4c>)
   14152:	32c4      	adds	r2, #196	; 0xc4
   14154:	4c0a      	ldr	r4, [pc, #40]	; (14180 <vTraceEnable+0x50>)
   14156:	47a0      	blx	r4
}
   14158:	bd13      	pop	{r0, r1, r4, pc}
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1415a:	480a      	ldr	r0, [pc, #40]	; (14184 <vTraceEnable+0x54>)
	else if (startOption == TRC_START_AWAIT_HOST)
   1415c:	2c02      	cmp	r4, #2
   1415e:	d002      	beq.n	14166 <vTraceEnable+0x36>
	else if (startOption != TRC_INIT)
   14160:	2c00      	cmp	r4, #0
   14162:	d0ed      	beq.n	14140 <vTraceEnable+0x10>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   14164:	4808      	ldr	r0, [pc, #32]	; (14188 <vTraceEnable+0x58>)
   14166:	4b09      	ldr	r3, [pc, #36]	; (1418c <vTraceEnable+0x5c>)
   14168:	4798      	blx	r3
   1416a:	e7e9      	b.n	14140 <vTraceEnable+0x10>
   1416c:	00014301 	.word	0x00014301
   14170:	00014fe1 	.word	0x00014fe1
   14174:	200003c4 	.word	0x200003c4
   14178:	0001c6e2 	.word	0x0001c6e2
   1417c:	00014101 	.word	0x00014101
   14180:	000163c1 	.word	0x000163c1
   14184:	0001c66e 	.word	0x0001c66e
   14188:	0001c6ae 	.word	0x0001c6ae
   1418c:	000144a9 	.word	0x000144a9

00014190 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   14190:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   14192:	4b23      	ldr	r3, [pc, #140]	; (14220 <vTraceInitObjectPropertyTable+0x90>)
   14194:	2209      	movs	r2, #9
   14196:	681b      	ldr	r3, [r3, #0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   14198:	2411      	movs	r4, #17
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1419a:	0019      	movs	r1, r3
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1419c:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1419e:	3164      	adds	r1, #100	; 0x64
   141a0:	3201      	adds	r2, #1
   141a2:	700a      	strb	r2, [r1, #0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   141a4:	704a      	strb	r2, [r1, #1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   141a6:	708a      	strb	r2, [r1, #2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   141a8:	0018      	movs	r0, r3
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   141aa:	3205      	adds	r2, #5
   141ac:	70ca      	strb	r2, [r1, #3]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   141ae:	2105      	movs	r1, #5
   141b0:	3068      	adds	r0, #104	; 0x68
   141b2:	7001      	strb	r1, [r0, #0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   141b4:	7041      	strb	r1, [r0, #1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   141b6:	7081      	strb	r1, [r0, #2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   141b8:	70c1      	strb	r1, [r0, #3]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   141ba:	7101      	strb	r1, [r0, #4]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   141bc:	0019      	movs	r1, r3
   141be:	3170      	adds	r1, #112	; 0x70
   141c0:	700a      	strb	r2, [r1, #0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   141c2:	704a      	strb	r2, [r1, #1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   141c4:	708a      	strb	r2, [r1, #2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   141c6:	70ca      	strb	r2, [r1, #3]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   141c8:	710a      	strb	r2, [r1, #4]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   141ca:	714a      	strb	r2, [r1, #5]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   141cc:	718a      	strb	r2, [r1, #6]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   141ce:	71ca      	strb	r2, [r1, #7]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   141d0:	720a      	strb	r2, [r1, #8]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   141d2:	001a      	movs	r2, r3
   141d4:	2110      	movs	r1, #16
   141d6:	327c      	adds	r2, #124	; 0x7c
   141d8:	7011      	strb	r1, [r2, #0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   141da:	7051      	strb	r1, [r2, #1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   141dc:	7091      	strb	r1, [r2, #2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   141de:	7641      	strb	r1, [r0, #25]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   141e0:	0019      	movs	r1, r3
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   141e2:	2213      	movs	r2, #19
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   141e4:	3182      	adds	r1, #130	; 0x82
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   141e6:	75c2      	strb	r2, [r0, #23]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   141e8:	7604      	strb	r4, [r0, #24]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   141ea:	700a      	strb	r2, [r1, #0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   141ec:	704a      	strb	r2, [r1, #1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   141ee:	708a      	strb	r2, [r1, #2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   141f0:	001a      	movs	r2, r3
   141f2:	2100      	movs	r1, #0
   141f4:	3288      	adds	r2, #136	; 0x88
   141f6:	8011      	strh	r1, [r2, #0]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   141f8:	31a0      	adds	r1, #160	; 0xa0
   141fa:	8051      	strh	r1, [r2, #2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   141fc:	31a0      	adds	r1, #160	; 0xa0
   141fe:	8091      	strh	r1, [r2, #4]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   14200:	31a0      	adds	r1, #160	; 0xa0
   14202:	80d1      	strh	r1, [r2, #6]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   14204:	4907      	ldr	r1, [pc, #28]	; (14224 <vTraceInitObjectPropertyTable+0x94>)
   14206:	8111      	strh	r1, [r2, #8]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   14208:	4907      	ldr	r1, [pc, #28]	; (14228 <vTraceInitObjectPropertyTable+0x98>)
   1420a:	8151      	strh	r1, [r2, #10]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1420c:	4907      	ldr	r1, [pc, #28]	; (1422c <vTraceInitObjectPropertyTable+0x9c>)
   1420e:	8191      	strh	r1, [r2, #12]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   14210:	4907      	ldr	r1, [pc, #28]	; (14230 <vTraceInitObjectPropertyTable+0xa0>)
   14212:	81d1      	strh	r1, [r2, #14]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   14214:	315f      	adds	r1, #95	; 0x5f
   14216:	8211      	strh	r1, [r2, #16]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   14218:	4a06      	ldr	r2, [pc, #24]	; (14234 <vTraceInitObjectPropertyTable+0xa4>)
   1421a:	661a      	str	r2, [r3, #96]	; 0x60
}
   1421c:	bd10      	pop	{r4, pc}
   1421e:	46c0      	nop			; (mov r8, r8)
   14220:	20000420 	.word	0x20000420
   14224:	000002fd 	.word	0x000002fd
   14228:	00000352 	.word	0x00000352
   1422c:	000003a2 	.word	0x000003a2
   14230:	00000401 	.word	0x00000401
   14234:	000004bf 	.word	0x000004bf

00014238 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   14238:	2200      	movs	r2, #0
   1423a:	4b17      	ldr	r3, [pc, #92]	; (14298 <vTraceInitObjectHandleStack+0x60>)
   1423c:	825a      	strh	r2, [r3, #18]
   1423e:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   14240:	320a      	adds	r2, #10
   14242:	829a      	strh	r2, [r3, #20]
   14244:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   14246:	320a      	adds	r2, #10
   14248:	82da      	strh	r2, [r3, #22]
   1424a:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   1424c:	320a      	adds	r2, #10
   1424e:	831a      	strh	r2, [r3, #24]
   14250:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   14252:	320f      	adds	r2, #15
   14254:	835a      	strh	r2, [r3, #26]
   14256:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   14258:	3205      	adds	r2, #5
   1425a:	839a      	strh	r2, [r3, #28]
   1425c:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1425e:	3205      	adds	r2, #5
   14260:	83da      	strh	r2, [r3, #30]
   14262:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   14264:	3205      	adds	r2, #5
   14266:	841a      	strh	r2, [r3, #32]
   14268:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1426a:	3205      	adds	r2, #5
   1426c:	845a      	strh	r2, [r3, #34]	; 0x22
   1426e:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   14270:	3a38      	subs	r2, #56	; 0x38
   14272:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   14274:	320a      	adds	r2, #10
   14276:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   14278:	320a      	adds	r2, #10
   1427a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1427c:	320f      	adds	r2, #15
   1427e:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   14280:	3205      	adds	r2, #5
   14282:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   14284:	3205      	adds	r2, #5
   14286:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   14288:	3205      	adds	r2, #5
   1428a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1428c:	3205      	adds	r2, #5
   1428e:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   14290:	3205      	adds	r2, #5
   14292:	869a      	strh	r2, [r3, #52]	; 0x34
}
   14294:	4770      	bx	lr
   14296:	46c0      	nop			; (mov r8, r8)
   14298:	2000043c 	.word	0x2000043c

0001429c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1429c:	4b03      	ldr	r3, [pc, #12]	; (142ac <pszTraceGetErrorNotEnoughHandles+0x10>)
   1429e:	2808      	cmp	r0, #8
   142a0:	d802      	bhi.n	142a8 <pszTraceGetErrorNotEnoughHandles+0xc>
   142a2:	4b03      	ldr	r3, [pc, #12]	; (142b0 <pszTraceGetErrorNotEnoughHandles+0x14>)
   142a4:	0080      	lsls	r0, r0, #2
   142a6:	58c3      	ldr	r3, [r0, r3]
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
   142a8:	0018      	movs	r0, r3
   142aa:	4770      	bx	lr
   142ac:	0001c37c 	.word	0x0001c37c
   142b0:	0001c358 	.word	0x0001c358

000142b4 <prvStrncpy>:
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   142b4:	2300      	movs	r3, #0
{
   142b6:	b510      	push	{r4, lr}
	for (i = 0; i < maxLength; i++)
   142b8:	4293      	cmp	r3, r2
   142ba:	d100      	bne.n	142be <prvStrncpy+0xa>
	{
		dst[i] = src[i];
		if (src[i] == 0)
			break;
	}
}
   142bc:	bd10      	pop	{r4, pc}
		dst[i] = src[i];
   142be:	5ccc      	ldrb	r4, [r1, r3]
   142c0:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
   142c2:	5ccc      	ldrb	r4, [r1, r3]
   142c4:	2c00      	cmp	r4, #0
   142c6:	d0f9      	beq.n	142bc <prvStrncpy+0x8>
	for (i = 0; i < maxLength; i++)
   142c8:	3301      	adds	r3, #1
   142ca:	e7f5      	b.n	142b8 <prvStrncpy+0x4>

000142cc <vTraceStop>:
{
   142cc:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
   142ce:	4b06      	ldr	r3, [pc, #24]	; (142e8 <vTraceStop+0x1c>)
   142d0:	681b      	ldr	r3, [r3, #0]
   142d2:	2b00      	cmp	r3, #0
   142d4:	d001      	beq.n	142da <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
   142d6:	2200      	movs	r2, #0
   142d8:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   142da:	4b04      	ldr	r3, [pc, #16]	; (142ec <vTraceStop+0x20>)
   142dc:	681b      	ldr	r3, [r3, #0]
   142de:	2b00      	cmp	r3, #0
   142e0:	d000      	beq.n	142e4 <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   142e2:	4798      	blx	r3
}
   142e4:	bd10      	pop	{r4, pc}
   142e6:	46c0      	nop			; (mov r8, r8)
   142e8:	20000420 	.word	0x20000420
   142ec:	200004e8 	.word	0x200004e8

000142f0 <xTraceIsRecordingEnabled>:
	if (RecorderDataPtr != NULL)
   142f0:	4b02      	ldr	r3, [pc, #8]	; (142fc <xTraceIsRecordingEnabled+0xc>)
   142f2:	681b      	ldr	r3, [r3, #0]
   142f4:	1e18      	subs	r0, r3, #0
   142f6:	d000      	beq.n	142fa <xTraceIsRecordingEnabled+0xa>
		return (int)RecorderDataPtr->recorderActive;
   142f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   142fa:	4770      	bx	lr
   142fc:	20000420 	.word	0x20000420

00014300 <prvTraceInitTraceData>:
{	
   14300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
   14302:	4a48      	ldr	r2, [pc, #288]	; (14424 <prvTraceInitTraceData+0x124>)
   14304:	6813      	ldr	r3, [r2, #0]
   14306:	2b00      	cmp	r3, #0
   14308:	d000      	beq.n	1430c <prvTraceInitTraceData+0xc>
   1430a:	e085      	b.n	14418 <prvTraceInitTraceData+0x118>
	RecorderDataPtr = &RecorderData;
   1430c:	4b46      	ldr	r3, [pc, #280]	; (14428 <prvTraceInitTraceData+0x128>)
   1430e:	6013      	str	r3, [r2, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   14310:	25bd      	movs	r5, #189	; 0xbd
	init_hwtc_count = TRC_HWTC_COUNT;
   14312:	4b46      	ldr	r3, [pc, #280]	; (1442c <prvTraceInitTraceData+0x12c>)
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   14314:	4c43      	ldr	r4, [pc, #268]	; (14424 <prvTraceInitTraceData+0x124>)
	init_hwtc_count = TRC_HWTC_COUNT;
   14316:	681a      	ldr	r2, [r3, #0]
   14318:	4b45      	ldr	r3, [pc, #276]	; (14430 <prvTraceInitTraceData+0x130>)
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1431a:	012d      	lsls	r5, r5, #4
	init_hwtc_count = TRC_HWTC_COUNT;
   1431c:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1431e:	2100      	movs	r1, #0
   14320:	002a      	movs	r2, r5
   14322:	4b44      	ldr	r3, [pc, #272]	; (14434 <prvTraceInitTraceData+0x134>)
   14324:	6820      	ldr	r0, [r4, #0]
   14326:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   14328:	6823      	ldr	r3, [r4, #0]
   1432a:	4a43      	ldr	r2, [pc, #268]	; (14438 <prvTraceInitTraceData+0x138>)
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1432c:	2196      	movs	r1, #150	; 0x96
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1432e:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   14330:	2205      	movs	r2, #5
   14332:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   14334:	2200      	movs	r2, #0
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   14336:	0049      	lsls	r1, r1, #1
   14338:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1433a:	4940      	ldr	r1, [pc, #256]	; (1443c <prvTraceInitTraceData+0x13c>)
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1433c:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1433e:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   14340:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   14342:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   14344:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
   14346:	4b3e      	ldr	r3, [pc, #248]	; (14440 <prvTraceInitTraceData+0x140>)
   14348:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1434a:	6820      	ldr	r0, [r4, #0]
   1434c:	4a3d      	ldr	r2, [pc, #244]	; (14444 <prvTraceInitTraceData+0x144>)
   1434e:	4b3e      	ldr	r3, [pc, #248]	; (14448 <prvTraceInitTraceData+0x148>)
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   14350:	2501      	movs	r5, #1
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   14352:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   14354:	22c8      	movs	r2, #200	; 0xc8
   14356:	3304      	adds	r3, #4
   14358:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1435a:	4b3c      	ldr	r3, [pc, #240]	; (1444c <prvTraceInitTraceData+0x14c>)
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1435c:	4a3c      	ldr	r2, [pc, #240]	; (14450 <prvTraceInitTraceData+0x150>)
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1435e:	50c5      	str	r5, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   14360:	3355      	adds	r3, #85	; 0x55
   14362:	33ff      	adds	r3, #255	; 0xff
   14364:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   14366:	4b3b      	ldr	r3, [pc, #236]	; (14454 <prvTraceInitTraceData+0x154>)
   14368:	2250      	movs	r2, #80	; 0x50
   1436a:	18c0      	adds	r0, r0, r3
   1436c:	493a      	ldr	r1, [pc, #232]	; (14458 <prvTraceInitTraceData+0x158>)
   1436e:	4b3b      	ldr	r3, [pc, #236]	; (1445c <prvTraceInitTraceData+0x15c>)
   14370:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   14372:	6823      	ldr	r3, [r4, #0]
   14374:	493a      	ldr	r1, [pc, #232]	; (14460 <prvTraceInitTraceData+0x160>)
   14376:	4a3b      	ldr	r2, [pc, #236]	; (14464 <prvTraceInitTraceData+0x164>)
	RecorderDataPtr->endmarker10 = 0xF3;
   14378:	26f3      	movs	r6, #243	; 0xf3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1437a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1437c:	210a      	movs	r1, #10
   1437e:	4a3a      	ldr	r2, [pc, #232]	; (14468 <prvTraceInitTraceData+0x168>)
	RecorderDataPtr->endmarker11 = 0xF4;
   14380:	27f4      	movs	r7, #244	; 0xf4
	RecorderDataPtr->endmarker0 = 0x0A;
   14382:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   14384:	4a39      	ldr	r2, [pc, #228]	; (1446c <prvTraceInitTraceData+0x16c>)
   14386:	1949      	adds	r1, r1, r5
   14388:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1438a:	4a39      	ldr	r2, [pc, #228]	; (14470 <prvTraceInitTraceData+0x170>)
   1438c:	1949      	adds	r1, r1, r5
   1438e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   14390:	4a38      	ldr	r2, [pc, #224]	; (14474 <prvTraceInitTraceData+0x174>)
   14392:	1949      	adds	r1, r1, r5
   14394:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   14396:	4a38      	ldr	r2, [pc, #224]	; (14478 <prvTraceInitTraceData+0x178>)
   14398:	3164      	adds	r1, #100	; 0x64
   1439a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1439c:	2172      	movs	r1, #114	; 0x72
   1439e:	4a37      	ldr	r2, [pc, #220]	; (1447c <prvTraceInitTraceData+0x17c>)
   143a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   143a2:	2173      	movs	r1, #115	; 0x73
   143a4:	4a36      	ldr	r2, [pc, #216]	; (14480 <prvTraceInitTraceData+0x180>)
   143a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   143a8:	2174      	movs	r1, #116	; 0x74
   143aa:	4a36      	ldr	r2, [pc, #216]	; (14484 <prvTraceInitTraceData+0x184>)
   143ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   143ae:	21f1      	movs	r1, #241	; 0xf1
   143b0:	4a35      	ldr	r2, [pc, #212]	; (14488 <prvTraceInitTraceData+0x188>)
   143b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   143b4:	21f2      	movs	r1, #242	; 0xf2
   143b6:	4a35      	ldr	r2, [pc, #212]	; (1448c <prvTraceInitTraceData+0x18c>)
   143b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   143ba:	4a35      	ldr	r2, [pc, #212]	; (14490 <prvTraceInitTraceData+0x190>)
   143bc:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   143be:	4a35      	ldr	r2, [pc, #212]	; (14494 <prvTraceInitTraceData+0x194>)
   143c0:	549f      	strb	r7, [r3, r2]
	vTraceInitObjectHandleStack();
   143c2:	4b35      	ldr	r3, [pc, #212]	; (14498 <prvTraceInitTraceData+0x198>)
   143c4:	4798      	blx	r3
	RecorderDataPtr->startmarker9 = 0xF2;
   143c6:	22f2      	movs	r2, #242	; 0xf2
	RecorderDataPtr->startmarker11 = 0xF4;
   143c8:	6823      	ldr	r3, [r4, #0]
   143ca:	72df      	strb	r7, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   143cc:	729e      	strb	r6, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   143ce:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   143d0:	22f1      	movs	r2, #241	; 0xf1
   143d2:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   143d4:	2274      	movs	r2, #116	; 0x74
   143d6:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   143d8:	2273      	movs	r2, #115	; 0x73
   143da:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   143dc:	2272      	movs	r2, #114	; 0x72
   143de:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   143e0:	2271      	movs	r2, #113	; 0x71
   143e2:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   143e4:	2204      	movs	r2, #4
   143e6:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   143e8:	2303      	movs	r3, #3
   143ea:	6822      	ldr	r2, [r4, #0]
   143ec:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   143ee:	6822      	ldr	r2, [r4, #0]
   143f0:	3b01      	subs	r3, #1
   143f2:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   143f4:	6823      	ldr	r3, [r4, #0]
   143f6:	701d      	strb	r5, [r3, #0]
	if (traceErrorMessage != NULL)
   143f8:	4b28      	ldr	r3, [pc, #160]	; (1449c <prvTraceInitTraceData+0x19c>)
   143fa:	6819      	ldr	r1, [r3, #0]
   143fc:	2900      	cmp	r1, #0
   143fe:	d00f      	beq.n	14420 <prvTraceInitTraceData+0x120>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   14400:	6823      	ldr	r3, [r4, #0]
   14402:	4a14      	ldr	r2, [pc, #80]	; (14454 <prvTraceInitTraceData+0x154>)
   14404:	1898      	adds	r0, r3, r2
   14406:	2250      	movs	r2, #80	; 0x50
   14408:	4b14      	ldr	r3, [pc, #80]	; (1445c <prvTraceInitTraceData+0x15c>)
   1440a:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1440c:	6822      	ldr	r2, [r4, #0]
   1440e:	4b24      	ldr	r3, [pc, #144]	; (144a0 <prvTraceInitTraceData+0x1a0>)
   14410:	50d5      	str	r5, [r2, r3]
		vTraceStop();
   14412:	4b24      	ldr	r3, [pc, #144]	; (144a4 <prvTraceInitTraceData+0x1a4>)
   14414:	4798      	blx	r3
   14416:	e003      	b.n	14420 <prvTraceInitTraceData+0x120>
		if (RecorderDataPtr->startmarker0 == 1)
   14418:	781b      	ldrb	r3, [r3, #0]
   1441a:	2b01      	cmp	r3, #1
   1441c:	d000      	beq.n	14420 <prvTraceInitTraceData+0x120>
   1441e:	e777      	b.n	14310 <prvTraceInitTraceData+0x10>
}
   14420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14422:	46c0      	nop			; (mov r8, r8)
   14424:	20000420 	.word	0x20000420
   14428:	20003724 	.word	0x20003724
   1442c:	e000e018 	.word	0xe000e018
   14430:	200042f4 	.word	0x200042f4
   14434:	0001b50f 	.word	0x0001b50f
   14438:	00001aa1 	.word	0x00001aa1
   1443c:	f0f0f0f0 	.word	0xf0f0f0f0
   14440:	00014191 	.word	0x00014191
   14444:	f1f1f1f1 	.word	0xf1f1f1f1
   14448:	0000055c 	.word	0x0000055c
   1444c:	00000564 	.word	0x00000564
   14450:	f2f2f2f2 	.word	0xf2f2f2f2
   14454:	000006bc 	.word	0x000006bc
   14458:	0001c86c 	.word	0x0001c86c
   1445c:	000142b5 	.word	0x000142b5
   14460:	f3f3f3f3 	.word	0xf3f3f3f3
   14464:	0000070c 	.word	0x0000070c
   14468:	00000bc4 	.word	0x00000bc4
   1446c:	00000bc5 	.word	0x00000bc5
   14470:	00000bc6 	.word	0x00000bc6
   14474:	00000bc7 	.word	0x00000bc7
   14478:	00000bc8 	.word	0x00000bc8
   1447c:	00000bc9 	.word	0x00000bc9
   14480:	00000bca 	.word	0x00000bca
   14484:	00000bcb 	.word	0x00000bcb
   14488:	00000bcc 	.word	0x00000bcc
   1448c:	00000bcd 	.word	0x00000bcd
   14490:	00000bce 	.word	0x00000bce
   14494:	00000bcf 	.word	0x00000bcf
   14498:	00014239 	.word	0x00014239
   1449c:	200004d8 	.word	0x200004d8
   144a0:	000006b4 	.word	0x000006b4
   144a4:	000142cd 	.word	0x000142cd

000144a8 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   144a8:	b570      	push	{r4, r5, r6, lr}
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   144aa:	4c0d      	ldr	r4, [pc, #52]	; (144e0 <prvTraceError+0x38>)
{
   144ac:	0005      	movs	r5, r0
	if (RecorderDataPtr != NULL)
   144ae:	6823      	ldr	r3, [r4, #0]
   144b0:	2b00      	cmp	r3, #0
   144b2:	d001      	beq.n	144b8 <prvTraceError+0x10>
	{
		vTraceStop();
   144b4:	4b0b      	ldr	r3, [pc, #44]	; (144e4 <prvTraceError+0x3c>)
   144b6:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   144b8:	4b0b      	ldr	r3, [pc, #44]	; (144e8 <prvTraceError+0x40>)
   144ba:	681a      	ldr	r2, [r3, #0]
   144bc:	2a00      	cmp	r2, #0
   144be:	d10d      	bne.n	144dc <prvTraceError+0x34>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
		if (RecorderDataPtr != NULL)
   144c0:	6820      	ldr	r0, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
   144c2:	601d      	str	r5, [r3, #0]
		if (RecorderDataPtr != NULL)
   144c4:	2800      	cmp	r0, #0
   144c6:	d009      	beq.n	144dc <prvTraceError+0x34>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   144c8:	4b08      	ldr	r3, [pc, #32]	; (144ec <prvTraceError+0x44>)
   144ca:	3250      	adds	r2, #80	; 0x50
   144cc:	18c0      	adds	r0, r0, r3
   144ce:	0029      	movs	r1, r5
   144d0:	4b07      	ldr	r3, [pc, #28]	; (144f0 <prvTraceError+0x48>)
   144d2:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   144d4:	2101      	movs	r1, #1
   144d6:	6822      	ldr	r2, [r4, #0]
   144d8:	4b06      	ldr	r3, [pc, #24]	; (144f4 <prvTraceError+0x4c>)
   144da:	50d1      	str	r1, [r2, r3]
		}
	}
}
   144dc:	bd70      	pop	{r4, r5, r6, pc}
   144de:	46c0      	nop			; (mov r8, r8)
   144e0:	20000420 	.word	0x20000420
   144e4:	000142cd 	.word	0x000142cd
   144e8:	200004d8 	.word	0x200004d8
   144ec:	000006bc 	.word	0x000006bc
   144f0:	000142b5 	.word	0x000142b5
   144f4:	000006b4 	.word	0x000006b4

000144f8 <prvTraceNextFreeEventBufferSlot>:
{
   144f8:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
   144fa:	4b0a      	ldr	r3, [pc, #40]	; (14524 <prvTraceNextFreeEventBufferSlot+0x2c>)
   144fc:	681b      	ldr	r3, [r3, #0]
		return NULL;
   144fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
	if (! RecorderDataPtr->recorderActive)
   14500:	2800      	cmp	r0, #0
   14502:	d008      	beq.n	14516 <prvTraceNextFreeEventBufferSlot+0x1e>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   14504:	222c      	movs	r2, #44	; 0x2c
   14506:	69d8      	ldr	r0, [r3, #28]
   14508:	32ff      	adds	r2, #255	; 0xff
   1450a:	4290      	cmp	r0, r2
   1450c:	d904      	bls.n	14518 <prvTraceNextFreeEventBufferSlot+0x20>
		prvTraceError("Attempt to index outside event buffer!");
   1450e:	4806      	ldr	r0, [pc, #24]	; (14528 <prvTraceNextFreeEventBufferSlot+0x30>)
   14510:	4b06      	ldr	r3, [pc, #24]	; (1452c <prvTraceNextFreeEventBufferSlot+0x34>)
   14512:	4798      	blx	r3
		return NULL;
   14514:	2000      	movs	r0, #0
}
   14516:	bd10      	pop	{r4, pc}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   14518:	22e2      	movs	r2, #226	; 0xe2
   1451a:	0080      	lsls	r0, r0, #2
   1451c:	00d2      	lsls	r2, r2, #3
   1451e:	1880      	adds	r0, r0, r2
   14520:	1818      	adds	r0, r3, r0
   14522:	e7f8      	b.n	14516 <prvTraceNextFreeEventBufferSlot+0x1e>
   14524:	20000420 	.word	0x20000420
   14528:	0001c880 	.word	0x0001c880
   1452c:	000144a9 	.word	0x000144a9

00014530 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   14530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14532:	2600      	movs	r6, #0
   14534:	9001      	str	r0, [sp, #4]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   14536:	2800      	cmp	r0, #0
   14538:	d122      	bne.n	14580 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x50>
   1453a:	481f      	ldr	r0, [pc, #124]	; (145b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x88>)
   1453c:	4b1f      	ldr	r3, [pc, #124]	; (145bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x8c>)
   1453e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
   14540:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   14542:	21e2      	movs	r1, #226	; 0xe2
		e = RecorderDataPtr->nextFreeIndex + i;
   14544:	4b1e      	ldr	r3, [pc, #120]	; (145c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>)
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   14546:	00c9      	lsls	r1, r1, #3
		e = RecorderDataPtr->nextFreeIndex + i;
   14548:	681c      	ldr	r4, [r3, #0]
   1454a:	69e3      	ldr	r3, [r4, #28]
   1454c:	18f3      	adds	r3, r6, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1454e:	009d      	lsls	r5, r3, #2
   14550:	1962      	adds	r2, r4, r5
   14552:	1852      	adds	r2, r2, r1
   14554:	7812      	ldrb	r2, [r2, #0]
   14556:	0011      	movs	r1, r2
   14558:	3167      	adds	r1, #103	; 0x67
   1455a:	b2c9      	uxtb	r1, r1
   1455c:	290e      	cmp	r1, #14
   1455e:	d813      	bhi.n	14588 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x58>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   14560:	3268      	adds	r2, #104	; 0x68
   14562:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   14564:	69a1      	ldr	r1, [r4, #24]
   14566:	18d3      	adds	r3, r2, r3
   14568:	428b      	cmp	r3, r1
   1456a:	d208      	bcs.n	1457e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x4e>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1456c:	23e2      	movs	r3, #226	; 0xe2
   1456e:	00db      	lsls	r3, r3, #3
   14570:	18ed      	adds	r5, r5, r3
   14572:	3201      	adds	r2, #1
   14574:	0092      	lsls	r2, r2, #2
   14576:	1960      	adds	r0, r4, r5
   14578:	2100      	movs	r1, #0
   1457a:	4b12      	ldr	r3, [pc, #72]	; (145c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x94>)
   1457c:	4798      	blx	r3
		i++;
   1457e:	3601      	adds	r6, #1
	while (i < nofEntriesToCheck)
   14580:	9b01      	ldr	r3, [sp, #4]
   14582:	429e      	cmp	r6, r3
   14584:	d3dd      	bcc.n	14542 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12>
   14586:	e7db      	b.n	14540 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10>
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   14588:	2a01      	cmp	r2, #1
   1458a:	d1f8      	bne.n	1457e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x4e>
   1458c:	22e2      	movs	r2, #226	; 0xe2
   1458e:	00d2      	lsls	r2, r2, #3
   14590:	18ad      	adds	r5, r5, r2
			if ((e + 1) < RecorderDataPtr->maxEvents)
   14592:	69a2      	ldr	r2, [r4, #24]
   14594:	3301      	adds	r3, #1
   14596:	4f0b      	ldr	r7, [pc, #44]	; (145c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x94>)
   14598:	4293      	cmp	r3, r2
   1459a:	d204      	bcs.n	145a6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x76>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1459c:	2208      	movs	r2, #8
   1459e:	1960      	adds	r0, r4, r5
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   145a0:	2100      	movs	r1, #0
   145a2:	47b8      	blx	r7
   145a4:	e7eb      	b.n	1457e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x4e>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   145a6:	23e2      	movs	r3, #226	; 0xe2
   145a8:	00db      	lsls	r3, r3, #3
   145aa:	2204      	movs	r2, #4
   145ac:	18e0      	adds	r0, r4, r3
   145ae:	2100      	movs	r1, #0
   145b0:	47b8      	blx	r7
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   145b2:	1960      	adds	r0, r4, r5
   145b4:	2204      	movs	r2, #4
   145b6:	e7f3      	b.n	145a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x70>
   145b8:	0001c6e9 	.word	0x0001c6e9
   145bc:	000144a9 	.word	0x000144a9
   145c0:	20000420 	.word	0x20000420
   145c4:	0001b50f 	.word	0x0001b50f

000145c8 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   145c8:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
   145ca:	4b0b      	ldr	r3, [pc, #44]	; (145f8 <prvTraceUpdateCounters+0x30>)
   145cc:	681b      	ldr	r3, [r3, #0]
   145ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   145d0:	2a00      	cmp	r2, #0
   145d2:	d010      	beq.n	145f6 <prvTraceUpdateCounters+0x2e>
	
	RecorderDataPtr->numEvents++;

	RecorderDataPtr->nextFreeIndex++;

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   145d4:	212c      	movs	r1, #44	; 0x2c
	RecorderDataPtr->numEvents++;
   145d6:	695a      	ldr	r2, [r3, #20]
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   145d8:	31ff      	adds	r1, #255	; 0xff
	RecorderDataPtr->numEvents++;
   145da:	3201      	adds	r2, #1
   145dc:	615a      	str	r2, [r3, #20]
	RecorderDataPtr->nextFreeIndex++;
   145de:	69da      	ldr	r2, [r3, #28]
   145e0:	3201      	adds	r2, #1
   145e2:	61da      	str	r2, [r3, #28]
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   145e4:	428a      	cmp	r2, r1
   145e6:	d903      	bls.n	145f0 <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   145e8:	2201      	movs	r2, #1
   145ea:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   145ec:	2200      	movs	r2, #0
   145ee:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   145f0:	2001      	movs	r0, #1
   145f2:	4b02      	ldr	r3, [pc, #8]	; (145fc <prvTraceUpdateCounters+0x34>)
   145f4:	4798      	blx	r3
#endif
}
   145f6:	bd10      	pop	{r4, pc}
   145f8:	20000420 	.word	0x20000420
   145fc:	00014531 	.word	0x00014531

00014600 <prvTraceGetParam.part.1>:
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
   14600:	b570      	push	{r4, r5, r6, lr}
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   14602:	4b09      	ldr	r3, [pc, #36]	; (14628 <prvTraceGetParam.part.1+0x28>)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
   14604:	0005      	movs	r5, r0
   14606:	000c      	movs	r4, r1
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   14608:	4798      	blx	r3
		if (xps != NULL)
   1460a:	2800      	cmp	r0, #0
   1460c:	d009      	beq.n	14622 <prvTraceGetParam.part.1+0x22>
			xps->type = DIV_XPS;
   1460e:	2301      	movs	r3, #1
   14610:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   14612:	0023      	movs	r3, r4
   14614:	43ab      	bics	r3, r5
   14616:	0a1a      	lsrs	r2, r3, #8
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   14618:	0c1b      	lsrs	r3, r3, #16
   1461a:	8043      	strh	r3, [r0, #2]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   1461c:	7042      	strb	r2, [r0, #1]
			prvTraceUpdateCounters();
   1461e:	4b03      	ldr	r3, [pc, #12]	; (1462c <prvTraceGetParam.part.1+0x2c>)
   14620:	4798      	blx	r3
		return param & param_max;
   14622:	0020      	movs	r0, r4
   14624:	4028      	ands	r0, r5
}
   14626:	bd70      	pop	{r4, r5, r6, pc}
   14628:	000144f9 	.word	0x000144f9
   1462c:	000145c9 	.word	0x000145c9

00014630 <uiIndexOfObject>:
{
   14630:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   14632:	2908      	cmp	r1, #8
   14634:	d904      	bls.n	14640 <uiIndexOfObject+0x10>
   14636:	480e      	ldr	r0, [pc, #56]	; (14670 <uiIndexOfObject+0x40>)
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   14638:	4b0e      	ldr	r3, [pc, #56]	; (14674 <uiIndexOfObject+0x44>)
   1463a:	4798      	blx	r3
   1463c:	2000      	movs	r0, #0
}
   1463e:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   14640:	2800      	cmp	r0, #0
   14642:	d007      	beq.n	14654 <uiIndexOfObject+0x24>
   14644:	4b0c      	ldr	r3, [pc, #48]	; (14678 <uiIndexOfObject+0x48>)
   14646:	681a      	ldr	r2, [r3, #0]
   14648:	1853      	adds	r3, r2, r1
   1464a:	001c      	movs	r4, r3
   1464c:	3464      	adds	r4, #100	; 0x64
   1464e:	7824      	ldrb	r4, [r4, #0]
   14650:	4284      	cmp	r4, r0
   14652:	d201      	bcs.n	14658 <uiIndexOfObject+0x28>
   14654:	4809      	ldr	r0, [pc, #36]	; (1467c <uiIndexOfObject+0x4c>)
   14656:	e7ef      	b.n	14638 <uiIndexOfObject+0x8>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   14658:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1465a:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1465c:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1465e:	3140      	adds	r1, #64	; 0x40
   14660:	4358      	muls	r0, r3
   14662:	0049      	lsls	r1, r1, #1
   14664:	1851      	adds	r1, r2, r1
   14666:	890b      	ldrh	r3, [r1, #8]
   14668:	18c0      	adds	r0, r0, r3
   1466a:	b280      	uxth	r0, r0
   1466c:	e7e7      	b.n	1463e <uiIndexOfObject+0xe>
   1466e:	46c0      	nop			; (mov r8, r8)
   14670:	0001ce09 	.word	0x0001ce09
   14674:	000144a9 	.word	0x000144a9
   14678:	20000420 	.word	0x20000420
   1467c:	0001ce46 	.word	0x0001ce46

00014680 <prvMarkObjectAsUsed>:
{
   14680:	000b      	movs	r3, r1
   14682:	b510      	push	{r4, lr}
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   14684:	0001      	movs	r1, r0
   14686:	0018      	movs	r0, r3
   14688:	4b04      	ldr	r3, [pc, #16]	; (1469c <prvMarkObjectAsUsed+0x1c>)
   1468a:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1468c:	4b04      	ldr	r3, [pc, #16]	; (146a0 <prvMarkObjectAsUsed+0x20>)
   1468e:	681b      	ldr	r3, [r3, #0]
   14690:	1818      	adds	r0, r3, r0
   14692:	2301      	movs	r3, #1
   14694:	309c      	adds	r0, #156	; 0x9c
   14696:	7003      	strb	r3, [r0, #0]
}
   14698:	bd10      	pop	{r4, pc}
   1469a:	46c0      	nop			; (mov r8, r8)
   1469c:	00014631 	.word	0x00014631
   146a0:	20000420 	.word	0x20000420

000146a4 <prvTraceSetPriorityProperty>:
{
   146a4:	b570      	push	{r4, r5, r6, lr}
   146a6:	0005      	movs	r5, r0
   146a8:	0014      	movs	r4, r2
   146aa:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   146ac:	2d08      	cmp	r5, #8
   146ae:	d903      	bls.n	146b8 <prvTraceSetPriorityProperty+0x14>
   146b0:	480c      	ldr	r0, [pc, #48]	; (146e4 <prvTraceSetPriorityProperty+0x40>)
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   146b2:	4b0d      	ldr	r3, [pc, #52]	; (146e8 <prvTraceSetPriorityProperty+0x44>)
   146b4:	4798      	blx	r3
}
   146b6:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   146b8:	4e0c      	ldr	r6, [pc, #48]	; (146ec <prvTraceSetPriorityProperty+0x48>)
   146ba:	6833      	ldr	r3, [r6, #0]
   146bc:	195b      	adds	r3, r3, r5
   146be:	3364      	adds	r3, #100	; 0x64
   146c0:	781b      	ldrb	r3, [r3, #0]
   146c2:	428b      	cmp	r3, r1
   146c4:	d201      	bcs.n	146ca <prvTraceSetPriorityProperty+0x26>
   146c6:	480a      	ldr	r0, [pc, #40]	; (146f0 <prvTraceSetPriorityProperty+0x4c>)
   146c8:	e7f3      	b.n	146b2 <prvTraceSetPriorityProperty+0xe>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   146ca:	0029      	movs	r1, r5
   146cc:	4b09      	ldr	r3, [pc, #36]	; (146f4 <prvTraceSetPriorityProperty+0x50>)
   146ce:	4798      	blx	r3
   146d0:	6833      	ldr	r3, [r6, #0]
   146d2:	195d      	adds	r5, r3, r5
   146d4:	3570      	adds	r5, #112	; 0x70
   146d6:	782a      	ldrb	r2, [r5, #0]
   146d8:	181b      	adds	r3, r3, r0
   146da:	189b      	adds	r3, r3, r2
   146dc:	339d      	adds	r3, #157	; 0x9d
   146de:	701c      	strb	r4, [r3, #0]
   146e0:	e7e9      	b.n	146b6 <prvTraceSetPriorityProperty+0x12>
   146e2:	46c0      	nop			; (mov r8, r8)
   146e4:	0001c9b3 	.word	0x0001c9b3
   146e8:	000144a9 	.word	0x000144a9
   146ec:	20000420 	.word	0x20000420
   146f0:	0001c9fc 	.word	0x0001c9fc
   146f4:	00014631 	.word	0x00014631

000146f8 <prvTraceGetPriorityProperty>:
{
   146f8:	b570      	push	{r4, r5, r6, lr}
   146fa:	0004      	movs	r4, r0
   146fc:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   146fe:	2c08      	cmp	r4, #8
   14700:	d904      	bls.n	1470c <prvTraceGetPriorityProperty+0x14>
   14702:	480d      	ldr	r0, [pc, #52]	; (14738 <prvTraceGetPriorityProperty+0x40>)
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   14704:	4b0d      	ldr	r3, [pc, #52]	; (1473c <prvTraceGetPriorityProperty+0x44>)
   14706:	4798      	blx	r3
   14708:	2000      	movs	r0, #0
}
   1470a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1470c:	4d0c      	ldr	r5, [pc, #48]	; (14740 <prvTraceGetPriorityProperty+0x48>)
   1470e:	682b      	ldr	r3, [r5, #0]
   14710:	191b      	adds	r3, r3, r4
   14712:	3364      	adds	r3, #100	; 0x64
   14714:	781b      	ldrb	r3, [r3, #0]
   14716:	428b      	cmp	r3, r1
   14718:	d201      	bcs.n	1471e <prvTraceGetPriorityProperty+0x26>
   1471a:	480a      	ldr	r0, [pc, #40]	; (14744 <prvTraceGetPriorityProperty+0x4c>)
   1471c:	e7f2      	b.n	14704 <prvTraceGetPriorityProperty+0xc>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1471e:	0021      	movs	r1, r4
   14720:	4b09      	ldr	r3, [pc, #36]	; (14748 <prvTraceGetPriorityProperty+0x50>)
   14722:	4798      	blx	r3
   14724:	682b      	ldr	r3, [r5, #0]
   14726:	191c      	adds	r4, r3, r4
   14728:	3470      	adds	r4, #112	; 0x70
   1472a:	7822      	ldrb	r2, [r4, #0]
   1472c:	181b      	adds	r3, r3, r0
   1472e:	189b      	adds	r3, r3, r2
   14730:	339d      	adds	r3, #157	; 0x9d
   14732:	7818      	ldrb	r0, [r3, #0]
   14734:	e7e9      	b.n	1470a <prvTraceGetPriorityProperty+0x12>
   14736:	46c0      	nop			; (mov r8, r8)
   14738:	0001c7e3 	.word	0x0001c7e3
   1473c:	000144a9 	.word	0x000144a9
   14740:	20000420 	.word	0x20000420
   14744:	0001c82c 	.word	0x0001c82c
   14748:	00014631 	.word	0x00014631

0001474c <prvTraceSetObjectState>:
{
   1474c:	b570      	push	{r4, r5, r6, lr}
   1474e:	0005      	movs	r5, r0
   14750:	0014      	movs	r4, r2
   14752:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   14754:	2d08      	cmp	r5, #8
   14756:	d903      	bls.n	14760 <prvTraceSetObjectState+0x14>
   14758:	480c      	ldr	r0, [pc, #48]	; (1478c <prvTraceSetObjectState+0x40>)
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1475a:	4b0d      	ldr	r3, [pc, #52]	; (14790 <prvTraceSetObjectState+0x44>)
   1475c:	4798      	blx	r3
}
   1475e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   14760:	4e0c      	ldr	r6, [pc, #48]	; (14794 <prvTraceSetObjectState+0x48>)
   14762:	6833      	ldr	r3, [r6, #0]
   14764:	195b      	adds	r3, r3, r5
   14766:	3364      	adds	r3, #100	; 0x64
   14768:	781b      	ldrb	r3, [r3, #0]
   1476a:	428b      	cmp	r3, r1
   1476c:	d201      	bcs.n	14772 <prvTraceSetObjectState+0x26>
   1476e:	480a      	ldr	r0, [pc, #40]	; (14798 <prvTraceSetObjectState+0x4c>)
   14770:	e7f3      	b.n	1475a <prvTraceSetObjectState+0xe>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   14772:	0029      	movs	r1, r5
   14774:	4b09      	ldr	r3, [pc, #36]	; (1479c <prvTraceSetObjectState+0x50>)
   14776:	4798      	blx	r3
   14778:	6833      	ldr	r3, [r6, #0]
   1477a:	195d      	adds	r5, r3, r5
   1477c:	3570      	adds	r5, #112	; 0x70
   1477e:	782a      	ldrb	r2, [r5, #0]
   14780:	181b      	adds	r3, r3, r0
   14782:	189b      	adds	r3, r3, r2
   14784:	339c      	adds	r3, #156	; 0x9c
   14786:	701c      	strb	r4, [r3, #0]
   14788:	e7e9      	b.n	1475e <prvTraceSetObjectState+0x12>
   1478a:	46c0      	nop			; (mov r8, r8)
   1478c:	0001c934 	.word	0x0001c934
   14790:	000144a9 	.word	0x000144a9
   14794:	20000420 	.word	0x20000420
   14798:	0001c978 	.word	0x0001c978
   1479c:	00014631 	.word	0x00014631

000147a0 <prvTraceSetTaskInstanceFinished>:
{
   147a0:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   147a2:	4c0b      	ldr	r4, [pc, #44]	; (147d0 <prvTraceSetTaskInstanceFinished+0x30>)
   147a4:	6823      	ldr	r3, [r4, #0]
   147a6:	3367      	adds	r3, #103	; 0x67
   147a8:	781b      	ldrb	r3, [r3, #0]
   147aa:	4283      	cmp	r3, r0
   147ac:	d203      	bcs.n	147b6 <prvTraceSetTaskInstanceFinished+0x16>
   147ae:	4809      	ldr	r0, [pc, #36]	; (147d4 <prvTraceSetTaskInstanceFinished+0x34>)
   147b0:	4b09      	ldr	r3, [pc, #36]	; (147d8 <prvTraceSetTaskInstanceFinished+0x38>)
   147b2:	4798      	blx	r3
}
   147b4:	bd10      	pop	{r4, pc}
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   147b6:	4b09      	ldr	r3, [pc, #36]	; (147dc <prvTraceSetTaskInstanceFinished+0x3c>)
   147b8:	2103      	movs	r1, #3
   147ba:	4798      	blx	r3
   147bc:	6823      	ldr	r3, [r4, #0]
   147be:	001a      	movs	r2, r3
   147c0:	3273      	adds	r2, #115	; 0x73
   147c2:	7812      	ldrb	r2, [r2, #0]
   147c4:	181b      	adds	r3, r3, r0
   147c6:	189b      	adds	r3, r3, r2
   147c8:	2200      	movs	r2, #0
   147ca:	339c      	adds	r3, #156	; 0x9c
   147cc:	701a      	strb	r2, [r3, #0]
   147ce:	e7f1      	b.n	147b4 <prvTraceSetTaskInstanceFinished+0x14>
   147d0:	20000420 	.word	0x20000420
   147d4:	0001ca3c 	.word	0x0001ca3c
   147d8:	000144a9 	.word	0x000144a9
   147dc:	00014631 	.word	0x00014631

000147e0 <prvTraceGetObjectHandle>:
{
   147e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   147e2:	4b2a      	ldr	r3, [pc, #168]	; (1488c <prvTraceGetObjectHandle+0xac>)
   147e4:	681c      	ldr	r4, [r3, #0]
   147e6:	2c00      	cmp	r4, #0
   147e8:	d105      	bne.n	147f6 <prvTraceGetObjectHandle+0x16>
   147ea:	4829      	ldr	r0, [pc, #164]	; (14890 <prvTraceGetObjectHandle+0xb0>)
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   147ec:	4b29      	ldr	r3, [pc, #164]	; (14894 <prvTraceGetObjectHandle+0xb4>)
   147ee:	4798      	blx	r3
   147f0:	2100      	movs	r1, #0
}
   147f2:	0008      	movs	r0, r1
   147f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   147f6:	2808      	cmp	r0, #8
   147f8:	d901      	bls.n	147fe <prvTraceGetObjectHandle+0x1e>
   147fa:	4827      	ldr	r0, [pc, #156]	; (14898 <prvTraceGetObjectHandle+0xb8>)
   147fc:	e7f6      	b.n	147ec <prvTraceGetObjectHandle+0xc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   147fe:	f3ef 8310 	mrs	r3, PRIMASK
   14802:	9301      	str	r3, [sp, #4]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   14804:	2301      	movs	r3, #1
   14806:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   1480a:	4c24      	ldr	r4, [pc, #144]	; (1489c <prvTraceGetObjectHandle+0xbc>)
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1480c:	0046      	lsls	r6, r0, #1
	trcCRITICAL_SECTION_BEGIN();
   1480e:	6823      	ldr	r3, [r4, #0]
   14810:	3301      	adds	r3, #1
   14812:	6023      	str	r3, [r4, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   14814:	4b22      	ldr	r3, [pc, #136]	; (148a0 <prvTraceGetObjectHandle+0xc0>)
   14816:	5af2      	ldrh	r2, [r6, r3]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   14818:	189f      	adds	r7, r3, r2
   1481a:	3748      	adds	r7, #72	; 0x48
   1481c:	7839      	ldrb	r1, [r7, #0]
   1481e:	2900      	cmp	r1, #0
   14820:	d10b      	bne.n	1483a <prvTraceGetObjectHandle+0x5a>
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   14822:	2508      	movs	r5, #8
   14824:	46ac      	mov	ip, r5
   14826:	4484      	add	ip, r0
   14828:	4665      	mov	r5, ip
   1482a:	006d      	lsls	r5, r5, #1
   1482c:	46ac      	mov	ip, r5
   1482e:	449c      	add	ip, r3
			(traceHandle)(1 + indexOfHandle -
   14830:	4665      	mov	r5, ip
   14832:	886d      	ldrh	r5, [r5, #2]
   14834:	1c51      	adds	r1, r2, #1
   14836:	1b49      	subs	r1, r1, r5
		objectHandleStacks.objectHandles[indexOfHandle] =
   14838:	7039      	strb	r1, [r7, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1483a:	0001      	movs	r1, r0
   1483c:	3110      	adds	r1, #16
   1483e:	0049      	lsls	r1, r1, #1
   14840:	1859      	adds	r1, r3, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   14842:	8889      	ldrh	r1, [r1, #4]
   14844:	4291      	cmp	r1, r2
   14846:	d20b      	bcs.n	14860 <prvTraceGetObjectHandle+0x80>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   14848:	4b16      	ldr	r3, [pc, #88]	; (148a4 <prvTraceGetObjectHandle+0xc4>)
   1484a:	4798      	blx	r3
   1484c:	4b11      	ldr	r3, [pc, #68]	; (14894 <prvTraceGetObjectHandle+0xb4>)
   1484e:	4798      	blx	r3
		handle = 0;
   14850:	2100      	movs	r1, #0
	trcCRITICAL_SECTION_END();
   14852:	6823      	ldr	r3, [r4, #0]
   14854:	3b01      	subs	r3, #1
   14856:	6023      	str	r3, [r4, #0]
   14858:	9b01      	ldr	r3, [sp, #4]
   1485a:	f383 8810 	msr	PRIMASK, r3
	return handle;
   1485e:	e7c8      	b.n	147f2 <prvTraceGetObjectHandle+0x12>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
   14860:	1899      	adds	r1, r3, r2
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   14862:	3201      	adds	r2, #1
   14864:	b292      	uxth	r2, r2
	handle = objectHandleStacks.objectHandles[indexOfHandle];
   14866:	3148      	adds	r1, #72	; 0x48
   14868:	7809      	ldrb	r1, [r1, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1486a:	539a      	strh	r2, [r3, r6]
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1486c:	0006      	movs	r6, r0
   1486e:	3608      	adds	r6, #8
   14870:	0076      	lsls	r6, r6, #1
   14872:	199e      	adds	r6, r3, r6
   14874:	8876      	ldrh	r6, [r6, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   14876:	1b96      	subs	r6, r2, r6
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   14878:	0002      	movs	r2, r0
   1487a:	3218      	adds	r2, #24
   1487c:	0052      	lsls	r2, r2, #1
   1487e:	189b      	adds	r3, r3, r2
   14880:	88da      	ldrh	r2, [r3, #6]
		if (hndCount >
   14882:	4296      	cmp	r6, r2
   14884:	dde5      	ble.n	14852 <prvTraceGetObjectHandle+0x72>
				(traceHandle)hndCount;
   14886:	b2f6      	uxtb	r6, r6
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   14888:	80de      	strh	r6, [r3, #6]
   1488a:	e7e2      	b.n	14852 <prvTraceGetObjectHandle+0x72>
   1488c:	20000420 	.word	0x20000420
   14890:	0001cf04 	.word	0x0001cf04
   14894:	000144a9 	.word	0x000144a9
   14898:	0001c79e 	.word	0x0001c79e
   1489c:	200004d0 	.word	0x200004d0
   148a0:	2000043c 	.word	0x2000043c
   148a4:	0001429d 	.word	0x0001429d

000148a8 <prvTraceSetObjectName>:
{
   148a8:	b570      	push	{r4, r5, r6, lr}
   148aa:	0004      	movs	r4, r0
   148ac:	0015      	movs	r5, r2
   148ae:	0008      	movs	r0, r1
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   148b0:	2a00      	cmp	r2, #0
   148b2:	d103      	bne.n	148bc <prvTraceSetObjectName+0x14>
   148b4:	4813      	ldr	r0, [pc, #76]	; (14904 <prvTraceSetObjectName+0x5c>)
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   148b6:	4b14      	ldr	r3, [pc, #80]	; (14908 <prvTraceSetObjectName+0x60>)
   148b8:	4798      	blx	r3
}
   148ba:	bd70      	pop	{r4, r5, r6, pc}
	if (objectclass >= TRACE_NCLASSES)
   148bc:	2c08      	cmp	r4, #8
   148be:	d901      	bls.n	148c4 <prvTraceSetObjectName+0x1c>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   148c0:	4812      	ldr	r0, [pc, #72]	; (1490c <prvTraceSetObjectName+0x64>)
   148c2:	e7f8      	b.n	148b6 <prvTraceSetObjectName+0xe>
	if (handle == 0)
   148c4:	2900      	cmp	r1, #0
   148c6:	d101      	bne.n	148cc <prvTraceSetObjectName+0x24>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   148c8:	4811      	ldr	r0, [pc, #68]	; (14910 <prvTraceSetObjectName+0x68>)
   148ca:	e7f4      	b.n	148b6 <prvTraceSetObjectName+0xe>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   148cc:	4e11      	ldr	r6, [pc, #68]	; (14914 <prvTraceSetObjectName+0x6c>)
   148ce:	6833      	ldr	r3, [r6, #0]
   148d0:	191b      	adds	r3, r3, r4
   148d2:	3364      	adds	r3, #100	; 0x64
   148d4:	781b      	ldrb	r3, [r3, #0]
   148d6:	428b      	cmp	r3, r1
   148d8:	d203      	bcs.n	148e2 <prvTraceSetObjectName+0x3a>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   148da:	0020      	movs	r0, r4
   148dc:	4b0e      	ldr	r3, [pc, #56]	; (14918 <prvTraceSetObjectName+0x70>)
   148de:	4798      	blx	r3
   148e0:	e7e9      	b.n	148b6 <prvTraceSetObjectName+0xe>
		idx = uiIndexOfObject(handle, objectclass);
   148e2:	4b0e      	ldr	r3, [pc, #56]	; (1491c <prvTraceSetObjectName+0x74>)
   148e4:	0021      	movs	r1, r4
   148e6:	4798      	blx	r3
		if (traceErrorMessage == NULL)
   148e8:	4b0d      	ldr	r3, [pc, #52]	; (14920 <prvTraceSetObjectName+0x78>)
   148ea:	681b      	ldr	r3, [r3, #0]
   148ec:	2b00      	cmp	r3, #0
   148ee:	d1e4      	bne.n	148ba <prvTraceSetObjectName+0x12>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   148f0:	6833      	ldr	r3, [r6, #0]
   148f2:	309c      	adds	r0, #156	; 0x9c
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   148f4:	191c      	adds	r4, r3, r4
   148f6:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   148f8:	1818      	adds	r0, r3, r0
   148fa:	7822      	ldrb	r2, [r4, #0]
   148fc:	0029      	movs	r1, r5
   148fe:	4b09      	ldr	r3, [pc, #36]	; (14924 <prvTraceSetObjectName+0x7c>)
   14900:	4798      	blx	r3
   14902:	e7da      	b.n	148ba <prvTraceSetObjectName+0x12>
   14904:	0001c8a7 	.word	0x0001c8a7
   14908:	000144a9 	.word	0x000144a9
   1490c:	0001c8d9 	.word	0x0001c8d9
   14910:	0001c907 	.word	0x0001c907
   14914:	20000420 	.word	0x20000420
   14918:	0001429d 	.word	0x0001429d
   1491c:	00014631 	.word	0x00014631
   14920:	200004d8 	.word	0x200004d8
   14924:	000142b5 	.word	0x000142b5

00014928 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   14928:	b5f0      	push	{r4, r5, r6, r7, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1492a:	4b1e      	ldr	r3, [pc, #120]	; (149a4 <prvTracePortGetTimeStamp+0x7c>)
   1492c:	681b      	ldr	r3, [r3, #0]
   1492e:	2b01      	cmp	r3, #1
   14930:	d105      	bne.n	1493e <prvTracePortGetTimeStamp+0x16>
	{
		if (pTimestamp)
   14932:	2800      	cmp	r0, #0
   14934:	d002      	beq.n	1493c <prvTracePortGetTimeStamp+0x14>
			*pTimestamp = last_timestamp;
   14936:	4b1c      	ldr	r3, [pc, #112]	; (149a8 <prvTracePortGetTimeStamp+0x80>)
   14938:	681b      	ldr	r3, [r3, #0]
   1493a:	6003      	str	r3, [r0, #0]
	if (pTimestamp)
		*pTimestamp = last_timestamp;

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
}
   1493c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1493e:	4b1b      	ldr	r3, [pc, #108]	; (149ac <prvTracePortGetTimeStamp+0x84>)
   14940:	4a1b      	ldr	r2, [pc, #108]	; (149b0 <prvTracePortGetTimeStamp+0x88>)
   14942:	6819      	ldr	r1, [r3, #0]
   14944:	6812      	ldr	r2, [r2, #0]
   14946:	3101      	adds	r1, #1
   14948:	1a89      	subs	r1, r1, r2
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1494a:	4a1a      	ldr	r2, [pc, #104]	; (149b4 <prvTracePortGetTimeStamp+0x8c>)
   1494c:	4d1a      	ldr	r5, [pc, #104]	; (149b8 <prvTracePortGetTimeStamp+0x90>)
   1494e:	6812      	ldr	r2, [r2, #0]
   14950:	682e      	ldr	r6, [r5, #0]
   14952:	43d7      	mvns	r7, r2
   14954:	42f7      	cmn	r7, r6
   14956:	d523      	bpl.n	149a0 <prvTracePortGetTimeStamp+0x78>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   14958:	4296      	cmp	r6, r2
   1495a:	d105      	bne.n	14968 <prvTracePortGetTimeStamp+0x40>
		traceTickCount++;
   1495c:	4c17      	ldr	r4, [pc, #92]	; (149bc <prvTracePortGetTimeStamp+0x94>)
   1495e:	6826      	ldr	r6, [r4, #0]
   14960:	42b1      	cmp	r1, r6
   14962:	41b6      	sbcs	r6, r6
   14964:	4276      	negs	r6, r6
   14966:	1992      	adds	r2, r2, r6
	if (pTimestamp)
   14968:	2800      	cmp	r0, #0
   1496a:	d010      	beq.n	1498e <prvTracePortGetTimeStamp+0x66>
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1496c:	681f      	ldr	r7, [r3, #0]
   1496e:	4e0e      	ldr	r6, [pc, #56]	; (149a8 <prvTracePortGetTimeStamp+0x80>)
   14970:	3701      	adds	r7, #1
   14972:	08bf      	lsrs	r7, r7, #2
   14974:	4357      	muls	r7, r2
   14976:	6037      	str	r7, [r6, #0]
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   14978:	681b      	ldr	r3, [r3, #0]
   1497a:	3301      	adds	r3, #1
   1497c:	001c      	movs	r4, r3
   1497e:	2303      	movs	r3, #3
   14980:	401c      	ands	r4, r3
   14982:	0023      	movs	r3, r4
   14984:	4353      	muls	r3, r2
   14986:	185b      	adds	r3, r3, r1
   14988:	089b      	lsrs	r3, r3, #2
   1498a:	19db      	adds	r3, r3, r7
   1498c:	6033      	str	r3, [r6, #0]
	last_traceTickCount = traceTickCount;
   1498e:	602a      	str	r2, [r5, #0]
	if (pTimestamp)
   14990:	2800      	cmp	r0, #0
   14992:	d002      	beq.n	1499a <prvTracePortGetTimeStamp+0x72>
		*pTimestamp = last_timestamp;
   14994:	4b04      	ldr	r3, [pc, #16]	; (149a8 <prvTracePortGetTimeStamp+0x80>)
   14996:	681b      	ldr	r3, [r3, #0]
   14998:	6003      	str	r3, [r0, #0]
	last_hwtc_count = hwtc_count;
   1499a:	4b08      	ldr	r3, [pc, #32]	; (149bc <prvTracePortGetTimeStamp+0x94>)
   1499c:	6019      	str	r1, [r3, #0]
   1499e:	e7cd      	b.n	1493c <prvTracePortGetTimeStamp+0x14>
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   149a0:	0032      	movs	r2, r6
   149a2:	e7db      	b.n	1495c <prvTracePortGetTimeStamp+0x34>
   149a4:	200004dc 	.word	0x200004dc
   149a8:	20000434 	.word	0x20000434
   149ac:	e000e014 	.word	0xe000e014
   149b0:	e000e018 	.word	0xe000e018
   149b4:	200004e4 	.word	0x200004e4
   149b8:	20000438 	.word	0x20000438
   149bc:	20000430 	.word	0x20000430

000149c0 <prvTraceGetDTS>:
{
   149c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t timestamp = 0;
   149c2:	2400      	movs	r4, #0
{
   149c4:	b085      	sub	sp, #20
   149c6:	0006      	movs	r6, r0
	uint32_t timestamp = 0;
   149c8:	9403      	str	r4, [sp, #12]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   149ca:	28ff      	cmp	r0, #255	; 0xff
   149cc:	d008      	beq.n	149e0 <prvTraceGetDTS+0x20>
   149ce:	4b34      	ldr	r3, [pc, #208]	; (14aa0 <prvTraceGetDTS+0xe0>)
   149d0:	4298      	cmp	r0, r3
   149d2:	d005      	beq.n	149e0 <prvTraceGetDTS+0x20>
   149d4:	4833      	ldr	r0, [pc, #204]	; (14aa4 <prvTraceGetDTS+0xe4>)
   149d6:	4b34      	ldr	r3, [pc, #208]	; (14aa8 <prvTraceGetDTS+0xe8>)
   149d8:	4798      	blx	r3
   149da:	0020      	movs	r0, r4
}
   149dc:	b005      	add	sp, #20
   149de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (RecorderDataPtr->frequency == 0)
   149e0:	4d32      	ldr	r5, [pc, #200]	; (14aac <prvTraceGetDTS+0xec>)
   149e2:	682c      	ldr	r4, [r5, #0]
   149e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   149e6:	2b00      	cmp	r3, #0
   149e8:	d105      	bne.n	149f6 <prvTraceGetDTS+0x36>
		if (timestampFrequency != 0)
   149ea:	4b31      	ldr	r3, [pc, #196]	; (14ab0 <prvTraceGetDTS+0xf0>)
   149ec:	6818      	ldr	r0, [r3, #0]
   149ee:	2800      	cmp	r0, #0
   149f0:	d03b      	beq.n	14a6a <prvTraceGetDTS+0xaa>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   149f2:	0880      	lsrs	r0, r0, #2
   149f4:	6260      	str	r0, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
   149f6:	4b2f      	ldr	r3, [pc, #188]	; (14ab4 <prvTraceGetDTS+0xf4>)
   149f8:	a803      	add	r0, sp, #12
   149fa:	4798      	blx	r3
	dts = timestamp - old_timestamp;
   149fc:	4a2e      	ldr	r2, [pc, #184]	; (14ab8 <prvTraceGetDTS+0xf8>)
	if (RecorderDataPtr->frequency > 0)
   149fe:	682d      	ldr	r5, [r5, #0]
	dts = timestamp - old_timestamp;
   14a00:	9b03      	ldr	r3, [sp, #12]
   14a02:	6811      	ldr	r1, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
   14a04:	6a6f      	ldr	r7, [r5, #36]	; 0x24
	dts = timestamp - old_timestamp;
   14a06:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
   14a08:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
   14a0a:	2f00      	cmp	r7, #0
   14a0c:	d039      	beq.n	14a82 <prvTraceGetDTS+0xc2>
   14a0e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a10:	9301      	str	r3, [sp, #4]
		if (dts > RecorderDataPtr->frequency)
   14a12:	42bc      	cmp	r4, r7
   14a14:	d932      	bls.n	14a7c <prvTraceGetDTS+0xbc>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   14a16:	0039      	movs	r1, r7
   14a18:	4b28      	ldr	r3, [pc, #160]	; (14abc <prvTraceGetDTS+0xfc>)
   14a1a:	0020      	movs	r0, r4
   14a1c:	4798      	blx	r3
   14a1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   14a20:	0039      	movs	r1, r7
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   14a22:	1818      	adds	r0, r3, r0
   14a24:	62e8      	str	r0, [r5, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   14a26:	4b26      	ldr	r3, [pc, #152]	; (14ac0 <prvTraceGetDTS+0x100>)
   14a28:	0020      	movs	r0, r4
   14a2a:	4798      	blx	r3
   14a2c:	9b01      	ldr	r3, [sp, #4]
   14a2e:	1859      	adds	r1, r3, r1
			RecorderDataPtr->absTimeLastEvent += dts;
   14a30:	62a9      	str	r1, [r5, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   14a32:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14a34:	429f      	cmp	r7, r3
   14a36:	d804      	bhi.n	14a42 <prvTraceGetDTS+0x82>
			RecorderDataPtr->absTimeLastEventSecond++;
   14a38:	6aea      	ldr	r2, [r5, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   14a3a:	1bdf      	subs	r7, r3, r7
			RecorderDataPtr->absTimeLastEventSecond++;
   14a3c:	3201      	adds	r2, #1
   14a3e:	62ea      	str	r2, [r5, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   14a40:	62af      	str	r7, [r5, #40]	; 0x28
	if (dts > param_maxDTS)
   14a42:	42b4      	cmp	r4, r6
   14a44:	d90e      	bls.n	14a64 <prvTraceGetDTS+0xa4>
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   14a46:	4b1f      	ldr	r3, [pc, #124]	; (14ac4 <prvTraceGetDTS+0x104>)
   14a48:	4798      	blx	r3
		if (xts != NULL)
   14a4a:	2800      	cmp	r0, #0
   14a4c:	d00a      	beq.n	14a64 <prvTraceGetDTS+0xa4>
			if (param_maxDTS == 0xFFFF)
   14a4e:	4b14      	ldr	r3, [pc, #80]	; (14aa0 <prvTraceGetDTS+0xe0>)
   14a50:	429e      	cmp	r6, r3
   14a52:	d118      	bne.n	14a86 <prvTraceGetDTS+0xc6>
				xts->type = XTS16;
   14a54:	23a9      	movs	r3, #169	; 0xa9
   14a56:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   14a58:	0c23      	lsrs	r3, r4, #16
   14a5a:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
   14a5c:	2300      	movs	r3, #0
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   14a5e:	7043      	strb	r3, [r0, #1]
			prvTraceUpdateCounters();
   14a60:	4b19      	ldr	r3, [pc, #100]	; (14ac8 <prvTraceGetDTS+0x108>)
   14a62:	4798      	blx	r3
	return (uint16_t)dts & param_maxDTS;
   14a64:	0020      	movs	r0, r4
   14a66:	4030      	ands	r0, r6
   14a68:	e7b8      	b.n	149dc <prvTraceGetDTS+0x1c>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   14a6a:	4b18      	ldr	r3, [pc, #96]	; (14acc <prvTraceGetDTS+0x10c>)
   14a6c:	681a      	ldr	r2, [r3, #0]
   14a6e:	4b18      	ldr	r3, [pc, #96]	; (14ad0 <prvTraceGetDTS+0x110>)
   14a70:	681b      	ldr	r3, [r3, #0]
   14a72:	429a      	cmp	r2, r3
   14a74:	d0bf      	beq.n	149f6 <prvTraceGetDTS+0x36>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   14a76:	4b17      	ldr	r3, [pc, #92]	; (14ad4 <prvTraceGetDTS+0x114>)
   14a78:	4798      	blx	r3
   14a7a:	e7ba      	b.n	149f2 <prvTraceGetDTS+0x32>
			RecorderDataPtr->absTimeLastEvent += dts;
   14a7c:	9b01      	ldr	r3, [sp, #4]
   14a7e:	1919      	adds	r1, r3, r4
   14a80:	e7d6      	b.n	14a30 <prvTraceGetDTS+0x70>
		RecorderDataPtr->absTimeLastEvent = timestamp;
   14a82:	62ab      	str	r3, [r5, #40]	; 0x28
   14a84:	e7dd      	b.n	14a42 <prvTraceGetDTS+0x82>
			else if (param_maxDTS == 0xFF)
   14a86:	2eff      	cmp	r6, #255	; 0xff
   14a88:	d105      	bne.n	14a96 <prvTraceGetDTS+0xd6>
				xts->type = XTS8;
   14a8a:	23a8      	movs	r3, #168	; 0xa8
   14a8c:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   14a8e:	0a23      	lsrs	r3, r4, #8
   14a90:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   14a92:	0e23      	lsrs	r3, r4, #24
   14a94:	e7e3      	b.n	14a5e <prvTraceGetDTS+0x9e>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   14a96:	4810      	ldr	r0, [pc, #64]	; (14ad8 <prvTraceGetDTS+0x118>)
   14a98:	4b03      	ldr	r3, [pc, #12]	; (14aa8 <prvTraceGetDTS+0xe8>)
   14a9a:	4798      	blx	r3
   14a9c:	e7e0      	b.n	14a60 <prvTraceGetDTS+0xa0>
   14a9e:	46c0      	nop			; (mov r8, r8)
   14aa0:	0000ffff 	.word	0x0000ffff
   14aa4:	0001c73e 	.word	0x0001c73e
   14aa8:	000144a9 	.word	0x000144a9
   14aac:	20000420 	.word	0x20000420
   14ab0:	200004d4 	.word	0x200004d4
   14ab4:	00014929 	.word	0x00014929
   14ab8:	200004cc 	.word	0x200004cc
   14abc:	00018e25 	.word	0x00018e25
   14ac0:	00018f31 	.word	0x00018f31
   14ac4:	000144f9 	.word	0x000144f9
   14ac8:	000145c9 	.word	0x000145c9
   14acc:	e000e018 	.word	0xe000e018
   14ad0:	200042f4 	.word	0x200042f4
   14ad4:	0001873d 	.word	0x0001873d
   14ad8:	0001c77b 	.word	0x0001c77b

00014adc <prvTraceStoreTaskReady>:
{
   14adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ade:	1e05      	subs	r5, r0, #0
	if (handle == 0)
   14ae0:	d00d      	beq.n	14afe <prvTraceStoreTaskReady+0x22>
	if (! readyEventsEnabled)
   14ae2:	4b18      	ldr	r3, [pc, #96]	; (14b44 <prvTraceStoreTaskReady+0x68>)
   14ae4:	681b      	ldr	r3, [r3, #0]
   14ae6:	2b00      	cmp	r3, #0
   14ae8:	d009      	beq.n	14afe <prvTraceStoreTaskReady+0x22>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   14aea:	4817      	ldr	r0, [pc, #92]	; (14b48 <prvTraceStoreTaskReady+0x6c>)
   14aec:	2d0f      	cmp	r5, #15
   14aee:	d804      	bhi.n	14afa <prvTraceStoreTaskReady+0x1e>
	if (recorder_busy)
   14af0:	4c16      	ldr	r4, [pc, #88]	; (14b4c <prvTraceStoreTaskReady+0x70>)
   14af2:	6823      	ldr	r3, [r4, #0]
   14af4:	2b00      	cmp	r3, #0
   14af6:	d003      	beq.n	14b00 <prvTraceStoreTaskReady+0x24>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   14af8:	4815      	ldr	r0, [pc, #84]	; (14b50 <prvTraceStoreTaskReady+0x74>)
   14afa:	4b16      	ldr	r3, [pc, #88]	; (14b54 <prvTraceStoreTaskReady+0x78>)
   14afc:	4798      	blx	r3
}
   14afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   14b00:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   14b04:	2301      	movs	r3, #1
   14b06:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   14b0a:	6823      	ldr	r3, [r4, #0]
   14b0c:	3301      	adds	r3, #1
   14b0e:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   14b10:	4b11      	ldr	r3, [pc, #68]	; (14b58 <prvTraceStoreTaskReady+0x7c>)
   14b12:	681b      	ldr	r3, [r3, #0]
   14b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14b16:	2b00      	cmp	r3, #0
   14b18:	d00d      	beq.n	14b36 <prvTraceStoreTaskReady+0x5a>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   14b1a:	4b10      	ldr	r3, [pc, #64]	; (14b5c <prvTraceStoreTaskReady+0x80>)
   14b1c:	4810      	ldr	r0, [pc, #64]	; (14b60 <prvTraceStoreTaskReady+0x84>)
   14b1e:	4798      	blx	r3
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   14b20:	4b10      	ldr	r3, [pc, #64]	; (14b64 <prvTraceStoreTaskReady+0x88>)
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   14b22:	0007      	movs	r7, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   14b24:	4798      	blx	r3
		if (tr != NULL)
   14b26:	2800      	cmp	r0, #0
   14b28:	d005      	beq.n	14b36 <prvTraceStoreTaskReady+0x5a>
			tr->type = DIV_TASK_READY;
   14b2a:	2302      	movs	r3, #2
			tr->dts = dts3;
   14b2c:	8047      	strh	r7, [r0, #2]
			tr->type = DIV_TASK_READY;
   14b2e:	7003      	strb	r3, [r0, #0]
			tr->objHandle = hnd8;
   14b30:	7045      	strb	r5, [r0, #1]
			prvTraceUpdateCounters();
   14b32:	4b0d      	ldr	r3, [pc, #52]	; (14b68 <prvTraceStoreTaskReady+0x8c>)
   14b34:	4798      	blx	r3
	trcCRITICAL_SECTION_END();
   14b36:	6823      	ldr	r3, [r4, #0]
   14b38:	3b01      	subs	r3, #1
   14b3a:	6023      	str	r3, [r4, #0]
   14b3c:	f386 8810 	msr	PRIMASK, r6
   14b40:	e7dd      	b.n	14afe <prvTraceStoreTaskReady+0x22>
   14b42:	46c0      	nop			; (mov r8, r8)
   14b44:	20000058 	.word	0x20000058
   14b48:	0001cd15 	.word	0x0001cd15
   14b4c:	200004d0 	.word	0x200004d0
   14b50:	0001cd54 	.word	0x0001cd54
   14b54:	000144a9 	.word	0x000144a9
   14b58:	20000420 	.word	0x20000420
   14b5c:	000149c1 	.word	0x000149c1
   14b60:	0000ffff 	.word	0x0000ffff
   14b64:	000144f9 	.word	0x000144f9
   14b68:	000145c9 	.word	0x000145c9

00014b6c <vTraceStoreMemMangEvent>:
{
   14b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
   14b6e:	4f2c      	ldr	r7, [pc, #176]	; (14c20 <vTraceStoreMemMangEvent+0xb4>)
{
   14b70:	b085      	sub	sp, #20
	if (RecorderDataPtr == NULL)
   14b72:	683b      	ldr	r3, [r7, #0]
{
   14b74:	9002      	str	r0, [sp, #8]
   14b76:	000d      	movs	r5, r1
	if (RecorderDataPtr == NULL)
   14b78:	2b00      	cmp	r3, #0
   14b7a:	d04f      	beq.n	14c1c <vTraceStoreMemMangEvent+0xb0>
		size = (uint32_t)(- signed_size);
   14b7c:	17d3      	asrs	r3, r2, #31
   14b7e:	18d6      	adds	r6, r2, r3
   14b80:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   14b82:	f3ef 8310 	mrs	r3, PRIMASK
   14b86:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   14b88:	2301      	movs	r3, #1
   14b8a:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   14b8e:	4c25      	ldr	r4, [pc, #148]	; (14c24 <vTraceStoreMemMangEvent+0xb8>)
   14b90:	6823      	ldr	r3, [r4, #0]
   14b92:	3301      	adds	r3, #1
   14b94:	6023      	str	r3, [r4, #0]
	if (address != 0)
   14b96:	2900      	cmp	r1, #0
   14b98:	d003      	beq.n	14ba2 <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
   14b9a:	4b23      	ldr	r3, [pc, #140]	; (14c28 <vTraceStoreMemMangEvent+0xbc>)
   14b9c:	6819      	ldr	r1, [r3, #0]
   14b9e:	188a      	adds	r2, r1, r2
   14ba0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   14ba2:	683b      	ldr	r3, [r7, #0]
   14ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14ba6:	2b00      	cmp	r3, #0
   14ba8:	d032      	beq.n	14c10 <vTraceStoreMemMangEvent+0xa4>
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   14baa:	4b20      	ldr	r3, [pc, #128]	; (14c2c <vTraceStoreMemMangEvent+0xc0>)
   14bac:	20ff      	movs	r0, #255	; 0xff
   14bae:	4798      	blx	r3
	if (param <= param_max)
   14bb0:	4b1f      	ldr	r3, [pc, #124]	; (14c30 <vTraceStoreMemMangEvent+0xc4>)
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   14bb2:	9003      	str	r0, [sp, #12]
	if (param <= param_max)
   14bb4:	429e      	cmp	r6, r3
   14bb6:	d904      	bls.n	14bc2 <vTraceStoreMemMangEvent+0x56>
   14bb8:	0031      	movs	r1, r6
   14bba:	0018      	movs	r0, r3
   14bbc:	4b1d      	ldr	r3, [pc, #116]	; (14c34 <vTraceStoreMemMangEvent+0xc8>)
   14bbe:	4798      	blx	r3
   14bc0:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   14bc2:	4b1d      	ldr	r3, [pc, #116]	; (14c38 <vTraceStoreMemMangEvent+0xcc>)
   14bc4:	4798      	blx	r3
   14bc6:	9000      	str	r0, [sp, #0]
		if (ms != NULL)
   14bc8:	2800      	cmp	r0, #0
   14bca:	d021      	beq.n	14c10 <vTraceStoreMemMangEvent+0xa4>
			ms->dts = dts1;
   14bcc:	466a      	mov	r2, sp
			ms->type = NULL_EVENT; /* Updated when all events are written */
   14bce:	2300      	movs	r3, #0
			ms->dts = dts1;
   14bd0:	7b12      	ldrb	r2, [r2, #12]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   14bd2:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
   14bd4:	8046      	strh	r6, [r0, #2]
			ms->dts = dts1;
   14bd6:	7042      	strb	r2, [r0, #1]
			prvTraceUpdateCounters();
   14bd8:	4e18      	ldr	r6, [pc, #96]	; (14c3c <vTraceStoreMemMangEvent+0xd0>)
   14bda:	47b0      	blx	r6
	if (param <= param_max)
   14bdc:	4b14      	ldr	r3, [pc, #80]	; (14c30 <vTraceStoreMemMangEvent+0xc4>)
   14bde:	429d      	cmp	r5, r3
   14be0:	d904      	bls.n	14bec <vTraceStoreMemMangEvent+0x80>
   14be2:	0029      	movs	r1, r5
   14be4:	0018      	movs	r0, r3
   14be6:	4b13      	ldr	r3, [pc, #76]	; (14c34 <vTraceStoreMemMangEvent+0xc8>)
   14be8:	4798      	blx	r3
   14bea:	0005      	movs	r5, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   14bec:	4b12      	ldr	r3, [pc, #72]	; (14c38 <vTraceStoreMemMangEvent+0xcc>)
   14bee:	4798      	blx	r3
			if (ma != NULL)
   14bf0:	2800      	cmp	r0, #0
   14bf2:	d00d      	beq.n	14c10 <vTraceStoreMemMangEvent+0xa4>
				ma->addr_high = addr_high;
   14bf4:	2300      	movs	r3, #0
   14bf6:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   14bf8:	466b      	mov	r3, sp
   14bfa:	7a1b      	ldrb	r3, [r3, #8]
				ma->addr_low = addr_low;
   14bfc:	8045      	strh	r5, [r0, #2]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   14bfe:	1c5a      	adds	r2, r3, #1
   14c00:	7002      	strb	r2, [r0, #0]
				ms->type = (uint8_t) ecode;
   14c02:	9a00      	ldr	r2, [sp, #0]
   14c04:	7013      	strb	r3, [r2, #0]
				prvTraceUpdateCounters();					
   14c06:	47b0      	blx	r6
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   14c08:	4a07      	ldr	r2, [pc, #28]	; (14c28 <vTraceStoreMemMangEvent+0xbc>)
   14c0a:	683b      	ldr	r3, [r7, #0]
   14c0c:	6812      	ldr	r2, [r2, #0]
   14c0e:	651a      	str	r2, [r3, #80]	; 0x50
	trcCRITICAL_SECTION_END();
   14c10:	6823      	ldr	r3, [r4, #0]
   14c12:	3b01      	subs	r3, #1
   14c14:	6023      	str	r3, [r4, #0]
   14c16:	9b01      	ldr	r3, [sp, #4]
   14c18:	f383 8810 	msr	PRIMASK, r3
}
   14c1c:	b005      	add	sp, #20
   14c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c20:	20000420 	.word	0x20000420
   14c24:	200004d0 	.word	0x200004d0
   14c28:	20000428 	.word	0x20000428
   14c2c:	000149c1 	.word	0x000149c1
   14c30:	0000ffff 	.word	0x0000ffff
   14c34:	00014601 	.word	0x00014601
   14c38:	000144f9 	.word	0x000144f9
   14c3c:	000145c9 	.word	0x000145c9

00014c40 <prvTraceStoreKernelCall>:
{
   14c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14c42:	0005      	movs	r5, r0
   14c44:	0017      	movs	r7, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   14c46:	481d      	ldr	r0, [pc, #116]	; (14cbc <prvTraceStoreKernelCall+0x7c>)
   14c48:	2dfe      	cmp	r5, #254	; 0xfe
   14c4a:	d802      	bhi.n	14c52 <prvTraceStoreKernelCall+0x12>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   14c4c:	2908      	cmp	r1, #8
   14c4e:	d903      	bls.n	14c58 <prvTraceStoreKernelCall+0x18>
   14c50:	481b      	ldr	r0, [pc, #108]	; (14cc0 <prvTraceStoreKernelCall+0x80>)
   14c52:	4b1c      	ldr	r3, [pc, #112]	; (14cc4 <prvTraceStoreKernelCall+0x84>)
   14c54:	4798      	blx	r3
}
   14c56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   14c58:	4a1b      	ldr	r2, [pc, #108]	; (14cc8 <prvTraceStoreKernelCall+0x88>)
   14c5a:	481c      	ldr	r0, [pc, #112]	; (14ccc <prvTraceStoreKernelCall+0x8c>)
   14c5c:	6813      	ldr	r3, [r2, #0]
   14c5e:	1859      	adds	r1, r3, r1
   14c60:	3164      	adds	r1, #100	; 0x64
   14c62:	780b      	ldrb	r3, [r1, #0]
   14c64:	42bb      	cmp	r3, r7
   14c66:	d3f4      	bcc.n	14c52 <prvTraceStoreKernelCall+0x12>
	if (recorder_busy)
   14c68:	4c19      	ldr	r4, [pc, #100]	; (14cd0 <prvTraceStoreKernelCall+0x90>)
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   14c6a:	481a      	ldr	r0, [pc, #104]	; (14cd4 <prvTraceStoreKernelCall+0x94>)
	if (recorder_busy)
   14c6c:	6823      	ldr	r3, [r4, #0]
   14c6e:	2b00      	cmp	r3, #0
   14c70:	d1ef      	bne.n	14c52 <prvTraceStoreKernelCall+0x12>
	if (handle_of_last_logged_task == 0)
   14c72:	4b19      	ldr	r3, [pc, #100]	; (14cd8 <prvTraceStoreKernelCall+0x98>)
   14c74:	781b      	ldrb	r3, [r3, #0]
   14c76:	2b00      	cmp	r3, #0
   14c78:	d0ed      	beq.n	14c56 <prvTraceStoreKernelCall+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   14c7a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   14c7e:	2301      	movs	r3, #1
   14c80:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   14c84:	6823      	ldr	r3, [r4, #0]
   14c86:	3301      	adds	r3, #1
   14c88:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive)
   14c8a:	6813      	ldr	r3, [r2, #0]
   14c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14c8e:	2b00      	cmp	r3, #0
   14c90:	d00e      	beq.n	14cb0 <prvTraceStoreKernelCall+0x70>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   14c92:	4b12      	ldr	r3, [pc, #72]	; (14cdc <prvTraceStoreKernelCall+0x9c>)
   14c94:	4812      	ldr	r0, [pc, #72]	; (14ce0 <prvTraceStoreKernelCall+0xa0>)
   14c96:	4798      	blx	r3
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   14c98:	4b12      	ldr	r3, [pc, #72]	; (14ce4 <prvTraceStoreKernelCall+0xa4>)
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   14c9a:	9001      	str	r0, [sp, #4]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   14c9c:	4798      	blx	r3
		if (kse != NULL)
   14c9e:	2800      	cmp	r0, #0
   14ca0:	d006      	beq.n	14cb0 <prvTraceStoreKernelCall+0x70>
			kse->dts = dts1;
   14ca2:	466b      	mov	r3, sp
   14ca4:	889b      	ldrh	r3, [r3, #4]
			kse->type = (uint8_t)ecode;
   14ca6:	7005      	strb	r5, [r0, #0]
			kse->dts = dts1;
   14ca8:	8043      	strh	r3, [r0, #2]
			kse->objHandle = hnd8;
   14caa:	7047      	strb	r7, [r0, #1]
			prvTraceUpdateCounters();
   14cac:	4b0e      	ldr	r3, [pc, #56]	; (14ce8 <prvTraceStoreKernelCall+0xa8>)
   14cae:	4798      	blx	r3
	trcCRITICAL_SECTION_END();
   14cb0:	6823      	ldr	r3, [r4, #0]
   14cb2:	3b01      	subs	r3, #1
   14cb4:	6023      	str	r3, [r4, #0]
   14cb6:	f386 8810 	msr	PRIMASK, r6
   14cba:	e7cc      	b.n	14c56 <prvTraceStoreKernelCall+0x16>
   14cbc:	0001ca84 	.word	0x0001ca84
   14cc0:	0001cab9 	.word	0x0001cab9
   14cc4:	000144a9 	.word	0x000144a9
   14cc8:	20000420 	.word	0x20000420
   14ccc:	0001cafe 	.word	0x0001cafe
   14cd0:	200004d0 	.word	0x200004d0
   14cd4:	0001cb44 	.word	0x0001cb44
   14cd8:	20000424 	.word	0x20000424
   14cdc:	000149c1 	.word	0x000149c1
   14ce0:	0000ffff 	.word	0x0000ffff
   14ce4:	000144f9 	.word	0x000144f9
   14ce8:	000145c9 	.word	0x000145c9

00014cec <prvTraceStoreKernelCallWithParam>:
{
   14cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14cee:	0006      	movs	r6, r0
   14cf0:	9200      	str	r2, [sp, #0]
   14cf2:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   14cf4:	4822      	ldr	r0, [pc, #136]	; (14d80 <prvTraceStoreKernelCallWithParam+0x94>)
   14cf6:	2efe      	cmp	r6, #254	; 0xfe
   14cf8:	d810      	bhi.n	14d1c <prvTraceStoreKernelCallWithParam+0x30>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   14cfa:	4822      	ldr	r0, [pc, #136]	; (14d84 <prvTraceStoreKernelCallWithParam+0x98>)
   14cfc:	2908      	cmp	r1, #8
   14cfe:	d80d      	bhi.n	14d1c <prvTraceStoreKernelCallWithParam+0x30>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   14d00:	4a21      	ldr	r2, [pc, #132]	; (14d88 <prvTraceStoreKernelCallWithParam+0x9c>)
   14d02:	4822      	ldr	r0, [pc, #136]	; (14d8c <prvTraceStoreKernelCallWithParam+0xa0>)
   14d04:	6813      	ldr	r3, [r2, #0]
   14d06:	1859      	adds	r1, r3, r1
   14d08:	3164      	adds	r1, #100	; 0x64
   14d0a:	780b      	ldrb	r3, [r1, #0]
   14d0c:	9900      	ldr	r1, [sp, #0]
   14d0e:	428b      	cmp	r3, r1
   14d10:	d304      	bcc.n	14d1c <prvTraceStoreKernelCallWithParam+0x30>
	if (recorder_busy)
   14d12:	4c1f      	ldr	r4, [pc, #124]	; (14d90 <prvTraceStoreKernelCallWithParam+0xa4>)
   14d14:	6823      	ldr	r3, [r4, #0]
   14d16:	2b00      	cmp	r3, #0
   14d18:	d003      	beq.n	14d22 <prvTraceStoreKernelCallWithParam+0x36>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   14d1a:	481e      	ldr	r0, [pc, #120]	; (14d94 <prvTraceStoreKernelCallWithParam+0xa8>)
   14d1c:	4b1e      	ldr	r3, [pc, #120]	; (14d98 <prvTraceStoreKernelCallWithParam+0xac>)
   14d1e:	4798      	blx	r3
}
   14d20:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   14d22:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   14d26:	2301      	movs	r3, #1
   14d28:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   14d2c:	6823      	ldr	r3, [r4, #0]
   14d2e:	3301      	adds	r3, #1
   14d30:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   14d32:	6813      	ldr	r3, [r2, #0]
   14d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14d36:	2b00      	cmp	r3, #0
   14d38:	d01c      	beq.n	14d74 <prvTraceStoreKernelCallWithParam+0x88>
   14d3a:	4b18      	ldr	r3, [pc, #96]	; (14d9c <prvTraceStoreKernelCallWithParam+0xb0>)
   14d3c:	781b      	ldrb	r3, [r3, #0]
   14d3e:	2b00      	cmp	r3, #0
   14d40:	d018      	beq.n	14d74 <prvTraceStoreKernelCallWithParam+0x88>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   14d42:	20ff      	movs	r0, #255	; 0xff
   14d44:	4b16      	ldr	r3, [pc, #88]	; (14da0 <prvTraceStoreKernelCallWithParam+0xb4>)
   14d46:	4798      	blx	r3
   14d48:	9001      	str	r0, [sp, #4]
	if (param <= param_max)
   14d4a:	2dff      	cmp	r5, #255	; 0xff
   14d4c:	d904      	bls.n	14d58 <prvTraceStoreKernelCallWithParam+0x6c>
   14d4e:	0029      	movs	r1, r5
   14d50:	20ff      	movs	r0, #255	; 0xff
   14d52:	4b14      	ldr	r3, [pc, #80]	; (14da4 <prvTraceStoreKernelCallWithParam+0xb8>)
   14d54:	4798      	blx	r3
   14d56:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   14d58:	4b13      	ldr	r3, [pc, #76]	; (14da8 <prvTraceStoreKernelCallWithParam+0xbc>)
   14d5a:	4798      	blx	r3
		if (kse != NULL)
   14d5c:	2800      	cmp	r0, #0
   14d5e:	d009      	beq.n	14d74 <prvTraceStoreKernelCallWithParam+0x88>
			kse->dts = dts2;
   14d60:	466b      	mov	r3, sp
   14d62:	791b      	ldrb	r3, [r3, #4]
			kse->type = (uint8_t)evtcode;
   14d64:	7006      	strb	r6, [r0, #0]
			kse->dts = dts2;
   14d66:	70c3      	strb	r3, [r0, #3]
			kse->objHandle = hnd8;
   14d68:	466b      	mov	r3, sp
   14d6a:	781b      	ldrb	r3, [r3, #0]
			kse->param = p8;
   14d6c:	7085      	strb	r5, [r0, #2]
			kse->objHandle = hnd8;
   14d6e:	7043      	strb	r3, [r0, #1]
			prvTraceUpdateCounters();
   14d70:	4b0e      	ldr	r3, [pc, #56]	; (14dac <prvTraceStoreKernelCallWithParam+0xc0>)
   14d72:	4798      	blx	r3
	trcCRITICAL_SECTION_END();
   14d74:	6823      	ldr	r3, [r4, #0]
   14d76:	3b01      	subs	r3, #1
   14d78:	6023      	str	r3, [r4, #0]
   14d7a:	f387 8810 	msr	PRIMASK, r7
   14d7e:	e7cf      	b.n	14d20 <prvTraceStoreKernelCallWithParam+0x34>
   14d80:	0001cc03 	.word	0x0001cc03
   14d84:	0001cc43 	.word	0x0001cc43
   14d88:	20000420 	.word	0x20000420
   14d8c:	0001cc91 	.word	0x0001cc91
   14d90:	200004d0 	.word	0x200004d0
   14d94:	0001cce0 	.word	0x0001cce0
   14d98:	000144a9 	.word	0x000144a9
   14d9c:	20000424 	.word	0x20000424
   14da0:	000149c1 	.word	0x000149c1
   14da4:	00014601 	.word	0x00014601
   14da8:	000144f9 	.word	0x000144f9
   14dac:	000145c9 	.word	0x000145c9

00014db0 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
   14db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14db2:	0006      	movs	r6, r0
   14db4:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   14db6:	481c      	ldr	r0, [pc, #112]	; (14e28 <prvTraceStoreKernelCallWithNumericParamOnly+0x78>)
   14db8:	2efe      	cmp	r6, #254	; 0xfe
   14dba:	d804      	bhi.n	14dc6 <prvTraceStoreKernelCallWithNumericParamOnly+0x16>
	if (recorder_busy)
   14dbc:	4c1b      	ldr	r4, [pc, #108]	; (14e2c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
   14dbe:	6823      	ldr	r3, [r4, #0]
   14dc0:	2b00      	cmp	r3, #0
   14dc2:	d003      	beq.n	14dcc <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   14dc4:	481a      	ldr	r0, [pc, #104]	; (14e30 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
   14dc6:	4b1b      	ldr	r3, [pc, #108]	; (14e34 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
   14dc8:	4798      	blx	r3
}
   14dca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   14dcc:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   14dd0:	2301      	movs	r3, #1
   14dd2:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   14dd6:	6823      	ldr	r3, [r4, #0]
   14dd8:	3301      	adds	r3, #1
   14dda:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   14ddc:	4b16      	ldr	r3, [pc, #88]	; (14e38 <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
   14dde:	681b      	ldr	r3, [r3, #0]
   14de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14de2:	2b00      	cmp	r3, #0
   14de4:	d019      	beq.n	14e1a <prvTraceStoreKernelCallWithNumericParamOnly+0x6a>
   14de6:	4b15      	ldr	r3, [pc, #84]	; (14e3c <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
   14de8:	781b      	ldrb	r3, [r3, #0]
   14dea:	2b00      	cmp	r3, #0
   14dec:	d015      	beq.n	14e1a <prvTraceStoreKernelCallWithNumericParamOnly+0x6a>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   14dee:	20ff      	movs	r0, #255	; 0xff
   14df0:	4b13      	ldr	r3, [pc, #76]	; (14e40 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
   14df2:	4798      	blx	r3
   14df4:	9001      	str	r0, [sp, #4]
	if (param <= param_max)
   14df6:	4813      	ldr	r0, [pc, #76]	; (14e44 <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
   14df8:	4285      	cmp	r5, r0
   14dfa:	d903      	bls.n	14e04 <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
   14dfc:	0029      	movs	r1, r5
   14dfe:	4b12      	ldr	r3, [pc, #72]	; (14e48 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
   14e00:	4798      	blx	r3
   14e02:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   14e04:	4b11      	ldr	r3, [pc, #68]	; (14e4c <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   14e06:	4798      	blx	r3
		if (kse != NULL)
   14e08:	2800      	cmp	r0, #0
   14e0a:	d006      	beq.n	14e1a <prvTraceStoreKernelCallWithNumericParamOnly+0x6a>
			kse->dts = dts6;
   14e0c:	466b      	mov	r3, sp
   14e0e:	791b      	ldrb	r3, [r3, #4]
			kse->type = (uint8_t)evtcode;
   14e10:	7006      	strb	r6, [r0, #0]
			kse->dts = dts6;
   14e12:	7043      	strb	r3, [r0, #1]
			kse->param = restParam;
   14e14:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
   14e16:	4b0e      	ldr	r3, [pc, #56]	; (14e50 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
   14e18:	4798      	blx	r3
	trcCRITICAL_SECTION_END();
   14e1a:	6823      	ldr	r3, [r4, #0]
   14e1c:	3b01      	subs	r3, #1
   14e1e:	6023      	str	r3, [r4, #0]
   14e20:	f387 8810 	msr	PRIMASK, r7
   14e24:	e7d1      	b.n	14dca <prvTraceStoreKernelCallWithNumericParamOnly+0x1a>
   14e26:	46c0      	nop			; (mov r8, r8)
   14e28:	0001cb79 	.word	0x0001cb79
   14e2c:	200004d0 	.word	0x200004d0
   14e30:	0001cbce 	.word	0x0001cbce
   14e34:	000144a9 	.word	0x000144a9
   14e38:	20000420 	.word	0x20000420
   14e3c:	20000424 	.word	0x20000424
   14e40:	000149c1 	.word	0x000149c1
   14e44:	0000ffff 	.word	0x0000ffff
   14e48:	00014601 	.word	0x00014601
   14e4c:	000144f9 	.word	0x000144f9
   14e50:	000145c9 	.word	0x000145c9

00014e54 <prvTraceStoreTaskswitch>:
{
   14e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14e56:	0007      	movs	r7, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   14e58:	280f      	cmp	r0, #15
   14e5a:	d903      	bls.n	14e64 <prvTraceStoreTaskswitch+0x10>
   14e5c:	4828      	ldr	r0, [pc, #160]	; (14f00 <prvTraceStoreTaskswitch+0xac>)
   14e5e:	4b29      	ldr	r3, [pc, #164]	; (14f04 <prvTraceStoreTaskswitch+0xb0>)
   14e60:	4798      	blx	r3
}
   14e62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   14e64:	f3ef 8310 	mrs	r3, PRIMASK
   14e68:	9300      	str	r3, [sp, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   14e6a:	2301      	movs	r3, #1
   14e6c:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   14e70:	4d25      	ldr	r5, [pc, #148]	; (14f08 <prvTraceStoreTaskswitch+0xb4>)
   14e72:	682b      	ldr	r3, [r5, #0]
   14e74:	3301      	adds	r3, #1
   14e76:	602b      	str	r3, [r5, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   14e78:	4b24      	ldr	r3, [pc, #144]	; (14f0c <prvTraceStoreTaskswitch+0xb8>)
   14e7a:	781b      	ldrb	r3, [r3, #0]
   14e7c:	4283      	cmp	r3, r0
   14e7e:	d038      	beq.n	14ef2 <prvTraceStoreTaskswitch+0x9e>
   14e80:	4e23      	ldr	r6, [pc, #140]	; (14f10 <prvTraceStoreTaskswitch+0xbc>)
   14e82:	6833      	ldr	r3, [r6, #0]
   14e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14e86:	2b00      	cmp	r3, #0
   14e88:	d033      	beq.n	14ef2 <prvTraceStoreTaskswitch+0x9e>
		isPendingContextSwitch = 0;
   14e8a:	2200      	movs	r2, #0
   14e8c:	4b21      	ldr	r3, [pc, #132]	; (14f14 <prvTraceStoreTaskswitch+0xc0>)
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   14e8e:	4822      	ldr	r0, [pc, #136]	; (14f18 <prvTraceStoreTaskswitch+0xc4>)
		isPendingContextSwitch = 0;
   14e90:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   14e92:	4b22      	ldr	r3, [pc, #136]	; (14f1c <prvTraceStoreTaskswitch+0xc8>)
   14e94:	4798      	blx	r3
		handle_of_last_logged_task = task_handle;
   14e96:	4b1d      	ldr	r3, [pc, #116]	; (14f0c <prvTraceStoreTaskswitch+0xb8>)
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   14e98:	9001      	str	r0, [sp, #4]
		handle_of_last_logged_task = task_handle;
   14e9a:	701f      	strb	r7, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   14e9c:	4b20      	ldr	r3, [pc, #128]	; (14f20 <prvTraceStoreTaskswitch+0xcc>)
   14e9e:	4798      	blx	r3
   14ea0:	1e04      	subs	r4, r0, #0
		if (ts != NULL)
   14ea2:	d026      	beq.n	14ef2 <prvTraceStoreTaskswitch+0x9e>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   14ea4:	4b19      	ldr	r3, [pc, #100]	; (14f0c <prvTraceStoreTaskswitch+0xb8>)
   14ea6:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   14ea8:	6833      	ldr	r3, [r6, #0]
   14eaa:	3367      	adds	r3, #103	; 0x67
   14eac:	781b      	ldrb	r3, [r3, #0]
   14eae:	4283      	cmp	r3, r0
   14eb0:	d204      	bcs.n	14ebc <prvTraceStoreTaskswitch+0x68>
   14eb2:	481c      	ldr	r0, [pc, #112]	; (14f24 <prvTraceStoreTaskswitch+0xd0>)
   14eb4:	4b13      	ldr	r3, [pc, #76]	; (14f04 <prvTraceStoreTaskswitch+0xb0>)
   14eb6:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
   14eb8:	2306      	movs	r3, #6
   14eba:	e00d      	b.n	14ed8 <prvTraceStoreTaskswitch+0x84>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   14ebc:	4b1a      	ldr	r3, [pc, #104]	; (14f28 <prvTraceStoreTaskswitch+0xd4>)
   14ebe:	2103      	movs	r1, #3
   14ec0:	4798      	blx	r3
   14ec2:	6833      	ldr	r3, [r6, #0]
   14ec4:	001a      	movs	r2, r3
   14ec6:	3273      	adds	r2, #115	; 0x73
   14ec8:	7812      	ldrb	r2, [r2, #0]
   14eca:	181b      	adds	r3, r3, r0
   14ecc:	189b      	adds	r3, r3, r2
   14ece:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   14ed0:	781b      	ldrb	r3, [r3, #0]
   14ed2:	2b01      	cmp	r3, #1
   14ed4:	d1f0      	bne.n	14eb8 <prvTraceStoreTaskswitch+0x64>
				ts->type = TS_TASK_RESUME;
   14ed6:	3306      	adds	r3, #6
				ts->type = TS_TASK_BEGIN;
   14ed8:	7023      	strb	r3, [r4, #0]
			ts->dts = dts3;
   14eda:	466b      	mov	r3, sp
   14edc:	889b      	ldrh	r3, [r3, #4]
			ts->objHandle = hnd8;
   14ede:	7067      	strb	r7, [r4, #1]
			ts->dts = dts3;
   14ee0:	8063      	strh	r3, [r4, #2]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
   14ee2:	4b0a      	ldr	r3, [pc, #40]	; (14f0c <prvTraceStoreTaskswitch+0xb8>)
   14ee4:	2201      	movs	r2, #1
   14ee6:	7819      	ldrb	r1, [r3, #0]
   14ee8:	2003      	movs	r0, #3
   14eea:	4b10      	ldr	r3, [pc, #64]	; (14f2c <prvTraceStoreTaskswitch+0xd8>)
   14eec:	4798      	blx	r3
			prvTraceUpdateCounters();
   14eee:	4b10      	ldr	r3, [pc, #64]	; (14f30 <prvTraceStoreTaskswitch+0xdc>)
   14ef0:	4798      	blx	r3
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   14ef2:	682b      	ldr	r3, [r5, #0]
   14ef4:	3b01      	subs	r3, #1
   14ef6:	602b      	str	r3, [r5, #0]
   14ef8:	9b00      	ldr	r3, [sp, #0]
   14efa:	f383 8810 	msr	PRIMASK, r3
   14efe:	e7b0      	b.n	14e62 <prvTraceStoreTaskswitch+0xe>
   14f00:	0001cd89 	.word	0x0001cd89
   14f04:	000144a9 	.word	0x000144a9
   14f08:	200004d0 	.word	0x200004d0
   14f0c:	20000424 	.word	0x20000424
   14f10:	20000420 	.word	0x20000420
   14f14:	2000042c 	.word	0x2000042c
   14f18:	0000ffff 	.word	0x0000ffff
   14f1c:	000149c1 	.word	0x000149c1
   14f20:	000144f9 	.word	0x000144f9
   14f24:	0001cdce 	.word	0x0001cdce
   14f28:	00014631 	.word	0x00014631
   14f2c:	0001474d 	.word	0x0001474d
   14f30:	000145c9 	.word	0x000145c9

00014f34 <uiTraceStart>:
{
   14f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
   14f36:	4e1e      	ldr	r6, [pc, #120]	; (14fb0 <uiTraceStart+0x7c>)
   14f38:	6834      	ldr	r4, [r6, #0]
   14f3a:	2c00      	cmp	r4, #0
   14f3c:	d104      	bne.n	14f48 <uiTraceStart+0x14>
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   14f3e:	481d      	ldr	r0, [pc, #116]	; (14fb4 <uiTraceStart+0x80>)
   14f40:	4b1d      	ldr	r3, [pc, #116]	; (14fb8 <uiTraceStart+0x84>)
   14f42:	4798      	blx	r3
   14f44:	0020      	movs	r0, r4
}
   14f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (RecorderDataPtr->recorderActive == 1)
   14f48:	6b20      	ldr	r0, [r4, #48]	; 0x30
   14f4a:	2801      	cmp	r0, #1
   14f4c:	d0fb      	beq.n	14f46 <uiTraceStart+0x12>
	if (traceErrorMessage == NULL)
   14f4e:	4b1b      	ldr	r3, [pc, #108]	; (14fbc <uiTraceStart+0x88>)
   14f50:	681b      	ldr	r3, [r3, #0]
   14f52:	9301      	str	r3, [sp, #4]
   14f54:	2b00      	cmp	r3, #0
   14f56:	d127      	bne.n	14fa8 <uiTraceStart+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   14f58:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   14f5c:	2201      	movs	r2, #1
   14f5e:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
   14f62:	4d17      	ldr	r5, [pc, #92]	; (14fc0 <uiTraceStart+0x8c>)
   14f64:	682b      	ldr	r3, [r5, #0]
   14f66:	189b      	adds	r3, r3, r2
   14f68:	602b      	str	r3, [r5, #0]
		RecorderDataPtr->recorderActive = 1;
   14f6a:	6833      	ldr	r3, [r6, #0]
   14f6c:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   14f6e:	4b15      	ldr	r3, [pc, #84]	; (14fc4 <uiTraceStart+0x90>)
   14f70:	4798      	blx	r3
   14f72:	4b15      	ldr	r3, [pc, #84]	; (14fc8 <uiTraceStart+0x94>)
   14f74:	4798      	blx	r3
   14f76:	b2c4      	uxtb	r4, r0
		if (handle == 0)
   14f78:	2c00      	cmp	r4, #0
   14f7a:	d10d      	bne.n	14f98 <uiTraceStart+0x64>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   14f7c:	4b13      	ldr	r3, [pc, #76]	; (14fcc <uiTraceStart+0x98>)
   14f7e:	2003      	movs	r0, #3
   14f80:	4798      	blx	r3
   14f82:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   14f84:	0001      	movs	r1, r0
   14f86:	4a12      	ldr	r2, [pc, #72]	; (14fd0 <uiTraceStart+0x9c>)
   14f88:	2003      	movs	r0, #3
   14f8a:	4b12      	ldr	r3, [pc, #72]	; (14fd4 <uiTraceStart+0xa0>)
   14f8c:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   14f8e:	9a01      	ldr	r2, [sp, #4]
   14f90:	0021      	movs	r1, r4
   14f92:	2003      	movs	r0, #3
   14f94:	4b10      	ldr	r3, [pc, #64]	; (14fd8 <uiTraceStart+0xa4>)
   14f96:	4798      	blx	r3
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   14f98:	0020      	movs	r0, r4
   14f9a:	4b10      	ldr	r3, [pc, #64]	; (14fdc <uiTraceStart+0xa8>)
   14f9c:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   14f9e:	682b      	ldr	r3, [r5, #0]
   14fa0:	3b01      	subs	r3, #1
   14fa2:	602b      	str	r3, [r5, #0]
   14fa4:	f387 8810 	msr	PRIMASK, r7
	return RecorderDataPtr->recorderActive;
   14fa8:	6833      	ldr	r3, [r6, #0]
   14faa:	6b18      	ldr	r0, [r3, #48]	; 0x30
   14fac:	e7cb      	b.n	14f46 <uiTraceStart+0x12>
   14fae:	46c0      	nop			; (mov r8, r8)
   14fb0:	20000420 	.word	0x20000420
   14fb4:	0001ce84 	.word	0x0001ce84
   14fb8:	000144a9 	.word	0x000144a9
   14fbc:	200004d8 	.word	0x200004d8
   14fc0:	200004d0 	.word	0x200004d0
   14fc4:	00014125 	.word	0x00014125
   14fc8:	00013f99 	.word	0x00013f99
   14fcc:	000147e1 	.word	0x000147e1
   14fd0:	0001cec8 	.word	0x0001cec8
   14fd4:	000148a9 	.word	0x000148a9
   14fd8:	000146a5 	.word	0x000146a5
   14fdc:	00014e55 	.word	0x00014e55

00014fe0 <vTraceStart>:
{
   14fe0:	b510      	push	{r4, lr}
	(void)uiTraceStart();
   14fe2:	4b01      	ldr	r3, [pc, #4]	; (14fe8 <vTraceStart+0x8>)
   14fe4:	4798      	blx	r3
}
   14fe6:	bd10      	pop	{r4, pc}
   14fe8:	00014f35 	.word	0x00014f35

00014fec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   14fec:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   14fee:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   14ff0:	3308      	adds	r3, #8
   14ff2:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   14ff4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   14ff6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   14ff8:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   14ffa:	4252      	negs	r2, r2
   14ffc:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   14ffe:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   15000:	4770      	bx	lr

00015002 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   15002:	2300      	movs	r3, #0
   15004:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   15006:	4770      	bx	lr

00015008 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
   15008:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1500a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1500c:	689a      	ldr	r2, [r3, #8]
   1500e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   15010:	689a      	ldr	r2, [r3, #8]
   15012:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
   15014:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   15016:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   15018:	6803      	ldr	r3, [r0, #0]
   1501a:	3301      	adds	r3, #1
   1501c:	6003      	str	r3, [r0, #0]
}
   1501e:	4770      	bx	lr

00015020 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   15020:	0003      	movs	r3, r0
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   15022:	680a      	ldr	r2, [r1, #0]
{
   15024:	b530      	push	{r4, r5, lr}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   15026:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
   15028:	1c54      	adds	r4, r2, #1
   1502a:	d10b      	bne.n	15044 <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
   1502c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1502e:	685a      	ldr	r2, [r3, #4]
   15030:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   15032:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   15034:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
   15036:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   15038:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   1503a:	6803      	ldr	r3, [r0, #0]
   1503c:	3301      	adds	r3, #1
   1503e:	6003      	str	r3, [r0, #0]
}
   15040:	bd30      	pop	{r4, r5, pc}
   15042:	0023      	movs	r3, r4
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   15044:	685c      	ldr	r4, [r3, #4]
   15046:	6825      	ldr	r5, [r4, #0]
   15048:	42aa      	cmp	r2, r5
   1504a:	d2fa      	bcs.n	15042 <vListInsert+0x22>
   1504c:	e7ef      	b.n	1502e <vListInsert+0xe>

0001504e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1504e:	6842      	ldr	r2, [r0, #4]
   15050:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   15052:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   15054:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   15056:	6882      	ldr	r2, [r0, #8]
   15058:	6841      	ldr	r1, [r0, #4]
   1505a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1505c:	685a      	ldr	r2, [r3, #4]
   1505e:	4290      	cmp	r0, r2
   15060:	d101      	bne.n	15066 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   15062:	6882      	ldr	r2, [r0, #8]
   15064:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   15066:	2200      	movs	r2, #0
   15068:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   1506a:	681a      	ldr	r2, [r3, #0]
   1506c:	3a01      	subs	r2, #1
   1506e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   15070:	6818      	ldr	r0, [r3, #0]
}
   15072:	4770      	bx	lr

00015074 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
   15074:	2300      	movs	r3, #0
{
   15076:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
   15078:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1507a:	4b06      	ldr	r3, [pc, #24]	; (15094 <prvTaskExitError+0x20>)
   1507c:	681b      	ldr	r3, [r3, #0]
   1507e:	3301      	adds	r3, #1
   15080:	d001      	beq.n	15086 <prvTaskExitError+0x12>
   15082:	b672      	cpsid	i
   15084:	e7fe      	b.n	15084 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
   15086:	b672      	cpsid	i
	while( ulDummy == 0 )
   15088:	9b01      	ldr	r3, [sp, #4]
   1508a:	2b00      	cmp	r3, #0
   1508c:	d0fc      	beq.n	15088 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1508e:	b002      	add	sp, #8
   15090:	4770      	bx	lr
   15092:	46c0      	nop			; (mov r8, r8)
   15094:	2000005c 	.word	0x2000005c
	...

000150a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   150a0:	4a0b      	ldr	r2, [pc, #44]	; (150d0 <pxCurrentTCBConst2>)
   150a2:	6813      	ldr	r3, [r2, #0]
   150a4:	6818      	ldr	r0, [r3, #0]
   150a6:	3020      	adds	r0, #32
   150a8:	f380 8809 	msr	PSP, r0
   150ac:	2002      	movs	r0, #2
   150ae:	f380 8814 	msr	CONTROL, r0
   150b2:	f3bf 8f6f 	isb	sy
   150b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   150b8:	46ae      	mov	lr, r5
   150ba:	bc08      	pop	{r3}
   150bc:	bc04      	pop	{r2}
   150be:	b662      	cpsie	i
   150c0:	4718      	bx	r3
   150c2:	46c0      	nop			; (mov r8, r8)
   150c4:	46c0      	nop			; (mov r8, r8)
   150c6:	46c0      	nop			; (mov r8, r8)
   150c8:	46c0      	nop			; (mov r8, r8)
   150ca:	46c0      	nop			; (mov r8, r8)
   150cc:	46c0      	nop			; (mov r8, r8)
   150ce:	46c0      	nop			; (mov r8, r8)

000150d0 <pxCurrentTCBConst2>:
   150d0:	200033d4 	.word	0x200033d4

000150d4 <pxPortInitialiseStack>:
{
   150d4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   150d6:	2480      	movs	r4, #128	; 0x80
   150d8:	1f03      	subs	r3, r0, #4
   150da:	0464      	lsls	r4, r4, #17
   150dc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   150de:	3b04      	subs	r3, #4
   150e0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   150e2:	4903      	ldr	r1, [pc, #12]	; (150f0 <pxPortInitialiseStack+0x1c>)
   150e4:	3b04      	subs	r3, #4
   150e6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   150e8:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
   150ea:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   150ec:	601a      	str	r2, [r3, #0]
}
   150ee:	bd10      	pop	{r4, pc}
   150f0:	00015075 	.word	0x00015075

000150f4 <SVC_Handler>:
}
   150f4:	4770      	bx	lr
	...

000150f8 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   150f8:	22ff      	movs	r2, #255	; 0xff
{
   150fa:	b570      	push	{r4, r5, r6, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   150fc:	4b12      	ldr	r3, [pc, #72]	; (15148 <xPortStartScheduler+0x50>)
   150fe:	0412      	lsls	r2, r2, #16
   15100:	6819      	ldr	r1, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   15102:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   15104:	430a      	orrs	r2, r1
   15106:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   15108:	22ff      	movs	r2, #255	; 0xff
   1510a:	6819      	ldr	r1, [r3, #0]
   1510c:	0612      	lsls	r2, r2, #24
   1510e:	430a      	orrs	r2, r1
   15110:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   15112:	4d0e      	ldr	r5, [pc, #56]	; (1514c <xPortStartScheduler+0x54>)
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   15114:	4b0e      	ldr	r3, [pc, #56]	; (15150 <xPortStartScheduler+0x58>)
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   15116:	602c      	str	r4, [r5, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   15118:	0020      	movs	r0, r4
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1511a:	601c      	str	r4, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1511c:	4b0d      	ldr	r3, [pc, #52]	; (15154 <xPortStartScheduler+0x5c>)
   1511e:	4798      	blx	r3
   15120:	21fa      	movs	r1, #250	; 0xfa
   15122:	4b0d      	ldr	r3, [pc, #52]	; (15158 <xPortStartScheduler+0x60>)
   15124:	0089      	lsls	r1, r1, #2
   15126:	4798      	blx	r3
   15128:	4b0c      	ldr	r3, [pc, #48]	; (1515c <xPortStartScheduler+0x64>)
   1512a:	3801      	subs	r0, #1
   1512c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1512e:	2307      	movs	r3, #7
   15130:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
   15132:	4b0b      	ldr	r3, [pc, #44]	; (15160 <xPortStartScheduler+0x68>)
   15134:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
   15136:	4b0b      	ldr	r3, [pc, #44]	; (15164 <xPortStartScheduler+0x6c>)
   15138:	4798      	blx	r3
	vTaskSwitchContext();
   1513a:	4b0b      	ldr	r3, [pc, #44]	; (15168 <xPortStartScheduler+0x70>)
   1513c:	4798      	blx	r3
	prvTaskExitError();
   1513e:	4b0b      	ldr	r3, [pc, #44]	; (1516c <xPortStartScheduler+0x74>)
   15140:	4798      	blx	r3
}
   15142:	0020      	movs	r0, r4
   15144:	bd70      	pop	{r4, r5, r6, pc}
   15146:	46c0      	nop			; (mov r8, r8)
   15148:	e000ed20 	.word	0xe000ed20
   1514c:	e000e010 	.word	0xe000e010
   15150:	e000e018 	.word	0xe000e018
   15154:	0001873d 	.word	0x0001873d
   15158:	00018e25 	.word	0x00018e25
   1515c:	e000e014 	.word	0xe000e014
   15160:	2000005c 	.word	0x2000005c
   15164:	000150a1 	.word	0x000150a1
   15168:	000169d9 	.word	0x000169d9
   1516c:	00015075 	.word	0x00015075

00015170 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   15170:	2280      	movs	r2, #128	; 0x80
   15172:	4b02      	ldr	r3, [pc, #8]	; (1517c <vPortYield+0xc>)
   15174:	0552      	lsls	r2, r2, #21
   15176:	601a      	str	r2, [r3, #0]
}
   15178:	4770      	bx	lr
   1517a:	46c0      	nop			; (mov r8, r8)
   1517c:	e000ed04 	.word	0xe000ed04

00015180 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
   15180:	b672      	cpsid	i
    uxCriticalNesting++;
   15182:	4a04      	ldr	r2, [pc, #16]	; (15194 <vPortEnterCritical+0x14>)
   15184:	6813      	ldr	r3, [r2, #0]
   15186:	3301      	adds	r3, #1
   15188:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
   1518a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1518e:	f3bf 8f6f 	isb	sy
}
   15192:	4770      	bx	lr
   15194:	2000005c 	.word	0x2000005c

00015198 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
   15198:	4a05      	ldr	r2, [pc, #20]	; (151b0 <vPortExitCritical+0x18>)
   1519a:	6813      	ldr	r3, [r2, #0]
   1519c:	2b00      	cmp	r3, #0
   1519e:	d101      	bne.n	151a4 <vPortExitCritical+0xc>
   151a0:	b672      	cpsid	i
   151a2:	e7fe      	b.n	151a2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
   151a4:	3b01      	subs	r3, #1
   151a6:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
   151a8:	2b00      	cmp	r3, #0
   151aa:	d100      	bne.n	151ae <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
   151ac:	b662      	cpsie	i
}
   151ae:	4770      	bx	lr
   151b0:	2000005c 	.word	0x2000005c

000151b4 <ulSetInterruptMaskFromISR>:
	__asm volatile(
   151b4:	f3ef 8010 	mrs	r0, PRIMASK
   151b8:	b672      	cpsid	i
   151ba:	4770      	bx	lr

000151bc <vClearInterruptMaskFromISR>:
	__asm volatile(
   151bc:	f380 8810 	msr	PRIMASK, r0
   151c0:	4770      	bx	lr
	...

000151d0 <PendSV_Handler>:
	__asm volatile
   151d0:	f3ef 8009 	mrs	r0, PSP
   151d4:	4b0e      	ldr	r3, [pc, #56]	; (15210 <pxCurrentTCBConst>)
   151d6:	681a      	ldr	r2, [r3, #0]
   151d8:	3820      	subs	r0, #32
   151da:	6010      	str	r0, [r2, #0]
   151dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   151de:	4644      	mov	r4, r8
   151e0:	464d      	mov	r5, r9
   151e2:	4656      	mov	r6, sl
   151e4:	465f      	mov	r7, fp
   151e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   151e8:	b508      	push	{r3, lr}
   151ea:	b672      	cpsid	i
   151ec:	f001 fbf4 	bl	169d8 <vTaskSwitchContext>
   151f0:	b662      	cpsie	i
   151f2:	bc0c      	pop	{r2, r3}
   151f4:	6811      	ldr	r1, [r2, #0]
   151f6:	6808      	ldr	r0, [r1, #0]
   151f8:	3010      	adds	r0, #16
   151fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   151fc:	46a0      	mov	r8, r4
   151fe:	46a9      	mov	r9, r5
   15200:	46b2      	mov	sl, r6
   15202:	46bb      	mov	fp, r7
   15204:	f380 8809 	msr	PSP, r0
   15208:	3820      	subs	r0, #32
   1520a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1520c:	4718      	bx	r3
   1520e:	46c0      	nop			; (mov r8, r8)

00015210 <pxCurrentTCBConst>:
   15210:	200033d4 	.word	0x200033d4

00015214 <SysTick_Handler>:
{
   15214:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   15216:	4b07      	ldr	r3, [pc, #28]	; (15234 <SysTick_Handler+0x20>)
   15218:	4798      	blx	r3
		if( xTaskIncrementTick() != pdFALSE )
   1521a:	4b07      	ldr	r3, [pc, #28]	; (15238 <SysTick_Handler+0x24>)
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1521c:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
   1521e:	4798      	blx	r3
   15220:	2800      	cmp	r0, #0
   15222:	d003      	beq.n	1522c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   15224:	2280      	movs	r2, #128	; 0x80
   15226:	4b05      	ldr	r3, [pc, #20]	; (1523c <SysTick_Handler+0x28>)
   15228:	0552      	lsls	r2, r2, #21
   1522a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1522c:	0020      	movs	r0, r4
   1522e:	4b04      	ldr	r3, [pc, #16]	; (15240 <SysTick_Handler+0x2c>)
   15230:	4798      	blx	r3
}
   15232:	bd10      	pop	{r4, pc}
   15234:	000151b5 	.word	0x000151b5
   15238:	000166bd 	.word	0x000166bd
   1523c:	e000ed04 	.word	0xe000ed04
   15240:	000151bd 	.word	0x000151bd

00015244 <pvPortMalloc>:
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   15244:	2307      	movs	r3, #7
{
   15246:	b570      	push	{r4, r5, r6, lr}
   15248:	0004      	movs	r4, r0
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1524a:	4218      	tst	r0, r3
   1524c:	d001      	beq.n	15252 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1524e:	439c      	bics	r4, r3
   15250:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
   15252:	4b15      	ldr	r3, [pc, #84]	; (152a8 <pvPortMalloc+0x64>)
   15254:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   15256:	4915      	ldr	r1, [pc, #84]	; (152ac <pvPortMalloc+0x68>)
   15258:	680b      	ldr	r3, [r1, #0]
   1525a:	2b00      	cmp	r3, #0
   1525c:	d104      	bne.n	15268 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1525e:	2207      	movs	r2, #7
   15260:	4b13      	ldr	r3, [pc, #76]	; (152b0 <pvPortMalloc+0x6c>)
   15262:	3308      	adds	r3, #8
   15264:	4393      	bics	r3, r2
   15266:	600b      	str	r3, [r1, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   15268:	4812      	ldr	r0, [pc, #72]	; (152b4 <pvPortMalloc+0x70>)
   1526a:	4d13      	ldr	r5, [pc, #76]	; (152b8 <pvPortMalloc+0x74>)
   1526c:	6802      	ldr	r2, [r0, #0]
   1526e:	4e13      	ldr	r6, [pc, #76]	; (152bc <pvPortMalloc+0x78>)
   15270:	18a3      	adds	r3, r4, r2
   15272:	42ab      	cmp	r3, r5
   15274:	d812      	bhi.n	1529c <pvPortMalloc+0x58>
   15276:	429a      	cmp	r2, r3
   15278:	d210      	bcs.n	1529c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1527a:	680d      	ldr	r5, [r1, #0]
			xNextFreeByte += xWantedSize;
   1527c:	6003      	str	r3, [r0, #0]
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1527e:	18ad      	adds	r5, r5, r2
		}

		traceMALLOC( pvReturn, xWantedSize );
   15280:	2d00      	cmp	r5, #0
   15282:	d00b      	beq.n	1529c <pvPortMalloc+0x58>
   15284:	0022      	movs	r2, r4
   15286:	0029      	movs	r1, r5
   15288:	2094      	movs	r0, #148	; 0x94
   1528a:	47b0      	blx	r6
	}
	( void ) xTaskResumeAll();
   1528c:	4b0c      	ldr	r3, [pc, #48]	; (152c0 <pvPortMalloc+0x7c>)
   1528e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   15290:	2d00      	cmp	r5, #0
   15292:	d101      	bne.n	15298 <pvPortMalloc+0x54>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   15294:	4b0b      	ldr	r3, [pc, #44]	; (152c4 <pvPortMalloc+0x80>)
   15296:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   15298:	0028      	movs	r0, r5
   1529a:	bd70      	pop	{r4, r5, r6, pc}
		traceMALLOC( pvReturn, xWantedSize );
   1529c:	0022      	movs	r2, r4
   1529e:	2100      	movs	r1, #0
   152a0:	20e8      	movs	r0, #232	; 0xe8
   152a2:	47b0      	blx	r6
   152a4:	2500      	movs	r5, #0
   152a6:	e7f1      	b.n	1528c <pvPortMalloc+0x48>
   152a8:	000166a1 	.word	0x000166a1
   152ac:	200004ec 	.word	0x200004ec
   152b0:	200004f0 	.word	0x200004f0
   152b4:	200033d0 	.word	0x200033d0
   152b8:	00002ed7 	.word	0x00002ed7
   152bc:	00014b6d 	.word	0x00014b6d
   152c0:	00016829 	.word	0x00016829
   152c4:	00018cb9 	.word	0x00018cb9

000152c8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   152c8:	2800      	cmp	r0, #0
   152ca:	d001      	beq.n	152d0 <vPortFree+0x8>
   152cc:	b672      	cpsid	i
   152ce:	e7fe      	b.n	152ce <vPortFree+0x6>
}
   152d0:	4770      	bx	lr
	...

000152d4 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   152d4:	4b02      	ldr	r3, [pc, #8]	; (152e0 <xPortGetFreeHeapSize+0xc>)
   152d6:	4803      	ldr	r0, [pc, #12]	; (152e4 <xPortGetFreeHeapSize+0x10>)
   152d8:	681b      	ldr	r3, [r3, #0]
   152da:	1ac0      	subs	r0, r0, r3
}
   152dc:	4770      	bx	lr
   152de:	46c0      	nop			; (mov r8, r8)
   152e0:	200033d0 	.word	0x200033d0
   152e4:	00002ed8 	.word	0x00002ed8

000152e8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   152e8:	b510      	push	{r4, lr}
   152ea:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
   152ec:	4b03      	ldr	r3, [pc, #12]	; (152fc <prvIsQueueEmpty+0x14>)
   152ee:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   152f0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
   152f2:	4b03      	ldr	r3, [pc, #12]	; (15300 <prvIsQueueEmpty+0x18>)
   152f4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   152f6:	4260      	negs	r0, r4
   152f8:	4160      	adcs	r0, r4

	return xReturn;
}
   152fa:	bd10      	pop	{r4, pc}
   152fc:	00015181 	.word	0x00015181
   15300:	00015199 	.word	0x00015199

00015304 <prvCopyDataToQueue>:
{
   15304:	b570      	push	{r4, r5, r6, lr}
   15306:	0016      	movs	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   15308:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
   1530a:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1530c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1530e:	2a00      	cmp	r2, #0
   15310:	d10a      	bne.n	15328 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   15312:	6806      	ldr	r6, [r0, #0]
BaseType_t xReturn = pdFALSE;
   15314:	0010      	movs	r0, r2
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   15316:	2e00      	cmp	r6, #0
   15318:	d103      	bne.n	15322 <prvCopyDataToQueue+0x1e>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1531a:	6860      	ldr	r0, [r4, #4]
   1531c:	4b15      	ldr	r3, [pc, #84]	; (15374 <prvCopyDataToQueue+0x70>)
   1531e:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   15320:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   15322:	3501      	adds	r5, #1
   15324:	63a5      	str	r5, [r4, #56]	; 0x38
}
   15326:	bd70      	pop	{r4, r5, r6, pc}
   15328:	4b13      	ldr	r3, [pc, #76]	; (15378 <prvCopyDataToQueue+0x74>)
	else if( xPosition == queueSEND_TO_BACK )
   1532a:	2e00      	cmp	r6, #0
   1532c:	d10c      	bne.n	15348 <prvCopyDataToQueue+0x44>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1532e:	6880      	ldr	r0, [r0, #8]
   15330:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   15332:	68a3      	ldr	r3, [r4, #8]
   15334:	6c22      	ldr	r2, [r4, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
   15336:	0030      	movs	r0, r6
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   15338:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1533a:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1533c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1533e:	4293      	cmp	r3, r2
   15340:	d3ef      	bcc.n	15322 <prvCopyDataToQueue+0x1e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   15342:	6823      	ldr	r3, [r4, #0]
   15344:	60a3      	str	r3, [r4, #8]
   15346:	e7ec      	b.n	15322 <prvCopyDataToQueue+0x1e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   15348:	68c0      	ldr	r0, [r0, #12]
   1534a:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1534c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1534e:	68e2      	ldr	r2, [r4, #12]
   15350:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   15352:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   15354:	18d2      	adds	r2, r2, r3
   15356:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   15358:	428a      	cmp	r2, r1
   1535a:	d202      	bcs.n	15362 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1535c:	6862      	ldr	r2, [r4, #4]
   1535e:	18d3      	adds	r3, r2, r3
   15360:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
   15362:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
   15364:	2e02      	cmp	r6, #2
   15366:	d1dc      	bne.n	15322 <prvCopyDataToQueue+0x1e>
				--uxMessagesWaiting;
   15368:	002b      	movs	r3, r5
   1536a:	1e5a      	subs	r2, r3, #1
   1536c:	4193      	sbcs	r3, r2
   1536e:	1aed      	subs	r5, r5, r3
   15370:	e7d7      	b.n	15322 <prvCopyDataToQueue+0x1e>
   15372:	46c0      	nop			; (mov r8, r8)
   15374:	00016f01 	.word	0x00016f01
   15378:	0001b4d9 	.word	0x0001b4d9

0001537c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1537c:	b5f0      	push	{r4, r5, r6, r7, lr}
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1537e:	6c84      	ldr	r4, [r0, #72]	; 0x48
	{
   15380:	b087      	sub	sp, #28
   15382:	9005      	str	r0, [sp, #20]
   15384:	9102      	str	r1, [sp, #8]
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   15386:	2c00      	cmp	r4, #0
   15388:	d101      	bne.n	1538e <prvNotifyQueueSetContainer+0x12>
   1538a:	b672      	cpsid	i
   1538c:	e7fe      	b.n	1538c <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1538e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   15390:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15392:	429a      	cmp	r2, r3
   15394:	d301      	bcc.n	1539a <prvNotifyQueueSetContainer+0x1e>
   15396:	b672      	cpsid	i
   15398:	e7fe      	b.n	15398 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1539a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
   1539c:	2500      	movs	r5, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1539e:	4293      	cmp	r3, r2
   153a0:	d953      	bls.n	1544a <prvNotifyQueueSetContainer+0xce>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   153a2:	0023      	movs	r3, r4
   153a4:	3345      	adds	r3, #69	; 0x45
   153a6:	9303      	str	r3, [sp, #12]
   153a8:	781b      	ldrb	r3, [r3, #0]
   153aa:	b25b      	sxtb	r3, r3
   153ac:	9301      	str	r3, [sp, #4]

			traceQUEUE_SEND( pxQueueSetContainer );
   153ae:	4b2b      	ldr	r3, [pc, #172]	; (1545c <prvNotifyQueueSetContainer+0xe0>)
   153b0:	4798      	blx	r3
   153b2:	4b2b      	ldr	r3, [pc, #172]	; (15460 <prvNotifyQueueSetContainer+0xe4>)
   153b4:	4798      	blx	r3
   153b6:	4e2b      	ldr	r6, [pc, #172]	; (15464 <prvNotifyQueueSetContainer+0xe8>)
   153b8:	4d2b      	ldr	r5, [pc, #172]	; (15468 <prvNotifyQueueSetContainer+0xec>)
   153ba:	8833      	ldrh	r3, [r6, #0]
   153bc:	4203      	tst	r3, r0
   153be:	d01b      	beq.n	153f8 <prvNotifyQueueSetContainer+0x7c>
   153c0:	4b2a      	ldr	r3, [pc, #168]	; (1546c <prvNotifyQueueSetContainer+0xf0>)
   153c2:	0020      	movs	r0, r4
   153c4:	4798      	blx	r3
   153c6:	8833      	ldrh	r3, [r6, #0]
   153c8:	4203      	tst	r3, r0
   153ca:	d015      	beq.n	153f8 <prvNotifyQueueSetContainer+0x7c>
   153cc:	9b02      	ldr	r3, [sp, #8]
   153ce:	2625      	movs	r6, #37	; 0x25
   153d0:	2b00      	cmp	r3, #0
   153d2:	d105      	bne.n	153e0 <prvNotifyQueueSetContainer+0x64>
   153d4:	0020      	movs	r0, r4
   153d6:	47a8      	blx	r5
   153d8:	4b25      	ldr	r3, [pc, #148]	; (15470 <prvNotifyQueueSetContainer+0xf4>)
   153da:	5c1e      	ldrb	r6, [r3, r0]
   153dc:	3620      	adds	r6, #32
   153de:	b2f6      	uxtb	r6, r6
   153e0:	0020      	movs	r0, r4
   153e2:	47a8      	blx	r5
   153e4:	4b22      	ldr	r3, [pc, #136]	; (15470 <prvNotifyQueueSetContainer+0xf4>)
   153e6:	5c1f      	ldrb	r7, [r3, r0]
   153e8:	4b22      	ldr	r3, [pc, #136]	; (15474 <prvNotifyQueueSetContainer+0xf8>)
   153ea:	0020      	movs	r0, r4
   153ec:	4798      	blx	r3
   153ee:	0039      	movs	r1, r7
   153f0:	b2c2      	uxtb	r2, r0
   153f2:	4b21      	ldr	r3, [pc, #132]	; (15478 <prvNotifyQueueSetContainer+0xfc>)
   153f4:	0030      	movs	r0, r6
   153f6:	4798      	blx	r3
   153f8:	0020      	movs	r0, r4
   153fa:	47a8      	blx	r5
   153fc:	4e1c      	ldr	r6, [pc, #112]	; (15470 <prvNotifyQueueSetContainer+0xf4>)
   153fe:	4b1d      	ldr	r3, [pc, #116]	; (15474 <prvNotifyQueueSetContainer+0xf8>)
   15400:	5c37      	ldrb	r7, [r6, r0]
   15402:	0020      	movs	r0, r4
   15404:	4798      	blx	r3
   15406:	b2c3      	uxtb	r3, r0
   15408:	0020      	movs	r0, r4
   1540a:	9304      	str	r3, [sp, #16]
   1540c:	47a8      	blx	r5
   1540e:	5c33      	ldrb	r3, [r6, r0]
   15410:	2200      	movs	r2, #0
   15412:	2b02      	cmp	r3, #2
   15414:	d002      	beq.n	1541c <prvNotifyQueueSetContainer+0xa0>
   15416:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   15418:	3201      	adds	r2, #1
   1541a:	b2d2      	uxtb	r2, r2
   1541c:	9904      	ldr	r1, [sp, #16]
   1541e:	0038      	movs	r0, r7
   15420:	4b16      	ldr	r3, [pc, #88]	; (1547c <prvNotifyQueueSetContainer+0x100>)
   15422:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   15424:	4b16      	ldr	r3, [pc, #88]	; (15480 <prvNotifyQueueSetContainer+0x104>)
   15426:	9a02      	ldr	r2, [sp, #8]
   15428:	a905      	add	r1, sp, #20
   1542a:	0020      	movs	r0, r4
   1542c:	4798      	blx	r3

			if( cTxLock == queueUNLOCKED )
   1542e:	9b01      	ldr	r3, [sp, #4]
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   15430:	0005      	movs	r5, r0
			if( cTxLock == queueUNLOCKED )
   15432:	3301      	adds	r3, #1
   15434:	d10c      	bne.n	15450 <prvNotifyQueueSetContainer+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   15436:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15438:	2b00      	cmp	r3, #0
   1543a:	d006      	beq.n	1544a <prvNotifyQueueSetContainer+0xce>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1543c:	0020      	movs	r0, r4
   1543e:	4b11      	ldr	r3, [pc, #68]	; (15484 <prvNotifyQueueSetContainer+0x108>)
   15440:	3024      	adds	r0, #36	; 0x24
   15442:	4798      	blx	r3
   15444:	2800      	cmp	r0, #0
   15446:	d000      	beq.n	1544a <prvNotifyQueueSetContainer+0xce>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   15448:	2501      	movs	r5, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
   1544a:	0028      	movs	r0, r5
   1544c:	b007      	add	sp, #28
   1544e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   15450:	9b01      	ldr	r3, [sp, #4]
   15452:	9a03      	ldr	r2, [sp, #12]
   15454:	3301      	adds	r3, #1
   15456:	b25b      	sxtb	r3, r3
   15458:	7013      	strb	r3, [r2, #0]
   1545a:	e7f6      	b.n	1544a <prvNotifyQueueSetContainer+0xce>
   1545c:	00014125 	.word	0x00014125
   15460:	00013fa9 	.word	0x00013fa9
   15464:	20000054 	.word	0x20000054
   15468:	00013f8d 	.word	0x00013f8d
   1546c:	00014009 	.word	0x00014009
   15470:	2000004c 	.word	0x2000004c
   15474:	00013ff9 	.word	0x00013ff9
   15478:	00014c41 	.word	0x00014c41
   1547c:	0001474d 	.word	0x0001474d
   15480:	00015305 	.word	0x00015305
   15484:	00016c61 	.word	0x00016c61

00015488 <prvCopyDataFromQueue>:
{
   15488:	0003      	movs	r3, r0
   1548a:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1548c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
   1548e:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   15490:	2a00      	cmp	r2, #0
   15492:	d00a      	beq.n	154aa <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   15494:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   15496:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   15498:	1889      	adds	r1, r1, r2
   1549a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1549c:	42a1      	cmp	r1, r4
   1549e:	d301      	bcc.n	154a4 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   154a0:	6819      	ldr	r1, [r3, #0]
   154a2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   154a4:	68d9      	ldr	r1, [r3, #12]
   154a6:	4b01      	ldr	r3, [pc, #4]	; (154ac <prvCopyDataFromQueue+0x24>)
   154a8:	4798      	blx	r3
}
   154aa:	bd10      	pop	{r4, pc}
   154ac:	0001b4d9 	.word	0x0001b4d9

000154b0 <prvUnlockQueue>:
{
   154b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154b2:	0004      	movs	r4, r0
		int8_t cTxLock = pxQueue->cTxLock;
   154b4:	0026      	movs	r6, r4
	taskENTER_CRITICAL();
   154b6:	4f1c      	ldr	r7, [pc, #112]	; (15528 <prvUnlockQueue+0x78>)
		int8_t cTxLock = pxQueue->cTxLock;
   154b8:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
   154ba:	47b8      	blx	r7
		int8_t cTxLock = pxQueue->cTxLock;
   154bc:	7835      	ldrb	r5, [r6, #0]
   154be:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
   154c0:	2d00      	cmp	r5, #0
   154c2:	dc0e      	bgt.n	154e2 <prvUnlockQueue+0x32>
		pxQueue->cTxLock = queueUNLOCKED;
   154c4:	23ff      	movs	r3, #255	; 0xff
   154c6:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();
   154c8:	4e18      	ldr	r6, [pc, #96]	; (1552c <prvUnlockQueue+0x7c>)
   154ca:	47b0      	blx	r6
	taskENTER_CRITICAL();
   154cc:	47b8      	blx	r7
		int8_t cRxLock = pxQueue->cRxLock;
   154ce:	0027      	movs	r7, r4
   154d0:	3744      	adds	r7, #68	; 0x44
   154d2:	783d      	ldrb	r5, [r7, #0]
   154d4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
   154d6:	2d00      	cmp	r5, #0
   154d8:	dc18      	bgt.n	1550c <prvUnlockQueue+0x5c>
		pxQueue->cRxLock = queueUNLOCKED;
   154da:	23ff      	movs	r3, #255	; 0xff
   154dc:	703b      	strb	r3, [r7, #0]
	taskEXIT_CRITICAL();
   154de:	47b0      	blx	r6
}
   154e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxQueue->pxQueueSetContainer != NULL )
   154e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   154e4:	2b00      	cmp	r3, #0
   154e6:	d009      	beq.n	154fc <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   154e8:	2100      	movs	r1, #0
   154ea:	0020      	movs	r0, r4
   154ec:	4b10      	ldr	r3, [pc, #64]	; (15530 <prvUnlockQueue+0x80>)
   154ee:	4798      	blx	r3
   154f0:	2800      	cmp	r0, #0
   154f2:	d001      	beq.n	154f8 <prvUnlockQueue+0x48>
						vTaskMissedYield();
   154f4:	4b0f      	ldr	r3, [pc, #60]	; (15534 <prvUnlockQueue+0x84>)
   154f6:	4798      	blx	r3
   154f8:	3d01      	subs	r5, #1
   154fa:	e7e0      	b.n	154be <prvUnlockQueue+0xe>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   154fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   154fe:	2b00      	cmp	r3, #0
   15500:	d0e0      	beq.n	154c4 <prvUnlockQueue+0x14>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   15502:	0020      	movs	r0, r4
   15504:	4b0c      	ldr	r3, [pc, #48]	; (15538 <prvUnlockQueue+0x88>)
   15506:	3024      	adds	r0, #36	; 0x24
   15508:	4798      	blx	r3
   1550a:	e7f1      	b.n	154f0 <prvUnlockQueue+0x40>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1550c:	6923      	ldr	r3, [r4, #16]
   1550e:	2b00      	cmp	r3, #0
   15510:	d0e3      	beq.n	154da <prvUnlockQueue+0x2a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   15512:	0020      	movs	r0, r4
   15514:	4b08      	ldr	r3, [pc, #32]	; (15538 <prvUnlockQueue+0x88>)
   15516:	3010      	adds	r0, #16
   15518:	4798      	blx	r3
   1551a:	2800      	cmp	r0, #0
   1551c:	d001      	beq.n	15522 <prvUnlockQueue+0x72>
					vTaskMissedYield();
   1551e:	4b05      	ldr	r3, [pc, #20]	; (15534 <prvUnlockQueue+0x84>)
   15520:	4798      	blx	r3
   15522:	3d01      	subs	r5, #1
   15524:	e7d6      	b.n	154d4 <prvUnlockQueue+0x24>
   15526:	46c0      	nop			; (mov r8, r8)
   15528:	00015181 	.word	0x00015181
   1552c:	00015199 	.word	0x00015199
   15530:	0001537d 	.word	0x0001537d
   15534:	00016d91 	.word	0x00016d91
   15538:	00016c61 	.word	0x00016c61

0001553c <xQueueGenericReset>:
{
   1553c:	b570      	push	{r4, r5, r6, lr}
   1553e:	0004      	movs	r4, r0
   15540:	000d      	movs	r5, r1
	configASSERT( pxQueue );
   15542:	2800      	cmp	r0, #0
   15544:	d101      	bne.n	1554a <xQueueGenericReset+0xe>
   15546:	b672      	cpsid	i
   15548:	e7fe      	b.n	15548 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
   1554a:	4b16      	ldr	r3, [pc, #88]	; (155a4 <xQueueGenericReset+0x68>)
   1554c:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1554e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   15550:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15552:	6822      	ldr	r2, [r4, #0]
   15554:	434b      	muls	r3, r1
   15556:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   15558:	1a5b      	subs	r3, r3, r1
   1555a:	18d3      	adds	r3, r2, r3
   1555c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1555e:	0023      	movs	r3, r4
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   15560:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
   15562:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   15564:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
   15566:	22ff      	movs	r2, #255	; 0xff
   15568:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1556a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
   1556c:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
   1556e:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
   15570:	4285      	cmp	r5, r0
   15572:	d10e      	bne.n	15592 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   15574:	6923      	ldr	r3, [r4, #16]
   15576:	4283      	cmp	r3, r0
   15578:	d007      	beq.n	1558a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1557a:	0020      	movs	r0, r4
   1557c:	4b0a      	ldr	r3, [pc, #40]	; (155a8 <xQueueGenericReset+0x6c>)
   1557e:	3010      	adds	r0, #16
   15580:	4798      	blx	r3
   15582:	2800      	cmp	r0, #0
   15584:	d001      	beq.n	1558a <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
   15586:	4b09      	ldr	r3, [pc, #36]	; (155ac <xQueueGenericReset+0x70>)
   15588:	4798      	blx	r3
	taskEXIT_CRITICAL();
   1558a:	4b09      	ldr	r3, [pc, #36]	; (155b0 <xQueueGenericReset+0x74>)
   1558c:	4798      	blx	r3
}
   1558e:	2001      	movs	r0, #1
   15590:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   15592:	0020      	movs	r0, r4
   15594:	4d07      	ldr	r5, [pc, #28]	; (155b4 <xQueueGenericReset+0x78>)
   15596:	3010      	adds	r0, #16
   15598:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1559a:	0020      	movs	r0, r4
   1559c:	3024      	adds	r0, #36	; 0x24
   1559e:	47a8      	blx	r5
   155a0:	e7f3      	b.n	1558a <xQueueGenericReset+0x4e>
   155a2:	46c0      	nop			; (mov r8, r8)
   155a4:	00015181 	.word	0x00015181
   155a8:	00016c61 	.word	0x00016c61
   155ac:	00015171 	.word	0x00015171
   155b0:	00015199 	.word	0x00015199
   155b4:	00014fed 	.word	0x00014fed

000155b8 <xQueueGenericCreate>:
	{
   155b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   155ba:	0006      	movs	r6, r0
   155bc:	000d      	movs	r5, r1
   155be:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   155c0:	2800      	cmp	r0, #0
   155c2:	d101      	bne.n	155c8 <xQueueGenericCreate+0x10>
   155c4:	b672      	cpsid	i
   155c6:	e7fe      	b.n	155c6 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   155c8:	0008      	movs	r0, r1
   155ca:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   155cc:	4b36      	ldr	r3, [pc, #216]	; (156a8 <xQueueGenericCreate+0xf0>)
   155ce:	3054      	adds	r0, #84	; 0x54
   155d0:	4798      	blx	r3
   155d2:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   155d4:	d057      	beq.n	15686 <xQueueGenericCreate+0xce>
	if( uxItemSize == ( UBaseType_t ) 0 )
   155d6:	2d00      	cmp	r5, #0
   155d8:	d151      	bne.n	1567e <xQueueGenericCreate+0xc6>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   155da:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   155dc:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
   155de:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   155e0:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   155e2:	4b32      	ldr	r3, [pc, #200]	; (156ac <xQueueGenericCreate+0xf4>)
   155e4:	0020      	movs	r0, r4
   155e6:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
   155e8:	0023      	movs	r3, r4
   155ea:	3350      	adds	r3, #80	; 0x50
   155ec:	701f      	strb	r7, [r3, #0]
		pxNewQueue->pxQueueSetContainer = NULL;
   155ee:	2300      	movs	r3, #0
	traceQUEUE_CREATE( pxNewQueue );
   155f0:	4e2f      	ldr	r6, [pc, #188]	; (156b0 <xQueueGenericCreate+0xf8>)
		pxNewQueue->pxQueueSetContainer = NULL;
   155f2:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
   155f4:	0020      	movs	r0, r4
   155f6:	47b0      	blx	r6
   155f8:	4d2e      	ldr	r5, [pc, #184]	; (156b4 <xQueueGenericCreate+0xfc>)
   155fa:	4b2f      	ldr	r3, [pc, #188]	; (156b8 <xQueueGenericCreate+0x100>)
   155fc:	5c28      	ldrb	r0, [r5, r0]
   155fe:	4798      	blx	r3
   15600:	4b2e      	ldr	r3, [pc, #184]	; (156bc <xQueueGenericCreate+0x104>)
   15602:	b281      	uxth	r1, r0
   15604:	0020      	movs	r0, r4
   15606:	4798      	blx	r3
   15608:	4b2d      	ldr	r3, [pc, #180]	; (156c0 <xQueueGenericCreate+0x108>)
   1560a:	0020      	movs	r0, r4
   1560c:	8819      	ldrh	r1, [r3, #0]
   1560e:	4b2d      	ldr	r3, [pc, #180]	; (156c4 <xQueueGenericCreate+0x10c>)
   15610:	4798      	blx	r3
   15612:	0020      	movs	r0, r4
   15614:	47b0      	blx	r6
   15616:	4b2c      	ldr	r3, [pc, #176]	; (156c8 <xQueueGenericCreate+0x110>)
   15618:	5c2f      	ldrb	r7, [r5, r0]
   1561a:	0020      	movs	r0, r4
   1561c:	4798      	blx	r3
   1561e:	4b2b      	ldr	r3, [pc, #172]	; (156cc <xQueueGenericCreate+0x114>)
   15620:	b2c1      	uxtb	r1, r0
   15622:	0038      	movs	r0, r7
   15624:	4798      	blx	r3
   15626:	4b2a      	ldr	r3, [pc, #168]	; (156d0 <xQueueGenericCreate+0x118>)
   15628:	4798      	blx	r3
   1562a:	4b2a      	ldr	r3, [pc, #168]	; (156d4 <xQueueGenericCreate+0x11c>)
   1562c:	4798      	blx	r3
   1562e:	4f2a      	ldr	r7, [pc, #168]	; (156d8 <xQueueGenericCreate+0x120>)
   15630:	883b      	ldrh	r3, [r7, #0]
   15632:	4203      	tst	r3, r0
   15634:	d016      	beq.n	15664 <xQueueGenericCreate+0xac>
   15636:	4b29      	ldr	r3, [pc, #164]	; (156dc <xQueueGenericCreate+0x124>)
   15638:	0020      	movs	r0, r4
   1563a:	4798      	blx	r3
   1563c:	883b      	ldrh	r3, [r7, #0]
   1563e:	4203      	tst	r3, r0
   15640:	d010      	beq.n	15664 <xQueueGenericCreate+0xac>
   15642:	0020      	movs	r0, r4
   15644:	47b0      	blx	r6
   15646:	5c2f      	ldrb	r7, [r5, r0]
   15648:	0020      	movs	r0, r4
   1564a:	47b0      	blx	r6
   1564c:	5c2b      	ldrb	r3, [r5, r0]
   1564e:	0020      	movs	r0, r4
   15650:	9301      	str	r3, [sp, #4]
   15652:	4b1d      	ldr	r3, [pc, #116]	; (156c8 <xQueueGenericCreate+0x110>)
   15654:	4798      	blx	r3
   15656:	3718      	adds	r7, #24
   15658:	b2ff      	uxtb	r7, r7
   1565a:	b2c2      	uxtb	r2, r0
   1565c:	9901      	ldr	r1, [sp, #4]
   1565e:	0038      	movs	r0, r7
   15660:	4b1f      	ldr	r3, [pc, #124]	; (156e0 <xQueueGenericCreate+0x128>)
   15662:	4798      	blx	r3
   15664:	0020      	movs	r0, r4
   15666:	47b0      	blx	r6
   15668:	4b17      	ldr	r3, [pc, #92]	; (156c8 <xQueueGenericCreate+0x110>)
   1566a:	5c2d      	ldrb	r5, [r5, r0]
   1566c:	0020      	movs	r0, r4
   1566e:	4798      	blx	r3
   15670:	2200      	movs	r2, #0
   15672:	b2c1      	uxtb	r1, r0
   15674:	4b1b      	ldr	r3, [pc, #108]	; (156e4 <xQueueGenericCreate+0x12c>)
   15676:	0028      	movs	r0, r5
   15678:	4798      	blx	r3
	}
   1567a:	0020      	movs	r0, r4
   1567c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1567e:	0003      	movs	r3, r0
   15680:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   15682:	6003      	str	r3, [r0, #0]
   15684:	e7aa      	b.n	155dc <xQueueGenericCreate+0x24>
			traceQUEUE_CREATE_FAILED( ucQueueType );
   15686:	4b12      	ldr	r3, [pc, #72]	; (156d0 <xQueueGenericCreate+0x118>)
   15688:	4798      	blx	r3
   1568a:	4b12      	ldr	r3, [pc, #72]	; (156d4 <xQueueGenericCreate+0x11c>)
   1568c:	4798      	blx	r3
   1568e:	4b12      	ldr	r3, [pc, #72]	; (156d8 <xQueueGenericCreate+0x120>)
   15690:	881b      	ldrh	r3, [r3, #0]
   15692:	4203      	tst	r3, r0
   15694:	d0f1      	beq.n	1567a <xQueueGenericCreate+0xc2>
   15696:	4b07      	ldr	r3, [pc, #28]	; (156b4 <xQueueGenericCreate+0xfc>)
   15698:	0021      	movs	r1, r4
   1569a:	5dd8      	ldrb	r0, [r3, r7]
   1569c:	4b12      	ldr	r3, [pc, #72]	; (156e8 <xQueueGenericCreate+0x130>)
   1569e:	3040      	adds	r0, #64	; 0x40
   156a0:	b2c0      	uxtb	r0, r0
   156a2:	4798      	blx	r3
   156a4:	e7e9      	b.n	1567a <xQueueGenericCreate+0xc2>
   156a6:	46c0      	nop			; (mov r8, r8)
   156a8:	00015245 	.word	0x00015245
   156ac:	0001553d 	.word	0x0001553d
   156b0:	00013f8d 	.word	0x00013f8d
   156b4:	2000004c 	.word	0x2000004c
   156b8:	000147e1 	.word	0x000147e1
   156bc:	00014019 	.word	0x00014019
   156c0:	20000052 	.word	0x20000052
   156c4:	00014039 	.word	0x00014039
   156c8:	00013ff9 	.word	0x00013ff9
   156cc:	00014681 	.word	0x00014681
   156d0:	00014125 	.word	0x00014125
   156d4:	00013fa9 	.word	0x00013fa9
   156d8:	20000054 	.word	0x20000054
   156dc:	00014009 	.word	0x00014009
   156e0:	00014c41 	.word	0x00014c41
   156e4:	0001474d 	.word	0x0001474d
   156e8:	00014db1 	.word	0x00014db1

000156ec <xQueueGenericSend>:
{
   156ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   156ee:	b087      	sub	sp, #28
   156f0:	1e04      	subs	r4, r0, #0
   156f2:	9101      	str	r1, [sp, #4]
   156f4:	9203      	str	r2, [sp, #12]
   156f6:	9300      	str	r3, [sp, #0]
	configASSERT( pxQueue );
   156f8:	d101      	bne.n	156fe <xQueueGenericSend+0x12>
   156fa:	b672      	cpsid	i
   156fc:	e7fe      	b.n	156fc <xQueueGenericSend+0x10>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   156fe:	9b01      	ldr	r3, [sp, #4]
   15700:	2b00      	cmp	r3, #0
   15702:	d000      	beq.n	15706 <xQueueGenericSend+0x1a>
   15704:	e0fd      	b.n	15902 <xQueueGenericSend+0x216>
   15706:	6c03      	ldr	r3, [r0, #64]	; 0x40
   15708:	2b00      	cmp	r3, #0
   1570a:	d100      	bne.n	1570e <xQueueGenericSend+0x22>
   1570c:	e0f9      	b.n	15902 <xQueueGenericSend+0x216>
   1570e:	b672      	cpsid	i
   15710:	e7fe      	b.n	15710 <xQueueGenericSend+0x24>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   15712:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15714:	2b00      	cmp	r3, #0
   15716:	d100      	bne.n	1571a <xQueueGenericSend+0x2e>
   15718:	e0e0      	b.n	158dc <xQueueGenericSend+0x1f0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1571a:	0020      	movs	r0, r4
   1571c:	4b83      	ldr	r3, [pc, #524]	; (1592c <xQueueGenericSend+0x240>)
   1571e:	3024      	adds	r0, #36	; 0x24
   15720:	4798      	blx	r3
   15722:	e0db      	b.n	158dc <xQueueGenericSend+0x1f0>
				if( xTicksToWait == ( TickType_t ) 0 )
   15724:	9b03      	ldr	r3, [sp, #12]
   15726:	2b00      	cmp	r3, #0
   15728:	d127      	bne.n	1577a <xQueueGenericSend+0x8e>
					taskEXIT_CRITICAL();
   1572a:	4b81      	ldr	r3, [pc, #516]	; (15930 <xQueueGenericSend+0x244>)
   1572c:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
   1572e:	4b81      	ldr	r3, [pc, #516]	; (15934 <xQueueGenericSend+0x248>)
   15730:	4798      	blx	r3
   15732:	4b81      	ldr	r3, [pc, #516]	; (15938 <xQueueGenericSend+0x24c>)
   15734:	4798      	blx	r3
   15736:	4d81      	ldr	r5, [pc, #516]	; (1593c <xQueueGenericSend+0x250>)
   15738:	882b      	ldrh	r3, [r5, #0]
   1573a:	4203      	tst	r3, r0
   1573c:	d01b      	beq.n	15776 <xQueueGenericSend+0x8a>
   1573e:	4b80      	ldr	r3, [pc, #512]	; (15940 <xQueueGenericSend+0x254>)
   15740:	0020      	movs	r0, r4
   15742:	4798      	blx	r3
   15744:	882b      	ldrh	r3, [r5, #0]
   15746:	4203      	tst	r3, r0
   15748:	d015      	beq.n	15776 <xQueueGenericSend+0x8a>
   1574a:	9b00      	ldr	r3, [sp, #0]
   1574c:	4f7d      	ldr	r7, [pc, #500]	; (15944 <xQueueGenericSend+0x258>)
   1574e:	4e7e      	ldr	r6, [pc, #504]	; (15948 <xQueueGenericSend+0x25c>)
   15750:	254d      	movs	r5, #77	; 0x4d
   15752:	2b00      	cmp	r3, #0
   15754:	d104      	bne.n	15760 <xQueueGenericSend+0x74>
   15756:	0020      	movs	r0, r4
   15758:	47b8      	blx	r7
   1575a:	5c35      	ldrb	r5, [r6, r0]
   1575c:	3548      	adds	r5, #72	; 0x48
   1575e:	b2ed      	uxtb	r5, r5
   15760:	0020      	movs	r0, r4
   15762:	47b8      	blx	r7
   15764:	4b79      	ldr	r3, [pc, #484]	; (1594c <xQueueGenericSend+0x260>)
   15766:	5c36      	ldrb	r6, [r6, r0]
   15768:	0020      	movs	r0, r4
   1576a:	4798      	blx	r3
   1576c:	0031      	movs	r1, r6
   1576e:	b2c2      	uxtb	r2, r0
   15770:	4b77      	ldr	r3, [pc, #476]	; (15950 <xQueueGenericSend+0x264>)
   15772:	0028      	movs	r0, r5
   15774:	4798      	blx	r3
			return errQUEUE_FULL;
   15776:	2000      	movs	r0, #0
   15778:	e0b7      	b.n	158ea <xQueueGenericSend+0x1fe>
				else if( xEntryTimeSet == pdFALSE )
   1577a:	2d00      	cmp	r5, #0
   1577c:	d102      	bne.n	15784 <xQueueGenericSend+0x98>
					vTaskInternalSetTimeOutState( &xTimeOut );
   1577e:	a804      	add	r0, sp, #16
   15780:	4b74      	ldr	r3, [pc, #464]	; (15954 <xQueueGenericSend+0x268>)
   15782:	4798      	blx	r3
		taskEXIT_CRITICAL();
   15784:	4b6a      	ldr	r3, [pc, #424]	; (15930 <xQueueGenericSend+0x244>)
   15786:	4798      	blx	r3
		vTaskSuspendAll();
   15788:	4b73      	ldr	r3, [pc, #460]	; (15958 <xQueueGenericSend+0x26c>)
   1578a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1578c:	47b0      	blx	r6
   1578e:	0022      	movs	r2, r4
   15790:	3244      	adds	r2, #68	; 0x44
   15792:	7813      	ldrb	r3, [r2, #0]
   15794:	b25b      	sxtb	r3, r3
   15796:	3301      	adds	r3, #1
   15798:	d101      	bne.n	1579e <xQueueGenericSend+0xb2>
   1579a:	2300      	movs	r3, #0
   1579c:	7013      	strb	r3, [r2, #0]
   1579e:	0022      	movs	r2, r4
   157a0:	3245      	adds	r2, #69	; 0x45
   157a2:	7813      	ldrb	r3, [r2, #0]
   157a4:	b25b      	sxtb	r3, r3
   157a6:	3301      	adds	r3, #1
   157a8:	d101      	bne.n	157ae <xQueueGenericSend+0xc2>
   157aa:	2300      	movs	r3, #0
   157ac:	7013      	strb	r3, [r2, #0]
   157ae:	4b60      	ldr	r3, [pc, #384]	; (15930 <xQueueGenericSend+0x244>)
   157b0:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   157b2:	a903      	add	r1, sp, #12
   157b4:	a804      	add	r0, sp, #16
   157b6:	4b69      	ldr	r3, [pc, #420]	; (1595c <xQueueGenericSend+0x270>)
   157b8:	4798      	blx	r3
   157ba:	4f69      	ldr	r7, [pc, #420]	; (15960 <xQueueGenericSend+0x274>)
   157bc:	2800      	cmp	r0, #0
   157be:	d000      	beq.n	157c2 <xQueueGenericSend+0xd6>
   157c0:	e09a      	b.n	158f8 <xQueueGenericSend+0x20c>
	taskENTER_CRITICAL();
   157c2:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   157c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   157c6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   157c8:	4b59      	ldr	r3, [pc, #356]	; (15930 <xQueueGenericSend+0x244>)
   157ca:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   157cc:	42ae      	cmp	r6, r5
   157ce:	d000      	beq.n	157d2 <xQueueGenericSend+0xe6>
   157d0:	e08d      	b.n	158ee <xQueueGenericSend+0x202>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   157d2:	4b58      	ldr	r3, [pc, #352]	; (15934 <xQueueGenericSend+0x248>)
   157d4:	4798      	blx	r3
   157d6:	4b58      	ldr	r3, [pc, #352]	; (15938 <xQueueGenericSend+0x24c>)
   157d8:	4798      	blx	r3
   157da:	4d58      	ldr	r5, [pc, #352]	; (1593c <xQueueGenericSend+0x250>)
   157dc:	882b      	ldrh	r3, [r5, #0]
   157de:	4203      	tst	r3, r0
   157e0:	d01c      	beq.n	1581c <xQueueGenericSend+0x130>
   157e2:	4b57      	ldr	r3, [pc, #348]	; (15940 <xQueueGenericSend+0x254>)
   157e4:	0020      	movs	r0, r4
   157e6:	4798      	blx	r3
   157e8:	882b      	ldrh	r3, [r5, #0]
   157ea:	4203      	tst	r3, r0
   157ec:	d016      	beq.n	1581c <xQueueGenericSend+0x130>
   157ee:	9b00      	ldr	r3, [sp, #0]
   157f0:	4e54      	ldr	r6, [pc, #336]	; (15944 <xQueueGenericSend+0x258>)
   157f2:	2575      	movs	r5, #117	; 0x75
   157f4:	2b00      	cmp	r3, #0
   157f6:	d105      	bne.n	15804 <xQueueGenericSend+0x118>
   157f8:	0020      	movs	r0, r4
   157fa:	47b0      	blx	r6
   157fc:	4b52      	ldr	r3, [pc, #328]	; (15948 <xQueueGenericSend+0x25c>)
   157fe:	5c1d      	ldrb	r5, [r3, r0]
   15800:	3570      	adds	r5, #112	; 0x70
   15802:	b2ed      	uxtb	r5, r5
   15804:	0020      	movs	r0, r4
   15806:	47b0      	blx	r6
   15808:	4b4f      	ldr	r3, [pc, #316]	; (15948 <xQueueGenericSend+0x25c>)
   1580a:	5c1e      	ldrb	r6, [r3, r0]
   1580c:	4b4f      	ldr	r3, [pc, #316]	; (1594c <xQueueGenericSend+0x260>)
   1580e:	0020      	movs	r0, r4
   15810:	4798      	blx	r3
   15812:	0031      	movs	r1, r6
   15814:	b2c2      	uxtb	r2, r0
   15816:	4b4e      	ldr	r3, [pc, #312]	; (15950 <xQueueGenericSend+0x264>)
   15818:	0028      	movs	r0, r5
   1581a:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1581c:	0020      	movs	r0, r4
   1581e:	4b51      	ldr	r3, [pc, #324]	; (15964 <xQueueGenericSend+0x278>)
   15820:	9903      	ldr	r1, [sp, #12]
   15822:	3010      	adds	r0, #16
   15824:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   15826:	0020      	movs	r0, r4
   15828:	47b8      	blx	r7
				if( xTaskResumeAll() == pdFALSE )
   1582a:	4b4f      	ldr	r3, [pc, #316]	; (15968 <xQueueGenericSend+0x27c>)
   1582c:	4798      	blx	r3
   1582e:	2800      	cmp	r0, #0
   15830:	d101      	bne.n	15836 <xQueueGenericSend+0x14a>
					portYIELD_WITHIN_API();
   15832:	4b4e      	ldr	r3, [pc, #312]	; (1596c <xQueueGenericSend+0x280>)
   15834:	4798      	blx	r3
   15836:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   15838:	4e4d      	ldr	r6, [pc, #308]	; (15970 <xQueueGenericSend+0x284>)
   1583a:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1583c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1583e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   15840:	4293      	cmp	r3, r2
   15842:	d303      	bcc.n	1584c <xQueueGenericSend+0x160>
   15844:	9b00      	ldr	r3, [sp, #0]
   15846:	2b02      	cmp	r3, #2
   15848:	d000      	beq.n	1584c <xQueueGenericSend+0x160>
   1584a:	e76b      	b.n	15724 <xQueueGenericSend+0x38>
				traceQUEUE_SEND( pxQueue );
   1584c:	4b39      	ldr	r3, [pc, #228]	; (15934 <xQueueGenericSend+0x248>)
   1584e:	4798      	blx	r3
   15850:	4b39      	ldr	r3, [pc, #228]	; (15938 <xQueueGenericSend+0x24c>)
   15852:	4798      	blx	r3
   15854:	4e39      	ldr	r6, [pc, #228]	; (1593c <xQueueGenericSend+0x250>)
   15856:	4d3b      	ldr	r5, [pc, #236]	; (15944 <xQueueGenericSend+0x258>)
   15858:	8833      	ldrh	r3, [r6, #0]
   1585a:	4203      	tst	r3, r0
   1585c:	d01b      	beq.n	15896 <xQueueGenericSend+0x1aa>
   1585e:	4b38      	ldr	r3, [pc, #224]	; (15940 <xQueueGenericSend+0x254>)
   15860:	0020      	movs	r0, r4
   15862:	4798      	blx	r3
   15864:	8833      	ldrh	r3, [r6, #0]
   15866:	4203      	tst	r3, r0
   15868:	d015      	beq.n	15896 <xQueueGenericSend+0x1aa>
   1586a:	9b00      	ldr	r3, [sp, #0]
   1586c:	2625      	movs	r6, #37	; 0x25
   1586e:	2b00      	cmp	r3, #0
   15870:	d105      	bne.n	1587e <xQueueGenericSend+0x192>
   15872:	0020      	movs	r0, r4
   15874:	47a8      	blx	r5
   15876:	4b34      	ldr	r3, [pc, #208]	; (15948 <xQueueGenericSend+0x25c>)
   15878:	5c1e      	ldrb	r6, [r3, r0]
   1587a:	3620      	adds	r6, #32
   1587c:	b2f6      	uxtb	r6, r6
   1587e:	0020      	movs	r0, r4
   15880:	47a8      	blx	r5
   15882:	4b31      	ldr	r3, [pc, #196]	; (15948 <xQueueGenericSend+0x25c>)
   15884:	5c1f      	ldrb	r7, [r3, r0]
   15886:	4b31      	ldr	r3, [pc, #196]	; (1594c <xQueueGenericSend+0x260>)
   15888:	0020      	movs	r0, r4
   1588a:	4798      	blx	r3
   1588c:	0039      	movs	r1, r7
   1588e:	b2c2      	uxtb	r2, r0
   15890:	4b2f      	ldr	r3, [pc, #188]	; (15950 <xQueueGenericSend+0x264>)
   15892:	0030      	movs	r0, r6
   15894:	4798      	blx	r3
   15896:	0020      	movs	r0, r4
   15898:	47a8      	blx	r5
   1589a:	4e2b      	ldr	r6, [pc, #172]	; (15948 <xQueueGenericSend+0x25c>)
   1589c:	4b2b      	ldr	r3, [pc, #172]	; (1594c <xQueueGenericSend+0x260>)
   1589e:	5c37      	ldrb	r7, [r6, r0]
   158a0:	0020      	movs	r0, r4
   158a2:	4798      	blx	r3
   158a4:	b2c3      	uxtb	r3, r0
   158a6:	0020      	movs	r0, r4
   158a8:	9302      	str	r3, [sp, #8]
   158aa:	47a8      	blx	r5
   158ac:	5c33      	ldrb	r3, [r6, r0]
   158ae:	2200      	movs	r2, #0
   158b0:	2b02      	cmp	r3, #2
   158b2:	d002      	beq.n	158ba <xQueueGenericSend+0x1ce>
   158b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   158b6:	3201      	adds	r2, #1
   158b8:	b2d2      	uxtb	r2, r2
   158ba:	9902      	ldr	r1, [sp, #8]
   158bc:	0038      	movs	r0, r7
   158be:	4b2d      	ldr	r3, [pc, #180]	; (15974 <xQueueGenericSend+0x288>)
   158c0:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   158c2:	4b2d      	ldr	r3, [pc, #180]	; (15978 <xQueueGenericSend+0x28c>)
   158c4:	9a00      	ldr	r2, [sp, #0]
   158c6:	9901      	ldr	r1, [sp, #4]
   158c8:	0020      	movs	r0, r4
   158ca:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
   158cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   158ce:	2b00      	cmp	r3, #0
   158d0:	d100      	bne.n	158d4 <xQueueGenericSend+0x1e8>
   158d2:	e71e      	b.n	15712 <xQueueGenericSend+0x26>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   158d4:	9900      	ldr	r1, [sp, #0]
   158d6:	0020      	movs	r0, r4
   158d8:	4b28      	ldr	r3, [pc, #160]	; (1597c <xQueueGenericSend+0x290>)
   158da:	4798      	blx	r3
   158dc:	2800      	cmp	r0, #0
   158de:	d001      	beq.n	158e4 <xQueueGenericSend+0x1f8>
							queueYIELD_IF_USING_PREEMPTION();
   158e0:	4b22      	ldr	r3, [pc, #136]	; (1596c <xQueueGenericSend+0x280>)
   158e2:	4798      	blx	r3
				taskEXIT_CRITICAL();
   158e4:	4b12      	ldr	r3, [pc, #72]	; (15930 <xQueueGenericSend+0x244>)
   158e6:	4798      	blx	r3
				return pdPASS;
   158e8:	2001      	movs	r0, #1
}
   158ea:	b007      	add	sp, #28
   158ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
   158ee:	0020      	movs	r0, r4
   158f0:	47b8      	blx	r7
				( void ) xTaskResumeAll();
   158f2:	4b1d      	ldr	r3, [pc, #116]	; (15968 <xQueueGenericSend+0x27c>)
   158f4:	4798      	blx	r3
   158f6:	e79e      	b.n	15836 <xQueueGenericSend+0x14a>
			prvUnlockQueue( pxQueue );
   158f8:	0020      	movs	r0, r4
   158fa:	47b8      	blx	r7
			( void ) xTaskResumeAll();
   158fc:	4b1a      	ldr	r3, [pc, #104]	; (15968 <xQueueGenericSend+0x27c>)
   158fe:	4798      	blx	r3
   15900:	e715      	b.n	1572e <xQueueGenericSend+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   15902:	9b00      	ldr	r3, [sp, #0]
   15904:	2b02      	cmp	r3, #2
   15906:	d102      	bne.n	1590e <xQueueGenericSend+0x222>
   15908:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1590a:	2b01      	cmp	r3, #1
   1590c:	d10b      	bne.n	15926 <xQueueGenericSend+0x23a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1590e:	4b1c      	ldr	r3, [pc, #112]	; (15980 <xQueueGenericSend+0x294>)
   15910:	4798      	blx	r3
   15912:	2500      	movs	r5, #0
   15914:	2800      	cmp	r0, #0
   15916:	d000      	beq.n	1591a <xQueueGenericSend+0x22e>
   15918:	e78e      	b.n	15838 <xQueueGenericSend+0x14c>
   1591a:	9d03      	ldr	r5, [sp, #12]
   1591c:	2d00      	cmp	r5, #0
   1591e:	d100      	bne.n	15922 <xQueueGenericSend+0x236>
   15920:	e78a      	b.n	15838 <xQueueGenericSend+0x14c>
   15922:	b672      	cpsid	i
   15924:	e7fe      	b.n	15924 <xQueueGenericSend+0x238>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   15926:	b672      	cpsid	i
   15928:	e7fe      	b.n	15928 <xQueueGenericSend+0x23c>
   1592a:	46c0      	nop			; (mov r8, r8)
   1592c:	00016c61 	.word	0x00016c61
   15930:	00015199 	.word	0x00015199
   15934:	00014125 	.word	0x00014125
   15938:	00013fa9 	.word	0x00013fa9
   1593c:	20000054 	.word	0x20000054
   15940:	00014009 	.word	0x00014009
   15944:	00013f8d 	.word	0x00013f8d
   15948:	2000004c 	.word	0x2000004c
   1594c:	00013ff9 	.word	0x00013ff9
   15950:	00014c41 	.word	0x00014c41
   15954:	00016d09 	.word	0x00016d09
   15958:	000166a1 	.word	0x000166a1
   1595c:	00016d21 	.word	0x00016d21
   15960:	000154b1 	.word	0x000154b1
   15964:	00016ba1 	.word	0x00016ba1
   15968:	00016829 	.word	0x00016829
   1596c:	00015171 	.word	0x00015171
   15970:	00015181 	.word	0x00015181
   15974:	0001474d 	.word	0x0001474d
   15978:	00015305 	.word	0x00015305
   1597c:	0001537d 	.word	0x0001537d
   15980:	00016ddd 	.word	0x00016ddd

00015984 <xQueueCreateMutex>:
	{
   15984:	b570      	push	{r4, r5, r6, lr}
   15986:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   15988:	2100      	movs	r1, #0
   1598a:	2001      	movs	r0, #1
   1598c:	4b06      	ldr	r3, [pc, #24]	; (159a8 <xQueueCreateMutex+0x24>)
   1598e:	4798      	blx	r3
   15990:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
   15992:	d007      	beq.n	159a4 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
   15994:	2100      	movs	r1, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   15996:	4d05      	ldr	r5, [pc, #20]	; (159ac <xQueueCreateMutex+0x28>)
			pxNewQueue->pxMutexHolder = NULL;
   15998:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1599a:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1599c:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1599e:	000b      	movs	r3, r1
   159a0:	000a      	movs	r2, r1
   159a2:	47a8      	blx	r5
	}
   159a4:	0020      	movs	r0, r4
   159a6:	bd70      	pop	{r4, r5, r6, pc}
   159a8:	000155b9 	.word	0x000155b9
   159ac:	000156ed 	.word	0x000156ed

000159b0 <xQueueGenericSendFromISR>:
{
   159b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   159b2:	b085      	sub	sp, #20
   159b4:	0004      	movs	r4, r0
   159b6:	9102      	str	r1, [sp, #8]
   159b8:	0017      	movs	r7, r2
   159ba:	9300      	str	r3, [sp, #0]
	configASSERT( pxQueue );
   159bc:	2800      	cmp	r0, #0
   159be:	d101      	bne.n	159c4 <xQueueGenericSendFromISR+0x14>
   159c0:	b672      	cpsid	i
   159c2:	e7fe      	b.n	159c2 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   159c4:	9b02      	ldr	r3, [sp, #8]
   159c6:	2b00      	cmp	r3, #0
   159c8:	d13c      	bne.n	15a44 <xQueueGenericSendFromISR+0x94>
   159ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
   159cc:	2b00      	cmp	r3, #0
   159ce:	d039      	beq.n	15a44 <xQueueGenericSendFromISR+0x94>
   159d0:	b672      	cpsid	i
   159d2:	e7fe      	b.n	159d2 <xQueueGenericSendFromISR+0x22>
							if( pxHigherPriorityTaskWoken != NULL )
   159d4:	2f00      	cmp	r7, #0
   159d6:	d100      	bne.n	159da <xQueueGenericSendFromISR+0x2a>
   159d8:	e088      	b.n	15aec <xQueueGenericSendFromISR+0x13c>
								*pxHigherPriorityTaskWoken = pdTRUE;
   159da:	2501      	movs	r5, #1
   159dc:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   159de:	9803      	ldr	r0, [sp, #12]
   159e0:	4b44      	ldr	r3, [pc, #272]	; (15af4 <xQueueGenericSendFromISR+0x144>)
   159e2:	4798      	blx	r3
}
   159e4:	0028      	movs	r0, r5
   159e6:	b005      	add	sp, #20
   159e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   159ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   159ec:	2b00      	cmp	r3, #0
   159ee:	d07d      	beq.n	15aec <xQueueGenericSendFromISR+0x13c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   159f0:	0020      	movs	r0, r4
   159f2:	4b41      	ldr	r3, [pc, #260]	; (15af8 <xQueueGenericSendFromISR+0x148>)
   159f4:	3024      	adds	r0, #36	; 0x24
   159f6:	4798      	blx	r3
   159f8:	e075      	b.n	15ae6 <xQueueGenericSendFromISR+0x136>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   159fa:	9b01      	ldr	r3, [sp, #4]
   159fc:	3445      	adds	r4, #69	; 0x45
   159fe:	3301      	adds	r3, #1
   15a00:	b25b      	sxtb	r3, r3
   15a02:	7023      	strb	r3, [r4, #0]
   15a04:	e072      	b.n	15aec <xQueueGenericSendFromISR+0x13c>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   15a06:	0020      	movs	r0, r4
   15a08:	4798      	blx	r3
   15a0a:	4b3c      	ldr	r3, [pc, #240]	; (15afc <xQueueGenericSendFromISR+0x14c>)
			xReturn = errQUEUE_FULL;
   15a0c:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   15a0e:	881b      	ldrh	r3, [r3, #0]
   15a10:	4203      	tst	r3, r0
   15a12:	d0e4      	beq.n	159de <xQueueGenericSendFromISR+0x2e>
   15a14:	9b00      	ldr	r3, [sp, #0]
   15a16:	4f3a      	ldr	r7, [pc, #232]	; (15b00 <xQueueGenericSendFromISR+0x150>)
   15a18:	4e3a      	ldr	r6, [pc, #232]	; (15b04 <xQueueGenericSendFromISR+0x154>)
   15a1a:	355d      	adds	r5, #93	; 0x5d
   15a1c:	2b00      	cmp	r3, #0
   15a1e:	d104      	bne.n	15a2a <xQueueGenericSendFromISR+0x7a>
   15a20:	0020      	movs	r0, r4
   15a22:	47b8      	blx	r7
   15a24:	5c35      	ldrb	r5, [r6, r0]
   15a26:	3558      	adds	r5, #88	; 0x58
   15a28:	b2ed      	uxtb	r5, r5
   15a2a:	0020      	movs	r0, r4
   15a2c:	47b8      	blx	r7
   15a2e:	4b36      	ldr	r3, [pc, #216]	; (15b08 <xQueueGenericSendFromISR+0x158>)
   15a30:	5c36      	ldrb	r6, [r6, r0]
   15a32:	0020      	movs	r0, r4
   15a34:	4798      	blx	r3
   15a36:	0031      	movs	r1, r6
   15a38:	b2c2      	uxtb	r2, r0
   15a3a:	4b34      	ldr	r3, [pc, #208]	; (15b0c <xQueueGenericSendFromISR+0x15c>)
   15a3c:	0028      	movs	r0, r5
   15a3e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   15a40:	2500      	movs	r5, #0
   15a42:	e7cc      	b.n	159de <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   15a44:	9b00      	ldr	r3, [sp, #0]
   15a46:	2b02      	cmp	r3, #2
   15a48:	d102      	bne.n	15a50 <xQueueGenericSendFromISR+0xa0>
   15a4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15a4c:	2b01      	cmp	r3, #1
   15a4e:	d14f      	bne.n	15af0 <xQueueGenericSendFromISR+0x140>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   15a50:	4b2f      	ldr	r3, [pc, #188]	; (15b10 <xQueueGenericSendFromISR+0x160>)
   15a52:	4798      	blx	r3
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   15a54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   15a56:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   15a58:	9003      	str	r0, [sp, #12]
   15a5a:	4b2e      	ldr	r3, [pc, #184]	; (15b14 <xQueueGenericSendFromISR+0x164>)
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   15a5c:	428a      	cmp	r2, r1
   15a5e:	d302      	bcc.n	15a66 <xQueueGenericSendFromISR+0xb6>
   15a60:	9a00      	ldr	r2, [sp, #0]
   15a62:	2a02      	cmp	r2, #2
   15a64:	d1cf      	bne.n	15a06 <xQueueGenericSendFromISR+0x56>
			const int8_t cTxLock = pxQueue->cTxLock;
   15a66:	0022      	movs	r2, r4
   15a68:	3245      	adds	r2, #69	; 0x45
   15a6a:	7812      	ldrb	r2, [r2, #0]
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   15a6c:	0020      	movs	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
   15a6e:	b252      	sxtb	r2, r2
   15a70:	9201      	str	r2, [sp, #4]
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   15a72:	4798      	blx	r3
   15a74:	4b21      	ldr	r3, [pc, #132]	; (15afc <xQueueGenericSendFromISR+0x14c>)
   15a76:	881b      	ldrh	r3, [r3, #0]
   15a78:	4203      	tst	r3, r0
   15a7a:	d016      	beq.n	15aaa <xQueueGenericSendFromISR+0xfa>
   15a7c:	9b00      	ldr	r3, [sp, #0]
   15a7e:	4e20      	ldr	r6, [pc, #128]	; (15b00 <xQueueGenericSendFromISR+0x150>)
   15a80:	2535      	movs	r5, #53	; 0x35
   15a82:	2b00      	cmp	r3, #0
   15a84:	d105      	bne.n	15a92 <xQueueGenericSendFromISR+0xe2>
   15a86:	0020      	movs	r0, r4
   15a88:	47b0      	blx	r6
   15a8a:	4b1e      	ldr	r3, [pc, #120]	; (15b04 <xQueueGenericSendFromISR+0x154>)
   15a8c:	5c1d      	ldrb	r5, [r3, r0]
   15a8e:	3530      	adds	r5, #48	; 0x30
   15a90:	b2ed      	uxtb	r5, r5
   15a92:	0020      	movs	r0, r4
   15a94:	47b0      	blx	r6
   15a96:	4b1b      	ldr	r3, [pc, #108]	; (15b04 <xQueueGenericSendFromISR+0x154>)
   15a98:	5c1e      	ldrb	r6, [r3, r0]
   15a9a:	4b1b      	ldr	r3, [pc, #108]	; (15b08 <xQueueGenericSendFromISR+0x158>)
   15a9c:	0020      	movs	r0, r4
   15a9e:	4798      	blx	r3
   15aa0:	0031      	movs	r1, r6
   15aa2:	b2c2      	uxtb	r2, r0
   15aa4:	4b19      	ldr	r3, [pc, #100]	; (15b0c <xQueueGenericSendFromISR+0x15c>)
   15aa6:	0028      	movs	r0, r5
   15aa8:	4798      	blx	r3
   15aaa:	4b15      	ldr	r3, [pc, #84]	; (15b00 <xQueueGenericSendFromISR+0x150>)
   15aac:	0020      	movs	r0, r4
   15aae:	4798      	blx	r3
   15ab0:	4b14      	ldr	r3, [pc, #80]	; (15b04 <xQueueGenericSendFromISR+0x154>)
   15ab2:	5c1d      	ldrb	r5, [r3, r0]
   15ab4:	4b14      	ldr	r3, [pc, #80]	; (15b08 <xQueueGenericSendFromISR+0x158>)
   15ab6:	0020      	movs	r0, r4
   15ab8:	4798      	blx	r3
   15aba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   15abc:	b2c1      	uxtb	r1, r0
   15abe:	3201      	adds	r2, #1
   15ac0:	b2d2      	uxtb	r2, r2
   15ac2:	0028      	movs	r0, r5
   15ac4:	4b14      	ldr	r3, [pc, #80]	; (15b18 <xQueueGenericSendFromISR+0x168>)
   15ac6:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   15ac8:	4b14      	ldr	r3, [pc, #80]	; (15b1c <xQueueGenericSendFromISR+0x16c>)
   15aca:	9a00      	ldr	r2, [sp, #0]
   15acc:	9902      	ldr	r1, [sp, #8]
   15ace:	0020      	movs	r0, r4
   15ad0:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
   15ad2:	9b01      	ldr	r3, [sp, #4]
   15ad4:	3301      	adds	r3, #1
   15ad6:	d190      	bne.n	159fa <xQueueGenericSendFromISR+0x4a>
					if( pxQueue->pxQueueSetContainer != NULL )
   15ad8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15ada:	2b00      	cmp	r3, #0
   15adc:	d085      	beq.n	159ea <xQueueGenericSendFromISR+0x3a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   15ade:	9900      	ldr	r1, [sp, #0]
   15ae0:	0020      	movs	r0, r4
   15ae2:	4b0f      	ldr	r3, [pc, #60]	; (15b20 <xQueueGenericSendFromISR+0x170>)
   15ae4:	4798      	blx	r3
   15ae6:	2800      	cmp	r0, #0
   15ae8:	d000      	beq.n	15aec <xQueueGenericSendFromISR+0x13c>
   15aea:	e773      	b.n	159d4 <xQueueGenericSendFromISR+0x24>
			xReturn = pdPASS;
   15aec:	2501      	movs	r5, #1
   15aee:	e776      	b.n	159de <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   15af0:	b672      	cpsid	i
   15af2:	e7fe      	b.n	15af2 <xQueueGenericSendFromISR+0x142>
   15af4:	000151bd 	.word	0x000151bd
   15af8:	00016c61 	.word	0x00016c61
   15afc:	20000054 	.word	0x20000054
   15b00:	00013f8d 	.word	0x00013f8d
   15b04:	2000004c 	.word	0x2000004c
   15b08:	00013ff9 	.word	0x00013ff9
   15b0c:	00014c41 	.word	0x00014c41
   15b10:	000151b5 	.word	0x000151b5
   15b14:	00014009 	.word	0x00014009
   15b18:	0001474d 	.word	0x0001474d
   15b1c:	00015305 	.word	0x00015305
   15b20:	0001537d 	.word	0x0001537d

00015b24 <MyWrapper>:
{
   15b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b26:	b085      	sub	sp, #20
   15b28:	0004      	movs	r4, r0
   15b2a:	000f      	movs	r7, r1
   15b2c:	9202      	str	r2, [sp, #8]
	configASSERT( pxQueue );
   15b2e:	2800      	cmp	r0, #0
   15b30:	d101      	bne.n	15b36 <MyWrapper+0x12>
   15b32:	b672      	cpsid	i
   15b34:	e7fe      	b.n	15b34 <MyWrapper+0x10>
	configASSERT( pxQueue->uxItemSize == 0 );
   15b36:	6c03      	ldr	r3, [r0, #64]	; 0x40
   15b38:	2b00      	cmp	r3, #0
   15b3a:	d001      	beq.n	15b40 <MyWrapper+0x1c>
   15b3c:	b672      	cpsid	i
   15b3e:	e7fe      	b.n	15b3e <MyWrapper+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   15b40:	6803      	ldr	r3, [r0, #0]
   15b42:	2b00      	cmp	r3, #0
   15b44:	d103      	bne.n	15b4e <MyWrapper+0x2a>
   15b46:	6843      	ldr	r3, [r0, #4]
   15b48:	2b00      	cmp	r3, #0
   15b4a:	d000      	beq.n	15b4e <MyWrapper+0x2a>
   15b4c:	e082      	b.n	15c54 <MyWrapper+0x130>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   15b4e:	4b42      	ldr	r3, [pc, #264]	; (15c58 <MyWrapper+0x134>)
   15b50:	4798      	blx	r3
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   15b52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
   15b54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   15b56:	9300      	str	r3, [sp, #0]
		if( uxMessagesWaiting < pxQueue->uxLength )
   15b58:	9a00      	ldr	r2, [sp, #0]
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   15b5a:	9003      	str	r0, [sp, #12]
   15b5c:	4b3f      	ldr	r3, [pc, #252]	; (15c5c <MyWrapper+0x138>)
		if( uxMessagesWaiting < pxQueue->uxLength )
   15b5e:	428a      	cmp	r2, r1
   15b60:	d31e      	bcc.n	15ba0 <MyWrapper+0x7c>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   15b62:	0020      	movs	r0, r4
   15b64:	4798      	blx	r3
   15b66:	4b3e      	ldr	r3, [pc, #248]	; (15c60 <MyWrapper+0x13c>)
			xReturn = errQUEUE_FULL;
   15b68:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   15b6a:	881b      	ldrh	r3, [r3, #0]
   15b6c:	4203      	tst	r3, r0
   15b6e:	d05d      	beq.n	15c2c <MyWrapper+0x108>
   15b70:	9b02      	ldr	r3, [sp, #8]
   15b72:	4f3c      	ldr	r7, [pc, #240]	; (15c64 <MyWrapper+0x140>)
   15b74:	4e3c      	ldr	r6, [pc, #240]	; (15c68 <MyWrapper+0x144>)
   15b76:	355d      	adds	r5, #93	; 0x5d
   15b78:	2b00      	cmp	r3, #0
   15b7a:	d104      	bne.n	15b86 <MyWrapper+0x62>
   15b7c:	0020      	movs	r0, r4
   15b7e:	47b8      	blx	r7
   15b80:	5c35      	ldrb	r5, [r6, r0]
   15b82:	3558      	adds	r5, #88	; 0x58
   15b84:	b2ed      	uxtb	r5, r5
   15b86:	0020      	movs	r0, r4
   15b88:	47b8      	blx	r7
   15b8a:	4b38      	ldr	r3, [pc, #224]	; (15c6c <MyWrapper+0x148>)
   15b8c:	5c36      	ldrb	r6, [r6, r0]
   15b8e:	0020      	movs	r0, r4
   15b90:	4798      	blx	r3
   15b92:	0031      	movs	r1, r6
   15b94:	b2c2      	uxtb	r2, r0
   15b96:	4b36      	ldr	r3, [pc, #216]	; (15c70 <MyWrapper+0x14c>)
   15b98:	0028      	movs	r0, r5
   15b9a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   15b9c:	2500      	movs	r5, #0
   15b9e:	e045      	b.n	15c2c <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
   15ba0:	0022      	movs	r2, r4
   15ba2:	3245      	adds	r2, #69	; 0x45
   15ba4:	7812      	ldrb	r2, [r2, #0]
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   15ba6:	0020      	movs	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
   15ba8:	b252      	sxtb	r2, r2
   15baa:	9201      	str	r2, [sp, #4]
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   15bac:	4798      	blx	r3
   15bae:	4b2c      	ldr	r3, [pc, #176]	; (15c60 <MyWrapper+0x13c>)
   15bb0:	881b      	ldrh	r3, [r3, #0]
   15bb2:	4203      	tst	r3, r0
   15bb4:	d016      	beq.n	15be4 <MyWrapper+0xc0>
   15bb6:	9b02      	ldr	r3, [sp, #8]
   15bb8:	4e2a      	ldr	r6, [pc, #168]	; (15c64 <MyWrapper+0x140>)
   15bba:	2535      	movs	r5, #53	; 0x35
   15bbc:	2b00      	cmp	r3, #0
   15bbe:	d105      	bne.n	15bcc <MyWrapper+0xa8>
   15bc0:	0020      	movs	r0, r4
   15bc2:	47b0      	blx	r6
   15bc4:	4b28      	ldr	r3, [pc, #160]	; (15c68 <MyWrapper+0x144>)
   15bc6:	5c1d      	ldrb	r5, [r3, r0]
   15bc8:	3530      	adds	r5, #48	; 0x30
   15bca:	b2ed      	uxtb	r5, r5
   15bcc:	0020      	movs	r0, r4
   15bce:	47b0      	blx	r6
   15bd0:	4b25      	ldr	r3, [pc, #148]	; (15c68 <MyWrapper+0x144>)
   15bd2:	5c1e      	ldrb	r6, [r3, r0]
   15bd4:	4b25      	ldr	r3, [pc, #148]	; (15c6c <MyWrapper+0x148>)
   15bd6:	0020      	movs	r0, r4
   15bd8:	4798      	blx	r3
   15bda:	0031      	movs	r1, r6
   15bdc:	b2c2      	uxtb	r2, r0
   15bde:	4b24      	ldr	r3, [pc, #144]	; (15c70 <MyWrapper+0x14c>)
   15be0:	0028      	movs	r0, r5
   15be2:	4798      	blx	r3
   15be4:	4b1f      	ldr	r3, [pc, #124]	; (15c64 <MyWrapper+0x140>)
   15be6:	0020      	movs	r0, r4
   15be8:	4798      	blx	r3
   15bea:	4b1f      	ldr	r3, [pc, #124]	; (15c68 <MyWrapper+0x144>)
   15bec:	5c1d      	ldrb	r5, [r3, r0]
   15bee:	4b1f      	ldr	r3, [pc, #124]	; (15c6c <MyWrapper+0x148>)
   15bf0:	0020      	movs	r0, r4
   15bf2:	4798      	blx	r3
   15bf4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   15bf6:	b2c1      	uxtb	r1, r0
   15bf8:	3201      	adds	r2, #1
   15bfa:	4b1e      	ldr	r3, [pc, #120]	; (15c74 <MyWrapper+0x150>)
   15bfc:	b2d2      	uxtb	r2, r2
   15bfe:	0028      	movs	r0, r5
   15c00:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   15c02:	9b00      	ldr	r3, [sp, #0]
   15c04:	3301      	adds	r3, #1
   15c06:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
   15c08:	9b01      	ldr	r3, [sp, #4]
   15c0a:	3301      	adds	r3, #1
   15c0c:	d11c      	bne.n	15c48 <MyWrapper+0x124>
					if( pxQueue->pxQueueSetContainer != NULL )
   15c0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15c10:	2b00      	cmp	r3, #0
   15c12:	d011      	beq.n	15c38 <MyWrapper+0x114>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   15c14:	2100      	movs	r1, #0
   15c16:	0020      	movs	r0, r4
   15c18:	4b17      	ldr	r3, [pc, #92]	; (15c78 <MyWrapper+0x154>)
   15c1a:	4798      	blx	r3
   15c1c:	2800      	cmp	r0, #0
   15c1e:	d101      	bne.n	15c24 <MyWrapper+0x100>
			xReturn = pdPASS;
   15c20:	2501      	movs	r5, #1
   15c22:	e003      	b.n	15c2c <MyWrapper+0x108>
							if( pxHigherPriorityTaskWoken != NULL )
   15c24:	2f00      	cmp	r7, #0
   15c26:	d0fb      	beq.n	15c20 <MyWrapper+0xfc>
								*pxHigherPriorityTaskWoken = pdTRUE;
   15c28:	2501      	movs	r5, #1
   15c2a:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   15c2c:	9803      	ldr	r0, [sp, #12]
   15c2e:	4b13      	ldr	r3, [pc, #76]	; (15c7c <MyWrapper+0x158>)
   15c30:	4798      	blx	r3
}
   15c32:	0028      	movs	r0, r5
   15c34:	b005      	add	sp, #20
   15c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   15c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15c3a:	2b00      	cmp	r3, #0
   15c3c:	d0f0      	beq.n	15c20 <MyWrapper+0xfc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   15c3e:	0020      	movs	r0, r4
   15c40:	4b0f      	ldr	r3, [pc, #60]	; (15c80 <MyWrapper+0x15c>)
   15c42:	3024      	adds	r0, #36	; 0x24
   15c44:	4798      	blx	r3
   15c46:	e7e9      	b.n	15c1c <MyWrapper+0xf8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   15c48:	9b01      	ldr	r3, [sp, #4]
   15c4a:	3445      	adds	r4, #69	; 0x45
   15c4c:	3301      	adds	r3, #1
   15c4e:	b25b      	sxtb	r3, r3
   15c50:	7023      	strb	r3, [r4, #0]
   15c52:	e7e5      	b.n	15c20 <MyWrapper+0xfc>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   15c54:	b672      	cpsid	i
   15c56:	e7fe      	b.n	15c56 <MyWrapper+0x132>
   15c58:	000151b5 	.word	0x000151b5
   15c5c:	00014009 	.word	0x00014009
   15c60:	20000054 	.word	0x20000054
   15c64:	00013f8d 	.word	0x00013f8d
   15c68:	2000004c 	.word	0x2000004c
   15c6c:	00013ff9 	.word	0x00013ff9
   15c70:	00014c41 	.word	0x00014c41
   15c74:	0001474d 	.word	0x0001474d
   15c78:	0001537d 	.word	0x0001537d
   15c7c:	000151bd 	.word	0x000151bd
   15c80:	00016c61 	.word	0x00016c61

00015c84 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   15c84:	b510      	push	{r4, lr}
   15c86:	2200      	movs	r2, #0
   15c88:	4b01      	ldr	r3, [pc, #4]	; (15c90 <xQueueGiveFromISR+0xc>)
   15c8a:	4798      	blx	r3
   15c8c:	bd10      	pop	{r4, pc}
   15c8e:	46c0      	nop			; (mov r8, r8)
   15c90:	00015b25 	.word	0x00015b25

00015c94 <xQueueReceive>:
{
   15c94:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c96:	b087      	sub	sp, #28
   15c98:	1e04      	subs	r4, r0, #0
   15c9a:	9102      	str	r1, [sp, #8]
   15c9c:	9203      	str	r2, [sp, #12]
	configASSERT( ( pxQueue ) );
   15c9e:	d101      	bne.n	15ca4 <xQueueReceive+0x10>
   15ca0:	b672      	cpsid	i
   15ca2:	e7fe      	b.n	15ca2 <xQueueReceive+0xe>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   15ca4:	9b02      	ldr	r3, [sp, #8]
   15ca6:	2b00      	cmp	r3, #0
   15ca8:	d000      	beq.n	15cac <xQueueReceive+0x18>
   15caa:	e103      	b.n	15eb4 <xQueueReceive+0x220>
   15cac:	6c03      	ldr	r3, [r0, #64]	; 0x40
   15cae:	2b00      	cmp	r3, #0
   15cb0:	d100      	bne.n	15cb4 <xQueueReceive+0x20>
   15cb2:	e0ff      	b.n	15eb4 <xQueueReceive+0x220>
   15cb4:	b672      	cpsid	i
   15cb6:	e7fe      	b.n	15cb6 <xQueueReceive+0x22>
				traceQUEUE_RECEIVE( pxQueue );
   15cb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   15cba:	3a01      	subs	r2, #1
   15cbc:	b2d2      	uxtb	r2, r2
   15cbe:	e0d6      	b.n	15e6e <xQueueReceive+0x1da>
				if( xTicksToWait == ( TickType_t ) 0 )
   15cc0:	9b03      	ldr	r3, [sp, #12]
   15cc2:	9301      	str	r3, [sp, #4]
   15cc4:	2b00      	cmp	r3, #0
   15cc6:	d123      	bne.n	15d10 <xQueueReceive+0x7c>
					taskEXIT_CRITICAL();
   15cc8:	4b80      	ldr	r3, [pc, #512]	; (15ecc <xQueueReceive+0x238>)
   15cca:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   15ccc:	4b80      	ldr	r3, [pc, #512]	; (15ed0 <xQueueReceive+0x23c>)
   15cce:	4798      	blx	r3
   15cd0:	4b80      	ldr	r3, [pc, #512]	; (15ed4 <xQueueReceive+0x240>)
   15cd2:	4798      	blx	r3
   15cd4:	4d80      	ldr	r5, [pc, #512]	; (15ed8 <xQueueReceive+0x244>)
   15cd6:	882b      	ldrh	r3, [r5, #0]
   15cd8:	4203      	tst	r3, r0
   15cda:	d017      	beq.n	15d0c <xQueueReceive+0x78>
   15cdc:	4b7f      	ldr	r3, [pc, #508]	; (15edc <xQueueReceive+0x248>)
   15cde:	0020      	movs	r0, r4
   15ce0:	4798      	blx	r3
   15ce2:	882b      	ldrh	r3, [r5, #0]
   15ce4:	4203      	tst	r3, r0
   15ce6:	d011      	beq.n	15d0c <xQueueReceive+0x78>
   15ce8:	4f7d      	ldr	r7, [pc, #500]	; (15ee0 <xQueueReceive+0x24c>)
   15cea:	0020      	movs	r0, r4
   15cec:	47b8      	blx	r7
   15cee:	4e7d      	ldr	r6, [pc, #500]	; (15ee4 <xQueueReceive+0x250>)
   15cf0:	5c35      	ldrb	r5, [r6, r0]
   15cf2:	0020      	movs	r0, r4
   15cf4:	47b8      	blx	r7
   15cf6:	4b7c      	ldr	r3, [pc, #496]	; (15ee8 <xQueueReceive+0x254>)
   15cf8:	5c36      	ldrb	r6, [r6, r0]
   15cfa:	0020      	movs	r0, r4
   15cfc:	4798      	blx	r3
   15cfe:	3550      	adds	r5, #80	; 0x50
   15d00:	b2ed      	uxtb	r5, r5
   15d02:	b2c2      	uxtb	r2, r0
   15d04:	0031      	movs	r1, r6
   15d06:	0028      	movs	r0, r5
   15d08:	4b78      	ldr	r3, [pc, #480]	; (15eec <xQueueReceive+0x258>)
   15d0a:	4798      	blx	r3
				return errQUEUE_EMPTY;
   15d0c:	2000      	movs	r0, #0
   15d0e:	e0c3      	b.n	15e98 <xQueueReceive+0x204>
				else if( xEntryTimeSet == pdFALSE )
   15d10:	2d00      	cmp	r5, #0
   15d12:	d102      	bne.n	15d1a <xQueueReceive+0x86>
					vTaskInternalSetTimeOutState( &xTimeOut );
   15d14:	a804      	add	r0, sp, #16
   15d16:	4b76      	ldr	r3, [pc, #472]	; (15ef0 <xQueueReceive+0x25c>)
   15d18:	4798      	blx	r3
		taskEXIT_CRITICAL();
   15d1a:	4b6c      	ldr	r3, [pc, #432]	; (15ecc <xQueueReceive+0x238>)
   15d1c:	4798      	blx	r3
		vTaskSuspendAll();
   15d1e:	4b75      	ldr	r3, [pc, #468]	; (15ef4 <xQueueReceive+0x260>)
   15d20:	4798      	blx	r3
		prvLockQueue( pxQueue );
   15d22:	47b0      	blx	r6
   15d24:	0022      	movs	r2, r4
   15d26:	3244      	adds	r2, #68	; 0x44
   15d28:	7813      	ldrb	r3, [r2, #0]
   15d2a:	b25b      	sxtb	r3, r3
   15d2c:	3301      	adds	r3, #1
   15d2e:	d101      	bne.n	15d34 <xQueueReceive+0xa0>
   15d30:	2300      	movs	r3, #0
   15d32:	7013      	strb	r3, [r2, #0]
   15d34:	0022      	movs	r2, r4
   15d36:	3245      	adds	r2, #69	; 0x45
   15d38:	7813      	ldrb	r3, [r2, #0]
   15d3a:	b25b      	sxtb	r3, r3
   15d3c:	3301      	adds	r3, #1
   15d3e:	d101      	bne.n	15d44 <xQueueReceive+0xb0>
   15d40:	2300      	movs	r3, #0
   15d42:	7013      	strb	r3, [r2, #0]
   15d44:	4b61      	ldr	r3, [pc, #388]	; (15ecc <xQueueReceive+0x238>)
   15d46:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   15d48:	a903      	add	r1, sp, #12
   15d4a:	a804      	add	r0, sp, #16
   15d4c:	4b6a      	ldr	r3, [pc, #424]	; (15ef8 <xQueueReceive+0x264>)
   15d4e:	4798      	blx	r3
   15d50:	4d6a      	ldr	r5, [pc, #424]	; (15efc <xQueueReceive+0x268>)
   15d52:	4f6b      	ldr	r7, [pc, #428]	; (15f00 <xQueueReceive+0x26c>)
   15d54:	4e6b      	ldr	r6, [pc, #428]	; (15f04 <xQueueReceive+0x270>)
   15d56:	2800      	cmp	r0, #0
   15d58:	d000      	beq.n	15d5c <xQueueReceive+0xc8>
   15d5a:	e0a3      	b.n	15ea4 <xQueueReceive+0x210>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   15d5c:	0020      	movs	r0, r4
   15d5e:	47a8      	blx	r5
   15d60:	2800      	cmp	r0, #0
   15d62:	d100      	bne.n	15d66 <xQueueReceive+0xd2>
   15d64:	e09a      	b.n	15e9c <xQueueReceive+0x208>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   15d66:	4b5a      	ldr	r3, [pc, #360]	; (15ed0 <xQueueReceive+0x23c>)
   15d68:	4798      	blx	r3
   15d6a:	4b5a      	ldr	r3, [pc, #360]	; (15ed4 <xQueueReceive+0x240>)
   15d6c:	4798      	blx	r3
   15d6e:	4d5a      	ldr	r5, [pc, #360]	; (15ed8 <xQueueReceive+0x244>)
   15d70:	882b      	ldrh	r3, [r5, #0]
   15d72:	4203      	tst	r3, r0
   15d74:	d019      	beq.n	15daa <xQueueReceive+0x116>
   15d76:	4b59      	ldr	r3, [pc, #356]	; (15edc <xQueueReceive+0x248>)
   15d78:	0020      	movs	r0, r4
   15d7a:	4798      	blx	r3
   15d7c:	882b      	ldrh	r3, [r5, #0]
   15d7e:	4203      	tst	r3, r0
   15d80:	d013      	beq.n	15daa <xQueueReceive+0x116>
   15d82:	4b57      	ldr	r3, [pc, #348]	; (15ee0 <xQueueReceive+0x24c>)
   15d84:	0020      	movs	r0, r4
   15d86:	4798      	blx	r3
   15d88:	4d56      	ldr	r5, [pc, #344]	; (15ee4 <xQueueReceive+0x250>)
   15d8a:	5c2b      	ldrb	r3, [r5, r0]
   15d8c:	0020      	movs	r0, r4
   15d8e:	3368      	adds	r3, #104	; 0x68
   15d90:	b2db      	uxtb	r3, r3
   15d92:	9301      	str	r3, [sp, #4]
   15d94:	4b52      	ldr	r3, [pc, #328]	; (15ee0 <xQueueReceive+0x24c>)
   15d96:	4798      	blx	r3
   15d98:	4b53      	ldr	r3, [pc, #332]	; (15ee8 <xQueueReceive+0x254>)
   15d9a:	5c2d      	ldrb	r5, [r5, r0]
   15d9c:	0020      	movs	r0, r4
   15d9e:	4798      	blx	r3
   15da0:	0029      	movs	r1, r5
   15da2:	b2c2      	uxtb	r2, r0
   15da4:	4b51      	ldr	r3, [pc, #324]	; (15eec <xQueueReceive+0x258>)
   15da6:	9801      	ldr	r0, [sp, #4]
   15da8:	4798      	blx	r3
   15daa:	4b4d      	ldr	r3, [pc, #308]	; (15ee0 <xQueueReceive+0x24c>)
   15dac:	0020      	movs	r0, r4
   15dae:	4798      	blx	r3
   15db0:	4b4c      	ldr	r3, [pc, #304]	; (15ee4 <xQueueReceive+0x250>)
   15db2:	5c1b      	ldrb	r3, [r3, r0]
   15db4:	2b02      	cmp	r3, #2
   15db6:	d00e      	beq.n	15dd6 <xQueueReceive+0x142>
   15db8:	4b45      	ldr	r3, [pc, #276]	; (15ed0 <xQueueReceive+0x23c>)
   15dba:	4798      	blx	r3
   15dbc:	4b45      	ldr	r3, [pc, #276]	; (15ed4 <xQueueReceive+0x240>)
   15dbe:	4798      	blx	r3
   15dc0:	4b45      	ldr	r3, [pc, #276]	; (15ed8 <xQueueReceive+0x244>)
   15dc2:	881b      	ldrh	r3, [r3, #0]
   15dc4:	4203      	tst	r3, r0
   15dc6:	d006      	beq.n	15dd6 <xQueueReceive+0x142>
   15dc8:	4b41      	ldr	r3, [pc, #260]	; (15ed0 <xQueueReceive+0x23c>)
   15dca:	4798      	blx	r3
   15dcc:	4b4e      	ldr	r3, [pc, #312]	; (15f08 <xQueueReceive+0x274>)
   15dce:	4798      	blx	r3
   15dd0:	4b4e      	ldr	r3, [pc, #312]	; (15f0c <xQueueReceive+0x278>)
   15dd2:	b2c0      	uxtb	r0, r0
   15dd4:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   15dd6:	0020      	movs	r0, r4
   15dd8:	9903      	ldr	r1, [sp, #12]
   15dda:	3024      	adds	r0, #36	; 0x24
   15ddc:	4b4c      	ldr	r3, [pc, #304]	; (15f10 <xQueueReceive+0x27c>)
   15dde:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   15de0:	0020      	movs	r0, r4
   15de2:	47b8      	blx	r7
				if( xTaskResumeAll() == pdFALSE )
   15de4:	47b0      	blx	r6
   15de6:	2800      	cmp	r0, #0
   15de8:	d101      	bne.n	15dee <xQueueReceive+0x15a>
					portYIELD_WITHIN_API();
   15dea:	4b4a      	ldr	r3, [pc, #296]	; (15f14 <xQueueReceive+0x280>)
   15dec:	4798      	blx	r3
   15dee:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
   15df0:	4e49      	ldr	r6, [pc, #292]	; (15f18 <xQueueReceive+0x284>)
   15df2:	47b0      	blx	r6
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   15df4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15df6:	9301      	str	r3, [sp, #4]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   15df8:	2b00      	cmp	r3, #0
   15dfa:	d100      	bne.n	15dfe <xQueueReceive+0x16a>
   15dfc:	e760      	b.n	15cc0 <xQueueReceive+0x2c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   15dfe:	9902      	ldr	r1, [sp, #8]
   15e00:	0020      	movs	r0, r4
   15e02:	4b46      	ldr	r3, [pc, #280]	; (15f1c <xQueueReceive+0x288>)
   15e04:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   15e06:	4b32      	ldr	r3, [pc, #200]	; (15ed0 <xQueueReceive+0x23c>)
   15e08:	4798      	blx	r3
   15e0a:	4b32      	ldr	r3, [pc, #200]	; (15ed4 <xQueueReceive+0x240>)
   15e0c:	4798      	blx	r3
   15e0e:	4d32      	ldr	r5, [pc, #200]	; (15ed8 <xQueueReceive+0x244>)
   15e10:	4e33      	ldr	r6, [pc, #204]	; (15ee0 <xQueueReceive+0x24c>)
   15e12:	882b      	ldrh	r3, [r5, #0]
   15e14:	4203      	tst	r3, r0
   15e16:	d016      	beq.n	15e46 <xQueueReceive+0x1b2>
   15e18:	4b30      	ldr	r3, [pc, #192]	; (15edc <xQueueReceive+0x248>)
   15e1a:	0020      	movs	r0, r4
   15e1c:	4798      	blx	r3
   15e1e:	882b      	ldrh	r3, [r5, #0]
   15e20:	4203      	tst	r3, r0
   15e22:	d010      	beq.n	15e46 <xQueueReceive+0x1b2>
   15e24:	0020      	movs	r0, r4
   15e26:	47b0      	blx	r6
   15e28:	4f2e      	ldr	r7, [pc, #184]	; (15ee4 <xQueueReceive+0x250>)
   15e2a:	5c3d      	ldrb	r5, [r7, r0]
   15e2c:	0020      	movs	r0, r4
   15e2e:	47b0      	blx	r6
   15e30:	4b2d      	ldr	r3, [pc, #180]	; (15ee8 <xQueueReceive+0x254>)
   15e32:	5c3f      	ldrb	r7, [r7, r0]
   15e34:	0020      	movs	r0, r4
   15e36:	4798      	blx	r3
   15e38:	3528      	adds	r5, #40	; 0x28
   15e3a:	b2ed      	uxtb	r5, r5
   15e3c:	b2c2      	uxtb	r2, r0
   15e3e:	0039      	movs	r1, r7
   15e40:	0028      	movs	r0, r5
   15e42:	4b2a      	ldr	r3, [pc, #168]	; (15eec <xQueueReceive+0x258>)
   15e44:	4798      	blx	r3
   15e46:	0020      	movs	r0, r4
   15e48:	47b0      	blx	r6
   15e4a:	4d26      	ldr	r5, [pc, #152]	; (15ee4 <xQueueReceive+0x250>)
   15e4c:	4b26      	ldr	r3, [pc, #152]	; (15ee8 <xQueueReceive+0x254>)
   15e4e:	5c2f      	ldrb	r7, [r5, r0]
   15e50:	0020      	movs	r0, r4
   15e52:	4798      	blx	r3
   15e54:	b2c3      	uxtb	r3, r0
   15e56:	0020      	movs	r0, r4
   15e58:	9302      	str	r3, [sp, #8]
   15e5a:	47b0      	blx	r6
   15e5c:	5c2b      	ldrb	r3, [r5, r0]
   15e5e:	2b02      	cmp	r3, #2
   15e60:	d000      	beq.n	15e64 <xQueueReceive+0x1d0>
   15e62:	e729      	b.n	15cb8 <xQueueReceive+0x24>
   15e64:	4b1a      	ldr	r3, [pc, #104]	; (15ed0 <xQueueReceive+0x23c>)
   15e66:	4798      	blx	r3
   15e68:	4b27      	ldr	r3, [pc, #156]	; (15f08 <xQueueReceive+0x274>)
   15e6a:	4798      	blx	r3
   15e6c:	b2c2      	uxtb	r2, r0
   15e6e:	4b2c      	ldr	r3, [pc, #176]	; (15f20 <xQueueReceive+0x28c>)
   15e70:	9902      	ldr	r1, [sp, #8]
   15e72:	0038      	movs	r0, r7
   15e74:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   15e76:	9b01      	ldr	r3, [sp, #4]
   15e78:	3b01      	subs	r3, #1
   15e7a:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   15e7c:	6923      	ldr	r3, [r4, #16]
   15e7e:	2b00      	cmp	r3, #0
   15e80:	d007      	beq.n	15e92 <xQueueReceive+0x1fe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   15e82:	0020      	movs	r0, r4
   15e84:	4b27      	ldr	r3, [pc, #156]	; (15f24 <xQueueReceive+0x290>)
   15e86:	3010      	adds	r0, #16
   15e88:	4798      	blx	r3
   15e8a:	2800      	cmp	r0, #0
   15e8c:	d001      	beq.n	15e92 <xQueueReceive+0x1fe>
						queueYIELD_IF_USING_PREEMPTION();
   15e8e:	4b21      	ldr	r3, [pc, #132]	; (15f14 <xQueueReceive+0x280>)
   15e90:	4798      	blx	r3
				taskEXIT_CRITICAL();
   15e92:	4b0e      	ldr	r3, [pc, #56]	; (15ecc <xQueueReceive+0x238>)
   15e94:	4798      	blx	r3
				return pdPASS;
   15e96:	2001      	movs	r0, #1
}
   15e98:	b007      	add	sp, #28
   15e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
   15e9c:	0020      	movs	r0, r4
   15e9e:	47b8      	blx	r7
				( void ) xTaskResumeAll();
   15ea0:	47b0      	blx	r6
   15ea2:	e7a4      	b.n	15dee <xQueueReceive+0x15a>
			prvUnlockQueue( pxQueue );
   15ea4:	0020      	movs	r0, r4
   15ea6:	47b8      	blx	r7
			( void ) xTaskResumeAll();
   15ea8:	47b0      	blx	r6
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   15eaa:	0020      	movs	r0, r4
   15eac:	47a8      	blx	r5
   15eae:	2800      	cmp	r0, #0
   15eb0:	d09d      	beq.n	15dee <xQueueReceive+0x15a>
   15eb2:	e70b      	b.n	15ccc <xQueueReceive+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   15eb4:	4b1c      	ldr	r3, [pc, #112]	; (15f28 <xQueueReceive+0x294>)
   15eb6:	4798      	blx	r3
   15eb8:	2500      	movs	r5, #0
   15eba:	2800      	cmp	r0, #0
   15ebc:	d198      	bne.n	15df0 <xQueueReceive+0x15c>
   15ebe:	9d03      	ldr	r5, [sp, #12]
   15ec0:	2d00      	cmp	r5, #0
   15ec2:	d100      	bne.n	15ec6 <xQueueReceive+0x232>
   15ec4:	e794      	b.n	15df0 <xQueueReceive+0x15c>
   15ec6:	b672      	cpsid	i
   15ec8:	e7fe      	b.n	15ec8 <xQueueReceive+0x234>
   15eca:	46c0      	nop			; (mov r8, r8)
   15ecc:	00015199 	.word	0x00015199
   15ed0:	00014125 	.word	0x00014125
   15ed4:	00013fa9 	.word	0x00013fa9
   15ed8:	20000054 	.word	0x20000054
   15edc:	00014009 	.word	0x00014009
   15ee0:	00013f8d 	.word	0x00013f8d
   15ee4:	2000004c 	.word	0x2000004c
   15ee8:	00013ff9 	.word	0x00013ff9
   15eec:	00014c41 	.word	0x00014c41
   15ef0:	00016d09 	.word	0x00016d09
   15ef4:	000166a1 	.word	0x000166a1
   15ef8:	00016d21 	.word	0x00016d21
   15efc:	000152e9 	.word	0x000152e9
   15f00:	000154b1 	.word	0x000154b1
   15f04:	00016829 	.word	0x00016829
   15f08:	00013f99 	.word	0x00013f99
   15f0c:	000147a1 	.word	0x000147a1
   15f10:	00016ba1 	.word	0x00016ba1
   15f14:	00015171 	.word	0x00015171
   15f18:	00015181 	.word	0x00015181
   15f1c:	00015489 	.word	0x00015489
   15f20:	0001474d 	.word	0x0001474d
   15f24:	00016c61 	.word	0x00016c61
   15f28:	00016ddd 	.word	0x00016ddd

00015f2c <xQueueSemaphoreTake>:
{
   15f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f2e:	b087      	sub	sp, #28
   15f30:	1e04      	subs	r4, r0, #0
   15f32:	9103      	str	r1, [sp, #12]
	configASSERT( ( pxQueue ) );
   15f34:	d101      	bne.n	15f3a <xQueueSemaphoreTake+0xe>
   15f36:	b672      	cpsid	i
   15f38:	e7fe      	b.n	15f38 <xQueueSemaphoreTake+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
   15f3a:	6c07      	ldr	r7, [r0, #64]	; 0x40
   15f3c:	2f00      	cmp	r7, #0
   15f3e:	d001      	beq.n	15f44 <xQueueSemaphoreTake+0x18>
   15f40:	b672      	cpsid	i
   15f42:	e7fe      	b.n	15f42 <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   15f44:	4ba6      	ldr	r3, [pc, #664]	; (161e0 <xQueueSemaphoreTake+0x2b4>)
   15f46:	4798      	blx	r3
   15f48:	2800      	cmp	r0, #0
   15f4a:	d103      	bne.n	15f54 <xQueueSemaphoreTake+0x28>
   15f4c:	9f03      	ldr	r7, [sp, #12]
   15f4e:	2f00      	cmp	r7, #0
   15f50:	d000      	beq.n	15f54 <xQueueSemaphoreTake+0x28>
   15f52:	e143      	b.n	161dc <xQueueSemaphoreTake+0x2b0>
   15f54:	003d      	movs	r5, r7
		taskENTER_CRITICAL();
   15f56:	4ba3      	ldr	r3, [pc, #652]	; (161e4 <xQueueSemaphoreTake+0x2b8>)
   15f58:	4798      	blx	r3
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   15f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15f5c:	9301      	str	r3, [sp, #4]
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   15f5e:	2b00      	cmp	r3, #0
   15f60:	d054      	beq.n	1600c <xQueueSemaphoreTake+0xe0>
				traceQUEUE_RECEIVE( pxQueue );
   15f62:	4ba1      	ldr	r3, [pc, #644]	; (161e8 <xQueueSemaphoreTake+0x2bc>)
   15f64:	4798      	blx	r3
   15f66:	4ba1      	ldr	r3, [pc, #644]	; (161ec <xQueueSemaphoreTake+0x2c0>)
   15f68:	4798      	blx	r3
   15f6a:	4da1      	ldr	r5, [pc, #644]	; (161f0 <xQueueSemaphoreTake+0x2c4>)
   15f6c:	4ea1      	ldr	r6, [pc, #644]	; (161f4 <xQueueSemaphoreTake+0x2c8>)
   15f6e:	882b      	ldrh	r3, [r5, #0]
   15f70:	4203      	tst	r3, r0
   15f72:	d016      	beq.n	15fa2 <xQueueSemaphoreTake+0x76>
   15f74:	4ba0      	ldr	r3, [pc, #640]	; (161f8 <xQueueSemaphoreTake+0x2cc>)
   15f76:	0020      	movs	r0, r4
   15f78:	4798      	blx	r3
   15f7a:	882b      	ldrh	r3, [r5, #0]
   15f7c:	4203      	tst	r3, r0
   15f7e:	d010      	beq.n	15fa2 <xQueueSemaphoreTake+0x76>
   15f80:	0020      	movs	r0, r4
   15f82:	47b0      	blx	r6
   15f84:	4f9d      	ldr	r7, [pc, #628]	; (161fc <xQueueSemaphoreTake+0x2d0>)
   15f86:	5c3d      	ldrb	r5, [r7, r0]
   15f88:	0020      	movs	r0, r4
   15f8a:	47b0      	blx	r6
   15f8c:	4b9c      	ldr	r3, [pc, #624]	; (16200 <xQueueSemaphoreTake+0x2d4>)
   15f8e:	5c3f      	ldrb	r7, [r7, r0]
   15f90:	0020      	movs	r0, r4
   15f92:	4798      	blx	r3
   15f94:	3528      	adds	r5, #40	; 0x28
   15f96:	b2ed      	uxtb	r5, r5
   15f98:	b2c2      	uxtb	r2, r0
   15f9a:	0039      	movs	r1, r7
   15f9c:	0028      	movs	r0, r5
   15f9e:	4b99      	ldr	r3, [pc, #612]	; (16204 <xQueueSemaphoreTake+0x2d8>)
   15fa0:	4798      	blx	r3
   15fa2:	0020      	movs	r0, r4
   15fa4:	47b0      	blx	r6
   15fa6:	4d95      	ldr	r5, [pc, #596]	; (161fc <xQueueSemaphoreTake+0x2d0>)
   15fa8:	4b95      	ldr	r3, [pc, #596]	; (16200 <xQueueSemaphoreTake+0x2d4>)
   15faa:	5c2f      	ldrb	r7, [r5, r0]
   15fac:	0020      	movs	r0, r4
   15fae:	4798      	blx	r3
   15fb0:	b2c3      	uxtb	r3, r0
   15fb2:	0020      	movs	r0, r4
   15fb4:	9302      	str	r3, [sp, #8]
   15fb6:	47b0      	blx	r6
   15fb8:	5c2b      	ldrb	r3, [r5, r0]
   15fba:	2b02      	cmp	r3, #2
   15fbc:	d122      	bne.n	16004 <xQueueSemaphoreTake+0xd8>
   15fbe:	4b8a      	ldr	r3, [pc, #552]	; (161e8 <xQueueSemaphoreTake+0x2bc>)
   15fc0:	4798      	blx	r3
   15fc2:	4b91      	ldr	r3, [pc, #580]	; (16208 <xQueueSemaphoreTake+0x2dc>)
   15fc4:	4798      	blx	r3
   15fc6:	b2c2      	uxtb	r2, r0
   15fc8:	4b90      	ldr	r3, [pc, #576]	; (1620c <xQueueSemaphoreTake+0x2e0>)
   15fca:	9902      	ldr	r1, [sp, #8]
   15fcc:	0038      	movs	r0, r7
   15fce:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   15fd0:	9b01      	ldr	r3, [sp, #4]
   15fd2:	3b01      	subs	r3, #1
   15fd4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   15fd6:	6823      	ldr	r3, [r4, #0]
   15fd8:	2b00      	cmp	r3, #0
   15fda:	d102      	bne.n	15fe2 <xQueueSemaphoreTake+0xb6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   15fdc:	4b8c      	ldr	r3, [pc, #560]	; (16210 <xQueueSemaphoreTake+0x2e4>)
   15fde:	4798      	blx	r3
   15fe0:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   15fe2:	6923      	ldr	r3, [r4, #16]
   15fe4:	2b00      	cmp	r3, #0
   15fe6:	d007      	beq.n	15ff8 <xQueueSemaphoreTake+0xcc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   15fe8:	0020      	movs	r0, r4
   15fea:	4b8a      	ldr	r3, [pc, #552]	; (16214 <xQueueSemaphoreTake+0x2e8>)
   15fec:	3010      	adds	r0, #16
   15fee:	4798      	blx	r3
   15ff0:	2800      	cmp	r0, #0
   15ff2:	d001      	beq.n	15ff8 <xQueueSemaphoreTake+0xcc>
						queueYIELD_IF_USING_PREEMPTION();
   15ff4:	4b88      	ldr	r3, [pc, #544]	; (16218 <xQueueSemaphoreTake+0x2ec>)
   15ff6:	4798      	blx	r3
				taskEXIT_CRITICAL();
   15ff8:	4b88      	ldr	r3, [pc, #544]	; (1621c <xQueueSemaphoreTake+0x2f0>)
   15ffa:	4798      	blx	r3
				return pdPASS;
   15ffc:	2701      	movs	r7, #1
}
   15ffe:	0038      	movs	r0, r7
   16000:	b007      	add	sp, #28
   16002:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
   16004:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   16006:	3a01      	subs	r2, #1
   16008:	b2d2      	uxtb	r2, r2
   1600a:	e7dd      	b.n	15fc8 <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
   1600c:	9b03      	ldr	r3, [sp, #12]
   1600e:	2b00      	cmp	r3, #0
   16010:	d129      	bne.n	16066 <xQueueSemaphoreTake+0x13a>
						configASSERT( xInheritanceOccurred == pdFALSE );
   16012:	2f00      	cmp	r7, #0
   16014:	d001      	beq.n	1601a <xQueueSemaphoreTake+0xee>
   16016:	b672      	cpsid	i
   16018:	e7fe      	b.n	16018 <xQueueSemaphoreTake+0xec>
					taskEXIT_CRITICAL();
   1601a:	4b80      	ldr	r3, [pc, #512]	; (1621c <xQueueSemaphoreTake+0x2f0>)
   1601c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1601e:	4b72      	ldr	r3, [pc, #456]	; (161e8 <xQueueSemaphoreTake+0x2bc>)
   16020:	4798      	blx	r3
   16022:	4b72      	ldr	r3, [pc, #456]	; (161ec <xQueueSemaphoreTake+0x2c0>)
   16024:	4798      	blx	r3
   16026:	4d72      	ldr	r5, [pc, #456]	; (161f0 <xQueueSemaphoreTake+0x2c4>)
   16028:	882b      	ldrh	r3, [r5, #0]
   1602a:	4203      	tst	r3, r0
   1602c:	d101      	bne.n	16032 <xQueueSemaphoreTake+0x106>
				return errQUEUE_EMPTY;
   1602e:	2700      	movs	r7, #0
   16030:	e7e5      	b.n	15ffe <xQueueSemaphoreTake+0xd2>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   16032:	4b71      	ldr	r3, [pc, #452]	; (161f8 <xQueueSemaphoreTake+0x2cc>)
   16034:	0020      	movs	r0, r4
   16036:	4798      	blx	r3
   16038:	882b      	ldrh	r3, [r5, #0]
   1603a:	4203      	tst	r3, r0
   1603c:	d0f7      	beq.n	1602e <xQueueSemaphoreTake+0x102>
   1603e:	0020      	movs	r0, r4
   16040:	4b6c      	ldr	r3, [pc, #432]	; (161f4 <xQueueSemaphoreTake+0x2c8>)
   16042:	4798      	blx	r3
   16044:	4e6d      	ldr	r6, [pc, #436]	; (161fc <xQueueSemaphoreTake+0x2d0>)
   16046:	4b6b      	ldr	r3, [pc, #428]	; (161f4 <xQueueSemaphoreTake+0x2c8>)
   16048:	5c35      	ldrb	r5, [r6, r0]
   1604a:	0020      	movs	r0, r4
   1604c:	4798      	blx	r3
   1604e:	4b6c      	ldr	r3, [pc, #432]	; (16200 <xQueueSemaphoreTake+0x2d4>)
   16050:	5c36      	ldrb	r6, [r6, r0]
   16052:	0020      	movs	r0, r4
   16054:	4798      	blx	r3
   16056:	3550      	adds	r5, #80	; 0x50
   16058:	b2ed      	uxtb	r5, r5
   1605a:	b2c2      	uxtb	r2, r0
   1605c:	0031      	movs	r1, r6
   1605e:	0028      	movs	r0, r5
   16060:	4b68      	ldr	r3, [pc, #416]	; (16204 <xQueueSemaphoreTake+0x2d8>)
   16062:	4798      	blx	r3
   16064:	e7cb      	b.n	15ffe <xQueueSemaphoreTake+0xd2>
				else if( xEntryTimeSet == pdFALSE )
   16066:	2d00      	cmp	r5, #0
   16068:	d102      	bne.n	16070 <xQueueSemaphoreTake+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
   1606a:	a804      	add	r0, sp, #16
   1606c:	4b6c      	ldr	r3, [pc, #432]	; (16220 <xQueueSemaphoreTake+0x2f4>)
   1606e:	4798      	blx	r3
		taskEXIT_CRITICAL();
   16070:	4b6a      	ldr	r3, [pc, #424]	; (1621c <xQueueSemaphoreTake+0x2f0>)
   16072:	4798      	blx	r3
		vTaskSuspendAll();
   16074:	4b6b      	ldr	r3, [pc, #428]	; (16224 <xQueueSemaphoreTake+0x2f8>)
   16076:	4798      	blx	r3
		prvLockQueue( pxQueue );
   16078:	4b5a      	ldr	r3, [pc, #360]	; (161e4 <xQueueSemaphoreTake+0x2b8>)
   1607a:	4798      	blx	r3
   1607c:	0022      	movs	r2, r4
   1607e:	3244      	adds	r2, #68	; 0x44
   16080:	7813      	ldrb	r3, [r2, #0]
   16082:	b25b      	sxtb	r3, r3
   16084:	3301      	adds	r3, #1
   16086:	d101      	bne.n	1608c <xQueueSemaphoreTake+0x160>
   16088:	2300      	movs	r3, #0
   1608a:	7013      	strb	r3, [r2, #0]
   1608c:	0022      	movs	r2, r4
   1608e:	3245      	adds	r2, #69	; 0x45
   16090:	7813      	ldrb	r3, [r2, #0]
   16092:	b25b      	sxtb	r3, r3
   16094:	3301      	adds	r3, #1
   16096:	d101      	bne.n	1609c <xQueueSemaphoreTake+0x170>
   16098:	2300      	movs	r3, #0
   1609a:	7013      	strb	r3, [r2, #0]
   1609c:	4b5f      	ldr	r3, [pc, #380]	; (1621c <xQueueSemaphoreTake+0x2f0>)
   1609e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   160a0:	a903      	add	r1, sp, #12
   160a2:	a804      	add	r0, sp, #16
   160a4:	4b60      	ldr	r3, [pc, #384]	; (16228 <xQueueSemaphoreTake+0x2fc>)
   160a6:	4798      	blx	r3
   160a8:	4d60      	ldr	r5, [pc, #384]	; (1622c <xQueueSemaphoreTake+0x300>)
   160aa:	4e61      	ldr	r6, [pc, #388]	; (16230 <xQueueSemaphoreTake+0x304>)
   160ac:	2800      	cmp	r0, #0
   160ae:	d159      	bne.n	16164 <xQueueSemaphoreTake+0x238>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   160b0:	0020      	movs	r0, r4
   160b2:	47a8      	blx	r5
   160b4:	2800      	cmp	r0, #0
   160b6:	d050      	beq.n	1615a <xQueueSemaphoreTake+0x22e>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   160b8:	4b4b      	ldr	r3, [pc, #300]	; (161e8 <xQueueSemaphoreTake+0x2bc>)
   160ba:	4798      	blx	r3
   160bc:	4b4b      	ldr	r3, [pc, #300]	; (161ec <xQueueSemaphoreTake+0x2c0>)
   160be:	4798      	blx	r3
   160c0:	4d4b      	ldr	r5, [pc, #300]	; (161f0 <xQueueSemaphoreTake+0x2c4>)
   160c2:	882b      	ldrh	r3, [r5, #0]
   160c4:	4203      	tst	r3, r0
   160c6:	d018      	beq.n	160fa <xQueueSemaphoreTake+0x1ce>
   160c8:	4b4b      	ldr	r3, [pc, #300]	; (161f8 <xQueueSemaphoreTake+0x2cc>)
   160ca:	0020      	movs	r0, r4
   160cc:	4798      	blx	r3
   160ce:	882b      	ldrh	r3, [r5, #0]
   160d0:	4203      	tst	r3, r0
   160d2:	d012      	beq.n	160fa <xQueueSemaphoreTake+0x1ce>
   160d4:	4e47      	ldr	r6, [pc, #284]	; (161f4 <xQueueSemaphoreTake+0x2c8>)
   160d6:	0020      	movs	r0, r4
   160d8:	47b0      	blx	r6
   160da:	4d48      	ldr	r5, [pc, #288]	; (161fc <xQueueSemaphoreTake+0x2d0>)
   160dc:	5c2b      	ldrb	r3, [r5, r0]
   160de:	0020      	movs	r0, r4
   160e0:	3368      	adds	r3, #104	; 0x68
   160e2:	b2db      	uxtb	r3, r3
   160e4:	9301      	str	r3, [sp, #4]
   160e6:	47b0      	blx	r6
   160e8:	4b45      	ldr	r3, [pc, #276]	; (16200 <xQueueSemaphoreTake+0x2d4>)
   160ea:	5c2d      	ldrb	r5, [r5, r0]
   160ec:	0020      	movs	r0, r4
   160ee:	4798      	blx	r3
   160f0:	0029      	movs	r1, r5
   160f2:	b2c2      	uxtb	r2, r0
   160f4:	4b43      	ldr	r3, [pc, #268]	; (16204 <xQueueSemaphoreTake+0x2d8>)
   160f6:	9801      	ldr	r0, [sp, #4]
   160f8:	4798      	blx	r3
   160fa:	4b3e      	ldr	r3, [pc, #248]	; (161f4 <xQueueSemaphoreTake+0x2c8>)
   160fc:	0020      	movs	r0, r4
   160fe:	4798      	blx	r3
   16100:	4b3e      	ldr	r3, [pc, #248]	; (161fc <xQueueSemaphoreTake+0x2d0>)
   16102:	5c1b      	ldrb	r3, [r3, r0]
   16104:	2b02      	cmp	r3, #2
   16106:	d00d      	beq.n	16124 <xQueueSemaphoreTake+0x1f8>
   16108:	4d37      	ldr	r5, [pc, #220]	; (161e8 <xQueueSemaphoreTake+0x2bc>)
   1610a:	47a8      	blx	r5
   1610c:	4b37      	ldr	r3, [pc, #220]	; (161ec <xQueueSemaphoreTake+0x2c0>)
   1610e:	4798      	blx	r3
   16110:	4b37      	ldr	r3, [pc, #220]	; (161f0 <xQueueSemaphoreTake+0x2c4>)
   16112:	881b      	ldrh	r3, [r3, #0]
   16114:	4203      	tst	r3, r0
   16116:	d005      	beq.n	16124 <xQueueSemaphoreTake+0x1f8>
   16118:	47a8      	blx	r5
   1611a:	4b3b      	ldr	r3, [pc, #236]	; (16208 <xQueueSemaphoreTake+0x2dc>)
   1611c:	4798      	blx	r3
   1611e:	4b45      	ldr	r3, [pc, #276]	; (16234 <xQueueSemaphoreTake+0x308>)
   16120:	b2c0      	uxtb	r0, r0
   16122:	4798      	blx	r3
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   16124:	6823      	ldr	r3, [r4, #0]
   16126:	2b00      	cmp	r3, #0
   16128:	d107      	bne.n	1613a <xQueueSemaphoreTake+0x20e>
						taskENTER_CRITICAL();
   1612a:	4b2e      	ldr	r3, [pc, #184]	; (161e4 <xQueueSemaphoreTake+0x2b8>)
   1612c:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1612e:	4b42      	ldr	r3, [pc, #264]	; (16238 <xQueueSemaphoreTake+0x30c>)
   16130:	6860      	ldr	r0, [r4, #4]
   16132:	4798      	blx	r3
						taskEXIT_CRITICAL();
   16134:	4b39      	ldr	r3, [pc, #228]	; (1621c <xQueueSemaphoreTake+0x2f0>)
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   16136:	0007      	movs	r7, r0
						taskEXIT_CRITICAL();
   16138:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1613a:	0020      	movs	r0, r4
   1613c:	9903      	ldr	r1, [sp, #12]
   1613e:	3024      	adds	r0, #36	; 0x24
   16140:	4b3e      	ldr	r3, [pc, #248]	; (1623c <xQueueSemaphoreTake+0x310>)
   16142:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   16144:	4b3e      	ldr	r3, [pc, #248]	; (16240 <xQueueSemaphoreTake+0x314>)
   16146:	0020      	movs	r0, r4
   16148:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1614a:	4b39      	ldr	r3, [pc, #228]	; (16230 <xQueueSemaphoreTake+0x304>)
   1614c:	4798      	blx	r3
   1614e:	2800      	cmp	r0, #0
   16150:	d101      	bne.n	16156 <xQueueSemaphoreTake+0x22a>
					portYIELD_WITHIN_API();
   16152:	4b31      	ldr	r3, [pc, #196]	; (16218 <xQueueSemaphoreTake+0x2ec>)
   16154:	4798      	blx	r3
   16156:	2501      	movs	r5, #1
   16158:	e6fd      	b.n	15f56 <xQueueSemaphoreTake+0x2a>
				prvUnlockQueue( pxQueue );
   1615a:	0020      	movs	r0, r4
   1615c:	4b38      	ldr	r3, [pc, #224]	; (16240 <xQueueSemaphoreTake+0x314>)
   1615e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   16160:	47b0      	blx	r6
   16162:	e7f8      	b.n	16156 <xQueueSemaphoreTake+0x22a>
			prvUnlockQueue( pxQueue );
   16164:	0020      	movs	r0, r4
   16166:	4b36      	ldr	r3, [pc, #216]	; (16240 <xQueueSemaphoreTake+0x314>)
   16168:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1616a:	47b0      	blx	r6
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1616c:	0020      	movs	r0, r4
   1616e:	47a8      	blx	r5
   16170:	2800      	cmp	r0, #0
   16172:	d0f0      	beq.n	16156 <xQueueSemaphoreTake+0x22a>
					if( xInheritanceOccurred != pdFALSE )
   16174:	2f00      	cmp	r7, #0
   16176:	d00e      	beq.n	16196 <xQueueSemaphoreTake+0x26a>
						taskENTER_CRITICAL();
   16178:	4b1a      	ldr	r3, [pc, #104]	; (161e4 <xQueueSemaphoreTake+0x2b8>)
   1617a:	4798      	blx	r3
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1617c:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1617e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16180:	428b      	cmp	r3, r1
   16182:	d003      	beq.n	1618c <xQueueSemaphoreTake+0x260>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   16184:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16186:	3105      	adds	r1, #5
   16188:	681b      	ldr	r3, [r3, #0]
   1618a:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1618c:	4b2d      	ldr	r3, [pc, #180]	; (16244 <xQueueSemaphoreTake+0x318>)
   1618e:	6860      	ldr	r0, [r4, #4]
   16190:	4798      	blx	r3
						taskEXIT_CRITICAL();
   16192:	4b22      	ldr	r3, [pc, #136]	; (1621c <xQueueSemaphoreTake+0x2f0>)
   16194:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   16196:	4b14      	ldr	r3, [pc, #80]	; (161e8 <xQueueSemaphoreTake+0x2bc>)
   16198:	4798      	blx	r3
   1619a:	4b14      	ldr	r3, [pc, #80]	; (161ec <xQueueSemaphoreTake+0x2c0>)
   1619c:	4798      	blx	r3
   1619e:	4d14      	ldr	r5, [pc, #80]	; (161f0 <xQueueSemaphoreTake+0x2c4>)
   161a0:	882b      	ldrh	r3, [r5, #0]
   161a2:	4203      	tst	r3, r0
   161a4:	d100      	bne.n	161a8 <xQueueSemaphoreTake+0x27c>
   161a6:	e742      	b.n	1602e <xQueueSemaphoreTake+0x102>
   161a8:	4b13      	ldr	r3, [pc, #76]	; (161f8 <xQueueSemaphoreTake+0x2cc>)
   161aa:	0020      	movs	r0, r4
   161ac:	4798      	blx	r3
   161ae:	882b      	ldrh	r3, [r5, #0]
   161b0:	4203      	tst	r3, r0
   161b2:	d100      	bne.n	161b6 <xQueueSemaphoreTake+0x28a>
   161b4:	e73b      	b.n	1602e <xQueueSemaphoreTake+0x102>
   161b6:	4f0f      	ldr	r7, [pc, #60]	; (161f4 <xQueueSemaphoreTake+0x2c8>)
   161b8:	0020      	movs	r0, r4
   161ba:	47b8      	blx	r7
   161bc:	4e0f      	ldr	r6, [pc, #60]	; (161fc <xQueueSemaphoreTake+0x2d0>)
   161be:	5c35      	ldrb	r5, [r6, r0]
   161c0:	0020      	movs	r0, r4
   161c2:	47b8      	blx	r7
   161c4:	4b0e      	ldr	r3, [pc, #56]	; (16200 <xQueueSemaphoreTake+0x2d4>)
   161c6:	5c36      	ldrb	r6, [r6, r0]
   161c8:	0020      	movs	r0, r4
   161ca:	4798      	blx	r3
   161cc:	3550      	adds	r5, #80	; 0x50
   161ce:	b2ed      	uxtb	r5, r5
   161d0:	b2c2      	uxtb	r2, r0
   161d2:	0031      	movs	r1, r6
   161d4:	0028      	movs	r0, r5
   161d6:	4b0b      	ldr	r3, [pc, #44]	; (16204 <xQueueSemaphoreTake+0x2d8>)
   161d8:	4798      	blx	r3
   161da:	e728      	b.n	1602e <xQueueSemaphoreTake+0x102>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   161dc:	b672      	cpsid	i
   161de:	e7fe      	b.n	161de <xQueueSemaphoreTake+0x2b2>
   161e0:	00016ddd 	.word	0x00016ddd
   161e4:	00015181 	.word	0x00015181
   161e8:	00014125 	.word	0x00014125
   161ec:	00013fa9 	.word	0x00013fa9
   161f0:	20000054 	.word	0x20000054
   161f4:	00013f8d 	.word	0x00013f8d
   161f8:	00014009 	.word	0x00014009
   161fc:	2000004c 	.word	0x2000004c
   16200:	00013ff9 	.word	0x00013ff9
   16204:	00014c41 	.word	0x00014c41
   16208:	00013f99 	.word	0x00013f99
   1620c:	0001474d 	.word	0x0001474d
   16210:	000170e5 	.word	0x000170e5
   16214:	00016c61 	.word	0x00016c61
   16218:	00015171 	.word	0x00015171
   1621c:	00015199 	.word	0x00015199
   16220:	00016d09 	.word	0x00016d09
   16224:	000166a1 	.word	0x000166a1
   16228:	00016d21 	.word	0x00016d21
   1622c:	000152e9 	.word	0x000152e9
   16230:	00016829 	.word	0x00016829
   16234:	000147a1 	.word	0x000147a1
   16238:	00016dfd 	.word	0x00016dfd
   1623c:	00016ba1 	.word	0x00016ba1
   16240:	000154b1 	.word	0x000154b1
   16244:	00016fed 	.word	0x00016fed

00016248 <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   16248:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
   1624a:	4770      	bx	lr

0001624c <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1624c:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
   1624e:	4770      	bx	lr

00016250 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   16250:	3050      	adds	r0, #80	; 0x50
   16252:	7800      	ldrb	r0, [r0, #0]
	}
   16254:	4770      	bx	lr
	...

00016258 <vQueueWaitForMessageRestricted>:
	{
   16258:	b570      	push	{r4, r5, r6, lr}
   1625a:	0004      	movs	r4, r0
		prvLockQueue( pxQueue );
   1625c:	4b11      	ldr	r3, [pc, #68]	; (162a4 <vQueueWaitForMessageRestricted+0x4c>)
	{
   1625e:	0016      	movs	r6, r2
   16260:	000d      	movs	r5, r1
		prvLockQueue( pxQueue );
   16262:	4798      	blx	r3
   16264:	0022      	movs	r2, r4
   16266:	3244      	adds	r2, #68	; 0x44
   16268:	7813      	ldrb	r3, [r2, #0]
   1626a:	b25b      	sxtb	r3, r3
   1626c:	3301      	adds	r3, #1
   1626e:	d101      	bne.n	16274 <vQueueWaitForMessageRestricted+0x1c>
   16270:	2300      	movs	r3, #0
   16272:	7013      	strb	r3, [r2, #0]
   16274:	0022      	movs	r2, r4
   16276:	3245      	adds	r2, #69	; 0x45
   16278:	7813      	ldrb	r3, [r2, #0]
   1627a:	b25b      	sxtb	r3, r3
   1627c:	3301      	adds	r3, #1
   1627e:	d101      	bne.n	16284 <vQueueWaitForMessageRestricted+0x2c>
   16280:	2300      	movs	r3, #0
   16282:	7013      	strb	r3, [r2, #0]
   16284:	4b08      	ldr	r3, [pc, #32]	; (162a8 <vQueueWaitForMessageRestricted+0x50>)
   16286:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   16288:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1628a:	2b00      	cmp	r3, #0
   1628c:	d105      	bne.n	1629a <vQueueWaitForMessageRestricted+0x42>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1628e:	0020      	movs	r0, r4
   16290:	0032      	movs	r2, r6
   16292:	0029      	movs	r1, r5
   16294:	3024      	adds	r0, #36	; 0x24
   16296:	4b05      	ldr	r3, [pc, #20]	; (162ac <vQueueWaitForMessageRestricted+0x54>)
   16298:	4798      	blx	r3
		prvUnlockQueue( pxQueue );
   1629a:	0020      	movs	r0, r4
   1629c:	4b04      	ldr	r3, [pc, #16]	; (162b0 <vQueueWaitForMessageRestricted+0x58>)
   1629e:	4798      	blx	r3
	}
   162a0:	bd70      	pop	{r4, r5, r6, pc}
   162a2:	46c0      	nop			; (mov r8, r8)
   162a4:	00015181 	.word	0x00015181
   162a8:	00015199 	.word	0x00015199
   162ac:	00016bcd 	.word	0x00016bcd
   162b0:	000154b1 	.word	0x000154b1

000162b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   162b4:	4a07      	ldr	r2, [pc, #28]	; (162d4 <prvResetNextTaskUnblockTime+0x20>)
   162b6:	6813      	ldr	r3, [r2, #0]
   162b8:	6819      	ldr	r1, [r3, #0]
   162ba:	4b07      	ldr	r3, [pc, #28]	; (162d8 <prvResetNextTaskUnblockTime+0x24>)
   162bc:	2900      	cmp	r1, #0
   162be:	d103      	bne.n	162c8 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   162c0:	2201      	movs	r2, #1
   162c2:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   162c4:	601a      	str	r2, [r3, #0]
	}
}
   162c6:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   162c8:	6812      	ldr	r2, [r2, #0]
   162ca:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   162cc:	68d2      	ldr	r2, [r2, #12]
   162ce:	6852      	ldr	r2, [r2, #4]
   162d0:	e7f8      	b.n	162c4 <prvResetNextTaskUnblockTime+0x10>
   162d2:	46c0      	nop			; (mov r8, r8)
   162d4:	200033d8 	.word	0x200033d8
   162d8:	20003488 	.word	0x20003488

000162dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   162dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   162de:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   162e0:	4b13      	ldr	r3, [pc, #76]	; (16330 <prvAddCurrentTaskToDelayedList+0x54>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   162e2:	4d14      	ldr	r5, [pc, #80]	; (16334 <prvAddCurrentTaskToDelayedList+0x58>)
const TickType_t xConstTickCount = xTickCount;
   162e4:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   162e6:	6828      	ldr	r0, [r5, #0]
   162e8:	4b13      	ldr	r3, [pc, #76]	; (16338 <prvAddCurrentTaskToDelayedList+0x5c>)
   162ea:	3004      	adds	r0, #4
{
   162ec:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   162ee:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   162f0:	1c63      	adds	r3, r4, #1
   162f2:	d107      	bne.n	16304 <prvAddCurrentTaskToDelayedList+0x28>
   162f4:	2f00      	cmp	r7, #0
   162f6:	d005      	beq.n	16304 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   162f8:	6829      	ldr	r1, [r5, #0]
   162fa:	4810      	ldr	r0, [pc, #64]	; (1633c <prvAddCurrentTaskToDelayedList+0x60>)
   162fc:	4b10      	ldr	r3, [pc, #64]	; (16340 <prvAddCurrentTaskToDelayedList+0x64>)
   162fe:	3104      	adds	r1, #4

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   16300:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   16302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   16304:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
   16306:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   16308:	605c      	str	r4, [r3, #4]
   1630a:	4b0e      	ldr	r3, [pc, #56]	; (16344 <prvAddCurrentTaskToDelayedList+0x68>)
			if( xTimeToWake < xConstTickCount )
   1630c:	42a6      	cmp	r6, r4
   1630e:	d904      	bls.n	1631a <prvAddCurrentTaskToDelayedList+0x3e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   16310:	4a0d      	ldr	r2, [pc, #52]	; (16348 <prvAddCurrentTaskToDelayedList+0x6c>)
   16312:	6810      	ldr	r0, [r2, #0]
   16314:	6829      	ldr	r1, [r5, #0]
   16316:	3104      	adds	r1, #4
   16318:	e7f2      	b.n	16300 <prvAddCurrentTaskToDelayedList+0x24>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1631a:	4a0c      	ldr	r2, [pc, #48]	; (1634c <prvAddCurrentTaskToDelayedList+0x70>)
   1631c:	6810      	ldr	r0, [r2, #0]
   1631e:	6829      	ldr	r1, [r5, #0]
   16320:	3104      	adds	r1, #4
   16322:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   16324:	4b0a      	ldr	r3, [pc, #40]	; (16350 <prvAddCurrentTaskToDelayedList+0x74>)
   16326:	681a      	ldr	r2, [r3, #0]
   16328:	4294      	cmp	r4, r2
   1632a:	d2ea      	bcs.n	16302 <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
   1632c:	601c      	str	r4, [r3, #0]
}
   1632e:	e7e8      	b.n	16302 <prvAddCurrentTaskToDelayedList+0x26>
   16330:	200034d0 	.word	0x200034d0
   16334:	200033d4 	.word	0x200033d4
   16338:	0001504f 	.word	0x0001504f
   1633c:	200034a8 	.word	0x200034a8
   16340:	00015009 	.word	0x00015009
   16344:	00015021 	.word	0x00015021
   16348:	200033dc 	.word	0x200033dc
   1634c:	200033d8 	.word	0x200033d8
   16350:	20003488 	.word	0x20003488

00016354 <prvIdleTask>:
{
   16354:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   16356:	4c11      	ldr	r4, [pc, #68]	; (1639c <prvIdleTask+0x48>)
   16358:	6823      	ldr	r3, [r4, #0]
   1635a:	2b00      	cmp	r3, #0
   1635c:	d106      	bne.n	1636c <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1635e:	4b10      	ldr	r3, [pc, #64]	; (163a0 <prvIdleTask+0x4c>)
   16360:	681b      	ldr	r3, [r3, #0]
   16362:	2b01      	cmp	r3, #1
   16364:	d9f7      	bls.n	16356 <prvIdleTask+0x2>
				taskYIELD();
   16366:	4b0f      	ldr	r3, [pc, #60]	; (163a4 <prvIdleTask+0x50>)
   16368:	4798      	blx	r3
   1636a:	e7f4      	b.n	16356 <prvIdleTask+0x2>
			taskENTER_CRITICAL();
   1636c:	4b0e      	ldr	r3, [pc, #56]	; (163a8 <prvIdleTask+0x54>)
   1636e:	4798      	blx	r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   16370:	4b0e      	ldr	r3, [pc, #56]	; (163ac <prvIdleTask+0x58>)
   16372:	68db      	ldr	r3, [r3, #12]
   16374:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   16376:	4b0e      	ldr	r3, [pc, #56]	; (163b0 <prvIdleTask+0x5c>)
   16378:	1d28      	adds	r0, r5, #4
   1637a:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1637c:	4a0d      	ldr	r2, [pc, #52]	; (163b4 <prvIdleTask+0x60>)
   1637e:	6813      	ldr	r3, [r2, #0]
   16380:	3b01      	subs	r3, #1
   16382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
   16384:	6823      	ldr	r3, [r4, #0]
   16386:	3b01      	subs	r3, #1
   16388:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
   1638a:	4b0b      	ldr	r3, [pc, #44]	; (163b8 <prvIdleTask+0x64>)
   1638c:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
   1638e:	6b28      	ldr	r0, [r5, #48]	; 0x30
   16390:	4c0a      	ldr	r4, [pc, #40]	; (163bc <prvIdleTask+0x68>)
   16392:	47a0      	blx	r4
			vPortFree( pxTCB );
   16394:	0028      	movs	r0, r5
   16396:	47a0      	blx	r4
   16398:	e7dd      	b.n	16356 <prvIdleTask+0x2>
   1639a:	46c0      	nop			; (mov r8, r8)
   1639c:	20003448 	.word	0x20003448
   163a0:	200033e0 	.word	0x200033e0
   163a4:	00015171 	.word	0x00015171
   163a8:	00015181 	.word	0x00015181
   163ac:	200034bc 	.word	0x200034bc
   163b0:	0001504f 	.word	0x0001504f
   163b4:	20003444 	.word	0x20003444
   163b8:	00015199 	.word	0x00015199
   163bc:	000152c9 	.word	0x000152c9

000163c0 <xTaskCreate>:
	{
   163c0:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   163c2:	0095      	lsls	r5, r2, #2
	{
   163c4:	b085      	sub	sp, #20
   163c6:	9001      	str	r0, [sp, #4]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   163c8:	4c77      	ldr	r4, [pc, #476]	; (165a8 <xTaskCreate+0x1e8>)
   163ca:	0028      	movs	r0, r5
	{
   163cc:	000f      	movs	r7, r1
   163ce:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   163d0:	47a0      	blx	r4
   163d2:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
   163d4:	d100      	bne.n	163d8 <xTaskCreate+0x18>
   163d6:	e0d7      	b.n	16588 <xTaskCreate+0x1c8>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   163d8:	2054      	movs	r0, #84	; 0x54
   163da:	47a0      	blx	r4
   163dc:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
   163de:	d100      	bne.n	163e2 <xTaskCreate+0x22>
   163e0:	e0cf      	b.n	16582 <xTaskCreate+0x1c2>
					pxNewTCB->pxStack = pxStack;
   163e2:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   163e4:	002a      	movs	r2, r5
   163e6:	4b71      	ldr	r3, [pc, #452]	; (165ac <xTaskCreate+0x1ec>)
   163e8:	21a5      	movs	r1, #165	; 0xa5
   163ea:	0030      	movs	r0, r6
   163ec:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   163ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
   163f0:	3d04      	subs	r5, #4
   163f2:	195d      	adds	r5, r3, r5
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   163f4:	2307      	movs	r3, #7
   163f6:	439d      	bics	r5, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   163f8:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   163fa:	9500      	str	r5, [sp, #0]
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   163fc:	001a      	movs	r2, r3
   163fe:	5cf9      	ldrb	r1, [r7, r3]
   16400:	3234      	adds	r2, #52	; 0x34
   16402:	54a1      	strb	r1, [r4, r2]
		if( pcName[ x ] == 0x00 )
   16404:	5cfa      	ldrb	r2, [r7, r3]
   16406:	2a00      	cmp	r2, #0
   16408:	d002      	beq.n	16410 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1640a:	3301      	adds	r3, #1
   1640c:	2b08      	cmp	r3, #8
   1640e:	d1f5      	bne.n	163fc <xTaskCreate+0x3c>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   16410:	0023      	movs	r3, r4
   16412:	2700      	movs	r7, #0
   16414:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16416:	333b      	adds	r3, #59	; 0x3b
   16418:	701f      	strb	r7, [r3, #0]
   1641a:	2d04      	cmp	r5, #4
   1641c:	d900      	bls.n	16420 <xTaskCreate+0x60>
   1641e:	2504      	movs	r5, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   16420:	1d23      	adds	r3, r4, #4
   16422:	0018      	movs	r0, r3
	pxNewTCB->uxPriority = uxPriority;
   16424:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
   16426:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   16428:	4e61      	ldr	r6, [pc, #388]	; (165b0 <xTaskCreate+0x1f0>)
		pxNewTCB->uxMutexesHeld = 0;
   1642a:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1642c:	9303      	str	r3, [sp, #12]
   1642e:	47b0      	blx	r6
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   16430:	0020      	movs	r0, r4
   16432:	3018      	adds	r0, #24
   16434:	47b0      	blx	r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16436:	2305      	movs	r3, #5
   16438:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1643a:	0023      	movs	r3, r4
   1643c:	3350      	adds	r3, #80	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1643e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16440:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   16442:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
   16444:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   16446:	9a02      	ldr	r2, [sp, #8]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   16448:	701f      	strb	r7, [r3, #0]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1644a:	9901      	ldr	r1, [sp, #4]
   1644c:	4b59      	ldr	r3, [pc, #356]	; (165b4 <xTaskCreate+0x1f4>)
   1644e:	9800      	ldr	r0, [sp, #0]
   16450:	4798      	blx	r3
	if( ( void * ) pxCreatedTask != NULL )
   16452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   16454:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
   16456:	2b00      	cmp	r3, #0
   16458:	d000      	beq.n	1645c <xTaskCreate+0x9c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1645a:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
   1645c:	4b56      	ldr	r3, [pc, #344]	; (165b8 <xTaskCreate+0x1f8>)
   1645e:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
   16460:	4b56      	ldr	r3, [pc, #344]	; (165bc <xTaskCreate+0x1fc>)
		if( pxCurrentTCB == NULL )
   16462:	4e57      	ldr	r6, [pc, #348]	; (165c0 <xTaskCreate+0x200>)
		uxCurrentNumberOfTasks++;
   16464:	681a      	ldr	r2, [r3, #0]
   16466:	3201      	adds	r2, #1
   16468:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1646a:	6832      	ldr	r2, [r6, #0]
   1646c:	2a00      	cmp	r2, #0
   1646e:	d000      	beq.n	16472 <xTaskCreate+0xb2>
   16470:	e08d      	b.n	1658e <xTaskCreate+0x1ce>
			pxCurrentTCB = pxNewTCB;
   16472:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   16474:	681b      	ldr	r3, [r3, #0]
   16476:	2b01      	cmp	r3, #1
   16478:	d11e      	bne.n	164b8 <xTaskCreate+0xf8>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1647a:	4d52      	ldr	r5, [pc, #328]	; (165c4 <xTaskCreate+0x204>)
   1647c:	4852      	ldr	r0, [pc, #328]	; (165c8 <xTaskCreate+0x208>)
   1647e:	47a8      	blx	r5
   16480:	4851      	ldr	r0, [pc, #324]	; (165c8 <xTaskCreate+0x208>)
   16482:	3014      	adds	r0, #20
   16484:	47a8      	blx	r5
   16486:	4850      	ldr	r0, [pc, #320]	; (165c8 <xTaskCreate+0x208>)
   16488:	3028      	adds	r0, #40	; 0x28
   1648a:	47a8      	blx	r5
   1648c:	484e      	ldr	r0, [pc, #312]	; (165c8 <xTaskCreate+0x208>)
   1648e:	303c      	adds	r0, #60	; 0x3c
   16490:	47a8      	blx	r5
   16492:	484d      	ldr	r0, [pc, #308]	; (165c8 <xTaskCreate+0x208>)
   16494:	3050      	adds	r0, #80	; 0x50
   16496:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
   16498:	4f4c      	ldr	r7, [pc, #304]	; (165cc <xTaskCreate+0x20c>)
   1649a:	0038      	movs	r0, r7
   1649c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
   1649e:	484c      	ldr	r0, [pc, #304]	; (165d0 <xTaskCreate+0x210>)
   164a0:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
   164a2:	484c      	ldr	r0, [pc, #304]	; (165d4 <xTaskCreate+0x214>)
   164a4:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
   164a6:	484c      	ldr	r0, [pc, #304]	; (165d8 <xTaskCreate+0x218>)
   164a8:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
   164aa:	484c      	ldr	r0, [pc, #304]	; (165dc <xTaskCreate+0x21c>)
   164ac:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   164ae:	4b4c      	ldr	r3, [pc, #304]	; (165e0 <xTaskCreate+0x220>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   164b0:	4a47      	ldr	r2, [pc, #284]	; (165d0 <xTaskCreate+0x210>)
	pxDelayedTaskList = &xDelayedTaskList1;
   164b2:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   164b4:	4b4b      	ldr	r3, [pc, #300]	; (165e4 <xTaskCreate+0x224>)
   164b6:	601a      	str	r2, [r3, #0]
		uxTaskNumber++;
   164b8:	4a4b      	ldr	r2, [pc, #300]	; (165e8 <xTaskCreate+0x228>)
		traceTASK_CREATE( pxNewTCB );
   164ba:	2003      	movs	r0, #3
		uxTaskNumber++;
   164bc:	6813      	ldr	r3, [r2, #0]
   164be:	3301      	adds	r3, #1
   164c0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   164c2:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
   164c4:	4b49      	ldr	r3, [pc, #292]	; (165ec <xTaskCreate+0x22c>)
   164c6:	4798      	blx	r3
   164c8:	4b49      	ldr	r3, [pc, #292]	; (165f0 <xTaskCreate+0x230>)
   164ca:	b281      	uxth	r1, r0
   164cc:	0020      	movs	r0, r4
   164ce:	4798      	blx	r3
   164d0:	4b48      	ldr	r3, [pc, #288]	; (165f4 <xTaskCreate+0x234>)
   164d2:	0020      	movs	r0, r4
   164d4:	8819      	ldrh	r1, [r3, #0]
   164d6:	4b48      	ldr	r3, [pc, #288]	; (165f8 <xTaskCreate+0x238>)
   164d8:	4798      	blx	r3
   164da:	4f48      	ldr	r7, [pc, #288]	; (165fc <xTaskCreate+0x23c>)
   164dc:	0020      	movs	r0, r4
   164de:	47b8      	blx	r7
   164e0:	0022      	movs	r2, r4
   164e2:	b2c1      	uxtb	r1, r0
   164e4:	3234      	adds	r2, #52	; 0x34
   164e6:	4b46      	ldr	r3, [pc, #280]	; (16600 <xTaskCreate+0x240>)
   164e8:	2003      	movs	r0, #3
   164ea:	4798      	blx	r3
   164ec:	0020      	movs	r0, r4
   164ee:	47b8      	blx	r7
   164f0:	232c      	movs	r3, #44	; 0x2c
   164f2:	18e3      	adds	r3, r4, r3
   164f4:	781a      	ldrb	r2, [r3, #0]
   164f6:	b2c1      	uxtb	r1, r0
   164f8:	4b42      	ldr	r3, [pc, #264]	; (16604 <xTaskCreate+0x244>)
   164fa:	2003      	movs	r0, #3
   164fc:	4798      	blx	r3
   164fe:	4b42      	ldr	r3, [pc, #264]	; (16608 <xTaskCreate+0x248>)
   16500:	4798      	blx	r3
   16502:	4b42      	ldr	r3, [pc, #264]	; (1660c <xTaskCreate+0x24c>)
   16504:	4798      	blx	r3
   16506:	4d42      	ldr	r5, [pc, #264]	; (16610 <xTaskCreate+0x250>)
   16508:	882b      	ldrh	r3, [r5, #0]
   1650a:	4203      	tst	r3, r0
   1650c:	d00c      	beq.n	16528 <xTaskCreate+0x168>
   1650e:	4b3f      	ldr	r3, [pc, #252]	; (1660c <xTaskCreate+0x24c>)
   16510:	0020      	movs	r0, r4
   16512:	4798      	blx	r3
   16514:	882b      	ldrh	r3, [r5, #0]
   16516:	4203      	tst	r3, r0
   16518:	d006      	beq.n	16528 <xTaskCreate+0x168>
   1651a:	0020      	movs	r0, r4
   1651c:	47b8      	blx	r7
   1651e:	2103      	movs	r1, #3
   16520:	b2c2      	uxtb	r2, r0
   16522:	4b3c      	ldr	r3, [pc, #240]	; (16614 <xTaskCreate+0x254>)
   16524:	201b      	movs	r0, #27
   16526:	4798      	blx	r3
   16528:	0020      	movs	r0, r4
   1652a:	4b3b      	ldr	r3, [pc, #236]	; (16618 <xTaskCreate+0x258>)
   1652c:	4798      	blx	r3
		prvAddTaskToReadyList( pxNewTCB );
   1652e:	4b37      	ldr	r3, [pc, #220]	; (1660c <xTaskCreate+0x24c>)
   16530:	0020      	movs	r0, r4
   16532:	4798      	blx	r3
   16534:	4b36      	ldr	r3, [pc, #216]	; (16610 <xTaskCreate+0x250>)
   16536:	881b      	ldrh	r3, [r3, #0]
   16538:	4203      	tst	r3, r0
   1653a:	d004      	beq.n	16546 <xTaskCreate+0x186>
   1653c:	0020      	movs	r0, r4
   1653e:	47b8      	blx	r7
   16540:	4b36      	ldr	r3, [pc, #216]	; (1661c <xTaskCreate+0x25c>)
   16542:	b2c0      	uxtb	r0, r0
   16544:	4798      	blx	r3
   16546:	4a36      	ldr	r2, [pc, #216]	; (16620 <xTaskCreate+0x260>)
   16548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1654a:	6811      	ldr	r1, [r2, #0]
   1654c:	428b      	cmp	r3, r1
   1654e:	d900      	bls.n	16552 <xTaskCreate+0x192>
   16550:	6013      	str	r3, [r2, #0]
   16552:	2014      	movs	r0, #20
   16554:	4358      	muls	r0, r3
   16556:	4b1c      	ldr	r3, [pc, #112]	; (165c8 <xTaskCreate+0x208>)
   16558:	1d21      	adds	r1, r4, #4
   1655a:	1818      	adds	r0, r3, r0
   1655c:	4b31      	ldr	r3, [pc, #196]	; (16624 <xTaskCreate+0x264>)
   1655e:	4798      	blx	r3
	taskEXIT_CRITICAL();
   16560:	4b31      	ldr	r3, [pc, #196]	; (16628 <xTaskCreate+0x268>)
   16562:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
   16564:	4b31      	ldr	r3, [pc, #196]	; (1662c <xTaskCreate+0x26c>)
			xReturn = pdPASS;
   16566:	2501      	movs	r5, #1
	if( xSchedulerRunning != pdFALSE )
   16568:	681b      	ldr	r3, [r3, #0]
   1656a:	2b00      	cmp	r3, #0
   1656c:	d006      	beq.n	1657c <xTaskCreate+0x1bc>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1656e:	6833      	ldr	r3, [r6, #0]
   16570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16572:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16574:	429a      	cmp	r2, r3
   16576:	d201      	bcs.n	1657c <xTaskCreate+0x1bc>
			taskYIELD_IF_USING_PREEMPTION();
   16578:	4b2d      	ldr	r3, [pc, #180]	; (16630 <xTaskCreate+0x270>)
   1657a:	4798      	blx	r3
	}
   1657c:	0028      	movs	r0, r5
   1657e:	b005      	add	sp, #20
   16580:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
   16582:	0030      	movs	r0, r6
   16584:	4b2b      	ldr	r3, [pc, #172]	; (16634 <xTaskCreate+0x274>)
   16586:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   16588:	2501      	movs	r5, #1
   1658a:	426d      	negs	r5, r5
   1658c:	e7f6      	b.n	1657c <xTaskCreate+0x1bc>
			if( xSchedulerRunning == pdFALSE )
   1658e:	4b27      	ldr	r3, [pc, #156]	; (1662c <xTaskCreate+0x26c>)
   16590:	681b      	ldr	r3, [r3, #0]
   16592:	2b00      	cmp	r3, #0
   16594:	d000      	beq.n	16598 <xTaskCreate+0x1d8>
   16596:	e78f      	b.n	164b8 <xTaskCreate+0xf8>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   16598:	6833      	ldr	r3, [r6, #0]
   1659a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1659e:	4293      	cmp	r3, r2
   165a0:	d900      	bls.n	165a4 <xTaskCreate+0x1e4>
   165a2:	e789      	b.n	164b8 <xTaskCreate+0xf8>
					pxCurrentTCB = pxNewTCB;
   165a4:	6034      	str	r4, [r6, #0]
   165a6:	e787      	b.n	164b8 <xTaskCreate+0xf8>
   165a8:	00015245 	.word	0x00015245
   165ac:	0001b50f 	.word	0x0001b50f
   165b0:	00015003 	.word	0x00015003
   165b4:	000150d5 	.word	0x000150d5
   165b8:	00015181 	.word	0x00015181
   165bc:	20003444 	.word	0x20003444
   165c0:	200033d4 	.word	0x200033d4
   165c4:	00014fed 	.word	0x00014fed
   165c8:	200033e0 	.word	0x200033e0
   165cc:	2000345c 	.word	0x2000345c
   165d0:	20003470 	.word	0x20003470
   165d4:	20003490 	.word	0x20003490
   165d8:	200034bc 	.word	0x200034bc
   165dc:	200034a8 	.word	0x200034a8
   165e0:	200033d8 	.word	0x200033d8
   165e4:	200033dc 	.word	0x200033dc
   165e8:	20003454 	.word	0x20003454
   165ec:	000147e1 	.word	0x000147e1
   165f0:	00013fb9 	.word	0x00013fb9
   165f4:	20000052 	.word	0x20000052
   165f8:	00013fd9 	.word	0x00013fd9
   165fc:	00013f99 	.word	0x00013f99
   16600:	000148a9 	.word	0x000148a9
   16604:	000146a5 	.word	0x000146a5
   16608:	00014125 	.word	0x00014125
   1660c:	00013fa9 	.word	0x00013fa9
   16610:	20000054 	.word	0x20000054
   16614:	00014c41 	.word	0x00014c41
   16618:	00014059 	.word	0x00014059
   1661c:	00014add 	.word	0x00014add
   16620:	20003458 	.word	0x20003458
   16624:	00015009 	.word	0x00015009
   16628:	00015199 	.word	0x00015199
   1662c:	200034a4 	.word	0x200034a4
   16630:	00015171 	.word	0x00015171
   16634:	000152c9 	.word	0x000152c9

00016638 <vTaskStartScheduler>:
{
   16638:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
   1663a:	2400      	movs	r4, #0
   1663c:	4b0f      	ldr	r3, [pc, #60]	; (1667c <vTaskStartScheduler+0x44>)
   1663e:	9400      	str	r4, [sp, #0]
   16640:	9301      	str	r3, [sp, #4]
   16642:	2264      	movs	r2, #100	; 0x64
   16644:	0023      	movs	r3, r4
   16646:	490e      	ldr	r1, [pc, #56]	; (16680 <vTaskStartScheduler+0x48>)
   16648:	480e      	ldr	r0, [pc, #56]	; (16684 <vTaskStartScheduler+0x4c>)
   1664a:	4d0f      	ldr	r5, [pc, #60]	; (16688 <vTaskStartScheduler+0x50>)
   1664c:	47a8      	blx	r5
		if( xReturn == pdPASS )
   1664e:	2801      	cmp	r0, #1
   16650:	d10f      	bne.n	16672 <vTaskStartScheduler+0x3a>
			xReturn = xTimerCreateTimerTask();
   16652:	4b0e      	ldr	r3, [pc, #56]	; (1668c <vTaskStartScheduler+0x54>)
   16654:	4798      	blx	r3
	if( xReturn == pdPASS )
   16656:	2801      	cmp	r0, #1
   16658:	d10b      	bne.n	16672 <vTaskStartScheduler+0x3a>
		portDISABLE_INTERRUPTS();
   1665a:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
   1665c:	2201      	movs	r2, #1
   1665e:	4b0c      	ldr	r3, [pc, #48]	; (16690 <vTaskStartScheduler+0x58>)
   16660:	4252      	negs	r2, r2
   16662:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   16664:	4b0b      	ldr	r3, [pc, #44]	; (16694 <vTaskStartScheduler+0x5c>)
   16666:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   16668:	4b0b      	ldr	r3, [pc, #44]	; (16698 <vTaskStartScheduler+0x60>)
   1666a:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   1666c:	4b0b      	ldr	r3, [pc, #44]	; (1669c <vTaskStartScheduler+0x64>)
   1666e:	4798      	blx	r3
}
   16670:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   16672:	1c43      	adds	r3, r0, #1
   16674:	d1fc      	bne.n	16670 <vTaskStartScheduler+0x38>
   16676:	b672      	cpsid	i
   16678:	e7fe      	b.n	16678 <vTaskStartScheduler+0x40>
   1667a:	46c0      	nop			; (mov r8, r8)
   1667c:	20003484 	.word	0x20003484
   16680:	0001cf47 	.word	0x0001cf47
   16684:	00016355 	.word	0x00016355
   16688:	000163c1 	.word	0x000163c1
   1668c:	00017199 	.word	0x00017199
   16690:	20003488 	.word	0x20003488
   16694:	200034a4 	.word	0x200034a4
   16698:	200034d0 	.word	0x200034d0
   1669c:	000150f9 	.word	0x000150f9

000166a0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   166a0:	4a02      	ldr	r2, [pc, #8]	; (166ac <vTaskSuspendAll+0xc>)
   166a2:	6813      	ldr	r3, [r2, #0]
   166a4:	3301      	adds	r3, #1
   166a6:	6013      	str	r3, [r2, #0]
}
   166a8:	4770      	bx	lr
   166aa:	46c0      	nop			; (mov r8, r8)
   166ac:	20003450 	.word	0x20003450

000166b0 <xTaskGetTickCount>:
   166b0:	4b01      	ldr	r3, [pc, #4]	; (166b8 <xTaskGetTickCount+0x8>)
   166b2:	6818      	ldr	r0, [r3, #0]
   166b4:	4770      	bx	lr
   166b6:	46c0      	nop			; (mov r8, r8)
   166b8:	200034d0 	.word	0x200034d0

000166bc <xTaskIncrementTick>:
{
   166bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
   166be:	4c45      	ldr	r4, [pc, #276]	; (167d4 <xTaskIncrementTick+0x118>)
   166c0:	6823      	ldr	r3, [r4, #0]
   166c2:	2b01      	cmp	r3, #1
   166c4:	d003      	beq.n	166ce <xTaskIncrementTick+0x12>
   166c6:	4b44      	ldr	r3, [pc, #272]	; (167d8 <xTaskIncrementTick+0x11c>)
   166c8:	681b      	ldr	r3, [r3, #0]
   166ca:	2b00      	cmp	r3, #0
   166cc:	d106      	bne.n	166dc <xTaskIncrementTick+0x20>
   166ce:	4a43      	ldr	r2, [pc, #268]	; (167dc <xTaskIncrementTick+0x120>)
   166d0:	2000      	movs	r0, #0
   166d2:	6813      	ldr	r3, [r2, #0]
   166d4:	3301      	adds	r3, #1
   166d6:	6013      	str	r3, [r2, #0]
   166d8:	4b41      	ldr	r3, [pc, #260]	; (167e0 <xTaskIncrementTick+0x124>)
   166da:	4798      	blx	r3
   166dc:	6823      	ldr	r3, [r4, #0]
   166de:	2b00      	cmp	r3, #0
   166e0:	d105      	bne.n	166ee <xTaskIncrementTick+0x32>
   166e2:	4b40      	ldr	r3, [pc, #256]	; (167e4 <xTaskIncrementTick+0x128>)
   166e4:	2003      	movs	r0, #3
   166e6:	6819      	ldr	r1, [r3, #0]
   166e8:	4b3f      	ldr	r3, [pc, #252]	; (167e8 <xTaskIncrementTick+0x12c>)
   166ea:	3101      	adds	r1, #1
   166ec:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   166ee:	6823      	ldr	r3, [r4, #0]
   166f0:	2b00      	cmp	r3, #0
   166f2:	d135      	bne.n	16760 <xTaskIncrementTick+0xa4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   166f4:	4b3b      	ldr	r3, [pc, #236]	; (167e4 <xTaskIncrementTick+0x128>)
   166f6:	681f      	ldr	r7, [r3, #0]
   166f8:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
   166fa:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   166fc:	2f00      	cmp	r7, #0
   166fe:	d111      	bne.n	16724 <xTaskIncrementTick+0x68>
			taskSWITCH_DELAYED_LISTS();
   16700:	4b3a      	ldr	r3, [pc, #232]	; (167ec <xTaskIncrementTick+0x130>)
   16702:	681a      	ldr	r2, [r3, #0]
   16704:	6812      	ldr	r2, [r2, #0]
   16706:	2a00      	cmp	r2, #0
   16708:	d001      	beq.n	1670e <xTaskIncrementTick+0x52>
   1670a:	b672      	cpsid	i
   1670c:	e7fe      	b.n	1670c <xTaskIncrementTick+0x50>
   1670e:	4a38      	ldr	r2, [pc, #224]	; (167f0 <xTaskIncrementTick+0x134>)
   16710:	6819      	ldr	r1, [r3, #0]
   16712:	6810      	ldr	r0, [r2, #0]
   16714:	6018      	str	r0, [r3, #0]
   16716:	6011      	str	r1, [r2, #0]
   16718:	4a36      	ldr	r2, [pc, #216]	; (167f4 <xTaskIncrementTick+0x138>)
   1671a:	6813      	ldr	r3, [r2, #0]
   1671c:	3301      	adds	r3, #1
   1671e:	6013      	str	r3, [r2, #0]
   16720:	4b35      	ldr	r3, [pc, #212]	; (167f8 <xTaskIncrementTick+0x13c>)
   16722:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
   16724:	4e35      	ldr	r6, [pc, #212]	; (167fc <xTaskIncrementTick+0x140>)
BaseType_t xSwitchRequired = pdFALSE;
   16726:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
   16728:	6833      	ldr	r3, [r6, #0]
   1672a:	429f      	cmp	r7, r3
   1672c:	d307      	bcc.n	1673e <xTaskIncrementTick+0x82>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1672e:	4b2f      	ldr	r3, [pc, #188]	; (167ec <xTaskIncrementTick+0x130>)
   16730:	681a      	ldr	r2, [r3, #0]
   16732:	6812      	ldr	r2, [r2, #0]
   16734:	2a00      	cmp	r2, #0
   16736:	d119      	bne.n	1676c <xTaskIncrementTick+0xb0>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16738:	2301      	movs	r3, #1
   1673a:	425b      	negs	r3, r3
   1673c:	6033      	str	r3, [r6, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1673e:	4b30      	ldr	r3, [pc, #192]	; (16800 <xTaskIncrementTick+0x144>)
   16740:	681b      	ldr	r3, [r3, #0]
   16742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16744:	2314      	movs	r3, #20
   16746:	4353      	muls	r3, r2
   16748:	4a2e      	ldr	r2, [pc, #184]	; (16804 <xTaskIncrementTick+0x148>)
   1674a:	58d3      	ldr	r3, [r2, r3]
   1674c:	2b01      	cmp	r3, #1
   1674e:	d900      	bls.n	16752 <xTaskIncrementTick+0x96>
				xSwitchRequired = pdTRUE;
   16750:	2501      	movs	r5, #1
		if( xYieldPending != pdFALSE )
   16752:	4b2d      	ldr	r3, [pc, #180]	; (16808 <xTaskIncrementTick+0x14c>)
   16754:	681b      	ldr	r3, [r3, #0]
   16756:	2b00      	cmp	r3, #0
   16758:	d000      	beq.n	1675c <xTaskIncrementTick+0xa0>
			xSwitchRequired = pdTRUE;
   1675a:	2501      	movs	r5, #1
}
   1675c:	0028      	movs	r0, r5
   1675e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		++uxPendedTicks;
   16760:	4a1d      	ldr	r2, [pc, #116]	; (167d8 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
   16762:	2500      	movs	r5, #0
		++uxPendedTicks;
   16764:	6813      	ldr	r3, [r2, #0]
   16766:	3301      	adds	r3, #1
   16768:	6013      	str	r3, [r2, #0]
   1676a:	e7f2      	b.n	16752 <xTaskIncrementTick+0x96>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1676c:	681b      	ldr	r3, [r3, #0]
   1676e:	68db      	ldr	r3, [r3, #12]
   16770:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   16772:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
   16774:	429f      	cmp	r7, r3
   16776:	d3e1      	bcc.n	1673c <xTaskIncrementTick+0x80>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   16778:	1d23      	adds	r3, r4, #4
   1677a:	9301      	str	r3, [sp, #4]
   1677c:	0018      	movs	r0, r3
   1677e:	4b23      	ldr	r3, [pc, #140]	; (1680c <xTaskIncrementTick+0x150>)
   16780:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   16782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16784:	2b00      	cmp	r3, #0
   16786:	d003      	beq.n	16790 <xTaskIncrementTick+0xd4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   16788:	0020      	movs	r0, r4
   1678a:	4b20      	ldr	r3, [pc, #128]	; (1680c <xTaskIncrementTick+0x150>)
   1678c:	3018      	adds	r0, #24
   1678e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   16790:	4b1f      	ldr	r3, [pc, #124]	; (16810 <xTaskIncrementTick+0x154>)
   16792:	0020      	movs	r0, r4
   16794:	4798      	blx	r3
   16796:	4b1f      	ldr	r3, [pc, #124]	; (16814 <xTaskIncrementTick+0x158>)
   16798:	881b      	ldrh	r3, [r3, #0]
   1679a:	4203      	tst	r3, r0
   1679c:	d005      	beq.n	167aa <xTaskIncrementTick+0xee>
   1679e:	4b1e      	ldr	r3, [pc, #120]	; (16818 <xTaskIncrementTick+0x15c>)
   167a0:	0020      	movs	r0, r4
   167a2:	4798      	blx	r3
   167a4:	4b1d      	ldr	r3, [pc, #116]	; (1681c <xTaskIncrementTick+0x160>)
   167a6:	b2c0      	uxtb	r0, r0
   167a8:	4798      	blx	r3
   167aa:	4b1d      	ldr	r3, [pc, #116]	; (16820 <xTaskIncrementTick+0x164>)
   167ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   167ae:	681a      	ldr	r2, [r3, #0]
   167b0:	4290      	cmp	r0, r2
   167b2:	d900      	bls.n	167b6 <xTaskIncrementTick+0xfa>
   167b4:	6018      	str	r0, [r3, #0]
   167b6:	2314      	movs	r3, #20
   167b8:	4358      	muls	r0, r3
   167ba:	4b12      	ldr	r3, [pc, #72]	; (16804 <xTaskIncrementTick+0x148>)
   167bc:	1d21      	adds	r1, r4, #4
   167be:	1818      	adds	r0, r3, r0
   167c0:	4b18      	ldr	r3, [pc, #96]	; (16824 <xTaskIncrementTick+0x168>)
   167c2:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   167c4:	4b0e      	ldr	r3, [pc, #56]	; (16800 <xTaskIncrementTick+0x144>)
   167c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   167c8:	681b      	ldr	r3, [r3, #0]
   167ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   167cc:	429a      	cmp	r2, r3
   167ce:	d3ae      	bcc.n	1672e <xTaskIncrementTick+0x72>
							xSwitchRequired = pdTRUE;
   167d0:	2501      	movs	r5, #1
   167d2:	e7ac      	b.n	1672e <xTaskIncrementTick+0x72>
   167d4:	20003450 	.word	0x20003450
   167d8:	2000344c 	.word	0x2000344c
   167dc:	200004e4 	.word	0x200004e4
   167e0:	00014929 	.word	0x00014929
   167e4:	200034d0 	.word	0x200034d0
   167e8:	00014db1 	.word	0x00014db1
   167ec:	200033d8 	.word	0x200033d8
   167f0:	200033dc 	.word	0x200033dc
   167f4:	2000348c 	.word	0x2000348c
   167f8:	000162b5 	.word	0x000162b5
   167fc:	20003488 	.word	0x20003488
   16800:	200033d4 	.word	0x200033d4
   16804:	200033e0 	.word	0x200033e0
   16808:	200034d4 	.word	0x200034d4
   1680c:	0001504f 	.word	0x0001504f
   16810:	00013fa9 	.word	0x00013fa9
   16814:	20000054 	.word	0x20000054
   16818:	00013f99 	.word	0x00013f99
   1681c:	00014add 	.word	0x00014add
   16820:	20003458 	.word	0x20003458
   16824:	00015009 	.word	0x00015009

00016828 <xTaskResumeAll>:
{
   16828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
   1682a:	4c31      	ldr	r4, [pc, #196]	; (168f0 <xTaskResumeAll+0xc8>)
   1682c:	6823      	ldr	r3, [r4, #0]
   1682e:	2b00      	cmp	r3, #0
   16830:	d101      	bne.n	16836 <xTaskResumeAll+0xe>
   16832:	b672      	cpsid	i
   16834:	e7fe      	b.n	16834 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
   16836:	4b2f      	ldr	r3, [pc, #188]	; (168f4 <xTaskResumeAll+0xcc>)
   16838:	4798      	blx	r3
		--uxSchedulerSuspended;
   1683a:	6823      	ldr	r3, [r4, #0]
   1683c:	3b01      	subs	r3, #1
   1683e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   16840:	6824      	ldr	r4, [r4, #0]
   16842:	2c00      	cmp	r4, #0
   16844:	d004      	beq.n	16850 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
   16846:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   16848:	4b2b      	ldr	r3, [pc, #172]	; (168f8 <xTaskResumeAll+0xd0>)
   1684a:	4798      	blx	r3
}
   1684c:	0020      	movs	r0, r4
   1684e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   16850:	4b2a      	ldr	r3, [pc, #168]	; (168fc <xTaskResumeAll+0xd4>)
						xYieldPending = pdTRUE;
   16852:	2701      	movs	r7, #1
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   16854:	681b      	ldr	r3, [r3, #0]
   16856:	2b00      	cmp	r3, #0
   16858:	d0f5      	beq.n	16846 <xTaskResumeAll+0x1e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1685a:	4b29      	ldr	r3, [pc, #164]	; (16900 <xTaskResumeAll+0xd8>)
   1685c:	681a      	ldr	r2, [r3, #0]
   1685e:	2a00      	cmp	r2, #0
   16860:	d11a      	bne.n	16898 <xTaskResumeAll+0x70>
				if( pxTCB != NULL )
   16862:	2c00      	cmp	r4, #0
   16864:	d001      	beq.n	1686a <xTaskResumeAll+0x42>
					prvResetNextTaskUnblockTime();
   16866:	4b27      	ldr	r3, [pc, #156]	; (16904 <xTaskResumeAll+0xdc>)
   16868:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1686a:	4d27      	ldr	r5, [pc, #156]	; (16908 <xTaskResumeAll+0xe0>)
   1686c:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1686e:	2c00      	cmp	r4, #0
   16870:	d00a      	beq.n	16888 <xTaskResumeAll+0x60>
								xYieldPending = pdTRUE;
   16872:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
   16874:	4b25      	ldr	r3, [pc, #148]	; (1690c <xTaskResumeAll+0xe4>)
   16876:	4798      	blx	r3
   16878:	2800      	cmp	r0, #0
   1687a:	d001      	beq.n	16880 <xTaskResumeAll+0x58>
								xYieldPending = pdTRUE;
   1687c:	4b24      	ldr	r3, [pc, #144]	; (16910 <xTaskResumeAll+0xe8>)
   1687e:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
   16880:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   16882:	2c00      	cmp	r4, #0
   16884:	d1f6      	bne.n	16874 <xTaskResumeAll+0x4c>
						uxPendedTicks = 0;
   16886:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
   16888:	4b21      	ldr	r3, [pc, #132]	; (16910 <xTaskResumeAll+0xe8>)
   1688a:	681b      	ldr	r3, [r3, #0]
   1688c:	2b00      	cmp	r3, #0
   1688e:	d0da      	beq.n	16846 <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
   16890:	4b20      	ldr	r3, [pc, #128]	; (16914 <xTaskResumeAll+0xec>)
   16892:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
   16894:	2401      	movs	r4, #1
   16896:	e7d7      	b.n	16848 <xTaskResumeAll+0x20>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   16898:	68db      	ldr	r3, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1689a:	4e1f      	ldr	r6, [pc, #124]	; (16918 <xTaskResumeAll+0xf0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1689c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1689e:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   168a0:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   168a2:	3018      	adds	r0, #24
   168a4:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   168a6:	0028      	movs	r0, r5
   168a8:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
   168aa:	4b1c      	ldr	r3, [pc, #112]	; (1691c <xTaskResumeAll+0xf4>)
   168ac:	0020      	movs	r0, r4
   168ae:	4798      	blx	r3
   168b0:	4b1b      	ldr	r3, [pc, #108]	; (16920 <xTaskResumeAll+0xf8>)
   168b2:	881b      	ldrh	r3, [r3, #0]
   168b4:	4203      	tst	r3, r0
   168b6:	d005      	beq.n	168c4 <xTaskResumeAll+0x9c>
   168b8:	4b1a      	ldr	r3, [pc, #104]	; (16924 <xTaskResumeAll+0xfc>)
   168ba:	0020      	movs	r0, r4
   168bc:	4798      	blx	r3
   168be:	4b1a      	ldr	r3, [pc, #104]	; (16928 <xTaskResumeAll+0x100>)
   168c0:	b2c0      	uxtb	r0, r0
   168c2:	4798      	blx	r3
   168c4:	4b19      	ldr	r3, [pc, #100]	; (1692c <xTaskResumeAll+0x104>)
   168c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   168c8:	681a      	ldr	r2, [r3, #0]
   168ca:	4290      	cmp	r0, r2
   168cc:	d900      	bls.n	168d0 <xTaskResumeAll+0xa8>
   168ce:	6018      	str	r0, [r3, #0]
   168d0:	2314      	movs	r3, #20
   168d2:	4358      	muls	r0, r3
   168d4:	4b16      	ldr	r3, [pc, #88]	; (16930 <xTaskResumeAll+0x108>)
   168d6:	0029      	movs	r1, r5
   168d8:	1818      	adds	r0, r3, r0
   168da:	4b16      	ldr	r3, [pc, #88]	; (16934 <xTaskResumeAll+0x10c>)
   168dc:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   168de:	4b16      	ldr	r3, [pc, #88]	; (16938 <xTaskResumeAll+0x110>)
   168e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   168e2:	681b      	ldr	r3, [r3, #0]
   168e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   168e6:	429a      	cmp	r2, r3
   168e8:	d3b7      	bcc.n	1685a <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
   168ea:	4b09      	ldr	r3, [pc, #36]	; (16910 <xTaskResumeAll+0xe8>)
   168ec:	601f      	str	r7, [r3, #0]
   168ee:	e7b4      	b.n	1685a <xTaskResumeAll+0x32>
   168f0:	20003450 	.word	0x20003450
   168f4:	00015181 	.word	0x00015181
   168f8:	00015199 	.word	0x00015199
   168fc:	20003444 	.word	0x20003444
   16900:	20003490 	.word	0x20003490
   16904:	000162b5 	.word	0x000162b5
   16908:	2000344c 	.word	0x2000344c
   1690c:	000166bd 	.word	0x000166bd
   16910:	200034d4 	.word	0x200034d4
   16914:	00015171 	.word	0x00015171
   16918:	0001504f 	.word	0x0001504f
   1691c:	00013fa9 	.word	0x00013fa9
   16920:	20000054 	.word	0x20000054
   16924:	00013f99 	.word	0x00013f99
   16928:	00014add 	.word	0x00014add
   1692c:	20003458 	.word	0x20003458
   16930:	200033e0 	.word	0x200033e0
   16934:	00015009 	.word	0x00015009
   16938:	200033d4 	.word	0x200033d4

0001693c <vTaskDelay>:
	{
   1693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1693e:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
   16940:	d102      	bne.n	16948 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
   16942:	4b19      	ldr	r3, [pc, #100]	; (169a8 <vTaskDelay+0x6c>)
   16944:	4798      	blx	r3
	}
   16946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
   16948:	4b18      	ldr	r3, [pc, #96]	; (169ac <vTaskDelay+0x70>)
   1694a:	681b      	ldr	r3, [r3, #0]
   1694c:	2b00      	cmp	r3, #0
   1694e:	d001      	beq.n	16954 <vTaskDelay+0x18>
   16950:	b672      	cpsid	i
   16952:	e7fe      	b.n	16952 <vTaskDelay+0x16>
			vTaskSuspendAll();
   16954:	4b16      	ldr	r3, [pc, #88]	; (169b0 <vTaskDelay+0x74>)
   16956:	4798      	blx	r3
				traceTASK_DELAY();
   16958:	4f16      	ldr	r7, [pc, #88]	; (169b4 <vTaskDelay+0x78>)
   1695a:	4e17      	ldr	r6, [pc, #92]	; (169b8 <vTaskDelay+0x7c>)
   1695c:	6838      	ldr	r0, [r7, #0]
   1695e:	47b0      	blx	r6
   16960:	4d16      	ldr	r5, [pc, #88]	; (169bc <vTaskDelay+0x80>)
   16962:	882b      	ldrh	r3, [r5, #0]
   16964:	4203      	tst	r3, r0
   16966:	d009      	beq.n	1697c <vTaskDelay+0x40>
   16968:	0021      	movs	r1, r4
   1696a:	2089      	movs	r0, #137	; 0x89
   1696c:	4b14      	ldr	r3, [pc, #80]	; (169c0 <vTaskDelay+0x84>)
   1696e:	4798      	blx	r3
   16970:	4b14      	ldr	r3, [pc, #80]	; (169c4 <vTaskDelay+0x88>)
   16972:	6838      	ldr	r0, [r7, #0]
   16974:	4798      	blx	r3
   16976:	4b14      	ldr	r3, [pc, #80]	; (169c8 <vTaskDelay+0x8c>)
   16978:	b2c0      	uxtb	r0, r0
   1697a:	4798      	blx	r3
   1697c:	4f13      	ldr	r7, [pc, #76]	; (169cc <vTaskDelay+0x90>)
   1697e:	47b8      	blx	r7
   16980:	47b0      	blx	r6
   16982:	882b      	ldrh	r3, [r5, #0]
   16984:	4203      	tst	r3, r0
   16986:	d005      	beq.n	16994 <vTaskDelay+0x58>
   16988:	47b8      	blx	r7
   1698a:	4b0e      	ldr	r3, [pc, #56]	; (169c4 <vTaskDelay+0x88>)
   1698c:	4798      	blx	r3
   1698e:	4b0e      	ldr	r3, [pc, #56]	; (169c8 <vTaskDelay+0x8c>)
   16990:	b2c0      	uxtb	r0, r0
   16992:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   16994:	4b0e      	ldr	r3, [pc, #56]	; (169d0 <vTaskDelay+0x94>)
   16996:	2100      	movs	r1, #0
   16998:	0020      	movs	r0, r4
   1699a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
   1699c:	4b0d      	ldr	r3, [pc, #52]	; (169d4 <vTaskDelay+0x98>)
   1699e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   169a0:	2800      	cmp	r0, #0
   169a2:	d1d0      	bne.n	16946 <vTaskDelay+0xa>
   169a4:	e7cd      	b.n	16942 <vTaskDelay+0x6>
   169a6:	46c0      	nop			; (mov r8, r8)
   169a8:	00015171 	.word	0x00015171
   169ac:	20003450 	.word	0x20003450
   169b0:	000166a1 	.word	0x000166a1
   169b4:	200033d4 	.word	0x200033d4
   169b8:	00013fa9 	.word	0x00013fa9
   169bc:	20000054 	.word	0x20000054
   169c0:	00014db1 	.word	0x00014db1
   169c4:	00013f99 	.word	0x00013f99
   169c8:	000147a1 	.word	0x000147a1
   169cc:	00014125 	.word	0x00014125
   169d0:	000162dd 	.word	0x000162dd
   169d4:	00016829 	.word	0x00016829

000169d8 <vTaskSwitchContext>:
{
   169d8:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   169da:	4b24      	ldr	r3, [pc, #144]	; (16a6c <vTaskSwitchContext+0x94>)
   169dc:	681a      	ldr	r2, [r3, #0]
   169de:	4b24      	ldr	r3, [pc, #144]	; (16a70 <vTaskSwitchContext+0x98>)
   169e0:	2a00      	cmp	r2, #0
   169e2:	d002      	beq.n	169ea <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
   169e4:	2201      	movs	r2, #1
   169e6:	601a      	str	r2, [r3, #0]
}
   169e8:	bd70      	pop	{r4, r5, r6, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
   169ea:	4c22      	ldr	r4, [pc, #136]	; (16a74 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
   169ec:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   169ee:	6822      	ldr	r2, [r4, #0]
   169f0:	6823      	ldr	r3, [r4, #0]
   169f2:	6812      	ldr	r2, [r2, #0]
   169f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   169f6:	429a      	cmp	r2, r3
   169f8:	d804      	bhi.n	16a04 <vTaskSwitchContext+0x2c>
   169fa:	6820      	ldr	r0, [r4, #0]
   169fc:	6821      	ldr	r1, [r4, #0]
   169fe:	4b1e      	ldr	r3, [pc, #120]	; (16a78 <vTaskSwitchContext+0xa0>)
   16a00:	3134      	adds	r1, #52	; 0x34
   16a02:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   16a04:	2614      	movs	r6, #20
   16a06:	481d      	ldr	r0, [pc, #116]	; (16a7c <vTaskSwitchContext+0xa4>)
   16a08:	491d      	ldr	r1, [pc, #116]	; (16a80 <vTaskSwitchContext+0xa8>)
   16a0a:	6802      	ldr	r2, [r0, #0]
   16a0c:	0033      	movs	r3, r6
   16a0e:	4353      	muls	r3, r2
   16a10:	585d      	ldr	r5, [r3, r1]
   16a12:	2d00      	cmp	r5, #0
   16a14:	d024      	beq.n	16a60 <vTaskSwitchContext+0x88>
   16a16:	18cd      	adds	r5, r1, r3
   16a18:	686e      	ldr	r6, [r5, #4]
   16a1a:	3308      	adds	r3, #8
   16a1c:	6876      	ldr	r6, [r6, #4]
   16a1e:	18cb      	adds	r3, r1, r3
   16a20:	606e      	str	r6, [r5, #4]
   16a22:	429e      	cmp	r6, r3
   16a24:	d101      	bne.n	16a2a <vTaskSwitchContext+0x52>
   16a26:	6873      	ldr	r3, [r6, #4]
   16a28:	606b      	str	r3, [r5, #4]
   16a2a:	2314      	movs	r3, #20
   16a2c:	4353      	muls	r3, r2
   16a2e:	18c9      	adds	r1, r1, r3
   16a30:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
   16a32:	4d14      	ldr	r5, [pc, #80]	; (16a84 <vTaskSwitchContext+0xac>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
   16a34:	68db      	ldr	r3, [r3, #12]
   16a36:	6023      	str	r3, [r4, #0]
		traceTASK_SWITCHED_IN();
   16a38:	2301      	movs	r3, #1
   16a3a:	4c13      	ldr	r4, [pc, #76]	; (16a88 <vTaskSwitchContext+0xb0>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
   16a3c:	6002      	str	r2, [r0, #0]
		traceTASK_SWITCHED_IN();
   16a3e:	6023      	str	r3, [r4, #0]
   16a40:	47a8      	blx	r5
   16a42:	4b12      	ldr	r3, [pc, #72]	; (16a8c <vTaskSwitchContext+0xb4>)
   16a44:	4798      	blx	r3
   16a46:	4b12      	ldr	r3, [pc, #72]	; (16a90 <vTaskSwitchContext+0xb8>)
   16a48:	881b      	ldrh	r3, [r3, #0]
   16a4a:	4203      	tst	r3, r0
   16a4c:	d005      	beq.n	16a5a <vTaskSwitchContext+0x82>
   16a4e:	47a8      	blx	r5
   16a50:	4b10      	ldr	r3, [pc, #64]	; (16a94 <vTaskSwitchContext+0xbc>)
   16a52:	4798      	blx	r3
   16a54:	4b10      	ldr	r3, [pc, #64]	; (16a98 <vTaskSwitchContext+0xc0>)
   16a56:	b2c0      	uxtb	r0, r0
   16a58:	4798      	blx	r3
   16a5a:	2302      	movs	r3, #2
   16a5c:	6023      	str	r3, [r4, #0]
}
   16a5e:	e7c3      	b.n	169e8 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
   16a60:	2a00      	cmp	r2, #0
   16a62:	d101      	bne.n	16a68 <vTaskSwitchContext+0x90>
   16a64:	b672      	cpsid	i
   16a66:	e7fe      	b.n	16a66 <vTaskSwitchContext+0x8e>
   16a68:	3a01      	subs	r2, #1
   16a6a:	e7cf      	b.n	16a0c <vTaskSwitchContext+0x34>
   16a6c:	20003450 	.word	0x20003450
   16a70:	200034d4 	.word	0x200034d4
   16a74:	200033d4 	.word	0x200033d4
   16a78:	00018ccd 	.word	0x00018ccd
   16a7c:	20003458 	.word	0x20003458
   16a80:	200033e0 	.word	0x200033e0
   16a84:	00014125 	.word	0x00014125
   16a88:	200004e0 	.word	0x200004e0
   16a8c:	00013fa9 	.word	0x00013fa9
   16a90:	20000054 	.word	0x20000054
   16a94:	00013f99 	.word	0x00013f99
   16a98:	00014e55 	.word	0x00014e55

00016a9c <vTaskSuspend>:
	{
   16a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		taskENTER_CRITICAL();
   16a9e:	4b2e      	ldr	r3, [pc, #184]	; (16b58 <vTaskSuspend+0xbc>)
	{
   16aa0:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
   16aa2:	4798      	blx	r3
   16aa4:	4d2d      	ldr	r5, [pc, #180]	; (16b5c <vTaskSuspend+0xc0>)
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   16aa6:	2c00      	cmp	r4, #0
   16aa8:	d100      	bne.n	16aac <vTaskSuspend+0x10>
   16aaa:	682c      	ldr	r4, [r5, #0]
			traceTASK_SUSPEND( pxTCB );
   16aac:	4b2c      	ldr	r3, [pc, #176]	; (16b60 <vTaskSuspend+0xc4>)
   16aae:	4798      	blx	r3
   16ab0:	4f2c      	ldr	r7, [pc, #176]	; (16b64 <vTaskSuspend+0xc8>)
   16ab2:	47b8      	blx	r7
   16ab4:	4e2c      	ldr	r6, [pc, #176]	; (16b68 <vTaskSuspend+0xcc>)
   16ab6:	8833      	ldrh	r3, [r6, #0]
   16ab8:	4203      	tst	r3, r0
   16aba:	d00c      	beq.n	16ad6 <vTaskSuspend+0x3a>
   16abc:	0020      	movs	r0, r4
   16abe:	47b8      	blx	r7
   16ac0:	8833      	ldrh	r3, [r6, #0]
   16ac2:	4203      	tst	r3, r0
   16ac4:	d007      	beq.n	16ad6 <vTaskSuspend+0x3a>
   16ac6:	4b29      	ldr	r3, [pc, #164]	; (16b6c <vTaskSuspend+0xd0>)
   16ac8:	0020      	movs	r0, r4
   16aca:	4798      	blx	r3
   16acc:	2103      	movs	r1, #3
   16ace:	b2c2      	uxtb	r2, r0
   16ad0:	4b27      	ldr	r3, [pc, #156]	; (16b70 <vTaskSuspend+0xd4>)
   16ad2:	208a      	movs	r0, #138	; 0x8a
   16ad4:	4798      	blx	r3
   16ad6:	4b25      	ldr	r3, [pc, #148]	; (16b6c <vTaskSuspend+0xd0>)
   16ad8:	0020      	movs	r0, r4
   16ada:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   16adc:	1d27      	adds	r7, r4, #4
			traceTASK_SUSPEND( pxTCB );
   16ade:	4b25      	ldr	r3, [pc, #148]	; (16b74 <vTaskSuspend+0xd8>)
   16ae0:	b2c0      	uxtb	r0, r0
   16ae2:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   16ae4:	0038      	movs	r0, r7
   16ae6:	4e24      	ldr	r6, [pc, #144]	; (16b78 <vTaskSuspend+0xdc>)
   16ae8:	47b0      	blx	r6
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   16aea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16aec:	2b00      	cmp	r3, #0
   16aee:	d002      	beq.n	16af6 <vTaskSuspend+0x5a>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   16af0:	0020      	movs	r0, r4
   16af2:	3018      	adds	r0, #24
   16af4:	47b0      	blx	r6
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   16af6:	4e21      	ldr	r6, [pc, #132]	; (16b7c <vTaskSuspend+0xe0>)
   16af8:	4b21      	ldr	r3, [pc, #132]	; (16b80 <vTaskSuspend+0xe4>)
   16afa:	0039      	movs	r1, r7
   16afc:	0030      	movs	r0, r6
   16afe:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   16b00:	0023      	movs	r3, r4
   16b02:	3350      	adds	r3, #80	; 0x50
   16b04:	781a      	ldrb	r2, [r3, #0]
   16b06:	2a01      	cmp	r2, #1
   16b08:	d101      	bne.n	16b0e <vTaskSuspend+0x72>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   16b0a:	2200      	movs	r2, #0
   16b0c:	701a      	strb	r2, [r3, #0]
		taskEXIT_CRITICAL();
   16b0e:	4b1d      	ldr	r3, [pc, #116]	; (16b84 <vTaskSuspend+0xe8>)
   16b10:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   16b12:	4f1d      	ldr	r7, [pc, #116]	; (16b88 <vTaskSuspend+0xec>)
   16b14:	683b      	ldr	r3, [r7, #0]
   16b16:	2b00      	cmp	r3, #0
   16b18:	d005      	beq.n	16b26 <vTaskSuspend+0x8a>
			taskENTER_CRITICAL();
   16b1a:	4b0f      	ldr	r3, [pc, #60]	; (16b58 <vTaskSuspend+0xbc>)
   16b1c:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
   16b1e:	4b1b      	ldr	r3, [pc, #108]	; (16b8c <vTaskSuspend+0xf0>)
   16b20:	4798      	blx	r3
			taskEXIT_CRITICAL();
   16b22:	4b18      	ldr	r3, [pc, #96]	; (16b84 <vTaskSuspend+0xe8>)
   16b24:	4798      	blx	r3
		if( pxTCB == pxCurrentTCB )
   16b26:	682b      	ldr	r3, [r5, #0]
   16b28:	429c      	cmp	r4, r3
   16b2a:	d10a      	bne.n	16b42 <vTaskSuspend+0xa6>
			if( xSchedulerRunning != pdFALSE )
   16b2c:	683b      	ldr	r3, [r7, #0]
   16b2e:	2b00      	cmp	r3, #0
   16b30:	d008      	beq.n	16b44 <vTaskSuspend+0xa8>
				configASSERT( uxSchedulerSuspended == 0 );
   16b32:	4b17      	ldr	r3, [pc, #92]	; (16b90 <vTaskSuspend+0xf4>)
   16b34:	681b      	ldr	r3, [r3, #0]
   16b36:	2b00      	cmp	r3, #0
   16b38:	d001      	beq.n	16b3e <vTaskSuspend+0xa2>
   16b3a:	b672      	cpsid	i
   16b3c:	e7fe      	b.n	16b3c <vTaskSuspend+0xa0>
				portYIELD_WITHIN_API();
   16b3e:	4b15      	ldr	r3, [pc, #84]	; (16b94 <vTaskSuspend+0xf8>)
   16b40:	4798      	blx	r3
	}
   16b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   16b44:	4a14      	ldr	r2, [pc, #80]	; (16b98 <vTaskSuspend+0xfc>)
   16b46:	6831      	ldr	r1, [r6, #0]
   16b48:	6812      	ldr	r2, [r2, #0]
   16b4a:	4291      	cmp	r1, r2
   16b4c:	d101      	bne.n	16b52 <vTaskSuspend+0xb6>
					pxCurrentTCB = NULL;
   16b4e:	602b      	str	r3, [r5, #0]
   16b50:	e7f7      	b.n	16b42 <vTaskSuspend+0xa6>
					vTaskSwitchContext();
   16b52:	4b12      	ldr	r3, [pc, #72]	; (16b9c <vTaskSuspend+0x100>)
   16b54:	4798      	blx	r3
	}
   16b56:	e7f4      	b.n	16b42 <vTaskSuspend+0xa6>
   16b58:	00015181 	.word	0x00015181
   16b5c:	200033d4 	.word	0x200033d4
   16b60:	00014125 	.word	0x00014125
   16b64:	00013fa9 	.word	0x00013fa9
   16b68:	20000054 	.word	0x20000054
   16b6c:	00013f99 	.word	0x00013f99
   16b70:	00014c41 	.word	0x00014c41
   16b74:	000147a1 	.word	0x000147a1
   16b78:	0001504f 	.word	0x0001504f
   16b7c:	200034a8 	.word	0x200034a8
   16b80:	00015009 	.word	0x00015009
   16b84:	00015199 	.word	0x00015199
   16b88:	200034a4 	.word	0x200034a4
   16b8c:	000162b5 	.word	0x000162b5
   16b90:	20003450 	.word	0x20003450
   16b94:	00015171 	.word	0x00015171
   16b98:	20003444 	.word	0x20003444
   16b9c:	000169d9 	.word	0x000169d9

00016ba0 <vTaskPlaceOnEventList>:
{
   16ba0:	b510      	push	{r4, lr}
   16ba2:	000c      	movs	r4, r1
	configASSERT( pxEventList );
   16ba4:	2800      	cmp	r0, #0
   16ba6:	d101      	bne.n	16bac <vTaskPlaceOnEventList+0xc>
   16ba8:	b672      	cpsid	i
   16baa:	e7fe      	b.n	16baa <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   16bac:	4b04      	ldr	r3, [pc, #16]	; (16bc0 <vTaskPlaceOnEventList+0x20>)
   16bae:	6819      	ldr	r1, [r3, #0]
   16bb0:	4b04      	ldr	r3, [pc, #16]	; (16bc4 <vTaskPlaceOnEventList+0x24>)
   16bb2:	3118      	adds	r1, #24
   16bb4:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   16bb6:	2101      	movs	r1, #1
   16bb8:	0020      	movs	r0, r4
   16bba:	4b03      	ldr	r3, [pc, #12]	; (16bc8 <vTaskPlaceOnEventList+0x28>)
   16bbc:	4798      	blx	r3
}
   16bbe:	bd10      	pop	{r4, pc}
   16bc0:	200033d4 	.word	0x200033d4
   16bc4:	00015021 	.word	0x00015021
   16bc8:	000162dd 	.word	0x000162dd

00016bcc <vTaskPlaceOnEventListRestricted>:
	{
   16bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bce:	000c      	movs	r4, r1
   16bd0:	0016      	movs	r6, r2
		configASSERT( pxEventList );
   16bd2:	2800      	cmp	r0, #0
   16bd4:	d101      	bne.n	16bda <vTaskPlaceOnEventListRestricted+0xe>
   16bd6:	b672      	cpsid	i
   16bd8:	e7fe      	b.n	16bd8 <vTaskPlaceOnEventListRestricted+0xc>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   16bda:	4d17      	ldr	r5, [pc, #92]	; (16c38 <vTaskPlaceOnEventListRestricted+0x6c>)
   16bdc:	4b17      	ldr	r3, [pc, #92]	; (16c3c <vTaskPlaceOnEventListRestricted+0x70>)
   16bde:	6829      	ldr	r1, [r5, #0]
   16be0:	3118      	adds	r1, #24
   16be2:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
   16be4:	2e00      	cmp	r6, #0
   16be6:	d001      	beq.n	16bec <vTaskPlaceOnEventListRestricted+0x20>
			xTicksToWait = portMAX_DELAY;
   16be8:	2401      	movs	r4, #1
   16bea:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   16bec:	6828      	ldr	r0, [r5, #0]
   16bee:	4f14      	ldr	r7, [pc, #80]	; (16c40 <vTaskPlaceOnEventListRestricted+0x74>)
   16bf0:	47b8      	blx	r7
   16bf2:	4b14      	ldr	r3, [pc, #80]	; (16c44 <vTaskPlaceOnEventListRestricted+0x78>)
   16bf4:	881b      	ldrh	r3, [r3, #0]
   16bf6:	4203      	tst	r3, r0
   16bf8:	d00b      	beq.n	16c12 <vTaskPlaceOnEventListRestricted+0x46>
   16bfa:	4b13      	ldr	r3, [pc, #76]	; (16c48 <vTaskPlaceOnEventListRestricted+0x7c>)
   16bfc:	2088      	movs	r0, #136	; 0x88
   16bfe:	6819      	ldr	r1, [r3, #0]
   16c00:	4b12      	ldr	r3, [pc, #72]	; (16c4c <vTaskPlaceOnEventListRestricted+0x80>)
   16c02:	1861      	adds	r1, r4, r1
   16c04:	4798      	blx	r3
   16c06:	4b12      	ldr	r3, [pc, #72]	; (16c50 <vTaskPlaceOnEventListRestricted+0x84>)
   16c08:	6828      	ldr	r0, [r5, #0]
   16c0a:	4798      	blx	r3
   16c0c:	4b11      	ldr	r3, [pc, #68]	; (16c54 <vTaskPlaceOnEventListRestricted+0x88>)
   16c0e:	b2c0      	uxtb	r0, r0
   16c10:	4798      	blx	r3
   16c12:	4d11      	ldr	r5, [pc, #68]	; (16c58 <vTaskPlaceOnEventListRestricted+0x8c>)
   16c14:	47a8      	blx	r5
   16c16:	47b8      	blx	r7
   16c18:	4b0a      	ldr	r3, [pc, #40]	; (16c44 <vTaskPlaceOnEventListRestricted+0x78>)
   16c1a:	881b      	ldrh	r3, [r3, #0]
   16c1c:	4203      	tst	r3, r0
   16c1e:	d005      	beq.n	16c2c <vTaskPlaceOnEventListRestricted+0x60>
   16c20:	47a8      	blx	r5
   16c22:	4b0b      	ldr	r3, [pc, #44]	; (16c50 <vTaskPlaceOnEventListRestricted+0x84>)
   16c24:	4798      	blx	r3
   16c26:	4b0b      	ldr	r3, [pc, #44]	; (16c54 <vTaskPlaceOnEventListRestricted+0x88>)
   16c28:	b2c0      	uxtb	r0, r0
   16c2a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   16c2c:	0031      	movs	r1, r6
   16c2e:	0020      	movs	r0, r4
   16c30:	4b0a      	ldr	r3, [pc, #40]	; (16c5c <vTaskPlaceOnEventListRestricted+0x90>)
   16c32:	4798      	blx	r3
	}
   16c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c36:	46c0      	nop			; (mov r8, r8)
   16c38:	200033d4 	.word	0x200033d4
   16c3c:	00015009 	.word	0x00015009
   16c40:	00013fa9 	.word	0x00013fa9
   16c44:	20000054 	.word	0x20000054
   16c48:	200034d0 	.word	0x200034d0
   16c4c:	00014db1 	.word	0x00014db1
   16c50:	00013f99 	.word	0x00013f99
   16c54:	000147a1 	.word	0x000147a1
   16c58:	00014125 	.word	0x00014125
   16c5c:	000162dd 	.word	0x000162dd

00016c60 <xTaskRemoveFromEventList>:
{
   16c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   16c62:	68c3      	ldr	r3, [r0, #12]
   16c64:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   16c66:	2c00      	cmp	r4, #0
   16c68:	d101      	bne.n	16c6e <xTaskRemoveFromEventList+0xe>
   16c6a:	b672      	cpsid	i
   16c6c:	e7fe      	b.n	16c6c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   16c6e:	0026      	movs	r6, r4
   16c70:	3618      	adds	r6, #24
   16c72:	0030      	movs	r0, r6
   16c74:	4f18      	ldr	r7, [pc, #96]	; (16cd8 <xTaskRemoveFromEventList+0x78>)
   16c76:	47b8      	blx	r7
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   16c78:	4b18      	ldr	r3, [pc, #96]	; (16cdc <xTaskRemoveFromEventList+0x7c>)
   16c7a:	4d19      	ldr	r5, [pc, #100]	; (16ce0 <xTaskRemoveFromEventList+0x80>)
   16c7c:	681b      	ldr	r3, [r3, #0]
   16c7e:	2b00      	cmp	r3, #0
   16c80:	d126      	bne.n	16cd0 <xTaskRemoveFromEventList+0x70>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   16c82:	1d26      	adds	r6, r4, #4
   16c84:	0030      	movs	r0, r6
   16c86:	47b8      	blx	r7
		prvAddTaskToReadyList( pxUnblockedTCB );
   16c88:	4b16      	ldr	r3, [pc, #88]	; (16ce4 <xTaskRemoveFromEventList+0x84>)
   16c8a:	0020      	movs	r0, r4
   16c8c:	4798      	blx	r3
   16c8e:	4b16      	ldr	r3, [pc, #88]	; (16ce8 <xTaskRemoveFromEventList+0x88>)
   16c90:	881b      	ldrh	r3, [r3, #0]
   16c92:	4203      	tst	r3, r0
   16c94:	d005      	beq.n	16ca2 <xTaskRemoveFromEventList+0x42>
   16c96:	4b15      	ldr	r3, [pc, #84]	; (16cec <xTaskRemoveFromEventList+0x8c>)
   16c98:	0020      	movs	r0, r4
   16c9a:	4798      	blx	r3
   16c9c:	4b14      	ldr	r3, [pc, #80]	; (16cf0 <xTaskRemoveFromEventList+0x90>)
   16c9e:	b2c0      	uxtb	r0, r0
   16ca0:	4798      	blx	r3
   16ca2:	4a14      	ldr	r2, [pc, #80]	; (16cf4 <xTaskRemoveFromEventList+0x94>)
   16ca4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16ca6:	6811      	ldr	r1, [r2, #0]
   16ca8:	428b      	cmp	r3, r1
   16caa:	d900      	bls.n	16cae <xTaskRemoveFromEventList+0x4e>
   16cac:	6013      	str	r3, [r2, #0]
   16cae:	2014      	movs	r0, #20
   16cb0:	0031      	movs	r1, r6
   16cb2:	4343      	muls	r3, r0
   16cb4:	4810      	ldr	r0, [pc, #64]	; (16cf8 <xTaskRemoveFromEventList+0x98>)
   16cb6:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   16cb8:	47a8      	blx	r5
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   16cba:	4b10      	ldr	r3, [pc, #64]	; (16cfc <xTaskRemoveFromEventList+0x9c>)
   16cbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   16cbe:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
   16cc0:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   16cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16cc4:	429a      	cmp	r2, r3
   16cc6:	d902      	bls.n	16cce <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
   16cc8:	4b0d      	ldr	r3, [pc, #52]	; (16d00 <xTaskRemoveFromEventList+0xa0>)
   16cca:	3001      	adds	r0, #1
   16ccc:	6018      	str	r0, [r3, #0]
}
   16cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   16cd0:	0031      	movs	r1, r6
   16cd2:	480c      	ldr	r0, [pc, #48]	; (16d04 <xTaskRemoveFromEventList+0xa4>)
   16cd4:	e7f0      	b.n	16cb8 <xTaskRemoveFromEventList+0x58>
   16cd6:	46c0      	nop			; (mov r8, r8)
   16cd8:	0001504f 	.word	0x0001504f
   16cdc:	20003450 	.word	0x20003450
   16ce0:	00015009 	.word	0x00015009
   16ce4:	00013fa9 	.word	0x00013fa9
   16ce8:	20000054 	.word	0x20000054
   16cec:	00013f99 	.word	0x00013f99
   16cf0:	00014add 	.word	0x00014add
   16cf4:	20003458 	.word	0x20003458
   16cf8:	200033e0 	.word	0x200033e0
   16cfc:	200033d4 	.word	0x200033d4
   16d00:	200034d4 	.word	0x200034d4
   16d04:	20003490 	.word	0x20003490

00016d08 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   16d08:	4b03      	ldr	r3, [pc, #12]	; (16d18 <vTaskInternalSetTimeOutState+0x10>)
   16d0a:	681b      	ldr	r3, [r3, #0]
   16d0c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   16d0e:	4b03      	ldr	r3, [pc, #12]	; (16d1c <vTaskInternalSetTimeOutState+0x14>)
   16d10:	681b      	ldr	r3, [r3, #0]
   16d12:	6043      	str	r3, [r0, #4]
}
   16d14:	4770      	bx	lr
   16d16:	46c0      	nop			; (mov r8, r8)
   16d18:	2000348c 	.word	0x2000348c
   16d1c:	200034d0 	.word	0x200034d0

00016d20 <xTaskCheckForTimeOut>:
{
   16d20:	b570      	push	{r4, r5, r6, lr}
   16d22:	0005      	movs	r5, r0
   16d24:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
   16d26:	2800      	cmp	r0, #0
   16d28:	d101      	bne.n	16d2e <xTaskCheckForTimeOut+0xe>
   16d2a:	b672      	cpsid	i
   16d2c:	e7fe      	b.n	16d2c <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   16d2e:	2900      	cmp	r1, #0
   16d30:	d101      	bne.n	16d36 <xTaskCheckForTimeOut+0x16>
   16d32:	b672      	cpsid	i
   16d34:	e7fe      	b.n	16d34 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
   16d36:	4b11      	ldr	r3, [pc, #68]	; (16d7c <xTaskCheckForTimeOut+0x5c>)
   16d38:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
   16d3a:	4b11      	ldr	r3, [pc, #68]	; (16d80 <xTaskCheckForTimeOut+0x60>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   16d3c:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
   16d3e:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
   16d40:	6823      	ldr	r3, [r4, #0]
				xReturn = pdFALSE;
   16d42:	2600      	movs	r6, #0
			if( *pxTicksToWait == portMAX_DELAY )
   16d44:	1c58      	adds	r0, r3, #1
   16d46:	d010      	beq.n	16d6a <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   16d48:	480e      	ldr	r0, [pc, #56]	; (16d84 <xTaskCheckForTimeOut+0x64>)
   16d4a:	682e      	ldr	r6, [r5, #0]
   16d4c:	6800      	ldr	r0, [r0, #0]
   16d4e:	4286      	cmp	r6, r0
   16d50:	d002      	beq.n	16d58 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
   16d52:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   16d54:	428a      	cmp	r2, r1
   16d56:	d208      	bcs.n	16d6a <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   16d58:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   16d5a:	429a      	cmp	r2, r3
   16d5c:	d209      	bcs.n	16d72 <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= xElapsedTime;
   16d5e:	1a9b      	subs	r3, r3, r2
   16d60:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   16d62:	0028      	movs	r0, r5
   16d64:	4b08      	ldr	r3, [pc, #32]	; (16d88 <xTaskCheckForTimeOut+0x68>)
   16d66:	4798      	blx	r3
			xReturn = pdFALSE;
   16d68:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
   16d6a:	4b08      	ldr	r3, [pc, #32]	; (16d8c <xTaskCheckForTimeOut+0x6c>)
   16d6c:	4798      	blx	r3
}
   16d6e:	0030      	movs	r0, r6
   16d70:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
   16d72:	2300      	movs	r3, #0
			xReturn = pdTRUE;
   16d74:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
   16d76:	6023      	str	r3, [r4, #0]
   16d78:	e7f7      	b.n	16d6a <xTaskCheckForTimeOut+0x4a>
   16d7a:	46c0      	nop			; (mov r8, r8)
   16d7c:	00015181 	.word	0x00015181
   16d80:	200034d0 	.word	0x200034d0
   16d84:	2000348c 	.word	0x2000348c
   16d88:	00016d09 	.word	0x00016d09
   16d8c:	00015199 	.word	0x00015199

00016d90 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
   16d90:	2201      	movs	r2, #1
   16d92:	4b01      	ldr	r3, [pc, #4]	; (16d98 <vTaskMissedYield+0x8>)
   16d94:	601a      	str	r2, [r3, #0]
}
   16d96:	4770      	bx	lr
   16d98:	200034d4 	.word	0x200034d4

00016d9c <uxTaskGetTaskNumber>:
		if( xTask != NULL )
   16d9c:	2800      	cmp	r0, #0
   16d9e:	d000      	beq.n	16da2 <uxTaskGetTaskNumber+0x6>
			uxReturn = pxTCB->uxTaskNumber;
   16da0:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
   16da2:	4770      	bx	lr

00016da4 <vTaskSetTaskNumber>:
		if( xTask != NULL )
   16da4:	2800      	cmp	r0, #0
   16da6:	d000      	beq.n	16daa <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
   16da8:	6401      	str	r1, [r0, #64]	; 0x40
	}
   16daa:	4770      	bx	lr

00016dac <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
   16dac:	2800      	cmp	r0, #0
   16dae:	d101      	bne.n	16db4 <uxTaskGetStackHighWaterMark+0x8>
   16db0:	4b06      	ldr	r3, [pc, #24]	; (16dcc <uxTaskGetStackHighWaterMark+0x20>)
   16db2:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   16db4:	6b02      	ldr	r2, [r0, #48]	; 0x30
   16db6:	0013      	movs	r3, r2
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   16db8:	7819      	ldrb	r1, [r3, #0]
   16dba:	1a98      	subs	r0, r3, r2
   16dbc:	29a5      	cmp	r1, #165	; 0xa5
   16dbe:	d002      	beq.n	16dc6 <uxTaskGetStackHighWaterMark+0x1a>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   16dc0:	0880      	lsrs	r0, r0, #2
		return uxReturn;
   16dc2:	b280      	uxth	r0, r0
	}
   16dc4:	4770      	bx	lr
			pucStackByte -= portSTACK_GROWTH;
   16dc6:	3301      	adds	r3, #1
   16dc8:	e7f6      	b.n	16db8 <uxTaskGetStackHighWaterMark+0xc>
   16dca:	46c0      	nop			; (mov r8, r8)
   16dcc:	200033d4 	.word	0x200033d4

00016dd0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
   16dd0:	4b01      	ldr	r3, [pc, #4]	; (16dd8 <xTaskGetCurrentTaskHandle+0x8>)
   16dd2:	6818      	ldr	r0, [r3, #0]
	}
   16dd4:	4770      	bx	lr
   16dd6:	46c0      	nop			; (mov r8, r8)
   16dd8:	200033d4 	.word	0x200033d4

00016ddc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
   16ddc:	4b05      	ldr	r3, [pc, #20]	; (16df4 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
   16dde:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
   16de0:	681b      	ldr	r3, [r3, #0]
   16de2:	2b00      	cmp	r3, #0
   16de4:	d004      	beq.n	16df0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   16de6:	4b04      	ldr	r3, [pc, #16]	; (16df8 <xTaskGetSchedulerState+0x1c>)
   16de8:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
   16dea:	4243      	negs	r3, r0
   16dec:	4158      	adcs	r0, r3
   16dee:	0040      	lsls	r0, r0, #1
	}
   16df0:	4770      	bx	lr
   16df2:	46c0      	nop			; (mov r8, r8)
   16df4:	200034a4 	.word	0x200034a4
   16df8:	20003450 	.word	0x20003450

00016dfc <xTaskPriorityInherit>:
	{
   16dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16dfe:	0004      	movs	r4, r0
	BaseType_t xReturn = pdFALSE;
   16e00:	1e06      	subs	r6, r0, #0
		if( pxMutexHolder != NULL )
   16e02:	d057      	beq.n	16eb4 <xTaskPriorityInherit+0xb8>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   16e04:	4d32      	ldr	r5, [pc, #200]	; (16ed0 <xTaskPriorityInherit+0xd4>)
   16e06:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   16e08:	682b      	ldr	r3, [r5, #0]
   16e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16e0c:	4299      	cmp	r1, r3
   16e0e:	d253      	bcs.n	16eb8 <xTaskPriorityInherit+0xbc>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   16e10:	6983      	ldr	r3, [r0, #24]
   16e12:	2b00      	cmp	r3, #0
   16e14:	db04      	blt.n	16e20 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16e16:	2205      	movs	r2, #5
   16e18:	682b      	ldr	r3, [r5, #0]
   16e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16e1c:	1ad2      	subs	r2, r2, r3
   16e1e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   16e20:	2314      	movs	r3, #20
   16e22:	434b      	muls	r3, r1
   16e24:	4a2b      	ldr	r2, [pc, #172]	; (16ed4 <xTaskPriorityInherit+0xd8>)
   16e26:	4e2c      	ldr	r6, [pc, #176]	; (16ed8 <xTaskPriorityInherit+0xdc>)
   16e28:	18d3      	adds	r3, r2, r3
   16e2a:	6962      	ldr	r2, [r4, #20]
   16e2c:	4f2b      	ldr	r7, [pc, #172]	; (16edc <xTaskPriorityInherit+0xe0>)
   16e2e:	429a      	cmp	r2, r3
   16e30:	d149      	bne.n	16ec6 <xTaskPriorityInherit+0xca>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   16e32:	1d23      	adds	r3, r4, #4
   16e34:	9301      	str	r3, [sp, #4]
   16e36:	0018      	movs	r0, r3
   16e38:	4b29      	ldr	r3, [pc, #164]	; (16ee0 <xTaskPriorityInherit+0xe4>)
   16e3a:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   16e3c:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
   16e3e:	0020      	movs	r0, r4
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   16e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16e42:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   16e44:	47b0      	blx	r6
   16e46:	883b      	ldrh	r3, [r7, #0]
   16e48:	4203      	tst	r3, r0
   16e4a:	d005      	beq.n	16e58 <xTaskPriorityInherit+0x5c>
   16e4c:	4b25      	ldr	r3, [pc, #148]	; (16ee4 <xTaskPriorityInherit+0xe8>)
   16e4e:	0020      	movs	r0, r4
   16e50:	4798      	blx	r3
   16e52:	4b25      	ldr	r3, [pc, #148]	; (16ee8 <xTaskPriorityInherit+0xec>)
   16e54:	b2c0      	uxtb	r0, r0
   16e56:	4798      	blx	r3
   16e58:	4a24      	ldr	r2, [pc, #144]	; (16eec <xTaskPriorityInherit+0xf0>)
   16e5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16e5c:	6811      	ldr	r1, [r2, #0]
   16e5e:	428b      	cmp	r3, r1
   16e60:	d900      	bls.n	16e64 <xTaskPriorityInherit+0x68>
   16e62:	6013      	str	r3, [r2, #0]
   16e64:	2014      	movs	r0, #20
   16e66:	4358      	muls	r0, r3
   16e68:	4b1a      	ldr	r3, [pc, #104]	; (16ed4 <xTaskPriorityInherit+0xd8>)
   16e6a:	1d21      	adds	r1, r4, #4
   16e6c:	1818      	adds	r0, r3, r0
   16e6e:	4b20      	ldr	r3, [pc, #128]	; (16ef0 <xTaskPriorityInherit+0xf4>)
   16e70:	4798      	blx	r3
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   16e72:	0020      	movs	r0, r4
   16e74:	47b0      	blx	r6
   16e76:	883b      	ldrh	r3, [r7, #0]
				xReturn = pdTRUE;
   16e78:	2601      	movs	r6, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   16e7a:	4203      	tst	r3, r0
   16e7c:	d01a      	beq.n	16eb4 <xTaskPriorityInherit+0xb8>
   16e7e:	4b19      	ldr	r3, [pc, #100]	; (16ee4 <xTaskPriorityInherit+0xe8>)
   16e80:	0020      	movs	r0, r4
   16e82:	4798      	blx	r3
   16e84:	4b17      	ldr	r3, [pc, #92]	; (16ee4 <xTaskPriorityInherit+0xe8>)
   16e86:	0007      	movs	r7, r0
   16e88:	0020      	movs	r0, r4
   16e8a:	4798      	blx	r3
   16e8c:	4b19      	ldr	r3, [pc, #100]	; (16ef4 <xTaskPriorityInherit+0xf8>)
   16e8e:	b2c1      	uxtb	r1, r0
   16e90:	2003      	movs	r0, #3
   16e92:	4798      	blx	r3
   16e94:	b2fa      	uxtb	r2, r7
   16e96:	0003      	movs	r3, r0
   16e98:	2103      	movs	r1, #3
   16e9a:	208e      	movs	r0, #142	; 0x8e
   16e9c:	4f16      	ldr	r7, [pc, #88]	; (16ef8 <xTaskPriorityInherit+0xfc>)
   16e9e:	47b8      	blx	r7
   16ea0:	4b10      	ldr	r3, [pc, #64]	; (16ee4 <xTaskPriorityInherit+0xe8>)
   16ea2:	0020      	movs	r0, r4
   16ea4:	4798      	blx	r3
   16ea6:	682b      	ldr	r3, [r5, #0]
   16ea8:	b2c1      	uxtb	r1, r0
   16eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16eac:	2003      	movs	r0, #3
   16eae:	b2d2      	uxtb	r2, r2
   16eb0:	4b12      	ldr	r3, [pc, #72]	; (16efc <xTaskPriorityInherit+0x100>)
   16eb2:	4798      	blx	r3
	}
   16eb4:	0030      	movs	r0, r6
   16eb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   16eb8:	682b      	ldr	r3, [r5, #0]
   16eba:	6c46      	ldr	r6, [r0, #68]	; 0x44
   16ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16ebe:	429e      	cmp	r6, r3
   16ec0:	41b6      	sbcs	r6, r6
   16ec2:	4276      	negs	r6, r6
   16ec4:	e7f6      	b.n	16eb4 <xTaskPriorityInherit+0xb8>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   16ec6:	682b      	ldr	r3, [r5, #0]
   16ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16eca:	62e3      	str	r3, [r4, #44]	; 0x2c
   16ecc:	e7d1      	b.n	16e72 <xTaskPriorityInherit+0x76>
   16ece:	46c0      	nop			; (mov r8, r8)
   16ed0:	200033d4 	.word	0x200033d4
   16ed4:	200033e0 	.word	0x200033e0
   16ed8:	00013fa9 	.word	0x00013fa9
   16edc:	20000054 	.word	0x20000054
   16ee0:	0001504f 	.word	0x0001504f
   16ee4:	00013f99 	.word	0x00013f99
   16ee8:	00014add 	.word	0x00014add
   16eec:	20003458 	.word	0x20003458
   16ef0:	00015009 	.word	0x00015009
   16ef4:	000146f9 	.word	0x000146f9
   16ef8:	00014ced 	.word	0x00014ced
   16efc:	000146a5 	.word	0x000146a5

00016f00 <xTaskPriorityDisinherit>:
	{
   16f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16f02:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   16f04:	d101      	bne.n	16f0a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
   16f06:	2000      	movs	r0, #0
	}
   16f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
   16f0a:	4b2c      	ldr	r3, [pc, #176]	; (16fbc <xTaskPriorityDisinherit+0xbc>)
   16f0c:	681b      	ldr	r3, [r3, #0]
   16f0e:	4298      	cmp	r0, r3
   16f10:	d001      	beq.n	16f16 <xTaskPriorityDisinherit+0x16>
   16f12:	b672      	cpsid	i
   16f14:	e7fe      	b.n	16f14 <xTaskPriorityDisinherit+0x14>
			configASSERT( pxTCB->uxMutexesHeld );
   16f16:	6c83      	ldr	r3, [r0, #72]	; 0x48
   16f18:	2b00      	cmp	r3, #0
   16f1a:	d101      	bne.n	16f20 <xTaskPriorityDisinherit+0x20>
   16f1c:	b672      	cpsid	i
   16f1e:	e7fe      	b.n	16f1e <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   16f20:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   16f22:	6c41      	ldr	r1, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
   16f24:	3b01      	subs	r3, #1
   16f26:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   16f28:	428a      	cmp	r2, r1
   16f2a:	d0ec      	beq.n	16f06 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   16f2c:	2b00      	cmp	r3, #0
   16f2e:	d1ea      	bne.n	16f06 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   16f30:	1d07      	adds	r7, r0, #4
   16f32:	4b23      	ldr	r3, [pc, #140]	; (16fc0 <xTaskPriorityDisinherit+0xc0>)
   16f34:	0038      	movs	r0, r7
   16f36:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   16f38:	4b22      	ldr	r3, [pc, #136]	; (16fc4 <xTaskPriorityDisinherit+0xc4>)
   16f3a:	0020      	movs	r0, r4
   16f3c:	4798      	blx	r3
   16f3e:	4b22      	ldr	r3, [pc, #136]	; (16fc8 <xTaskPriorityDisinherit+0xc8>)
   16f40:	881b      	ldrh	r3, [r3, #0]
   16f42:	4203      	tst	r3, r0
   16f44:	d018      	beq.n	16f78 <xTaskPriorityDisinherit+0x78>
   16f46:	4d21      	ldr	r5, [pc, #132]	; (16fcc <xTaskPriorityDisinherit+0xcc>)
   16f48:	0020      	movs	r0, r4
   16f4a:	47a8      	blx	r5
   16f4c:	0006      	movs	r6, r0
   16f4e:	0020      	movs	r0, r4
   16f50:	47a8      	blx	r5
   16f52:	4b1f      	ldr	r3, [pc, #124]	; (16fd0 <xTaskPriorityDisinherit+0xd0>)
   16f54:	b2c1      	uxtb	r1, r0
   16f56:	2003      	movs	r0, #3
   16f58:	4798      	blx	r3
   16f5a:	b2f2      	uxtb	r2, r6
   16f5c:	0003      	movs	r3, r0
   16f5e:	2103      	movs	r1, #3
   16f60:	208f      	movs	r0, #143	; 0x8f
   16f62:	4e1c      	ldr	r6, [pc, #112]	; (16fd4 <xTaskPriorityDisinherit+0xd4>)
   16f64:	47b0      	blx	r6
   16f66:	0020      	movs	r0, r4
   16f68:	47a8      	blx	r5
   16f6a:	2344      	movs	r3, #68	; 0x44
   16f6c:	18e3      	adds	r3, r4, r3
   16f6e:	781a      	ldrb	r2, [r3, #0]
   16f70:	b2c1      	uxtb	r1, r0
   16f72:	4b19      	ldr	r3, [pc, #100]	; (16fd8 <xTaskPriorityDisinherit+0xd8>)
   16f74:	2003      	movs	r0, #3
   16f76:	4798      	blx	r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16f78:	2305      	movs	r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   16f7a:	6c62      	ldr	r2, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
   16f7c:	0020      	movs	r0, r4
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16f7e:	1a9b      	subs	r3, r3, r2
   16f80:	61a3      	str	r3, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   16f82:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   16f84:	4b0f      	ldr	r3, [pc, #60]	; (16fc4 <xTaskPriorityDisinherit+0xc4>)
   16f86:	4798      	blx	r3
   16f88:	4b0f      	ldr	r3, [pc, #60]	; (16fc8 <xTaskPriorityDisinherit+0xc8>)
   16f8a:	881b      	ldrh	r3, [r3, #0]
   16f8c:	4203      	tst	r3, r0
   16f8e:	d005      	beq.n	16f9c <xTaskPriorityDisinherit+0x9c>
   16f90:	4b0e      	ldr	r3, [pc, #56]	; (16fcc <xTaskPriorityDisinherit+0xcc>)
   16f92:	0020      	movs	r0, r4
   16f94:	4798      	blx	r3
   16f96:	4b11      	ldr	r3, [pc, #68]	; (16fdc <xTaskPriorityDisinherit+0xdc>)
   16f98:	b2c0      	uxtb	r0, r0
   16f9a:	4798      	blx	r3
   16f9c:	4a10      	ldr	r2, [pc, #64]	; (16fe0 <xTaskPriorityDisinherit+0xe0>)
   16f9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16fa0:	6811      	ldr	r1, [r2, #0]
   16fa2:	428b      	cmp	r3, r1
   16fa4:	d900      	bls.n	16fa8 <xTaskPriorityDisinherit+0xa8>
   16fa6:	6013      	str	r3, [r2, #0]
   16fa8:	2014      	movs	r0, #20
   16faa:	4343      	muls	r3, r0
   16fac:	480d      	ldr	r0, [pc, #52]	; (16fe4 <xTaskPriorityDisinherit+0xe4>)
   16fae:	0039      	movs	r1, r7
   16fb0:	18c0      	adds	r0, r0, r3
   16fb2:	4b0d      	ldr	r3, [pc, #52]	; (16fe8 <xTaskPriorityDisinherit+0xe8>)
   16fb4:	4798      	blx	r3
					xReturn = pdTRUE;
   16fb6:	2001      	movs	r0, #1
		return xReturn;
   16fb8:	e7a6      	b.n	16f08 <xTaskPriorityDisinherit+0x8>
   16fba:	46c0      	nop			; (mov r8, r8)
   16fbc:	200033d4 	.word	0x200033d4
   16fc0:	0001504f 	.word	0x0001504f
   16fc4:	00013fa9 	.word	0x00013fa9
   16fc8:	20000054 	.word	0x20000054
   16fcc:	00013f99 	.word	0x00013f99
   16fd0:	000146f9 	.word	0x000146f9
   16fd4:	00014ced 	.word	0x00014ced
   16fd8:	000146a5 	.word	0x000146a5
   16fdc:	00014add 	.word	0x00014add
   16fe0:	20003458 	.word	0x20003458
   16fe4:	200033e0 	.word	0x200033e0
   16fe8:	00015009 	.word	0x00015009

00016fec <vTaskPriorityDisinheritAfterTimeout>:
	{
   16fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16fee:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
   16ff0:	d05f      	beq.n	170b2 <vTaskPriorityDisinheritAfterTimeout+0xc6>
			configASSERT( pxTCB->uxMutexesHeld );
   16ff2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   16ff4:	2b00      	cmp	r3, #0
   16ff6:	d101      	bne.n	16ffc <vTaskPriorityDisinheritAfterTimeout+0x10>
   16ff8:	b672      	cpsid	i
   16ffa:	e7fe      	b.n	16ffa <vTaskPriorityDisinheritAfterTimeout+0xe>
   16ffc:	6c45      	ldr	r5, [r0, #68]	; 0x44
   16ffe:	428d      	cmp	r5, r1
   17000:	d200      	bcs.n	17004 <vTaskPriorityDisinheritAfterTimeout+0x18>
   17002:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
   17004:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17006:	42aa      	cmp	r2, r5
   17008:	d053      	beq.n	170b2 <vTaskPriorityDisinheritAfterTimeout+0xc6>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1700a:	2b01      	cmp	r3, #1
   1700c:	d151      	bne.n	170b2 <vTaskPriorityDisinheritAfterTimeout+0xc6>
					configASSERT( pxTCB != pxCurrentTCB );
   1700e:	4b29      	ldr	r3, [pc, #164]	; (170b4 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
   17010:	681b      	ldr	r3, [r3, #0]
   17012:	429c      	cmp	r4, r3
   17014:	d101      	bne.n	1701a <vTaskPriorityDisinheritAfterTimeout+0x2e>
   17016:	b672      	cpsid	i
   17018:	e7fe      	b.n	17018 <vTaskPriorityDisinheritAfterTimeout+0x2c>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1701a:	4b27      	ldr	r3, [pc, #156]	; (170b8 <vTaskPriorityDisinheritAfterTimeout+0xcc>)
   1701c:	0020      	movs	r0, r4
   1701e:	4798      	blx	r3
   17020:	4b26      	ldr	r3, [pc, #152]	; (170bc <vTaskPriorityDisinheritAfterTimeout+0xd0>)
   17022:	881b      	ldrh	r3, [r3, #0]
   17024:	4203      	tst	r3, r0
   17026:	d018      	beq.n	1705a <vTaskPriorityDisinheritAfterTimeout+0x6e>
   17028:	4e25      	ldr	r6, [pc, #148]	; (170c0 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
   1702a:	0020      	movs	r0, r4
   1702c:	47b0      	blx	r6
   1702e:	0007      	movs	r7, r0
   17030:	0020      	movs	r0, r4
   17032:	47b0      	blx	r6
   17034:	4b23      	ldr	r3, [pc, #140]	; (170c4 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
   17036:	b2c1      	uxtb	r1, r0
   17038:	2003      	movs	r0, #3
   1703a:	4798      	blx	r3
   1703c:	b2fa      	uxtb	r2, r7
   1703e:	0003      	movs	r3, r0
   17040:	2103      	movs	r1, #3
   17042:	208f      	movs	r0, #143	; 0x8f
   17044:	4f20      	ldr	r7, [pc, #128]	; (170c8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   17046:	47b8      	blx	r7
   17048:	0020      	movs	r0, r4
   1704a:	47b0      	blx	r6
   1704c:	2344      	movs	r3, #68	; 0x44
   1704e:	18e3      	adds	r3, r4, r3
   17050:	781a      	ldrb	r2, [r3, #0]
   17052:	b2c1      	uxtb	r1, r0
   17054:	4b1d      	ldr	r3, [pc, #116]	; (170cc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   17056:	2003      	movs	r0, #3
   17058:	4798      	blx	r3
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1705a:	69a3      	ldr	r3, [r4, #24]
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1705c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
   1705e:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   17060:	2b00      	cmp	r3, #0
   17062:	db02      	blt.n	1706a <vTaskPriorityDisinheritAfterTimeout+0x7e>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17064:	2205      	movs	r2, #5
   17066:	1b55      	subs	r5, r2, r5
   17068:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1706a:	2314      	movs	r3, #20
   1706c:	434b      	muls	r3, r1
   1706e:	4e18      	ldr	r6, [pc, #96]	; (170d0 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   17070:	6962      	ldr	r2, [r4, #20]
   17072:	18f3      	adds	r3, r6, r3
   17074:	429a      	cmp	r2, r3
   17076:	d11c      	bne.n	170b2 <vTaskPriorityDisinheritAfterTimeout+0xc6>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   17078:	1d25      	adds	r5, r4, #4
   1707a:	4b16      	ldr	r3, [pc, #88]	; (170d4 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   1707c:	0028      	movs	r0, r5
   1707e:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
   17080:	4b0d      	ldr	r3, [pc, #52]	; (170b8 <vTaskPriorityDisinheritAfterTimeout+0xcc>)
   17082:	0020      	movs	r0, r4
   17084:	4798      	blx	r3
   17086:	4b0d      	ldr	r3, [pc, #52]	; (170bc <vTaskPriorityDisinheritAfterTimeout+0xd0>)
   17088:	881b      	ldrh	r3, [r3, #0]
   1708a:	4203      	tst	r3, r0
   1708c:	d005      	beq.n	1709a <vTaskPriorityDisinheritAfterTimeout+0xae>
   1708e:	4b0c      	ldr	r3, [pc, #48]	; (170c0 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
   17090:	0020      	movs	r0, r4
   17092:	4798      	blx	r3
   17094:	4b10      	ldr	r3, [pc, #64]	; (170d8 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   17096:	b2c0      	uxtb	r0, r0
   17098:	4798      	blx	r3
   1709a:	4a10      	ldr	r2, [pc, #64]	; (170dc <vTaskPriorityDisinheritAfterTimeout+0xf0>)
   1709c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1709e:	6811      	ldr	r1, [r2, #0]
   170a0:	428b      	cmp	r3, r1
   170a2:	d900      	bls.n	170a6 <vTaskPriorityDisinheritAfterTimeout+0xba>
   170a4:	6013      	str	r3, [r2, #0]
   170a6:	2014      	movs	r0, #20
   170a8:	4358      	muls	r0, r3
   170aa:	0029      	movs	r1, r5
   170ac:	1830      	adds	r0, r6, r0
   170ae:	4b0c      	ldr	r3, [pc, #48]	; (170e0 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
   170b0:	4798      	blx	r3
	}
   170b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   170b4:	200033d4 	.word	0x200033d4
   170b8:	00013fa9 	.word	0x00013fa9
   170bc:	20000054 	.word	0x20000054
   170c0:	00013f99 	.word	0x00013f99
   170c4:	000146f9 	.word	0x000146f9
   170c8:	00014ced 	.word	0x00014ced
   170cc:	000146a5 	.word	0x000146a5
   170d0:	200033e0 	.word	0x200033e0
   170d4:	0001504f 	.word	0x0001504f
   170d8:	00014add 	.word	0x00014add
   170dc:	20003458 	.word	0x20003458
   170e0:	00015009 	.word	0x00015009

000170e4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
   170e4:	4b04      	ldr	r3, [pc, #16]	; (170f8 <pvTaskIncrementMutexHeldCount+0x14>)
   170e6:	681a      	ldr	r2, [r3, #0]
   170e8:	2a00      	cmp	r2, #0
   170ea:	d003      	beq.n	170f4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
   170ec:	6819      	ldr	r1, [r3, #0]
   170ee:	6c8a      	ldr	r2, [r1, #72]	; 0x48
   170f0:	3201      	adds	r2, #1
   170f2:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
   170f4:	6818      	ldr	r0, [r3, #0]
	}
   170f6:	4770      	bx	lr
   170f8:	200033d4 	.word	0x200033d4

000170fc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   170fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   170fe:	4b0d      	ldr	r3, [pc, #52]	; (17134 <prvCheckForValidListAndQueue+0x38>)
   17100:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   17102:	4c0d      	ldr	r4, [pc, #52]	; (17138 <prvCheckForValidListAndQueue+0x3c>)
   17104:	6823      	ldr	r3, [r4, #0]
   17106:	9301      	str	r3, [sp, #4]
   17108:	2b00      	cmp	r3, #0
   1710a:	d110      	bne.n	1712e <prvCheckForValidListAndQueue+0x32>
		{
			vListInitialise( &xActiveTimerList1 );
   1710c:	4e0b      	ldr	r6, [pc, #44]	; (1713c <prvCheckForValidListAndQueue+0x40>)
   1710e:	4f0c      	ldr	r7, [pc, #48]	; (17140 <prvCheckForValidListAndQueue+0x44>)
   17110:	0030      	movs	r0, r6
   17112:	47b8      	blx	r7
			vListInitialise( &xActiveTimerList2 );
   17114:	4d0b      	ldr	r5, [pc, #44]	; (17144 <prvCheckForValidListAndQueue+0x48>)
   17116:	0028      	movs	r0, r5
   17118:	47b8      	blx	r7
			pxCurrentTimerList = &xActiveTimerList1;
   1711a:	4b0b      	ldr	r3, [pc, #44]	; (17148 <prvCheckForValidListAndQueue+0x4c>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1711c:	9a01      	ldr	r2, [sp, #4]
			pxCurrentTimerList = &xActiveTimerList1;
   1711e:	601e      	str	r6, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   17120:	4b0a      	ldr	r3, [pc, #40]	; (1714c <prvCheckForValidListAndQueue+0x50>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   17122:	210c      	movs	r1, #12
			pxOverflowTimerList = &xActiveTimerList2;
   17124:	601d      	str	r5, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   17126:	2005      	movs	r0, #5
   17128:	4b09      	ldr	r3, [pc, #36]	; (17150 <prvCheckForValidListAndQueue+0x54>)
   1712a:	4798      	blx	r3
   1712c:	6020      	str	r0, [r4, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1712e:	4b09      	ldr	r3, [pc, #36]	; (17154 <prvCheckForValidListAndQueue+0x58>)
   17130:	4798      	blx	r3
}
   17132:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17134:	00015181 	.word	0x00015181
   17138:	2000350c 	.word	0x2000350c
   1713c:	200034e0 	.word	0x200034e0
   17140:	00014fed 	.word	0x00014fed
   17144:	200034f4 	.word	0x200034f4
   17148:	200034d8 	.word	0x200034d8
   1714c:	200034dc 	.word	0x200034dc
   17150:	000155b9 	.word	0x000155b9
   17154:	00015199 	.word	0x00015199

00017158 <prvInsertTimerInActiveList>:
{
   17158:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1715a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1715c:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
   1715e:	4291      	cmp	r1, r2
   17160:	d80c      	bhi.n	1717c <prvInsertTimerInActiveList+0x24>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17162:	1ad2      	subs	r2, r2, r3
   17164:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
   17166:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17168:	429a      	cmp	r2, r3
   1716a:	d205      	bcs.n	17178 <prvInsertTimerInActiveList+0x20>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1716c:	4b07      	ldr	r3, [pc, #28]	; (1718c <prvInsertTimerInActiveList+0x34>)
   1716e:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   17170:	6818      	ldr	r0, [r3, #0]
   17172:	4b07      	ldr	r3, [pc, #28]	; (17190 <prvInsertTimerInActiveList+0x38>)
   17174:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
   17176:	2400      	movs	r4, #0
}
   17178:	0020      	movs	r0, r4
   1717a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1717c:	429a      	cmp	r2, r3
   1717e:	d202      	bcs.n	17186 <prvInsertTimerInActiveList+0x2e>
			xProcessTimerNow = pdTRUE;
   17180:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   17182:	4299      	cmp	r1, r3
   17184:	d2f8      	bcs.n	17178 <prvInsertTimerInActiveList+0x20>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   17186:	1d01      	adds	r1, r0, #4
   17188:	4b02      	ldr	r3, [pc, #8]	; (17194 <prvInsertTimerInActiveList+0x3c>)
   1718a:	e7f1      	b.n	17170 <prvInsertTimerInActiveList+0x18>
   1718c:	200034dc 	.word	0x200034dc
   17190:	00015021 	.word	0x00015021
   17194:	200034d8 	.word	0x200034d8

00017198 <xTimerCreateTimerTask>:
	prvCheckForValidListAndQueue();
   17198:	4b0a      	ldr	r3, [pc, #40]	; (171c4 <xTimerCreateTimerTask+0x2c>)
{
   1719a:	b513      	push	{r0, r1, r4, lr}
	prvCheckForValidListAndQueue();
   1719c:	4798      	blx	r3
	if( xTimerQueue != NULL )
   1719e:	4b0a      	ldr	r3, [pc, #40]	; (171c8 <xTimerCreateTimerTask+0x30>)
   171a0:	681b      	ldr	r3, [r3, #0]
   171a2:	2b00      	cmp	r3, #0
   171a4:	d101      	bne.n	171aa <xTimerCreateTimerTask+0x12>
	configASSERT( xReturn );
   171a6:	b672      	cpsid	i
   171a8:	e7fe      	b.n	171a8 <xTimerCreateTimerTask+0x10>
			xReturn = xTaskCreate(	prvTimerTask,
   171aa:	4b08      	ldr	r3, [pc, #32]	; (171cc <xTimerCreateTimerTask+0x34>)
   171ac:	2280      	movs	r2, #128	; 0x80
   171ae:	9301      	str	r3, [sp, #4]
   171b0:	2302      	movs	r3, #2
   171b2:	4907      	ldr	r1, [pc, #28]	; (171d0 <xTimerCreateTimerTask+0x38>)
   171b4:	9300      	str	r3, [sp, #0]
   171b6:	4807      	ldr	r0, [pc, #28]	; (171d4 <xTimerCreateTimerTask+0x3c>)
   171b8:	2300      	movs	r3, #0
   171ba:	4c07      	ldr	r4, [pc, #28]	; (171d8 <xTimerCreateTimerTask+0x40>)
   171bc:	47a0      	blx	r4
	configASSERT( xReturn );
   171be:	2800      	cmp	r0, #0
   171c0:	d0f1      	beq.n	171a6 <xTimerCreateTimerTask+0xe>
}
   171c2:	bd16      	pop	{r1, r2, r4, pc}
   171c4:	000170fd 	.word	0x000170fd
   171c8:	2000350c 	.word	0x2000350c
   171cc:	20003510 	.word	0x20003510
   171d0:	0001cf4c 	.word	0x0001cf4c
   171d4:	000172a5 	.word	0x000172a5
   171d8:	000163c1 	.word	0x000163c1

000171dc <xTimerGenericCommand>:
{
   171dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   171de:	0017      	movs	r7, r2
   171e0:	b085      	sub	sp, #20
   171e2:	0006      	movs	r6, r0
   171e4:	001a      	movs	r2, r3
	configASSERT( xTimer );
   171e6:	2800      	cmp	r0, #0
   171e8:	d101      	bne.n	171ee <xTimerGenericCommand+0x12>
   171ea:	b672      	cpsid	i
   171ec:	e7fe      	b.n	171ec <xTimerGenericCommand+0x10>
	if( xTimerQueue != NULL )
   171ee:	4d0d      	ldr	r5, [pc, #52]	; (17224 <xTimerGenericCommand+0x48>)
   171f0:	682c      	ldr	r4, [r5, #0]
BaseType_t xReturn = pdFAIL;
   171f2:	1e20      	subs	r0, r4, #0
	if( xTimerQueue != NULL )
   171f4:	d00f      	beq.n	17216 <xTimerGenericCommand+0x3a>
		xMessage.xMessageID = xCommandID;
   171f6:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   171f8:	9702      	str	r7, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   171fa:	9603      	str	r6, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   171fc:	2905      	cmp	r1, #5
   171fe:	dc0c      	bgt.n	1721a <xTimerGenericCommand+0x3e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   17200:	4b09      	ldr	r3, [pc, #36]	; (17228 <xTimerGenericCommand+0x4c>)
   17202:	4798      	blx	r3
   17204:	4c09      	ldr	r4, [pc, #36]	; (1722c <xTimerGenericCommand+0x50>)
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   17206:	2300      	movs	r3, #0
   17208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1720a:	2802      	cmp	r0, #2
   1720c:	d000      	beq.n	17210 <xTimerGenericCommand+0x34>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1720e:	001a      	movs	r2, r3
   17210:	6828      	ldr	r0, [r5, #0]
   17212:	a901      	add	r1, sp, #4
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   17214:	47a0      	blx	r4
}
   17216:	b005      	add	sp, #20
   17218:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1721a:	0020      	movs	r0, r4
   1721c:	2300      	movs	r3, #0
   1721e:	a901      	add	r1, sp, #4
   17220:	4c03      	ldr	r4, [pc, #12]	; (17230 <xTimerGenericCommand+0x54>)
   17222:	e7f7      	b.n	17214 <xTimerGenericCommand+0x38>
   17224:	2000350c 	.word	0x2000350c
   17228:	00016ddd 	.word	0x00016ddd
   1722c:	000156ed 	.word	0x000156ed
   17230:	000159b1 	.word	0x000159b1

00017234 <prvSwitchTimerLists>:
{
   17234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   17236:	4d16      	ldr	r5, [pc, #88]	; (17290 <prvSwitchTimerLists+0x5c>)
   17238:	682b      	ldr	r3, [r5, #0]
   1723a:	681a      	ldr	r2, [r3, #0]
   1723c:	2a00      	cmp	r2, #0
   1723e:	d104      	bne.n	1724a <prvSwitchTimerLists+0x16>
	pxCurrentTimerList = pxOverflowTimerList;
   17240:	4a14      	ldr	r2, [pc, #80]	; (17294 <prvSwitchTimerLists+0x60>)
   17242:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
   17244:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
   17246:	6029      	str	r1, [r5, #0]
}
   17248:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1724a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1724c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1724e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   17250:	1d27      	adds	r7, r4, #4
   17252:	4b11      	ldr	r3, [pc, #68]	; (17298 <prvSwitchTimerLists+0x64>)
   17254:	0038      	movs	r0, r7
   17256:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   17258:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1725a:	0020      	movs	r0, r4
   1725c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1725e:	69e3      	ldr	r3, [r4, #28]
   17260:	2b01      	cmp	r3, #1
   17262:	d1e8      	bne.n	17236 <prvSwitchTimerLists+0x2>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   17264:	69a3      	ldr	r3, [r4, #24]
   17266:	18f3      	adds	r3, r6, r3
			if( xReloadTime > xNextExpireTime )
   17268:	429e      	cmp	r6, r3
   1726a:	d206      	bcs.n	1727a <prvSwitchTimerLists+0x46>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1726c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1726e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   17270:	0039      	movs	r1, r7
   17272:	6828      	ldr	r0, [r5, #0]
   17274:	4b09      	ldr	r3, [pc, #36]	; (1729c <prvSwitchTimerLists+0x68>)
   17276:	4798      	blx	r3
   17278:	e7dd      	b.n	17236 <prvSwitchTimerLists+0x2>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1727a:	2100      	movs	r1, #0
   1727c:	0020      	movs	r0, r4
   1727e:	9100      	str	r1, [sp, #0]
   17280:	000b      	movs	r3, r1
   17282:	0032      	movs	r2, r6
   17284:	4c06      	ldr	r4, [pc, #24]	; (172a0 <prvSwitchTimerLists+0x6c>)
   17286:	47a0      	blx	r4
				configASSERT( xResult );
   17288:	2800      	cmp	r0, #0
   1728a:	d1d4      	bne.n	17236 <prvSwitchTimerLists+0x2>
   1728c:	b672      	cpsid	i
   1728e:	e7fe      	b.n	1728e <prvSwitchTimerLists+0x5a>
   17290:	200034d8 	.word	0x200034d8
   17294:	200034dc 	.word	0x200034dc
   17298:	0001504f 	.word	0x0001504f
   1729c:	00015021 	.word	0x00015021
   172a0:	000171dd 	.word	0x000171dd

000172a4 <prvTimerTask>:
{
   172a4:	b5f0      	push	{r4, r5, r6, r7, lr}
		vApplicationDaemonTaskStartupHook();
   172a6:	4b59      	ldr	r3, [pc, #356]	; (1740c <prvTimerTask+0x168>)
{
   172a8:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
   172aa:	4798      	blx	r3
		xNextExpireTime = ( TickType_t ) 0U;
   172ac:	2700      	movs	r7, #0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   172ae:	4b58      	ldr	r3, [pc, #352]	; (17410 <prvTimerTask+0x16c>)
   172b0:	681b      	ldr	r3, [r3, #0]
   172b2:	681a      	ldr	r2, [r3, #0]
   172b4:	9203      	str	r2, [sp, #12]
	if( *pxListWasEmpty == pdFALSE )
   172b6:	42ba      	cmp	r2, r7
   172b8:	d001      	beq.n	172be <prvTimerTask+0x1a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   172ba:	68db      	ldr	r3, [r3, #12]
   172bc:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
   172be:	4b55      	ldr	r3, [pc, #340]	; (17414 <prvTimerTask+0x170>)
   172c0:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
   172c2:	4b55      	ldr	r3, [pc, #340]	; (17418 <prvTimerTask+0x174>)
   172c4:	4798      	blx	r3
	if( xTimeNow < xLastTime )
   172c6:	4d55      	ldr	r5, [pc, #340]	; (1741c <prvTimerTask+0x178>)
	xTimeNow = xTaskGetTickCount();
   172c8:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
   172ca:	682b      	ldr	r3, [r5, #0]
		*pxTimerListsWereSwitched = pdFALSE;
   172cc:	2600      	movs	r6, #0
	if( xTimeNow < xLastTime )
   172ce:	4298      	cmp	r0, r3
   172d0:	d202      	bcs.n	172d8 <prvTimerTask+0x34>
		prvSwitchTimerLists();
   172d2:	4b53      	ldr	r3, [pc, #332]	; (17420 <prvTimerTask+0x17c>)
   172d4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   172d6:	3601      	adds	r6, #1
	xLastTime = xTimeNow;
   172d8:	602c      	str	r4, [r5, #0]
   172da:	4d52      	ldr	r5, [pc, #328]	; (17424 <prvTimerTask+0x180>)
		if( xTimerListsWereSwitched == pdFALSE )
   172dc:	2e00      	cmp	r6, #0
   172de:	d168      	bne.n	173b2 <prvTimerTask+0x10e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   172e0:	9b03      	ldr	r3, [sp, #12]
   172e2:	2b00      	cmp	r3, #0
   172e4:	d054      	beq.n	17390 <prvTimerTask+0xec>
   172e6:	0030      	movs	r0, r6
   172e8:	42a7      	cmp	r7, r4
   172ea:	d856      	bhi.n	1739a <prvTimerTask+0xf6>
				( void ) xTaskResumeAll();
   172ec:	47a8      	blx	r5
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   172ee:	4b48      	ldr	r3, [pc, #288]	; (17410 <prvTimerTask+0x16c>)
   172f0:	681b      	ldr	r3, [r3, #0]
   172f2:	68db      	ldr	r3, [r3, #12]
   172f4:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   172f6:	4b4c      	ldr	r3, [pc, #304]	; (17428 <prvTimerTask+0x184>)
   172f8:	1d28      	adds	r0, r5, #4
   172fa:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   172fc:	69eb      	ldr	r3, [r5, #28]
   172fe:	2b01      	cmp	r3, #1
   17300:	d113      	bne.n	1732a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   17302:	69ab      	ldr	r3, [r5, #24]
   17304:	0022      	movs	r2, r4
   17306:	18f9      	adds	r1, r7, r3
   17308:	0028      	movs	r0, r5
   1730a:	003b      	movs	r3, r7
   1730c:	4c47      	ldr	r4, [pc, #284]	; (1742c <prvTimerTask+0x188>)
   1730e:	47a0      	blx	r4
   17310:	2800      	cmp	r0, #0
   17312:	d00a      	beq.n	1732a <prvTimerTask+0x86>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   17314:	9600      	str	r6, [sp, #0]
   17316:	0033      	movs	r3, r6
   17318:	003a      	movs	r2, r7
   1731a:	0031      	movs	r1, r6
   1731c:	0028      	movs	r0, r5
   1731e:	4c44      	ldr	r4, [pc, #272]	; (17430 <prvTimerTask+0x18c>)
   17320:	47a0      	blx	r4
			configASSERT( xResult );
   17322:	2800      	cmp	r0, #0
   17324:	d101      	bne.n	1732a <prvTimerTask+0x86>
   17326:	b672      	cpsid	i
   17328:	e7fe      	b.n	17328 <prvTimerTask+0x84>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1732a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1732c:	0028      	movs	r0, r5
   1732e:	4798      	blx	r3
   17330:	2784      	movs	r7, #132	; 0x84
   17332:	00bf      	lsls	r7, r7, #2
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   17334:	4b3f      	ldr	r3, [pc, #252]	; (17434 <prvTimerTask+0x190>)
   17336:	2200      	movs	r2, #0
   17338:	6818      	ldr	r0, [r3, #0]
   1733a:	a905      	add	r1, sp, #20
   1733c:	4b3e      	ldr	r3, [pc, #248]	; (17438 <prvTimerTask+0x194>)
   1733e:	4798      	blx	r3
   17340:	2800      	cmp	r0, #0
   17342:	d0b3      	beq.n	172ac <prvTimerTask+0x8>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   17344:	9b05      	ldr	r3, [sp, #20]
   17346:	2b00      	cmp	r3, #0
   17348:	dbf4      	blt.n	17334 <prvTimerTask+0x90>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1734a:	9c07      	ldr	r4, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1734c:	6963      	ldr	r3, [r4, #20]
   1734e:	2b00      	cmp	r3, #0
   17350:	d002      	beq.n	17358 <prvTimerTask+0xb4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   17352:	1d20      	adds	r0, r4, #4
   17354:	4b34      	ldr	r3, [pc, #208]	; (17428 <prvTimerTask+0x184>)
   17356:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
   17358:	4b2f      	ldr	r3, [pc, #188]	; (17418 <prvTimerTask+0x174>)
   1735a:	4798      	blx	r3
	if( xTimeNow < xLastTime )
   1735c:	4e2f      	ldr	r6, [pc, #188]	; (1741c <prvTimerTask+0x178>)
	xTimeNow = xTaskGetTickCount();
   1735e:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
   17360:	6833      	ldr	r3, [r6, #0]
   17362:	4298      	cmp	r0, r3
   17364:	d201      	bcs.n	1736a <prvTimerTask+0xc6>
		prvSwitchTimerLists();
   17366:	4b2e      	ldr	r3, [pc, #184]	; (17420 <prvTimerTask+0x17c>)
   17368:	4798      	blx	r3
   1736a:	9b05      	ldr	r3, [sp, #20]
	xLastTime = xTimeNow;
   1736c:	6035      	str	r5, [r6, #0]
   1736e:	2b09      	cmp	r3, #9
   17370:	d8e0      	bhi.n	17334 <prvTimerTask+0x90>
   17372:	2201      	movs	r2, #1
   17374:	409a      	lsls	r2, r3
   17376:	0016      	movs	r6, r2
   17378:	0013      	movs	r3, r2
   1737a:	403e      	ands	r6, r7
   1737c:	d138      	bne.n	173f0 <prvTimerTask+0x14c>
   1737e:	22c7      	movs	r2, #199	; 0xc7
   17380:	4213      	tst	r3, r2
   17382:	d118      	bne.n	173b6 <prvTimerTask+0x112>
   17384:	069b      	lsls	r3, r3, #26
   17386:	d5d5      	bpl.n	17334 <prvTimerTask+0x90>
						vPortFree( pxTimer );
   17388:	0020      	movs	r0, r4
   1738a:	4b2c      	ldr	r3, [pc, #176]	; (1743c <prvTimerTask+0x198>)
   1738c:	4798      	blx	r3
   1738e:	e7d1      	b.n	17334 <prvTimerTask+0x90>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   17390:	4b2b      	ldr	r3, [pc, #172]	; (17440 <prvTimerTask+0x19c>)
   17392:	681b      	ldr	r3, [r3, #0]
   17394:	681a      	ldr	r2, [r3, #0]
   17396:	4250      	negs	r0, r2
   17398:	4150      	adcs	r0, r2
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1739a:	4b26      	ldr	r3, [pc, #152]	; (17434 <prvTimerTask+0x190>)
   1739c:	0002      	movs	r2, r0
   1739e:	1b39      	subs	r1, r7, r4
   173a0:	6818      	ldr	r0, [r3, #0]
   173a2:	4b28      	ldr	r3, [pc, #160]	; (17444 <prvTimerTask+0x1a0>)
   173a4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   173a6:	47a8      	blx	r5
   173a8:	2800      	cmp	r0, #0
   173aa:	d1c1      	bne.n	17330 <prvTimerTask+0x8c>
					portYIELD_WITHIN_API();
   173ac:	4b26      	ldr	r3, [pc, #152]	; (17448 <prvTimerTask+0x1a4>)
   173ae:	4798      	blx	r3
   173b0:	e7be      	b.n	17330 <prvTimerTask+0x8c>
			( void ) xTaskResumeAll();
   173b2:	47a8      	blx	r5
   173b4:	e7bc      	b.n	17330 <prvTimerTask+0x8c>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   173b6:	9b06      	ldr	r3, [sp, #24]
   173b8:	69a2      	ldr	r2, [r4, #24]
   173ba:	0020      	movs	r0, r4
   173bc:	1899      	adds	r1, r3, r2
   173be:	002a      	movs	r2, r5
   173c0:	4d1a      	ldr	r5, [pc, #104]	; (1742c <prvTimerTask+0x188>)
   173c2:	9303      	str	r3, [sp, #12]
   173c4:	47a8      	blx	r5
   173c6:	2800      	cmp	r0, #0
   173c8:	d0b4      	beq.n	17334 <prvTimerTask+0x90>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   173ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   173cc:	0020      	movs	r0, r4
   173ce:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   173d0:	69e3      	ldr	r3, [r4, #28]
   173d2:	2b01      	cmp	r3, #1
   173d4:	d1ae      	bne.n	17334 <prvTimerTask+0x90>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   173d6:	69a3      	ldr	r3, [r4, #24]
   173d8:	9a06      	ldr	r2, [sp, #24]
   173da:	0020      	movs	r0, r4
   173dc:	18d2      	adds	r2, r2, r3
   173de:	9600      	str	r6, [sp, #0]
   173e0:	0033      	movs	r3, r6
   173e2:	0031      	movs	r1, r6
   173e4:	4c12      	ldr	r4, [pc, #72]	; (17430 <prvTimerTask+0x18c>)
   173e6:	47a0      	blx	r4
							configASSERT( xResult );
   173e8:	2800      	cmp	r0, #0
   173ea:	d1a3      	bne.n	17334 <prvTimerTask+0x90>
   173ec:	b672      	cpsid	i
   173ee:	e7fe      	b.n	173ee <prvTimerTask+0x14a>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   173f0:	9906      	ldr	r1, [sp, #24]
   173f2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   173f4:	2900      	cmp	r1, #0
   173f6:	d101      	bne.n	173fc <prvTimerTask+0x158>
   173f8:	b672      	cpsid	i
   173fa:	e7fe      	b.n	173fa <prvTimerTask+0x156>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   173fc:	1949      	adds	r1, r1, r5
   173fe:	002b      	movs	r3, r5
   17400:	002a      	movs	r2, r5
   17402:	0020      	movs	r0, r4
   17404:	4c09      	ldr	r4, [pc, #36]	; (1742c <prvTimerTask+0x188>)
   17406:	47a0      	blx	r4
   17408:	e794      	b.n	17334 <prvTimerTask+0x90>
   1740a:	46c0      	nop			; (mov r8, r8)
   1740c:	00018b9d 	.word	0x00018b9d
   17410:	200034d8 	.word	0x200034d8
   17414:	000166a1 	.word	0x000166a1
   17418:	000166b1 	.word	0x000166b1
   1741c:	20003508 	.word	0x20003508
   17420:	00017235 	.word	0x00017235
   17424:	00016829 	.word	0x00016829
   17428:	0001504f 	.word	0x0001504f
   1742c:	00017159 	.word	0x00017159
   17430:	000171dd 	.word	0x000171dd
   17434:	2000350c 	.word	0x2000350c
   17438:	00015c95 	.word	0x00015c95
   1743c:	000152c9 	.word	0x000152c9
   17440:	200034dc 	.word	0x200034dc
   17444:	00016259 	.word	0x00016259
   17448:	00015171 	.word	0x00015171

0001744c <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1744c:	b570      	push	{r4, r5, r6, lr}
	 //assert(cbuf);

	 if(cbuf->full)
   1744e:	7c03      	ldrb	r3, [r0, #16]
 {
   17450:	0004      	movs	r4, r0
   17452:	4d09      	ldr	r5, [pc, #36]	; (17478 <advance_pointer+0x2c>)
	 if(cbuf->full)
   17454:	2b00      	cmp	r3, #0
   17456:	d004      	beq.n	17462 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   17458:	6883      	ldr	r3, [r0, #8]
   1745a:	68e1      	ldr	r1, [r4, #12]
   1745c:	1c58      	adds	r0, r3, #1
   1745e:	47a8      	blx	r5
   17460:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   17462:	6863      	ldr	r3, [r4, #4]
   17464:	68e1      	ldr	r1, [r4, #12]
   17466:	1c58      	adds	r0, r3, #1
   17468:	47a8      	blx	r5

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1746a:	68a3      	ldr	r3, [r4, #8]
	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1746c:	6061      	str	r1, [r4, #4]
	 cbuf->full = (cbuf->head == cbuf->tail);
   1746e:	1a59      	subs	r1, r3, r1
   17470:	424a      	negs	r2, r1
   17472:	414a      	adcs	r2, r1
   17474:	7422      	strb	r2, [r4, #16]
 }
   17476:	bd70      	pop	{r4, r5, r6, pc}
   17478:	00018f31 	.word	0x00018f31

0001747c <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1747c:	b570      	push	{r4, r5, r6, lr}
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1747e:	4b06      	ldr	r3, [pc, #24]	; (17498 <circular_buf_init+0x1c>)
 {
   17480:	0005      	movs	r5, r0
	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   17482:	2014      	movs	r0, #20
 {
   17484:	000c      	movs	r4, r1
	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   17486:	4798      	blx	r3

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
   17488:	2300      	movs	r3, #0
	 cbuf->buffer = buffer;
   1748a:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
   1748c:	60c4      	str	r4, [r0, #12]
	 cbuf->head = 0;
   1748e:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
   17490:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
   17492:	7403      	strb	r3, [r0, #16]
 }
   17494:	bd70      	pop	{r4, r5, r6, pc}
   17496:	46c0      	nop			; (mov r8, r8)
   17498:	0001b4c5 	.word	0x0001b4c5

0001749c <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1749c:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1749e:	6803      	ldr	r3, [r0, #0]
   174a0:	6842      	ldr	r2, [r0, #4]
   174a2:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
   174a4:	4b01      	ldr	r3, [pc, #4]	; (174ac <circular_buf_put+0x10>)
   174a6:	4798      	blx	r3
 }
   174a8:	bd10      	pop	{r4, pc}
   174aa:	46c0      	nop			; (mov r8, r8)
   174ac:	0001744d 	.word	0x0001744d

000174b0 <circular_buf_empty>:

	 return r;
 }

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   174b0:	2300      	movs	r3, #0
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   174b2:	7c02      	ldrb	r2, [r0, #16]
   174b4:	429a      	cmp	r2, r3
   174b6:	d105      	bne.n	174c4 <circular_buf_empty+0x14>
   174b8:	6843      	ldr	r3, [r0, #4]
   174ba:	6880      	ldr	r0, [r0, #8]
   174bc:	1a1b      	subs	r3, r3, r0
   174be:	4258      	negs	r0, r3
   174c0:	4143      	adcs	r3, r0
   174c2:	b2db      	uxtb	r3, r3
   174c4:	0018      	movs	r0, r3
 }
   174c6:	4770      	bx	lr

000174c8 <circular_buf_get>:
 {
   174c8:	b570      	push	{r4, r5, r6, lr}
	 if(!circular_buf_empty(cbuf))
   174ca:	4b0b      	ldr	r3, [pc, #44]	; (174f8 <circular_buf_get+0x30>)
 {
   174cc:	0004      	movs	r4, r0
   174ce:	000e      	movs	r6, r1
	 if(!circular_buf_empty(cbuf))
   174d0:	4798      	blx	r3
   174d2:	1e05      	subs	r5, r0, #0
   174d4:	d10c      	bne.n	174f0 <circular_buf_get+0x28>
		 *data = cbuf->buffer[cbuf->tail];
   174d6:	68a2      	ldr	r2, [r4, #8]
   174d8:	6823      	ldr	r3, [r4, #0]
   174da:	5c9b      	ldrb	r3, [r3, r2]
   174dc:	7033      	strb	r3, [r6, #0]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   174de:	68a3      	ldr	r3, [r4, #8]
	 cbuf->full = false;
   174e0:	7420      	strb	r0, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   174e2:	68e1      	ldr	r1, [r4, #12]
   174e4:	1c58      	adds	r0, r3, #1
   174e6:	4b05      	ldr	r3, [pc, #20]	; (174fc <circular_buf_get+0x34>)
   174e8:	4798      	blx	r3
		 r = 0;
   174ea:	0028      	movs	r0, r5
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   174ec:	60a1      	str	r1, [r4, #8]
 }
   174ee:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
   174f0:	2001      	movs	r0, #1
   174f2:	4240      	negs	r0, r0
	 return r;
   174f4:	e7fb      	b.n	174ee <circular_buf_get+0x26>
   174f6:	46c0      	nop			; (mov r8, r8)
   174f8:	000174b1 	.word	0x000174b1
   174fc:	00018f31 	.word	0x00018f31

00017500 <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   17500:	b510      	push	{r4, lr}
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   17502:	4b07      	ldr	r3, [pc, #28]	; (17520 <usart_read_callback+0x20>)
   17504:	4c07      	ldr	r4, [pc, #28]	; (17524 <usart_read_callback+0x24>)
   17506:	6818      	ldr	r0, [r3, #0]
   17508:	7821      	ldrb	r1, [r4, #0]
   1750a:	4b07      	ldr	r3, [pc, #28]	; (17528 <usart_read_callback+0x28>)
   1750c:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1750e:	2201      	movs	r2, #1
   17510:	0021      	movs	r1, r4
   17512:	4b06      	ldr	r3, [pc, #24]	; (1752c <usart_read_callback+0x2c>)
   17514:	4806      	ldr	r0, [pc, #24]	; (17530 <usart_read_callback+0x30>)
   17516:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   17518:	4b06      	ldr	r3, [pc, #24]	; (17534 <usart_read_callback+0x34>)
   1751a:	4798      	blx	r3
}
   1751c:	bd10      	pop	{r4, pc}
   1751e:	46c0      	nop			; (mov r8, r8)
   17520:	200043ac 	.word	0x200043ac
   17524:	200043b0 	.word	0x200043b0
   17528:	0001749d 	.word	0x0001749d
   1752c:	00018111 	.word	0x00018111
   17530:	20004378 	.word	0x20004378
   17534:	00012c05 	.word	0x00012c05

00017538 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   17538:	b510      	push	{r4, lr}
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1753a:	4b07      	ldr	r3, [pc, #28]	; (17558 <usart_write_callback+0x20>)
   1753c:	4c07      	ldr	r4, [pc, #28]	; (1755c <usart_write_callback+0x24>)
   1753e:	6818      	ldr	r0, [r3, #0]
   17540:	0021      	movs	r1, r4
   17542:	4b07      	ldr	r3, [pc, #28]	; (17560 <usart_write_callback+0x28>)
   17544:	4798      	blx	r3
   17546:	1c43      	adds	r3, r0, #1
   17548:	d004      	beq.n	17554 <usart_write_callback+0x1c>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1754a:	2201      	movs	r2, #1
   1754c:	0021      	movs	r1, r4
   1754e:	4805      	ldr	r0, [pc, #20]	; (17564 <usart_write_callback+0x2c>)
   17550:	4b05      	ldr	r3, [pc, #20]	; (17568 <usart_write_callback+0x30>)
   17552:	4798      	blx	r3
    }
}
   17554:	bd10      	pop	{r4, pc}
   17556:	46c0      	nop			; (mov r8, r8)
   17558:	200047b4 	.word	0x200047b4
   1755c:	200047b1 	.word	0x200047b1
   17560:	000174c9 	.word	0x000174c9
   17564:	20004378 	.word	0x20004378
   17568:	000180f1 	.word	0x000180f1

0001756c <InitializeSerialConsole>:
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1756c:	2180      	movs	r1, #128	; 0x80
{
   1756e:	b530      	push	{r4, r5, lr}
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   17570:	0089      	lsls	r1, r1, #2
{
   17572:	b091      	sub	sp, #68	; 0x44
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   17574:	4c36      	ldr	r4, [pc, #216]	; (17650 <InitializeSerialConsole+0xe4>)
   17576:	4837      	ldr	r0, [pc, #220]	; (17654 <InitializeSerialConsole+0xe8>)
   17578:	47a0      	blx	r4
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1757a:	2180      	movs	r1, #128	; 0x80
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1757c:	4b36      	ldr	r3, [pc, #216]	; (17658 <InitializeSerialConsole+0xec>)
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1757e:	0089      	lsls	r1, r1, #2
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   17580:	6018      	str	r0, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   17582:	4836      	ldr	r0, [pc, #216]	; (1765c <InitializeSerialConsole+0xf0>)
   17584:	47a0      	blx	r4
   17586:	4b36      	ldr	r3, [pc, #216]	; (17660 <InitializeSerialConsole+0xf4>)
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
   17588:	4669      	mov	r1, sp
   1758a:	6018      	str	r0, [r3, #0]
	config->data_order       = USART_DATAORDER_LSB;
   1758c:	2380      	movs	r3, #128	; 0x80
	config->parity           = USART_PARITY_NONE;
   1758e:	22ff      	movs	r2, #255	; 0xff
	config->data_order       = USART_DATAORDER_LSB;
   17590:	05db      	lsls	r3, r3, #23
   17592:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   17594:	2300      	movs	r3, #0
	config->parity           = USART_PARITY_NONE;
   17596:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
   17598:	2201      	movs	r2, #1
	config->stopbits         = USART_STOPBITS_1;
   1759a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1759c:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
   1759e:	3105      	adds	r1, #5
   175a0:	77ca      	strb	r2, [r1, #31]
	config->transmitter_enable = true;
   175a2:	4669      	mov	r1, sp
   175a4:	3106      	adds	r1, #6
   175a6:	77ca      	strb	r2, [r1, #31]
	config->clock_polarity_inverted = false;
   175a8:	466a      	mov	r2, sp
   175aa:	3207      	adds	r2, #7
   175ac:	77d3      	strb	r3, [r2, #31]
	config->use_external_clock = false;
   175ae:	aa02      	add	r2, sp, #8
   175b0:	77d3      	strb	r3, [r2, #31]
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   175b2:	aa0b      	add	r2, sp, #44	; 0x2c
   175b4:	7013      	strb	r3, [r2, #0]
	config->generator_source = GCLK_GENERATOR_0;
   175b6:	222d      	movs	r2, #45	; 0x2d
   175b8:	446a      	add	r2, sp
   175ba:	7013      	strb	r3, [r2, #0]
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
   175bc:	4669      	mov	r1, sp
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   175be:	466a      	mov	r2, sp
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   175c0:	9301      	str	r3, [sp, #4]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   175c2:	8213      	strh	r3, [r2, #16]
	config->lin_slave_enable      = false;
   175c4:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
   175c6:	7613      	strb	r3, [r2, #24]
	config->start_frame_detection_enable            = false;
   175c8:	7713      	strb	r3, [r2, #28]
	config->encoding_format_enable                  = false;
   175ca:	7653      	strb	r3, [r2, #25]
	config->ext_clock_freq   = 0;
   175cc:	930a      	str	r3, [sp, #40]	; 0x28
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   175ce:	9305      	str	r3, [sp, #20]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   175d0:	774b      	strb	r3, [r1, #29]
    config_usart.baudrate = 115200;
   175d2:	23e1      	movs	r3, #225	; 0xe1
   175d4:	025b      	lsls	r3, r3, #9
   175d6:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   175d8:	23c4      	movs	r3, #196	; 0xc4
   175da:	039b      	lsls	r3, r3, #14
   175dc:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   175de:	2301      	movs	r3, #1
	config->receive_pulse_length                    = 19;
   175e0:	2213      	movs	r2, #19
   175e2:	425b      	negs	r3, r3
   175e4:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   175e6:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   175e8:	4b1e      	ldr	r3, [pc, #120]	; (17664 <InitializeSerialConsole+0xf8>)
   175ea:	768a      	strb	r2, [r1, #26]
   175ec:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   175ee:	4b1e      	ldr	r3, [pc, #120]	; (17668 <InitializeSerialConsole+0xfc>)
   175f0:	930f      	str	r3, [sp, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   175f2:	4c1e      	ldr	r4, [pc, #120]	; (1766c <InitializeSerialConsole+0x100>)
   175f4:	466a      	mov	r2, sp
   175f6:	491e      	ldr	r1, [pc, #120]	; (17670 <InitializeSerialConsole+0x104>)
   175f8:	0020      	movs	r0, r4
   175fa:	4b1e      	ldr	r3, [pc, #120]	; (17674 <InitializeSerialConsole+0x108>)
   175fc:	4798      	blx	r3
   175fe:	2800      	cmp	r0, #0
   17600:	d1f7      	bne.n	175f2 <InitializeSerialConsole+0x86>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   17602:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   17604:	4b1c      	ldr	r3, [pc, #112]	; (17678 <InitializeSerialConsole+0x10c>)
   17606:	0028      	movs	r0, r5
   17608:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1760a:	231f      	movs	r3, #31
   1760c:	4018      	ands	r0, r3
   1760e:	3b1e      	subs	r3, #30
   17610:	4083      	lsls	r3, r0
   17612:	4a1a      	ldr	r2, [pc, #104]	; (1767c <InitializeSerialConsole+0x110>)
   17614:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   17616:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
   17618:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   1761a:	2a00      	cmp	r2, #0
   1761c:	d1fc      	bne.n	17618 <InitializeSerialConsole+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1761e:	2302      	movs	r3, #2
   17620:	6829      	ldr	r1, [r5, #0]
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   17622:	0020      	movs	r0, r4
   17624:	430b      	orrs	r3, r1
   17626:	602b      	str	r3, [r5, #0]
   17628:	4915      	ldr	r1, [pc, #84]	; (17680 <InitializeSerialConsole+0x114>)
   1762a:	4d16      	ldr	r5, [pc, #88]	; (17684 <InitializeSerialConsole+0x118>)
   1762c:	47a8      	blx	r5
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1762e:	0020      	movs	r0, r4
   17630:	2201      	movs	r2, #1
   17632:	4915      	ldr	r1, [pc, #84]	; (17688 <InitializeSerialConsole+0x11c>)
   17634:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   17636:	0022      	movs	r2, r4
   17638:	2303      	movs	r3, #3
   1763a:	3231      	adds	r2, #49	; 0x31
   1763c:	7811      	ldrb	r1, [r2, #0]
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1763e:	0020      	movs	r0, r4
   17640:	430b      	orrs	r3, r1
   17642:	7013      	strb	r3, [r2, #0]
   17644:	4911      	ldr	r1, [pc, #68]	; (1768c <InitializeSerialConsole+0x120>)
   17646:	2201      	movs	r2, #1
   17648:	4b11      	ldr	r3, [pc, #68]	; (17690 <InitializeSerialConsole+0x124>)
   1764a:	4798      	blx	r3
}
   1764c:	b011      	add	sp, #68	; 0x44
   1764e:	bd30      	pop	{r4, r5, pc}
   17650:	0001747d 	.word	0x0001747d
   17654:	200045b1 	.word	0x200045b1
   17658:	200043ac 	.word	0x200043ac
   1765c:	200043b1 	.word	0x200043b1
   17660:	200047b4 	.word	0x200047b4
   17664:	002a0003 	.word	0x002a0003
   17668:	002b0003 	.word	0x002b0003
   1766c:	20004378 	.word	0x20004378
   17670:	42001800 	.word	0x42001800
   17674:	00017d85 	.word	0x00017d85
   17678:	00017ced 	.word	0x00017ced
   1767c:	e000e100 	.word	0xe000e100
   17680:	00017539 	.word	0x00017539
   17684:	000180d9 	.word	0x000180d9
   17688:	00017501 	.word	0x00017501
   1768c:	200043b0 	.word	0x200043b0
   17690:	00018111 	.word	0x00018111

00017694 <SerialConsoleWriteString>:
{
   17694:	b570      	push	{r4, r5, r6, lr}
    vTaskSuspendAll();
   17696:	4b13      	ldr	r3, [pc, #76]	; (176e4 <SerialConsoleWriteString+0x50>)
{
   17698:	0005      	movs	r5, r0
   1769a:	2400      	movs	r4, #0
    vTaskSuspendAll();
   1769c:	4798      	blx	r3
    if (string != NULL) {
   1769e:	2d00      	cmp	r5, #0
   176a0:	d108      	bne.n	176b4 <SerialConsoleWriteString+0x20>
    xTaskResumeAll();
   176a2:	4b11      	ldr	r3, [pc, #68]	; (176e8 <SerialConsoleWriteString+0x54>)
   176a4:	4798      	blx	r3
}
   176a6:	bd70      	pop	{r4, r5, r6, pc}
            circular_buf_put(cbufTx, string[iter]);
   176a8:	4b10      	ldr	r3, [pc, #64]	; (176ec <SerialConsoleWriteString+0x58>)
   176aa:	5d29      	ldrb	r1, [r5, r4]
   176ac:	6818      	ldr	r0, [r3, #0]
   176ae:	4b10      	ldr	r3, [pc, #64]	; (176f0 <SerialConsoleWriteString+0x5c>)
   176b0:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   176b2:	3401      	adds	r4, #1
   176b4:	0028      	movs	r0, r5
   176b6:	4b0f      	ldr	r3, [pc, #60]	; (176f4 <SerialConsoleWriteString+0x60>)
   176b8:	4798      	blx	r3
   176ba:	4284      	cmp	r4, r0
   176bc:	d3f4      	bcc.n	176a8 <SerialConsoleWriteString+0x14>
        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   176be:	4c0e      	ldr	r4, [pc, #56]	; (176f8 <SerialConsoleWriteString+0x64>)
   176c0:	2101      	movs	r1, #1
   176c2:	0020      	movs	r0, r4
   176c4:	4b0d      	ldr	r3, [pc, #52]	; (176fc <SerialConsoleWriteString+0x68>)
   176c6:	4798      	blx	r3
   176c8:	2800      	cmp	r0, #0
   176ca:	d1ea      	bne.n	176a2 <SerialConsoleWriteString+0xe>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   176cc:	4d0c      	ldr	r5, [pc, #48]	; (17700 <SerialConsoleWriteString+0x6c>)
   176ce:	4b07      	ldr	r3, [pc, #28]	; (176ec <SerialConsoleWriteString+0x58>)
   176d0:	0029      	movs	r1, r5
   176d2:	6818      	ldr	r0, [r3, #0]
   176d4:	4b0b      	ldr	r3, [pc, #44]	; (17704 <SerialConsoleWriteString+0x70>)
   176d6:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   176d8:	2201      	movs	r2, #1
   176da:	0029      	movs	r1, r5
   176dc:	0020      	movs	r0, r4
   176de:	4b0a      	ldr	r3, [pc, #40]	; (17708 <SerialConsoleWriteString+0x74>)
   176e0:	4798      	blx	r3
   176e2:	e7de      	b.n	176a2 <SerialConsoleWriteString+0xe>
   176e4:	000166a1 	.word	0x000166a1
   176e8:	00016829 	.word	0x00016829
   176ec:	200047b4 	.word	0x200047b4
   176f0:	0001749d 	.word	0x0001749d
   176f4:	0001b789 	.word	0x0001b789
   176f8:	20004378 	.word	0x20004378
   176fc:	00018131 	.word	0x00018131
   17700:	200047b1 	.word	0x200047b1
   17704:	000174c9 	.word	0x000174c9
   17708:	000180f1 	.word	0x000180f1

0001770c <SerialConsoleReadCharacter>:
{
   1770c:	b510      	push	{r4, lr}
   1770e:	0004      	movs	r4, r0
    vTaskSuspendAll();
   17710:	4b05      	ldr	r3, [pc, #20]	; (17728 <SerialConsoleReadCharacter+0x1c>)
   17712:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   17714:	4b05      	ldr	r3, [pc, #20]	; (1772c <SerialConsoleReadCharacter+0x20>)
   17716:	0021      	movs	r1, r4
   17718:	6818      	ldr	r0, [r3, #0]
   1771a:	4b05      	ldr	r3, [pc, #20]	; (17730 <SerialConsoleReadCharacter+0x24>)
   1771c:	4798      	blx	r3
   1771e:	0004      	movs	r4, r0
    xTaskResumeAll();
   17720:	4b04      	ldr	r3, [pc, #16]	; (17734 <SerialConsoleReadCharacter+0x28>)
   17722:	4798      	blx	r3
}
   17724:	0020      	movs	r0, r4
   17726:	bd10      	pop	{r4, pc}
   17728:	000166a1 	.word	0x000166a1
   1772c:	200043ac 	.word	0x200043ac
   17730:	000174c9 	.word	0x000174c9
   17734:	00016829 	.word	0x00016829

00017738 <LogMessage>:
{
   17738:	b40e      	push	{r1, r2, r3}
   1773a:	b533      	push	{r0, r1, r4, r5, lr}
    return currentDebugLevel;
   1773c:	4b09      	ldr	r3, [pc, #36]	; (17764 <LogMessage+0x2c>)
    if (getLogLevel() <= level) {
   1773e:	781b      	ldrb	r3, [r3, #0]
   17740:	4283      	cmp	r3, r0
   17742:	d80a      	bhi.n	1775a <LogMessage+0x22>
        vsnprintf(debugBuffer, 127, format, ap);
   17744:	4c08      	ldr	r4, [pc, #32]	; (17768 <LogMessage+0x30>)
        va_start(ap, format);
   17746:	ab06      	add	r3, sp, #24
   17748:	9301      	str	r3, [sp, #4]
        vsnprintf(debugBuffer, 127, format, ap);
   1774a:	9a05      	ldr	r2, [sp, #20]
   1774c:	217f      	movs	r1, #127	; 0x7f
   1774e:	0020      	movs	r0, r4
   17750:	4d06      	ldr	r5, [pc, #24]	; (1776c <LogMessage+0x34>)
   17752:	47a8      	blx	r5
        SerialConsoleWriteString(debugBuffer);
   17754:	0020      	movs	r0, r4
   17756:	4b06      	ldr	r3, [pc, #24]	; (17770 <LogMessage+0x38>)
   17758:	4798      	blx	r3
};
   1775a:	bc33      	pop	{r0, r1, r4, r5}
   1775c:	bc08      	pop	{r3}
   1775e:	b003      	add	sp, #12
   17760:	4718      	bx	r3
   17762:	46c0      	nop			; (mov r8, r8)
   17764:	20003514 	.word	0x20003514
   17768:	200042f8 	.word	0x200042f8
   1776c:	0001b839 	.word	0x0001b839
   17770:	00017695 	.word	0x00017695

00017774 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
   17774:	b530      	push	{r4, r5, lr}
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   17776:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
   17778:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
   1777a:	4b07      	ldr	r3, [pc, #28]	; (17798 <delay_cycles_us+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1777c:	0264      	lsls	r4, r4, #9
   1777e:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
   17780:	4b06      	ldr	r3, [pc, #24]	; (1779c <delay_cycles_us+0x28>)
	while (n--) {
   17782:	3801      	subs	r0, #1
   17784:	d200      	bcs.n	17788 <delay_cycles_us+0x14>
	}
}
   17786:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
   17788:	2a00      	cmp	r2, #0
   1778a:	d0fa      	beq.n	17782 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
   1778c:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   1778e:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   17790:	681d      	ldr	r5, [r3, #0]
   17792:	4225      	tst	r5, r4
   17794:	d0fc      	beq.n	17790 <delay_cycles_us+0x1c>
   17796:	e7f4      	b.n	17782 <delay_cycles_us+0xe>
   17798:	20000064 	.word	0x20000064
   1779c:	e000e010 	.word	0xe000e010

000177a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   177a0:	b530      	push	{r4, r5, lr}
   177a2:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
   177a4:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   177a6:	4b07      	ldr	r3, [pc, #28]	; (177c4 <delay_cycles_ms+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   177a8:	0264      	lsls	r4, r4, #9
   177aa:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
   177ac:	4b06      	ldr	r3, [pc, #24]	; (177c8 <delay_cycles_ms+0x28>)
	while (n--) {
   177ae:	3801      	subs	r0, #1
   177b0:	d200      	bcs.n	177b4 <delay_cycles_ms+0x14>
	}
}
   177b2:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
   177b4:	2a00      	cmp	r2, #0
   177b6:	d0fa      	beq.n	177ae <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
   177b8:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   177ba:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   177bc:	681d      	ldr	r5, [r3, #0]
   177be:	4225      	tst	r5, r4
   177c0:	d0fc      	beq.n	177bc <delay_cycles_ms+0x1c>
   177c2:	e7f4      	b.n	177ae <delay_cycles_ms+0xe>
   177c4:	20000060 	.word	0x20000060
   177c8:	e000e010 	.word	0xe000e010

000177cc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   177cc:	4b09      	ldr	r3, [pc, #36]	; (177f4 <cpu_irq_enter_critical+0x28>)
   177ce:	6819      	ldr	r1, [r3, #0]
   177d0:	2900      	cmp	r1, #0
   177d2:	d10b      	bne.n	177ec <cpu_irq_enter_critical+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   177d4:	f3ef 8010 	mrs	r0, PRIMASK
   177d8:	4a07      	ldr	r2, [pc, #28]	; (177f8 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
   177da:	2800      	cmp	r0, #0
   177dc:	d105      	bne.n	177ea <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
   177de:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   177e0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   177e4:	4905      	ldr	r1, [pc, #20]	; (177fc <cpu_irq_enter_critical+0x30>)
   177e6:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
   177e8:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   177ea:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   177ec:	681a      	ldr	r2, [r3, #0]
   177ee:	3201      	adds	r2, #1
   177f0:	601a      	str	r2, [r3, #0]
}
   177f2:	4770      	bx	lr
   177f4:	20003518 	.word	0x20003518
   177f8:	2000351c 	.word	0x2000351c
   177fc:	20000068 	.word	0x20000068

00017800 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   17800:	4b08      	ldr	r3, [pc, #32]	; (17824 <cpu_irq_leave_critical+0x24>)
   17802:	681a      	ldr	r2, [r3, #0]
   17804:	3a01      	subs	r2, #1
   17806:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   17808:	681b      	ldr	r3, [r3, #0]
   1780a:	2b00      	cmp	r3, #0
   1780c:	d109      	bne.n	17822 <cpu_irq_leave_critical+0x22>
   1780e:	4b06      	ldr	r3, [pc, #24]	; (17828 <cpu_irq_leave_critical+0x28>)
   17810:	781b      	ldrb	r3, [r3, #0]
   17812:	2b00      	cmp	r3, #0
   17814:	d005      	beq.n	17822 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
   17816:	2201      	movs	r2, #1
   17818:	4b04      	ldr	r3, [pc, #16]	; (1782c <cpu_irq_leave_critical+0x2c>)
   1781a:	701a      	strb	r2, [r3, #0]
   1781c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   17820:	b662      	cpsie	i
	}
}
   17822:	4770      	bx	lr
   17824:	20003518 	.word	0x20003518
   17828:	2000351c 	.word	0x2000351c
   1782c:	20000068 	.word	0x20000068

00017830 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   17830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config->powersave  = false;
   17832:	2300      	movs	r3, #0
	config->input_pull = PORT_PIN_PULL_UP;
   17834:	2501      	movs	r5, #1
   17836:	ac01      	add	r4, sp, #4
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(LED_0_PIN, &pin_conf);
   17838:	4e0f      	ldr	r6, [pc, #60]	; (17878 <system_board_init+0x48>)
   1783a:	0021      	movs	r1, r4
   1783c:	2017      	movs	r0, #23
   1783e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
   17840:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   17842:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   17844:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
   17846:	2380      	movs	r3, #128	; 0x80
   17848:	4f0c      	ldr	r7, [pc, #48]	; (1787c <system_board_init+0x4c>)
   1784a:	041b      	lsls	r3, r3, #16
   1784c:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA20, &pin_conf);
   1784e:	0021      	movs	r1, r4
   17850:	2014      	movs	r0, #20
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   17852:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PA20, &pin_conf);
   17854:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
   17856:	2380      	movs	r3, #128	; 0x80
   17858:	035b      	lsls	r3, r3, #13
   1785a:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(PIN_PA20, false);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(PIN_PA21, &pin_conf);
   1785c:	0021      	movs	r1, r4
   1785e:	2015      	movs	r0, #21
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   17860:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(PIN_PA21, &pin_conf);
   17862:	47b0      	blx	r6
   17864:	2380      	movs	r3, #128	; 0x80
   17866:	039b      	lsls	r3, r3, #14
   17868:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(PIN_PA21, false);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1786a:	2300      	movs	r3, #0
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   1786c:	0021      	movs	r1, r4
   1786e:	2037      	movs	r0, #55	; 0x37
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   17870:	7065      	strb	r5, [r4, #1]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   17872:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   17874:	47b0      	blx	r6
}
   17876:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17878:	00017955 	.word	0x00017955
   1787c:	41004400 	.word	0x41004400

00017880 <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   17880:	2300      	movs	r3, #0
{
   17882:	b570      	push	{r4, r5, r6, lr}
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
   17884:	2501      	movs	r5, #1
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   17886:	4c0b      	ldr	r4, [pc, #44]	; (178b4 <EIC_Handler+0x34>)
   17888:	7023      	strb	r3, [r4, #0]
   1788a:	7823      	ldrb	r3, [r4, #0]
   1788c:	2b0f      	cmp	r3, #15
   1788e:	d900      	bls.n	17892 <EIC_Handler+0x12>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
   17890:	bd70      	pop	{r4, r5, r6, pc}
   17892:	0029      	movs	r1, r5
   17894:	4099      	lsls	r1, r3

	return (eic_module->INTFLAG.reg & eic_mask);
   17896:	4a08      	ldr	r2, [pc, #32]	; (178b8 <EIC_Handler+0x38>)
   17898:	6910      	ldr	r0, [r2, #16]
		if (extint_chan_is_detected(_current_channel)) {
   1789a:	4208      	tst	r0, r1
   1789c:	d006      	beq.n	178ac <EIC_Handler+0x2c>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
   1789e:	6111      	str	r1, [r2, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   178a0:	4a06      	ldr	r2, [pc, #24]	; (178bc <EIC_Handler+0x3c>)
   178a2:	009b      	lsls	r3, r3, #2
   178a4:	589b      	ldr	r3, [r3, r2]
   178a6:	2b00      	cmp	r3, #0
   178a8:	d000      	beq.n	178ac <EIC_Handler+0x2c>
				_extint_dev.callbacks[_current_channel]();
   178aa:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   178ac:	7823      	ldrb	r3, [r4, #0]
   178ae:	3301      	adds	r3, #1
   178b0:	7023      	strb	r3, [r4, #0]
   178b2:	e7ea      	b.n	1788a <EIC_Handler+0xa>
   178b4:	200047b8 	.word	0x200047b8
   178b8:	40001800 	.word	0x40001800
   178bc:	200047bc 	.word	0x200047bc

000178c0 <extint_is_syncing>:
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   178c0:	4b01      	ldr	r3, [pc, #4]	; (178c8 <extint_is_syncing+0x8>)
   178c2:	7858      	ldrb	r0, [r3, #1]
   178c4:	09c0      	lsrs	r0, r0, #7
			return true;
		}
	}
	return false;
}
   178c6:	4770      	bx	lr
   178c8:	40001800 	.word	0x40001800

000178cc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   178cc:	2302      	movs	r3, #2
{
   178ce:	b510      	push	{r4, lr}
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   178d0:	4a04      	ldr	r2, [pc, #16]	; (178e4 <_extint_enable+0x18>)
   178d2:	7811      	ldrb	r1, [r2, #0]
   178d4:	430b      	orrs	r3, r1
   178d6:	7013      	strb	r3, [r2, #0]
	}

	while (extint_is_syncing()) {
   178d8:	4b03      	ldr	r3, [pc, #12]	; (178e8 <_extint_enable+0x1c>)
   178da:	4798      	blx	r3
   178dc:	2800      	cmp	r0, #0
   178de:	d1fb      	bne.n	178d8 <_extint_enable+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   178e0:	bd10      	pop	{r4, pc}
   178e2:	46c0      	nop			; (mov r8, r8)
   178e4:	40001800 	.word	0x40001800
   178e8:	000178c1 	.word	0x000178c1

000178ec <_system_extint_init>:
			PM->APBAMASK.reg |= mask;
   178ec:	2340      	movs	r3, #64	; 0x40
{
   178ee:	b507      	push	{r0, r1, r2, lr}
   178f0:	4a10      	ldr	r2, [pc, #64]	; (17934 <_system_extint_init+0x48>)
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   178f2:	2005      	movs	r0, #5
   178f4:	6991      	ldr	r1, [r2, #24]
   178f6:	430b      	orrs	r3, r1
   178f8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   178fa:	2300      	movs	r3, #0
   178fc:	a901      	add	r1, sp, #4
   178fe:	700b      	strb	r3, [r1, #0]
   17900:	4b0d      	ldr	r3, [pc, #52]	; (17938 <_system_extint_init+0x4c>)
   17902:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
   17904:	4b0d      	ldr	r3, [pc, #52]	; (1793c <_system_extint_init+0x50>)
   17906:	2005      	movs	r0, #5
   17908:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1790a:	2301      	movs	r3, #1
   1790c:	4a0c      	ldr	r2, [pc, #48]	; (17940 <_system_extint_init+0x54>)
   1790e:	7811      	ldrb	r1, [r2, #0]
   17910:	430b      	orrs	r3, r1
   17912:	7013      	strb	r3, [r2, #0]
	while (extint_is_syncing()) {
   17914:	4b0b      	ldr	r3, [pc, #44]	; (17944 <_system_extint_init+0x58>)
   17916:	4798      	blx	r3
   17918:	2800      	cmp	r0, #0
   1791a:	d1fb      	bne.n	17914 <_system_extint_init+0x28>
		_extint_dev.callbacks[j] = NULL;
   1791c:	0002      	movs	r2, r0
   1791e:	4b0a      	ldr	r3, [pc, #40]	; (17948 <_system_extint_init+0x5c>)
   17920:	501a      	str	r2, [r3, r0]
   17922:	3004      	adds	r0, #4
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   17924:	2840      	cmp	r0, #64	; 0x40
   17926:	d1fb      	bne.n	17920 <_system_extint_init+0x34>
   17928:	2210      	movs	r2, #16
   1792a:	4b08      	ldr	r3, [pc, #32]	; (1794c <_system_extint_init+0x60>)
   1792c:	601a      	str	r2, [r3, #0]
	_extint_enable();
   1792e:	4b08      	ldr	r3, [pc, #32]	; (17950 <_system_extint_init+0x64>)
   17930:	4798      	blx	r3
}
   17932:	bd07      	pop	{r0, r1, r2, pc}
   17934:	40000400 	.word	0x40000400
   17938:	0001884d 	.word	0x0001884d
   1793c:	000187c5 	.word	0x000187c5
   17940:	40001800 	.word	0x40001800
   17944:	000178c1 	.word	0x000178c1
   17948:	200047bc 	.word	0x200047bc
   1794c:	e000e100 	.word	0xe000e100
   17950:	000178cd 	.word	0x000178cd

00017954 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   17954:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17956:	2280      	movs	r2, #128	; 0x80
   17958:	ab01      	add	r3, sp, #4
   1795a:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1795c:	780a      	ldrb	r2, [r1, #0]
   1795e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   17960:	784a      	ldrb	r2, [r1, #1]
   17962:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   17964:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   17966:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
   17968:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1796a:	4b01      	ldr	r3, [pc, #4]	; (17970 <port_pin_set_config+0x1c>)
   1796c:	4798      	blx	r3
}
   1796e:	bd07      	pop	{r0, r1, r2, pc}
   17970:	00018951 	.word	0x00018951

00017974 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   17974:	b570      	push	{r4, r5, r6, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
   17976:	4b0e      	ldr	r3, [pc, #56]	; (179b0 <RTC_Handler+0x3c>)
   17978:	681b      	ldr	r3, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
   1797a:	8a59      	ldrh	r1, [r3, #18]
	Rtc *const rtc_module = module->hw;
   1797c:	681c      	ldr	r4, [r3, #0]
	callback_mask &= module->registered_callback;
   1797e:	8a1a      	ldrh	r2, [r3, #16]
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   17980:	7a20      	ldrb	r0, [r4, #8]
	callback_mask &= module->registered_callback;
   17982:	400a      	ands	r2, r1
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   17984:	79e1      	ldrb	r1, [r4, #7]
   17986:	4001      	ands	r1, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   17988:	b248      	sxtb	r0, r1
   1798a:	2800      	cmp	r0, #0
   1798c:	da06      	bge.n	1799c <RTC_Handler+0x28>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   1798e:	0792      	lsls	r2, r2, #30
   17990:	d501      	bpl.n	17996 <RTC_Handler+0x22>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   17992:	68db      	ldr	r3, [r3, #12]
   17994:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   17996:	2380      	movs	r3, #128	; 0x80
   17998:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
   1799a:	bd70      	pop	{r4, r5, r6, pc}
   1799c:	2501      	movs	r5, #1
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   1799e:	4229      	tst	r1, r5
   179a0:	d0fb      	beq.n	1799a <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   179a2:	422a      	tst	r2, r5
   179a4:	d001      	beq.n	179aa <RTC_Handler+0x36>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   179a6:	689b      	ldr	r3, [r3, #8]
   179a8:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   179aa:	7225      	strb	r5, [r4, #8]
}
   179ac:	e7f5      	b.n	1799a <RTC_Handler+0x26>
   179ae:	46c0      	nop			; (mov r8, r8)
   179b0:	200047fc 	.word	0x200047fc

000179b4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   179b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   179b6:	2400      	movs	r4, #0
{
   179b8:	b089      	sub	sp, #36	; 0x24
   179ba:	9200      	str	r2, [sp, #0]
   179bc:	9301      	str	r3, [sp, #4]
	for (i = 63; i >= 0; i--) {
   179be:	233f      	movs	r3, #63	; 0x3f
	uint64_t q = 0, r = 0, bit_shift;
   179c0:	2600      	movs	r6, #0
   179c2:	2700      	movs	r7, #0
   179c4:	0025      	movs	r5, r4
{
   179c6:	9006      	str	r0, [sp, #24]
   179c8:	9107      	str	r1, [sp, #28]
	for (i = 63; i >= 0; i--) {
   179ca:	9303      	str	r3, [sp, #12]
		bit_shift = (uint64_t)1 << i;
   179cc:	9a03      	ldr	r2, [sp, #12]
   179ce:	4b13      	ldr	r3, [pc, #76]	; (17a1c <long_division+0x68>)
   179d0:	2001      	movs	r0, #1
   179d2:	2100      	movs	r1, #0
   179d4:	4798      	blx	r3

		r = r << 1;
   179d6:	19b6      	adds	r6, r6, r6
   179d8:	417f      	adcs	r7, r7

		if (n & bit_shift) {
   179da:	9b06      	ldr	r3, [sp, #24]
   179dc:	9a07      	ldr	r2, [sp, #28]
   179de:	4003      	ands	r3, r0
   179e0:	400a      	ands	r2, r1
		r = r << 1;
   179e2:	9604      	str	r6, [sp, #16]
   179e4:	9705      	str	r7, [sp, #20]
		if (n & bit_shift) {
   179e6:	4313      	orrs	r3, r2
   179e8:	d003      	beq.n	179f2 <long_division+0x3e>
			r |= 0x01;
   179ea:	2301      	movs	r3, #1
   179ec:	4333      	orrs	r3, r6
   179ee:	001e      	movs	r6, r3
   179f0:	9f05      	ldr	r7, [sp, #20]
		}

		if (r >= d) {
   179f2:	9b01      	ldr	r3, [sp, #4]
   179f4:	42bb      	cmp	r3, r7
   179f6:	d809      	bhi.n	17a0c <long_division+0x58>
   179f8:	d102      	bne.n	17a00 <long_division+0x4c>
   179fa:	9b00      	ldr	r3, [sp, #0]
   179fc:	42b3      	cmp	r3, r6
   179fe:	d805      	bhi.n	17a0c <long_division+0x58>
			r = r - d;
   17a00:	9a00      	ldr	r2, [sp, #0]
   17a02:	9b01      	ldr	r3, [sp, #4]
   17a04:	1ab6      	subs	r6, r6, r2
   17a06:	419f      	sbcs	r7, r3
			q |= bit_shift;
   17a08:	4304      	orrs	r4, r0
   17a0a:	430d      	orrs	r5, r1
	for (i = 63; i >= 0; i--) {
   17a0c:	9b03      	ldr	r3, [sp, #12]
   17a0e:	1e5a      	subs	r2, r3, #1
   17a10:	9203      	str	r2, [sp, #12]
   17a12:	d2db      	bcs.n	179cc <long_division+0x18>
		}
	}

	return q;
}
   17a14:	0020      	movs	r0, r4
   17a16:	0029      	movs	r1, r5
   17a18:	b009      	add	sp, #36	; 0x24
   17a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17a1c:	00019111 	.word	0x00019111

00017a20 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   17a20:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   17a22:	0849      	lsrs	r1, r1, #1
{
   17a24:	0004      	movs	r4, r0
   17a26:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17a28:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
   17a2a:	42a1      	cmp	r1, r4
   17a2c:	d201      	bcs.n	17a32 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
   17a2e:	bd10      	pop	{r4, pc}
		baud_calculated++;
   17a30:	0003      	movs	r3, r0
   17a32:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
   17a34:	1b09      	subs	r1, r1, r4
		baud_calculated++;
   17a36:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
   17a38:	428c      	cmp	r4, r1
   17a3a:	d9f9      	bls.n	17a30 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17a3c:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
   17a3e:	2bff      	cmp	r3, #255	; 0xff
   17a40:	d8f5      	bhi.n	17a2e <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
   17a42:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
   17a44:	2000      	movs	r0, #0
   17a46:	e7f2      	b.n	17a2e <_sercom_get_sync_baud_val+0xe>

00017a48 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   17a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a4a:	b085      	sub	sp, #20
   17a4c:	001e      	movs	r6, r3
   17a4e:	ab0a      	add	r3, sp, #40	; 0x28
   17a50:	000d      	movs	r5, r1
   17a52:	7819      	ldrb	r1, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   17a54:	0003      	movs	r3, r0
   17a56:	434b      	muls	r3, r1
{
   17a58:	9203      	str	r2, [sp, #12]
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17a5a:	2740      	movs	r7, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
   17a5c:	42ab      	cmp	r3, r5
   17a5e:	d817      	bhi.n	17a90 <_sercom_get_async_baud_val+0x48>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   17a60:	2e00      	cmp	r6, #0
   17a62:	d118      	bne.n	17a96 <_sercom_get_async_baud_val+0x4e>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   17a64:	0002      	movs	r2, r0
   17a66:	0033      	movs	r3, r6
   17a68:	0008      	movs	r0, r1
   17a6a:	4c1b      	ldr	r4, [pc, #108]	; (17ad8 <_sercom_get_async_baud_val+0x90>)
   17a6c:	0031      	movs	r1, r6
   17a6e:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
   17a70:	002a      	movs	r2, r5
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   17a72:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
   17a74:	0033      	movs	r3, r6
   17a76:	4c19      	ldr	r4, [pc, #100]	; (17adc <_sercom_get_async_baud_val+0x94>)
   17a78:	0030      	movs	r0, r6
   17a7a:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
   17a7c:	2200      	movs	r2, #0
   17a7e:	2301      	movs	r3, #1
   17a80:	1a12      	subs	r2, r2, r0
   17a82:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
   17a84:	0c14      	lsrs	r4, r2, #16
   17a86:	0418      	lsls	r0, r3, #16
   17a88:	4304      	orrs	r4, r0
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
   17a8a:	2700      	movs	r7, #0
	*baudval = baud_calculated;
   17a8c:	9b03      	ldr	r3, [sp, #12]
   17a8e:	801c      	strh	r4, [r3, #0]
}
   17a90:	0038      	movs	r0, r7
   17a92:	b005      	add	sp, #20
   17a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint64_t baud_calculated = 0;
   17a96:	2400      	movs	r4, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   17a98:	2e01      	cmp	r6, #1
   17a9a:	d1f6      	bne.n	17a8a <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
   17a9c:	000a      	movs	r2, r1
   17a9e:	0023      	movs	r3, r4
   17aa0:	0021      	movs	r1, r4
   17aa2:	4e0d      	ldr	r6, [pc, #52]	; (17ad8 <_sercom_get_async_baud_val+0x90>)
   17aa4:	47b0      	blx	r6
   17aa6:	9000      	str	r0, [sp, #0]
   17aa8:	9101      	str	r1, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
   17aaa:	000b      	movs	r3, r1
   17aac:	0002      	movs	r2, r0
   17aae:	0021      	movs	r1, r4
   17ab0:	0028      	movs	r0, r5
   17ab2:	4c0a      	ldr	r4, [pc, #40]	; (17adc <_sercom_get_async_baud_val+0x94>)
   17ab4:	47a0      	blx	r4
		if(baud_int > BAUD_INT_MAX) {
   17ab6:	2380      	movs	r3, #128	; 0x80
		baud_int = long_division( peripheral_clock, temp1);
   17ab8:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
   17aba:	019b      	lsls	r3, r3, #6
   17abc:	4298      	cmp	r0, r3
   17abe:	d8e7      	bhi.n	17a90 <_sercom_get_async_baud_val+0x48>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   17ac0:	9a00      	ldr	r2, [sp, #0]
   17ac2:	9b01      	ldr	r3, [sp, #4]
   17ac4:	0f69      	lsrs	r1, r5, #29
   17ac6:	00e8      	lsls	r0, r5, #3
   17ac8:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
   17aca:	00f4      	lsls	r4, r6, #3
   17acc:	1b04      	subs	r4, r0, r4
		baud_calculated = baud_int | (baud_fp << 13);
   17ace:	b2e4      	uxtb	r4, r4
   17ad0:	0364      	lsls	r4, r4, #13
   17ad2:	4334      	orrs	r4, r6
   17ad4:	e7d9      	b.n	17a8a <_sercom_get_async_baud_val+0x42>
   17ad6:	46c0      	nop			; (mov r8, r8)
   17ad8:	000191a5 	.word	0x000191a5
   17adc:	000179b5 	.word	0x000179b5

00017ae0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   17ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   17ae2:	4c0d      	ldr	r4, [pc, #52]	; (17b18 <sercom_set_gclk_generator+0x38>)
{
   17ae4:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
   17ae6:	7823      	ldrb	r3, [r4, #0]
   17ae8:	2b00      	cmp	r3, #0
   17aea:	d001      	beq.n	17af0 <sercom_set_gclk_generator+0x10>
   17aec:	2900      	cmp	r1, #0
   17aee:	d00c      	beq.n	17b0a <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
   17af0:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   17af2:	2013      	movs	r0, #19
   17af4:	4b09      	ldr	r3, [pc, #36]	; (17b1c <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
   17af6:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   17af8:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   17afa:	2013      	movs	r0, #19
   17afc:	4b08      	ldr	r3, [pc, #32]	; (17b20 <sercom_set_gclk_generator+0x40>)
   17afe:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
   17b00:	2301      	movs	r3, #1

		return STATUS_OK;
   17b02:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
   17b04:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
   17b06:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
   17b08:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
   17b0a:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
   17b0c:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
   17b0e:	42ab      	cmp	r3, r5
   17b10:	d0fa      	beq.n	17b08 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
   17b12:	201d      	movs	r0, #29
   17b14:	e7f8      	b.n	17b08 <sercom_set_gclk_generator+0x28>
   17b16:	46c0      	nop			; (mov r8, r8)
   17b18:	2000351d 	.word	0x2000351d
   17b1c:	0001884d 	.word	0x0001884d
   17b20:	000187c5 	.word	0x000187c5

00017b24 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
   17b24:	4a39      	ldr	r2, [pc, #228]	; (17c0c <_sercom_get_default_pad+0xe8>)
{
   17b26:	0003      	movs	r3, r0
   17b28:	b500      	push	{lr}
   17b2a:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
   17b2c:	4293      	cmp	r3, r2
   17b2e:	d033      	beq.n	17b98 <_sercom_get_default_pad+0x74>
   17b30:	d807      	bhi.n	17b42 <_sercom_get_default_pad+0x1e>
   17b32:	4a37      	ldr	r2, [pc, #220]	; (17c10 <_sercom_get_default_pad+0xec>)
   17b34:	4293      	cmp	r3, r2
   17b36:	d014      	beq.n	17b62 <_sercom_get_default_pad+0x3e>
   17b38:	4a36      	ldr	r2, [pc, #216]	; (17c14 <_sercom_get_default_pad+0xf0>)
   17b3a:	4293      	cmp	r3, r2
   17b3c:	d01f      	beq.n	17b7e <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
   17b3e:	2300      	movs	r3, #0
   17b40:	e017      	b.n	17b72 <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
   17b42:	4a35      	ldr	r2, [pc, #212]	; (17c18 <_sercom_get_default_pad+0xf4>)
   17b44:	4293      	cmp	r3, r2
   17b46:	d03a      	beq.n	17bbe <_sercom_get_default_pad+0x9a>
   17b48:	4a34      	ldr	r2, [pc, #208]	; (17c1c <_sercom_get_default_pad+0xf8>)
   17b4a:	4293      	cmp	r3, r2
   17b4c:	d044      	beq.n	17bd8 <_sercom_get_default_pad+0xb4>
   17b4e:	4a34      	ldr	r2, [pc, #208]	; (17c20 <_sercom_get_default_pad+0xfc>)
   17b50:	4293      	cmp	r3, r2
   17b52:	d1f4      	bne.n	17b3e <_sercom_get_default_pad+0x1a>
	return 0;
   17b54:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   17b56:	2903      	cmp	r1, #3
   17b58:	d80b      	bhi.n	17b72 <_sercom_get_default_pad+0x4e>
   17b5a:	f001 f959 	bl	18e10 <__gnu_thumb1_case_uqi>
   17b5e:	2a50      	.short	0x2a50
   17b60:	2e2c      	.short	0x2e2c
	return 0;
   17b62:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   17b64:	2903      	cmp	r1, #3
   17b66:	d804      	bhi.n	17b72 <_sercom_get_default_pad+0x4e>
   17b68:	f001 f952 	bl	18e10 <__gnu_thumb1_case_uqi>
   17b6c:	07050243 	.word	0x07050243
   17b70:	4b2c      	ldr	r3, [pc, #176]	; (17c24 <_sercom_get_default_pad+0x100>)
}
   17b72:	0018      	movs	r0, r3
   17b74:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   17b76:	4b2c      	ldr	r3, [pc, #176]	; (17c28 <_sercom_get_default_pad+0x104>)
   17b78:	e7fb      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17b7a:	4b2c      	ldr	r3, [pc, #176]	; (17c2c <_sercom_get_default_pad+0x108>)
   17b7c:	e7f9      	b.n	17b72 <_sercom_get_default_pad+0x4e>
	return 0;
   17b7e:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   17b80:	2903      	cmp	r1, #3
   17b82:	d8f6      	bhi.n	17b72 <_sercom_get_default_pad+0x4e>
   17b84:	f001 f944 	bl	18e10 <__gnu_thumb1_case_uqi>
   17b88:	06040237 	.word	0x06040237
   17b8c:	4b28      	ldr	r3, [pc, #160]	; (17c30 <_sercom_get_default_pad+0x10c>)
   17b8e:	e7f0      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17b90:	4b28      	ldr	r3, [pc, #160]	; (17c34 <_sercom_get_default_pad+0x110>)
   17b92:	e7ee      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17b94:	4b28      	ldr	r3, [pc, #160]	; (17c38 <_sercom_get_default_pad+0x114>)
   17b96:	e7ec      	b.n	17b72 <_sercom_get_default_pad+0x4e>
	return 0;
   17b98:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   17b9a:	2903      	cmp	r1, #3
   17b9c:	d8e9      	bhi.n	17b72 <_sercom_get_default_pad+0x4e>
   17b9e:	f001 f937 	bl	18e10 <__gnu_thumb1_case_uqi>
   17ba2:	022c      	.short	0x022c
   17ba4:	0604      	.short	0x0604
   17ba6:	4b25      	ldr	r3, [pc, #148]	; (17c3c <_sercom_get_default_pad+0x118>)
   17ba8:	e7e3      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17baa:	4b25      	ldr	r3, [pc, #148]	; (17c40 <_sercom_get_default_pad+0x11c>)
   17bac:	e7e1      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bae:	4b25      	ldr	r3, [pc, #148]	; (17c44 <_sercom_get_default_pad+0x120>)
   17bb0:	e7df      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bb2:	4b25      	ldr	r3, [pc, #148]	; (17c48 <_sercom_get_default_pad+0x124>)
   17bb4:	e7dd      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bb6:	4b25      	ldr	r3, [pc, #148]	; (17c4c <_sercom_get_default_pad+0x128>)
   17bb8:	e7db      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bba:	4b25      	ldr	r3, [pc, #148]	; (17c50 <_sercom_get_default_pad+0x12c>)
   17bbc:	e7d9      	b.n	17b72 <_sercom_get_default_pad+0x4e>
	return 0;
   17bbe:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   17bc0:	2903      	cmp	r1, #3
   17bc2:	d8d6      	bhi.n	17b72 <_sercom_get_default_pad+0x4e>
   17bc4:	f001 f924 	bl	18e10 <__gnu_thumb1_case_uqi>
   17bc8:	0604021d 	.word	0x0604021d
   17bcc:	4b21      	ldr	r3, [pc, #132]	; (17c54 <_sercom_get_default_pad+0x130>)
   17bce:	e7d0      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bd0:	4b21      	ldr	r3, [pc, #132]	; (17c58 <_sercom_get_default_pad+0x134>)
   17bd2:	e7ce      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bd4:	4b21      	ldr	r3, [pc, #132]	; (17c5c <_sercom_get_default_pad+0x138>)
   17bd6:	e7cc      	b.n	17b72 <_sercom_get_default_pad+0x4e>
	return 0;
   17bd8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   17bda:	2903      	cmp	r1, #3
   17bdc:	d8c9      	bhi.n	17b72 <_sercom_get_default_pad+0x4e>
   17bde:	f001 f917 	bl	18e10 <__gnu_thumb1_case_uqi>
   17be2:	0212      	.short	0x0212
   17be4:	0604      	.short	0x0604
   17be6:	4b1e      	ldr	r3, [pc, #120]	; (17c60 <_sercom_get_default_pad+0x13c>)
   17be8:	e7c3      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bea:	4b1e      	ldr	r3, [pc, #120]	; (17c64 <_sercom_get_default_pad+0x140>)
   17bec:	e7c1      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bee:	4b1e      	ldr	r3, [pc, #120]	; (17c68 <_sercom_get_default_pad+0x144>)
   17bf0:	e7bf      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bf2:	4b1e      	ldr	r3, [pc, #120]	; (17c6c <_sercom_get_default_pad+0x148>)
   17bf4:	e7bd      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bf6:	2303      	movs	r3, #3
   17bf8:	e7bb      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bfa:	4b1d      	ldr	r3, [pc, #116]	; (17c70 <_sercom_get_default_pad+0x14c>)
   17bfc:	e7b9      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17bfe:	4b1d      	ldr	r3, [pc, #116]	; (17c74 <_sercom_get_default_pad+0x150>)
   17c00:	e7b7      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17c02:	4b1d      	ldr	r3, [pc, #116]	; (17c78 <_sercom_get_default_pad+0x154>)
   17c04:	e7b5      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17c06:	4b1d      	ldr	r3, [pc, #116]	; (17c7c <_sercom_get_default_pad+0x158>)
   17c08:	e7b3      	b.n	17b72 <_sercom_get_default_pad+0x4e>
   17c0a:	46c0      	nop			; (mov r8, r8)
   17c0c:	42001000 	.word	0x42001000
   17c10:	42000800 	.word	0x42000800
   17c14:	42000c00 	.word	0x42000c00
   17c18:	42001800 	.word	0x42001800
   17c1c:	42001c00 	.word	0x42001c00
   17c20:	42001400 	.word	0x42001400
   17c24:	00050003 	.word	0x00050003
   17c28:	00060003 	.word	0x00060003
   17c2c:	00070003 	.word	0x00070003
   17c30:	00010003 	.word	0x00010003
   17c34:	001e0003 	.word	0x001e0003
   17c38:	001f0003 	.word	0x001f0003
   17c3c:	00090003 	.word	0x00090003
   17c40:	000a0003 	.word	0x000a0003
   17c44:	000b0003 	.word	0x000b0003
   17c48:	00110003 	.word	0x00110003
   17c4c:	00120003 	.word	0x00120003
   17c50:	00130003 	.word	0x00130003
   17c54:	000d0003 	.word	0x000d0003
   17c58:	000e0003 	.word	0x000e0003
   17c5c:	000f0003 	.word	0x000f0003
   17c60:	00170003 	.word	0x00170003
   17c64:	00180003 	.word	0x00180003
   17c68:	00190003 	.word	0x00190003
   17c6c:	00040003 	.word	0x00040003
   17c70:	00080003 	.word	0x00080003
   17c74:	00100003 	.word	0x00100003
   17c78:	000c0003 	.word	0x000c0003
   17c7c:	00160003 	.word	0x00160003

00017c80 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   17c80:	b570      	push	{r4, r5, r6, lr}
   17c82:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   17c84:	4669      	mov	r1, sp
   17c86:	4b09      	ldr	r3, [pc, #36]	; (17cac <_sercom_get_sercom_inst_index+0x2c>)
   17c88:	466a      	mov	r2, sp
   17c8a:	cb70      	ldmia	r3!, {r4, r5, r6}
   17c8c:	c170      	stmia	r1!, {r4, r5, r6}
   17c8e:	cb70      	ldmia	r3!, {r4, r5, r6}
   17c90:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   17c92:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   17c94:	0099      	lsls	r1, r3, #2
   17c96:	5851      	ldr	r1, [r2, r1]
   17c98:	4281      	cmp	r1, r0
   17c9a:	d102      	bne.n	17ca2 <_sercom_get_sercom_inst_index+0x22>
			return i;
   17c9c:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
   17c9e:	b006      	add	sp, #24
   17ca0:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   17ca2:	3301      	adds	r3, #1
   17ca4:	2b06      	cmp	r3, #6
   17ca6:	d1f5      	bne.n	17c94 <_sercom_get_sercom_inst_index+0x14>
	return 0;
   17ca8:	2000      	movs	r0, #0
   17caa:	e7f8      	b.n	17c9e <_sercom_get_sercom_inst_index+0x1e>
   17cac:	0001cf54 	.word	0x0001cf54

00017cb0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
   17cb0:	4770      	bx	lr
	...

00017cb4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   17cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   17cb6:	4c09      	ldr	r4, [pc, #36]	; (17cdc <_sercom_set_handler+0x28>)
   17cb8:	4a09      	ldr	r2, [pc, #36]	; (17ce0 <_sercom_set_handler+0x2c>)
   17cba:	7823      	ldrb	r3, [r4, #0]
   17cbc:	2b00      	cmp	r3, #0
   17cbe:	d109      	bne.n	17cd4 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
   17cc0:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   17cc2:	4f08      	ldr	r7, [pc, #32]	; (17ce4 <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
   17cc4:	4d08      	ldr	r5, [pc, #32]	; (17ce8 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   17cc6:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
   17cc8:	50ee      	str	r6, [r5, r3]
   17cca:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   17ccc:	2b18      	cmp	r3, #24
   17cce:	d1fa      	bne.n	17cc6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
   17cd0:	3b17      	subs	r3, #23
   17cd2:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   17cd4:	0080      	lsls	r0, r0, #2
   17cd6:	5011      	str	r1, [r2, r0]
}
   17cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17cda:	46c0      	nop			; (mov r8, r8)
   17cdc:	2000351f 	.word	0x2000351f
   17ce0:	20003520 	.word	0x20003520
   17ce4:	00017cb1 	.word	0x00017cb1
   17ce8:	20004800 	.word	0x20004800

00017cec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   17cec:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   17cee:	2309      	movs	r3, #9
   17cf0:	466a      	mov	r2, sp
   17cf2:	7013      	strb	r3, [r2, #0]
   17cf4:	3301      	adds	r3, #1
   17cf6:	7053      	strb	r3, [r2, #1]
   17cf8:	3301      	adds	r3, #1
   17cfa:	7093      	strb	r3, [r2, #2]
   17cfc:	3301      	adds	r3, #1
   17cfe:	70d3      	strb	r3, [r2, #3]
   17d00:	3301      	adds	r3, #1
   17d02:	7113      	strb	r3, [r2, #4]
   17d04:	3301      	adds	r3, #1
   17d06:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   17d08:	4b02      	ldr	r3, [pc, #8]	; (17d14 <_sercom_get_interrupt_vector+0x28>)
   17d0a:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   17d0c:	466b      	mov	r3, sp
   17d0e:	5618      	ldrsb	r0, [r3, r0]
}
   17d10:	bd0e      	pop	{r1, r2, r3, pc}
   17d12:	46c0      	nop			; (mov r8, r8)
   17d14:	00017c81 	.word	0x00017c81

00017d18 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   17d18:	b510      	push	{r4, lr}
   17d1a:	4b02      	ldr	r3, [pc, #8]	; (17d24 <SERCOM0_Handler+0xc>)
   17d1c:	2000      	movs	r0, #0
   17d1e:	681b      	ldr	r3, [r3, #0]
   17d20:	4798      	blx	r3
   17d22:	bd10      	pop	{r4, pc}
   17d24:	20003520 	.word	0x20003520

00017d28 <SERCOM1_Handler>:
   17d28:	b510      	push	{r4, lr}
   17d2a:	4b02      	ldr	r3, [pc, #8]	; (17d34 <SERCOM1_Handler+0xc>)
   17d2c:	2001      	movs	r0, #1
   17d2e:	685b      	ldr	r3, [r3, #4]
   17d30:	4798      	blx	r3
   17d32:	bd10      	pop	{r4, pc}
   17d34:	20003520 	.word	0x20003520

00017d38 <SERCOM2_Handler>:
   17d38:	b510      	push	{r4, lr}
   17d3a:	4b02      	ldr	r3, [pc, #8]	; (17d44 <SERCOM2_Handler+0xc>)
   17d3c:	2002      	movs	r0, #2
   17d3e:	689b      	ldr	r3, [r3, #8]
   17d40:	4798      	blx	r3
   17d42:	bd10      	pop	{r4, pc}
   17d44:	20003520 	.word	0x20003520

00017d48 <SERCOM3_Handler>:
   17d48:	b510      	push	{r4, lr}
   17d4a:	4b02      	ldr	r3, [pc, #8]	; (17d54 <SERCOM3_Handler+0xc>)
   17d4c:	2003      	movs	r0, #3
   17d4e:	68db      	ldr	r3, [r3, #12]
   17d50:	4798      	blx	r3
   17d52:	bd10      	pop	{r4, pc}
   17d54:	20003520 	.word	0x20003520

00017d58 <SERCOM4_Handler>:
   17d58:	b510      	push	{r4, lr}
   17d5a:	4b02      	ldr	r3, [pc, #8]	; (17d64 <SERCOM4_Handler+0xc>)
   17d5c:	2004      	movs	r0, #4
   17d5e:	691b      	ldr	r3, [r3, #16]
   17d60:	4798      	blx	r3
   17d62:	bd10      	pop	{r4, pc}
   17d64:	20003520 	.word	0x20003520

00017d68 <SERCOM5_Handler>:
   17d68:	b510      	push	{r4, lr}
   17d6a:	4b02      	ldr	r3, [pc, #8]	; (17d74 <SERCOM5_Handler+0xc>)
   17d6c:	2005      	movs	r0, #5
   17d6e:	695b      	ldr	r3, [r3, #20]
   17d70:	4798      	blx	r3
   17d72:	bd10      	pop	{r4, pc}
   17d74:	20003520 	.word	0x20003520

00017d78 <_usart_wait_for_sync>:
	SercomUsart *const usart_hw = &(module->hw->USART);
   17d78:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
   17d7a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   17d7c:	2b00      	cmp	r3, #0
   17d7e:	d1fc      	bne.n	17d7a <_usart_wait_for_sync+0x2>
}
   17d80:	4770      	bx	lr
	...

00017d84 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   17d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d86:	0007      	movs	r7, r0
   17d88:	b093      	sub	sp, #76	; 0x4c
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17d8a:	4ba0      	ldr	r3, [pc, #640]	; (1800c <usart_init+0x288>)
	module->hw = hw;
   17d8c:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17d8e:	0008      	movs	r0, r1
{
   17d90:	0016      	movs	r6, r2
   17d92:	9104      	str	r1, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17d94:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   17d96:	2201      	movs	r2, #1
   17d98:	9b04      	ldr	r3, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17d9a:	0005      	movs	r5, r0
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   17d9c:	681b      	ldr	r3, [r3, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   17d9e:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   17da0:	4213      	tst	r3, r2
   17da2:	d000      	beq.n	17da6 <usart_init+0x22>
   17da4:	e10f      	b.n	17fc6 <usart_init+0x242>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   17da6:	9b04      	ldr	r3, [sp, #16]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   17da8:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   17daa:	681c      	ldr	r4, [r3, #0]
   17dac:	2302      	movs	r3, #2
   17dae:	401c      	ands	r4, r3
   17db0:	d000      	beq.n	17db4 <usart_init+0x30>
   17db2:	e108      	b.n	17fc6 <usart_init+0x242>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   17db4:	18eb      	adds	r3, r5, r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   17db6:	381b      	subs	r0, #27
   17db8:	4098      	lsls	r0, r3
   17dba:	0003      	movs	r3, r0
			PM->APBCMASK.reg |= mask;
   17dbc:	4a94      	ldr	r2, [pc, #592]	; (18010 <usart_init+0x28c>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17dbe:	3514      	adds	r5, #20
   17dc0:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   17dc2:	b2ed      	uxtb	r5, r5
   17dc4:	430b      	orrs	r3, r1
   17dc6:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
   17dc8:	0033      	movs	r3, r6
   17dca:	332d      	adds	r3, #45	; 0x2d
   17dcc:	9302      	str	r3, [sp, #8]
   17dce:	781b      	ldrb	r3, [r3, #0]
   17dd0:	a90c      	add	r1, sp, #48	; 0x30
   17dd2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   17dd4:	0028      	movs	r0, r5
   17dd6:	4b8f      	ldr	r3, [pc, #572]	; (18014 <usart_init+0x290>)
   17dd8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17dda:	0028      	movs	r0, r5
   17ddc:	4b8e      	ldr	r3, [pc, #568]	; (18018 <usart_init+0x294>)
   17dde:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   17de0:	9b02      	ldr	r3, [sp, #8]
   17de2:	0021      	movs	r1, r4
   17de4:	7818      	ldrb	r0, [r3, #0]
   17de6:	4b8d      	ldr	r3, [pc, #564]	; (1801c <usart_init+0x298>)
   17de8:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   17dea:	7af3      	ldrb	r3, [r6, #11]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   17dec:	2508      	movs	r5, #8
	module->character_size = config->character_size;
   17dee:	717b      	strb	r3, [r7, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   17df0:	1d73      	adds	r3, r6, #5
   17df2:	7fdb      	ldrb	r3, [r3, #31]
   17df4:	71bb      	strb	r3, [r7, #6]
	module->transmitter_enabled = config->transmitter_enable;
   17df6:	1db3      	adds	r3, r6, #6
   17df8:	7fdb      	ldrb	r3, [r3, #31]
   17dfa:	71fb      	strb	r3, [r7, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   17dfc:	7ef3      	ldrb	r3, [r6, #27]
   17dfe:	723b      	strb	r3, [r7, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   17e00:	7f33      	ldrb	r3, [r6, #28]
   17e02:	727b      	strb	r3, [r7, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
   17e04:	683b      	ldr	r3, [r7, #0]
   17e06:	9303      	str	r3, [sp, #12]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17e08:	0018      	movs	r0, r3
   17e0a:	4b80      	ldr	r3, [pc, #512]	; (1800c <usart_init+0x288>)
   17e0c:	4798      	blx	r3
	uint16_t baud  = 0;
   17e0e:	ab0e      	add	r3, sp, #56	; 0x38
   17e10:	801c      	strh	r4, [r3, #0]
	switch (config->sample_rate) {
   17e12:	8a33      	ldrh	r3, [r6, #16]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17e14:	3014      	adds	r0, #20
	switch (config->sample_rate) {
   17e16:	9302      	str	r3, [sp, #8]
   17e18:	2380      	movs	r3, #128	; 0x80
   17e1a:	9a02      	ldr	r2, [sp, #8]
   17e1c:	01db      	lsls	r3, r3, #7
   17e1e:	429a      	cmp	r2, r3
   17e20:	d014      	beq.n	17e4c <usart_init+0xc8>
   17e22:	d808      	bhi.n	17e36 <usart_init+0xb2>
   17e24:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   17e26:	2510      	movs	r5, #16
	switch (config->sample_rate) {
   17e28:	019b      	lsls	r3, r3, #6
   17e2a:	429a      	cmp	r2, r3
   17e2c:	d100      	bne.n	17e30 <usart_init+0xac>
   17e2e:	e0cd      	b.n	17fcc <usart_init+0x248>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   17e30:	2510      	movs	r5, #16
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   17e32:	2400      	movs	r4, #0
   17e34:	e00a      	b.n	17e4c <usart_init+0xc8>
	switch (config->sample_rate) {
   17e36:	23c0      	movs	r3, #192	; 0xc0
   17e38:	9a02      	ldr	r2, [sp, #8]
   17e3a:	01db      	lsls	r3, r3, #7
   17e3c:	429a      	cmp	r2, r3
   17e3e:	d100      	bne.n	17e42 <usart_init+0xbe>
   17e40:	e0c3      	b.n	17fca <usart_init+0x246>
   17e42:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   17e44:	2503      	movs	r5, #3
	switch (config->sample_rate) {
   17e46:	021b      	lsls	r3, r3, #8
   17e48:	429a      	cmp	r2, r3
   17e4a:	d1f1      	bne.n	17e30 <usart_init+0xac>
	ctrla = (uint32_t)config->data_order |
   17e4c:	6833      	ldr	r3, [r6, #0]
   17e4e:	9306      	str	r3, [sp, #24]
		(uint32_t)config->mux_setting |
   17e50:	68f3      	ldr	r3, [r6, #12]
   17e52:	9307      	str	r3, [sp, #28]
		config->sample_adjustment |
   17e54:	6973      	ldr	r3, [r6, #20]
   17e56:	9308      	str	r3, [sp, #32]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   17e58:	7e33      	ldrb	r3, [r6, #24]
   17e5a:	9309      	str	r3, [sp, #36]	; 0x24
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   17e5c:	1df3      	adds	r3, r6, #7
   17e5e:	7fdb      	ldrb	r3, [r3, #31]
   17e60:	930a      	str	r3, [sp, #40]	; 0x28
	transfer_mode = (uint32_t)config->transfer_mode;
   17e62:	6873      	ldr	r3, [r6, #4]
   17e64:	9305      	str	r3, [sp, #20]
   17e66:	0033      	movs	r3, r6
	switch (transfer_mode)
   17e68:	9a05      	ldr	r2, [sp, #20]
   17e6a:	3308      	adds	r3, #8
   17e6c:	2a00      	cmp	r2, #0
   17e6e:	d100      	bne.n	17e72 <usart_init+0xee>
   17e70:	e0ae      	b.n	17fd0 <usart_init+0x24c>
   17e72:	2280      	movs	r2, #128	; 0x80
   17e74:	9905      	ldr	r1, [sp, #20]
   17e76:	0552      	lsls	r2, r2, #21
   17e78:	4291      	cmp	r1, r2
   17e7a:	d10e      	bne.n	17e9a <usart_init+0x116>
			if (!config->use_external_clock) {
   17e7c:	7fdb      	ldrb	r3, [r3, #31]
   17e7e:	2b00      	cmp	r3, #0
   17e80:	d10b      	bne.n	17e9a <usart_init+0x116>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   17e82:	4b67      	ldr	r3, [pc, #412]	; (18020 <usart_init+0x29c>)
   17e84:	b2c0      	uxtb	r0, r0
   17e86:	6a34      	ldr	r4, [r6, #32]
   17e88:	4798      	blx	r3
   17e8a:	aa0e      	add	r2, sp, #56	; 0x38
   17e8c:	0001      	movs	r1, r0
   17e8e:	4b65      	ldr	r3, [pc, #404]	; (18024 <usart_init+0x2a0>)
   17e90:	0020      	movs	r0, r4
   17e92:	4798      	blx	r3
	if (status_code != STATUS_OK) {
   17e94:	2800      	cmp	r0, #0
   17e96:	d000      	beq.n	17e9a <usart_init+0x116>
   17e98:	e095      	b.n	17fc6 <usart_init+0x242>
	if(config->encoding_format_enable) {
   17e9a:	7e73      	ldrb	r3, [r6, #25]
   17e9c:	2b00      	cmp	r3, #0
   17e9e:	d002      	beq.n	17ea6 <usart_init+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   17ea0:	7eb3      	ldrb	r3, [r6, #26]
   17ea2:	9a03      	ldr	r2, [sp, #12]
   17ea4:	7393      	strb	r3, [r2, #14]
	_usart_wait_for_sync(module);
   17ea6:	4b60      	ldr	r3, [pc, #384]	; (18028 <usart_init+0x2a4>)
   17ea8:	0038      	movs	r0, r7
   17eaa:	4798      	blx	r3
	usart_hw->BAUD.reg = baud;
   17eac:	ab0a      	add	r3, sp, #40	; 0x28
   17eae:	8a1b      	ldrh	r3, [r3, #16]
   17eb0:	9a03      	ldr	r2, [sp, #12]
	ctrla |= transfer_mode;
   17eb2:	9c06      	ldr	r4, [sp, #24]
	usart_hw->BAUD.reg = baud;
   17eb4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
   17eb6:	9b07      	ldr	r3, [sp, #28]
   17eb8:	431c      	orrs	r4, r3
   17eba:	9b08      	ldr	r3, [sp, #32]
   17ebc:	431c      	orrs	r4, r3
   17ebe:	9b05      	ldr	r3, [sp, #20]
   17ec0:	431c      	orrs	r4, r3
   17ec2:	9b02      	ldr	r3, [sp, #8]
   17ec4:	431c      	orrs	r4, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   17ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17ec8:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
   17eca:	431c      	orrs	r4, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   17ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17ece:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
   17ed0:	431c      	orrs	r4, r3
	if (config->use_external_clock == false) {
   17ed2:	0033      	movs	r3, r6
   17ed4:	3308      	adds	r3, #8
   17ed6:	7fdb      	ldrb	r3, [r3, #31]
   17ed8:	2b00      	cmp	r3, #0
   17eda:	d101      	bne.n	17ee0 <usart_init+0x15c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   17edc:	3304      	adds	r3, #4
   17ede:	431c      	orrs	r4, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   17ee0:	7e75      	ldrb	r5, [r6, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   17ee2:	7f33      	ldrb	r3, [r6, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   17ee4:	02ad      	lsls	r5, r5, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   17ee6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   17ee8:	431d      	orrs	r5, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   17eea:	7f73      	ldrb	r3, [r6, #29]
	ctrlb |= (uint32_t)config->character_size;
   17eec:	7af2      	ldrb	r2, [r6, #11]
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   17eee:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   17ef0:	431d      	orrs	r5, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   17ef2:	1d73      	adds	r3, r6, #5
   17ef4:	7fdb      	ldrb	r3, [r3, #31]
   17ef6:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   17ef8:	431d      	orrs	r5, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   17efa:	1db3      	adds	r3, r6, #6
   17efc:	7fdb      	ldrb	r3, [r3, #31]
   17efe:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   17f00:	432b      	orrs	r3, r5
	ctrlb |= (uint32_t)config->character_size;
   17f02:	7ab5      	ldrb	r5, [r6, #10]
   17f04:	4315      	orrs	r5, r2
   17f06:	431d      	orrs	r5, r3
	if (config->parity != USART_PARITY_NONE) {
   17f08:	8933      	ldrh	r3, [r6, #8]
   17f0a:	2bff      	cmp	r3, #255	; 0xff
   17f0c:	d100      	bne.n	17f10 <usart_init+0x18c>
   17f0e:	e075      	b.n	17ffc <usart_init+0x278>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   17f10:	2280      	movs	r2, #128	; 0x80
   17f12:	0452      	lsls	r2, r2, #17
   17f14:	4314      	orrs	r4, r2
		ctrlb |= config->parity;
   17f16:	431d      	orrs	r5, r3
	if (config->run_in_standby || system_is_debugger_present()) {
   17f18:	0033      	movs	r3, r6
   17f1a:	332c      	adds	r3, #44	; 0x2c
   17f1c:	781b      	ldrb	r3, [r3, #0]
   17f1e:	2b00      	cmp	r3, #0
   17f20:	d103      	bne.n	17f2a <usart_init+0x1a6>
   17f22:	4b42      	ldr	r3, [pc, #264]	; (1802c <usart_init+0x2a8>)
   17f24:	789b      	ldrb	r3, [r3, #2]
   17f26:	079b      	lsls	r3, r3, #30
   17f28:	d501      	bpl.n	17f2e <usart_init+0x1aa>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   17f2a:	2380      	movs	r3, #128	; 0x80
   17f2c:	431c      	orrs	r4, r3
	_usart_wait_for_sync(module);
   17f2e:	0038      	movs	r0, r7
   17f30:	4b3d      	ldr	r3, [pc, #244]	; (18028 <usart_init+0x2a4>)
   17f32:	4798      	blx	r3
	usart_hw->CTRLB.reg = ctrlb;
   17f34:	9b03      	ldr	r3, [sp, #12]
	_usart_wait_for_sync(module);
   17f36:	0038      	movs	r0, r7
	usart_hw->CTRLB.reg = ctrlb;
   17f38:	605d      	str	r5, [r3, #4]
	_usart_wait_for_sync(module);
   17f3a:	4b3b      	ldr	r3, [pc, #236]	; (18028 <usart_init+0x2a4>)
   17f3c:	4798      	blx	r3
	usart_hw->CTRLA.reg = ctrla;
   17f3e:	9b03      	ldr	r3, [sp, #12]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17f40:	2500      	movs	r5, #0
   17f42:	601c      	str	r4, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17f44:	2380      	movs	r3, #128	; 0x80
   17f46:	ac0d      	add	r4, sp, #52	; 0x34
   17f48:	7023      	strb	r3, [r4, #0]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
   17f4a:	6b33      	ldr	r3, [r6, #48]	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17f4c:	7065      	strb	r5, [r4, #1]
   17f4e:	930e      	str	r3, [sp, #56]	; 0x38
   17f50:	6b73      	ldr	r3, [r6, #52]	; 0x34
	config->powersave    = false;
   17f52:	70e5      	strb	r5, [r4, #3]
   17f54:	930f      	str	r3, [sp, #60]	; 0x3c
   17f56:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   17f58:	70a5      	strb	r5, [r4, #2]
	uint32_t pad_pinmuxes[] = {
   17f5a:	9310      	str	r3, [sp, #64]	; 0x40
   17f5c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   17f5e:	9302      	str	r3, [sp, #8]
   17f60:	9311      	str	r3, [sp, #68]	; 0x44
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
   17f62:	2010      	movs	r0, #16
   17f64:	aa0a      	add	r2, sp, #40	; 0x28
   17f66:	00ab      	lsls	r3, r5, #2
   17f68:	1812      	adds	r2, r2, r0
   17f6a:	58d0      	ldr	r0, [r2, r3]
   17f6c:	b2e9      	uxtb	r1, r5

		if (current_pinmux == PINMUX_DEFAULT) {
   17f6e:	2800      	cmp	r0, #0
   17f70:	d102      	bne.n	17f78 <usart_init+0x1f4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   17f72:	9804      	ldr	r0, [sp, #16]
   17f74:	4b2e      	ldr	r3, [pc, #184]	; (18030 <usart_init+0x2ac>)
   17f76:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
   17f78:	1c43      	adds	r3, r0, #1
   17f7a:	d005      	beq.n	17f88 <usart_init+0x204>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   17f7c:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   17f7e:	0c00      	lsrs	r0, r0, #16
   17f80:	b2c0      	uxtb	r0, r0
   17f82:	0021      	movs	r1, r4
   17f84:	4b2b      	ldr	r3, [pc, #172]	; (18034 <usart_init+0x2b0>)
   17f86:	4798      	blx	r3
   17f88:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   17f8a:	2d04      	cmp	r5, #4
   17f8c:	d1e9      	bne.n	17f62 <usart_init+0x1de>

	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->callback_reg_mask          = 0x00;
   17f8e:	003b      	movs	r3, r7
		module->callback[i]            = NULL;
   17f90:	2400      	movs	r4, #0
	module->callback_reg_mask          = 0x00;
   17f92:	3330      	adds	r3, #48	; 0x30
	module->remaining_tx_buffer_length = 0x0000;
   17f94:	85fc      	strh	r4, [r7, #46]	; 0x2e
		module->callback[i]            = NULL;
   17f96:	60fc      	str	r4, [r7, #12]
   17f98:	613c      	str	r4, [r7, #16]
   17f9a:	617c      	str	r4, [r7, #20]
   17f9c:	61bc      	str	r4, [r7, #24]
   17f9e:	61fc      	str	r4, [r7, #28]
   17fa0:	623c      	str	r4, [r7, #32]
	module->tx_buffer_ptr              = NULL;
   17fa2:	62bc      	str	r4, [r7, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   17fa4:	627c      	str	r4, [r7, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
   17fa6:	85bc      	strh	r4, [r7, #44]	; 0x2c
	module->callback_enable_mask       = 0x00;
	module->rx_status                  = STATUS_OK;
   17fa8:	709c      	strb	r4, [r3, #2]
	module->callback_reg_mask          = 0x00;
   17faa:	701c      	strb	r4, [r3, #0]
	module->callback_enable_mask       = 0x00;
   17fac:	705c      	strb	r4, [r3, #1]
	module->tx_status                  = STATUS_OK;
   17fae:	70dc      	strb	r4, [r3, #3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   17fb0:	6838      	ldr	r0, [r7, #0]
   17fb2:	4b16      	ldr	r3, [pc, #88]	; (1800c <usart_init+0x288>)
   17fb4:	4798      	blx	r3
   17fb6:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   17fb8:	4b1f      	ldr	r3, [pc, #124]	; (18038 <usart_init+0x2b4>)
   17fba:	4920      	ldr	r1, [pc, #128]	; (1803c <usart_init+0x2b8>)
   17fbc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
   17fbe:	0020      	movs	r0, r4
	_sercom_instances[instance_index] = module;
   17fc0:	4b1f      	ldr	r3, [pc, #124]	; (18040 <usart_init+0x2bc>)
   17fc2:	00ad      	lsls	r5, r5, #2
   17fc4:	50ef      	str	r7, [r5, r3]
}
   17fc6:	b013      	add	sp, #76	; 0x4c
   17fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   17fca:	2508      	movs	r5, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   17fcc:	2401      	movs	r4, #1
   17fce:	e73d      	b.n	17e4c <usart_init+0xc8>
			if (config->use_external_clock) {
   17fd0:	7fdb      	ldrb	r3, [r3, #31]
   17fd2:	2b00      	cmp	r3, #0
   17fd4:	d007      	beq.n	17fe6 <usart_init+0x262>
				status_code =
   17fd6:	0023      	movs	r3, r4
   17fd8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   17fda:	6a30      	ldr	r0, [r6, #32]
   17fdc:	9500      	str	r5, [sp, #0]
   17fde:	aa0e      	add	r2, sp, #56	; 0x38
				status_code =
   17fe0:	4c18      	ldr	r4, [pc, #96]	; (18044 <usart_init+0x2c0>)
   17fe2:	47a0      	blx	r4
   17fe4:	e756      	b.n	17e94 <usart_init+0x110>
						_sercom_get_async_baud_val(config->baudrate,
   17fe6:	6a33      	ldr	r3, [r6, #32]
   17fe8:	b2c0      	uxtb	r0, r0
   17fea:	930b      	str	r3, [sp, #44]	; 0x2c
   17fec:	4b0c      	ldr	r3, [pc, #48]	; (18020 <usart_init+0x29c>)
   17fee:	4798      	blx	r3
				status_code =
   17ff0:	9500      	str	r5, [sp, #0]
						_sercom_get_async_baud_val(config->baudrate,
   17ff2:	0001      	movs	r1, r0
				status_code =
   17ff4:	0023      	movs	r3, r4
   17ff6:	aa0e      	add	r2, sp, #56	; 0x38
   17ff8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17ffa:	e7f1      	b.n	17fe0 <usart_init+0x25c>
		if(config->lin_slave_enable) {
   17ffc:	7ef3      	ldrb	r3, [r6, #27]
   17ffe:	2b00      	cmp	r3, #0
   18000:	d100      	bne.n	18004 <usart_init+0x280>
   18002:	e789      	b.n	17f18 <usart_init+0x194>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   18004:	2380      	movs	r3, #128	; 0x80
   18006:	04db      	lsls	r3, r3, #19
   18008:	431c      	orrs	r4, r3
   1800a:	e785      	b.n	17f18 <usart_init+0x194>
   1800c:	00017c81 	.word	0x00017c81
   18010:	40000400 	.word	0x40000400
   18014:	0001884d 	.word	0x0001884d
   18018:	000187c5 	.word	0x000187c5
   1801c:	00017ae1 	.word	0x00017ae1
   18020:	00018869 	.word	0x00018869
   18024:	00017a21 	.word	0x00017a21
   18028:	00017d79 	.word	0x00017d79
   1802c:	41002000 	.word	0x41002000
   18030:	00017b25 	.word	0x00017b25
   18034:	00018951 	.word	0x00018951
   18038:	00017cb5 	.word	0x00017cb5
   1803c:	00018149 	.word	0x00018149
   18040:	20004800 	.word	0x20004800
   18044:	00017a49 	.word	0x00017a49

00018048 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   18048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1804a:	0005      	movs	r5, r0
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1804c:	6803      	ldr	r3, [r0, #0]
{
   1804e:	000e      	movs	r6, r1
	SercomUsart *const usart_hw = &(module->hw->USART);
   18050:	9301      	str	r3, [sp, #4]
	cpu_irq_enter_critical();
   18052:	4b0b      	ldr	r3, [pc, #44]	; (18080 <_usart_write_buffer+0x38>)
{
   18054:	0017      	movs	r7, r2
   18056:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   18058:	8dec      	ldrh	r4, [r5, #46]	; 0x2e
   1805a:	4b0a      	ldr	r3, [pc, #40]	; (18084 <_usart_write_buffer+0x3c>)
   1805c:	b2a4      	uxth	r4, r4
   1805e:	2c00      	cmp	r4, #0
   18060:	d002      	beq.n	18068 <_usart_write_buffer+0x20>
	cpu_irq_leave_critical();
   18062:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   18064:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
   18066:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
   18068:	85ef      	strh	r7, [r5, #46]	; 0x2e
   1806a:	4798      	blx	r3
	module->tx_status                  = STATUS_BUSY;
   1806c:	2305      	movs	r3, #5
	module->tx_buffer_ptr              = tx_data;
   1806e:	62ae      	str	r6, [r5, #40]	; 0x28
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   18070:	9a01      	ldr	r2, [sp, #4]
	module->tx_status                  = STATUS_BUSY;
   18072:	3533      	adds	r5, #51	; 0x33
   18074:	702b      	strb	r3, [r5, #0]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   18076:	3b04      	subs	r3, #4
   18078:	7593      	strb	r3, [r2, #22]
	return STATUS_OK;
   1807a:	0020      	movs	r0, r4
   1807c:	e7f3      	b.n	18066 <_usart_write_buffer+0x1e>
   1807e:	46c0      	nop			; (mov r8, r8)
   18080:	000177cd 	.word	0x000177cd
   18084:	00017801 	.word	0x00017801

00018088 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   18088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1808a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1808c:	4b10      	ldr	r3, [pc, #64]	; (180d0 <_usart_read_buffer+0x48>)
   1808e:	0017      	movs	r7, r2
   18090:	000e      	movs	r6, r1
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   18092:	6805      	ldr	r5, [r0, #0]
   18094:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   18096:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   18098:	4b0e      	ldr	r3, [pc, #56]	; (180d4 <_usart_read_buffer+0x4c>)
   1809a:	2a00      	cmp	r2, #0
   1809c:	d002      	beq.n	180a4 <_usart_read_buffer+0x1c>
	cpu_irq_leave_critical();
   1809e:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
   180a0:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
   180a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
   180a4:	85a7      	strh	r7, [r4, #44]	; 0x2c
   180a6:	4798      	blx	r3
	module->rx_status                  = STATUS_BUSY;
   180a8:	0023      	movs	r3, r4
   180aa:	2205      	movs	r2, #5
   180ac:	3332      	adds	r3, #50	; 0x32
	module->rx_buffer_ptr              = rx_data;
   180ae:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   180b0:	701a      	strb	r2, [r3, #0]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   180b2:	2304      	movs	r3, #4
   180b4:	75ab      	strb	r3, [r5, #22]
	if(module->lin_slave_enabled) {
   180b6:	7a23      	ldrb	r3, [r4, #8]
   180b8:	2b00      	cmp	r3, #0
   180ba:	d001      	beq.n	180c0 <_usart_read_buffer+0x38>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   180bc:	2320      	movs	r3, #32
   180be:	75ab      	strb	r3, [r5, #22]
	return STATUS_OK;
   180c0:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
   180c2:	7a63      	ldrb	r3, [r4, #9]
   180c4:	4283      	cmp	r3, r0
   180c6:	d0ec      	beq.n	180a2 <_usart_read_buffer+0x1a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   180c8:	2308      	movs	r3, #8
   180ca:	75ab      	strb	r3, [r5, #22]
   180cc:	e7e9      	b.n	180a2 <_usart_read_buffer+0x1a>
   180ce:	46c0      	nop			; (mov r8, r8)
   180d0:	000177cd 	.word	0x000177cd
   180d4:	00017801 	.word	0x00017801

000180d8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   180d8:	1c93      	adds	r3, r2, #2
   180da:	009b      	lsls	r3, r3, #2
   180dc:	18c3      	adds	r3, r0, r3
   180de:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   180e0:	2301      	movs	r3, #1
   180e2:	4093      	lsls	r3, r2
   180e4:	001a      	movs	r2, r3
   180e6:	3030      	adds	r0, #48	; 0x30
   180e8:	7803      	ldrb	r3, [r0, #0]
   180ea:	4313      	orrs	r3, r2
   180ec:	7003      	strb	r3, [r0, #0]
}
   180ee:	4770      	bx	lr

000180f0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   180f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   180f2:	2317      	movs	r3, #23
	if (length == 0) {
   180f4:	2a00      	cmp	r2, #0
   180f6:	d006      	beq.n	18106 <usart_write_buffer_job+0x16>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   180f8:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
   180fa:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
   180fc:	2c00      	cmp	r4, #0
   180fe:	d002      	beq.n	18106 <usart_write_buffer_job+0x16>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   18100:	4b02      	ldr	r3, [pc, #8]	; (1810c <usart_write_buffer_job+0x1c>)
   18102:	4798      	blx	r3
   18104:	0003      	movs	r3, r0
}
   18106:	0018      	movs	r0, r3
   18108:	bd10      	pop	{r4, pc}
   1810a:	46c0      	nop			; (mov r8, r8)
   1810c:	00018049 	.word	0x00018049

00018110 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   18110:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
   18112:	2317      	movs	r3, #23
	if (length == 0) {
   18114:	2a00      	cmp	r2, #0
   18116:	d006      	beq.n	18126 <usart_read_buffer_job+0x16>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   18118:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
   1811a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
   1811c:	2c00      	cmp	r4, #0
   1811e:	d002      	beq.n	18126 <usart_read_buffer_job+0x16>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   18120:	4b02      	ldr	r3, [pc, #8]	; (1812c <usart_read_buffer_job+0x1c>)
   18122:	4798      	blx	r3
   18124:	0003      	movs	r3, r0
}
   18126:	0018      	movs	r0, r3
   18128:	bd10      	pop	{r4, pc}
   1812a:	46c0      	nop			; (mov r8, r8)
   1812c:	00018089 	.word	0x00018089

00018130 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   18130:	2900      	cmp	r1, #0
   18132:	d003      	beq.n	1813c <usart_get_job_status+0xc>
   18134:	2901      	cmp	r1, #1
   18136:	d005      	beq.n	18144 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   18138:	2017      	movs	r0, #23
   1813a:	e002      	b.n	18142 <usart_get_job_status+0x12>
			status_code = module->rx_status;
   1813c:	3032      	adds	r0, #50	; 0x32
			status_code = module->tx_status;
   1813e:	7800      	ldrb	r0, [r0, #0]
   18140:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
   18142:	4770      	bx	lr
			status_code = module->tx_status;
   18144:	3033      	adds	r0, #51	; 0x33
   18146:	e7fa      	b.n	1813e <usart_get_job_status+0xe>

00018148 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   18148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   1814a:	4b58      	ldr	r3, [pc, #352]	; (182ac <_usart_interrupt_handler+0x164>)
   1814c:	0080      	lsls	r0, r0, #2
   1814e:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   18150:	6825      	ldr	r5, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
   18152:	69eb      	ldr	r3, [r5, #28]
	while (usart_is_syncing(module)) {
   18154:	2b00      	cmp	r3, #0
   18156:	d1fc      	bne.n	18152 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   18158:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   1815a:	7daf      	ldrb	r7, [r5, #22]
   1815c:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
   1815e:	0023      	movs	r3, r4
   18160:	3330      	adds	r3, #48	; 0x30
   18162:	781a      	ldrb	r2, [r3, #0]
   18164:	785e      	ldrb	r6, [r3, #1]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   18166:	2301      	movs	r3, #1
	callback_status = module->callback_reg_mask &
   18168:	4016      	ands	r6, r2
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1816a:	421f      	tst	r7, r3
   1816c:	d019      	beq.n	181a2 <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
   1816e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   18170:	2a00      	cmp	r2, #0
   18172:	d100      	bne.n	18176 <_usart_interrupt_handler+0x2e>
   18174:	e072      	b.n	1825c <_usart_interrupt_handler+0x114>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   18176:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   18178:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1817a:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
   1817c:	62a1      	str	r1, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1817e:	7961      	ldrb	r1, [r4, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   18180:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   18182:	2901      	cmp	r1, #1
   18184:	d064      	beq.n	18250 <_usart_interrupt_handler+0x108>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   18186:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   18188:	05db      	lsls	r3, r3, #23
   1818a:	0ddb      	lsrs	r3, r3, #23
   1818c:	852b      	strh	r3, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1818e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   18190:	3b01      	subs	r3, #1
   18192:	b29b      	uxth	r3, r3
   18194:	85e3      	strh	r3, [r4, #46]	; 0x2e
   18196:	2b00      	cmp	r3, #0
   18198:	d103      	bne.n	181a2 <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1819a:	3301      	adds	r3, #1
   1819c:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   1819e:	3301      	adds	r3, #1
   181a0:	75ab      	strb	r3, [r5, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   181a2:	2302      	movs	r3, #2
   181a4:	421f      	tst	r7, r3
   181a6:	d009      	beq.n	181bc <_usart_interrupt_handler+0x74>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   181a8:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
   181aa:	0023      	movs	r3, r4
   181ac:	2200      	movs	r2, #0
   181ae:	3333      	adds	r3, #51	; 0x33
   181b0:	701a      	strb	r2, [r3, #0]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   181b2:	07f3      	lsls	r3, r6, #31
   181b4:	d502      	bpl.n	181bc <_usart_interrupt_handler+0x74>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   181b6:	0020      	movs	r0, r4
   181b8:	68e3      	ldr	r3, [r4, #12]
   181ba:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   181bc:	2304      	movs	r3, #4
   181be:	421f      	tst	r7, r3
   181c0:	d027      	beq.n	18212 <_usart_interrupt_handler+0xca>

		if (module->remaining_rx_buffer_length) {
   181c2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   181c4:	2a00      	cmp	r2, #0
   181c6:	d100      	bne.n	181ca <_usart_interrupt_handler+0x82>
   181c8:	e06d      	b.n	182a6 <_usart_interrupt_handler+0x15e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   181ca:	8b6b      	ldrh	r3, [r5, #26]
   181cc:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   181ce:	071a      	lsls	r2, r3, #28
   181d0:	d446      	bmi.n	18260 <_usart_interrupt_handler+0x118>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   181d2:	223f      	movs	r2, #63	; 0x3f
				error_code &= ~SERCOM_USART_STATUS_CTS;
   181d4:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   181d6:	d045      	beq.n	18264 <_usart_interrupt_handler+0x11c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   181d8:	2202      	movs	r2, #2
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   181da:	211a      	movs	r1, #26
				if (error_code & SERCOM_USART_STATUS_FERR) {
   181dc:	4213      	tst	r3, r2
   181de:	d10f      	bne.n	18200 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   181e0:	2204      	movs	r2, #4
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   181e2:	211e      	movs	r1, #30
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   181e4:	4213      	tst	r3, r2
   181e6:	d10b      	bne.n	18200 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   181e8:	2201      	movs	r2, #1
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   181ea:	2113      	movs	r1, #19
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   181ec:	4213      	tst	r3, r2
   181ee:	d107      	bne.n	18200 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   181f0:	2210      	movs	r2, #16
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   181f2:	2142      	movs	r1, #66	; 0x42
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   181f4:	4213      	tst	r3, r2
   181f6:	d103      	bne.n	18200 <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   181f8:	2220      	movs	r2, #32
   181fa:	4213      	tst	r3, r2
   181fc:	d004      	beq.n	18208 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   181fe:	2141      	movs	r1, #65	; 0x41
   18200:	0023      	movs	r3, r4
   18202:	3332      	adds	r3, #50	; 0x32
   18204:	7019      	strb	r1, [r3, #0]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   18206:	836a      	strh	r2, [r5, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   18208:	0773      	lsls	r3, r6, #29
   1820a:	d502      	bpl.n	18212 <_usart_interrupt_handler+0xca>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   1820c:	0020      	movs	r0, r4
   1820e:	6963      	ldr	r3, [r4, #20]
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   18210:	4798      	blx	r3
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   18212:	2310      	movs	r3, #16
   18214:	421f      	tst	r7, r3
   18216:	d006      	beq.n	18226 <_usart_interrupt_handler+0xde>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   18218:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   1821a:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1821c:	421e      	tst	r6, r3
   1821e:	d002      	beq.n	18226 <_usart_interrupt_handler+0xde>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   18220:	0020      	movs	r0, r4
   18222:	69e3      	ldr	r3, [r4, #28]
   18224:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   18226:	2320      	movs	r3, #32
   18228:	421f      	tst	r7, r3
   1822a:	d006      	beq.n	1823a <_usart_interrupt_handler+0xf2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   1822c:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   1822e:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   18230:	0733      	lsls	r3, r6, #28
   18232:	d502      	bpl.n	1823a <_usart_interrupt_handler+0xf2>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   18234:	0020      	movs	r0, r4
   18236:	69a3      	ldr	r3, [r4, #24]
   18238:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   1823a:	2308      	movs	r3, #8
   1823c:	421f      	tst	r7, r3
   1823e:	d006      	beq.n	1824e <_usart_interrupt_handler+0x106>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   18240:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   18242:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   18244:	06b3      	lsls	r3, r6, #26
   18246:	d502      	bpl.n	1824e <_usart_interrupt_handler+0x106>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   18248:	6a23      	ldr	r3, [r4, #32]
   1824a:	0020      	movs	r0, r4
   1824c:	4798      	blx	r3
		}
	}
#endif
}
   1824e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   18250:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
   18252:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   18254:	0209      	lsls	r1, r1, #8
   18256:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   18258:	62a2      	str	r2, [r4, #40]	; 0x28
   1825a:	e795      	b.n	18188 <_usart_interrupt_handler+0x40>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1825c:	752b      	strb	r3, [r5, #20]
   1825e:	e7a0      	b.n	181a2 <_usart_interrupt_handler+0x5a>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   18260:	2237      	movs	r2, #55	; 0x37
   18262:	e7b7      	b.n	181d4 <_usart_interrupt_handler+0x8c>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   18264:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
   18266:	6a61      	ldr	r1, [r4, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   18268:	05db      	lsls	r3, r3, #23
   1826a:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
   1826c:	b2da      	uxtb	r2, r3
   1826e:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
   18270:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18272:	1c51      	adds	r1, r2, #1
   18274:	6261      	str	r1, [r4, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   18276:	7961      	ldrb	r1, [r4, #5]
   18278:	2901      	cmp	r1, #1
   1827a:	d104      	bne.n	18286 <_usart_interrupt_handler+0x13e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   1827c:	0a1b      	lsrs	r3, r3, #8
   1827e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   18280:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18282:	3301      	adds	r3, #1
   18284:	6263      	str	r3, [r4, #36]	; 0x24
				if(--(module->remaining_rx_buffer_length) == 0) {
   18286:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   18288:	3b01      	subs	r3, #1
   1828a:	b29b      	uxth	r3, r3
   1828c:	85a3      	strh	r3, [r4, #44]	; 0x2c
   1828e:	2b00      	cmp	r3, #0
   18290:	d1bf      	bne.n	18212 <_usart_interrupt_handler+0xca>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   18292:	2204      	movs	r2, #4
   18294:	752a      	strb	r2, [r5, #20]
					module->rx_status = STATUS_OK;
   18296:	0022      	movs	r2, r4
   18298:	3232      	adds	r2, #50	; 0x32
   1829a:	7013      	strb	r3, [r2, #0]
					if (callback_status
   1829c:	07b3      	lsls	r3, r6, #30
   1829e:	d5b8      	bpl.n	18212 <_usart_interrupt_handler+0xca>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   182a0:	0020      	movs	r0, r4
   182a2:	6923      	ldr	r3, [r4, #16]
   182a4:	e7b4      	b.n	18210 <_usart_interrupt_handler+0xc8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   182a6:	752b      	strb	r3, [r5, #20]
   182a8:	e7b3      	b.n	18212 <_usart_interrupt_handler+0xca>
   182aa:	46c0      	nop			; (mov r8, r8)
   182ac:	20004800 	.word	0x20004800

000182b0 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   182b0:	2310      	movs	r3, #16
   182b2:	4902      	ldr	r1, [pc, #8]	; (182bc <_system_dfll_wait_for_sync+0xc>)
   182b4:	68ca      	ldr	r2, [r1, #12]
   182b6:	421a      	tst	r2, r3
   182b8:	d0fc      	beq.n	182b4 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
   182ba:	4770      	bx	lr
   182bc:	40000800 	.word	0x40000800

000182c0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   182c0:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
   182c2:	2808      	cmp	r0, #8
   182c4:	d806      	bhi.n	182d4 <system_clock_source_get_hz+0x14>
   182c6:	f000 fda3 	bl	18e10 <__gnu_thumb1_case_uqi>
   182ca:	0508      	.short	0x0508
   182cc:	12303005 	.word	0x12303005
   182d0:	150b      	.short	0x150b
   182d2:	28          	.byte	0x28
   182d3:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   182d4:	2400      	movs	r4, #0
	}
}
   182d6:	0020      	movs	r0, r4
   182d8:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
   182da:	4b16      	ldr	r3, [pc, #88]	; (18334 <system_clock_source_get_hz+0x74>)
   182dc:	691c      	ldr	r4, [r3, #16]
   182de:	e7fa      	b.n	182d6 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   182e0:	4b15      	ldr	r3, [pc, #84]	; (18338 <system_clock_source_get_hz+0x78>)
   182e2:	4c16      	ldr	r4, [pc, #88]	; (1833c <system_clock_source_get_hz+0x7c>)
   182e4:	6a1b      	ldr	r3, [r3, #32]
   182e6:	059b      	lsls	r3, r3, #22
   182e8:	0f9b      	lsrs	r3, r3, #30
   182ea:	40dc      	lsrs	r4, r3
   182ec:	e7f3      	b.n	182d6 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
   182ee:	4b11      	ldr	r3, [pc, #68]	; (18334 <system_clock_source_get_hz+0x74>)
   182f0:	695c      	ldr	r4, [r3, #20]
   182f2:	e7f0      	b.n	182d6 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   182f4:	4d0f      	ldr	r5, [pc, #60]	; (18334 <system_clock_source_get_hz+0x74>)
			return 0;
   182f6:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   182f8:	682b      	ldr	r3, [r5, #0]
   182fa:	079b      	lsls	r3, r3, #30
   182fc:	d5eb      	bpl.n	182d6 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
   182fe:	4b10      	ldr	r3, [pc, #64]	; (18340 <system_clock_source_get_hz+0x80>)
   18300:	4798      	blx	r3
		switch(_system_clock_inst.dfll.control &
   18302:	2224      	movs	r2, #36	; 0x24
   18304:	682b      	ldr	r3, [r5, #0]
   18306:	4013      	ands	r3, r2
   18308:	2b04      	cmp	r3, #4
   1830a:	d111      	bne.n	18330 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1830c:	0020      	movs	r0, r4
   1830e:	4b0d      	ldr	r3, [pc, #52]	; (18344 <system_clock_source_get_hz+0x84>)
   18310:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   18312:	68ac      	ldr	r4, [r5, #8]
   18314:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   18316:	4344      	muls	r4, r0
   18318:	e7dd      	b.n	182d6 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1831a:	4b0b      	ldr	r3, [pc, #44]	; (18348 <system_clock_source_get_hz+0x88>)
			return 0;
   1831c:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1831e:	781b      	ldrb	r3, [r3, #0]
   18320:	075b      	lsls	r3, r3, #29
   18322:	d5d8      	bpl.n	182d6 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
   18324:	4b03      	ldr	r3, [pc, #12]	; (18334 <system_clock_source_get_hz+0x74>)
   18326:	68dc      	ldr	r4, [r3, #12]
   18328:	e7d5      	b.n	182d6 <system_clock_source_get_hz+0x16>
		return 32768UL;
   1832a:	2480      	movs	r4, #128	; 0x80
   1832c:	0224      	lsls	r4, r4, #8
   1832e:	e7d2      	b.n	182d6 <system_clock_source_get_hz+0x16>
			return 48000000UL;
   18330:	4c06      	ldr	r4, [pc, #24]	; (1834c <system_clock_source_get_hz+0x8c>)
   18332:	e7d0      	b.n	182d6 <system_clock_source_get_hz+0x16>
   18334:	20003538 	.word	0x20003538
   18338:	40000800 	.word	0x40000800
   1833c:	007a1200 	.word	0x007a1200
   18340:	000182b1 	.word	0x000182b1
   18344:	00018869 	.word	0x00018869
   18348:	40000850 	.word	0x40000850
   1834c:	02dc6c00 	.word	0x02dc6c00

00018350 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   18350:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
   18352:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
   18354:	7802      	ldrb	r2, [r0, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   18356:	7845      	ldrb	r5, [r0, #1]
   18358:	2001      	movs	r0, #1
   1835a:	2640      	movs	r6, #64	; 0x40
   1835c:	4005      	ands	r5, r0
   1835e:	4020      	ands	r0, r4
   18360:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   18362:	4908      	ldr	r1, [pc, #32]	; (18384 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
   18364:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   18366:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
   18368:	01c0      	lsls	r0, r0, #7
   1836a:	43b3      	bics	r3, r6
   1836c:	432b      	orrs	r3, r5
   1836e:	43a3      	bics	r3, r4
   18370:	4303      	orrs	r3, r0
   18372:	2003      	movs	r0, #3
   18374:	4002      	ands	r2, r0
   18376:	4804      	ldr	r0, [pc, #16]	; (18388 <system_clock_source_osc8m_set_config+0x38>)
   18378:	0212      	lsls	r2, r2, #8
   1837a:	4003      	ands	r3, r0
   1837c:	4313      	orrs	r3, r2
   1837e:	620b      	str	r3, [r1, #32]
}
   18380:	bd70      	pop	{r4, r5, r6, pc}
   18382:	46c0      	nop			; (mov r8, r8)
   18384:	40000800 	.word	0x40000800
   18388:	fffffcff 	.word	0xfffffcff

0001838c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   1838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t refclk;

	refclk = config->reference_frequency;

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   1838e:	7d03      	ldrb	r3, [r0, #20]
{
   18390:	0004      	movs	r4, r0
	refclk = config->reference_frequency;
   18392:	68c5      	ldr	r5, [r0, #12]
   18394:	4e22      	ldr	r6, [pc, #136]	; (18420 <system_clock_source_dpll_set_config+0x94>)
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   18396:	2b01      	cmp	r3, #1
   18398:	d105      	bne.n	183a6 <system_clock_source_dpll_set_config+0x1a>
		refclk = refclk / (2 * (config->reference_divider + 1));
   1839a:	8a01      	ldrh	r1, [r0, #16]
   1839c:	0028      	movs	r0, r5
   1839e:	3101      	adds	r1, #1
   183a0:	0049      	lsls	r1, r1, #1
   183a2:	47b0      	blx	r6
   183a4:	0005      	movs	r5, r0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   183a6:	68a3      	ldr	r3, [r4, #8]
   183a8:	0029      	movs	r1, r5
   183aa:	0118      	lsls	r0, r3, #4
   183ac:	47b0      	blx	r6
	tmpldrfrac = tmpldr & 0x0f;
   183ae:	230f      	movs	r3, #15
   183b0:	0002      	movs	r2, r0
	tmpldr = (tmpldr >> 4) - 1;

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   183b2:	7866      	ldrb	r6, [r4, #1]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   183b4:	7827      	ldrb	r7, [r4, #0]
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   183b6:	01b6      	lsls	r6, r6, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   183b8:	01ff      	lsls	r7, r7, #7
   183ba:	4337      	orrs	r7, r6
	SYSCTRL->DPLLCTRLA.reg =
   183bc:	4919      	ldr	r1, [pc, #100]	; (18424 <system_clock_source_dpll_set_config+0x98>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   183be:	b2ff      	uxtb	r7, r7
	SYSCTRL->DPLLCTRLA.reg =
   183c0:	700f      	strb	r7, [r1, #0]
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   183c2:	2103      	movs	r1, #3
	tmpldrfrac = tmpldr & 0x0f;
   183c4:	401a      	ands	r2, r3
	tmpldr = (tmpldr >> 4) - 1;
   183c6:	0903      	lsrs	r3, r0, #4
   183c8:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   183ca:	051b      	lsls	r3, r3, #20
	SYSCTRL->DPLLCTRLA.reg =
   183cc:	4e16      	ldr	r6, [pc, #88]	; (18428 <system_clock_source_dpll_set_config+0x9c>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   183ce:	0417      	lsls	r7, r2, #16
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   183d0:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   183d2:	433b      	orrs	r3, r7
	SYSCTRL->DPLLRATIO.reg =
   183d4:	64b3      	str	r3, [r6, #72]	; 0x48
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   183d6:	78a3      	ldrb	r3, [r4, #2]
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   183d8:	78e7      	ldrb	r7, [r4, #3]
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   183da:	031b      	lsls	r3, r3, #12
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   183dc:	00ff      	lsls	r7, r7, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   183de:	433b      	orrs	r3, r7
   183e0:	7927      	ldrb	r7, [r4, #4]
   183e2:	00bf      	lsls	r7, r7, #2
   183e4:	433b      	orrs	r3, r7
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   183e6:	7ca7      	ldrb	r7, [r4, #18]
   183e8:	400f      	ands	r7, r1
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   183ea:	433b      	orrs	r3, r7
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   183ec:	8a27      	ldrh	r7, [r4, #16]
   183ee:	490f      	ldr	r1, [pc, #60]	; (1842c <system_clock_source_dpll_set_config+0xa0>)
   183f0:	043f      	lsls	r7, r7, #16
   183f2:	400f      	ands	r7, r1
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   183f4:	21e0      	movs	r1, #224	; 0xe0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   183f6:	433b      	orrs	r3, r7
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   183f8:	7ce7      	ldrb	r7, [r4, #19]
   183fa:	00c9      	lsls	r1, r1, #3
   183fc:	023f      	lsls	r7, r7, #8
   183fe:	400f      	ands	r7, r1
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   18400:	433b      	orrs	r3, r7
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   18402:	2730      	movs	r7, #48	; 0x30
   18404:	7d24      	ldrb	r4, [r4, #20]
   18406:	0124      	lsls	r4, r4, #4
   18408:	403c      	ands	r4, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   1840a:	4323      	orrs	r3, r4
	SYSCTRL->DPLLCTRLB.reg =
   1840c:	64f3      	str	r3, [r6, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   1840e:	230f      	movs	r3, #15
   18410:	4398      	bics	r0, r3
   18412:	1880      	adds	r0, r0, r2
   18414:	4345      	muls	r5, r0
	_system_clock_inst.dpll.frequency =
   18416:	4b06      	ldr	r3, [pc, #24]	; (18430 <system_clock_source_dpll_set_config+0xa4>)
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   18418:	092d      	lsrs	r5, r5, #4
	_system_clock_inst.dpll.frequency =
   1841a:	60dd      	str	r5, [r3, #12]
}
   1841c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1841e:	46c0      	nop			; (mov r8, r8)
   18420:	00018e25 	.word	0x00018e25
   18424:	40000844 	.word	0x40000844
   18428:	40000800 	.word	0x40000800
   1842c:	07ff0000 	.word	0x07ff0000
   18430:	20003538 	.word	0x20003538

00018434 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   18434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (clock_source) {
   18436:	2808      	cmp	r0, #8
   18438:	d806      	bhi.n	18448 <system_clock_source_enable+0x14>
   1843a:	f000 fce9 	bl	18e10 <__gnu_thumb1_case_uqi>
   1843e:	0514      	.short	0x0514
   18440:	1a0e0c05 	.word	0x1a0e0c05
   18444:	2007      	.short	0x2007
   18446:	34          	.byte	0x34
   18447:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   18448:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
   1844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   1844c:	2302      	movs	r3, #2
   1844e:	4a19      	ldr	r2, [pc, #100]	; (184b4 <system_clock_source_enable+0x80>)
   18450:	6a11      	ldr	r1, [r2, #32]
   18452:	430b      	orrs	r3, r1
   18454:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   18456:	2000      	movs	r0, #0
   18458:	e7f7      	b.n	1844a <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   1845a:	2302      	movs	r3, #2
   1845c:	4a15      	ldr	r2, [pc, #84]	; (184b4 <system_clock_source_enable+0x80>)
   1845e:	6991      	ldr	r1, [r2, #24]
   18460:	430b      	orrs	r3, r1
   18462:	6193      	str	r3, [r2, #24]
   18464:	e7f7      	b.n	18456 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   18466:	2302      	movs	r3, #2
   18468:	4a12      	ldr	r2, [pc, #72]	; (184b4 <system_clock_source_enable+0x80>)
   1846a:	8a11      	ldrh	r1, [r2, #16]
   1846c:	430b      	orrs	r3, r1
   1846e:	8213      	strh	r3, [r2, #16]
   18470:	e7f1      	b.n	18456 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   18472:	2302      	movs	r3, #2
   18474:	4a0f      	ldr	r2, [pc, #60]	; (184b4 <system_clock_source_enable+0x80>)
   18476:	8a91      	ldrh	r1, [r2, #20]
   18478:	430b      	orrs	r3, r1
   1847a:	8293      	strh	r3, [r2, #20]
   1847c:	e7eb      	b.n	18456 <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   1847e:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
   18480:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   18482:	4e0d      	ldr	r6, [pc, #52]	; (184b8 <system_clock_source_enable+0x84>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   18484:	4d0b      	ldr	r5, [pc, #44]	; (184b4 <system_clock_source_enable+0x80>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   18486:	6833      	ldr	r3, [r6, #0]
	_system_dfll_wait_for_sync();
   18488:	4f0c      	ldr	r7, [pc, #48]	; (184bc <system_clock_source_enable+0x88>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   1848a:	4313      	orrs	r3, r2
   1848c:	6033      	str	r3, [r6, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   1848e:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
   18490:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   18492:	68b3      	ldr	r3, [r6, #8]
   18494:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   18496:	6873      	ldr	r3, [r6, #4]
   18498:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   1849a:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
   1849c:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1849e:	6833      	ldr	r3, [r6, #0]
   184a0:	b29b      	uxth	r3, r3
   184a2:	84ab      	strh	r3, [r5, #36]	; 0x24
   184a4:	e7d7      	b.n	18456 <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   184a6:	2302      	movs	r3, #2
   184a8:	4a05      	ldr	r2, [pc, #20]	; (184c0 <system_clock_source_enable+0x8c>)
   184aa:	7811      	ldrb	r1, [r2, #0]
   184ac:	430b      	orrs	r3, r1
   184ae:	7013      	strb	r3, [r2, #0]
   184b0:	e7d1      	b.n	18456 <system_clock_source_enable+0x22>
   184b2:	46c0      	nop			; (mov r8, r8)
   184b4:	40000800 	.word	0x40000800
   184b8:	20003538 	.word	0x20003538
   184bc:	000182b1 	.word	0x000182b1
   184c0:	40000844 	.word	0x40000844

000184c4 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   184c4:	22c2      	movs	r2, #194	; 0xc2
   184c6:	4b4a      	ldr	r3, [pc, #296]	; (185f0 <system_clock_init+0x12c>)
   184c8:	00d2      	lsls	r2, r2, #3
{
   184ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   184cc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   184ce:	221e      	movs	r2, #30
   184d0:	4948      	ldr	r1, [pc, #288]	; (185f4 <system_clock_init+0x130>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   184d2:	2500      	movs	r5, #0
   184d4:	684b      	ldr	r3, [r1, #4]
{
   184d6:	b08d      	sub	sp, #52	; 0x34
   184d8:	4393      	bics	r3, r2
   184da:	001a      	movs	r2, r3
   184dc:	2306      	movs	r3, #6
   184de:	4313      	orrs	r3, r2
   184e0:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   184e2:	2303      	movs	r3, #3
   184e4:	ac06      	add	r4, sp, #24
   184e6:	7023      	strb	r3, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   184e8:	b2e8      	uxtb	r0, r5
   184ea:	0021      	movs	r1, r4
   184ec:	4b42      	ldr	r3, [pc, #264]	; (185f8 <system_clock_init+0x134>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   184ee:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   184f0:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   184f2:	2d25      	cmp	r5, #37	; 0x25
   184f4:	d1f8      	bne.n	184e8 <system_clock_init+0x24>
	config->run_in_standby  = false;
   184f6:	2500      	movs	r5, #0
	config->on_demand       = true;
   184f8:	2601      	movs	r6, #1
	config->run_in_standby  = false;
   184fa:	a802      	add	r0, sp, #8

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   184fc:	4b3f      	ldr	r3, [pc, #252]	; (185fc <system_clock_init+0x138>)
   184fe:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   18500:	7086      	strb	r6, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   18502:	7005      	strb	r5, [r0, #0]
	system_clock_source_osc8m_set_config(&osc8m_conf);
   18504:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   18506:	4b3e      	ldr	r3, [pc, #248]	; (18600 <system_clock_init+0x13c>)
   18508:	2006      	movs	r0, #6
   1850a:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   1850c:	4b3d      	ldr	r3, [pc, #244]	; (18604 <system_clock_init+0x140>)
   1850e:	4798      	blx	r3
	config->source_clock       = GCLK_SOURCE_OSC8M;
   18510:	2306      	movs	r3, #6
   18512:	7023      	strb	r3, [r4, #0]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   18514:	2308      	movs	r3, #8
   18516:	0021      	movs	r1, r4
   18518:	6063      	str	r3, [r4, #4]
   1851a:	0030      	movs	r0, r6
   1851c:	4b3a      	ldr	r3, [pc, #232]	; (18608 <system_clock_init+0x144>)
	config->high_when_disabled = false;
   1851e:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   18520:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   18522:	7265      	strb	r5, [r4, #9]
   18524:	4798      	blx	r3
   18526:	4f39      	ldr	r7, [pc, #228]	; (1860c <system_clock_init+0x148>)
   18528:	0030      	movs	r0, r6
   1852a:	47b8      	blx	r7
   1852c:	2303      	movs	r3, #3
   1852e:	0021      	movs	r1, r4
   18530:	7023      	strb	r3, [r4, #0]
   18532:	2002      	movs	r0, #2
   18534:	4b34      	ldr	r3, [pc, #208]	; (18608 <system_clock_init+0x144>)
	config->division_factor    = 1;
   18536:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   18538:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
   1853a:	7265      	strb	r5, [r4, #9]
   1853c:	7226      	strb	r6, [r4, #8]
   1853e:	4798      	blx	r3
   18540:	2002      	movs	r0, #2
   18542:	47b8      	blx	r7
   18544:	2303      	movs	r3, #3
   18546:	7023      	strb	r3, [r4, #0]
   18548:	2320      	movs	r3, #32
   1854a:	0021      	movs	r1, r4
   1854c:	6063      	str	r3, [r4, #4]
   1854e:	2004      	movs	r0, #4
   18550:	4b2d      	ldr	r3, [pc, #180]	; (18608 <system_clock_init+0x144>)
	config->high_when_disabled = false;
   18552:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   18554:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   18556:	7265      	strb	r5, [r4, #9]
   18558:	4798      	blx	r3
   1855a:	2004      	movs	r0, #4
   1855c:	47b8      	blx	r7
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1855e:	2306      	movs	r3, #6
   18560:	0021      	movs	r1, r4
   18562:	7023      	strb	r3, [r4, #0]
   18564:	2005      	movs	r0, #5
   18566:	4b28      	ldr	r3, [pc, #160]	; (18608 <system_clock_init+0x144>)
	config->division_factor    = 1;
   18568:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
   1856a:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   1856c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   1856e:	7265      	strb	r5, [r4, #9]
   18570:	4798      	blx	r3
   18572:	2005      	movs	r0, #5
   18574:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   18576:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   18578:	0030      	movs	r0, r6
   1857a:	4b1f      	ldr	r3, [pc, #124]	; (185f8 <system_clock_init+0x134>)
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   1857c:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   1857e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   18580:	0030      	movs	r0, r6
   18582:	4b23      	ldr	r3, [pc, #140]	; (18610 <system_clock_init+0x14c>)
   18584:	4798      	blx	r3
	config->output_frequency    = 48000000;
   18586:	4b23      	ldr	r3, [pc, #140]	; (18614 <system_clock_init+0x150>)
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
   18588:	0020      	movs	r0, r4
   1858a:	60a3      	str	r3, [r4, #8]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   1858c:	2302      	movs	r3, #2
   1858e:	7523      	strb	r3, [r4, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   18590:	4b21      	ldr	r3, [pc, #132]	; (18618 <system_clock_init+0x154>)
	config->run_in_standby      = false;
   18592:	7065      	strb	r5, [r4, #1]
   18594:	60e3      	str	r3, [r4, #12]
	system_clock_source_dpll_set_config(&dpll_config);
   18596:	4b21      	ldr	r3, [pc, #132]	; (1861c <system_clock_init+0x158>)
	config->lock_bypass         = false;
   18598:	70a5      	strb	r5, [r4, #2]
	config->wake_up_fast        = false;
   1859a:	70e5      	strb	r5, [r4, #3]
	config->low_power_enable    = false;
   1859c:	7125      	strb	r5, [r4, #4]
	config->reference_divider   = 1;
   1859e:	8226      	strh	r6, [r4, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   185a0:	74e5      	strb	r5, [r4, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   185a2:	74a5      	strb	r5, [r4, #18]
	dpll_config.on_demand        = false;
   185a4:	7025      	strb	r5, [r4, #0]
	system_clock_source_dpll_set_config(&dpll_config);
   185a6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   185a8:	4b15      	ldr	r3, [pc, #84]	; (18600 <system_clock_init+0x13c>)
   185aa:	2008      	movs	r0, #8
   185ac:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   185ae:	2303      	movs	r3, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
   185b0:	491b      	ldr	r1, [pc, #108]	; (18620 <system_clock_init+0x15c>)
   185b2:	780a      	ldrb	r2, [r1, #0]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   185b4:	401a      	ands	r2, r3
   185b6:	2a03      	cmp	r2, #3
   185b8:	d1fb      	bne.n	185b2 <system_clock_init+0xee>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   185ba:	2380      	movs	r3, #128	; 0x80
	PM->CPUSEL.reg = (uint32_t)divider;
   185bc:	2400      	movs	r4, #0
   185be:	4a19      	ldr	r2, [pc, #100]	; (18624 <system_clock_init+0x160>)
   185c0:	425b      	negs	r3, r3
   185c2:	7811      	ldrb	r1, [r2, #0]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   185c4:	0020      	movs	r0, r4
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   185c6:	430b      	orrs	r3, r1
   185c8:	7013      	strb	r3, [r2, #0]
   185ca:	4b17      	ldr	r3, [pc, #92]	; (18628 <system_clock_init+0x164>)
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   185cc:	2208      	movs	r2, #8
   185ce:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   185d0:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   185d2:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   185d4:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
   185d6:	2301      	movs	r3, #1
   185d8:	a903      	add	r1, sp, #12
   185da:	604b      	str	r3, [r1, #4]
   185dc:	724b      	strb	r3, [r1, #9]
   185de:	4b0a      	ldr	r3, [pc, #40]	; (18608 <system_clock_init+0x144>)
	config->high_when_disabled = false;
   185e0:	704c      	strb	r4, [r1, #1]
	config->run_in_standby     = false;
   185e2:	720c      	strb	r4, [r1, #8]
   185e4:	700a      	strb	r2, [r1, #0]
   185e6:	4798      	blx	r3
   185e8:	0020      	movs	r0, r4
   185ea:	47b8      	blx	r7
#endif
}
   185ec:	b00d      	add	sp, #52	; 0x34
   185ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   185f0:	40000800 	.word	0x40000800
   185f4:	41004000 	.word	0x41004000
   185f8:	0001884d 	.word	0x0001884d
   185fc:	00018351 	.word	0x00018351
   18600:	00018435 	.word	0x00018435
   18604:	00018639 	.word	0x00018639
   18608:	00018659 	.word	0x00018659
   1860c:	000186fd 	.word	0x000186fd
   18610:	000187c5 	.word	0x000187c5
   18614:	02dc6c00 	.word	0x02dc6c00
   18618:	000f4240 	.word	0x000f4240
   1861c:	0001838d 	.word	0x0001838d
   18620:	40000850 	.word	0x40000850
   18624:	40000844 	.word	0x40000844
   18628:	40000400 	.word	0x40000400

0001862c <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1862c:	4b01      	ldr	r3, [pc, #4]	; (18634 <system_gclk_is_syncing+0x8>)
   1862e:	7858      	ldrb	r0, [r3, #1]
   18630:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
   18632:	4770      	bx	lr
   18634:	40000c00 	.word	0x40000c00

00018638 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   18638:	2308      	movs	r3, #8
   1863a:	4a05      	ldr	r2, [pc, #20]	; (18650 <system_gclk_init+0x18>)
   1863c:	6991      	ldr	r1, [r2, #24]
   1863e:	430b      	orrs	r3, r1
   18640:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   18642:	2301      	movs	r3, #1
   18644:	4a03      	ldr	r2, [pc, #12]	; (18654 <system_gclk_init+0x1c>)
   18646:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   18648:	7811      	ldrb	r1, [r2, #0]
   1864a:	4219      	tst	r1, r3
   1864c:	d1fc      	bne.n	18648 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
   1864e:	4770      	bx	lr
   18650:	40000400 	.word	0x40000400
   18654:	40000c00 	.word	0x40000c00

00018658 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   18658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1865a:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1865c:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1865e:	0224      	lsls	r4, r4, #8
{
   18660:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   18662:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   18664:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
   18666:	2b00      	cmp	r3, #0
   18668:	d002      	beq.n	18670 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1866a:	2380      	movs	r3, #128	; 0x80
   1866c:	02db      	lsls	r3, r3, #11
   1866e:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   18670:	7a4b      	ldrb	r3, [r1, #9]
   18672:	2b00      	cmp	r3, #0
   18674:	d002      	beq.n	1867c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   18676:	2380      	movs	r3, #128	; 0x80
   18678:	031b      	lsls	r3, r3, #12
   1867a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1867c:	684b      	ldr	r3, [r1, #4]
   1867e:	2b01      	cmp	r3, #1
   18680:	d912      	bls.n	186a8 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   18682:	1e5d      	subs	r5, r3, #1
   18684:	401d      	ands	r5, r3
   18686:	2202      	movs	r2, #2
   18688:	2d00      	cmp	r5, #0
   1868a:	d006      	beq.n	1869a <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1868c:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1868e:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
   18690:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   18692:	029b      	lsls	r3, r3, #10
   18694:	e007      	b.n	186a6 <system_gclk_gen_set_config+0x4e>
				div2_count++;
   18696:	3501      	adds	r5, #1
						mask <<= 1) {
   18698:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   1869a:	429a      	cmp	r2, r3
   1869c:	d3fb      	bcc.n	18696 <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1869e:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   186a0:	022d      	lsls	r5, r5, #8
   186a2:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   186a4:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   186a6:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   186a8:	7a0b      	ldrb	r3, [r1, #8]
   186aa:	2b00      	cmp	r3, #0
   186ac:	d002      	beq.n	186b4 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   186ae:	2380      	movs	r3, #128	; 0x80
   186b0:	039b      	lsls	r3, r3, #14
   186b2:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
   186b4:	4f0c      	ldr	r7, [pc, #48]	; (186e8 <system_gclk_gen_set_config+0x90>)
   186b6:	47b8      	blx	r7
   186b8:	2800      	cmp	r0, #0
   186ba:	d1fb      	bne.n	186b4 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
   186bc:	4b0b      	ldr	r3, [pc, #44]	; (186ec <system_gclk_gen_set_config+0x94>)
   186be:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   186c0:	4b0b      	ldr	r3, [pc, #44]	; (186f0 <system_gclk_gen_set_config+0x98>)
   186c2:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   186c4:	47b8      	blx	r7
   186c6:	2800      	cmp	r0, #0
   186c8:	d1fc      	bne.n	186c4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   186ca:	4b0a      	ldr	r3, [pc, #40]	; (186f4 <system_gclk_gen_set_config+0x9c>)
   186cc:	609d      	str	r5, [r3, #8]
   186ce:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
   186d0:	47b8      	blx	r7
   186d2:	2800      	cmp	r0, #0
   186d4:	d1fc      	bne.n	186d0 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   186d6:	2280      	movs	r2, #128	; 0x80
   186d8:	686b      	ldr	r3, [r5, #4]
   186da:	0252      	lsls	r2, r2, #9
   186dc:	4013      	ands	r3, r2
   186de:	431c      	orrs	r4, r3
   186e0:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
   186e2:	4b05      	ldr	r3, [pc, #20]	; (186f8 <system_gclk_gen_set_config+0xa0>)
   186e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   186e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   186e8:	0001862d 	.word	0x0001862d
   186ec:	000177cd 	.word	0x000177cd
   186f0:	40000c08 	.word	0x40000c08
   186f4:	40000c00 	.word	0x40000c00
   186f8:	00017801 	.word	0x00017801

000186fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   186fc:	b570      	push	{r4, r5, r6, lr}
   186fe:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
   18700:	4c09      	ldr	r4, [pc, #36]	; (18728 <system_gclk_gen_enable+0x2c>)
   18702:	47a0      	blx	r4
   18704:	2800      	cmp	r0, #0
   18706:	d1fb      	bne.n	18700 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
   18708:	4b08      	ldr	r3, [pc, #32]	; (1872c <system_gclk_gen_enable+0x30>)
   1870a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1870c:	4b08      	ldr	r3, [pc, #32]	; (18730 <system_gclk_gen_enable+0x34>)
   1870e:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
   18710:	47a0      	blx	r4
   18712:	2800      	cmp	r0, #0
   18714:	d1fc      	bne.n	18710 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   18716:	2380      	movs	r3, #128	; 0x80
   18718:	4a06      	ldr	r2, [pc, #24]	; (18734 <system_gclk_gen_enable+0x38>)
   1871a:	025b      	lsls	r3, r3, #9
   1871c:	6851      	ldr	r1, [r2, #4]
   1871e:	430b      	orrs	r3, r1
   18720:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   18722:	4b05      	ldr	r3, [pc, #20]	; (18738 <system_gclk_gen_enable+0x3c>)
   18724:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   18726:	bd70      	pop	{r4, r5, r6, pc}
   18728:	0001862d 	.word	0x0001862d
   1872c:	000177cd 	.word	0x000177cd
   18730:	40000c04 	.word	0x40000c04
   18734:	40000c00 	.word	0x40000c00
   18738:	00017801 	.word	0x00017801

0001873c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   1873c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1873e:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
   18740:	4e18      	ldr	r6, [pc, #96]	; (187a4 <system_gclk_gen_get_hz+0x68>)
   18742:	47b0      	blx	r6
   18744:	2800      	cmp	r0, #0
   18746:	d1fb      	bne.n	18740 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
   18748:	4b17      	ldr	r3, [pc, #92]	; (187a8 <system_gclk_gen_get_hz+0x6c>)
   1874a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1874c:	4b17      	ldr	r3, [pc, #92]	; (187ac <system_gclk_gen_get_hz+0x70>)
   1874e:	701f      	strb	r7, [r3, #0]
   18750:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
   18752:	47b0      	blx	r6
   18754:	2800      	cmp	r0, #0
   18756:	d1fc      	bne.n	18752 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   18758:	4d15      	ldr	r5, [pc, #84]	; (187b0 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1875a:	4b16      	ldr	r3, [pc, #88]	; (187b4 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   1875c:	6868      	ldr	r0, [r5, #4]
   1875e:	04c0      	lsls	r0, r0, #19
   18760:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   18762:	4798      	blx	r3
   18764:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   18766:	9b01      	ldr	r3, [sp, #4]
   18768:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1876a:	686b      	ldr	r3, [r5, #4]
   1876c:	02db      	lsls	r3, r3, #11
   1876e:	0fdb      	lsrs	r3, r3, #31
   18770:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   18772:	4b11      	ldr	r3, [pc, #68]	; (187b8 <system_gclk_gen_get_hz+0x7c>)
   18774:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
   18776:	47b0      	blx	r6
   18778:	2800      	cmp	r0, #0
   1877a:	d1fc      	bne.n	18776 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1877c:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
   1877e:	4b0f      	ldr	r3, [pc, #60]	; (187bc <system_gclk_gen_get_hz+0x80>)
   18780:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   18782:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
   18784:	022d      	lsls	r5, r5, #8
   18786:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
   18788:	2b00      	cmp	r3, #0
   1878a:	d108      	bne.n	1879e <system_gclk_gen_get_hz+0x62>
   1878c:	2d01      	cmp	r5, #1
   1878e:	d904      	bls.n	1879a <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
   18790:	0020      	movs	r0, r4
   18792:	0029      	movs	r1, r5
   18794:	4b0a      	ldr	r3, [pc, #40]	; (187c0 <system_gclk_gen_get_hz+0x84>)
   18796:	4798      	blx	r3
   18798:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
   1879a:	0020      	movs	r0, r4
   1879c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
   1879e:	3501      	adds	r5, #1
   187a0:	40ec      	lsrs	r4, r5
	return gen_input_hz;
   187a2:	e7fa      	b.n	1879a <system_gclk_gen_get_hz+0x5e>
   187a4:	0001862d 	.word	0x0001862d
   187a8:	000177cd 	.word	0x000177cd
   187ac:	40000c04 	.word	0x40000c04
   187b0:	40000c00 	.word	0x40000c00
   187b4:	000182c1 	.word	0x000182c1
   187b8:	40000c08 	.word	0x40000c08
   187bc:	00017801 	.word	0x00017801
   187c0:	00018e25 	.word	0x00018e25

000187c4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   187c4:	b510      	push	{r4, lr}
   187c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   187c8:	4b06      	ldr	r3, [pc, #24]	; (187e4 <system_gclk_chan_enable+0x20>)
   187ca:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   187cc:	4b06      	ldr	r3, [pc, #24]	; (187e8 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   187ce:	4a07      	ldr	r2, [pc, #28]	; (187ec <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   187d0:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   187d2:	2380      	movs	r3, #128	; 0x80
   187d4:	8851      	ldrh	r1, [r2, #2]
   187d6:	01db      	lsls	r3, r3, #7
   187d8:	430b      	orrs	r3, r1
   187da:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   187dc:	4b04      	ldr	r3, [pc, #16]	; (187f0 <system_gclk_chan_enable+0x2c>)
   187de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   187e0:	bd10      	pop	{r4, pc}
   187e2:	46c0      	nop			; (mov r8, r8)
   187e4:	000177cd 	.word	0x000177cd
   187e8:	40000c02 	.word	0x40000c02
   187ec:	40000c00 	.word	0x40000c00
   187f0:	00017801 	.word	0x00017801

000187f4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   187f4:	b510      	push	{r4, lr}
   187f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   187f8:	4b0e      	ldr	r3, [pc, #56]	; (18834 <system_gclk_chan_disable+0x40>)
   187fa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   187fc:	4b0e      	ldr	r3, [pc, #56]	; (18838 <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
   187fe:	4a0f      	ldr	r2, [pc, #60]	; (1883c <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   18800:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   18802:	4b0f      	ldr	r3, [pc, #60]	; (18840 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   18804:	4c0f      	ldr	r4, [pc, #60]	; (18844 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   18806:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
   18808:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1880a:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
   1880c:	4011      	ands	r1, r2
   1880e:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   18810:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   18812:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   18814:	4021      	ands	r1, r4
   18816:	8059      	strh	r1, [r3, #2]
   18818:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1881a:	2280      	movs	r2, #128	; 0x80
   1881c:	01d2      	lsls	r2, r2, #7
   1881e:	885c      	ldrh	r4, [r3, #2]
   18820:	4214      	tst	r4, r2
   18822:	d1fc      	bne.n	1881e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   18824:	885a      	ldrh	r2, [r3, #2]
   18826:	0200      	lsls	r0, r0, #8
   18828:	400a      	ands	r2, r1
   1882a:	4302      	orrs	r2, r0
   1882c:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
   1882e:	4b06      	ldr	r3, [pc, #24]	; (18848 <system_gclk_chan_disable+0x54>)
   18830:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   18832:	bd10      	pop	{r4, pc}
   18834:	000177cd 	.word	0x000177cd
   18838:	40000c02 	.word	0x40000c02
   1883c:	fffff0ff 	.word	0xfffff0ff
   18840:	40000c00 	.word	0x40000c00
   18844:	ffffbfff 	.word	0xffffbfff
   18848:	00017801 	.word	0x00017801

0001884c <system_gclk_chan_set_config>:
{
   1884c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1884e:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
   18850:	4b03      	ldr	r3, [pc, #12]	; (18860 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   18852:	0224      	lsls	r4, r4, #8
   18854:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   18856:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   18858:	4b02      	ldr	r3, [pc, #8]	; (18864 <system_gclk_chan_set_config+0x18>)
   1885a:	b2a4      	uxth	r4, r4
   1885c:	805c      	strh	r4, [r3, #2]
}
   1885e:	bd10      	pop	{r4, pc}
   18860:	000187f5 	.word	0x000187f5
   18864:	40000c00 	.word	0x40000c00

00018868 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   18868:	b510      	push	{r4, lr}
   1886a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   1886c:	4b06      	ldr	r3, [pc, #24]	; (18888 <system_gclk_chan_get_hz+0x20>)
   1886e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   18870:	4b06      	ldr	r3, [pc, #24]	; (1888c <system_gclk_chan_get_hz+0x24>)
   18872:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   18874:	4b06      	ldr	r3, [pc, #24]	; (18890 <system_gclk_chan_get_hz+0x28>)
   18876:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
   18878:	4b06      	ldr	r3, [pc, #24]	; (18894 <system_gclk_chan_get_hz+0x2c>)
   1887a:	0524      	lsls	r4, r4, #20
   1887c:	0f24      	lsrs	r4, r4, #28
   1887e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   18880:	0020      	movs	r0, r4
   18882:	4b05      	ldr	r3, [pc, #20]	; (18898 <system_gclk_chan_get_hz+0x30>)
   18884:	4798      	blx	r3
}
   18886:	bd10      	pop	{r4, pc}
   18888:	000177cd 	.word	0x000177cd
   1888c:	40000c02 	.word	0x40000c02
   18890:	40000c00 	.word	0x40000c00
   18894:	00017801 	.word	0x00017801
   18898:	0001873d 	.word	0x0001873d

0001889c <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   1889c:	2800      	cmp	r0, #0
   1889e:	db08      	blt.n	188b2 <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
   188a0:	2301      	movs	r3, #1
   188a2:	22c0      	movs	r2, #192	; 0xc0
   188a4:	4083      	lsls	r3, r0
   188a6:	4907      	ldr	r1, [pc, #28]	; (188c4 <system_interrupt_clear_pending+0x28>)
   188a8:	0052      	lsls	r2, r2, #1
   188aa:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
   188ac:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
   188ae:	0018      	movs	r0, r3
   188b0:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
   188b2:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   188b4:	1c42      	adds	r2, r0, #1
   188b6:	d1fa      	bne.n	188ae <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   188b8:	2280      	movs	r2, #128	; 0x80
   188ba:	4b03      	ldr	r3, [pc, #12]	; (188c8 <system_interrupt_clear_pending+0x2c>)
   188bc:	0492      	lsls	r2, r2, #18
   188be:	605a      	str	r2, [r3, #4]
   188c0:	e7f4      	b.n	188ac <system_interrupt_clear_pending+0x10>
   188c2:	46c0      	nop			; (mov r8, r8)
   188c4:	e000e100 	.word	0xe000e100
   188c8:	e000ed00 	.word	0xe000ed00

000188cc <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   188cc:	78d3      	ldrb	r3, [r2, #3]
{
   188ce:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
   188d0:	2b00      	cmp	r3, #0
   188d2:	d135      	bne.n	18940 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   188d4:	7814      	ldrb	r4, [r2, #0]
   188d6:	2c80      	cmp	r4, #128	; 0x80
   188d8:	d003      	beq.n	188e2 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   188da:	2380      	movs	r3, #128	; 0x80
   188dc:	0624      	lsls	r4, r4, #24
   188de:	025b      	lsls	r3, r3, #9
   188e0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   188e2:	2502      	movs	r5, #2
   188e4:	7854      	ldrb	r4, [r2, #1]
   188e6:	43ac      	bics	r4, r5
   188e8:	d106      	bne.n	188f8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   188ea:	7894      	ldrb	r4, [r2, #2]
   188ec:	2c00      	cmp	r4, #0
   188ee:	d124      	bne.n	1893a <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
   188f0:	2480      	movs	r4, #128	; 0x80
   188f2:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   188f4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   188f6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   188f8:	7854      	ldrb	r4, [r2, #1]
   188fa:	3c01      	subs	r4, #1
   188fc:	2c01      	cmp	r4, #1
   188fe:	d801      	bhi.n	18904 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   18900:	4c12      	ldr	r4, [pc, #72]	; (1894c <_system_pinmux_config+0x80>)
   18902:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   18904:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   18906:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   18908:	05e4      	lsls	r4, r4, #23
   1890a:	432c      	orrs	r4, r5
   1890c:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1890e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   18910:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
   18912:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   18914:	0624      	lsls	r4, r4, #24
   18916:	432c      	orrs	r4, r5
   18918:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1891a:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1891c:	78d4      	ldrb	r4, [r2, #3]
   1891e:	2c00      	cmp	r4, #0
   18920:	d10a      	bne.n	18938 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   18922:	035b      	lsls	r3, r3, #13
   18924:	d503      	bpl.n	1892e <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   18926:	7893      	ldrb	r3, [r2, #2]
   18928:	2b01      	cmp	r3, #1
   1892a:	d10c      	bne.n	18946 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
   1892c:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1892e:	7853      	ldrb	r3, [r2, #1]
   18930:	3b01      	subs	r3, #1
   18932:	2b01      	cmp	r3, #1
   18934:	d800      	bhi.n	18938 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   18936:	6081      	str	r1, [r0, #8]
		}
	}
}
   18938:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1893a:	24c0      	movs	r4, #192	; 0xc0
   1893c:	02e4      	lsls	r4, r4, #11
   1893e:	e7d9      	b.n	188f4 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
   18940:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
   18942:	2300      	movs	r3, #0
   18944:	e7de      	b.n	18904 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
   18946:	6141      	str	r1, [r0, #20]
   18948:	e7f1      	b.n	1892e <_system_pinmux_config+0x62>
   1894a:	46c0      	nop			; (mov r8, r8)
   1894c:	fffbffff 	.word	0xfffbffff

00018950 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   18950:	b510      	push	{r4, lr}
   18952:	0003      	movs	r3, r0
   18954:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
   18956:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
   18958:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
   1895a:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
   1895c:	4281      	cmp	r1, r0
   1895e:	d102      	bne.n	18966 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   18960:	4904      	ldr	r1, [pc, #16]	; (18974 <system_pinmux_pin_set_config+0x24>)
   18962:	01e0      	lsls	r0, r4, #7
   18964:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   18966:	211f      	movs	r1, #31
   18968:	400b      	ands	r3, r1
   1896a:	391e      	subs	r1, #30
   1896c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
   1896e:	4b02      	ldr	r3, [pc, #8]	; (18978 <system_pinmux_pin_set_config+0x28>)
   18970:	4798      	blx	r3
}
   18972:	bd10      	pop	{r4, pc}
   18974:	41004400 	.word	0x41004400
   18978:	000188cd 	.word	0x000188cd

0001897c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   1897c:	4770      	bx	lr
	...

00018980 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   18980:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   18982:	4b05      	ldr	r3, [pc, #20]	; (18998 <system_init+0x18>)
   18984:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   18986:	4b05      	ldr	r3, [pc, #20]	; (1899c <system_init+0x1c>)
   18988:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1898a:	4b05      	ldr	r3, [pc, #20]	; (189a0 <system_init+0x20>)
   1898c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1898e:	4b05      	ldr	r3, [pc, #20]	; (189a4 <system_init+0x24>)
   18990:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   18992:	4b05      	ldr	r3, [pc, #20]	; (189a8 <system_init+0x28>)
   18994:	4798      	blx	r3
}
   18996:	bd10      	pop	{r4, pc}
   18998:	000184c5 	.word	0x000184c5
   1899c:	00017831 	.word	0x00017831
   189a0:	00012341 	.word	0x00012341
   189a4:	000178ed 	.word	0x000178ed
   189a8:	0001897d 	.word	0x0001897d

000189ac <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   189ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   189ae:	2500      	movs	r5, #0
	struct tcc_module *module =
   189b0:	4b0b      	ldr	r3, [pc, #44]	; (189e0 <_tcc_interrupt_handler+0x34>)
   189b2:	0080      	lsls	r0, r0, #2
   189b4:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   189b6:	6823      	ldr	r3, [r4, #0]
   189b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
   189ba:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   189bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   189be:	4013      	ands	r3, r2
   189c0:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   189c2:	4b08      	ldr	r3, [pc, #32]	; (189e4 <_tcc_interrupt_handler+0x38>)
   189c4:	58ef      	ldr	r7, [r5, r3]
   189c6:	4237      	tst	r7, r6
   189c8:	d005      	beq.n	189d6 <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   189ca:	1963      	adds	r3, r4, r5
   189cc:	685b      	ldr	r3, [r3, #4]
   189ce:	0020      	movs	r0, r4
   189d0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   189d2:	6823      	ldr	r3, [r4, #0]
   189d4:	62df      	str	r7, [r3, #44]	; 0x2c
   189d6:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   189d8:	2d30      	cmp	r5, #48	; 0x30
   189da:	d1f2      	bne.n	189c2 <_tcc_interrupt_handler+0x16>
		}
	}
}
   189dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   189de:	46c0      	nop			; (mov r8, r8)
   189e0:	20004818 	.word	0x20004818
   189e4:	0001cf6c 	.word	0x0001cf6c

000189e8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   189e8:	b510      	push	{r4, lr}
   189ea:	2000      	movs	r0, #0
   189ec:	4b01      	ldr	r3, [pc, #4]	; (189f4 <TCC0_Handler+0xc>)
   189ee:	4798      	blx	r3
   189f0:	bd10      	pop	{r4, pc}
   189f2:	46c0      	nop			; (mov r8, r8)
   189f4:	000189ad 	.word	0x000189ad

000189f8 <TCC1_Handler>:
   189f8:	b510      	push	{r4, lr}
   189fa:	2001      	movs	r0, #1
   189fc:	4b01      	ldr	r3, [pc, #4]	; (18a04 <TCC1_Handler+0xc>)
   189fe:	4798      	blx	r3
   18a00:	bd10      	pop	{r4, pc}
   18a02:	46c0      	nop			; (mov r8, r8)
   18a04:	000189ad 	.word	0x000189ad

00018a08 <TCC2_Handler>:
   18a08:	b510      	push	{r4, lr}
   18a0a:	2002      	movs	r0, #2
   18a0c:	4b01      	ldr	r3, [pc, #4]	; (18a14 <TCC2_Handler+0xc>)
   18a0e:	4798      	blx	r3
   18a10:	bd10      	pop	{r4, pc}
   18a12:	46c0      	nop			; (mov r8, r8)
   18a14:	000189ad 	.word	0x000189ad

00018a18 <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
   18a18:	2004      	movs	r0, #4
   18a1a:	4671      	mov	r1, lr
   18a1c:	4208      	tst	r0, r1
   18a1e:	d002      	beq.n	18a26 <_MSP>
   18a20:	f3ef 8009 	mrs	r0, PSP
   18a24:	e001      	b.n	18a2a <_HALT>

00018a26 <_MSP>:
   18a26:	f3ef 8008 	mrs	r0, MSP

00018a2a <_HALT>:
   18a2a:	6941      	ldr	r1, [r0, #20]
   18a2c:	e060      	b.n	18af0 <HardFault_HandlerC>
   18a2e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   18a30:	4770      	bx	lr
	...

00018a34 <Reset_Handler>:
        if (pSrc != pDest) {
   18a34:	4821      	ldr	r0, [pc, #132]	; (18abc <Reset_Handler+0x88>)
   18a36:	4922      	ldr	r1, [pc, #136]	; (18ac0 <Reset_Handler+0x8c>)
{
   18a38:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
   18a3a:	4288      	cmp	r0, r1
   18a3c:	d004      	beq.n	18a48 <Reset_Handler+0x14>
   18a3e:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
   18a40:	4c20      	ldr	r4, [pc, #128]	; (18ac4 <Reset_Handler+0x90>)
   18a42:	18ca      	adds	r2, r1, r3
   18a44:	42a2      	cmp	r2, r4
   18a46:	d332      	bcc.n	18aae <Reset_Handler+0x7a>
                *pDest++ = 0;
   18a48:	2100      	movs	r1, #0
   18a4a:	4b1f      	ldr	r3, [pc, #124]	; (18ac8 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
   18a4c:	4a1f      	ldr	r2, [pc, #124]	; (18acc <Reset_Handler+0x98>)
   18a4e:	4293      	cmp	r3, r2
   18a50:	d331      	bcc.n	18ab6 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   18a52:	21ff      	movs	r1, #255	; 0xff
   18a54:	4b1e      	ldr	r3, [pc, #120]	; (18ad0 <Reset_Handler+0x9c>)
   18a56:	4a1f      	ldr	r2, [pc, #124]	; (18ad4 <Reset_Handler+0xa0>)
   18a58:	438b      	bics	r3, r1
   18a5a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   18a5c:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   18a5e:	250c      	movs	r5, #12
   18a60:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
   18a62:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   18a64:	4b1c      	ldr	r3, [pc, #112]	; (18ad8 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   18a66:	481d      	ldr	r0, [pc, #116]	; (18adc <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   18a68:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   18a6a:	78c3      	ldrb	r3, [r0, #3]
   18a6c:	39fc      	subs	r1, #252	; 0xfc
   18a6e:	438b      	bics	r3, r1
   18a70:	4313      	orrs	r3, r2
   18a72:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   18a74:	78c3      	ldrb	r3, [r0, #3]
   18a76:	43ab      	bics	r3, r5
   18a78:	4323      	orrs	r3, r4
   18a7a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   18a7c:	4b18      	ldr	r3, [pc, #96]	; (18ae0 <Reset_Handler+0xac>)
   18a7e:	7b98      	ldrb	r0, [r3, #14]
   18a80:	43b0      	bics	r0, r6
   18a82:	0006      	movs	r6, r0
   18a84:	2020      	movs	r0, #32
   18a86:	4330      	orrs	r0, r6
   18a88:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   18a8a:	7b98      	ldrb	r0, [r3, #14]
   18a8c:	43a8      	bics	r0, r5
   18a8e:	4304      	orrs	r4, r0
   18a90:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   18a92:	7b98      	ldrb	r0, [r3, #14]
   18a94:	4388      	bics	r0, r1
   18a96:	4302      	orrs	r2, r0
   18a98:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   18a9a:	2380      	movs	r3, #128	; 0x80
   18a9c:	4a11      	ldr	r2, [pc, #68]	; (18ae4 <Reset_Handler+0xb0>)
   18a9e:	6851      	ldr	r1, [r2, #4]
   18aa0:	430b      	orrs	r3, r1
   18aa2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   18aa4:	4b10      	ldr	r3, [pc, #64]	; (18ae8 <Reset_Handler+0xb4>)
   18aa6:	4798      	blx	r3
        main();
   18aa8:	4b10      	ldr	r3, [pc, #64]	; (18aec <Reset_Handler+0xb8>)
   18aaa:	4798      	blx	r3
   18aac:	e7fe      	b.n	18aac <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
   18aae:	58c5      	ldr	r5, [r0, r3]
   18ab0:	3304      	adds	r3, #4
   18ab2:	6015      	str	r5, [r2, #0]
   18ab4:	e7c5      	b.n	18a42 <Reset_Handler+0xe>
                *pDest++ = 0;
   18ab6:	c302      	stmia	r3!, {r1}
   18ab8:	e7c9      	b.n	18a4e <Reset_Handler+0x1a>
   18aba:	46c0      	nop			; (mov r8, r8)
   18abc:	0001d3d8 	.word	0x0001d3d8
   18ac0:	20000000 	.word	0x20000000
   18ac4:	2000023c 	.word	0x2000023c
   18ac8:	20000240 	.word	0x20000240
   18acc:	20004868 	.word	0x20004868
   18ad0:	00012000 	.word	0x00012000
   18ad4:	e000ed00 	.word	0xe000ed00
   18ad8:	410070fc 	.word	0x410070fc
   18adc:	41005000 	.word	0x41005000
   18ae0:	41004800 	.word	0x41004800
   18ae4:	41004000 	.word	0x41004000
   18ae8:	0001b47d 	.word	0x0001b47d
   18aec:	00018b75 	.word	0x00018b75

00018af0 <HardFault_HandlerC>:
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   18af0:	6803      	ldr	r3, [r0, #0]
void HardFault_HandlerC(unsigned long *hardfault_args) {
   18af2:	b08e      	sub	sp, #56	; 0x38
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   18af4:	9300      	str	r3, [sp, #0]
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   18af6:	6843      	ldr	r3, [r0, #4]
   18af8:	9301      	str	r3, [sp, #4]
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   18afa:	6883      	ldr	r3, [r0, #8]
   18afc:	9302      	str	r3, [sp, #8]
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   18afe:	68c3      	ldr	r3, [r0, #12]
   18b00:	9303      	str	r3, [sp, #12]
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   18b02:	6903      	ldr	r3, [r0, #16]
   18b04:	9304      	str	r3, [sp, #16]
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   18b06:	6943      	ldr	r3, [r0, #20]
   18b08:	9305      	str	r3, [sp, #20]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   18b0a:	6983      	ldr	r3, [r0, #24]
   18b0c:	9306      	str	r3, [sp, #24]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   18b0e:	69c3      	ldr	r3, [r0, #28]
   18b10:	9307      	str	r3, [sp, #28]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   18b12:	4b0a      	ldr	r3, [pc, #40]	; (18b3c <HardFault_HandlerC+0x4c>)
   18b14:	681b      	ldr	r3, [r3, #0]
   18b16:	9308      	str	r3, [sp, #32]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   18b18:	4b09      	ldr	r3, [pc, #36]	; (18b40 <HardFault_HandlerC+0x50>)
   18b1a:	681b      	ldr	r3, [r3, #0]
   18b1c:	9309      	str	r3, [sp, #36]	; 0x24
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   18b1e:	4b09      	ldr	r3, [pc, #36]	; (18b44 <HardFault_HandlerC+0x54>)
   18b20:	681b      	ldr	r3, [r3, #0]
   18b22:	930a      	str	r3, [sp, #40]	; 0x28
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   18b24:	4b08      	ldr	r3, [pc, #32]	; (18b48 <HardFault_HandlerC+0x58>)
   18b26:	681b      	ldr	r3, [r3, #0]
   18b28:	930b      	str	r3, [sp, #44]	; 0x2c
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   18b2a:	4b08      	ldr	r3, [pc, #32]	; (18b4c <HardFault_HandlerC+0x5c>)
   18b2c:	681b      	ldr	r3, [r3, #0]
   18b2e:	930d      	str	r3, [sp, #52]	; 0x34
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   18b30:	4b07      	ldr	r3, [pc, #28]	; (18b50 <HardFault_HandlerC+0x60>)
   18b32:	681b      	ldr	r3, [r3, #0]
   18b34:	930c      	str	r3, [sp, #48]	; 0x30
	
	__asm("BKPT #0\n") ; // Break into the debugger
   18b36:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   18b38:	b00e      	add	sp, #56	; 0x38
   18b3a:	4770      	bx	lr
   18b3c:	e000ed28 	.word	0xe000ed28
   18b40:	e000ed2c 	.word	0xe000ed2c
   18b44:	e000ed30 	.word	0xe000ed30
   18b48:	e000ed3c 	.word	0xe000ed3c
   18b4c:	e000ed34 	.word	0xe000ed34
   18b50:	e000ed38 	.word	0xe000ed38

00018b54 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   18b54:	4b05      	ldr	r3, [pc, #20]	; (18b6c <_sbrk+0x18>)
{
   18b56:	0002      	movs	r2, r0
	if (heap == NULL) {
   18b58:	6819      	ldr	r1, [r3, #0]
   18b5a:	2900      	cmp	r1, #0
   18b5c:	d101      	bne.n	18b62 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
   18b5e:	4904      	ldr	r1, [pc, #16]	; (18b70 <_sbrk+0x1c>)
   18b60:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
   18b62:	6818      	ldr	r0, [r3, #0]

	heap += incr;
   18b64:	1882      	adds	r2, r0, r2
   18b66:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
}
   18b68:	4770      	bx	lr
   18b6a:	46c0      	nop			; (mov r8, r8)
   18b6c:	20003550 	.word	0x20003550
   18b70:	20006868 	.word	0x20006868

00018b74 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   18b74:	b510      	push	{r4, lr}
    /* Initialize the board. */
    system_init();
   18b76:	4b05      	ldr	r3, [pc, #20]	; (18b8c <main+0x18>)
   18b78:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   18b7a:	4b05      	ldr	r3, [pc, #20]	; (18b90 <main+0x1c>)
   18b7c:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   18b7e:	2001      	movs	r0, #1
   18b80:	4b04      	ldr	r3, [pc, #16]	; (18b94 <main+0x20>)
   18b82:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   18b84:	4b04      	ldr	r3, [pc, #16]	; (18b98 <main+0x24>)
   18b86:	4798      	blx	r3

    return 0;  // Will not get here
}
   18b88:	2000      	movs	r0, #0
   18b8a:	bd10      	pop	{r4, pc}
   18b8c:	00018981 	.word	0x00018981
   18b90:	0001756d 	.word	0x0001756d
   18b94:	00014131 	.word	0x00014131
   18b98:	00016639 	.word	0x00016639

00018b9c <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   18b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   18b9e:	482c      	ldr	r0, [pc, #176]	; (18c50 <vApplicationDaemonTaskStartupHook+0xb4>)
   18ba0:	4c2c      	ldr	r4, [pc, #176]	; (18c54 <vApplicationDaemonTaskStartupHook+0xb8>)
   18ba2:	47a0      	blx	r4

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   18ba4:	482c      	ldr	r0, [pc, #176]	; (18c58 <vApplicationDaemonTaskStartupHook+0xbc>)
   18ba6:	47a0      	blx	r4
    if (I2cInitializeDriver() != STATUS_OK) {
   18ba8:	4b2c      	ldr	r3, [pc, #176]	; (18c5c <vApplicationDaemonTaskStartupHook+0xc0>)
   18baa:	4798      	blx	r3
   18bac:	2800      	cmp	r0, #0
   18bae:	d04c      	beq.n	18c4a <vApplicationDaemonTaskStartupHook+0xae>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   18bb0:	482b      	ldr	r0, [pc, #172]	; (18c60 <vApplicationDaemonTaskStartupHook+0xc4>)
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   18bb2:	47a0      	blx	r4

    //*******************************************************
    // LED Strip Initialization
    //*******************************************************
    #if(LED_Strip)
    if(InitLED() == 0){
   18bb4:	4b2b      	ldr	r3, [pc, #172]	; (18c64 <vApplicationDaemonTaskStartupHook+0xc8>)
   18bb6:	4798      	blx	r3
   18bb8:	2800      	cmp	r0, #0
   18bba:	d101      	bne.n	18bc0 <vApplicationDaemonTaskStartupHook+0x24>
        SerialConsoleWriteString("Initialized LED Strip!!!\r\n");
   18bbc:	482a      	ldr	r0, [pc, #168]	; (18c68 <vApplicationDaemonTaskStartupHook+0xcc>)
   18bbe:	47a0      	blx	r4
    //*******************************************************
    // IR Sensor Initialization
    //*******************************************************

    #if(IR_sensor)
    if(InitIRSensor() == 0){
   18bc0:	4b2a      	ldr	r3, [pc, #168]	; (18c6c <vApplicationDaemonTaskStartupHook+0xd0>)
   18bc2:	4798      	blx	r3
   18bc4:	2800      	cmp	r0, #0
   18bc6:	d101      	bne.n	18bcc <vApplicationDaemonTaskStartupHook+0x30>
        SerialConsoleWriteString("Initialized IR Sensor!!!\r\n");
   18bc8:	4829      	ldr	r0, [pc, #164]	; (18c70 <vApplicationDaemonTaskStartupHook+0xd4>)
   18bca:	47a0      	blx	r4
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   18bcc:	4e29      	ldr	r6, [pc, #164]	; (18c74 <vApplicationDaemonTaskStartupHook+0xd8>)
   18bce:	47b0      	blx	r6
   18bd0:	4d29      	ldr	r5, [pc, #164]	; (18c78 <vApplicationDaemonTaskStartupHook+0xdc>)
   18bd2:	0003      	movs	r3, r0
   18bd4:	4a29      	ldr	r2, [pc, #164]	; (18c7c <vApplicationDaemonTaskStartupHook+0xe0>)
   18bd6:	2140      	movs	r1, #64	; 0x40
   18bd8:	4f29      	ldr	r7, [pc, #164]	; (18c80 <vApplicationDaemonTaskStartupHook+0xe4>)
   18bda:	0028      	movs	r0, r5
   18bdc:	47b8      	blx	r7
    SerialConsoleWriteString(bufferPrint);
   18bde:	0028      	movs	r0, r5
   18be0:	47a0      	blx	r4

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   18be2:	4b28      	ldr	r3, [pc, #160]	; (18c84 <vApplicationDaemonTaskStartupHook+0xe8>)
   18be4:	22c8      	movs	r2, #200	; 0xc8
   18be6:	9301      	str	r3, [sp, #4]
   18be8:	2304      	movs	r3, #4
   18bea:	0052      	lsls	r2, r2, #1
   18bec:	9300      	str	r3, [sp, #0]
   18bee:	4926      	ldr	r1, [pc, #152]	; (18c88 <vApplicationDaemonTaskStartupHook+0xec>)
   18bf0:	2300      	movs	r3, #0
   18bf2:	4826      	ldr	r0, [pc, #152]	; (18c8c <vApplicationDaemonTaskStartupHook+0xf0>)
   18bf4:	4f26      	ldr	r7, [pc, #152]	; (18c90 <vApplicationDaemonTaskStartupHook+0xf4>)
   18bf6:	47b8      	blx	r7
   18bf8:	2801      	cmp	r0, #1
   18bfa:	d001      	beq.n	18c00 <vApplicationDaemonTaskStartupHook+0x64>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   18bfc:	4825      	ldr	r0, [pc, #148]	; (18c94 <vApplicationDaemonTaskStartupHook+0xf8>)
   18bfe:	47a0      	blx	r4
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   18c00:	47b0      	blx	r6
   18c02:	4a25      	ldr	r2, [pc, #148]	; (18c98 <vApplicationDaemonTaskStartupHook+0xfc>)
   18c04:	0003      	movs	r3, r0
   18c06:	2140      	movs	r1, #64	; 0x40
   18c08:	4f1d      	ldr	r7, [pc, #116]	; (18c80 <vApplicationDaemonTaskStartupHook+0xe4>)
   18c0a:	0028      	movs	r0, r5
   18c0c:	47b8      	blx	r7
    SerialConsoleWriteString(bufferPrint);
   18c0e:	0028      	movs	r0, r5
   18c10:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
    #endif

    #if(LED_TASK)
    // Create LED task from led_task.c
    if (xTaskCreate(LedTask, "LED_TASK", LED_TASK_SIZE, NULL, LED_PRIORITY, &LEDTaskHandle) != pdPASS) {
   18c12:	4b22      	ldr	r3, [pc, #136]	; (18c9c <vApplicationDaemonTaskStartupHook+0x100>)
   18c14:	22fa      	movs	r2, #250	; 0xfa
   18c16:	9301      	str	r3, [sp, #4]
   18c18:	2302      	movs	r3, #2
   18c1a:	0052      	lsls	r2, r2, #1
   18c1c:	9300      	str	r3, [sp, #0]
   18c1e:	4920      	ldr	r1, [pc, #128]	; (18ca0 <vApplicationDaemonTaskStartupHook+0x104>)
   18c20:	2300      	movs	r3, #0
   18c22:	4820      	ldr	r0, [pc, #128]	; (18ca4 <vApplicationDaemonTaskStartupHook+0x108>)
   18c24:	4f1a      	ldr	r7, [pc, #104]	; (18c90 <vApplicationDaemonTaskStartupHook+0xf4>)
   18c26:	47b8      	blx	r7
   18c28:	2801      	cmp	r0, #1
   18c2a:	d001      	beq.n	18c30 <vApplicationDaemonTaskStartupHook+0x94>
        SerialConsoleWriteString("ERR: LED task could not be initialized!\r\n");
   18c2c:	481e      	ldr	r0, [pc, #120]	; (18ca8 <vApplicationDaemonTaskStartupHook+0x10c>)
   18c2e:	47a0      	blx	r4
    }
    snprintf(bufferPrint, 64, "Heap after starting LED: %d\r\n", xPortGetFreeHeapSize());
   18c30:	47b0      	blx	r6
   18c32:	4a1e      	ldr	r2, [pc, #120]	; (18cac <vApplicationDaemonTaskStartupHook+0x110>)
   18c34:	0003      	movs	r3, r0
   18c36:	2140      	movs	r1, #64	; 0x40
   18c38:	0028      	movs	r0, r5
   18c3a:	4e11      	ldr	r6, [pc, #68]	; (18c80 <vApplicationDaemonTaskStartupHook+0xe4>)
   18c3c:	47b0      	blx	r6
    SerialConsoleWriteString(bufferPrint);
   18c3e:	0028      	movs	r0, r5
   18c40:	47a0      	blx	r4
    vTaskSuspend(daemonTaskHandle);
   18c42:	2000      	movs	r0, #0
   18c44:	4b1a      	ldr	r3, [pc, #104]	; (18cb0 <vApplicationDaemonTaskStartupHook+0x114>)
   18c46:	4798      	blx	r3
}
   18c48:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   18c4a:	481a      	ldr	r0, [pc, #104]	; (18cb4 <vApplicationDaemonTaskStartupHook+0x118>)
   18c4c:	e7b1      	b.n	18bb2 <vApplicationDaemonTaskStartupHook+0x16>
   18c4e:	46c0      	nop			; (mov r8, r8)
   18c50:	0001cf9c 	.word	0x0001cf9c
   18c54:	00017695 	.word	0x00017695
   18c58:	0001cfc0 	.word	0x0001cfc0
   18c5c:	00012e99 	.word	0x00012e99
   18c60:	0001cfd7 	.word	0x0001cfd7
   18c64:	00013605 	.word	0x00013605
   18c68:	0001d012 	.word	0x0001d012
   18c6c:	00013361 	.word	0x00013361
   18c70:	0001d02d 	.word	0x0001d02d
   18c74:	000152d5 	.word	0x000152d5
   18c78:	20004824 	.word	0x20004824
   18c7c:	0001d048 	.word	0x0001d048
   18c80:	0001b695 	.word	0x0001b695
   18c84:	20003558 	.word	0x20003558
   18c88:	0001d069 	.word	0x0001d069
   18c8c:	000129dd 	.word	0x000129dd
   18c90:	000163c1 	.word	0x000163c1
   18c94:	0001d072 	.word	0x0001d072
   18c98:	0001d09c 	.word	0x0001d09c
   18c9c:	20003554 	.word	0x20003554
   18ca0:	0001d0ba 	.word	0x0001d0ba
   18ca4:	0001367d 	.word	0x0001367d
   18ca8:	0001d0c3 	.word	0x0001d0c3
   18cac:	0001d0ed 	.word	0x0001d0ed
   18cb0:	00016a9d 	.word	0x00016a9d
   18cb4:	0001cff8 	.word	0x0001cff8

00018cb8 <vApplicationMallocFailedHook>:
    SerialConsoleWriteString(bufferPrint);
    #endif
}

void vApplicationMallocFailedHook(void)
{
   18cb8:	b510      	push	{r4, lr}
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   18cba:	4802      	ldr	r0, [pc, #8]	; (18cc4 <vApplicationMallocFailedHook+0xc>)
   18cbc:	4b02      	ldr	r3, [pc, #8]	; (18cc8 <vApplicationMallocFailedHook+0x10>)
   18cbe:	4798      	blx	r3
   18cc0:	e7fe      	b.n	18cc0 <vApplicationMallocFailedHook+0x8>
   18cc2:	46c0      	nop			; (mov r8, r8)
   18cc4:	0001d10b 	.word	0x0001d10b
   18cc8:	00017695 	.word	0x00017695

00018ccc <vApplicationStackOverflowHook>:
    while (1)
        ;
}

void vApplicationStackOverflowHook(void)
{
   18ccc:	b510      	push	{r4, lr}
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   18cce:	4802      	ldr	r0, [pc, #8]	; (18cd8 <vApplicationStackOverflowHook+0xc>)
   18cd0:	4b02      	ldr	r3, [pc, #8]	; (18cdc <vApplicationStackOverflowHook+0x10>)
   18cd2:	4798      	blx	r3
   18cd4:	e7fe      	b.n	18cd4 <vApplicationStackOverflowHook+0x8>
   18cd6:	46c0      	nop			; (mov r8, r8)
   18cd8:	0001d135 	.word	0x0001d135
   18cdc:	00017695 	.word	0x00017695

00018ce0 <floor>:
   18ce0:	4a45      	ldr	r2, [pc, #276]	; (18df8 <floor+0x118>)
   18ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ce4:	4657      	mov	r7, sl
   18ce6:	4692      	mov	sl, r2
   18ce8:	004b      	lsls	r3, r1, #1
   18cea:	0d5b      	lsrs	r3, r3, #21
   18cec:	449a      	add	sl, r3
   18cee:	464e      	mov	r6, r9
   18cf0:	4645      	mov	r5, r8
   18cf2:	46de      	mov	lr, fp
   18cf4:	4652      	mov	r2, sl
   18cf6:	b5e0      	push	{r5, r6, r7, lr}
   18cf8:	000c      	movs	r4, r1
   18cfa:	0005      	movs	r5, r0
   18cfc:	000e      	movs	r6, r1
   18cfe:	4689      	mov	r9, r1
   18d00:	0007      	movs	r7, r0
   18d02:	2a13      	cmp	r2, #19
   18d04:	dc22      	bgt.n	18d4c <floor+0x6c>
   18d06:	2a00      	cmp	r2, #0
   18d08:	db47      	blt.n	18d9a <floor+0xba>
   18d0a:	4652      	mov	r2, sl
   18d0c:	4b3b      	ldr	r3, [pc, #236]	; (18dfc <floor+0x11c>)
   18d0e:	4113      	asrs	r3, r2
   18d10:	4698      	mov	r8, r3
   18d12:	000b      	movs	r3, r1
   18d14:	4642      	mov	r2, r8
   18d16:	4013      	ands	r3, r2
   18d18:	4303      	orrs	r3, r0
   18d1a:	d011      	beq.n	18d40 <floor+0x60>
   18d1c:	4a38      	ldr	r2, [pc, #224]	; (18e00 <floor+0x120>)
   18d1e:	4b39      	ldr	r3, [pc, #228]	; (18e04 <floor+0x124>)
   18d20:	f000 fdb4 	bl	1988c <__aeabi_dadd>
   18d24:	2200      	movs	r2, #0
   18d26:	2300      	movs	r3, #0
   18d28:	f000 fa28 	bl	1917c <__aeabi_dcmpgt>
   18d2c:	2800      	cmp	r0, #0
   18d2e:	d005      	beq.n	18d3c <floor+0x5c>
   18d30:	2c00      	cmp	r4, #0
   18d32:	db41      	blt.n	18db8 <floor+0xd8>
   18d34:	464e      	mov	r6, r9
   18d36:	4643      	mov	r3, r8
   18d38:	2700      	movs	r7, #0
   18d3a:	439e      	bics	r6, r3
   18d3c:	0038      	movs	r0, r7
   18d3e:	0031      	movs	r1, r6
   18d40:	bc3c      	pop	{r2, r3, r4, r5}
   18d42:	4690      	mov	r8, r2
   18d44:	4699      	mov	r9, r3
   18d46:	46a2      	mov	sl, r4
   18d48:	46ab      	mov	fp, r5
   18d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d4c:	4652      	mov	r2, sl
   18d4e:	2a33      	cmp	r2, #51	; 0x33
   18d50:	dd08      	ble.n	18d64 <floor+0x84>
   18d52:	2380      	movs	r3, #128	; 0x80
   18d54:	00db      	lsls	r3, r3, #3
   18d56:	459a      	cmp	sl, r3
   18d58:	d1f2      	bne.n	18d40 <floor+0x60>
   18d5a:	0002      	movs	r2, r0
   18d5c:	000b      	movs	r3, r1
   18d5e:	f000 fd95 	bl	1988c <__aeabi_dadd>
   18d62:	e7ed      	b.n	18d40 <floor+0x60>
   18d64:	4a28      	ldr	r2, [pc, #160]	; (18e08 <floor+0x128>)
   18d66:	4694      	mov	ip, r2
   18d68:	2201      	movs	r2, #1
   18d6a:	4463      	add	r3, ip
   18d6c:	4252      	negs	r2, r2
   18d6e:	40da      	lsrs	r2, r3
   18d70:	4693      	mov	fp, r2
   18d72:	4202      	tst	r2, r0
   18d74:	d0e4      	beq.n	18d40 <floor+0x60>
   18d76:	4a22      	ldr	r2, [pc, #136]	; (18e00 <floor+0x120>)
   18d78:	4b22      	ldr	r3, [pc, #136]	; (18e04 <floor+0x124>)
   18d7a:	f000 fd87 	bl	1988c <__aeabi_dadd>
   18d7e:	2200      	movs	r2, #0
   18d80:	2300      	movs	r3, #0
   18d82:	f000 f9fb 	bl	1917c <__aeabi_dcmpgt>
   18d86:	2800      	cmp	r0, #0
   18d88:	d0d8      	beq.n	18d3c <floor+0x5c>
   18d8a:	2c00      	cmp	r4, #0
   18d8c:	db1a      	blt.n	18dc4 <floor+0xe4>
   18d8e:	465b      	mov	r3, fp
   18d90:	464e      	mov	r6, r9
   18d92:	439f      	bics	r7, r3
   18d94:	0038      	movs	r0, r7
   18d96:	0031      	movs	r1, r6
   18d98:	e7d2      	b.n	18d40 <floor+0x60>
   18d9a:	4a19      	ldr	r2, [pc, #100]	; (18e00 <floor+0x120>)
   18d9c:	4b19      	ldr	r3, [pc, #100]	; (18e04 <floor+0x124>)
   18d9e:	f000 fd75 	bl	1988c <__aeabi_dadd>
   18da2:	2200      	movs	r2, #0
   18da4:	2300      	movs	r3, #0
   18da6:	f000 f9e9 	bl	1917c <__aeabi_dcmpgt>
   18daa:	2800      	cmp	r0, #0
   18dac:	d0c6      	beq.n	18d3c <floor+0x5c>
   18dae:	2c00      	cmp	r4, #0
   18db0:	db16      	blt.n	18de0 <floor+0x100>
   18db2:	2700      	movs	r7, #0
   18db4:	2600      	movs	r6, #0
   18db6:	e7c1      	b.n	18d3c <floor+0x5c>
   18db8:	2380      	movs	r3, #128	; 0x80
   18dba:	4652      	mov	r2, sl
   18dbc:	035b      	lsls	r3, r3, #13
   18dbe:	4113      	asrs	r3, r2
   18dc0:	4499      	add	r9, r3
   18dc2:	e7b7      	b.n	18d34 <floor+0x54>
   18dc4:	4653      	mov	r3, sl
   18dc6:	2b14      	cmp	r3, #20
   18dc8:	d012      	beq.n	18df0 <floor+0x110>
   18dca:	2334      	movs	r3, #52	; 0x34
   18dcc:	4652      	mov	r2, sl
   18dce:	2701      	movs	r7, #1
   18dd0:	1a9b      	subs	r3, r3, r2
   18dd2:	409f      	lsls	r7, r3
   18dd4:	197f      	adds	r7, r7, r5
   18dd6:	42af      	cmp	r7, r5
   18dd8:	419b      	sbcs	r3, r3
   18dda:	425b      	negs	r3, r3
   18ddc:	4499      	add	r9, r3
   18dde:	e7d6      	b.n	18d8e <floor+0xae>
   18de0:	0064      	lsls	r4, r4, #1
   18de2:	0864      	lsrs	r4, r4, #1
   18de4:	4325      	orrs	r5, r4
   18de6:	2700      	movs	r7, #0
   18de8:	2d00      	cmp	r5, #0
   18dea:	d0a7      	beq.n	18d3c <floor+0x5c>
   18dec:	4e07      	ldr	r6, [pc, #28]	; (18e0c <floor+0x12c>)
   18dee:	e7a5      	b.n	18d3c <floor+0x5c>
   18df0:	3b13      	subs	r3, #19
   18df2:	469c      	mov	ip, r3
   18df4:	44e1      	add	r9, ip
   18df6:	e7ca      	b.n	18d8e <floor+0xae>
   18df8:	fffffc01 	.word	0xfffffc01
   18dfc:	000fffff 	.word	0x000fffff
   18e00:	8800759c 	.word	0x8800759c
   18e04:	7e37e43c 	.word	0x7e37e43c
   18e08:	fffffbed 	.word	0xfffffbed
   18e0c:	bff00000 	.word	0xbff00000

00018e10 <__gnu_thumb1_case_uqi>:
   18e10:	b402      	push	{r1}
   18e12:	4671      	mov	r1, lr
   18e14:	0849      	lsrs	r1, r1, #1
   18e16:	0049      	lsls	r1, r1, #1
   18e18:	5c09      	ldrb	r1, [r1, r0]
   18e1a:	0049      	lsls	r1, r1, #1
   18e1c:	448e      	add	lr, r1
   18e1e:	bc02      	pop	{r1}
   18e20:	4770      	bx	lr
   18e22:	46c0      	nop			; (mov r8, r8)

00018e24 <__udivsi3>:
   18e24:	2200      	movs	r2, #0
   18e26:	0843      	lsrs	r3, r0, #1
   18e28:	428b      	cmp	r3, r1
   18e2a:	d374      	bcc.n	18f16 <__udivsi3+0xf2>
   18e2c:	0903      	lsrs	r3, r0, #4
   18e2e:	428b      	cmp	r3, r1
   18e30:	d35f      	bcc.n	18ef2 <__udivsi3+0xce>
   18e32:	0a03      	lsrs	r3, r0, #8
   18e34:	428b      	cmp	r3, r1
   18e36:	d344      	bcc.n	18ec2 <__udivsi3+0x9e>
   18e38:	0b03      	lsrs	r3, r0, #12
   18e3a:	428b      	cmp	r3, r1
   18e3c:	d328      	bcc.n	18e90 <__udivsi3+0x6c>
   18e3e:	0c03      	lsrs	r3, r0, #16
   18e40:	428b      	cmp	r3, r1
   18e42:	d30d      	bcc.n	18e60 <__udivsi3+0x3c>
   18e44:	22ff      	movs	r2, #255	; 0xff
   18e46:	0209      	lsls	r1, r1, #8
   18e48:	ba12      	rev	r2, r2
   18e4a:	0c03      	lsrs	r3, r0, #16
   18e4c:	428b      	cmp	r3, r1
   18e4e:	d302      	bcc.n	18e56 <__udivsi3+0x32>
   18e50:	1212      	asrs	r2, r2, #8
   18e52:	0209      	lsls	r1, r1, #8
   18e54:	d065      	beq.n	18f22 <__udivsi3+0xfe>
   18e56:	0b03      	lsrs	r3, r0, #12
   18e58:	428b      	cmp	r3, r1
   18e5a:	d319      	bcc.n	18e90 <__udivsi3+0x6c>
   18e5c:	e000      	b.n	18e60 <__udivsi3+0x3c>
   18e5e:	0a09      	lsrs	r1, r1, #8
   18e60:	0bc3      	lsrs	r3, r0, #15
   18e62:	428b      	cmp	r3, r1
   18e64:	d301      	bcc.n	18e6a <__udivsi3+0x46>
   18e66:	03cb      	lsls	r3, r1, #15
   18e68:	1ac0      	subs	r0, r0, r3
   18e6a:	4152      	adcs	r2, r2
   18e6c:	0b83      	lsrs	r3, r0, #14
   18e6e:	428b      	cmp	r3, r1
   18e70:	d301      	bcc.n	18e76 <__udivsi3+0x52>
   18e72:	038b      	lsls	r3, r1, #14
   18e74:	1ac0      	subs	r0, r0, r3
   18e76:	4152      	adcs	r2, r2
   18e78:	0b43      	lsrs	r3, r0, #13
   18e7a:	428b      	cmp	r3, r1
   18e7c:	d301      	bcc.n	18e82 <__udivsi3+0x5e>
   18e7e:	034b      	lsls	r3, r1, #13
   18e80:	1ac0      	subs	r0, r0, r3
   18e82:	4152      	adcs	r2, r2
   18e84:	0b03      	lsrs	r3, r0, #12
   18e86:	428b      	cmp	r3, r1
   18e88:	d301      	bcc.n	18e8e <__udivsi3+0x6a>
   18e8a:	030b      	lsls	r3, r1, #12
   18e8c:	1ac0      	subs	r0, r0, r3
   18e8e:	4152      	adcs	r2, r2
   18e90:	0ac3      	lsrs	r3, r0, #11
   18e92:	428b      	cmp	r3, r1
   18e94:	d301      	bcc.n	18e9a <__udivsi3+0x76>
   18e96:	02cb      	lsls	r3, r1, #11
   18e98:	1ac0      	subs	r0, r0, r3
   18e9a:	4152      	adcs	r2, r2
   18e9c:	0a83      	lsrs	r3, r0, #10
   18e9e:	428b      	cmp	r3, r1
   18ea0:	d301      	bcc.n	18ea6 <__udivsi3+0x82>
   18ea2:	028b      	lsls	r3, r1, #10
   18ea4:	1ac0      	subs	r0, r0, r3
   18ea6:	4152      	adcs	r2, r2
   18ea8:	0a43      	lsrs	r3, r0, #9
   18eaa:	428b      	cmp	r3, r1
   18eac:	d301      	bcc.n	18eb2 <__udivsi3+0x8e>
   18eae:	024b      	lsls	r3, r1, #9
   18eb0:	1ac0      	subs	r0, r0, r3
   18eb2:	4152      	adcs	r2, r2
   18eb4:	0a03      	lsrs	r3, r0, #8
   18eb6:	428b      	cmp	r3, r1
   18eb8:	d301      	bcc.n	18ebe <__udivsi3+0x9a>
   18eba:	020b      	lsls	r3, r1, #8
   18ebc:	1ac0      	subs	r0, r0, r3
   18ebe:	4152      	adcs	r2, r2
   18ec0:	d2cd      	bcs.n	18e5e <__udivsi3+0x3a>
   18ec2:	09c3      	lsrs	r3, r0, #7
   18ec4:	428b      	cmp	r3, r1
   18ec6:	d301      	bcc.n	18ecc <__udivsi3+0xa8>
   18ec8:	01cb      	lsls	r3, r1, #7
   18eca:	1ac0      	subs	r0, r0, r3
   18ecc:	4152      	adcs	r2, r2
   18ece:	0983      	lsrs	r3, r0, #6
   18ed0:	428b      	cmp	r3, r1
   18ed2:	d301      	bcc.n	18ed8 <__udivsi3+0xb4>
   18ed4:	018b      	lsls	r3, r1, #6
   18ed6:	1ac0      	subs	r0, r0, r3
   18ed8:	4152      	adcs	r2, r2
   18eda:	0943      	lsrs	r3, r0, #5
   18edc:	428b      	cmp	r3, r1
   18ede:	d301      	bcc.n	18ee4 <__udivsi3+0xc0>
   18ee0:	014b      	lsls	r3, r1, #5
   18ee2:	1ac0      	subs	r0, r0, r3
   18ee4:	4152      	adcs	r2, r2
   18ee6:	0903      	lsrs	r3, r0, #4
   18ee8:	428b      	cmp	r3, r1
   18eea:	d301      	bcc.n	18ef0 <__udivsi3+0xcc>
   18eec:	010b      	lsls	r3, r1, #4
   18eee:	1ac0      	subs	r0, r0, r3
   18ef0:	4152      	adcs	r2, r2
   18ef2:	08c3      	lsrs	r3, r0, #3
   18ef4:	428b      	cmp	r3, r1
   18ef6:	d301      	bcc.n	18efc <__udivsi3+0xd8>
   18ef8:	00cb      	lsls	r3, r1, #3
   18efa:	1ac0      	subs	r0, r0, r3
   18efc:	4152      	adcs	r2, r2
   18efe:	0883      	lsrs	r3, r0, #2
   18f00:	428b      	cmp	r3, r1
   18f02:	d301      	bcc.n	18f08 <__udivsi3+0xe4>
   18f04:	008b      	lsls	r3, r1, #2
   18f06:	1ac0      	subs	r0, r0, r3
   18f08:	4152      	adcs	r2, r2
   18f0a:	0843      	lsrs	r3, r0, #1
   18f0c:	428b      	cmp	r3, r1
   18f0e:	d301      	bcc.n	18f14 <__udivsi3+0xf0>
   18f10:	004b      	lsls	r3, r1, #1
   18f12:	1ac0      	subs	r0, r0, r3
   18f14:	4152      	adcs	r2, r2
   18f16:	1a41      	subs	r1, r0, r1
   18f18:	d200      	bcs.n	18f1c <__udivsi3+0xf8>
   18f1a:	4601      	mov	r1, r0
   18f1c:	4152      	adcs	r2, r2
   18f1e:	4610      	mov	r0, r2
   18f20:	4770      	bx	lr
   18f22:	e7ff      	b.n	18f24 <__udivsi3+0x100>
   18f24:	b501      	push	{r0, lr}
   18f26:	2000      	movs	r0, #0
   18f28:	f000 f8f0 	bl	1910c <__aeabi_idiv0>
   18f2c:	bd02      	pop	{r1, pc}
   18f2e:	46c0      	nop			; (mov r8, r8)

00018f30 <__aeabi_uidivmod>:
   18f30:	2900      	cmp	r1, #0
   18f32:	d0f7      	beq.n	18f24 <__udivsi3+0x100>
   18f34:	e776      	b.n	18e24 <__udivsi3>
   18f36:	4770      	bx	lr

00018f38 <__divsi3>:
   18f38:	4603      	mov	r3, r0
   18f3a:	430b      	orrs	r3, r1
   18f3c:	d47f      	bmi.n	1903e <__divsi3+0x106>
   18f3e:	2200      	movs	r2, #0
   18f40:	0843      	lsrs	r3, r0, #1
   18f42:	428b      	cmp	r3, r1
   18f44:	d374      	bcc.n	19030 <__divsi3+0xf8>
   18f46:	0903      	lsrs	r3, r0, #4
   18f48:	428b      	cmp	r3, r1
   18f4a:	d35f      	bcc.n	1900c <__divsi3+0xd4>
   18f4c:	0a03      	lsrs	r3, r0, #8
   18f4e:	428b      	cmp	r3, r1
   18f50:	d344      	bcc.n	18fdc <__divsi3+0xa4>
   18f52:	0b03      	lsrs	r3, r0, #12
   18f54:	428b      	cmp	r3, r1
   18f56:	d328      	bcc.n	18faa <__divsi3+0x72>
   18f58:	0c03      	lsrs	r3, r0, #16
   18f5a:	428b      	cmp	r3, r1
   18f5c:	d30d      	bcc.n	18f7a <__divsi3+0x42>
   18f5e:	22ff      	movs	r2, #255	; 0xff
   18f60:	0209      	lsls	r1, r1, #8
   18f62:	ba12      	rev	r2, r2
   18f64:	0c03      	lsrs	r3, r0, #16
   18f66:	428b      	cmp	r3, r1
   18f68:	d302      	bcc.n	18f70 <__divsi3+0x38>
   18f6a:	1212      	asrs	r2, r2, #8
   18f6c:	0209      	lsls	r1, r1, #8
   18f6e:	d065      	beq.n	1903c <__divsi3+0x104>
   18f70:	0b03      	lsrs	r3, r0, #12
   18f72:	428b      	cmp	r3, r1
   18f74:	d319      	bcc.n	18faa <__divsi3+0x72>
   18f76:	e000      	b.n	18f7a <__divsi3+0x42>
   18f78:	0a09      	lsrs	r1, r1, #8
   18f7a:	0bc3      	lsrs	r3, r0, #15
   18f7c:	428b      	cmp	r3, r1
   18f7e:	d301      	bcc.n	18f84 <__divsi3+0x4c>
   18f80:	03cb      	lsls	r3, r1, #15
   18f82:	1ac0      	subs	r0, r0, r3
   18f84:	4152      	adcs	r2, r2
   18f86:	0b83      	lsrs	r3, r0, #14
   18f88:	428b      	cmp	r3, r1
   18f8a:	d301      	bcc.n	18f90 <__divsi3+0x58>
   18f8c:	038b      	lsls	r3, r1, #14
   18f8e:	1ac0      	subs	r0, r0, r3
   18f90:	4152      	adcs	r2, r2
   18f92:	0b43      	lsrs	r3, r0, #13
   18f94:	428b      	cmp	r3, r1
   18f96:	d301      	bcc.n	18f9c <__divsi3+0x64>
   18f98:	034b      	lsls	r3, r1, #13
   18f9a:	1ac0      	subs	r0, r0, r3
   18f9c:	4152      	adcs	r2, r2
   18f9e:	0b03      	lsrs	r3, r0, #12
   18fa0:	428b      	cmp	r3, r1
   18fa2:	d301      	bcc.n	18fa8 <__divsi3+0x70>
   18fa4:	030b      	lsls	r3, r1, #12
   18fa6:	1ac0      	subs	r0, r0, r3
   18fa8:	4152      	adcs	r2, r2
   18faa:	0ac3      	lsrs	r3, r0, #11
   18fac:	428b      	cmp	r3, r1
   18fae:	d301      	bcc.n	18fb4 <__divsi3+0x7c>
   18fb0:	02cb      	lsls	r3, r1, #11
   18fb2:	1ac0      	subs	r0, r0, r3
   18fb4:	4152      	adcs	r2, r2
   18fb6:	0a83      	lsrs	r3, r0, #10
   18fb8:	428b      	cmp	r3, r1
   18fba:	d301      	bcc.n	18fc0 <__divsi3+0x88>
   18fbc:	028b      	lsls	r3, r1, #10
   18fbe:	1ac0      	subs	r0, r0, r3
   18fc0:	4152      	adcs	r2, r2
   18fc2:	0a43      	lsrs	r3, r0, #9
   18fc4:	428b      	cmp	r3, r1
   18fc6:	d301      	bcc.n	18fcc <__divsi3+0x94>
   18fc8:	024b      	lsls	r3, r1, #9
   18fca:	1ac0      	subs	r0, r0, r3
   18fcc:	4152      	adcs	r2, r2
   18fce:	0a03      	lsrs	r3, r0, #8
   18fd0:	428b      	cmp	r3, r1
   18fd2:	d301      	bcc.n	18fd8 <__divsi3+0xa0>
   18fd4:	020b      	lsls	r3, r1, #8
   18fd6:	1ac0      	subs	r0, r0, r3
   18fd8:	4152      	adcs	r2, r2
   18fda:	d2cd      	bcs.n	18f78 <__divsi3+0x40>
   18fdc:	09c3      	lsrs	r3, r0, #7
   18fde:	428b      	cmp	r3, r1
   18fe0:	d301      	bcc.n	18fe6 <__divsi3+0xae>
   18fe2:	01cb      	lsls	r3, r1, #7
   18fe4:	1ac0      	subs	r0, r0, r3
   18fe6:	4152      	adcs	r2, r2
   18fe8:	0983      	lsrs	r3, r0, #6
   18fea:	428b      	cmp	r3, r1
   18fec:	d301      	bcc.n	18ff2 <__divsi3+0xba>
   18fee:	018b      	lsls	r3, r1, #6
   18ff0:	1ac0      	subs	r0, r0, r3
   18ff2:	4152      	adcs	r2, r2
   18ff4:	0943      	lsrs	r3, r0, #5
   18ff6:	428b      	cmp	r3, r1
   18ff8:	d301      	bcc.n	18ffe <__divsi3+0xc6>
   18ffa:	014b      	lsls	r3, r1, #5
   18ffc:	1ac0      	subs	r0, r0, r3
   18ffe:	4152      	adcs	r2, r2
   19000:	0903      	lsrs	r3, r0, #4
   19002:	428b      	cmp	r3, r1
   19004:	d301      	bcc.n	1900a <__divsi3+0xd2>
   19006:	010b      	lsls	r3, r1, #4
   19008:	1ac0      	subs	r0, r0, r3
   1900a:	4152      	adcs	r2, r2
   1900c:	08c3      	lsrs	r3, r0, #3
   1900e:	428b      	cmp	r3, r1
   19010:	d301      	bcc.n	19016 <__divsi3+0xde>
   19012:	00cb      	lsls	r3, r1, #3
   19014:	1ac0      	subs	r0, r0, r3
   19016:	4152      	adcs	r2, r2
   19018:	0883      	lsrs	r3, r0, #2
   1901a:	428b      	cmp	r3, r1
   1901c:	d301      	bcc.n	19022 <__divsi3+0xea>
   1901e:	008b      	lsls	r3, r1, #2
   19020:	1ac0      	subs	r0, r0, r3
   19022:	4152      	adcs	r2, r2
   19024:	0843      	lsrs	r3, r0, #1
   19026:	428b      	cmp	r3, r1
   19028:	d301      	bcc.n	1902e <__divsi3+0xf6>
   1902a:	004b      	lsls	r3, r1, #1
   1902c:	1ac0      	subs	r0, r0, r3
   1902e:	4152      	adcs	r2, r2
   19030:	1a41      	subs	r1, r0, r1
   19032:	d200      	bcs.n	19036 <__divsi3+0xfe>
   19034:	4601      	mov	r1, r0
   19036:	4152      	adcs	r2, r2
   19038:	4610      	mov	r0, r2
   1903a:	4770      	bx	lr
   1903c:	e05d      	b.n	190fa <__divsi3+0x1c2>
   1903e:	0fca      	lsrs	r2, r1, #31
   19040:	d000      	beq.n	19044 <__divsi3+0x10c>
   19042:	4249      	negs	r1, r1
   19044:	1003      	asrs	r3, r0, #32
   19046:	d300      	bcc.n	1904a <__divsi3+0x112>
   19048:	4240      	negs	r0, r0
   1904a:	4053      	eors	r3, r2
   1904c:	2200      	movs	r2, #0
   1904e:	469c      	mov	ip, r3
   19050:	0903      	lsrs	r3, r0, #4
   19052:	428b      	cmp	r3, r1
   19054:	d32d      	bcc.n	190b2 <__divsi3+0x17a>
   19056:	0a03      	lsrs	r3, r0, #8
   19058:	428b      	cmp	r3, r1
   1905a:	d312      	bcc.n	19082 <__divsi3+0x14a>
   1905c:	22fc      	movs	r2, #252	; 0xfc
   1905e:	0189      	lsls	r1, r1, #6
   19060:	ba12      	rev	r2, r2
   19062:	0a03      	lsrs	r3, r0, #8
   19064:	428b      	cmp	r3, r1
   19066:	d30c      	bcc.n	19082 <__divsi3+0x14a>
   19068:	0189      	lsls	r1, r1, #6
   1906a:	1192      	asrs	r2, r2, #6
   1906c:	428b      	cmp	r3, r1
   1906e:	d308      	bcc.n	19082 <__divsi3+0x14a>
   19070:	0189      	lsls	r1, r1, #6
   19072:	1192      	asrs	r2, r2, #6
   19074:	428b      	cmp	r3, r1
   19076:	d304      	bcc.n	19082 <__divsi3+0x14a>
   19078:	0189      	lsls	r1, r1, #6
   1907a:	d03a      	beq.n	190f2 <__divsi3+0x1ba>
   1907c:	1192      	asrs	r2, r2, #6
   1907e:	e000      	b.n	19082 <__divsi3+0x14a>
   19080:	0989      	lsrs	r1, r1, #6
   19082:	09c3      	lsrs	r3, r0, #7
   19084:	428b      	cmp	r3, r1
   19086:	d301      	bcc.n	1908c <__divsi3+0x154>
   19088:	01cb      	lsls	r3, r1, #7
   1908a:	1ac0      	subs	r0, r0, r3
   1908c:	4152      	adcs	r2, r2
   1908e:	0983      	lsrs	r3, r0, #6
   19090:	428b      	cmp	r3, r1
   19092:	d301      	bcc.n	19098 <__divsi3+0x160>
   19094:	018b      	lsls	r3, r1, #6
   19096:	1ac0      	subs	r0, r0, r3
   19098:	4152      	adcs	r2, r2
   1909a:	0943      	lsrs	r3, r0, #5
   1909c:	428b      	cmp	r3, r1
   1909e:	d301      	bcc.n	190a4 <__divsi3+0x16c>
   190a0:	014b      	lsls	r3, r1, #5
   190a2:	1ac0      	subs	r0, r0, r3
   190a4:	4152      	adcs	r2, r2
   190a6:	0903      	lsrs	r3, r0, #4
   190a8:	428b      	cmp	r3, r1
   190aa:	d301      	bcc.n	190b0 <__divsi3+0x178>
   190ac:	010b      	lsls	r3, r1, #4
   190ae:	1ac0      	subs	r0, r0, r3
   190b0:	4152      	adcs	r2, r2
   190b2:	08c3      	lsrs	r3, r0, #3
   190b4:	428b      	cmp	r3, r1
   190b6:	d301      	bcc.n	190bc <__divsi3+0x184>
   190b8:	00cb      	lsls	r3, r1, #3
   190ba:	1ac0      	subs	r0, r0, r3
   190bc:	4152      	adcs	r2, r2
   190be:	0883      	lsrs	r3, r0, #2
   190c0:	428b      	cmp	r3, r1
   190c2:	d301      	bcc.n	190c8 <__divsi3+0x190>
   190c4:	008b      	lsls	r3, r1, #2
   190c6:	1ac0      	subs	r0, r0, r3
   190c8:	4152      	adcs	r2, r2
   190ca:	d2d9      	bcs.n	19080 <__divsi3+0x148>
   190cc:	0843      	lsrs	r3, r0, #1
   190ce:	428b      	cmp	r3, r1
   190d0:	d301      	bcc.n	190d6 <__divsi3+0x19e>
   190d2:	004b      	lsls	r3, r1, #1
   190d4:	1ac0      	subs	r0, r0, r3
   190d6:	4152      	adcs	r2, r2
   190d8:	1a41      	subs	r1, r0, r1
   190da:	d200      	bcs.n	190de <__divsi3+0x1a6>
   190dc:	4601      	mov	r1, r0
   190de:	4663      	mov	r3, ip
   190e0:	4152      	adcs	r2, r2
   190e2:	105b      	asrs	r3, r3, #1
   190e4:	4610      	mov	r0, r2
   190e6:	d301      	bcc.n	190ec <__divsi3+0x1b4>
   190e8:	4240      	negs	r0, r0
   190ea:	2b00      	cmp	r3, #0
   190ec:	d500      	bpl.n	190f0 <__divsi3+0x1b8>
   190ee:	4249      	negs	r1, r1
   190f0:	4770      	bx	lr
   190f2:	4663      	mov	r3, ip
   190f4:	105b      	asrs	r3, r3, #1
   190f6:	d300      	bcc.n	190fa <__divsi3+0x1c2>
   190f8:	4240      	negs	r0, r0
   190fa:	b501      	push	{r0, lr}
   190fc:	2000      	movs	r0, #0
   190fe:	f000 f805 	bl	1910c <__aeabi_idiv0>
   19102:	bd02      	pop	{r1, pc}

00019104 <__aeabi_idivmod>:
   19104:	2900      	cmp	r1, #0
   19106:	d0f8      	beq.n	190fa <__divsi3+0x1c2>
   19108:	e716      	b.n	18f38 <__divsi3>
   1910a:	4770      	bx	lr

0001910c <__aeabi_idiv0>:
   1910c:	4770      	bx	lr
   1910e:	46c0      	nop			; (mov r8, r8)

00019110 <__aeabi_llsl>:
   19110:	4091      	lsls	r1, r2
   19112:	1c03      	adds	r3, r0, #0
   19114:	4090      	lsls	r0, r2
   19116:	469c      	mov	ip, r3
   19118:	3a20      	subs	r2, #32
   1911a:	4093      	lsls	r3, r2
   1911c:	4319      	orrs	r1, r3
   1911e:	4252      	negs	r2, r2
   19120:	4663      	mov	r3, ip
   19122:	40d3      	lsrs	r3, r2
   19124:	4319      	orrs	r1, r3
   19126:	4770      	bx	lr

00019128 <__aeabi_cdrcmple>:
   19128:	4684      	mov	ip, r0
   1912a:	1c10      	adds	r0, r2, #0
   1912c:	4662      	mov	r2, ip
   1912e:	468c      	mov	ip, r1
   19130:	1c19      	adds	r1, r3, #0
   19132:	4663      	mov	r3, ip
   19134:	e000      	b.n	19138 <__aeabi_cdcmpeq>
   19136:	46c0      	nop			; (mov r8, r8)

00019138 <__aeabi_cdcmpeq>:
   19138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1913a:	f001 fa89 	bl	1a650 <__ledf2>
   1913e:	2800      	cmp	r0, #0
   19140:	d401      	bmi.n	19146 <__aeabi_cdcmpeq+0xe>
   19142:	2100      	movs	r1, #0
   19144:	42c8      	cmn	r0, r1
   19146:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00019148 <__aeabi_dcmpeq>:
   19148:	b510      	push	{r4, lr}
   1914a:	f001 f9e3 	bl	1a514 <__eqdf2>
   1914e:	4240      	negs	r0, r0
   19150:	3001      	adds	r0, #1
   19152:	bd10      	pop	{r4, pc}

00019154 <__aeabi_dcmplt>:
   19154:	b510      	push	{r4, lr}
   19156:	f001 fa7b 	bl	1a650 <__ledf2>
   1915a:	2800      	cmp	r0, #0
   1915c:	db01      	blt.n	19162 <__aeabi_dcmplt+0xe>
   1915e:	2000      	movs	r0, #0
   19160:	bd10      	pop	{r4, pc}
   19162:	2001      	movs	r0, #1
   19164:	bd10      	pop	{r4, pc}
   19166:	46c0      	nop			; (mov r8, r8)

00019168 <__aeabi_dcmple>:
   19168:	b510      	push	{r4, lr}
   1916a:	f001 fa71 	bl	1a650 <__ledf2>
   1916e:	2800      	cmp	r0, #0
   19170:	dd01      	ble.n	19176 <__aeabi_dcmple+0xe>
   19172:	2000      	movs	r0, #0
   19174:	bd10      	pop	{r4, pc}
   19176:	2001      	movs	r0, #1
   19178:	bd10      	pop	{r4, pc}
   1917a:	46c0      	nop			; (mov r8, r8)

0001917c <__aeabi_dcmpgt>:
   1917c:	b510      	push	{r4, lr}
   1917e:	f001 fa03 	bl	1a588 <__gedf2>
   19182:	2800      	cmp	r0, #0
   19184:	dc01      	bgt.n	1918a <__aeabi_dcmpgt+0xe>
   19186:	2000      	movs	r0, #0
   19188:	bd10      	pop	{r4, pc}
   1918a:	2001      	movs	r0, #1
   1918c:	bd10      	pop	{r4, pc}
   1918e:	46c0      	nop			; (mov r8, r8)

00019190 <__aeabi_dcmpge>:
   19190:	b510      	push	{r4, lr}
   19192:	f001 f9f9 	bl	1a588 <__gedf2>
   19196:	2800      	cmp	r0, #0
   19198:	da01      	bge.n	1919e <__aeabi_dcmpge+0xe>
   1919a:	2000      	movs	r0, #0
   1919c:	bd10      	pop	{r4, pc}
   1919e:	2001      	movs	r0, #1
   191a0:	bd10      	pop	{r4, pc}
   191a2:	46c0      	nop			; (mov r8, r8)

000191a4 <__aeabi_lmul>:
   191a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   191a6:	46ce      	mov	lr, r9
   191a8:	4647      	mov	r7, r8
   191aa:	0415      	lsls	r5, r2, #16
   191ac:	0c2d      	lsrs	r5, r5, #16
   191ae:	002e      	movs	r6, r5
   191b0:	b580      	push	{r7, lr}
   191b2:	0407      	lsls	r7, r0, #16
   191b4:	0c14      	lsrs	r4, r2, #16
   191b6:	0c3f      	lsrs	r7, r7, #16
   191b8:	4699      	mov	r9, r3
   191ba:	0c03      	lsrs	r3, r0, #16
   191bc:	437e      	muls	r6, r7
   191be:	435d      	muls	r5, r3
   191c0:	4367      	muls	r7, r4
   191c2:	4363      	muls	r3, r4
   191c4:	197f      	adds	r7, r7, r5
   191c6:	0c34      	lsrs	r4, r6, #16
   191c8:	19e4      	adds	r4, r4, r7
   191ca:	469c      	mov	ip, r3
   191cc:	42a5      	cmp	r5, r4
   191ce:	d903      	bls.n	191d8 <__aeabi_lmul+0x34>
   191d0:	2380      	movs	r3, #128	; 0x80
   191d2:	025b      	lsls	r3, r3, #9
   191d4:	4698      	mov	r8, r3
   191d6:	44c4      	add	ip, r8
   191d8:	464b      	mov	r3, r9
   191da:	4351      	muls	r1, r2
   191dc:	4343      	muls	r3, r0
   191de:	0436      	lsls	r6, r6, #16
   191e0:	0c36      	lsrs	r6, r6, #16
   191e2:	0c25      	lsrs	r5, r4, #16
   191e4:	0424      	lsls	r4, r4, #16
   191e6:	4465      	add	r5, ip
   191e8:	19a4      	adds	r4, r4, r6
   191ea:	1859      	adds	r1, r3, r1
   191ec:	1949      	adds	r1, r1, r5
   191ee:	0020      	movs	r0, r4
   191f0:	bc0c      	pop	{r2, r3}
   191f2:	4690      	mov	r8, r2
   191f4:	4699      	mov	r9, r3
   191f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000191f8 <__aeabi_d2uiz>:
   191f8:	b570      	push	{r4, r5, r6, lr}
   191fa:	2200      	movs	r2, #0
   191fc:	4b0c      	ldr	r3, [pc, #48]	; (19230 <__aeabi_d2uiz+0x38>)
   191fe:	0004      	movs	r4, r0
   19200:	000d      	movs	r5, r1
   19202:	f7ff ffc5 	bl	19190 <__aeabi_dcmpge>
   19206:	2800      	cmp	r0, #0
   19208:	d104      	bne.n	19214 <__aeabi_d2uiz+0x1c>
   1920a:	0020      	movs	r0, r4
   1920c:	0029      	movs	r1, r5
   1920e:	f002 f817 	bl	1b240 <__aeabi_d2iz>
   19212:	bd70      	pop	{r4, r5, r6, pc}
   19214:	4b06      	ldr	r3, [pc, #24]	; (19230 <__aeabi_d2uiz+0x38>)
   19216:	2200      	movs	r2, #0
   19218:	0020      	movs	r0, r4
   1921a:	0029      	movs	r1, r5
   1921c:	f001 fcfa 	bl	1ac14 <__aeabi_dsub>
   19220:	f002 f80e 	bl	1b240 <__aeabi_d2iz>
   19224:	2380      	movs	r3, #128	; 0x80
   19226:	061b      	lsls	r3, r3, #24
   19228:	469c      	mov	ip, r3
   1922a:	4460      	add	r0, ip
   1922c:	e7f1      	b.n	19212 <__aeabi_d2uiz+0x1a>
   1922e:	46c0      	nop			; (mov r8, r8)
   19230:	41e00000 	.word	0x41e00000

00019234 <__aeabi_fmul>:
   19234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19236:	4657      	mov	r7, sl
   19238:	464e      	mov	r6, r9
   1923a:	4645      	mov	r5, r8
   1923c:	46de      	mov	lr, fp
   1923e:	b5e0      	push	{r5, r6, r7, lr}
   19240:	0247      	lsls	r7, r0, #9
   19242:	0046      	lsls	r6, r0, #1
   19244:	4688      	mov	r8, r1
   19246:	0a7f      	lsrs	r7, r7, #9
   19248:	0e36      	lsrs	r6, r6, #24
   1924a:	0fc4      	lsrs	r4, r0, #31
   1924c:	2e00      	cmp	r6, #0
   1924e:	d047      	beq.n	192e0 <__aeabi_fmul+0xac>
   19250:	2eff      	cmp	r6, #255	; 0xff
   19252:	d024      	beq.n	1929e <__aeabi_fmul+0x6a>
   19254:	00fb      	lsls	r3, r7, #3
   19256:	2780      	movs	r7, #128	; 0x80
   19258:	04ff      	lsls	r7, r7, #19
   1925a:	431f      	orrs	r7, r3
   1925c:	2300      	movs	r3, #0
   1925e:	4699      	mov	r9, r3
   19260:	469a      	mov	sl, r3
   19262:	3e7f      	subs	r6, #127	; 0x7f
   19264:	4643      	mov	r3, r8
   19266:	025d      	lsls	r5, r3, #9
   19268:	0058      	lsls	r0, r3, #1
   1926a:	0fdb      	lsrs	r3, r3, #31
   1926c:	0a6d      	lsrs	r5, r5, #9
   1926e:	0e00      	lsrs	r0, r0, #24
   19270:	4698      	mov	r8, r3
   19272:	d043      	beq.n	192fc <__aeabi_fmul+0xc8>
   19274:	28ff      	cmp	r0, #255	; 0xff
   19276:	d03b      	beq.n	192f0 <__aeabi_fmul+0xbc>
   19278:	00eb      	lsls	r3, r5, #3
   1927a:	2580      	movs	r5, #128	; 0x80
   1927c:	2200      	movs	r2, #0
   1927e:	04ed      	lsls	r5, r5, #19
   19280:	431d      	orrs	r5, r3
   19282:	387f      	subs	r0, #127	; 0x7f
   19284:	1836      	adds	r6, r6, r0
   19286:	1c73      	adds	r3, r6, #1
   19288:	4641      	mov	r1, r8
   1928a:	469b      	mov	fp, r3
   1928c:	464b      	mov	r3, r9
   1928e:	4061      	eors	r1, r4
   19290:	4313      	orrs	r3, r2
   19292:	2b0f      	cmp	r3, #15
   19294:	d864      	bhi.n	19360 <__aeabi_fmul+0x12c>
   19296:	4875      	ldr	r0, [pc, #468]	; (1946c <__aeabi_fmul+0x238>)
   19298:	009b      	lsls	r3, r3, #2
   1929a:	58c3      	ldr	r3, [r0, r3]
   1929c:	469f      	mov	pc, r3
   1929e:	2f00      	cmp	r7, #0
   192a0:	d142      	bne.n	19328 <__aeabi_fmul+0xf4>
   192a2:	2308      	movs	r3, #8
   192a4:	4699      	mov	r9, r3
   192a6:	3b06      	subs	r3, #6
   192a8:	26ff      	movs	r6, #255	; 0xff
   192aa:	469a      	mov	sl, r3
   192ac:	e7da      	b.n	19264 <__aeabi_fmul+0x30>
   192ae:	4641      	mov	r1, r8
   192b0:	2a02      	cmp	r2, #2
   192b2:	d028      	beq.n	19306 <__aeabi_fmul+0xd2>
   192b4:	2a03      	cmp	r2, #3
   192b6:	d100      	bne.n	192ba <__aeabi_fmul+0x86>
   192b8:	e0ce      	b.n	19458 <__aeabi_fmul+0x224>
   192ba:	2a01      	cmp	r2, #1
   192bc:	d000      	beq.n	192c0 <__aeabi_fmul+0x8c>
   192be:	e0ac      	b.n	1941a <__aeabi_fmul+0x1e6>
   192c0:	4011      	ands	r1, r2
   192c2:	2000      	movs	r0, #0
   192c4:	2200      	movs	r2, #0
   192c6:	b2cc      	uxtb	r4, r1
   192c8:	0240      	lsls	r0, r0, #9
   192ca:	05d2      	lsls	r2, r2, #23
   192cc:	0a40      	lsrs	r0, r0, #9
   192ce:	07e4      	lsls	r4, r4, #31
   192d0:	4310      	orrs	r0, r2
   192d2:	4320      	orrs	r0, r4
   192d4:	bc3c      	pop	{r2, r3, r4, r5}
   192d6:	4690      	mov	r8, r2
   192d8:	4699      	mov	r9, r3
   192da:	46a2      	mov	sl, r4
   192dc:	46ab      	mov	fp, r5
   192de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   192e0:	2f00      	cmp	r7, #0
   192e2:	d115      	bne.n	19310 <__aeabi_fmul+0xdc>
   192e4:	2304      	movs	r3, #4
   192e6:	4699      	mov	r9, r3
   192e8:	3b03      	subs	r3, #3
   192ea:	2600      	movs	r6, #0
   192ec:	469a      	mov	sl, r3
   192ee:	e7b9      	b.n	19264 <__aeabi_fmul+0x30>
   192f0:	20ff      	movs	r0, #255	; 0xff
   192f2:	2202      	movs	r2, #2
   192f4:	2d00      	cmp	r5, #0
   192f6:	d0c5      	beq.n	19284 <__aeabi_fmul+0x50>
   192f8:	2203      	movs	r2, #3
   192fa:	e7c3      	b.n	19284 <__aeabi_fmul+0x50>
   192fc:	2d00      	cmp	r5, #0
   192fe:	d119      	bne.n	19334 <__aeabi_fmul+0x100>
   19300:	2000      	movs	r0, #0
   19302:	2201      	movs	r2, #1
   19304:	e7be      	b.n	19284 <__aeabi_fmul+0x50>
   19306:	2401      	movs	r4, #1
   19308:	22ff      	movs	r2, #255	; 0xff
   1930a:	400c      	ands	r4, r1
   1930c:	2000      	movs	r0, #0
   1930e:	e7db      	b.n	192c8 <__aeabi_fmul+0x94>
   19310:	0038      	movs	r0, r7
   19312:	f002 f895 	bl	1b440 <__clzsi2>
   19316:	2676      	movs	r6, #118	; 0x76
   19318:	1f43      	subs	r3, r0, #5
   1931a:	409f      	lsls	r7, r3
   1931c:	2300      	movs	r3, #0
   1931e:	4276      	negs	r6, r6
   19320:	1a36      	subs	r6, r6, r0
   19322:	4699      	mov	r9, r3
   19324:	469a      	mov	sl, r3
   19326:	e79d      	b.n	19264 <__aeabi_fmul+0x30>
   19328:	230c      	movs	r3, #12
   1932a:	4699      	mov	r9, r3
   1932c:	3b09      	subs	r3, #9
   1932e:	26ff      	movs	r6, #255	; 0xff
   19330:	469a      	mov	sl, r3
   19332:	e797      	b.n	19264 <__aeabi_fmul+0x30>
   19334:	0028      	movs	r0, r5
   19336:	f002 f883 	bl	1b440 <__clzsi2>
   1933a:	1f43      	subs	r3, r0, #5
   1933c:	409d      	lsls	r5, r3
   1933e:	2376      	movs	r3, #118	; 0x76
   19340:	425b      	negs	r3, r3
   19342:	1a18      	subs	r0, r3, r0
   19344:	2200      	movs	r2, #0
   19346:	e79d      	b.n	19284 <__aeabi_fmul+0x50>
   19348:	2080      	movs	r0, #128	; 0x80
   1934a:	2400      	movs	r4, #0
   1934c:	03c0      	lsls	r0, r0, #15
   1934e:	22ff      	movs	r2, #255	; 0xff
   19350:	e7ba      	b.n	192c8 <__aeabi_fmul+0x94>
   19352:	003d      	movs	r5, r7
   19354:	4652      	mov	r2, sl
   19356:	e7ab      	b.n	192b0 <__aeabi_fmul+0x7c>
   19358:	003d      	movs	r5, r7
   1935a:	0021      	movs	r1, r4
   1935c:	4652      	mov	r2, sl
   1935e:	e7a7      	b.n	192b0 <__aeabi_fmul+0x7c>
   19360:	0c3b      	lsrs	r3, r7, #16
   19362:	469c      	mov	ip, r3
   19364:	042a      	lsls	r2, r5, #16
   19366:	0c12      	lsrs	r2, r2, #16
   19368:	0c2b      	lsrs	r3, r5, #16
   1936a:	0014      	movs	r4, r2
   1936c:	4660      	mov	r0, ip
   1936e:	4665      	mov	r5, ip
   19370:	043f      	lsls	r7, r7, #16
   19372:	0c3f      	lsrs	r7, r7, #16
   19374:	437c      	muls	r4, r7
   19376:	4342      	muls	r2, r0
   19378:	435d      	muls	r5, r3
   1937a:	437b      	muls	r3, r7
   1937c:	0c27      	lsrs	r7, r4, #16
   1937e:	189b      	adds	r3, r3, r2
   19380:	18ff      	adds	r7, r7, r3
   19382:	42ba      	cmp	r2, r7
   19384:	d903      	bls.n	1938e <__aeabi_fmul+0x15a>
   19386:	2380      	movs	r3, #128	; 0x80
   19388:	025b      	lsls	r3, r3, #9
   1938a:	469c      	mov	ip, r3
   1938c:	4465      	add	r5, ip
   1938e:	0424      	lsls	r4, r4, #16
   19390:	043a      	lsls	r2, r7, #16
   19392:	0c24      	lsrs	r4, r4, #16
   19394:	1912      	adds	r2, r2, r4
   19396:	0193      	lsls	r3, r2, #6
   19398:	1e5c      	subs	r4, r3, #1
   1939a:	41a3      	sbcs	r3, r4
   1939c:	0c3f      	lsrs	r7, r7, #16
   1939e:	0e92      	lsrs	r2, r2, #26
   193a0:	197d      	adds	r5, r7, r5
   193a2:	431a      	orrs	r2, r3
   193a4:	01ad      	lsls	r5, r5, #6
   193a6:	4315      	orrs	r5, r2
   193a8:	012b      	lsls	r3, r5, #4
   193aa:	d504      	bpl.n	193b6 <__aeabi_fmul+0x182>
   193ac:	2301      	movs	r3, #1
   193ae:	465e      	mov	r6, fp
   193b0:	086a      	lsrs	r2, r5, #1
   193b2:	401d      	ands	r5, r3
   193b4:	4315      	orrs	r5, r2
   193b6:	0032      	movs	r2, r6
   193b8:	327f      	adds	r2, #127	; 0x7f
   193ba:	2a00      	cmp	r2, #0
   193bc:	dd25      	ble.n	1940a <__aeabi_fmul+0x1d6>
   193be:	076b      	lsls	r3, r5, #29
   193c0:	d004      	beq.n	193cc <__aeabi_fmul+0x198>
   193c2:	230f      	movs	r3, #15
   193c4:	402b      	ands	r3, r5
   193c6:	2b04      	cmp	r3, #4
   193c8:	d000      	beq.n	193cc <__aeabi_fmul+0x198>
   193ca:	3504      	adds	r5, #4
   193cc:	012b      	lsls	r3, r5, #4
   193ce:	d503      	bpl.n	193d8 <__aeabi_fmul+0x1a4>
   193d0:	0032      	movs	r2, r6
   193d2:	4b27      	ldr	r3, [pc, #156]	; (19470 <__aeabi_fmul+0x23c>)
   193d4:	3280      	adds	r2, #128	; 0x80
   193d6:	401d      	ands	r5, r3
   193d8:	2afe      	cmp	r2, #254	; 0xfe
   193da:	dc94      	bgt.n	19306 <__aeabi_fmul+0xd2>
   193dc:	2401      	movs	r4, #1
   193de:	01a8      	lsls	r0, r5, #6
   193e0:	0a40      	lsrs	r0, r0, #9
   193e2:	b2d2      	uxtb	r2, r2
   193e4:	400c      	ands	r4, r1
   193e6:	e76f      	b.n	192c8 <__aeabi_fmul+0x94>
   193e8:	2080      	movs	r0, #128	; 0x80
   193ea:	03c0      	lsls	r0, r0, #15
   193ec:	4207      	tst	r7, r0
   193ee:	d007      	beq.n	19400 <__aeabi_fmul+0x1cc>
   193f0:	4205      	tst	r5, r0
   193f2:	d105      	bne.n	19400 <__aeabi_fmul+0x1cc>
   193f4:	4328      	orrs	r0, r5
   193f6:	0240      	lsls	r0, r0, #9
   193f8:	0a40      	lsrs	r0, r0, #9
   193fa:	4644      	mov	r4, r8
   193fc:	22ff      	movs	r2, #255	; 0xff
   193fe:	e763      	b.n	192c8 <__aeabi_fmul+0x94>
   19400:	4338      	orrs	r0, r7
   19402:	0240      	lsls	r0, r0, #9
   19404:	0a40      	lsrs	r0, r0, #9
   19406:	22ff      	movs	r2, #255	; 0xff
   19408:	e75e      	b.n	192c8 <__aeabi_fmul+0x94>
   1940a:	2401      	movs	r4, #1
   1940c:	1aa3      	subs	r3, r4, r2
   1940e:	2b1b      	cmp	r3, #27
   19410:	dd05      	ble.n	1941e <__aeabi_fmul+0x1ea>
   19412:	400c      	ands	r4, r1
   19414:	2200      	movs	r2, #0
   19416:	2000      	movs	r0, #0
   19418:	e756      	b.n	192c8 <__aeabi_fmul+0x94>
   1941a:	465e      	mov	r6, fp
   1941c:	e7cb      	b.n	193b6 <__aeabi_fmul+0x182>
   1941e:	002a      	movs	r2, r5
   19420:	2020      	movs	r0, #32
   19422:	40da      	lsrs	r2, r3
   19424:	1ac3      	subs	r3, r0, r3
   19426:	409d      	lsls	r5, r3
   19428:	002b      	movs	r3, r5
   1942a:	1e5d      	subs	r5, r3, #1
   1942c:	41ab      	sbcs	r3, r5
   1942e:	4313      	orrs	r3, r2
   19430:	075a      	lsls	r2, r3, #29
   19432:	d004      	beq.n	1943e <__aeabi_fmul+0x20a>
   19434:	220f      	movs	r2, #15
   19436:	401a      	ands	r2, r3
   19438:	2a04      	cmp	r2, #4
   1943a:	d000      	beq.n	1943e <__aeabi_fmul+0x20a>
   1943c:	3304      	adds	r3, #4
   1943e:	015a      	lsls	r2, r3, #5
   19440:	d504      	bpl.n	1944c <__aeabi_fmul+0x218>
   19442:	2401      	movs	r4, #1
   19444:	2201      	movs	r2, #1
   19446:	400c      	ands	r4, r1
   19448:	2000      	movs	r0, #0
   1944a:	e73d      	b.n	192c8 <__aeabi_fmul+0x94>
   1944c:	2401      	movs	r4, #1
   1944e:	019b      	lsls	r3, r3, #6
   19450:	0a58      	lsrs	r0, r3, #9
   19452:	400c      	ands	r4, r1
   19454:	2200      	movs	r2, #0
   19456:	e737      	b.n	192c8 <__aeabi_fmul+0x94>
   19458:	2080      	movs	r0, #128	; 0x80
   1945a:	2401      	movs	r4, #1
   1945c:	03c0      	lsls	r0, r0, #15
   1945e:	4328      	orrs	r0, r5
   19460:	0240      	lsls	r0, r0, #9
   19462:	0a40      	lsrs	r0, r0, #9
   19464:	400c      	ands	r4, r1
   19466:	22ff      	movs	r2, #255	; 0xff
   19468:	e72e      	b.n	192c8 <__aeabi_fmul+0x94>
   1946a:	46c0      	nop			; (mov r8, r8)
   1946c:	0001d15c 	.word	0x0001d15c
   19470:	f7ffffff 	.word	0xf7ffffff

00019474 <__aeabi_fsub>:
   19474:	b5f0      	push	{r4, r5, r6, r7, lr}
   19476:	464f      	mov	r7, r9
   19478:	46d6      	mov	lr, sl
   1947a:	4646      	mov	r6, r8
   1947c:	0044      	lsls	r4, r0, #1
   1947e:	b5c0      	push	{r6, r7, lr}
   19480:	0fc2      	lsrs	r2, r0, #31
   19482:	0247      	lsls	r7, r0, #9
   19484:	0248      	lsls	r0, r1, #9
   19486:	0a40      	lsrs	r0, r0, #9
   19488:	4684      	mov	ip, r0
   1948a:	4666      	mov	r6, ip
   1948c:	0a7b      	lsrs	r3, r7, #9
   1948e:	0048      	lsls	r0, r1, #1
   19490:	0fc9      	lsrs	r1, r1, #31
   19492:	469a      	mov	sl, r3
   19494:	0e24      	lsrs	r4, r4, #24
   19496:	0015      	movs	r5, r2
   19498:	00db      	lsls	r3, r3, #3
   1949a:	0e00      	lsrs	r0, r0, #24
   1949c:	4689      	mov	r9, r1
   1949e:	00f6      	lsls	r6, r6, #3
   194a0:	28ff      	cmp	r0, #255	; 0xff
   194a2:	d100      	bne.n	194a6 <__aeabi_fsub+0x32>
   194a4:	e08f      	b.n	195c6 <__aeabi_fsub+0x152>
   194a6:	2101      	movs	r1, #1
   194a8:	464f      	mov	r7, r9
   194aa:	404f      	eors	r7, r1
   194ac:	0039      	movs	r1, r7
   194ae:	4291      	cmp	r1, r2
   194b0:	d066      	beq.n	19580 <__aeabi_fsub+0x10c>
   194b2:	1a22      	subs	r2, r4, r0
   194b4:	2a00      	cmp	r2, #0
   194b6:	dc00      	bgt.n	194ba <__aeabi_fsub+0x46>
   194b8:	e09d      	b.n	195f6 <__aeabi_fsub+0x182>
   194ba:	2800      	cmp	r0, #0
   194bc:	d13d      	bne.n	1953a <__aeabi_fsub+0xc6>
   194be:	2e00      	cmp	r6, #0
   194c0:	d100      	bne.n	194c4 <__aeabi_fsub+0x50>
   194c2:	e08b      	b.n	195dc <__aeabi_fsub+0x168>
   194c4:	1e51      	subs	r1, r2, #1
   194c6:	2900      	cmp	r1, #0
   194c8:	d000      	beq.n	194cc <__aeabi_fsub+0x58>
   194ca:	e0b5      	b.n	19638 <__aeabi_fsub+0x1c4>
   194cc:	2401      	movs	r4, #1
   194ce:	1b9b      	subs	r3, r3, r6
   194d0:	015a      	lsls	r2, r3, #5
   194d2:	d544      	bpl.n	1955e <__aeabi_fsub+0xea>
   194d4:	019b      	lsls	r3, r3, #6
   194d6:	099f      	lsrs	r7, r3, #6
   194d8:	0038      	movs	r0, r7
   194da:	f001 ffb1 	bl	1b440 <__clzsi2>
   194de:	3805      	subs	r0, #5
   194e0:	4087      	lsls	r7, r0
   194e2:	4284      	cmp	r4, r0
   194e4:	dd00      	ble.n	194e8 <__aeabi_fsub+0x74>
   194e6:	e096      	b.n	19616 <__aeabi_fsub+0x1a2>
   194e8:	1b04      	subs	r4, r0, r4
   194ea:	003a      	movs	r2, r7
   194ec:	2020      	movs	r0, #32
   194ee:	3401      	adds	r4, #1
   194f0:	40e2      	lsrs	r2, r4
   194f2:	1b04      	subs	r4, r0, r4
   194f4:	40a7      	lsls	r7, r4
   194f6:	003b      	movs	r3, r7
   194f8:	1e5f      	subs	r7, r3, #1
   194fa:	41bb      	sbcs	r3, r7
   194fc:	2400      	movs	r4, #0
   194fe:	4313      	orrs	r3, r2
   19500:	075a      	lsls	r2, r3, #29
   19502:	d004      	beq.n	1950e <__aeabi_fsub+0x9a>
   19504:	220f      	movs	r2, #15
   19506:	401a      	ands	r2, r3
   19508:	2a04      	cmp	r2, #4
   1950a:	d000      	beq.n	1950e <__aeabi_fsub+0x9a>
   1950c:	3304      	adds	r3, #4
   1950e:	015a      	lsls	r2, r3, #5
   19510:	d527      	bpl.n	19562 <__aeabi_fsub+0xee>
   19512:	3401      	adds	r4, #1
   19514:	2cff      	cmp	r4, #255	; 0xff
   19516:	d100      	bne.n	1951a <__aeabi_fsub+0xa6>
   19518:	e079      	b.n	1960e <__aeabi_fsub+0x19a>
   1951a:	2201      	movs	r2, #1
   1951c:	019b      	lsls	r3, r3, #6
   1951e:	0a5b      	lsrs	r3, r3, #9
   19520:	b2e4      	uxtb	r4, r4
   19522:	402a      	ands	r2, r5
   19524:	025b      	lsls	r3, r3, #9
   19526:	05e4      	lsls	r4, r4, #23
   19528:	0a58      	lsrs	r0, r3, #9
   1952a:	07d2      	lsls	r2, r2, #31
   1952c:	4320      	orrs	r0, r4
   1952e:	4310      	orrs	r0, r2
   19530:	bc1c      	pop	{r2, r3, r4}
   19532:	4690      	mov	r8, r2
   19534:	4699      	mov	r9, r3
   19536:	46a2      	mov	sl, r4
   19538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1953a:	2cff      	cmp	r4, #255	; 0xff
   1953c:	d0e0      	beq.n	19500 <__aeabi_fsub+0x8c>
   1953e:	2180      	movs	r1, #128	; 0x80
   19540:	04c9      	lsls	r1, r1, #19
   19542:	430e      	orrs	r6, r1
   19544:	2a1b      	cmp	r2, #27
   19546:	dc7b      	bgt.n	19640 <__aeabi_fsub+0x1cc>
   19548:	0031      	movs	r1, r6
   1954a:	2020      	movs	r0, #32
   1954c:	40d1      	lsrs	r1, r2
   1954e:	1a82      	subs	r2, r0, r2
   19550:	4096      	lsls	r6, r2
   19552:	1e72      	subs	r2, r6, #1
   19554:	4196      	sbcs	r6, r2
   19556:	430e      	orrs	r6, r1
   19558:	1b9b      	subs	r3, r3, r6
   1955a:	015a      	lsls	r2, r3, #5
   1955c:	d4ba      	bmi.n	194d4 <__aeabi_fsub+0x60>
   1955e:	075a      	lsls	r2, r3, #29
   19560:	d1d0      	bne.n	19504 <__aeabi_fsub+0x90>
   19562:	2201      	movs	r2, #1
   19564:	08df      	lsrs	r7, r3, #3
   19566:	402a      	ands	r2, r5
   19568:	2cff      	cmp	r4, #255	; 0xff
   1956a:	d133      	bne.n	195d4 <__aeabi_fsub+0x160>
   1956c:	2f00      	cmp	r7, #0
   1956e:	d100      	bne.n	19572 <__aeabi_fsub+0xfe>
   19570:	e0a8      	b.n	196c4 <__aeabi_fsub+0x250>
   19572:	2380      	movs	r3, #128	; 0x80
   19574:	03db      	lsls	r3, r3, #15
   19576:	433b      	orrs	r3, r7
   19578:	025b      	lsls	r3, r3, #9
   1957a:	0a5b      	lsrs	r3, r3, #9
   1957c:	24ff      	movs	r4, #255	; 0xff
   1957e:	e7d1      	b.n	19524 <__aeabi_fsub+0xb0>
   19580:	1a21      	subs	r1, r4, r0
   19582:	2900      	cmp	r1, #0
   19584:	dd4c      	ble.n	19620 <__aeabi_fsub+0x1ac>
   19586:	2800      	cmp	r0, #0
   19588:	d02a      	beq.n	195e0 <__aeabi_fsub+0x16c>
   1958a:	2cff      	cmp	r4, #255	; 0xff
   1958c:	d0b8      	beq.n	19500 <__aeabi_fsub+0x8c>
   1958e:	2080      	movs	r0, #128	; 0x80
   19590:	04c0      	lsls	r0, r0, #19
   19592:	4306      	orrs	r6, r0
   19594:	291b      	cmp	r1, #27
   19596:	dd00      	ble.n	1959a <__aeabi_fsub+0x126>
   19598:	e0af      	b.n	196fa <__aeabi_fsub+0x286>
   1959a:	0030      	movs	r0, r6
   1959c:	2720      	movs	r7, #32
   1959e:	40c8      	lsrs	r0, r1
   195a0:	1a79      	subs	r1, r7, r1
   195a2:	408e      	lsls	r6, r1
   195a4:	1e71      	subs	r1, r6, #1
   195a6:	418e      	sbcs	r6, r1
   195a8:	4306      	orrs	r6, r0
   195aa:	199b      	adds	r3, r3, r6
   195ac:	0159      	lsls	r1, r3, #5
   195ae:	d5d6      	bpl.n	1955e <__aeabi_fsub+0xea>
   195b0:	3401      	adds	r4, #1
   195b2:	2cff      	cmp	r4, #255	; 0xff
   195b4:	d100      	bne.n	195b8 <__aeabi_fsub+0x144>
   195b6:	e085      	b.n	196c4 <__aeabi_fsub+0x250>
   195b8:	2201      	movs	r2, #1
   195ba:	497a      	ldr	r1, [pc, #488]	; (197a4 <__aeabi_fsub+0x330>)
   195bc:	401a      	ands	r2, r3
   195be:	085b      	lsrs	r3, r3, #1
   195c0:	400b      	ands	r3, r1
   195c2:	4313      	orrs	r3, r2
   195c4:	e79c      	b.n	19500 <__aeabi_fsub+0x8c>
   195c6:	2e00      	cmp	r6, #0
   195c8:	d000      	beq.n	195cc <__aeabi_fsub+0x158>
   195ca:	e770      	b.n	194ae <__aeabi_fsub+0x3a>
   195cc:	e76b      	b.n	194a6 <__aeabi_fsub+0x32>
   195ce:	1e3b      	subs	r3, r7, #0
   195d0:	d1c5      	bne.n	1955e <__aeabi_fsub+0xea>
   195d2:	2200      	movs	r2, #0
   195d4:	027b      	lsls	r3, r7, #9
   195d6:	0a5b      	lsrs	r3, r3, #9
   195d8:	b2e4      	uxtb	r4, r4
   195da:	e7a3      	b.n	19524 <__aeabi_fsub+0xb0>
   195dc:	0014      	movs	r4, r2
   195de:	e78f      	b.n	19500 <__aeabi_fsub+0x8c>
   195e0:	2e00      	cmp	r6, #0
   195e2:	d04d      	beq.n	19680 <__aeabi_fsub+0x20c>
   195e4:	1e48      	subs	r0, r1, #1
   195e6:	2800      	cmp	r0, #0
   195e8:	d157      	bne.n	1969a <__aeabi_fsub+0x226>
   195ea:	199b      	adds	r3, r3, r6
   195ec:	2401      	movs	r4, #1
   195ee:	015a      	lsls	r2, r3, #5
   195f0:	d5b5      	bpl.n	1955e <__aeabi_fsub+0xea>
   195f2:	2402      	movs	r4, #2
   195f4:	e7e0      	b.n	195b8 <__aeabi_fsub+0x144>
   195f6:	2a00      	cmp	r2, #0
   195f8:	d125      	bne.n	19646 <__aeabi_fsub+0x1d2>
   195fa:	1c62      	adds	r2, r4, #1
   195fc:	b2d2      	uxtb	r2, r2
   195fe:	2a01      	cmp	r2, #1
   19600:	dd72      	ble.n	196e8 <__aeabi_fsub+0x274>
   19602:	1b9f      	subs	r7, r3, r6
   19604:	017a      	lsls	r2, r7, #5
   19606:	d535      	bpl.n	19674 <__aeabi_fsub+0x200>
   19608:	1af7      	subs	r7, r6, r3
   1960a:	000d      	movs	r5, r1
   1960c:	e764      	b.n	194d8 <__aeabi_fsub+0x64>
   1960e:	2201      	movs	r2, #1
   19610:	2300      	movs	r3, #0
   19612:	402a      	ands	r2, r5
   19614:	e786      	b.n	19524 <__aeabi_fsub+0xb0>
   19616:	003b      	movs	r3, r7
   19618:	4a63      	ldr	r2, [pc, #396]	; (197a8 <__aeabi_fsub+0x334>)
   1961a:	1a24      	subs	r4, r4, r0
   1961c:	4013      	ands	r3, r2
   1961e:	e76f      	b.n	19500 <__aeabi_fsub+0x8c>
   19620:	2900      	cmp	r1, #0
   19622:	d16c      	bne.n	196fe <__aeabi_fsub+0x28a>
   19624:	1c61      	adds	r1, r4, #1
   19626:	b2c8      	uxtb	r0, r1
   19628:	2801      	cmp	r0, #1
   1962a:	dd4e      	ble.n	196ca <__aeabi_fsub+0x256>
   1962c:	29ff      	cmp	r1, #255	; 0xff
   1962e:	d049      	beq.n	196c4 <__aeabi_fsub+0x250>
   19630:	199b      	adds	r3, r3, r6
   19632:	085b      	lsrs	r3, r3, #1
   19634:	000c      	movs	r4, r1
   19636:	e763      	b.n	19500 <__aeabi_fsub+0x8c>
   19638:	2aff      	cmp	r2, #255	; 0xff
   1963a:	d041      	beq.n	196c0 <__aeabi_fsub+0x24c>
   1963c:	000a      	movs	r2, r1
   1963e:	e781      	b.n	19544 <__aeabi_fsub+0xd0>
   19640:	2601      	movs	r6, #1
   19642:	1b9b      	subs	r3, r3, r6
   19644:	e789      	b.n	1955a <__aeabi_fsub+0xe6>
   19646:	2c00      	cmp	r4, #0
   19648:	d01c      	beq.n	19684 <__aeabi_fsub+0x210>
   1964a:	28ff      	cmp	r0, #255	; 0xff
   1964c:	d021      	beq.n	19692 <__aeabi_fsub+0x21e>
   1964e:	2480      	movs	r4, #128	; 0x80
   19650:	04e4      	lsls	r4, r4, #19
   19652:	4252      	negs	r2, r2
   19654:	4323      	orrs	r3, r4
   19656:	2a1b      	cmp	r2, #27
   19658:	dd00      	ble.n	1965c <__aeabi_fsub+0x1e8>
   1965a:	e096      	b.n	1978a <__aeabi_fsub+0x316>
   1965c:	001c      	movs	r4, r3
   1965e:	2520      	movs	r5, #32
   19660:	40d4      	lsrs	r4, r2
   19662:	1aaa      	subs	r2, r5, r2
   19664:	4093      	lsls	r3, r2
   19666:	1e5a      	subs	r2, r3, #1
   19668:	4193      	sbcs	r3, r2
   1966a:	4323      	orrs	r3, r4
   1966c:	1af3      	subs	r3, r6, r3
   1966e:	0004      	movs	r4, r0
   19670:	000d      	movs	r5, r1
   19672:	e72d      	b.n	194d0 <__aeabi_fsub+0x5c>
   19674:	2f00      	cmp	r7, #0
   19676:	d000      	beq.n	1967a <__aeabi_fsub+0x206>
   19678:	e72e      	b.n	194d8 <__aeabi_fsub+0x64>
   1967a:	2200      	movs	r2, #0
   1967c:	2400      	movs	r4, #0
   1967e:	e7a9      	b.n	195d4 <__aeabi_fsub+0x160>
   19680:	000c      	movs	r4, r1
   19682:	e73d      	b.n	19500 <__aeabi_fsub+0x8c>
   19684:	2b00      	cmp	r3, #0
   19686:	d058      	beq.n	1973a <__aeabi_fsub+0x2c6>
   19688:	43d2      	mvns	r2, r2
   1968a:	2a00      	cmp	r2, #0
   1968c:	d0ee      	beq.n	1966c <__aeabi_fsub+0x1f8>
   1968e:	28ff      	cmp	r0, #255	; 0xff
   19690:	d1e1      	bne.n	19656 <__aeabi_fsub+0x1e2>
   19692:	0033      	movs	r3, r6
   19694:	24ff      	movs	r4, #255	; 0xff
   19696:	000d      	movs	r5, r1
   19698:	e732      	b.n	19500 <__aeabi_fsub+0x8c>
   1969a:	29ff      	cmp	r1, #255	; 0xff
   1969c:	d010      	beq.n	196c0 <__aeabi_fsub+0x24c>
   1969e:	0001      	movs	r1, r0
   196a0:	e778      	b.n	19594 <__aeabi_fsub+0x120>
   196a2:	2b00      	cmp	r3, #0
   196a4:	d06e      	beq.n	19784 <__aeabi_fsub+0x310>
   196a6:	24ff      	movs	r4, #255	; 0xff
   196a8:	2e00      	cmp	r6, #0
   196aa:	d100      	bne.n	196ae <__aeabi_fsub+0x23a>
   196ac:	e728      	b.n	19500 <__aeabi_fsub+0x8c>
   196ae:	2280      	movs	r2, #128	; 0x80
   196b0:	4651      	mov	r1, sl
   196b2:	03d2      	lsls	r2, r2, #15
   196b4:	4211      	tst	r1, r2
   196b6:	d003      	beq.n	196c0 <__aeabi_fsub+0x24c>
   196b8:	4661      	mov	r1, ip
   196ba:	4211      	tst	r1, r2
   196bc:	d100      	bne.n	196c0 <__aeabi_fsub+0x24c>
   196be:	0033      	movs	r3, r6
   196c0:	24ff      	movs	r4, #255	; 0xff
   196c2:	e71d      	b.n	19500 <__aeabi_fsub+0x8c>
   196c4:	24ff      	movs	r4, #255	; 0xff
   196c6:	2300      	movs	r3, #0
   196c8:	e72c      	b.n	19524 <__aeabi_fsub+0xb0>
   196ca:	2c00      	cmp	r4, #0
   196cc:	d1e9      	bne.n	196a2 <__aeabi_fsub+0x22e>
   196ce:	2b00      	cmp	r3, #0
   196d0:	d063      	beq.n	1979a <__aeabi_fsub+0x326>
   196d2:	2e00      	cmp	r6, #0
   196d4:	d100      	bne.n	196d8 <__aeabi_fsub+0x264>
   196d6:	e713      	b.n	19500 <__aeabi_fsub+0x8c>
   196d8:	199b      	adds	r3, r3, r6
   196da:	015a      	lsls	r2, r3, #5
   196dc:	d400      	bmi.n	196e0 <__aeabi_fsub+0x26c>
   196de:	e73e      	b.n	1955e <__aeabi_fsub+0xea>
   196e0:	4a31      	ldr	r2, [pc, #196]	; (197a8 <__aeabi_fsub+0x334>)
   196e2:	000c      	movs	r4, r1
   196e4:	4013      	ands	r3, r2
   196e6:	e70b      	b.n	19500 <__aeabi_fsub+0x8c>
   196e8:	2c00      	cmp	r4, #0
   196ea:	d11e      	bne.n	1972a <__aeabi_fsub+0x2b6>
   196ec:	2b00      	cmp	r3, #0
   196ee:	d12f      	bne.n	19750 <__aeabi_fsub+0x2dc>
   196f0:	2e00      	cmp	r6, #0
   196f2:	d04f      	beq.n	19794 <__aeabi_fsub+0x320>
   196f4:	0033      	movs	r3, r6
   196f6:	000d      	movs	r5, r1
   196f8:	e702      	b.n	19500 <__aeabi_fsub+0x8c>
   196fa:	2601      	movs	r6, #1
   196fc:	e755      	b.n	195aa <__aeabi_fsub+0x136>
   196fe:	2c00      	cmp	r4, #0
   19700:	d11f      	bne.n	19742 <__aeabi_fsub+0x2ce>
   19702:	2b00      	cmp	r3, #0
   19704:	d043      	beq.n	1978e <__aeabi_fsub+0x31a>
   19706:	43c9      	mvns	r1, r1
   19708:	2900      	cmp	r1, #0
   1970a:	d00b      	beq.n	19724 <__aeabi_fsub+0x2b0>
   1970c:	28ff      	cmp	r0, #255	; 0xff
   1970e:	d039      	beq.n	19784 <__aeabi_fsub+0x310>
   19710:	291b      	cmp	r1, #27
   19712:	dc44      	bgt.n	1979e <__aeabi_fsub+0x32a>
   19714:	001c      	movs	r4, r3
   19716:	2720      	movs	r7, #32
   19718:	40cc      	lsrs	r4, r1
   1971a:	1a79      	subs	r1, r7, r1
   1971c:	408b      	lsls	r3, r1
   1971e:	1e59      	subs	r1, r3, #1
   19720:	418b      	sbcs	r3, r1
   19722:	4323      	orrs	r3, r4
   19724:	199b      	adds	r3, r3, r6
   19726:	0004      	movs	r4, r0
   19728:	e740      	b.n	195ac <__aeabi_fsub+0x138>
   1972a:	2b00      	cmp	r3, #0
   1972c:	d11a      	bne.n	19764 <__aeabi_fsub+0x2f0>
   1972e:	2e00      	cmp	r6, #0
   19730:	d124      	bne.n	1977c <__aeabi_fsub+0x308>
   19732:	2780      	movs	r7, #128	; 0x80
   19734:	2200      	movs	r2, #0
   19736:	03ff      	lsls	r7, r7, #15
   19738:	e71b      	b.n	19572 <__aeabi_fsub+0xfe>
   1973a:	0033      	movs	r3, r6
   1973c:	0004      	movs	r4, r0
   1973e:	000d      	movs	r5, r1
   19740:	e6de      	b.n	19500 <__aeabi_fsub+0x8c>
   19742:	28ff      	cmp	r0, #255	; 0xff
   19744:	d01e      	beq.n	19784 <__aeabi_fsub+0x310>
   19746:	2480      	movs	r4, #128	; 0x80
   19748:	04e4      	lsls	r4, r4, #19
   1974a:	4249      	negs	r1, r1
   1974c:	4323      	orrs	r3, r4
   1974e:	e7df      	b.n	19710 <__aeabi_fsub+0x29c>
   19750:	2e00      	cmp	r6, #0
   19752:	d100      	bne.n	19756 <__aeabi_fsub+0x2e2>
   19754:	e6d4      	b.n	19500 <__aeabi_fsub+0x8c>
   19756:	1b9f      	subs	r7, r3, r6
   19758:	017a      	lsls	r2, r7, #5
   1975a:	d400      	bmi.n	1975e <__aeabi_fsub+0x2ea>
   1975c:	e737      	b.n	195ce <__aeabi_fsub+0x15a>
   1975e:	1af3      	subs	r3, r6, r3
   19760:	000d      	movs	r5, r1
   19762:	e6cd      	b.n	19500 <__aeabi_fsub+0x8c>
   19764:	24ff      	movs	r4, #255	; 0xff
   19766:	2e00      	cmp	r6, #0
   19768:	d100      	bne.n	1976c <__aeabi_fsub+0x2f8>
   1976a:	e6c9      	b.n	19500 <__aeabi_fsub+0x8c>
   1976c:	2280      	movs	r2, #128	; 0x80
   1976e:	4650      	mov	r0, sl
   19770:	03d2      	lsls	r2, r2, #15
   19772:	4210      	tst	r0, r2
   19774:	d0a4      	beq.n	196c0 <__aeabi_fsub+0x24c>
   19776:	4660      	mov	r0, ip
   19778:	4210      	tst	r0, r2
   1977a:	d1a1      	bne.n	196c0 <__aeabi_fsub+0x24c>
   1977c:	0033      	movs	r3, r6
   1977e:	000d      	movs	r5, r1
   19780:	24ff      	movs	r4, #255	; 0xff
   19782:	e6bd      	b.n	19500 <__aeabi_fsub+0x8c>
   19784:	0033      	movs	r3, r6
   19786:	24ff      	movs	r4, #255	; 0xff
   19788:	e6ba      	b.n	19500 <__aeabi_fsub+0x8c>
   1978a:	2301      	movs	r3, #1
   1978c:	e76e      	b.n	1966c <__aeabi_fsub+0x1f8>
   1978e:	0033      	movs	r3, r6
   19790:	0004      	movs	r4, r0
   19792:	e6b5      	b.n	19500 <__aeabi_fsub+0x8c>
   19794:	2700      	movs	r7, #0
   19796:	2200      	movs	r2, #0
   19798:	e71c      	b.n	195d4 <__aeabi_fsub+0x160>
   1979a:	0033      	movs	r3, r6
   1979c:	e6b0      	b.n	19500 <__aeabi_fsub+0x8c>
   1979e:	2301      	movs	r3, #1
   197a0:	e7c0      	b.n	19724 <__aeabi_fsub+0x2b0>
   197a2:	46c0      	nop			; (mov r8, r8)
   197a4:	7dffffff 	.word	0x7dffffff
   197a8:	fbffffff 	.word	0xfbffffff

000197ac <__aeabi_f2iz>:
   197ac:	0241      	lsls	r1, r0, #9
   197ae:	0043      	lsls	r3, r0, #1
   197b0:	0fc2      	lsrs	r2, r0, #31
   197b2:	0a49      	lsrs	r1, r1, #9
   197b4:	0e1b      	lsrs	r3, r3, #24
   197b6:	2000      	movs	r0, #0
   197b8:	2b7e      	cmp	r3, #126	; 0x7e
   197ba:	dd0d      	ble.n	197d8 <__aeabi_f2iz+0x2c>
   197bc:	2b9d      	cmp	r3, #157	; 0x9d
   197be:	dc0c      	bgt.n	197da <__aeabi_f2iz+0x2e>
   197c0:	2080      	movs	r0, #128	; 0x80
   197c2:	0400      	lsls	r0, r0, #16
   197c4:	4301      	orrs	r1, r0
   197c6:	2b95      	cmp	r3, #149	; 0x95
   197c8:	dc0a      	bgt.n	197e0 <__aeabi_f2iz+0x34>
   197ca:	2096      	movs	r0, #150	; 0x96
   197cc:	1ac3      	subs	r3, r0, r3
   197ce:	40d9      	lsrs	r1, r3
   197d0:	4248      	negs	r0, r1
   197d2:	2a00      	cmp	r2, #0
   197d4:	d100      	bne.n	197d8 <__aeabi_f2iz+0x2c>
   197d6:	0008      	movs	r0, r1
   197d8:	4770      	bx	lr
   197da:	4b03      	ldr	r3, [pc, #12]	; (197e8 <__aeabi_f2iz+0x3c>)
   197dc:	18d0      	adds	r0, r2, r3
   197de:	e7fb      	b.n	197d8 <__aeabi_f2iz+0x2c>
   197e0:	3b96      	subs	r3, #150	; 0x96
   197e2:	4099      	lsls	r1, r3
   197e4:	e7f4      	b.n	197d0 <__aeabi_f2iz+0x24>
   197e6:	46c0      	nop			; (mov r8, r8)
   197e8:	7fffffff 	.word	0x7fffffff

000197ec <__aeabi_i2f>:
   197ec:	b570      	push	{r4, r5, r6, lr}
   197ee:	2800      	cmp	r0, #0
   197f0:	d030      	beq.n	19854 <__aeabi_i2f+0x68>
   197f2:	17c3      	asrs	r3, r0, #31
   197f4:	18c4      	adds	r4, r0, r3
   197f6:	405c      	eors	r4, r3
   197f8:	0fc5      	lsrs	r5, r0, #31
   197fa:	0020      	movs	r0, r4
   197fc:	f001 fe20 	bl	1b440 <__clzsi2>
   19800:	239e      	movs	r3, #158	; 0x9e
   19802:	1a1b      	subs	r3, r3, r0
   19804:	2b96      	cmp	r3, #150	; 0x96
   19806:	dc0d      	bgt.n	19824 <__aeabi_i2f+0x38>
   19808:	2296      	movs	r2, #150	; 0x96
   1980a:	1ad2      	subs	r2, r2, r3
   1980c:	4094      	lsls	r4, r2
   1980e:	002a      	movs	r2, r5
   19810:	0264      	lsls	r4, r4, #9
   19812:	0a64      	lsrs	r4, r4, #9
   19814:	b2db      	uxtb	r3, r3
   19816:	0264      	lsls	r4, r4, #9
   19818:	05db      	lsls	r3, r3, #23
   1981a:	0a60      	lsrs	r0, r4, #9
   1981c:	07d2      	lsls	r2, r2, #31
   1981e:	4318      	orrs	r0, r3
   19820:	4310      	orrs	r0, r2
   19822:	bd70      	pop	{r4, r5, r6, pc}
   19824:	2b99      	cmp	r3, #153	; 0x99
   19826:	dc19      	bgt.n	1985c <__aeabi_i2f+0x70>
   19828:	2299      	movs	r2, #153	; 0x99
   1982a:	1ad2      	subs	r2, r2, r3
   1982c:	2a00      	cmp	r2, #0
   1982e:	dd29      	ble.n	19884 <__aeabi_i2f+0x98>
   19830:	4094      	lsls	r4, r2
   19832:	0022      	movs	r2, r4
   19834:	4c14      	ldr	r4, [pc, #80]	; (19888 <__aeabi_i2f+0x9c>)
   19836:	4014      	ands	r4, r2
   19838:	0751      	lsls	r1, r2, #29
   1983a:	d004      	beq.n	19846 <__aeabi_i2f+0x5a>
   1983c:	210f      	movs	r1, #15
   1983e:	400a      	ands	r2, r1
   19840:	2a04      	cmp	r2, #4
   19842:	d000      	beq.n	19846 <__aeabi_i2f+0x5a>
   19844:	3404      	adds	r4, #4
   19846:	0162      	lsls	r2, r4, #5
   19848:	d413      	bmi.n	19872 <__aeabi_i2f+0x86>
   1984a:	01a4      	lsls	r4, r4, #6
   1984c:	0a64      	lsrs	r4, r4, #9
   1984e:	b2db      	uxtb	r3, r3
   19850:	002a      	movs	r2, r5
   19852:	e7e0      	b.n	19816 <__aeabi_i2f+0x2a>
   19854:	2200      	movs	r2, #0
   19856:	2300      	movs	r3, #0
   19858:	2400      	movs	r4, #0
   1985a:	e7dc      	b.n	19816 <__aeabi_i2f+0x2a>
   1985c:	2205      	movs	r2, #5
   1985e:	0021      	movs	r1, r4
   19860:	1a12      	subs	r2, r2, r0
   19862:	40d1      	lsrs	r1, r2
   19864:	22b9      	movs	r2, #185	; 0xb9
   19866:	1ad2      	subs	r2, r2, r3
   19868:	4094      	lsls	r4, r2
   1986a:	1e62      	subs	r2, r4, #1
   1986c:	4194      	sbcs	r4, r2
   1986e:	430c      	orrs	r4, r1
   19870:	e7da      	b.n	19828 <__aeabi_i2f+0x3c>
   19872:	4b05      	ldr	r3, [pc, #20]	; (19888 <__aeabi_i2f+0x9c>)
   19874:	002a      	movs	r2, r5
   19876:	401c      	ands	r4, r3
   19878:	239f      	movs	r3, #159	; 0x9f
   1987a:	01a4      	lsls	r4, r4, #6
   1987c:	1a1b      	subs	r3, r3, r0
   1987e:	0a64      	lsrs	r4, r4, #9
   19880:	b2db      	uxtb	r3, r3
   19882:	e7c8      	b.n	19816 <__aeabi_i2f+0x2a>
   19884:	0022      	movs	r2, r4
   19886:	e7d5      	b.n	19834 <__aeabi_i2f+0x48>
   19888:	fbffffff 	.word	0xfbffffff

0001988c <__aeabi_dadd>:
   1988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1988e:	4645      	mov	r5, r8
   19890:	46de      	mov	lr, fp
   19892:	4657      	mov	r7, sl
   19894:	464e      	mov	r6, r9
   19896:	030c      	lsls	r4, r1, #12
   19898:	b5e0      	push	{r5, r6, r7, lr}
   1989a:	004e      	lsls	r6, r1, #1
   1989c:	0fc9      	lsrs	r1, r1, #31
   1989e:	4688      	mov	r8, r1
   198a0:	000d      	movs	r5, r1
   198a2:	0a61      	lsrs	r1, r4, #9
   198a4:	0f44      	lsrs	r4, r0, #29
   198a6:	430c      	orrs	r4, r1
   198a8:	00c7      	lsls	r7, r0, #3
   198aa:	0319      	lsls	r1, r3, #12
   198ac:	0058      	lsls	r0, r3, #1
   198ae:	0fdb      	lsrs	r3, r3, #31
   198b0:	469b      	mov	fp, r3
   198b2:	0a4b      	lsrs	r3, r1, #9
   198b4:	0f51      	lsrs	r1, r2, #29
   198b6:	430b      	orrs	r3, r1
   198b8:	0d76      	lsrs	r6, r6, #21
   198ba:	0d40      	lsrs	r0, r0, #21
   198bc:	0019      	movs	r1, r3
   198be:	00d2      	lsls	r2, r2, #3
   198c0:	45d8      	cmp	r8, fp
   198c2:	d100      	bne.n	198c6 <__aeabi_dadd+0x3a>
   198c4:	e0ae      	b.n	19a24 <__aeabi_dadd+0x198>
   198c6:	1a35      	subs	r5, r6, r0
   198c8:	2d00      	cmp	r5, #0
   198ca:	dc00      	bgt.n	198ce <__aeabi_dadd+0x42>
   198cc:	e0f6      	b.n	19abc <__aeabi_dadd+0x230>
   198ce:	2800      	cmp	r0, #0
   198d0:	d10f      	bne.n	198f2 <__aeabi_dadd+0x66>
   198d2:	4313      	orrs	r3, r2
   198d4:	d100      	bne.n	198d8 <__aeabi_dadd+0x4c>
   198d6:	e0db      	b.n	19a90 <__aeabi_dadd+0x204>
   198d8:	1e6b      	subs	r3, r5, #1
   198da:	2b00      	cmp	r3, #0
   198dc:	d000      	beq.n	198e0 <__aeabi_dadd+0x54>
   198de:	e137      	b.n	19b50 <__aeabi_dadd+0x2c4>
   198e0:	1aba      	subs	r2, r7, r2
   198e2:	4297      	cmp	r7, r2
   198e4:	41bf      	sbcs	r7, r7
   198e6:	1a64      	subs	r4, r4, r1
   198e8:	427f      	negs	r7, r7
   198ea:	1be4      	subs	r4, r4, r7
   198ec:	2601      	movs	r6, #1
   198ee:	0017      	movs	r7, r2
   198f0:	e024      	b.n	1993c <__aeabi_dadd+0xb0>
   198f2:	4bc6      	ldr	r3, [pc, #792]	; (19c0c <__aeabi_dadd+0x380>)
   198f4:	429e      	cmp	r6, r3
   198f6:	d04d      	beq.n	19994 <__aeabi_dadd+0x108>
   198f8:	2380      	movs	r3, #128	; 0x80
   198fa:	041b      	lsls	r3, r3, #16
   198fc:	4319      	orrs	r1, r3
   198fe:	2d38      	cmp	r5, #56	; 0x38
   19900:	dd00      	ble.n	19904 <__aeabi_dadd+0x78>
   19902:	e107      	b.n	19b14 <__aeabi_dadd+0x288>
   19904:	2d1f      	cmp	r5, #31
   19906:	dd00      	ble.n	1990a <__aeabi_dadd+0x7e>
   19908:	e138      	b.n	19b7c <__aeabi_dadd+0x2f0>
   1990a:	2020      	movs	r0, #32
   1990c:	1b43      	subs	r3, r0, r5
   1990e:	469a      	mov	sl, r3
   19910:	000b      	movs	r3, r1
   19912:	4650      	mov	r0, sl
   19914:	4083      	lsls	r3, r0
   19916:	4699      	mov	r9, r3
   19918:	0013      	movs	r3, r2
   1991a:	4648      	mov	r0, r9
   1991c:	40eb      	lsrs	r3, r5
   1991e:	4318      	orrs	r0, r3
   19920:	0003      	movs	r3, r0
   19922:	4650      	mov	r0, sl
   19924:	4082      	lsls	r2, r0
   19926:	1e50      	subs	r0, r2, #1
   19928:	4182      	sbcs	r2, r0
   1992a:	40e9      	lsrs	r1, r5
   1992c:	431a      	orrs	r2, r3
   1992e:	1aba      	subs	r2, r7, r2
   19930:	1a61      	subs	r1, r4, r1
   19932:	4297      	cmp	r7, r2
   19934:	41a4      	sbcs	r4, r4
   19936:	0017      	movs	r7, r2
   19938:	4264      	negs	r4, r4
   1993a:	1b0c      	subs	r4, r1, r4
   1993c:	0223      	lsls	r3, r4, #8
   1993e:	d562      	bpl.n	19a06 <__aeabi_dadd+0x17a>
   19940:	0264      	lsls	r4, r4, #9
   19942:	0a65      	lsrs	r5, r4, #9
   19944:	2d00      	cmp	r5, #0
   19946:	d100      	bne.n	1994a <__aeabi_dadd+0xbe>
   19948:	e0df      	b.n	19b0a <__aeabi_dadd+0x27e>
   1994a:	0028      	movs	r0, r5
   1994c:	f001 fd78 	bl	1b440 <__clzsi2>
   19950:	0003      	movs	r3, r0
   19952:	3b08      	subs	r3, #8
   19954:	2b1f      	cmp	r3, #31
   19956:	dd00      	ble.n	1995a <__aeabi_dadd+0xce>
   19958:	e0d2      	b.n	19b00 <__aeabi_dadd+0x274>
   1995a:	2220      	movs	r2, #32
   1995c:	003c      	movs	r4, r7
   1995e:	1ad2      	subs	r2, r2, r3
   19960:	409d      	lsls	r5, r3
   19962:	40d4      	lsrs	r4, r2
   19964:	409f      	lsls	r7, r3
   19966:	4325      	orrs	r5, r4
   19968:	429e      	cmp	r6, r3
   1996a:	dd00      	ble.n	1996e <__aeabi_dadd+0xe2>
   1996c:	e0c4      	b.n	19af8 <__aeabi_dadd+0x26c>
   1996e:	1b9e      	subs	r6, r3, r6
   19970:	1c73      	adds	r3, r6, #1
   19972:	2b1f      	cmp	r3, #31
   19974:	dd00      	ble.n	19978 <__aeabi_dadd+0xec>
   19976:	e0f1      	b.n	19b5c <__aeabi_dadd+0x2d0>
   19978:	2220      	movs	r2, #32
   1997a:	0038      	movs	r0, r7
   1997c:	0029      	movs	r1, r5
   1997e:	1ad2      	subs	r2, r2, r3
   19980:	40d8      	lsrs	r0, r3
   19982:	4091      	lsls	r1, r2
   19984:	4097      	lsls	r7, r2
   19986:	002c      	movs	r4, r5
   19988:	4301      	orrs	r1, r0
   1998a:	1e78      	subs	r0, r7, #1
   1998c:	4187      	sbcs	r7, r0
   1998e:	40dc      	lsrs	r4, r3
   19990:	2600      	movs	r6, #0
   19992:	430f      	orrs	r7, r1
   19994:	077b      	lsls	r3, r7, #29
   19996:	d009      	beq.n	199ac <__aeabi_dadd+0x120>
   19998:	230f      	movs	r3, #15
   1999a:	403b      	ands	r3, r7
   1999c:	2b04      	cmp	r3, #4
   1999e:	d005      	beq.n	199ac <__aeabi_dadd+0x120>
   199a0:	1d3b      	adds	r3, r7, #4
   199a2:	42bb      	cmp	r3, r7
   199a4:	41bf      	sbcs	r7, r7
   199a6:	427f      	negs	r7, r7
   199a8:	19e4      	adds	r4, r4, r7
   199aa:	001f      	movs	r7, r3
   199ac:	0223      	lsls	r3, r4, #8
   199ae:	d52c      	bpl.n	19a0a <__aeabi_dadd+0x17e>
   199b0:	4b96      	ldr	r3, [pc, #600]	; (19c0c <__aeabi_dadd+0x380>)
   199b2:	3601      	adds	r6, #1
   199b4:	429e      	cmp	r6, r3
   199b6:	d100      	bne.n	199ba <__aeabi_dadd+0x12e>
   199b8:	e09a      	b.n	19af0 <__aeabi_dadd+0x264>
   199ba:	4645      	mov	r5, r8
   199bc:	4b94      	ldr	r3, [pc, #592]	; (19c10 <__aeabi_dadd+0x384>)
   199be:	08ff      	lsrs	r7, r7, #3
   199c0:	401c      	ands	r4, r3
   199c2:	0760      	lsls	r0, r4, #29
   199c4:	0576      	lsls	r6, r6, #21
   199c6:	0264      	lsls	r4, r4, #9
   199c8:	4307      	orrs	r7, r0
   199ca:	0b24      	lsrs	r4, r4, #12
   199cc:	0d76      	lsrs	r6, r6, #21
   199ce:	2100      	movs	r1, #0
   199d0:	0324      	lsls	r4, r4, #12
   199d2:	0b23      	lsrs	r3, r4, #12
   199d4:	0d0c      	lsrs	r4, r1, #20
   199d6:	4a8f      	ldr	r2, [pc, #572]	; (19c14 <__aeabi_dadd+0x388>)
   199d8:	0524      	lsls	r4, r4, #20
   199da:	431c      	orrs	r4, r3
   199dc:	4014      	ands	r4, r2
   199de:	0533      	lsls	r3, r6, #20
   199e0:	4323      	orrs	r3, r4
   199e2:	005b      	lsls	r3, r3, #1
   199e4:	07ed      	lsls	r5, r5, #31
   199e6:	085b      	lsrs	r3, r3, #1
   199e8:	432b      	orrs	r3, r5
   199ea:	0038      	movs	r0, r7
   199ec:	0019      	movs	r1, r3
   199ee:	bc3c      	pop	{r2, r3, r4, r5}
   199f0:	4690      	mov	r8, r2
   199f2:	4699      	mov	r9, r3
   199f4:	46a2      	mov	sl, r4
   199f6:	46ab      	mov	fp, r5
   199f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199fa:	4664      	mov	r4, ip
   199fc:	4304      	orrs	r4, r0
   199fe:	d100      	bne.n	19a02 <__aeabi_dadd+0x176>
   19a00:	e211      	b.n	19e26 <__aeabi_dadd+0x59a>
   19a02:	0004      	movs	r4, r0
   19a04:	4667      	mov	r7, ip
   19a06:	077b      	lsls	r3, r7, #29
   19a08:	d1c6      	bne.n	19998 <__aeabi_dadd+0x10c>
   19a0a:	4645      	mov	r5, r8
   19a0c:	0760      	lsls	r0, r4, #29
   19a0e:	08ff      	lsrs	r7, r7, #3
   19a10:	4307      	orrs	r7, r0
   19a12:	08e4      	lsrs	r4, r4, #3
   19a14:	4b7d      	ldr	r3, [pc, #500]	; (19c0c <__aeabi_dadd+0x380>)
   19a16:	429e      	cmp	r6, r3
   19a18:	d030      	beq.n	19a7c <__aeabi_dadd+0x1f0>
   19a1a:	0324      	lsls	r4, r4, #12
   19a1c:	0576      	lsls	r6, r6, #21
   19a1e:	0b24      	lsrs	r4, r4, #12
   19a20:	0d76      	lsrs	r6, r6, #21
   19a22:	e7d4      	b.n	199ce <__aeabi_dadd+0x142>
   19a24:	1a33      	subs	r3, r6, r0
   19a26:	469a      	mov	sl, r3
   19a28:	2b00      	cmp	r3, #0
   19a2a:	dd78      	ble.n	19b1e <__aeabi_dadd+0x292>
   19a2c:	2800      	cmp	r0, #0
   19a2e:	d031      	beq.n	19a94 <__aeabi_dadd+0x208>
   19a30:	4876      	ldr	r0, [pc, #472]	; (19c0c <__aeabi_dadd+0x380>)
   19a32:	4286      	cmp	r6, r0
   19a34:	d0ae      	beq.n	19994 <__aeabi_dadd+0x108>
   19a36:	2080      	movs	r0, #128	; 0x80
   19a38:	0400      	lsls	r0, r0, #16
   19a3a:	4301      	orrs	r1, r0
   19a3c:	4653      	mov	r3, sl
   19a3e:	2b38      	cmp	r3, #56	; 0x38
   19a40:	dc00      	bgt.n	19a44 <__aeabi_dadd+0x1b8>
   19a42:	e0e9      	b.n	19c18 <__aeabi_dadd+0x38c>
   19a44:	430a      	orrs	r2, r1
   19a46:	1e51      	subs	r1, r2, #1
   19a48:	418a      	sbcs	r2, r1
   19a4a:	2100      	movs	r1, #0
   19a4c:	19d2      	adds	r2, r2, r7
   19a4e:	42ba      	cmp	r2, r7
   19a50:	41bf      	sbcs	r7, r7
   19a52:	1909      	adds	r1, r1, r4
   19a54:	427c      	negs	r4, r7
   19a56:	0017      	movs	r7, r2
   19a58:	190c      	adds	r4, r1, r4
   19a5a:	0223      	lsls	r3, r4, #8
   19a5c:	d5d3      	bpl.n	19a06 <__aeabi_dadd+0x17a>
   19a5e:	4b6b      	ldr	r3, [pc, #428]	; (19c0c <__aeabi_dadd+0x380>)
   19a60:	3601      	adds	r6, #1
   19a62:	429e      	cmp	r6, r3
   19a64:	d100      	bne.n	19a68 <__aeabi_dadd+0x1dc>
   19a66:	e13a      	b.n	19cde <__aeabi_dadd+0x452>
   19a68:	2001      	movs	r0, #1
   19a6a:	4b69      	ldr	r3, [pc, #420]	; (19c10 <__aeabi_dadd+0x384>)
   19a6c:	401c      	ands	r4, r3
   19a6e:	087b      	lsrs	r3, r7, #1
   19a70:	4007      	ands	r7, r0
   19a72:	431f      	orrs	r7, r3
   19a74:	07e0      	lsls	r0, r4, #31
   19a76:	4307      	orrs	r7, r0
   19a78:	0864      	lsrs	r4, r4, #1
   19a7a:	e78b      	b.n	19994 <__aeabi_dadd+0x108>
   19a7c:	0023      	movs	r3, r4
   19a7e:	433b      	orrs	r3, r7
   19a80:	d100      	bne.n	19a84 <__aeabi_dadd+0x1f8>
   19a82:	e1cb      	b.n	19e1c <__aeabi_dadd+0x590>
   19a84:	2280      	movs	r2, #128	; 0x80
   19a86:	0312      	lsls	r2, r2, #12
   19a88:	4314      	orrs	r4, r2
   19a8a:	0324      	lsls	r4, r4, #12
   19a8c:	0b24      	lsrs	r4, r4, #12
   19a8e:	e79e      	b.n	199ce <__aeabi_dadd+0x142>
   19a90:	002e      	movs	r6, r5
   19a92:	e77f      	b.n	19994 <__aeabi_dadd+0x108>
   19a94:	0008      	movs	r0, r1
   19a96:	4310      	orrs	r0, r2
   19a98:	d100      	bne.n	19a9c <__aeabi_dadd+0x210>
   19a9a:	e0b4      	b.n	19c06 <__aeabi_dadd+0x37a>
   19a9c:	1e58      	subs	r0, r3, #1
   19a9e:	2800      	cmp	r0, #0
   19aa0:	d000      	beq.n	19aa4 <__aeabi_dadd+0x218>
   19aa2:	e0de      	b.n	19c62 <__aeabi_dadd+0x3d6>
   19aa4:	18ba      	adds	r2, r7, r2
   19aa6:	42ba      	cmp	r2, r7
   19aa8:	419b      	sbcs	r3, r3
   19aaa:	1864      	adds	r4, r4, r1
   19aac:	425b      	negs	r3, r3
   19aae:	18e4      	adds	r4, r4, r3
   19ab0:	0017      	movs	r7, r2
   19ab2:	2601      	movs	r6, #1
   19ab4:	0223      	lsls	r3, r4, #8
   19ab6:	d5a6      	bpl.n	19a06 <__aeabi_dadd+0x17a>
   19ab8:	2602      	movs	r6, #2
   19aba:	e7d5      	b.n	19a68 <__aeabi_dadd+0x1dc>
   19abc:	2d00      	cmp	r5, #0
   19abe:	d16e      	bne.n	19b9e <__aeabi_dadd+0x312>
   19ac0:	1c70      	adds	r0, r6, #1
   19ac2:	0540      	lsls	r0, r0, #21
   19ac4:	0d40      	lsrs	r0, r0, #21
   19ac6:	2801      	cmp	r0, #1
   19ac8:	dc00      	bgt.n	19acc <__aeabi_dadd+0x240>
   19aca:	e0f9      	b.n	19cc0 <__aeabi_dadd+0x434>
   19acc:	1ab8      	subs	r0, r7, r2
   19ace:	4684      	mov	ip, r0
   19ad0:	4287      	cmp	r7, r0
   19ad2:	4180      	sbcs	r0, r0
   19ad4:	1ae5      	subs	r5, r4, r3
   19ad6:	4240      	negs	r0, r0
   19ad8:	1a2d      	subs	r5, r5, r0
   19ada:	0228      	lsls	r0, r5, #8
   19adc:	d400      	bmi.n	19ae0 <__aeabi_dadd+0x254>
   19ade:	e089      	b.n	19bf4 <__aeabi_dadd+0x368>
   19ae0:	1bd7      	subs	r7, r2, r7
   19ae2:	42ba      	cmp	r2, r7
   19ae4:	4192      	sbcs	r2, r2
   19ae6:	1b1c      	subs	r4, r3, r4
   19ae8:	4252      	negs	r2, r2
   19aea:	1aa5      	subs	r5, r4, r2
   19aec:	46d8      	mov	r8, fp
   19aee:	e729      	b.n	19944 <__aeabi_dadd+0xb8>
   19af0:	4645      	mov	r5, r8
   19af2:	2400      	movs	r4, #0
   19af4:	2700      	movs	r7, #0
   19af6:	e76a      	b.n	199ce <__aeabi_dadd+0x142>
   19af8:	4c45      	ldr	r4, [pc, #276]	; (19c10 <__aeabi_dadd+0x384>)
   19afa:	1af6      	subs	r6, r6, r3
   19afc:	402c      	ands	r4, r5
   19afe:	e749      	b.n	19994 <__aeabi_dadd+0x108>
   19b00:	003d      	movs	r5, r7
   19b02:	3828      	subs	r0, #40	; 0x28
   19b04:	4085      	lsls	r5, r0
   19b06:	2700      	movs	r7, #0
   19b08:	e72e      	b.n	19968 <__aeabi_dadd+0xdc>
   19b0a:	0038      	movs	r0, r7
   19b0c:	f001 fc98 	bl	1b440 <__clzsi2>
   19b10:	3020      	adds	r0, #32
   19b12:	e71d      	b.n	19950 <__aeabi_dadd+0xc4>
   19b14:	430a      	orrs	r2, r1
   19b16:	1e51      	subs	r1, r2, #1
   19b18:	418a      	sbcs	r2, r1
   19b1a:	2100      	movs	r1, #0
   19b1c:	e707      	b.n	1992e <__aeabi_dadd+0xa2>
   19b1e:	2b00      	cmp	r3, #0
   19b20:	d000      	beq.n	19b24 <__aeabi_dadd+0x298>
   19b22:	e0f3      	b.n	19d0c <__aeabi_dadd+0x480>
   19b24:	1c70      	adds	r0, r6, #1
   19b26:	0543      	lsls	r3, r0, #21
   19b28:	0d5b      	lsrs	r3, r3, #21
   19b2a:	2b01      	cmp	r3, #1
   19b2c:	dc00      	bgt.n	19b30 <__aeabi_dadd+0x2a4>
   19b2e:	e0ad      	b.n	19c8c <__aeabi_dadd+0x400>
   19b30:	4b36      	ldr	r3, [pc, #216]	; (19c0c <__aeabi_dadd+0x380>)
   19b32:	4298      	cmp	r0, r3
   19b34:	d100      	bne.n	19b38 <__aeabi_dadd+0x2ac>
   19b36:	e0d1      	b.n	19cdc <__aeabi_dadd+0x450>
   19b38:	18ba      	adds	r2, r7, r2
   19b3a:	42ba      	cmp	r2, r7
   19b3c:	41bf      	sbcs	r7, r7
   19b3e:	1864      	adds	r4, r4, r1
   19b40:	427f      	negs	r7, r7
   19b42:	19e4      	adds	r4, r4, r7
   19b44:	07e7      	lsls	r7, r4, #31
   19b46:	0852      	lsrs	r2, r2, #1
   19b48:	4317      	orrs	r7, r2
   19b4a:	0864      	lsrs	r4, r4, #1
   19b4c:	0006      	movs	r6, r0
   19b4e:	e721      	b.n	19994 <__aeabi_dadd+0x108>
   19b50:	482e      	ldr	r0, [pc, #184]	; (19c0c <__aeabi_dadd+0x380>)
   19b52:	4285      	cmp	r5, r0
   19b54:	d100      	bne.n	19b58 <__aeabi_dadd+0x2cc>
   19b56:	e093      	b.n	19c80 <__aeabi_dadd+0x3f4>
   19b58:	001d      	movs	r5, r3
   19b5a:	e6d0      	b.n	198fe <__aeabi_dadd+0x72>
   19b5c:	0029      	movs	r1, r5
   19b5e:	3e1f      	subs	r6, #31
   19b60:	40f1      	lsrs	r1, r6
   19b62:	2b20      	cmp	r3, #32
   19b64:	d100      	bne.n	19b68 <__aeabi_dadd+0x2dc>
   19b66:	e08d      	b.n	19c84 <__aeabi_dadd+0x3f8>
   19b68:	2240      	movs	r2, #64	; 0x40
   19b6a:	1ad3      	subs	r3, r2, r3
   19b6c:	409d      	lsls	r5, r3
   19b6e:	432f      	orrs	r7, r5
   19b70:	1e7d      	subs	r5, r7, #1
   19b72:	41af      	sbcs	r7, r5
   19b74:	2400      	movs	r4, #0
   19b76:	430f      	orrs	r7, r1
   19b78:	2600      	movs	r6, #0
   19b7a:	e744      	b.n	19a06 <__aeabi_dadd+0x17a>
   19b7c:	002b      	movs	r3, r5
   19b7e:	0008      	movs	r0, r1
   19b80:	3b20      	subs	r3, #32
   19b82:	40d8      	lsrs	r0, r3
   19b84:	0003      	movs	r3, r0
   19b86:	2d20      	cmp	r5, #32
   19b88:	d100      	bne.n	19b8c <__aeabi_dadd+0x300>
   19b8a:	e07d      	b.n	19c88 <__aeabi_dadd+0x3fc>
   19b8c:	2040      	movs	r0, #64	; 0x40
   19b8e:	1b45      	subs	r5, r0, r5
   19b90:	40a9      	lsls	r1, r5
   19b92:	430a      	orrs	r2, r1
   19b94:	1e51      	subs	r1, r2, #1
   19b96:	418a      	sbcs	r2, r1
   19b98:	2100      	movs	r1, #0
   19b9a:	431a      	orrs	r2, r3
   19b9c:	e6c7      	b.n	1992e <__aeabi_dadd+0xa2>
   19b9e:	2e00      	cmp	r6, #0
   19ba0:	d050      	beq.n	19c44 <__aeabi_dadd+0x3b8>
   19ba2:	4e1a      	ldr	r6, [pc, #104]	; (19c0c <__aeabi_dadd+0x380>)
   19ba4:	42b0      	cmp	r0, r6
   19ba6:	d057      	beq.n	19c58 <__aeabi_dadd+0x3cc>
   19ba8:	2680      	movs	r6, #128	; 0x80
   19baa:	426b      	negs	r3, r5
   19bac:	4699      	mov	r9, r3
   19bae:	0436      	lsls	r6, r6, #16
   19bb0:	4334      	orrs	r4, r6
   19bb2:	464b      	mov	r3, r9
   19bb4:	2b38      	cmp	r3, #56	; 0x38
   19bb6:	dd00      	ble.n	19bba <__aeabi_dadd+0x32e>
   19bb8:	e0d6      	b.n	19d68 <__aeabi_dadd+0x4dc>
   19bba:	2b1f      	cmp	r3, #31
   19bbc:	dd00      	ble.n	19bc0 <__aeabi_dadd+0x334>
   19bbe:	e135      	b.n	19e2c <__aeabi_dadd+0x5a0>
   19bc0:	2620      	movs	r6, #32
   19bc2:	1af5      	subs	r5, r6, r3
   19bc4:	0026      	movs	r6, r4
   19bc6:	40ae      	lsls	r6, r5
   19bc8:	46b2      	mov	sl, r6
   19bca:	003e      	movs	r6, r7
   19bcc:	40de      	lsrs	r6, r3
   19bce:	46ac      	mov	ip, r5
   19bd0:	0035      	movs	r5, r6
   19bd2:	4656      	mov	r6, sl
   19bd4:	432e      	orrs	r6, r5
   19bd6:	4665      	mov	r5, ip
   19bd8:	40af      	lsls	r7, r5
   19bda:	1e7d      	subs	r5, r7, #1
   19bdc:	41af      	sbcs	r7, r5
   19bde:	40dc      	lsrs	r4, r3
   19be0:	4337      	orrs	r7, r6
   19be2:	1bd7      	subs	r7, r2, r7
   19be4:	42ba      	cmp	r2, r7
   19be6:	4192      	sbcs	r2, r2
   19be8:	1b0c      	subs	r4, r1, r4
   19bea:	4252      	negs	r2, r2
   19bec:	1aa4      	subs	r4, r4, r2
   19bee:	0006      	movs	r6, r0
   19bf0:	46d8      	mov	r8, fp
   19bf2:	e6a3      	b.n	1993c <__aeabi_dadd+0xb0>
   19bf4:	4664      	mov	r4, ip
   19bf6:	4667      	mov	r7, ip
   19bf8:	432c      	orrs	r4, r5
   19bfa:	d000      	beq.n	19bfe <__aeabi_dadd+0x372>
   19bfc:	e6a2      	b.n	19944 <__aeabi_dadd+0xb8>
   19bfe:	2500      	movs	r5, #0
   19c00:	2600      	movs	r6, #0
   19c02:	2700      	movs	r7, #0
   19c04:	e706      	b.n	19a14 <__aeabi_dadd+0x188>
   19c06:	001e      	movs	r6, r3
   19c08:	e6c4      	b.n	19994 <__aeabi_dadd+0x108>
   19c0a:	46c0      	nop			; (mov r8, r8)
   19c0c:	000007ff 	.word	0x000007ff
   19c10:	ff7fffff 	.word	0xff7fffff
   19c14:	800fffff 	.word	0x800fffff
   19c18:	2b1f      	cmp	r3, #31
   19c1a:	dc63      	bgt.n	19ce4 <__aeabi_dadd+0x458>
   19c1c:	2020      	movs	r0, #32
   19c1e:	1ac3      	subs	r3, r0, r3
   19c20:	0008      	movs	r0, r1
   19c22:	4098      	lsls	r0, r3
   19c24:	469c      	mov	ip, r3
   19c26:	4683      	mov	fp, r0
   19c28:	4653      	mov	r3, sl
   19c2a:	0010      	movs	r0, r2
   19c2c:	40d8      	lsrs	r0, r3
   19c2e:	0003      	movs	r3, r0
   19c30:	4658      	mov	r0, fp
   19c32:	4318      	orrs	r0, r3
   19c34:	4663      	mov	r3, ip
   19c36:	409a      	lsls	r2, r3
   19c38:	1e53      	subs	r3, r2, #1
   19c3a:	419a      	sbcs	r2, r3
   19c3c:	4653      	mov	r3, sl
   19c3e:	4302      	orrs	r2, r0
   19c40:	40d9      	lsrs	r1, r3
   19c42:	e703      	b.n	19a4c <__aeabi_dadd+0x1c0>
   19c44:	0026      	movs	r6, r4
   19c46:	433e      	orrs	r6, r7
   19c48:	d006      	beq.n	19c58 <__aeabi_dadd+0x3cc>
   19c4a:	43eb      	mvns	r3, r5
   19c4c:	4699      	mov	r9, r3
   19c4e:	2b00      	cmp	r3, #0
   19c50:	d0c7      	beq.n	19be2 <__aeabi_dadd+0x356>
   19c52:	4e94      	ldr	r6, [pc, #592]	; (19ea4 <__aeabi_dadd+0x618>)
   19c54:	42b0      	cmp	r0, r6
   19c56:	d1ac      	bne.n	19bb2 <__aeabi_dadd+0x326>
   19c58:	000c      	movs	r4, r1
   19c5a:	0017      	movs	r7, r2
   19c5c:	0006      	movs	r6, r0
   19c5e:	46d8      	mov	r8, fp
   19c60:	e698      	b.n	19994 <__aeabi_dadd+0x108>
   19c62:	4b90      	ldr	r3, [pc, #576]	; (19ea4 <__aeabi_dadd+0x618>)
   19c64:	459a      	cmp	sl, r3
   19c66:	d00b      	beq.n	19c80 <__aeabi_dadd+0x3f4>
   19c68:	4682      	mov	sl, r0
   19c6a:	e6e7      	b.n	19a3c <__aeabi_dadd+0x1b0>
   19c6c:	2800      	cmp	r0, #0
   19c6e:	d000      	beq.n	19c72 <__aeabi_dadd+0x3e6>
   19c70:	e09e      	b.n	19db0 <__aeabi_dadd+0x524>
   19c72:	0018      	movs	r0, r3
   19c74:	4310      	orrs	r0, r2
   19c76:	d100      	bne.n	19c7a <__aeabi_dadd+0x3ee>
   19c78:	e0e9      	b.n	19e4e <__aeabi_dadd+0x5c2>
   19c7a:	001c      	movs	r4, r3
   19c7c:	0017      	movs	r7, r2
   19c7e:	46d8      	mov	r8, fp
   19c80:	4e88      	ldr	r6, [pc, #544]	; (19ea4 <__aeabi_dadd+0x618>)
   19c82:	e687      	b.n	19994 <__aeabi_dadd+0x108>
   19c84:	2500      	movs	r5, #0
   19c86:	e772      	b.n	19b6e <__aeabi_dadd+0x2e2>
   19c88:	2100      	movs	r1, #0
   19c8a:	e782      	b.n	19b92 <__aeabi_dadd+0x306>
   19c8c:	0023      	movs	r3, r4
   19c8e:	433b      	orrs	r3, r7
   19c90:	2e00      	cmp	r6, #0
   19c92:	d000      	beq.n	19c96 <__aeabi_dadd+0x40a>
   19c94:	e0ab      	b.n	19dee <__aeabi_dadd+0x562>
   19c96:	2b00      	cmp	r3, #0
   19c98:	d100      	bne.n	19c9c <__aeabi_dadd+0x410>
   19c9a:	e0e7      	b.n	19e6c <__aeabi_dadd+0x5e0>
   19c9c:	000b      	movs	r3, r1
   19c9e:	4313      	orrs	r3, r2
   19ca0:	d100      	bne.n	19ca4 <__aeabi_dadd+0x418>
   19ca2:	e677      	b.n	19994 <__aeabi_dadd+0x108>
   19ca4:	18ba      	adds	r2, r7, r2
   19ca6:	42ba      	cmp	r2, r7
   19ca8:	41bf      	sbcs	r7, r7
   19caa:	1864      	adds	r4, r4, r1
   19cac:	427f      	negs	r7, r7
   19cae:	19e4      	adds	r4, r4, r7
   19cb0:	0223      	lsls	r3, r4, #8
   19cb2:	d400      	bmi.n	19cb6 <__aeabi_dadd+0x42a>
   19cb4:	e0f2      	b.n	19e9c <__aeabi_dadd+0x610>
   19cb6:	4b7c      	ldr	r3, [pc, #496]	; (19ea8 <__aeabi_dadd+0x61c>)
   19cb8:	0017      	movs	r7, r2
   19cba:	401c      	ands	r4, r3
   19cbc:	0006      	movs	r6, r0
   19cbe:	e669      	b.n	19994 <__aeabi_dadd+0x108>
   19cc0:	0020      	movs	r0, r4
   19cc2:	4338      	orrs	r0, r7
   19cc4:	2e00      	cmp	r6, #0
   19cc6:	d1d1      	bne.n	19c6c <__aeabi_dadd+0x3e0>
   19cc8:	2800      	cmp	r0, #0
   19cca:	d15b      	bne.n	19d84 <__aeabi_dadd+0x4f8>
   19ccc:	001c      	movs	r4, r3
   19cce:	4314      	orrs	r4, r2
   19cd0:	d100      	bne.n	19cd4 <__aeabi_dadd+0x448>
   19cd2:	e0a8      	b.n	19e26 <__aeabi_dadd+0x59a>
   19cd4:	001c      	movs	r4, r3
   19cd6:	0017      	movs	r7, r2
   19cd8:	46d8      	mov	r8, fp
   19cda:	e65b      	b.n	19994 <__aeabi_dadd+0x108>
   19cdc:	0006      	movs	r6, r0
   19cde:	2400      	movs	r4, #0
   19ce0:	2700      	movs	r7, #0
   19ce2:	e697      	b.n	19a14 <__aeabi_dadd+0x188>
   19ce4:	4650      	mov	r0, sl
   19ce6:	000b      	movs	r3, r1
   19ce8:	3820      	subs	r0, #32
   19cea:	40c3      	lsrs	r3, r0
   19cec:	4699      	mov	r9, r3
   19cee:	4653      	mov	r3, sl
   19cf0:	2b20      	cmp	r3, #32
   19cf2:	d100      	bne.n	19cf6 <__aeabi_dadd+0x46a>
   19cf4:	e095      	b.n	19e22 <__aeabi_dadd+0x596>
   19cf6:	2340      	movs	r3, #64	; 0x40
   19cf8:	4650      	mov	r0, sl
   19cfa:	1a1b      	subs	r3, r3, r0
   19cfc:	4099      	lsls	r1, r3
   19cfe:	430a      	orrs	r2, r1
   19d00:	1e51      	subs	r1, r2, #1
   19d02:	418a      	sbcs	r2, r1
   19d04:	464b      	mov	r3, r9
   19d06:	2100      	movs	r1, #0
   19d08:	431a      	orrs	r2, r3
   19d0a:	e69f      	b.n	19a4c <__aeabi_dadd+0x1c0>
   19d0c:	2e00      	cmp	r6, #0
   19d0e:	d130      	bne.n	19d72 <__aeabi_dadd+0x4e6>
   19d10:	0026      	movs	r6, r4
   19d12:	433e      	orrs	r6, r7
   19d14:	d067      	beq.n	19de6 <__aeabi_dadd+0x55a>
   19d16:	43db      	mvns	r3, r3
   19d18:	469a      	mov	sl, r3
   19d1a:	2b00      	cmp	r3, #0
   19d1c:	d01c      	beq.n	19d58 <__aeabi_dadd+0x4cc>
   19d1e:	4e61      	ldr	r6, [pc, #388]	; (19ea4 <__aeabi_dadd+0x618>)
   19d20:	42b0      	cmp	r0, r6
   19d22:	d060      	beq.n	19de6 <__aeabi_dadd+0x55a>
   19d24:	4653      	mov	r3, sl
   19d26:	2b38      	cmp	r3, #56	; 0x38
   19d28:	dd00      	ble.n	19d2c <__aeabi_dadd+0x4a0>
   19d2a:	e096      	b.n	19e5a <__aeabi_dadd+0x5ce>
   19d2c:	2b1f      	cmp	r3, #31
   19d2e:	dd00      	ble.n	19d32 <__aeabi_dadd+0x4a6>
   19d30:	e09f      	b.n	19e72 <__aeabi_dadd+0x5e6>
   19d32:	2620      	movs	r6, #32
   19d34:	1af3      	subs	r3, r6, r3
   19d36:	0026      	movs	r6, r4
   19d38:	409e      	lsls	r6, r3
   19d3a:	469c      	mov	ip, r3
   19d3c:	46b3      	mov	fp, r6
   19d3e:	4653      	mov	r3, sl
   19d40:	003e      	movs	r6, r7
   19d42:	40de      	lsrs	r6, r3
   19d44:	0033      	movs	r3, r6
   19d46:	465e      	mov	r6, fp
   19d48:	431e      	orrs	r6, r3
   19d4a:	4663      	mov	r3, ip
   19d4c:	409f      	lsls	r7, r3
   19d4e:	1e7b      	subs	r3, r7, #1
   19d50:	419f      	sbcs	r7, r3
   19d52:	4653      	mov	r3, sl
   19d54:	40dc      	lsrs	r4, r3
   19d56:	4337      	orrs	r7, r6
   19d58:	18bf      	adds	r7, r7, r2
   19d5a:	4297      	cmp	r7, r2
   19d5c:	4192      	sbcs	r2, r2
   19d5e:	1864      	adds	r4, r4, r1
   19d60:	4252      	negs	r2, r2
   19d62:	18a4      	adds	r4, r4, r2
   19d64:	0006      	movs	r6, r0
   19d66:	e678      	b.n	19a5a <__aeabi_dadd+0x1ce>
   19d68:	4327      	orrs	r7, r4
   19d6a:	1e7c      	subs	r4, r7, #1
   19d6c:	41a7      	sbcs	r7, r4
   19d6e:	2400      	movs	r4, #0
   19d70:	e737      	b.n	19be2 <__aeabi_dadd+0x356>
   19d72:	4e4c      	ldr	r6, [pc, #304]	; (19ea4 <__aeabi_dadd+0x618>)
   19d74:	42b0      	cmp	r0, r6
   19d76:	d036      	beq.n	19de6 <__aeabi_dadd+0x55a>
   19d78:	2680      	movs	r6, #128	; 0x80
   19d7a:	425b      	negs	r3, r3
   19d7c:	0436      	lsls	r6, r6, #16
   19d7e:	469a      	mov	sl, r3
   19d80:	4334      	orrs	r4, r6
   19d82:	e7cf      	b.n	19d24 <__aeabi_dadd+0x498>
   19d84:	0018      	movs	r0, r3
   19d86:	4310      	orrs	r0, r2
   19d88:	d100      	bne.n	19d8c <__aeabi_dadd+0x500>
   19d8a:	e603      	b.n	19994 <__aeabi_dadd+0x108>
   19d8c:	1ab8      	subs	r0, r7, r2
   19d8e:	4684      	mov	ip, r0
   19d90:	4567      	cmp	r7, ip
   19d92:	41ad      	sbcs	r5, r5
   19d94:	1ae0      	subs	r0, r4, r3
   19d96:	426d      	negs	r5, r5
   19d98:	1b40      	subs	r0, r0, r5
   19d9a:	0205      	lsls	r5, r0, #8
   19d9c:	d400      	bmi.n	19da0 <__aeabi_dadd+0x514>
   19d9e:	e62c      	b.n	199fa <__aeabi_dadd+0x16e>
   19da0:	1bd7      	subs	r7, r2, r7
   19da2:	42ba      	cmp	r2, r7
   19da4:	4192      	sbcs	r2, r2
   19da6:	1b1c      	subs	r4, r3, r4
   19da8:	4252      	negs	r2, r2
   19daa:	1aa4      	subs	r4, r4, r2
   19dac:	46d8      	mov	r8, fp
   19dae:	e5f1      	b.n	19994 <__aeabi_dadd+0x108>
   19db0:	0018      	movs	r0, r3
   19db2:	4310      	orrs	r0, r2
   19db4:	d100      	bne.n	19db8 <__aeabi_dadd+0x52c>
   19db6:	e763      	b.n	19c80 <__aeabi_dadd+0x3f4>
   19db8:	08f8      	lsrs	r0, r7, #3
   19dba:	0767      	lsls	r7, r4, #29
   19dbc:	4307      	orrs	r7, r0
   19dbe:	2080      	movs	r0, #128	; 0x80
   19dc0:	08e4      	lsrs	r4, r4, #3
   19dc2:	0300      	lsls	r0, r0, #12
   19dc4:	4204      	tst	r4, r0
   19dc6:	d008      	beq.n	19dda <__aeabi_dadd+0x54e>
   19dc8:	08dd      	lsrs	r5, r3, #3
   19dca:	4205      	tst	r5, r0
   19dcc:	d105      	bne.n	19dda <__aeabi_dadd+0x54e>
   19dce:	08d2      	lsrs	r2, r2, #3
   19dd0:	0759      	lsls	r1, r3, #29
   19dd2:	4311      	orrs	r1, r2
   19dd4:	000f      	movs	r7, r1
   19dd6:	002c      	movs	r4, r5
   19dd8:	46d8      	mov	r8, fp
   19dda:	0f7b      	lsrs	r3, r7, #29
   19ddc:	00e4      	lsls	r4, r4, #3
   19dde:	431c      	orrs	r4, r3
   19de0:	00ff      	lsls	r7, r7, #3
   19de2:	4e30      	ldr	r6, [pc, #192]	; (19ea4 <__aeabi_dadd+0x618>)
   19de4:	e5d6      	b.n	19994 <__aeabi_dadd+0x108>
   19de6:	000c      	movs	r4, r1
   19de8:	0017      	movs	r7, r2
   19dea:	0006      	movs	r6, r0
   19dec:	e5d2      	b.n	19994 <__aeabi_dadd+0x108>
   19dee:	2b00      	cmp	r3, #0
   19df0:	d038      	beq.n	19e64 <__aeabi_dadd+0x5d8>
   19df2:	000b      	movs	r3, r1
   19df4:	4313      	orrs	r3, r2
   19df6:	d100      	bne.n	19dfa <__aeabi_dadd+0x56e>
   19df8:	e742      	b.n	19c80 <__aeabi_dadd+0x3f4>
   19dfa:	08f8      	lsrs	r0, r7, #3
   19dfc:	0767      	lsls	r7, r4, #29
   19dfe:	4307      	orrs	r7, r0
   19e00:	2080      	movs	r0, #128	; 0x80
   19e02:	08e4      	lsrs	r4, r4, #3
   19e04:	0300      	lsls	r0, r0, #12
   19e06:	4204      	tst	r4, r0
   19e08:	d0e7      	beq.n	19dda <__aeabi_dadd+0x54e>
   19e0a:	08cb      	lsrs	r3, r1, #3
   19e0c:	4203      	tst	r3, r0
   19e0e:	d1e4      	bne.n	19dda <__aeabi_dadd+0x54e>
   19e10:	08d2      	lsrs	r2, r2, #3
   19e12:	0749      	lsls	r1, r1, #29
   19e14:	4311      	orrs	r1, r2
   19e16:	000f      	movs	r7, r1
   19e18:	001c      	movs	r4, r3
   19e1a:	e7de      	b.n	19dda <__aeabi_dadd+0x54e>
   19e1c:	2700      	movs	r7, #0
   19e1e:	2400      	movs	r4, #0
   19e20:	e5d5      	b.n	199ce <__aeabi_dadd+0x142>
   19e22:	2100      	movs	r1, #0
   19e24:	e76b      	b.n	19cfe <__aeabi_dadd+0x472>
   19e26:	2500      	movs	r5, #0
   19e28:	2700      	movs	r7, #0
   19e2a:	e5f3      	b.n	19a14 <__aeabi_dadd+0x188>
   19e2c:	464e      	mov	r6, r9
   19e2e:	0025      	movs	r5, r4
   19e30:	3e20      	subs	r6, #32
   19e32:	40f5      	lsrs	r5, r6
   19e34:	464b      	mov	r3, r9
   19e36:	002e      	movs	r6, r5
   19e38:	2b20      	cmp	r3, #32
   19e3a:	d02d      	beq.n	19e98 <__aeabi_dadd+0x60c>
   19e3c:	2540      	movs	r5, #64	; 0x40
   19e3e:	1aed      	subs	r5, r5, r3
   19e40:	40ac      	lsls	r4, r5
   19e42:	4327      	orrs	r7, r4
   19e44:	1e7c      	subs	r4, r7, #1
   19e46:	41a7      	sbcs	r7, r4
   19e48:	2400      	movs	r4, #0
   19e4a:	4337      	orrs	r7, r6
   19e4c:	e6c9      	b.n	19be2 <__aeabi_dadd+0x356>
   19e4e:	2480      	movs	r4, #128	; 0x80
   19e50:	2500      	movs	r5, #0
   19e52:	0324      	lsls	r4, r4, #12
   19e54:	4e13      	ldr	r6, [pc, #76]	; (19ea4 <__aeabi_dadd+0x618>)
   19e56:	2700      	movs	r7, #0
   19e58:	e5dc      	b.n	19a14 <__aeabi_dadd+0x188>
   19e5a:	4327      	orrs	r7, r4
   19e5c:	1e7c      	subs	r4, r7, #1
   19e5e:	41a7      	sbcs	r7, r4
   19e60:	2400      	movs	r4, #0
   19e62:	e779      	b.n	19d58 <__aeabi_dadd+0x4cc>
   19e64:	000c      	movs	r4, r1
   19e66:	0017      	movs	r7, r2
   19e68:	4e0e      	ldr	r6, [pc, #56]	; (19ea4 <__aeabi_dadd+0x618>)
   19e6a:	e593      	b.n	19994 <__aeabi_dadd+0x108>
   19e6c:	000c      	movs	r4, r1
   19e6e:	0017      	movs	r7, r2
   19e70:	e590      	b.n	19994 <__aeabi_dadd+0x108>
   19e72:	4656      	mov	r6, sl
   19e74:	0023      	movs	r3, r4
   19e76:	3e20      	subs	r6, #32
   19e78:	40f3      	lsrs	r3, r6
   19e7a:	4699      	mov	r9, r3
   19e7c:	4653      	mov	r3, sl
   19e7e:	2b20      	cmp	r3, #32
   19e80:	d00e      	beq.n	19ea0 <__aeabi_dadd+0x614>
   19e82:	2340      	movs	r3, #64	; 0x40
   19e84:	4656      	mov	r6, sl
   19e86:	1b9b      	subs	r3, r3, r6
   19e88:	409c      	lsls	r4, r3
   19e8a:	4327      	orrs	r7, r4
   19e8c:	1e7c      	subs	r4, r7, #1
   19e8e:	41a7      	sbcs	r7, r4
   19e90:	464b      	mov	r3, r9
   19e92:	2400      	movs	r4, #0
   19e94:	431f      	orrs	r7, r3
   19e96:	e75f      	b.n	19d58 <__aeabi_dadd+0x4cc>
   19e98:	2400      	movs	r4, #0
   19e9a:	e7d2      	b.n	19e42 <__aeabi_dadd+0x5b6>
   19e9c:	0017      	movs	r7, r2
   19e9e:	e5b2      	b.n	19a06 <__aeabi_dadd+0x17a>
   19ea0:	2400      	movs	r4, #0
   19ea2:	e7f2      	b.n	19e8a <__aeabi_dadd+0x5fe>
   19ea4:	000007ff 	.word	0x000007ff
   19ea8:	ff7fffff 	.word	0xff7fffff

00019eac <__aeabi_ddiv>:
   19eac:	b5f0      	push	{r4, r5, r6, r7, lr}
   19eae:	4657      	mov	r7, sl
   19eb0:	4645      	mov	r5, r8
   19eb2:	46de      	mov	lr, fp
   19eb4:	464e      	mov	r6, r9
   19eb6:	b5e0      	push	{r5, r6, r7, lr}
   19eb8:	004c      	lsls	r4, r1, #1
   19eba:	030e      	lsls	r6, r1, #12
   19ebc:	b087      	sub	sp, #28
   19ebe:	4683      	mov	fp, r0
   19ec0:	4692      	mov	sl, r2
   19ec2:	001d      	movs	r5, r3
   19ec4:	4680      	mov	r8, r0
   19ec6:	0b36      	lsrs	r6, r6, #12
   19ec8:	0d64      	lsrs	r4, r4, #21
   19eca:	0fcf      	lsrs	r7, r1, #31
   19ecc:	2c00      	cmp	r4, #0
   19ece:	d04f      	beq.n	19f70 <__aeabi_ddiv+0xc4>
   19ed0:	4b6f      	ldr	r3, [pc, #444]	; (1a090 <__aeabi_ddiv+0x1e4>)
   19ed2:	429c      	cmp	r4, r3
   19ed4:	d035      	beq.n	19f42 <__aeabi_ddiv+0x96>
   19ed6:	2380      	movs	r3, #128	; 0x80
   19ed8:	0f42      	lsrs	r2, r0, #29
   19eda:	041b      	lsls	r3, r3, #16
   19edc:	00f6      	lsls	r6, r6, #3
   19ede:	4313      	orrs	r3, r2
   19ee0:	4333      	orrs	r3, r6
   19ee2:	4699      	mov	r9, r3
   19ee4:	00c3      	lsls	r3, r0, #3
   19ee6:	4698      	mov	r8, r3
   19ee8:	4b6a      	ldr	r3, [pc, #424]	; (1a094 <__aeabi_ddiv+0x1e8>)
   19eea:	2600      	movs	r6, #0
   19eec:	469c      	mov	ip, r3
   19eee:	2300      	movs	r3, #0
   19ef0:	4464      	add	r4, ip
   19ef2:	9303      	str	r3, [sp, #12]
   19ef4:	032b      	lsls	r3, r5, #12
   19ef6:	0b1b      	lsrs	r3, r3, #12
   19ef8:	469b      	mov	fp, r3
   19efa:	006b      	lsls	r3, r5, #1
   19efc:	0fed      	lsrs	r5, r5, #31
   19efe:	4650      	mov	r0, sl
   19f00:	0d5b      	lsrs	r3, r3, #21
   19f02:	9501      	str	r5, [sp, #4]
   19f04:	d05e      	beq.n	19fc4 <__aeabi_ddiv+0x118>
   19f06:	4a62      	ldr	r2, [pc, #392]	; (1a090 <__aeabi_ddiv+0x1e4>)
   19f08:	4293      	cmp	r3, r2
   19f0a:	d053      	beq.n	19fb4 <__aeabi_ddiv+0x108>
   19f0c:	465a      	mov	r2, fp
   19f0e:	00d1      	lsls	r1, r2, #3
   19f10:	2280      	movs	r2, #128	; 0x80
   19f12:	0f40      	lsrs	r0, r0, #29
   19f14:	0412      	lsls	r2, r2, #16
   19f16:	4302      	orrs	r2, r0
   19f18:	430a      	orrs	r2, r1
   19f1a:	4693      	mov	fp, r2
   19f1c:	4652      	mov	r2, sl
   19f1e:	00d1      	lsls	r1, r2, #3
   19f20:	4a5c      	ldr	r2, [pc, #368]	; (1a094 <__aeabi_ddiv+0x1e8>)
   19f22:	4694      	mov	ip, r2
   19f24:	2200      	movs	r2, #0
   19f26:	4463      	add	r3, ip
   19f28:	0038      	movs	r0, r7
   19f2a:	4068      	eors	r0, r5
   19f2c:	4684      	mov	ip, r0
   19f2e:	9002      	str	r0, [sp, #8]
   19f30:	1ae4      	subs	r4, r4, r3
   19f32:	4316      	orrs	r6, r2
   19f34:	2e0f      	cmp	r6, #15
   19f36:	d900      	bls.n	19f3a <__aeabi_ddiv+0x8e>
   19f38:	e0b4      	b.n	1a0a4 <__aeabi_ddiv+0x1f8>
   19f3a:	4b57      	ldr	r3, [pc, #348]	; (1a098 <__aeabi_ddiv+0x1ec>)
   19f3c:	00b6      	lsls	r6, r6, #2
   19f3e:	599b      	ldr	r3, [r3, r6]
   19f40:	469f      	mov	pc, r3
   19f42:	0003      	movs	r3, r0
   19f44:	4333      	orrs	r3, r6
   19f46:	4699      	mov	r9, r3
   19f48:	d16c      	bne.n	1a024 <__aeabi_ddiv+0x178>
   19f4a:	2300      	movs	r3, #0
   19f4c:	4698      	mov	r8, r3
   19f4e:	3302      	adds	r3, #2
   19f50:	2608      	movs	r6, #8
   19f52:	9303      	str	r3, [sp, #12]
   19f54:	e7ce      	b.n	19ef4 <__aeabi_ddiv+0x48>
   19f56:	46cb      	mov	fp, r9
   19f58:	4641      	mov	r1, r8
   19f5a:	9a03      	ldr	r2, [sp, #12]
   19f5c:	9701      	str	r7, [sp, #4]
   19f5e:	2a02      	cmp	r2, #2
   19f60:	d165      	bne.n	1a02e <__aeabi_ddiv+0x182>
   19f62:	9b01      	ldr	r3, [sp, #4]
   19f64:	4c4a      	ldr	r4, [pc, #296]	; (1a090 <__aeabi_ddiv+0x1e4>)
   19f66:	469c      	mov	ip, r3
   19f68:	2300      	movs	r3, #0
   19f6a:	2200      	movs	r2, #0
   19f6c:	4698      	mov	r8, r3
   19f6e:	e06b      	b.n	1a048 <__aeabi_ddiv+0x19c>
   19f70:	0003      	movs	r3, r0
   19f72:	4333      	orrs	r3, r6
   19f74:	4699      	mov	r9, r3
   19f76:	d04e      	beq.n	1a016 <__aeabi_ddiv+0x16a>
   19f78:	2e00      	cmp	r6, #0
   19f7a:	d100      	bne.n	19f7e <__aeabi_ddiv+0xd2>
   19f7c:	e1bc      	b.n	1a2f8 <__aeabi_ddiv+0x44c>
   19f7e:	0030      	movs	r0, r6
   19f80:	f001 fa5e 	bl	1b440 <__clzsi2>
   19f84:	0003      	movs	r3, r0
   19f86:	3b0b      	subs	r3, #11
   19f88:	2b1c      	cmp	r3, #28
   19f8a:	dd00      	ble.n	19f8e <__aeabi_ddiv+0xe2>
   19f8c:	e1ac      	b.n	1a2e8 <__aeabi_ddiv+0x43c>
   19f8e:	221d      	movs	r2, #29
   19f90:	1ad3      	subs	r3, r2, r3
   19f92:	465a      	mov	r2, fp
   19f94:	0001      	movs	r1, r0
   19f96:	40da      	lsrs	r2, r3
   19f98:	3908      	subs	r1, #8
   19f9a:	408e      	lsls	r6, r1
   19f9c:	0013      	movs	r3, r2
   19f9e:	4333      	orrs	r3, r6
   19fa0:	4699      	mov	r9, r3
   19fa2:	465b      	mov	r3, fp
   19fa4:	408b      	lsls	r3, r1
   19fa6:	4698      	mov	r8, r3
   19fa8:	2300      	movs	r3, #0
   19faa:	4c3c      	ldr	r4, [pc, #240]	; (1a09c <__aeabi_ddiv+0x1f0>)
   19fac:	2600      	movs	r6, #0
   19fae:	1a24      	subs	r4, r4, r0
   19fb0:	9303      	str	r3, [sp, #12]
   19fb2:	e79f      	b.n	19ef4 <__aeabi_ddiv+0x48>
   19fb4:	4651      	mov	r1, sl
   19fb6:	465a      	mov	r2, fp
   19fb8:	4311      	orrs	r1, r2
   19fba:	d129      	bne.n	1a010 <__aeabi_ddiv+0x164>
   19fbc:	2200      	movs	r2, #0
   19fbe:	4693      	mov	fp, r2
   19fc0:	3202      	adds	r2, #2
   19fc2:	e7b1      	b.n	19f28 <__aeabi_ddiv+0x7c>
   19fc4:	4659      	mov	r1, fp
   19fc6:	4301      	orrs	r1, r0
   19fc8:	d01e      	beq.n	1a008 <__aeabi_ddiv+0x15c>
   19fca:	465b      	mov	r3, fp
   19fcc:	2b00      	cmp	r3, #0
   19fce:	d100      	bne.n	19fd2 <__aeabi_ddiv+0x126>
   19fd0:	e19e      	b.n	1a310 <__aeabi_ddiv+0x464>
   19fd2:	4658      	mov	r0, fp
   19fd4:	f001 fa34 	bl	1b440 <__clzsi2>
   19fd8:	0003      	movs	r3, r0
   19fda:	3b0b      	subs	r3, #11
   19fdc:	2b1c      	cmp	r3, #28
   19fde:	dd00      	ble.n	19fe2 <__aeabi_ddiv+0x136>
   19fe0:	e18f      	b.n	1a302 <__aeabi_ddiv+0x456>
   19fe2:	0002      	movs	r2, r0
   19fe4:	4659      	mov	r1, fp
   19fe6:	3a08      	subs	r2, #8
   19fe8:	4091      	lsls	r1, r2
   19fea:	468b      	mov	fp, r1
   19fec:	211d      	movs	r1, #29
   19fee:	1acb      	subs	r3, r1, r3
   19ff0:	4651      	mov	r1, sl
   19ff2:	40d9      	lsrs	r1, r3
   19ff4:	000b      	movs	r3, r1
   19ff6:	4659      	mov	r1, fp
   19ff8:	430b      	orrs	r3, r1
   19ffa:	4651      	mov	r1, sl
   19ffc:	469b      	mov	fp, r3
   19ffe:	4091      	lsls	r1, r2
   1a000:	4b26      	ldr	r3, [pc, #152]	; (1a09c <__aeabi_ddiv+0x1f0>)
   1a002:	2200      	movs	r2, #0
   1a004:	1a1b      	subs	r3, r3, r0
   1a006:	e78f      	b.n	19f28 <__aeabi_ddiv+0x7c>
   1a008:	2300      	movs	r3, #0
   1a00a:	2201      	movs	r2, #1
   1a00c:	469b      	mov	fp, r3
   1a00e:	e78b      	b.n	19f28 <__aeabi_ddiv+0x7c>
   1a010:	4651      	mov	r1, sl
   1a012:	2203      	movs	r2, #3
   1a014:	e788      	b.n	19f28 <__aeabi_ddiv+0x7c>
   1a016:	2300      	movs	r3, #0
   1a018:	4698      	mov	r8, r3
   1a01a:	3301      	adds	r3, #1
   1a01c:	2604      	movs	r6, #4
   1a01e:	2400      	movs	r4, #0
   1a020:	9303      	str	r3, [sp, #12]
   1a022:	e767      	b.n	19ef4 <__aeabi_ddiv+0x48>
   1a024:	2303      	movs	r3, #3
   1a026:	46b1      	mov	r9, r6
   1a028:	9303      	str	r3, [sp, #12]
   1a02a:	260c      	movs	r6, #12
   1a02c:	e762      	b.n	19ef4 <__aeabi_ddiv+0x48>
   1a02e:	2a03      	cmp	r2, #3
   1a030:	d100      	bne.n	1a034 <__aeabi_ddiv+0x188>
   1a032:	e25c      	b.n	1a4ee <__aeabi_ddiv+0x642>
   1a034:	9b01      	ldr	r3, [sp, #4]
   1a036:	2a01      	cmp	r2, #1
   1a038:	d000      	beq.n	1a03c <__aeabi_ddiv+0x190>
   1a03a:	e1e4      	b.n	1a406 <__aeabi_ddiv+0x55a>
   1a03c:	4013      	ands	r3, r2
   1a03e:	469c      	mov	ip, r3
   1a040:	2300      	movs	r3, #0
   1a042:	2400      	movs	r4, #0
   1a044:	2200      	movs	r2, #0
   1a046:	4698      	mov	r8, r3
   1a048:	2100      	movs	r1, #0
   1a04a:	0312      	lsls	r2, r2, #12
   1a04c:	0b13      	lsrs	r3, r2, #12
   1a04e:	0d0a      	lsrs	r2, r1, #20
   1a050:	0512      	lsls	r2, r2, #20
   1a052:	431a      	orrs	r2, r3
   1a054:	0523      	lsls	r3, r4, #20
   1a056:	4c12      	ldr	r4, [pc, #72]	; (1a0a0 <__aeabi_ddiv+0x1f4>)
   1a058:	4640      	mov	r0, r8
   1a05a:	4022      	ands	r2, r4
   1a05c:	4313      	orrs	r3, r2
   1a05e:	4662      	mov	r2, ip
   1a060:	005b      	lsls	r3, r3, #1
   1a062:	07d2      	lsls	r2, r2, #31
   1a064:	085b      	lsrs	r3, r3, #1
   1a066:	4313      	orrs	r3, r2
   1a068:	0019      	movs	r1, r3
   1a06a:	b007      	add	sp, #28
   1a06c:	bc3c      	pop	{r2, r3, r4, r5}
   1a06e:	4690      	mov	r8, r2
   1a070:	4699      	mov	r9, r3
   1a072:	46a2      	mov	sl, r4
   1a074:	46ab      	mov	fp, r5
   1a076:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a078:	2300      	movs	r3, #0
   1a07a:	2280      	movs	r2, #128	; 0x80
   1a07c:	469c      	mov	ip, r3
   1a07e:	0312      	lsls	r2, r2, #12
   1a080:	4698      	mov	r8, r3
   1a082:	4c03      	ldr	r4, [pc, #12]	; (1a090 <__aeabi_ddiv+0x1e4>)
   1a084:	e7e0      	b.n	1a048 <__aeabi_ddiv+0x19c>
   1a086:	2300      	movs	r3, #0
   1a088:	4c01      	ldr	r4, [pc, #4]	; (1a090 <__aeabi_ddiv+0x1e4>)
   1a08a:	2200      	movs	r2, #0
   1a08c:	4698      	mov	r8, r3
   1a08e:	e7db      	b.n	1a048 <__aeabi_ddiv+0x19c>
   1a090:	000007ff 	.word	0x000007ff
   1a094:	fffffc01 	.word	0xfffffc01
   1a098:	0001d19c 	.word	0x0001d19c
   1a09c:	fffffc0d 	.word	0xfffffc0d
   1a0a0:	800fffff 	.word	0x800fffff
   1a0a4:	45d9      	cmp	r9, fp
   1a0a6:	d900      	bls.n	1a0aa <__aeabi_ddiv+0x1fe>
   1a0a8:	e139      	b.n	1a31e <__aeabi_ddiv+0x472>
   1a0aa:	d100      	bne.n	1a0ae <__aeabi_ddiv+0x202>
   1a0ac:	e134      	b.n	1a318 <__aeabi_ddiv+0x46c>
   1a0ae:	2300      	movs	r3, #0
   1a0b0:	4646      	mov	r6, r8
   1a0b2:	464d      	mov	r5, r9
   1a0b4:	469a      	mov	sl, r3
   1a0b6:	3c01      	subs	r4, #1
   1a0b8:	465b      	mov	r3, fp
   1a0ba:	0e0a      	lsrs	r2, r1, #24
   1a0bc:	021b      	lsls	r3, r3, #8
   1a0be:	431a      	orrs	r2, r3
   1a0c0:	020b      	lsls	r3, r1, #8
   1a0c2:	0c17      	lsrs	r7, r2, #16
   1a0c4:	9303      	str	r3, [sp, #12]
   1a0c6:	0413      	lsls	r3, r2, #16
   1a0c8:	0c1b      	lsrs	r3, r3, #16
   1a0ca:	0039      	movs	r1, r7
   1a0cc:	0028      	movs	r0, r5
   1a0ce:	4690      	mov	r8, r2
   1a0d0:	9301      	str	r3, [sp, #4]
   1a0d2:	f7fe fea7 	bl	18e24 <__udivsi3>
   1a0d6:	0002      	movs	r2, r0
   1a0d8:	9b01      	ldr	r3, [sp, #4]
   1a0da:	4683      	mov	fp, r0
   1a0dc:	435a      	muls	r2, r3
   1a0de:	0028      	movs	r0, r5
   1a0e0:	0039      	movs	r1, r7
   1a0e2:	4691      	mov	r9, r2
   1a0e4:	f7fe ff24 	bl	18f30 <__aeabi_uidivmod>
   1a0e8:	0c35      	lsrs	r5, r6, #16
   1a0ea:	0409      	lsls	r1, r1, #16
   1a0ec:	430d      	orrs	r5, r1
   1a0ee:	45a9      	cmp	r9, r5
   1a0f0:	d90d      	bls.n	1a10e <__aeabi_ddiv+0x262>
   1a0f2:	465b      	mov	r3, fp
   1a0f4:	4445      	add	r5, r8
   1a0f6:	3b01      	subs	r3, #1
   1a0f8:	45a8      	cmp	r8, r5
   1a0fa:	d900      	bls.n	1a0fe <__aeabi_ddiv+0x252>
   1a0fc:	e13a      	b.n	1a374 <__aeabi_ddiv+0x4c8>
   1a0fe:	45a9      	cmp	r9, r5
   1a100:	d800      	bhi.n	1a104 <__aeabi_ddiv+0x258>
   1a102:	e137      	b.n	1a374 <__aeabi_ddiv+0x4c8>
   1a104:	2302      	movs	r3, #2
   1a106:	425b      	negs	r3, r3
   1a108:	469c      	mov	ip, r3
   1a10a:	4445      	add	r5, r8
   1a10c:	44e3      	add	fp, ip
   1a10e:	464b      	mov	r3, r9
   1a110:	1aeb      	subs	r3, r5, r3
   1a112:	0039      	movs	r1, r7
   1a114:	0018      	movs	r0, r3
   1a116:	9304      	str	r3, [sp, #16]
   1a118:	f7fe fe84 	bl	18e24 <__udivsi3>
   1a11c:	9b01      	ldr	r3, [sp, #4]
   1a11e:	0005      	movs	r5, r0
   1a120:	4343      	muls	r3, r0
   1a122:	0039      	movs	r1, r7
   1a124:	9804      	ldr	r0, [sp, #16]
   1a126:	4699      	mov	r9, r3
   1a128:	f7fe ff02 	bl	18f30 <__aeabi_uidivmod>
   1a12c:	0433      	lsls	r3, r6, #16
   1a12e:	0409      	lsls	r1, r1, #16
   1a130:	0c1b      	lsrs	r3, r3, #16
   1a132:	430b      	orrs	r3, r1
   1a134:	4599      	cmp	r9, r3
   1a136:	d909      	bls.n	1a14c <__aeabi_ddiv+0x2a0>
   1a138:	4443      	add	r3, r8
   1a13a:	1e6a      	subs	r2, r5, #1
   1a13c:	4598      	cmp	r8, r3
   1a13e:	d900      	bls.n	1a142 <__aeabi_ddiv+0x296>
   1a140:	e11a      	b.n	1a378 <__aeabi_ddiv+0x4cc>
   1a142:	4599      	cmp	r9, r3
   1a144:	d800      	bhi.n	1a148 <__aeabi_ddiv+0x29c>
   1a146:	e117      	b.n	1a378 <__aeabi_ddiv+0x4cc>
   1a148:	3d02      	subs	r5, #2
   1a14a:	4443      	add	r3, r8
   1a14c:	464a      	mov	r2, r9
   1a14e:	1a9b      	subs	r3, r3, r2
   1a150:	465a      	mov	r2, fp
   1a152:	0412      	lsls	r2, r2, #16
   1a154:	432a      	orrs	r2, r5
   1a156:	9903      	ldr	r1, [sp, #12]
   1a158:	4693      	mov	fp, r2
   1a15a:	0c10      	lsrs	r0, r2, #16
   1a15c:	0c0a      	lsrs	r2, r1, #16
   1a15e:	4691      	mov	r9, r2
   1a160:	0409      	lsls	r1, r1, #16
   1a162:	465a      	mov	r2, fp
   1a164:	0c09      	lsrs	r1, r1, #16
   1a166:	464e      	mov	r6, r9
   1a168:	000d      	movs	r5, r1
   1a16a:	0412      	lsls	r2, r2, #16
   1a16c:	0c12      	lsrs	r2, r2, #16
   1a16e:	4345      	muls	r5, r0
   1a170:	9105      	str	r1, [sp, #20]
   1a172:	4351      	muls	r1, r2
   1a174:	4372      	muls	r2, r6
   1a176:	4370      	muls	r0, r6
   1a178:	1952      	adds	r2, r2, r5
   1a17a:	0c0e      	lsrs	r6, r1, #16
   1a17c:	18b2      	adds	r2, r6, r2
   1a17e:	4295      	cmp	r5, r2
   1a180:	d903      	bls.n	1a18a <__aeabi_ddiv+0x2de>
   1a182:	2580      	movs	r5, #128	; 0x80
   1a184:	026d      	lsls	r5, r5, #9
   1a186:	46ac      	mov	ip, r5
   1a188:	4460      	add	r0, ip
   1a18a:	0c15      	lsrs	r5, r2, #16
   1a18c:	0409      	lsls	r1, r1, #16
   1a18e:	0412      	lsls	r2, r2, #16
   1a190:	0c09      	lsrs	r1, r1, #16
   1a192:	1828      	adds	r0, r5, r0
   1a194:	1852      	adds	r2, r2, r1
   1a196:	4283      	cmp	r3, r0
   1a198:	d200      	bcs.n	1a19c <__aeabi_ddiv+0x2f0>
   1a19a:	e0ce      	b.n	1a33a <__aeabi_ddiv+0x48e>
   1a19c:	d100      	bne.n	1a1a0 <__aeabi_ddiv+0x2f4>
   1a19e:	e0c8      	b.n	1a332 <__aeabi_ddiv+0x486>
   1a1a0:	1a1d      	subs	r5, r3, r0
   1a1a2:	4653      	mov	r3, sl
   1a1a4:	1a9e      	subs	r6, r3, r2
   1a1a6:	45b2      	cmp	sl, r6
   1a1a8:	4192      	sbcs	r2, r2
   1a1aa:	4252      	negs	r2, r2
   1a1ac:	1aab      	subs	r3, r5, r2
   1a1ae:	469a      	mov	sl, r3
   1a1b0:	4598      	cmp	r8, r3
   1a1b2:	d100      	bne.n	1a1b6 <__aeabi_ddiv+0x30a>
   1a1b4:	e117      	b.n	1a3e6 <__aeabi_ddiv+0x53a>
   1a1b6:	0039      	movs	r1, r7
   1a1b8:	0018      	movs	r0, r3
   1a1ba:	f7fe fe33 	bl	18e24 <__udivsi3>
   1a1be:	9b01      	ldr	r3, [sp, #4]
   1a1c0:	0005      	movs	r5, r0
   1a1c2:	4343      	muls	r3, r0
   1a1c4:	0039      	movs	r1, r7
   1a1c6:	4650      	mov	r0, sl
   1a1c8:	9304      	str	r3, [sp, #16]
   1a1ca:	f7fe feb1 	bl	18f30 <__aeabi_uidivmod>
   1a1ce:	9804      	ldr	r0, [sp, #16]
   1a1d0:	040b      	lsls	r3, r1, #16
   1a1d2:	0c31      	lsrs	r1, r6, #16
   1a1d4:	4319      	orrs	r1, r3
   1a1d6:	4288      	cmp	r0, r1
   1a1d8:	d909      	bls.n	1a1ee <__aeabi_ddiv+0x342>
   1a1da:	4441      	add	r1, r8
   1a1dc:	1e6b      	subs	r3, r5, #1
   1a1de:	4588      	cmp	r8, r1
   1a1e0:	d900      	bls.n	1a1e4 <__aeabi_ddiv+0x338>
   1a1e2:	e107      	b.n	1a3f4 <__aeabi_ddiv+0x548>
   1a1e4:	4288      	cmp	r0, r1
   1a1e6:	d800      	bhi.n	1a1ea <__aeabi_ddiv+0x33e>
   1a1e8:	e104      	b.n	1a3f4 <__aeabi_ddiv+0x548>
   1a1ea:	3d02      	subs	r5, #2
   1a1ec:	4441      	add	r1, r8
   1a1ee:	9b04      	ldr	r3, [sp, #16]
   1a1f0:	1acb      	subs	r3, r1, r3
   1a1f2:	0018      	movs	r0, r3
   1a1f4:	0039      	movs	r1, r7
   1a1f6:	9304      	str	r3, [sp, #16]
   1a1f8:	f7fe fe14 	bl	18e24 <__udivsi3>
   1a1fc:	9b01      	ldr	r3, [sp, #4]
   1a1fe:	4682      	mov	sl, r0
   1a200:	4343      	muls	r3, r0
   1a202:	0039      	movs	r1, r7
   1a204:	9804      	ldr	r0, [sp, #16]
   1a206:	9301      	str	r3, [sp, #4]
   1a208:	f7fe fe92 	bl	18f30 <__aeabi_uidivmod>
   1a20c:	9801      	ldr	r0, [sp, #4]
   1a20e:	040b      	lsls	r3, r1, #16
   1a210:	0431      	lsls	r1, r6, #16
   1a212:	0c09      	lsrs	r1, r1, #16
   1a214:	4319      	orrs	r1, r3
   1a216:	4288      	cmp	r0, r1
   1a218:	d90d      	bls.n	1a236 <__aeabi_ddiv+0x38a>
   1a21a:	4653      	mov	r3, sl
   1a21c:	4441      	add	r1, r8
   1a21e:	3b01      	subs	r3, #1
   1a220:	4588      	cmp	r8, r1
   1a222:	d900      	bls.n	1a226 <__aeabi_ddiv+0x37a>
   1a224:	e0e8      	b.n	1a3f8 <__aeabi_ddiv+0x54c>
   1a226:	4288      	cmp	r0, r1
   1a228:	d800      	bhi.n	1a22c <__aeabi_ddiv+0x380>
   1a22a:	e0e5      	b.n	1a3f8 <__aeabi_ddiv+0x54c>
   1a22c:	2302      	movs	r3, #2
   1a22e:	425b      	negs	r3, r3
   1a230:	469c      	mov	ip, r3
   1a232:	4441      	add	r1, r8
   1a234:	44e2      	add	sl, ip
   1a236:	9b01      	ldr	r3, [sp, #4]
   1a238:	042d      	lsls	r5, r5, #16
   1a23a:	1ace      	subs	r6, r1, r3
   1a23c:	4651      	mov	r1, sl
   1a23e:	4329      	orrs	r1, r5
   1a240:	9d05      	ldr	r5, [sp, #20]
   1a242:	464f      	mov	r7, r9
   1a244:	002a      	movs	r2, r5
   1a246:	040b      	lsls	r3, r1, #16
   1a248:	0c08      	lsrs	r0, r1, #16
   1a24a:	0c1b      	lsrs	r3, r3, #16
   1a24c:	435a      	muls	r2, r3
   1a24e:	4345      	muls	r5, r0
   1a250:	437b      	muls	r3, r7
   1a252:	4378      	muls	r0, r7
   1a254:	195b      	adds	r3, r3, r5
   1a256:	0c17      	lsrs	r7, r2, #16
   1a258:	18fb      	adds	r3, r7, r3
   1a25a:	429d      	cmp	r5, r3
   1a25c:	d903      	bls.n	1a266 <__aeabi_ddiv+0x3ba>
   1a25e:	2580      	movs	r5, #128	; 0x80
   1a260:	026d      	lsls	r5, r5, #9
   1a262:	46ac      	mov	ip, r5
   1a264:	4460      	add	r0, ip
   1a266:	0c1d      	lsrs	r5, r3, #16
   1a268:	0412      	lsls	r2, r2, #16
   1a26a:	041b      	lsls	r3, r3, #16
   1a26c:	0c12      	lsrs	r2, r2, #16
   1a26e:	1828      	adds	r0, r5, r0
   1a270:	189b      	adds	r3, r3, r2
   1a272:	4286      	cmp	r6, r0
   1a274:	d200      	bcs.n	1a278 <__aeabi_ddiv+0x3cc>
   1a276:	e093      	b.n	1a3a0 <__aeabi_ddiv+0x4f4>
   1a278:	d100      	bne.n	1a27c <__aeabi_ddiv+0x3d0>
   1a27a:	e08e      	b.n	1a39a <__aeabi_ddiv+0x4ee>
   1a27c:	2301      	movs	r3, #1
   1a27e:	4319      	orrs	r1, r3
   1a280:	4ba0      	ldr	r3, [pc, #640]	; (1a504 <__aeabi_ddiv+0x658>)
   1a282:	18e3      	adds	r3, r4, r3
   1a284:	2b00      	cmp	r3, #0
   1a286:	dc00      	bgt.n	1a28a <__aeabi_ddiv+0x3de>
   1a288:	e099      	b.n	1a3be <__aeabi_ddiv+0x512>
   1a28a:	074a      	lsls	r2, r1, #29
   1a28c:	d000      	beq.n	1a290 <__aeabi_ddiv+0x3e4>
   1a28e:	e09e      	b.n	1a3ce <__aeabi_ddiv+0x522>
   1a290:	465a      	mov	r2, fp
   1a292:	01d2      	lsls	r2, r2, #7
   1a294:	d506      	bpl.n	1a2a4 <__aeabi_ddiv+0x3f8>
   1a296:	465a      	mov	r2, fp
   1a298:	4b9b      	ldr	r3, [pc, #620]	; (1a508 <__aeabi_ddiv+0x65c>)
   1a29a:	401a      	ands	r2, r3
   1a29c:	2380      	movs	r3, #128	; 0x80
   1a29e:	4693      	mov	fp, r2
   1a2a0:	00db      	lsls	r3, r3, #3
   1a2a2:	18e3      	adds	r3, r4, r3
   1a2a4:	4a99      	ldr	r2, [pc, #612]	; (1a50c <__aeabi_ddiv+0x660>)
   1a2a6:	4293      	cmp	r3, r2
   1a2a8:	dd68      	ble.n	1a37c <__aeabi_ddiv+0x4d0>
   1a2aa:	2301      	movs	r3, #1
   1a2ac:	9a02      	ldr	r2, [sp, #8]
   1a2ae:	4c98      	ldr	r4, [pc, #608]	; (1a510 <__aeabi_ddiv+0x664>)
   1a2b0:	401a      	ands	r2, r3
   1a2b2:	2300      	movs	r3, #0
   1a2b4:	4694      	mov	ip, r2
   1a2b6:	4698      	mov	r8, r3
   1a2b8:	2200      	movs	r2, #0
   1a2ba:	e6c5      	b.n	1a048 <__aeabi_ddiv+0x19c>
   1a2bc:	2280      	movs	r2, #128	; 0x80
   1a2be:	464b      	mov	r3, r9
   1a2c0:	0312      	lsls	r2, r2, #12
   1a2c2:	4213      	tst	r3, r2
   1a2c4:	d00a      	beq.n	1a2dc <__aeabi_ddiv+0x430>
   1a2c6:	465b      	mov	r3, fp
   1a2c8:	4213      	tst	r3, r2
   1a2ca:	d106      	bne.n	1a2da <__aeabi_ddiv+0x42e>
   1a2cc:	431a      	orrs	r2, r3
   1a2ce:	0312      	lsls	r2, r2, #12
   1a2d0:	0b12      	lsrs	r2, r2, #12
   1a2d2:	46ac      	mov	ip, r5
   1a2d4:	4688      	mov	r8, r1
   1a2d6:	4c8e      	ldr	r4, [pc, #568]	; (1a510 <__aeabi_ddiv+0x664>)
   1a2d8:	e6b6      	b.n	1a048 <__aeabi_ddiv+0x19c>
   1a2da:	464b      	mov	r3, r9
   1a2dc:	431a      	orrs	r2, r3
   1a2de:	0312      	lsls	r2, r2, #12
   1a2e0:	0b12      	lsrs	r2, r2, #12
   1a2e2:	46bc      	mov	ip, r7
   1a2e4:	4c8a      	ldr	r4, [pc, #552]	; (1a510 <__aeabi_ddiv+0x664>)
   1a2e6:	e6af      	b.n	1a048 <__aeabi_ddiv+0x19c>
   1a2e8:	0003      	movs	r3, r0
   1a2ea:	465a      	mov	r2, fp
   1a2ec:	3b28      	subs	r3, #40	; 0x28
   1a2ee:	409a      	lsls	r2, r3
   1a2f0:	2300      	movs	r3, #0
   1a2f2:	4691      	mov	r9, r2
   1a2f4:	4698      	mov	r8, r3
   1a2f6:	e657      	b.n	19fa8 <__aeabi_ddiv+0xfc>
   1a2f8:	4658      	mov	r0, fp
   1a2fa:	f001 f8a1 	bl	1b440 <__clzsi2>
   1a2fe:	3020      	adds	r0, #32
   1a300:	e640      	b.n	19f84 <__aeabi_ddiv+0xd8>
   1a302:	0003      	movs	r3, r0
   1a304:	4652      	mov	r2, sl
   1a306:	3b28      	subs	r3, #40	; 0x28
   1a308:	409a      	lsls	r2, r3
   1a30a:	2100      	movs	r1, #0
   1a30c:	4693      	mov	fp, r2
   1a30e:	e677      	b.n	1a000 <__aeabi_ddiv+0x154>
   1a310:	f001 f896 	bl	1b440 <__clzsi2>
   1a314:	3020      	adds	r0, #32
   1a316:	e65f      	b.n	19fd8 <__aeabi_ddiv+0x12c>
   1a318:	4588      	cmp	r8, r1
   1a31a:	d200      	bcs.n	1a31e <__aeabi_ddiv+0x472>
   1a31c:	e6c7      	b.n	1a0ae <__aeabi_ddiv+0x202>
   1a31e:	464b      	mov	r3, r9
   1a320:	07de      	lsls	r6, r3, #31
   1a322:	085d      	lsrs	r5, r3, #1
   1a324:	4643      	mov	r3, r8
   1a326:	085b      	lsrs	r3, r3, #1
   1a328:	431e      	orrs	r6, r3
   1a32a:	4643      	mov	r3, r8
   1a32c:	07db      	lsls	r3, r3, #31
   1a32e:	469a      	mov	sl, r3
   1a330:	e6c2      	b.n	1a0b8 <__aeabi_ddiv+0x20c>
   1a332:	2500      	movs	r5, #0
   1a334:	4592      	cmp	sl, r2
   1a336:	d300      	bcc.n	1a33a <__aeabi_ddiv+0x48e>
   1a338:	e733      	b.n	1a1a2 <__aeabi_ddiv+0x2f6>
   1a33a:	9e03      	ldr	r6, [sp, #12]
   1a33c:	4659      	mov	r1, fp
   1a33e:	46b4      	mov	ip, r6
   1a340:	44e2      	add	sl, ip
   1a342:	45b2      	cmp	sl, r6
   1a344:	41ad      	sbcs	r5, r5
   1a346:	426d      	negs	r5, r5
   1a348:	4445      	add	r5, r8
   1a34a:	18eb      	adds	r3, r5, r3
   1a34c:	3901      	subs	r1, #1
   1a34e:	4598      	cmp	r8, r3
   1a350:	d207      	bcs.n	1a362 <__aeabi_ddiv+0x4b6>
   1a352:	4298      	cmp	r0, r3
   1a354:	d900      	bls.n	1a358 <__aeabi_ddiv+0x4ac>
   1a356:	e07f      	b.n	1a458 <__aeabi_ddiv+0x5ac>
   1a358:	d100      	bne.n	1a35c <__aeabi_ddiv+0x4b0>
   1a35a:	e0bc      	b.n	1a4d6 <__aeabi_ddiv+0x62a>
   1a35c:	1a1d      	subs	r5, r3, r0
   1a35e:	468b      	mov	fp, r1
   1a360:	e71f      	b.n	1a1a2 <__aeabi_ddiv+0x2f6>
   1a362:	4598      	cmp	r8, r3
   1a364:	d1fa      	bne.n	1a35c <__aeabi_ddiv+0x4b0>
   1a366:	9d03      	ldr	r5, [sp, #12]
   1a368:	4555      	cmp	r5, sl
   1a36a:	d9f2      	bls.n	1a352 <__aeabi_ddiv+0x4a6>
   1a36c:	4643      	mov	r3, r8
   1a36e:	468b      	mov	fp, r1
   1a370:	1a1d      	subs	r5, r3, r0
   1a372:	e716      	b.n	1a1a2 <__aeabi_ddiv+0x2f6>
   1a374:	469b      	mov	fp, r3
   1a376:	e6ca      	b.n	1a10e <__aeabi_ddiv+0x262>
   1a378:	0015      	movs	r5, r2
   1a37a:	e6e7      	b.n	1a14c <__aeabi_ddiv+0x2a0>
   1a37c:	465a      	mov	r2, fp
   1a37e:	08c9      	lsrs	r1, r1, #3
   1a380:	0752      	lsls	r2, r2, #29
   1a382:	430a      	orrs	r2, r1
   1a384:	055b      	lsls	r3, r3, #21
   1a386:	4690      	mov	r8, r2
   1a388:	0d5c      	lsrs	r4, r3, #21
   1a38a:	465a      	mov	r2, fp
   1a38c:	2301      	movs	r3, #1
   1a38e:	9902      	ldr	r1, [sp, #8]
   1a390:	0252      	lsls	r2, r2, #9
   1a392:	4019      	ands	r1, r3
   1a394:	0b12      	lsrs	r2, r2, #12
   1a396:	468c      	mov	ip, r1
   1a398:	e656      	b.n	1a048 <__aeabi_ddiv+0x19c>
   1a39a:	2b00      	cmp	r3, #0
   1a39c:	d100      	bne.n	1a3a0 <__aeabi_ddiv+0x4f4>
   1a39e:	e76f      	b.n	1a280 <__aeabi_ddiv+0x3d4>
   1a3a0:	4446      	add	r6, r8
   1a3a2:	1e4a      	subs	r2, r1, #1
   1a3a4:	45b0      	cmp	r8, r6
   1a3a6:	d929      	bls.n	1a3fc <__aeabi_ddiv+0x550>
   1a3a8:	0011      	movs	r1, r2
   1a3aa:	4286      	cmp	r6, r0
   1a3ac:	d000      	beq.n	1a3b0 <__aeabi_ddiv+0x504>
   1a3ae:	e765      	b.n	1a27c <__aeabi_ddiv+0x3d0>
   1a3b0:	9a03      	ldr	r2, [sp, #12]
   1a3b2:	4293      	cmp	r3, r2
   1a3b4:	d000      	beq.n	1a3b8 <__aeabi_ddiv+0x50c>
   1a3b6:	e761      	b.n	1a27c <__aeabi_ddiv+0x3d0>
   1a3b8:	e762      	b.n	1a280 <__aeabi_ddiv+0x3d4>
   1a3ba:	2101      	movs	r1, #1
   1a3bc:	4249      	negs	r1, r1
   1a3be:	2001      	movs	r0, #1
   1a3c0:	1ac2      	subs	r2, r0, r3
   1a3c2:	2a38      	cmp	r2, #56	; 0x38
   1a3c4:	dd21      	ble.n	1a40a <__aeabi_ddiv+0x55e>
   1a3c6:	9b02      	ldr	r3, [sp, #8]
   1a3c8:	4003      	ands	r3, r0
   1a3ca:	469c      	mov	ip, r3
   1a3cc:	e638      	b.n	1a040 <__aeabi_ddiv+0x194>
   1a3ce:	220f      	movs	r2, #15
   1a3d0:	400a      	ands	r2, r1
   1a3d2:	2a04      	cmp	r2, #4
   1a3d4:	d100      	bne.n	1a3d8 <__aeabi_ddiv+0x52c>
   1a3d6:	e75b      	b.n	1a290 <__aeabi_ddiv+0x3e4>
   1a3d8:	000a      	movs	r2, r1
   1a3da:	1d11      	adds	r1, r2, #4
   1a3dc:	4291      	cmp	r1, r2
   1a3de:	4192      	sbcs	r2, r2
   1a3e0:	4252      	negs	r2, r2
   1a3e2:	4493      	add	fp, r2
   1a3e4:	e754      	b.n	1a290 <__aeabi_ddiv+0x3e4>
   1a3e6:	4b47      	ldr	r3, [pc, #284]	; (1a504 <__aeabi_ddiv+0x658>)
   1a3e8:	18e3      	adds	r3, r4, r3
   1a3ea:	2b00      	cmp	r3, #0
   1a3ec:	dde5      	ble.n	1a3ba <__aeabi_ddiv+0x50e>
   1a3ee:	2201      	movs	r2, #1
   1a3f0:	4252      	negs	r2, r2
   1a3f2:	e7f2      	b.n	1a3da <__aeabi_ddiv+0x52e>
   1a3f4:	001d      	movs	r5, r3
   1a3f6:	e6fa      	b.n	1a1ee <__aeabi_ddiv+0x342>
   1a3f8:	469a      	mov	sl, r3
   1a3fa:	e71c      	b.n	1a236 <__aeabi_ddiv+0x38a>
   1a3fc:	42b0      	cmp	r0, r6
   1a3fe:	d839      	bhi.n	1a474 <__aeabi_ddiv+0x5c8>
   1a400:	d06e      	beq.n	1a4e0 <__aeabi_ddiv+0x634>
   1a402:	0011      	movs	r1, r2
   1a404:	e73a      	b.n	1a27c <__aeabi_ddiv+0x3d0>
   1a406:	9302      	str	r3, [sp, #8]
   1a408:	e73a      	b.n	1a280 <__aeabi_ddiv+0x3d4>
   1a40a:	2a1f      	cmp	r2, #31
   1a40c:	dc3c      	bgt.n	1a488 <__aeabi_ddiv+0x5dc>
   1a40e:	2320      	movs	r3, #32
   1a410:	1a9b      	subs	r3, r3, r2
   1a412:	000c      	movs	r4, r1
   1a414:	4658      	mov	r0, fp
   1a416:	4099      	lsls	r1, r3
   1a418:	4098      	lsls	r0, r3
   1a41a:	1e4b      	subs	r3, r1, #1
   1a41c:	4199      	sbcs	r1, r3
   1a41e:	465b      	mov	r3, fp
   1a420:	40d4      	lsrs	r4, r2
   1a422:	40d3      	lsrs	r3, r2
   1a424:	4320      	orrs	r0, r4
   1a426:	4308      	orrs	r0, r1
   1a428:	001a      	movs	r2, r3
   1a42a:	0743      	lsls	r3, r0, #29
   1a42c:	d009      	beq.n	1a442 <__aeabi_ddiv+0x596>
   1a42e:	230f      	movs	r3, #15
   1a430:	4003      	ands	r3, r0
   1a432:	2b04      	cmp	r3, #4
   1a434:	d005      	beq.n	1a442 <__aeabi_ddiv+0x596>
   1a436:	0001      	movs	r1, r0
   1a438:	1d08      	adds	r0, r1, #4
   1a43a:	4288      	cmp	r0, r1
   1a43c:	419b      	sbcs	r3, r3
   1a43e:	425b      	negs	r3, r3
   1a440:	18d2      	adds	r2, r2, r3
   1a442:	0213      	lsls	r3, r2, #8
   1a444:	d53a      	bpl.n	1a4bc <__aeabi_ddiv+0x610>
   1a446:	2301      	movs	r3, #1
   1a448:	9a02      	ldr	r2, [sp, #8]
   1a44a:	2401      	movs	r4, #1
   1a44c:	401a      	ands	r2, r3
   1a44e:	2300      	movs	r3, #0
   1a450:	4694      	mov	ip, r2
   1a452:	4698      	mov	r8, r3
   1a454:	2200      	movs	r2, #0
   1a456:	e5f7      	b.n	1a048 <__aeabi_ddiv+0x19c>
   1a458:	2102      	movs	r1, #2
   1a45a:	4249      	negs	r1, r1
   1a45c:	468c      	mov	ip, r1
   1a45e:	9d03      	ldr	r5, [sp, #12]
   1a460:	44e3      	add	fp, ip
   1a462:	46ac      	mov	ip, r5
   1a464:	44e2      	add	sl, ip
   1a466:	45aa      	cmp	sl, r5
   1a468:	41ad      	sbcs	r5, r5
   1a46a:	426d      	negs	r5, r5
   1a46c:	4445      	add	r5, r8
   1a46e:	18ed      	adds	r5, r5, r3
   1a470:	1a2d      	subs	r5, r5, r0
   1a472:	e696      	b.n	1a1a2 <__aeabi_ddiv+0x2f6>
   1a474:	1e8a      	subs	r2, r1, #2
   1a476:	9903      	ldr	r1, [sp, #12]
   1a478:	004d      	lsls	r5, r1, #1
   1a47a:	428d      	cmp	r5, r1
   1a47c:	4189      	sbcs	r1, r1
   1a47e:	4249      	negs	r1, r1
   1a480:	4441      	add	r1, r8
   1a482:	1876      	adds	r6, r6, r1
   1a484:	9503      	str	r5, [sp, #12]
   1a486:	e78f      	b.n	1a3a8 <__aeabi_ddiv+0x4fc>
   1a488:	201f      	movs	r0, #31
   1a48a:	4240      	negs	r0, r0
   1a48c:	1ac3      	subs	r3, r0, r3
   1a48e:	4658      	mov	r0, fp
   1a490:	40d8      	lsrs	r0, r3
   1a492:	0003      	movs	r3, r0
   1a494:	2a20      	cmp	r2, #32
   1a496:	d028      	beq.n	1a4ea <__aeabi_ddiv+0x63e>
   1a498:	2040      	movs	r0, #64	; 0x40
   1a49a:	465d      	mov	r5, fp
   1a49c:	1a82      	subs	r2, r0, r2
   1a49e:	4095      	lsls	r5, r2
   1a4a0:	4329      	orrs	r1, r5
   1a4a2:	1e4a      	subs	r2, r1, #1
   1a4a4:	4191      	sbcs	r1, r2
   1a4a6:	4319      	orrs	r1, r3
   1a4a8:	2307      	movs	r3, #7
   1a4aa:	2200      	movs	r2, #0
   1a4ac:	400b      	ands	r3, r1
   1a4ae:	d009      	beq.n	1a4c4 <__aeabi_ddiv+0x618>
   1a4b0:	230f      	movs	r3, #15
   1a4b2:	2200      	movs	r2, #0
   1a4b4:	400b      	ands	r3, r1
   1a4b6:	0008      	movs	r0, r1
   1a4b8:	2b04      	cmp	r3, #4
   1a4ba:	d1bd      	bne.n	1a438 <__aeabi_ddiv+0x58c>
   1a4bc:	0001      	movs	r1, r0
   1a4be:	0753      	lsls	r3, r2, #29
   1a4c0:	0252      	lsls	r2, r2, #9
   1a4c2:	0b12      	lsrs	r2, r2, #12
   1a4c4:	08c9      	lsrs	r1, r1, #3
   1a4c6:	4319      	orrs	r1, r3
   1a4c8:	2301      	movs	r3, #1
   1a4ca:	4688      	mov	r8, r1
   1a4cc:	9902      	ldr	r1, [sp, #8]
   1a4ce:	2400      	movs	r4, #0
   1a4d0:	4019      	ands	r1, r3
   1a4d2:	468c      	mov	ip, r1
   1a4d4:	e5b8      	b.n	1a048 <__aeabi_ddiv+0x19c>
   1a4d6:	4552      	cmp	r2, sl
   1a4d8:	d8be      	bhi.n	1a458 <__aeabi_ddiv+0x5ac>
   1a4da:	468b      	mov	fp, r1
   1a4dc:	2500      	movs	r5, #0
   1a4de:	e660      	b.n	1a1a2 <__aeabi_ddiv+0x2f6>
   1a4e0:	9d03      	ldr	r5, [sp, #12]
   1a4e2:	429d      	cmp	r5, r3
   1a4e4:	d3c6      	bcc.n	1a474 <__aeabi_ddiv+0x5c8>
   1a4e6:	0011      	movs	r1, r2
   1a4e8:	e762      	b.n	1a3b0 <__aeabi_ddiv+0x504>
   1a4ea:	2500      	movs	r5, #0
   1a4ec:	e7d8      	b.n	1a4a0 <__aeabi_ddiv+0x5f4>
   1a4ee:	2280      	movs	r2, #128	; 0x80
   1a4f0:	465b      	mov	r3, fp
   1a4f2:	0312      	lsls	r2, r2, #12
   1a4f4:	431a      	orrs	r2, r3
   1a4f6:	9b01      	ldr	r3, [sp, #4]
   1a4f8:	0312      	lsls	r2, r2, #12
   1a4fa:	0b12      	lsrs	r2, r2, #12
   1a4fc:	469c      	mov	ip, r3
   1a4fe:	4688      	mov	r8, r1
   1a500:	4c03      	ldr	r4, [pc, #12]	; (1a510 <__aeabi_ddiv+0x664>)
   1a502:	e5a1      	b.n	1a048 <__aeabi_ddiv+0x19c>
   1a504:	000003ff 	.word	0x000003ff
   1a508:	feffffff 	.word	0xfeffffff
   1a50c:	000007fe 	.word	0x000007fe
   1a510:	000007ff 	.word	0x000007ff

0001a514 <__eqdf2>:
   1a514:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a516:	464f      	mov	r7, r9
   1a518:	4646      	mov	r6, r8
   1a51a:	46d6      	mov	lr, sl
   1a51c:	005c      	lsls	r4, r3, #1
   1a51e:	b5c0      	push	{r6, r7, lr}
   1a520:	031f      	lsls	r7, r3, #12
   1a522:	0fdb      	lsrs	r3, r3, #31
   1a524:	469a      	mov	sl, r3
   1a526:	4b17      	ldr	r3, [pc, #92]	; (1a584 <__eqdf2+0x70>)
   1a528:	030e      	lsls	r6, r1, #12
   1a52a:	004d      	lsls	r5, r1, #1
   1a52c:	4684      	mov	ip, r0
   1a52e:	4680      	mov	r8, r0
   1a530:	0b36      	lsrs	r6, r6, #12
   1a532:	0d6d      	lsrs	r5, r5, #21
   1a534:	0fc9      	lsrs	r1, r1, #31
   1a536:	4691      	mov	r9, r2
   1a538:	0b3f      	lsrs	r7, r7, #12
   1a53a:	0d64      	lsrs	r4, r4, #21
   1a53c:	2001      	movs	r0, #1
   1a53e:	429d      	cmp	r5, r3
   1a540:	d008      	beq.n	1a554 <__eqdf2+0x40>
   1a542:	429c      	cmp	r4, r3
   1a544:	d001      	beq.n	1a54a <__eqdf2+0x36>
   1a546:	42a5      	cmp	r5, r4
   1a548:	d00b      	beq.n	1a562 <__eqdf2+0x4e>
   1a54a:	bc1c      	pop	{r2, r3, r4}
   1a54c:	4690      	mov	r8, r2
   1a54e:	4699      	mov	r9, r3
   1a550:	46a2      	mov	sl, r4
   1a552:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a554:	4663      	mov	r3, ip
   1a556:	4333      	orrs	r3, r6
   1a558:	d1f7      	bne.n	1a54a <__eqdf2+0x36>
   1a55a:	42ac      	cmp	r4, r5
   1a55c:	d1f5      	bne.n	1a54a <__eqdf2+0x36>
   1a55e:	433a      	orrs	r2, r7
   1a560:	d1f3      	bne.n	1a54a <__eqdf2+0x36>
   1a562:	2001      	movs	r0, #1
   1a564:	42be      	cmp	r6, r7
   1a566:	d1f0      	bne.n	1a54a <__eqdf2+0x36>
   1a568:	45c8      	cmp	r8, r9
   1a56a:	d1ee      	bne.n	1a54a <__eqdf2+0x36>
   1a56c:	4551      	cmp	r1, sl
   1a56e:	d007      	beq.n	1a580 <__eqdf2+0x6c>
   1a570:	2d00      	cmp	r5, #0
   1a572:	d1ea      	bne.n	1a54a <__eqdf2+0x36>
   1a574:	4663      	mov	r3, ip
   1a576:	431e      	orrs	r6, r3
   1a578:	0030      	movs	r0, r6
   1a57a:	1e46      	subs	r6, r0, #1
   1a57c:	41b0      	sbcs	r0, r6
   1a57e:	e7e4      	b.n	1a54a <__eqdf2+0x36>
   1a580:	2000      	movs	r0, #0
   1a582:	e7e2      	b.n	1a54a <__eqdf2+0x36>
   1a584:	000007ff 	.word	0x000007ff

0001a588 <__gedf2>:
   1a588:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a58a:	4645      	mov	r5, r8
   1a58c:	46de      	mov	lr, fp
   1a58e:	4657      	mov	r7, sl
   1a590:	464e      	mov	r6, r9
   1a592:	b5e0      	push	{r5, r6, r7, lr}
   1a594:	031f      	lsls	r7, r3, #12
   1a596:	0b3d      	lsrs	r5, r7, #12
   1a598:	4f2c      	ldr	r7, [pc, #176]	; (1a64c <__gedf2+0xc4>)
   1a59a:	030e      	lsls	r6, r1, #12
   1a59c:	004c      	lsls	r4, r1, #1
   1a59e:	46ab      	mov	fp, r5
   1a5a0:	005d      	lsls	r5, r3, #1
   1a5a2:	4684      	mov	ip, r0
   1a5a4:	0b36      	lsrs	r6, r6, #12
   1a5a6:	0d64      	lsrs	r4, r4, #21
   1a5a8:	0fc9      	lsrs	r1, r1, #31
   1a5aa:	4690      	mov	r8, r2
   1a5ac:	0d6d      	lsrs	r5, r5, #21
   1a5ae:	0fdb      	lsrs	r3, r3, #31
   1a5b0:	42bc      	cmp	r4, r7
   1a5b2:	d02a      	beq.n	1a60a <__gedf2+0x82>
   1a5b4:	4f25      	ldr	r7, [pc, #148]	; (1a64c <__gedf2+0xc4>)
   1a5b6:	42bd      	cmp	r5, r7
   1a5b8:	d02d      	beq.n	1a616 <__gedf2+0x8e>
   1a5ba:	2c00      	cmp	r4, #0
   1a5bc:	d10f      	bne.n	1a5de <__gedf2+0x56>
   1a5be:	4330      	orrs	r0, r6
   1a5c0:	0007      	movs	r7, r0
   1a5c2:	4681      	mov	r9, r0
   1a5c4:	4278      	negs	r0, r7
   1a5c6:	4178      	adcs	r0, r7
   1a5c8:	b2c0      	uxtb	r0, r0
   1a5ca:	2d00      	cmp	r5, #0
   1a5cc:	d117      	bne.n	1a5fe <__gedf2+0x76>
   1a5ce:	465f      	mov	r7, fp
   1a5d0:	433a      	orrs	r2, r7
   1a5d2:	d114      	bne.n	1a5fe <__gedf2+0x76>
   1a5d4:	464b      	mov	r3, r9
   1a5d6:	2000      	movs	r0, #0
   1a5d8:	2b00      	cmp	r3, #0
   1a5da:	d00a      	beq.n	1a5f2 <__gedf2+0x6a>
   1a5dc:	e006      	b.n	1a5ec <__gedf2+0x64>
   1a5de:	2d00      	cmp	r5, #0
   1a5e0:	d102      	bne.n	1a5e8 <__gedf2+0x60>
   1a5e2:	4658      	mov	r0, fp
   1a5e4:	4302      	orrs	r2, r0
   1a5e6:	d001      	beq.n	1a5ec <__gedf2+0x64>
   1a5e8:	4299      	cmp	r1, r3
   1a5ea:	d018      	beq.n	1a61e <__gedf2+0x96>
   1a5ec:	4248      	negs	r0, r1
   1a5ee:	2101      	movs	r1, #1
   1a5f0:	4308      	orrs	r0, r1
   1a5f2:	bc3c      	pop	{r2, r3, r4, r5}
   1a5f4:	4690      	mov	r8, r2
   1a5f6:	4699      	mov	r9, r3
   1a5f8:	46a2      	mov	sl, r4
   1a5fa:	46ab      	mov	fp, r5
   1a5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a5fe:	2800      	cmp	r0, #0
   1a600:	d0f2      	beq.n	1a5e8 <__gedf2+0x60>
   1a602:	2001      	movs	r0, #1
   1a604:	3b01      	subs	r3, #1
   1a606:	4318      	orrs	r0, r3
   1a608:	e7f3      	b.n	1a5f2 <__gedf2+0x6a>
   1a60a:	0037      	movs	r7, r6
   1a60c:	4307      	orrs	r7, r0
   1a60e:	d0d1      	beq.n	1a5b4 <__gedf2+0x2c>
   1a610:	2002      	movs	r0, #2
   1a612:	4240      	negs	r0, r0
   1a614:	e7ed      	b.n	1a5f2 <__gedf2+0x6a>
   1a616:	465f      	mov	r7, fp
   1a618:	4317      	orrs	r7, r2
   1a61a:	d0ce      	beq.n	1a5ba <__gedf2+0x32>
   1a61c:	e7f8      	b.n	1a610 <__gedf2+0x88>
   1a61e:	42ac      	cmp	r4, r5
   1a620:	dce4      	bgt.n	1a5ec <__gedf2+0x64>
   1a622:	da03      	bge.n	1a62c <__gedf2+0xa4>
   1a624:	1e48      	subs	r0, r1, #1
   1a626:	2101      	movs	r1, #1
   1a628:	4308      	orrs	r0, r1
   1a62a:	e7e2      	b.n	1a5f2 <__gedf2+0x6a>
   1a62c:	455e      	cmp	r6, fp
   1a62e:	d8dd      	bhi.n	1a5ec <__gedf2+0x64>
   1a630:	d006      	beq.n	1a640 <__gedf2+0xb8>
   1a632:	2000      	movs	r0, #0
   1a634:	455e      	cmp	r6, fp
   1a636:	d2dc      	bcs.n	1a5f2 <__gedf2+0x6a>
   1a638:	2301      	movs	r3, #1
   1a63a:	1e48      	subs	r0, r1, #1
   1a63c:	4318      	orrs	r0, r3
   1a63e:	e7d8      	b.n	1a5f2 <__gedf2+0x6a>
   1a640:	45c4      	cmp	ip, r8
   1a642:	d8d3      	bhi.n	1a5ec <__gedf2+0x64>
   1a644:	2000      	movs	r0, #0
   1a646:	45c4      	cmp	ip, r8
   1a648:	d3f6      	bcc.n	1a638 <__gedf2+0xb0>
   1a64a:	e7d2      	b.n	1a5f2 <__gedf2+0x6a>
   1a64c:	000007ff 	.word	0x000007ff

0001a650 <__ledf2>:
   1a650:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a652:	464e      	mov	r6, r9
   1a654:	4645      	mov	r5, r8
   1a656:	46de      	mov	lr, fp
   1a658:	4657      	mov	r7, sl
   1a65a:	005c      	lsls	r4, r3, #1
   1a65c:	b5e0      	push	{r5, r6, r7, lr}
   1a65e:	031f      	lsls	r7, r3, #12
   1a660:	0fdb      	lsrs	r3, r3, #31
   1a662:	4699      	mov	r9, r3
   1a664:	4b2a      	ldr	r3, [pc, #168]	; (1a710 <__ledf2+0xc0>)
   1a666:	030e      	lsls	r6, r1, #12
   1a668:	004d      	lsls	r5, r1, #1
   1a66a:	0fc9      	lsrs	r1, r1, #31
   1a66c:	4684      	mov	ip, r0
   1a66e:	0b36      	lsrs	r6, r6, #12
   1a670:	0d6d      	lsrs	r5, r5, #21
   1a672:	468b      	mov	fp, r1
   1a674:	4690      	mov	r8, r2
   1a676:	0b3f      	lsrs	r7, r7, #12
   1a678:	0d64      	lsrs	r4, r4, #21
   1a67a:	429d      	cmp	r5, r3
   1a67c:	d020      	beq.n	1a6c0 <__ledf2+0x70>
   1a67e:	4b24      	ldr	r3, [pc, #144]	; (1a710 <__ledf2+0xc0>)
   1a680:	429c      	cmp	r4, r3
   1a682:	d022      	beq.n	1a6ca <__ledf2+0x7a>
   1a684:	2d00      	cmp	r5, #0
   1a686:	d112      	bne.n	1a6ae <__ledf2+0x5e>
   1a688:	4330      	orrs	r0, r6
   1a68a:	4243      	negs	r3, r0
   1a68c:	4143      	adcs	r3, r0
   1a68e:	b2db      	uxtb	r3, r3
   1a690:	2c00      	cmp	r4, #0
   1a692:	d01f      	beq.n	1a6d4 <__ledf2+0x84>
   1a694:	2b00      	cmp	r3, #0
   1a696:	d00c      	beq.n	1a6b2 <__ledf2+0x62>
   1a698:	464b      	mov	r3, r9
   1a69a:	2001      	movs	r0, #1
   1a69c:	3b01      	subs	r3, #1
   1a69e:	4303      	orrs	r3, r0
   1a6a0:	0018      	movs	r0, r3
   1a6a2:	bc3c      	pop	{r2, r3, r4, r5}
   1a6a4:	4690      	mov	r8, r2
   1a6a6:	4699      	mov	r9, r3
   1a6a8:	46a2      	mov	sl, r4
   1a6aa:	46ab      	mov	fp, r5
   1a6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a6ae:	2c00      	cmp	r4, #0
   1a6b0:	d016      	beq.n	1a6e0 <__ledf2+0x90>
   1a6b2:	45cb      	cmp	fp, r9
   1a6b4:	d017      	beq.n	1a6e6 <__ledf2+0x96>
   1a6b6:	465b      	mov	r3, fp
   1a6b8:	4259      	negs	r1, r3
   1a6ba:	2301      	movs	r3, #1
   1a6bc:	430b      	orrs	r3, r1
   1a6be:	e7ef      	b.n	1a6a0 <__ledf2+0x50>
   1a6c0:	0031      	movs	r1, r6
   1a6c2:	2302      	movs	r3, #2
   1a6c4:	4301      	orrs	r1, r0
   1a6c6:	d1eb      	bne.n	1a6a0 <__ledf2+0x50>
   1a6c8:	e7d9      	b.n	1a67e <__ledf2+0x2e>
   1a6ca:	0039      	movs	r1, r7
   1a6cc:	2302      	movs	r3, #2
   1a6ce:	4311      	orrs	r1, r2
   1a6d0:	d1e6      	bne.n	1a6a0 <__ledf2+0x50>
   1a6d2:	e7d7      	b.n	1a684 <__ledf2+0x34>
   1a6d4:	433a      	orrs	r2, r7
   1a6d6:	d1dd      	bne.n	1a694 <__ledf2+0x44>
   1a6d8:	2300      	movs	r3, #0
   1a6da:	2800      	cmp	r0, #0
   1a6dc:	d0e0      	beq.n	1a6a0 <__ledf2+0x50>
   1a6de:	e7ea      	b.n	1a6b6 <__ledf2+0x66>
   1a6e0:	433a      	orrs	r2, r7
   1a6e2:	d1e6      	bne.n	1a6b2 <__ledf2+0x62>
   1a6e4:	e7e7      	b.n	1a6b6 <__ledf2+0x66>
   1a6e6:	42a5      	cmp	r5, r4
   1a6e8:	dce5      	bgt.n	1a6b6 <__ledf2+0x66>
   1a6ea:	db05      	blt.n	1a6f8 <__ledf2+0xa8>
   1a6ec:	42be      	cmp	r6, r7
   1a6ee:	d8e2      	bhi.n	1a6b6 <__ledf2+0x66>
   1a6f0:	d007      	beq.n	1a702 <__ledf2+0xb2>
   1a6f2:	2300      	movs	r3, #0
   1a6f4:	42be      	cmp	r6, r7
   1a6f6:	d2d3      	bcs.n	1a6a0 <__ledf2+0x50>
   1a6f8:	4659      	mov	r1, fp
   1a6fa:	2301      	movs	r3, #1
   1a6fc:	3901      	subs	r1, #1
   1a6fe:	430b      	orrs	r3, r1
   1a700:	e7ce      	b.n	1a6a0 <__ledf2+0x50>
   1a702:	45c4      	cmp	ip, r8
   1a704:	d8d7      	bhi.n	1a6b6 <__ledf2+0x66>
   1a706:	2300      	movs	r3, #0
   1a708:	45c4      	cmp	ip, r8
   1a70a:	d3f5      	bcc.n	1a6f8 <__ledf2+0xa8>
   1a70c:	e7c8      	b.n	1a6a0 <__ledf2+0x50>
   1a70e:	46c0      	nop			; (mov r8, r8)
   1a710:	000007ff 	.word	0x000007ff

0001a714 <__aeabi_dmul>:
   1a714:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a716:	4657      	mov	r7, sl
   1a718:	4645      	mov	r5, r8
   1a71a:	46de      	mov	lr, fp
   1a71c:	464e      	mov	r6, r9
   1a71e:	b5e0      	push	{r5, r6, r7, lr}
   1a720:	030c      	lsls	r4, r1, #12
   1a722:	4698      	mov	r8, r3
   1a724:	004e      	lsls	r6, r1, #1
   1a726:	0b23      	lsrs	r3, r4, #12
   1a728:	b087      	sub	sp, #28
   1a72a:	0007      	movs	r7, r0
   1a72c:	4692      	mov	sl, r2
   1a72e:	469b      	mov	fp, r3
   1a730:	0d76      	lsrs	r6, r6, #21
   1a732:	0fcd      	lsrs	r5, r1, #31
   1a734:	2e00      	cmp	r6, #0
   1a736:	d06b      	beq.n	1a810 <__aeabi_dmul+0xfc>
   1a738:	4b6d      	ldr	r3, [pc, #436]	; (1a8f0 <__aeabi_dmul+0x1dc>)
   1a73a:	429e      	cmp	r6, r3
   1a73c:	d035      	beq.n	1a7aa <__aeabi_dmul+0x96>
   1a73e:	2480      	movs	r4, #128	; 0x80
   1a740:	465b      	mov	r3, fp
   1a742:	0f42      	lsrs	r2, r0, #29
   1a744:	0424      	lsls	r4, r4, #16
   1a746:	00db      	lsls	r3, r3, #3
   1a748:	4314      	orrs	r4, r2
   1a74a:	431c      	orrs	r4, r3
   1a74c:	00c3      	lsls	r3, r0, #3
   1a74e:	4699      	mov	r9, r3
   1a750:	4b68      	ldr	r3, [pc, #416]	; (1a8f4 <__aeabi_dmul+0x1e0>)
   1a752:	46a3      	mov	fp, r4
   1a754:	469c      	mov	ip, r3
   1a756:	2300      	movs	r3, #0
   1a758:	2700      	movs	r7, #0
   1a75a:	4466      	add	r6, ip
   1a75c:	9302      	str	r3, [sp, #8]
   1a75e:	4643      	mov	r3, r8
   1a760:	031c      	lsls	r4, r3, #12
   1a762:	005a      	lsls	r2, r3, #1
   1a764:	0fdb      	lsrs	r3, r3, #31
   1a766:	4650      	mov	r0, sl
   1a768:	0b24      	lsrs	r4, r4, #12
   1a76a:	0d52      	lsrs	r2, r2, #21
   1a76c:	4698      	mov	r8, r3
   1a76e:	d100      	bne.n	1a772 <__aeabi_dmul+0x5e>
   1a770:	e076      	b.n	1a860 <__aeabi_dmul+0x14c>
   1a772:	4b5f      	ldr	r3, [pc, #380]	; (1a8f0 <__aeabi_dmul+0x1dc>)
   1a774:	429a      	cmp	r2, r3
   1a776:	d06d      	beq.n	1a854 <__aeabi_dmul+0x140>
   1a778:	2380      	movs	r3, #128	; 0x80
   1a77a:	0f41      	lsrs	r1, r0, #29
   1a77c:	041b      	lsls	r3, r3, #16
   1a77e:	430b      	orrs	r3, r1
   1a780:	495c      	ldr	r1, [pc, #368]	; (1a8f4 <__aeabi_dmul+0x1e0>)
   1a782:	00e4      	lsls	r4, r4, #3
   1a784:	468c      	mov	ip, r1
   1a786:	431c      	orrs	r4, r3
   1a788:	00c3      	lsls	r3, r0, #3
   1a78a:	2000      	movs	r0, #0
   1a78c:	4462      	add	r2, ip
   1a78e:	4641      	mov	r1, r8
   1a790:	18b6      	adds	r6, r6, r2
   1a792:	4069      	eors	r1, r5
   1a794:	1c72      	adds	r2, r6, #1
   1a796:	9101      	str	r1, [sp, #4]
   1a798:	4694      	mov	ip, r2
   1a79a:	4307      	orrs	r7, r0
   1a79c:	2f0f      	cmp	r7, #15
   1a79e:	d900      	bls.n	1a7a2 <__aeabi_dmul+0x8e>
   1a7a0:	e0b0      	b.n	1a904 <__aeabi_dmul+0x1f0>
   1a7a2:	4a55      	ldr	r2, [pc, #340]	; (1a8f8 <__aeabi_dmul+0x1e4>)
   1a7a4:	00bf      	lsls	r7, r7, #2
   1a7a6:	59d2      	ldr	r2, [r2, r7]
   1a7a8:	4697      	mov	pc, r2
   1a7aa:	465b      	mov	r3, fp
   1a7ac:	4303      	orrs	r3, r0
   1a7ae:	4699      	mov	r9, r3
   1a7b0:	d000      	beq.n	1a7b4 <__aeabi_dmul+0xa0>
   1a7b2:	e087      	b.n	1a8c4 <__aeabi_dmul+0x1b0>
   1a7b4:	2300      	movs	r3, #0
   1a7b6:	469b      	mov	fp, r3
   1a7b8:	3302      	adds	r3, #2
   1a7ba:	2708      	movs	r7, #8
   1a7bc:	9302      	str	r3, [sp, #8]
   1a7be:	e7ce      	b.n	1a75e <__aeabi_dmul+0x4a>
   1a7c0:	4642      	mov	r2, r8
   1a7c2:	9201      	str	r2, [sp, #4]
   1a7c4:	2802      	cmp	r0, #2
   1a7c6:	d067      	beq.n	1a898 <__aeabi_dmul+0x184>
   1a7c8:	2803      	cmp	r0, #3
   1a7ca:	d100      	bne.n	1a7ce <__aeabi_dmul+0xba>
   1a7cc:	e20e      	b.n	1abec <__aeabi_dmul+0x4d8>
   1a7ce:	2801      	cmp	r0, #1
   1a7d0:	d000      	beq.n	1a7d4 <__aeabi_dmul+0xc0>
   1a7d2:	e162      	b.n	1aa9a <__aeabi_dmul+0x386>
   1a7d4:	2300      	movs	r3, #0
   1a7d6:	2400      	movs	r4, #0
   1a7d8:	2200      	movs	r2, #0
   1a7da:	4699      	mov	r9, r3
   1a7dc:	9901      	ldr	r1, [sp, #4]
   1a7de:	4001      	ands	r1, r0
   1a7e0:	b2cd      	uxtb	r5, r1
   1a7e2:	2100      	movs	r1, #0
   1a7e4:	0312      	lsls	r2, r2, #12
   1a7e6:	0d0b      	lsrs	r3, r1, #20
   1a7e8:	0b12      	lsrs	r2, r2, #12
   1a7ea:	051b      	lsls	r3, r3, #20
   1a7ec:	4313      	orrs	r3, r2
   1a7ee:	4a43      	ldr	r2, [pc, #268]	; (1a8fc <__aeabi_dmul+0x1e8>)
   1a7f0:	0524      	lsls	r4, r4, #20
   1a7f2:	4013      	ands	r3, r2
   1a7f4:	431c      	orrs	r4, r3
   1a7f6:	0064      	lsls	r4, r4, #1
   1a7f8:	07ed      	lsls	r5, r5, #31
   1a7fa:	0864      	lsrs	r4, r4, #1
   1a7fc:	432c      	orrs	r4, r5
   1a7fe:	4648      	mov	r0, r9
   1a800:	0021      	movs	r1, r4
   1a802:	b007      	add	sp, #28
   1a804:	bc3c      	pop	{r2, r3, r4, r5}
   1a806:	4690      	mov	r8, r2
   1a808:	4699      	mov	r9, r3
   1a80a:	46a2      	mov	sl, r4
   1a80c:	46ab      	mov	fp, r5
   1a80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a810:	4303      	orrs	r3, r0
   1a812:	4699      	mov	r9, r3
   1a814:	d04f      	beq.n	1a8b6 <__aeabi_dmul+0x1a2>
   1a816:	465b      	mov	r3, fp
   1a818:	2b00      	cmp	r3, #0
   1a81a:	d100      	bne.n	1a81e <__aeabi_dmul+0x10a>
   1a81c:	e189      	b.n	1ab32 <__aeabi_dmul+0x41e>
   1a81e:	4658      	mov	r0, fp
   1a820:	f000 fe0e 	bl	1b440 <__clzsi2>
   1a824:	0003      	movs	r3, r0
   1a826:	3b0b      	subs	r3, #11
   1a828:	2b1c      	cmp	r3, #28
   1a82a:	dd00      	ble.n	1a82e <__aeabi_dmul+0x11a>
   1a82c:	e17a      	b.n	1ab24 <__aeabi_dmul+0x410>
   1a82e:	221d      	movs	r2, #29
   1a830:	1ad3      	subs	r3, r2, r3
   1a832:	003a      	movs	r2, r7
   1a834:	0001      	movs	r1, r0
   1a836:	465c      	mov	r4, fp
   1a838:	40da      	lsrs	r2, r3
   1a83a:	3908      	subs	r1, #8
   1a83c:	408c      	lsls	r4, r1
   1a83e:	0013      	movs	r3, r2
   1a840:	408f      	lsls	r7, r1
   1a842:	4323      	orrs	r3, r4
   1a844:	469b      	mov	fp, r3
   1a846:	46b9      	mov	r9, r7
   1a848:	2300      	movs	r3, #0
   1a84a:	4e2d      	ldr	r6, [pc, #180]	; (1a900 <__aeabi_dmul+0x1ec>)
   1a84c:	2700      	movs	r7, #0
   1a84e:	1a36      	subs	r6, r6, r0
   1a850:	9302      	str	r3, [sp, #8]
   1a852:	e784      	b.n	1a75e <__aeabi_dmul+0x4a>
   1a854:	4653      	mov	r3, sl
   1a856:	4323      	orrs	r3, r4
   1a858:	d12a      	bne.n	1a8b0 <__aeabi_dmul+0x19c>
   1a85a:	2400      	movs	r4, #0
   1a85c:	2002      	movs	r0, #2
   1a85e:	e796      	b.n	1a78e <__aeabi_dmul+0x7a>
   1a860:	4653      	mov	r3, sl
   1a862:	4323      	orrs	r3, r4
   1a864:	d020      	beq.n	1a8a8 <__aeabi_dmul+0x194>
   1a866:	2c00      	cmp	r4, #0
   1a868:	d100      	bne.n	1a86c <__aeabi_dmul+0x158>
   1a86a:	e157      	b.n	1ab1c <__aeabi_dmul+0x408>
   1a86c:	0020      	movs	r0, r4
   1a86e:	f000 fde7 	bl	1b440 <__clzsi2>
   1a872:	0003      	movs	r3, r0
   1a874:	3b0b      	subs	r3, #11
   1a876:	2b1c      	cmp	r3, #28
   1a878:	dd00      	ble.n	1a87c <__aeabi_dmul+0x168>
   1a87a:	e149      	b.n	1ab10 <__aeabi_dmul+0x3fc>
   1a87c:	211d      	movs	r1, #29
   1a87e:	1acb      	subs	r3, r1, r3
   1a880:	4651      	mov	r1, sl
   1a882:	0002      	movs	r2, r0
   1a884:	40d9      	lsrs	r1, r3
   1a886:	4653      	mov	r3, sl
   1a888:	3a08      	subs	r2, #8
   1a88a:	4094      	lsls	r4, r2
   1a88c:	4093      	lsls	r3, r2
   1a88e:	430c      	orrs	r4, r1
   1a890:	4a1b      	ldr	r2, [pc, #108]	; (1a900 <__aeabi_dmul+0x1ec>)
   1a892:	1a12      	subs	r2, r2, r0
   1a894:	2000      	movs	r0, #0
   1a896:	e77a      	b.n	1a78e <__aeabi_dmul+0x7a>
   1a898:	2501      	movs	r5, #1
   1a89a:	9b01      	ldr	r3, [sp, #4]
   1a89c:	4c14      	ldr	r4, [pc, #80]	; (1a8f0 <__aeabi_dmul+0x1dc>)
   1a89e:	401d      	ands	r5, r3
   1a8a0:	2300      	movs	r3, #0
   1a8a2:	2200      	movs	r2, #0
   1a8a4:	4699      	mov	r9, r3
   1a8a6:	e79c      	b.n	1a7e2 <__aeabi_dmul+0xce>
   1a8a8:	2400      	movs	r4, #0
   1a8aa:	2200      	movs	r2, #0
   1a8ac:	2001      	movs	r0, #1
   1a8ae:	e76e      	b.n	1a78e <__aeabi_dmul+0x7a>
   1a8b0:	4653      	mov	r3, sl
   1a8b2:	2003      	movs	r0, #3
   1a8b4:	e76b      	b.n	1a78e <__aeabi_dmul+0x7a>
   1a8b6:	2300      	movs	r3, #0
   1a8b8:	469b      	mov	fp, r3
   1a8ba:	3301      	adds	r3, #1
   1a8bc:	2704      	movs	r7, #4
   1a8be:	2600      	movs	r6, #0
   1a8c0:	9302      	str	r3, [sp, #8]
   1a8c2:	e74c      	b.n	1a75e <__aeabi_dmul+0x4a>
   1a8c4:	2303      	movs	r3, #3
   1a8c6:	4681      	mov	r9, r0
   1a8c8:	270c      	movs	r7, #12
   1a8ca:	9302      	str	r3, [sp, #8]
   1a8cc:	e747      	b.n	1a75e <__aeabi_dmul+0x4a>
   1a8ce:	2280      	movs	r2, #128	; 0x80
   1a8d0:	2300      	movs	r3, #0
   1a8d2:	2500      	movs	r5, #0
   1a8d4:	0312      	lsls	r2, r2, #12
   1a8d6:	4699      	mov	r9, r3
   1a8d8:	4c05      	ldr	r4, [pc, #20]	; (1a8f0 <__aeabi_dmul+0x1dc>)
   1a8da:	e782      	b.n	1a7e2 <__aeabi_dmul+0xce>
   1a8dc:	465c      	mov	r4, fp
   1a8de:	464b      	mov	r3, r9
   1a8e0:	9802      	ldr	r0, [sp, #8]
   1a8e2:	e76f      	b.n	1a7c4 <__aeabi_dmul+0xb0>
   1a8e4:	465c      	mov	r4, fp
   1a8e6:	464b      	mov	r3, r9
   1a8e8:	9501      	str	r5, [sp, #4]
   1a8ea:	9802      	ldr	r0, [sp, #8]
   1a8ec:	e76a      	b.n	1a7c4 <__aeabi_dmul+0xb0>
   1a8ee:	46c0      	nop			; (mov r8, r8)
   1a8f0:	000007ff 	.word	0x000007ff
   1a8f4:	fffffc01 	.word	0xfffffc01
   1a8f8:	0001d1dc 	.word	0x0001d1dc
   1a8fc:	800fffff 	.word	0x800fffff
   1a900:	fffffc0d 	.word	0xfffffc0d
   1a904:	464a      	mov	r2, r9
   1a906:	4649      	mov	r1, r9
   1a908:	0c17      	lsrs	r7, r2, #16
   1a90a:	0c1a      	lsrs	r2, r3, #16
   1a90c:	041b      	lsls	r3, r3, #16
   1a90e:	0c1b      	lsrs	r3, r3, #16
   1a910:	0408      	lsls	r0, r1, #16
   1a912:	0019      	movs	r1, r3
   1a914:	0c00      	lsrs	r0, r0, #16
   1a916:	4341      	muls	r1, r0
   1a918:	0015      	movs	r5, r2
   1a91a:	4688      	mov	r8, r1
   1a91c:	0019      	movs	r1, r3
   1a91e:	437d      	muls	r5, r7
   1a920:	4379      	muls	r1, r7
   1a922:	9503      	str	r5, [sp, #12]
   1a924:	4689      	mov	r9, r1
   1a926:	0029      	movs	r1, r5
   1a928:	0015      	movs	r5, r2
   1a92a:	4345      	muls	r5, r0
   1a92c:	444d      	add	r5, r9
   1a92e:	9502      	str	r5, [sp, #8]
   1a930:	4645      	mov	r5, r8
   1a932:	0c2d      	lsrs	r5, r5, #16
   1a934:	46aa      	mov	sl, r5
   1a936:	9d02      	ldr	r5, [sp, #8]
   1a938:	4455      	add	r5, sl
   1a93a:	45a9      	cmp	r9, r5
   1a93c:	d906      	bls.n	1a94c <__aeabi_dmul+0x238>
   1a93e:	468a      	mov	sl, r1
   1a940:	2180      	movs	r1, #128	; 0x80
   1a942:	0249      	lsls	r1, r1, #9
   1a944:	4689      	mov	r9, r1
   1a946:	44ca      	add	sl, r9
   1a948:	4651      	mov	r1, sl
   1a94a:	9103      	str	r1, [sp, #12]
   1a94c:	0c29      	lsrs	r1, r5, #16
   1a94e:	9104      	str	r1, [sp, #16]
   1a950:	4641      	mov	r1, r8
   1a952:	0409      	lsls	r1, r1, #16
   1a954:	042d      	lsls	r5, r5, #16
   1a956:	0c09      	lsrs	r1, r1, #16
   1a958:	4688      	mov	r8, r1
   1a95a:	0029      	movs	r1, r5
   1a95c:	0c25      	lsrs	r5, r4, #16
   1a95e:	0424      	lsls	r4, r4, #16
   1a960:	4441      	add	r1, r8
   1a962:	0c24      	lsrs	r4, r4, #16
   1a964:	9105      	str	r1, [sp, #20]
   1a966:	0021      	movs	r1, r4
   1a968:	4341      	muls	r1, r0
   1a96a:	4688      	mov	r8, r1
   1a96c:	0021      	movs	r1, r4
   1a96e:	4379      	muls	r1, r7
   1a970:	468a      	mov	sl, r1
   1a972:	4368      	muls	r0, r5
   1a974:	4641      	mov	r1, r8
   1a976:	4450      	add	r0, sl
   1a978:	4681      	mov	r9, r0
   1a97a:	0c08      	lsrs	r0, r1, #16
   1a97c:	4448      	add	r0, r9
   1a97e:	436f      	muls	r7, r5
   1a980:	4582      	cmp	sl, r0
   1a982:	d903      	bls.n	1a98c <__aeabi_dmul+0x278>
   1a984:	2180      	movs	r1, #128	; 0x80
   1a986:	0249      	lsls	r1, r1, #9
   1a988:	4689      	mov	r9, r1
   1a98a:	444f      	add	r7, r9
   1a98c:	0c01      	lsrs	r1, r0, #16
   1a98e:	4689      	mov	r9, r1
   1a990:	0039      	movs	r1, r7
   1a992:	4449      	add	r1, r9
   1a994:	9102      	str	r1, [sp, #8]
   1a996:	4641      	mov	r1, r8
   1a998:	040f      	lsls	r7, r1, #16
   1a99a:	9904      	ldr	r1, [sp, #16]
   1a99c:	0c3f      	lsrs	r7, r7, #16
   1a99e:	4688      	mov	r8, r1
   1a9a0:	0400      	lsls	r0, r0, #16
   1a9a2:	19c0      	adds	r0, r0, r7
   1a9a4:	4480      	add	r8, r0
   1a9a6:	4641      	mov	r1, r8
   1a9a8:	9104      	str	r1, [sp, #16]
   1a9aa:	4659      	mov	r1, fp
   1a9ac:	0c0f      	lsrs	r7, r1, #16
   1a9ae:	0409      	lsls	r1, r1, #16
   1a9b0:	0c09      	lsrs	r1, r1, #16
   1a9b2:	4688      	mov	r8, r1
   1a9b4:	4359      	muls	r1, r3
   1a9b6:	468a      	mov	sl, r1
   1a9b8:	0039      	movs	r1, r7
   1a9ba:	4351      	muls	r1, r2
   1a9bc:	4689      	mov	r9, r1
   1a9be:	4641      	mov	r1, r8
   1a9c0:	434a      	muls	r2, r1
   1a9c2:	4651      	mov	r1, sl
   1a9c4:	0c09      	lsrs	r1, r1, #16
   1a9c6:	468b      	mov	fp, r1
   1a9c8:	437b      	muls	r3, r7
   1a9ca:	18d2      	adds	r2, r2, r3
   1a9cc:	445a      	add	r2, fp
   1a9ce:	4293      	cmp	r3, r2
   1a9d0:	d903      	bls.n	1a9da <__aeabi_dmul+0x2c6>
   1a9d2:	2380      	movs	r3, #128	; 0x80
   1a9d4:	025b      	lsls	r3, r3, #9
   1a9d6:	469b      	mov	fp, r3
   1a9d8:	44d9      	add	r9, fp
   1a9da:	4651      	mov	r1, sl
   1a9dc:	0409      	lsls	r1, r1, #16
   1a9de:	0c09      	lsrs	r1, r1, #16
   1a9e0:	468a      	mov	sl, r1
   1a9e2:	4641      	mov	r1, r8
   1a9e4:	4361      	muls	r1, r4
   1a9e6:	437c      	muls	r4, r7
   1a9e8:	0c13      	lsrs	r3, r2, #16
   1a9ea:	0412      	lsls	r2, r2, #16
   1a9ec:	444b      	add	r3, r9
   1a9ee:	4452      	add	r2, sl
   1a9f0:	46a1      	mov	r9, r4
   1a9f2:	468a      	mov	sl, r1
   1a9f4:	003c      	movs	r4, r7
   1a9f6:	4641      	mov	r1, r8
   1a9f8:	436c      	muls	r4, r5
   1a9fa:	434d      	muls	r5, r1
   1a9fc:	4651      	mov	r1, sl
   1a9fe:	444d      	add	r5, r9
   1aa00:	0c0f      	lsrs	r7, r1, #16
   1aa02:	197d      	adds	r5, r7, r5
   1aa04:	45a9      	cmp	r9, r5
   1aa06:	d903      	bls.n	1aa10 <__aeabi_dmul+0x2fc>
   1aa08:	2180      	movs	r1, #128	; 0x80
   1aa0a:	0249      	lsls	r1, r1, #9
   1aa0c:	4688      	mov	r8, r1
   1aa0e:	4444      	add	r4, r8
   1aa10:	9f04      	ldr	r7, [sp, #16]
   1aa12:	9903      	ldr	r1, [sp, #12]
   1aa14:	46b8      	mov	r8, r7
   1aa16:	4441      	add	r1, r8
   1aa18:	468b      	mov	fp, r1
   1aa1a:	4583      	cmp	fp, r0
   1aa1c:	4180      	sbcs	r0, r0
   1aa1e:	4241      	negs	r1, r0
   1aa20:	4688      	mov	r8, r1
   1aa22:	4651      	mov	r1, sl
   1aa24:	0408      	lsls	r0, r1, #16
   1aa26:	042f      	lsls	r7, r5, #16
   1aa28:	0c00      	lsrs	r0, r0, #16
   1aa2a:	183f      	adds	r7, r7, r0
   1aa2c:	4658      	mov	r0, fp
   1aa2e:	9902      	ldr	r1, [sp, #8]
   1aa30:	1810      	adds	r0, r2, r0
   1aa32:	4689      	mov	r9, r1
   1aa34:	4290      	cmp	r0, r2
   1aa36:	4192      	sbcs	r2, r2
   1aa38:	444f      	add	r7, r9
   1aa3a:	46ba      	mov	sl, r7
   1aa3c:	4252      	negs	r2, r2
   1aa3e:	4699      	mov	r9, r3
   1aa40:	4693      	mov	fp, r2
   1aa42:	44c2      	add	sl, r8
   1aa44:	44d1      	add	r9, sl
   1aa46:	44cb      	add	fp, r9
   1aa48:	428f      	cmp	r7, r1
   1aa4a:	41bf      	sbcs	r7, r7
   1aa4c:	45c2      	cmp	sl, r8
   1aa4e:	4189      	sbcs	r1, r1
   1aa50:	4599      	cmp	r9, r3
   1aa52:	419b      	sbcs	r3, r3
   1aa54:	4593      	cmp	fp, r2
   1aa56:	4192      	sbcs	r2, r2
   1aa58:	427f      	negs	r7, r7
   1aa5a:	4249      	negs	r1, r1
   1aa5c:	0c2d      	lsrs	r5, r5, #16
   1aa5e:	4252      	negs	r2, r2
   1aa60:	430f      	orrs	r7, r1
   1aa62:	425b      	negs	r3, r3
   1aa64:	4313      	orrs	r3, r2
   1aa66:	197f      	adds	r7, r7, r5
   1aa68:	18ff      	adds	r7, r7, r3
   1aa6a:	465b      	mov	r3, fp
   1aa6c:	193c      	adds	r4, r7, r4
   1aa6e:	0ddb      	lsrs	r3, r3, #23
   1aa70:	9a05      	ldr	r2, [sp, #20]
   1aa72:	0264      	lsls	r4, r4, #9
   1aa74:	431c      	orrs	r4, r3
   1aa76:	0243      	lsls	r3, r0, #9
   1aa78:	4313      	orrs	r3, r2
   1aa7a:	1e5d      	subs	r5, r3, #1
   1aa7c:	41ab      	sbcs	r3, r5
   1aa7e:	465a      	mov	r2, fp
   1aa80:	0dc0      	lsrs	r0, r0, #23
   1aa82:	4303      	orrs	r3, r0
   1aa84:	0252      	lsls	r2, r2, #9
   1aa86:	4313      	orrs	r3, r2
   1aa88:	01e2      	lsls	r2, r4, #7
   1aa8a:	d556      	bpl.n	1ab3a <__aeabi_dmul+0x426>
   1aa8c:	2001      	movs	r0, #1
   1aa8e:	085a      	lsrs	r2, r3, #1
   1aa90:	4003      	ands	r3, r0
   1aa92:	4313      	orrs	r3, r2
   1aa94:	07e2      	lsls	r2, r4, #31
   1aa96:	4313      	orrs	r3, r2
   1aa98:	0864      	lsrs	r4, r4, #1
   1aa9a:	485a      	ldr	r0, [pc, #360]	; (1ac04 <__aeabi_dmul+0x4f0>)
   1aa9c:	4460      	add	r0, ip
   1aa9e:	2800      	cmp	r0, #0
   1aaa0:	dd4d      	ble.n	1ab3e <__aeabi_dmul+0x42a>
   1aaa2:	075a      	lsls	r2, r3, #29
   1aaa4:	d009      	beq.n	1aaba <__aeabi_dmul+0x3a6>
   1aaa6:	220f      	movs	r2, #15
   1aaa8:	401a      	ands	r2, r3
   1aaaa:	2a04      	cmp	r2, #4
   1aaac:	d005      	beq.n	1aaba <__aeabi_dmul+0x3a6>
   1aaae:	1d1a      	adds	r2, r3, #4
   1aab0:	429a      	cmp	r2, r3
   1aab2:	419b      	sbcs	r3, r3
   1aab4:	425b      	negs	r3, r3
   1aab6:	18e4      	adds	r4, r4, r3
   1aab8:	0013      	movs	r3, r2
   1aaba:	01e2      	lsls	r2, r4, #7
   1aabc:	d504      	bpl.n	1aac8 <__aeabi_dmul+0x3b4>
   1aabe:	2080      	movs	r0, #128	; 0x80
   1aac0:	4a51      	ldr	r2, [pc, #324]	; (1ac08 <__aeabi_dmul+0x4f4>)
   1aac2:	00c0      	lsls	r0, r0, #3
   1aac4:	4014      	ands	r4, r2
   1aac6:	4460      	add	r0, ip
   1aac8:	4a50      	ldr	r2, [pc, #320]	; (1ac0c <__aeabi_dmul+0x4f8>)
   1aaca:	4290      	cmp	r0, r2
   1aacc:	dd00      	ble.n	1aad0 <__aeabi_dmul+0x3bc>
   1aace:	e6e3      	b.n	1a898 <__aeabi_dmul+0x184>
   1aad0:	2501      	movs	r5, #1
   1aad2:	08db      	lsrs	r3, r3, #3
   1aad4:	0762      	lsls	r2, r4, #29
   1aad6:	431a      	orrs	r2, r3
   1aad8:	0264      	lsls	r4, r4, #9
   1aada:	9b01      	ldr	r3, [sp, #4]
   1aadc:	4691      	mov	r9, r2
   1aade:	0b22      	lsrs	r2, r4, #12
   1aae0:	0544      	lsls	r4, r0, #21
   1aae2:	0d64      	lsrs	r4, r4, #21
   1aae4:	401d      	ands	r5, r3
   1aae6:	e67c      	b.n	1a7e2 <__aeabi_dmul+0xce>
   1aae8:	2280      	movs	r2, #128	; 0x80
   1aaea:	4659      	mov	r1, fp
   1aaec:	0312      	lsls	r2, r2, #12
   1aaee:	4211      	tst	r1, r2
   1aaf0:	d008      	beq.n	1ab04 <__aeabi_dmul+0x3f0>
   1aaf2:	4214      	tst	r4, r2
   1aaf4:	d106      	bne.n	1ab04 <__aeabi_dmul+0x3f0>
   1aaf6:	4322      	orrs	r2, r4
   1aaf8:	0312      	lsls	r2, r2, #12
   1aafa:	0b12      	lsrs	r2, r2, #12
   1aafc:	4645      	mov	r5, r8
   1aafe:	4699      	mov	r9, r3
   1ab00:	4c43      	ldr	r4, [pc, #268]	; (1ac10 <__aeabi_dmul+0x4fc>)
   1ab02:	e66e      	b.n	1a7e2 <__aeabi_dmul+0xce>
   1ab04:	465b      	mov	r3, fp
   1ab06:	431a      	orrs	r2, r3
   1ab08:	0312      	lsls	r2, r2, #12
   1ab0a:	0b12      	lsrs	r2, r2, #12
   1ab0c:	4c40      	ldr	r4, [pc, #256]	; (1ac10 <__aeabi_dmul+0x4fc>)
   1ab0e:	e668      	b.n	1a7e2 <__aeabi_dmul+0xce>
   1ab10:	0003      	movs	r3, r0
   1ab12:	4654      	mov	r4, sl
   1ab14:	3b28      	subs	r3, #40	; 0x28
   1ab16:	409c      	lsls	r4, r3
   1ab18:	2300      	movs	r3, #0
   1ab1a:	e6b9      	b.n	1a890 <__aeabi_dmul+0x17c>
   1ab1c:	f000 fc90 	bl	1b440 <__clzsi2>
   1ab20:	3020      	adds	r0, #32
   1ab22:	e6a6      	b.n	1a872 <__aeabi_dmul+0x15e>
   1ab24:	0003      	movs	r3, r0
   1ab26:	3b28      	subs	r3, #40	; 0x28
   1ab28:	409f      	lsls	r7, r3
   1ab2a:	2300      	movs	r3, #0
   1ab2c:	46bb      	mov	fp, r7
   1ab2e:	4699      	mov	r9, r3
   1ab30:	e68a      	b.n	1a848 <__aeabi_dmul+0x134>
   1ab32:	f000 fc85 	bl	1b440 <__clzsi2>
   1ab36:	3020      	adds	r0, #32
   1ab38:	e674      	b.n	1a824 <__aeabi_dmul+0x110>
   1ab3a:	46b4      	mov	ip, r6
   1ab3c:	e7ad      	b.n	1aa9a <__aeabi_dmul+0x386>
   1ab3e:	2501      	movs	r5, #1
   1ab40:	1a2a      	subs	r2, r5, r0
   1ab42:	2a38      	cmp	r2, #56	; 0x38
   1ab44:	dd06      	ble.n	1ab54 <__aeabi_dmul+0x440>
   1ab46:	9b01      	ldr	r3, [sp, #4]
   1ab48:	2400      	movs	r4, #0
   1ab4a:	401d      	ands	r5, r3
   1ab4c:	2300      	movs	r3, #0
   1ab4e:	2200      	movs	r2, #0
   1ab50:	4699      	mov	r9, r3
   1ab52:	e646      	b.n	1a7e2 <__aeabi_dmul+0xce>
   1ab54:	2a1f      	cmp	r2, #31
   1ab56:	dc21      	bgt.n	1ab9c <__aeabi_dmul+0x488>
   1ab58:	2520      	movs	r5, #32
   1ab5a:	0020      	movs	r0, r4
   1ab5c:	1aad      	subs	r5, r5, r2
   1ab5e:	001e      	movs	r6, r3
   1ab60:	40ab      	lsls	r3, r5
   1ab62:	40a8      	lsls	r0, r5
   1ab64:	40d6      	lsrs	r6, r2
   1ab66:	1e5d      	subs	r5, r3, #1
   1ab68:	41ab      	sbcs	r3, r5
   1ab6a:	4330      	orrs	r0, r6
   1ab6c:	4318      	orrs	r0, r3
   1ab6e:	40d4      	lsrs	r4, r2
   1ab70:	0743      	lsls	r3, r0, #29
   1ab72:	d009      	beq.n	1ab88 <__aeabi_dmul+0x474>
   1ab74:	230f      	movs	r3, #15
   1ab76:	4003      	ands	r3, r0
   1ab78:	2b04      	cmp	r3, #4
   1ab7a:	d005      	beq.n	1ab88 <__aeabi_dmul+0x474>
   1ab7c:	0003      	movs	r3, r0
   1ab7e:	1d18      	adds	r0, r3, #4
   1ab80:	4298      	cmp	r0, r3
   1ab82:	419b      	sbcs	r3, r3
   1ab84:	425b      	negs	r3, r3
   1ab86:	18e4      	adds	r4, r4, r3
   1ab88:	0223      	lsls	r3, r4, #8
   1ab8a:	d521      	bpl.n	1abd0 <__aeabi_dmul+0x4bc>
   1ab8c:	2501      	movs	r5, #1
   1ab8e:	9b01      	ldr	r3, [sp, #4]
   1ab90:	2401      	movs	r4, #1
   1ab92:	401d      	ands	r5, r3
   1ab94:	2300      	movs	r3, #0
   1ab96:	2200      	movs	r2, #0
   1ab98:	4699      	mov	r9, r3
   1ab9a:	e622      	b.n	1a7e2 <__aeabi_dmul+0xce>
   1ab9c:	251f      	movs	r5, #31
   1ab9e:	0021      	movs	r1, r4
   1aba0:	426d      	negs	r5, r5
   1aba2:	1a28      	subs	r0, r5, r0
   1aba4:	40c1      	lsrs	r1, r0
   1aba6:	0008      	movs	r0, r1
   1aba8:	2a20      	cmp	r2, #32
   1abaa:	d01d      	beq.n	1abe8 <__aeabi_dmul+0x4d4>
   1abac:	355f      	adds	r5, #95	; 0x5f
   1abae:	1aaa      	subs	r2, r5, r2
   1abb0:	4094      	lsls	r4, r2
   1abb2:	4323      	orrs	r3, r4
   1abb4:	1e5c      	subs	r4, r3, #1
   1abb6:	41a3      	sbcs	r3, r4
   1abb8:	2507      	movs	r5, #7
   1abba:	4303      	orrs	r3, r0
   1abbc:	401d      	ands	r5, r3
   1abbe:	2200      	movs	r2, #0
   1abc0:	2d00      	cmp	r5, #0
   1abc2:	d009      	beq.n	1abd8 <__aeabi_dmul+0x4c4>
   1abc4:	220f      	movs	r2, #15
   1abc6:	2400      	movs	r4, #0
   1abc8:	401a      	ands	r2, r3
   1abca:	0018      	movs	r0, r3
   1abcc:	2a04      	cmp	r2, #4
   1abce:	d1d6      	bne.n	1ab7e <__aeabi_dmul+0x46a>
   1abd0:	0003      	movs	r3, r0
   1abd2:	0765      	lsls	r5, r4, #29
   1abd4:	0264      	lsls	r4, r4, #9
   1abd6:	0b22      	lsrs	r2, r4, #12
   1abd8:	08db      	lsrs	r3, r3, #3
   1abda:	432b      	orrs	r3, r5
   1abdc:	2501      	movs	r5, #1
   1abde:	4699      	mov	r9, r3
   1abe0:	9b01      	ldr	r3, [sp, #4]
   1abe2:	2400      	movs	r4, #0
   1abe4:	401d      	ands	r5, r3
   1abe6:	e5fc      	b.n	1a7e2 <__aeabi_dmul+0xce>
   1abe8:	2400      	movs	r4, #0
   1abea:	e7e2      	b.n	1abb2 <__aeabi_dmul+0x49e>
   1abec:	2280      	movs	r2, #128	; 0x80
   1abee:	2501      	movs	r5, #1
   1abf0:	0312      	lsls	r2, r2, #12
   1abf2:	4322      	orrs	r2, r4
   1abf4:	9901      	ldr	r1, [sp, #4]
   1abf6:	0312      	lsls	r2, r2, #12
   1abf8:	0b12      	lsrs	r2, r2, #12
   1abfa:	400d      	ands	r5, r1
   1abfc:	4699      	mov	r9, r3
   1abfe:	4c04      	ldr	r4, [pc, #16]	; (1ac10 <__aeabi_dmul+0x4fc>)
   1ac00:	e5ef      	b.n	1a7e2 <__aeabi_dmul+0xce>
   1ac02:	46c0      	nop			; (mov r8, r8)
   1ac04:	000003ff 	.word	0x000003ff
   1ac08:	feffffff 	.word	0xfeffffff
   1ac0c:	000007fe 	.word	0x000007fe
   1ac10:	000007ff 	.word	0x000007ff

0001ac14 <__aeabi_dsub>:
   1ac14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac16:	4646      	mov	r6, r8
   1ac18:	46d6      	mov	lr, sl
   1ac1a:	464f      	mov	r7, r9
   1ac1c:	030c      	lsls	r4, r1, #12
   1ac1e:	b5c0      	push	{r6, r7, lr}
   1ac20:	0fcd      	lsrs	r5, r1, #31
   1ac22:	004e      	lsls	r6, r1, #1
   1ac24:	0a61      	lsrs	r1, r4, #9
   1ac26:	0f44      	lsrs	r4, r0, #29
   1ac28:	430c      	orrs	r4, r1
   1ac2a:	00c1      	lsls	r1, r0, #3
   1ac2c:	0058      	lsls	r0, r3, #1
   1ac2e:	0d40      	lsrs	r0, r0, #21
   1ac30:	4684      	mov	ip, r0
   1ac32:	468a      	mov	sl, r1
   1ac34:	000f      	movs	r7, r1
   1ac36:	0319      	lsls	r1, r3, #12
   1ac38:	0f50      	lsrs	r0, r2, #29
   1ac3a:	0a49      	lsrs	r1, r1, #9
   1ac3c:	4301      	orrs	r1, r0
   1ac3e:	48c6      	ldr	r0, [pc, #792]	; (1af58 <__aeabi_dsub+0x344>)
   1ac40:	0d76      	lsrs	r6, r6, #21
   1ac42:	46a8      	mov	r8, r5
   1ac44:	0fdb      	lsrs	r3, r3, #31
   1ac46:	00d2      	lsls	r2, r2, #3
   1ac48:	4584      	cmp	ip, r0
   1ac4a:	d100      	bne.n	1ac4e <__aeabi_dsub+0x3a>
   1ac4c:	e0d8      	b.n	1ae00 <__aeabi_dsub+0x1ec>
   1ac4e:	2001      	movs	r0, #1
   1ac50:	4043      	eors	r3, r0
   1ac52:	42ab      	cmp	r3, r5
   1ac54:	d100      	bne.n	1ac58 <__aeabi_dsub+0x44>
   1ac56:	e0a6      	b.n	1ada6 <__aeabi_dsub+0x192>
   1ac58:	4660      	mov	r0, ip
   1ac5a:	1a35      	subs	r5, r6, r0
   1ac5c:	2d00      	cmp	r5, #0
   1ac5e:	dc00      	bgt.n	1ac62 <__aeabi_dsub+0x4e>
   1ac60:	e105      	b.n	1ae6e <__aeabi_dsub+0x25a>
   1ac62:	2800      	cmp	r0, #0
   1ac64:	d110      	bne.n	1ac88 <__aeabi_dsub+0x74>
   1ac66:	000b      	movs	r3, r1
   1ac68:	4313      	orrs	r3, r2
   1ac6a:	d100      	bne.n	1ac6e <__aeabi_dsub+0x5a>
   1ac6c:	e0d7      	b.n	1ae1e <__aeabi_dsub+0x20a>
   1ac6e:	1e6b      	subs	r3, r5, #1
   1ac70:	2b00      	cmp	r3, #0
   1ac72:	d000      	beq.n	1ac76 <__aeabi_dsub+0x62>
   1ac74:	e14b      	b.n	1af0e <__aeabi_dsub+0x2fa>
   1ac76:	4653      	mov	r3, sl
   1ac78:	1a9f      	subs	r7, r3, r2
   1ac7a:	45ba      	cmp	sl, r7
   1ac7c:	4180      	sbcs	r0, r0
   1ac7e:	1a64      	subs	r4, r4, r1
   1ac80:	4240      	negs	r0, r0
   1ac82:	1a24      	subs	r4, r4, r0
   1ac84:	2601      	movs	r6, #1
   1ac86:	e01e      	b.n	1acc6 <__aeabi_dsub+0xb2>
   1ac88:	4bb3      	ldr	r3, [pc, #716]	; (1af58 <__aeabi_dsub+0x344>)
   1ac8a:	429e      	cmp	r6, r3
   1ac8c:	d048      	beq.n	1ad20 <__aeabi_dsub+0x10c>
   1ac8e:	2380      	movs	r3, #128	; 0x80
   1ac90:	041b      	lsls	r3, r3, #16
   1ac92:	4319      	orrs	r1, r3
   1ac94:	2d38      	cmp	r5, #56	; 0x38
   1ac96:	dd00      	ble.n	1ac9a <__aeabi_dsub+0x86>
   1ac98:	e119      	b.n	1aece <__aeabi_dsub+0x2ba>
   1ac9a:	2d1f      	cmp	r5, #31
   1ac9c:	dd00      	ble.n	1aca0 <__aeabi_dsub+0x8c>
   1ac9e:	e14c      	b.n	1af3a <__aeabi_dsub+0x326>
   1aca0:	2320      	movs	r3, #32
   1aca2:	000f      	movs	r7, r1
   1aca4:	1b5b      	subs	r3, r3, r5
   1aca6:	0010      	movs	r0, r2
   1aca8:	409a      	lsls	r2, r3
   1acaa:	409f      	lsls	r7, r3
   1acac:	40e8      	lsrs	r0, r5
   1acae:	1e53      	subs	r3, r2, #1
   1acb0:	419a      	sbcs	r2, r3
   1acb2:	40e9      	lsrs	r1, r5
   1acb4:	4307      	orrs	r7, r0
   1acb6:	4317      	orrs	r7, r2
   1acb8:	4653      	mov	r3, sl
   1acba:	1bdf      	subs	r7, r3, r7
   1acbc:	1a61      	subs	r1, r4, r1
   1acbe:	45ba      	cmp	sl, r7
   1acc0:	41a4      	sbcs	r4, r4
   1acc2:	4264      	negs	r4, r4
   1acc4:	1b0c      	subs	r4, r1, r4
   1acc6:	0223      	lsls	r3, r4, #8
   1acc8:	d400      	bmi.n	1accc <__aeabi_dsub+0xb8>
   1acca:	e0c5      	b.n	1ae58 <__aeabi_dsub+0x244>
   1accc:	0264      	lsls	r4, r4, #9
   1acce:	0a65      	lsrs	r5, r4, #9
   1acd0:	2d00      	cmp	r5, #0
   1acd2:	d100      	bne.n	1acd6 <__aeabi_dsub+0xc2>
   1acd4:	e0f6      	b.n	1aec4 <__aeabi_dsub+0x2b0>
   1acd6:	0028      	movs	r0, r5
   1acd8:	f000 fbb2 	bl	1b440 <__clzsi2>
   1acdc:	0003      	movs	r3, r0
   1acde:	3b08      	subs	r3, #8
   1ace0:	2b1f      	cmp	r3, #31
   1ace2:	dd00      	ble.n	1ace6 <__aeabi_dsub+0xd2>
   1ace4:	e0e9      	b.n	1aeba <__aeabi_dsub+0x2a6>
   1ace6:	2220      	movs	r2, #32
   1ace8:	003c      	movs	r4, r7
   1acea:	1ad2      	subs	r2, r2, r3
   1acec:	409d      	lsls	r5, r3
   1acee:	40d4      	lsrs	r4, r2
   1acf0:	409f      	lsls	r7, r3
   1acf2:	4325      	orrs	r5, r4
   1acf4:	429e      	cmp	r6, r3
   1acf6:	dd00      	ble.n	1acfa <__aeabi_dsub+0xe6>
   1acf8:	e0db      	b.n	1aeb2 <__aeabi_dsub+0x29e>
   1acfa:	1b9e      	subs	r6, r3, r6
   1acfc:	1c73      	adds	r3, r6, #1
   1acfe:	2b1f      	cmp	r3, #31
   1ad00:	dd00      	ble.n	1ad04 <__aeabi_dsub+0xf0>
   1ad02:	e10a      	b.n	1af1a <__aeabi_dsub+0x306>
   1ad04:	2220      	movs	r2, #32
   1ad06:	0038      	movs	r0, r7
   1ad08:	1ad2      	subs	r2, r2, r3
   1ad0a:	0029      	movs	r1, r5
   1ad0c:	4097      	lsls	r7, r2
   1ad0e:	002c      	movs	r4, r5
   1ad10:	4091      	lsls	r1, r2
   1ad12:	40d8      	lsrs	r0, r3
   1ad14:	1e7a      	subs	r2, r7, #1
   1ad16:	4197      	sbcs	r7, r2
   1ad18:	40dc      	lsrs	r4, r3
   1ad1a:	2600      	movs	r6, #0
   1ad1c:	4301      	orrs	r1, r0
   1ad1e:	430f      	orrs	r7, r1
   1ad20:	077b      	lsls	r3, r7, #29
   1ad22:	d009      	beq.n	1ad38 <__aeabi_dsub+0x124>
   1ad24:	230f      	movs	r3, #15
   1ad26:	403b      	ands	r3, r7
   1ad28:	2b04      	cmp	r3, #4
   1ad2a:	d005      	beq.n	1ad38 <__aeabi_dsub+0x124>
   1ad2c:	1d3b      	adds	r3, r7, #4
   1ad2e:	42bb      	cmp	r3, r7
   1ad30:	41bf      	sbcs	r7, r7
   1ad32:	427f      	negs	r7, r7
   1ad34:	19e4      	adds	r4, r4, r7
   1ad36:	001f      	movs	r7, r3
   1ad38:	0223      	lsls	r3, r4, #8
   1ad3a:	d525      	bpl.n	1ad88 <__aeabi_dsub+0x174>
   1ad3c:	4b86      	ldr	r3, [pc, #536]	; (1af58 <__aeabi_dsub+0x344>)
   1ad3e:	3601      	adds	r6, #1
   1ad40:	429e      	cmp	r6, r3
   1ad42:	d100      	bne.n	1ad46 <__aeabi_dsub+0x132>
   1ad44:	e0af      	b.n	1aea6 <__aeabi_dsub+0x292>
   1ad46:	4b85      	ldr	r3, [pc, #532]	; (1af5c <__aeabi_dsub+0x348>)
   1ad48:	2501      	movs	r5, #1
   1ad4a:	401c      	ands	r4, r3
   1ad4c:	4643      	mov	r3, r8
   1ad4e:	0762      	lsls	r2, r4, #29
   1ad50:	08ff      	lsrs	r7, r7, #3
   1ad52:	0264      	lsls	r4, r4, #9
   1ad54:	0576      	lsls	r6, r6, #21
   1ad56:	4317      	orrs	r7, r2
   1ad58:	0b24      	lsrs	r4, r4, #12
   1ad5a:	0d76      	lsrs	r6, r6, #21
   1ad5c:	401d      	ands	r5, r3
   1ad5e:	2100      	movs	r1, #0
   1ad60:	0324      	lsls	r4, r4, #12
   1ad62:	0b23      	lsrs	r3, r4, #12
   1ad64:	0d0c      	lsrs	r4, r1, #20
   1ad66:	4a7e      	ldr	r2, [pc, #504]	; (1af60 <__aeabi_dsub+0x34c>)
   1ad68:	0524      	lsls	r4, r4, #20
   1ad6a:	431c      	orrs	r4, r3
   1ad6c:	4014      	ands	r4, r2
   1ad6e:	0533      	lsls	r3, r6, #20
   1ad70:	4323      	orrs	r3, r4
   1ad72:	005b      	lsls	r3, r3, #1
   1ad74:	07ed      	lsls	r5, r5, #31
   1ad76:	085b      	lsrs	r3, r3, #1
   1ad78:	432b      	orrs	r3, r5
   1ad7a:	0038      	movs	r0, r7
   1ad7c:	0019      	movs	r1, r3
   1ad7e:	bc1c      	pop	{r2, r3, r4}
   1ad80:	4690      	mov	r8, r2
   1ad82:	4699      	mov	r9, r3
   1ad84:	46a2      	mov	sl, r4
   1ad86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad88:	2501      	movs	r5, #1
   1ad8a:	4643      	mov	r3, r8
   1ad8c:	0762      	lsls	r2, r4, #29
   1ad8e:	08ff      	lsrs	r7, r7, #3
   1ad90:	4317      	orrs	r7, r2
   1ad92:	08e4      	lsrs	r4, r4, #3
   1ad94:	401d      	ands	r5, r3
   1ad96:	4b70      	ldr	r3, [pc, #448]	; (1af58 <__aeabi_dsub+0x344>)
   1ad98:	429e      	cmp	r6, r3
   1ad9a:	d036      	beq.n	1ae0a <__aeabi_dsub+0x1f6>
   1ad9c:	0324      	lsls	r4, r4, #12
   1ad9e:	0576      	lsls	r6, r6, #21
   1ada0:	0b24      	lsrs	r4, r4, #12
   1ada2:	0d76      	lsrs	r6, r6, #21
   1ada4:	e7db      	b.n	1ad5e <__aeabi_dsub+0x14a>
   1ada6:	4663      	mov	r3, ip
   1ada8:	1af3      	subs	r3, r6, r3
   1adaa:	2b00      	cmp	r3, #0
   1adac:	dc00      	bgt.n	1adb0 <__aeabi_dsub+0x19c>
   1adae:	e094      	b.n	1aeda <__aeabi_dsub+0x2c6>
   1adb0:	4660      	mov	r0, ip
   1adb2:	2800      	cmp	r0, #0
   1adb4:	d035      	beq.n	1ae22 <__aeabi_dsub+0x20e>
   1adb6:	4868      	ldr	r0, [pc, #416]	; (1af58 <__aeabi_dsub+0x344>)
   1adb8:	4286      	cmp	r6, r0
   1adba:	d0b1      	beq.n	1ad20 <__aeabi_dsub+0x10c>
   1adbc:	2780      	movs	r7, #128	; 0x80
   1adbe:	043f      	lsls	r7, r7, #16
   1adc0:	4339      	orrs	r1, r7
   1adc2:	2b38      	cmp	r3, #56	; 0x38
   1adc4:	dc00      	bgt.n	1adc8 <__aeabi_dsub+0x1b4>
   1adc6:	e0fd      	b.n	1afc4 <__aeabi_dsub+0x3b0>
   1adc8:	430a      	orrs	r2, r1
   1adca:	0017      	movs	r7, r2
   1adcc:	2100      	movs	r1, #0
   1adce:	1e7a      	subs	r2, r7, #1
   1add0:	4197      	sbcs	r7, r2
   1add2:	4457      	add	r7, sl
   1add4:	4557      	cmp	r7, sl
   1add6:	4180      	sbcs	r0, r0
   1add8:	1909      	adds	r1, r1, r4
   1adda:	4244      	negs	r4, r0
   1addc:	190c      	adds	r4, r1, r4
   1adde:	0223      	lsls	r3, r4, #8
   1ade0:	d53a      	bpl.n	1ae58 <__aeabi_dsub+0x244>
   1ade2:	4b5d      	ldr	r3, [pc, #372]	; (1af58 <__aeabi_dsub+0x344>)
   1ade4:	3601      	adds	r6, #1
   1ade6:	429e      	cmp	r6, r3
   1ade8:	d100      	bne.n	1adec <__aeabi_dsub+0x1d8>
   1adea:	e14b      	b.n	1b084 <__aeabi_dsub+0x470>
   1adec:	2201      	movs	r2, #1
   1adee:	4b5b      	ldr	r3, [pc, #364]	; (1af5c <__aeabi_dsub+0x348>)
   1adf0:	401c      	ands	r4, r3
   1adf2:	087b      	lsrs	r3, r7, #1
   1adf4:	4017      	ands	r7, r2
   1adf6:	431f      	orrs	r7, r3
   1adf8:	07e2      	lsls	r2, r4, #31
   1adfa:	4317      	orrs	r7, r2
   1adfc:	0864      	lsrs	r4, r4, #1
   1adfe:	e78f      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1ae00:	0008      	movs	r0, r1
   1ae02:	4310      	orrs	r0, r2
   1ae04:	d000      	beq.n	1ae08 <__aeabi_dsub+0x1f4>
   1ae06:	e724      	b.n	1ac52 <__aeabi_dsub+0x3e>
   1ae08:	e721      	b.n	1ac4e <__aeabi_dsub+0x3a>
   1ae0a:	0023      	movs	r3, r4
   1ae0c:	433b      	orrs	r3, r7
   1ae0e:	d100      	bne.n	1ae12 <__aeabi_dsub+0x1fe>
   1ae10:	e1b9      	b.n	1b186 <__aeabi_dsub+0x572>
   1ae12:	2280      	movs	r2, #128	; 0x80
   1ae14:	0312      	lsls	r2, r2, #12
   1ae16:	4314      	orrs	r4, r2
   1ae18:	0324      	lsls	r4, r4, #12
   1ae1a:	0b24      	lsrs	r4, r4, #12
   1ae1c:	e79f      	b.n	1ad5e <__aeabi_dsub+0x14a>
   1ae1e:	002e      	movs	r6, r5
   1ae20:	e77e      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1ae22:	0008      	movs	r0, r1
   1ae24:	4310      	orrs	r0, r2
   1ae26:	d100      	bne.n	1ae2a <__aeabi_dsub+0x216>
   1ae28:	e0ca      	b.n	1afc0 <__aeabi_dsub+0x3ac>
   1ae2a:	1e58      	subs	r0, r3, #1
   1ae2c:	4684      	mov	ip, r0
   1ae2e:	2800      	cmp	r0, #0
   1ae30:	d000      	beq.n	1ae34 <__aeabi_dsub+0x220>
   1ae32:	e0e7      	b.n	1b004 <__aeabi_dsub+0x3f0>
   1ae34:	4452      	add	r2, sl
   1ae36:	4552      	cmp	r2, sl
   1ae38:	4180      	sbcs	r0, r0
   1ae3a:	1864      	adds	r4, r4, r1
   1ae3c:	4240      	negs	r0, r0
   1ae3e:	1824      	adds	r4, r4, r0
   1ae40:	0017      	movs	r7, r2
   1ae42:	2601      	movs	r6, #1
   1ae44:	0223      	lsls	r3, r4, #8
   1ae46:	d507      	bpl.n	1ae58 <__aeabi_dsub+0x244>
   1ae48:	2602      	movs	r6, #2
   1ae4a:	e7cf      	b.n	1adec <__aeabi_dsub+0x1d8>
   1ae4c:	4664      	mov	r4, ip
   1ae4e:	432c      	orrs	r4, r5
   1ae50:	d100      	bne.n	1ae54 <__aeabi_dsub+0x240>
   1ae52:	e1b3      	b.n	1b1bc <__aeabi_dsub+0x5a8>
   1ae54:	002c      	movs	r4, r5
   1ae56:	4667      	mov	r7, ip
   1ae58:	077b      	lsls	r3, r7, #29
   1ae5a:	d000      	beq.n	1ae5e <__aeabi_dsub+0x24a>
   1ae5c:	e762      	b.n	1ad24 <__aeabi_dsub+0x110>
   1ae5e:	0763      	lsls	r3, r4, #29
   1ae60:	08ff      	lsrs	r7, r7, #3
   1ae62:	431f      	orrs	r7, r3
   1ae64:	2501      	movs	r5, #1
   1ae66:	4643      	mov	r3, r8
   1ae68:	08e4      	lsrs	r4, r4, #3
   1ae6a:	401d      	ands	r5, r3
   1ae6c:	e793      	b.n	1ad96 <__aeabi_dsub+0x182>
   1ae6e:	2d00      	cmp	r5, #0
   1ae70:	d178      	bne.n	1af64 <__aeabi_dsub+0x350>
   1ae72:	1c75      	adds	r5, r6, #1
   1ae74:	056d      	lsls	r5, r5, #21
   1ae76:	0d6d      	lsrs	r5, r5, #21
   1ae78:	2d01      	cmp	r5, #1
   1ae7a:	dc00      	bgt.n	1ae7e <__aeabi_dsub+0x26a>
   1ae7c:	e0f2      	b.n	1b064 <__aeabi_dsub+0x450>
   1ae7e:	4650      	mov	r0, sl
   1ae80:	1a80      	subs	r0, r0, r2
   1ae82:	4582      	cmp	sl, r0
   1ae84:	41bf      	sbcs	r7, r7
   1ae86:	1a65      	subs	r5, r4, r1
   1ae88:	427f      	negs	r7, r7
   1ae8a:	1bed      	subs	r5, r5, r7
   1ae8c:	4684      	mov	ip, r0
   1ae8e:	0228      	lsls	r0, r5, #8
   1ae90:	d400      	bmi.n	1ae94 <__aeabi_dsub+0x280>
   1ae92:	e08c      	b.n	1afae <__aeabi_dsub+0x39a>
   1ae94:	4650      	mov	r0, sl
   1ae96:	1a17      	subs	r7, r2, r0
   1ae98:	42ba      	cmp	r2, r7
   1ae9a:	4192      	sbcs	r2, r2
   1ae9c:	1b0c      	subs	r4, r1, r4
   1ae9e:	4255      	negs	r5, r2
   1aea0:	1b65      	subs	r5, r4, r5
   1aea2:	4698      	mov	r8, r3
   1aea4:	e714      	b.n	1acd0 <__aeabi_dsub+0xbc>
   1aea6:	2501      	movs	r5, #1
   1aea8:	4643      	mov	r3, r8
   1aeaa:	2400      	movs	r4, #0
   1aeac:	401d      	ands	r5, r3
   1aeae:	2700      	movs	r7, #0
   1aeb0:	e755      	b.n	1ad5e <__aeabi_dsub+0x14a>
   1aeb2:	4c2a      	ldr	r4, [pc, #168]	; (1af5c <__aeabi_dsub+0x348>)
   1aeb4:	1af6      	subs	r6, r6, r3
   1aeb6:	402c      	ands	r4, r5
   1aeb8:	e732      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1aeba:	003d      	movs	r5, r7
   1aebc:	3828      	subs	r0, #40	; 0x28
   1aebe:	4085      	lsls	r5, r0
   1aec0:	2700      	movs	r7, #0
   1aec2:	e717      	b.n	1acf4 <__aeabi_dsub+0xe0>
   1aec4:	0038      	movs	r0, r7
   1aec6:	f000 fabb 	bl	1b440 <__clzsi2>
   1aeca:	3020      	adds	r0, #32
   1aecc:	e706      	b.n	1acdc <__aeabi_dsub+0xc8>
   1aece:	430a      	orrs	r2, r1
   1aed0:	0017      	movs	r7, r2
   1aed2:	2100      	movs	r1, #0
   1aed4:	1e7a      	subs	r2, r7, #1
   1aed6:	4197      	sbcs	r7, r2
   1aed8:	e6ee      	b.n	1acb8 <__aeabi_dsub+0xa4>
   1aeda:	2b00      	cmp	r3, #0
   1aedc:	d000      	beq.n	1aee0 <__aeabi_dsub+0x2cc>
   1aede:	e0e5      	b.n	1b0ac <__aeabi_dsub+0x498>
   1aee0:	1c73      	adds	r3, r6, #1
   1aee2:	469c      	mov	ip, r3
   1aee4:	055b      	lsls	r3, r3, #21
   1aee6:	0d5b      	lsrs	r3, r3, #21
   1aee8:	2b01      	cmp	r3, #1
   1aeea:	dc00      	bgt.n	1aeee <__aeabi_dsub+0x2da>
   1aeec:	e09f      	b.n	1b02e <__aeabi_dsub+0x41a>
   1aeee:	4b1a      	ldr	r3, [pc, #104]	; (1af58 <__aeabi_dsub+0x344>)
   1aef0:	459c      	cmp	ip, r3
   1aef2:	d100      	bne.n	1aef6 <__aeabi_dsub+0x2e2>
   1aef4:	e0c5      	b.n	1b082 <__aeabi_dsub+0x46e>
   1aef6:	4452      	add	r2, sl
   1aef8:	4552      	cmp	r2, sl
   1aefa:	4180      	sbcs	r0, r0
   1aefc:	1864      	adds	r4, r4, r1
   1aefe:	4240      	negs	r0, r0
   1af00:	1824      	adds	r4, r4, r0
   1af02:	07e7      	lsls	r7, r4, #31
   1af04:	0852      	lsrs	r2, r2, #1
   1af06:	4317      	orrs	r7, r2
   1af08:	0864      	lsrs	r4, r4, #1
   1af0a:	4666      	mov	r6, ip
   1af0c:	e708      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1af0e:	4812      	ldr	r0, [pc, #72]	; (1af58 <__aeabi_dsub+0x344>)
   1af10:	4285      	cmp	r5, r0
   1af12:	d100      	bne.n	1af16 <__aeabi_dsub+0x302>
   1af14:	e085      	b.n	1b022 <__aeabi_dsub+0x40e>
   1af16:	001d      	movs	r5, r3
   1af18:	e6bc      	b.n	1ac94 <__aeabi_dsub+0x80>
   1af1a:	0029      	movs	r1, r5
   1af1c:	3e1f      	subs	r6, #31
   1af1e:	40f1      	lsrs	r1, r6
   1af20:	2b20      	cmp	r3, #32
   1af22:	d100      	bne.n	1af26 <__aeabi_dsub+0x312>
   1af24:	e07f      	b.n	1b026 <__aeabi_dsub+0x412>
   1af26:	2240      	movs	r2, #64	; 0x40
   1af28:	1ad3      	subs	r3, r2, r3
   1af2a:	409d      	lsls	r5, r3
   1af2c:	432f      	orrs	r7, r5
   1af2e:	1e7d      	subs	r5, r7, #1
   1af30:	41af      	sbcs	r7, r5
   1af32:	2400      	movs	r4, #0
   1af34:	430f      	orrs	r7, r1
   1af36:	2600      	movs	r6, #0
   1af38:	e78e      	b.n	1ae58 <__aeabi_dsub+0x244>
   1af3a:	002b      	movs	r3, r5
   1af3c:	000f      	movs	r7, r1
   1af3e:	3b20      	subs	r3, #32
   1af40:	40df      	lsrs	r7, r3
   1af42:	2d20      	cmp	r5, #32
   1af44:	d071      	beq.n	1b02a <__aeabi_dsub+0x416>
   1af46:	2340      	movs	r3, #64	; 0x40
   1af48:	1b5d      	subs	r5, r3, r5
   1af4a:	40a9      	lsls	r1, r5
   1af4c:	430a      	orrs	r2, r1
   1af4e:	1e51      	subs	r1, r2, #1
   1af50:	418a      	sbcs	r2, r1
   1af52:	2100      	movs	r1, #0
   1af54:	4317      	orrs	r7, r2
   1af56:	e6af      	b.n	1acb8 <__aeabi_dsub+0xa4>
   1af58:	000007ff 	.word	0x000007ff
   1af5c:	ff7fffff 	.word	0xff7fffff
   1af60:	800fffff 	.word	0x800fffff
   1af64:	2e00      	cmp	r6, #0
   1af66:	d03e      	beq.n	1afe6 <__aeabi_dsub+0x3d2>
   1af68:	4eb3      	ldr	r6, [pc, #716]	; (1b238 <__aeabi_dsub+0x624>)
   1af6a:	45b4      	cmp	ip, r6
   1af6c:	d045      	beq.n	1affa <__aeabi_dsub+0x3e6>
   1af6e:	2680      	movs	r6, #128	; 0x80
   1af70:	0436      	lsls	r6, r6, #16
   1af72:	426d      	negs	r5, r5
   1af74:	4334      	orrs	r4, r6
   1af76:	2d38      	cmp	r5, #56	; 0x38
   1af78:	dd00      	ble.n	1af7c <__aeabi_dsub+0x368>
   1af7a:	e0a8      	b.n	1b0ce <__aeabi_dsub+0x4ba>
   1af7c:	2d1f      	cmp	r5, #31
   1af7e:	dd00      	ble.n	1af82 <__aeabi_dsub+0x36e>
   1af80:	e11f      	b.n	1b1c2 <__aeabi_dsub+0x5ae>
   1af82:	2620      	movs	r6, #32
   1af84:	0027      	movs	r7, r4
   1af86:	4650      	mov	r0, sl
   1af88:	1b76      	subs	r6, r6, r5
   1af8a:	40b7      	lsls	r7, r6
   1af8c:	40e8      	lsrs	r0, r5
   1af8e:	4307      	orrs	r7, r0
   1af90:	4650      	mov	r0, sl
   1af92:	40b0      	lsls	r0, r6
   1af94:	1e46      	subs	r6, r0, #1
   1af96:	41b0      	sbcs	r0, r6
   1af98:	40ec      	lsrs	r4, r5
   1af9a:	4338      	orrs	r0, r7
   1af9c:	1a17      	subs	r7, r2, r0
   1af9e:	42ba      	cmp	r2, r7
   1afa0:	4192      	sbcs	r2, r2
   1afa2:	1b0c      	subs	r4, r1, r4
   1afa4:	4252      	negs	r2, r2
   1afa6:	1aa4      	subs	r4, r4, r2
   1afa8:	4666      	mov	r6, ip
   1afaa:	4698      	mov	r8, r3
   1afac:	e68b      	b.n	1acc6 <__aeabi_dsub+0xb2>
   1afae:	4664      	mov	r4, ip
   1afb0:	4667      	mov	r7, ip
   1afb2:	432c      	orrs	r4, r5
   1afb4:	d000      	beq.n	1afb8 <__aeabi_dsub+0x3a4>
   1afb6:	e68b      	b.n	1acd0 <__aeabi_dsub+0xbc>
   1afb8:	2500      	movs	r5, #0
   1afba:	2600      	movs	r6, #0
   1afbc:	2700      	movs	r7, #0
   1afbe:	e6ea      	b.n	1ad96 <__aeabi_dsub+0x182>
   1afc0:	001e      	movs	r6, r3
   1afc2:	e6ad      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1afc4:	2b1f      	cmp	r3, #31
   1afc6:	dc60      	bgt.n	1b08a <__aeabi_dsub+0x476>
   1afc8:	2720      	movs	r7, #32
   1afca:	1af8      	subs	r0, r7, r3
   1afcc:	000f      	movs	r7, r1
   1afce:	4684      	mov	ip, r0
   1afd0:	4087      	lsls	r7, r0
   1afd2:	0010      	movs	r0, r2
   1afd4:	40d8      	lsrs	r0, r3
   1afd6:	4307      	orrs	r7, r0
   1afd8:	4660      	mov	r0, ip
   1afda:	4082      	lsls	r2, r0
   1afdc:	1e50      	subs	r0, r2, #1
   1afde:	4182      	sbcs	r2, r0
   1afe0:	40d9      	lsrs	r1, r3
   1afe2:	4317      	orrs	r7, r2
   1afe4:	e6f5      	b.n	1add2 <__aeabi_dsub+0x1be>
   1afe6:	0026      	movs	r6, r4
   1afe8:	4650      	mov	r0, sl
   1afea:	4306      	orrs	r6, r0
   1afec:	d005      	beq.n	1affa <__aeabi_dsub+0x3e6>
   1afee:	43ed      	mvns	r5, r5
   1aff0:	2d00      	cmp	r5, #0
   1aff2:	d0d3      	beq.n	1af9c <__aeabi_dsub+0x388>
   1aff4:	4e90      	ldr	r6, [pc, #576]	; (1b238 <__aeabi_dsub+0x624>)
   1aff6:	45b4      	cmp	ip, r6
   1aff8:	d1bd      	bne.n	1af76 <__aeabi_dsub+0x362>
   1affa:	000c      	movs	r4, r1
   1affc:	0017      	movs	r7, r2
   1affe:	4666      	mov	r6, ip
   1b000:	4698      	mov	r8, r3
   1b002:	e68d      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b004:	488c      	ldr	r0, [pc, #560]	; (1b238 <__aeabi_dsub+0x624>)
   1b006:	4283      	cmp	r3, r0
   1b008:	d00b      	beq.n	1b022 <__aeabi_dsub+0x40e>
   1b00a:	4663      	mov	r3, ip
   1b00c:	e6d9      	b.n	1adc2 <__aeabi_dsub+0x1ae>
   1b00e:	2d00      	cmp	r5, #0
   1b010:	d000      	beq.n	1b014 <__aeabi_dsub+0x400>
   1b012:	e096      	b.n	1b142 <__aeabi_dsub+0x52e>
   1b014:	0008      	movs	r0, r1
   1b016:	4310      	orrs	r0, r2
   1b018:	d100      	bne.n	1b01c <__aeabi_dsub+0x408>
   1b01a:	e0e2      	b.n	1b1e2 <__aeabi_dsub+0x5ce>
   1b01c:	000c      	movs	r4, r1
   1b01e:	0017      	movs	r7, r2
   1b020:	4698      	mov	r8, r3
   1b022:	4e85      	ldr	r6, [pc, #532]	; (1b238 <__aeabi_dsub+0x624>)
   1b024:	e67c      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b026:	2500      	movs	r5, #0
   1b028:	e780      	b.n	1af2c <__aeabi_dsub+0x318>
   1b02a:	2100      	movs	r1, #0
   1b02c:	e78e      	b.n	1af4c <__aeabi_dsub+0x338>
   1b02e:	0023      	movs	r3, r4
   1b030:	4650      	mov	r0, sl
   1b032:	4303      	orrs	r3, r0
   1b034:	2e00      	cmp	r6, #0
   1b036:	d000      	beq.n	1b03a <__aeabi_dsub+0x426>
   1b038:	e0a8      	b.n	1b18c <__aeabi_dsub+0x578>
   1b03a:	2b00      	cmp	r3, #0
   1b03c:	d100      	bne.n	1b040 <__aeabi_dsub+0x42c>
   1b03e:	e0de      	b.n	1b1fe <__aeabi_dsub+0x5ea>
   1b040:	000b      	movs	r3, r1
   1b042:	4313      	orrs	r3, r2
   1b044:	d100      	bne.n	1b048 <__aeabi_dsub+0x434>
   1b046:	e66b      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b048:	4452      	add	r2, sl
   1b04a:	4552      	cmp	r2, sl
   1b04c:	4180      	sbcs	r0, r0
   1b04e:	1864      	adds	r4, r4, r1
   1b050:	4240      	negs	r0, r0
   1b052:	1824      	adds	r4, r4, r0
   1b054:	0017      	movs	r7, r2
   1b056:	0223      	lsls	r3, r4, #8
   1b058:	d400      	bmi.n	1b05c <__aeabi_dsub+0x448>
   1b05a:	e6fd      	b.n	1ae58 <__aeabi_dsub+0x244>
   1b05c:	4b77      	ldr	r3, [pc, #476]	; (1b23c <__aeabi_dsub+0x628>)
   1b05e:	4666      	mov	r6, ip
   1b060:	401c      	ands	r4, r3
   1b062:	e65d      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b064:	0025      	movs	r5, r4
   1b066:	4650      	mov	r0, sl
   1b068:	4305      	orrs	r5, r0
   1b06a:	2e00      	cmp	r6, #0
   1b06c:	d1cf      	bne.n	1b00e <__aeabi_dsub+0x3fa>
   1b06e:	2d00      	cmp	r5, #0
   1b070:	d14f      	bne.n	1b112 <__aeabi_dsub+0x4fe>
   1b072:	000c      	movs	r4, r1
   1b074:	4314      	orrs	r4, r2
   1b076:	d100      	bne.n	1b07a <__aeabi_dsub+0x466>
   1b078:	e0a0      	b.n	1b1bc <__aeabi_dsub+0x5a8>
   1b07a:	000c      	movs	r4, r1
   1b07c:	0017      	movs	r7, r2
   1b07e:	4698      	mov	r8, r3
   1b080:	e64e      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b082:	4666      	mov	r6, ip
   1b084:	2400      	movs	r4, #0
   1b086:	2700      	movs	r7, #0
   1b088:	e685      	b.n	1ad96 <__aeabi_dsub+0x182>
   1b08a:	001f      	movs	r7, r3
   1b08c:	0008      	movs	r0, r1
   1b08e:	3f20      	subs	r7, #32
   1b090:	40f8      	lsrs	r0, r7
   1b092:	0007      	movs	r7, r0
   1b094:	2b20      	cmp	r3, #32
   1b096:	d100      	bne.n	1b09a <__aeabi_dsub+0x486>
   1b098:	e08e      	b.n	1b1b8 <__aeabi_dsub+0x5a4>
   1b09a:	2040      	movs	r0, #64	; 0x40
   1b09c:	1ac3      	subs	r3, r0, r3
   1b09e:	4099      	lsls	r1, r3
   1b0a0:	430a      	orrs	r2, r1
   1b0a2:	1e51      	subs	r1, r2, #1
   1b0a4:	418a      	sbcs	r2, r1
   1b0a6:	2100      	movs	r1, #0
   1b0a8:	4317      	orrs	r7, r2
   1b0aa:	e692      	b.n	1add2 <__aeabi_dsub+0x1be>
   1b0ac:	2e00      	cmp	r6, #0
   1b0ae:	d114      	bne.n	1b0da <__aeabi_dsub+0x4c6>
   1b0b0:	0026      	movs	r6, r4
   1b0b2:	4650      	mov	r0, sl
   1b0b4:	4306      	orrs	r6, r0
   1b0b6:	d062      	beq.n	1b17e <__aeabi_dsub+0x56a>
   1b0b8:	43db      	mvns	r3, r3
   1b0ba:	2b00      	cmp	r3, #0
   1b0bc:	d15c      	bne.n	1b178 <__aeabi_dsub+0x564>
   1b0be:	1887      	adds	r7, r0, r2
   1b0c0:	4297      	cmp	r7, r2
   1b0c2:	4192      	sbcs	r2, r2
   1b0c4:	1864      	adds	r4, r4, r1
   1b0c6:	4252      	negs	r2, r2
   1b0c8:	18a4      	adds	r4, r4, r2
   1b0ca:	4666      	mov	r6, ip
   1b0cc:	e687      	b.n	1adde <__aeabi_dsub+0x1ca>
   1b0ce:	4650      	mov	r0, sl
   1b0d0:	4320      	orrs	r0, r4
   1b0d2:	1e44      	subs	r4, r0, #1
   1b0d4:	41a0      	sbcs	r0, r4
   1b0d6:	2400      	movs	r4, #0
   1b0d8:	e760      	b.n	1af9c <__aeabi_dsub+0x388>
   1b0da:	4e57      	ldr	r6, [pc, #348]	; (1b238 <__aeabi_dsub+0x624>)
   1b0dc:	45b4      	cmp	ip, r6
   1b0de:	d04e      	beq.n	1b17e <__aeabi_dsub+0x56a>
   1b0e0:	2680      	movs	r6, #128	; 0x80
   1b0e2:	0436      	lsls	r6, r6, #16
   1b0e4:	425b      	negs	r3, r3
   1b0e6:	4334      	orrs	r4, r6
   1b0e8:	2b38      	cmp	r3, #56	; 0x38
   1b0ea:	dd00      	ble.n	1b0ee <__aeabi_dsub+0x4da>
   1b0ec:	e07f      	b.n	1b1ee <__aeabi_dsub+0x5da>
   1b0ee:	2b1f      	cmp	r3, #31
   1b0f0:	dd00      	ble.n	1b0f4 <__aeabi_dsub+0x4e0>
   1b0f2:	e08b      	b.n	1b20c <__aeabi_dsub+0x5f8>
   1b0f4:	2620      	movs	r6, #32
   1b0f6:	0027      	movs	r7, r4
   1b0f8:	4650      	mov	r0, sl
   1b0fa:	1af6      	subs	r6, r6, r3
   1b0fc:	40b7      	lsls	r7, r6
   1b0fe:	40d8      	lsrs	r0, r3
   1b100:	4307      	orrs	r7, r0
   1b102:	4650      	mov	r0, sl
   1b104:	40b0      	lsls	r0, r6
   1b106:	1e46      	subs	r6, r0, #1
   1b108:	41b0      	sbcs	r0, r6
   1b10a:	4307      	orrs	r7, r0
   1b10c:	40dc      	lsrs	r4, r3
   1b10e:	18bf      	adds	r7, r7, r2
   1b110:	e7d6      	b.n	1b0c0 <__aeabi_dsub+0x4ac>
   1b112:	000d      	movs	r5, r1
   1b114:	4315      	orrs	r5, r2
   1b116:	d100      	bne.n	1b11a <__aeabi_dsub+0x506>
   1b118:	e602      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b11a:	4650      	mov	r0, sl
   1b11c:	1a80      	subs	r0, r0, r2
   1b11e:	4582      	cmp	sl, r0
   1b120:	41bf      	sbcs	r7, r7
   1b122:	1a65      	subs	r5, r4, r1
   1b124:	427f      	negs	r7, r7
   1b126:	1bed      	subs	r5, r5, r7
   1b128:	4684      	mov	ip, r0
   1b12a:	0228      	lsls	r0, r5, #8
   1b12c:	d400      	bmi.n	1b130 <__aeabi_dsub+0x51c>
   1b12e:	e68d      	b.n	1ae4c <__aeabi_dsub+0x238>
   1b130:	4650      	mov	r0, sl
   1b132:	1a17      	subs	r7, r2, r0
   1b134:	42ba      	cmp	r2, r7
   1b136:	4192      	sbcs	r2, r2
   1b138:	1b0c      	subs	r4, r1, r4
   1b13a:	4252      	negs	r2, r2
   1b13c:	1aa4      	subs	r4, r4, r2
   1b13e:	4698      	mov	r8, r3
   1b140:	e5ee      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b142:	000d      	movs	r5, r1
   1b144:	4315      	orrs	r5, r2
   1b146:	d100      	bne.n	1b14a <__aeabi_dsub+0x536>
   1b148:	e76b      	b.n	1b022 <__aeabi_dsub+0x40e>
   1b14a:	4650      	mov	r0, sl
   1b14c:	0767      	lsls	r7, r4, #29
   1b14e:	08c0      	lsrs	r0, r0, #3
   1b150:	4307      	orrs	r7, r0
   1b152:	2080      	movs	r0, #128	; 0x80
   1b154:	08e4      	lsrs	r4, r4, #3
   1b156:	0300      	lsls	r0, r0, #12
   1b158:	4204      	tst	r4, r0
   1b15a:	d007      	beq.n	1b16c <__aeabi_dsub+0x558>
   1b15c:	08cd      	lsrs	r5, r1, #3
   1b15e:	4205      	tst	r5, r0
   1b160:	d104      	bne.n	1b16c <__aeabi_dsub+0x558>
   1b162:	002c      	movs	r4, r5
   1b164:	4698      	mov	r8, r3
   1b166:	08d7      	lsrs	r7, r2, #3
   1b168:	0749      	lsls	r1, r1, #29
   1b16a:	430f      	orrs	r7, r1
   1b16c:	0f7b      	lsrs	r3, r7, #29
   1b16e:	00e4      	lsls	r4, r4, #3
   1b170:	431c      	orrs	r4, r3
   1b172:	00ff      	lsls	r7, r7, #3
   1b174:	4e30      	ldr	r6, [pc, #192]	; (1b238 <__aeabi_dsub+0x624>)
   1b176:	e5d3      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b178:	4e2f      	ldr	r6, [pc, #188]	; (1b238 <__aeabi_dsub+0x624>)
   1b17a:	45b4      	cmp	ip, r6
   1b17c:	d1b4      	bne.n	1b0e8 <__aeabi_dsub+0x4d4>
   1b17e:	000c      	movs	r4, r1
   1b180:	0017      	movs	r7, r2
   1b182:	4666      	mov	r6, ip
   1b184:	e5cc      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b186:	2700      	movs	r7, #0
   1b188:	2400      	movs	r4, #0
   1b18a:	e5e8      	b.n	1ad5e <__aeabi_dsub+0x14a>
   1b18c:	2b00      	cmp	r3, #0
   1b18e:	d039      	beq.n	1b204 <__aeabi_dsub+0x5f0>
   1b190:	000b      	movs	r3, r1
   1b192:	4313      	orrs	r3, r2
   1b194:	d100      	bne.n	1b198 <__aeabi_dsub+0x584>
   1b196:	e744      	b.n	1b022 <__aeabi_dsub+0x40e>
   1b198:	08c0      	lsrs	r0, r0, #3
   1b19a:	0767      	lsls	r7, r4, #29
   1b19c:	4307      	orrs	r7, r0
   1b19e:	2080      	movs	r0, #128	; 0x80
   1b1a0:	08e4      	lsrs	r4, r4, #3
   1b1a2:	0300      	lsls	r0, r0, #12
   1b1a4:	4204      	tst	r4, r0
   1b1a6:	d0e1      	beq.n	1b16c <__aeabi_dsub+0x558>
   1b1a8:	08cb      	lsrs	r3, r1, #3
   1b1aa:	4203      	tst	r3, r0
   1b1ac:	d1de      	bne.n	1b16c <__aeabi_dsub+0x558>
   1b1ae:	08d7      	lsrs	r7, r2, #3
   1b1b0:	0749      	lsls	r1, r1, #29
   1b1b2:	430f      	orrs	r7, r1
   1b1b4:	001c      	movs	r4, r3
   1b1b6:	e7d9      	b.n	1b16c <__aeabi_dsub+0x558>
   1b1b8:	2100      	movs	r1, #0
   1b1ba:	e771      	b.n	1b0a0 <__aeabi_dsub+0x48c>
   1b1bc:	2500      	movs	r5, #0
   1b1be:	2700      	movs	r7, #0
   1b1c0:	e5e9      	b.n	1ad96 <__aeabi_dsub+0x182>
   1b1c2:	002e      	movs	r6, r5
   1b1c4:	0027      	movs	r7, r4
   1b1c6:	3e20      	subs	r6, #32
   1b1c8:	40f7      	lsrs	r7, r6
   1b1ca:	2d20      	cmp	r5, #32
   1b1cc:	d02f      	beq.n	1b22e <__aeabi_dsub+0x61a>
   1b1ce:	2640      	movs	r6, #64	; 0x40
   1b1d0:	1b75      	subs	r5, r6, r5
   1b1d2:	40ac      	lsls	r4, r5
   1b1d4:	4650      	mov	r0, sl
   1b1d6:	4320      	orrs	r0, r4
   1b1d8:	1e44      	subs	r4, r0, #1
   1b1da:	41a0      	sbcs	r0, r4
   1b1dc:	2400      	movs	r4, #0
   1b1de:	4338      	orrs	r0, r7
   1b1e0:	e6dc      	b.n	1af9c <__aeabi_dsub+0x388>
   1b1e2:	2480      	movs	r4, #128	; 0x80
   1b1e4:	2500      	movs	r5, #0
   1b1e6:	0324      	lsls	r4, r4, #12
   1b1e8:	4e13      	ldr	r6, [pc, #76]	; (1b238 <__aeabi_dsub+0x624>)
   1b1ea:	2700      	movs	r7, #0
   1b1ec:	e5d3      	b.n	1ad96 <__aeabi_dsub+0x182>
   1b1ee:	4650      	mov	r0, sl
   1b1f0:	4320      	orrs	r0, r4
   1b1f2:	0007      	movs	r7, r0
   1b1f4:	1e78      	subs	r0, r7, #1
   1b1f6:	4187      	sbcs	r7, r0
   1b1f8:	2400      	movs	r4, #0
   1b1fa:	18bf      	adds	r7, r7, r2
   1b1fc:	e760      	b.n	1b0c0 <__aeabi_dsub+0x4ac>
   1b1fe:	000c      	movs	r4, r1
   1b200:	0017      	movs	r7, r2
   1b202:	e58d      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b204:	000c      	movs	r4, r1
   1b206:	0017      	movs	r7, r2
   1b208:	4e0b      	ldr	r6, [pc, #44]	; (1b238 <__aeabi_dsub+0x624>)
   1b20a:	e589      	b.n	1ad20 <__aeabi_dsub+0x10c>
   1b20c:	001e      	movs	r6, r3
   1b20e:	0027      	movs	r7, r4
   1b210:	3e20      	subs	r6, #32
   1b212:	40f7      	lsrs	r7, r6
   1b214:	2b20      	cmp	r3, #32
   1b216:	d00c      	beq.n	1b232 <__aeabi_dsub+0x61e>
   1b218:	2640      	movs	r6, #64	; 0x40
   1b21a:	1af3      	subs	r3, r6, r3
   1b21c:	409c      	lsls	r4, r3
   1b21e:	4650      	mov	r0, sl
   1b220:	4320      	orrs	r0, r4
   1b222:	1e44      	subs	r4, r0, #1
   1b224:	41a0      	sbcs	r0, r4
   1b226:	4307      	orrs	r7, r0
   1b228:	2400      	movs	r4, #0
   1b22a:	18bf      	adds	r7, r7, r2
   1b22c:	e748      	b.n	1b0c0 <__aeabi_dsub+0x4ac>
   1b22e:	2400      	movs	r4, #0
   1b230:	e7d0      	b.n	1b1d4 <__aeabi_dsub+0x5c0>
   1b232:	2400      	movs	r4, #0
   1b234:	e7f3      	b.n	1b21e <__aeabi_dsub+0x60a>
   1b236:	46c0      	nop			; (mov r8, r8)
   1b238:	000007ff 	.word	0x000007ff
   1b23c:	ff7fffff 	.word	0xff7fffff

0001b240 <__aeabi_d2iz>:
   1b240:	b530      	push	{r4, r5, lr}
   1b242:	4d13      	ldr	r5, [pc, #76]	; (1b290 <__aeabi_d2iz+0x50>)
   1b244:	030a      	lsls	r2, r1, #12
   1b246:	004b      	lsls	r3, r1, #1
   1b248:	0b12      	lsrs	r2, r2, #12
   1b24a:	0d5b      	lsrs	r3, r3, #21
   1b24c:	0fc9      	lsrs	r1, r1, #31
   1b24e:	2400      	movs	r4, #0
   1b250:	42ab      	cmp	r3, r5
   1b252:	dd10      	ble.n	1b276 <__aeabi_d2iz+0x36>
   1b254:	4c0f      	ldr	r4, [pc, #60]	; (1b294 <__aeabi_d2iz+0x54>)
   1b256:	42a3      	cmp	r3, r4
   1b258:	dc0f      	bgt.n	1b27a <__aeabi_d2iz+0x3a>
   1b25a:	2480      	movs	r4, #128	; 0x80
   1b25c:	4d0e      	ldr	r5, [pc, #56]	; (1b298 <__aeabi_d2iz+0x58>)
   1b25e:	0364      	lsls	r4, r4, #13
   1b260:	4322      	orrs	r2, r4
   1b262:	1aed      	subs	r5, r5, r3
   1b264:	2d1f      	cmp	r5, #31
   1b266:	dd0b      	ble.n	1b280 <__aeabi_d2iz+0x40>
   1b268:	480c      	ldr	r0, [pc, #48]	; (1b29c <__aeabi_d2iz+0x5c>)
   1b26a:	1ac3      	subs	r3, r0, r3
   1b26c:	40da      	lsrs	r2, r3
   1b26e:	4254      	negs	r4, r2
   1b270:	2900      	cmp	r1, #0
   1b272:	d100      	bne.n	1b276 <__aeabi_d2iz+0x36>
   1b274:	0014      	movs	r4, r2
   1b276:	0020      	movs	r0, r4
   1b278:	bd30      	pop	{r4, r5, pc}
   1b27a:	4b09      	ldr	r3, [pc, #36]	; (1b2a0 <__aeabi_d2iz+0x60>)
   1b27c:	18cc      	adds	r4, r1, r3
   1b27e:	e7fa      	b.n	1b276 <__aeabi_d2iz+0x36>
   1b280:	4c08      	ldr	r4, [pc, #32]	; (1b2a4 <__aeabi_d2iz+0x64>)
   1b282:	40e8      	lsrs	r0, r5
   1b284:	46a4      	mov	ip, r4
   1b286:	4463      	add	r3, ip
   1b288:	409a      	lsls	r2, r3
   1b28a:	4302      	orrs	r2, r0
   1b28c:	e7ef      	b.n	1b26e <__aeabi_d2iz+0x2e>
   1b28e:	46c0      	nop			; (mov r8, r8)
   1b290:	000003fe 	.word	0x000003fe
   1b294:	0000041d 	.word	0x0000041d
   1b298:	00000433 	.word	0x00000433
   1b29c:	00000413 	.word	0x00000413
   1b2a0:	7fffffff 	.word	0x7fffffff
   1b2a4:	fffffbed 	.word	0xfffffbed

0001b2a8 <__aeabi_i2d>:
   1b2a8:	b570      	push	{r4, r5, r6, lr}
   1b2aa:	2800      	cmp	r0, #0
   1b2ac:	d030      	beq.n	1b310 <__aeabi_i2d+0x68>
   1b2ae:	17c3      	asrs	r3, r0, #31
   1b2b0:	18c4      	adds	r4, r0, r3
   1b2b2:	405c      	eors	r4, r3
   1b2b4:	0fc5      	lsrs	r5, r0, #31
   1b2b6:	0020      	movs	r0, r4
   1b2b8:	f000 f8c2 	bl	1b440 <__clzsi2>
   1b2bc:	4b17      	ldr	r3, [pc, #92]	; (1b31c <__aeabi_i2d+0x74>)
   1b2be:	4a18      	ldr	r2, [pc, #96]	; (1b320 <__aeabi_i2d+0x78>)
   1b2c0:	1a1b      	subs	r3, r3, r0
   1b2c2:	1ad2      	subs	r2, r2, r3
   1b2c4:	2a1f      	cmp	r2, #31
   1b2c6:	dd18      	ble.n	1b2fa <__aeabi_i2d+0x52>
   1b2c8:	4a16      	ldr	r2, [pc, #88]	; (1b324 <__aeabi_i2d+0x7c>)
   1b2ca:	1ad2      	subs	r2, r2, r3
   1b2cc:	4094      	lsls	r4, r2
   1b2ce:	2200      	movs	r2, #0
   1b2d0:	0324      	lsls	r4, r4, #12
   1b2d2:	055b      	lsls	r3, r3, #21
   1b2d4:	0b24      	lsrs	r4, r4, #12
   1b2d6:	0d5b      	lsrs	r3, r3, #21
   1b2d8:	2100      	movs	r1, #0
   1b2da:	0010      	movs	r0, r2
   1b2dc:	0324      	lsls	r4, r4, #12
   1b2de:	0d0a      	lsrs	r2, r1, #20
   1b2e0:	0b24      	lsrs	r4, r4, #12
   1b2e2:	0512      	lsls	r2, r2, #20
   1b2e4:	4322      	orrs	r2, r4
   1b2e6:	4c10      	ldr	r4, [pc, #64]	; (1b328 <__aeabi_i2d+0x80>)
   1b2e8:	051b      	lsls	r3, r3, #20
   1b2ea:	4022      	ands	r2, r4
   1b2ec:	4313      	orrs	r3, r2
   1b2ee:	005b      	lsls	r3, r3, #1
   1b2f0:	07ed      	lsls	r5, r5, #31
   1b2f2:	085b      	lsrs	r3, r3, #1
   1b2f4:	432b      	orrs	r3, r5
   1b2f6:	0019      	movs	r1, r3
   1b2f8:	bd70      	pop	{r4, r5, r6, pc}
   1b2fa:	0021      	movs	r1, r4
   1b2fc:	4091      	lsls	r1, r2
   1b2fe:	000a      	movs	r2, r1
   1b300:	210b      	movs	r1, #11
   1b302:	1a08      	subs	r0, r1, r0
   1b304:	40c4      	lsrs	r4, r0
   1b306:	055b      	lsls	r3, r3, #21
   1b308:	0324      	lsls	r4, r4, #12
   1b30a:	0b24      	lsrs	r4, r4, #12
   1b30c:	0d5b      	lsrs	r3, r3, #21
   1b30e:	e7e3      	b.n	1b2d8 <__aeabi_i2d+0x30>
   1b310:	2500      	movs	r5, #0
   1b312:	2300      	movs	r3, #0
   1b314:	2400      	movs	r4, #0
   1b316:	2200      	movs	r2, #0
   1b318:	e7de      	b.n	1b2d8 <__aeabi_i2d+0x30>
   1b31a:	46c0      	nop			; (mov r8, r8)
   1b31c:	0000041e 	.word	0x0000041e
   1b320:	00000433 	.word	0x00000433
   1b324:	00000413 	.word	0x00000413
   1b328:	800fffff 	.word	0x800fffff

0001b32c <__aeabi_ui2d>:
   1b32c:	b510      	push	{r4, lr}
   1b32e:	1e04      	subs	r4, r0, #0
   1b330:	d028      	beq.n	1b384 <__aeabi_ui2d+0x58>
   1b332:	f000 f885 	bl	1b440 <__clzsi2>
   1b336:	4b15      	ldr	r3, [pc, #84]	; (1b38c <__aeabi_ui2d+0x60>)
   1b338:	4a15      	ldr	r2, [pc, #84]	; (1b390 <__aeabi_ui2d+0x64>)
   1b33a:	1a1b      	subs	r3, r3, r0
   1b33c:	1ad2      	subs	r2, r2, r3
   1b33e:	2a1f      	cmp	r2, #31
   1b340:	dd15      	ble.n	1b36e <__aeabi_ui2d+0x42>
   1b342:	4a14      	ldr	r2, [pc, #80]	; (1b394 <__aeabi_ui2d+0x68>)
   1b344:	1ad2      	subs	r2, r2, r3
   1b346:	4094      	lsls	r4, r2
   1b348:	2200      	movs	r2, #0
   1b34a:	0324      	lsls	r4, r4, #12
   1b34c:	055b      	lsls	r3, r3, #21
   1b34e:	0b24      	lsrs	r4, r4, #12
   1b350:	0d5b      	lsrs	r3, r3, #21
   1b352:	2100      	movs	r1, #0
   1b354:	0010      	movs	r0, r2
   1b356:	0324      	lsls	r4, r4, #12
   1b358:	0d0a      	lsrs	r2, r1, #20
   1b35a:	0b24      	lsrs	r4, r4, #12
   1b35c:	0512      	lsls	r2, r2, #20
   1b35e:	4322      	orrs	r2, r4
   1b360:	4c0d      	ldr	r4, [pc, #52]	; (1b398 <__aeabi_ui2d+0x6c>)
   1b362:	051b      	lsls	r3, r3, #20
   1b364:	4022      	ands	r2, r4
   1b366:	4313      	orrs	r3, r2
   1b368:	005b      	lsls	r3, r3, #1
   1b36a:	0859      	lsrs	r1, r3, #1
   1b36c:	bd10      	pop	{r4, pc}
   1b36e:	0021      	movs	r1, r4
   1b370:	4091      	lsls	r1, r2
   1b372:	000a      	movs	r2, r1
   1b374:	210b      	movs	r1, #11
   1b376:	1a08      	subs	r0, r1, r0
   1b378:	40c4      	lsrs	r4, r0
   1b37a:	055b      	lsls	r3, r3, #21
   1b37c:	0324      	lsls	r4, r4, #12
   1b37e:	0b24      	lsrs	r4, r4, #12
   1b380:	0d5b      	lsrs	r3, r3, #21
   1b382:	e7e6      	b.n	1b352 <__aeabi_ui2d+0x26>
   1b384:	2300      	movs	r3, #0
   1b386:	2400      	movs	r4, #0
   1b388:	2200      	movs	r2, #0
   1b38a:	e7e2      	b.n	1b352 <__aeabi_ui2d+0x26>
   1b38c:	0000041e 	.word	0x0000041e
   1b390:	00000433 	.word	0x00000433
   1b394:	00000413 	.word	0x00000413
   1b398:	800fffff 	.word	0x800fffff

0001b39c <__aeabi_f2d>:
   1b39c:	0041      	lsls	r1, r0, #1
   1b39e:	0e09      	lsrs	r1, r1, #24
   1b3a0:	1c4b      	adds	r3, r1, #1
   1b3a2:	b570      	push	{r4, r5, r6, lr}
   1b3a4:	b2db      	uxtb	r3, r3
   1b3a6:	0246      	lsls	r6, r0, #9
   1b3a8:	0a75      	lsrs	r5, r6, #9
   1b3aa:	0fc4      	lsrs	r4, r0, #31
   1b3ac:	2b01      	cmp	r3, #1
   1b3ae:	dd14      	ble.n	1b3da <__aeabi_f2d+0x3e>
   1b3b0:	23e0      	movs	r3, #224	; 0xe0
   1b3b2:	009b      	lsls	r3, r3, #2
   1b3b4:	076d      	lsls	r5, r5, #29
   1b3b6:	0b36      	lsrs	r6, r6, #12
   1b3b8:	18cb      	adds	r3, r1, r3
   1b3ba:	2100      	movs	r1, #0
   1b3bc:	0d0a      	lsrs	r2, r1, #20
   1b3be:	0028      	movs	r0, r5
   1b3c0:	0512      	lsls	r2, r2, #20
   1b3c2:	4d1c      	ldr	r5, [pc, #112]	; (1b434 <__aeabi_f2d+0x98>)
   1b3c4:	4332      	orrs	r2, r6
   1b3c6:	055b      	lsls	r3, r3, #21
   1b3c8:	402a      	ands	r2, r5
   1b3ca:	085b      	lsrs	r3, r3, #1
   1b3cc:	4313      	orrs	r3, r2
   1b3ce:	005b      	lsls	r3, r3, #1
   1b3d0:	07e4      	lsls	r4, r4, #31
   1b3d2:	085b      	lsrs	r3, r3, #1
   1b3d4:	4323      	orrs	r3, r4
   1b3d6:	0019      	movs	r1, r3
   1b3d8:	bd70      	pop	{r4, r5, r6, pc}
   1b3da:	2900      	cmp	r1, #0
   1b3dc:	d114      	bne.n	1b408 <__aeabi_f2d+0x6c>
   1b3de:	2d00      	cmp	r5, #0
   1b3e0:	d01e      	beq.n	1b420 <__aeabi_f2d+0x84>
   1b3e2:	0028      	movs	r0, r5
   1b3e4:	f000 f82c 	bl	1b440 <__clzsi2>
   1b3e8:	280a      	cmp	r0, #10
   1b3ea:	dc1c      	bgt.n	1b426 <__aeabi_f2d+0x8a>
   1b3ec:	230b      	movs	r3, #11
   1b3ee:	002a      	movs	r2, r5
   1b3f0:	1a1b      	subs	r3, r3, r0
   1b3f2:	40da      	lsrs	r2, r3
   1b3f4:	0003      	movs	r3, r0
   1b3f6:	3315      	adds	r3, #21
   1b3f8:	409d      	lsls	r5, r3
   1b3fa:	4b0f      	ldr	r3, [pc, #60]	; (1b438 <__aeabi_f2d+0x9c>)
   1b3fc:	0312      	lsls	r2, r2, #12
   1b3fe:	1a1b      	subs	r3, r3, r0
   1b400:	055b      	lsls	r3, r3, #21
   1b402:	0b16      	lsrs	r6, r2, #12
   1b404:	0d5b      	lsrs	r3, r3, #21
   1b406:	e7d8      	b.n	1b3ba <__aeabi_f2d+0x1e>
   1b408:	2d00      	cmp	r5, #0
   1b40a:	d006      	beq.n	1b41a <__aeabi_f2d+0x7e>
   1b40c:	0b32      	lsrs	r2, r6, #12
   1b40e:	2680      	movs	r6, #128	; 0x80
   1b410:	0336      	lsls	r6, r6, #12
   1b412:	076d      	lsls	r5, r5, #29
   1b414:	4316      	orrs	r6, r2
   1b416:	4b09      	ldr	r3, [pc, #36]	; (1b43c <__aeabi_f2d+0xa0>)
   1b418:	e7cf      	b.n	1b3ba <__aeabi_f2d+0x1e>
   1b41a:	4b08      	ldr	r3, [pc, #32]	; (1b43c <__aeabi_f2d+0xa0>)
   1b41c:	2600      	movs	r6, #0
   1b41e:	e7cc      	b.n	1b3ba <__aeabi_f2d+0x1e>
   1b420:	2300      	movs	r3, #0
   1b422:	2600      	movs	r6, #0
   1b424:	e7c9      	b.n	1b3ba <__aeabi_f2d+0x1e>
   1b426:	0003      	movs	r3, r0
   1b428:	002a      	movs	r2, r5
   1b42a:	3b0b      	subs	r3, #11
   1b42c:	409a      	lsls	r2, r3
   1b42e:	2500      	movs	r5, #0
   1b430:	e7e3      	b.n	1b3fa <__aeabi_f2d+0x5e>
   1b432:	46c0      	nop			; (mov r8, r8)
   1b434:	800fffff 	.word	0x800fffff
   1b438:	00000389 	.word	0x00000389
   1b43c:	000007ff 	.word	0x000007ff

0001b440 <__clzsi2>:
   1b440:	211c      	movs	r1, #28
   1b442:	2301      	movs	r3, #1
   1b444:	041b      	lsls	r3, r3, #16
   1b446:	4298      	cmp	r0, r3
   1b448:	d301      	bcc.n	1b44e <__clzsi2+0xe>
   1b44a:	0c00      	lsrs	r0, r0, #16
   1b44c:	3910      	subs	r1, #16
   1b44e:	0a1b      	lsrs	r3, r3, #8
   1b450:	4298      	cmp	r0, r3
   1b452:	d301      	bcc.n	1b458 <__clzsi2+0x18>
   1b454:	0a00      	lsrs	r0, r0, #8
   1b456:	3908      	subs	r1, #8
   1b458:	091b      	lsrs	r3, r3, #4
   1b45a:	4298      	cmp	r0, r3
   1b45c:	d301      	bcc.n	1b462 <__clzsi2+0x22>
   1b45e:	0900      	lsrs	r0, r0, #4
   1b460:	3904      	subs	r1, #4
   1b462:	a202      	add	r2, pc, #8	; (adr r2, 1b46c <__clzsi2+0x2c>)
   1b464:	5c10      	ldrb	r0, [r2, r0]
   1b466:	1840      	adds	r0, r0, r1
   1b468:	4770      	bx	lr
   1b46a:	46c0      	nop			; (mov r8, r8)
   1b46c:	02020304 	.word	0x02020304
   1b470:	01010101 	.word	0x01010101
	...

0001b47c <__libc_init_array>:
   1b47c:	b570      	push	{r4, r5, r6, lr}
   1b47e:	2600      	movs	r6, #0
   1b480:	4d0c      	ldr	r5, [pc, #48]	; (1b4b4 <__libc_init_array+0x38>)
   1b482:	4c0d      	ldr	r4, [pc, #52]	; (1b4b8 <__libc_init_array+0x3c>)
   1b484:	1b64      	subs	r4, r4, r5
   1b486:	10a4      	asrs	r4, r4, #2
   1b488:	42a6      	cmp	r6, r4
   1b48a:	d109      	bne.n	1b4a0 <__libc_init_array+0x24>
   1b48c:	2600      	movs	r6, #0
   1b48e:	f001 ff93 	bl	1d3b8 <_init>
   1b492:	4d0a      	ldr	r5, [pc, #40]	; (1b4bc <__libc_init_array+0x40>)
   1b494:	4c0a      	ldr	r4, [pc, #40]	; (1b4c0 <__libc_init_array+0x44>)
   1b496:	1b64      	subs	r4, r4, r5
   1b498:	10a4      	asrs	r4, r4, #2
   1b49a:	42a6      	cmp	r6, r4
   1b49c:	d105      	bne.n	1b4aa <__libc_init_array+0x2e>
   1b49e:	bd70      	pop	{r4, r5, r6, pc}
   1b4a0:	00b3      	lsls	r3, r6, #2
   1b4a2:	58eb      	ldr	r3, [r5, r3]
   1b4a4:	4798      	blx	r3
   1b4a6:	3601      	adds	r6, #1
   1b4a8:	e7ee      	b.n	1b488 <__libc_init_array+0xc>
   1b4aa:	00b3      	lsls	r3, r6, #2
   1b4ac:	58eb      	ldr	r3, [r5, r3]
   1b4ae:	4798      	blx	r3
   1b4b0:	3601      	adds	r6, #1
   1b4b2:	e7f2      	b.n	1b49a <__libc_init_array+0x1e>
   1b4b4:	0001d3c4 	.word	0x0001d3c4
   1b4b8:	0001d3c4 	.word	0x0001d3c4
   1b4bc:	0001d3c4 	.word	0x0001d3c4
   1b4c0:	0001d3c8 	.word	0x0001d3c8

0001b4c4 <malloc>:
   1b4c4:	b510      	push	{r4, lr}
   1b4c6:	4b03      	ldr	r3, [pc, #12]	; (1b4d4 <malloc+0x10>)
   1b4c8:	0001      	movs	r1, r0
   1b4ca:	6818      	ldr	r0, [r3, #0]
   1b4cc:	f000 f872 	bl	1b5b4 <_malloc_r>
   1b4d0:	bd10      	pop	{r4, pc}
   1b4d2:	46c0      	nop			; (mov r8, r8)
   1b4d4:	2000006c 	.word	0x2000006c

0001b4d8 <memcpy>:
   1b4d8:	2300      	movs	r3, #0
   1b4da:	b510      	push	{r4, lr}
   1b4dc:	429a      	cmp	r2, r3
   1b4de:	d100      	bne.n	1b4e2 <memcpy+0xa>
   1b4e0:	bd10      	pop	{r4, pc}
   1b4e2:	5ccc      	ldrb	r4, [r1, r3]
   1b4e4:	54c4      	strb	r4, [r0, r3]
   1b4e6:	3301      	adds	r3, #1
   1b4e8:	e7f8      	b.n	1b4dc <memcpy+0x4>

0001b4ea <memmove>:
   1b4ea:	b510      	push	{r4, lr}
   1b4ec:	4288      	cmp	r0, r1
   1b4ee:	d902      	bls.n	1b4f6 <memmove+0xc>
   1b4f0:	188b      	adds	r3, r1, r2
   1b4f2:	4298      	cmp	r0, r3
   1b4f4:	d308      	bcc.n	1b508 <memmove+0x1e>
   1b4f6:	2300      	movs	r3, #0
   1b4f8:	429a      	cmp	r2, r3
   1b4fa:	d007      	beq.n	1b50c <memmove+0x22>
   1b4fc:	5ccc      	ldrb	r4, [r1, r3]
   1b4fe:	54c4      	strb	r4, [r0, r3]
   1b500:	3301      	adds	r3, #1
   1b502:	e7f9      	b.n	1b4f8 <memmove+0xe>
   1b504:	5c8b      	ldrb	r3, [r1, r2]
   1b506:	5483      	strb	r3, [r0, r2]
   1b508:	3a01      	subs	r2, #1
   1b50a:	d2fb      	bcs.n	1b504 <memmove+0x1a>
   1b50c:	bd10      	pop	{r4, pc}

0001b50e <memset>:
   1b50e:	0003      	movs	r3, r0
   1b510:	1882      	adds	r2, r0, r2
   1b512:	4293      	cmp	r3, r2
   1b514:	d100      	bne.n	1b518 <memset+0xa>
   1b516:	4770      	bx	lr
   1b518:	7019      	strb	r1, [r3, #0]
   1b51a:	3301      	adds	r3, #1
   1b51c:	e7f9      	b.n	1b512 <memset+0x4>
	...

0001b520 <_free_r>:
   1b520:	b570      	push	{r4, r5, r6, lr}
   1b522:	0005      	movs	r5, r0
   1b524:	2900      	cmp	r1, #0
   1b526:	d010      	beq.n	1b54a <_free_r+0x2a>
   1b528:	1f0c      	subs	r4, r1, #4
   1b52a:	6823      	ldr	r3, [r4, #0]
   1b52c:	2b00      	cmp	r3, #0
   1b52e:	da00      	bge.n	1b532 <_free_r+0x12>
   1b530:	18e4      	adds	r4, r4, r3
   1b532:	0028      	movs	r0, r5
   1b534:	f000 f9ac 	bl	1b890 <__malloc_lock>
   1b538:	4a1d      	ldr	r2, [pc, #116]	; (1b5b0 <_free_r+0x90>)
   1b53a:	6813      	ldr	r3, [r2, #0]
   1b53c:	2b00      	cmp	r3, #0
   1b53e:	d105      	bne.n	1b54c <_free_r+0x2c>
   1b540:	6063      	str	r3, [r4, #4]
   1b542:	6014      	str	r4, [r2, #0]
   1b544:	0028      	movs	r0, r5
   1b546:	f000 f9a4 	bl	1b892 <__malloc_unlock>
   1b54a:	bd70      	pop	{r4, r5, r6, pc}
   1b54c:	42a3      	cmp	r3, r4
   1b54e:	d909      	bls.n	1b564 <_free_r+0x44>
   1b550:	6821      	ldr	r1, [r4, #0]
   1b552:	1860      	adds	r0, r4, r1
   1b554:	4283      	cmp	r3, r0
   1b556:	d1f3      	bne.n	1b540 <_free_r+0x20>
   1b558:	6818      	ldr	r0, [r3, #0]
   1b55a:	685b      	ldr	r3, [r3, #4]
   1b55c:	1841      	adds	r1, r0, r1
   1b55e:	6021      	str	r1, [r4, #0]
   1b560:	e7ee      	b.n	1b540 <_free_r+0x20>
   1b562:	0013      	movs	r3, r2
   1b564:	685a      	ldr	r2, [r3, #4]
   1b566:	2a00      	cmp	r2, #0
   1b568:	d001      	beq.n	1b56e <_free_r+0x4e>
   1b56a:	42a2      	cmp	r2, r4
   1b56c:	d9f9      	bls.n	1b562 <_free_r+0x42>
   1b56e:	6819      	ldr	r1, [r3, #0]
   1b570:	1858      	adds	r0, r3, r1
   1b572:	42a0      	cmp	r0, r4
   1b574:	d10b      	bne.n	1b58e <_free_r+0x6e>
   1b576:	6820      	ldr	r0, [r4, #0]
   1b578:	1809      	adds	r1, r1, r0
   1b57a:	1858      	adds	r0, r3, r1
   1b57c:	6019      	str	r1, [r3, #0]
   1b57e:	4282      	cmp	r2, r0
   1b580:	d1e0      	bne.n	1b544 <_free_r+0x24>
   1b582:	6810      	ldr	r0, [r2, #0]
   1b584:	6852      	ldr	r2, [r2, #4]
   1b586:	1841      	adds	r1, r0, r1
   1b588:	6019      	str	r1, [r3, #0]
   1b58a:	605a      	str	r2, [r3, #4]
   1b58c:	e7da      	b.n	1b544 <_free_r+0x24>
   1b58e:	42a0      	cmp	r0, r4
   1b590:	d902      	bls.n	1b598 <_free_r+0x78>
   1b592:	230c      	movs	r3, #12
   1b594:	602b      	str	r3, [r5, #0]
   1b596:	e7d5      	b.n	1b544 <_free_r+0x24>
   1b598:	6821      	ldr	r1, [r4, #0]
   1b59a:	1860      	adds	r0, r4, r1
   1b59c:	4282      	cmp	r2, r0
   1b59e:	d103      	bne.n	1b5a8 <_free_r+0x88>
   1b5a0:	6810      	ldr	r0, [r2, #0]
   1b5a2:	6852      	ldr	r2, [r2, #4]
   1b5a4:	1841      	adds	r1, r0, r1
   1b5a6:	6021      	str	r1, [r4, #0]
   1b5a8:	6062      	str	r2, [r4, #4]
   1b5aa:	605c      	str	r4, [r3, #4]
   1b5ac:	e7ca      	b.n	1b544 <_free_r+0x24>
   1b5ae:	46c0      	nop			; (mov r8, r8)
   1b5b0:	2000355c 	.word	0x2000355c

0001b5b4 <_malloc_r>:
   1b5b4:	2303      	movs	r3, #3
   1b5b6:	b570      	push	{r4, r5, r6, lr}
   1b5b8:	1ccd      	adds	r5, r1, #3
   1b5ba:	439d      	bics	r5, r3
   1b5bc:	3508      	adds	r5, #8
   1b5be:	0006      	movs	r6, r0
   1b5c0:	2d0c      	cmp	r5, #12
   1b5c2:	d21e      	bcs.n	1b602 <_malloc_r+0x4e>
   1b5c4:	250c      	movs	r5, #12
   1b5c6:	42a9      	cmp	r1, r5
   1b5c8:	d81d      	bhi.n	1b606 <_malloc_r+0x52>
   1b5ca:	0030      	movs	r0, r6
   1b5cc:	f000 f960 	bl	1b890 <__malloc_lock>
   1b5d0:	4a25      	ldr	r2, [pc, #148]	; (1b668 <_malloc_r+0xb4>)
   1b5d2:	6814      	ldr	r4, [r2, #0]
   1b5d4:	0021      	movs	r1, r4
   1b5d6:	2900      	cmp	r1, #0
   1b5d8:	d119      	bne.n	1b60e <_malloc_r+0x5a>
   1b5da:	4c24      	ldr	r4, [pc, #144]	; (1b66c <_malloc_r+0xb8>)
   1b5dc:	6823      	ldr	r3, [r4, #0]
   1b5de:	2b00      	cmp	r3, #0
   1b5e0:	d103      	bne.n	1b5ea <_malloc_r+0x36>
   1b5e2:	0030      	movs	r0, r6
   1b5e4:	f000 f844 	bl	1b670 <_sbrk_r>
   1b5e8:	6020      	str	r0, [r4, #0]
   1b5ea:	0029      	movs	r1, r5
   1b5ec:	0030      	movs	r0, r6
   1b5ee:	f000 f83f 	bl	1b670 <_sbrk_r>
   1b5f2:	1c43      	adds	r3, r0, #1
   1b5f4:	d12c      	bne.n	1b650 <_malloc_r+0x9c>
   1b5f6:	230c      	movs	r3, #12
   1b5f8:	0030      	movs	r0, r6
   1b5fa:	6033      	str	r3, [r6, #0]
   1b5fc:	f000 f949 	bl	1b892 <__malloc_unlock>
   1b600:	e003      	b.n	1b60a <_malloc_r+0x56>
   1b602:	2d00      	cmp	r5, #0
   1b604:	dadf      	bge.n	1b5c6 <_malloc_r+0x12>
   1b606:	230c      	movs	r3, #12
   1b608:	6033      	str	r3, [r6, #0]
   1b60a:	2000      	movs	r0, #0
   1b60c:	bd70      	pop	{r4, r5, r6, pc}
   1b60e:	680b      	ldr	r3, [r1, #0]
   1b610:	1b5b      	subs	r3, r3, r5
   1b612:	d41a      	bmi.n	1b64a <_malloc_r+0x96>
   1b614:	2b0b      	cmp	r3, #11
   1b616:	d903      	bls.n	1b620 <_malloc_r+0x6c>
   1b618:	600b      	str	r3, [r1, #0]
   1b61a:	18cc      	adds	r4, r1, r3
   1b61c:	6025      	str	r5, [r4, #0]
   1b61e:	e003      	b.n	1b628 <_malloc_r+0x74>
   1b620:	428c      	cmp	r4, r1
   1b622:	d10e      	bne.n	1b642 <_malloc_r+0x8e>
   1b624:	6863      	ldr	r3, [r4, #4]
   1b626:	6013      	str	r3, [r2, #0]
   1b628:	0030      	movs	r0, r6
   1b62a:	f000 f932 	bl	1b892 <__malloc_unlock>
   1b62e:	0020      	movs	r0, r4
   1b630:	2207      	movs	r2, #7
   1b632:	300b      	adds	r0, #11
   1b634:	1d23      	adds	r3, r4, #4
   1b636:	4390      	bics	r0, r2
   1b638:	1ac3      	subs	r3, r0, r3
   1b63a:	d0e7      	beq.n	1b60c <_malloc_r+0x58>
   1b63c:	425a      	negs	r2, r3
   1b63e:	50e2      	str	r2, [r4, r3]
   1b640:	e7e4      	b.n	1b60c <_malloc_r+0x58>
   1b642:	684b      	ldr	r3, [r1, #4]
   1b644:	6063      	str	r3, [r4, #4]
   1b646:	000c      	movs	r4, r1
   1b648:	e7ee      	b.n	1b628 <_malloc_r+0x74>
   1b64a:	000c      	movs	r4, r1
   1b64c:	6849      	ldr	r1, [r1, #4]
   1b64e:	e7c2      	b.n	1b5d6 <_malloc_r+0x22>
   1b650:	2303      	movs	r3, #3
   1b652:	1cc4      	adds	r4, r0, #3
   1b654:	439c      	bics	r4, r3
   1b656:	42a0      	cmp	r0, r4
   1b658:	d0e0      	beq.n	1b61c <_malloc_r+0x68>
   1b65a:	1a21      	subs	r1, r4, r0
   1b65c:	0030      	movs	r0, r6
   1b65e:	f000 f807 	bl	1b670 <_sbrk_r>
   1b662:	1c43      	adds	r3, r0, #1
   1b664:	d1da      	bne.n	1b61c <_malloc_r+0x68>
   1b666:	e7c6      	b.n	1b5f6 <_malloc_r+0x42>
   1b668:	2000355c 	.word	0x2000355c
   1b66c:	20003560 	.word	0x20003560

0001b670 <_sbrk_r>:
   1b670:	2300      	movs	r3, #0
   1b672:	b570      	push	{r4, r5, r6, lr}
   1b674:	4c06      	ldr	r4, [pc, #24]	; (1b690 <_sbrk_r+0x20>)
   1b676:	0005      	movs	r5, r0
   1b678:	0008      	movs	r0, r1
   1b67a:	6023      	str	r3, [r4, #0]
   1b67c:	f7fd fa6a 	bl	18b54 <_sbrk>
   1b680:	1c43      	adds	r3, r0, #1
   1b682:	d103      	bne.n	1b68c <_sbrk_r+0x1c>
   1b684:	6823      	ldr	r3, [r4, #0]
   1b686:	2b00      	cmp	r3, #0
   1b688:	d000      	beq.n	1b68c <_sbrk_r+0x1c>
   1b68a:	602b      	str	r3, [r5, #0]
   1b68c:	bd70      	pop	{r4, r5, r6, pc}
   1b68e:	46c0      	nop			; (mov r8, r8)
   1b690:	20004864 	.word	0x20004864

0001b694 <sniprintf>:
   1b694:	b40c      	push	{r2, r3}
   1b696:	b530      	push	{r4, r5, lr}
   1b698:	4b16      	ldr	r3, [pc, #88]	; (1b6f4 <sniprintf+0x60>)
   1b69a:	b09d      	sub	sp, #116	; 0x74
   1b69c:	1e0c      	subs	r4, r1, #0
   1b69e:	681d      	ldr	r5, [r3, #0]
   1b6a0:	da08      	bge.n	1b6b4 <sniprintf+0x20>
   1b6a2:	238b      	movs	r3, #139	; 0x8b
   1b6a4:	2001      	movs	r0, #1
   1b6a6:	602b      	str	r3, [r5, #0]
   1b6a8:	4240      	negs	r0, r0
   1b6aa:	b01d      	add	sp, #116	; 0x74
   1b6ac:	bc30      	pop	{r4, r5}
   1b6ae:	bc08      	pop	{r3}
   1b6b0:	b002      	add	sp, #8
   1b6b2:	4718      	bx	r3
   1b6b4:	2382      	movs	r3, #130	; 0x82
   1b6b6:	a902      	add	r1, sp, #8
   1b6b8:	009b      	lsls	r3, r3, #2
   1b6ba:	818b      	strh	r3, [r1, #12]
   1b6bc:	2300      	movs	r3, #0
   1b6be:	9002      	str	r0, [sp, #8]
   1b6c0:	6108      	str	r0, [r1, #16]
   1b6c2:	429c      	cmp	r4, r3
   1b6c4:	d000      	beq.n	1b6c8 <sniprintf+0x34>
   1b6c6:	1e63      	subs	r3, r4, #1
   1b6c8:	608b      	str	r3, [r1, #8]
   1b6ca:	614b      	str	r3, [r1, #20]
   1b6cc:	2301      	movs	r3, #1
   1b6ce:	425b      	negs	r3, r3
   1b6d0:	81cb      	strh	r3, [r1, #14]
   1b6d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1b6d4:	ab21      	add	r3, sp, #132	; 0x84
   1b6d6:	0028      	movs	r0, r5
   1b6d8:	9301      	str	r3, [sp, #4]
   1b6da:	f000 f93d 	bl	1b958 <_svfiprintf_r>
   1b6de:	1c43      	adds	r3, r0, #1
   1b6e0:	da01      	bge.n	1b6e6 <sniprintf+0x52>
   1b6e2:	238b      	movs	r3, #139	; 0x8b
   1b6e4:	602b      	str	r3, [r5, #0]
   1b6e6:	2c00      	cmp	r4, #0
   1b6e8:	d0df      	beq.n	1b6aa <sniprintf+0x16>
   1b6ea:	2300      	movs	r3, #0
   1b6ec:	9a02      	ldr	r2, [sp, #8]
   1b6ee:	7013      	strb	r3, [r2, #0]
   1b6f0:	e7db      	b.n	1b6aa <sniprintf+0x16>
   1b6f2:	46c0      	nop			; (mov r8, r8)
   1b6f4:	2000006c 	.word	0x2000006c

0001b6f8 <siprintf>:
   1b6f8:	b40e      	push	{r1, r2, r3}
   1b6fa:	b510      	push	{r4, lr}
   1b6fc:	b09d      	sub	sp, #116	; 0x74
   1b6fe:	a902      	add	r1, sp, #8
   1b700:	9002      	str	r0, [sp, #8]
   1b702:	6108      	str	r0, [r1, #16]
   1b704:	480b      	ldr	r0, [pc, #44]	; (1b734 <siprintf+0x3c>)
   1b706:	2482      	movs	r4, #130	; 0x82
   1b708:	6088      	str	r0, [r1, #8]
   1b70a:	6148      	str	r0, [r1, #20]
   1b70c:	2001      	movs	r0, #1
   1b70e:	4240      	negs	r0, r0
   1b710:	ab1f      	add	r3, sp, #124	; 0x7c
   1b712:	81c8      	strh	r0, [r1, #14]
   1b714:	4808      	ldr	r0, [pc, #32]	; (1b738 <siprintf+0x40>)
   1b716:	cb04      	ldmia	r3!, {r2}
   1b718:	00a4      	lsls	r4, r4, #2
   1b71a:	6800      	ldr	r0, [r0, #0]
   1b71c:	9301      	str	r3, [sp, #4]
   1b71e:	818c      	strh	r4, [r1, #12]
   1b720:	f000 f91a 	bl	1b958 <_svfiprintf_r>
   1b724:	2300      	movs	r3, #0
   1b726:	9a02      	ldr	r2, [sp, #8]
   1b728:	7013      	strb	r3, [r2, #0]
   1b72a:	b01d      	add	sp, #116	; 0x74
   1b72c:	bc10      	pop	{r4}
   1b72e:	bc08      	pop	{r3}
   1b730:	b003      	add	sp, #12
   1b732:	4718      	bx	r3
   1b734:	7fffffff 	.word	0x7fffffff
   1b738:	2000006c 	.word	0x2000006c

0001b73c <strcasecmp>:
   1b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b73e:	0007      	movs	r7, r0
   1b740:	000e      	movs	r6, r1
   1b742:	783c      	ldrb	r4, [r7, #0]
   1b744:	f000 f884 	bl	1b850 <__locale_ctype_ptr>
   1b748:	2203      	movs	r2, #3
   1b74a:	1900      	adds	r0, r0, r4
   1b74c:	7843      	ldrb	r3, [r0, #1]
   1b74e:	4013      	ands	r3, r2
   1b750:	2b01      	cmp	r3, #1
   1b752:	d100      	bne.n	1b756 <strcasecmp+0x1a>
   1b754:	3420      	adds	r4, #32
   1b756:	7835      	ldrb	r5, [r6, #0]
   1b758:	f000 f87a 	bl	1b850 <__locale_ctype_ptr>
   1b75c:	2203      	movs	r2, #3
   1b75e:	1940      	adds	r0, r0, r5
   1b760:	7843      	ldrb	r3, [r0, #1]
   1b762:	4013      	ands	r3, r2
   1b764:	2b01      	cmp	r3, #1
   1b766:	d100      	bne.n	1b76a <strcasecmp+0x2e>
   1b768:	3520      	adds	r5, #32
   1b76a:	1b60      	subs	r0, r4, r5
   1b76c:	d103      	bne.n	1b776 <strcasecmp+0x3a>
   1b76e:	3701      	adds	r7, #1
   1b770:	3601      	adds	r6, #1
   1b772:	2d00      	cmp	r5, #0
   1b774:	d1e5      	bne.n	1b742 <strcasecmp+0x6>
   1b776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b778 <strcpy>:
   1b778:	1c03      	adds	r3, r0, #0
   1b77a:	780a      	ldrb	r2, [r1, #0]
   1b77c:	3101      	adds	r1, #1
   1b77e:	701a      	strb	r2, [r3, #0]
   1b780:	3301      	adds	r3, #1
   1b782:	2a00      	cmp	r2, #0
   1b784:	d1f9      	bne.n	1b77a <strcpy+0x2>
   1b786:	4770      	bx	lr

0001b788 <strlen>:
   1b788:	2300      	movs	r3, #0
   1b78a:	5cc2      	ldrb	r2, [r0, r3]
   1b78c:	3301      	adds	r3, #1
   1b78e:	2a00      	cmp	r2, #0
   1b790:	d1fb      	bne.n	1b78a <strlen+0x2>
   1b792:	1e58      	subs	r0, r3, #1
   1b794:	4770      	bx	lr

0001b796 <strncmp>:
   1b796:	2300      	movs	r3, #0
   1b798:	b530      	push	{r4, r5, lr}
   1b79a:	429a      	cmp	r2, r3
   1b79c:	d00a      	beq.n	1b7b4 <strncmp+0x1e>
   1b79e:	3a01      	subs	r2, #1
   1b7a0:	5cc4      	ldrb	r4, [r0, r3]
   1b7a2:	5ccd      	ldrb	r5, [r1, r3]
   1b7a4:	42ac      	cmp	r4, r5
   1b7a6:	d104      	bne.n	1b7b2 <strncmp+0x1c>
   1b7a8:	429a      	cmp	r2, r3
   1b7aa:	d002      	beq.n	1b7b2 <strncmp+0x1c>
   1b7ac:	3301      	adds	r3, #1
   1b7ae:	2c00      	cmp	r4, #0
   1b7b0:	d1f6      	bne.n	1b7a0 <strncmp+0xa>
   1b7b2:	1b63      	subs	r3, r4, r5
   1b7b4:	0018      	movs	r0, r3
   1b7b6:	bd30      	pop	{r4, r5, pc}

0001b7b8 <strncpy>:
   1b7b8:	b570      	push	{r4, r5, r6, lr}
   1b7ba:	0004      	movs	r4, r0
   1b7bc:	2a00      	cmp	r2, #0
   1b7be:	d100      	bne.n	1b7c2 <strncpy+0xa>
   1b7c0:	bd70      	pop	{r4, r5, r6, pc}
   1b7c2:	780d      	ldrb	r5, [r1, #0]
   1b7c4:	1e56      	subs	r6, r2, #1
   1b7c6:	1c63      	adds	r3, r4, #1
   1b7c8:	7025      	strb	r5, [r4, #0]
   1b7ca:	3101      	adds	r1, #1
   1b7cc:	2d00      	cmp	r5, #0
   1b7ce:	d105      	bne.n	1b7dc <strncpy+0x24>
   1b7d0:	18a4      	adds	r4, r4, r2
   1b7d2:	429c      	cmp	r4, r3
   1b7d4:	d0f4      	beq.n	1b7c0 <strncpy+0x8>
   1b7d6:	701d      	strb	r5, [r3, #0]
   1b7d8:	3301      	adds	r3, #1
   1b7da:	e7fa      	b.n	1b7d2 <strncpy+0x1a>
   1b7dc:	001c      	movs	r4, r3
   1b7de:	0032      	movs	r2, r6
   1b7e0:	e7ec      	b.n	1b7bc <strncpy+0x4>

0001b7e2 <_vsniprintf_r>:
   1b7e2:	b530      	push	{r4, r5, lr}
   1b7e4:	0014      	movs	r4, r2
   1b7e6:	b09b      	sub	sp, #108	; 0x6c
   1b7e8:	0005      	movs	r5, r0
   1b7ea:	001a      	movs	r2, r3
   1b7ec:	2c00      	cmp	r4, #0
   1b7ee:	da05      	bge.n	1b7fc <_vsniprintf_r+0x1a>
   1b7f0:	238b      	movs	r3, #139	; 0x8b
   1b7f2:	6003      	str	r3, [r0, #0]
   1b7f4:	2001      	movs	r0, #1
   1b7f6:	4240      	negs	r0, r0
   1b7f8:	b01b      	add	sp, #108	; 0x6c
   1b7fa:	bd30      	pop	{r4, r5, pc}
   1b7fc:	2382      	movs	r3, #130	; 0x82
   1b7fe:	4668      	mov	r0, sp
   1b800:	009b      	lsls	r3, r3, #2
   1b802:	8183      	strh	r3, [r0, #12]
   1b804:	2300      	movs	r3, #0
   1b806:	9100      	str	r1, [sp, #0]
   1b808:	9104      	str	r1, [sp, #16]
   1b80a:	429c      	cmp	r4, r3
   1b80c:	d000      	beq.n	1b810 <_vsniprintf_r+0x2e>
   1b80e:	1e63      	subs	r3, r4, #1
   1b810:	9302      	str	r3, [sp, #8]
   1b812:	9305      	str	r3, [sp, #20]
   1b814:	2301      	movs	r3, #1
   1b816:	4669      	mov	r1, sp
   1b818:	425b      	negs	r3, r3
   1b81a:	81cb      	strh	r3, [r1, #14]
   1b81c:	0028      	movs	r0, r5
   1b81e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1b820:	f000 f89a 	bl	1b958 <_svfiprintf_r>
   1b824:	1c43      	adds	r3, r0, #1
   1b826:	da01      	bge.n	1b82c <_vsniprintf_r+0x4a>
   1b828:	238b      	movs	r3, #139	; 0x8b
   1b82a:	602b      	str	r3, [r5, #0]
   1b82c:	2c00      	cmp	r4, #0
   1b82e:	d0e3      	beq.n	1b7f8 <_vsniprintf_r+0x16>
   1b830:	2300      	movs	r3, #0
   1b832:	9a00      	ldr	r2, [sp, #0]
   1b834:	7013      	strb	r3, [r2, #0]
   1b836:	e7df      	b.n	1b7f8 <_vsniprintf_r+0x16>

0001b838 <vsniprintf>:
   1b838:	b507      	push	{r0, r1, r2, lr}
   1b83a:	9300      	str	r3, [sp, #0]
   1b83c:	0013      	movs	r3, r2
   1b83e:	000a      	movs	r2, r1
   1b840:	0001      	movs	r1, r0
   1b842:	4802      	ldr	r0, [pc, #8]	; (1b84c <vsniprintf+0x14>)
   1b844:	6800      	ldr	r0, [r0, #0]
   1b846:	f7ff ffcc 	bl	1b7e2 <_vsniprintf_r>
   1b84a:	bd0e      	pop	{r1, r2, r3, pc}
   1b84c:	2000006c 	.word	0x2000006c

0001b850 <__locale_ctype_ptr>:
   1b850:	4b04      	ldr	r3, [pc, #16]	; (1b864 <__locale_ctype_ptr+0x14>)
   1b852:	681b      	ldr	r3, [r3, #0]
   1b854:	6a1b      	ldr	r3, [r3, #32]
   1b856:	2b00      	cmp	r3, #0
   1b858:	d100      	bne.n	1b85c <__locale_ctype_ptr+0xc>
   1b85a:	4b03      	ldr	r3, [pc, #12]	; (1b868 <__locale_ctype_ptr+0x18>)
   1b85c:	33ec      	adds	r3, #236	; 0xec
   1b85e:	6818      	ldr	r0, [r3, #0]
   1b860:	4770      	bx	lr
   1b862:	46c0      	nop			; (mov r8, r8)
   1b864:	2000006c 	.word	0x2000006c
   1b868:	200000d0 	.word	0x200000d0

0001b86c <__ascii_mbtowc>:
   1b86c:	b082      	sub	sp, #8
   1b86e:	2900      	cmp	r1, #0
   1b870:	d100      	bne.n	1b874 <__ascii_mbtowc+0x8>
   1b872:	a901      	add	r1, sp, #4
   1b874:	1e10      	subs	r0, r2, #0
   1b876:	d006      	beq.n	1b886 <__ascii_mbtowc+0x1a>
   1b878:	2b00      	cmp	r3, #0
   1b87a:	d006      	beq.n	1b88a <__ascii_mbtowc+0x1e>
   1b87c:	7813      	ldrb	r3, [r2, #0]
   1b87e:	600b      	str	r3, [r1, #0]
   1b880:	7810      	ldrb	r0, [r2, #0]
   1b882:	1e43      	subs	r3, r0, #1
   1b884:	4198      	sbcs	r0, r3
   1b886:	b002      	add	sp, #8
   1b888:	4770      	bx	lr
   1b88a:	2002      	movs	r0, #2
   1b88c:	4240      	negs	r0, r0
   1b88e:	e7fa      	b.n	1b886 <__ascii_mbtowc+0x1a>

0001b890 <__malloc_lock>:
   1b890:	4770      	bx	lr

0001b892 <__malloc_unlock>:
   1b892:	4770      	bx	lr

0001b894 <__ssputs_r>:
   1b894:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b896:	688e      	ldr	r6, [r1, #8]
   1b898:	b085      	sub	sp, #20
   1b89a:	0007      	movs	r7, r0
   1b89c:	000c      	movs	r4, r1
   1b89e:	9203      	str	r2, [sp, #12]
   1b8a0:	9301      	str	r3, [sp, #4]
   1b8a2:	429e      	cmp	r6, r3
   1b8a4:	d839      	bhi.n	1b91a <__ssputs_r+0x86>
   1b8a6:	2390      	movs	r3, #144	; 0x90
   1b8a8:	898a      	ldrh	r2, [r1, #12]
   1b8aa:	00db      	lsls	r3, r3, #3
   1b8ac:	421a      	tst	r2, r3
   1b8ae:	d034      	beq.n	1b91a <__ssputs_r+0x86>
   1b8b0:	2503      	movs	r5, #3
   1b8b2:	6909      	ldr	r1, [r1, #16]
   1b8b4:	6823      	ldr	r3, [r4, #0]
   1b8b6:	1a5b      	subs	r3, r3, r1
   1b8b8:	9302      	str	r3, [sp, #8]
   1b8ba:	6963      	ldr	r3, [r4, #20]
   1b8bc:	9802      	ldr	r0, [sp, #8]
   1b8be:	435d      	muls	r5, r3
   1b8c0:	0feb      	lsrs	r3, r5, #31
   1b8c2:	195d      	adds	r5, r3, r5
   1b8c4:	9b01      	ldr	r3, [sp, #4]
   1b8c6:	106d      	asrs	r5, r5, #1
   1b8c8:	3301      	adds	r3, #1
   1b8ca:	181b      	adds	r3, r3, r0
   1b8cc:	42ab      	cmp	r3, r5
   1b8ce:	d900      	bls.n	1b8d2 <__ssputs_r+0x3e>
   1b8d0:	001d      	movs	r5, r3
   1b8d2:	0553      	lsls	r3, r2, #21
   1b8d4:	d532      	bpl.n	1b93c <__ssputs_r+0xa8>
   1b8d6:	0029      	movs	r1, r5
   1b8d8:	0038      	movs	r0, r7
   1b8da:	f7ff fe6b 	bl	1b5b4 <_malloc_r>
   1b8de:	1e06      	subs	r6, r0, #0
   1b8e0:	d109      	bne.n	1b8f6 <__ssputs_r+0x62>
   1b8e2:	230c      	movs	r3, #12
   1b8e4:	603b      	str	r3, [r7, #0]
   1b8e6:	2340      	movs	r3, #64	; 0x40
   1b8e8:	2001      	movs	r0, #1
   1b8ea:	89a2      	ldrh	r2, [r4, #12]
   1b8ec:	4240      	negs	r0, r0
   1b8ee:	4313      	orrs	r3, r2
   1b8f0:	81a3      	strh	r3, [r4, #12]
   1b8f2:	b005      	add	sp, #20
   1b8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b8f6:	9a02      	ldr	r2, [sp, #8]
   1b8f8:	6921      	ldr	r1, [r4, #16]
   1b8fa:	f7ff fded 	bl	1b4d8 <memcpy>
   1b8fe:	89a3      	ldrh	r3, [r4, #12]
   1b900:	4a14      	ldr	r2, [pc, #80]	; (1b954 <__ssputs_r+0xc0>)
   1b902:	401a      	ands	r2, r3
   1b904:	2380      	movs	r3, #128	; 0x80
   1b906:	4313      	orrs	r3, r2
   1b908:	81a3      	strh	r3, [r4, #12]
   1b90a:	9b02      	ldr	r3, [sp, #8]
   1b90c:	6126      	str	r6, [r4, #16]
   1b90e:	18f6      	adds	r6, r6, r3
   1b910:	6026      	str	r6, [r4, #0]
   1b912:	6165      	str	r5, [r4, #20]
   1b914:	9e01      	ldr	r6, [sp, #4]
   1b916:	1aed      	subs	r5, r5, r3
   1b918:	60a5      	str	r5, [r4, #8]
   1b91a:	9b01      	ldr	r3, [sp, #4]
   1b91c:	42b3      	cmp	r3, r6
   1b91e:	d200      	bcs.n	1b922 <__ssputs_r+0x8e>
   1b920:	001e      	movs	r6, r3
   1b922:	0032      	movs	r2, r6
   1b924:	9903      	ldr	r1, [sp, #12]
   1b926:	6820      	ldr	r0, [r4, #0]
   1b928:	f7ff fddf 	bl	1b4ea <memmove>
   1b92c:	68a3      	ldr	r3, [r4, #8]
   1b92e:	2000      	movs	r0, #0
   1b930:	1b9b      	subs	r3, r3, r6
   1b932:	60a3      	str	r3, [r4, #8]
   1b934:	6823      	ldr	r3, [r4, #0]
   1b936:	199e      	adds	r6, r3, r6
   1b938:	6026      	str	r6, [r4, #0]
   1b93a:	e7da      	b.n	1b8f2 <__ssputs_r+0x5e>
   1b93c:	002a      	movs	r2, r5
   1b93e:	0038      	movs	r0, r7
   1b940:	f000 faad 	bl	1be9e <_realloc_r>
   1b944:	1e06      	subs	r6, r0, #0
   1b946:	d1e0      	bne.n	1b90a <__ssputs_r+0x76>
   1b948:	6921      	ldr	r1, [r4, #16]
   1b94a:	0038      	movs	r0, r7
   1b94c:	f7ff fde8 	bl	1b520 <_free_r>
   1b950:	e7c7      	b.n	1b8e2 <__ssputs_r+0x4e>
   1b952:	46c0      	nop			; (mov r8, r8)
   1b954:	fffffb7f 	.word	0xfffffb7f

0001b958 <_svfiprintf_r>:
   1b958:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b95a:	b09f      	sub	sp, #124	; 0x7c
   1b95c:	9002      	str	r0, [sp, #8]
   1b95e:	9305      	str	r3, [sp, #20]
   1b960:	898b      	ldrh	r3, [r1, #12]
   1b962:	000f      	movs	r7, r1
   1b964:	0016      	movs	r6, r2
   1b966:	061b      	lsls	r3, r3, #24
   1b968:	d511      	bpl.n	1b98e <_svfiprintf_r+0x36>
   1b96a:	690b      	ldr	r3, [r1, #16]
   1b96c:	2b00      	cmp	r3, #0
   1b96e:	d10e      	bne.n	1b98e <_svfiprintf_r+0x36>
   1b970:	2140      	movs	r1, #64	; 0x40
   1b972:	f7ff fe1f 	bl	1b5b4 <_malloc_r>
   1b976:	6038      	str	r0, [r7, #0]
   1b978:	6138      	str	r0, [r7, #16]
   1b97a:	2800      	cmp	r0, #0
   1b97c:	d105      	bne.n	1b98a <_svfiprintf_r+0x32>
   1b97e:	230c      	movs	r3, #12
   1b980:	9a02      	ldr	r2, [sp, #8]
   1b982:	3801      	subs	r0, #1
   1b984:	6013      	str	r3, [r2, #0]
   1b986:	b01f      	add	sp, #124	; 0x7c
   1b988:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b98a:	2340      	movs	r3, #64	; 0x40
   1b98c:	617b      	str	r3, [r7, #20]
   1b98e:	2300      	movs	r3, #0
   1b990:	ad06      	add	r5, sp, #24
   1b992:	616b      	str	r3, [r5, #20]
   1b994:	3320      	adds	r3, #32
   1b996:	766b      	strb	r3, [r5, #25]
   1b998:	3310      	adds	r3, #16
   1b99a:	76ab      	strb	r3, [r5, #26]
   1b99c:	0034      	movs	r4, r6
   1b99e:	7823      	ldrb	r3, [r4, #0]
   1b9a0:	2b00      	cmp	r3, #0
   1b9a2:	d147      	bne.n	1ba34 <_svfiprintf_r+0xdc>
   1b9a4:	1ba3      	subs	r3, r4, r6
   1b9a6:	9304      	str	r3, [sp, #16]
   1b9a8:	d00d      	beq.n	1b9c6 <_svfiprintf_r+0x6e>
   1b9aa:	1ba3      	subs	r3, r4, r6
   1b9ac:	0032      	movs	r2, r6
   1b9ae:	0039      	movs	r1, r7
   1b9b0:	9802      	ldr	r0, [sp, #8]
   1b9b2:	f7ff ff6f 	bl	1b894 <__ssputs_r>
   1b9b6:	1c43      	adds	r3, r0, #1
   1b9b8:	d100      	bne.n	1b9bc <_svfiprintf_r+0x64>
   1b9ba:	e0b5      	b.n	1bb28 <_svfiprintf_r+0x1d0>
   1b9bc:	696a      	ldr	r2, [r5, #20]
   1b9be:	9b04      	ldr	r3, [sp, #16]
   1b9c0:	4694      	mov	ip, r2
   1b9c2:	4463      	add	r3, ip
   1b9c4:	616b      	str	r3, [r5, #20]
   1b9c6:	7823      	ldrb	r3, [r4, #0]
   1b9c8:	2b00      	cmp	r3, #0
   1b9ca:	d100      	bne.n	1b9ce <_svfiprintf_r+0x76>
   1b9cc:	e0ac      	b.n	1bb28 <_svfiprintf_r+0x1d0>
   1b9ce:	2201      	movs	r2, #1
   1b9d0:	2300      	movs	r3, #0
   1b9d2:	4252      	negs	r2, r2
   1b9d4:	606a      	str	r2, [r5, #4]
   1b9d6:	a902      	add	r1, sp, #8
   1b9d8:	3254      	adds	r2, #84	; 0x54
   1b9da:	1852      	adds	r2, r2, r1
   1b9dc:	3401      	adds	r4, #1
   1b9de:	602b      	str	r3, [r5, #0]
   1b9e0:	60eb      	str	r3, [r5, #12]
   1b9e2:	60ab      	str	r3, [r5, #8]
   1b9e4:	7013      	strb	r3, [r2, #0]
   1b9e6:	65ab      	str	r3, [r5, #88]	; 0x58
   1b9e8:	4e58      	ldr	r6, [pc, #352]	; (1bb4c <_svfiprintf_r+0x1f4>)
   1b9ea:	2205      	movs	r2, #5
   1b9ec:	7821      	ldrb	r1, [r4, #0]
   1b9ee:	0030      	movs	r0, r6
   1b9f0:	f000 fa4a 	bl	1be88 <memchr>
   1b9f4:	1c62      	adds	r2, r4, #1
   1b9f6:	2800      	cmp	r0, #0
   1b9f8:	d120      	bne.n	1ba3c <_svfiprintf_r+0xe4>
   1b9fa:	6829      	ldr	r1, [r5, #0]
   1b9fc:	06cb      	lsls	r3, r1, #27
   1b9fe:	d504      	bpl.n	1ba0a <_svfiprintf_r+0xb2>
   1ba00:	2353      	movs	r3, #83	; 0x53
   1ba02:	ae02      	add	r6, sp, #8
   1ba04:	3020      	adds	r0, #32
   1ba06:	199b      	adds	r3, r3, r6
   1ba08:	7018      	strb	r0, [r3, #0]
   1ba0a:	070b      	lsls	r3, r1, #28
   1ba0c:	d504      	bpl.n	1ba18 <_svfiprintf_r+0xc0>
   1ba0e:	2353      	movs	r3, #83	; 0x53
   1ba10:	202b      	movs	r0, #43	; 0x2b
   1ba12:	ae02      	add	r6, sp, #8
   1ba14:	199b      	adds	r3, r3, r6
   1ba16:	7018      	strb	r0, [r3, #0]
   1ba18:	7823      	ldrb	r3, [r4, #0]
   1ba1a:	2b2a      	cmp	r3, #42	; 0x2a
   1ba1c:	d016      	beq.n	1ba4c <_svfiprintf_r+0xf4>
   1ba1e:	2000      	movs	r0, #0
   1ba20:	210a      	movs	r1, #10
   1ba22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ba24:	7822      	ldrb	r2, [r4, #0]
   1ba26:	3a30      	subs	r2, #48	; 0x30
   1ba28:	2a09      	cmp	r2, #9
   1ba2a:	d955      	bls.n	1bad8 <_svfiprintf_r+0x180>
   1ba2c:	2800      	cmp	r0, #0
   1ba2e:	d015      	beq.n	1ba5c <_svfiprintf_r+0x104>
   1ba30:	9309      	str	r3, [sp, #36]	; 0x24
   1ba32:	e013      	b.n	1ba5c <_svfiprintf_r+0x104>
   1ba34:	2b25      	cmp	r3, #37	; 0x25
   1ba36:	d0b5      	beq.n	1b9a4 <_svfiprintf_r+0x4c>
   1ba38:	3401      	adds	r4, #1
   1ba3a:	e7b0      	b.n	1b99e <_svfiprintf_r+0x46>
   1ba3c:	2301      	movs	r3, #1
   1ba3e:	1b80      	subs	r0, r0, r6
   1ba40:	4083      	lsls	r3, r0
   1ba42:	6829      	ldr	r1, [r5, #0]
   1ba44:	0014      	movs	r4, r2
   1ba46:	430b      	orrs	r3, r1
   1ba48:	602b      	str	r3, [r5, #0]
   1ba4a:	e7cd      	b.n	1b9e8 <_svfiprintf_r+0x90>
   1ba4c:	9b05      	ldr	r3, [sp, #20]
   1ba4e:	1d18      	adds	r0, r3, #4
   1ba50:	681b      	ldr	r3, [r3, #0]
   1ba52:	9005      	str	r0, [sp, #20]
   1ba54:	2b00      	cmp	r3, #0
   1ba56:	db39      	blt.n	1bacc <_svfiprintf_r+0x174>
   1ba58:	9309      	str	r3, [sp, #36]	; 0x24
   1ba5a:	0014      	movs	r4, r2
   1ba5c:	7823      	ldrb	r3, [r4, #0]
   1ba5e:	2b2e      	cmp	r3, #46	; 0x2e
   1ba60:	d10b      	bne.n	1ba7a <_svfiprintf_r+0x122>
   1ba62:	7863      	ldrb	r3, [r4, #1]
   1ba64:	1c62      	adds	r2, r4, #1
   1ba66:	2b2a      	cmp	r3, #42	; 0x2a
   1ba68:	d13e      	bne.n	1bae8 <_svfiprintf_r+0x190>
   1ba6a:	9b05      	ldr	r3, [sp, #20]
   1ba6c:	3402      	adds	r4, #2
   1ba6e:	1d1a      	adds	r2, r3, #4
   1ba70:	681b      	ldr	r3, [r3, #0]
   1ba72:	9205      	str	r2, [sp, #20]
   1ba74:	2b00      	cmp	r3, #0
   1ba76:	db34      	blt.n	1bae2 <_svfiprintf_r+0x18a>
   1ba78:	9307      	str	r3, [sp, #28]
   1ba7a:	4e35      	ldr	r6, [pc, #212]	; (1bb50 <_svfiprintf_r+0x1f8>)
   1ba7c:	7821      	ldrb	r1, [r4, #0]
   1ba7e:	2203      	movs	r2, #3
   1ba80:	0030      	movs	r0, r6
   1ba82:	f000 fa01 	bl	1be88 <memchr>
   1ba86:	2800      	cmp	r0, #0
   1ba88:	d006      	beq.n	1ba98 <_svfiprintf_r+0x140>
   1ba8a:	2340      	movs	r3, #64	; 0x40
   1ba8c:	1b80      	subs	r0, r0, r6
   1ba8e:	4083      	lsls	r3, r0
   1ba90:	682a      	ldr	r2, [r5, #0]
   1ba92:	3401      	adds	r4, #1
   1ba94:	4313      	orrs	r3, r2
   1ba96:	602b      	str	r3, [r5, #0]
   1ba98:	7821      	ldrb	r1, [r4, #0]
   1ba9a:	2206      	movs	r2, #6
   1ba9c:	482d      	ldr	r0, [pc, #180]	; (1bb54 <_svfiprintf_r+0x1fc>)
   1ba9e:	1c66      	adds	r6, r4, #1
   1baa0:	7629      	strb	r1, [r5, #24]
   1baa2:	f000 f9f1 	bl	1be88 <memchr>
   1baa6:	2800      	cmp	r0, #0
   1baa8:	d046      	beq.n	1bb38 <_svfiprintf_r+0x1e0>
   1baaa:	4b2b      	ldr	r3, [pc, #172]	; (1bb58 <_svfiprintf_r+0x200>)
   1baac:	2b00      	cmp	r3, #0
   1baae:	d12f      	bne.n	1bb10 <_svfiprintf_r+0x1b8>
   1bab0:	6829      	ldr	r1, [r5, #0]
   1bab2:	9b05      	ldr	r3, [sp, #20]
   1bab4:	2207      	movs	r2, #7
   1bab6:	05c9      	lsls	r1, r1, #23
   1bab8:	d528      	bpl.n	1bb0c <_svfiprintf_r+0x1b4>
   1baba:	189b      	adds	r3, r3, r2
   1babc:	4393      	bics	r3, r2
   1babe:	3308      	adds	r3, #8
   1bac0:	9305      	str	r3, [sp, #20]
   1bac2:	696b      	ldr	r3, [r5, #20]
   1bac4:	9a03      	ldr	r2, [sp, #12]
   1bac6:	189b      	adds	r3, r3, r2
   1bac8:	616b      	str	r3, [r5, #20]
   1baca:	e767      	b.n	1b99c <_svfiprintf_r+0x44>
   1bacc:	425b      	negs	r3, r3
   1bace:	60eb      	str	r3, [r5, #12]
   1bad0:	2302      	movs	r3, #2
   1bad2:	430b      	orrs	r3, r1
   1bad4:	602b      	str	r3, [r5, #0]
   1bad6:	e7c0      	b.n	1ba5a <_svfiprintf_r+0x102>
   1bad8:	434b      	muls	r3, r1
   1bada:	3401      	adds	r4, #1
   1badc:	189b      	adds	r3, r3, r2
   1bade:	2001      	movs	r0, #1
   1bae0:	e7a0      	b.n	1ba24 <_svfiprintf_r+0xcc>
   1bae2:	2301      	movs	r3, #1
   1bae4:	425b      	negs	r3, r3
   1bae6:	e7c7      	b.n	1ba78 <_svfiprintf_r+0x120>
   1bae8:	2300      	movs	r3, #0
   1baea:	0014      	movs	r4, r2
   1baec:	200a      	movs	r0, #10
   1baee:	001a      	movs	r2, r3
   1baf0:	606b      	str	r3, [r5, #4]
   1baf2:	7821      	ldrb	r1, [r4, #0]
   1baf4:	3930      	subs	r1, #48	; 0x30
   1baf6:	2909      	cmp	r1, #9
   1baf8:	d903      	bls.n	1bb02 <_svfiprintf_r+0x1aa>
   1bafa:	2b00      	cmp	r3, #0
   1bafc:	d0bd      	beq.n	1ba7a <_svfiprintf_r+0x122>
   1bafe:	9207      	str	r2, [sp, #28]
   1bb00:	e7bb      	b.n	1ba7a <_svfiprintf_r+0x122>
   1bb02:	4342      	muls	r2, r0
   1bb04:	3401      	adds	r4, #1
   1bb06:	1852      	adds	r2, r2, r1
   1bb08:	2301      	movs	r3, #1
   1bb0a:	e7f2      	b.n	1baf2 <_svfiprintf_r+0x19a>
   1bb0c:	3307      	adds	r3, #7
   1bb0e:	e7d5      	b.n	1babc <_svfiprintf_r+0x164>
   1bb10:	ab05      	add	r3, sp, #20
   1bb12:	9300      	str	r3, [sp, #0]
   1bb14:	003a      	movs	r2, r7
   1bb16:	4b11      	ldr	r3, [pc, #68]	; (1bb5c <_svfiprintf_r+0x204>)
   1bb18:	0029      	movs	r1, r5
   1bb1a:	9802      	ldr	r0, [sp, #8]
   1bb1c:	e000      	b.n	1bb20 <_svfiprintf_r+0x1c8>
   1bb1e:	bf00      	nop
   1bb20:	9003      	str	r0, [sp, #12]
   1bb22:	9b03      	ldr	r3, [sp, #12]
   1bb24:	3301      	adds	r3, #1
   1bb26:	d1cc      	bne.n	1bac2 <_svfiprintf_r+0x16a>
   1bb28:	89bb      	ldrh	r3, [r7, #12]
   1bb2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1bb2c:	065b      	lsls	r3, r3, #25
   1bb2e:	d400      	bmi.n	1bb32 <_svfiprintf_r+0x1da>
   1bb30:	e729      	b.n	1b986 <_svfiprintf_r+0x2e>
   1bb32:	2001      	movs	r0, #1
   1bb34:	4240      	negs	r0, r0
   1bb36:	e726      	b.n	1b986 <_svfiprintf_r+0x2e>
   1bb38:	ab05      	add	r3, sp, #20
   1bb3a:	9300      	str	r3, [sp, #0]
   1bb3c:	003a      	movs	r2, r7
   1bb3e:	4b07      	ldr	r3, [pc, #28]	; (1bb5c <_svfiprintf_r+0x204>)
   1bb40:	0029      	movs	r1, r5
   1bb42:	9802      	ldr	r0, [sp, #8]
   1bb44:	f000 f87a 	bl	1bc3c <_printf_i>
   1bb48:	e7ea      	b.n	1bb20 <_svfiprintf_r+0x1c8>
   1bb4a:	46c0      	nop			; (mov r8, r8)
   1bb4c:	0001d284 	.word	0x0001d284
   1bb50:	0001d28a 	.word	0x0001d28a
   1bb54:	0001d28e 	.word	0x0001d28e
   1bb58:	00000000 	.word	0x00000000
   1bb5c:	0001b895 	.word	0x0001b895

0001bb60 <_printf_common>:
   1bb60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bb62:	0015      	movs	r5, r2
   1bb64:	9301      	str	r3, [sp, #4]
   1bb66:	688a      	ldr	r2, [r1, #8]
   1bb68:	690b      	ldr	r3, [r1, #16]
   1bb6a:	9000      	str	r0, [sp, #0]
   1bb6c:	000c      	movs	r4, r1
   1bb6e:	4293      	cmp	r3, r2
   1bb70:	da00      	bge.n	1bb74 <_printf_common+0x14>
   1bb72:	0013      	movs	r3, r2
   1bb74:	0022      	movs	r2, r4
   1bb76:	602b      	str	r3, [r5, #0]
   1bb78:	3243      	adds	r2, #67	; 0x43
   1bb7a:	7812      	ldrb	r2, [r2, #0]
   1bb7c:	2a00      	cmp	r2, #0
   1bb7e:	d001      	beq.n	1bb84 <_printf_common+0x24>
   1bb80:	3301      	adds	r3, #1
   1bb82:	602b      	str	r3, [r5, #0]
   1bb84:	6823      	ldr	r3, [r4, #0]
   1bb86:	069b      	lsls	r3, r3, #26
   1bb88:	d502      	bpl.n	1bb90 <_printf_common+0x30>
   1bb8a:	682b      	ldr	r3, [r5, #0]
   1bb8c:	3302      	adds	r3, #2
   1bb8e:	602b      	str	r3, [r5, #0]
   1bb90:	2706      	movs	r7, #6
   1bb92:	6823      	ldr	r3, [r4, #0]
   1bb94:	401f      	ands	r7, r3
   1bb96:	d027      	beq.n	1bbe8 <_printf_common+0x88>
   1bb98:	0023      	movs	r3, r4
   1bb9a:	3343      	adds	r3, #67	; 0x43
   1bb9c:	781b      	ldrb	r3, [r3, #0]
   1bb9e:	1e5a      	subs	r2, r3, #1
   1bba0:	4193      	sbcs	r3, r2
   1bba2:	6822      	ldr	r2, [r4, #0]
   1bba4:	0692      	lsls	r2, r2, #26
   1bba6:	d430      	bmi.n	1bc0a <_printf_common+0xaa>
   1bba8:	0022      	movs	r2, r4
   1bbaa:	9901      	ldr	r1, [sp, #4]
   1bbac:	3243      	adds	r2, #67	; 0x43
   1bbae:	9800      	ldr	r0, [sp, #0]
   1bbb0:	9e08      	ldr	r6, [sp, #32]
   1bbb2:	47b0      	blx	r6
   1bbb4:	1c43      	adds	r3, r0, #1
   1bbb6:	d025      	beq.n	1bc04 <_printf_common+0xa4>
   1bbb8:	2306      	movs	r3, #6
   1bbba:	6820      	ldr	r0, [r4, #0]
   1bbbc:	682a      	ldr	r2, [r5, #0]
   1bbbe:	68e1      	ldr	r1, [r4, #12]
   1bbc0:	4003      	ands	r3, r0
   1bbc2:	2500      	movs	r5, #0
   1bbc4:	2b04      	cmp	r3, #4
   1bbc6:	d103      	bne.n	1bbd0 <_printf_common+0x70>
   1bbc8:	1a8d      	subs	r5, r1, r2
   1bbca:	43eb      	mvns	r3, r5
   1bbcc:	17db      	asrs	r3, r3, #31
   1bbce:	401d      	ands	r5, r3
   1bbd0:	68a3      	ldr	r3, [r4, #8]
   1bbd2:	6922      	ldr	r2, [r4, #16]
   1bbd4:	4293      	cmp	r3, r2
   1bbd6:	dd01      	ble.n	1bbdc <_printf_common+0x7c>
   1bbd8:	1a9b      	subs	r3, r3, r2
   1bbda:	18ed      	adds	r5, r5, r3
   1bbdc:	2700      	movs	r7, #0
   1bbde:	42bd      	cmp	r5, r7
   1bbe0:	d120      	bne.n	1bc24 <_printf_common+0xc4>
   1bbe2:	2000      	movs	r0, #0
   1bbe4:	e010      	b.n	1bc08 <_printf_common+0xa8>
   1bbe6:	3701      	adds	r7, #1
   1bbe8:	68e3      	ldr	r3, [r4, #12]
   1bbea:	682a      	ldr	r2, [r5, #0]
   1bbec:	1a9b      	subs	r3, r3, r2
   1bbee:	429f      	cmp	r7, r3
   1bbf0:	dad2      	bge.n	1bb98 <_printf_common+0x38>
   1bbf2:	0022      	movs	r2, r4
   1bbf4:	2301      	movs	r3, #1
   1bbf6:	3219      	adds	r2, #25
   1bbf8:	9901      	ldr	r1, [sp, #4]
   1bbfa:	9800      	ldr	r0, [sp, #0]
   1bbfc:	9e08      	ldr	r6, [sp, #32]
   1bbfe:	47b0      	blx	r6
   1bc00:	1c43      	adds	r3, r0, #1
   1bc02:	d1f0      	bne.n	1bbe6 <_printf_common+0x86>
   1bc04:	2001      	movs	r0, #1
   1bc06:	4240      	negs	r0, r0
   1bc08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1bc0a:	2030      	movs	r0, #48	; 0x30
   1bc0c:	18e1      	adds	r1, r4, r3
   1bc0e:	3143      	adds	r1, #67	; 0x43
   1bc10:	7008      	strb	r0, [r1, #0]
   1bc12:	0021      	movs	r1, r4
   1bc14:	1c5a      	adds	r2, r3, #1
   1bc16:	3145      	adds	r1, #69	; 0x45
   1bc18:	7809      	ldrb	r1, [r1, #0]
   1bc1a:	18a2      	adds	r2, r4, r2
   1bc1c:	3243      	adds	r2, #67	; 0x43
   1bc1e:	3302      	adds	r3, #2
   1bc20:	7011      	strb	r1, [r2, #0]
   1bc22:	e7c1      	b.n	1bba8 <_printf_common+0x48>
   1bc24:	0022      	movs	r2, r4
   1bc26:	2301      	movs	r3, #1
   1bc28:	321a      	adds	r2, #26
   1bc2a:	9901      	ldr	r1, [sp, #4]
   1bc2c:	9800      	ldr	r0, [sp, #0]
   1bc2e:	9e08      	ldr	r6, [sp, #32]
   1bc30:	47b0      	blx	r6
   1bc32:	1c43      	adds	r3, r0, #1
   1bc34:	d0e6      	beq.n	1bc04 <_printf_common+0xa4>
   1bc36:	3701      	adds	r7, #1
   1bc38:	e7d1      	b.n	1bbde <_printf_common+0x7e>
	...

0001bc3c <_printf_i>:
   1bc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc3e:	b08b      	sub	sp, #44	; 0x2c
   1bc40:	9206      	str	r2, [sp, #24]
   1bc42:	000a      	movs	r2, r1
   1bc44:	3243      	adds	r2, #67	; 0x43
   1bc46:	9307      	str	r3, [sp, #28]
   1bc48:	9005      	str	r0, [sp, #20]
   1bc4a:	9204      	str	r2, [sp, #16]
   1bc4c:	7e0a      	ldrb	r2, [r1, #24]
   1bc4e:	000c      	movs	r4, r1
   1bc50:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bc52:	2a6e      	cmp	r2, #110	; 0x6e
   1bc54:	d100      	bne.n	1bc58 <_printf_i+0x1c>
   1bc56:	e08f      	b.n	1bd78 <_printf_i+0x13c>
   1bc58:	d817      	bhi.n	1bc8a <_printf_i+0x4e>
   1bc5a:	2a63      	cmp	r2, #99	; 0x63
   1bc5c:	d02c      	beq.n	1bcb8 <_printf_i+0x7c>
   1bc5e:	d808      	bhi.n	1bc72 <_printf_i+0x36>
   1bc60:	2a00      	cmp	r2, #0
   1bc62:	d100      	bne.n	1bc66 <_printf_i+0x2a>
   1bc64:	e099      	b.n	1bd9a <_printf_i+0x15e>
   1bc66:	2a58      	cmp	r2, #88	; 0x58
   1bc68:	d054      	beq.n	1bd14 <_printf_i+0xd8>
   1bc6a:	0026      	movs	r6, r4
   1bc6c:	3642      	adds	r6, #66	; 0x42
   1bc6e:	7032      	strb	r2, [r6, #0]
   1bc70:	e029      	b.n	1bcc6 <_printf_i+0x8a>
   1bc72:	2a64      	cmp	r2, #100	; 0x64
   1bc74:	d001      	beq.n	1bc7a <_printf_i+0x3e>
   1bc76:	2a69      	cmp	r2, #105	; 0x69
   1bc78:	d1f7      	bne.n	1bc6a <_printf_i+0x2e>
   1bc7a:	6821      	ldr	r1, [r4, #0]
   1bc7c:	681a      	ldr	r2, [r3, #0]
   1bc7e:	0608      	lsls	r0, r1, #24
   1bc80:	d523      	bpl.n	1bcca <_printf_i+0x8e>
   1bc82:	1d11      	adds	r1, r2, #4
   1bc84:	6019      	str	r1, [r3, #0]
   1bc86:	6815      	ldr	r5, [r2, #0]
   1bc88:	e025      	b.n	1bcd6 <_printf_i+0x9a>
   1bc8a:	2a73      	cmp	r2, #115	; 0x73
   1bc8c:	d100      	bne.n	1bc90 <_printf_i+0x54>
   1bc8e:	e088      	b.n	1bda2 <_printf_i+0x166>
   1bc90:	d808      	bhi.n	1bca4 <_printf_i+0x68>
   1bc92:	2a6f      	cmp	r2, #111	; 0x6f
   1bc94:	d029      	beq.n	1bcea <_printf_i+0xae>
   1bc96:	2a70      	cmp	r2, #112	; 0x70
   1bc98:	d1e7      	bne.n	1bc6a <_printf_i+0x2e>
   1bc9a:	2220      	movs	r2, #32
   1bc9c:	6809      	ldr	r1, [r1, #0]
   1bc9e:	430a      	orrs	r2, r1
   1bca0:	6022      	str	r2, [r4, #0]
   1bca2:	e003      	b.n	1bcac <_printf_i+0x70>
   1bca4:	2a75      	cmp	r2, #117	; 0x75
   1bca6:	d020      	beq.n	1bcea <_printf_i+0xae>
   1bca8:	2a78      	cmp	r2, #120	; 0x78
   1bcaa:	d1de      	bne.n	1bc6a <_printf_i+0x2e>
   1bcac:	0022      	movs	r2, r4
   1bcae:	2178      	movs	r1, #120	; 0x78
   1bcb0:	3245      	adds	r2, #69	; 0x45
   1bcb2:	7011      	strb	r1, [r2, #0]
   1bcb4:	4a6c      	ldr	r2, [pc, #432]	; (1be68 <_printf_i+0x22c>)
   1bcb6:	e030      	b.n	1bd1a <_printf_i+0xde>
   1bcb8:	000e      	movs	r6, r1
   1bcba:	681a      	ldr	r2, [r3, #0]
   1bcbc:	3642      	adds	r6, #66	; 0x42
   1bcbe:	1d11      	adds	r1, r2, #4
   1bcc0:	6019      	str	r1, [r3, #0]
   1bcc2:	6813      	ldr	r3, [r2, #0]
   1bcc4:	7033      	strb	r3, [r6, #0]
   1bcc6:	2301      	movs	r3, #1
   1bcc8:	e079      	b.n	1bdbe <_printf_i+0x182>
   1bcca:	0649      	lsls	r1, r1, #25
   1bccc:	d5d9      	bpl.n	1bc82 <_printf_i+0x46>
   1bcce:	1d11      	adds	r1, r2, #4
   1bcd0:	6019      	str	r1, [r3, #0]
   1bcd2:	2300      	movs	r3, #0
   1bcd4:	5ed5      	ldrsh	r5, [r2, r3]
   1bcd6:	2d00      	cmp	r5, #0
   1bcd8:	da03      	bge.n	1bce2 <_printf_i+0xa6>
   1bcda:	232d      	movs	r3, #45	; 0x2d
   1bcdc:	9a04      	ldr	r2, [sp, #16]
   1bcde:	426d      	negs	r5, r5
   1bce0:	7013      	strb	r3, [r2, #0]
   1bce2:	4b62      	ldr	r3, [pc, #392]	; (1be6c <_printf_i+0x230>)
   1bce4:	270a      	movs	r7, #10
   1bce6:	9303      	str	r3, [sp, #12]
   1bce8:	e02f      	b.n	1bd4a <_printf_i+0x10e>
   1bcea:	6820      	ldr	r0, [r4, #0]
   1bcec:	6819      	ldr	r1, [r3, #0]
   1bcee:	0605      	lsls	r5, r0, #24
   1bcf0:	d503      	bpl.n	1bcfa <_printf_i+0xbe>
   1bcf2:	1d08      	adds	r0, r1, #4
   1bcf4:	6018      	str	r0, [r3, #0]
   1bcf6:	680d      	ldr	r5, [r1, #0]
   1bcf8:	e005      	b.n	1bd06 <_printf_i+0xca>
   1bcfa:	0640      	lsls	r0, r0, #25
   1bcfc:	d5f9      	bpl.n	1bcf2 <_printf_i+0xb6>
   1bcfe:	680d      	ldr	r5, [r1, #0]
   1bd00:	1d08      	adds	r0, r1, #4
   1bd02:	6018      	str	r0, [r3, #0]
   1bd04:	b2ad      	uxth	r5, r5
   1bd06:	4b59      	ldr	r3, [pc, #356]	; (1be6c <_printf_i+0x230>)
   1bd08:	2708      	movs	r7, #8
   1bd0a:	9303      	str	r3, [sp, #12]
   1bd0c:	2a6f      	cmp	r2, #111	; 0x6f
   1bd0e:	d018      	beq.n	1bd42 <_printf_i+0x106>
   1bd10:	270a      	movs	r7, #10
   1bd12:	e016      	b.n	1bd42 <_printf_i+0x106>
   1bd14:	3145      	adds	r1, #69	; 0x45
   1bd16:	700a      	strb	r2, [r1, #0]
   1bd18:	4a54      	ldr	r2, [pc, #336]	; (1be6c <_printf_i+0x230>)
   1bd1a:	9203      	str	r2, [sp, #12]
   1bd1c:	681a      	ldr	r2, [r3, #0]
   1bd1e:	6821      	ldr	r1, [r4, #0]
   1bd20:	1d10      	adds	r0, r2, #4
   1bd22:	6018      	str	r0, [r3, #0]
   1bd24:	6815      	ldr	r5, [r2, #0]
   1bd26:	0608      	lsls	r0, r1, #24
   1bd28:	d522      	bpl.n	1bd70 <_printf_i+0x134>
   1bd2a:	07cb      	lsls	r3, r1, #31
   1bd2c:	d502      	bpl.n	1bd34 <_printf_i+0xf8>
   1bd2e:	2320      	movs	r3, #32
   1bd30:	4319      	orrs	r1, r3
   1bd32:	6021      	str	r1, [r4, #0]
   1bd34:	2710      	movs	r7, #16
   1bd36:	2d00      	cmp	r5, #0
   1bd38:	d103      	bne.n	1bd42 <_printf_i+0x106>
   1bd3a:	2320      	movs	r3, #32
   1bd3c:	6822      	ldr	r2, [r4, #0]
   1bd3e:	439a      	bics	r2, r3
   1bd40:	6022      	str	r2, [r4, #0]
   1bd42:	0023      	movs	r3, r4
   1bd44:	2200      	movs	r2, #0
   1bd46:	3343      	adds	r3, #67	; 0x43
   1bd48:	701a      	strb	r2, [r3, #0]
   1bd4a:	6863      	ldr	r3, [r4, #4]
   1bd4c:	60a3      	str	r3, [r4, #8]
   1bd4e:	2b00      	cmp	r3, #0
   1bd50:	db5c      	blt.n	1be0c <_printf_i+0x1d0>
   1bd52:	2204      	movs	r2, #4
   1bd54:	6821      	ldr	r1, [r4, #0]
   1bd56:	4391      	bics	r1, r2
   1bd58:	6021      	str	r1, [r4, #0]
   1bd5a:	2d00      	cmp	r5, #0
   1bd5c:	d158      	bne.n	1be10 <_printf_i+0x1d4>
   1bd5e:	9e04      	ldr	r6, [sp, #16]
   1bd60:	2b00      	cmp	r3, #0
   1bd62:	d064      	beq.n	1be2e <_printf_i+0x1f2>
   1bd64:	0026      	movs	r6, r4
   1bd66:	9b03      	ldr	r3, [sp, #12]
   1bd68:	3642      	adds	r6, #66	; 0x42
   1bd6a:	781b      	ldrb	r3, [r3, #0]
   1bd6c:	7033      	strb	r3, [r6, #0]
   1bd6e:	e05e      	b.n	1be2e <_printf_i+0x1f2>
   1bd70:	0648      	lsls	r0, r1, #25
   1bd72:	d5da      	bpl.n	1bd2a <_printf_i+0xee>
   1bd74:	b2ad      	uxth	r5, r5
   1bd76:	e7d8      	b.n	1bd2a <_printf_i+0xee>
   1bd78:	6809      	ldr	r1, [r1, #0]
   1bd7a:	681a      	ldr	r2, [r3, #0]
   1bd7c:	0608      	lsls	r0, r1, #24
   1bd7e:	d505      	bpl.n	1bd8c <_printf_i+0x150>
   1bd80:	1d11      	adds	r1, r2, #4
   1bd82:	6019      	str	r1, [r3, #0]
   1bd84:	6813      	ldr	r3, [r2, #0]
   1bd86:	6962      	ldr	r2, [r4, #20]
   1bd88:	601a      	str	r2, [r3, #0]
   1bd8a:	e006      	b.n	1bd9a <_printf_i+0x15e>
   1bd8c:	0649      	lsls	r1, r1, #25
   1bd8e:	d5f7      	bpl.n	1bd80 <_printf_i+0x144>
   1bd90:	1d11      	adds	r1, r2, #4
   1bd92:	6019      	str	r1, [r3, #0]
   1bd94:	6813      	ldr	r3, [r2, #0]
   1bd96:	8aa2      	ldrh	r2, [r4, #20]
   1bd98:	801a      	strh	r2, [r3, #0]
   1bd9a:	2300      	movs	r3, #0
   1bd9c:	9e04      	ldr	r6, [sp, #16]
   1bd9e:	6123      	str	r3, [r4, #16]
   1bda0:	e054      	b.n	1be4c <_printf_i+0x210>
   1bda2:	681a      	ldr	r2, [r3, #0]
   1bda4:	1d11      	adds	r1, r2, #4
   1bda6:	6019      	str	r1, [r3, #0]
   1bda8:	6816      	ldr	r6, [r2, #0]
   1bdaa:	2100      	movs	r1, #0
   1bdac:	6862      	ldr	r2, [r4, #4]
   1bdae:	0030      	movs	r0, r6
   1bdb0:	f000 f86a 	bl	1be88 <memchr>
   1bdb4:	2800      	cmp	r0, #0
   1bdb6:	d001      	beq.n	1bdbc <_printf_i+0x180>
   1bdb8:	1b80      	subs	r0, r0, r6
   1bdba:	6060      	str	r0, [r4, #4]
   1bdbc:	6863      	ldr	r3, [r4, #4]
   1bdbe:	6123      	str	r3, [r4, #16]
   1bdc0:	2300      	movs	r3, #0
   1bdc2:	9a04      	ldr	r2, [sp, #16]
   1bdc4:	7013      	strb	r3, [r2, #0]
   1bdc6:	e041      	b.n	1be4c <_printf_i+0x210>
   1bdc8:	6923      	ldr	r3, [r4, #16]
   1bdca:	0032      	movs	r2, r6
   1bdcc:	9906      	ldr	r1, [sp, #24]
   1bdce:	9805      	ldr	r0, [sp, #20]
   1bdd0:	9d07      	ldr	r5, [sp, #28]
   1bdd2:	47a8      	blx	r5
   1bdd4:	1c43      	adds	r3, r0, #1
   1bdd6:	d043      	beq.n	1be60 <_printf_i+0x224>
   1bdd8:	6823      	ldr	r3, [r4, #0]
   1bdda:	2500      	movs	r5, #0
   1bddc:	079b      	lsls	r3, r3, #30
   1bdde:	d40f      	bmi.n	1be00 <_printf_i+0x1c4>
   1bde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bde2:	68e0      	ldr	r0, [r4, #12]
   1bde4:	4298      	cmp	r0, r3
   1bde6:	da3d      	bge.n	1be64 <_printf_i+0x228>
   1bde8:	0018      	movs	r0, r3
   1bdea:	e03b      	b.n	1be64 <_printf_i+0x228>
   1bdec:	0022      	movs	r2, r4
   1bdee:	2301      	movs	r3, #1
   1bdf0:	3219      	adds	r2, #25
   1bdf2:	9906      	ldr	r1, [sp, #24]
   1bdf4:	9805      	ldr	r0, [sp, #20]
   1bdf6:	9e07      	ldr	r6, [sp, #28]
   1bdf8:	47b0      	blx	r6
   1bdfa:	1c43      	adds	r3, r0, #1
   1bdfc:	d030      	beq.n	1be60 <_printf_i+0x224>
   1bdfe:	3501      	adds	r5, #1
   1be00:	68e3      	ldr	r3, [r4, #12]
   1be02:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1be04:	1a9b      	subs	r3, r3, r2
   1be06:	429d      	cmp	r5, r3
   1be08:	dbf0      	blt.n	1bdec <_printf_i+0x1b0>
   1be0a:	e7e9      	b.n	1bde0 <_printf_i+0x1a4>
   1be0c:	2d00      	cmp	r5, #0
   1be0e:	d0a9      	beq.n	1bd64 <_printf_i+0x128>
   1be10:	9e04      	ldr	r6, [sp, #16]
   1be12:	0028      	movs	r0, r5
   1be14:	0039      	movs	r1, r7
   1be16:	f7fd f88b 	bl	18f30 <__aeabi_uidivmod>
   1be1a:	9b03      	ldr	r3, [sp, #12]
   1be1c:	3e01      	subs	r6, #1
   1be1e:	5c5b      	ldrb	r3, [r3, r1]
   1be20:	0028      	movs	r0, r5
   1be22:	7033      	strb	r3, [r6, #0]
   1be24:	0039      	movs	r1, r7
   1be26:	f7fc fffd 	bl	18e24 <__udivsi3>
   1be2a:	1e05      	subs	r5, r0, #0
   1be2c:	d1f1      	bne.n	1be12 <_printf_i+0x1d6>
   1be2e:	2f08      	cmp	r7, #8
   1be30:	d109      	bne.n	1be46 <_printf_i+0x20a>
   1be32:	6823      	ldr	r3, [r4, #0]
   1be34:	07db      	lsls	r3, r3, #31
   1be36:	d506      	bpl.n	1be46 <_printf_i+0x20a>
   1be38:	6863      	ldr	r3, [r4, #4]
   1be3a:	6922      	ldr	r2, [r4, #16]
   1be3c:	4293      	cmp	r3, r2
   1be3e:	dc02      	bgt.n	1be46 <_printf_i+0x20a>
   1be40:	2330      	movs	r3, #48	; 0x30
   1be42:	3e01      	subs	r6, #1
   1be44:	7033      	strb	r3, [r6, #0]
   1be46:	9b04      	ldr	r3, [sp, #16]
   1be48:	1b9b      	subs	r3, r3, r6
   1be4a:	6123      	str	r3, [r4, #16]
   1be4c:	9b07      	ldr	r3, [sp, #28]
   1be4e:	aa09      	add	r2, sp, #36	; 0x24
   1be50:	9300      	str	r3, [sp, #0]
   1be52:	0021      	movs	r1, r4
   1be54:	9b06      	ldr	r3, [sp, #24]
   1be56:	9805      	ldr	r0, [sp, #20]
   1be58:	f7ff fe82 	bl	1bb60 <_printf_common>
   1be5c:	1c43      	adds	r3, r0, #1
   1be5e:	d1b3      	bne.n	1bdc8 <_printf_i+0x18c>
   1be60:	2001      	movs	r0, #1
   1be62:	4240      	negs	r0, r0
   1be64:	b00b      	add	sp, #44	; 0x2c
   1be66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1be68:	0001d2a6 	.word	0x0001d2a6
   1be6c:	0001d295 	.word	0x0001d295

0001be70 <__ascii_wctomb>:
   1be70:	1e0b      	subs	r3, r1, #0
   1be72:	d004      	beq.n	1be7e <__ascii_wctomb+0xe>
   1be74:	2aff      	cmp	r2, #255	; 0xff
   1be76:	d904      	bls.n	1be82 <__ascii_wctomb+0x12>
   1be78:	238a      	movs	r3, #138	; 0x8a
   1be7a:	6003      	str	r3, [r0, #0]
   1be7c:	3b8b      	subs	r3, #139	; 0x8b
   1be7e:	0018      	movs	r0, r3
   1be80:	4770      	bx	lr
   1be82:	700a      	strb	r2, [r1, #0]
   1be84:	2301      	movs	r3, #1
   1be86:	e7fa      	b.n	1be7e <__ascii_wctomb+0xe>

0001be88 <memchr>:
   1be88:	b2c9      	uxtb	r1, r1
   1be8a:	1882      	adds	r2, r0, r2
   1be8c:	4290      	cmp	r0, r2
   1be8e:	d101      	bne.n	1be94 <memchr+0xc>
   1be90:	2000      	movs	r0, #0
   1be92:	4770      	bx	lr
   1be94:	7803      	ldrb	r3, [r0, #0]
   1be96:	428b      	cmp	r3, r1
   1be98:	d0fb      	beq.n	1be92 <memchr+0xa>
   1be9a:	3001      	adds	r0, #1
   1be9c:	e7f6      	b.n	1be8c <memchr+0x4>

0001be9e <_realloc_r>:
   1be9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bea0:	0007      	movs	r7, r0
   1bea2:	000d      	movs	r5, r1
   1bea4:	0016      	movs	r6, r2
   1bea6:	2900      	cmp	r1, #0
   1bea8:	d105      	bne.n	1beb6 <_realloc_r+0x18>
   1beaa:	0011      	movs	r1, r2
   1beac:	f7ff fb82 	bl	1b5b4 <_malloc_r>
   1beb0:	0004      	movs	r4, r0
   1beb2:	0020      	movs	r0, r4
   1beb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1beb6:	2a00      	cmp	r2, #0
   1beb8:	d103      	bne.n	1bec2 <_realloc_r+0x24>
   1beba:	f7ff fb31 	bl	1b520 <_free_r>
   1bebe:	0034      	movs	r4, r6
   1bec0:	e7f7      	b.n	1beb2 <_realloc_r+0x14>
   1bec2:	f000 f812 	bl	1beea <_malloc_usable_size_r>
   1bec6:	002c      	movs	r4, r5
   1bec8:	4286      	cmp	r6, r0
   1beca:	d9f2      	bls.n	1beb2 <_realloc_r+0x14>
   1becc:	0031      	movs	r1, r6
   1bece:	0038      	movs	r0, r7
   1bed0:	f7ff fb70 	bl	1b5b4 <_malloc_r>
   1bed4:	1e04      	subs	r4, r0, #0
   1bed6:	d0ec      	beq.n	1beb2 <_realloc_r+0x14>
   1bed8:	0029      	movs	r1, r5
   1beda:	0032      	movs	r2, r6
   1bedc:	f7ff fafc 	bl	1b4d8 <memcpy>
   1bee0:	0029      	movs	r1, r5
   1bee2:	0038      	movs	r0, r7
   1bee4:	f7ff fb1c 	bl	1b520 <_free_r>
   1bee8:	e7e3      	b.n	1beb2 <_realloc_r+0x14>

0001beea <_malloc_usable_size_r>:
   1beea:	1f0b      	subs	r3, r1, #4
   1beec:	681b      	ldr	r3, [r3, #0]
   1beee:	1f18      	subs	r0, r3, #4
   1bef0:	2b00      	cmp	r3, #0
   1bef2:	da01      	bge.n	1bef8 <_malloc_usable_size_r+0xe>
   1bef4:	580b      	ldr	r3, [r1, r0]
   1bef6:	18c0      	adds	r0, r0, r3
   1bef8:	4770      	bx	lr
   1befa:	2008      	.short	0x2008
   1befc:	0008      	.short	0x0008
   1befe:	6f47      	.short	0x6f47
   1bf00:	6d6f4320 	.word	0x6d6f4320
   1bf04:	646e616d 	.word	0x646e616d
   1bf08:	6e655320 	.word	0x6e655320
   1bf0c:	000a0d74 	.word	0x000a0d74
   1bf10:	203a7841 	.word	0x203a7841
   1bf14:	202c6425 	.word	0x202c6425
   1bf18:	203a7941 	.word	0x203a7941
   1bf1c:	202c6425 	.word	0x202c6425
   1bf20:	203a7a41 	.word	0x203a7a41
   1bf24:	0a0d6425 	.word	0x0a0d6425
   1bf28:	00          	.byte	0x00
   1bf29:	4c          	.byte	0x4c
   1bf2a:	6665      	.short	0x6665
   1bf2c:	25203a74 	.word	0x25203a74
   1bf30:	52202c64 	.word	0x52202c64
   1bf34:	74686769 	.word	0x74686769
   1bf38:	6425203a 	.word	0x6425203a
   1bf3c:	0a0d      	.short	0x0a0d
   1bf3e:	00          	.byte	0x00
   1bf3f:	4c          	.byte	0x4c
   1bf40:	43204445 	.word	0x43204445
   1bf44:	616d6d6f 	.word	0x616d6d6f
   1bf48:	7320646e 	.word	0x7320646e
   1bf4c:	0d746e65 	.word	0x0d746e65
   1bf50:	000a      	.short	0x000a
   1bf52:	6954      	.short	0x6954
   1bf54:	20736b63 	.word	0x20736b63
   1bf58:	636e6973 	.word	0x636e6973
   1bf5c:	74732065 	.word	0x74732065
   1bf60:	3a747261 	.word	0x3a747261
   1bf64:	756c2520 	.word	0x756c2520
   1bf68:	0a0d      	.short	0x0a0d
   1bf6a:	00          	.byte	0x00
   1bf6b:	30          	.byte	0x30
   1bf6c:	312e302e 	.word	0x312e302e
   1bf70:	72694600 	.word	0x72694600
   1bf74:	7261776d 	.word	0x7261776d
   1bf78:	65562065 	.word	0x65562065
   1bf7c:	6f697372 	.word	0x6f697372
   1bf80:	25203a6e 	.word	0x25203a6e
   1bf84:	000a0d73 	.word	0x000a0d73
   1bf88:	31202030 	.word	0x31202030
   1bf8c:	20322020 	.word	0x20322020
   1bf90:	20203320 	.word	0x20203320
   1bf94:	35202034 	.word	0x35202034
   1bf98:	20362020 	.word	0x20362020
   1bf9c:	20203720 	.word	0x20203720
   1bfa0:	39202038 	.word	0x39202038
   1bfa4:	20612020 	.word	0x20612020
   1bfa8:	20206220 	.word	0x20206220
   1bfac:	64202063 	.word	0x64202063
   1bfb0:	20652020 	.word	0x20652020
   1bfb4:	0a0d6620 	.word	0x0a0d6620
   1bfb8:	32302500 	.word	0x32302500
   1bfbc:	00203a78 	.word	0x00203a78
   1bfc0:	2058      	.short	0x2058
	...

0001bfc3 <pcWelcomeMessage>:
   1bfc3:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   1bfd3:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   1bfe3:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   1bff3:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   1c003:	000a 6c63 0073 6c63 3a73 4320 656c 7261     ..cls.cls: Clear
   1c013:	2073 6874 2065 6574 6d72 6e69 6c61 7320     s the terminal s
   1c023:	7263 6565 0d6e 000a 7269 6900 3a72 4420     creen...ir.ir: D
   1c033:	7465 6365 2074 624f 656a 7463 0a0d 6c00     etect Object...l
   1c043:	6465 6c00 6465 203a 6553 2074 454c 2044     ed.led: Set LED 
   1c053:	7453 6972 2070 6f63 6f6c 0d72 000a 6168     Strip color...ha
   1c063:	7470 6369 6800 7061 6974 3a63 5620 6269     ptic.haptic: Vib
   1c073:	6172 6574 4d20 746f 726f 202e 0a0d 6900     rate Motor. ...i
   1c083:	756d 6900 756d 203a 7250 6e69 7374 3120     mu.imu: Prints 1
   1c093:	3030 2030 6173 706d 656c 2073 666f 6120     000 samples of a
   1c0a3:	6363 6c65 7265 7461 6f69 2e6e 0d20 000a     cceleration. ...
   1c0b3:	6974 6b63 0073 6974 6b63 3a73 5020 6972     ticks.ticks: Pri
   1c0c3:	746e 2073 6874 2065 756e 626d 7265 6f20     nts the number o
   1c0d3:	2066 6974 6b63 2073 6973 636e 2065 6874     f ticks since th
   1c0e3:	2065 6373 6568 7564 656c 2072 7473 7261     e scheduler star
   1c0f3:	6574 2e64 0a0d 7600 7265 6973 6e6f 7600     ted....version.v
   1c103:	7265 6973 6e6f 203a 7250 6e69 7374 7420     ersion: Prints t
   1c113:	6568 6620 7269 776d 7261 2065 6576 7372     he firmware vers
   1c123:	6f69 2e6e 0a0d 6900 6332 6900 6332 203a     ion....i2c.i2c: 
   1c133:	6353 6e61 2073 3249 2043 7562 0d73 000a     Scans I2C bus...
   1c143:	6572 6573 0074 6572 6573 3a74 5220 7365     reset.reset: Res
   1c153:	7465 2073 6874 2065 6564 6976 6563 0a0d     ets the device..
   1c163:	6600 0077 7766 203a 6f44 6e77 6f6c 6461     .fw.fw: Download
   1c173:	6120 6620 6c69 2065 6e61 2064 6570 6672      a file and perf
   1c183:	726f 206d 6e61 4620 2057 7075 6164 6574     orm an FW update
   1c193:	0a0d 4300 756f 646c 6e20 746f 6120 6c6c     ...Could not all
   1c1a3:	636f 7461 2065 6573 616d 6870 726f 0d65     ocate semaphore.
   1c1b3:	000a 616f 2500 5b63 4b32 3e0d 0500               ..oa.%c[2K.>.

0001c1c0 <xClearScreen>:
   1c1c0:	c005 0001 c009 0001 2711 0001 0000 0000     .........'......
   1c1d0:	6325 325b 004a 0000                         %c[2J...

0001c1d8 <xGetHapticCommand>:
   1c1d8:	c061 0001 c068 0001 2911 0001 0000 0000     a...h....)......

0001c1e8 <xGetIMUDataCommand>:
   1c1e8:	c082 0001 c086 0001 286d 0001 0000 0000     ........m(......

0001c1f8 <xI2cScan>:
   1c1f8:	c12a 0001 c12e 0001 27b5 0001 0000 0000     *........'......

0001c208 <xOTAUCommand>:
   1c208:	c164 0001 c167 0001 2759 0001 0000 0000     d...g...Y'......

0001c218 <xResetCommand>:
   1c218:	c143 0001 c149 0001 29c5 0001 0000 0000     C...I....)......

0001c228 <xSetIRSensorCommand>:
   1c228:	c02b 0001 c02e 0001 2995 0001 0000 0000     +........)......

0001c238 <xSetLEDCommand>:
   1c238:	c042 0001 c046 0001 293d 0001 0000 0000     B...F...=)......

0001c248 <xTicksCommand>:
   1c248:	c0b3 0001 c0b9 0001 278d 0001 0000 0000     .........'......

0001c258 <xVersionCommand>:
   1c258:	c0fa 0001 c102 0001 273d 0001 0000 0000     ........='......
   1c268:	6e49 6f63 7272 6365 2074 6f63 6d6d 6e61     Incorrect comman
   1c278:	2064 6170 6172 656d 6574 2872 2973 202e     d parameter(s). 
   1c288:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
   1c298:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   1c2a8:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   1c2b8:	7364 0d2e 0d0a 000a 6f43 6d6d 6e61 2064     ds......Command 
   1c2c8:	6f6e 2074 6572 6f63 6e67 7369 6465 202e     not recognised. 
   1c2d8:	4520 746e 7265 2720 6568 706c 2027 6f74      Enter 'help' to
   1c2e8:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   1c2f8:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   1c308:	7364 0d2e 0d0a 000a 6568 706c 0d00 680a     ds......help...h
   1c318:	6c65 3a70 0a0d 4c20 7369 7374 6120 6c6c     elp:.. Lists all
   1c328:	7420 6568 7220 6765 7369 6574 6572 2064      the registered 
   1c338:	6f63 6d6d 6e61 7364 0a0d 0a0d 0000 0000     commands........

0001c348 <xHelpCommand>:
   1c348:	c310 0001 c315 0001 3e31 0001 0000 0000     ........1>......

0001c358 <CSWTCH.27>:
   1c358:	c3aa 0001 c3f4 0001 c446 0001 c490 0001     ........F.......
   1c368:	c4d8 0001 c51e 0001 c568 0001 c5bc 0001     ........h.......
   1c378:	c614 0001 7370 547a 6172 6563 6547 4574     ....pszTraceGetE
   1c388:	7272 726f 6148 646e 656c 3a73 4920 766e     rrorHandles: Inv
   1c398:	6c61 6469 6f20 6a62 6365 6374 616c 7373     alid objectclass
   1c3a8:	0021 6f4e 2074 6e65 756f 6867 5120 4555     !.Not enough QUE
   1c3b8:	4555 6820 6e61 6c64 7365 2d20 6920 636e     UE handles - inc
   1c3c8:	6572 7361 2065 5254 5f43 4643 5f47 514e     rease TRC_CFG_NQ
   1c3d8:	4555 4555 6920 206e 7274 5363 616e 7370     UEUE in trcSnaps
   1c3e8:	6f68 4374 6e6f 6966 2e67 0068 6f4e 2074     hotConfig.h.Not 
   1c3f8:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   1c408:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   1c418:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   1c428:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   1c438:	7370 6f68 4374 6e6f 6966 2e67 0068 6f4e     pshotConfig.h.No
   1c448:	2074 6e65 756f 6867 4d20 5455 5845 6820     t enough MUTEX h
   1c458:	6e61 6c64 7365 2d20 6920 636e 6572 7361     andles - increas
   1c468:	2065 5254 5f43 4643 5f47 4d4e 5455 5845     e TRC_CFG_NMUTEX
   1c478:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   1c488:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   1c498:	6867 5420 5341 204b 6168 646e 656c 2073     gh TASK handles 
   1c4a8:	202d 6e69 7263 6165 6573 5420 4352 435f     - increase TRC_C
   1c4b8:	4746 4e5f 4154 4b53 6920 206e 7274 5363     FG_NTASK in trcS
   1c4c8:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   1c4d8:	6f4e 2074 6e65 756f 6867 4920 5253 6820     Not enough ISR h
   1c4e8:	6e61 6c64 7365 2d20 6920 636e 6572 7361     andles - increas
   1c4f8:	2065 5254 5f43 4643 5f47 494e 5253 6920     e TRC_CFG_NISR i
   1c508:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   1c518:	6966 2e67 0068 6f4e 2074 6e65 756f 6867     fig.h.Not enough
   1c528:	5420 4d49 5245 6820 6e61 6c64 7365 2d20      TIMER handles -
   1c538:	6920 636e 6572 7361 2065 5254 5f43 4643      increase TRC_CF
   1c548:	5f47 544e 4d49 5245 6920 206e 7274 5363     G_NTIMER in trcS
   1c558:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   1c568:	6f4e 2074 6e65 756f 6867 4520 4556 544e     Not enough EVENT
   1c578:	5247 554f 2050 6168 646e 656c 2073 202d     GROUP handles - 
   1c588:	6e69 7263 6165 6573 5420 4352 435f 4746     increase TRC_CFG
   1c598:	4e5f 5645 4e45 4754 4f52 5055 6920 206e     _NEVENTGROUP in 
   1c5a8:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   1c5b8:	2e67 0068 6f4e 2074 6e65 756f 6867 5320     g.h.Not enough S
   1c5c8:	5254 4145 424d 4655 4546 2052 6168 646e     TREAMBUFFER hand
   1c5d8:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   1c5e8:	4352 435f 4746 4e5f 5453 4552 4d41 5542     RC_CFG_NSTREAMBU
   1c5f8:	4646 5245 6920 206e 7274 5363 616e 7370     FFER in trcSnaps
   1c608:	6f68 4374 6e6f 6966 2e67 0068 6f4e 2074     hotConfig.h.Not 
   1c618:	6e65 756f 6867 4d20 5345 4153 4547 5542     enough MESSAGEBU
   1c628:	4646 5245 6820 6e61 6c64 7365 2d20 6920     FFER handles - i
   1c638:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   1c648:	4d4e 5345 4153 4547 5542 4646 5245 6920     NMESSAGEBUFFER i
   1c658:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   1c668:	6966 2e67 0068 5476 6172 6563 6e45 6261     fig.h.vTraceEnab
   1c678:	656c 5428 4352 535f 4154 5452 415f 4157     le(TRC_START_AWA
   1c688:	5449 485f 534f 2954 6e20 746f 6120 6c6c     IT_HOST) not all
   1c698:	776f 6465 6920 206e 6e53 7061 6873 746f     owed in Snapshot
   1c6a8:	6d20 646f 0065 6e55 7865 6570 7463 6465      mode.Unexpected
   1c6b8:	6120 6772 6d75 6e65 2074 6f74 7620 7254      argument to vTr
   1c6c8:	6361 4565 616e 6c62 2065 7328 616e 7370     aceEnable (snaps
   1c6d8:	6f68 2074 6f6d 6564 0029 7a54 7443 6c72     hot mode).TzCtrl
   1c6e8:	5400 4152 4543 415f 5353 5245 3a54 7020     .TRACE_ASSERT: p
   1c6f8:	7672 6843 6365 446b 7461 5461 426f 4f65     rvCheckDataToBeO
   1c708:	6576 7772 6972 7474 6e65 6f46 4d72 6c75     verwrittenForMul
   1c718:	6974 6e45 7274 4579 6576 746e 3a73 6e20     tiEntryEvents: n
   1c728:	666f 6e45 7274 6569 5473 436f 6568 6b63     ofEntriesToCheck
   1c738:	3d20 203d 0030 5254 4341 5f45 5341 4553      == 0.TRACE_ASSE
   1c748:	5452 203a 7270 5476 6172 6563 6547 4474     RT: prvTraceGetD
   1c758:	5354 203a 6e49 6176 696c 2064 6176 756c     TS: Invalid valu
   1c768:	2065 6f66 2072 6170 6172 5f6d 616d 4478     e for param_maxD
   1c778:	5354 4200 6461 7020 7261 6d61 6d5f 7861     TS.Bad param_max
   1c788:	5444 2053 6e69 7020 7672 7254 6361 4765     DTS in prvTraceG
   1c798:	7465 5444 0053 5254 4341 5f45 5341 4553     etDTS.TRACE_ASSE
   1c7a8:	5452 203a 7270 5476 6172 6563 6547 4f74     RT: prvTraceGetO
   1c7b8:	6a62 6365 4874 6e61 6c64 3a65 4920 766e     bjectHandle: Inv
   1c7c8:	6c61 6469 7620 6c61 6575 6620 726f 6f20     alid value for o
   1c7d8:	6a62 6365 6374 616c 7373 5400 4152 4543     bjectclass.TRACE
   1c7e8:	415f 5353 5245 3a54 7020 7672 7254 6361     _ASSERT: prvTrac
   1c7f8:	4765 7465 7250 6f69 6972 7974 7250 706f     eGetPriorityProp
   1c808:	7265 7974 203a 626f 656a 7463 6c63 7361     erty: objectclas
   1c818:	2073 3d3e 5420 4152 4543 4e5f 4c43 5341     s >= TRACE_NCLAS
   1c828:	4553 0053 5254 4341 5f45 5341 4553 5452     SES.TRACE_ASSERT
   1c838:	203a 7270 5476 6172 6563 6547 5074 6972     : prvTraceGetPri
   1c848:	726f 7469 5079 6f72 6570 7472 3a79 4920     orityProperty: I
   1c858:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   1c868:	6920 0064 7254 6361 2065 6552 6f63 6472      id.Trace Record
   1c878:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   1c888:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   1c898:	6520 6576 746e 6220 6675 6566 2172 5400      event buffer!.T
   1c8a8:	4152 4543 415f 5353 5245 3a54 7020 7672     RACE_ASSERT: prv
   1c8b8:	7254 6361 5365 7465 624f 656a 7463 614e     TraceSetObjectNa
   1c8c8:	656d 203a 616e 656d 3d20 203d 554e 4c4c     me: name == NULL
   1c8d8:	4900 6c6c 6765 6c61 6f20 6a62 6365 2074     .Illegal object 
   1c8e8:	6c63 7361 2073 6e69 7020 7672 7254 6361     class in prvTrac
   1c8f8:	5365 7465 624f 656a 7463 614e 656d 4900     eSetObjectName.I
   1c908:	6c6c 6765 6c61 6820 6e61 6c64 2065 3028     llegal handle (0
   1c918:	2029 6e69 7020 7672 7254 6361 5365 7465     ) in prvTraceSet
   1c928:	624f 656a 7463 614e 656d 002e 5254 4341     ObjectName..TRAC
   1c938:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   1c948:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   1c958:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   1c968:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   1c978:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   1c988:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   1c998:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   1c9a8:	756c 2065 6f66 2072 6469 5400 4152 4543     lue for id.TRACE
   1c9b8:	415f 5353 5245 3a54 7020 7672 7254 6361     _ASSERT: prvTrac
   1c9c8:	5365 7465 7250 6f69 6972 7974 7250 706f     eSetPriorityProp
   1c9d8:	7265 7974 203a 626f 656a 7463 6c63 7361     erty: objectclas
   1c9e8:	2073 3d3e 5420 4152 4543 4e5f 4c43 5341     s >= TRACE_NCLAS
   1c9f8:	4553 0053 5254 4341 5f45 5341 4553 5452     SES.TRACE_ASSERT
   1ca08:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   1ca18:	726f 7469 5079 6f72 6570 7472 3a79 4920     orityProperty: I
   1ca28:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   1ca38:	6920 0064 5254 4341 5f45 5341 4553 5452      id.TRACE_ASSERT
   1ca48:	203a 7270 5476 6172 6563 6553 5474 7361     : prvTraceSetTas
   1ca58:	496b 736e 6174 636e 4665 6e69 7369 6568     kInstanceFinishe
   1ca68:	3a64 4920 766e 6c61 6469 7620 6c61 6575     d: Invalid value
   1ca78:	6620 726f 6820 6e61 6c64 0065 5254 4341      for handle.TRAC
   1ca88:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   1ca98:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   1caa8:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   1cab8:	5400 4152 4543 415f 5353 5245 3a54 7020     .TRACE_ASSERT: p
   1cac8:	7672 7254 6361 5365 6f74 6572 654b 6e72     rvTraceStoreKern
   1cad8:	6c65 6143 6c6c 203a 626f 656a 7463 6c43     elCall: objectCl
   1cae8:	7361 2073 3d3e 5420 4152 4543 4e5f 4c43     ass >= TRACE_NCL
   1caf8:	5341 4553 0053 5254 4341 5f45 5341 4553     ASSES.TRACE_ASSE
   1cb08:	5452 203a 7270 5476 6172 6563 7453 726f     RT: prvTraceStor
   1cb18:	4b65 7265 656e 436c 6c61 3a6c 4920 766e     eKernelCall: Inv
   1cb28:	6c61 6469 7620 6c61 6575 6620 726f 6f20     alid value for o
   1cb38:	6a62 6365 4e74 6d75 6562 0072 6552 6f63     bjectNumber.Reco
   1cb48:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   1cb58:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   1cb68:	6e69 2067 7973 6373 6c61 3f6c 2820 2932     ing syscall? (2)
   1cb78:	5400 4152 4543 415f 5353 5245 3a54 7020     .TRACE_ASSERT: p
   1cb88:	7672 7254 6361 5365 6f74 6572 654b 6e72     rvTraceStoreKern
   1cb98:	6c65 6143 6c6c 6957 6874 754e 656d 6972     elCallWithNumeri
   1cba8:	5063 7261 6d61 6e4f 796c 203a 6e49 6176     cParamOnly: Inva
   1cbb8:	696c 2064 6176 756c 2065 6f66 2072 7665     lid value for ev
   1cbc8:	6374 646f 0065 6552 6f63 6472 7265 6220     tcode.Recorder b
   1cbd8:	7375 2079 202d 6968 6867 7020 6972 726f     usy - high prior
   1cbe8:	7469 2079 5349 2052 7375 6e69 2067 7973     ity ISR using sy
   1cbf8:	6373 6c61 3f6c 2820 2934 5400 4152 4543     scall? (4).TRACE
   1cc08:	415f 5353 5245 3a54 7020 7672 7254 6361     _ASSERT: prvTrac
   1cc18:	5365 6f74 6572 654b 6e72 6c65 6143 6c6c     eStoreKernelCall
   1cc28:	6957 6874 6150 6172 3a6d 6520 7476 6f63     WithParam: evtco
   1cc38:	6564 3e20 203d 7830 4646 5400 4152 4543     de >= 0xFF.TRACE
   1cc48:	415f 5353 5245 3a54 7020 7672 7254 6361     _ASSERT: prvTrac
   1cc58:	5365 6f74 6572 654b 6e72 6c65 6143 6c6c     eStoreKernelCall
   1cc68:	6957 6874 6150 6172 3a6d 6f20 6a62 6365     WithParam: objec
   1cc78:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   1cc88:	434e 414c 5353 5345 5400 4152 4543 415f     NCLASSES.TRACE_A
   1cc98:	5353 5245 3a54 7020 7672 7254 6361 5365     SSERT: prvTraceS
   1cca8:	6f74 6572 654b 6e72 6c65 6143 6c6c 6957     toreKernelCallWi
   1ccb8:	6874 6150 6172 3a6d 4920 766e 6c61 6469     thParam: Invalid
   1ccc8:	7620 6c61 6575 6620 726f 6f20 6a62 6365      value for objec
   1ccd8:	4e74 6d75 6562 0072 6552 6f63 6472 7265     tNumber.Recorder
   1cce8:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   1ccf8:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   1cd08:	7973 6373 6c61 3f6c 2820 2933 5400 4152     syscall? (3).TRA
   1cd18:	4543 415f 5353 5245 3a54 7020 7672 7254     CE_ASSERT: prvTr
   1cd28:	6361 5365 6f74 6572 6154 6b73 6552 6461     aceStoreTaskRead
   1cd38:	3a79 4920 766e 6c61 6469 7620 6c61 6575     y: Invalid value
   1cd48:	6620 726f 6820 6e61 6c64 0065 6552 6f63      for handle.Reco
   1cd58:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   1cd68:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   1cd78:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   1cd88:	5400 4152 4543 415f 5353 5245 3a54 7020     .TRACE_ASSERT: p
   1cd98:	7672 7254 6361 5365 6f74 6572 6154 6b73     rvTraceStoreTask
   1cda8:	7773 7469 6863 203a 6e49 6176 696c 2064     switch: Invalid 
   1cdb8:	6176 756c 2065 6f66 2072 6174 6b73 685f     value for task_h
   1cdc8:	6e61 6c64 0065 5254 4341 5f45 5341 4553     andle.TRACE_ASSE
   1cdd8:	5452 203a 7270 5476 6172 6563 6547 4f74     RT: prvTraceGetO
   1cde8:	6a62 6365 5374 6174 6574 203a 6e49 6176     bjectState: Inva
   1cdf8:	696c 2064 6176 756c 2065 6f66 2072 6469     lid value for id
   1ce08:	5400 4152 4543 415f 5353 5245 3a54 7520     .TRACE_ASSERT: u
   1ce18:	4969 646e 7865 664f 624f 656a 7463 203a     iIndexOfObject: 
   1ce28:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   1ce38:	2072 626f 656a 7463 6c63 7361 0073 5254     r objectclass.TR
   1ce48:	4341 5f45 5341 4553 5452 203a 6975 6e49     ACE_ASSERT: uiIn
   1ce58:	6564 4f78 4f66 6a62 6365 3a74 4920 766e     dexOfObject: Inv
   1ce68:	6c61 6469 7620 6c61 6575 6620 726f 6f20     alid value for o
   1ce78:	6a62 6365 6874 6e61 6c64 0065 5254 4341     bjecthandle.TRAC
   1ce88:	5f45 5341 4553 5452 203a 6552 6f63 6472     E_ASSERT: Record
   1ce98:	7265 6e20 746f 6920 696e 6974 6c61 7a69     er not initializ
   1cea8:	6465 202e 7355 2065 5476 6172 6563 6e45     ed. Use vTraceEn
   1ceb8:	6261 656c 2928 6920 736e 6574 6461 0021     able() instead!.
   1cec8:	7328 6174 7472 7075 0029 5254 4341 5f45     (startup).TRACE_
   1ced8:	5341 4553 5452 203a 5478 6172 6563 6552     ASSERT: xTraceRe
   1cee8:	6967 7473 7265 7453 6972 676e 203a 616c     gisterString: la
   1cef8:	6562 206c 3d3d 4e20 4c55 004c 5254 4341     bel == NULL.TRAC
   1cf08:	5f45 5341 4553 5452 203a 6552 6f63 6472     E_ASSERT: Record
   1cf18:	7265 6e20 746f 6920 696e 6974 6c61 7a69     er not initializ
   1cf28:	6465 202c 6163 6c6c 7620 7254 6361 4565     ed, call vTraceE
   1cf38:	616e 6c62 2865 2029 6966 7372 2174 4900     nable() first!.I
   1cf48:	4c44 0045 6d54 2072 7653 0063 0800 4200     DLE.Tmr Svc....B
   1cf58:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
   1cf68:	1c00 4200                                   ...B

0001cf6c <_tcc_intflag>:
   1cf6c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   1cf7c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   1cf8c:	0000 0001 0000 0002 0000 0004 0000 0008     ................
   1cf9c:	0a0d 0a0d 2d2d 2d2d 452d 4553 3135 2036     ....-----ESE516 
   1cfac:	614d 6e69 5020 6f72 7267 6d61 2d2d 2d2d     Main Program----
   1cfbc:	0d2d 000a 0a0d 0a0d 6e49 7469 6169 696c     -.......Initiali
   1cfcc:	657a 4820 2e57 2e2e 0a0d 4500 7272 726f     ze HW......Error
   1cfdc:	6920 696e 6974 6c61 7a69 6e69 2067 3249      initializing I2
   1cfec:	2043 7244 7669 7265 0d21 000a 6e49 7469     C Driver!...Init
   1cffc:	6169 696c 657a 2064 3249 2043 7244 7669     ialized I2C Driv
   1d00c:	7265 0d21 000a 6e49 7469 6169 696c 657a     er!...Initialize
   1d01c:	2064 454c 2044 7453 6972 2170 2121 0a0d     d LED Strip!!!..
   1d02c:	4900 696e 6974 6c61 7a69 6465 4920 2052     .Initialized IR 
   1d03c:	6553 736e 726f 2121 0d21 000a 6548 7061     Sensor!!!...Heap
   1d04c:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   1d05c:	7420 7361 736b 203a 6425 0a0d 4300 494c      tasks: %d...CLI
   1d06c:	545f 5341 004b 5245 3a52 4320 494c 7420     _TASK.ERR: CLI t
   1d07c:	7361 206b 6f63 6c75 2064 6f6e 2074 6562     ask could not be
   1d08c:	6920 696e 6974 6c61 7a69 6465 0d21 000a      initialized!...
   1d09c:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   1d0ac:	6e69 2067 4c43 3a49 2520 0d64 000a 454c     ing CLI: %d...LE
   1d0bc:	5f44 4154 4b53 4500 5252 203a 454c 2044     D_TASK.ERR: LED 
   1d0cc:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   1d0dc:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   1d0ec:	4800 6165 2070 6661 6574 2072 7473 7261     .Heap after star
   1d0fc:	6974 676e 4c20 4445 203a 6425 0a0d 4500     ting LED: %d...E
   1d10c:	7272 726f 6f20 206e 656d 6f6d 7972 6120     rror on memory a
   1d11c:	6c6c 636f 7461 6f69 206e 6e6f 4620 4552     llocation on FRE
   1d12c:	5245 4f54 2153 0a0d 4500 7272 726f 6f20     ERTOS!...Error o
   1d13c:	206e 7473 6361 206b 766f 7265 6c66 776f     n stack overflow
   1d14c:	6f20 206e 5246 4545 5452 534f 0d21 000a      on FREERTOS!...
   1d15c:	9360 0001 92b0 0001 92b0 0001 92ae 0001     `...............
   1d16c:	9352 0001 9352 0001 9348 0001 92ae 0001     R...R...H.......
   1d17c:	9352 0001 9348 0001 9352 0001 92ae 0001     R...H...R.......
   1d18c:	9358 0001 9358 0001 9358 0001 93e8 0001     X...X...X.......
   1d19c:	a0a4 0001 a086 0001 a040 0001 9f5e 0001     ........@...^...
   1d1ac:	a040 0001 a078 0001 a040 0001 9f5e 0001     @...x...@...^...
   1d1bc:	a086 0001 a086 0001 a078 0001 9f5e 0001     ........x...^...
   1d1cc:	9f56 0001 9f56 0001 9f56 0001 a2bc 0001     V...V...V.......
   1d1dc:	a904 0001 a7c4 0001 a7c4 0001 a7c0 0001     ................
   1d1ec:	a8dc 0001 a8dc 0001 a8ce 0001 a7c0 0001     ................
   1d1fc:	a8dc 0001 a8ce 0001 a8dc 0001 a7c0 0001     ................
   1d20c:	a8e4 0001 a8e4 0001 a8e4 0001 aae8 0001     ................

0001d21c <__sf_fake_stderr>:
	...

0001d23c <__sf_fake_stdin>:
	...

0001d25c <__sf_fake_stdout>:
	...
   1d27c:	0043 4f50 4953 0058 2d23 2b30 0020 6c68     C.POSIX.#-0+ .hl
   1d28c:	004c 6665 4567 4746 3000 3231 3433 3635     L.efgEFG.0123456
   1d29c:	3837 4139 4342 4544 0046 3130 3332 3534     789ABCDEF.012345
   1d2ac:	3736 3938 6261 6463 6665 0000                    6789abcdef.

0001d2b7 <_ctype_>:
   1d2b7:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   1d2c7:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1d2d7:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   1d2e7:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   1d2f7:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   1d307:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   1d317:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   1d327:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   1d337:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0001d3b8 <_init>:
   1d3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3ba:	46c0      	nop			; (mov r8, r8)
   1d3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1d3be:	bc08      	pop	{r3}
   1d3c0:	469e      	mov	lr, r3
   1d3c2:	4770      	bx	lr

0001d3c4 <__init_array_start>:
   1d3c4:	000120dd 	.word	0x000120dd

0001d3c8 <_fini>:
   1d3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3ca:	46c0      	nop			; (mov r8, r8)
   1d3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1d3ce:	bc08      	pop	{r3}
   1d3d0:	469e      	mov	lr, r3
   1d3d2:	4770      	bx	lr

0001d3d4 <__fini_array_start>:
   1d3d4:	000120b5 	.word	0x000120b5
