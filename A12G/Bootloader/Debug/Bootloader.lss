
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d3f8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000dc  20000000  0000d3f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d04  200000dc  0000d4d4  000200dc  2**2
                  ALLOC
  3 .stack        00002000  20000de0  0000e1d8  000200dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d8e6  00000000  00000000  0002015d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006238  00000000  00000000  0006da43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005ba3  00000000  00000000  00073c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010c0  00000000  00000000  0007981e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e90  00000000  00000000  0007a8de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021900  00000000  00000000  0007b76e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019b7d  00000000  00000000  0009d06e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093e19  00000000  00000000  000b6beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003f1c  00000000  00000000  0014aa04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 2d 00 20 f5 6d 00 00 ed 6e 00 00 ed 6e 00 00     .-. .m...n...n..
	...
      2c:	ed 6e 00 00 00 00 00 00 00 00 00 00 ed 6e 00 00     .n...........n..
      3c:	e5 01 00 00 ed 6e 00 00 ed 6e 00 00 ed 6e 00 00     .....n...n...n..
      4c:	ed 6e 00 00 ed 6e 00 00 ed 6e 00 00 ed 6e 00 00     .n...n...n...n..
      5c:	ed 6e 00 00 ed 6e 00 00 81 40 00 00 99 40 00 00     .n...n...@...@..
      6c:	b1 40 00 00 c9 40 00 00 e1 40 00 00 f9 40 00 00     .@...@...@...@..
      7c:	ed 6e 00 00 ed 6e 00 00 ed 6e 00 00 ed 6e 00 00     .n...n...n...n..
      8c:	ed 6e 00 00 ed 6e 00 00 00 00 00 00 00 00 00 00     .n...n..........
      9c:	ed 6e 00 00 ed 6e 00 00 ed 6e 00 00 ed 6e 00 00     .n...n...n...n..
      ac:	ed 6e 00 00 00 00 00 00                             .n......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000dc 	.word	0x200000dc
      d4:	00000000 	.word	0x00000000
      d8:	0000d3f8 	.word	0x0000d3f8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e0 	.word	0x200000e0
     108:	0000d3f8 	.word	0x0000d3f8
     10c:	0000d3f8 	.word	0x0000d3f8
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	000069a9 	.word	0x000069a9
     190:	20000000 	.word	0x20000000
     194:	0000b53d 	.word	0x0000b53d
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000f8 	.word	0x200000f8

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000f8 	.word	0x200000f8

000001fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     208:	230f      	movs	r3, #15
     20a:	18fb      	adds	r3, r7, r3
     20c:	1dfa      	adds	r2, r7, #7
     20e:	7812      	ldrb	r2, [r2, #0]
     210:	09d2      	lsrs	r2, r2, #7
     212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     214:	230e      	movs	r3, #14
     216:	18fb      	adds	r3, r7, r3
     218:	1dfa      	adds	r2, r7, #7
     21a:	7812      	ldrb	r2, [r2, #0]
     21c:	0952      	lsrs	r2, r2, #5
     21e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     224:	230f      	movs	r3, #15
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d10f      	bne.n	24e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22e:	230f      	movs	r3, #15
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b08      	subs	r3, #8
     240:	681a      	ldr	r2, [r3, #0]
     242:	230e      	movs	r3, #14
     244:	18fb      	adds	r3, r7, r3
     246:	781b      	ldrb	r3, [r3, #0]
     248:	01db      	lsls	r3, r3, #7
     24a:	18d3      	adds	r3, r2, r3
     24c:	e000      	b.n	250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24e:	2300      	movs	r3, #0
	}
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}
     258:	41004400 	.word	0x41004400

0000025c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     268:	1dfb      	adds	r3, r7, #7
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	0018      	movs	r0, r3
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <port_get_group_from_gpio_pin+0x20>)
     270:	4798      	blx	r3
     272:	0003      	movs	r3, r0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b002      	add	sp, #8
     27a:	bd80      	pop	{r7, pc}
     27c:	000001fd 	.word	0x000001fd

00000280 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	b002      	add	sp, #8
     2a0:	bd80      	pop	{r7, pc}
	...

000002a4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	0002      	movs	r2, r0
     2ac:	1dfb      	adds	r3, r7, #7
     2ae:	701a      	strb	r2, [r3, #0]
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	0018      	movs	r0, r3
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <port_pin_set_output_level+0x50>)
     2be:	4798      	blx	r3
     2c0:	0003      	movs	r3, r0
     2c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	221f      	movs	r2, #31
     2ca:	4013      	ands	r3, r2
     2cc:	2201      	movs	r2, #1
     2ce:	409a      	lsls	r2, r3
     2d0:	0013      	movs	r3, r2
     2d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2d4:	1dbb      	adds	r3, r7, #6
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d003      	beq.n	2e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2e2:	e002      	b.n	2ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	68ba      	ldr	r2, [r7, #8]
     2e8:	615a      	str	r2, [r3, #20]
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b004      	add	sp, #16
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000025d 	.word	0x0000025d

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fe:	1d3b      	adds	r3, r7, #4
     300:	0018      	movs	r0, r3
     302:	4b12      	ldr	r3, [pc, #72]	; (34c <system_board_init+0x54>)
     304:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     306:	1d3b      	adds	r3, r7, #4
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     30c:	1d3b      	adds	r3, r7, #4
     30e:	0019      	movs	r1, r3
     310:	2017      	movs	r0, #23
     312:	4b0f      	ldr	r3, [pc, #60]	; (350 <system_board_init+0x58>)
     314:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     316:	2101      	movs	r1, #1
     318:	2017      	movs	r0, #23
     31a:	4b0e      	ldr	r3, [pc, #56]	; (354 <system_board_init+0x5c>)
     31c:	4798      	blx	r3

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     31e:	1d3b      	adds	r3, r7, #4
     320:	2201      	movs	r2, #1
     322:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA07, &pin_conf);
     324:	1d3b      	adds	r3, r7, #4
     326:	0019      	movs	r1, r3
     328:	2007      	movs	r0, #7
     32a:	4b09      	ldr	r3, [pc, #36]	; (350 <system_board_init+0x58>)
     32c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     32e:	1d3b      	adds	r3, r7, #4
     330:	2200      	movs	r2, #0
     332:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     334:	1d3b      	adds	r3, r7, #4
     336:	2201      	movs	r2, #1
     338:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     33a:	1d3b      	adds	r3, r7, #4
     33c:	0019      	movs	r1, r3
     33e:	2037      	movs	r0, #55	; 0x37
     340:	4b03      	ldr	r3, [pc, #12]	; (350 <system_board_init+0x58>)
     342:	4798      	blx	r3
}
     344:	46c0      	nop			; (mov r8, r8)
     346:	46bd      	mov	sp, r7
     348:	b002      	add	sp, #8
     34a:	bd80      	pop	{r7, pc}
     34c:	00000281 	.word	0x00000281
     350:	000034b1 	.word	0x000034b1
     354:	000002a5 	.word	0x000002a5

00000358 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     358:	b580      	push	{r7, lr}
     35a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     35c:	4b04      	ldr	r3, [pc, #16]	; (370 <system_interrupt_enable_global+0x18>)
     35e:	2201      	movs	r2, #1
     360:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     362:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     366:	b662      	cpsie	i
}
     368:	46c0      	nop			; (mov r8, r8)
     36a:	46bd      	mov	sp, r7
     36c:	bd80      	pop	{r7, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	20000009 	.word	0x20000009

00000374 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     374:	b580      	push	{r7, lr}
     376:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     378:	b672      	cpsid	i
     37a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     37e:	4b03      	ldr	r3, [pc, #12]	; (38c <system_interrupt_disable_global+0x18>)
     380:	2200      	movs	r2, #0
     382:	701a      	strb	r2, [r3, #0]
}
     384:	46c0      	nop			; (mov r8, r8)
     386:	46bd      	mov	sp, r7
     388:	bd80      	pop	{r7, pc}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	20000009 	.word	0x20000009

00000390 <dsu_crc32_cal>:
 * \retval STATUS_ERR_BAD_ADDRESS  The address was not aligned with 4 bytes.
 
 * \retval STATUS_ERR_IO  A bus error is detected
 */
enum status_code dsu_crc32_cal(const uint32_t addr, const uint32_t len, uint32_t *pcrc32)
{
     390:	b580      	push	{r7, lr}
     392:	b084      	sub	sp, #16
     394:	af00      	add	r7, sp, #0
     396:	60f8      	str	r0, [r7, #12]
     398:	60b9      	str	r1, [r7, #8]
     39a:	607a      	str	r2, [r7, #4]
	if (addr & 0x00000003) {
     39c:	68fb      	ldr	r3, [r7, #12]
     39e:	2203      	movs	r2, #3
     3a0:	4013      	ands	r3, r2
     3a2:	d001      	beq.n	3a8 <dsu_crc32_cal+0x18>
		return STATUS_ERR_BAD_ADDRESS;
     3a4:	2318      	movs	r3, #24
     3a6:	e040      	b.n	42a <dsu_crc32_cal+0x9a>
	}

	system_interrupt_disable_global();
     3a8:	4b22      	ldr	r3, [pc, #136]	; (434 <dsu_crc32_cal+0xa4>)
     3aa:	4798      	blx	r3
	system_peripheral_unlock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     3ac:	2322      	movs	r3, #34	; 0x22
     3ae:	425b      	negs	r3, r3
     3b0:	0019      	movs	r1, r3
     3b2:	2021      	movs	r0, #33	; 0x21
     3b4:	4b20      	ldr	r3, [pc, #128]	; (438 <dsu_crc32_cal+0xa8>)
     3b6:	4798      	blx	r3

	DSU->DATA.reg = *pcrc32;
     3b8:	4a20      	ldr	r2, [pc, #128]	; (43c <dsu_crc32_cal+0xac>)
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	681b      	ldr	r3, [r3, #0]
     3be:	60d3      	str	r3, [r2, #12]
	DSU->ADDR.reg = addr;
     3c0:	4b1e      	ldr	r3, [pc, #120]	; (43c <dsu_crc32_cal+0xac>)
     3c2:	68fa      	ldr	r2, [r7, #12]
     3c4:	605a      	str	r2, [r3, #4]
	DSU->LENGTH.reg = len;
     3c6:	4b1d      	ldr	r3, [pc, #116]	; (43c <dsu_crc32_cal+0xac>)
     3c8:	68ba      	ldr	r2, [r7, #8]
     3ca:	609a      	str	r2, [r3, #8]

	DSU->CTRL.bit.CRC = 1;
     3cc:	4a1b      	ldr	r2, [pc, #108]	; (43c <dsu_crc32_cal+0xac>)
     3ce:	7813      	ldrb	r3, [r2, #0]
     3d0:	2104      	movs	r1, #4
     3d2:	430b      	orrs	r3, r1
     3d4:	7013      	strb	r3, [r2, #0]
	while ((DSU->STATUSA.reg & DSU_STATUSA_DONE) != 1) {	
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	4b18      	ldr	r3, [pc, #96]	; (43c <dsu_crc32_cal+0xac>)
     3da:	785b      	ldrb	r3, [r3, #1]
     3dc:	b2db      	uxtb	r3, r3
     3de:	001a      	movs	r2, r3
     3e0:	2301      	movs	r3, #1
     3e2:	4013      	ands	r3, r2
     3e4:	2b01      	cmp	r3, #1
     3e6:	d1f7      	bne.n	3d8 <dsu_crc32_cal+0x48>
	}

	if (DSU->STATUSA.reg & DSU_STATUSA_BERR) {
     3e8:	4b14      	ldr	r3, [pc, #80]	; (43c <dsu_crc32_cal+0xac>)
     3ea:	785b      	ldrb	r3, [r3, #1]
     3ec:	b2db      	uxtb	r3, r3
     3ee:	001a      	movs	r2, r3
     3f0:	2304      	movs	r3, #4
     3f2:	4013      	ands	r3, r2
     3f4:	d009      	beq.n	40a <dsu_crc32_cal+0x7a>
		system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     3f6:	2322      	movs	r3, #34	; 0x22
     3f8:	425b      	negs	r3, r3
     3fa:	0019      	movs	r1, r3
     3fc:	2021      	movs	r0, #33	; 0x21
     3fe:	4b10      	ldr	r3, [pc, #64]	; (440 <dsu_crc32_cal+0xb0>)
     400:	4798      	blx	r3
		system_interrupt_enable_global();
     402:	4b10      	ldr	r3, [pc, #64]	; (444 <dsu_crc32_cal+0xb4>)
     404:	4798      	blx	r3
		return STATUS_ERR_IO;
     406:	2310      	movs	r3, #16
     408:	e00f      	b.n	42a <dsu_crc32_cal+0x9a>
	}

	*pcrc32 = DSU->DATA.reg;
     40a:	4b0c      	ldr	r3, [pc, #48]	; (43c <dsu_crc32_cal+0xac>)
     40c:	68da      	ldr	r2, [r3, #12]
     40e:	687b      	ldr	r3, [r7, #4]
     410:	601a      	str	r2, [r3, #0]
	DSU->STATUSA.reg = DSU_STATUSA_DONE;
     412:	4b0a      	ldr	r3, [pc, #40]	; (43c <dsu_crc32_cal+0xac>)
     414:	2201      	movs	r2, #1
     416:	705a      	strb	r2, [r3, #1]

	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     418:	2322      	movs	r3, #34	; 0x22
     41a:	425b      	negs	r3, r3
     41c:	0019      	movs	r1, r3
     41e:	2021      	movs	r0, #33	; 0x21
     420:	4b07      	ldr	r3, [pc, #28]	; (440 <dsu_crc32_cal+0xb0>)
     422:	4798      	blx	r3
	system_interrupt_enable_global();
     424:	4b07      	ldr	r3, [pc, #28]	; (444 <dsu_crc32_cal+0xb4>)
     426:	4798      	blx	r3
	return STATUS_OK;
     428:	2300      	movs	r3, #0
     42a:	0018      	movs	r0, r3
     42c:	46bd      	mov	sp, r7
     42e:	b004      	add	sp, #16
     430:	bd80      	pop	{r7, pc}
     432:	46c0      	nop			; (mov r8, r8)
     434:	00000375 	.word	0x00000375
     438:	000009a5 	.word	0x000009a5
     43c:	41002000 	.word	0x41002000
     440:	0000090d 	.word	0x0000090d
     444:	00000359 	.word	0x00000359

00000448 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     448:	b580      	push	{r7, lr}
     44a:	b082      	sub	sp, #8
     44c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     44e:	4b07      	ldr	r3, [pc, #28]	; (46c <nvm_is_ready+0x24>)
     450:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     452:	687b      	ldr	r3, [r7, #4]
     454:	7d1b      	ldrb	r3, [r3, #20]
     456:	b2db      	uxtb	r3, r3
     458:	001a      	movs	r2, r3
     45a:	2301      	movs	r3, #1
     45c:	4013      	ands	r3, r2
     45e:	1e5a      	subs	r2, r3, #1
     460:	4193      	sbcs	r3, r2
     462:	b2db      	uxtb	r3, r3
}
     464:	0018      	movs	r0, r3
     466:	46bd      	mov	sp, r7
     468:	b002      	add	sp, #8
     46a:	bd80      	pop	{r7, pc}
     46c:	41004000 	.word	0x41004000

00000470 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     470:	b580      	push	{r7, lr}
     472:	b082      	sub	sp, #8
     474:	af00      	add	r7, sp, #0
     476:	0002      	movs	r2, r0
     478:	6039      	str	r1, [r7, #0]
     47a:	1dfb      	adds	r3, r7, #7
     47c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     47e:	1dfb      	adds	r3, r7, #7
     480:	781b      	ldrb	r3, [r3, #0]
     482:	2b01      	cmp	r3, #1
     484:	d00a      	beq.n	49c <system_apb_clock_set_mask+0x2c>
     486:	2b02      	cmp	r3, #2
     488:	d00f      	beq.n	4aa <system_apb_clock_set_mask+0x3a>
     48a:	2b00      	cmp	r3, #0
     48c:	d114      	bne.n	4b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     48e:	4b0e      	ldr	r3, [pc, #56]	; (4c8 <system_apb_clock_set_mask+0x58>)
     490:	4a0d      	ldr	r2, [pc, #52]	; (4c8 <system_apb_clock_set_mask+0x58>)
     492:	6991      	ldr	r1, [r2, #24]
     494:	683a      	ldr	r2, [r7, #0]
     496:	430a      	orrs	r2, r1
     498:	619a      	str	r2, [r3, #24]
			break;
     49a:	e00f      	b.n	4bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     49c:	4b0a      	ldr	r3, [pc, #40]	; (4c8 <system_apb_clock_set_mask+0x58>)
     49e:	4a0a      	ldr	r2, [pc, #40]	; (4c8 <system_apb_clock_set_mask+0x58>)
     4a0:	69d1      	ldr	r1, [r2, #28]
     4a2:	683a      	ldr	r2, [r7, #0]
     4a4:	430a      	orrs	r2, r1
     4a6:	61da      	str	r2, [r3, #28]
			break;
     4a8:	e008      	b.n	4bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4aa:	4b07      	ldr	r3, [pc, #28]	; (4c8 <system_apb_clock_set_mask+0x58>)
     4ac:	4a06      	ldr	r2, [pc, #24]	; (4c8 <system_apb_clock_set_mask+0x58>)
     4ae:	6a11      	ldr	r1, [r2, #32]
     4b0:	683a      	ldr	r2, [r7, #0]
     4b2:	430a      	orrs	r2, r1
     4b4:	621a      	str	r2, [r3, #32]
			break;
     4b6:	e001      	b.n	4bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     4b8:	2317      	movs	r3, #23
     4ba:	e000      	b.n	4be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     4bc:	2300      	movs	r3, #0
}
     4be:	0018      	movs	r0, r3
     4c0:	46bd      	mov	sp, r7
     4c2:	b002      	add	sp, #8
     4c4:	bd80      	pop	{r7, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	40000400 	.word	0x40000400

000004cc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     4cc:	b580      	push	{r7, lr}
     4ce:	b084      	sub	sp, #16
     4d0:	af00      	add	r7, sp, #0
     4d2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     4d4:	4b2f      	ldr	r3, [pc, #188]	; (594 <nvm_set_config+0xc8>)
     4d6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     4d8:	2104      	movs	r1, #4
     4da:	2001      	movs	r0, #1
     4dc:	4b2e      	ldr	r3, [pc, #184]	; (598 <nvm_set_config+0xcc>)
     4de:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     4e0:	68fb      	ldr	r3, [r7, #12]
     4e2:	2220      	movs	r2, #32
     4e4:	32ff      	adds	r2, #255	; 0xff
     4e6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     4e8:	4b2c      	ldr	r3, [pc, #176]	; (59c <nvm_set_config+0xd0>)
     4ea:	4798      	blx	r3
     4ec:	0003      	movs	r3, r0
     4ee:	001a      	movs	r2, r3
     4f0:	2301      	movs	r3, #1
     4f2:	4053      	eors	r3, r2
     4f4:	b2db      	uxtb	r3, r3
     4f6:	2b00      	cmp	r3, #0
     4f8:	d001      	beq.n	4fe <nvm_set_config+0x32>
		return STATUS_BUSY;
     4fa:	2305      	movs	r3, #5
     4fc:	e045      	b.n	58a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     4fe:	687b      	ldr	r3, [r7, #4]
     500:	781b      	ldrb	r3, [r3, #0]
     502:	021b      	lsls	r3, r3, #8
     504:	001a      	movs	r2, r3
     506:	23c0      	movs	r3, #192	; 0xc0
     508:	009b      	lsls	r3, r3, #2
     50a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	785b      	ldrb	r3, [r3, #1]
     510:	01db      	lsls	r3, r3, #7
     512:	0019      	movs	r1, r3
     514:	23ff      	movs	r3, #255	; 0xff
     516:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     518:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     51a:	687b      	ldr	r3, [r7, #4]
     51c:	789b      	ldrb	r3, [r3, #2]
     51e:	005b      	lsls	r3, r3, #1
     520:	0019      	movs	r1, r3
     522:	231e      	movs	r3, #30
     524:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     526:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     528:	687b      	ldr	r3, [r7, #4]
     52a:	78db      	ldrb	r3, [r3, #3]
     52c:	049b      	lsls	r3, r3, #18
     52e:	0019      	movs	r1, r3
     530:	2380      	movs	r3, #128	; 0x80
     532:	02db      	lsls	r3, r3, #11
     534:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     536:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     538:	687b      	ldr	r3, [r7, #4]
     53a:	791b      	ldrb	r3, [r3, #4]
     53c:	041b      	lsls	r3, r3, #16
     53e:	0019      	movs	r1, r3
     540:	23c0      	movs	r3, #192	; 0xc0
     542:	029b      	lsls	r3, r3, #10
     544:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     546:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     548:	68fb      	ldr	r3, [r7, #12]
     54a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     54c:	68fb      	ldr	r3, [r7, #12]
     54e:	689b      	ldr	r3, [r3, #8]
     550:	035b      	lsls	r3, r3, #13
     552:	0f5b      	lsrs	r3, r3, #29
     554:	b2db      	uxtb	r3, r3
     556:	001a      	movs	r2, r3
     558:	2308      	movs	r3, #8
     55a:	4093      	lsls	r3, r2
     55c:	b29a      	uxth	r2, r3
     55e:	4b10      	ldr	r3, [pc, #64]	; (5a0 <nvm_set_config+0xd4>)
     560:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     562:	68fb      	ldr	r3, [r7, #12]
     564:	689b      	ldr	r3, [r3, #8]
     566:	b29a      	uxth	r2, r3
     568:	4b0d      	ldr	r3, [pc, #52]	; (5a0 <nvm_set_config+0xd4>)
     56a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	785a      	ldrb	r2, [r3, #1]
     570:	4b0b      	ldr	r3, [pc, #44]	; (5a0 <nvm_set_config+0xd4>)
     572:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     574:	68fb      	ldr	r3, [r7, #12]
     576:	8b1b      	ldrh	r3, [r3, #24]
     578:	b29b      	uxth	r3, r3
     57a:	001a      	movs	r2, r3
     57c:	2380      	movs	r3, #128	; 0x80
     57e:	005b      	lsls	r3, r3, #1
     580:	4013      	ands	r3, r2
     582:	d001      	beq.n	588 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     584:	2310      	movs	r3, #16
     586:	e000      	b.n	58a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     588:	2300      	movs	r3, #0
}
     58a:	0018      	movs	r0, r3
     58c:	46bd      	mov	sp, r7
     58e:	b004      	add	sp, #16
     590:	bd80      	pop	{r7, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	41004000 	.word	0x41004000
     598:	00000471 	.word	0x00000471
     59c:	00000449 	.word	0x00000449
     5a0:	200000fc 	.word	0x200000fc

000005a4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     5a4:	b580      	push	{r7, lr}
     5a6:	b086      	sub	sp, #24
     5a8:	af00      	add	r7, sp, #0
     5aa:	60b9      	str	r1, [r7, #8]
     5ac:	607a      	str	r2, [r7, #4]
     5ae:	230f      	movs	r3, #15
     5b0:	18fb      	adds	r3, r7, r3
     5b2:	1c02      	adds	r2, r0, #0
     5b4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     5b6:	4b3a      	ldr	r3, [pc, #232]	; (6a0 <nvm_execute_command+0xfc>)
     5b8:	881b      	ldrh	r3, [r3, #0]
     5ba:	001a      	movs	r2, r3
     5bc:	4b38      	ldr	r3, [pc, #224]	; (6a0 <nvm_execute_command+0xfc>)
     5be:	885b      	ldrh	r3, [r3, #2]
     5c0:	435a      	muls	r2, r3
     5c2:	68bb      	ldr	r3, [r7, #8]
     5c4:	429a      	cmp	r2, r3
     5c6:	d209      	bcs.n	5dc <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     5c8:	68bb      	ldr	r3, [r7, #8]
     5ca:	4a36      	ldr	r2, [pc, #216]	; (6a4 <nvm_execute_command+0x100>)
     5cc:	4293      	cmp	r3, r2
     5ce:	d903      	bls.n	5d8 <nvm_execute_command+0x34>
     5d0:	68bb      	ldr	r3, [r7, #8]
     5d2:	4a35      	ldr	r2, [pc, #212]	; (6a8 <nvm_execute_command+0x104>)
     5d4:	4293      	cmp	r3, r2
     5d6:	d901      	bls.n	5dc <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     5d8:	2318      	movs	r3, #24
     5da:	e05c      	b.n	696 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     5dc:	4b33      	ldr	r3, [pc, #204]	; (6ac <nvm_execute_command+0x108>)
     5de:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     5e0:	697b      	ldr	r3, [r7, #20]
     5e2:	685b      	ldr	r3, [r3, #4]
     5e4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     5e6:	693b      	ldr	r3, [r7, #16]
     5e8:	2280      	movs	r2, #128	; 0x80
     5ea:	02d2      	lsls	r2, r2, #11
     5ec:	431a      	orrs	r2, r3
     5ee:	697b      	ldr	r3, [r7, #20]
     5f0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     5f2:	697b      	ldr	r3, [r7, #20]
     5f4:	2220      	movs	r2, #32
     5f6:	32ff      	adds	r2, #255	; 0xff
     5f8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     5fa:	4b2d      	ldr	r3, [pc, #180]	; (6b0 <nvm_execute_command+0x10c>)
     5fc:	4798      	blx	r3
     5fe:	0003      	movs	r3, r0
     600:	001a      	movs	r2, r3
     602:	2301      	movs	r3, #1
     604:	4053      	eors	r3, r2
     606:	b2db      	uxtb	r3, r3
     608:	2b00      	cmp	r3, #0
     60a:	d004      	beq.n	616 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     60c:	697b      	ldr	r3, [r7, #20]
     60e:	693a      	ldr	r2, [r7, #16]
     610:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
     612:	2305      	movs	r3, #5
     614:	e03f      	b.n	696 <nvm_execute_command+0xf2>
	}

	switch (command) {
     616:	230f      	movs	r3, #15
     618:	18fb      	adds	r3, r7, r3
     61a:	781b      	ldrb	r3, [r3, #0]
     61c:	2b45      	cmp	r3, #69	; 0x45
     61e:	d81d      	bhi.n	65c <nvm_execute_command+0xb8>
     620:	009a      	lsls	r2, r3, #2
     622:	4b24      	ldr	r3, [pc, #144]	; (6b4 <nvm_execute_command+0x110>)
     624:	18d3      	adds	r3, r2, r3
     626:	681b      	ldr	r3, [r3, #0]
     628:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     62a:	697b      	ldr	r3, [r7, #20]
     62c:	8b1b      	ldrh	r3, [r3, #24]
     62e:	b29b      	uxth	r3, r3
     630:	001a      	movs	r2, r3
     632:	2380      	movs	r3, #128	; 0x80
     634:	005b      	lsls	r3, r3, #1
     636:	4013      	ands	r3, r2
     638:	d004      	beq.n	644 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
     63a:	697b      	ldr	r3, [r7, #20]
     63c:	693a      	ldr	r2, [r7, #16]
     63e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
     640:	2310      	movs	r3, #16
     642:	e028      	b.n	696 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     644:	68bb      	ldr	r3, [r7, #8]
     646:	089b      	lsrs	r3, r3, #2
     648:	005a      	lsls	r2, r3, #1
     64a:	697b      	ldr	r3, [r7, #20]
     64c:	61da      	str	r2, [r3, #28]
			break;
     64e:	e00b      	b.n	668 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     650:	68bb      	ldr	r3, [r7, #8]
     652:	089b      	lsrs	r3, r3, #2
     654:	005a      	lsls	r2, r3, #1
     656:	697b      	ldr	r3, [r7, #20]
     658:	61da      	str	r2, [r3, #28]
			break;
     65a:	e005      	b.n	668 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
     65c:	697b      	ldr	r3, [r7, #20]
     65e:	693a      	ldr	r2, [r7, #16]
     660:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     662:	2317      	movs	r3, #23
     664:	e017      	b.n	696 <nvm_execute_command+0xf2>
			break;
     666:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     668:	230f      	movs	r3, #15
     66a:	18fb      	adds	r3, r7, r3
     66c:	781b      	ldrb	r3, [r3, #0]
     66e:	b29b      	uxth	r3, r3
     670:	4a11      	ldr	r2, [pc, #68]	; (6b8 <nvm_execute_command+0x114>)
     672:	4313      	orrs	r3, r2
     674:	b29a      	uxth	r2, r3
     676:	697b      	ldr	r3, [r7, #20]
     678:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	4b0c      	ldr	r3, [pc, #48]	; (6b0 <nvm_execute_command+0x10c>)
     67e:	4798      	blx	r3
     680:	0003      	movs	r3, r0
     682:	001a      	movs	r2, r3
     684:	2301      	movs	r3, #1
     686:	4053      	eors	r3, r2
     688:	b2db      	uxtb	r3, r3
     68a:	2b00      	cmp	r3, #0
     68c:	d1f6      	bne.n	67c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
     68e:	697b      	ldr	r3, [r7, #20]
     690:	693a      	ldr	r2, [r7, #16]
     692:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     694:	2300      	movs	r3, #0
}
     696:	0018      	movs	r0, r3
     698:	46bd      	mov	sp, r7
     69a:	b006      	add	sp, #24
     69c:	bd80      	pop	{r7, pc}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	200000fc 	.word	0x200000fc
     6a4:	00803fff 	.word	0x00803fff
     6a8:	00806000 	.word	0x00806000
     6ac:	41004000 	.word	0x41004000
     6b0:	00000449 	.word	0x00000449
     6b4:	0000c78c 	.word	0x0000c78c
     6b8:	ffffa500 	.word	0xffffa500

000006bc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b088      	sub	sp, #32
     6c0:	af00      	add	r7, sp, #0
     6c2:	60f8      	str	r0, [r7, #12]
     6c4:	60b9      	str	r1, [r7, #8]
     6c6:	1dbb      	adds	r3, r7, #6
     6c8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     6ca:	4b4a      	ldr	r3, [pc, #296]	; (7f4 <nvm_write_buffer+0x138>)
     6cc:	881b      	ldrh	r3, [r3, #0]
     6ce:	001a      	movs	r2, r3
     6d0:	4b48      	ldr	r3, [pc, #288]	; (7f4 <nvm_write_buffer+0x138>)
     6d2:	885b      	ldrh	r3, [r3, #2]
     6d4:	435a      	muls	r2, r3
	if (destination_address >
     6d6:	68fb      	ldr	r3, [r7, #12]
     6d8:	429a      	cmp	r2, r3
     6da:	d201      	bcs.n	6e0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     6dc:	2318      	movs	r3, #24
     6de:	e084      	b.n	7ea <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     6e0:	4b44      	ldr	r3, [pc, #272]	; (7f4 <nvm_write_buffer+0x138>)
     6e2:	881b      	ldrh	r3, [r3, #0]
     6e4:	3b01      	subs	r3, #1
     6e6:	001a      	movs	r2, r3
     6e8:	68fb      	ldr	r3, [r7, #12]
     6ea:	4013      	ands	r3, r2
     6ec:	d001      	beq.n	6f2 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
     6ee:	2318      	movs	r3, #24
     6f0:	e07b      	b.n	7ea <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
     6f2:	4b40      	ldr	r3, [pc, #256]	; (7f4 <nvm_write_buffer+0x138>)
     6f4:	881b      	ldrh	r3, [r3, #0]
     6f6:	1dba      	adds	r2, r7, #6
     6f8:	8812      	ldrh	r2, [r2, #0]
     6fa:	429a      	cmp	r2, r3
     6fc:	d901      	bls.n	702 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
     6fe:	2317      	movs	r3, #23
     700:	e073      	b.n	7ea <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     702:	4b3d      	ldr	r3, [pc, #244]	; (7f8 <nvm_write_buffer+0x13c>)
     704:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     706:	4b3d      	ldr	r3, [pc, #244]	; (7fc <nvm_write_buffer+0x140>)
     708:	4798      	blx	r3
     70a:	0003      	movs	r3, r0
     70c:	001a      	movs	r2, r3
     70e:	2301      	movs	r3, #1
     710:	4053      	eors	r3, r2
     712:	b2db      	uxtb	r3, r3
     714:	2b00      	cmp	r3, #0
     716:	d001      	beq.n	71c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
     718:	2305      	movs	r3, #5
     71a:	e066      	b.n	7ea <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     71c:	697b      	ldr	r3, [r7, #20]
     71e:	4a38      	ldr	r2, [pc, #224]	; (800 <nvm_write_buffer+0x144>)
     720:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     722:	46c0      	nop			; (mov r8, r8)
     724:	4b35      	ldr	r3, [pc, #212]	; (7fc <nvm_write_buffer+0x140>)
     726:	4798      	blx	r3
     728:	0003      	movs	r3, r0
     72a:	001a      	movs	r2, r3
     72c:	2301      	movs	r3, #1
     72e:	4053      	eors	r3, r2
     730:	b2db      	uxtb	r3, r3
     732:	2b00      	cmp	r3, #0
     734:	d1f6      	bne.n	724 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     736:	697b      	ldr	r3, [r7, #20]
     738:	2220      	movs	r2, #32
     73a:	32ff      	adds	r2, #255	; 0xff
     73c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
     73e:	68fb      	ldr	r3, [r7, #12]
     740:	085b      	lsrs	r3, r3, #1
     742:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     744:	231a      	movs	r3, #26
     746:	18fb      	adds	r3, r7, r3
     748:	2200      	movs	r2, #0
     74a:	801a      	strh	r2, [r3, #0]
     74c:	e032      	b.n	7b4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     74e:	231a      	movs	r3, #26
     750:	18fb      	adds	r3, r7, r3
     752:	881b      	ldrh	r3, [r3, #0]
     754:	68ba      	ldr	r2, [r7, #8]
     756:	18d3      	adds	r3, r2, r3
     758:	781a      	ldrb	r2, [r3, #0]
     75a:	2318      	movs	r3, #24
     75c:	18fb      	adds	r3, r7, r3
     75e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     760:	231a      	movs	r3, #26
     762:	18fb      	adds	r3, r7, r3
     764:	881a      	ldrh	r2, [r3, #0]
     766:	1dbb      	adds	r3, r7, #6
     768:	881b      	ldrh	r3, [r3, #0]
     76a:	3b01      	subs	r3, #1
     76c:	429a      	cmp	r2, r3
     76e:	da11      	bge.n	794 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
     770:	231a      	movs	r3, #26
     772:	18fb      	adds	r3, r7, r3
     774:	881b      	ldrh	r3, [r3, #0]
     776:	3301      	adds	r3, #1
     778:	68ba      	ldr	r2, [r7, #8]
     77a:	18d3      	adds	r3, r2, r3
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	021b      	lsls	r3, r3, #8
     780:	b21a      	sxth	r2, r3
     782:	2318      	movs	r3, #24
     784:	18fb      	adds	r3, r7, r3
     786:	2100      	movs	r1, #0
     788:	5e5b      	ldrsh	r3, [r3, r1]
     78a:	4313      	orrs	r3, r2
     78c:	b21a      	sxth	r2, r3
     78e:	2318      	movs	r3, #24
     790:	18fb      	adds	r3, r7, r3
     792:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     794:	69fb      	ldr	r3, [r7, #28]
     796:	1c5a      	adds	r2, r3, #1
     798:	61fa      	str	r2, [r7, #28]
     79a:	005b      	lsls	r3, r3, #1
     79c:	001a      	movs	r2, r3
     79e:	2318      	movs	r3, #24
     7a0:	18fb      	adds	r3, r7, r3
     7a2:	881b      	ldrh	r3, [r3, #0]
     7a4:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     7a6:	231a      	movs	r3, #26
     7a8:	18fb      	adds	r3, r7, r3
     7aa:	221a      	movs	r2, #26
     7ac:	18ba      	adds	r2, r7, r2
     7ae:	8812      	ldrh	r2, [r2, #0]
     7b0:	3202      	adds	r2, #2
     7b2:	801a      	strh	r2, [r3, #0]
     7b4:	231a      	movs	r3, #26
     7b6:	18fa      	adds	r2, r7, r3
     7b8:	1dbb      	adds	r3, r7, #6
     7ba:	8812      	ldrh	r2, [r2, #0]
     7bc:	881b      	ldrh	r3, [r3, #0]
     7be:	429a      	cmp	r2, r3
     7c0:	d3c5      	bcc.n	74e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     7c2:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <nvm_write_buffer+0x138>)
     7c4:	791b      	ldrb	r3, [r3, #4]
     7c6:	2201      	movs	r2, #1
     7c8:	4053      	eors	r3, r2
     7ca:	b2db      	uxtb	r3, r3
     7cc:	2b00      	cmp	r3, #0
     7ce:	d00b      	beq.n	7e8 <nvm_write_buffer+0x12c>
     7d0:	1dbb      	adds	r3, r7, #6
     7d2:	881b      	ldrh	r3, [r3, #0]
     7d4:	2b3f      	cmp	r3, #63	; 0x3f
     7d6:	d807      	bhi.n	7e8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     7d8:	68fb      	ldr	r3, [r7, #12]
     7da:	2200      	movs	r2, #0
     7dc:	0019      	movs	r1, r3
     7de:	2004      	movs	r0, #4
     7e0:	4b08      	ldr	r3, [pc, #32]	; (804 <nvm_write_buffer+0x148>)
     7e2:	4798      	blx	r3
     7e4:	0003      	movs	r3, r0
     7e6:	e000      	b.n	7ea <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     7e8:	2300      	movs	r3, #0
}
     7ea:	0018      	movs	r0, r3
     7ec:	46bd      	mov	sp, r7
     7ee:	b008      	add	sp, #32
     7f0:	bd80      	pop	{r7, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	200000fc 	.word	0x200000fc
     7f8:	41004000 	.word	0x41004000
     7fc:	00000449 	.word	0x00000449
     800:	ffffa544 	.word	0xffffa544
     804:	000005a5 	.word	0x000005a5

00000808 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     808:	b580      	push	{r7, lr}
     80a:	b084      	sub	sp, #16
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     810:	4b23      	ldr	r3, [pc, #140]	; (8a0 <nvm_erase_row+0x98>)
     812:	881b      	ldrh	r3, [r3, #0]
     814:	001a      	movs	r2, r3
     816:	4b22      	ldr	r3, [pc, #136]	; (8a0 <nvm_erase_row+0x98>)
     818:	885b      	ldrh	r3, [r3, #2]
     81a:	435a      	muls	r2, r3
	if (row_address >
     81c:	687b      	ldr	r3, [r7, #4]
     81e:	429a      	cmp	r2, r3
     820:	d201      	bcs.n	826 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     822:	2318      	movs	r3, #24
     824:	e037      	b.n	896 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     826:	4b1e      	ldr	r3, [pc, #120]	; (8a0 <nvm_erase_row+0x98>)
     828:	881b      	ldrh	r3, [r3, #0]
     82a:	009b      	lsls	r3, r3, #2
     82c:	3b01      	subs	r3, #1
     82e:	001a      	movs	r2, r3
     830:	687b      	ldr	r3, [r7, #4]
     832:	4013      	ands	r3, r2
     834:	d001      	beq.n	83a <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
     836:	2318      	movs	r3, #24
     838:	e02d      	b.n	896 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     83a:	4b1a      	ldr	r3, [pc, #104]	; (8a4 <nvm_erase_row+0x9c>)
     83c:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     83e:	4b1a      	ldr	r3, [pc, #104]	; (8a8 <nvm_erase_row+0xa0>)
     840:	4798      	blx	r3
     842:	0003      	movs	r3, r0
     844:	001a      	movs	r2, r3
     846:	2301      	movs	r3, #1
     848:	4053      	eors	r3, r2
     84a:	b2db      	uxtb	r3, r3
     84c:	2b00      	cmp	r3, #0
     84e:	d001      	beq.n	854 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
     850:	2305      	movs	r3, #5
     852:	e020      	b.n	896 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     854:	68fb      	ldr	r3, [r7, #12]
     856:	2220      	movs	r2, #32
     858:	32ff      	adds	r2, #255	; 0xff
     85a:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     85c:	687b      	ldr	r3, [r7, #4]
     85e:	089b      	lsrs	r3, r3, #2
     860:	005a      	lsls	r2, r3, #1
     862:	68fb      	ldr	r3, [r7, #12]
     864:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     866:	68fb      	ldr	r3, [r7, #12]
     868:	4a10      	ldr	r2, [pc, #64]	; (8ac <nvm_erase_row+0xa4>)
     86a:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
     86c:	46c0      	nop			; (mov r8, r8)
     86e:	4b0e      	ldr	r3, [pc, #56]	; (8a8 <nvm_erase_row+0xa0>)
     870:	4798      	blx	r3
     872:	0003      	movs	r3, r0
     874:	001a      	movs	r2, r3
     876:	2301      	movs	r3, #1
     878:	4053      	eors	r3, r2
     87a:	b2db      	uxtb	r3, r3
     87c:	2b00      	cmp	r3, #0
     87e:	d1f6      	bne.n	86e <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     880:	68fb      	ldr	r3, [r7, #12]
     882:	8b1b      	ldrh	r3, [r3, #24]
     884:	b29b      	uxth	r3, r3
     886:	b2db      	uxtb	r3, r3
     888:	001a      	movs	r2, r3
     88a:	231c      	movs	r3, #28
     88c:	4013      	ands	r3, r2
     88e:	d001      	beq.n	894 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
     890:	2304      	movs	r3, #4
     892:	e000      	b.n	896 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
     894:	2300      	movs	r3, #0
}
     896:	0018      	movs	r0, r3
     898:	46bd      	mov	sp, r7
     89a:	b004      	add	sp, #16
     89c:	bd80      	pop	{r7, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	200000fc 	.word	0x200000fc
     8a4:	41004000 	.word	0x41004000
     8a8:	00000449 	.word	0x00000449
     8ac:	ffffa502 	.word	0xffffa502

000008b0 <system_apb_clock_set_mask>:
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b082      	sub	sp, #8
     8b4:	af00      	add	r7, sp, #0
     8b6:	0002      	movs	r2, r0
     8b8:	6039      	str	r1, [r7, #0]
     8ba:	1dfb      	adds	r3, r7, #7
     8bc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     8be:	1dfb      	adds	r3, r7, #7
     8c0:	781b      	ldrb	r3, [r3, #0]
     8c2:	2b01      	cmp	r3, #1
     8c4:	d00a      	beq.n	8dc <system_apb_clock_set_mask+0x2c>
     8c6:	2b02      	cmp	r3, #2
     8c8:	d00f      	beq.n	8ea <system_apb_clock_set_mask+0x3a>
     8ca:	2b00      	cmp	r3, #0
     8cc:	d114      	bne.n	8f8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     8ce:	4b0e      	ldr	r3, [pc, #56]	; (908 <system_apb_clock_set_mask+0x58>)
     8d0:	4a0d      	ldr	r2, [pc, #52]	; (908 <system_apb_clock_set_mask+0x58>)
     8d2:	6991      	ldr	r1, [r2, #24]
     8d4:	683a      	ldr	r2, [r7, #0]
     8d6:	430a      	orrs	r2, r1
     8d8:	619a      	str	r2, [r3, #24]
			break;
     8da:	e00f      	b.n	8fc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     8dc:	4b0a      	ldr	r3, [pc, #40]	; (908 <system_apb_clock_set_mask+0x58>)
     8de:	4a0a      	ldr	r2, [pc, #40]	; (908 <system_apb_clock_set_mask+0x58>)
     8e0:	69d1      	ldr	r1, [r2, #28]
     8e2:	683a      	ldr	r2, [r7, #0]
     8e4:	430a      	orrs	r2, r1
     8e6:	61da      	str	r2, [r3, #28]
			break;
     8e8:	e008      	b.n	8fc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     8ea:	4b07      	ldr	r3, [pc, #28]	; (908 <system_apb_clock_set_mask+0x58>)
     8ec:	4a06      	ldr	r2, [pc, #24]	; (908 <system_apb_clock_set_mask+0x58>)
     8ee:	6a11      	ldr	r1, [r2, #32]
     8f0:	683a      	ldr	r2, [r7, #0]
     8f2:	430a      	orrs	r2, r1
     8f4:	621a      	str	r2, [r3, #32]
			break;
     8f6:	e001      	b.n	8fc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     8f8:	2317      	movs	r3, #23
     8fa:	e000      	b.n	8fe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     8fc:	2300      	movs	r3, #0
}
     8fe:	0018      	movs	r0, r3
     900:	46bd      	mov	sp, r7
     902:	b002      	add	sp, #8
     904:	bd80      	pop	{r7, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	40000400 	.word	0x40000400

0000090c <system_peripheral_lock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_lock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
     90c:	b580      	push	{r7, lr}
     90e:	b084      	sub	sp, #16
     910:	af00      	add	r7, sp, #0
     912:	6078      	str	r0, [r7, #4]
     914:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
     916:	687b      	ldr	r3, [r7, #4]
     918:	b2da      	uxtb	r2, r3
     91a:	230f      	movs	r3, #15
     91c:	18fb      	adds	r3, r7, r3
     91e:	211f      	movs	r1, #31
     920:	400a      	ands	r2, r1
     922:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
     924:	687b      	ldr	r3, [r7, #4]
     926:	095a      	lsrs	r2, r3, #5
     928:	230e      	movs	r3, #14
     92a:	18fb      	adds	r3, r7, r3
     92c:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     92e:	687b      	ldr	r3, [r7, #4]
     930:	43da      	mvns	r2, r3
     932:	683b      	ldr	r3, [r7, #0]
     934:	429a      	cmp	r2, r3
     936:	d001      	beq.n	93c <system_peripheral_lock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     938:	2317      	movs	r3, #23
     93a:	e02d      	b.n	998 <system_peripheral_lock+0x8c>
	}

	switch (register_pos) {
     93c:	230e      	movs	r3, #14
     93e:	18fb      	adds	r3, r7, r3
     940:	781b      	ldrb	r3, [r3, #0]
     942:	2b01      	cmp	r3, #1
     944:	d00d      	beq.n	962 <system_peripheral_lock+0x56>
     946:	2b02      	cmp	r3, #2
     948:	d015      	beq.n	976 <system_peripheral_lock+0x6a>
     94a:	2b00      	cmp	r3, #0
     94c:	d121      	bne.n	992 <system_peripheral_lock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPSET.reg = (1 << register_bit_pos);
     94e:	2380      	movs	r3, #128	; 0x80
     950:	05db      	lsls	r3, r3, #23
     952:	220f      	movs	r2, #15
     954:	18ba      	adds	r2, r7, r2
     956:	7812      	ldrb	r2, [r2, #0]
     958:	2101      	movs	r1, #1
     95a:	4091      	lsls	r1, r2
     95c:	000a      	movs	r2, r1
     95e:	605a      	str	r2, [r3, #4]
			break;
     960:	e019      	b.n	996 <system_peripheral_lock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPSET.reg = (1 << register_bit_pos);
     962:	2382      	movs	r3, #130	; 0x82
     964:	05db      	lsls	r3, r3, #23
     966:	220f      	movs	r2, #15
     968:	18ba      	adds	r2, r7, r2
     96a:	7812      	ldrb	r2, [r2, #0]
     96c:	2101      	movs	r1, #1
     96e:	4091      	lsls	r1, r2
     970:	000a      	movs	r2, r1
     972:	605a      	str	r2, [r3, #4]
			break;
     974:	e00f      	b.n	996 <system_peripheral_lock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
     976:	2101      	movs	r1, #1
     978:	2002      	movs	r0, #2
     97a:	4b09      	ldr	r3, [pc, #36]	; (9a0 <system_peripheral_lock+0x94>)
     97c:	4798      	blx	r3
			PAC2->WPSET.reg = (1 << register_bit_pos);
     97e:	2384      	movs	r3, #132	; 0x84
     980:	05db      	lsls	r3, r3, #23
     982:	220f      	movs	r2, #15
     984:	18ba      	adds	r2, r7, r2
     986:	7812      	ldrb	r2, [r2, #0]
     988:	2101      	movs	r1, #1
     98a:	4091      	lsls	r1, r2
     98c:	000a      	movs	r2, r1
     98e:	605a      	str	r2, [r3, #4]
			break;
     990:	e001      	b.n	996 <system_peripheral_lock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     992:	2317      	movs	r3, #23
     994:	e000      	b.n	998 <system_peripheral_lock+0x8c>
	}

	return STATUS_OK;
     996:	2300      	movs	r3, #0
}
     998:	0018      	movs	r0, r3
     99a:	46bd      	mov	sp, r7
     99c:	b004      	add	sp, #16
     99e:	bd80      	pop	{r7, pc}
     9a0:	000008b1 	.word	0x000008b1

000009a4 <system_peripheral_unlock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_unlock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
     9a4:	b580      	push	{r7, lr}
     9a6:	b084      	sub	sp, #16
     9a8:	af00      	add	r7, sp, #0
     9aa:	6078      	str	r0, [r7, #4]
     9ac:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	b2da      	uxtb	r2, r3
     9b2:	230f      	movs	r3, #15
     9b4:	18fb      	adds	r3, r7, r3
     9b6:	211f      	movs	r1, #31
     9b8:	400a      	ands	r2, r1
     9ba:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
     9bc:	687b      	ldr	r3, [r7, #4]
     9be:	095a      	lsrs	r2, r3, #5
     9c0:	230e      	movs	r3, #14
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     9c6:	687b      	ldr	r3, [r7, #4]
     9c8:	43da      	mvns	r2, r3
     9ca:	683b      	ldr	r3, [r7, #0]
     9cc:	429a      	cmp	r2, r3
     9ce:	d001      	beq.n	9d4 <system_peripheral_unlock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     9d0:	2317      	movs	r3, #23
     9d2:	e02d      	b.n	a30 <system_peripheral_unlock+0x8c>
	}

	switch (register_pos) {
     9d4:	230e      	movs	r3, #14
     9d6:	18fb      	adds	r3, r7, r3
     9d8:	781b      	ldrb	r3, [r3, #0]
     9da:	2b01      	cmp	r3, #1
     9dc:	d00d      	beq.n	9fa <system_peripheral_unlock+0x56>
     9de:	2b02      	cmp	r3, #2
     9e0:	d015      	beq.n	a0e <system_peripheral_unlock+0x6a>
     9e2:	2b00      	cmp	r3, #0
     9e4:	d121      	bne.n	a2a <system_peripheral_unlock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPCLR.reg = (1 << register_bit_pos);
     9e6:	2380      	movs	r3, #128	; 0x80
     9e8:	05db      	lsls	r3, r3, #23
     9ea:	220f      	movs	r2, #15
     9ec:	18ba      	adds	r2, r7, r2
     9ee:	7812      	ldrb	r2, [r2, #0]
     9f0:	2101      	movs	r1, #1
     9f2:	4091      	lsls	r1, r2
     9f4:	000a      	movs	r2, r1
     9f6:	601a      	str	r2, [r3, #0]
			break;
     9f8:	e019      	b.n	a2e <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPCLR.reg = (1 << register_bit_pos);
     9fa:	2382      	movs	r3, #130	; 0x82
     9fc:	05db      	lsls	r3, r3, #23
     9fe:	220f      	movs	r2, #15
     a00:	18ba      	adds	r2, r7, r2
     a02:	7812      	ldrb	r2, [r2, #0]
     a04:	2101      	movs	r1, #1
     a06:	4091      	lsls	r1, r2
     a08:	000a      	movs	r2, r1
     a0a:	601a      	str	r2, [r3, #0]
			break;
     a0c:	e00f      	b.n	a2e <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
     a0e:	2101      	movs	r1, #1
     a10:	2002      	movs	r0, #2
     a12:	4b09      	ldr	r3, [pc, #36]	; (a38 <system_peripheral_unlock+0x94>)
     a14:	4798      	blx	r3
			PAC2->WPCLR.reg = (1 << register_bit_pos);
     a16:	2384      	movs	r3, #132	; 0x84
     a18:	05db      	lsls	r3, r3, #23
     a1a:	220f      	movs	r2, #15
     a1c:	18ba      	adds	r2, r7, r2
     a1e:	7812      	ldrb	r2, [r2, #0]
     a20:	2101      	movs	r1, #1
     a22:	4091      	lsls	r1, r2
     a24:	000a      	movs	r2, r1
     a26:	601a      	str	r2, [r3, #0]
			break;
     a28:	e001      	b.n	a2e <system_peripheral_unlock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     a2a:	2317      	movs	r3, #23
     a2c:	e000      	b.n	a30 <system_peripheral_unlock+0x8c>
	}

	return STATUS_OK;
     a2e:	2300      	movs	r3, #0
}
     a30:	0018      	movs	r0, r3
     a32:	46bd      	mov	sp, r7
     a34:	b004      	add	sp, #16
     a36:	bd80      	pop	{r7, pc}
     a38:	000008b1 	.word	0x000008b1

00000a3c <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     a3c:	b590      	push	{r4, r7, lr}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     a42:	4b16      	ldr	r3, [pc, #88]	; (a9c <SdCard_Initiate+0x60>)
     a44:	4798      	blx	r3
     a46:	0003      	movs	r3, r0
     a48:	603b      	str	r3, [r7, #0]

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     a4a:	1dfc      	adds	r4, r7, #7
     a4c:	2000      	movs	r0, #0
     a4e:	4b14      	ldr	r3, [pc, #80]	; (aa0 <SdCard_Initiate+0x64>)
     a50:	4798      	blx	r3
     a52:	0003      	movs	r3, r0
     a54:	7023      	strb	r3, [r4, #0]
	if (CTRL_FAIL == status) {
     a56:	1dfb      	adds	r3, r7, #7
     a58:	781b      	ldrb	r3, [r3, #0]
     a5a:	2b01      	cmp	r3, #1
     a5c:	d106      	bne.n	a6c <SdCard_Initiate+0x30>
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	2000      	movs	r0, #0
     a62:	4b10      	ldr	r3, [pc, #64]	; (aa4 <SdCard_Initiate+0x68>)
     a64:	4798      	blx	r3
     a66:	0003      	movs	r3, r0
     a68:	2b02      	cmp	r3, #2
     a6a:	d1f9      	bne.n	a60 <SdCard_Initiate+0x24>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     a6c:	4b0b      	ldr	r3, [pc, #44]	; (a9c <SdCard_Initiate+0x60>)
     a6e:	4798      	blx	r3
     a70:	0002      	movs	r2, r0
     a72:	683b      	ldr	r3, [r7, #0]
     a74:	1ad2      	subs	r2, r2, r3
     a76:	23fa      	movs	r3, #250	; 0xfa
     a78:	005b      	lsls	r3, r3, #1
     a7a:	429a      	cmp	r2, r3
     a7c:	d903      	bls.n	a86 <SdCard_Initiate+0x4a>
	{
		status = CTRL_FAIL;
     a7e:	1dfb      	adds	r3, r7, #7
     a80:	2201      	movs	r2, #1
     a82:	701a      	strb	r2, [r3, #0]
		break;
     a84:	e003      	b.n	a8e <SdCard_Initiate+0x52>
	}
} while (CTRL_GOOD != status );
     a86:	1dfb      	adds	r3, r7, #7
     a88:	781b      	ldrb	r3, [r3, #0]
     a8a:	2b00      	cmp	r3, #0
     a8c:	d1dd      	bne.n	a4a <SdCard_Initiate+0xe>

return status;
     a8e:	1dfb      	adds	r3, r7, #7
     a90:	781b      	ldrb	r3, [r3, #0]
}
     a92:	0018      	movs	r0, r3
     a94:	46bd      	mov	sp, r7
     a96:	b003      	add	sp, #12
     a98:	bd90      	pop	{r4, r7, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	000001d1 	.word	0x000001d1
     aa0:	000022e5 	.word	0x000022e5
     aa4:	00001e59 	.word	0x00001e59

00000aa8 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     aa8:	b580      	push	{r7, lr}
     aaa:	b082      	sub	sp, #8
     aac:	af00      	add	r7, sp, #0
     aae:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     ab0:	687b      	ldr	r3, [r7, #4]
     ab2:	7c1b      	ldrb	r3, [r3, #16]
     ab4:	2b00      	cmp	r3, #0
     ab6:	d00b      	beq.n	ad0 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     ab8:	687b      	ldr	r3, [r7, #4]
     aba:	689b      	ldr	r3, [r3, #8]
     abc:	1c5a      	adds	r2, r3, #1
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	68d9      	ldr	r1, [r3, #12]
     ac2:	4b10      	ldr	r3, [pc, #64]	; (b04 <advance_pointer+0x5c>)
     ac4:	0010      	movs	r0, r2
     ac6:	4798      	blx	r3
     ac8:	000b      	movs	r3, r1
     aca:	001a      	movs	r2, r3
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     ad0:	687b      	ldr	r3, [r7, #4]
     ad2:	685b      	ldr	r3, [r3, #4]
     ad4:	1c5a      	adds	r2, r3, #1
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	68d9      	ldr	r1, [r3, #12]
     ada:	4b0a      	ldr	r3, [pc, #40]	; (b04 <advance_pointer+0x5c>)
     adc:	0010      	movs	r0, r2
     ade:	4798      	blx	r3
     ae0:	000b      	movs	r3, r1
     ae2:	001a      	movs	r2, r3
     ae4:	687b      	ldr	r3, [r7, #4]
     ae6:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     ae8:	687b      	ldr	r3, [r7, #4]
     aea:	685a      	ldr	r2, [r3, #4]
     aec:	687b      	ldr	r3, [r7, #4]
     aee:	689b      	ldr	r3, [r3, #8]
     af0:	1ad3      	subs	r3, r2, r3
     af2:	425a      	negs	r2, r3
     af4:	4153      	adcs	r3, r2
     af6:	b2da      	uxtb	r2, r3
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	741a      	strb	r2, [r3, #16]
 }
     afc:	46c0      	nop			; (mov r8, r8)
     afe:	46bd      	mov	sp, r7
     b00:	b002      	add	sp, #8
     b02:	bd80      	pop	{r7, pc}
     b04:	0000b649 	.word	0x0000b649

00000b08 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     b08:	b580      	push	{r7, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	af00      	add	r7, sp, #0
     b0e:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     b10:	687b      	ldr	r3, [r7, #4]
     b12:	2200      	movs	r2, #0
     b14:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	689b      	ldr	r3, [r3, #8]
     b1a:	1c5a      	adds	r2, r3, #1
     b1c:	687b      	ldr	r3, [r7, #4]
     b1e:	68d9      	ldr	r1, [r3, #12]
     b20:	4b05      	ldr	r3, [pc, #20]	; (b38 <retreat_pointer+0x30>)
     b22:	0010      	movs	r0, r2
     b24:	4798      	blx	r3
     b26:	000b      	movs	r3, r1
     b28:	001a      	movs	r2, r3
     b2a:	687b      	ldr	r3, [r7, #4]
     b2c:	609a      	str	r2, [r3, #8]
 }
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	46bd      	mov	sp, r7
     b32:	b002      	add	sp, #8
     b34:	bd80      	pop	{r7, pc}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	0000b649 	.word	0x0000b649

00000b3c <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     b3c:	b580      	push	{r7, lr}
     b3e:	b084      	sub	sp, #16
     b40:	af00      	add	r7, sp, #0
     b42:	6078      	str	r0, [r7, #4]
     b44:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     b46:	2014      	movs	r0, #20
     b48:	4b09      	ldr	r3, [pc, #36]	; (b70 <circular_buf_init+0x34>)
     b4a:	4798      	blx	r3
     b4c:	0003      	movs	r3, r0
     b4e:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     b50:	68fb      	ldr	r3, [r7, #12]
     b52:	687a      	ldr	r2, [r7, #4]
     b54:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     b56:	68fb      	ldr	r3, [r7, #12]
     b58:	683a      	ldr	r2, [r7, #0]
     b5a:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	0018      	movs	r0, r3
     b60:	4b04      	ldr	r3, [pc, #16]	; (b74 <circular_buf_init+0x38>)
     b62:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     b64:	68fb      	ldr	r3, [r7, #12]
 }
     b66:	0018      	movs	r0, r3
     b68:	46bd      	mov	sp, r7
     b6a:	b004      	add	sp, #16
     b6c:	bd80      	pop	{r7, pc}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	0000b8c5 	.word	0x0000b8c5
     b74:	00000b79 	.word	0x00000b79

00000b78 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     b78:	b580      	push	{r7, lr}
     b7a:	b082      	sub	sp, #8
     b7c:	af00      	add	r7, sp, #0
     b7e:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	2200      	movs	r2, #0
     b84:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	2200      	movs	r2, #0
     b8a:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	2200      	movs	r2, #0
     b90:	741a      	strb	r2, [r3, #16]
 }
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	46bd      	mov	sp, r7
     b96:	b002      	add	sp, #8
     b98:	bd80      	pop	{r7, pc}
	...

00000b9c <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     b9c:	b580      	push	{r7, lr}
     b9e:	b082      	sub	sp, #8
     ba0:	af00      	add	r7, sp, #0
     ba2:	6078      	str	r0, [r7, #4]
     ba4:	000a      	movs	r2, r1
     ba6:	1cfb      	adds	r3, r7, #3
     ba8:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	681a      	ldr	r2, [r3, #0]
     bae:	687b      	ldr	r3, [r7, #4]
     bb0:	685b      	ldr	r3, [r3, #4]
     bb2:	18d3      	adds	r3, r2, r3
     bb4:	1cfa      	adds	r2, r7, #3
     bb6:	7812      	ldrb	r2, [r2, #0]
     bb8:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     bba:	687b      	ldr	r3, [r7, #4]
     bbc:	0018      	movs	r0, r3
     bbe:	4b03      	ldr	r3, [pc, #12]	; (bcc <circular_buf_put+0x30>)
     bc0:	4798      	blx	r3
 }
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	46bd      	mov	sp, r7
     bc6:	b002      	add	sp, #8
     bc8:	bd80      	pop	{r7, pc}
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	00000aa9 	.word	0x00000aa9

00000bd0 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     bd0:	b580      	push	{r7, lr}
     bd2:	b084      	sub	sp, #16
     bd4:	af00      	add	r7, sp, #0
     bd6:	6078      	str	r0, [r7, #4]
     bd8:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     bda:	2301      	movs	r3, #1
     bdc:	425b      	negs	r3, r3
     bde:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     be0:	687b      	ldr	r3, [r7, #4]
     be2:	0018      	movs	r0, r3
     be4:	4b0d      	ldr	r3, [pc, #52]	; (c1c <circular_buf_get+0x4c>)
     be6:	4798      	blx	r3
     be8:	0003      	movs	r3, r0
     bea:	001a      	movs	r2, r3
     bec:	2301      	movs	r3, #1
     bee:	4053      	eors	r3, r2
     bf0:	b2db      	uxtb	r3, r3
     bf2:	2b00      	cmp	r3, #0
     bf4:	d00d      	beq.n	c12 <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     bf6:	687b      	ldr	r3, [r7, #4]
     bf8:	681a      	ldr	r2, [r3, #0]
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	689b      	ldr	r3, [r3, #8]
     bfe:	18d3      	adds	r3, r2, r3
     c00:	781a      	ldrb	r2, [r3, #0]
     c02:	683b      	ldr	r3, [r7, #0]
     c04:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	0018      	movs	r0, r3
     c0a:	4b05      	ldr	r3, [pc, #20]	; (c20 <circular_buf_get+0x50>)
     c0c:	4798      	blx	r3

		 r = 0;
     c0e:	2300      	movs	r3, #0
     c10:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     c12:	68fb      	ldr	r3, [r7, #12]
 }
     c14:	0018      	movs	r0, r3
     c16:	46bd      	mov	sp, r7
     c18:	b004      	add	sp, #16
     c1a:	bd80      	pop	{r7, pc}
     c1c:	00000c25 	.word	0x00000c25
     c20:	00000b09 	.word	0x00000b09

00000c24 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     c24:	b580      	push	{r7, lr}
     c26:	b082      	sub	sp, #8
     c28:	af00      	add	r7, sp, #0
     c2a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     c2c:	687b      	ldr	r3, [r7, #4]
     c2e:	7c1b      	ldrb	r3, [r3, #16]
     c30:	2201      	movs	r2, #1
     c32:	4053      	eors	r3, r2
     c34:	b2db      	uxtb	r3, r3
     c36:	2b00      	cmp	r3, #0
     c38:	d007      	beq.n	c4a <circular_buf_empty+0x26>
     c3a:	687b      	ldr	r3, [r7, #4]
     c3c:	685a      	ldr	r2, [r3, #4]
     c3e:	687b      	ldr	r3, [r7, #4]
     c40:	689b      	ldr	r3, [r3, #8]
     c42:	429a      	cmp	r2, r3
     c44:	d101      	bne.n	c4a <circular_buf_empty+0x26>
     c46:	2301      	movs	r3, #1
     c48:	e000      	b.n	c4c <circular_buf_empty+0x28>
     c4a:	2300      	movs	r3, #0
     c4c:	1c1a      	adds	r2, r3, #0
     c4e:	2301      	movs	r3, #1
     c50:	4013      	ands	r3, r2
     c52:	b2db      	uxtb	r3, r3
 }
     c54:	0018      	movs	r0, r3
     c56:	46bd      	mov	sp, r7
     c58:	b002      	add	sp, #8
     c5a:	bd80      	pop	{r7, pc}

00000c5c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     c5c:	b580      	push	{r7, lr}
     c5e:	b082      	sub	sp, #8
     c60:	af00      	add	r7, sp, #0
     c62:	0002      	movs	r2, r0
     c64:	1dfb      	adds	r3, r7, #7
     c66:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c68:	4b06      	ldr	r3, [pc, #24]	; (c84 <system_interrupt_enable+0x28>)
     c6a:	1dfa      	adds	r2, r7, #7
     c6c:	7812      	ldrb	r2, [r2, #0]
     c6e:	0011      	movs	r1, r2
     c70:	221f      	movs	r2, #31
     c72:	400a      	ands	r2, r1
     c74:	2101      	movs	r1, #1
     c76:	4091      	lsls	r1, r2
     c78:	000a      	movs	r2, r1
     c7a:	601a      	str	r2, [r3, #0]
}
     c7c:	46c0      	nop			; (mov r8, r8)
     c7e:	46bd      	mov	sp, r7
     c80:	b002      	add	sp, #8
     c82:	bd80      	pop	{r7, pc}
     c84:	e000e100 	.word	0xe000e100

00000c88 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     c88:	b580      	push	{r7, lr}
     c8a:	b082      	sub	sp, #8
     c8c:	af00      	add	r7, sp, #0
     c8e:	0002      	movs	r2, r0
     c90:	1dfb      	adds	r3, r7, #7
     c92:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c94:	4a07      	ldr	r2, [pc, #28]	; (cb4 <system_interrupt_disable+0x2c>)
     c96:	1dfb      	adds	r3, r7, #7
     c98:	781b      	ldrb	r3, [r3, #0]
     c9a:	0019      	movs	r1, r3
     c9c:	231f      	movs	r3, #31
     c9e:	400b      	ands	r3, r1
     ca0:	2101      	movs	r1, #1
     ca2:	4099      	lsls	r1, r3
     ca4:	000b      	movs	r3, r1
     ca6:	0019      	movs	r1, r3
     ca8:	2380      	movs	r3, #128	; 0x80
     caa:	50d1      	str	r1, [r2, r3]
}
     cac:	46c0      	nop			; (mov r8, r8)
     cae:	46bd      	mov	sp, r7
     cb0:	b002      	add	sp, #8
     cb2:	bd80      	pop	{r7, pc}
     cb4:	e000e100 	.word	0xe000e100

00000cb8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     cb8:	b580      	push	{r7, lr}
     cba:	b084      	sub	sp, #16
     cbc:	af00      	add	r7, sp, #0
     cbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     cc0:	687b      	ldr	r3, [r7, #4]
     cc2:	681b      	ldr	r3, [r3, #0]
     cc4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     cc6:	68fb      	ldr	r3, [r7, #12]
     cc8:	69db      	ldr	r3, [r3, #28]
     cca:	1e5a      	subs	r2, r3, #1
     ccc:	4193      	sbcs	r3, r2
     cce:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     cd0:	0018      	movs	r0, r3
     cd2:	46bd      	mov	sp, r7
     cd4:	b004      	add	sp, #16
     cd6:	bd80      	pop	{r7, pc}

00000cd8 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     cd8:	b580      	push	{r7, lr}
     cda:	b082      	sub	sp, #8
     cdc:	af00      	add	r7, sp, #0
     cde:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ce0:	46c0      	nop			; (mov r8, r8)
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	0018      	movs	r0, r3
     ce6:	4b04      	ldr	r3, [pc, #16]	; (cf8 <_usart_wait_for_sync+0x20>)
     ce8:	4798      	blx	r3
     cea:	1e03      	subs	r3, r0, #0
     cec:	d1f9      	bne.n	ce2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	46bd      	mov	sp, r7
     cf2:	b002      	add	sp, #8
     cf4:	bd80      	pop	{r7, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	00000cb9 	.word	0x00000cb9

00000cfc <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     cfc:	b580      	push	{r7, lr}
     cfe:	b082      	sub	sp, #8
     d00:	af00      	add	r7, sp, #0
     d02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	2280      	movs	r2, #128	; 0x80
     d08:	05d2      	lsls	r2, r2, #23
     d0a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     d0c:	687b      	ldr	r3, [r7, #4]
     d0e:	2200      	movs	r2, #0
     d10:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     d12:	687b      	ldr	r3, [r7, #4]
     d14:	22ff      	movs	r2, #255	; 0xff
     d16:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	2200      	movs	r2, #0
     d1c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	2200      	movs	r2, #0
     d22:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	2296      	movs	r2, #150	; 0x96
     d28:	0192      	lsls	r2, r2, #6
     d2a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	2224      	movs	r2, #36	; 0x24
     d30:	2101      	movs	r1, #1
     d32:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	2225      	movs	r2, #37	; 0x25
     d38:	2101      	movs	r1, #1
     d3a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     d3c:	687b      	ldr	r3, [r7, #4]
     d3e:	2226      	movs	r2, #38	; 0x26
     d40:	2100      	movs	r1, #0
     d42:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     d44:	687b      	ldr	r3, [r7, #4]
     d46:	2227      	movs	r2, #39	; 0x27
     d48:	2100      	movs	r1, #0
     d4a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	2200      	movs	r2, #0
     d50:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	2288      	movs	r2, #136	; 0x88
     d56:	0352      	lsls	r2, r2, #13
     d58:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	222c      	movs	r2, #44	; 0x2c
     d5e:	2100      	movs	r1, #0
     d60:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     d62:	687b      	ldr	r3, [r7, #4]
     d64:	222d      	movs	r2, #45	; 0x2d
     d66:	2100      	movs	r1, #0
     d68:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     d6a:	687b      	ldr	r3, [r7, #4]
     d6c:	2200      	movs	r2, #0
     d6e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     d70:	687b      	ldr	r3, [r7, #4]
     d72:	2200      	movs	r2, #0
     d74:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	2200      	movs	r2, #0
     d7a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	2200      	movs	r2, #0
     d80:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	2200      	movs	r2, #0
     d86:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	2200      	movs	r2, #0
     d8c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	2200      	movs	r2, #0
     d92:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     d94:	687b      	ldr	r3, [r7, #4]
     d96:	2200      	movs	r2, #0
     d98:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     d9a:	687b      	ldr	r3, [r7, #4]
     d9c:	2200      	movs	r2, #0
     d9e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	2200      	movs	r2, #0
     da4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	2213      	movs	r2, #19
     daa:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     dac:	687b      	ldr	r3, [r7, #4]
     dae:	2200      	movs	r2, #0
     db0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	46bd      	mov	sp, r7
     db6:	b002      	add	sp, #8
     db8:	bd80      	pop	{r7, pc}
	...

00000dbc <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     dbc:	b580      	push	{r7, lr}
     dbe:	b084      	sub	sp, #16
     dc0:	af00      	add	r7, sp, #0
     dc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	681b      	ldr	r3, [r3, #0]
     dce:	0018      	movs	r0, r3
     dd0:	4b09      	ldr	r3, [pc, #36]	; (df8 <usart_enable+0x3c>)
     dd2:	4798      	blx	r3
     dd4:	0003      	movs	r3, r0
     dd6:	0018      	movs	r0, r3
     dd8:	4b08      	ldr	r3, [pc, #32]	; (dfc <usart_enable+0x40>)
     dda:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	0018      	movs	r0, r3
     de0:	4b07      	ldr	r3, [pc, #28]	; (e00 <usart_enable+0x44>)
     de2:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     de4:	68fb      	ldr	r3, [r7, #12]
     de6:	681b      	ldr	r3, [r3, #0]
     de8:	2202      	movs	r2, #2
     dea:	431a      	orrs	r2, r3
     dec:	68fb      	ldr	r3, [r7, #12]
     dee:	601a      	str	r2, [r3, #0]
}
     df0:	46c0      	nop			; (mov r8, r8)
     df2:	46bd      	mov	sp, r7
     df4:	b004      	add	sp, #16
     df6:	bd80      	pop	{r7, pc}
     df8:	0000403d 	.word	0x0000403d
     dfc:	00000c5d 	.word	0x00000c5d
     e00:	00000cd9 	.word	0x00000cd9

00000e04 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     e04:	b580      	push	{r7, lr}
     e06:	b084      	sub	sp, #16
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	681b      	ldr	r3, [r3, #0]
     e10:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	0018      	movs	r0, r3
     e18:	4b0a      	ldr	r3, [pc, #40]	; (e44 <usart_disable+0x40>)
     e1a:	4798      	blx	r3
     e1c:	0003      	movs	r3, r0
     e1e:	0018      	movs	r0, r3
     e20:	4b09      	ldr	r3, [pc, #36]	; (e48 <usart_disable+0x44>)
     e22:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     e24:	687b      	ldr	r3, [r7, #4]
     e26:	0018      	movs	r0, r3
     e28:	4b08      	ldr	r3, [pc, #32]	; (e4c <usart_disable+0x48>)
     e2a:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     e2c:	68fb      	ldr	r3, [r7, #12]
     e2e:	681b      	ldr	r3, [r3, #0]
     e30:	2202      	movs	r2, #2
     e32:	4393      	bics	r3, r2
     e34:	001a      	movs	r2, r3
     e36:	68fb      	ldr	r3, [r7, #12]
     e38:	601a      	str	r2, [r3, #0]
}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	46bd      	mov	sp, r7
     e3e:	b004      	add	sp, #16
     e40:	bd80      	pop	{r7, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	0000403d 	.word	0x0000403d
     e48:	00000c89 	.word	0x00000c89
     e4c:	00000cd9 	.word	0x00000cd9

00000e50 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     e50:	b580      	push	{r7, lr}
     e52:	b082      	sub	sp, #8
     e54:	af00      	add	r7, sp, #0
     e56:	6078      	str	r0, [r7, #4]
     e58:	000a      	movs	r2, r1
     e5a:	1cfb      	adds	r3, r7, #3
     e5c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	2231      	movs	r2, #49	; 0x31
     e62:	5c9b      	ldrb	r3, [r3, r2]
     e64:	b25a      	sxtb	r2, r3
     e66:	1cfb      	adds	r3, r7, #3
     e68:	781b      	ldrb	r3, [r3, #0]
     e6a:	2101      	movs	r1, #1
     e6c:	4099      	lsls	r1, r3
     e6e:	000b      	movs	r3, r1
     e70:	b25b      	sxtb	r3, r3
     e72:	4313      	orrs	r3, r2
     e74:	b25b      	sxtb	r3, r3
     e76:	b2d9      	uxtb	r1, r3
     e78:	687b      	ldr	r3, [r7, #4]
     e7a:	2231      	movs	r2, #49	; 0x31
     e7c:	5499      	strb	r1, [r3, r2]

}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	46bd      	mov	sp, r7
     e82:	b002      	add	sp, #8
     e84:	bd80      	pop	{r7, pc}
	...

00000e88 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     e88:	b580      	push	{r7, lr}
     e8a:	b082      	sub	sp, #8
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
     e90:	000a      	movs	r2, r1
     e92:	1cfb      	adds	r3, r7, #3
     e94:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	1cfb      	adds	r3, r7, #3
     e9a:	781b      	ldrb	r3, [r3, #0]
     e9c:	b29a      	uxth	r2, r3
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	0011      	movs	r1, r2
     ea2:	0018      	movs	r0, r3
     ea4:	4b04      	ldr	r3, [pc, #16]	; (eb8 <usart_serial_putchar+0x30>)
     ea6:	4798      	blx	r3
     ea8:	1e03      	subs	r3, r0, #0
     eaa:	d1f5      	bne.n	e98 <usart_serial_putchar+0x10>

	return STATUS_OK;
     eac:	2300      	movs	r3, #0
}
     eae:	0018      	movs	r0, r3
     eb0:	46bd      	mov	sp, r7
     eb2:	b002      	add	sp, #8
     eb4:	bd80      	pop	{r7, pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00005755 	.word	0x00005755

00000ebc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     ebc:	b580      	push	{r7, lr}
     ebe:	b084      	sub	sp, #16
     ec0:	af00      	add	r7, sp, #0
     ec2:	6078      	str	r0, [r7, #4]
     ec4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     ec6:	230e      	movs	r3, #14
     ec8:	18fb      	adds	r3, r7, r3
     eca:	2200      	movs	r2, #0
     ecc:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	230e      	movs	r3, #14
     ed2:	18fa      	adds	r2, r7, r3
     ed4:	687b      	ldr	r3, [r7, #4]
     ed6:	0011      	movs	r1, r2
     ed8:	0018      	movs	r0, r3
     eda:	4b07      	ldr	r3, [pc, #28]	; (ef8 <usart_serial_getchar+0x3c>)
     edc:	4798      	blx	r3
     ede:	1e03      	subs	r3, r0, #0
     ee0:	d1f6      	bne.n	ed0 <usart_serial_getchar+0x14>

	*c = temp;
     ee2:	230e      	movs	r3, #14
     ee4:	18fb      	adds	r3, r7, r3
     ee6:	881b      	ldrh	r3, [r3, #0]
     ee8:	b2da      	uxtb	r2, r3
     eea:	683b      	ldr	r3, [r7, #0]
     eec:	701a      	strb	r2, [r3, #0]
}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	46bd      	mov	sp, r7
     ef2:	b004      	add	sp, #16
     ef4:	bd80      	pop	{r7, pc}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	000057b9 	.word	0x000057b9

00000efc <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     efc:	b580      	push	{r7, lr}
     efe:	b084      	sub	sp, #16
     f00:	af00      	add	r7, sp, #0
     f02:	60f8      	str	r0, [r7, #12]
     f04:	60b9      	str	r1, [r7, #8]
     f06:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     f08:	4b0d      	ldr	r3, [pc, #52]	; (f40 <stdio_serial_init+0x44>)
     f0a:	68fa      	ldr	r2, [r7, #12]
     f0c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     f0e:	4b0d      	ldr	r3, [pc, #52]	; (f44 <stdio_serial_init+0x48>)
     f10:	4a0d      	ldr	r2, [pc, #52]	; (f48 <stdio_serial_init+0x4c>)
     f12:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     f14:	4b0d      	ldr	r3, [pc, #52]	; (f4c <stdio_serial_init+0x50>)
     f16:	4a0e      	ldr	r2, [pc, #56]	; (f50 <stdio_serial_init+0x54>)
     f18:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     f1a:	4b0e      	ldr	r3, [pc, #56]	; (f54 <stdio_serial_init+0x58>)
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	689b      	ldr	r3, [r3, #8]
     f20:	2100      	movs	r1, #0
     f22:	0018      	movs	r0, r3
     f24:	4b0c      	ldr	r3, [pc, #48]	; (f58 <stdio_serial_init+0x5c>)
     f26:	4798      	blx	r3
	setbuf(stdin, NULL);
     f28:	4b0a      	ldr	r3, [pc, #40]	; (f54 <stdio_serial_init+0x58>)
     f2a:	681b      	ldr	r3, [r3, #0]
     f2c:	685b      	ldr	r3, [r3, #4]
     f2e:	2100      	movs	r1, #0
     f30:	0018      	movs	r0, r3
     f32:	4b09      	ldr	r3, [pc, #36]	; (f58 <stdio_serial_init+0x5c>)
     f34:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	46bd      	mov	sp, r7
     f3a:	b004      	add	sp, #16
     f3c:	bd80      	pop	{r7, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	20000a40 	.word	0x20000a40
     f44:	20000a3c 	.word	0x20000a3c
     f48:	00000e89 	.word	0x00000e89
     f4c:	20000a38 	.word	0x20000a38
     f50:	00000ebd 	.word	0x00000ebd
     f54:	20000078 	.word	0x20000078
     f58:	0000ba71 	.word	0x0000ba71

00000f5c <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @details		Initializes the UART - sets up the SERCOM to act as UART and registers the callbacks for
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 *****************************************************************************/
void InitializeSerialConsole() {
     f5c:	b580      	push	{r7, lr}
     f5e:	af00      	add	r7, sp, #0

    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *) rxCharacterBuffer, RX_BUFFER_SIZE);
     f60:	2380      	movs	r3, #128	; 0x80
     f62:	00da      	lsls	r2, r3, #3
     f64:	4b0f      	ldr	r3, [pc, #60]	; (fa4 <InitializeSerialConsole+0x48>)
     f66:	0011      	movs	r1, r2
     f68:	0018      	movs	r0, r3
     f6a:	4b0f      	ldr	r3, [pc, #60]	; (fa8 <InitializeSerialConsole+0x4c>)
     f6c:	4798      	blx	r3
     f6e:	0002      	movs	r2, r0
     f70:	4b0e      	ldr	r3, [pc, #56]	; (fac <InitializeSerialConsole+0x50>)
     f72:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *) txCharacterBuffer, TX_BUFFER_SIZE);
     f74:	2380      	movs	r3, #128	; 0x80
     f76:	00da      	lsls	r2, r3, #3
     f78:	4b0d      	ldr	r3, [pc, #52]	; (fb0 <InitializeSerialConsole+0x54>)
     f7a:	0011      	movs	r1, r2
     f7c:	0018      	movs	r0, r3
     f7e:	4b0a      	ldr	r3, [pc, #40]	; (fa8 <InitializeSerialConsole+0x4c>)
     f80:	4798      	blx	r3
     f82:	0002      	movs	r2, r0
     f84:	4b0b      	ldr	r3, [pc, #44]	; (fb4 <InitializeSerialConsole+0x58>)
     f86:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
     f88:	4b0b      	ldr	r3, [pc, #44]	; (fb8 <InitializeSerialConsole+0x5c>)
     f8a:	4798      	blx	r3
    configure_usart_callbacks();
     f8c:	4b0b      	ldr	r3, [pc, #44]	; (fbc <InitializeSerialConsole+0x60>)
     f8e:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *) &latestRx, 1);   // Kicks off constant reading of characters
     f90:	490b      	ldr	r1, [pc, #44]	; (fc0 <InitializeSerialConsole+0x64>)
     f92:	4b0c      	ldr	r3, [pc, #48]	; (fc4 <InitializeSerialConsole+0x68>)
     f94:	2201      	movs	r2, #1
     f96:	0018      	movs	r0, r3
     f98:	4b0b      	ldr	r3, [pc, #44]	; (fc8 <InitializeSerialConsole+0x6c>)
     f9a:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
     f9c:	46c0      	nop			; (mov r8, r8)
     f9e:	46bd      	mov	sp, r7
     fa0:	bd80      	pop	{r7, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	20000610 	.word	0x20000610
     fa8:	00000b3d 	.word	0x00000b3d
     fac:	20000208 	.word	0x20000208
     fb0:	20000210 	.word	0x20000210
     fb4:	20000a14 	.word	0x20000a14
     fb8:	00001091 	.word	0x00001091
     fbc:	00001119 	.word	0x00001119
     fc0:	2000020c 	.word	0x2000020c
     fc4:	200001d4 	.word	0x200001d4
     fc8:	00005a75 	.word	0x00005a75

00000fcc <DeinitializeSerialConsole>:

/**
 * @fn			void DeinitializeSerialConsole(void)
 *****************************************************************************/
void DeinitializeSerialConsole() { usart_disable(&usart_instance); }
     fcc:	b580      	push	{r7, lr}
     fce:	af00      	add	r7, sp, #0
     fd0:	4b03      	ldr	r3, [pc, #12]	; (fe0 <DeinitializeSerialConsole+0x14>)
     fd2:	0018      	movs	r0, r3
     fd4:	4b03      	ldr	r3, [pc, #12]	; (fe4 <DeinitializeSerialConsole+0x18>)
     fd6:	4798      	blx	r3
     fd8:	46c0      	nop			; (mov r8, r8)
     fda:	46bd      	mov	sp, r7
     fdc:	bd80      	pop	{r7, pc}
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	200001d4 	.word	0x200001d4
     fe4:	00000e05 	.word	0x00000e05

00000fe8 <SerialConsoleWriteString>:
 * @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the
 *				text send to the uart
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
 * @note		Use to send a string of characters to the user via UART
 *****************************************************************************/
void SerialConsoleWriteString(char *string) {
     fe8:	b580      	push	{r7, lr}
     fea:	b084      	sub	sp, #16
     fec:	af00      	add	r7, sp, #0
     fee:	6078      	str	r0, [r7, #4]
    if (string != NULL) {
     ff0:	687b      	ldr	r3, [r7, #4]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d02a      	beq.n	104c <SerialConsoleWriteString+0x64>
        for (size_t iter = 0; iter < strlen(string); iter++) {
     ff6:	2300      	movs	r3, #0
     ff8:	60fb      	str	r3, [r7, #12]
     ffa:	e00b      	b.n	1014 <SerialConsoleWriteString+0x2c>
            circular_buf_put(cbufTx, string[iter]);
     ffc:	4b15      	ldr	r3, [pc, #84]	; (1054 <SerialConsoleWriteString+0x6c>)
     ffe:	6818      	ldr	r0, [r3, #0]
    1000:	687a      	ldr	r2, [r7, #4]
    1002:	68fb      	ldr	r3, [r7, #12]
    1004:	18d3      	adds	r3, r2, r3
    1006:	781b      	ldrb	r3, [r3, #0]
    1008:	0019      	movs	r1, r3
    100a:	4b13      	ldr	r3, [pc, #76]	; (1058 <SerialConsoleWriteString+0x70>)
    100c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
    100e:	68fb      	ldr	r3, [r7, #12]
    1010:	3301      	adds	r3, #1
    1012:	60fb      	str	r3, [r7, #12]
    1014:	687b      	ldr	r3, [r7, #4]
    1016:	0018      	movs	r0, r3
    1018:	4b10      	ldr	r3, [pc, #64]	; (105c <SerialConsoleWriteString+0x74>)
    101a:	4798      	blx	r3
    101c:	0002      	movs	r2, r0
    101e:	68fb      	ldr	r3, [r7, #12]
    1020:	429a      	cmp	r2, r3
    1022:	d8eb      	bhi.n	ffc <SerialConsoleWriteString+0x14>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
    1024:	4b0e      	ldr	r3, [pc, #56]	; (1060 <SerialConsoleWriteString+0x78>)
    1026:	2101      	movs	r1, #1
    1028:	0018      	movs	r0, r3
    102a:	4b0e      	ldr	r3, [pc, #56]	; (1064 <SerialConsoleWriteString+0x7c>)
    102c:	4798      	blx	r3
    102e:	1e03      	subs	r3, r0, #0
    1030:	d10c      	bne.n	104c <SerialConsoleWriteString+0x64>
            circular_buf_get(cbufTx, (uint8_t *) &latestTx);   // Perform only if the SERCOM TX is free (not busy)
    1032:	4b08      	ldr	r3, [pc, #32]	; (1054 <SerialConsoleWriteString+0x6c>)
    1034:	681b      	ldr	r3, [r3, #0]
    1036:	4a0c      	ldr	r2, [pc, #48]	; (1068 <SerialConsoleWriteString+0x80>)
    1038:	0011      	movs	r1, r2
    103a:	0018      	movs	r0, r3
    103c:	4b0b      	ldr	r3, [pc, #44]	; (106c <SerialConsoleWriteString+0x84>)
    103e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
    1040:	4909      	ldr	r1, [pc, #36]	; (1068 <SerialConsoleWriteString+0x80>)
    1042:	4b07      	ldr	r3, [pc, #28]	; (1060 <SerialConsoleWriteString+0x78>)
    1044:	2201      	movs	r2, #1
    1046:	0018      	movs	r0, r3
    1048:	4b09      	ldr	r3, [pc, #36]	; (1070 <SerialConsoleWriteString+0x88>)
    104a:	4798      	blx	r3
        }
    }
}
    104c:	46c0      	nop			; (mov r8, r8)
    104e:	46bd      	mov	sp, r7
    1050:	b004      	add	sp, #16
    1052:	bd80      	pop	{r7, pc}
    1054:	20000a14 	.word	0x20000a14
    1058:	00000b9d 	.word	0x00000b9d
    105c:	0000bc41 	.word	0x0000bc41
    1060:	200001d4 	.word	0x200001d4
    1064:	00005abd 	.word	0x00005abd
    1068:	20000a10 	.word	0x20000a10
    106c:	00000bd1 	.word	0x00000bd1
    1070:	00005a2d 	.word	0x00005a2d

00001074 <LogMessage>:
/**
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 *****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...){};
    1074:	b40e      	push	{r1, r2, r3}
    1076:	b580      	push	{r7, lr}
    1078:	b083      	sub	sp, #12
    107a:	af00      	add	r7, sp, #0
    107c:	0002      	movs	r2, r0
    107e:	1dfb      	adds	r3, r7, #7
    1080:	701a      	strb	r2, [r3, #0]
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	46bd      	mov	sp, r7
    1086:	b003      	add	sp, #12
    1088:	bc80      	pop	{r7}
    108a:	bc08      	pop	{r3}
    108c:	b003      	add	sp, #12
    108e:	4718      	bx	r3

00001090 <configure_usart>:
/**
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 *****************************************************************************/
static void configure_usart(void) {
    1090:	b580      	push	{r7, lr}
    1092:	b090      	sub	sp, #64	; 0x40
    1094:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    1096:	003b      	movs	r3, r7
    1098:	0018      	movs	r0, r3
    109a:	4b17      	ldr	r3, [pc, #92]	; (10f8 <configure_usart+0x68>)
    109c:	4798      	blx	r3

    config_usart.baudrate = 115200;
    109e:	003b      	movs	r3, r7
    10a0:	22e1      	movs	r2, #225	; 0xe1
    10a2:	0252      	lsls	r2, r2, #9
    10a4:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    10a6:	003b      	movs	r3, r7
    10a8:	22c4      	movs	r2, #196	; 0xc4
    10aa:	0392      	lsls	r2, r2, #14
    10ac:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    10ae:	003b      	movs	r3, r7
    10b0:	2201      	movs	r2, #1
    10b2:	4252      	negs	r2, r2
    10b4:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    10b6:	003b      	movs	r3, r7
    10b8:	2201      	movs	r2, #1
    10ba:	4252      	negs	r2, r2
    10bc:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    10be:	003b      	movs	r3, r7
    10c0:	4a0e      	ldr	r2, [pc, #56]	; (10fc <configure_usart+0x6c>)
    10c2:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    10c4:	003b      	movs	r3, r7
    10c6:	4a0e      	ldr	r2, [pc, #56]	; (1100 <configure_usart+0x70>)
    10c8:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	003a      	movs	r2, r7
    10ce:	490d      	ldr	r1, [pc, #52]	; (1104 <configure_usart+0x74>)
    10d0:	4b0d      	ldr	r3, [pc, #52]	; (1108 <configure_usart+0x78>)
    10d2:	0018      	movs	r0, r3
    10d4:	4b0d      	ldr	r3, [pc, #52]	; (110c <configure_usart+0x7c>)
    10d6:	4798      	blx	r3
    10d8:	1e03      	subs	r3, r0, #0
    10da:	d1f7      	bne.n	10cc <configure_usart+0x3c>
    }
    stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    10dc:	003a      	movs	r2, r7
    10de:	4909      	ldr	r1, [pc, #36]	; (1104 <configure_usart+0x74>)
    10e0:	4b09      	ldr	r3, [pc, #36]	; (1108 <configure_usart+0x78>)
    10e2:	0018      	movs	r0, r3
    10e4:	4b0a      	ldr	r3, [pc, #40]	; (1110 <configure_usart+0x80>)
    10e6:	4798      	blx	r3
    usart_enable(&usart_instance);
    10e8:	4b07      	ldr	r3, [pc, #28]	; (1108 <configure_usart+0x78>)
    10ea:	0018      	movs	r0, r3
    10ec:	4b09      	ldr	r3, [pc, #36]	; (1114 <configure_usart+0x84>)
    10ee:	4798      	blx	r3
}
    10f0:	46c0      	nop			; (mov r8, r8)
    10f2:	46bd      	mov	sp, r7
    10f4:	b010      	add	sp, #64	; 0x40
    10f6:	bd80      	pop	{r7, pc}
    10f8:	00000cfd 	.word	0x00000cfd
    10fc:	002a0003 	.word	0x002a0003
    1100:	002b0003 	.word	0x002b0003
    1104:	42001800 	.word	0x42001800
    1108:	200001d4 	.word	0x200001d4
    110c:	000054e1 	.word	0x000054e1
    1110:	00000efd 	.word	0x00000efd
    1114:	00000dbd 	.word	0x00000dbd

00001118 <configure_usart_callbacks>:
/**
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 *****************************************************************************/
static void configure_usart_callbacks(void) {
    1118:	b580      	push	{r7, lr}
    111a:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    111c:	490c      	ldr	r1, [pc, #48]	; (1150 <configure_usart_callbacks+0x38>)
    111e:	4b0d      	ldr	r3, [pc, #52]	; (1154 <configure_usart_callbacks+0x3c>)
    1120:	2200      	movs	r2, #0
    1122:	0018      	movs	r0, r3
    1124:	4b0c      	ldr	r3, [pc, #48]	; (1158 <configure_usart_callbacks+0x40>)
    1126:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    1128:	490c      	ldr	r1, [pc, #48]	; (115c <configure_usart_callbacks+0x44>)
    112a:	4b0a      	ldr	r3, [pc, #40]	; (1154 <configure_usart_callbacks+0x3c>)
    112c:	2201      	movs	r2, #1
    112e:	0018      	movs	r0, r3
    1130:	4b09      	ldr	r3, [pc, #36]	; (1158 <configure_usart_callbacks+0x40>)
    1132:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    1134:	4b07      	ldr	r3, [pc, #28]	; (1154 <configure_usart_callbacks+0x3c>)
    1136:	2100      	movs	r1, #0
    1138:	0018      	movs	r0, r3
    113a:	4b09      	ldr	r3, [pc, #36]	; (1160 <configure_usart_callbacks+0x48>)
    113c:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    113e:	4b05      	ldr	r3, [pc, #20]	; (1154 <configure_usart_callbacks+0x3c>)
    1140:	2101      	movs	r1, #1
    1142:	0018      	movs	r0, r3
    1144:	4b06      	ldr	r3, [pc, #24]	; (1160 <configure_usart_callbacks+0x48>)
    1146:	4798      	blx	r3
}
    1148:	46c0      	nop			; (mov r8, r8)
    114a:	46bd      	mov	sp, r7
    114c:	bd80      	pop	{r7, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	00001175 	.word	0x00001175
    1154:	200001d4 	.word	0x200001d4
    1158:	000059e5 	.word	0x000059e5
    115c:	00001165 	.word	0x00001165
    1160:	00000e51 	.word	0x00000e51

00001164 <usart_read_callback>:
/**
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module) {}
    1164:	b580      	push	{r7, lr}
    1166:	b082      	sub	sp, #8
    1168:	af00      	add	r7, sp, #0
    116a:	6078      	str	r0, [r7, #4]
    116c:	46c0      	nop			; (mov r8, r8)
    116e:	46bd      	mov	sp, r7
    1170:	b002      	add	sp, #8
    1172:	bd80      	pop	{r7, pc}

00001174 <usart_write_callback>:
/**
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module) {
    1174:	b580      	push	{r7, lr}
    1176:	b082      	sub	sp, #8
    1178:	af00      	add	r7, sp, #0
    117a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *) &latestTx) != -1)   // Only continue if there are more characters to send
    117c:	4b09      	ldr	r3, [pc, #36]	; (11a4 <usart_write_callback+0x30>)
    117e:	681b      	ldr	r3, [r3, #0]
    1180:	4a09      	ldr	r2, [pc, #36]	; (11a8 <usart_write_callback+0x34>)
    1182:	0011      	movs	r1, r2
    1184:	0018      	movs	r0, r3
    1186:	4b09      	ldr	r3, [pc, #36]	; (11ac <usart_write_callback+0x38>)
    1188:	4798      	blx	r3
    118a:	0003      	movs	r3, r0
    118c:	3301      	adds	r3, #1
    118e:	d005      	beq.n	119c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
    1190:	4905      	ldr	r1, [pc, #20]	; (11a8 <usart_write_callback+0x34>)
    1192:	4b07      	ldr	r3, [pc, #28]	; (11b0 <usart_write_callback+0x3c>)
    1194:	2201      	movs	r2, #1
    1196:	0018      	movs	r0, r3
    1198:	4b06      	ldr	r3, [pc, #24]	; (11b4 <usart_write_callback+0x40>)
    119a:	4798      	blx	r3
    }
}
    119c:	46c0      	nop			; (mov r8, r8)
    119e:	46bd      	mov	sp, r7
    11a0:	b002      	add	sp, #8
    11a2:	bd80      	pop	{r7, pc}
    11a4:	20000a14 	.word	0x20000a14
    11a8:	20000a10 	.word	0x20000a10
    11ac:	00000bd1 	.word	0x00000bd1
    11b0:	200001d4 	.word	0x200001d4
    11b4:	00005a2d 	.word	0x00005a2d

000011b8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    11b8:	b590      	push	{r4, r7, lr}
    11ba:	b087      	sub	sp, #28
    11bc:	af00      	add	r7, sp, #0
    11be:	60f8      	str	r0, [r7, #12]
    11c0:	000c      	movs	r4, r1
    11c2:	0010      	movs	r0, r2
    11c4:	0019      	movs	r1, r3
    11c6:	230a      	movs	r3, #10
    11c8:	18fb      	adds	r3, r7, r3
    11ca:	1c22      	adds	r2, r4, #0
    11cc:	801a      	strh	r2, [r3, #0]
    11ce:	2308      	movs	r3, #8
    11d0:	18fb      	adds	r3, r7, r3
    11d2:	1c02      	adds	r2, r0, #0
    11d4:	801a      	strh	r2, [r3, #0]
    11d6:	1dfb      	adds	r3, r7, #7
    11d8:	1c0a      	adds	r2, r1, #0
    11da:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    11dc:	230a      	movs	r3, #10
    11de:	18fb      	adds	r3, r7, r3
    11e0:	881a      	ldrh	r2, [r3, #0]
    11e2:	2308      	movs	r3, #8
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	881b      	ldrh	r3, [r3, #0]
    11e8:	1ad3      	subs	r3, r2, r3
    11ea:	3307      	adds	r3, #7
    11ec:	2b00      	cmp	r3, #0
    11ee:	da00      	bge.n	11f2 <SDMMC_UNSTUFF_BITS+0x3a>
    11f0:	3307      	adds	r3, #7
    11f2:	10db      	asrs	r3, r3, #3
    11f4:	3b01      	subs	r3, #1
    11f6:	68fa      	ldr	r2, [r7, #12]
    11f8:	18d3      	adds	r3, r2, r3
    11fa:	781b      	ldrb	r3, [r3, #0]
    11fc:	0019      	movs	r1, r3
    11fe:	2308      	movs	r3, #8
    1200:	18fb      	adds	r3, r7, r3
    1202:	881b      	ldrh	r3, [r3, #0]
    1204:	2207      	movs	r2, #7
    1206:	4013      	ands	r3, r2
    1208:	4119      	asrs	r1, r3
    120a:	000b      	movs	r3, r1
    120c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    120e:	2308      	movs	r3, #8
    1210:	18fb      	adds	r3, r7, r3
    1212:	881b      	ldrh	r3, [r3, #0]
    1214:	2207      	movs	r2, #7
    1216:	401a      	ands	r2, r3
    1218:	1dfb      	adds	r3, r7, #7
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	18d3      	adds	r3, r2, r3
    121e:	2b08      	cmp	r3, #8
    1220:	dd1c      	ble.n	125c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    1222:	230a      	movs	r3, #10
    1224:	18fb      	adds	r3, r7, r3
    1226:	881a      	ldrh	r2, [r3, #0]
    1228:	2308      	movs	r3, #8
    122a:	18fb      	adds	r3, r7, r3
    122c:	881b      	ldrh	r3, [r3, #0]
    122e:	1ad3      	subs	r3, r2, r3
    1230:	3307      	adds	r3, #7
    1232:	2b00      	cmp	r3, #0
    1234:	da00      	bge.n	1238 <SDMMC_UNSTUFF_BITS+0x80>
    1236:	3307      	adds	r3, #7
    1238:	10db      	asrs	r3, r3, #3
    123a:	3b02      	subs	r3, #2
    123c:	68fa      	ldr	r2, [r7, #12]
    123e:	18d3      	adds	r3, r2, r3
    1240:	781b      	ldrb	r3, [r3, #0]
    1242:	0019      	movs	r1, r3
    1244:	2308      	movs	r3, #8
    1246:	18fb      	adds	r3, r7, r3
    1248:	881b      	ldrh	r3, [r3, #0]
    124a:	2207      	movs	r2, #7
    124c:	4013      	ands	r3, r2
    124e:	2208      	movs	r2, #8
    1250:	1ad3      	subs	r3, r2, r3
    1252:	4099      	lsls	r1, r3
    1254:	000b      	movs	r3, r1
    1256:	697a      	ldr	r2, [r7, #20]
    1258:	4313      	orrs	r3, r2
    125a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    125c:	2308      	movs	r3, #8
    125e:	18fb      	adds	r3, r7, r3
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	2207      	movs	r2, #7
    1264:	401a      	ands	r2, r3
    1266:	1dfb      	adds	r3, r7, #7
    1268:	781b      	ldrb	r3, [r3, #0]
    126a:	18d3      	adds	r3, r2, r3
    126c:	2b10      	cmp	r3, #16
    126e:	dd1c      	ble.n	12aa <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    1270:	230a      	movs	r3, #10
    1272:	18fb      	adds	r3, r7, r3
    1274:	881a      	ldrh	r2, [r3, #0]
    1276:	2308      	movs	r3, #8
    1278:	18fb      	adds	r3, r7, r3
    127a:	881b      	ldrh	r3, [r3, #0]
    127c:	1ad3      	subs	r3, r2, r3
    127e:	3307      	adds	r3, #7
    1280:	2b00      	cmp	r3, #0
    1282:	da00      	bge.n	1286 <SDMMC_UNSTUFF_BITS+0xce>
    1284:	3307      	adds	r3, #7
    1286:	10db      	asrs	r3, r3, #3
    1288:	3b03      	subs	r3, #3
    128a:	68fa      	ldr	r2, [r7, #12]
    128c:	18d3      	adds	r3, r2, r3
    128e:	781b      	ldrb	r3, [r3, #0]
    1290:	0019      	movs	r1, r3
    1292:	2308      	movs	r3, #8
    1294:	18fb      	adds	r3, r7, r3
    1296:	881b      	ldrh	r3, [r3, #0]
    1298:	2207      	movs	r2, #7
    129a:	4013      	ands	r3, r2
    129c:	2210      	movs	r2, #16
    129e:	1ad3      	subs	r3, r2, r3
    12a0:	4099      	lsls	r1, r3
    12a2:	000b      	movs	r3, r1
    12a4:	697a      	ldr	r2, [r7, #20]
    12a6:	4313      	orrs	r3, r2
    12a8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    12aa:	2308      	movs	r3, #8
    12ac:	18fb      	adds	r3, r7, r3
    12ae:	881b      	ldrh	r3, [r3, #0]
    12b0:	2207      	movs	r2, #7
    12b2:	401a      	ands	r2, r3
    12b4:	1dfb      	adds	r3, r7, #7
    12b6:	781b      	ldrb	r3, [r3, #0]
    12b8:	18d3      	adds	r3, r2, r3
    12ba:	2b10      	cmp	r3, #16
    12bc:	dd1c      	ble.n	12f8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    12be:	230a      	movs	r3, #10
    12c0:	18fb      	adds	r3, r7, r3
    12c2:	881a      	ldrh	r2, [r3, #0]
    12c4:	2308      	movs	r3, #8
    12c6:	18fb      	adds	r3, r7, r3
    12c8:	881b      	ldrh	r3, [r3, #0]
    12ca:	1ad3      	subs	r3, r2, r3
    12cc:	3307      	adds	r3, #7
    12ce:	2b00      	cmp	r3, #0
    12d0:	da00      	bge.n	12d4 <SDMMC_UNSTUFF_BITS+0x11c>
    12d2:	3307      	adds	r3, #7
    12d4:	10db      	asrs	r3, r3, #3
    12d6:	3b03      	subs	r3, #3
    12d8:	68fa      	ldr	r2, [r7, #12]
    12da:	18d3      	adds	r3, r2, r3
    12dc:	781b      	ldrb	r3, [r3, #0]
    12de:	0019      	movs	r1, r3
    12e0:	2308      	movs	r3, #8
    12e2:	18fb      	adds	r3, r7, r3
    12e4:	881b      	ldrh	r3, [r3, #0]
    12e6:	2207      	movs	r2, #7
    12e8:	4013      	ands	r3, r2
    12ea:	2210      	movs	r2, #16
    12ec:	1ad3      	subs	r3, r2, r3
    12ee:	4099      	lsls	r1, r3
    12f0:	000b      	movs	r3, r1
    12f2:	697a      	ldr	r2, [r7, #20]
    12f4:	4313      	orrs	r3, r2
    12f6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    12f8:	1dfb      	adds	r3, r7, #7
    12fa:	781b      	ldrb	r3, [r3, #0]
    12fc:	2201      	movs	r2, #1
    12fe:	409a      	lsls	r2, r3
    1300:	0013      	movs	r3, r2
    1302:	1e5a      	subs	r2, r3, #1
    1304:	697b      	ldr	r3, [r7, #20]
    1306:	4013      	ands	r3, r2
    1308:	617b      	str	r3, [r7, #20]
	return value;
    130a:	697b      	ldr	r3, [r7, #20]
}
    130c:	0018      	movs	r0, r3
    130e:	46bd      	mov	sp, r7
    1310:	b007      	add	sp, #28
    1312:	bd90      	pop	{r4, r7, pc}

00001314 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    1314:	b580      	push	{r7, lr}
    1316:	b082      	sub	sp, #8
    1318:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    131a:	4b23      	ldr	r3, [pc, #140]	; (13a8 <mmc_spi_op_cond+0x94>)
    131c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    131e:	4b23      	ldr	r3, [pc, #140]	; (13ac <mmc_spi_op_cond+0x98>)
    1320:	2100      	movs	r1, #0
    1322:	0018      	movs	r0, r3
    1324:	4b22      	ldr	r3, [pc, #136]	; (13b0 <mmc_spi_op_cond+0x9c>)
    1326:	4798      	blx	r3
    1328:	0003      	movs	r3, r0
    132a:	001a      	movs	r2, r3
    132c:	2301      	movs	r3, #1
    132e:	4053      	eors	r3, r2
    1330:	b2db      	uxtb	r3, r3
    1332:	2b00      	cmp	r3, #0
    1334:	d001      	beq.n	133a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    1336:	2300      	movs	r3, #0
    1338:	e031      	b.n	139e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    133a:	4b1e      	ldr	r3, [pc, #120]	; (13b4 <mmc_spi_op_cond+0xa0>)
    133c:	4798      	blx	r3
    133e:	0003      	movs	r3, r0
    1340:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    1342:	683b      	ldr	r3, [r7, #0]
    1344:	2201      	movs	r2, #1
    1346:	4013      	ands	r3, r2
    1348:	d006      	beq.n	1358 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	1e5a      	subs	r2, r3, #1
    134e:	607a      	str	r2, [r7, #4]
    1350:	2b00      	cmp	r3, #0
    1352:	d1e4      	bne.n	131e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    1354:	2300      	movs	r3, #0
    1356:	e022      	b.n	139e <mmc_spi_op_cond+0x8a>
			break;
    1358:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    135a:	4b17      	ldr	r3, [pc, #92]	; (13b8 <mmc_spi_op_cond+0xa4>)
    135c:	2100      	movs	r1, #0
    135e:	0018      	movs	r0, r3
    1360:	4b13      	ldr	r3, [pc, #76]	; (13b0 <mmc_spi_op_cond+0x9c>)
    1362:	4798      	blx	r3
    1364:	0003      	movs	r3, r0
    1366:	001a      	movs	r2, r3
    1368:	2301      	movs	r3, #1
    136a:	4053      	eors	r3, r2
    136c:	b2db      	uxtb	r3, r3
    136e:	2b00      	cmp	r3, #0
    1370:	d001      	beq.n	1376 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    1372:	2300      	movs	r3, #0
    1374:	e013      	b.n	139e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    1376:	4b0f      	ldr	r3, [pc, #60]	; (13b4 <mmc_spi_op_cond+0xa0>)
    1378:	4798      	blx	r3
    137a:	0002      	movs	r2, r0
    137c:	23c0      	movs	r3, #192	; 0xc0
    137e:	05db      	lsls	r3, r3, #23
    1380:	401a      	ands	r2, r3
    1382:	2380      	movs	r3, #128	; 0x80
    1384:	05db      	lsls	r3, r3, #23
    1386:	429a      	cmp	r2, r3
    1388:	d108      	bne.n	139c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    138a:	4b0c      	ldr	r3, [pc, #48]	; (13bc <mmc_spi_op_cond+0xa8>)
    138c:	681a      	ldr	r2, [r3, #0]
    138e:	4b0b      	ldr	r3, [pc, #44]	; (13bc <mmc_spi_op_cond+0xa8>)
    1390:	681b      	ldr	r3, [r3, #0]
    1392:	7adb      	ldrb	r3, [r3, #11]
    1394:	2108      	movs	r1, #8
    1396:	430b      	orrs	r3, r1
    1398:	b2db      	uxtb	r3, r3
    139a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    139c:	2301      	movs	r3, #1
}
    139e:	0018      	movs	r0, r3
    13a0:	46bd      	mov	sp, r7
    13a2:	b002      	add	sp, #8
    13a4:	bd80      	pop	{r7, pc}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	00001bee 	.word	0x00001bee
    13ac:	00001101 	.word	0x00001101
    13b0:	00002dad 	.word	0x00002dad
    13b4:	00002fed 	.word	0x00002fed
    13b8:	0000053a 	.word	0x0000053a
    13bc:	20000128 	.word	0x20000128

000013c0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    13c0:	b580      	push	{r7, lr}
    13c2:	b086      	sub	sp, #24
    13c4:	af00      	add	r7, sp, #0
    13c6:	0002      	movs	r2, r0
    13c8:	1dfb      	adds	r3, r7, #7
    13ca:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    13cc:	4b2e      	ldr	r3, [pc, #184]	; (1488 <sd_spi_op_cond+0xc8>)
    13ce:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    13d0:	4b2e      	ldr	r3, [pc, #184]	; (148c <sd_spi_op_cond+0xcc>)
    13d2:	2100      	movs	r1, #0
    13d4:	0018      	movs	r0, r3
    13d6:	4b2e      	ldr	r3, [pc, #184]	; (1490 <sd_spi_op_cond+0xd0>)
    13d8:	4798      	blx	r3
    13da:	0003      	movs	r3, r0
    13dc:	001a      	movs	r2, r3
    13de:	2301      	movs	r3, #1
    13e0:	4053      	eors	r3, r2
    13e2:	b2db      	uxtb	r3, r3
    13e4:	2b00      	cmp	r3, #0
    13e6:	d001      	beq.n	13ec <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    13e8:	2300      	movs	r3, #0
    13ea:	e048      	b.n	147e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    13ec:	2300      	movs	r3, #0
    13ee:	617b      	str	r3, [r7, #20]
		if (v2) {
    13f0:	1dfb      	adds	r3, r7, #7
    13f2:	781b      	ldrb	r3, [r3, #0]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d004      	beq.n	1402 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    13f8:	697b      	ldr	r3, [r7, #20]
    13fa:	2280      	movs	r2, #128	; 0x80
    13fc:	05d2      	lsls	r2, r2, #23
    13fe:	4313      	orrs	r3, r2
    1400:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    1402:	697b      	ldr	r3, [r7, #20]
    1404:	4a23      	ldr	r2, [pc, #140]	; (1494 <sd_spi_op_cond+0xd4>)
    1406:	0019      	movs	r1, r3
    1408:	0010      	movs	r0, r2
    140a:	4b21      	ldr	r3, [pc, #132]	; (1490 <sd_spi_op_cond+0xd0>)
    140c:	4798      	blx	r3
    140e:	0003      	movs	r3, r0
    1410:	001a      	movs	r2, r3
    1412:	2301      	movs	r3, #1
    1414:	4053      	eors	r3, r2
    1416:	b2db      	uxtb	r3, r3
    1418:	2b00      	cmp	r3, #0
    141a:	d001      	beq.n	1420 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    141c:	2300      	movs	r3, #0
    141e:	e02e      	b.n	147e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    1420:	4b1d      	ldr	r3, [pc, #116]	; (1498 <sd_spi_op_cond+0xd8>)
    1422:	4798      	blx	r3
    1424:	0003      	movs	r3, r0
    1426:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    1428:	68fb      	ldr	r3, [r7, #12]
    142a:	2201      	movs	r2, #1
    142c:	4013      	ands	r3, r2
    142e:	d006      	beq.n	143e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    1430:	693b      	ldr	r3, [r7, #16]
    1432:	1e5a      	subs	r2, r3, #1
    1434:	613a      	str	r2, [r7, #16]
    1436:	2b00      	cmp	r3, #0
    1438:	d1ca      	bne.n	13d0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    143a:	2300      	movs	r3, #0
    143c:	e01f      	b.n	147e <sd_spi_op_cond+0xbe>
			break;
    143e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    1440:	4b16      	ldr	r3, [pc, #88]	; (149c <sd_spi_op_cond+0xdc>)
    1442:	2100      	movs	r1, #0
    1444:	0018      	movs	r0, r3
    1446:	4b12      	ldr	r3, [pc, #72]	; (1490 <sd_spi_op_cond+0xd0>)
    1448:	4798      	blx	r3
    144a:	0003      	movs	r3, r0
    144c:	001a      	movs	r2, r3
    144e:	2301      	movs	r3, #1
    1450:	4053      	eors	r3, r2
    1452:	b2db      	uxtb	r3, r3
    1454:	2b00      	cmp	r3, #0
    1456:	d001      	beq.n	145c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    1458:	2300      	movs	r3, #0
    145a:	e010      	b.n	147e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    145c:	4b0e      	ldr	r3, [pc, #56]	; (1498 <sd_spi_op_cond+0xd8>)
    145e:	4798      	blx	r3
    1460:	0002      	movs	r2, r0
    1462:	2380      	movs	r3, #128	; 0x80
    1464:	05db      	lsls	r3, r3, #23
    1466:	4013      	ands	r3, r2
    1468:	d008      	beq.n	147c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    146a:	4b0d      	ldr	r3, [pc, #52]	; (14a0 <sd_spi_op_cond+0xe0>)
    146c:	681a      	ldr	r2, [r3, #0]
    146e:	4b0c      	ldr	r3, [pc, #48]	; (14a0 <sd_spi_op_cond+0xe0>)
    1470:	681b      	ldr	r3, [r3, #0]
    1472:	7adb      	ldrb	r3, [r3, #11]
    1474:	2108      	movs	r1, #8
    1476:	430b      	orrs	r3, r1
    1478:	b2db      	uxtb	r3, r3
    147a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    147c:	2301      	movs	r3, #1
}
    147e:	0018      	movs	r0, r3
    1480:	46bd      	mov	sp, r7
    1482:	b006      	add	sp, #24
    1484:	bd80      	pop	{r7, pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	00001bee 	.word	0x00001bee
    148c:	00001137 	.word	0x00001137
    1490:	00002dad 	.word	0x00002dad
    1494:	00001129 	.word	0x00001129
    1498:	00002fed 	.word	0x00002fed
    149c:	0000053a 	.word	0x0000053a
    14a0:	20000128 	.word	0x20000128

000014a4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    14a4:	b580      	push	{r7, lr}
    14a6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    14a8:	2301      	movs	r3, #1
}
    14aa:	0018      	movs	r0, r3
    14ac:	46bd      	mov	sp, r7
    14ae:	bd80      	pop	{r7, pc}

000014b0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    14b0:	b580      	push	{r7, lr}
    14b2:	b084      	sub	sp, #16
    14b4:	af00      	add	r7, sp, #0
    14b6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    14b8:	687b      	ldr	r3, [r7, #4]
    14ba:	2200      	movs	r2, #0
    14bc:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    14be:	23d5      	movs	r3, #213	; 0xd5
    14c0:	005b      	lsls	r3, r3, #1
    14c2:	4a14      	ldr	r2, [pc, #80]	; (1514 <sd_cmd8+0x64>)
    14c4:	0019      	movs	r1, r3
    14c6:	0010      	movs	r0, r2
    14c8:	4b13      	ldr	r3, [pc, #76]	; (1518 <sd_cmd8+0x68>)
    14ca:	4798      	blx	r3
    14cc:	0003      	movs	r3, r0
    14ce:	001a      	movs	r2, r3
    14d0:	2301      	movs	r3, #1
    14d2:	4053      	eors	r3, r2
    14d4:	b2db      	uxtb	r3, r3
    14d6:	2b00      	cmp	r3, #0
    14d8:	d001      	beq.n	14de <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    14da:	2301      	movs	r3, #1
    14dc:	e015      	b.n	150a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    14de:	4b0f      	ldr	r3, [pc, #60]	; (151c <sd_cmd8+0x6c>)
    14e0:	4798      	blx	r3
    14e2:	0003      	movs	r3, r0
    14e4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    14e6:	68fb      	ldr	r3, [r7, #12]
    14e8:	3301      	adds	r3, #1
    14ea:	d101      	bne.n	14f0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    14ec:	2301      	movs	r3, #1
    14ee:	e00c      	b.n	150a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    14f0:	68fb      	ldr	r3, [r7, #12]
    14f2:	051b      	lsls	r3, r3, #20
    14f4:	0d1a      	lsrs	r2, r3, #20
    14f6:	23d5      	movs	r3, #213	; 0xd5
    14f8:	005b      	lsls	r3, r3, #1
    14fa:	429a      	cmp	r2, r3
    14fc:	d001      	beq.n	1502 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    14fe:	2300      	movs	r3, #0
    1500:	e003      	b.n	150a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    1502:	687b      	ldr	r3, [r7, #4]
    1504:	2201      	movs	r2, #1
    1506:	701a      	strb	r2, [r3, #0]
	return true;
    1508:	2301      	movs	r3, #1
}
    150a:	0018      	movs	r0, r3
    150c:	46bd      	mov	sp, r7
    150e:	b004      	add	sp, #16
    1510:	bd80      	pop	{r7, pc}
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	00005508 	.word	0x00005508
    1518:	00002dad 	.word	0x00002dad
    151c:	00002fed 	.word	0x00002fed

00001520 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    1520:	b590      	push	{r4, r7, lr}
    1522:	b089      	sub	sp, #36	; 0x24
    1524:	af02      	add	r7, sp, #8
    1526:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    1528:	2380      	movs	r3, #128	; 0x80
    152a:	009a      	lsls	r2, r3, #2
    152c:	4841      	ldr	r0, [pc, #260]	; (1634 <mmc_cmd8+0x114>)
    152e:	2300      	movs	r3, #0
    1530:	9300      	str	r3, [sp, #0]
    1532:	2301      	movs	r3, #1
    1534:	2100      	movs	r1, #0
    1536:	4c40      	ldr	r4, [pc, #256]	; (1638 <mmc_cmd8+0x118>)
    1538:	47a0      	blx	r4
    153a:	0003      	movs	r3, r0
    153c:	001a      	movs	r2, r3
    153e:	2301      	movs	r3, #1
    1540:	4053      	eors	r3, r2
    1542:	b2db      	uxtb	r3, r3
    1544:	2b00      	cmp	r3, #0
    1546:	d001      	beq.n	154c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    1548:	2300      	movs	r3, #0
    154a:	e06e      	b.n	162a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    154c:	2316      	movs	r3, #22
    154e:	18fb      	adds	r3, r7, r3
    1550:	2200      	movs	r2, #0
    1552:	801a      	strh	r2, [r3, #0]
    1554:	e014      	b.n	1580 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    1556:	2310      	movs	r3, #16
    1558:	18fb      	adds	r3, r7, r3
    155a:	0018      	movs	r0, r3
    155c:	4b37      	ldr	r3, [pc, #220]	; (163c <mmc_cmd8+0x11c>)
    155e:	4798      	blx	r3
    1560:	0003      	movs	r3, r0
    1562:	001a      	movs	r2, r3
    1564:	2301      	movs	r3, #1
    1566:	4053      	eors	r3, r2
    1568:	b2db      	uxtb	r3, r3
    156a:	2b00      	cmp	r3, #0
    156c:	d001      	beq.n	1572 <mmc_cmd8+0x52>
			return false;
    156e:	2300      	movs	r3, #0
    1570:	e05b      	b.n	162a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    1572:	2316      	movs	r3, #22
    1574:	18fb      	adds	r3, r7, r3
    1576:	881a      	ldrh	r2, [r3, #0]
    1578:	2316      	movs	r3, #22
    157a:	18fb      	adds	r3, r7, r3
    157c:	3201      	adds	r2, #1
    157e:	801a      	strh	r2, [r3, #0]
    1580:	2316      	movs	r3, #22
    1582:	18fb      	adds	r3, r7, r3
    1584:	881b      	ldrh	r3, [r3, #0]
    1586:	2b31      	cmp	r3, #49	; 0x31
    1588:	d9e5      	bls.n	1556 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    158a:	693b      	ldr	r3, [r7, #16]
    158c:	b2db      	uxtb	r3, r3
    158e:	2202      	movs	r2, #2
    1590:	4013      	ands	r3, r2
    1592:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    1594:	687b      	ldr	r3, [r7, #4]
    1596:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    1598:	4b29      	ldr	r3, [pc, #164]	; (1640 <mmc_cmd8+0x120>)
    159a:	681b      	ldr	r3, [r3, #0]
    159c:	330e      	adds	r3, #14
    159e:	0018      	movs	r0, r3
    15a0:	230c      	movs	r3, #12
    15a2:	223e      	movs	r2, #62	; 0x3e
    15a4:	2180      	movs	r1, #128	; 0x80
    15a6:	4c27      	ldr	r4, [pc, #156]	; (1644 <mmc_cmd8+0x124>)
    15a8:	47a0      	blx	r4
    15aa:	0002      	movs	r2, r0
    15ac:	4b26      	ldr	r3, [pc, #152]	; (1648 <mmc_cmd8+0x128>)
    15ae:	429a      	cmp	r2, r3
    15b0:	d135      	bne.n	161e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    15b2:	e014      	b.n	15de <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    15b4:	230c      	movs	r3, #12
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	0018      	movs	r0, r3
    15ba:	4b20      	ldr	r3, [pc, #128]	; (163c <mmc_cmd8+0x11c>)
    15bc:	4798      	blx	r3
    15be:	0003      	movs	r3, r0
    15c0:	001a      	movs	r2, r3
    15c2:	2301      	movs	r3, #1
    15c4:	4053      	eors	r3, r2
    15c6:	b2db      	uxtb	r3, r3
    15c8:	2b00      	cmp	r3, #0
    15ca:	d001      	beq.n	15d0 <mmc_cmd8+0xb0>
				return false;
    15cc:	2300      	movs	r3, #0
    15ce:	e02c      	b.n	162a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    15d0:	2316      	movs	r3, #22
    15d2:	18fb      	adds	r3, r7, r3
    15d4:	881a      	ldrh	r2, [r3, #0]
    15d6:	2316      	movs	r3, #22
    15d8:	18fb      	adds	r3, r7, r3
    15da:	3201      	adds	r2, #1
    15dc:	801a      	strh	r2, [r3, #0]
    15de:	2316      	movs	r3, #22
    15e0:	18fb      	adds	r3, r7, r3
    15e2:	881b      	ldrh	r3, [r3, #0]
    15e4:	2b35      	cmp	r3, #53	; 0x35
    15e6:	d9e5      	bls.n	15b4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    15e8:	4b15      	ldr	r3, [pc, #84]	; (1640 <mmc_cmd8+0x120>)
    15ea:	681b      	ldr	r3, [r3, #0]
    15ec:	68fa      	ldr	r2, [r7, #12]
    15ee:	0852      	lsrs	r2, r2, #1
    15f0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    15f2:	e014      	b.n	161e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    15f4:	230c      	movs	r3, #12
    15f6:	18fb      	adds	r3, r7, r3
    15f8:	0018      	movs	r0, r3
    15fa:	4b10      	ldr	r3, [pc, #64]	; (163c <mmc_cmd8+0x11c>)
    15fc:	4798      	blx	r3
    15fe:	0003      	movs	r3, r0
    1600:	001a      	movs	r2, r3
    1602:	2301      	movs	r3, #1
    1604:	4053      	eors	r3, r2
    1606:	b2db      	uxtb	r3, r3
    1608:	2b00      	cmp	r3, #0
    160a:	d001      	beq.n	1610 <mmc_cmd8+0xf0>
			return false;
    160c:	2300      	movs	r3, #0
    160e:	e00c      	b.n	162a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1610:	2316      	movs	r3, #22
    1612:	18fb      	adds	r3, r7, r3
    1614:	881a      	ldrh	r2, [r3, #0]
    1616:	2316      	movs	r3, #22
    1618:	18fb      	adds	r3, r7, r3
    161a:	3201      	adds	r2, #1
    161c:	801a      	strh	r2, [r3, #0]
    161e:	2316      	movs	r3, #22
    1620:	18fb      	adds	r3, r7, r3
    1622:	881b      	ldrh	r3, [r3, #0]
    1624:	2b7f      	cmp	r3, #127	; 0x7f
    1626:	d9e5      	bls.n	15f4 <mmc_cmd8+0xd4>
		}
	}
	return true;
    1628:	2301      	movs	r3, #1
}
    162a:	0018      	movs	r0, r3
    162c:	46bd      	mov	sp, r7
    162e:	b007      	add	sp, #28
    1630:	bd90      	pop	{r4, r7, pc}
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	00081108 	.word	0x00081108
    1638:	00002dd5 	.word	0x00002dd5
    163c:	00003001 	.word	0x00003001
    1640:	20000128 	.word	0x20000128
    1644:	000011b9 	.word	0x000011b9
    1648:	00000fff 	.word	0x00000fff

0000164c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    164c:	b590      	push	{r4, r7, lr}
    164e:	b083      	sub	sp, #12
    1650:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    1652:	4b15      	ldr	r3, [pc, #84]	; (16a8 <sd_mmc_cmd9_spi+0x5c>)
    1654:	681b      	ldr	r3, [r3, #0]
    1656:	891b      	ldrh	r3, [r3, #8]
    1658:	0419      	lsls	r1, r3, #16
    165a:	4814      	ldr	r0, [pc, #80]	; (16ac <sd_mmc_cmd9_spi+0x60>)
    165c:	2301      	movs	r3, #1
    165e:	9300      	str	r3, [sp, #0]
    1660:	2301      	movs	r3, #1
    1662:	2210      	movs	r2, #16
    1664:	4c12      	ldr	r4, [pc, #72]	; (16b0 <sd_mmc_cmd9_spi+0x64>)
    1666:	47a0      	blx	r4
    1668:	0003      	movs	r3, r0
    166a:	001a      	movs	r2, r3
    166c:	2301      	movs	r3, #1
    166e:	4053      	eors	r3, r2
    1670:	b2db      	uxtb	r3, r3
    1672:	2b00      	cmp	r3, #0
    1674:	d001      	beq.n	167a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    1676:	2300      	movs	r3, #0
    1678:	e012      	b.n	16a0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    167a:	4b0b      	ldr	r3, [pc, #44]	; (16a8 <sd_mmc_cmd9_spi+0x5c>)
    167c:	681b      	ldr	r3, [r3, #0]
    167e:	330e      	adds	r3, #14
    1680:	2101      	movs	r1, #1
    1682:	0018      	movs	r0, r3
    1684:	4b0b      	ldr	r3, [pc, #44]	; (16b4 <sd_mmc_cmd9_spi+0x68>)
    1686:	4798      	blx	r3
    1688:	0003      	movs	r3, r0
    168a:	001a      	movs	r2, r3
    168c:	2301      	movs	r3, #1
    168e:	4053      	eors	r3, r2
    1690:	b2db      	uxtb	r3, r3
    1692:	2b00      	cmp	r3, #0
    1694:	d001      	beq.n	169a <sd_mmc_cmd9_spi+0x4e>
		return false;
    1696:	2300      	movs	r3, #0
    1698:	e002      	b.n	16a0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    169a:	4b07      	ldr	r3, [pc, #28]	; (16b8 <sd_mmc_cmd9_spi+0x6c>)
    169c:	4798      	blx	r3
    169e:	0003      	movs	r3, r0
}
    16a0:	0018      	movs	r0, r3
    16a2:	46bd      	mov	sp, r7
    16a4:	b001      	add	sp, #4
    16a6:	bd90      	pop	{r4, r7, pc}
    16a8:	20000128 	.word	0x20000128
    16ac:	00081109 	.word	0x00081109
    16b0:	00002dd5 	.word	0x00002dd5
    16b4:	000030a5 	.word	0x000030a5
    16b8:	00003149 	.word	0x00003149

000016bc <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    16bc:	b5b0      	push	{r4, r5, r7, lr}
    16be:	b084      	sub	sp, #16
    16c0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    16c2:	4b45      	ldr	r3, [pc, #276]	; (17d8 <mmc_decode_csd+0x11c>)
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	330e      	adds	r3, #14
    16c8:	0018      	movs	r0, r3
    16ca:	2304      	movs	r3, #4
    16cc:	227a      	movs	r2, #122	; 0x7a
    16ce:	2180      	movs	r1, #128	; 0x80
    16d0:	4c42      	ldr	r4, [pc, #264]	; (17dc <mmc_decode_csd+0x120>)
    16d2:	47a0      	blx	r4
    16d4:	0003      	movs	r3, r0
    16d6:	2b02      	cmp	r3, #2
    16d8:	d011      	beq.n	16fe <mmc_decode_csd+0x42>
    16da:	d802      	bhi.n	16e2 <mmc_decode_csd+0x26>
    16dc:	2b01      	cmp	r3, #1
    16de:	d009      	beq.n	16f4 <mmc_decode_csd+0x38>
    16e0:	e003      	b.n	16ea <mmc_decode_csd+0x2e>
    16e2:	2b03      	cmp	r3, #3
    16e4:	d010      	beq.n	1708 <mmc_decode_csd+0x4c>
    16e6:	2b04      	cmp	r3, #4
    16e8:	d013      	beq.n	1712 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    16ea:	4b3b      	ldr	r3, [pc, #236]	; (17d8 <mmc_decode_csd+0x11c>)
    16ec:	681b      	ldr	r3, [r3, #0]
    16ee:	2212      	movs	r2, #18
    16f0:	731a      	strb	r2, [r3, #12]
		break;
    16f2:	e013      	b.n	171c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    16f4:	4b38      	ldr	r3, [pc, #224]	; (17d8 <mmc_decode_csd+0x11c>)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	2214      	movs	r2, #20
    16fa:	731a      	strb	r2, [r3, #12]
		break;
    16fc:	e00e      	b.n	171c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    16fe:	4b36      	ldr	r3, [pc, #216]	; (17d8 <mmc_decode_csd+0x11c>)
    1700:	681b      	ldr	r3, [r3, #0]
    1702:	2222      	movs	r2, #34	; 0x22
    1704:	731a      	strb	r2, [r3, #12]
		break;
    1706:	e009      	b.n	171c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    1708:	4b33      	ldr	r3, [pc, #204]	; (17d8 <mmc_decode_csd+0x11c>)
    170a:	681b      	ldr	r3, [r3, #0]
    170c:	2230      	movs	r2, #48	; 0x30
    170e:	731a      	strb	r2, [r3, #12]
		break;
    1710:	e004      	b.n	171c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    1712:	4b31      	ldr	r3, [pc, #196]	; (17d8 <mmc_decode_csd+0x11c>)
    1714:	681b      	ldr	r3, [r3, #0]
    1716:	2240      	movs	r2, #64	; 0x40
    1718:	731a      	strb	r2, [r3, #12]
		break;
    171a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    171c:	4b2e      	ldr	r3, [pc, #184]	; (17d8 <mmc_decode_csd+0x11c>)
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	330e      	adds	r3, #14
    1722:	0018      	movs	r0, r3
    1724:	2308      	movs	r3, #8
    1726:	2260      	movs	r2, #96	; 0x60
    1728:	2180      	movs	r1, #128	; 0x80
    172a:	4c2c      	ldr	r4, [pc, #176]	; (17dc <mmc_decode_csd+0x120>)
    172c:	47a0      	blx	r4
    172e:	0003      	movs	r3, r0
    1730:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    1732:	68fb      	ldr	r3, [r7, #12]
    1734:	2207      	movs	r2, #7
    1736:	401a      	ands	r2, r3
    1738:	4b29      	ldr	r3, [pc, #164]	; (17e0 <mmc_decode_csd+0x124>)
    173a:	0092      	lsls	r2, r2, #2
    173c:	58d3      	ldr	r3, [r2, r3]
    173e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    1740:	68fb      	ldr	r3, [r7, #12]
    1742:	08db      	lsrs	r3, r3, #3
    1744:	220f      	movs	r2, #15
    1746:	401a      	ands	r2, r3
    1748:	4b26      	ldr	r3, [pc, #152]	; (17e4 <mmc_decode_csd+0x128>)
    174a:	0092      	lsls	r2, r2, #2
    174c:	58d3      	ldr	r3, [r2, r3]
    174e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    1750:	4b21      	ldr	r3, [pc, #132]	; (17d8 <mmc_decode_csd+0x11c>)
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	68ba      	ldr	r2, [r7, #8]
    1756:	6879      	ldr	r1, [r7, #4]
    1758:	434a      	muls	r2, r1
    175a:	21fa      	movs	r1, #250	; 0xfa
    175c:	0089      	lsls	r1, r1, #2
    175e:	434a      	muls	r2, r1
    1760:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    1762:	4b1d      	ldr	r3, [pc, #116]	; (17d8 <mmc_decode_csd+0x11c>)
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	330e      	adds	r3, #14
    1768:	0018      	movs	r0, r3
    176a:	230c      	movs	r3, #12
    176c:	223e      	movs	r2, #62	; 0x3e
    176e:	2180      	movs	r1, #128	; 0x80
    1770:	4c1a      	ldr	r4, [pc, #104]	; (17dc <mmc_decode_csd+0x120>)
    1772:	47a0      	blx	r4
    1774:	0002      	movs	r2, r0
    1776:	4b1c      	ldr	r3, [pc, #112]	; (17e8 <mmc_decode_csd+0x12c>)
    1778:	429a      	cmp	r2, r3
    177a:	d028      	beq.n	17ce <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    177c:	4b16      	ldr	r3, [pc, #88]	; (17d8 <mmc_decode_csd+0x11c>)
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	330e      	adds	r3, #14
    1782:	0018      	movs	r0, r3
    1784:	230c      	movs	r3, #12
    1786:	223e      	movs	r2, #62	; 0x3e
    1788:	2180      	movs	r1, #128	; 0x80
    178a:	4c14      	ldr	r4, [pc, #80]	; (17dc <mmc_decode_csd+0x120>)
    178c:	47a0      	blx	r4
    178e:	0003      	movs	r3, r0
    1790:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1792:	4b11      	ldr	r3, [pc, #68]	; (17d8 <mmc_decode_csd+0x11c>)
    1794:	681b      	ldr	r3, [r3, #0]
    1796:	330e      	adds	r3, #14
    1798:	0018      	movs	r0, r3
    179a:	2303      	movs	r3, #3
    179c:	222f      	movs	r2, #47	; 0x2f
    179e:	2180      	movs	r1, #128	; 0x80
    17a0:	4d0e      	ldr	r5, [pc, #56]	; (17dc <mmc_decode_csd+0x120>)
    17a2:	47a8      	blx	r5
    17a4:	0003      	movs	r3, r0
    17a6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    17a8:	409c      	lsls	r4, r3
    17aa:	0023      	movs	r3, r4
    17ac:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    17ae:	4b0a      	ldr	r3, [pc, #40]	; (17d8 <mmc_decode_csd+0x11c>)
    17b0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    17b2:	4b09      	ldr	r3, [pc, #36]	; (17d8 <mmc_decode_csd+0x11c>)
    17b4:	681b      	ldr	r3, [r3, #0]
    17b6:	330e      	adds	r3, #14
    17b8:	0018      	movs	r0, r3
    17ba:	2304      	movs	r3, #4
    17bc:	2250      	movs	r2, #80	; 0x50
    17be:	2180      	movs	r1, #128	; 0x80
    17c0:	4d06      	ldr	r5, [pc, #24]	; (17dc <mmc_decode_csd+0x120>)
    17c2:	47a8      	blx	r5
    17c4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    17c6:	683b      	ldr	r3, [r7, #0]
    17c8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    17ca:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    17cc:	6063      	str	r3, [r4, #4]
	}
}
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	46bd      	mov	sp, r7
    17d2:	b004      	add	sp, #16
    17d4:	bdb0      	pop	{r4, r5, r7, pc}
    17d6:	46c0      	nop			; (mov r8, r8)
    17d8:	20000128 	.word	0x20000128
    17dc:	000011b9 	.word	0x000011b9
    17e0:	0000c8a4 	.word	0x0000c8a4
    17e4:	0000c900 	.word	0x0000c900
    17e8:	00000fff 	.word	0x00000fff

000017ec <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    17ec:	b5b0      	push	{r4, r5, r7, lr}
    17ee:	b084      	sub	sp, #16
    17f0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    17f2:	4b35      	ldr	r3, [pc, #212]	; (18c8 <sd_decode_csd+0xdc>)
    17f4:	681b      	ldr	r3, [r3, #0]
    17f6:	330e      	adds	r3, #14
    17f8:	0018      	movs	r0, r3
    17fa:	2308      	movs	r3, #8
    17fc:	2260      	movs	r2, #96	; 0x60
    17fe:	2180      	movs	r1, #128	; 0x80
    1800:	4c32      	ldr	r4, [pc, #200]	; (18cc <sd_decode_csd+0xe0>)
    1802:	47a0      	blx	r4
    1804:	0003      	movs	r3, r0
    1806:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    1808:	68fb      	ldr	r3, [r7, #12]
    180a:	2207      	movs	r2, #7
    180c:	401a      	ands	r2, r3
    180e:	4b30      	ldr	r3, [pc, #192]	; (18d0 <sd_decode_csd+0xe4>)
    1810:	0092      	lsls	r2, r2, #2
    1812:	58d3      	ldr	r3, [r2, r3]
    1814:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    1816:	68fb      	ldr	r3, [r7, #12]
    1818:	08db      	lsrs	r3, r3, #3
    181a:	220f      	movs	r2, #15
    181c:	401a      	ands	r2, r3
    181e:	4b2d      	ldr	r3, [pc, #180]	; (18d4 <sd_decode_csd+0xe8>)
    1820:	0092      	lsls	r2, r2, #2
    1822:	58d3      	ldr	r3, [r2, r3]
    1824:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    1826:	4b28      	ldr	r3, [pc, #160]	; (18c8 <sd_decode_csd+0xdc>)
    1828:	681b      	ldr	r3, [r3, #0]
    182a:	68ba      	ldr	r2, [r7, #8]
    182c:	6879      	ldr	r1, [r7, #4]
    182e:	434a      	muls	r2, r1
    1830:	21fa      	movs	r1, #250	; 0xfa
    1832:	0089      	lsls	r1, r1, #2
    1834:	434a      	muls	r2, r1
    1836:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    1838:	4b23      	ldr	r3, [pc, #140]	; (18c8 <sd_decode_csd+0xdc>)
    183a:	681b      	ldr	r3, [r3, #0]
    183c:	330e      	adds	r3, #14
    183e:	0018      	movs	r0, r3
    1840:	2302      	movs	r3, #2
    1842:	227e      	movs	r2, #126	; 0x7e
    1844:	2180      	movs	r1, #128	; 0x80
    1846:	4c21      	ldr	r4, [pc, #132]	; (18cc <sd_decode_csd+0xe0>)
    1848:	47a0      	blx	r4
    184a:	1e03      	subs	r3, r0, #0
    184c:	d00f      	beq.n	186e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    184e:	4b1e      	ldr	r3, [pc, #120]	; (18c8 <sd_decode_csd+0xdc>)
    1850:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    1852:	4b1d      	ldr	r3, [pc, #116]	; (18c8 <sd_decode_csd+0xdc>)
    1854:	681b      	ldr	r3, [r3, #0]
    1856:	330e      	adds	r3, #14
    1858:	0018      	movs	r0, r3
    185a:	2316      	movs	r3, #22
    185c:	2230      	movs	r2, #48	; 0x30
    185e:	2180      	movs	r1, #128	; 0x80
    1860:	4d1a      	ldr	r5, [pc, #104]	; (18cc <sd_decode_csd+0xe0>)
    1862:	47a8      	blx	r5
    1864:	0003      	movs	r3, r0
				* 512;
    1866:	3301      	adds	r3, #1
    1868:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    186a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    186c:	e028      	b.n	18c0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    186e:	4b16      	ldr	r3, [pc, #88]	; (18c8 <sd_decode_csd+0xdc>)
    1870:	681b      	ldr	r3, [r3, #0]
    1872:	330e      	adds	r3, #14
    1874:	0018      	movs	r0, r3
    1876:	230c      	movs	r3, #12
    1878:	223e      	movs	r2, #62	; 0x3e
    187a:	2180      	movs	r1, #128	; 0x80
    187c:	4c13      	ldr	r4, [pc, #76]	; (18cc <sd_decode_csd+0xe0>)
    187e:	47a0      	blx	r4
    1880:	0003      	movs	r3, r0
    1882:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1884:	4b10      	ldr	r3, [pc, #64]	; (18c8 <sd_decode_csd+0xdc>)
    1886:	681b      	ldr	r3, [r3, #0]
    1888:	330e      	adds	r3, #14
    188a:	0018      	movs	r0, r3
    188c:	2303      	movs	r3, #3
    188e:	222f      	movs	r2, #47	; 0x2f
    1890:	2180      	movs	r1, #128	; 0x80
    1892:	4d0e      	ldr	r5, [pc, #56]	; (18cc <sd_decode_csd+0xe0>)
    1894:	47a8      	blx	r5
    1896:	0003      	movs	r3, r0
    1898:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    189a:	409c      	lsls	r4, r3
    189c:	0023      	movs	r3, r4
    189e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    18a0:	4b09      	ldr	r3, [pc, #36]	; (18c8 <sd_decode_csd+0xdc>)
    18a2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    18a4:	4b08      	ldr	r3, [pc, #32]	; (18c8 <sd_decode_csd+0xdc>)
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	330e      	adds	r3, #14
    18aa:	0018      	movs	r0, r3
    18ac:	2304      	movs	r3, #4
    18ae:	2250      	movs	r2, #80	; 0x50
    18b0:	2180      	movs	r1, #128	; 0x80
    18b2:	4d06      	ldr	r5, [pc, #24]	; (18cc <sd_decode_csd+0xe0>)
    18b4:	47a8      	blx	r5
    18b6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    18b8:	683b      	ldr	r3, [r7, #0]
    18ba:	4093      	lsls	r3, r2
				/ 1024;
    18bc:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    18be:	6063      	str	r3, [r4, #4]
}
    18c0:	46c0      	nop			; (mov r8, r8)
    18c2:	46bd      	mov	sp, r7
    18c4:	b004      	add	sp, #16
    18c6:	bdb0      	pop	{r4, r5, r7, pc}
    18c8:	20000128 	.word	0x20000128
    18cc:	000011b9 	.word	0x000011b9
    18d0:	0000c8a4 	.word	0x0000c8a4
    18d4:	0000c8c0 	.word	0x0000c8c0

000018d8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    18d8:	b580      	push	{r7, lr}
    18da:	b082      	sub	sp, #8
    18dc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    18de:	4b11      	ldr	r3, [pc, #68]	; (1924 <sd_mmc_cmd13+0x4c>)
    18e0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    18e2:	4b11      	ldr	r3, [pc, #68]	; (1928 <sd_mmc_cmd13+0x50>)
    18e4:	2100      	movs	r1, #0
    18e6:	0018      	movs	r0, r3
    18e8:	4b10      	ldr	r3, [pc, #64]	; (192c <sd_mmc_cmd13+0x54>)
    18ea:	4798      	blx	r3
    18ec:	0003      	movs	r3, r0
    18ee:	001a      	movs	r2, r3
    18f0:	2301      	movs	r3, #1
    18f2:	4053      	eors	r3, r2
    18f4:	b2db      	uxtb	r3, r3
    18f6:	2b00      	cmp	r3, #0
    18f8:	d001      	beq.n	18fe <sd_mmc_cmd13+0x26>
				return false;
    18fa:	2300      	movs	r3, #0
    18fc:	e00e      	b.n	191c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    18fe:	4b0c      	ldr	r3, [pc, #48]	; (1930 <sd_mmc_cmd13+0x58>)
    1900:	4798      	blx	r3
    1902:	0002      	movs	r2, r0
    1904:	23ff      	movs	r3, #255	; 0xff
    1906:	4013      	ands	r3, r2
    1908:	d006      	beq.n	1918 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	1e5a      	subs	r2, r3, #1
    190e:	607a      	str	r2, [r7, #4]
    1910:	2b00      	cmp	r3, #0
    1912:	d1e6      	bne.n	18e2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    1914:	2300      	movs	r3, #0
    1916:	e001      	b.n	191c <sd_mmc_cmd13+0x44>
				break;
    1918:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    191a:	2301      	movs	r3, #1
}
    191c:	0018      	movs	r0, r3
    191e:	46bd      	mov	sp, r7
    1920:	b002      	add	sp, #8
    1922:	bd80      	pop	{r7, pc}
    1924:	00030d40 	.word	0x00030d40
    1928:	00001b0d 	.word	0x00001b0d
    192c:	00002dad 	.word	0x00002dad
    1930:	00002fed 	.word	0x00002fed

00001934 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    1934:	b590      	push	{r4, r7, lr}
    1936:	b085      	sub	sp, #20
    1938:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    193a:	4b38      	ldr	r3, [pc, #224]	; (1a1c <sd_acmd51+0xe8>)
    193c:	681b      	ldr	r3, [r3, #0]
    193e:	891b      	ldrh	r3, [r3, #8]
    1940:	041b      	lsls	r3, r3, #16
    1942:	4a37      	ldr	r2, [pc, #220]	; (1a20 <sd_acmd51+0xec>)
    1944:	0019      	movs	r1, r3
    1946:	0010      	movs	r0, r2
    1948:	4b36      	ldr	r3, [pc, #216]	; (1a24 <sd_acmd51+0xf0>)
    194a:	4798      	blx	r3
    194c:	0003      	movs	r3, r0
    194e:	001a      	movs	r2, r3
    1950:	2301      	movs	r3, #1
    1952:	4053      	eors	r3, r2
    1954:	b2db      	uxtb	r3, r3
    1956:	2b00      	cmp	r3, #0
    1958:	d001      	beq.n	195e <sd_acmd51+0x2a>
		return false;
    195a:	2300      	movs	r3, #0
    195c:	e059      	b.n	1a12 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    195e:	4832      	ldr	r0, [pc, #200]	; (1a28 <sd_acmd51+0xf4>)
    1960:	2301      	movs	r3, #1
    1962:	9300      	str	r3, [sp, #0]
    1964:	2301      	movs	r3, #1
    1966:	2208      	movs	r2, #8
    1968:	2100      	movs	r1, #0
    196a:	4c30      	ldr	r4, [pc, #192]	; (1a2c <sd_acmd51+0xf8>)
    196c:	47a0      	blx	r4
    196e:	0003      	movs	r3, r0
    1970:	001a      	movs	r2, r3
    1972:	2301      	movs	r3, #1
    1974:	4053      	eors	r3, r2
    1976:	b2db      	uxtb	r3, r3
    1978:	2b00      	cmp	r3, #0
    197a:	d001      	beq.n	1980 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    197c:	2300      	movs	r3, #0
    197e:	e048      	b.n	1a12 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    1980:	003b      	movs	r3, r7
    1982:	2101      	movs	r1, #1
    1984:	0018      	movs	r0, r3
    1986:	4b2a      	ldr	r3, [pc, #168]	; (1a30 <sd_acmd51+0xfc>)
    1988:	4798      	blx	r3
    198a:	0003      	movs	r3, r0
    198c:	001a      	movs	r2, r3
    198e:	2301      	movs	r3, #1
    1990:	4053      	eors	r3, r2
    1992:	b2db      	uxtb	r3, r3
    1994:	2b00      	cmp	r3, #0
    1996:	d001      	beq.n	199c <sd_acmd51+0x68>
		return false;
    1998:	2300      	movs	r3, #0
    199a:	e03a      	b.n	1a12 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    199c:	4b25      	ldr	r3, [pc, #148]	; (1a34 <sd_acmd51+0x100>)
    199e:	4798      	blx	r3
    19a0:	0003      	movs	r3, r0
    19a2:	001a      	movs	r2, r3
    19a4:	2301      	movs	r3, #1
    19a6:	4053      	eors	r3, r2
    19a8:	b2db      	uxtb	r3, r3
    19aa:	2b00      	cmp	r3, #0
    19ac:	d001      	beq.n	19b2 <sd_acmd51+0x7e>
		return false;
    19ae:	2300      	movs	r3, #0
    19b0:	e02f      	b.n	1a12 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    19b2:	0038      	movs	r0, r7
    19b4:	2304      	movs	r3, #4
    19b6:	2238      	movs	r2, #56	; 0x38
    19b8:	2140      	movs	r1, #64	; 0x40
    19ba:	4c1f      	ldr	r4, [pc, #124]	; (1a38 <sd_acmd51+0x104>)
    19bc:	47a0      	blx	r4
    19be:	0003      	movs	r3, r0
    19c0:	2b01      	cmp	r3, #1
    19c2:	d008      	beq.n	19d6 <sd_acmd51+0xa2>
    19c4:	d302      	bcc.n	19cc <sd_acmd51+0x98>
    19c6:	2b02      	cmp	r3, #2
    19c8:	d00a      	beq.n	19e0 <sd_acmd51+0xac>
    19ca:	e01c      	b.n	1a06 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    19cc:	4b13      	ldr	r3, [pc, #76]	; (1a1c <sd_acmd51+0xe8>)
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	2210      	movs	r2, #16
    19d2:	731a      	strb	r2, [r3, #12]
		break;
    19d4:	e01c      	b.n	1a10 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    19d6:	4b11      	ldr	r3, [pc, #68]	; (1a1c <sd_acmd51+0xe8>)
    19d8:	681b      	ldr	r3, [r3, #0]
    19da:	221a      	movs	r2, #26
    19dc:	731a      	strb	r2, [r3, #12]
		break;
    19de:	e017      	b.n	1a10 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    19e0:	0038      	movs	r0, r7
    19e2:	2301      	movs	r3, #1
    19e4:	222f      	movs	r2, #47	; 0x2f
    19e6:	2140      	movs	r1, #64	; 0x40
    19e8:	4c13      	ldr	r4, [pc, #76]	; (1a38 <sd_acmd51+0x104>)
    19ea:	47a0      	blx	r4
    19ec:	0003      	movs	r3, r0
    19ee:	2b01      	cmp	r3, #1
    19f0:	d104      	bne.n	19fc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    19f2:	4b0a      	ldr	r3, [pc, #40]	; (1a1c <sd_acmd51+0xe8>)
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	2230      	movs	r2, #48	; 0x30
    19f8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    19fa:	e009      	b.n	1a10 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    19fc:	4b07      	ldr	r3, [pc, #28]	; (1a1c <sd_acmd51+0xe8>)
    19fe:	681b      	ldr	r3, [r3, #0]
    1a00:	2220      	movs	r2, #32
    1a02:	731a      	strb	r2, [r3, #12]
		break;
    1a04:	e004      	b.n	1a10 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1a06:	4b05      	ldr	r3, [pc, #20]	; (1a1c <sd_acmd51+0xe8>)
    1a08:	681b      	ldr	r3, [r3, #0]
    1a0a:	2210      	movs	r2, #16
    1a0c:	731a      	strb	r2, [r3, #12]
		break;
    1a0e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    1a10:	2301      	movs	r3, #1
}
    1a12:	0018      	movs	r0, r3
    1a14:	46bd      	mov	sp, r7
    1a16:	b003      	add	sp, #12
    1a18:	bd90      	pop	{r4, r7, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	20000128 	.word	0x20000128
    1a20:	00001137 	.word	0x00001137
    1a24:	00002dad 	.word	0x00002dad
    1a28:	00081133 	.word	0x00081133
    1a2c:	00002dd5 	.word	0x00002dd5
    1a30:	000030a5 	.word	0x000030a5
    1a34:	00003149 	.word	0x00003149
    1a38:	000011b9 	.word	0x000011b9

00001a3c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    1a3c:	b580      	push	{r7, lr}
    1a3e:	b082      	sub	sp, #8
    1a40:	af00      	add	r7, sp, #0
    1a42:	0002      	movs	r2, r0
    1a44:	1dfb      	adds	r3, r7, #7
    1a46:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    1a48:	1dfb      	adds	r3, r7, #7
    1a4a:	781b      	ldrb	r3, [r3, #0]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d001      	beq.n	1a54 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    1a50:	2304      	movs	r3, #4
    1a52:	e047      	b.n	1ae4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    1a54:	1dfb      	adds	r3, r7, #7
    1a56:	781b      	ldrb	r3, [r3, #0]
    1a58:	4a24      	ldr	r2, [pc, #144]	; (1aec <sd_mmc_select_slot+0xb0>)
    1a5a:	015b      	lsls	r3, r3, #5
    1a5c:	18d3      	adds	r3, r2, r3
    1a5e:	330a      	adds	r3, #10
    1a60:	781b      	ldrb	r3, [r3, #0]
    1a62:	2b04      	cmp	r3, #4
    1a64:	d008      	beq.n	1a78 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    1a66:	1dfb      	adds	r3, r7, #7
    1a68:	781b      	ldrb	r3, [r3, #0]
    1a6a:	4a20      	ldr	r2, [pc, #128]	; (1aec <sd_mmc_select_slot+0xb0>)
    1a6c:	015b      	lsls	r3, r3, #5
    1a6e:	18d3      	adds	r3, r2, r3
    1a70:	330a      	adds	r3, #10
    1a72:	781b      	ldrb	r3, [r3, #0]
    1a74:	2b03      	cmp	r3, #3
    1a76:	d11d      	bne.n	1ab4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    1a78:	1dfb      	adds	r3, r7, #7
    1a7a:	781b      	ldrb	r3, [r3, #0]
    1a7c:	4a1b      	ldr	r2, [pc, #108]	; (1aec <sd_mmc_select_slot+0xb0>)
    1a7e:	015b      	lsls	r3, r3, #5
    1a80:	18d3      	adds	r3, r2, r3
    1a82:	330a      	adds	r3, #10
    1a84:	2202      	movs	r2, #2
    1a86:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    1a88:	1dfb      	adds	r3, r7, #7
    1a8a:	781a      	ldrb	r2, [r3, #0]
    1a8c:	4b17      	ldr	r3, [pc, #92]	; (1aec <sd_mmc_select_slot+0xb0>)
    1a8e:	0152      	lsls	r2, r2, #5
    1a90:	4917      	ldr	r1, [pc, #92]	; (1af0 <sd_mmc_select_slot+0xb4>)
    1a92:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    1a94:	1dfb      	adds	r3, r7, #7
    1a96:	781b      	ldrb	r3, [r3, #0]
    1a98:	4a14      	ldr	r2, [pc, #80]	; (1aec <sd_mmc_select_slot+0xb0>)
    1a9a:	015b      	lsls	r3, r3, #5
    1a9c:	18d3      	adds	r3, r2, r3
    1a9e:	330d      	adds	r3, #13
    1aa0:	2201      	movs	r2, #1
    1aa2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    1aa4:	1dfb      	adds	r3, r7, #7
    1aa6:	781b      	ldrb	r3, [r3, #0]
    1aa8:	4a10      	ldr	r2, [pc, #64]	; (1aec <sd_mmc_select_slot+0xb0>)
    1aaa:	015b      	lsls	r3, r3, #5
    1aac:	18d3      	adds	r3, r2, r3
    1aae:	331e      	adds	r3, #30
    1ab0:	2200      	movs	r2, #0
    1ab2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1ab4:	4b0f      	ldr	r3, [pc, #60]	; (1af4 <sd_mmc_select_slot+0xb8>)
    1ab6:	1dfa      	adds	r2, r7, #7
    1ab8:	7812      	ldrb	r2, [r2, #0]
    1aba:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    1abc:	1dfb      	adds	r3, r7, #7
    1abe:	781b      	ldrb	r3, [r3, #0]
    1ac0:	015a      	lsls	r2, r3, #5
    1ac2:	4b0a      	ldr	r3, [pc, #40]	; (1aec <sd_mmc_select_slot+0xb0>)
    1ac4:	18d2      	adds	r2, r2, r3
    1ac6:	4b0c      	ldr	r3, [pc, #48]	; (1af8 <sd_mmc_select_slot+0xbc>)
    1ac8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    1aca:	4b0c      	ldr	r3, [pc, #48]	; (1afc <sd_mmc_select_slot+0xc0>)
    1acc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    1ace:	1dfb      	adds	r3, r7, #7
    1ad0:	781b      	ldrb	r3, [r3, #0]
    1ad2:	4a06      	ldr	r2, [pc, #24]	; (1aec <sd_mmc_select_slot+0xb0>)
    1ad4:	015b      	lsls	r3, r3, #5
    1ad6:	18d3      	adds	r3, r2, r3
    1ad8:	330a      	adds	r3, #10
    1ada:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    1adc:	3b02      	subs	r3, #2
    1ade:	425a      	negs	r2, r3
    1ae0:	4153      	adcs	r3, r2
    1ae2:	b2db      	uxtb	r3, r3
}
    1ae4:	0018      	movs	r0, r3
    1ae6:	46bd      	mov	sp, r7
    1ae8:	b002      	add	sp, #8
    1aea:	bd80      	pop	{r7, pc}
    1aec:	20000104 	.word	0x20000104
    1af0:	00061a80 	.word	0x00061a80
    1af4:	20000124 	.word	0x20000124
    1af8:	20000128 	.word	0x20000128
    1afc:	00001b01 	.word	0x00001b01

00001b00 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    1b00:	b5b0      	push	{r4, r5, r7, lr}
    1b02:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1b04:	4b09      	ldr	r3, [pc, #36]	; (1b2c <sd_mmc_configure_slot+0x2c>)
    1b06:	7818      	ldrb	r0, [r3, #0]
    1b08:	4b09      	ldr	r3, [pc, #36]	; (1b30 <sd_mmc_configure_slot+0x30>)
    1b0a:	681b      	ldr	r3, [r3, #0]
    1b0c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1b0e:	4b08      	ldr	r3, [pc, #32]	; (1b30 <sd_mmc_configure_slot+0x30>)
    1b10:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1b12:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1b14:	4b06      	ldr	r3, [pc, #24]	; (1b30 <sd_mmc_configure_slot+0x30>)
    1b16:	681b      	ldr	r3, [r3, #0]
    1b18:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1b1a:	1e5c      	subs	r4, r3, #1
    1b1c:	41a3      	sbcs	r3, r4
    1b1e:	b2db      	uxtb	r3, r3
    1b20:	4c04      	ldr	r4, [pc, #16]	; (1b34 <sd_mmc_configure_slot+0x34>)
    1b22:	47a0      	blx	r4
}
    1b24:	46c0      	nop			; (mov r8, r8)
    1b26:	46bd      	mov	sp, r7
    1b28:	bdb0      	pop	{r4, r5, r7, pc}
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	20000124 	.word	0x20000124
    1b30:	20000128 	.word	0x20000128
    1b34:	00002c95 	.word	0x00002c95

00001b38 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    1b38:	b580      	push	{r7, lr}
    1b3a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    1b3c:	4b05      	ldr	r3, [pc, #20]	; (1b54 <sd_mmc_deselect_slot+0x1c>)
    1b3e:	781b      	ldrb	r3, [r3, #0]
    1b40:	2b00      	cmp	r3, #0
    1b42:	d104      	bne.n	1b4e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    1b44:	4b03      	ldr	r3, [pc, #12]	; (1b54 <sd_mmc_deselect_slot+0x1c>)
    1b46:	781b      	ldrb	r3, [r3, #0]
    1b48:	0018      	movs	r0, r3
    1b4a:	4b03      	ldr	r3, [pc, #12]	; (1b58 <sd_mmc_deselect_slot+0x20>)
    1b4c:	4798      	blx	r3
	}
}
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	46bd      	mov	sp, r7
    1b52:	bd80      	pop	{r7, pc}
    1b54:	20000124 	.word	0x20000124
    1b58:	00002d1d 	.word	0x00002d1d

00001b5c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	b082      	sub	sp, #8
    1b60:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    1b62:	1dfb      	adds	r3, r7, #7
    1b64:	2200      	movs	r2, #0
    1b66:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    1b68:	4b59      	ldr	r3, [pc, #356]	; (1cd0 <sd_mmc_spi_card_init+0x174>)
    1b6a:	681b      	ldr	r3, [r3, #0]
    1b6c:	2201      	movs	r2, #1
    1b6e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    1b70:	4b57      	ldr	r3, [pc, #348]	; (1cd0 <sd_mmc_spi_card_init+0x174>)
    1b72:	681b      	ldr	r3, [r3, #0]
    1b74:	2200      	movs	r2, #0
    1b76:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    1b78:	4b55      	ldr	r3, [pc, #340]	; (1cd0 <sd_mmc_spi_card_init+0x174>)
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	2200      	movs	r2, #0
    1b7e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    1b80:	4b54      	ldr	r3, [pc, #336]	; (1cd4 <sd_mmc_spi_card_init+0x178>)
    1b82:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1b84:	2388      	movs	r3, #136	; 0x88
    1b86:	015b      	lsls	r3, r3, #5
    1b88:	2100      	movs	r1, #0
    1b8a:	0018      	movs	r0, r3
    1b8c:	4b52      	ldr	r3, [pc, #328]	; (1cd8 <sd_mmc_spi_card_init+0x17c>)
    1b8e:	4798      	blx	r3
    1b90:	0003      	movs	r3, r0
    1b92:	001a      	movs	r2, r3
    1b94:	2301      	movs	r3, #1
    1b96:	4053      	eors	r3, r2
    1b98:	b2db      	uxtb	r3, r3
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d001      	beq.n	1ba2 <sd_mmc_spi_card_init+0x46>
		return false;
    1b9e:	2300      	movs	r3, #0
    1ba0:	e092      	b.n	1cc8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    1ba2:	1dfb      	adds	r3, r7, #7
    1ba4:	0018      	movs	r0, r3
    1ba6:	4b4d      	ldr	r3, [pc, #308]	; (1cdc <sd_mmc_spi_card_init+0x180>)
    1ba8:	4798      	blx	r3
    1baa:	0003      	movs	r3, r0
    1bac:	001a      	movs	r2, r3
    1bae:	2301      	movs	r3, #1
    1bb0:	4053      	eors	r3, r2
    1bb2:	b2db      	uxtb	r3, r3
    1bb4:	2b00      	cmp	r3, #0
    1bb6:	d001      	beq.n	1bbc <sd_mmc_spi_card_init+0x60>
		return false;
    1bb8:	2300      	movs	r3, #0
    1bba:	e085      	b.n	1cc8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1bbc:	4b48      	ldr	r3, [pc, #288]	; (1ce0 <sd_mmc_spi_card_init+0x184>)
    1bbe:	4798      	blx	r3
    1bc0:	0003      	movs	r3, r0
    1bc2:	001a      	movs	r2, r3
    1bc4:	2301      	movs	r3, #1
    1bc6:	4053      	eors	r3, r2
    1bc8:	b2db      	uxtb	r3, r3
    1bca:	2b00      	cmp	r3, #0
    1bcc:	d001      	beq.n	1bd2 <sd_mmc_spi_card_init+0x76>
		return false;
    1bce:	2300      	movs	r3, #0
    1bd0:	e07a      	b.n	1cc8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1bd2:	4b3f      	ldr	r3, [pc, #252]	; (1cd0 <sd_mmc_spi_card_init+0x174>)
    1bd4:	681b      	ldr	r3, [r3, #0]
    1bd6:	7adb      	ldrb	r3, [r3, #11]
    1bd8:	001a      	movs	r2, r3
    1bda:	2301      	movs	r3, #1
    1bdc:	4013      	ands	r3, r2
    1bde:	d021      	beq.n	1c24 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1be0:	1dfb      	adds	r3, r7, #7
    1be2:	781b      	ldrb	r3, [r3, #0]
    1be4:	0018      	movs	r0, r3
    1be6:	4b3f      	ldr	r3, [pc, #252]	; (1ce4 <sd_mmc_spi_card_init+0x188>)
    1be8:	4798      	blx	r3
    1bea:	0003      	movs	r3, r0
    1bec:	001a      	movs	r2, r3
    1bee:	2301      	movs	r3, #1
    1bf0:	4053      	eors	r3, r2
    1bf2:	b2db      	uxtb	r3, r3
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d007      	beq.n	1c08 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    1bf8:	4b35      	ldr	r3, [pc, #212]	; (1cd0 <sd_mmc_spi_card_init+0x174>)
    1bfa:	681b      	ldr	r3, [r3, #0]
    1bfc:	2202      	movs	r2, #2
    1bfe:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    1c00:	4b39      	ldr	r3, [pc, #228]	; (1ce8 <sd_mmc_spi_card_init+0x18c>)
    1c02:	4798      	blx	r3
    1c04:	0003      	movs	r3, r0
    1c06:	e05f      	b.n	1cc8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1c08:	4b38      	ldr	r3, [pc, #224]	; (1cec <sd_mmc_spi_card_init+0x190>)
    1c0a:	2100      	movs	r1, #0
    1c0c:	0018      	movs	r0, r3
    1c0e:	4b32      	ldr	r3, [pc, #200]	; (1cd8 <sd_mmc_spi_card_init+0x17c>)
    1c10:	4798      	blx	r3
    1c12:	0003      	movs	r3, r0
    1c14:	001a      	movs	r2, r3
    1c16:	2301      	movs	r3, #1
    1c18:	4053      	eors	r3, r2
    1c1a:	b2db      	uxtb	r3, r3
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d001      	beq.n	1c24 <sd_mmc_spi_card_init+0xc8>
			return false;
    1c20:	2300      	movs	r3, #0
    1c22:	e051      	b.n	1cc8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1c24:	4b2a      	ldr	r3, [pc, #168]	; (1cd0 <sd_mmc_spi_card_init+0x174>)
    1c26:	681b      	ldr	r3, [r3, #0]
    1c28:	7adb      	ldrb	r3, [r3, #11]
    1c2a:	001a      	movs	r2, r3
    1c2c:	2301      	movs	r3, #1
    1c2e:	4013      	ands	r3, r2
    1c30:	d017      	beq.n	1c62 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    1c32:	4b2f      	ldr	r3, [pc, #188]	; (1cf0 <sd_mmc_spi_card_init+0x194>)
    1c34:	4798      	blx	r3
    1c36:	0003      	movs	r3, r0
    1c38:	001a      	movs	r2, r3
    1c3a:	2301      	movs	r3, #1
    1c3c:	4053      	eors	r3, r2
    1c3e:	b2db      	uxtb	r3, r3
    1c40:	2b00      	cmp	r3, #0
    1c42:	d001      	beq.n	1c48 <sd_mmc_spi_card_init+0xec>
			return false;
    1c44:	2300      	movs	r3, #0
    1c46:	e03f      	b.n	1cc8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    1c48:	4b2a      	ldr	r3, [pc, #168]	; (1cf4 <sd_mmc_spi_card_init+0x198>)
    1c4a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    1c4c:	4b2a      	ldr	r3, [pc, #168]	; (1cf8 <sd_mmc_spi_card_init+0x19c>)
    1c4e:	4798      	blx	r3
    1c50:	0003      	movs	r3, r0
    1c52:	001a      	movs	r2, r3
    1c54:	2301      	movs	r3, #1
    1c56:	4053      	eors	r3, r2
    1c58:	b2db      	uxtb	r3, r3
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d001      	beq.n	1c62 <sd_mmc_spi_card_init+0x106>
			return false;
    1c5e:	2300      	movs	r3, #0
    1c60:	e032      	b.n	1cc8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1c62:	4b1b      	ldr	r3, [pc, #108]	; (1cd0 <sd_mmc_spi_card_init+0x174>)
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	7adb      	ldrb	r3, [r3, #11]
    1c68:	001a      	movs	r2, r3
    1c6a:	2301      	movs	r3, #1
    1c6c:	4013      	ands	r3, r2
    1c6e:	d016      	beq.n	1c9e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    1c70:	4b17      	ldr	r3, [pc, #92]	; (1cd0 <sd_mmc_spi_card_init+0x174>)
    1c72:	681b      	ldr	r3, [r3, #0]
    1c74:	7adb      	ldrb	r3, [r3, #11]
    1c76:	001a      	movs	r2, r3
    1c78:	2308      	movs	r3, #8
    1c7a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1c7c:	d10f      	bne.n	1c9e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1c7e:	2380      	movs	r3, #128	; 0x80
    1c80:	009b      	lsls	r3, r3, #2
    1c82:	4a1e      	ldr	r2, [pc, #120]	; (1cfc <sd_mmc_spi_card_init+0x1a0>)
    1c84:	0019      	movs	r1, r3
    1c86:	0010      	movs	r0, r2
    1c88:	4b13      	ldr	r3, [pc, #76]	; (1cd8 <sd_mmc_spi_card_init+0x17c>)
    1c8a:	4798      	blx	r3
    1c8c:	0003      	movs	r3, r0
    1c8e:	001a      	movs	r2, r3
    1c90:	2301      	movs	r3, #1
    1c92:	4053      	eors	r3, r2
    1c94:	b2db      	uxtb	r3, r3
    1c96:	2b00      	cmp	r3, #0
    1c98:	d001      	beq.n	1c9e <sd_mmc_spi_card_init+0x142>
			return false;
    1c9a:	2300      	movs	r3, #0
    1c9c:	e014      	b.n	1cc8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1c9e:	4b0c      	ldr	r3, [pc, #48]	; (1cd0 <sd_mmc_spi_card_init+0x174>)
    1ca0:	681b      	ldr	r3, [r3, #0]
    1ca2:	7adb      	ldrb	r3, [r3, #11]
    1ca4:	001a      	movs	r2, r3
    1ca6:	2301      	movs	r3, #1
    1ca8:	4013      	ands	r3, r2
    1caa:	d00a      	beq.n	1cc2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1cac:	4b14      	ldr	r3, [pc, #80]	; (1d00 <sd_mmc_spi_card_init+0x1a4>)
    1cae:	4798      	blx	r3
    1cb0:	0003      	movs	r3, r0
    1cb2:	001a      	movs	r2, r3
    1cb4:	2301      	movs	r3, #1
    1cb6:	4053      	eors	r3, r2
    1cb8:	b2db      	uxtb	r3, r3
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d001      	beq.n	1cc2 <sd_mmc_spi_card_init+0x166>
			return false;
    1cbe:	2300      	movs	r3, #0
    1cc0:	e002      	b.n	1cc8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1cc2:	4b10      	ldr	r3, [pc, #64]	; (1d04 <sd_mmc_spi_card_init+0x1a8>)
    1cc4:	4798      	blx	r3
	return true;
    1cc6:	2301      	movs	r3, #1
}
    1cc8:	0018      	movs	r0, r3
    1cca:	46bd      	mov	sp, r7
    1ccc:	b002      	add	sp, #8
    1cce:	bd80      	pop	{r7, pc}
    1cd0:	20000128 	.word	0x20000128
    1cd4:	00002d61 	.word	0x00002d61
    1cd8:	00002dad 	.word	0x00002dad
    1cdc:	000014b1 	.word	0x000014b1
    1ce0:	000014a5 	.word	0x000014a5
    1ce4:	000013c1 	.word	0x000013c1
    1ce8:	00001d09 	.word	0x00001d09
    1cec:	0000113b 	.word	0x0000113b
    1cf0:	0000164d 	.word	0x0000164d
    1cf4:	000017ed 	.word	0x000017ed
    1cf8:	00001935 	.word	0x00001935
    1cfc:	00001110 	.word	0x00001110
    1d00:	000018d9 	.word	0x000018d9
    1d04:	00001b01 	.word	0x00001b01

00001d08 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    1d08:	b580      	push	{r7, lr}
    1d0a:	b082      	sub	sp, #8
    1d0c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1d0e:	2388      	movs	r3, #136	; 0x88
    1d10:	015b      	lsls	r3, r3, #5
    1d12:	2100      	movs	r1, #0
    1d14:	0018      	movs	r0, r3
    1d16:	4b32      	ldr	r3, [pc, #200]	; (1de0 <sd_mmc_spi_install_mmc+0xd8>)
    1d18:	4798      	blx	r3
    1d1a:	0003      	movs	r3, r0
    1d1c:	001a      	movs	r2, r3
    1d1e:	2301      	movs	r3, #1
    1d20:	4053      	eors	r3, r2
    1d22:	b2db      	uxtb	r3, r3
    1d24:	2b00      	cmp	r3, #0
    1d26:	d001      	beq.n	1d2c <sd_mmc_spi_install_mmc+0x24>
		return false;
    1d28:	2300      	movs	r3, #0
    1d2a:	e055      	b.n	1dd8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    1d2c:	4b2d      	ldr	r3, [pc, #180]	; (1de4 <sd_mmc_spi_install_mmc+0xdc>)
    1d2e:	4798      	blx	r3
    1d30:	0003      	movs	r3, r0
    1d32:	001a      	movs	r2, r3
    1d34:	2301      	movs	r3, #1
    1d36:	4053      	eors	r3, r2
    1d38:	b2db      	uxtb	r3, r3
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d001      	beq.n	1d42 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    1d3e:	2300      	movs	r3, #0
    1d40:	e04a      	b.n	1dd8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1d42:	4b29      	ldr	r3, [pc, #164]	; (1de8 <sd_mmc_spi_install_mmc+0xe0>)
    1d44:	2100      	movs	r1, #0
    1d46:	0018      	movs	r0, r3
    1d48:	4b25      	ldr	r3, [pc, #148]	; (1de0 <sd_mmc_spi_install_mmc+0xd8>)
    1d4a:	4798      	blx	r3
    1d4c:	0003      	movs	r3, r0
    1d4e:	001a      	movs	r2, r3
    1d50:	2301      	movs	r3, #1
    1d52:	4053      	eors	r3, r2
    1d54:	b2db      	uxtb	r3, r3
    1d56:	2b00      	cmp	r3, #0
    1d58:	d001      	beq.n	1d5e <sd_mmc_spi_install_mmc+0x56>
		return false;
    1d5a:	2300      	movs	r3, #0
    1d5c:	e03c      	b.n	1dd8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    1d5e:	4b23      	ldr	r3, [pc, #140]	; (1dec <sd_mmc_spi_install_mmc+0xe4>)
    1d60:	4798      	blx	r3
    1d62:	0003      	movs	r3, r0
    1d64:	001a      	movs	r2, r3
    1d66:	2301      	movs	r3, #1
    1d68:	4053      	eors	r3, r2
    1d6a:	b2db      	uxtb	r3, r3
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d001      	beq.n	1d74 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    1d70:	2300      	movs	r3, #0
    1d72:	e031      	b.n	1dd8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    1d74:	4b1e      	ldr	r3, [pc, #120]	; (1df0 <sd_mmc_spi_install_mmc+0xe8>)
    1d76:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    1d78:	4b1e      	ldr	r3, [pc, #120]	; (1df4 <sd_mmc_spi_install_mmc+0xec>)
    1d7a:	681b      	ldr	r3, [r3, #0]
    1d7c:	7b1b      	ldrb	r3, [r3, #12]
    1d7e:	2b3f      	cmp	r3, #63	; 0x3f
    1d80:	d90c      	bls.n	1d9c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    1d82:	1dfb      	adds	r3, r7, #7
    1d84:	0018      	movs	r0, r3
    1d86:	4b1c      	ldr	r3, [pc, #112]	; (1df8 <sd_mmc_spi_install_mmc+0xf0>)
    1d88:	4798      	blx	r3
    1d8a:	0003      	movs	r3, r0
    1d8c:	001a      	movs	r2, r3
    1d8e:	2301      	movs	r3, #1
    1d90:	4053      	eors	r3, r2
    1d92:	b2db      	uxtb	r3, r3
    1d94:	2b00      	cmp	r3, #0
    1d96:	d001      	beq.n	1d9c <sd_mmc_spi_install_mmc+0x94>
			return false;
    1d98:	2300      	movs	r3, #0
    1d9a:	e01d      	b.n	1dd8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1d9c:	2380      	movs	r3, #128	; 0x80
    1d9e:	009b      	lsls	r3, r3, #2
    1da0:	4a16      	ldr	r2, [pc, #88]	; (1dfc <sd_mmc_spi_install_mmc+0xf4>)
    1da2:	0019      	movs	r1, r3
    1da4:	0010      	movs	r0, r2
    1da6:	4b0e      	ldr	r3, [pc, #56]	; (1de0 <sd_mmc_spi_install_mmc+0xd8>)
    1da8:	4798      	blx	r3
    1daa:	0003      	movs	r3, r0
    1dac:	001a      	movs	r2, r3
    1dae:	2301      	movs	r3, #1
    1db0:	4053      	eors	r3, r2
    1db2:	b2db      	uxtb	r3, r3
    1db4:	2b00      	cmp	r3, #0
    1db6:	d001      	beq.n	1dbc <sd_mmc_spi_install_mmc+0xb4>
		return false;
    1db8:	2300      	movs	r3, #0
    1dba:	e00d      	b.n	1dd8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1dbc:	4b10      	ldr	r3, [pc, #64]	; (1e00 <sd_mmc_spi_install_mmc+0xf8>)
    1dbe:	4798      	blx	r3
    1dc0:	0003      	movs	r3, r0
    1dc2:	001a      	movs	r2, r3
    1dc4:	2301      	movs	r3, #1
    1dc6:	4053      	eors	r3, r2
    1dc8:	b2db      	uxtb	r3, r3
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d001      	beq.n	1dd2 <sd_mmc_spi_install_mmc+0xca>
		return false;
    1dce:	2300      	movs	r3, #0
    1dd0:	e002      	b.n	1dd8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1dd2:	4b0c      	ldr	r3, [pc, #48]	; (1e04 <sd_mmc_spi_install_mmc+0xfc>)
    1dd4:	4798      	blx	r3
	return true;
    1dd6:	2301      	movs	r3, #1
}
    1dd8:	0018      	movs	r0, r3
    1dda:	46bd      	mov	sp, r7
    1ddc:	b002      	add	sp, #8
    1dde:	bd80      	pop	{r7, pc}
    1de0:	00002dad 	.word	0x00002dad
    1de4:	00001315 	.word	0x00001315
    1de8:	0000113b 	.word	0x0000113b
    1dec:	0000164d 	.word	0x0000164d
    1df0:	000016bd 	.word	0x000016bd
    1df4:	20000128 	.word	0x20000128
    1df8:	00001521 	.word	0x00001521
    1dfc:	00001110 	.word	0x00001110
    1e00:	000018d9 	.word	0x000018d9
    1e04:	00001b01 	.word	0x00001b01

00001e08 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    1e08:	b580      	push	{r7, lr}
    1e0a:	b082      	sub	sp, #8
    1e0c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1e0e:	1dfb      	adds	r3, r7, #7
    1e10:	2200      	movs	r2, #0
    1e12:	701a      	strb	r2, [r3, #0]
    1e14:	e00c      	b.n	1e30 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1e16:	1dfb      	adds	r3, r7, #7
    1e18:	781b      	ldrb	r3, [r3, #0]
    1e1a:	4a0c      	ldr	r2, [pc, #48]	; (1e4c <sd_mmc_init+0x44>)
    1e1c:	015b      	lsls	r3, r3, #5
    1e1e:	18d3      	adds	r3, r2, r3
    1e20:	330a      	adds	r3, #10
    1e22:	2204      	movs	r2, #4
    1e24:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1e26:	1dfb      	adds	r3, r7, #7
    1e28:	781a      	ldrb	r2, [r3, #0]
    1e2a:	1dfb      	adds	r3, r7, #7
    1e2c:	3201      	adds	r2, #1
    1e2e:	701a      	strb	r2, [r3, #0]
    1e30:	1dfb      	adds	r3, r7, #7
    1e32:	781b      	ldrb	r3, [r3, #0]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d0ee      	beq.n	1e16 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    1e38:	4b05      	ldr	r3, [pc, #20]	; (1e50 <sd_mmc_init+0x48>)
    1e3a:	22ff      	movs	r2, #255	; 0xff
    1e3c:	701a      	strb	r2, [r3, #0]
	driver_init();
    1e3e:	4b05      	ldr	r3, [pc, #20]	; (1e54 <sd_mmc_init+0x4c>)
    1e40:	4798      	blx	r3
}
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	46bd      	mov	sp, r7
    1e46:	b002      	add	sp, #8
    1e48:	bd80      	pop	{r7, pc}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	20000104 	.word	0x20000104
    1e50:	20000124 	.word	0x20000124
    1e54:	00002bcd 	.word	0x00002bcd

00001e58 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    1e58:	b590      	push	{r4, r7, lr}
    1e5a:	b085      	sub	sp, #20
    1e5c:	af00      	add	r7, sp, #0
    1e5e:	0002      	movs	r2, r0
    1e60:	1dfb      	adds	r3, r7, #7
    1e62:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1e64:	230f      	movs	r3, #15
    1e66:	18fc      	adds	r4, r7, r3
    1e68:	1dfb      	adds	r3, r7, #7
    1e6a:	781b      	ldrb	r3, [r3, #0]
    1e6c:	0018      	movs	r0, r3
    1e6e:	4b13      	ldr	r3, [pc, #76]	; (1ebc <sd_mmc_check+0x64>)
    1e70:	4798      	blx	r3
    1e72:	0003      	movs	r3, r0
    1e74:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    1e76:	230f      	movs	r3, #15
    1e78:	18fb      	adds	r3, r7, r3
    1e7a:	781b      	ldrb	r3, [r3, #0]
    1e7c:	2b01      	cmp	r3, #1
    1e7e:	d005      	beq.n	1e8c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    1e80:	4b0f      	ldr	r3, [pc, #60]	; (1ec0 <sd_mmc_check+0x68>)
    1e82:	4798      	blx	r3
		return sd_mmc_err;
    1e84:	230f      	movs	r3, #15
    1e86:	18fb      	adds	r3, r7, r3
    1e88:	781b      	ldrb	r3, [r3, #0]
    1e8a:	e012      	b.n	1eb2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1e8c:	4b0d      	ldr	r3, [pc, #52]	; (1ec4 <sd_mmc_check+0x6c>)
    1e8e:	4798      	blx	r3
    1e90:	1e03      	subs	r3, r0, #0
    1e92:	d007      	beq.n	1ea4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    1e94:	4b0c      	ldr	r3, [pc, #48]	; (1ec8 <sd_mmc_check+0x70>)
    1e96:	681b      	ldr	r3, [r3, #0]
    1e98:	2200      	movs	r2, #0
    1e9a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1e9c:	4b08      	ldr	r3, [pc, #32]	; (1ec0 <sd_mmc_check+0x68>)
    1e9e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1ea0:	2301      	movs	r3, #1
    1ea2:	e006      	b.n	1eb2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1ea4:	4b08      	ldr	r3, [pc, #32]	; (1ec8 <sd_mmc_check+0x70>)
    1ea6:	681b      	ldr	r3, [r3, #0]
    1ea8:	2203      	movs	r2, #3
    1eaa:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1eac:	4b04      	ldr	r3, [pc, #16]	; (1ec0 <sd_mmc_check+0x68>)
    1eae:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1eb0:	2303      	movs	r3, #3
}
    1eb2:	0018      	movs	r0, r3
    1eb4:	46bd      	mov	sp, r7
    1eb6:	b005      	add	sp, #20
    1eb8:	bd90      	pop	{r4, r7, pc}
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	00001a3d 	.word	0x00001a3d
    1ec0:	00001b39 	.word	0x00001b39
    1ec4:	00001b5d 	.word	0x00001b5d
    1ec8:	20000128 	.word	0x20000128

00001ecc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1ecc:	b580      	push	{r7, lr}
    1ece:	b082      	sub	sp, #8
    1ed0:	af00      	add	r7, sp, #0
    1ed2:	0002      	movs	r2, r0
    1ed4:	1dfb      	adds	r3, r7, #7
    1ed6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1ed8:	1dfb      	adds	r3, r7, #7
    1eda:	781b      	ldrb	r3, [r3, #0]
    1edc:	0018      	movs	r0, r3
    1ede:	4b07      	ldr	r3, [pc, #28]	; (1efc <sd_mmc_get_type+0x30>)
    1ee0:	4798      	blx	r3
    1ee2:	1e03      	subs	r3, r0, #0
    1ee4:	d001      	beq.n	1eea <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    1ee6:	2300      	movs	r3, #0
    1ee8:	e004      	b.n	1ef4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    1eea:	4b05      	ldr	r3, [pc, #20]	; (1f00 <sd_mmc_get_type+0x34>)
    1eec:	4798      	blx	r3
	return sd_mmc_card->type;
    1eee:	4b05      	ldr	r3, [pc, #20]	; (1f04 <sd_mmc_get_type+0x38>)
    1ef0:	681b      	ldr	r3, [r3, #0]
    1ef2:	7adb      	ldrb	r3, [r3, #11]
}
    1ef4:	0018      	movs	r0, r3
    1ef6:	46bd      	mov	sp, r7
    1ef8:	b002      	add	sp, #8
    1efa:	bd80      	pop	{r7, pc}
    1efc:	00001a3d 	.word	0x00001a3d
    1f00:	00001b39 	.word	0x00001b39
    1f04:	20000128 	.word	0x20000128

00001f08 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1f08:	b580      	push	{r7, lr}
    1f0a:	b082      	sub	sp, #8
    1f0c:	af00      	add	r7, sp, #0
    1f0e:	0002      	movs	r2, r0
    1f10:	1dfb      	adds	r3, r7, #7
    1f12:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1f14:	1dfb      	adds	r3, r7, #7
    1f16:	781b      	ldrb	r3, [r3, #0]
    1f18:	0018      	movs	r0, r3
    1f1a:	4b07      	ldr	r3, [pc, #28]	; (1f38 <sd_mmc_get_capacity+0x30>)
    1f1c:	4798      	blx	r3
    1f1e:	1e03      	subs	r3, r0, #0
    1f20:	d001      	beq.n	1f26 <sd_mmc_get_capacity+0x1e>
		return 0;
    1f22:	2300      	movs	r3, #0
    1f24:	e004      	b.n	1f30 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    1f26:	4b05      	ldr	r3, [pc, #20]	; (1f3c <sd_mmc_get_capacity+0x34>)
    1f28:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1f2a:	4b05      	ldr	r3, [pc, #20]	; (1f40 <sd_mmc_get_capacity+0x38>)
    1f2c:	681b      	ldr	r3, [r3, #0]
    1f2e:	685b      	ldr	r3, [r3, #4]
}
    1f30:	0018      	movs	r0, r3
    1f32:	46bd      	mov	sp, r7
    1f34:	b002      	add	sp, #8
    1f36:	bd80      	pop	{r7, pc}
    1f38:	00001a3d 	.word	0x00001a3d
    1f3c:	00001b39 	.word	0x00001b39
    1f40:	20000128 	.word	0x20000128

00001f44 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1f44:	b580      	push	{r7, lr}
    1f46:	b082      	sub	sp, #8
    1f48:	af00      	add	r7, sp, #0
    1f4a:	0002      	movs	r2, r0
    1f4c:	1dfb      	adds	r3, r7, #7
    1f4e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    1f50:	2300      	movs	r3, #0
}
    1f52:	0018      	movs	r0, r3
    1f54:	46bd      	mov	sp, r7
    1f56:	b002      	add	sp, #8
    1f58:	bd80      	pop	{r7, pc}
	...

00001f5c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1f5c:	b590      	push	{r4, r7, lr}
    1f5e:	b089      	sub	sp, #36	; 0x24
    1f60:	af02      	add	r7, sp, #8
    1f62:	6039      	str	r1, [r7, #0]
    1f64:	0011      	movs	r1, r2
    1f66:	1dfb      	adds	r3, r7, #7
    1f68:	1c02      	adds	r2, r0, #0
    1f6a:	701a      	strb	r2, [r3, #0]
    1f6c:	1d3b      	adds	r3, r7, #4
    1f6e:	1c0a      	adds	r2, r1, #0
    1f70:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1f72:	230f      	movs	r3, #15
    1f74:	18fc      	adds	r4, r7, r3
    1f76:	1dfb      	adds	r3, r7, #7
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	0018      	movs	r0, r3
    1f7c:	4b29      	ldr	r3, [pc, #164]	; (2024 <STACK_SIZE+0x24>)
    1f7e:	4798      	blx	r3
    1f80:	0003      	movs	r3, r0
    1f82:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1f84:	230f      	movs	r3, #15
    1f86:	18fb      	adds	r3, r7, r3
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d003      	beq.n	1f96 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    1f8e:	230f      	movs	r3, #15
    1f90:	18fb      	adds	r3, r7, r3
    1f92:	781b      	ldrb	r3, [r3, #0]
    1f94:	e041      	b.n	201a <STACK_SIZE+0x1a>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1f96:	4b24      	ldr	r3, [pc, #144]	; (2028 <STACK_SIZE+0x28>)
    1f98:	4798      	blx	r3
    1f9a:	0003      	movs	r3, r0
    1f9c:	001a      	movs	r2, r3
    1f9e:	2301      	movs	r3, #1
    1fa0:	4053      	eors	r3, r2
    1fa2:	b2db      	uxtb	r3, r3
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d003      	beq.n	1fb0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    1fa8:	4b20      	ldr	r3, [pc, #128]	; (202c <STACK_SIZE+0x2c>)
    1faa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1fac:	2305      	movs	r3, #5
    1fae:	e034      	b.n	201a <STACK_SIZE+0x1a>
	}

	if (nb_block > 1) {
    1fb0:	1d3b      	adds	r3, r7, #4
    1fb2:	881b      	ldrh	r3, [r3, #0]
    1fb4:	2b01      	cmp	r3, #1
    1fb6:	d902      	bls.n	1fbe <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    1fb8:	4b1d      	ldr	r3, [pc, #116]	; (2030 <STACK_SIZE+0x30>)
    1fba:	617b      	str	r3, [r7, #20]
    1fbc:	e001      	b.n	1fc2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    1fbe:	4b1d      	ldr	r3, [pc, #116]	; (2034 <STACK_SIZE+0x34>)
    1fc0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1fc2:	4b1d      	ldr	r3, [pc, #116]	; (2038 <STACK_SIZE+0x38>)
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	7adb      	ldrb	r3, [r3, #11]
    1fc8:	001a      	movs	r2, r3
    1fca:	2308      	movs	r3, #8
    1fcc:	4013      	ands	r3, r2
    1fce:	d002      	beq.n	1fd6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    1fd0:	683b      	ldr	r3, [r7, #0]
    1fd2:	613b      	str	r3, [r7, #16]
    1fd4:	e002      	b.n	1fdc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1fd6:	683b      	ldr	r3, [r7, #0]
    1fd8:	025b      	lsls	r3, r3, #9
    1fda:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1fdc:	1d3b      	adds	r3, r7, #4
    1fde:	881c      	ldrh	r4, [r3, #0]
    1fe0:	2380      	movs	r3, #128	; 0x80
    1fe2:	009a      	lsls	r2, r3, #2
    1fe4:	6939      	ldr	r1, [r7, #16]
    1fe6:	6978      	ldr	r0, [r7, #20]
    1fe8:	2301      	movs	r3, #1
    1fea:	9300      	str	r3, [sp, #0]
    1fec:	0023      	movs	r3, r4
    1fee:	4c13      	ldr	r4, [pc, #76]	; (203c <STACK_SIZE+0x3c>)
    1ff0:	47a0      	blx	r4
    1ff2:	0003      	movs	r3, r0
    1ff4:	001a      	movs	r2, r3
    1ff6:	2301      	movs	r3, #1
    1ff8:	4053      	eors	r3, r2
    1ffa:	b2db      	uxtb	r3, r3
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	d003      	beq.n	2008 <STACK_SIZE+0x8>
		sd_mmc_deselect_slot();
    2000:	4b0a      	ldr	r3, [pc, #40]	; (202c <STACK_SIZE+0x2c>)
    2002:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    2004:	2305      	movs	r3, #5
    2006:	e008      	b.n	201a <STACK_SIZE+0x1a>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    2008:	4b0d      	ldr	r3, [pc, #52]	; (2040 <STACK_SIZE+0x40>)
    200a:	1d3a      	adds	r2, r7, #4
    200c:	8812      	ldrh	r2, [r2, #0]
    200e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    2010:	4b0c      	ldr	r3, [pc, #48]	; (2044 <STACK_SIZE+0x44>)
    2012:	1d3a      	adds	r2, r7, #4
    2014:	8812      	ldrh	r2, [r2, #0]
    2016:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2018:	2300      	movs	r3, #0
}
    201a:	0018      	movs	r0, r3
    201c:	46bd      	mov	sp, r7
    201e:	b007      	add	sp, #28
    2020:	bd90      	pop	{r4, r7, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	00001a3d 	.word	0x00001a3d
    2028:	000018d9 	.word	0x000018d9
    202c:	00001b39 	.word	0x00001b39
    2030:	00101112 	.word	0x00101112
    2034:	00081111 	.word	0x00081111
    2038:	20000128 	.word	0x20000128
    203c:	00002dd5 	.word	0x00002dd5
    2040:	2000012e 	.word	0x2000012e
    2044:	2000012c 	.word	0x2000012c

00002048 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    2048:	b580      	push	{r7, lr}
    204a:	b082      	sub	sp, #8
    204c:	af00      	add	r7, sp, #0
    204e:	6078      	str	r0, [r7, #4]
    2050:	000a      	movs	r2, r1
    2052:	1cbb      	adds	r3, r7, #2
    2054:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    2056:	1cbb      	adds	r3, r7, #2
    2058:	881a      	ldrh	r2, [r3, #0]
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	0011      	movs	r1, r2
    205e:	0018      	movs	r0, r3
    2060:	4b0d      	ldr	r3, [pc, #52]	; (2098 <sd_mmc_start_read_blocks+0x50>)
    2062:	4798      	blx	r3
    2064:	0003      	movs	r3, r0
    2066:	001a      	movs	r2, r3
    2068:	2301      	movs	r3, #1
    206a:	4053      	eors	r3, r2
    206c:	b2db      	uxtb	r3, r3
    206e:	2b00      	cmp	r3, #0
    2070:	d004      	beq.n	207c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    2072:	4b0a      	ldr	r3, [pc, #40]	; (209c <sd_mmc_start_read_blocks+0x54>)
    2074:	2200      	movs	r2, #0
    2076:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    2078:	2305      	movs	r3, #5
    207a:	e008      	b.n	208e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    207c:	4b07      	ldr	r3, [pc, #28]	; (209c <sd_mmc_start_read_blocks+0x54>)
    207e:	881a      	ldrh	r2, [r3, #0]
    2080:	1cbb      	adds	r3, r7, #2
    2082:	881b      	ldrh	r3, [r3, #0]
    2084:	1ad3      	subs	r3, r2, r3
    2086:	b29a      	uxth	r2, r3
    2088:	4b04      	ldr	r3, [pc, #16]	; (209c <sd_mmc_start_read_blocks+0x54>)
    208a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    208c:	2300      	movs	r3, #0
}
    208e:	0018      	movs	r0, r3
    2090:	46bd      	mov	sp, r7
    2092:	b002      	add	sp, #8
    2094:	bd80      	pop	{r7, pc}
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	000030a5 	.word	0x000030a5
    209c:	2000012e 	.word	0x2000012e

000020a0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    20a0:	b580      	push	{r7, lr}
    20a2:	b082      	sub	sp, #8
    20a4:	af00      	add	r7, sp, #0
    20a6:	0002      	movs	r2, r0
    20a8:	1dfb      	adds	r3, r7, #7
    20aa:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    20ac:	4b1c      	ldr	r3, [pc, #112]	; (2120 <sd_mmc_wait_end_of_read_blocks+0x80>)
    20ae:	4798      	blx	r3
    20b0:	0003      	movs	r3, r0
    20b2:	001a      	movs	r2, r3
    20b4:	2301      	movs	r3, #1
    20b6:	4053      	eors	r3, r2
    20b8:	b2db      	uxtb	r3, r3
    20ba:	2b00      	cmp	r3, #0
    20bc:	d001      	beq.n	20c2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    20be:	2305      	movs	r3, #5
    20c0:	e029      	b.n	2116 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    20c2:	1dfb      	adds	r3, r7, #7
    20c4:	781b      	ldrb	r3, [r3, #0]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d003      	beq.n	20d2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    20ca:	4b16      	ldr	r3, [pc, #88]	; (2124 <sd_mmc_wait_end_of_read_blocks+0x84>)
    20cc:	2200      	movs	r2, #0
    20ce:	801a      	strh	r2, [r3, #0]
    20d0:	e005      	b.n	20de <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    20d2:	4b14      	ldr	r3, [pc, #80]	; (2124 <sd_mmc_wait_end_of_read_blocks+0x84>)
    20d4:	881b      	ldrh	r3, [r3, #0]
    20d6:	2b00      	cmp	r3, #0
    20d8:	d001      	beq.n	20de <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    20da:	2300      	movs	r3, #0
    20dc:	e01b      	b.n	2116 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    20de:	4b12      	ldr	r3, [pc, #72]	; (2128 <sd_mmc_wait_end_of_read_blocks+0x88>)
    20e0:	881b      	ldrh	r3, [r3, #0]
    20e2:	2b01      	cmp	r3, #1
    20e4:	d103      	bne.n	20ee <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    20e6:	4b11      	ldr	r3, [pc, #68]	; (212c <sd_mmc_wait_end_of_read_blocks+0x8c>)
    20e8:	4798      	blx	r3
		return SD_MMC_OK;
    20ea:	2300      	movs	r3, #0
    20ec:	e013      	b.n	2116 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    20ee:	4b10      	ldr	r3, [pc, #64]	; (2130 <sd_mmc_wait_end_of_read_blocks+0x90>)
    20f0:	2100      	movs	r1, #0
    20f2:	0018      	movs	r0, r3
    20f4:	4b0f      	ldr	r3, [pc, #60]	; (2134 <sd_mmc_wait_end_of_read_blocks+0x94>)
    20f6:	4798      	blx	r3
    20f8:	0003      	movs	r3, r0
    20fa:	001a      	movs	r2, r3
    20fc:	2301      	movs	r3, #1
    20fe:	4053      	eors	r3, r2
    2100:	b2db      	uxtb	r3, r3
    2102:	2b00      	cmp	r3, #0
    2104:	d004      	beq.n	2110 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    2106:	4b0a      	ldr	r3, [pc, #40]	; (2130 <sd_mmc_wait_end_of_read_blocks+0x90>)
    2108:	2100      	movs	r1, #0
    210a:	0018      	movs	r0, r3
    210c:	4b09      	ldr	r3, [pc, #36]	; (2134 <sd_mmc_wait_end_of_read_blocks+0x94>)
    210e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    2110:	4b06      	ldr	r3, [pc, #24]	; (212c <sd_mmc_wait_end_of_read_blocks+0x8c>)
    2112:	4798      	blx	r3
	return SD_MMC_OK;
    2114:	2300      	movs	r3, #0
}
    2116:	0018      	movs	r0, r3
    2118:	46bd      	mov	sp, r7
    211a:	b002      	add	sp, #8
    211c:	bd80      	pop	{r7, pc}
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	00003149 	.word	0x00003149
    2124:	2000012e 	.word	0x2000012e
    2128:	2000012c 	.word	0x2000012c
    212c:	00001b39 	.word	0x00001b39
    2130:	0000310c 	.word	0x0000310c
    2134:	00002dad 	.word	0x00002dad

00002138 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    2138:	b590      	push	{r4, r7, lr}
    213a:	b089      	sub	sp, #36	; 0x24
    213c:	af02      	add	r7, sp, #8
    213e:	6039      	str	r1, [r7, #0]
    2140:	0011      	movs	r1, r2
    2142:	1dfb      	adds	r3, r7, #7
    2144:	1c02      	adds	r2, r0, #0
    2146:	701a      	strb	r2, [r3, #0]
    2148:	1d3b      	adds	r3, r7, #4
    214a:	1c0a      	adds	r2, r1, #0
    214c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    214e:	230f      	movs	r3, #15
    2150:	18fc      	adds	r4, r7, r3
    2152:	1dfb      	adds	r3, r7, #7
    2154:	781b      	ldrb	r3, [r3, #0]
    2156:	0018      	movs	r0, r3
    2158:	4b28      	ldr	r3, [pc, #160]	; (21fc <sd_mmc_init_write_blocks+0xc4>)
    215a:	4798      	blx	r3
    215c:	0003      	movs	r3, r0
    215e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    2160:	230f      	movs	r3, #15
    2162:	18fb      	adds	r3, r7, r3
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	2b00      	cmp	r3, #0
    2168:	d003      	beq.n	2172 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    216a:	230f      	movs	r3, #15
    216c:	18fb      	adds	r3, r7, r3
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	e03f      	b.n	21f2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    2172:	1dfb      	adds	r3, r7, #7
    2174:	781b      	ldrb	r3, [r3, #0]
    2176:	0018      	movs	r0, r3
    2178:	4b21      	ldr	r3, [pc, #132]	; (2200 <sd_mmc_init_write_blocks+0xc8>)
    217a:	4798      	blx	r3
    217c:	1e03      	subs	r3, r0, #0
    217e:	d003      	beq.n	2188 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    2180:	4b20      	ldr	r3, [pc, #128]	; (2204 <sd_mmc_init_write_blocks+0xcc>)
    2182:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    2184:	2307      	movs	r3, #7
    2186:	e034      	b.n	21f2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    2188:	1d3b      	adds	r3, r7, #4
    218a:	881b      	ldrh	r3, [r3, #0]
    218c:	2b01      	cmp	r3, #1
    218e:	d902      	bls.n	2196 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    2190:	4b1d      	ldr	r3, [pc, #116]	; (2208 <sd_mmc_init_write_blocks+0xd0>)
    2192:	617b      	str	r3, [r7, #20]
    2194:	e001      	b.n	219a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    2196:	4b1d      	ldr	r3, [pc, #116]	; (220c <sd_mmc_init_write_blocks+0xd4>)
    2198:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    219a:	4b1d      	ldr	r3, [pc, #116]	; (2210 <sd_mmc_init_write_blocks+0xd8>)
    219c:	681b      	ldr	r3, [r3, #0]
    219e:	7adb      	ldrb	r3, [r3, #11]
    21a0:	001a      	movs	r2, r3
    21a2:	2308      	movs	r3, #8
    21a4:	4013      	ands	r3, r2
    21a6:	d002      	beq.n	21ae <sd_mmc_init_write_blocks+0x76>
		arg = start;
    21a8:	683b      	ldr	r3, [r7, #0]
    21aa:	613b      	str	r3, [r7, #16]
    21ac:	e002      	b.n	21b4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    21ae:	683b      	ldr	r3, [r7, #0]
    21b0:	025b      	lsls	r3, r3, #9
    21b2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    21b4:	1d3b      	adds	r3, r7, #4
    21b6:	881c      	ldrh	r4, [r3, #0]
    21b8:	2380      	movs	r3, #128	; 0x80
    21ba:	009a      	lsls	r2, r3, #2
    21bc:	6939      	ldr	r1, [r7, #16]
    21be:	6978      	ldr	r0, [r7, #20]
    21c0:	2301      	movs	r3, #1
    21c2:	9300      	str	r3, [sp, #0]
    21c4:	0023      	movs	r3, r4
    21c6:	4c13      	ldr	r4, [pc, #76]	; (2214 <sd_mmc_init_write_blocks+0xdc>)
    21c8:	47a0      	blx	r4
    21ca:	0003      	movs	r3, r0
    21cc:	001a      	movs	r2, r3
    21ce:	2301      	movs	r3, #1
    21d0:	4053      	eors	r3, r2
    21d2:	b2db      	uxtb	r3, r3
    21d4:	2b00      	cmp	r3, #0
    21d6:	d003      	beq.n	21e0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    21d8:	4b0a      	ldr	r3, [pc, #40]	; (2204 <sd_mmc_init_write_blocks+0xcc>)
    21da:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    21dc:	2305      	movs	r3, #5
    21de:	e008      	b.n	21f2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    21e0:	4b0d      	ldr	r3, [pc, #52]	; (2218 <sd_mmc_init_write_blocks+0xe0>)
    21e2:	1d3a      	adds	r2, r7, #4
    21e4:	8812      	ldrh	r2, [r2, #0]
    21e6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    21e8:	4b0c      	ldr	r3, [pc, #48]	; (221c <sd_mmc_init_write_blocks+0xe4>)
    21ea:	1d3a      	adds	r2, r7, #4
    21ec:	8812      	ldrh	r2, [r2, #0]
    21ee:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    21f0:	2300      	movs	r3, #0
}
    21f2:	0018      	movs	r0, r3
    21f4:	46bd      	mov	sp, r7
    21f6:	b007      	add	sp, #28
    21f8:	bd90      	pop	{r4, r7, pc}
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	00001a3d 	.word	0x00001a3d
    2200:	00001f45 	.word	0x00001f45
    2204:	00001b39 	.word	0x00001b39
    2208:	00109119 	.word	0x00109119
    220c:	00089118 	.word	0x00089118
    2210:	20000128 	.word	0x20000128
    2214:	00002dd5 	.word	0x00002dd5
    2218:	2000012e 	.word	0x2000012e
    221c:	2000012c 	.word	0x2000012c

00002220 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    2220:	b580      	push	{r7, lr}
    2222:	b082      	sub	sp, #8
    2224:	af00      	add	r7, sp, #0
    2226:	6078      	str	r0, [r7, #4]
    2228:	000a      	movs	r2, r1
    222a:	1cbb      	adds	r3, r7, #2
    222c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    222e:	1cbb      	adds	r3, r7, #2
    2230:	881a      	ldrh	r2, [r3, #0]
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	0011      	movs	r1, r2
    2236:	0018      	movs	r0, r3
    2238:	4b0d      	ldr	r3, [pc, #52]	; (2270 <sd_mmc_start_write_blocks+0x50>)
    223a:	4798      	blx	r3
    223c:	0003      	movs	r3, r0
    223e:	001a      	movs	r2, r3
    2240:	2301      	movs	r3, #1
    2242:	4053      	eors	r3, r2
    2244:	b2db      	uxtb	r3, r3
    2246:	2b00      	cmp	r3, #0
    2248:	d004      	beq.n	2254 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    224a:	4b0a      	ldr	r3, [pc, #40]	; (2274 <sd_mmc_start_write_blocks+0x54>)
    224c:	2200      	movs	r2, #0
    224e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    2250:	2305      	movs	r3, #5
    2252:	e008      	b.n	2266 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    2254:	4b07      	ldr	r3, [pc, #28]	; (2274 <sd_mmc_start_write_blocks+0x54>)
    2256:	881a      	ldrh	r2, [r3, #0]
    2258:	1cbb      	adds	r3, r7, #2
    225a:	881b      	ldrh	r3, [r3, #0]
    225c:	1ad3      	subs	r3, r2, r3
    225e:	b29a      	uxth	r2, r3
    2260:	4b04      	ldr	r3, [pc, #16]	; (2274 <sd_mmc_start_write_blocks+0x54>)
    2262:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2264:	2300      	movs	r3, #0
}
    2266:	0018      	movs	r0, r3
    2268:	46bd      	mov	sp, r7
    226a:	b002      	add	sp, #8
    226c:	bd80      	pop	{r7, pc}
    226e:	46c0      	nop			; (mov r8, r8)
    2270:	00003155 	.word	0x00003155
    2274:	2000012e 	.word	0x2000012e

00002278 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    2278:	b580      	push	{r7, lr}
    227a:	b082      	sub	sp, #8
    227c:	af00      	add	r7, sp, #0
    227e:	0002      	movs	r2, r0
    2280:	1dfb      	adds	r3, r7, #7
    2282:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    2284:	4b13      	ldr	r3, [pc, #76]	; (22d4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    2286:	4798      	blx	r3
    2288:	0003      	movs	r3, r0
    228a:	001a      	movs	r2, r3
    228c:	2301      	movs	r3, #1
    228e:	4053      	eors	r3, r2
    2290:	b2db      	uxtb	r3, r3
    2292:	2b00      	cmp	r3, #0
    2294:	d001      	beq.n	229a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    2296:	2305      	movs	r3, #5
    2298:	e018      	b.n	22cc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    229a:	1dfb      	adds	r3, r7, #7
    229c:	781b      	ldrb	r3, [r3, #0]
    229e:	2b00      	cmp	r3, #0
    22a0:	d003      	beq.n	22aa <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    22a2:	4b0d      	ldr	r3, [pc, #52]	; (22d8 <sd_mmc_wait_end_of_write_blocks+0x60>)
    22a4:	2200      	movs	r2, #0
    22a6:	801a      	strh	r2, [r3, #0]
    22a8:	e005      	b.n	22b6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    22aa:	4b0b      	ldr	r3, [pc, #44]	; (22d8 <sd_mmc_wait_end_of_write_blocks+0x60>)
    22ac:	881b      	ldrh	r3, [r3, #0]
    22ae:	2b00      	cmp	r3, #0
    22b0:	d001      	beq.n	22b6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    22b2:	2300      	movs	r3, #0
    22b4:	e00a      	b.n	22cc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    22b6:	4b09      	ldr	r3, [pc, #36]	; (22dc <sd_mmc_wait_end_of_write_blocks+0x64>)
    22b8:	881b      	ldrh	r3, [r3, #0]
    22ba:	2b01      	cmp	r3, #1
    22bc:	d103      	bne.n	22c6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    22be:	4b08      	ldr	r3, [pc, #32]	; (22e0 <sd_mmc_wait_end_of_write_blocks+0x68>)
    22c0:	4798      	blx	r3
		return SD_MMC_OK;
    22c2:	2300      	movs	r3, #0
    22c4:	e002      	b.n	22cc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    22c6:	4b06      	ldr	r3, [pc, #24]	; (22e0 <sd_mmc_wait_end_of_write_blocks+0x68>)
    22c8:	4798      	blx	r3
	return SD_MMC_OK;
    22ca:	2300      	movs	r3, #0
}
    22cc:	0018      	movs	r0, r3
    22ce:	46bd      	mov	sp, r7
    22d0:	b002      	add	sp, #8
    22d2:	bd80      	pop	{r7, pc}
    22d4:	00003215 	.word	0x00003215
    22d8:	2000012e 	.word	0x2000012e
    22dc:	2000012c 	.word	0x2000012c
    22e0:	00001b39 	.word	0x00001b39

000022e4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    22e4:	b580      	push	{r7, lr}
    22e6:	b082      	sub	sp, #8
    22e8:	af00      	add	r7, sp, #0
    22ea:	0002      	movs	r2, r0
    22ec:	1dfb      	adds	r3, r7, #7
    22ee:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    22f0:	1dfb      	adds	r3, r7, #7
    22f2:	781b      	ldrb	r3, [r3, #0]
    22f4:	0018      	movs	r0, r3
    22f6:	4b16      	ldr	r3, [pc, #88]	; (2350 <sd_mmc_test_unit_ready+0x6c>)
    22f8:	4798      	blx	r3
    22fa:	0003      	movs	r3, r0
    22fc:	2b01      	cmp	r3, #1
    22fe:	d019      	beq.n	2334 <sd_mmc_test_unit_ready+0x50>
    2300:	2b02      	cmp	r3, #2
    2302:	d019      	beq.n	2338 <sd_mmc_test_unit_ready+0x54>
    2304:	2b00      	cmp	r3, #0
    2306:	d11e      	bne.n	2346 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    2308:	1dfb      	adds	r3, r7, #7
    230a:	781b      	ldrb	r3, [r3, #0]
    230c:	4a11      	ldr	r2, [pc, #68]	; (2354 <sd_mmc_test_unit_ready+0x70>)
    230e:	5cd3      	ldrb	r3, [r2, r3]
    2310:	2b00      	cmp	r3, #0
    2312:	d001      	beq.n	2318 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    2314:	2302      	movs	r3, #2
    2316:	e017      	b.n	2348 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    2318:	1dfb      	adds	r3, r7, #7
    231a:	781b      	ldrb	r3, [r3, #0]
    231c:	0018      	movs	r0, r3
    231e:	4b0e      	ldr	r3, [pc, #56]	; (2358 <sd_mmc_test_unit_ready+0x74>)
    2320:	4798      	blx	r3
    2322:	0003      	movs	r3, r0
    2324:	001a      	movs	r2, r3
    2326:	2303      	movs	r3, #3
    2328:	4013      	ands	r3, r2
    232a:	d001      	beq.n	2330 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    232c:	2300      	movs	r3, #0
    232e:	e00b      	b.n	2348 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    2330:	2302      	movs	r3, #2
    2332:	e009      	b.n	2348 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    2334:	2303      	movs	r3, #3
    2336:	e007      	b.n	2348 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    2338:	1dfb      	adds	r3, r7, #7
    233a:	781b      	ldrb	r3, [r3, #0]
    233c:	4a05      	ldr	r2, [pc, #20]	; (2354 <sd_mmc_test_unit_ready+0x70>)
    233e:	2100      	movs	r1, #0
    2340:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    2342:	2302      	movs	r3, #2
    2344:	e000      	b.n	2348 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    2346:	2301      	movs	r3, #1
	}
}
    2348:	0018      	movs	r0, r3
    234a:	46bd      	mov	sp, r7
    234c:	b002      	add	sp, #8
    234e:	bd80      	pop	{r7, pc}
    2350:	00001e59 	.word	0x00001e59
    2354:	20000130 	.word	0x20000130
    2358:	00001ecd 	.word	0x00001ecd

0000235c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    235c:	b580      	push	{r7, lr}
    235e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    2360:	2000      	movs	r0, #0
    2362:	4b03      	ldr	r3, [pc, #12]	; (2370 <sd_mmc_test_unit_ready_0+0x14>)
    2364:	4798      	blx	r3
    2366:	0003      	movs	r3, r0
}
    2368:	0018      	movs	r0, r3
    236a:	46bd      	mov	sp, r7
    236c:	bd80      	pop	{r7, pc}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	000022e5 	.word	0x000022e5

00002374 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    2374:	b580      	push	{r7, lr}
    2376:	b082      	sub	sp, #8
    2378:	af00      	add	r7, sp, #0
    237a:	0002      	movs	r2, r0
    237c:	6039      	str	r1, [r7, #0]
    237e:	1dfb      	adds	r3, r7, #7
    2380:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    2382:	1dfb      	adds	r3, r7, #7
    2384:	781b      	ldrb	r3, [r3, #0]
    2386:	0018      	movs	r0, r3
    2388:	4b08      	ldr	r3, [pc, #32]	; (23ac <sd_mmc_read_capacity+0x38>)
    238a:	4798      	blx	r3
    238c:	0003      	movs	r3, r0
    238e:	005b      	lsls	r3, r3, #1
    2390:	1e5a      	subs	r2, r3, #1
    2392:	683b      	ldr	r3, [r7, #0]
    2394:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    2396:	1dfb      	adds	r3, r7, #7
    2398:	781b      	ldrb	r3, [r3, #0]
    239a:	0018      	movs	r0, r3
    239c:	4b04      	ldr	r3, [pc, #16]	; (23b0 <sd_mmc_read_capacity+0x3c>)
    239e:	4798      	blx	r3
    23a0:	0003      	movs	r3, r0
}
    23a2:	0018      	movs	r0, r3
    23a4:	46bd      	mov	sp, r7
    23a6:	b002      	add	sp, #8
    23a8:	bd80      	pop	{r7, pc}
    23aa:	46c0      	nop			; (mov r8, r8)
    23ac:	00001f09 	.word	0x00001f09
    23b0:	000022e5 	.word	0x000022e5

000023b4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    23b4:	b580      	push	{r7, lr}
    23b6:	b082      	sub	sp, #8
    23b8:	af00      	add	r7, sp, #0
    23ba:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	0019      	movs	r1, r3
    23c0:	2000      	movs	r0, #0
    23c2:	4b03      	ldr	r3, [pc, #12]	; (23d0 <sd_mmc_read_capacity_0+0x1c>)
    23c4:	4798      	blx	r3
    23c6:	0003      	movs	r3, r0
}
    23c8:	0018      	movs	r0, r3
    23ca:	46bd      	mov	sp, r7
    23cc:	b002      	add	sp, #8
    23ce:	bd80      	pop	{r7, pc}
    23d0:	00002375 	.word	0x00002375

000023d4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    23d4:	b580      	push	{r7, lr}
    23d6:	b082      	sub	sp, #8
    23d8:	af00      	add	r7, sp, #0
    23da:	0002      	movs	r2, r0
    23dc:	1dfb      	adds	r3, r7, #7
    23de:	701a      	strb	r2, [r3, #0]
    23e0:	1dbb      	adds	r3, r7, #6
    23e2:	1c0a      	adds	r2, r1, #0
    23e4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    23e6:	1dfb      	adds	r3, r7, #7
    23e8:	781b      	ldrb	r3, [r3, #0]
    23ea:	4a04      	ldr	r2, [pc, #16]	; (23fc <sd_mmc_unload+0x28>)
    23ec:	1db9      	adds	r1, r7, #6
    23ee:	7809      	ldrb	r1, [r1, #0]
    23f0:	54d1      	strb	r1, [r2, r3]
	return true;
    23f2:	2301      	movs	r3, #1
}
    23f4:	0018      	movs	r0, r3
    23f6:	46bd      	mov	sp, r7
    23f8:	b002      	add	sp, #8
    23fa:	bd80      	pop	{r7, pc}
    23fc:	20000130 	.word	0x20000130

00002400 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    2400:	b580      	push	{r7, lr}
    2402:	b082      	sub	sp, #8
    2404:	af00      	add	r7, sp, #0
    2406:	0002      	movs	r2, r0
    2408:	1dfb      	adds	r3, r7, #7
    240a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    240c:	1dfb      	adds	r3, r7, #7
    240e:	781b      	ldrb	r3, [r3, #0]
    2410:	0019      	movs	r1, r3
    2412:	2000      	movs	r0, #0
    2414:	4b03      	ldr	r3, [pc, #12]	; (2424 <sd_mmc_unload_0+0x24>)
    2416:	4798      	blx	r3
    2418:	0003      	movs	r3, r0
}
    241a:	0018      	movs	r0, r3
    241c:	46bd      	mov	sp, r7
    241e:	b002      	add	sp, #8
    2420:	bd80      	pop	{r7, pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	000023d5 	.word	0x000023d5

00002428 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    2428:	b580      	push	{r7, lr}
    242a:	b082      	sub	sp, #8
    242c:	af00      	add	r7, sp, #0
    242e:	0002      	movs	r2, r0
    2430:	1dfb      	adds	r3, r7, #7
    2432:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    2434:	1dfb      	adds	r3, r7, #7
    2436:	781b      	ldrb	r3, [r3, #0]
    2438:	0018      	movs	r0, r3
    243a:	4b03      	ldr	r3, [pc, #12]	; (2448 <sd_mmc_wr_protect+0x20>)
    243c:	4798      	blx	r3
    243e:	0003      	movs	r3, r0
}
    2440:	0018      	movs	r0, r3
    2442:	46bd      	mov	sp, r7
    2444:	b002      	add	sp, #8
    2446:	bd80      	pop	{r7, pc}
    2448:	00001f45 	.word	0x00001f45

0000244c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    244c:	b580      	push	{r7, lr}
    244e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    2450:	2000      	movs	r0, #0
    2452:	4b03      	ldr	r3, [pc, #12]	; (2460 <sd_mmc_wr_protect_0+0x14>)
    2454:	4798      	blx	r3
    2456:	0003      	movs	r3, r0
}
    2458:	0018      	movs	r0, r3
    245a:	46bd      	mov	sp, r7
    245c:	bd80      	pop	{r7, pc}
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	00002429 	.word	0x00002429

00002464 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    2464:	b580      	push	{r7, lr}
    2466:	b082      	sub	sp, #8
    2468:	af00      	add	r7, sp, #0
    246a:	0002      	movs	r2, r0
    246c:	1dfb      	adds	r3, r7, #7
    246e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    2470:	2301      	movs	r3, #1
}
    2472:	0018      	movs	r0, r3
    2474:	46bd      	mov	sp, r7
    2476:	b002      	add	sp, #8
    2478:	bd80      	pop	{r7, pc}
	...

0000247c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    247c:	b580      	push	{r7, lr}
    247e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    2480:	2000      	movs	r0, #0
    2482:	4b03      	ldr	r3, [pc, #12]	; (2490 <sd_mmc_removal_0+0x14>)
    2484:	4798      	blx	r3
    2486:	0003      	movs	r3, r0
}
    2488:	0018      	movs	r0, r3
    248a:	46bd      	mov	sp, r7
    248c:	bd80      	pop	{r7, pc}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	00002465 	.word	0x00002465

00002494 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    2494:	b580      	push	{r7, lr}
    2496:	b084      	sub	sp, #16
    2498:	af00      	add	r7, sp, #0
    249a:	60b9      	str	r1, [r7, #8]
    249c:	607a      	str	r2, [r7, #4]
    249e:	230f      	movs	r3, #15
    24a0:	18fb      	adds	r3, r7, r3
    24a2:	1c02      	adds	r2, r0, #0
    24a4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    24a6:	68b9      	ldr	r1, [r7, #8]
    24a8:	230f      	movs	r3, #15
    24aa:	18fb      	adds	r3, r7, r3
    24ac:	781b      	ldrb	r3, [r3, #0]
    24ae:	2201      	movs	r2, #1
    24b0:	0018      	movs	r0, r3
    24b2:	4b10      	ldr	r3, [pc, #64]	; (24f4 <sd_mmc_mem_2_ram+0x60>)
    24b4:	4798      	blx	r3
    24b6:	1e03      	subs	r3, r0, #0
    24b8:	d005      	beq.n	24c6 <sd_mmc_mem_2_ram+0x32>
    24ba:	2b02      	cmp	r3, #2
    24bc:	d101      	bne.n	24c2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    24be:	2302      	movs	r3, #2
    24c0:	e013      	b.n	24ea <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    24c2:	2301      	movs	r3, #1
    24c4:	e011      	b.n	24ea <sd_mmc_mem_2_ram+0x56>
		break;
    24c6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    24c8:	687b      	ldr	r3, [r7, #4]
    24ca:	2101      	movs	r1, #1
    24cc:	0018      	movs	r0, r3
    24ce:	4b0a      	ldr	r3, [pc, #40]	; (24f8 <sd_mmc_mem_2_ram+0x64>)
    24d0:	4798      	blx	r3
    24d2:	1e03      	subs	r3, r0, #0
    24d4:	d001      	beq.n	24da <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    24d6:	2301      	movs	r3, #1
    24d8:	e007      	b.n	24ea <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    24da:	2000      	movs	r0, #0
    24dc:	4b07      	ldr	r3, [pc, #28]	; (24fc <sd_mmc_mem_2_ram+0x68>)
    24de:	4798      	blx	r3
    24e0:	1e03      	subs	r3, r0, #0
    24e2:	d001      	beq.n	24e8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    24e4:	2301      	movs	r3, #1
    24e6:	e000      	b.n	24ea <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    24e8:	2300      	movs	r3, #0
}
    24ea:	0018      	movs	r0, r3
    24ec:	46bd      	mov	sp, r7
    24ee:	b004      	add	sp, #16
    24f0:	bd80      	pop	{r7, pc}
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	00001f5d 	.word	0x00001f5d
    24f8:	00002049 	.word	0x00002049
    24fc:	000020a1 	.word	0x000020a1

00002500 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    2500:	b580      	push	{r7, lr}
    2502:	b082      	sub	sp, #8
    2504:	af00      	add	r7, sp, #0
    2506:	6078      	str	r0, [r7, #4]
    2508:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    250a:	683a      	ldr	r2, [r7, #0]
    250c:	687b      	ldr	r3, [r7, #4]
    250e:	0019      	movs	r1, r3
    2510:	2000      	movs	r0, #0
    2512:	4b03      	ldr	r3, [pc, #12]	; (2520 <sd_mmc_mem_2_ram_0+0x20>)
    2514:	4798      	blx	r3
    2516:	0003      	movs	r3, r0
}
    2518:	0018      	movs	r0, r3
    251a:	46bd      	mov	sp, r7
    251c:	b002      	add	sp, #8
    251e:	bd80      	pop	{r7, pc}
    2520:	00002495 	.word	0x00002495

00002524 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    2524:	b580      	push	{r7, lr}
    2526:	b084      	sub	sp, #16
    2528:	af00      	add	r7, sp, #0
    252a:	60b9      	str	r1, [r7, #8]
    252c:	607a      	str	r2, [r7, #4]
    252e:	230f      	movs	r3, #15
    2530:	18fb      	adds	r3, r7, r3
    2532:	1c02      	adds	r2, r0, #0
    2534:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    2536:	68b9      	ldr	r1, [r7, #8]
    2538:	230f      	movs	r3, #15
    253a:	18fb      	adds	r3, r7, r3
    253c:	781b      	ldrb	r3, [r3, #0]
    253e:	2201      	movs	r2, #1
    2540:	0018      	movs	r0, r3
    2542:	4b10      	ldr	r3, [pc, #64]	; (2584 <sd_mmc_ram_2_mem+0x60>)
    2544:	4798      	blx	r3
    2546:	1e03      	subs	r3, r0, #0
    2548:	d005      	beq.n	2556 <sd_mmc_ram_2_mem+0x32>
    254a:	2b02      	cmp	r3, #2
    254c:	d101      	bne.n	2552 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    254e:	2302      	movs	r3, #2
    2550:	e013      	b.n	257a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    2552:	2301      	movs	r3, #1
    2554:	e011      	b.n	257a <sd_mmc_ram_2_mem+0x56>
		break;
    2556:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    2558:	687b      	ldr	r3, [r7, #4]
    255a:	2101      	movs	r1, #1
    255c:	0018      	movs	r0, r3
    255e:	4b0a      	ldr	r3, [pc, #40]	; (2588 <sd_mmc_ram_2_mem+0x64>)
    2560:	4798      	blx	r3
    2562:	1e03      	subs	r3, r0, #0
    2564:	d001      	beq.n	256a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    2566:	2301      	movs	r3, #1
    2568:	e007      	b.n	257a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    256a:	2000      	movs	r0, #0
    256c:	4b07      	ldr	r3, [pc, #28]	; (258c <sd_mmc_ram_2_mem+0x68>)
    256e:	4798      	blx	r3
    2570:	1e03      	subs	r3, r0, #0
    2572:	d001      	beq.n	2578 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    2574:	2301      	movs	r3, #1
    2576:	e000      	b.n	257a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    2578:	2300      	movs	r3, #0
}
    257a:	0018      	movs	r0, r3
    257c:	46bd      	mov	sp, r7
    257e:	b004      	add	sp, #16
    2580:	bd80      	pop	{r7, pc}
    2582:	46c0      	nop			; (mov r8, r8)
    2584:	00002139 	.word	0x00002139
    2588:	00002221 	.word	0x00002221
    258c:	00002279 	.word	0x00002279

00002590 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    2590:	b580      	push	{r7, lr}
    2592:	b082      	sub	sp, #8
    2594:	af00      	add	r7, sp, #0
    2596:	6078      	str	r0, [r7, #4]
    2598:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    259a:	683a      	ldr	r2, [r7, #0]
    259c:	687b      	ldr	r3, [r7, #4]
    259e:	0019      	movs	r1, r3
    25a0:	2000      	movs	r0, #0
    25a2:	4b03      	ldr	r3, [pc, #12]	; (25b0 <sd_mmc_ram_2_mem_0+0x20>)
    25a4:	4798      	blx	r3
    25a6:	0003      	movs	r3, r0
}
    25a8:	0018      	movs	r0, r3
    25aa:	46bd      	mov	sp, r7
    25ac:	b002      	add	sp, #8
    25ae:	bd80      	pop	{r7, pc}
    25b0:	00002525 	.word	0x00002525

000025b4 <system_pinmux_get_group_from_gpio_pin>:
{
    25b4:	b580      	push	{r7, lr}
    25b6:	b084      	sub	sp, #16
    25b8:	af00      	add	r7, sp, #0
    25ba:	0002      	movs	r2, r0
    25bc:	1dfb      	adds	r3, r7, #7
    25be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    25c0:	230f      	movs	r3, #15
    25c2:	18fb      	adds	r3, r7, r3
    25c4:	1dfa      	adds	r2, r7, #7
    25c6:	7812      	ldrb	r2, [r2, #0]
    25c8:	09d2      	lsrs	r2, r2, #7
    25ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    25cc:	230e      	movs	r3, #14
    25ce:	18fb      	adds	r3, r7, r3
    25d0:	1dfa      	adds	r2, r7, #7
    25d2:	7812      	ldrb	r2, [r2, #0]
    25d4:	0952      	lsrs	r2, r2, #5
    25d6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    25d8:	4b0d      	ldr	r3, [pc, #52]	; (2610 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    25da:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    25dc:	230f      	movs	r3, #15
    25de:	18fb      	adds	r3, r7, r3
    25e0:	781b      	ldrb	r3, [r3, #0]
    25e2:	2b00      	cmp	r3, #0
    25e4:	d10f      	bne.n	2606 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    25e6:	230f      	movs	r3, #15
    25e8:	18fb      	adds	r3, r7, r3
    25ea:	781b      	ldrb	r3, [r3, #0]
    25ec:	009b      	lsls	r3, r3, #2
    25ee:	2210      	movs	r2, #16
    25f0:	4694      	mov	ip, r2
    25f2:	44bc      	add	ip, r7
    25f4:	4463      	add	r3, ip
    25f6:	3b08      	subs	r3, #8
    25f8:	681a      	ldr	r2, [r3, #0]
    25fa:	230e      	movs	r3, #14
    25fc:	18fb      	adds	r3, r7, r3
    25fe:	781b      	ldrb	r3, [r3, #0]
    2600:	01db      	lsls	r3, r3, #7
    2602:	18d3      	adds	r3, r2, r3
    2604:	e000      	b.n	2608 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2606:	2300      	movs	r3, #0
}
    2608:	0018      	movs	r0, r3
    260a:	46bd      	mov	sp, r7
    260c:	b004      	add	sp, #16
    260e:	bd80      	pop	{r7, pc}
    2610:	41004400 	.word	0x41004400

00002614 <port_get_group_from_gpio_pin>:
{
    2614:	b580      	push	{r7, lr}
    2616:	b082      	sub	sp, #8
    2618:	af00      	add	r7, sp, #0
    261a:	0002      	movs	r2, r0
    261c:	1dfb      	adds	r3, r7, #7
    261e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2620:	1dfb      	adds	r3, r7, #7
    2622:	781b      	ldrb	r3, [r3, #0]
    2624:	0018      	movs	r0, r3
    2626:	4b03      	ldr	r3, [pc, #12]	; (2634 <port_get_group_from_gpio_pin+0x20>)
    2628:	4798      	blx	r3
    262a:	0003      	movs	r3, r0
}
    262c:	0018      	movs	r0, r3
    262e:	46bd      	mov	sp, r7
    2630:	b002      	add	sp, #8
    2632:	bd80      	pop	{r7, pc}
    2634:	000025b5 	.word	0x000025b5

00002638 <port_get_config_defaults>:
{
    2638:	b580      	push	{r7, lr}
    263a:	b082      	sub	sp, #8
    263c:	af00      	add	r7, sp, #0
    263e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    2640:	687b      	ldr	r3, [r7, #4]
    2642:	2200      	movs	r2, #0
    2644:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2646:	687b      	ldr	r3, [r7, #4]
    2648:	2201      	movs	r2, #1
    264a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	2200      	movs	r2, #0
    2650:	709a      	strb	r2, [r3, #2]
}
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	46bd      	mov	sp, r7
    2656:	b002      	add	sp, #8
    2658:	bd80      	pop	{r7, pc}
	...

0000265c <port_pin_set_output_level>:
{
    265c:	b580      	push	{r7, lr}
    265e:	b084      	sub	sp, #16
    2660:	af00      	add	r7, sp, #0
    2662:	0002      	movs	r2, r0
    2664:	1dfb      	adds	r3, r7, #7
    2666:	701a      	strb	r2, [r3, #0]
    2668:	1dbb      	adds	r3, r7, #6
    266a:	1c0a      	adds	r2, r1, #0
    266c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    266e:	1dfb      	adds	r3, r7, #7
    2670:	781b      	ldrb	r3, [r3, #0]
    2672:	0018      	movs	r0, r3
    2674:	4b0d      	ldr	r3, [pc, #52]	; (26ac <port_pin_set_output_level+0x50>)
    2676:	4798      	blx	r3
    2678:	0003      	movs	r3, r0
    267a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    267c:	1dfb      	adds	r3, r7, #7
    267e:	781b      	ldrb	r3, [r3, #0]
    2680:	221f      	movs	r2, #31
    2682:	4013      	ands	r3, r2
    2684:	2201      	movs	r2, #1
    2686:	409a      	lsls	r2, r3
    2688:	0013      	movs	r3, r2
    268a:	60bb      	str	r3, [r7, #8]
	if (level) {
    268c:	1dbb      	adds	r3, r7, #6
    268e:	781b      	ldrb	r3, [r3, #0]
    2690:	2b00      	cmp	r3, #0
    2692:	d003      	beq.n	269c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2694:	68fb      	ldr	r3, [r7, #12]
    2696:	68ba      	ldr	r2, [r7, #8]
    2698:	619a      	str	r2, [r3, #24]
}
    269a:	e002      	b.n	26a2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    269c:	68fb      	ldr	r3, [r7, #12]
    269e:	68ba      	ldr	r2, [r7, #8]
    26a0:	615a      	str	r2, [r3, #20]
}
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	46bd      	mov	sp, r7
    26a6:	b004      	add	sp, #16
    26a8:	bd80      	pop	{r7, pc}
    26aa:	46c0      	nop			; (mov r8, r8)
    26ac:	00002615 	.word	0x00002615

000026b0 <system_interrupt_enable>:
{
    26b0:	b580      	push	{r7, lr}
    26b2:	b082      	sub	sp, #8
    26b4:	af00      	add	r7, sp, #0
    26b6:	0002      	movs	r2, r0
    26b8:	1dfb      	adds	r3, r7, #7
    26ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    26bc:	4b06      	ldr	r3, [pc, #24]	; (26d8 <system_interrupt_enable+0x28>)
    26be:	1dfa      	adds	r2, r7, #7
    26c0:	7812      	ldrb	r2, [r2, #0]
    26c2:	0011      	movs	r1, r2
    26c4:	221f      	movs	r2, #31
    26c6:	400a      	ands	r2, r1
    26c8:	2101      	movs	r1, #1
    26ca:	4091      	lsls	r1, r2
    26cc:	000a      	movs	r2, r1
    26ce:	601a      	str	r2, [r3, #0]
}
    26d0:	46c0      	nop			; (mov r8, r8)
    26d2:	46bd      	mov	sp, r7
    26d4:	b002      	add	sp, #8
    26d6:	bd80      	pop	{r7, pc}
    26d8:	e000e100 	.word	0xe000e100

000026dc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    26dc:	b580      	push	{r7, lr}
    26de:	b084      	sub	sp, #16
    26e0:	af00      	add	r7, sp, #0
    26e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    26e4:	687b      	ldr	r3, [r7, #4]
    26e6:	681b      	ldr	r3, [r3, #0]
    26e8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    26ea:	68fb      	ldr	r3, [r7, #12]
    26ec:	69db      	ldr	r3, [r3, #28]
    26ee:	1e5a      	subs	r2, r3, #1
    26f0:	4193      	sbcs	r3, r2
    26f2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    26f4:	0018      	movs	r0, r3
    26f6:	46bd      	mov	sp, r7
    26f8:	b004      	add	sp, #16
    26fa:	bd80      	pop	{r7, pc}

000026fc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b082      	sub	sp, #8
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	2201      	movs	r2, #1
    2708:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	2200      	movs	r2, #0
    270e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	2200      	movs	r2, #0
    2714:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	22c0      	movs	r2, #192	; 0xc0
    271a:	0392      	lsls	r2, r2, #14
    271c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	2200      	movs	r2, #0
    2722:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	2200      	movs	r2, #0
    2728:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    272a:	687b      	ldr	r3, [r7, #4]
    272c:	2201      	movs	r2, #1
    272e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	2201      	movs	r2, #1
    2734:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	2200      	movs	r2, #0
    273a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    273c:	687b      	ldr	r3, [r7, #4]
    273e:	2224      	movs	r2, #36	; 0x24
    2740:	2100      	movs	r1, #0
    2742:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	3318      	adds	r3, #24
    2748:	220c      	movs	r2, #12
    274a:	2100      	movs	r1, #0
    274c:	0018      	movs	r0, r3
    274e:	4b0a      	ldr	r3, [pc, #40]	; (2778 <spi_get_config_defaults+0x7c>)
    2750:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	4a09      	ldr	r2, [pc, #36]	; (277c <spi_get_config_defaults+0x80>)
    2756:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2758:	687b      	ldr	r3, [r7, #4]
    275a:	2200      	movs	r2, #0
    275c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    275e:	687b      	ldr	r3, [r7, #4]
    2760:	2200      	movs	r2, #0
    2762:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	2200      	movs	r2, #0
    2768:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	2200      	movs	r2, #0
    276e:	635a      	str	r2, [r3, #52]	; 0x34

};
    2770:	46c0      	nop			; (mov r8, r8)
    2772:	46bd      	mov	sp, r7
    2774:	b002      	add	sp, #8
    2776:	bd80      	pop	{r7, pc}
    2778:	0000b8eb 	.word	0x0000b8eb
    277c:	000186a0 	.word	0x000186a0

00002780 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2780:	b580      	push	{r7, lr}
    2782:	b082      	sub	sp, #8
    2784:	af00      	add	r7, sp, #0
    2786:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	220a      	movs	r2, #10
    278c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    278e:	687b      	ldr	r3, [r7, #4]
    2790:	2200      	movs	r2, #0
    2792:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2794:	687b      	ldr	r3, [r7, #4]
    2796:	2200      	movs	r2, #0
    2798:	709a      	strb	r2, [r3, #2]
}
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	46bd      	mov	sp, r7
    279e:	b002      	add	sp, #8
    27a0:	bd80      	pop	{r7, pc}
	...

000027a4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    27a4:	b580      	push	{r7, lr}
    27a6:	b084      	sub	sp, #16
    27a8:	af00      	add	r7, sp, #0
    27aa:	6078      	str	r0, [r7, #4]
    27ac:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    27ae:	683b      	ldr	r3, [r7, #0]
    27b0:	781a      	ldrb	r2, [r3, #0]
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    27b6:	683b      	ldr	r3, [r7, #0]
    27b8:	785a      	ldrb	r2, [r3, #1]
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    27be:	683b      	ldr	r3, [r7, #0]
    27c0:	789a      	ldrb	r2, [r3, #2]
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    27c6:	230c      	movs	r3, #12
    27c8:	18fb      	adds	r3, r7, r3
    27ca:	0018      	movs	r0, r3
    27cc:	4b0b      	ldr	r3, [pc, #44]	; (27fc <spi_attach_slave+0x58>)
    27ce:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    27d0:	230c      	movs	r3, #12
    27d2:	18fb      	adds	r3, r7, r3
    27d4:	2201      	movs	r2, #1
    27d6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	781b      	ldrb	r3, [r3, #0]
    27dc:	220c      	movs	r2, #12
    27de:	18ba      	adds	r2, r7, r2
    27e0:	0011      	movs	r1, r2
    27e2:	0018      	movs	r0, r3
    27e4:	4b06      	ldr	r3, [pc, #24]	; (2800 <spi_attach_slave+0x5c>)
    27e6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	781b      	ldrb	r3, [r3, #0]
    27ec:	2101      	movs	r1, #1
    27ee:	0018      	movs	r0, r3
    27f0:	4b04      	ldr	r3, [pc, #16]	; (2804 <spi_attach_slave+0x60>)
    27f2:	4798      	blx	r3
}
    27f4:	46c0      	nop			; (mov r8, r8)
    27f6:	46bd      	mov	sp, r7
    27f8:	b004      	add	sp, #16
    27fa:	bd80      	pop	{r7, pc}
    27fc:	00002639 	.word	0x00002639
    2800:	000034b1 	.word	0x000034b1
    2804:	0000265d 	.word	0x0000265d

00002808 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2808:	b580      	push	{r7, lr}
    280a:	b084      	sub	sp, #16
    280c:	af00      	add	r7, sp, #0
    280e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	681b      	ldr	r3, [r3, #0]
    2814:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2816:	687b      	ldr	r3, [r7, #4]
    2818:	681b      	ldr	r3, [r3, #0]
    281a:	0018      	movs	r0, r3
    281c:	4b0b      	ldr	r3, [pc, #44]	; (284c <spi_enable+0x44>)
    281e:	4798      	blx	r3
    2820:	0003      	movs	r3, r0
    2822:	0018      	movs	r0, r3
    2824:	4b0a      	ldr	r3, [pc, #40]	; (2850 <spi_enable+0x48>)
    2826:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    2828:	46c0      	nop			; (mov r8, r8)
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	0018      	movs	r0, r3
    282e:	4b09      	ldr	r3, [pc, #36]	; (2854 <spi_enable+0x4c>)
    2830:	4798      	blx	r3
    2832:	1e03      	subs	r3, r0, #0
    2834:	d1f9      	bne.n	282a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2836:	68fb      	ldr	r3, [r7, #12]
    2838:	681b      	ldr	r3, [r3, #0]
    283a:	2202      	movs	r2, #2
    283c:	431a      	orrs	r2, r3
    283e:	68fb      	ldr	r3, [r7, #12]
    2840:	601a      	str	r2, [r3, #0]
}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	46bd      	mov	sp, r7
    2846:	b004      	add	sp, #16
    2848:	bd80      	pop	{r7, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	0000403d 	.word	0x0000403d
    2850:	000026b1 	.word	0x000026b1
    2854:	000026dd 	.word	0x000026dd

00002858 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    2858:	b580      	push	{r7, lr}
    285a:	b084      	sub	sp, #16
    285c:	af00      	add	r7, sp, #0
    285e:	6078      	str	r0, [r7, #4]
    2860:	000a      	movs	r2, r1
    2862:	1cfb      	adds	r3, r7, #3
    2864:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    2866:	230f      	movs	r3, #15
    2868:	18fb      	adds	r3, r7, r3
    286a:	2200      	movs	r2, #0
    286c:	701a      	strb	r2, [r3, #0]
	while (size--) {
    286e:	e038      	b.n	28e2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    2870:	687b      	ldr	r3, [r7, #4]
    2872:	1c5a      	adds	r2, r3, #1
    2874:	607a      	str	r2, [r7, #4]
    2876:	220e      	movs	r2, #14
    2878:	18ba      	adds	r2, r7, r2
    287a:	781b      	ldrb	r3, [r3, #0]
    287c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    287e:	230d      	movs	r3, #13
    2880:	18fb      	adds	r3, r7, r3
    2882:	2200      	movs	r2, #0
    2884:	701a      	strb	r2, [r3, #0]
    2886:	e027      	b.n	28d8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    2888:	230f      	movs	r3, #15
    288a:	18fa      	adds	r2, r7, r3
    288c:	230f      	movs	r3, #15
    288e:	18fb      	adds	r3, r7, r3
    2890:	781b      	ldrb	r3, [r3, #0]
    2892:	18db      	adds	r3, r3, r3
    2894:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    2896:	230e      	movs	r3, #14
    2898:	18fa      	adds	r2, r7, r3
    289a:	230f      	movs	r3, #15
    289c:	18fb      	adds	r3, r7, r3
    289e:	7812      	ldrb	r2, [r2, #0]
    28a0:	781b      	ldrb	r3, [r3, #0]
    28a2:	4053      	eors	r3, r2
    28a4:	b2db      	uxtb	r3, r3
    28a6:	b25b      	sxtb	r3, r3
    28a8:	2b00      	cmp	r3, #0
    28aa:	da07      	bge.n	28bc <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    28ac:	230f      	movs	r3, #15
    28ae:	18fb      	adds	r3, r7, r3
    28b0:	220f      	movs	r2, #15
    28b2:	18ba      	adds	r2, r7, r2
    28b4:	7812      	ldrb	r2, [r2, #0]
    28b6:	2109      	movs	r1, #9
    28b8:	404a      	eors	r2, r1
    28ba:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    28bc:	230e      	movs	r3, #14
    28be:	18fa      	adds	r2, r7, r3
    28c0:	230e      	movs	r3, #14
    28c2:	18fb      	adds	r3, r7, r3
    28c4:	781b      	ldrb	r3, [r3, #0]
    28c6:	18db      	adds	r3, r3, r3
    28c8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    28ca:	230d      	movs	r3, #13
    28cc:	18fb      	adds	r3, r7, r3
    28ce:	781a      	ldrb	r2, [r3, #0]
    28d0:	230d      	movs	r3, #13
    28d2:	18fb      	adds	r3, r7, r3
    28d4:	3201      	adds	r2, #1
    28d6:	701a      	strb	r2, [r3, #0]
    28d8:	230d      	movs	r3, #13
    28da:	18fb      	adds	r3, r7, r3
    28dc:	781b      	ldrb	r3, [r3, #0]
    28de:	2b07      	cmp	r3, #7
    28e0:	d9d2      	bls.n	2888 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    28e2:	1cfb      	adds	r3, r7, #3
    28e4:	781b      	ldrb	r3, [r3, #0]
    28e6:	1cfa      	adds	r2, r7, #3
    28e8:	1e59      	subs	r1, r3, #1
    28ea:	7011      	strb	r1, [r2, #0]
    28ec:	2b00      	cmp	r3, #0
    28ee:	d1bf      	bne.n	2870 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    28f0:	230f      	movs	r3, #15
    28f2:	18fb      	adds	r3, r7, r3
    28f4:	781b      	ldrb	r3, [r3, #0]
    28f6:	005b      	lsls	r3, r3, #1
    28f8:	b25b      	sxtb	r3, r3
    28fa:	2201      	movs	r2, #1
    28fc:	4313      	orrs	r3, r2
    28fe:	b25a      	sxtb	r2, r3
    2900:	230f      	movs	r3, #15
    2902:	18fb      	adds	r3, r7, r3
    2904:	701a      	strb	r2, [r3, #0]
	return crc;
    2906:	230f      	movs	r3, #15
    2908:	18fb      	adds	r3, r7, r3
    290a:	781b      	ldrb	r3, [r3, #0]
}
    290c:	0018      	movs	r0, r3
    290e:	46bd      	mov	sp, r7
    2910:	b004      	add	sp, #16
    2912:	bd80      	pop	{r7, pc}

00002914 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    2914:	b590      	push	{r4, r7, lr}
    2916:	b083      	sub	sp, #12
    2918:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    291a:	1c7b      	adds	r3, r7, #1
    291c:	22ff      	movs	r2, #255	; 0xff
    291e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    2920:	1cbb      	adds	r3, r7, #2
    2922:	22ff      	movs	r2, #255	; 0xff
    2924:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2926:	1cbb      	adds	r3, r7, #2
    2928:	881b      	ldrh	r3, [r3, #0]
    292a:	1c79      	adds	r1, r7, #1
    292c:	4811      	ldr	r0, [pc, #68]	; (2974 <sd_mmc_spi_wait_busy+0x60>)
    292e:	2201      	movs	r2, #1
    2930:	4c11      	ldr	r4, [pc, #68]	; (2978 <sd_mmc_spi_wait_busy+0x64>)
    2932:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    2934:	4b11      	ldr	r3, [pc, #68]	; (297c <sd_mmc_spi_wait_busy+0x68>)
    2936:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2938:	1cbb      	adds	r3, r7, #2
    293a:	881b      	ldrh	r3, [r3, #0]
    293c:	1c79      	adds	r1, r7, #1
    293e:	480d      	ldr	r0, [pc, #52]	; (2974 <sd_mmc_spi_wait_busy+0x60>)
    2940:	2201      	movs	r2, #1
    2942:	4c0d      	ldr	r4, [pc, #52]	; (2978 <sd_mmc_spi_wait_busy+0x64>)
    2944:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2946:	1cbb      	adds	r3, r7, #2
    2948:	881b      	ldrh	r3, [r3, #0]
    294a:	1c79      	adds	r1, r7, #1
    294c:	4809      	ldr	r0, [pc, #36]	; (2974 <sd_mmc_spi_wait_busy+0x60>)
    294e:	2201      	movs	r2, #1
    2950:	4c09      	ldr	r4, [pc, #36]	; (2978 <sd_mmc_spi_wait_busy+0x64>)
    2952:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    2954:	687b      	ldr	r3, [r7, #4]
    2956:	1e5a      	subs	r2, r3, #1
    2958:	607a      	str	r2, [r7, #4]
    295a:	2b00      	cmp	r3, #0
    295c:	d101      	bne.n	2962 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    295e:	2300      	movs	r3, #0
    2960:	e004      	b.n	296c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    2962:	1c7b      	adds	r3, r7, #1
    2964:	781b      	ldrb	r3, [r3, #0]
    2966:	2bff      	cmp	r3, #255	; 0xff
    2968:	d1ed      	bne.n	2946 <sd_mmc_spi_wait_busy+0x32>
	return true;
    296a:	2301      	movs	r3, #1
}
    296c:	0018      	movs	r0, r3
    296e:	46bd      	mov	sp, r7
    2970:	b003      	add	sp, #12
    2972:	bd90      	pop	{r4, r7, pc}
    2974:	20000134 	.word	0x20000134
    2978:	000049bd 	.word	0x000049bd
    297c:	00030d40 	.word	0x00030d40

00002980 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    2980:	b590      	push	{r4, r7, lr}
    2982:	b083      	sub	sp, #12
    2984:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    2986:	1cbb      	adds	r3, r7, #2
    2988:	22ff      	movs	r2, #255	; 0xff
    298a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    298c:	1c7b      	adds	r3, r7, #1
    298e:	2200      	movs	r2, #0
    2990:	701a      	strb	r2, [r3, #0]
	i = 500000;
    2992:	4b18      	ldr	r3, [pc, #96]	; (29f4 <sd_mmc_spi_start_read_block+0x74>)
    2994:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    2996:	687b      	ldr	r3, [r7, #4]
    2998:	1e5a      	subs	r2, r3, #1
    299a:	607a      	str	r2, [r7, #4]
    299c:	2b00      	cmp	r3, #0
    299e:	d104      	bne.n	29aa <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    29a0:	4b15      	ldr	r3, [pc, #84]	; (29f8 <sd_mmc_spi_start_read_block+0x78>)
    29a2:	2204      	movs	r2, #4
    29a4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    29a6:	2300      	movs	r3, #0
    29a8:	e020      	b.n	29ec <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    29aa:	1cbb      	adds	r3, r7, #2
    29ac:	881b      	ldrh	r3, [r3, #0]
    29ae:	1c79      	adds	r1, r7, #1
    29b0:	4812      	ldr	r0, [pc, #72]	; (29fc <sd_mmc_spi_start_read_block+0x7c>)
    29b2:	2201      	movs	r2, #1
    29b4:	4c12      	ldr	r4, [pc, #72]	; (2a00 <sd_mmc_spi_start_read_block+0x80>)
    29b6:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    29b8:	1c7b      	adds	r3, r7, #1
    29ba:	781b      	ldrb	r3, [r3, #0]
    29bc:	001a      	movs	r2, r3
    29be:	23f0      	movs	r3, #240	; 0xf0
    29c0:	4013      	ands	r3, r2
    29c2:	d10e      	bne.n	29e2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    29c4:	1c7b      	adds	r3, r7, #1
    29c6:	781b      	ldrb	r3, [r3, #0]
    29c8:	001a      	movs	r2, r3
    29ca:	2307      	movs	r3, #7
    29cc:	4013      	ands	r3, r2
    29ce:	d003      	beq.n	29d8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    29d0:	4b09      	ldr	r3, [pc, #36]	; (29f8 <sd_mmc_spi_start_read_block+0x78>)
    29d2:	2207      	movs	r2, #7
    29d4:	701a      	strb	r2, [r3, #0]
    29d6:	e002      	b.n	29de <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    29d8:	4b07      	ldr	r3, [pc, #28]	; (29f8 <sd_mmc_spi_start_read_block+0x78>)
    29da:	220b      	movs	r2, #11
    29dc:	701a      	strb	r2, [r3, #0]
			}
			return false;
    29de:	2300      	movs	r3, #0
    29e0:	e004      	b.n	29ec <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    29e2:	1c7b      	adds	r3, r7, #1
    29e4:	781b      	ldrb	r3, [r3, #0]
    29e6:	2bfe      	cmp	r3, #254	; 0xfe
    29e8:	d1d5      	bne.n	2996 <sd_mmc_spi_start_read_block+0x16>

	return true;
    29ea:	2301      	movs	r3, #1
}
    29ec:	0018      	movs	r0, r3
    29ee:	46bd      	mov	sp, r7
    29f0:	b003      	add	sp, #12
    29f2:	bd90      	pop	{r4, r7, pc}
    29f4:	0007a120 	.word	0x0007a120
    29f8:	20000177 	.word	0x20000177
    29fc:	20000134 	.word	0x20000134
    2a00:	000049bd 	.word	0x000049bd

00002a04 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    2a04:	b590      	push	{r4, r7, lr}
    2a06:	b083      	sub	sp, #12
    2a08:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    2a0a:	1dbb      	adds	r3, r7, #6
    2a0c:	22ff      	movs	r2, #255	; 0xff
    2a0e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    2a10:	1dbb      	adds	r3, r7, #6
    2a12:	881b      	ldrh	r3, [r3, #0]
    2a14:	1d39      	adds	r1, r7, #4
    2a16:	4804      	ldr	r0, [pc, #16]	; (2a28 <sd_mmc_spi_stop_read_block+0x24>)
    2a18:	2202      	movs	r2, #2
    2a1a:	4c04      	ldr	r4, [pc, #16]	; (2a2c <sd_mmc_spi_stop_read_block+0x28>)
    2a1c:	47a0      	blx	r4
			dummy);
}
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	46bd      	mov	sp, r7
    2a22:	b003      	add	sp, #12
    2a24:	bd90      	pop	{r4, r7, pc}
    2a26:	46c0      	nop			; (mov r8, r8)
    2a28:	20000134 	.word	0x20000134
    2a2c:	000049bd 	.word	0x000049bd

00002a30 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    2a30:	b580      	push	{r7, lr}
    2a32:	b082      	sub	sp, #8
    2a34:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    2a36:	1dfb      	adds	r3, r7, #7
    2a38:	22ff      	movs	r2, #255	; 0xff
    2a3a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    2a3c:	1df9      	adds	r1, r7, #7
    2a3e:	4b0d      	ldr	r3, [pc, #52]	; (2a74 <sd_mmc_spi_start_write_block+0x44>)
    2a40:	2201      	movs	r2, #1
    2a42:	0018      	movs	r0, r3
    2a44:	4b0c      	ldr	r3, [pc, #48]	; (2a78 <sd_mmc_spi_start_write_block+0x48>)
    2a46:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    2a48:	4b0c      	ldr	r3, [pc, #48]	; (2a7c <sd_mmc_spi_start_write_block+0x4c>)
    2a4a:	881b      	ldrh	r3, [r3, #0]
    2a4c:	2b01      	cmp	r3, #1
    2a4e:	d103      	bne.n	2a58 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    2a50:	1dbb      	adds	r3, r7, #6
    2a52:	22fe      	movs	r2, #254	; 0xfe
    2a54:	701a      	strb	r2, [r3, #0]
    2a56:	e002      	b.n	2a5e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    2a58:	1dbb      	adds	r3, r7, #6
    2a5a:	22fc      	movs	r2, #252	; 0xfc
    2a5c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    2a5e:	1db9      	adds	r1, r7, #6
    2a60:	4b04      	ldr	r3, [pc, #16]	; (2a74 <sd_mmc_spi_start_write_block+0x44>)
    2a62:	2201      	movs	r2, #1
    2a64:	0018      	movs	r0, r3
    2a66:	4b04      	ldr	r3, [pc, #16]	; (2a78 <sd_mmc_spi_start_write_block+0x48>)
    2a68:	4798      	blx	r3
}
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	46bd      	mov	sp, r7
    2a6e:	b002      	add	sp, #8
    2a70:	bd80      	pop	{r7, pc}
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	20000134 	.word	0x20000134
    2a78:	00004be1 	.word	0x00004be1
    2a7c:	20000182 	.word	0x20000182

00002a80 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    2a80:	b590      	push	{r4, r7, lr}
    2a82:	b083      	sub	sp, #12
    2a84:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    2a86:	1dbb      	adds	r3, r7, #6
    2a88:	22ff      	movs	r2, #255	; 0xff
    2a8a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    2a8c:	1cbb      	adds	r3, r7, #2
    2a8e:	2201      	movs	r2, #1
    2a90:	4252      	negs	r2, r2
    2a92:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    2a94:	1cb9      	adds	r1, r7, #2
    2a96:	4b1b      	ldr	r3, [pc, #108]	; (2b04 <sd_mmc_spi_stop_write_block+0x84>)
    2a98:	2202      	movs	r2, #2
    2a9a:	0018      	movs	r0, r3
    2a9c:	4b1a      	ldr	r3, [pc, #104]	; (2b08 <sd_mmc_spi_stop_write_block+0x88>)
    2a9e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2aa0:	1dbb      	adds	r3, r7, #6
    2aa2:	881b      	ldrh	r3, [r3, #0]
    2aa4:	1d79      	adds	r1, r7, #5
    2aa6:	4817      	ldr	r0, [pc, #92]	; (2b04 <sd_mmc_spi_stop_write_block+0x84>)
    2aa8:	2201      	movs	r2, #1
    2aaa:	4c18      	ldr	r4, [pc, #96]	; (2b0c <sd_mmc_spi_stop_write_block+0x8c>)
    2aac:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    2aae:	1d7b      	adds	r3, r7, #5
    2ab0:	781b      	ldrb	r3, [r3, #0]
    2ab2:	001a      	movs	r2, r3
    2ab4:	2310      	movs	r3, #16
    2ab6:	4013      	ands	r3, r2
    2ab8:	d105      	bne.n	2ac6 <sd_mmc_spi_stop_write_block+0x46>
    2aba:	1d7b      	adds	r3, r7, #5
    2abc:	781b      	ldrb	r3, [r3, #0]
    2abe:	001a      	movs	r2, r3
    2ac0:	2301      	movs	r3, #1
    2ac2:	4013      	ands	r3, r2
    2ac4:	d104      	bne.n	2ad0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2ac6:	4b12      	ldr	r3, [pc, #72]	; (2b10 <sd_mmc_spi_stop_write_block+0x90>)
    2ac8:	2201      	movs	r2, #1
    2aca:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    2acc:	2300      	movs	r3, #0
    2ace:	e014      	b.n	2afa <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2ad0:	1d7b      	adds	r3, r7, #5
    2ad2:	781b      	ldrb	r3, [r3, #0]
    2ad4:	001a      	movs	r2, r3
    2ad6:	231e      	movs	r3, #30
    2ad8:	4013      	ands	r3, r2
    2ada:	2b04      	cmp	r3, #4
    2adc:	d00b      	beq.n	2af6 <sd_mmc_spi_stop_write_block+0x76>
    2ade:	2b0a      	cmp	r3, #10
    2ae0:	d104      	bne.n	2aec <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    2ae2:	4b0b      	ldr	r3, [pc, #44]	; (2b10 <sd_mmc_spi_stop_write_block+0x90>)
    2ae4:	2208      	movs	r2, #8
    2ae6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2ae8:	2300      	movs	r3, #0
    2aea:	e006      	b.n	2afa <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    2aec:	4b08      	ldr	r3, [pc, #32]	; (2b10 <sd_mmc_spi_stop_write_block+0x90>)
    2aee:	220a      	movs	r2, #10
    2af0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2af2:	2300      	movs	r3, #0
    2af4:	e001      	b.n	2afa <sd_mmc_spi_stop_write_block+0x7a>
		break;
    2af6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    2af8:	2301      	movs	r3, #1
}
    2afa:	0018      	movs	r0, r3
    2afc:	46bd      	mov	sp, r7
    2afe:	b003      	add	sp, #12
    2b00:	bd90      	pop	{r4, r7, pc}
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	20000134 	.word	0x20000134
    2b08:	00004be1 	.word	0x00004be1
    2b0c:	000049bd 	.word	0x000049bd
    2b10:	20000177 	.word	0x20000177

00002b14 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    2b14:	b590      	push	{r4, r7, lr}
    2b16:	b083      	sub	sp, #12
    2b18:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    2b1a:	4b1d      	ldr	r3, [pc, #116]	; (2b90 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2b1c:	881b      	ldrh	r3, [r3, #0]
    2b1e:	2b01      	cmp	r3, #1
    2b20:	d101      	bne.n	2b26 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    2b22:	2301      	movs	r3, #1
    2b24:	e030      	b.n	2b88 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    2b26:	4b1a      	ldr	r3, [pc, #104]	; (2b90 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2b28:	881b      	ldrh	r3, [r3, #0]
    2b2a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    2b2c:	4b19      	ldr	r3, [pc, #100]	; (2b94 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    2b2e:	681a      	ldr	r2, [r3, #0]
    2b30:	4b19      	ldr	r3, [pc, #100]	; (2b98 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    2b32:	881b      	ldrh	r3, [r3, #0]
    2b34:	0019      	movs	r1, r3
    2b36:	4b19      	ldr	r3, [pc, #100]	; (2b9c <sd_mmc_spi_stop_multiwrite_block+0x88>)
    2b38:	0010      	movs	r0, r2
    2b3a:	4798      	blx	r3
    2b3c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    2b3e:	429c      	cmp	r4, r3
    2b40:	d901      	bls.n	2b46 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    2b42:	2301      	movs	r3, #1
    2b44:	e020      	b.n	2b88 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    2b46:	1dfb      	adds	r3, r7, #7
    2b48:	22ff      	movs	r2, #255	; 0xff
    2b4a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2b4c:	1df9      	adds	r1, r7, #7
    2b4e:	4b14      	ldr	r3, [pc, #80]	; (2ba0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2b50:	2201      	movs	r2, #1
    2b52:	0018      	movs	r0, r3
    2b54:	4b13      	ldr	r3, [pc, #76]	; (2ba4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2b56:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    2b58:	1dfb      	adds	r3, r7, #7
    2b5a:	22fd      	movs	r2, #253	; 0xfd
    2b5c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2b5e:	1df9      	adds	r1, r7, #7
    2b60:	4b0f      	ldr	r3, [pc, #60]	; (2ba0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2b62:	2201      	movs	r2, #1
    2b64:	0018      	movs	r0, r3
    2b66:	4b0f      	ldr	r3, [pc, #60]	; (2ba4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2b68:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    2b6a:	4b0f      	ldr	r3, [pc, #60]	; (2ba8 <sd_mmc_spi_stop_multiwrite_block+0x94>)
    2b6c:	4798      	blx	r3
    2b6e:	0003      	movs	r3, r0
    2b70:	001a      	movs	r2, r3
    2b72:	2301      	movs	r3, #1
    2b74:	4053      	eors	r3, r2
    2b76:	b2db      	uxtb	r3, r3
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d004      	beq.n	2b86 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2b7c:	4b0b      	ldr	r3, [pc, #44]	; (2bac <sd_mmc_spi_stop_multiwrite_block+0x98>)
    2b7e:	2205      	movs	r2, #5
    2b80:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    2b82:	2300      	movs	r3, #0
    2b84:	e000      	b.n	2b88 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    2b86:	2301      	movs	r3, #1
}
    2b88:	0018      	movs	r0, r3
    2b8a:	46bd      	mov	sp, r7
    2b8c:	b003      	add	sp, #12
    2b8e:	bd90      	pop	{r4, r7, pc}
    2b90:	20000182 	.word	0x20000182
    2b94:	2000017c 	.word	0x2000017c
    2b98:	20000180 	.word	0x20000180
    2b9c:	0000b53d 	.word	0x0000b53d
    2ba0:	20000134 	.word	0x20000134
    2ba4:	00004be1 	.word	0x00004be1
    2ba8:	00002915 	.word	0x00002915
    2bac:	20000177 	.word	0x20000177

00002bb0 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2bb0:	b580      	push	{r7, lr}
    2bb2:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    2bb4:	4b03      	ldr	r3, [pc, #12]	; (2bc4 <sd_mmc_deinit+0x14>)
    2bb6:	0018      	movs	r0, r3
    2bb8:	4b03      	ldr	r3, [pc, #12]	; (2bc8 <sd_mmc_deinit+0x18>)
    2bba:	4798      	blx	r3
}
    2bbc:	46c0      	nop			; (mov r8, r8)
    2bbe:	46bd      	mov	sp, r7
    2bc0:	bd80      	pop	{r7, pc}
    2bc2:	46c0      	nop			; (mov r8, r8)
    2bc4:	20000134 	.word	0x20000134
    2bc8:	00004515 	.word	0x00004515

00002bcc <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2bcc:	b580      	push	{r7, lr}
    2bce:	b090      	sub	sp, #64	; 0x40
    2bd0:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2bd2:	4b1f      	ldr	r3, [pc, #124]	; (2c50 <sd_mmc_spi_init+0x84>)
    2bd4:	2200      	movs	r2, #0
    2bd6:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2bd8:	233c      	movs	r3, #60	; 0x3c
    2bda:	18fb      	adds	r3, r7, r3
    2bdc:	0018      	movs	r0, r3
    2bde:	4b1d      	ldr	r3, [pc, #116]	; (2c54 <sd_mmc_spi_init+0x88>)
    2be0:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    2be2:	1d3b      	adds	r3, r7, #4
    2be4:	0018      	movs	r0, r3
    2be6:	4b1c      	ldr	r3, [pc, #112]	; (2c58 <sd_mmc_spi_init+0x8c>)
    2be8:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    2bea:	1d3b      	adds	r3, r7, #4
    2bec:	2280      	movs	r2, #128	; 0x80
    2bee:	0252      	lsls	r2, r2, #9
    2bf0:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    2bf2:	1d3b      	adds	r3, r7, #4
    2bf4:	4a19      	ldr	r2, [pc, #100]	; (2c5c <sd_mmc_spi_init+0x90>)
    2bf6:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    2bf8:	1d3b      	adds	r3, r7, #4
    2bfa:	4a19      	ldr	r2, [pc, #100]	; (2c60 <sd_mmc_spi_init+0x94>)
    2bfc:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    2bfe:	1d3b      	adds	r3, r7, #4
    2c00:	4a18      	ldr	r2, [pc, #96]	; (2c64 <sd_mmc_spi_init+0x98>)
    2c02:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    2c04:	1d3b      	adds	r3, r7, #4
    2c06:	4a18      	ldr	r2, [pc, #96]	; (2c68 <sd_mmc_spi_init+0x9c>)
    2c08:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    2c0a:	1d3b      	adds	r3, r7, #4
    2c0c:	2224      	movs	r2, #36	; 0x24
    2c0e:	2100      	movs	r1, #0
    2c10:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    2c12:	1d3b      	adds	r3, r7, #4
    2c14:	4a15      	ldr	r2, [pc, #84]	; (2c6c <sd_mmc_spi_init+0xa0>)
    2c16:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    2c18:	1d3a      	adds	r2, r7, #4
    2c1a:	4915      	ldr	r1, [pc, #84]	; (2c70 <sd_mmc_spi_init+0xa4>)
    2c1c:	4b15      	ldr	r3, [pc, #84]	; (2c74 <sd_mmc_spi_init+0xa8>)
    2c1e:	0018      	movs	r0, r3
    2c20:	4b15      	ldr	r3, [pc, #84]	; (2c78 <sd_mmc_spi_init+0xac>)
    2c22:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    2c24:	4b13      	ldr	r3, [pc, #76]	; (2c74 <sd_mmc_spi_init+0xa8>)
    2c26:	0018      	movs	r0, r3
    2c28:	4b14      	ldr	r3, [pc, #80]	; (2c7c <sd_mmc_spi_init+0xb0>)
    2c2a:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    2c2c:	4b14      	ldr	r3, [pc, #80]	; (2c80 <sd_mmc_spi_init+0xb4>)
    2c2e:	0018      	movs	r0, r3
    2c30:	4b14      	ldr	r3, [pc, #80]	; (2c84 <sd_mmc_spi_init+0xb8>)
    2c32:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    2c34:	4b14      	ldr	r3, [pc, #80]	; (2c88 <sd_mmc_spi_init+0xbc>)
    2c36:	781a      	ldrb	r2, [r3, #0]
    2c38:	4b11      	ldr	r3, [pc, #68]	; (2c80 <sd_mmc_spi_init+0xb4>)
    2c3a:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    2c3c:	4a10      	ldr	r2, [pc, #64]	; (2c80 <sd_mmc_spi_init+0xb4>)
    2c3e:	4b13      	ldr	r3, [pc, #76]	; (2c8c <sd_mmc_spi_init+0xc0>)
    2c40:	0011      	movs	r1, r2
    2c42:	0018      	movs	r0, r3
    2c44:	4b12      	ldr	r3, [pc, #72]	; (2c90 <sd_mmc_spi_init+0xc4>)
    2c46:	4798      	blx	r3
}
    2c48:	46c0      	nop			; (mov r8, r8)
    2c4a:	46bd      	mov	sp, r7
    2c4c:	b010      	add	sp, #64	; 0x40
    2c4e:	bd80      	pop	{r7, pc}
    2c50:	20000177 	.word	0x20000177
    2c54:	00002639 	.word	0x00002639
    2c58:	000026fd 	.word	0x000026fd
    2c5c:	00100002 	.word	0x00100002
    2c60:	00110002 	.word	0x00110002
    2c64:	00120002 	.word	0x00120002
    2c68:	00130002 	.word	0x00130002
    2c6c:	00061a80 	.word	0x00061a80
    2c70:	42000c00 	.word	0x42000c00
    2c74:	20000134 	.word	0x20000134
    2c78:	0000482d 	.word	0x0000482d
    2c7c:	00002809 	.word	0x00002809
    2c80:	20000174 	.word	0x20000174
    2c84:	00002781 	.word	0x00002781
    2c88:	20000008 	.word	0x20000008
    2c8c:	20000170 	.word	0x20000170
    2c90:	000027a5 	.word	0x000027a5

00002c94 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    2c94:	b590      	push	{r4, r7, lr}
    2c96:	b083      	sub	sp, #12
    2c98:	af00      	add	r7, sp, #0
    2c9a:	0004      	movs	r4, r0
    2c9c:	6039      	str	r1, [r7, #0]
    2c9e:	0010      	movs	r0, r2
    2ca0:	0019      	movs	r1, r3
    2ca2:	1dfb      	adds	r3, r7, #7
    2ca4:	1c22      	adds	r2, r4, #0
    2ca6:	701a      	strb	r2, [r3, #0]
    2ca8:	1dbb      	adds	r3, r7, #6
    2caa:	1c02      	adds	r2, r0, #0
    2cac:	701a      	strb	r2, [r3, #0]
    2cae:	1d7b      	adds	r3, r7, #5
    2cb0:	1c0a      	adds	r2, r1, #0
    2cb2:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2cb4:	4b13      	ldr	r3, [pc, #76]	; (2d04 <sd_mmc_spi_select_device+0x70>)
    2cb6:	2200      	movs	r2, #0
    2cb8:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    2cba:	683b      	ldr	r3, [r7, #0]
    2cbc:	4a12      	ldr	r2, [pc, #72]	; (2d08 <sd_mmc_spi_select_device+0x74>)
    2cbe:	4293      	cmp	r3, r2
    2cc0:	d907      	bls.n	2cd2 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    2cc2:	4b11      	ldr	r3, [pc, #68]	; (2d08 <sd_mmc_spi_select_device+0x74>)
    2cc4:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2cc6:	e004      	b.n	2cd2 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    2cc8:	683b      	ldr	r3, [r7, #0]
    2cca:	08db      	lsrs	r3, r3, #3
    2ccc:	683a      	ldr	r2, [r7, #0]
    2cce:	1ad3      	subs	r3, r2, r3
    2cd0:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2cd2:	683a      	ldr	r2, [r7, #0]
    2cd4:	4b0d      	ldr	r3, [pc, #52]	; (2d0c <sd_mmc_spi_select_device+0x78>)
    2cd6:	0011      	movs	r1, r2
    2cd8:	0018      	movs	r0, r3
    2cda:	4b0d      	ldr	r3, [pc, #52]	; (2d10 <sd_mmc_spi_select_device+0x7c>)
    2cdc:	4798      	blx	r3
    2cde:	0003      	movs	r3, r0
    2ce0:	2b17      	cmp	r3, #23
    2ce2:	d0f1      	beq.n	2cc8 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    2ce4:	1dfb      	adds	r3, r7, #7
    2ce6:	781a      	ldrb	r2, [r3, #0]
    2ce8:	0013      	movs	r3, r2
    2cea:	005b      	lsls	r3, r3, #1
    2cec:	189b      	adds	r3, r3, r2
    2cee:	4a09      	ldr	r2, [pc, #36]	; (2d14 <sd_mmc_spi_select_device+0x80>)
    2cf0:	1899      	adds	r1, r3, r2
    2cf2:	4b06      	ldr	r3, [pc, #24]	; (2d0c <sd_mmc_spi_select_device+0x78>)
    2cf4:	2201      	movs	r2, #1
    2cf6:	0018      	movs	r0, r3
    2cf8:	4b07      	ldr	r3, [pc, #28]	; (2d18 <sd_mmc_spi_select_device+0x84>)
    2cfa:	4798      	blx	r3
}
    2cfc:	46c0      	nop			; (mov r8, r8)
    2cfe:	46bd      	mov	sp, r7
    2d00:	b003      	add	sp, #12
    2d02:	bd90      	pop	{r4, r7, pc}
    2d04:	20000177 	.word	0x20000177
    2d08:	00989680 	.word	0x00989680
    2d0c:	20000134 	.word	0x20000134
    2d10:	00004555 	.word	0x00004555
    2d14:	20000170 	.word	0x20000170
    2d18:	00004af1 	.word	0x00004af1

00002d1c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    2d1c:	b580      	push	{r7, lr}
    2d1e:	b082      	sub	sp, #8
    2d20:	af00      	add	r7, sp, #0
    2d22:	0002      	movs	r2, r0
    2d24:	1dfb      	adds	r3, r7, #7
    2d26:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2d28:	4b09      	ldr	r3, [pc, #36]	; (2d50 <sd_mmc_spi_deselect_device+0x34>)
    2d2a:	2200      	movs	r2, #0
    2d2c:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    2d2e:	1dfb      	adds	r3, r7, #7
    2d30:	781a      	ldrb	r2, [r3, #0]
    2d32:	0013      	movs	r3, r2
    2d34:	005b      	lsls	r3, r3, #1
    2d36:	189b      	adds	r3, r3, r2
    2d38:	4a06      	ldr	r2, [pc, #24]	; (2d54 <sd_mmc_spi_deselect_device+0x38>)
    2d3a:	1899      	adds	r1, r3, r2
    2d3c:	4b06      	ldr	r3, [pc, #24]	; (2d58 <sd_mmc_spi_deselect_device+0x3c>)
    2d3e:	2200      	movs	r2, #0
    2d40:	0018      	movs	r0, r3
    2d42:	4b06      	ldr	r3, [pc, #24]	; (2d5c <sd_mmc_spi_deselect_device+0x40>)
    2d44:	4798      	blx	r3
}
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	46bd      	mov	sp, r7
    2d4a:	b002      	add	sp, #8
    2d4c:	bd80      	pop	{r7, pc}
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	20000177 	.word	0x20000177
    2d54:	20000170 	.word	0x20000170
    2d58:	20000134 	.word	0x20000134
    2d5c:	00004af1 	.word	0x00004af1

00002d60 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    2d60:	b580      	push	{r7, lr}
    2d62:	b082      	sub	sp, #8
    2d64:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    2d66:	1dbb      	adds	r3, r7, #6
    2d68:	22ff      	movs	r2, #255	; 0xff
    2d6a:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2d6c:	4b0c      	ldr	r3, [pc, #48]	; (2da0 <sd_mmc_spi_send_clock+0x40>)
    2d6e:	2200      	movs	r2, #0
    2d70:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    2d72:	1dfb      	adds	r3, r7, #7
    2d74:	2200      	movs	r2, #0
    2d76:	701a      	strb	r2, [r3, #0]
    2d78:	e00a      	b.n	2d90 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    2d7a:	1db9      	adds	r1, r7, #6
    2d7c:	4b09      	ldr	r3, [pc, #36]	; (2da4 <sd_mmc_spi_send_clock+0x44>)
    2d7e:	2201      	movs	r2, #1
    2d80:	0018      	movs	r0, r3
    2d82:	4b09      	ldr	r3, [pc, #36]	; (2da8 <sd_mmc_spi_send_clock+0x48>)
    2d84:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    2d86:	1dfb      	adds	r3, r7, #7
    2d88:	781a      	ldrb	r2, [r3, #0]
    2d8a:	1dfb      	adds	r3, r7, #7
    2d8c:	3201      	adds	r2, #1
    2d8e:	701a      	strb	r2, [r3, #0]
    2d90:	1dfb      	adds	r3, r7, #7
    2d92:	781b      	ldrb	r3, [r3, #0]
    2d94:	2b09      	cmp	r3, #9
    2d96:	d9f0      	bls.n	2d7a <sd_mmc_spi_send_clock+0x1a>
	}
}
    2d98:	46c0      	nop			; (mov r8, r8)
    2d9a:	46bd      	mov	sp, r7
    2d9c:	b002      	add	sp, #8
    2d9e:	bd80      	pop	{r7, pc}
    2da0:	20000177 	.word	0x20000177
    2da4:	20000134 	.word	0x20000134
    2da8:	00004be1 	.word	0x00004be1

00002dac <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2dac:	b590      	push	{r4, r7, lr}
    2dae:	b085      	sub	sp, #20
    2db0:	af02      	add	r7, sp, #8
    2db2:	6078      	str	r0, [r7, #4]
    2db4:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    2db6:	6839      	ldr	r1, [r7, #0]
    2db8:	6878      	ldr	r0, [r7, #4]
    2dba:	2300      	movs	r3, #0
    2dbc:	9300      	str	r3, [sp, #0]
    2dbe:	2300      	movs	r3, #0
    2dc0:	2200      	movs	r2, #0
    2dc2:	4c03      	ldr	r4, [pc, #12]	; (2dd0 <sd_mmc_spi_send_cmd+0x24>)
    2dc4:	47a0      	blx	r4
    2dc6:	0003      	movs	r3, r0
}
    2dc8:	0018      	movs	r0, r3
    2dca:	46bd      	mov	sp, r7
    2dcc:	b003      	add	sp, #12
    2dce:	bd90      	pop	{r4, r7, pc}
    2dd0:	00002dd5 	.word	0x00002dd5

00002dd4 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    2dd4:	b590      	push	{r4, r7, lr}
    2dd6:	b089      	sub	sp, #36	; 0x24
    2dd8:	af00      	add	r7, sp, #0
    2dda:	60f8      	str	r0, [r7, #12]
    2ddc:	60b9      	str	r1, [r7, #8]
    2dde:	0019      	movs	r1, r3
    2de0:	1dbb      	adds	r3, r7, #6
    2de2:	801a      	strh	r2, [r3, #0]
    2de4:	1d3b      	adds	r3, r7, #4
    2de6:	1c0a      	adds	r2, r1, #0
    2de8:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    2dea:	231b      	movs	r3, #27
    2dec:	18fb      	adds	r3, r7, r3
    2dee:	22ff      	movs	r2, #255	; 0xff
    2df0:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    2df2:	231c      	movs	r3, #28
    2df4:	18fb      	adds	r3, r7, r3
    2df6:	22ff      	movs	r2, #255	; 0xff
    2df8:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2dfa:	4b72      	ldr	r3, [pc, #456]	; (2fc4 <sd_mmc_spi_adtc_start+0x1f0>)
    2dfc:	2200      	movs	r2, #0
    2dfe:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    2e00:	68fb      	ldr	r3, [r7, #12]
    2e02:	b2db      	uxtb	r3, r3
    2e04:	223f      	movs	r2, #63	; 0x3f
    2e06:	4013      	ands	r3, r2
    2e08:	b2db      	uxtb	r3, r3
    2e0a:	2240      	movs	r2, #64	; 0x40
    2e0c:	4313      	orrs	r3, r2
    2e0e:	b2da      	uxtb	r2, r3
    2e10:	2314      	movs	r3, #20
    2e12:	18fb      	adds	r3, r7, r3
    2e14:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    2e16:	68bb      	ldr	r3, [r7, #8]
    2e18:	0e1b      	lsrs	r3, r3, #24
    2e1a:	b2da      	uxtb	r2, r3
    2e1c:	2314      	movs	r3, #20
    2e1e:	18fb      	adds	r3, r7, r3
    2e20:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    2e22:	68bb      	ldr	r3, [r7, #8]
    2e24:	0c1b      	lsrs	r3, r3, #16
    2e26:	b2da      	uxtb	r2, r3
    2e28:	2314      	movs	r3, #20
    2e2a:	18fb      	adds	r3, r7, r3
    2e2c:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    2e2e:	68bb      	ldr	r3, [r7, #8]
    2e30:	0a1b      	lsrs	r3, r3, #8
    2e32:	b2da      	uxtb	r2, r3
    2e34:	2314      	movs	r3, #20
    2e36:	18fb      	adds	r3, r7, r3
    2e38:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    2e3a:	68bb      	ldr	r3, [r7, #8]
    2e3c:	b2da      	uxtb	r2, r3
    2e3e:	2314      	movs	r3, #20
    2e40:	18fb      	adds	r3, r7, r3
    2e42:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    2e44:	2314      	movs	r3, #20
    2e46:	18fb      	adds	r3, r7, r3
    2e48:	2105      	movs	r1, #5
    2e4a:	0018      	movs	r0, r3
    2e4c:	4b5e      	ldr	r3, [pc, #376]	; (2fc8 <sd_mmc_spi_adtc_start+0x1f4>)
    2e4e:	4798      	blx	r3
    2e50:	0003      	movs	r3, r0
    2e52:	001a      	movs	r2, r3
    2e54:	2314      	movs	r3, #20
    2e56:	18fb      	adds	r3, r7, r3
    2e58:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    2e5a:	231b      	movs	r3, #27
    2e5c:	18f9      	adds	r1, r7, r3
    2e5e:	4b5b      	ldr	r3, [pc, #364]	; (2fcc <sd_mmc_spi_adtc_start+0x1f8>)
    2e60:	2201      	movs	r2, #1
    2e62:	0018      	movs	r0, r3
    2e64:	4b5a      	ldr	r3, [pc, #360]	; (2fd0 <sd_mmc_spi_adtc_start+0x1fc>)
    2e66:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    2e68:	2314      	movs	r3, #20
    2e6a:	18f9      	adds	r1, r7, r3
    2e6c:	4b57      	ldr	r3, [pc, #348]	; (2fcc <sd_mmc_spi_adtc_start+0x1f8>)
    2e6e:	2206      	movs	r2, #6
    2e70:	0018      	movs	r0, r3
    2e72:	4b57      	ldr	r3, [pc, #348]	; (2fd0 <sd_mmc_spi_adtc_start+0x1fc>)
    2e74:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    2e76:	2313      	movs	r3, #19
    2e78:	18fb      	adds	r3, r7, r3
    2e7a:	22ff      	movs	r2, #255	; 0xff
    2e7c:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2e7e:	231c      	movs	r3, #28
    2e80:	18fb      	adds	r3, r7, r3
    2e82:	881b      	ldrh	r3, [r3, #0]
    2e84:	2213      	movs	r2, #19
    2e86:	18b9      	adds	r1, r7, r2
    2e88:	4850      	ldr	r0, [pc, #320]	; (2fcc <sd_mmc_spi_adtc_start+0x1f8>)
    2e8a:	2201      	movs	r2, #1
    2e8c:	4c51      	ldr	r4, [pc, #324]	; (2fd4 <sd_mmc_spi_adtc_start+0x200>)
    2e8e:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    2e90:	231f      	movs	r3, #31
    2e92:	18fb      	adds	r3, r7, r3
    2e94:	2207      	movs	r2, #7
    2e96:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2e98:	231c      	movs	r3, #28
    2e9a:	18fb      	adds	r3, r7, r3
    2e9c:	881b      	ldrh	r3, [r3, #0]
    2e9e:	2213      	movs	r2, #19
    2ea0:	18b9      	adds	r1, r7, r2
    2ea2:	484a      	ldr	r0, [pc, #296]	; (2fcc <sd_mmc_spi_adtc_start+0x1f8>)
    2ea4:	2201      	movs	r2, #1
    2ea6:	4c4b      	ldr	r4, [pc, #300]	; (2fd4 <sd_mmc_spi_adtc_start+0x200>)
    2ea8:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2eaa:	2313      	movs	r3, #19
    2eac:	18fb      	adds	r3, r7, r3
    2eae:	781b      	ldrb	r3, [r3, #0]
    2eb0:	b25b      	sxtb	r3, r3
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	da10      	bge.n	2ed8 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    2eb6:	231f      	movs	r3, #31
    2eb8:	18fb      	adds	r3, r7, r3
    2eba:	221f      	movs	r2, #31
    2ebc:	18ba      	adds	r2, r7, r2
    2ebe:	7812      	ldrb	r2, [r2, #0]
    2ec0:	3a01      	subs	r2, #1
    2ec2:	701a      	strb	r2, [r3, #0]
    2ec4:	231f      	movs	r3, #31
    2ec6:	18fb      	adds	r3, r7, r3
    2ec8:	781b      	ldrb	r3, [r3, #0]
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d1e4      	bne.n	2e98 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2ece:	4b3d      	ldr	r3, [pc, #244]	; (2fc4 <sd_mmc_spi_adtc_start+0x1f0>)
    2ed0:	2202      	movs	r2, #2
    2ed2:	701a      	strb	r2, [r3, #0]
			return false;
    2ed4:	2300      	movs	r3, #0
    2ed6:	e070      	b.n	2fba <sd_mmc_spi_adtc_start+0x1e6>
			break;
    2ed8:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    2eda:	2313      	movs	r3, #19
    2edc:	18fb      	adds	r3, r7, r3
    2ede:	781b      	ldrb	r3, [r3, #0]
    2ee0:	001a      	movs	r2, r3
    2ee2:	4b3d      	ldr	r3, [pc, #244]	; (2fd8 <sd_mmc_spi_adtc_start+0x204>)
    2ee4:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    2ee6:	2313      	movs	r3, #19
    2ee8:	18fb      	adds	r3, r7, r3
    2eea:	781b      	ldrb	r3, [r3, #0]
    2eec:	001a      	movs	r2, r3
    2eee:	2308      	movs	r3, #8
    2ef0:	4013      	ands	r3, r2
    2ef2:	d004      	beq.n	2efe <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    2ef4:	4b33      	ldr	r3, [pc, #204]	; (2fc4 <sd_mmc_spi_adtc_start+0x1f0>)
    2ef6:	2206      	movs	r2, #6
    2ef8:	701a      	strb	r2, [r3, #0]
		return false;
    2efa:	2300      	movs	r3, #0
    2efc:	e05d      	b.n	2fba <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    2efe:	2313      	movs	r3, #19
    2f00:	18fb      	adds	r3, r7, r3
    2f02:	781b      	ldrb	r3, [r3, #0]
    2f04:	001a      	movs	r2, r3
    2f06:	2304      	movs	r3, #4
    2f08:	4013      	ands	r3, r2
    2f0a:	d004      	beq.n	2f16 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    2f0c:	4b2d      	ldr	r3, [pc, #180]	; (2fc4 <sd_mmc_spi_adtc_start+0x1f0>)
    2f0e:	2209      	movs	r2, #9
    2f10:	701a      	strb	r2, [r3, #0]
		return false;
    2f12:	2300      	movs	r3, #0
    2f14:	e051      	b.n	2fba <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    2f16:	2313      	movs	r3, #19
    2f18:	18fb      	adds	r3, r7, r3
    2f1a:	781b      	ldrb	r3, [r3, #0]
    2f1c:	001a      	movs	r2, r3
    2f1e:	2301      	movs	r3, #1
    2f20:	439a      	bics	r2, r3
    2f22:	1e13      	subs	r3, r2, #0
    2f24:	d004      	beq.n	2f30 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2f26:	4b27      	ldr	r3, [pc, #156]	; (2fc4 <sd_mmc_spi_adtc_start+0x1f0>)
    2f28:	2201      	movs	r2, #1
    2f2a:	701a      	strb	r2, [r3, #0]
		return false;
    2f2c:	2300      	movs	r3, #0
    2f2e:	e044      	b.n	2fba <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    2f30:	68fa      	ldr	r2, [r7, #12]
    2f32:	2380      	movs	r3, #128	; 0x80
    2f34:	019b      	lsls	r3, r3, #6
    2f36:	4013      	ands	r3, r2
    2f38:	d00d      	beq.n	2f56 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    2f3a:	4b28      	ldr	r3, [pc, #160]	; (2fdc <sd_mmc_spi_adtc_start+0x208>)
    2f3c:	4798      	blx	r3
    2f3e:	0003      	movs	r3, r0
    2f40:	001a      	movs	r2, r3
    2f42:	2301      	movs	r3, #1
    2f44:	4053      	eors	r3, r2
    2f46:	b2db      	uxtb	r3, r3
    2f48:	2b00      	cmp	r3, #0
    2f4a:	d004      	beq.n	2f56 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    2f4c:	4b1d      	ldr	r3, [pc, #116]	; (2fc4 <sd_mmc_spi_adtc_start+0x1f0>)
    2f4e:	2203      	movs	r2, #3
    2f50:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    2f52:	2300      	movs	r3, #0
    2f54:	e031      	b.n	2fba <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    2f56:	68fa      	ldr	r2, [r7, #12]
    2f58:	2380      	movs	r3, #128	; 0x80
    2f5a:	009b      	lsls	r3, r3, #2
    2f5c:	4013      	ands	r3, r2
    2f5e:	d00e      	beq.n	2f7e <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    2f60:	4b1d      	ldr	r3, [pc, #116]	; (2fd8 <sd_mmc_spi_adtc_start+0x204>)
    2f62:	2200      	movs	r2, #0
    2f64:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    2f66:	231c      	movs	r3, #28
    2f68:	18fb      	adds	r3, r7, r3
    2f6a:	881b      	ldrh	r3, [r3, #0]
    2f6c:	491a      	ldr	r1, [pc, #104]	; (2fd8 <sd_mmc_spi_adtc_start+0x204>)
    2f6e:	4817      	ldr	r0, [pc, #92]	; (2fcc <sd_mmc_spi_adtc_start+0x1f8>)
    2f70:	2201      	movs	r2, #1
    2f72:	4c18      	ldr	r4, [pc, #96]	; (2fd4 <sd_mmc_spi_adtc_start+0x200>)
    2f74:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    2f76:	4b18      	ldr	r3, [pc, #96]	; (2fd8 <sd_mmc_spi_adtc_start+0x204>)
    2f78:	681a      	ldr	r2, [r3, #0]
    2f7a:	4b17      	ldr	r3, [pc, #92]	; (2fd8 <sd_mmc_spi_adtc_start+0x204>)
    2f7c:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    2f7e:	68fa      	ldr	r2, [r7, #12]
    2f80:	2380      	movs	r3, #128	; 0x80
    2f82:	00db      	lsls	r3, r3, #3
    2f84:	4013      	ands	r3, r2
    2f86:	d00c      	beq.n	2fa2 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    2f88:	231c      	movs	r3, #28
    2f8a:	18fb      	adds	r3, r7, r3
    2f8c:	881b      	ldrh	r3, [r3, #0]
    2f8e:	4912      	ldr	r1, [pc, #72]	; (2fd8 <sd_mmc_spi_adtc_start+0x204>)
    2f90:	480e      	ldr	r0, [pc, #56]	; (2fcc <sd_mmc_spi_adtc_start+0x1f8>)
    2f92:	2204      	movs	r2, #4
    2f94:	4c0f      	ldr	r4, [pc, #60]	; (2fd4 <sd_mmc_spi_adtc_start+0x200>)
    2f96:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    2f98:	4b0f      	ldr	r3, [pc, #60]	; (2fd8 <sd_mmc_spi_adtc_start+0x204>)
    2f9a:	681b      	ldr	r3, [r3, #0]
    2f9c:	ba1a      	rev	r2, r3
    2f9e:	4b0e      	ldr	r3, [pc, #56]	; (2fd8 <sd_mmc_spi_adtc_start+0x204>)
    2fa0:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    2fa2:	4b0f      	ldr	r3, [pc, #60]	; (2fe0 <sd_mmc_spi_adtc_start+0x20c>)
    2fa4:	1dba      	adds	r2, r7, #6
    2fa6:	8812      	ldrh	r2, [r2, #0]
    2fa8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    2faa:	4b0e      	ldr	r3, [pc, #56]	; (2fe4 <sd_mmc_spi_adtc_start+0x210>)
    2fac:	1d3a      	adds	r2, r7, #4
    2fae:	8812      	ldrh	r2, [r2, #0]
    2fb0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    2fb2:	4b0d      	ldr	r3, [pc, #52]	; (2fe8 <sd_mmc_spi_adtc_start+0x214>)
    2fb4:	2200      	movs	r2, #0
    2fb6:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    2fb8:	2301      	movs	r3, #1
}
    2fba:	0018      	movs	r0, r3
    2fbc:	46bd      	mov	sp, r7
    2fbe:	b009      	add	sp, #36	; 0x24
    2fc0:	bd90      	pop	{r4, r7, pc}
    2fc2:	46c0      	nop			; (mov r8, r8)
    2fc4:	20000177 	.word	0x20000177
    2fc8:	00002859 	.word	0x00002859
    2fcc:	20000134 	.word	0x20000134
    2fd0:	00004be1 	.word	0x00004be1
    2fd4:	000049bd 	.word	0x000049bd
    2fd8:	20000178 	.word	0x20000178
    2fdc:	00002915 	.word	0x00002915
    2fe0:	20000180 	.word	0x20000180
    2fe4:	20000182 	.word	0x20000182
    2fe8:	2000017c 	.word	0x2000017c

00002fec <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    2fec:	b580      	push	{r7, lr}
    2fee:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    2ff0:	4b02      	ldr	r3, [pc, #8]	; (2ffc <sd_mmc_spi_get_response+0x10>)
    2ff2:	681b      	ldr	r3, [r3, #0]
}
    2ff4:	0018      	movs	r0, r3
    2ff6:	46bd      	mov	sp, r7
    2ff8:	bd80      	pop	{r7, pc}
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	20000178 	.word	0x20000178

00003000 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    3000:	b590      	push	{r4, r7, lr}
    3002:	b085      	sub	sp, #20
    3004:	af00      	add	r7, sp, #0
    3006:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    3008:	230e      	movs	r3, #14
    300a:	18fb      	adds	r3, r7, r3
    300c:	22ff      	movs	r2, #255	; 0xff
    300e:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3010:	4b1c      	ldr	r3, [pc, #112]	; (3084 <sd_mmc_spi_read_word+0x84>)
    3012:	2200      	movs	r2, #0
    3014:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    3016:	4b1c      	ldr	r3, [pc, #112]	; (3088 <sd_mmc_spi_read_word+0x88>)
    3018:	681a      	ldr	r2, [r3, #0]
    301a:	4b1c      	ldr	r3, [pc, #112]	; (308c <sd_mmc_spi_read_word+0x8c>)
    301c:	881b      	ldrh	r3, [r3, #0]
    301e:	0019      	movs	r1, r3
    3020:	4b1b      	ldr	r3, [pc, #108]	; (3090 <sd_mmc_spi_read_word+0x90>)
    3022:	0010      	movs	r0, r2
    3024:	4798      	blx	r3
    3026:	1e0b      	subs	r3, r1, #0
    3028:	d10a      	bne.n	3040 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    302a:	4b1a      	ldr	r3, [pc, #104]	; (3094 <sd_mmc_spi_read_word+0x94>)
    302c:	4798      	blx	r3
    302e:	0003      	movs	r3, r0
    3030:	001a      	movs	r2, r3
    3032:	2301      	movs	r3, #1
    3034:	4053      	eors	r3, r2
    3036:	b2db      	uxtb	r3, r3
    3038:	2b00      	cmp	r3, #0
    303a:	d001      	beq.n	3040 <sd_mmc_spi_read_word+0x40>
			return false;
    303c:	2300      	movs	r3, #0
    303e:	e01d      	b.n	307c <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    3040:	230e      	movs	r3, #14
    3042:	18fb      	adds	r3, r7, r3
    3044:	881b      	ldrh	r3, [r3, #0]
    3046:	1d39      	adds	r1, r7, #4
    3048:	4813      	ldr	r0, [pc, #76]	; (3098 <sd_mmc_spi_read_word+0x98>)
    304a:	2204      	movs	r2, #4
    304c:	4c13      	ldr	r4, [pc, #76]	; (309c <sd_mmc_spi_read_word+0x9c>)
    304e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	687a      	ldr	r2, [r7, #4]
    3054:	6812      	ldr	r2, [r2, #0]
    3056:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    3058:	4b0b      	ldr	r3, [pc, #44]	; (3088 <sd_mmc_spi_read_word+0x88>)
    305a:	681b      	ldr	r3, [r3, #0]
    305c:	1d1a      	adds	r2, r3, #4
    305e:	4b0a      	ldr	r3, [pc, #40]	; (3088 <sd_mmc_spi_read_word+0x88>)
    3060:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    3062:	4b09      	ldr	r3, [pc, #36]	; (3088 <sd_mmc_spi_read_word+0x88>)
    3064:	681a      	ldr	r2, [r3, #0]
    3066:	4b09      	ldr	r3, [pc, #36]	; (308c <sd_mmc_spi_read_word+0x8c>)
    3068:	881b      	ldrh	r3, [r3, #0]
    306a:	0019      	movs	r1, r3
    306c:	4b08      	ldr	r3, [pc, #32]	; (3090 <sd_mmc_spi_read_word+0x90>)
    306e:	0010      	movs	r0, r2
    3070:	4798      	blx	r3
    3072:	1e0b      	subs	r3, r1, #0
    3074:	d101      	bne.n	307a <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    3076:	4b0a      	ldr	r3, [pc, #40]	; (30a0 <sd_mmc_spi_read_word+0xa0>)
    3078:	4798      	blx	r3
	}
	return true;
    307a:	2301      	movs	r3, #1
}
    307c:	0018      	movs	r0, r3
    307e:	46bd      	mov	sp, r7
    3080:	b005      	add	sp, #20
    3082:	bd90      	pop	{r4, r7, pc}
    3084:	20000177 	.word	0x20000177
    3088:	2000017c 	.word	0x2000017c
    308c:	20000180 	.word	0x20000180
    3090:	0000b649 	.word	0x0000b649
    3094:	00002981 	.word	0x00002981
    3098:	20000134 	.word	0x20000134
    309c:	000049bd 	.word	0x000049bd
    30a0:	00002a05 	.word	0x00002a05

000030a4 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    30a4:	b590      	push	{r4, r7, lr}
    30a6:	b085      	sub	sp, #20
    30a8:	af00      	add	r7, sp, #0
    30aa:	6078      	str	r0, [r7, #4]
    30ac:	000a      	movs	r2, r1
    30ae:	1cbb      	adds	r3, r7, #2
    30b0:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    30b2:	230a      	movs	r3, #10
    30b4:	18fb      	adds	r3, r7, r3
    30b6:	22ff      	movs	r2, #255	; 0xff
    30b8:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    30ba:	4b1c      	ldr	r3, [pc, #112]	; (312c <sd_mmc_spi_start_read_blocks+0x88>)
    30bc:	2200      	movs	r2, #0
    30be:	701a      	strb	r2, [r3, #0]
	pos = 0;
    30c0:	2300      	movs	r3, #0
    30c2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    30c4:	e025      	b.n	3112 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    30c6:	4b1a      	ldr	r3, [pc, #104]	; (3130 <sd_mmc_spi_start_read_blocks+0x8c>)
    30c8:	4798      	blx	r3
    30ca:	0003      	movs	r3, r0
    30cc:	001a      	movs	r2, r3
    30ce:	2301      	movs	r3, #1
    30d0:	4053      	eors	r3, r2
    30d2:	b2db      	uxtb	r3, r3
    30d4:	2b00      	cmp	r3, #0
    30d6:	d001      	beq.n	30dc <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    30d8:	2300      	movs	r3, #0
    30da:	e022      	b.n	3122 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    30dc:	687a      	ldr	r2, [r7, #4]
    30de:	68fb      	ldr	r3, [r7, #12]
    30e0:	18d1      	adds	r1, r2, r3
    30e2:	4b14      	ldr	r3, [pc, #80]	; (3134 <sd_mmc_spi_start_read_blocks+0x90>)
    30e4:	881a      	ldrh	r2, [r3, #0]
    30e6:	230a      	movs	r3, #10
    30e8:	18fb      	adds	r3, r7, r3
    30ea:	881b      	ldrh	r3, [r3, #0]
    30ec:	4812      	ldr	r0, [pc, #72]	; (3138 <sd_mmc_spi_start_read_blocks+0x94>)
    30ee:	4c13      	ldr	r4, [pc, #76]	; (313c <sd_mmc_spi_start_read_blocks+0x98>)
    30f0:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    30f2:	4b10      	ldr	r3, [pc, #64]	; (3134 <sd_mmc_spi_start_read_blocks+0x90>)
    30f4:	881b      	ldrh	r3, [r3, #0]
    30f6:	001a      	movs	r2, r3
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	189b      	adds	r3, r3, r2
    30fc:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    30fe:	4b0d      	ldr	r3, [pc, #52]	; (3134 <sd_mmc_spi_start_read_blocks+0x90>)
    3100:	881b      	ldrh	r3, [r3, #0]
    3102:	001a      	movs	r2, r3
    3104:	4b0e      	ldr	r3, [pc, #56]	; (3140 <sd_mmc_spi_start_read_blocks+0x9c>)
    3106:	681b      	ldr	r3, [r3, #0]
    3108:	18d2      	adds	r2, r2, r3
    310a:	4b0d      	ldr	r3, [pc, #52]	; (3140 <sd_mmc_spi_start_read_blocks+0x9c>)
    310c:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    310e:	4b0d      	ldr	r3, [pc, #52]	; (3144 <sd_mmc_spi_start_read_blocks+0xa0>)
    3110:	4798      	blx	r3
	while (nb_block--) {
    3112:	1cbb      	adds	r3, r7, #2
    3114:	881b      	ldrh	r3, [r3, #0]
    3116:	1cba      	adds	r2, r7, #2
    3118:	1e59      	subs	r1, r3, #1
    311a:	8011      	strh	r1, [r2, #0]
    311c:	2b00      	cmp	r3, #0
    311e:	d1d2      	bne.n	30c6 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    3120:	2301      	movs	r3, #1
}
    3122:	0018      	movs	r0, r3
    3124:	46bd      	mov	sp, r7
    3126:	b005      	add	sp, #20
    3128:	bd90      	pop	{r4, r7, pc}
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	20000177 	.word	0x20000177
    3130:	00002981 	.word	0x00002981
    3134:	20000180 	.word	0x20000180
    3138:	20000134 	.word	0x20000134
    313c:	000049bd 	.word	0x000049bd
    3140:	2000017c 	.word	0x2000017c
    3144:	00002a05 	.word	0x00002a05

00003148 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    3148:	b580      	push	{r7, lr}
    314a:	af00      	add	r7, sp, #0
	return true;
    314c:	2301      	movs	r3, #1
}
    314e:	0018      	movs	r0, r3
    3150:	46bd      	mov	sp, r7
    3152:	bd80      	pop	{r7, pc}

00003154 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    3154:	b580      	push	{r7, lr}
    3156:	b084      	sub	sp, #16
    3158:	af00      	add	r7, sp, #0
    315a:	6078      	str	r0, [r7, #4]
    315c:	000a      	movs	r2, r1
    315e:	1cbb      	adds	r3, r7, #2
    3160:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3162:	4b24      	ldr	r3, [pc, #144]	; (31f4 <sd_mmc_spi_start_write_blocks+0xa0>)
    3164:	2200      	movs	r2, #0
    3166:	701a      	strb	r2, [r3, #0]
	pos = 0;
    3168:	2300      	movs	r3, #0
    316a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    316c:	e035      	b.n	31da <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    316e:	4b22      	ldr	r3, [pc, #136]	; (31f8 <sd_mmc_spi_start_write_blocks+0xa4>)
    3170:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    3172:	687a      	ldr	r2, [r7, #4]
    3174:	68fb      	ldr	r3, [r7, #12]
    3176:	18d1      	adds	r1, r2, r3
    3178:	4b20      	ldr	r3, [pc, #128]	; (31fc <sd_mmc_spi_start_write_blocks+0xa8>)
    317a:	881a      	ldrh	r2, [r3, #0]
    317c:	4b20      	ldr	r3, [pc, #128]	; (3200 <sd_mmc_spi_start_write_blocks+0xac>)
    317e:	0018      	movs	r0, r3
    3180:	4b20      	ldr	r3, [pc, #128]	; (3204 <sd_mmc_spi_start_write_blocks+0xb0>)
    3182:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    3184:	4b1d      	ldr	r3, [pc, #116]	; (31fc <sd_mmc_spi_start_write_blocks+0xa8>)
    3186:	881b      	ldrh	r3, [r3, #0]
    3188:	001a      	movs	r2, r3
    318a:	68fb      	ldr	r3, [r7, #12]
    318c:	189b      	adds	r3, r3, r2
    318e:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    3190:	4b1a      	ldr	r3, [pc, #104]	; (31fc <sd_mmc_spi_start_write_blocks+0xa8>)
    3192:	881b      	ldrh	r3, [r3, #0]
    3194:	001a      	movs	r2, r3
    3196:	4b1c      	ldr	r3, [pc, #112]	; (3208 <sd_mmc_spi_start_write_blocks+0xb4>)
    3198:	681b      	ldr	r3, [r3, #0]
    319a:	18d2      	adds	r2, r2, r3
    319c:	4b1a      	ldr	r3, [pc, #104]	; (3208 <sd_mmc_spi_start_write_blocks+0xb4>)
    319e:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    31a0:	4b1a      	ldr	r3, [pc, #104]	; (320c <sd_mmc_spi_start_write_blocks+0xb8>)
    31a2:	4798      	blx	r3
    31a4:	0003      	movs	r3, r0
    31a6:	001a      	movs	r2, r3
    31a8:	2301      	movs	r3, #1
    31aa:	4053      	eors	r3, r2
    31ac:	b2db      	uxtb	r3, r3
    31ae:	2b00      	cmp	r3, #0
    31b0:	d001      	beq.n	31b6 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    31b2:	2300      	movs	r3, #0
    31b4:	e019      	b.n	31ea <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    31b6:	1cbb      	adds	r3, r7, #2
    31b8:	881b      	ldrh	r3, [r3, #0]
    31ba:	2b00      	cmp	r3, #0
    31bc:	d00d      	beq.n	31da <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    31be:	4b14      	ldr	r3, [pc, #80]	; (3210 <sd_mmc_spi_start_write_blocks+0xbc>)
    31c0:	4798      	blx	r3
    31c2:	0003      	movs	r3, r0
    31c4:	001a      	movs	r2, r3
    31c6:	2301      	movs	r3, #1
    31c8:	4053      	eors	r3, r2
    31ca:	b2db      	uxtb	r3, r3
    31cc:	2b00      	cmp	r3, #0
    31ce:	d004      	beq.n	31da <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    31d0:	4b08      	ldr	r3, [pc, #32]	; (31f4 <sd_mmc_spi_start_write_blocks+0xa0>)
    31d2:	2205      	movs	r2, #5
    31d4:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    31d6:	2300      	movs	r3, #0
    31d8:	e007      	b.n	31ea <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    31da:	1cbb      	adds	r3, r7, #2
    31dc:	881b      	ldrh	r3, [r3, #0]
    31de:	1cba      	adds	r2, r7, #2
    31e0:	1e59      	subs	r1, r3, #1
    31e2:	8011      	strh	r1, [r2, #0]
    31e4:	2b00      	cmp	r3, #0
    31e6:	d1c2      	bne.n	316e <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    31e8:	2301      	movs	r3, #1
}
    31ea:	0018      	movs	r0, r3
    31ec:	46bd      	mov	sp, r7
    31ee:	b004      	add	sp, #16
    31f0:	bd80      	pop	{r7, pc}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	20000177 	.word	0x20000177
    31f8:	00002a31 	.word	0x00002a31
    31fc:	20000180 	.word	0x20000180
    3200:	20000134 	.word	0x20000134
    3204:	00004be1 	.word	0x00004be1
    3208:	2000017c 	.word	0x2000017c
    320c:	00002a81 	.word	0x00002a81
    3210:	00002915 	.word	0x00002915

00003214 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    3214:	b580      	push	{r7, lr}
    3216:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    3218:	4b09      	ldr	r3, [pc, #36]	; (3240 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    321a:	4798      	blx	r3
    321c:	0003      	movs	r3, r0
    321e:	001a      	movs	r2, r3
    3220:	2301      	movs	r3, #1
    3222:	4053      	eors	r3, r2
    3224:	b2db      	uxtb	r3, r3
    3226:	2b00      	cmp	r3, #0
    3228:	d004      	beq.n	3234 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    322a:	4b06      	ldr	r3, [pc, #24]	; (3244 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    322c:	2205      	movs	r2, #5
    322e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    3230:	2300      	movs	r3, #0
    3232:	e002      	b.n	323a <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    3234:	4b04      	ldr	r3, [pc, #16]	; (3248 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    3236:	4798      	blx	r3
    3238:	0003      	movs	r3, r0
}
    323a:	0018      	movs	r0, r3
    323c:	46bd      	mov	sp, r7
    323e:	bd80      	pop	{r7, pc}
    3240:	00002915 	.word	0x00002915
    3244:	20000177 	.word	0x20000177
    3248:	00002b15 	.word	0x00002b15

0000324c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    324c:	b580      	push	{r7, lr}
    324e:	b084      	sub	sp, #16
    3250:	af00      	add	r7, sp, #0
    3252:	0002      	movs	r2, r0
    3254:	1dfb      	adds	r3, r7, #7
    3256:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    3258:	1dfb      	adds	r3, r7, #7
    325a:	781b      	ldrb	r3, [r3, #0]
    325c:	2b00      	cmp	r3, #0
    325e:	d108      	bne.n	3272 <mem_test_unit_ready+0x26>
    3260:	1dfb      	adds	r3, r7, #7
    3262:	781a      	ldrb	r2, [r3, #0]
    3264:	4b08      	ldr	r3, [pc, #32]	; (3288 <mem_test_unit_ready+0x3c>)
    3266:	0152      	lsls	r2, r2, #5
    3268:	58d3      	ldr	r3, [r2, r3]
    326a:	4798      	blx	r3
    326c:	0003      	movs	r3, r0
    326e:	001a      	movs	r2, r3
    3270:	e000      	b.n	3274 <mem_test_unit_ready+0x28>
    3272:	2201      	movs	r2, #1
  status =
    3274:	230f      	movs	r3, #15
    3276:	18fb      	adds	r3, r7, r3
    3278:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    327a:	230f      	movs	r3, #15
    327c:	18fb      	adds	r3, r7, r3
    327e:	781b      	ldrb	r3, [r3, #0]
}
    3280:	0018      	movs	r0, r3
    3282:	46bd      	mov	sp, r7
    3284:	b004      	add	sp, #16
    3286:	bd80      	pop	{r7, pc}
    3288:	0000c958 	.word	0x0000c958

0000328c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    328c:	b580      	push	{r7, lr}
    328e:	b084      	sub	sp, #16
    3290:	af00      	add	r7, sp, #0
    3292:	0002      	movs	r2, r0
    3294:	6039      	str	r1, [r7, #0]
    3296:	1dfb      	adds	r3, r7, #7
    3298:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    329a:	1dfb      	adds	r3, r7, #7
    329c:	781b      	ldrb	r3, [r3, #0]
    329e:	2b00      	cmp	r3, #0
    32a0:	d10c      	bne.n	32bc <mem_read_capacity+0x30>
    32a2:	1dfb      	adds	r3, r7, #7
    32a4:	781b      	ldrb	r3, [r3, #0]
    32a6:	4a0b      	ldr	r2, [pc, #44]	; (32d4 <mem_read_capacity+0x48>)
    32a8:	015b      	lsls	r3, r3, #5
    32aa:	18d3      	adds	r3, r2, r3
    32ac:	3304      	adds	r3, #4
    32ae:	681b      	ldr	r3, [r3, #0]
    32b0:	683a      	ldr	r2, [r7, #0]
    32b2:	0010      	movs	r0, r2
    32b4:	4798      	blx	r3
    32b6:	0003      	movs	r3, r0
    32b8:	001a      	movs	r2, r3
    32ba:	e000      	b.n	32be <mem_read_capacity+0x32>
    32bc:	2201      	movs	r2, #1
  status =
    32be:	230f      	movs	r3, #15
    32c0:	18fb      	adds	r3, r7, r3
    32c2:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    32c4:	230f      	movs	r3, #15
    32c6:	18fb      	adds	r3, r7, r3
    32c8:	781b      	ldrb	r3, [r3, #0]
}
    32ca:	0018      	movs	r0, r3
    32cc:	46bd      	mov	sp, r7
    32ce:	b004      	add	sp, #16
    32d0:	bd80      	pop	{r7, pc}
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	0000c958 	.word	0x0000c958

000032d8 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    32d8:	b580      	push	{r7, lr}
    32da:	b084      	sub	sp, #16
    32dc:	af00      	add	r7, sp, #0
    32de:	0002      	movs	r2, r0
    32e0:	1dfb      	adds	r3, r7, #7
    32e2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    32e4:	1dfb      	adds	r3, r7, #7
    32e6:	781b      	ldrb	r3, [r3, #0]
    32e8:	425a      	negs	r2, r3
    32ea:	4153      	adcs	r3, r2
    32ec:	b2da      	uxtb	r2, r3
  sector_size =
    32ee:	230f      	movs	r3, #15
    32f0:	18fb      	adds	r3, r7, r3
    32f2:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    32f4:	230f      	movs	r3, #15
    32f6:	18fb      	adds	r3, r7, r3
    32f8:	781b      	ldrb	r3, [r3, #0]
}
    32fa:	0018      	movs	r0, r3
    32fc:	46bd      	mov	sp, r7
    32fe:	b004      	add	sp, #16
    3300:	bd80      	pop	{r7, pc}
	...

00003304 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    3304:	b580      	push	{r7, lr}
    3306:	b084      	sub	sp, #16
    3308:	af00      	add	r7, sp, #0
    330a:	0002      	movs	r2, r0
    330c:	1dfb      	adds	r3, r7, #7
    330e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    3310:	1dfb      	adds	r3, r7, #7
    3312:	781b      	ldrb	r3, [r3, #0]
    3314:	2b00      	cmp	r3, #0
    3316:	d109      	bne.n	332c <mem_wr_protect+0x28>
    3318:	1dfb      	adds	r3, r7, #7
    331a:	781b      	ldrb	r3, [r3, #0]
    331c:	4a0a      	ldr	r2, [pc, #40]	; (3348 <mem_wr_protect+0x44>)
    331e:	015b      	lsls	r3, r3, #5
    3320:	18d3      	adds	r3, r2, r3
    3322:	330c      	adds	r3, #12
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	4798      	blx	r3
    3328:	1e03      	subs	r3, r0, #0
    332a:	d001      	beq.n	3330 <mem_wr_protect+0x2c>
    332c:	2201      	movs	r2, #1
    332e:	e000      	b.n	3332 <mem_wr_protect+0x2e>
    3330:	2200      	movs	r2, #0
  wr_protect =
    3332:	230f      	movs	r3, #15
    3334:	18fb      	adds	r3, r7, r3
    3336:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    3338:	230f      	movs	r3, #15
    333a:	18fb      	adds	r3, r7, r3
    333c:	781b      	ldrb	r3, [r3, #0]
}
    333e:	0018      	movs	r0, r3
    3340:	46bd      	mov	sp, r7
    3342:	b004      	add	sp, #16
    3344:	bd80      	pop	{r7, pc}
    3346:	46c0      	nop			; (mov r8, r8)
    3348:	0000c958 	.word	0x0000c958

0000334c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    334c:	b580      	push	{r7, lr}
    334e:	b086      	sub	sp, #24
    3350:	af00      	add	r7, sp, #0
    3352:	60b9      	str	r1, [r7, #8]
    3354:	607a      	str	r2, [r7, #4]
    3356:	230f      	movs	r3, #15
    3358:	18fb      	adds	r3, r7, r3
    335a:	1c02      	adds	r2, r0, #0
    335c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    335e:	230f      	movs	r3, #15
    3360:	18fb      	adds	r3, r7, r3
    3362:	781b      	ldrb	r3, [r3, #0]
    3364:	2b00      	cmp	r3, #0
    3366:	d10e      	bne.n	3386 <memory_2_ram+0x3a>
    3368:	230f      	movs	r3, #15
    336a:	18fb      	adds	r3, r7, r3
    336c:	781b      	ldrb	r3, [r3, #0]
    336e:	4a0b      	ldr	r2, [pc, #44]	; (339c <memory_2_ram+0x50>)
    3370:	015b      	lsls	r3, r3, #5
    3372:	18d3      	adds	r3, r2, r3
    3374:	3314      	adds	r3, #20
    3376:	681b      	ldr	r3, [r3, #0]
    3378:	6879      	ldr	r1, [r7, #4]
    337a:	68ba      	ldr	r2, [r7, #8]
    337c:	0010      	movs	r0, r2
    337e:	4798      	blx	r3
    3380:	0003      	movs	r3, r0
    3382:	001a      	movs	r2, r3
    3384:	e000      	b.n	3388 <memory_2_ram+0x3c>
    3386:	2201      	movs	r2, #1
  status =
    3388:	2317      	movs	r3, #23
    338a:	18fb      	adds	r3, r7, r3
    338c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    338e:	2317      	movs	r3, #23
    3390:	18fb      	adds	r3, r7, r3
    3392:	781b      	ldrb	r3, [r3, #0]
}
    3394:	0018      	movs	r0, r3
    3396:	46bd      	mov	sp, r7
    3398:	b006      	add	sp, #24
    339a:	bd80      	pop	{r7, pc}
    339c:	0000c958 	.word	0x0000c958

000033a0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    33a0:	b580      	push	{r7, lr}
    33a2:	b086      	sub	sp, #24
    33a4:	af00      	add	r7, sp, #0
    33a6:	60b9      	str	r1, [r7, #8]
    33a8:	607a      	str	r2, [r7, #4]
    33aa:	230f      	movs	r3, #15
    33ac:	18fb      	adds	r3, r7, r3
    33ae:	1c02      	adds	r2, r0, #0
    33b0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    33b2:	230f      	movs	r3, #15
    33b4:	18fb      	adds	r3, r7, r3
    33b6:	781b      	ldrb	r3, [r3, #0]
    33b8:	2b00      	cmp	r3, #0
    33ba:	d10e      	bne.n	33da <ram_2_memory+0x3a>
    33bc:	230f      	movs	r3, #15
    33be:	18fb      	adds	r3, r7, r3
    33c0:	781b      	ldrb	r3, [r3, #0]
    33c2:	4a0b      	ldr	r2, [pc, #44]	; (33f0 <ram_2_memory+0x50>)
    33c4:	015b      	lsls	r3, r3, #5
    33c6:	18d3      	adds	r3, r2, r3
    33c8:	3318      	adds	r3, #24
    33ca:	681b      	ldr	r3, [r3, #0]
    33cc:	6879      	ldr	r1, [r7, #4]
    33ce:	68ba      	ldr	r2, [r7, #8]
    33d0:	0010      	movs	r0, r2
    33d2:	4798      	blx	r3
    33d4:	0003      	movs	r3, r0
    33d6:	001a      	movs	r2, r3
    33d8:	e000      	b.n	33dc <ram_2_memory+0x3c>
    33da:	2201      	movs	r2, #1
  status =
    33dc:	2317      	movs	r3, #23
    33de:	18fb      	adds	r3, r7, r3
    33e0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    33e2:	2317      	movs	r3, #23
    33e4:	18fb      	adds	r3, r7, r3
    33e6:	781b      	ldrb	r3, [r3, #0]
}
    33e8:	0018      	movs	r0, r3
    33ea:	46bd      	mov	sp, r7
    33ec:	b006      	add	sp, #24
    33ee:	bd80      	pop	{r7, pc}
    33f0:	0000c958 	.word	0x0000c958

000033f4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    33f4:	b580      	push	{r7, lr}
    33f6:	b082      	sub	sp, #8
    33f8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    33fa:	4b10      	ldr	r3, [pc, #64]	; (343c <cpu_irq_enter_critical+0x48>)
    33fc:	681b      	ldr	r3, [r3, #0]
    33fe:	2b00      	cmp	r3, #0
    3400:	d112      	bne.n	3428 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3402:	f3ef 8310 	mrs	r3, PRIMASK
    3406:	607b      	str	r3, [r7, #4]
  return(result);
    3408:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    340a:	2b00      	cmp	r3, #0
    340c:	d109      	bne.n	3422 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    340e:	b672      	cpsid	i
    3410:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3414:	4b0a      	ldr	r3, [pc, #40]	; (3440 <cpu_irq_enter_critical+0x4c>)
    3416:	2200      	movs	r2, #0
    3418:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    341a:	4b0a      	ldr	r3, [pc, #40]	; (3444 <cpu_irq_enter_critical+0x50>)
    341c:	2201      	movs	r2, #1
    341e:	701a      	strb	r2, [r3, #0]
    3420:	e002      	b.n	3428 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3422:	4b08      	ldr	r3, [pc, #32]	; (3444 <cpu_irq_enter_critical+0x50>)
    3424:	2200      	movs	r2, #0
    3426:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3428:	4b04      	ldr	r3, [pc, #16]	; (343c <cpu_irq_enter_critical+0x48>)
    342a:	681b      	ldr	r3, [r3, #0]
    342c:	1c5a      	adds	r2, r3, #1
    342e:	4b03      	ldr	r3, [pc, #12]	; (343c <cpu_irq_enter_critical+0x48>)
    3430:	601a      	str	r2, [r3, #0]
}
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	46bd      	mov	sp, r7
    3436:	b002      	add	sp, #8
    3438:	bd80      	pop	{r7, pc}
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	20000184 	.word	0x20000184
    3440:	20000009 	.word	0x20000009
    3444:	20000188 	.word	0x20000188

00003448 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3448:	b580      	push	{r7, lr}
    344a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    344c:	4b0b      	ldr	r3, [pc, #44]	; (347c <cpu_irq_leave_critical+0x34>)
    344e:	681b      	ldr	r3, [r3, #0]
    3450:	1e5a      	subs	r2, r3, #1
    3452:	4b0a      	ldr	r3, [pc, #40]	; (347c <cpu_irq_leave_critical+0x34>)
    3454:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3456:	4b09      	ldr	r3, [pc, #36]	; (347c <cpu_irq_leave_critical+0x34>)
    3458:	681b      	ldr	r3, [r3, #0]
    345a:	2b00      	cmp	r3, #0
    345c:	d10a      	bne.n	3474 <cpu_irq_leave_critical+0x2c>
    345e:	4b08      	ldr	r3, [pc, #32]	; (3480 <cpu_irq_leave_critical+0x38>)
    3460:	781b      	ldrb	r3, [r3, #0]
    3462:	b2db      	uxtb	r3, r3
    3464:	2b00      	cmp	r3, #0
    3466:	d005      	beq.n	3474 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3468:	4b06      	ldr	r3, [pc, #24]	; (3484 <cpu_irq_leave_critical+0x3c>)
    346a:	2201      	movs	r2, #1
    346c:	701a      	strb	r2, [r3, #0]
    346e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3472:	b662      	cpsie	i
	}
}
    3474:	46c0      	nop			; (mov r8, r8)
    3476:	46bd      	mov	sp, r7
    3478:	bd80      	pop	{r7, pc}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	20000184 	.word	0x20000184
    3480:	20000188 	.word	0x20000188
    3484:	20000009 	.word	0x20000009

00003488 <system_pinmux_get_config_defaults>:
{
    3488:	b580      	push	{r7, lr}
    348a:	b082      	sub	sp, #8
    348c:	af00      	add	r7, sp, #0
    348e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3490:	687b      	ldr	r3, [r7, #4]
    3492:	2280      	movs	r2, #128	; 0x80
    3494:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3496:	687b      	ldr	r3, [r7, #4]
    3498:	2200      	movs	r2, #0
    349a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    349c:	687b      	ldr	r3, [r7, #4]
    349e:	2201      	movs	r2, #1
    34a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	2200      	movs	r2, #0
    34a6:	70da      	strb	r2, [r3, #3]
}
    34a8:	46c0      	nop			; (mov r8, r8)
    34aa:	46bd      	mov	sp, r7
    34ac:	b002      	add	sp, #8
    34ae:	bd80      	pop	{r7, pc}

000034b0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    34b0:	b580      	push	{r7, lr}
    34b2:	b084      	sub	sp, #16
    34b4:	af00      	add	r7, sp, #0
    34b6:	0002      	movs	r2, r0
    34b8:	6039      	str	r1, [r7, #0]
    34ba:	1dfb      	adds	r3, r7, #7
    34bc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    34be:	230c      	movs	r3, #12
    34c0:	18fb      	adds	r3, r7, r3
    34c2:	0018      	movs	r0, r3
    34c4:	4b10      	ldr	r3, [pc, #64]	; (3508 <port_pin_set_config+0x58>)
    34c6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    34c8:	230c      	movs	r3, #12
    34ca:	18fb      	adds	r3, r7, r3
    34cc:	2280      	movs	r2, #128	; 0x80
    34ce:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    34d0:	683b      	ldr	r3, [r7, #0]
    34d2:	781a      	ldrb	r2, [r3, #0]
    34d4:	230c      	movs	r3, #12
    34d6:	18fb      	adds	r3, r7, r3
    34d8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    34da:	683b      	ldr	r3, [r7, #0]
    34dc:	785a      	ldrb	r2, [r3, #1]
    34de:	230c      	movs	r3, #12
    34e0:	18fb      	adds	r3, r7, r3
    34e2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    34e4:	683b      	ldr	r3, [r7, #0]
    34e6:	789a      	ldrb	r2, [r3, #2]
    34e8:	230c      	movs	r3, #12
    34ea:	18fb      	adds	r3, r7, r3
    34ec:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    34ee:	230c      	movs	r3, #12
    34f0:	18fa      	adds	r2, r7, r3
    34f2:	1dfb      	adds	r3, r7, #7
    34f4:	781b      	ldrb	r3, [r3, #0]
    34f6:	0011      	movs	r1, r2
    34f8:	0018      	movs	r0, r3
    34fa:	4b04      	ldr	r3, [pc, #16]	; (350c <port_pin_set_config+0x5c>)
    34fc:	4798      	blx	r3
}
    34fe:	46c0      	nop			; (mov r8, r8)
    3500:	46bd      	mov	sp, r7
    3502:	b004      	add	sp, #16
    3504:	bd80      	pop	{r7, pc}
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	00003489 	.word	0x00003489
    350c:	00006d6d 	.word	0x00006d6d

00003510 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3510:	b580      	push	{r7, lr}
    3512:	b082      	sub	sp, #8
    3514:	af00      	add	r7, sp, #0
    3516:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3518:	687b      	ldr	r3, [r7, #4]
    351a:	2200      	movs	r2, #0
    351c:	701a      	strb	r2, [r3, #0]
}
    351e:	46c0      	nop			; (mov r8, r8)
    3520:	46bd      	mov	sp, r7
    3522:	b002      	add	sp, #8
    3524:	bd80      	pop	{r7, pc}
	...

00003528 <system_apb_clock_set_mask>:
{
    3528:	b580      	push	{r7, lr}
    352a:	b082      	sub	sp, #8
    352c:	af00      	add	r7, sp, #0
    352e:	0002      	movs	r2, r0
    3530:	6039      	str	r1, [r7, #0]
    3532:	1dfb      	adds	r3, r7, #7
    3534:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3536:	1dfb      	adds	r3, r7, #7
    3538:	781b      	ldrb	r3, [r3, #0]
    353a:	2b01      	cmp	r3, #1
    353c:	d00a      	beq.n	3554 <system_apb_clock_set_mask+0x2c>
    353e:	2b02      	cmp	r3, #2
    3540:	d00f      	beq.n	3562 <system_apb_clock_set_mask+0x3a>
    3542:	2b00      	cmp	r3, #0
    3544:	d114      	bne.n	3570 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3546:	4b0e      	ldr	r3, [pc, #56]	; (3580 <system_apb_clock_set_mask+0x58>)
    3548:	4a0d      	ldr	r2, [pc, #52]	; (3580 <system_apb_clock_set_mask+0x58>)
    354a:	6991      	ldr	r1, [r2, #24]
    354c:	683a      	ldr	r2, [r7, #0]
    354e:	430a      	orrs	r2, r1
    3550:	619a      	str	r2, [r3, #24]
			break;
    3552:	e00f      	b.n	3574 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3554:	4b0a      	ldr	r3, [pc, #40]	; (3580 <system_apb_clock_set_mask+0x58>)
    3556:	4a0a      	ldr	r2, [pc, #40]	; (3580 <system_apb_clock_set_mask+0x58>)
    3558:	69d1      	ldr	r1, [r2, #28]
    355a:	683a      	ldr	r2, [r7, #0]
    355c:	430a      	orrs	r2, r1
    355e:	61da      	str	r2, [r3, #28]
			break;
    3560:	e008      	b.n	3574 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3562:	4b07      	ldr	r3, [pc, #28]	; (3580 <system_apb_clock_set_mask+0x58>)
    3564:	4a06      	ldr	r2, [pc, #24]	; (3580 <system_apb_clock_set_mask+0x58>)
    3566:	6a11      	ldr	r1, [r2, #32]
    3568:	683a      	ldr	r2, [r7, #0]
    356a:	430a      	orrs	r2, r1
    356c:	621a      	str	r2, [r3, #32]
			break;
    356e:	e001      	b.n	3574 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3570:	2317      	movs	r3, #23
    3572:	e000      	b.n	3576 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3574:	2300      	movs	r3, #0
}
    3576:	0018      	movs	r0, r3
    3578:	46bd      	mov	sp, r7
    357a:	b002      	add	sp, #8
    357c:	bd80      	pop	{r7, pc}
    357e:	46c0      	nop			; (mov r8, r8)
    3580:	40000400 	.word	0x40000400

00003584 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    3584:	b580      	push	{r7, lr}
    3586:	b084      	sub	sp, #16
    3588:	af00      	add	r7, sp, #0
    358a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    358c:	687b      	ldr	r3, [r7, #4]
    358e:	681b      	ldr	r3, [r3, #0]
    3590:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    3592:	68fb      	ldr	r3, [r7, #12]
    3594:	7a9b      	ldrb	r3, [r3, #10]
    3596:	b2db      	uxtb	r3, r3
    3598:	b25b      	sxtb	r3, r3
    359a:	2b00      	cmp	r3, #0
    359c:	da01      	bge.n	35a2 <rtc_calendar_is_syncing+0x1e>
                return true;
    359e:	2301      	movs	r3, #1
    35a0:	e000      	b.n	35a4 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    35a2:	2300      	movs	r3, #0
}
    35a4:	0018      	movs	r0, r3
    35a6:	46bd      	mov	sp, r7
    35a8:	b004      	add	sp, #16
    35aa:	bd80      	pop	{r7, pc}

000035ac <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    35ac:	b580      	push	{r7, lr}
    35ae:	b084      	sub	sp, #16
    35b0:	af00      	add	r7, sp, #0
    35b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    35b4:	687b      	ldr	r3, [r7, #4]
    35b6:	681b      	ldr	r3, [r3, #0]
    35b8:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	687b      	ldr	r3, [r7, #4]
    35be:	0018      	movs	r0, r3
    35c0:	4b07      	ldr	r3, [pc, #28]	; (35e0 <rtc_calendar_enable+0x34>)
    35c2:	4798      	blx	r3
    35c4:	1e03      	subs	r3, r0, #0
    35c6:	d1f9      	bne.n	35bc <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    35c8:	68fb      	ldr	r3, [r7, #12]
    35ca:	881b      	ldrh	r3, [r3, #0]
    35cc:	b29b      	uxth	r3, r3
    35ce:	2202      	movs	r2, #2
    35d0:	4313      	orrs	r3, r2
    35d2:	b29a      	uxth	r2, r3
    35d4:	68fb      	ldr	r3, [r7, #12]
    35d6:	801a      	strh	r2, [r3, #0]
}
    35d8:	46c0      	nop			; (mov r8, r8)
    35da:	46bd      	mov	sp, r7
    35dc:	b004      	add	sp, #16
    35de:	bd80      	pop	{r7, pc}
    35e0:	00003585 	.word	0x00003585

000035e4 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    35e4:	b580      	push	{r7, lr}
    35e6:	b084      	sub	sp, #16
    35e8:	af00      	add	r7, sp, #0
    35ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    35ec:	687b      	ldr	r3, [r7, #4]
    35ee:	681b      	ldr	r3, [r3, #0]
    35f0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	687b      	ldr	r3, [r7, #4]
    35f6:	0018      	movs	r0, r3
    35f8:	4b0a      	ldr	r3, [pc, #40]	; (3624 <rtc_calendar_disable+0x40>)
    35fa:	4798      	blx	r3
    35fc:	1e03      	subs	r3, r0, #0
    35fe:	d1f9      	bne.n	35f4 <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    3600:	68fb      	ldr	r3, [r7, #12]
    3602:	22c1      	movs	r2, #193	; 0xc1
    3604:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    3606:	68fb      	ldr	r3, [r7, #12]
    3608:	22c1      	movs	r2, #193	; 0xc1
    360a:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    360c:	68fb      	ldr	r3, [r7, #12]
    360e:	881b      	ldrh	r3, [r3, #0]
    3610:	b29b      	uxth	r3, r3
    3612:	2202      	movs	r2, #2
    3614:	4393      	bics	r3, r2
    3616:	b29a      	uxth	r2, r3
    3618:	68fb      	ldr	r3, [r7, #12]
    361a:	801a      	strh	r2, [r3, #0]
}
    361c:	46c0      	nop			; (mov r8, r8)
    361e:	46bd      	mov	sp, r7
    3620:	b004      	add	sp, #16
    3622:	bd80      	pop	{r7, pc}
    3624:	00003585 	.word	0x00003585

00003628 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    3628:	b580      	push	{r7, lr}
    362a:	b084      	sub	sp, #16
    362c:	af00      	add	r7, sp, #0
    362e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3630:	687b      	ldr	r3, [r7, #4]
    3632:	681b      	ldr	r3, [r3, #0]
    3634:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    3636:	687b      	ldr	r3, [r7, #4]
    3638:	0018      	movs	r0, r3
    363a:	4b0a      	ldr	r3, [pc, #40]	; (3664 <rtc_calendar_reset+0x3c>)
    363c:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    363e:	46c0      	nop			; (mov r8, r8)
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	0018      	movs	r0, r3
    3644:	4b08      	ldr	r3, [pc, #32]	; (3668 <rtc_calendar_reset+0x40>)
    3646:	4798      	blx	r3
    3648:	1e03      	subs	r3, r0, #0
    364a:	d1f9      	bne.n	3640 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    364c:	68fb      	ldr	r3, [r7, #12]
    364e:	881b      	ldrh	r3, [r3, #0]
    3650:	b29b      	uxth	r3, r3
    3652:	2201      	movs	r2, #1
    3654:	4313      	orrs	r3, r2
    3656:	b29a      	uxth	r2, r3
    3658:	68fb      	ldr	r3, [r7, #12]
    365a:	801a      	strh	r2, [r3, #0]
}
    365c:	46c0      	nop			; (mov r8, r8)
    365e:	46bd      	mov	sp, r7
    3660:	b004      	add	sp, #16
    3662:	bd80      	pop	{r7, pc}
    3664:	000035e5 	.word	0x000035e5
    3668:	00003585 	.word	0x00003585

0000366c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    366c:	b580      	push	{r7, lr}
    366e:	b084      	sub	sp, #16
    3670:	af00      	add	r7, sp, #0
    3672:	6078      	str	r0, [r7, #4]
    3674:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    3676:	683b      	ldr	r3, [r7, #0]
    3678:	88db      	ldrh	r3, [r3, #6]
    367a:	001a      	movs	r2, r3
    367c:	687b      	ldr	r3, [r7, #4]
    367e:	88db      	ldrh	r3, [r3, #6]
    3680:	1ad3      	subs	r3, r2, r3
    3682:	069b      	lsls	r3, r3, #26
    3684:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    3686:	683b      	ldr	r3, [r7, #0]
    3688:	795b      	ldrb	r3, [r3, #5]
    368a:	059b      	lsls	r3, r3, #22
    368c:	001a      	movs	r2, r3
    368e:	68fb      	ldr	r3, [r7, #12]
    3690:	4313      	orrs	r3, r2
    3692:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    3694:	683b      	ldr	r3, [r7, #0]
    3696:	791b      	ldrb	r3, [r3, #4]
    3698:	045b      	lsls	r3, r3, #17
    369a:	001a      	movs	r2, r3
    369c:	68fb      	ldr	r3, [r7, #12]
    369e:	4313      	orrs	r3, r2
    36a0:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    36a2:	683b      	ldr	r3, [r7, #0]
    36a4:	789b      	ldrb	r3, [r3, #2]
    36a6:	031b      	lsls	r3, r3, #12
    36a8:	001a      	movs	r2, r3
    36aa:	68fb      	ldr	r3, [r7, #12]
    36ac:	4313      	orrs	r3, r2
    36ae:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	791b      	ldrb	r3, [r3, #4]
    36b4:	2201      	movs	r2, #1
    36b6:	4053      	eors	r3, r2
    36b8:	b2db      	uxtb	r3, r3
    36ba:	2b00      	cmp	r3, #0
    36bc:	d008      	beq.n	36d0 <rtc_calendar_time_to_register_value+0x64>
    36be:	683b      	ldr	r3, [r7, #0]
    36c0:	78db      	ldrb	r3, [r3, #3]
    36c2:	2b00      	cmp	r3, #0
    36c4:	d004      	beq.n	36d0 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    36c6:	68fb      	ldr	r3, [r7, #12]
    36c8:	2280      	movs	r2, #128	; 0x80
    36ca:	0252      	lsls	r2, r2, #9
    36cc:	4313      	orrs	r3, r2
    36ce:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    36d0:	683b      	ldr	r3, [r7, #0]
    36d2:	785b      	ldrb	r3, [r3, #1]
    36d4:	019b      	lsls	r3, r3, #6
    36d6:	001a      	movs	r2, r3
    36d8:	68fb      	ldr	r3, [r7, #12]
    36da:	4313      	orrs	r3, r2
    36dc:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    36de:	683b      	ldr	r3, [r7, #0]
    36e0:	781b      	ldrb	r3, [r3, #0]
    36e2:	001a      	movs	r2, r3
    36e4:	68fb      	ldr	r3, [r7, #12]
    36e6:	4313      	orrs	r3, r2
    36e8:	60fb      	str	r3, [r7, #12]

	return register_value;
    36ea:	68fb      	ldr	r3, [r7, #12]
}
    36ec:	0018      	movs	r0, r3
    36ee:	46bd      	mov	sp, r7
    36f0:	b004      	add	sp, #16
    36f2:	bd80      	pop	{r7, pc}

000036f4 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    36f4:	b580      	push	{r7, lr}
    36f6:	b084      	sub	sp, #16
    36f8:	af00      	add	r7, sp, #0
    36fa:	60f8      	str	r0, [r7, #12]
    36fc:	60b9      	str	r1, [r7, #8]
    36fe:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    3700:	68bb      	ldr	r3, [r7, #8]
    3702:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    3704:	b29a      	uxth	r2, r3
    3706:	68fb      	ldr	r3, [r7, #12]
    3708:	88db      	ldrh	r3, [r3, #6]
    370a:	18d3      	adds	r3, r2, r3
    370c:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    370e:	687b      	ldr	r3, [r7, #4]
    3710:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    3712:	68bb      	ldr	r3, [r7, #8]
    3714:	0d9b      	lsrs	r3, r3, #22
    3716:	b2db      	uxtb	r3, r3
    3718:	220f      	movs	r2, #15
    371a:	4013      	ands	r3, r2
    371c:	b2da      	uxtb	r2, r3
    371e:	687b      	ldr	r3, [r7, #4]
    3720:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    3722:	68bb      	ldr	r3, [r7, #8]
    3724:	0c5b      	lsrs	r3, r3, #17
    3726:	b2db      	uxtb	r3, r3
    3728:	221f      	movs	r2, #31
    372a:	4013      	ands	r3, r2
    372c:	b2da      	uxtb	r2, r3
    372e:	687b      	ldr	r3, [r7, #4]
    3730:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    3732:	68fb      	ldr	r3, [r7, #12]
    3734:	791b      	ldrb	r3, [r3, #4]
    3736:	2b00      	cmp	r3, #0
    3738:	d008      	beq.n	374c <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    373a:	68bb      	ldr	r3, [r7, #8]
    373c:	0b1b      	lsrs	r3, r3, #12
    373e:	b2db      	uxtb	r3, r3
    3740:	221f      	movs	r2, #31
    3742:	4013      	ands	r3, r2
    3744:	b2da      	uxtb	r2, r3
    3746:	687b      	ldr	r3, [r7, #4]
    3748:	709a      	strb	r2, [r3, #2]
    374a:	e010      	b.n	376e <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    374c:	68bb      	ldr	r3, [r7, #8]
    374e:	0b1b      	lsrs	r3, r3, #12
    3750:	b2db      	uxtb	r3, r3
    3752:	220f      	movs	r2, #15
    3754:	4013      	ands	r3, r2
    3756:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    3758:	687b      	ldr	r3, [r7, #4]
    375a:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    375c:	68ba      	ldr	r2, [r7, #8]
    375e:	2380      	movs	r3, #128	; 0x80
    3760:	025b      	lsls	r3, r3, #9
    3762:	4013      	ands	r3, r2
    3764:	1e5a      	subs	r2, r3, #1
    3766:	4193      	sbcs	r3, r2
    3768:	b2da      	uxtb	r2, r3
    376a:	687b      	ldr	r3, [r7, #4]
    376c:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    376e:	68bb      	ldr	r3, [r7, #8]
    3770:	099b      	lsrs	r3, r3, #6
    3772:	b2db      	uxtb	r3, r3
    3774:	223f      	movs	r2, #63	; 0x3f
    3776:	4013      	ands	r3, r2
    3778:	b2da      	uxtb	r2, r3
    377a:	687b      	ldr	r3, [r7, #4]
    377c:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    377e:	68bb      	ldr	r3, [r7, #8]
    3780:	b2db      	uxtb	r3, r3
    3782:	223f      	movs	r2, #63	; 0x3f
    3784:	4013      	ands	r3, r2
    3786:	b2da      	uxtb	r2, r3
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    378c:	46c0      	nop			; (mov r8, r8)
    378e:	46bd      	mov	sp, r7
    3790:	b004      	add	sp, #16
    3792:	bd80      	pop	{r7, pc}

00003794 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    3794:	b580      	push	{r7, lr}
    3796:	b084      	sub	sp, #16
    3798:	af00      	add	r7, sp, #0
    379a:	6078      	str	r0, [r7, #4]
    379c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    379e:	687b      	ldr	r3, [r7, #4]
    37a0:	681b      	ldr	r3, [r3, #0]
    37a2:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    37a4:	683b      	ldr	r3, [r7, #0]
    37a6:	881a      	ldrh	r2, [r3, #0]
    37a8:	230e      	movs	r3, #14
    37aa:	18fb      	adds	r3, r7, r3
    37ac:	2108      	movs	r1, #8
    37ae:	430a      	orrs	r2, r1
    37b0:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    37b2:	683b      	ldr	r3, [r7, #0]
    37b4:	791b      	ldrb	r3, [r3, #4]
    37b6:	2201      	movs	r2, #1
    37b8:	4053      	eors	r3, r2
    37ba:	b2db      	uxtb	r3, r3
    37bc:	2b00      	cmp	r3, #0
    37be:	d007      	beq.n	37d0 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    37c0:	230e      	movs	r3, #14
    37c2:	18fb      	adds	r3, r7, r3
    37c4:	220e      	movs	r2, #14
    37c6:	18ba      	adds	r2, r7, r2
    37c8:	8812      	ldrh	r2, [r2, #0]
    37ca:	2140      	movs	r1, #64	; 0x40
    37cc:	430a      	orrs	r2, r1
    37ce:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    37d0:	683b      	ldr	r3, [r7, #0]
    37d2:	789b      	ldrb	r3, [r3, #2]
    37d4:	2b00      	cmp	r3, #0
    37d6:	d007      	beq.n	37e8 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    37d8:	230e      	movs	r3, #14
    37da:	18fb      	adds	r3, r7, r3
    37dc:	220e      	movs	r2, #14
    37de:	18ba      	adds	r2, r7, r2
    37e0:	8812      	ldrh	r2, [r2, #0]
    37e2:	2180      	movs	r1, #128	; 0x80
    37e4:	430a      	orrs	r2, r1
    37e6:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    37e8:	68bb      	ldr	r3, [r7, #8]
    37ea:	220e      	movs	r2, #14
    37ec:	18ba      	adds	r2, r7, r2
    37ee:	8812      	ldrh	r2, [r2, #0]
    37f0:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    37f2:	683b      	ldr	r3, [r7, #0]
    37f4:	78db      	ldrb	r3, [r3, #3]
    37f6:	2b00      	cmp	r3, #0
    37f8:	d008      	beq.n	380c <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    37fa:	68bb      	ldr	r3, [r7, #8]
    37fc:	885b      	ldrh	r3, [r3, #2]
    37fe:	b29b      	uxth	r3, r3
    3800:	2280      	movs	r2, #128	; 0x80
    3802:	01d2      	lsls	r2, r2, #7
    3804:	4313      	orrs	r3, r2
    3806:	b29a      	uxth	r2, r3
    3808:	68bb      	ldr	r3, [r7, #8]
    380a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    380c:	230d      	movs	r3, #13
    380e:	18fb      	adds	r3, r7, r3
    3810:	2200      	movs	r2, #0
    3812:	701a      	strb	r2, [r3, #0]
    3814:	e017      	b.n	3846 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    3816:	230d      	movs	r3, #13
    3818:	18fb      	adds	r3, r7, r3
    381a:	781a      	ldrb	r2, [r3, #0]
    381c:	0013      	movs	r3, r2
    381e:	009b      	lsls	r3, r3, #2
    3820:	189b      	adds	r3, r3, r2
    3822:	005b      	lsls	r3, r3, #1
    3824:	3308      	adds	r3, #8
    3826:	683a      	ldr	r2, [r7, #0]
    3828:	18d1      	adds	r1, r2, r3
    382a:	230d      	movs	r3, #13
    382c:	18fb      	adds	r3, r7, r3
    382e:	781a      	ldrb	r2, [r3, #0]
    3830:	687b      	ldr	r3, [r7, #4]
    3832:	0018      	movs	r0, r3
    3834:	4b08      	ldr	r3, [pc, #32]	; (3858 <_rtc_calendar_set_config+0xc4>)
    3836:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3838:	230d      	movs	r3, #13
    383a:	18fb      	adds	r3, r7, r3
    383c:	781a      	ldrb	r2, [r3, #0]
    383e:	230d      	movs	r3, #13
    3840:	18fb      	adds	r3, r7, r3
    3842:	3201      	adds	r2, #1
    3844:	701a      	strb	r2, [r3, #0]
    3846:	230d      	movs	r3, #13
    3848:	18fb      	adds	r3, r7, r3
    384a:	781b      	ldrb	r3, [r3, #0]
    384c:	2b00      	cmp	r3, #0
    384e:	d0e2      	beq.n	3816 <_rtc_calendar_set_config+0x82>
	}
}
    3850:	46c0      	nop			; (mov r8, r8)
    3852:	46bd      	mov	sp, r7
    3854:	b004      	add	sp, #16
    3856:	bd80      	pop	{r7, pc}
    3858:	0000397d 	.word	0x0000397d

0000385c <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    385c:	b580      	push	{r7, lr}
    385e:	b086      	sub	sp, #24
    3860:	af00      	add	r7, sp, #0
    3862:	60f8      	str	r0, [r7, #12]
    3864:	60b9      	str	r1, [r7, #8]
    3866:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3868:	68fb      	ldr	r3, [r7, #12]
    386a:	68ba      	ldr	r2, [r7, #8]
    386c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    386e:	2120      	movs	r1, #32
    3870:	2000      	movs	r0, #0
    3872:	4b18      	ldr	r3, [pc, #96]	; (38d4 <rtc_calendar_init+0x78>)
    3874:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3876:	2314      	movs	r3, #20
    3878:	18fb      	adds	r3, r7, r3
    387a:	0018      	movs	r0, r3
    387c:	4b16      	ldr	r3, [pc, #88]	; (38d8 <rtc_calendar_init+0x7c>)
    387e:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    3880:	2314      	movs	r3, #20
    3882:	18fb      	adds	r3, r7, r3
    3884:	2202      	movs	r2, #2
    3886:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    3888:	2314      	movs	r3, #20
    388a:	18fb      	adds	r3, r7, r3
    388c:	0019      	movs	r1, r3
    388e:	2004      	movs	r0, #4
    3890:	4b12      	ldr	r3, [pc, #72]	; (38dc <rtc_calendar_init+0x80>)
    3892:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    3894:	2004      	movs	r0, #4
    3896:	4b12      	ldr	r3, [pc, #72]	; (38e0 <rtc_calendar_init+0x84>)
    3898:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    389a:	68fb      	ldr	r3, [r7, #12]
    389c:	0018      	movs	r0, r3
    389e:	4b11      	ldr	r3, [pc, #68]	; (38e4 <rtc_calendar_init+0x88>)
    38a0:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    38a2:	687b      	ldr	r3, [r7, #4]
    38a4:	791a      	ldrb	r2, [r3, #4]
    38a6:	68fb      	ldr	r3, [r7, #12]
    38a8:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    38aa:	687b      	ldr	r3, [r7, #4]
    38ac:	78da      	ldrb	r2, [r3, #3]
    38ae:	68fb      	ldr	r3, [r7, #12]
    38b0:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	88da      	ldrh	r2, [r3, #6]
    38b6:	68fb      	ldr	r3, [r7, #12]
    38b8:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    38ba:	4b0b      	ldr	r3, [pc, #44]	; (38e8 <rtc_calendar_init+0x8c>)
    38bc:	68fa      	ldr	r2, [r7, #12]
    38be:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    38c0:	687a      	ldr	r2, [r7, #4]
    38c2:	68fb      	ldr	r3, [r7, #12]
    38c4:	0011      	movs	r1, r2
    38c6:	0018      	movs	r0, r3
    38c8:	4b08      	ldr	r3, [pc, #32]	; (38ec <rtc_calendar_init+0x90>)
    38ca:	4798      	blx	r3
}
    38cc:	46c0      	nop			; (mov r8, r8)
    38ce:	46bd      	mov	sp, r7
    38d0:	b006      	add	sp, #24
    38d2:	bd80      	pop	{r7, pc}
    38d4:	00003529 	.word	0x00003529
    38d8:	00003511 	.word	0x00003511
    38dc:	00006a81 	.word	0x00006a81
    38e0:	00006ac5 	.word	0x00006ac5
    38e4:	00003629 	.word	0x00003629
    38e8:	20000a18 	.word	0x20000a18
    38ec:	00003795 	.word	0x00003795

000038f0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    38f0:	b580      	push	{r7, lr}
    38f2:	b084      	sub	sp, #16
    38f4:	af00      	add	r7, sp, #0
    38f6:	6078      	str	r0, [r7, #4]
    38f8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    38fa:	687b      	ldr	r3, [r7, #4]
    38fc:	681b      	ldr	r3, [r3, #0]
    38fe:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    3900:	687b      	ldr	r3, [r7, #4]
    3902:	795b      	ldrb	r3, [r3, #5]
    3904:	2201      	movs	r2, #1
    3906:	4053      	eors	r3, r2
    3908:	b2db      	uxtb	r3, r3
    390a:	2b00      	cmp	r3, #0
    390c:	d00a      	beq.n	3924 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    390e:	68fb      	ldr	r3, [r7, #12]
    3910:	4a16      	ldr	r2, [pc, #88]	; (396c <rtc_calendar_get_time+0x7c>)
    3912:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    3914:	46c0      	nop			; (mov r8, r8)
    3916:	687b      	ldr	r3, [r7, #4]
    3918:	0018      	movs	r0, r3
    391a:	4b15      	ldr	r3, [pc, #84]	; (3970 <rtc_calendar_get_time+0x80>)
    391c:	4798      	blx	r3
    391e:	1e03      	subs	r3, r0, #0
    3920:	d1f9      	bne.n	3916 <rtc_calendar_get_time+0x26>
    3922:	e016      	b.n	3952 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    3924:	68fb      	ldr	r3, [r7, #12]
    3926:	885b      	ldrh	r3, [r3, #2]
    3928:	b29b      	uxth	r3, r3
    392a:	001a      	movs	r2, r3
    392c:	2380      	movs	r3, #128	; 0x80
    392e:	01db      	lsls	r3, r3, #7
    3930:	4013      	ands	r3, r2
    3932:	d10e      	bne.n	3952 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    3934:	68fb      	ldr	r3, [r7, #12]
    3936:	885b      	ldrh	r3, [r3, #2]
    3938:	b29b      	uxth	r3, r3
    393a:	4a0e      	ldr	r2, [pc, #56]	; (3974 <rtc_calendar_get_time+0x84>)
    393c:	4313      	orrs	r3, r2
    393e:	b29a      	uxth	r2, r3
    3940:	68fb      	ldr	r3, [r7, #12]
    3942:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    3944:	46c0      	nop			; (mov r8, r8)
    3946:	687b      	ldr	r3, [r7, #4]
    3948:	0018      	movs	r0, r3
    394a:	4b09      	ldr	r3, [pc, #36]	; (3970 <rtc_calendar_get_time+0x80>)
    394c:	4798      	blx	r3
    394e:	1e03      	subs	r3, r0, #0
    3950:	d1f9      	bne.n	3946 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    3952:	68fb      	ldr	r3, [r7, #12]
    3954:	691b      	ldr	r3, [r3, #16]
    3956:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    3958:	683a      	ldr	r2, [r7, #0]
    395a:	68b9      	ldr	r1, [r7, #8]
    395c:	687b      	ldr	r3, [r7, #4]
    395e:	0018      	movs	r0, r3
    3960:	4b05      	ldr	r3, [pc, #20]	; (3978 <rtc_calendar_get_time+0x88>)
    3962:	4798      	blx	r3
}
    3964:	46c0      	nop			; (mov r8, r8)
    3966:	46bd      	mov	sp, r7
    3968:	b004      	add	sp, #16
    396a:	bd80      	pop	{r7, pc}
    396c:	ffff8000 	.word	0xffff8000
    3970:	00003585 	.word	0x00003585
    3974:	ffffc000 	.word	0xffffc000
    3978:	000036f5 	.word	0x000036f5

0000397c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    397c:	b580      	push	{r7, lr}
    397e:	b086      	sub	sp, #24
    3980:	af00      	add	r7, sp, #0
    3982:	60f8      	str	r0, [r7, #12]
    3984:	60b9      	str	r1, [r7, #8]
    3986:	1dfb      	adds	r3, r7, #7
    3988:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    398a:	68fb      	ldr	r3, [r7, #12]
    398c:	681b      	ldr	r3, [r3, #0]
    398e:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    3990:	1dfb      	adds	r3, r7, #7
    3992:	781b      	ldrb	r3, [r3, #0]
    3994:	2b01      	cmp	r3, #1
    3996:	d901      	bls.n	399c <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    3998:	2317      	movs	r3, #23
    399a:	e021      	b.n	39e0 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    399c:	68ba      	ldr	r2, [r7, #8]
    399e:	68fb      	ldr	r3, [r7, #12]
    39a0:	0011      	movs	r1, r2
    39a2:	0018      	movs	r0, r3
    39a4:	4b10      	ldr	r3, [pc, #64]	; (39e8 <rtc_calendar_set_alarm+0x6c>)
    39a6:	4798      	blx	r3
    39a8:	0003      	movs	r3, r0
    39aa:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    39ac:	46c0      	nop			; (mov r8, r8)
    39ae:	68fb      	ldr	r3, [r7, #12]
    39b0:	0018      	movs	r0, r3
    39b2:	4b0e      	ldr	r3, [pc, #56]	; (39ec <rtc_calendar_set_alarm+0x70>)
    39b4:	4798      	blx	r3
    39b6:	1e03      	subs	r3, r0, #0
    39b8:	d1f9      	bne.n	39ae <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    39ba:	1dfb      	adds	r3, r7, #7
    39bc:	781a      	ldrb	r2, [r3, #0]
    39be:	697b      	ldr	r3, [r7, #20]
    39c0:	3203      	adds	r2, #3
    39c2:	00d2      	lsls	r2, r2, #3
    39c4:	6939      	ldr	r1, [r7, #16]
    39c6:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    39c8:	1dfb      	adds	r3, r7, #7
    39ca:	781b      	ldrb	r3, [r3, #0]
    39cc:	68ba      	ldr	r2, [r7, #8]
    39ce:	7a11      	ldrb	r1, [r2, #8]
    39d0:	697a      	ldr	r2, [r7, #20]
    39d2:	3303      	adds	r3, #3
    39d4:	00db      	lsls	r3, r3, #3
    39d6:	18d3      	adds	r3, r2, r3
    39d8:	3304      	adds	r3, #4
    39da:	1c0a      	adds	r2, r1, #0
    39dc:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    39de:	2300      	movs	r3, #0
}
    39e0:	0018      	movs	r0, r3
    39e2:	46bd      	mov	sp, r7
    39e4:	b006      	add	sp, #24
    39e6:	bd80      	pop	{r7, pc}
    39e8:	0000366d 	.word	0x0000366d
    39ec:	00003585 	.word	0x00003585

000039f0 <system_gclk_chan_get_config_defaults>:
{
    39f0:	b580      	push	{r7, lr}
    39f2:	b082      	sub	sp, #8
    39f4:	af00      	add	r7, sp, #0
    39f6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    39f8:	687b      	ldr	r3, [r7, #4]
    39fa:	2200      	movs	r2, #0
    39fc:	701a      	strb	r2, [r3, #0]
}
    39fe:	46c0      	nop			; (mov r8, r8)
    3a00:	46bd      	mov	sp, r7
    3a02:	b002      	add	sp, #8
    3a04:	bd80      	pop	{r7, pc}

00003a06 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    3a06:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a08:	b08d      	sub	sp, #52	; 0x34
    3a0a:	af00      	add	r7, sp, #0
    3a0c:	60b8      	str	r0, [r7, #8]
    3a0e:	60f9      	str	r1, [r7, #12]
    3a10:	603a      	str	r2, [r7, #0]
    3a12:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3a14:	2300      	movs	r3, #0
    3a16:	2400      	movs	r4, #0
    3a18:	623b      	str	r3, [r7, #32]
    3a1a:	627c      	str	r4, [r7, #36]	; 0x24
    3a1c:	2300      	movs	r3, #0
    3a1e:	2400      	movs	r4, #0
    3a20:	61bb      	str	r3, [r7, #24]
    3a22:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    3a24:	233f      	movs	r3, #63	; 0x3f
    3a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    3a28:	e053      	b.n	3ad2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    3a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a2c:	3b20      	subs	r3, #32
    3a2e:	2b00      	cmp	r3, #0
    3a30:	db04      	blt.n	3a3c <long_division+0x36>
    3a32:	2201      	movs	r2, #1
    3a34:	409a      	lsls	r2, r3
    3a36:	0013      	movs	r3, r2
    3a38:	617b      	str	r3, [r7, #20]
    3a3a:	e00b      	b.n	3a54 <long_division+0x4e>
    3a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a3e:	2220      	movs	r2, #32
    3a40:	1ad3      	subs	r3, r2, r3
    3a42:	2201      	movs	r2, #1
    3a44:	40da      	lsrs	r2, r3
    3a46:	0013      	movs	r3, r2
    3a48:	2100      	movs	r1, #0
    3a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3a4c:	4091      	lsls	r1, r2
    3a4e:	000a      	movs	r2, r1
    3a50:	4313      	orrs	r3, r2
    3a52:	617b      	str	r3, [r7, #20]
    3a54:	2201      	movs	r2, #1
    3a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a58:	409a      	lsls	r2, r3
    3a5a:	0013      	movs	r3, r2
    3a5c:	613b      	str	r3, [r7, #16]

		r = r << 1;
    3a5e:	69bb      	ldr	r3, [r7, #24]
    3a60:	69fc      	ldr	r4, [r7, #28]
    3a62:	18db      	adds	r3, r3, r3
    3a64:	4164      	adcs	r4, r4
    3a66:	61bb      	str	r3, [r7, #24]
    3a68:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    3a6a:	68bb      	ldr	r3, [r7, #8]
    3a6c:	693a      	ldr	r2, [r7, #16]
    3a6e:	401a      	ands	r2, r3
    3a70:	0015      	movs	r5, r2
    3a72:	68fb      	ldr	r3, [r7, #12]
    3a74:	697a      	ldr	r2, [r7, #20]
    3a76:	401a      	ands	r2, r3
    3a78:	0016      	movs	r6, r2
    3a7a:	002b      	movs	r3, r5
    3a7c:	4333      	orrs	r3, r6
    3a7e:	d007      	beq.n	3a90 <long_division+0x8a>
			r |= 0x01;
    3a80:	69bb      	ldr	r3, [r7, #24]
    3a82:	2201      	movs	r2, #1
    3a84:	4313      	orrs	r3, r2
    3a86:	61bb      	str	r3, [r7, #24]
    3a88:	69fb      	ldr	r3, [r7, #28]
    3a8a:	2200      	movs	r2, #0
    3a8c:	4313      	orrs	r3, r2
    3a8e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3a90:	687a      	ldr	r2, [r7, #4]
    3a92:	69fb      	ldr	r3, [r7, #28]
    3a94:	429a      	cmp	r2, r3
    3a96:	d819      	bhi.n	3acc <long_division+0xc6>
    3a98:	687a      	ldr	r2, [r7, #4]
    3a9a:	69fb      	ldr	r3, [r7, #28]
    3a9c:	429a      	cmp	r2, r3
    3a9e:	d103      	bne.n	3aa8 <long_division+0xa2>
    3aa0:	683a      	ldr	r2, [r7, #0]
    3aa2:	69bb      	ldr	r3, [r7, #24]
    3aa4:	429a      	cmp	r2, r3
    3aa6:	d811      	bhi.n	3acc <long_division+0xc6>
			r = r - d;
    3aa8:	69b9      	ldr	r1, [r7, #24]
    3aaa:	69fa      	ldr	r2, [r7, #28]
    3aac:	683b      	ldr	r3, [r7, #0]
    3aae:	687c      	ldr	r4, [r7, #4]
    3ab0:	1ac9      	subs	r1, r1, r3
    3ab2:	41a2      	sbcs	r2, r4
    3ab4:	000b      	movs	r3, r1
    3ab6:	0014      	movs	r4, r2
    3ab8:	61bb      	str	r3, [r7, #24]
    3aba:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3abc:	6a3a      	ldr	r2, [r7, #32]
    3abe:	693b      	ldr	r3, [r7, #16]
    3ac0:	4313      	orrs	r3, r2
    3ac2:	623b      	str	r3, [r7, #32]
    3ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3ac6:	697b      	ldr	r3, [r7, #20]
    3ac8:	4313      	orrs	r3, r2
    3aca:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ace:	3b01      	subs	r3, #1
    3ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    3ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	daa8      	bge.n	3a2a <long_division+0x24>
		}
	}

	return q;
    3ad8:	6a3b      	ldr	r3, [r7, #32]
    3ada:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3adc:	0018      	movs	r0, r3
    3ade:	0021      	movs	r1, r4
    3ae0:	46bd      	mov	sp, r7
    3ae2:	b00d      	add	sp, #52	; 0x34
    3ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003ae6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3ae6:	b580      	push	{r7, lr}
    3ae8:	b086      	sub	sp, #24
    3aea:	af00      	add	r7, sp, #0
    3aec:	60f8      	str	r0, [r7, #12]
    3aee:	60b9      	str	r1, [r7, #8]
    3af0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3af2:	2316      	movs	r3, #22
    3af4:	18fb      	adds	r3, r7, r3
    3af6:	2200      	movs	r2, #0
    3af8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3afa:	68bb      	ldr	r3, [r7, #8]
    3afc:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3afe:	68bb      	ldr	r3, [r7, #8]
    3b00:	085a      	lsrs	r2, r3, #1
    3b02:	68fb      	ldr	r3, [r7, #12]
    3b04:	429a      	cmp	r2, r3
    3b06:	d201      	bcs.n	3b0c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b08:	2340      	movs	r3, #64	; 0x40
    3b0a:	e026      	b.n	3b5a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3b0c:	68bb      	ldr	r3, [r7, #8]
    3b0e:	085b      	lsrs	r3, r3, #1
    3b10:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3b12:	e00a      	b.n	3b2a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3b14:	693a      	ldr	r2, [r7, #16]
    3b16:	68fb      	ldr	r3, [r7, #12]
    3b18:	1ad3      	subs	r3, r2, r3
    3b1a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3b1c:	2316      	movs	r3, #22
    3b1e:	18fb      	adds	r3, r7, r3
    3b20:	881a      	ldrh	r2, [r3, #0]
    3b22:	2316      	movs	r3, #22
    3b24:	18fb      	adds	r3, r7, r3
    3b26:	3201      	adds	r2, #1
    3b28:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    3b2a:	693a      	ldr	r2, [r7, #16]
    3b2c:	68fb      	ldr	r3, [r7, #12]
    3b2e:	429a      	cmp	r2, r3
    3b30:	d2f0      	bcs.n	3b14 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    3b32:	2316      	movs	r3, #22
    3b34:	18fb      	adds	r3, r7, r3
    3b36:	2216      	movs	r2, #22
    3b38:	18ba      	adds	r2, r7, r2
    3b3a:	8812      	ldrh	r2, [r2, #0]
    3b3c:	3a01      	subs	r2, #1
    3b3e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3b40:	2316      	movs	r3, #22
    3b42:	18fb      	adds	r3, r7, r3
    3b44:	881b      	ldrh	r3, [r3, #0]
    3b46:	2bff      	cmp	r3, #255	; 0xff
    3b48:	d901      	bls.n	3b4e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b4a:	2340      	movs	r3, #64	; 0x40
    3b4c:	e005      	b.n	3b5a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3b4e:	687b      	ldr	r3, [r7, #4]
    3b50:	2216      	movs	r2, #22
    3b52:	18ba      	adds	r2, r7, r2
    3b54:	8812      	ldrh	r2, [r2, #0]
    3b56:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3b58:	2300      	movs	r3, #0
	}
}
    3b5a:	0018      	movs	r0, r3
    3b5c:	46bd      	mov	sp, r7
    3b5e:	b006      	add	sp, #24
    3b60:	bd80      	pop	{r7, pc}
	...

00003b64 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b66:	b0a1      	sub	sp, #132	; 0x84
    3b68:	af00      	add	r7, sp, #0
    3b6a:	64f8      	str	r0, [r7, #76]	; 0x4c
    3b6c:	64b9      	str	r1, [r7, #72]	; 0x48
    3b6e:	647a      	str	r2, [r7, #68]	; 0x44
    3b70:	2243      	movs	r2, #67	; 0x43
    3b72:	18ba      	adds	r2, r7, r2
    3b74:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    3b76:	2300      	movs	r3, #0
    3b78:	2400      	movs	r4, #0
    3b7a:	673b      	str	r3, [r7, #112]	; 0x70
    3b7c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3b7e:	2300      	movs	r3, #0
    3b80:	2400      	movs	r4, #0
    3b82:	66bb      	str	r3, [r7, #104]	; 0x68
    3b84:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    3b86:	2300      	movs	r3, #0
    3b88:	2400      	movs	r4, #0
    3b8a:	67bb      	str	r3, [r7, #120]	; 0x78
    3b8c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3b8e:	2300      	movs	r3, #0
    3b90:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3b92:	2358      	movs	r3, #88	; 0x58
    3b94:	2240      	movs	r2, #64	; 0x40
    3b96:	4694      	mov	ip, r2
    3b98:	44bc      	add	ip, r7
    3b9a:	4463      	add	r3, ip
    3b9c:	781a      	ldrb	r2, [r3, #0]
    3b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ba0:	435a      	muls	r2, r3
    3ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3ba4:	429a      	cmp	r2, r3
    3ba6:	d901      	bls.n	3bac <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3ba8:	2340      	movs	r3, #64	; 0x40
    3baa:	e0b3      	b.n	3d14 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3bac:	2343      	movs	r3, #67	; 0x43
    3bae:	18fb      	adds	r3, r7, r3
    3bb0:	781b      	ldrb	r3, [r3, #0]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d13d      	bne.n	3c32 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3bb6:	2358      	movs	r3, #88	; 0x58
    3bb8:	2240      	movs	r2, #64	; 0x40
    3bba:	4694      	mov	ip, r2
    3bbc:	44bc      	add	ip, r7
    3bbe:	4463      	add	r3, ip
    3bc0:	781b      	ldrb	r3, [r3, #0]
    3bc2:	b2db      	uxtb	r3, r3
    3bc4:	613b      	str	r3, [r7, #16]
    3bc6:	2300      	movs	r3, #0
    3bc8:	617b      	str	r3, [r7, #20]
    3bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3bcc:	60bb      	str	r3, [r7, #8]
    3bce:	2300      	movs	r3, #0
    3bd0:	60fb      	str	r3, [r7, #12]
    3bd2:	4c52      	ldr	r4, [pc, #328]	; (3d1c <_sercom_get_async_baud_val+0x1b8>)
    3bd4:	68ba      	ldr	r2, [r7, #8]
    3bd6:	68fb      	ldr	r3, [r7, #12]
    3bd8:	6938      	ldr	r0, [r7, #16]
    3bda:	6979      	ldr	r1, [r7, #20]
    3bdc:	47a0      	blx	r4
    3bde:	0003      	movs	r3, r0
    3be0:	000c      	movs	r4, r1
    3be2:	001b      	movs	r3, r3
    3be4:	65fb      	str	r3, [r7, #92]	; 0x5c
    3be6:	2300      	movs	r3, #0
    3be8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    3bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3bec:	603b      	str	r3, [r7, #0]
    3bee:	2300      	movs	r3, #0
    3bf0:	607b      	str	r3, [r7, #4]
    3bf2:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3bf4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3bf6:	683a      	ldr	r2, [r7, #0]
    3bf8:	687b      	ldr	r3, [r7, #4]
    3bfa:	4c49      	ldr	r4, [pc, #292]	; (3d20 <_sercom_get_async_baud_val+0x1bc>)
    3bfc:	47a0      	blx	r4
    3bfe:	0003      	movs	r3, r0
    3c00:	000c      	movs	r4, r1
    3c02:	673b      	str	r3, [r7, #112]	; 0x70
    3c04:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3c06:	2100      	movs	r1, #0
    3c08:	2201      	movs	r2, #1
    3c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3c0c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3c0e:	1ac9      	subs	r1, r1, r3
    3c10:	41a2      	sbcs	r2, r4
    3c12:	000b      	movs	r3, r1
    3c14:	0014      	movs	r4, r2
    3c16:	66bb      	str	r3, [r7, #104]	; 0x68
    3c18:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    3c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3c1c:	0c1b      	lsrs	r3, r3, #16
    3c1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3c20:	0416      	lsls	r6, r2, #16
    3c22:	431e      	orrs	r6, r3
    3c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3c26:	041d      	lsls	r5, r3, #16
    3c28:	0033      	movs	r3, r6
    3c2a:	67bb      	str	r3, [r7, #120]	; 0x78
    3c2c:	2300      	movs	r3, #0
    3c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    3c30:	e06a      	b.n	3d08 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3c32:	2343      	movs	r3, #67	; 0x43
    3c34:	18fb      	adds	r3, r7, r3
    3c36:	781b      	ldrb	r3, [r3, #0]
    3c38:	2b01      	cmp	r3, #1
    3c3a:	d165      	bne.n	3d08 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    3c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c3e:	633b      	str	r3, [r7, #48]	; 0x30
    3c40:	2300      	movs	r3, #0
    3c42:	637b      	str	r3, [r7, #52]	; 0x34
    3c44:	2358      	movs	r3, #88	; 0x58
    3c46:	2240      	movs	r2, #64	; 0x40
    3c48:	4694      	mov	ip, r2
    3c4a:	44bc      	add	ip, r7
    3c4c:	4463      	add	r3, ip
    3c4e:	781b      	ldrb	r3, [r3, #0]
    3c50:	b2db      	uxtb	r3, r3
    3c52:	62bb      	str	r3, [r7, #40]	; 0x28
    3c54:	2300      	movs	r3, #0
    3c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    3c58:	4c30      	ldr	r4, [pc, #192]	; (3d1c <_sercom_get_async_baud_val+0x1b8>)
    3c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3c60:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c62:	47a0      	blx	r4
    3c64:	0003      	movs	r3, r0
    3c66:	000c      	movs	r4, r1
    3c68:	65bb      	str	r3, [r7, #88]	; 0x58
    3c6a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    3c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c6e:	623b      	str	r3, [r7, #32]
    3c70:	2300      	movs	r3, #0
    3c72:	627b      	str	r3, [r7, #36]	; 0x24
    3c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3c76:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3c78:	001a      	movs	r2, r3
    3c7a:	0023      	movs	r3, r4
    3c7c:	6a38      	ldr	r0, [r7, #32]
    3c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3c80:	4c27      	ldr	r4, [pc, #156]	; (3d20 <_sercom_get_async_baud_val+0x1bc>)
    3c82:	47a0      	blx	r4
    3c84:	0003      	movs	r3, r0
    3c86:	000c      	movs	r4, r1
    3c88:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3c8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3c8c:	2380      	movs	r3, #128	; 0x80
    3c8e:	019b      	lsls	r3, r3, #6
    3c90:	429a      	cmp	r2, r3
    3c92:	d901      	bls.n	3c98 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3c94:	2340      	movs	r3, #64	; 0x40
    3c96:	e03d      	b.n	3d14 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c9a:	61bb      	str	r3, [r7, #24]
    3c9c:	2300      	movs	r3, #0
    3c9e:	61fb      	str	r3, [r7, #28]
    3ca0:	69b9      	ldr	r1, [r7, #24]
    3ca2:	69fa      	ldr	r2, [r7, #28]
    3ca4:	000b      	movs	r3, r1
    3ca6:	0f5b      	lsrs	r3, r3, #29
    3ca8:	0010      	movs	r0, r2
    3caa:	00c0      	lsls	r0, r0, #3
    3cac:	63f8      	str	r0, [r7, #60]	; 0x3c
    3cae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3cb0:	4318      	orrs	r0, r3
    3cb2:	63f8      	str	r0, [r7, #60]	; 0x3c
    3cb4:	000b      	movs	r3, r1
    3cb6:	00db      	lsls	r3, r3, #3
    3cb8:	63bb      	str	r3, [r7, #56]	; 0x38
    3cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3cbc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3cbe:	001a      	movs	r2, r3
    3cc0:	0023      	movs	r3, r4
    3cc2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3cc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3cc6:	4c16      	ldr	r4, [pc, #88]	; (3d20 <_sercom_get_async_baud_val+0x1bc>)
    3cc8:	47a0      	blx	r4
    3cca:	0003      	movs	r3, r0
    3ccc:	000c      	movs	r4, r1
    3cce:	65bb      	str	r3, [r7, #88]	; 0x58
    3cd0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3cd4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3cd6:	b2d9      	uxtb	r1, r3
    3cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3cda:	b2db      	uxtb	r3, r3
    3cdc:	00db      	lsls	r3, r3, #3
    3cde:	b2da      	uxtb	r2, r3
    3ce0:	2317      	movs	r3, #23
    3ce2:	2040      	movs	r0, #64	; 0x40
    3ce4:	4684      	mov	ip, r0
    3ce6:	44bc      	add	ip, r7
    3ce8:	4463      	add	r3, ip
    3cea:	1a8a      	subs	r2, r1, r2
    3cec:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3cee:	2317      	movs	r3, #23
    3cf0:	2240      	movs	r2, #64	; 0x40
    3cf2:	4694      	mov	ip, r2
    3cf4:	44bc      	add	ip, r7
    3cf6:	4463      	add	r3, ip
    3cf8:	781b      	ldrb	r3, [r3, #0]
    3cfa:	035b      	lsls	r3, r3, #13
    3cfc:	001a      	movs	r2, r3
    3cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3d00:	4313      	orrs	r3, r2
    3d02:	67bb      	str	r3, [r7, #120]	; 0x78
    3d04:	2300      	movs	r3, #0
    3d06:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3d0a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3d0c:	b29a      	uxth	r2, r3
    3d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3d10:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3d12:	2300      	movs	r3, #0
}
    3d14:	0018      	movs	r0, r3
    3d16:	46bd      	mov	sp, r7
    3d18:	b021      	add	sp, #132	; 0x84
    3d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d1c:	0000b829 	.word	0x0000b829
    3d20:	00003a07 	.word	0x00003a07

00003d24 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3d24:	b580      	push	{r7, lr}
    3d26:	b084      	sub	sp, #16
    3d28:	af00      	add	r7, sp, #0
    3d2a:	0002      	movs	r2, r0
    3d2c:	1dfb      	adds	r3, r7, #7
    3d2e:	701a      	strb	r2, [r3, #0]
    3d30:	1dbb      	adds	r3, r7, #6
    3d32:	1c0a      	adds	r2, r1, #0
    3d34:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3d36:	4b1a      	ldr	r3, [pc, #104]	; (3da0 <sercom_set_gclk_generator+0x7c>)
    3d38:	781b      	ldrb	r3, [r3, #0]
    3d3a:	2201      	movs	r2, #1
    3d3c:	4053      	eors	r3, r2
    3d3e:	b2db      	uxtb	r3, r3
    3d40:	2b00      	cmp	r3, #0
    3d42:	d103      	bne.n	3d4c <sercom_set_gclk_generator+0x28>
    3d44:	1dbb      	adds	r3, r7, #6
    3d46:	781b      	ldrb	r3, [r3, #0]
    3d48:	2b00      	cmp	r3, #0
    3d4a:	d01b      	beq.n	3d84 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3d4c:	230c      	movs	r3, #12
    3d4e:	18fb      	adds	r3, r7, r3
    3d50:	0018      	movs	r0, r3
    3d52:	4b14      	ldr	r3, [pc, #80]	; (3da4 <sercom_set_gclk_generator+0x80>)
    3d54:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3d56:	230c      	movs	r3, #12
    3d58:	18fb      	adds	r3, r7, r3
    3d5a:	1dfa      	adds	r2, r7, #7
    3d5c:	7812      	ldrb	r2, [r2, #0]
    3d5e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3d60:	230c      	movs	r3, #12
    3d62:	18fb      	adds	r3, r7, r3
    3d64:	0019      	movs	r1, r3
    3d66:	2013      	movs	r0, #19
    3d68:	4b0f      	ldr	r3, [pc, #60]	; (3da8 <sercom_set_gclk_generator+0x84>)
    3d6a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3d6c:	2013      	movs	r0, #19
    3d6e:	4b0f      	ldr	r3, [pc, #60]	; (3dac <sercom_set_gclk_generator+0x88>)
    3d70:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3d72:	4b0b      	ldr	r3, [pc, #44]	; (3da0 <sercom_set_gclk_generator+0x7c>)
    3d74:	1dfa      	adds	r2, r7, #7
    3d76:	7812      	ldrb	r2, [r2, #0]
    3d78:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3d7a:	4b09      	ldr	r3, [pc, #36]	; (3da0 <sercom_set_gclk_generator+0x7c>)
    3d7c:	2201      	movs	r2, #1
    3d7e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3d80:	2300      	movs	r3, #0
    3d82:	e008      	b.n	3d96 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3d84:	4b06      	ldr	r3, [pc, #24]	; (3da0 <sercom_set_gclk_generator+0x7c>)
    3d86:	785b      	ldrb	r3, [r3, #1]
    3d88:	1dfa      	adds	r2, r7, #7
    3d8a:	7812      	ldrb	r2, [r2, #0]
    3d8c:	429a      	cmp	r2, r3
    3d8e:	d101      	bne.n	3d94 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3d90:	2300      	movs	r3, #0
    3d92:	e000      	b.n	3d96 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3d94:	231d      	movs	r3, #29
}
    3d96:	0018      	movs	r0, r3
    3d98:	46bd      	mov	sp, r7
    3d9a:	b004      	add	sp, #16
    3d9c:	bd80      	pop	{r7, pc}
    3d9e:	46c0      	nop			; (mov r8, r8)
    3da0:	2000018c 	.word	0x2000018c
    3da4:	000039f1 	.word	0x000039f1
    3da8:	00006a81 	.word	0x00006a81
    3dac:	00006ac5 	.word	0x00006ac5

00003db0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3db0:	b580      	push	{r7, lr}
    3db2:	b082      	sub	sp, #8
    3db4:	af00      	add	r7, sp, #0
    3db6:	6078      	str	r0, [r7, #4]
    3db8:	000a      	movs	r2, r1
    3dba:	1cfb      	adds	r3, r7, #3
    3dbc:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3dbe:	687b      	ldr	r3, [r7, #4]
    3dc0:	4a4d      	ldr	r2, [pc, #308]	; (3ef8 <_sercom_get_default_pad+0x148>)
    3dc2:	4293      	cmp	r3, r2
    3dc4:	d03f      	beq.n	3e46 <_sercom_get_default_pad+0x96>
    3dc6:	4a4c      	ldr	r2, [pc, #304]	; (3ef8 <_sercom_get_default_pad+0x148>)
    3dc8:	4293      	cmp	r3, r2
    3dca:	d806      	bhi.n	3dda <_sercom_get_default_pad+0x2a>
    3dcc:	4a4b      	ldr	r2, [pc, #300]	; (3efc <_sercom_get_default_pad+0x14c>)
    3dce:	4293      	cmp	r3, r2
    3dd0:	d00f      	beq.n	3df2 <_sercom_get_default_pad+0x42>
    3dd2:	4a4b      	ldr	r2, [pc, #300]	; (3f00 <_sercom_get_default_pad+0x150>)
    3dd4:	4293      	cmp	r3, r2
    3dd6:	d021      	beq.n	3e1c <_sercom_get_default_pad+0x6c>
    3dd8:	e089      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3dda:	4a4a      	ldr	r2, [pc, #296]	; (3f04 <_sercom_get_default_pad+0x154>)
    3ddc:	4293      	cmp	r3, r2
    3dde:	d100      	bne.n	3de2 <_sercom_get_default_pad+0x32>
    3de0:	e05b      	b.n	3e9a <_sercom_get_default_pad+0xea>
    3de2:	4a49      	ldr	r2, [pc, #292]	; (3f08 <_sercom_get_default_pad+0x158>)
    3de4:	4293      	cmp	r3, r2
    3de6:	d100      	bne.n	3dea <_sercom_get_default_pad+0x3a>
    3de8:	e06c      	b.n	3ec4 <_sercom_get_default_pad+0x114>
    3dea:	4a48      	ldr	r2, [pc, #288]	; (3f0c <_sercom_get_default_pad+0x15c>)
    3dec:	4293      	cmp	r3, r2
    3dee:	d03f      	beq.n	3e70 <_sercom_get_default_pad+0xc0>
    3df0:	e07d      	b.n	3eee <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3df2:	1cfb      	adds	r3, r7, #3
    3df4:	781b      	ldrb	r3, [r3, #0]
    3df6:	2b01      	cmp	r3, #1
    3df8:	d00a      	beq.n	3e10 <_sercom_get_default_pad+0x60>
    3dfa:	dc02      	bgt.n	3e02 <_sercom_get_default_pad+0x52>
    3dfc:	2b00      	cmp	r3, #0
    3dfe:	d005      	beq.n	3e0c <_sercom_get_default_pad+0x5c>
    3e00:	e075      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3e02:	2b02      	cmp	r3, #2
    3e04:	d006      	beq.n	3e14 <_sercom_get_default_pad+0x64>
    3e06:	2b03      	cmp	r3, #3
    3e08:	d006      	beq.n	3e18 <_sercom_get_default_pad+0x68>
    3e0a:	e070      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3e0c:	4b40      	ldr	r3, [pc, #256]	; (3f10 <_sercom_get_default_pad+0x160>)
    3e0e:	e06f      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e10:	4b40      	ldr	r3, [pc, #256]	; (3f14 <_sercom_get_default_pad+0x164>)
    3e12:	e06d      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e14:	4b40      	ldr	r3, [pc, #256]	; (3f18 <_sercom_get_default_pad+0x168>)
    3e16:	e06b      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e18:	4b40      	ldr	r3, [pc, #256]	; (3f1c <_sercom_get_default_pad+0x16c>)
    3e1a:	e069      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e1c:	1cfb      	adds	r3, r7, #3
    3e1e:	781b      	ldrb	r3, [r3, #0]
    3e20:	2b01      	cmp	r3, #1
    3e22:	d00a      	beq.n	3e3a <_sercom_get_default_pad+0x8a>
    3e24:	dc02      	bgt.n	3e2c <_sercom_get_default_pad+0x7c>
    3e26:	2b00      	cmp	r3, #0
    3e28:	d005      	beq.n	3e36 <_sercom_get_default_pad+0x86>
    3e2a:	e060      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3e2c:	2b02      	cmp	r3, #2
    3e2e:	d006      	beq.n	3e3e <_sercom_get_default_pad+0x8e>
    3e30:	2b03      	cmp	r3, #3
    3e32:	d006      	beq.n	3e42 <_sercom_get_default_pad+0x92>
    3e34:	e05b      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3e36:	2303      	movs	r3, #3
    3e38:	e05a      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e3a:	4b39      	ldr	r3, [pc, #228]	; (3f20 <_sercom_get_default_pad+0x170>)
    3e3c:	e058      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e3e:	4b39      	ldr	r3, [pc, #228]	; (3f24 <_sercom_get_default_pad+0x174>)
    3e40:	e056      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e42:	4b39      	ldr	r3, [pc, #228]	; (3f28 <_sercom_get_default_pad+0x178>)
    3e44:	e054      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e46:	1cfb      	adds	r3, r7, #3
    3e48:	781b      	ldrb	r3, [r3, #0]
    3e4a:	2b01      	cmp	r3, #1
    3e4c:	d00a      	beq.n	3e64 <_sercom_get_default_pad+0xb4>
    3e4e:	dc02      	bgt.n	3e56 <_sercom_get_default_pad+0xa6>
    3e50:	2b00      	cmp	r3, #0
    3e52:	d005      	beq.n	3e60 <_sercom_get_default_pad+0xb0>
    3e54:	e04b      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3e56:	2b02      	cmp	r3, #2
    3e58:	d006      	beq.n	3e68 <_sercom_get_default_pad+0xb8>
    3e5a:	2b03      	cmp	r3, #3
    3e5c:	d006      	beq.n	3e6c <_sercom_get_default_pad+0xbc>
    3e5e:	e046      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3e60:	4b32      	ldr	r3, [pc, #200]	; (3f2c <_sercom_get_default_pad+0x17c>)
    3e62:	e045      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e64:	4b32      	ldr	r3, [pc, #200]	; (3f30 <_sercom_get_default_pad+0x180>)
    3e66:	e043      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e68:	4b32      	ldr	r3, [pc, #200]	; (3f34 <_sercom_get_default_pad+0x184>)
    3e6a:	e041      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e6c:	4b32      	ldr	r3, [pc, #200]	; (3f38 <_sercom_get_default_pad+0x188>)
    3e6e:	e03f      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e70:	1cfb      	adds	r3, r7, #3
    3e72:	781b      	ldrb	r3, [r3, #0]
    3e74:	2b01      	cmp	r3, #1
    3e76:	d00a      	beq.n	3e8e <_sercom_get_default_pad+0xde>
    3e78:	dc02      	bgt.n	3e80 <_sercom_get_default_pad+0xd0>
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d005      	beq.n	3e8a <_sercom_get_default_pad+0xda>
    3e7e:	e036      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3e80:	2b02      	cmp	r3, #2
    3e82:	d006      	beq.n	3e92 <_sercom_get_default_pad+0xe2>
    3e84:	2b03      	cmp	r3, #3
    3e86:	d006      	beq.n	3e96 <_sercom_get_default_pad+0xe6>
    3e88:	e031      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3e8a:	4b2c      	ldr	r3, [pc, #176]	; (3f3c <_sercom_get_default_pad+0x18c>)
    3e8c:	e030      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e8e:	4b2c      	ldr	r3, [pc, #176]	; (3f40 <_sercom_get_default_pad+0x190>)
    3e90:	e02e      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e92:	4b2c      	ldr	r3, [pc, #176]	; (3f44 <_sercom_get_default_pad+0x194>)
    3e94:	e02c      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e96:	4b2c      	ldr	r3, [pc, #176]	; (3f48 <_sercom_get_default_pad+0x198>)
    3e98:	e02a      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3e9a:	1cfb      	adds	r3, r7, #3
    3e9c:	781b      	ldrb	r3, [r3, #0]
    3e9e:	2b01      	cmp	r3, #1
    3ea0:	d00a      	beq.n	3eb8 <_sercom_get_default_pad+0x108>
    3ea2:	dc02      	bgt.n	3eaa <_sercom_get_default_pad+0xfa>
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d005      	beq.n	3eb4 <_sercom_get_default_pad+0x104>
    3ea8:	e021      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3eaa:	2b02      	cmp	r3, #2
    3eac:	d006      	beq.n	3ebc <_sercom_get_default_pad+0x10c>
    3eae:	2b03      	cmp	r3, #3
    3eb0:	d006      	beq.n	3ec0 <_sercom_get_default_pad+0x110>
    3eb2:	e01c      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3eb4:	4b25      	ldr	r3, [pc, #148]	; (3f4c <_sercom_get_default_pad+0x19c>)
    3eb6:	e01b      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3eb8:	4b25      	ldr	r3, [pc, #148]	; (3f50 <_sercom_get_default_pad+0x1a0>)
    3eba:	e019      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3ebc:	4b25      	ldr	r3, [pc, #148]	; (3f54 <_sercom_get_default_pad+0x1a4>)
    3ebe:	e017      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3ec0:	4b25      	ldr	r3, [pc, #148]	; (3f58 <_sercom_get_default_pad+0x1a8>)
    3ec2:	e015      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3ec4:	1cfb      	adds	r3, r7, #3
    3ec6:	781b      	ldrb	r3, [r3, #0]
    3ec8:	2b01      	cmp	r3, #1
    3eca:	d00a      	beq.n	3ee2 <_sercom_get_default_pad+0x132>
    3ecc:	dc02      	bgt.n	3ed4 <_sercom_get_default_pad+0x124>
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d005      	beq.n	3ede <_sercom_get_default_pad+0x12e>
    3ed2:	e00c      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3ed4:	2b02      	cmp	r3, #2
    3ed6:	d006      	beq.n	3ee6 <_sercom_get_default_pad+0x136>
    3ed8:	2b03      	cmp	r3, #3
    3eda:	d006      	beq.n	3eea <_sercom_get_default_pad+0x13a>
    3edc:	e007      	b.n	3eee <_sercom_get_default_pad+0x13e>
    3ede:	4b1f      	ldr	r3, [pc, #124]	; (3f5c <_sercom_get_default_pad+0x1ac>)
    3ee0:	e006      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3ee2:	4b1f      	ldr	r3, [pc, #124]	; (3f60 <_sercom_get_default_pad+0x1b0>)
    3ee4:	e004      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3ee6:	4b1f      	ldr	r3, [pc, #124]	; (3f64 <_sercom_get_default_pad+0x1b4>)
    3ee8:	e002      	b.n	3ef0 <_sercom_get_default_pad+0x140>
    3eea:	4b1f      	ldr	r3, [pc, #124]	; (3f68 <_sercom_get_default_pad+0x1b8>)
    3eec:	e000      	b.n	3ef0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3eee:	2300      	movs	r3, #0
}
    3ef0:	0018      	movs	r0, r3
    3ef2:	46bd      	mov	sp, r7
    3ef4:	b002      	add	sp, #8
    3ef6:	bd80      	pop	{r7, pc}
    3ef8:	42001000 	.word	0x42001000
    3efc:	42000800 	.word	0x42000800
    3f00:	42000c00 	.word	0x42000c00
    3f04:	42001800 	.word	0x42001800
    3f08:	42001c00 	.word	0x42001c00
    3f0c:	42001400 	.word	0x42001400
    3f10:	00040003 	.word	0x00040003
    3f14:	00050003 	.word	0x00050003
    3f18:	00060003 	.word	0x00060003
    3f1c:	00070003 	.word	0x00070003
    3f20:	00010003 	.word	0x00010003
    3f24:	001e0003 	.word	0x001e0003
    3f28:	001f0003 	.word	0x001f0003
    3f2c:	00080003 	.word	0x00080003
    3f30:	00090003 	.word	0x00090003
    3f34:	000a0003 	.word	0x000a0003
    3f38:	000b0003 	.word	0x000b0003
    3f3c:	00100003 	.word	0x00100003
    3f40:	00110003 	.word	0x00110003
    3f44:	00120003 	.word	0x00120003
    3f48:	00130003 	.word	0x00130003
    3f4c:	000c0003 	.word	0x000c0003
    3f50:	000d0003 	.word	0x000d0003
    3f54:	000e0003 	.word	0x000e0003
    3f58:	000f0003 	.word	0x000f0003
    3f5c:	00160003 	.word	0x00160003
    3f60:	00170003 	.word	0x00170003
    3f64:	00180003 	.word	0x00180003
    3f68:	00190003 	.word	0x00190003

00003f6c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3f6c:	b590      	push	{r4, r7, lr}
    3f6e:	b08b      	sub	sp, #44	; 0x2c
    3f70:	af00      	add	r7, sp, #0
    3f72:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3f74:	230c      	movs	r3, #12
    3f76:	18fb      	adds	r3, r7, r3
    3f78:	4a0f      	ldr	r2, [pc, #60]	; (3fb8 <_sercom_get_sercom_inst_index+0x4c>)
    3f7a:	ca13      	ldmia	r2!, {r0, r1, r4}
    3f7c:	c313      	stmia	r3!, {r0, r1, r4}
    3f7e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3f80:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3f82:	2300      	movs	r3, #0
    3f84:	627b      	str	r3, [r7, #36]	; 0x24
    3f86:	e00e      	b.n	3fa6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3f88:	230c      	movs	r3, #12
    3f8a:	18fb      	adds	r3, r7, r3
    3f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3f8e:	0092      	lsls	r2, r2, #2
    3f90:	58d3      	ldr	r3, [r2, r3]
    3f92:	001a      	movs	r2, r3
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	429a      	cmp	r2, r3
    3f98:	d102      	bne.n	3fa0 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f9c:	b2db      	uxtb	r3, r3
    3f9e:	e006      	b.n	3fae <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3fa2:	3301      	adds	r3, #1
    3fa4:	627b      	str	r3, [r7, #36]	; 0x24
    3fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3fa8:	2b05      	cmp	r3, #5
    3faa:	d9ed      	bls.n	3f88 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3fac:	2300      	movs	r3, #0
}
    3fae:	0018      	movs	r0, r3
    3fb0:	46bd      	mov	sp, r7
    3fb2:	b00b      	add	sp, #44	; 0x2c
    3fb4:	bd90      	pop	{r4, r7, pc}
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	0000c978 	.word	0x0000c978

00003fbc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3fbc:	b580      	push	{r7, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	0002      	movs	r2, r0
    3fc4:	1dfb      	adds	r3, r7, #7
    3fc6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3fc8:	46c0      	nop			; (mov r8, r8)
    3fca:	46bd      	mov	sp, r7
    3fcc:	b002      	add	sp, #8
    3fce:	bd80      	pop	{r7, pc}

00003fd0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3fd0:	b580      	push	{r7, lr}
    3fd2:	b084      	sub	sp, #16
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	0002      	movs	r2, r0
    3fd8:	6039      	str	r1, [r7, #0]
    3fda:	1dfb      	adds	r3, r7, #7
    3fdc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3fde:	4b13      	ldr	r3, [pc, #76]	; (402c <_sercom_set_handler+0x5c>)
    3fe0:	781b      	ldrb	r3, [r3, #0]
    3fe2:	2201      	movs	r2, #1
    3fe4:	4053      	eors	r3, r2
    3fe6:	b2db      	uxtb	r3, r3
    3fe8:	2b00      	cmp	r3, #0
    3fea:	d015      	beq.n	4018 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3fec:	2300      	movs	r3, #0
    3fee:	60fb      	str	r3, [r7, #12]
    3ff0:	e00c      	b.n	400c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3ff2:	4b0f      	ldr	r3, [pc, #60]	; (4030 <_sercom_set_handler+0x60>)
    3ff4:	68fa      	ldr	r2, [r7, #12]
    3ff6:	0092      	lsls	r2, r2, #2
    3ff8:	490e      	ldr	r1, [pc, #56]	; (4034 <_sercom_set_handler+0x64>)
    3ffa:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3ffc:	4b0e      	ldr	r3, [pc, #56]	; (4038 <_sercom_set_handler+0x68>)
    3ffe:	68fa      	ldr	r2, [r7, #12]
    4000:	0092      	lsls	r2, r2, #2
    4002:	2100      	movs	r1, #0
    4004:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4006:	68fb      	ldr	r3, [r7, #12]
    4008:	3301      	adds	r3, #1
    400a:	60fb      	str	r3, [r7, #12]
    400c:	68fb      	ldr	r3, [r7, #12]
    400e:	2b05      	cmp	r3, #5
    4010:	d9ef      	bls.n	3ff2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    4012:	4b06      	ldr	r3, [pc, #24]	; (402c <_sercom_set_handler+0x5c>)
    4014:	2201      	movs	r2, #1
    4016:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4018:	1dfb      	adds	r3, r7, #7
    401a:	781a      	ldrb	r2, [r3, #0]
    401c:	4b04      	ldr	r3, [pc, #16]	; (4030 <_sercom_set_handler+0x60>)
    401e:	0092      	lsls	r2, r2, #2
    4020:	6839      	ldr	r1, [r7, #0]
    4022:	50d1      	str	r1, [r2, r3]
}
    4024:	46c0      	nop			; (mov r8, r8)
    4026:	46bd      	mov	sp, r7
    4028:	b004      	add	sp, #16
    402a:	bd80      	pop	{r7, pc}
    402c:	2000018e 	.word	0x2000018e
    4030:	20000190 	.word	0x20000190
    4034:	00003fbd 	.word	0x00003fbd
    4038:	20000a1c 	.word	0x20000a1c

0000403c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    403c:	b590      	push	{r4, r7, lr}
    403e:	b085      	sub	sp, #20
    4040:	af00      	add	r7, sp, #0
    4042:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4044:	2308      	movs	r3, #8
    4046:	18fb      	adds	r3, r7, r3
    4048:	4a0b      	ldr	r2, [pc, #44]	; (4078 <_sercom_get_interrupt_vector+0x3c>)
    404a:	6811      	ldr	r1, [r2, #0]
    404c:	6019      	str	r1, [r3, #0]
    404e:	8892      	ldrh	r2, [r2, #4]
    4050:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4052:	230f      	movs	r3, #15
    4054:	18fc      	adds	r4, r7, r3
    4056:	687b      	ldr	r3, [r7, #4]
    4058:	0018      	movs	r0, r3
    405a:	4b08      	ldr	r3, [pc, #32]	; (407c <_sercom_get_interrupt_vector+0x40>)
    405c:	4798      	blx	r3
    405e:	0003      	movs	r3, r0
    4060:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4062:	230f      	movs	r3, #15
    4064:	18fb      	adds	r3, r7, r3
    4066:	781b      	ldrb	r3, [r3, #0]
    4068:	2208      	movs	r2, #8
    406a:	18ba      	adds	r2, r7, r2
    406c:	5cd3      	ldrb	r3, [r2, r3]
    406e:	b25b      	sxtb	r3, r3
}
    4070:	0018      	movs	r0, r3
    4072:	46bd      	mov	sp, r7
    4074:	b005      	add	sp, #20
    4076:	bd90      	pop	{r4, r7, pc}
    4078:	0000c990 	.word	0x0000c990
    407c:	00003f6d 	.word	0x00003f6d

00004080 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4080:	b580      	push	{r7, lr}
    4082:	af00      	add	r7, sp, #0
    4084:	4b03      	ldr	r3, [pc, #12]	; (4094 <SERCOM0_Handler+0x14>)
    4086:	681b      	ldr	r3, [r3, #0]
    4088:	2000      	movs	r0, #0
    408a:	4798      	blx	r3
    408c:	46c0      	nop			; (mov r8, r8)
    408e:	46bd      	mov	sp, r7
    4090:	bd80      	pop	{r7, pc}
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	20000190 	.word	0x20000190

00004098 <SERCOM1_Handler>:
    4098:	b580      	push	{r7, lr}
    409a:	af00      	add	r7, sp, #0
    409c:	4b03      	ldr	r3, [pc, #12]	; (40ac <SERCOM1_Handler+0x14>)
    409e:	685b      	ldr	r3, [r3, #4]
    40a0:	2001      	movs	r0, #1
    40a2:	4798      	blx	r3
    40a4:	46c0      	nop			; (mov r8, r8)
    40a6:	46bd      	mov	sp, r7
    40a8:	bd80      	pop	{r7, pc}
    40aa:	46c0      	nop			; (mov r8, r8)
    40ac:	20000190 	.word	0x20000190

000040b0 <SERCOM2_Handler>:
    40b0:	b580      	push	{r7, lr}
    40b2:	af00      	add	r7, sp, #0
    40b4:	4b03      	ldr	r3, [pc, #12]	; (40c4 <SERCOM2_Handler+0x14>)
    40b6:	689b      	ldr	r3, [r3, #8]
    40b8:	2002      	movs	r0, #2
    40ba:	4798      	blx	r3
    40bc:	46c0      	nop			; (mov r8, r8)
    40be:	46bd      	mov	sp, r7
    40c0:	bd80      	pop	{r7, pc}
    40c2:	46c0      	nop			; (mov r8, r8)
    40c4:	20000190 	.word	0x20000190

000040c8 <SERCOM3_Handler>:
    40c8:	b580      	push	{r7, lr}
    40ca:	af00      	add	r7, sp, #0
    40cc:	4b03      	ldr	r3, [pc, #12]	; (40dc <SERCOM3_Handler+0x14>)
    40ce:	68db      	ldr	r3, [r3, #12]
    40d0:	2003      	movs	r0, #3
    40d2:	4798      	blx	r3
    40d4:	46c0      	nop			; (mov r8, r8)
    40d6:	46bd      	mov	sp, r7
    40d8:	bd80      	pop	{r7, pc}
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	20000190 	.word	0x20000190

000040e0 <SERCOM4_Handler>:
    40e0:	b580      	push	{r7, lr}
    40e2:	af00      	add	r7, sp, #0
    40e4:	4b03      	ldr	r3, [pc, #12]	; (40f4 <SERCOM4_Handler+0x14>)
    40e6:	691b      	ldr	r3, [r3, #16]
    40e8:	2004      	movs	r0, #4
    40ea:	4798      	blx	r3
    40ec:	46c0      	nop			; (mov r8, r8)
    40ee:	46bd      	mov	sp, r7
    40f0:	bd80      	pop	{r7, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	20000190 	.word	0x20000190

000040f8 <SERCOM5_Handler>:
    40f8:	b580      	push	{r7, lr}
    40fa:	af00      	add	r7, sp, #0
    40fc:	4b03      	ldr	r3, [pc, #12]	; (410c <SERCOM5_Handler+0x14>)
    40fe:	695b      	ldr	r3, [r3, #20]
    4100:	2005      	movs	r0, #5
    4102:	4798      	blx	r3
    4104:	46c0      	nop			; (mov r8, r8)
    4106:	46bd      	mov	sp, r7
    4108:	bd80      	pop	{r7, pc}
    410a:	46c0      	nop			; (mov r8, r8)
    410c:	20000190 	.word	0x20000190

00004110 <system_pinmux_get_config_defaults>:
{
    4110:	b580      	push	{r7, lr}
    4112:	b082      	sub	sp, #8
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	2280      	movs	r2, #128	; 0x80
    411c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    411e:	687b      	ldr	r3, [r7, #4]
    4120:	2200      	movs	r2, #0
    4122:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	2201      	movs	r2, #1
    4128:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	2200      	movs	r2, #0
    412e:	70da      	strb	r2, [r3, #3]
}
    4130:	46c0      	nop			; (mov r8, r8)
    4132:	46bd      	mov	sp, r7
    4134:	b002      	add	sp, #8
    4136:	bd80      	pop	{r7, pc}

00004138 <system_pinmux_get_group_from_gpio_pin>:
{
    4138:	b580      	push	{r7, lr}
    413a:	b084      	sub	sp, #16
    413c:	af00      	add	r7, sp, #0
    413e:	0002      	movs	r2, r0
    4140:	1dfb      	adds	r3, r7, #7
    4142:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4144:	230f      	movs	r3, #15
    4146:	18fb      	adds	r3, r7, r3
    4148:	1dfa      	adds	r2, r7, #7
    414a:	7812      	ldrb	r2, [r2, #0]
    414c:	09d2      	lsrs	r2, r2, #7
    414e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4150:	230e      	movs	r3, #14
    4152:	18fb      	adds	r3, r7, r3
    4154:	1dfa      	adds	r2, r7, #7
    4156:	7812      	ldrb	r2, [r2, #0]
    4158:	0952      	lsrs	r2, r2, #5
    415a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    415c:	4b0d      	ldr	r3, [pc, #52]	; (4194 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    415e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4160:	230f      	movs	r3, #15
    4162:	18fb      	adds	r3, r7, r3
    4164:	781b      	ldrb	r3, [r3, #0]
    4166:	2b00      	cmp	r3, #0
    4168:	d10f      	bne.n	418a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    416a:	230f      	movs	r3, #15
    416c:	18fb      	adds	r3, r7, r3
    416e:	781b      	ldrb	r3, [r3, #0]
    4170:	009b      	lsls	r3, r3, #2
    4172:	2210      	movs	r2, #16
    4174:	4694      	mov	ip, r2
    4176:	44bc      	add	ip, r7
    4178:	4463      	add	r3, ip
    417a:	3b08      	subs	r3, #8
    417c:	681a      	ldr	r2, [r3, #0]
    417e:	230e      	movs	r3, #14
    4180:	18fb      	adds	r3, r7, r3
    4182:	781b      	ldrb	r3, [r3, #0]
    4184:	01db      	lsls	r3, r3, #7
    4186:	18d3      	adds	r3, r2, r3
    4188:	e000      	b.n	418c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    418a:	2300      	movs	r3, #0
}
    418c:	0018      	movs	r0, r3
    418e:	46bd      	mov	sp, r7
    4190:	b004      	add	sp, #16
    4192:	bd80      	pop	{r7, pc}
    4194:	41004400 	.word	0x41004400

00004198 <port_get_group_from_gpio_pin>:
{
    4198:	b580      	push	{r7, lr}
    419a:	b082      	sub	sp, #8
    419c:	af00      	add	r7, sp, #0
    419e:	0002      	movs	r2, r0
    41a0:	1dfb      	adds	r3, r7, #7
    41a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    41a4:	1dfb      	adds	r3, r7, #7
    41a6:	781b      	ldrb	r3, [r3, #0]
    41a8:	0018      	movs	r0, r3
    41aa:	4b03      	ldr	r3, [pc, #12]	; (41b8 <port_get_group_from_gpio_pin+0x20>)
    41ac:	4798      	blx	r3
    41ae:	0003      	movs	r3, r0
}
    41b0:	0018      	movs	r0, r3
    41b2:	46bd      	mov	sp, r7
    41b4:	b002      	add	sp, #8
    41b6:	bd80      	pop	{r7, pc}
    41b8:	00004139 	.word	0x00004139

000041bc <port_pin_set_output_level>:
{
    41bc:	b580      	push	{r7, lr}
    41be:	b084      	sub	sp, #16
    41c0:	af00      	add	r7, sp, #0
    41c2:	0002      	movs	r2, r0
    41c4:	1dfb      	adds	r3, r7, #7
    41c6:	701a      	strb	r2, [r3, #0]
    41c8:	1dbb      	adds	r3, r7, #6
    41ca:	1c0a      	adds	r2, r1, #0
    41cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    41ce:	1dfb      	adds	r3, r7, #7
    41d0:	781b      	ldrb	r3, [r3, #0]
    41d2:	0018      	movs	r0, r3
    41d4:	4b0d      	ldr	r3, [pc, #52]	; (420c <port_pin_set_output_level+0x50>)
    41d6:	4798      	blx	r3
    41d8:	0003      	movs	r3, r0
    41da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    41dc:	1dfb      	adds	r3, r7, #7
    41de:	781b      	ldrb	r3, [r3, #0]
    41e0:	221f      	movs	r2, #31
    41e2:	4013      	ands	r3, r2
    41e4:	2201      	movs	r2, #1
    41e6:	409a      	lsls	r2, r3
    41e8:	0013      	movs	r3, r2
    41ea:	60bb      	str	r3, [r7, #8]
	if (level) {
    41ec:	1dbb      	adds	r3, r7, #6
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	2b00      	cmp	r3, #0
    41f2:	d003      	beq.n	41fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    41f4:	68fb      	ldr	r3, [r7, #12]
    41f6:	68ba      	ldr	r2, [r7, #8]
    41f8:	619a      	str	r2, [r3, #24]
}
    41fa:	e002      	b.n	4202 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    41fc:	68fb      	ldr	r3, [r7, #12]
    41fe:	68ba      	ldr	r2, [r7, #8]
    4200:	615a      	str	r2, [r3, #20]
}
    4202:	46c0      	nop			; (mov r8, r8)
    4204:	46bd      	mov	sp, r7
    4206:	b004      	add	sp, #16
    4208:	bd80      	pop	{r7, pc}
    420a:	46c0      	nop			; (mov r8, r8)
    420c:	00004199 	.word	0x00004199

00004210 <system_gclk_chan_get_config_defaults>:
{
    4210:	b580      	push	{r7, lr}
    4212:	b082      	sub	sp, #8
    4214:	af00      	add	r7, sp, #0
    4216:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4218:	687b      	ldr	r3, [r7, #4]
    421a:	2200      	movs	r2, #0
    421c:	701a      	strb	r2, [r3, #0]
}
    421e:	46c0      	nop			; (mov r8, r8)
    4220:	46bd      	mov	sp, r7
    4222:	b002      	add	sp, #8
    4224:	bd80      	pop	{r7, pc}
	...

00004228 <system_apb_clock_set_mask>:
{
    4228:	b580      	push	{r7, lr}
    422a:	b082      	sub	sp, #8
    422c:	af00      	add	r7, sp, #0
    422e:	0002      	movs	r2, r0
    4230:	6039      	str	r1, [r7, #0]
    4232:	1dfb      	adds	r3, r7, #7
    4234:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4236:	1dfb      	adds	r3, r7, #7
    4238:	781b      	ldrb	r3, [r3, #0]
    423a:	2b01      	cmp	r3, #1
    423c:	d00a      	beq.n	4254 <system_apb_clock_set_mask+0x2c>
    423e:	2b02      	cmp	r3, #2
    4240:	d00f      	beq.n	4262 <system_apb_clock_set_mask+0x3a>
    4242:	2b00      	cmp	r3, #0
    4244:	d114      	bne.n	4270 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4246:	4b0e      	ldr	r3, [pc, #56]	; (4280 <system_apb_clock_set_mask+0x58>)
    4248:	4a0d      	ldr	r2, [pc, #52]	; (4280 <system_apb_clock_set_mask+0x58>)
    424a:	6991      	ldr	r1, [r2, #24]
    424c:	683a      	ldr	r2, [r7, #0]
    424e:	430a      	orrs	r2, r1
    4250:	619a      	str	r2, [r3, #24]
			break;
    4252:	e00f      	b.n	4274 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4254:	4b0a      	ldr	r3, [pc, #40]	; (4280 <system_apb_clock_set_mask+0x58>)
    4256:	4a0a      	ldr	r2, [pc, #40]	; (4280 <system_apb_clock_set_mask+0x58>)
    4258:	69d1      	ldr	r1, [r2, #28]
    425a:	683a      	ldr	r2, [r7, #0]
    425c:	430a      	orrs	r2, r1
    425e:	61da      	str	r2, [r3, #28]
			break;
    4260:	e008      	b.n	4274 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4262:	4b07      	ldr	r3, [pc, #28]	; (4280 <system_apb_clock_set_mask+0x58>)
    4264:	4a06      	ldr	r2, [pc, #24]	; (4280 <system_apb_clock_set_mask+0x58>)
    4266:	6a11      	ldr	r1, [r2, #32]
    4268:	683a      	ldr	r2, [r7, #0]
    426a:	430a      	orrs	r2, r1
    426c:	621a      	str	r2, [r3, #32]
			break;
    426e:	e001      	b.n	4274 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4270:	2317      	movs	r3, #23
    4272:	e000      	b.n	4276 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4274:	2300      	movs	r3, #0
}
    4276:	0018      	movs	r0, r3
    4278:	46bd      	mov	sp, r7
    427a:	b002      	add	sp, #8
    427c:	bd80      	pop	{r7, pc}
    427e:	46c0      	nop			; (mov r8, r8)
    4280:	40000400 	.word	0x40000400

00004284 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4284:	b580      	push	{r7, lr}
    4286:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4288:	4b05      	ldr	r3, [pc, #20]	; (42a0 <system_is_debugger_present+0x1c>)
    428a:	789b      	ldrb	r3, [r3, #2]
    428c:	b2db      	uxtb	r3, r3
    428e:	001a      	movs	r2, r3
    4290:	2302      	movs	r3, #2
    4292:	4013      	ands	r3, r2
    4294:	1e5a      	subs	r2, r3, #1
    4296:	4193      	sbcs	r3, r2
    4298:	b2db      	uxtb	r3, r3
}
    429a:	0018      	movs	r0, r3
    429c:	46bd      	mov	sp, r7
    429e:	bd80      	pop	{r7, pc}
    42a0:	41002000 	.word	0x41002000

000042a4 <system_interrupt_enable>:
{
    42a4:	b580      	push	{r7, lr}
    42a6:	b082      	sub	sp, #8
    42a8:	af00      	add	r7, sp, #0
    42aa:	0002      	movs	r2, r0
    42ac:	1dfb      	adds	r3, r7, #7
    42ae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    42b0:	4b06      	ldr	r3, [pc, #24]	; (42cc <system_interrupt_enable+0x28>)
    42b2:	1dfa      	adds	r2, r7, #7
    42b4:	7812      	ldrb	r2, [r2, #0]
    42b6:	0011      	movs	r1, r2
    42b8:	221f      	movs	r2, #31
    42ba:	400a      	ands	r2, r1
    42bc:	2101      	movs	r1, #1
    42be:	4091      	lsls	r1, r2
    42c0:	000a      	movs	r2, r1
    42c2:	601a      	str	r2, [r3, #0]
}
    42c4:	46c0      	nop			; (mov r8, r8)
    42c6:	46bd      	mov	sp, r7
    42c8:	b002      	add	sp, #8
    42ca:	bd80      	pop	{r7, pc}
    42cc:	e000e100 	.word	0xe000e100

000042d0 <system_interrupt_disable>:
{
    42d0:	b580      	push	{r7, lr}
    42d2:	b082      	sub	sp, #8
    42d4:	af00      	add	r7, sp, #0
    42d6:	0002      	movs	r2, r0
    42d8:	1dfb      	adds	r3, r7, #7
    42da:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    42dc:	4a07      	ldr	r2, [pc, #28]	; (42fc <system_interrupt_disable+0x2c>)
    42de:	1dfb      	adds	r3, r7, #7
    42e0:	781b      	ldrb	r3, [r3, #0]
    42e2:	0019      	movs	r1, r3
    42e4:	231f      	movs	r3, #31
    42e6:	400b      	ands	r3, r1
    42e8:	2101      	movs	r1, #1
    42ea:	4099      	lsls	r1, r3
    42ec:	000b      	movs	r3, r1
    42ee:	0019      	movs	r1, r3
    42f0:	2380      	movs	r3, #128	; 0x80
    42f2:	50d1      	str	r1, [r2, r3]
}
    42f4:	46c0      	nop			; (mov r8, r8)
    42f6:	46bd      	mov	sp, r7
    42f8:	b002      	add	sp, #8
    42fa:	bd80      	pop	{r7, pc}
    42fc:	e000e100 	.word	0xe000e100

00004300 <spi_is_syncing>:
{
    4300:	b580      	push	{r7, lr}
    4302:	b084      	sub	sp, #16
    4304:	af00      	add	r7, sp, #0
    4306:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4308:	687b      	ldr	r3, [r7, #4]
    430a:	681b      	ldr	r3, [r3, #0]
    430c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    430e:	68fb      	ldr	r3, [r7, #12]
    4310:	69db      	ldr	r3, [r3, #28]
    4312:	1e5a      	subs	r2, r3, #1
    4314:	4193      	sbcs	r3, r2
    4316:	b2db      	uxtb	r3, r3
}
    4318:	0018      	movs	r0, r3
    431a:	46bd      	mov	sp, r7
    431c:	b004      	add	sp, #16
    431e:	bd80      	pop	{r7, pc}

00004320 <spi_enable>:
{
    4320:	b580      	push	{r7, lr}
    4322:	b084      	sub	sp, #16
    4324:	af00      	add	r7, sp, #0
    4326:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4328:	687b      	ldr	r3, [r7, #4]
    432a:	681b      	ldr	r3, [r3, #0]
    432c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    432e:	687b      	ldr	r3, [r7, #4]
    4330:	681b      	ldr	r3, [r3, #0]
    4332:	0018      	movs	r0, r3
    4334:	4b0b      	ldr	r3, [pc, #44]	; (4364 <spi_enable+0x44>)
    4336:	4798      	blx	r3
    4338:	0003      	movs	r3, r0
    433a:	0018      	movs	r0, r3
    433c:	4b0a      	ldr	r3, [pc, #40]	; (4368 <spi_enable+0x48>)
    433e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    4340:	46c0      	nop			; (mov r8, r8)
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	0018      	movs	r0, r3
    4346:	4b09      	ldr	r3, [pc, #36]	; (436c <spi_enable+0x4c>)
    4348:	4798      	blx	r3
    434a:	1e03      	subs	r3, r0, #0
    434c:	d1f9      	bne.n	4342 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	681b      	ldr	r3, [r3, #0]
    4352:	2202      	movs	r2, #2
    4354:	431a      	orrs	r2, r3
    4356:	68fb      	ldr	r3, [r7, #12]
    4358:	601a      	str	r2, [r3, #0]
}
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	46bd      	mov	sp, r7
    435e:	b004      	add	sp, #16
    4360:	bd80      	pop	{r7, pc}
    4362:	46c0      	nop			; (mov r8, r8)
    4364:	0000403d 	.word	0x0000403d
    4368:	000042a5 	.word	0x000042a5
    436c:	00004301 	.word	0x00004301

00004370 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    4370:	b580      	push	{r7, lr}
    4372:	b084      	sub	sp, #16
    4374:	af00      	add	r7, sp, #0
    4376:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	681b      	ldr	r3, [r3, #0]
    4382:	0018      	movs	r0, r3
    4384:	4b0e      	ldr	r3, [pc, #56]	; (43c0 <spi_disable+0x50>)
    4386:	4798      	blx	r3
    4388:	0003      	movs	r3, r0
    438a:	0018      	movs	r0, r3
    438c:	4b0d      	ldr	r3, [pc, #52]	; (43c4 <spi_disable+0x54>)
    438e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    4390:	46c0      	nop			; (mov r8, r8)
    4392:	687b      	ldr	r3, [r7, #4]
    4394:	0018      	movs	r0, r3
    4396:	4b0c      	ldr	r3, [pc, #48]	; (43c8 <spi_disable+0x58>)
    4398:	4798      	blx	r3
    439a:	1e03      	subs	r3, r0, #0
    439c:	d1f9      	bne.n	4392 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    439e:	68fb      	ldr	r3, [r7, #12]
    43a0:	228f      	movs	r2, #143	; 0x8f
    43a2:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    43a4:	68fb      	ldr	r3, [r7, #12]
    43a6:	228f      	movs	r2, #143	; 0x8f
    43a8:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    43aa:	68fb      	ldr	r3, [r7, #12]
    43ac:	681b      	ldr	r3, [r3, #0]
    43ae:	2202      	movs	r2, #2
    43b0:	4393      	bics	r3, r2
    43b2:	001a      	movs	r2, r3
    43b4:	68fb      	ldr	r3, [r7, #12]
    43b6:	601a      	str	r2, [r3, #0]
}
    43b8:	46c0      	nop			; (mov r8, r8)
    43ba:	46bd      	mov	sp, r7
    43bc:	b004      	add	sp, #16
    43be:	bd80      	pop	{r7, pc}
    43c0:	0000403d 	.word	0x0000403d
    43c4:	000042d1 	.word	0x000042d1
    43c8:	00004301 	.word	0x00004301

000043cc <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    43cc:	b580      	push	{r7, lr}
    43ce:	b084      	sub	sp, #16
    43d0:	af00      	add	r7, sp, #0
    43d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	681b      	ldr	r3, [r3, #0]
    43d8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    43da:	68fb      	ldr	r3, [r7, #12]
    43dc:	7e1b      	ldrb	r3, [r3, #24]
    43de:	b2db      	uxtb	r3, r3
    43e0:	001a      	movs	r2, r3
    43e2:	2302      	movs	r3, #2
    43e4:	4013      	ands	r3, r2
    43e6:	1e5a      	subs	r2, r3, #1
    43e8:	4193      	sbcs	r3, r2
    43ea:	b2db      	uxtb	r3, r3
}
    43ec:	0018      	movs	r0, r3
    43ee:	46bd      	mov	sp, r7
    43f0:	b004      	add	sp, #16
    43f2:	bd80      	pop	{r7, pc}

000043f4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    43f4:	b580      	push	{r7, lr}
    43f6:	b084      	sub	sp, #16
    43f8:	af00      	add	r7, sp, #0
    43fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43fc:	687b      	ldr	r3, [r7, #4]
    43fe:	681b      	ldr	r3, [r3, #0]
    4400:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4402:	68fb      	ldr	r3, [r7, #12]
    4404:	7e1b      	ldrb	r3, [r3, #24]
    4406:	b2db      	uxtb	r3, r3
    4408:	001a      	movs	r2, r3
    440a:	2301      	movs	r3, #1
    440c:	4013      	ands	r3, r2
    440e:	1e5a      	subs	r2, r3, #1
    4410:	4193      	sbcs	r3, r2
    4412:	b2db      	uxtb	r3, r3
}
    4414:	0018      	movs	r0, r3
    4416:	46bd      	mov	sp, r7
    4418:	b004      	add	sp, #16
    441a:	bd80      	pop	{r7, pc}

0000441c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    441c:	b580      	push	{r7, lr}
    441e:	b084      	sub	sp, #16
    4420:	af00      	add	r7, sp, #0
    4422:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4424:	687b      	ldr	r3, [r7, #4]
    4426:	681b      	ldr	r3, [r3, #0]
    4428:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    442a:	68fb      	ldr	r3, [r7, #12]
    442c:	7e1b      	ldrb	r3, [r3, #24]
    442e:	b2db      	uxtb	r3, r3
    4430:	001a      	movs	r2, r3
    4432:	2304      	movs	r3, #4
    4434:	4013      	ands	r3, r2
    4436:	1e5a      	subs	r2, r3, #1
    4438:	4193      	sbcs	r3, r2
    443a:	b2db      	uxtb	r3, r3
}
    443c:	0018      	movs	r0, r3
    443e:	46bd      	mov	sp, r7
    4440:	b004      	add	sp, #16
    4442:	bd80      	pop	{r7, pc}

00004444 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4444:	b580      	push	{r7, lr}
    4446:	b084      	sub	sp, #16
    4448:	af00      	add	r7, sp, #0
    444a:	6078      	str	r0, [r7, #4]
    444c:	000a      	movs	r2, r1
    444e:	1cbb      	adds	r3, r7, #2
    4450:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	681b      	ldr	r3, [r3, #0]
    4456:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4458:	687b      	ldr	r3, [r7, #4]
    445a:	0018      	movs	r0, r3
    445c:	4b0a      	ldr	r3, [pc, #40]	; (4488 <spi_write+0x44>)
    445e:	4798      	blx	r3
    4460:	0003      	movs	r3, r0
    4462:	001a      	movs	r2, r3
    4464:	2301      	movs	r3, #1
    4466:	4053      	eors	r3, r2
    4468:	b2db      	uxtb	r3, r3
    446a:	2b00      	cmp	r3, #0
    446c:	d001      	beq.n	4472 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    446e:	2305      	movs	r3, #5
    4470:	e006      	b.n	4480 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4472:	1cbb      	adds	r3, r7, #2
    4474:	881b      	ldrh	r3, [r3, #0]
    4476:	05db      	lsls	r3, r3, #23
    4478:	0dda      	lsrs	r2, r3, #23
    447a:	68fb      	ldr	r3, [r7, #12]
    447c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    447e:	2300      	movs	r3, #0
}
    4480:	0018      	movs	r0, r3
    4482:	46bd      	mov	sp, r7
    4484:	b004      	add	sp, #16
    4486:	bd80      	pop	{r7, pc}
    4488:	000043f5 	.word	0x000043f5

0000448c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    448c:	b580      	push	{r7, lr}
    448e:	b084      	sub	sp, #16
    4490:	af00      	add	r7, sp, #0
    4492:	6078      	str	r0, [r7, #4]
    4494:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4496:	687b      	ldr	r3, [r7, #4]
    4498:	681b      	ldr	r3, [r3, #0]
    449a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	0018      	movs	r0, r3
    44a0:	4b1b      	ldr	r3, [pc, #108]	; (4510 <spi_read+0x84>)
    44a2:	4798      	blx	r3
    44a4:	0003      	movs	r3, r0
    44a6:	001a      	movs	r2, r3
    44a8:	2301      	movs	r3, #1
    44aa:	4053      	eors	r3, r2
    44ac:	b2db      	uxtb	r3, r3
    44ae:	2b00      	cmp	r3, #0
    44b0:	d001      	beq.n	44b6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    44b2:	2310      	movs	r3, #16
    44b4:	e027      	b.n	4506 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    44b6:	230f      	movs	r3, #15
    44b8:	18fb      	adds	r3, r7, r3
    44ba:	2200      	movs	r2, #0
    44bc:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    44be:	68bb      	ldr	r3, [r7, #8]
    44c0:	8b5b      	ldrh	r3, [r3, #26]
    44c2:	b29b      	uxth	r3, r3
    44c4:	001a      	movs	r2, r3
    44c6:	2304      	movs	r3, #4
    44c8:	4013      	ands	r3, r2
    44ca:	d006      	beq.n	44da <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    44cc:	230f      	movs	r3, #15
    44ce:	18fb      	adds	r3, r7, r3
    44d0:	221e      	movs	r2, #30
    44d2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    44d4:	68bb      	ldr	r3, [r7, #8]
    44d6:	2204      	movs	r2, #4
    44d8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    44da:	687b      	ldr	r3, [r7, #4]
    44dc:	799b      	ldrb	r3, [r3, #6]
    44de:	2b01      	cmp	r3, #1
    44e0:	d108      	bne.n	44f4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    44e2:	68bb      	ldr	r3, [r7, #8]
    44e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44e6:	b29b      	uxth	r3, r3
    44e8:	05db      	lsls	r3, r3, #23
    44ea:	0ddb      	lsrs	r3, r3, #23
    44ec:	b29a      	uxth	r2, r3
    44ee:	683b      	ldr	r3, [r7, #0]
    44f0:	801a      	strh	r2, [r3, #0]
    44f2:	e005      	b.n	4500 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    44f4:	68bb      	ldr	r3, [r7, #8]
    44f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44f8:	b2db      	uxtb	r3, r3
    44fa:	b29a      	uxth	r2, r3
    44fc:	683b      	ldr	r3, [r7, #0]
    44fe:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    4500:	230f      	movs	r3, #15
    4502:	18fb      	adds	r3, r7, r3
    4504:	781b      	ldrb	r3, [r3, #0]
}
    4506:	0018      	movs	r0, r3
    4508:	46bd      	mov	sp, r7
    450a:	b004      	add	sp, #16
    450c:	bd80      	pop	{r7, pc}
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	0000441d 	.word	0x0000441d

00004514 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    4514:	b580      	push	{r7, lr}
    4516:	b084      	sub	sp, #16
    4518:	af00      	add	r7, sp, #0
    451a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    4522:	687b      	ldr	r3, [r7, #4]
    4524:	0018      	movs	r0, r3
    4526:	4b09      	ldr	r3, [pc, #36]	; (454c <spi_reset+0x38>)
    4528:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	687b      	ldr	r3, [r7, #4]
    452e:	0018      	movs	r0, r3
    4530:	4b07      	ldr	r3, [pc, #28]	; (4550 <spi_reset+0x3c>)
    4532:	4798      	blx	r3
    4534:	1e03      	subs	r3, r0, #0
    4536:	d1f9      	bne.n	452c <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    4538:	68fb      	ldr	r3, [r7, #12]
    453a:	681b      	ldr	r3, [r3, #0]
    453c:	2201      	movs	r2, #1
    453e:	431a      	orrs	r2, r3
    4540:	68fb      	ldr	r3, [r7, #12]
    4542:	601a      	str	r2, [r3, #0]
}
    4544:	46c0      	nop			; (mov r8, r8)
    4546:	46bd      	mov	sp, r7
    4548:	b004      	add	sp, #16
    454a:	bd80      	pop	{r7, pc}
    454c:	00004371 	.word	0x00004371
    4550:	00004301 	.word	0x00004301

00004554 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4554:	b590      	push	{r4, r7, lr}
    4556:	b089      	sub	sp, #36	; 0x24
    4558:	af00      	add	r7, sp, #0
    455a:	6078      	str	r0, [r7, #4]
    455c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    455e:	230c      	movs	r3, #12
    4560:	18fb      	adds	r3, r7, r3
    4562:	2200      	movs	r2, #0
    4564:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4566:	687b      	ldr	r3, [r7, #4]
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    456c:	687b      	ldr	r3, [r7, #4]
    456e:	0018      	movs	r0, r3
    4570:	4b24      	ldr	r3, [pc, #144]	; (4604 <spi_set_baudrate+0xb0>)
    4572:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    4574:	46c0      	nop			; (mov r8, r8)
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	0018      	movs	r0, r3
    457a:	4b23      	ldr	r3, [pc, #140]	; (4608 <spi_set_baudrate+0xb4>)
    457c:	4798      	blx	r3
    457e:	1e03      	subs	r3, r0, #0
    4580:	d1f9      	bne.n	4576 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	681b      	ldr	r3, [r3, #0]
    4586:	0018      	movs	r0, r3
    4588:	4b20      	ldr	r3, [pc, #128]	; (460c <spi_set_baudrate+0xb8>)
    458a:	4798      	blx	r3
    458c:	0003      	movs	r3, r0
    458e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4590:	69bb      	ldr	r3, [r7, #24]
    4592:	3314      	adds	r3, #20
    4594:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4596:	697b      	ldr	r3, [r7, #20]
    4598:	b2db      	uxtb	r3, r3
    459a:	0018      	movs	r0, r3
    459c:	4b1c      	ldr	r3, [pc, #112]	; (4610 <spi_set_baudrate+0xbc>)
    459e:	4798      	blx	r3
    45a0:	0003      	movs	r3, r0
    45a2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    45a4:	230f      	movs	r3, #15
    45a6:	18fc      	adds	r4, r7, r3
    45a8:	230c      	movs	r3, #12
    45aa:	18fa      	adds	r2, r7, r3
    45ac:	6939      	ldr	r1, [r7, #16]
    45ae:	683b      	ldr	r3, [r7, #0]
    45b0:	0018      	movs	r0, r3
    45b2:	4b18      	ldr	r3, [pc, #96]	; (4614 <spi_set_baudrate+0xc0>)
    45b4:	4798      	blx	r3
    45b6:	0003      	movs	r3, r0
    45b8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    45ba:	230f      	movs	r3, #15
    45bc:	18fb      	adds	r3, r7, r3
    45be:	781b      	ldrb	r3, [r3, #0]
    45c0:	2b00      	cmp	r3, #0
    45c2:	d001      	beq.n	45c8 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    45c4:	2317      	movs	r3, #23
    45c6:	e018      	b.n	45fa <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    45c8:	230c      	movs	r3, #12
    45ca:	18fb      	adds	r3, r7, r3
    45cc:	881b      	ldrh	r3, [r3, #0]
    45ce:	b2da      	uxtb	r2, r3
    45d0:	69fb      	ldr	r3, [r7, #28]
    45d2:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    45d4:	46c0      	nop			; (mov r8, r8)
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	0018      	movs	r0, r3
    45da:	4b0b      	ldr	r3, [pc, #44]	; (4608 <spi_set_baudrate+0xb4>)
    45dc:	4798      	blx	r3
    45de:	1e03      	subs	r3, r0, #0
    45e0:	d1f9      	bne.n	45d6 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	0018      	movs	r0, r3
    45e6:	4b0c      	ldr	r3, [pc, #48]	; (4618 <spi_set_baudrate+0xc4>)
    45e8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    45ea:	46c0      	nop			; (mov r8, r8)
    45ec:	687b      	ldr	r3, [r7, #4]
    45ee:	0018      	movs	r0, r3
    45f0:	4b05      	ldr	r3, [pc, #20]	; (4608 <spi_set_baudrate+0xb4>)
    45f2:	4798      	blx	r3
    45f4:	1e03      	subs	r3, r0, #0
    45f6:	d1f9      	bne.n	45ec <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    45f8:	2300      	movs	r3, #0
}
    45fa:	0018      	movs	r0, r3
    45fc:	46bd      	mov	sp, r7
    45fe:	b009      	add	sp, #36	; 0x24
    4600:	bd90      	pop	{r4, r7, pc}
    4602:	46c0      	nop			; (mov r8, r8)
    4604:	00004371 	.word	0x00004371
    4608:	00004301 	.word	0x00004301
    460c:	00003f6d 	.word	0x00003f6d
    4610:	00006ba5 	.word	0x00006ba5
    4614:	00003ae7 	.word	0x00003ae7
    4618:	00004321 	.word	0x00004321

0000461c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    461c:	b590      	push	{r4, r7, lr}
    461e:	b093      	sub	sp, #76	; 0x4c
    4620:	af00      	add	r7, sp, #0
    4622:	6078      	str	r0, [r7, #4]
    4624:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4626:	687b      	ldr	r3, [r7, #4]
    4628:	681b      	ldr	r3, [r3, #0]
    462a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    462c:	687b      	ldr	r3, [r7, #4]
    462e:	681b      	ldr	r3, [r3, #0]
    4630:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4632:	231c      	movs	r3, #28
    4634:	18fb      	adds	r3, r7, r3
    4636:	0018      	movs	r0, r3
    4638:	4b75      	ldr	r3, [pc, #468]	; (4810 <_spi_set_config+0x1f4>)
    463a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    463c:	231c      	movs	r3, #28
    463e:	18fb      	adds	r3, r7, r3
    4640:	2200      	movs	r2, #0
    4642:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    4644:	683b      	ldr	r3, [r7, #0]
    4646:	781b      	ldrb	r3, [r3, #0]
    4648:	2b00      	cmp	r3, #0
    464a:	d103      	bne.n	4654 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    464c:	231c      	movs	r3, #28
    464e:	18fb      	adds	r3, r7, r3
    4650:	2200      	movs	r2, #0
    4652:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4654:	683b      	ldr	r3, [r7, #0]
    4656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    4658:	230c      	movs	r3, #12
    465a:	18fb      	adds	r3, r7, r3
    465c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    465e:	683b      	ldr	r3, [r7, #0]
    4660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    4662:	230c      	movs	r3, #12
    4664:	18fb      	adds	r3, r7, r3
    4666:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4668:	683b      	ldr	r3, [r7, #0]
    466a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    466c:	230c      	movs	r3, #12
    466e:	18fb      	adds	r3, r7, r3
    4670:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    4672:	683b      	ldr	r3, [r7, #0]
    4674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    4676:	230c      	movs	r3, #12
    4678:	18fb      	adds	r3, r7, r3
    467a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    467c:	2347      	movs	r3, #71	; 0x47
    467e:	18fb      	adds	r3, r7, r3
    4680:	2200      	movs	r2, #0
    4682:	701a      	strb	r2, [r3, #0]
    4684:	e02c      	b.n	46e0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4686:	2347      	movs	r3, #71	; 0x47
    4688:	18fb      	adds	r3, r7, r3
    468a:	781a      	ldrb	r2, [r3, #0]
    468c:	230c      	movs	r3, #12
    468e:	18fb      	adds	r3, r7, r3
    4690:	0092      	lsls	r2, r2, #2
    4692:	58d3      	ldr	r3, [r2, r3]
    4694:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4698:	2b00      	cmp	r3, #0
    469a:	d109      	bne.n	46b0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    469c:	2347      	movs	r3, #71	; 0x47
    469e:	18fb      	adds	r3, r7, r3
    46a0:	781a      	ldrb	r2, [r3, #0]
    46a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    46a4:	0011      	movs	r1, r2
    46a6:	0018      	movs	r0, r3
    46a8:	4b5a      	ldr	r3, [pc, #360]	; (4814 <_spi_set_config+0x1f8>)
    46aa:	4798      	blx	r3
    46ac:	0003      	movs	r3, r0
    46ae:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    46b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46b2:	3301      	adds	r3, #1
    46b4:	d00d      	beq.n	46d2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    46b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46b8:	b2da      	uxtb	r2, r3
    46ba:	231c      	movs	r3, #28
    46bc:	18fb      	adds	r3, r7, r3
    46be:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    46c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46c2:	0c1b      	lsrs	r3, r3, #16
    46c4:	b2db      	uxtb	r3, r3
    46c6:	221c      	movs	r2, #28
    46c8:	18ba      	adds	r2, r7, r2
    46ca:	0011      	movs	r1, r2
    46cc:	0018      	movs	r0, r3
    46ce:	4b52      	ldr	r3, [pc, #328]	; (4818 <_spi_set_config+0x1fc>)
    46d0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    46d2:	2347      	movs	r3, #71	; 0x47
    46d4:	18fb      	adds	r3, r7, r3
    46d6:	781a      	ldrb	r2, [r3, #0]
    46d8:	2347      	movs	r3, #71	; 0x47
    46da:	18fb      	adds	r3, r7, r3
    46dc:	3201      	adds	r2, #1
    46de:	701a      	strb	r2, [r3, #0]
    46e0:	2347      	movs	r3, #71	; 0x47
    46e2:	18fb      	adds	r3, r7, r3
    46e4:	781b      	ldrb	r3, [r3, #0]
    46e6:	2b03      	cmp	r3, #3
    46e8:	d9cd      	bls.n	4686 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    46ea:	683b      	ldr	r3, [r7, #0]
    46ec:	781a      	ldrb	r2, [r3, #0]
    46ee:	687b      	ldr	r3, [r7, #4]
    46f0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    46f2:	683b      	ldr	r3, [r7, #0]
    46f4:	7c1a      	ldrb	r2, [r3, #16]
    46f6:	687b      	ldr	r3, [r7, #4]
    46f8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    46fa:	683b      	ldr	r3, [r7, #0]
    46fc:	7c9a      	ldrb	r2, [r3, #18]
    46fe:	687b      	ldr	r3, [r7, #4]
    4700:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4702:	683b      	ldr	r3, [r7, #0]
    4704:	7d1a      	ldrb	r2, [r3, #20]
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    470a:	230a      	movs	r3, #10
    470c:	18fb      	adds	r3, r7, r3
    470e:	2200      	movs	r2, #0
    4710:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4712:	2300      	movs	r3, #0
    4714:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    4716:	2300      	movs	r3, #0
    4718:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    471a:	683b      	ldr	r3, [r7, #0]
    471c:	781b      	ldrb	r3, [r3, #0]
    471e:	2b01      	cmp	r3, #1
    4720:	d129      	bne.n	4776 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4722:	687b      	ldr	r3, [r7, #4]
    4724:	681b      	ldr	r3, [r3, #0]
    4726:	0018      	movs	r0, r3
    4728:	4b3c      	ldr	r3, [pc, #240]	; (481c <_spi_set_config+0x200>)
    472a:	4798      	blx	r3
    472c:	0003      	movs	r3, r0
    472e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4732:	3314      	adds	r3, #20
    4734:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4736:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4738:	b2db      	uxtb	r3, r3
    473a:	0018      	movs	r0, r3
    473c:	4b38      	ldr	r3, [pc, #224]	; (4820 <_spi_set_config+0x204>)
    473e:	4798      	blx	r3
    4740:	0003      	movs	r3, r0
    4742:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4744:	683b      	ldr	r3, [r7, #0]
    4746:	699b      	ldr	r3, [r3, #24]
    4748:	2223      	movs	r2, #35	; 0x23
    474a:	18bc      	adds	r4, r7, r2
    474c:	220a      	movs	r2, #10
    474e:	18ba      	adds	r2, r7, r2
    4750:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4752:	0018      	movs	r0, r3
    4754:	4b33      	ldr	r3, [pc, #204]	; (4824 <_spi_set_config+0x208>)
    4756:	4798      	blx	r3
    4758:	0003      	movs	r3, r0
    475a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    475c:	2323      	movs	r3, #35	; 0x23
    475e:	18fb      	adds	r3, r7, r3
    4760:	781b      	ldrb	r3, [r3, #0]
    4762:	2b00      	cmp	r3, #0
    4764:	d001      	beq.n	476a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4766:	2317      	movs	r3, #23
    4768:	e04e      	b.n	4808 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    476a:	230a      	movs	r3, #10
    476c:	18fb      	adds	r3, r7, r3
    476e:	881b      	ldrh	r3, [r3, #0]
    4770:	b2da      	uxtb	r2, r3
    4772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4774:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    4776:	683b      	ldr	r3, [r7, #0]
    4778:	685b      	ldr	r3, [r3, #4]
    477a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    477c:	4313      	orrs	r3, r2
    477e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4780:	683b      	ldr	r3, [r7, #0]
    4782:	689b      	ldr	r3, [r3, #8]
    4784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4786:	4313      	orrs	r3, r2
    4788:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    478a:	683b      	ldr	r3, [r7, #0]
    478c:	68db      	ldr	r3, [r3, #12]
    478e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4790:	4313      	orrs	r3, r2
    4792:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4794:	683b      	ldr	r3, [r7, #0]
    4796:	7c1b      	ldrb	r3, [r3, #16]
    4798:	001a      	movs	r2, r3
    479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    479c:	4313      	orrs	r3, r2
    479e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    47a0:	683b      	ldr	r3, [r7, #0]
    47a2:	7c5b      	ldrb	r3, [r3, #17]
    47a4:	2b00      	cmp	r3, #0
    47a6:	d103      	bne.n	47b0 <_spi_set_config+0x194>
    47a8:	4b1f      	ldr	r3, [pc, #124]	; (4828 <_spi_set_config+0x20c>)
    47aa:	4798      	blx	r3
    47ac:	1e03      	subs	r3, r0, #0
    47ae:	d003      	beq.n	47b8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    47b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    47b2:	2280      	movs	r2, #128	; 0x80
    47b4:	4313      	orrs	r3, r2
    47b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    47b8:	683b      	ldr	r3, [r7, #0]
    47ba:	7c9b      	ldrb	r3, [r3, #18]
    47bc:	2b00      	cmp	r3, #0
    47be:	d004      	beq.n	47ca <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    47c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    47c2:	2280      	movs	r2, #128	; 0x80
    47c4:	0292      	lsls	r2, r2, #10
    47c6:	4313      	orrs	r3, r2
    47c8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    47ca:	683b      	ldr	r3, [r7, #0]
    47cc:	7cdb      	ldrb	r3, [r3, #19]
    47ce:	2b00      	cmp	r3, #0
    47d0:	d004      	beq.n	47dc <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    47d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    47d4:	2280      	movs	r2, #128	; 0x80
    47d6:	0092      	lsls	r2, r2, #2
    47d8:	4313      	orrs	r3, r2
    47da:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    47dc:	683b      	ldr	r3, [r7, #0]
    47de:	7d1b      	ldrb	r3, [r3, #20]
    47e0:	2b00      	cmp	r3, #0
    47e2:	d004      	beq.n	47ee <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    47e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    47e6:	2280      	movs	r2, #128	; 0x80
    47e8:	0192      	lsls	r2, r2, #6
    47ea:	4313      	orrs	r3, r2
    47ec:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    47ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47f0:	681a      	ldr	r2, [r3, #0]
    47f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    47f4:	431a      	orrs	r2, r3
    47f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47f8:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    47fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47fc:	685a      	ldr	r2, [r3, #4]
    47fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4800:	431a      	orrs	r2, r3
    4802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4804:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4806:	2300      	movs	r3, #0
}
    4808:	0018      	movs	r0, r3
    480a:	46bd      	mov	sp, r7
    480c:	b013      	add	sp, #76	; 0x4c
    480e:	bd90      	pop	{r4, r7, pc}
    4810:	00004111 	.word	0x00004111
    4814:	00003db1 	.word	0x00003db1
    4818:	00006d6d 	.word	0x00006d6d
    481c:	00003f6d 	.word	0x00003f6d
    4820:	00006ba5 	.word	0x00006ba5
    4824:	00003ae7 	.word	0x00003ae7
    4828:	00004285 	.word	0x00004285

0000482c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    482c:	b590      	push	{r4, r7, lr}
    482e:	b08b      	sub	sp, #44	; 0x2c
    4830:	af00      	add	r7, sp, #0
    4832:	60f8      	str	r0, [r7, #12]
    4834:	60b9      	str	r1, [r7, #8]
    4836:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	68ba      	ldr	r2, [r7, #8]
    483c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    483e:	68fb      	ldr	r3, [r7, #12]
    4840:	681b      	ldr	r3, [r3, #0]
    4842:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4844:	6a3b      	ldr	r3, [r7, #32]
    4846:	681b      	ldr	r3, [r3, #0]
    4848:	2202      	movs	r2, #2
    484a:	4013      	ands	r3, r2
    484c:	d001      	beq.n	4852 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    484e:	231c      	movs	r3, #28
    4850:	e09c      	b.n	498c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4852:	6a3b      	ldr	r3, [r7, #32]
    4854:	681b      	ldr	r3, [r3, #0]
    4856:	2201      	movs	r2, #1
    4858:	4013      	ands	r3, r2
    485a:	d001      	beq.n	4860 <spi_init+0x34>
		return STATUS_BUSY;
    485c:	2305      	movs	r3, #5
    485e:	e095      	b.n	498c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4860:	68fb      	ldr	r3, [r7, #12]
    4862:	681b      	ldr	r3, [r3, #0]
    4864:	0018      	movs	r0, r3
    4866:	4b4b      	ldr	r3, [pc, #300]	; (4994 <spi_init+0x168>)
    4868:	4798      	blx	r3
    486a:	0003      	movs	r3, r0
    486c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    486e:	69fb      	ldr	r3, [r7, #28]
    4870:	3302      	adds	r3, #2
    4872:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4874:	69fb      	ldr	r3, [r7, #28]
    4876:	3314      	adds	r3, #20
    4878:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    487a:	2201      	movs	r2, #1
    487c:	69bb      	ldr	r3, [r7, #24]
    487e:	409a      	lsls	r2, r3
    4880:	0013      	movs	r3, r2
    4882:	0019      	movs	r1, r3
    4884:	2002      	movs	r0, #2
    4886:	4b44      	ldr	r3, [pc, #272]	; (4998 <spi_init+0x16c>)
    4888:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    488a:	2310      	movs	r3, #16
    488c:	18fb      	adds	r3, r7, r3
    488e:	0018      	movs	r0, r3
    4890:	4b42      	ldr	r3, [pc, #264]	; (499c <spi_init+0x170>)
    4892:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4894:	687b      	ldr	r3, [r7, #4]
    4896:	2224      	movs	r2, #36	; 0x24
    4898:	5c9a      	ldrb	r2, [r3, r2]
    489a:	2310      	movs	r3, #16
    489c:	18fb      	adds	r3, r7, r3
    489e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    48a0:	697b      	ldr	r3, [r7, #20]
    48a2:	b2db      	uxtb	r3, r3
    48a4:	2210      	movs	r2, #16
    48a6:	18ba      	adds	r2, r7, r2
    48a8:	0011      	movs	r1, r2
    48aa:	0018      	movs	r0, r3
    48ac:	4b3c      	ldr	r3, [pc, #240]	; (49a0 <spi_init+0x174>)
    48ae:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    48b0:	697b      	ldr	r3, [r7, #20]
    48b2:	b2db      	uxtb	r3, r3
    48b4:	0018      	movs	r0, r3
    48b6:	4b3b      	ldr	r3, [pc, #236]	; (49a4 <spi_init+0x178>)
    48b8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    48ba:	687b      	ldr	r3, [r7, #4]
    48bc:	2224      	movs	r2, #36	; 0x24
    48be:	5c9b      	ldrb	r3, [r3, r2]
    48c0:	2100      	movs	r1, #0
    48c2:	0018      	movs	r0, r3
    48c4:	4b38      	ldr	r3, [pc, #224]	; (49a8 <spi_init+0x17c>)
    48c6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    48c8:	687b      	ldr	r3, [r7, #4]
    48ca:	781b      	ldrb	r3, [r3, #0]
    48cc:	2b01      	cmp	r3, #1
    48ce:	d105      	bne.n	48dc <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    48d0:	6a3b      	ldr	r3, [r7, #32]
    48d2:	681b      	ldr	r3, [r3, #0]
    48d4:	220c      	movs	r2, #12
    48d6:	431a      	orrs	r2, r3
    48d8:	6a3b      	ldr	r3, [r7, #32]
    48da:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    48dc:	2327      	movs	r3, #39	; 0x27
    48de:	18fb      	adds	r3, r7, r3
    48e0:	2200      	movs	r2, #0
    48e2:	701a      	strb	r2, [r3, #0]
    48e4:	e010      	b.n	4908 <spi_init+0xdc>
		module->callback[i]        = NULL;
    48e6:	2327      	movs	r3, #39	; 0x27
    48e8:	18fb      	adds	r3, r7, r3
    48ea:	781b      	ldrb	r3, [r3, #0]
    48ec:	68fa      	ldr	r2, [r7, #12]
    48ee:	3302      	adds	r3, #2
    48f0:	009b      	lsls	r3, r3, #2
    48f2:	18d3      	adds	r3, r2, r3
    48f4:	3304      	adds	r3, #4
    48f6:	2200      	movs	r2, #0
    48f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    48fa:	2327      	movs	r3, #39	; 0x27
    48fc:	18fb      	adds	r3, r7, r3
    48fe:	781a      	ldrb	r2, [r3, #0]
    4900:	2327      	movs	r3, #39	; 0x27
    4902:	18fb      	adds	r3, r7, r3
    4904:	3201      	adds	r2, #1
    4906:	701a      	strb	r2, [r3, #0]
    4908:	2327      	movs	r3, #39	; 0x27
    490a:	18fb      	adds	r3, r7, r3
    490c:	781b      	ldrb	r3, [r3, #0]
    490e:	2b06      	cmp	r3, #6
    4910:	d9e9      	bls.n	48e6 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    4912:	68fb      	ldr	r3, [r7, #12]
    4914:	2200      	movs	r2, #0
    4916:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4918:	68fb      	ldr	r3, [r7, #12]
    491a:	2200      	movs	r2, #0
    491c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    491e:	68fb      	ldr	r3, [r7, #12]
    4920:	2200      	movs	r2, #0
    4922:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4924:	68fb      	ldr	r3, [r7, #12]
    4926:	2200      	movs	r2, #0
    4928:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    492a:	68fb      	ldr	r3, [r7, #12]
    492c:	2236      	movs	r2, #54	; 0x36
    492e:	2100      	movs	r1, #0
    4930:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    4932:	68fb      	ldr	r3, [r7, #12]
    4934:	2237      	movs	r2, #55	; 0x37
    4936:	2100      	movs	r1, #0
    4938:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    493a:	68fb      	ldr	r3, [r7, #12]
    493c:	2238      	movs	r2, #56	; 0x38
    493e:	2100      	movs	r1, #0
    4940:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    4942:	68fb      	ldr	r3, [r7, #12]
    4944:	2203      	movs	r2, #3
    4946:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    4948:	68fb      	ldr	r3, [r7, #12]
    494a:	2200      	movs	r2, #0
    494c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    494e:	68fb      	ldr	r3, [r7, #12]
    4950:	681b      	ldr	r3, [r3, #0]
    4952:	2213      	movs	r2, #19
    4954:	18bc      	adds	r4, r7, r2
    4956:	0018      	movs	r0, r3
    4958:	4b0e      	ldr	r3, [pc, #56]	; (4994 <spi_init+0x168>)
    495a:	4798      	blx	r3
    495c:	0003      	movs	r3, r0
    495e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4960:	4a12      	ldr	r2, [pc, #72]	; (49ac <spi_init+0x180>)
    4962:	2313      	movs	r3, #19
    4964:	18fb      	adds	r3, r7, r3
    4966:	781b      	ldrb	r3, [r3, #0]
    4968:	0011      	movs	r1, r2
    496a:	0018      	movs	r0, r3
    496c:	4b10      	ldr	r3, [pc, #64]	; (49b0 <spi_init+0x184>)
    496e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4970:	2313      	movs	r3, #19
    4972:	18fb      	adds	r3, r7, r3
    4974:	781a      	ldrb	r2, [r3, #0]
    4976:	4b0f      	ldr	r3, [pc, #60]	; (49b4 <spi_init+0x188>)
    4978:	0092      	lsls	r2, r2, #2
    497a:	68f9      	ldr	r1, [r7, #12]
    497c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    497e:	687a      	ldr	r2, [r7, #4]
    4980:	68fb      	ldr	r3, [r7, #12]
    4982:	0011      	movs	r1, r2
    4984:	0018      	movs	r0, r3
    4986:	4b0c      	ldr	r3, [pc, #48]	; (49b8 <spi_init+0x18c>)
    4988:	4798      	blx	r3
    498a:	0003      	movs	r3, r0
}
    498c:	0018      	movs	r0, r3
    498e:	46bd      	mov	sp, r7
    4990:	b00b      	add	sp, #44	; 0x2c
    4992:	bd90      	pop	{r4, r7, pc}
    4994:	00003f6d 	.word	0x00003f6d
    4998:	00004229 	.word	0x00004229
    499c:	00004211 	.word	0x00004211
    49a0:	00006a81 	.word	0x00006a81
    49a4:	00006ac5 	.word	0x00006ac5
    49a8:	00003d25 	.word	0x00003d25
    49ac:	00004e85 	.word	0x00004e85
    49b0:	00003fd1 	.word	0x00003fd1
    49b4:	20000a1c 	.word	0x20000a1c
    49b8:	0000461d 	.word	0x0000461d

000049bc <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    49bc:	b590      	push	{r4, r7, lr}
    49be:	b087      	sub	sp, #28
    49c0:	af00      	add	r7, sp, #0
    49c2:	60f8      	str	r0, [r7, #12]
    49c4:	60b9      	str	r1, [r7, #8]
    49c6:	0019      	movs	r1, r3
    49c8:	1dbb      	adds	r3, r7, #6
    49ca:	801a      	strh	r2, [r3, #0]
    49cc:	1d3b      	adds	r3, r7, #4
    49ce:	1c0a      	adds	r2, r1, #0
    49d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    49d2:	68fb      	ldr	r3, [r7, #12]
    49d4:	2238      	movs	r2, #56	; 0x38
    49d6:	5c9b      	ldrb	r3, [r3, r2]
    49d8:	b2db      	uxtb	r3, r3
    49da:	2b05      	cmp	r3, #5
    49dc:	d101      	bne.n	49e2 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    49de:	2305      	movs	r3, #5
    49e0:	e07a      	b.n	4ad8 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    49e2:	1dbb      	adds	r3, r7, #6
    49e4:	881b      	ldrh	r3, [r3, #0]
    49e6:	2b00      	cmp	r3, #0
    49e8:	d101      	bne.n	49ee <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    49ea:	2317      	movs	r3, #23
    49ec:	e074      	b.n	4ad8 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    49ee:	68fb      	ldr	r3, [r7, #12]
    49f0:	79db      	ldrb	r3, [r3, #7]
    49f2:	2201      	movs	r2, #1
    49f4:	4053      	eors	r3, r2
    49f6:	b2db      	uxtb	r3, r3
    49f8:	2b00      	cmp	r3, #0
    49fa:	d001      	beq.n	4a00 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    49fc:	231c      	movs	r3, #28
    49fe:	e06b      	b.n	4ad8 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    4a00:	2316      	movs	r3, #22
    4a02:	18fb      	adds	r3, r7, r3
    4a04:	2200      	movs	r2, #0
    4a06:	801a      	strh	r2, [r3, #0]

	while (length--) {
    4a08:	e05e      	b.n	4ac8 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    4a0a:	68fb      	ldr	r3, [r7, #12]
    4a0c:	795b      	ldrb	r3, [r3, #5]
    4a0e:	2b01      	cmp	r3, #1
    4a10:	d112      	bne.n	4a38 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	68fb      	ldr	r3, [r7, #12]
    4a16:	0018      	movs	r0, r3
    4a18:	4b31      	ldr	r3, [pc, #196]	; (4ae0 <spi_read_buffer_wait+0x124>)
    4a1a:	4798      	blx	r3
    4a1c:	0003      	movs	r3, r0
    4a1e:	001a      	movs	r2, r3
    4a20:	2301      	movs	r3, #1
    4a22:	4053      	eors	r3, r2
    4a24:	b2db      	uxtb	r3, r3
    4a26:	2b00      	cmp	r3, #0
    4a28:	d1f4      	bne.n	4a14 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    4a2a:	1d3b      	adds	r3, r7, #4
    4a2c:	881a      	ldrh	r2, [r3, #0]
    4a2e:	68fb      	ldr	r3, [r7, #12]
    4a30:	0011      	movs	r1, r2
    4a32:	0018      	movs	r0, r3
    4a34:	4b2b      	ldr	r3, [pc, #172]	; (4ae4 <spi_read_buffer_wait+0x128>)
    4a36:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    4a38:	46c0      	nop			; (mov r8, r8)
    4a3a:	68fb      	ldr	r3, [r7, #12]
    4a3c:	0018      	movs	r0, r3
    4a3e:	4b2a      	ldr	r3, [pc, #168]	; (4ae8 <spi_read_buffer_wait+0x12c>)
    4a40:	4798      	blx	r3
    4a42:	0003      	movs	r3, r0
    4a44:	001a      	movs	r2, r3
    4a46:	2301      	movs	r3, #1
    4a48:	4053      	eors	r3, r2
    4a4a:	b2db      	uxtb	r3, r3
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d1f4      	bne.n	4a3a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    4a50:	2312      	movs	r3, #18
    4a52:	18fb      	adds	r3, r7, r3
    4a54:	2200      	movs	r2, #0
    4a56:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    4a58:	2315      	movs	r3, #21
    4a5a:	18fc      	adds	r4, r7, r3
    4a5c:	2312      	movs	r3, #18
    4a5e:	18fa      	adds	r2, r7, r3
    4a60:	68fb      	ldr	r3, [r7, #12]
    4a62:	0011      	movs	r1, r2
    4a64:	0018      	movs	r0, r3
    4a66:	4b21      	ldr	r3, [pc, #132]	; (4aec <spi_read_buffer_wait+0x130>)
    4a68:	4798      	blx	r3
    4a6a:	0003      	movs	r3, r0
    4a6c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    4a6e:	2315      	movs	r3, #21
    4a70:	18fb      	adds	r3, r7, r3
    4a72:	781b      	ldrb	r3, [r3, #0]
    4a74:	2b00      	cmp	r3, #0
    4a76:	d003      	beq.n	4a80 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    4a78:	2315      	movs	r3, #21
    4a7a:	18fb      	adds	r3, r7, r3
    4a7c:	781b      	ldrb	r3, [r3, #0]
    4a7e:	e02b      	b.n	4ad8 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4a80:	2316      	movs	r3, #22
    4a82:	18fb      	adds	r3, r7, r3
    4a84:	881b      	ldrh	r3, [r3, #0]
    4a86:	2216      	movs	r2, #22
    4a88:	18ba      	adds	r2, r7, r2
    4a8a:	1c59      	adds	r1, r3, #1
    4a8c:	8011      	strh	r1, [r2, #0]
    4a8e:	001a      	movs	r2, r3
    4a90:	68bb      	ldr	r3, [r7, #8]
    4a92:	189b      	adds	r3, r3, r2
    4a94:	2212      	movs	r2, #18
    4a96:	18ba      	adds	r2, r7, r2
    4a98:	8812      	ldrh	r2, [r2, #0]
    4a9a:	b2d2      	uxtb	r2, r2
    4a9c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a9e:	68fb      	ldr	r3, [r7, #12]
    4aa0:	799b      	ldrb	r3, [r3, #6]
    4aa2:	2b01      	cmp	r3, #1
    4aa4:	d110      	bne.n	4ac8 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    4aa6:	2316      	movs	r3, #22
    4aa8:	18fb      	adds	r3, r7, r3
    4aaa:	881b      	ldrh	r3, [r3, #0]
    4aac:	2216      	movs	r2, #22
    4aae:	18ba      	adds	r2, r7, r2
    4ab0:	1c59      	adds	r1, r3, #1
    4ab2:	8011      	strh	r1, [r2, #0]
    4ab4:	001a      	movs	r2, r3
    4ab6:	68bb      	ldr	r3, [r7, #8]
    4ab8:	189b      	adds	r3, r3, r2
    4aba:	2212      	movs	r2, #18
    4abc:	18ba      	adds	r2, r7, r2
    4abe:	8812      	ldrh	r2, [r2, #0]
    4ac0:	0a12      	lsrs	r2, r2, #8
    4ac2:	b292      	uxth	r2, r2
    4ac4:	b2d2      	uxtb	r2, r2
    4ac6:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4ac8:	1dbb      	adds	r3, r7, #6
    4aca:	881b      	ldrh	r3, [r3, #0]
    4acc:	1dba      	adds	r2, r7, #6
    4ace:	1e59      	subs	r1, r3, #1
    4ad0:	8011      	strh	r1, [r2, #0]
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	d199      	bne.n	4a0a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    4ad6:	2300      	movs	r3, #0
}
    4ad8:	0018      	movs	r0, r3
    4ada:	46bd      	mov	sp, r7
    4adc:	b007      	add	sp, #28
    4ade:	bd90      	pop	{r4, r7, pc}
    4ae0:	000043f5 	.word	0x000043f5
    4ae4:	00004445 	.word	0x00004445
    4ae8:	0000441d 	.word	0x0000441d
    4aec:	0000448d 	.word	0x0000448d

00004af0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4af0:	b580      	push	{r7, lr}
    4af2:	b086      	sub	sp, #24
    4af4:	af00      	add	r7, sp, #0
    4af6:	60f8      	str	r0, [r7, #12]
    4af8:	60b9      	str	r1, [r7, #8]
    4afa:	1dfb      	adds	r3, r7, #7
    4afc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4afe:	68fb      	ldr	r3, [r7, #12]
    4b00:	795b      	ldrb	r3, [r3, #5]
    4b02:	2b01      	cmp	r3, #1
    4b04:	d001      	beq.n	4b0a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    4b06:	2315      	movs	r3, #21
    4b08:	e05c      	b.n	4bc4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    4b0a:	68fb      	ldr	r3, [r7, #12]
    4b0c:	7a1b      	ldrb	r3, [r3, #8]
    4b0e:	2201      	movs	r2, #1
    4b10:	4053      	eors	r3, r2
    4b12:	b2db      	uxtb	r3, r3
    4b14:	2b00      	cmp	r3, #0
    4b16:	d054      	beq.n	4bc2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    4b18:	1dfb      	adds	r3, r7, #7
    4b1a:	781b      	ldrb	r3, [r3, #0]
    4b1c:	2b00      	cmp	r3, #0
    4b1e:	d04a      	beq.n	4bb6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    4b20:	68bb      	ldr	r3, [r7, #8]
    4b22:	785b      	ldrb	r3, [r3, #1]
    4b24:	2b00      	cmp	r3, #0
    4b26:	d03f      	beq.n	4ba8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    4b28:	68fb      	ldr	r3, [r7, #12]
    4b2a:	0018      	movs	r0, r3
    4b2c:	4b27      	ldr	r3, [pc, #156]	; (4bcc <spi_select_slave+0xdc>)
    4b2e:	4798      	blx	r3
    4b30:	0003      	movs	r3, r0
    4b32:	001a      	movs	r2, r3
    4b34:	2301      	movs	r3, #1
    4b36:	4053      	eors	r3, r2
    4b38:	b2db      	uxtb	r3, r3
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d007      	beq.n	4b4e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    4b3e:	68bb      	ldr	r3, [r7, #8]
    4b40:	781b      	ldrb	r3, [r3, #0]
    4b42:	2101      	movs	r1, #1
    4b44:	0018      	movs	r0, r3
    4b46:	4b22      	ldr	r3, [pc, #136]	; (4bd0 <spi_select_slave+0xe0>)
    4b48:	4798      	blx	r3
					return STATUS_BUSY;
    4b4a:	2305      	movs	r3, #5
    4b4c:	e03a      	b.n	4bc4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4b4e:	68bb      	ldr	r3, [r7, #8]
    4b50:	781b      	ldrb	r3, [r3, #0]
    4b52:	2100      	movs	r1, #0
    4b54:	0018      	movs	r0, r3
    4b56:	4b1e      	ldr	r3, [pc, #120]	; (4bd0 <spi_select_slave+0xe0>)
    4b58:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    4b5a:	68bb      	ldr	r3, [r7, #8]
    4b5c:	789b      	ldrb	r3, [r3, #2]
    4b5e:	b29a      	uxth	r2, r3
    4b60:	68fb      	ldr	r3, [r7, #12]
    4b62:	0011      	movs	r1, r2
    4b64:	0018      	movs	r0, r3
    4b66:	4b1b      	ldr	r3, [pc, #108]	; (4bd4 <spi_select_slave+0xe4>)
    4b68:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    4b6a:	68fb      	ldr	r3, [r7, #12]
    4b6c:	79db      	ldrb	r3, [r3, #7]
    4b6e:	2201      	movs	r2, #1
    4b70:	4053      	eors	r3, r2
    4b72:	b2db      	uxtb	r3, r3
    4b74:	2b00      	cmp	r3, #0
    4b76:	d024      	beq.n	4bc2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4b78:	46c0      	nop			; (mov r8, r8)
    4b7a:	68fb      	ldr	r3, [r7, #12]
    4b7c:	0018      	movs	r0, r3
    4b7e:	4b16      	ldr	r3, [pc, #88]	; (4bd8 <spi_select_slave+0xe8>)
    4b80:	4798      	blx	r3
    4b82:	0003      	movs	r3, r0
    4b84:	001a      	movs	r2, r3
    4b86:	2301      	movs	r3, #1
    4b88:	4053      	eors	r3, r2
    4b8a:	b2db      	uxtb	r3, r3
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	d1f4      	bne.n	4b7a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4b90:	2316      	movs	r3, #22
    4b92:	18fb      	adds	r3, r7, r3
    4b94:	2200      	movs	r2, #0
    4b96:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4b98:	2316      	movs	r3, #22
    4b9a:	18fa      	adds	r2, r7, r3
    4b9c:	68fb      	ldr	r3, [r7, #12]
    4b9e:	0011      	movs	r1, r2
    4ba0:	0018      	movs	r0, r3
    4ba2:	4b0e      	ldr	r3, [pc, #56]	; (4bdc <spi_select_slave+0xec>)
    4ba4:	4798      	blx	r3
    4ba6:	e00c      	b.n	4bc2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4ba8:	68bb      	ldr	r3, [r7, #8]
    4baa:	781b      	ldrb	r3, [r3, #0]
    4bac:	2100      	movs	r1, #0
    4bae:	0018      	movs	r0, r3
    4bb0:	4b07      	ldr	r3, [pc, #28]	; (4bd0 <spi_select_slave+0xe0>)
    4bb2:	4798      	blx	r3
    4bb4:	e005      	b.n	4bc2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    4bb6:	68bb      	ldr	r3, [r7, #8]
    4bb8:	781b      	ldrb	r3, [r3, #0]
    4bba:	2101      	movs	r1, #1
    4bbc:	0018      	movs	r0, r3
    4bbe:	4b04      	ldr	r3, [pc, #16]	; (4bd0 <spi_select_slave+0xe0>)
    4bc0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    4bc2:	2300      	movs	r3, #0
}
    4bc4:	0018      	movs	r0, r3
    4bc6:	46bd      	mov	sp, r7
    4bc8:	b006      	add	sp, #24
    4bca:	bd80      	pop	{r7, pc}
    4bcc:	000043f5 	.word	0x000043f5
    4bd0:	000041bd 	.word	0x000041bd
    4bd4:	00004445 	.word	0x00004445
    4bd8:	0000441d 	.word	0x0000441d
    4bdc:	0000448d 	.word	0x0000448d

00004be0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4be0:	b580      	push	{r7, lr}
    4be2:	b086      	sub	sp, #24
    4be4:	af00      	add	r7, sp, #0
    4be6:	60f8      	str	r0, [r7, #12]
    4be8:	60b9      	str	r1, [r7, #8]
    4bea:	1dbb      	adds	r3, r7, #6
    4bec:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4bee:	68fb      	ldr	r3, [r7, #12]
    4bf0:	2238      	movs	r2, #56	; 0x38
    4bf2:	5c9b      	ldrb	r3, [r3, r2]
    4bf4:	b2db      	uxtb	r3, r3
    4bf6:	2b05      	cmp	r3, #5
    4bf8:	d101      	bne.n	4bfe <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4bfa:	2305      	movs	r3, #5
    4bfc:	e087      	b.n	4d0e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    4bfe:	1dbb      	adds	r3, r7, #6
    4c00:	881b      	ldrh	r3, [r3, #0]
    4c02:	2b00      	cmp	r3, #0
    4c04:	d101      	bne.n	4c0a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    4c06:	2317      	movs	r3, #23
    4c08:	e081      	b.n	4d0e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    4c0a:	2316      	movs	r3, #22
    4c0c:	18fb      	adds	r3, r7, r3
    4c0e:	2200      	movs	r2, #0
    4c10:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    4c12:	2314      	movs	r3, #20
    4c14:	18fb      	adds	r3, r7, r3
    4c16:	1dba      	adds	r2, r7, #6
    4c18:	8812      	ldrh	r2, [r2, #0]
    4c1a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    4c1c:	e05f      	b.n	4cde <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    4c1e:	46c0      	nop			; (mov r8, r8)
    4c20:	68fb      	ldr	r3, [r7, #12]
    4c22:	0018      	movs	r0, r3
    4c24:	4b3c      	ldr	r3, [pc, #240]	; (4d18 <spi_write_buffer_wait+0x138>)
    4c26:	4798      	blx	r3
    4c28:	0003      	movs	r3, r0
    4c2a:	001a      	movs	r2, r3
    4c2c:	2301      	movs	r3, #1
    4c2e:	4053      	eors	r3, r2
    4c30:	b2db      	uxtb	r3, r3
    4c32:	2b00      	cmp	r3, #0
    4c34:	d1f4      	bne.n	4c20 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    4c36:	2316      	movs	r3, #22
    4c38:	18fb      	adds	r3, r7, r3
    4c3a:	881b      	ldrh	r3, [r3, #0]
    4c3c:	2216      	movs	r2, #22
    4c3e:	18ba      	adds	r2, r7, r2
    4c40:	1c59      	adds	r1, r3, #1
    4c42:	8011      	strh	r1, [r2, #0]
    4c44:	001a      	movs	r2, r3
    4c46:	68bb      	ldr	r3, [r7, #8]
    4c48:	189b      	adds	r3, r3, r2
    4c4a:	781a      	ldrb	r2, [r3, #0]
    4c4c:	2312      	movs	r3, #18
    4c4e:	18fb      	adds	r3, r7, r3
    4c50:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c52:	68fb      	ldr	r3, [r7, #12]
    4c54:	799b      	ldrb	r3, [r3, #6]
    4c56:	2b01      	cmp	r3, #1
    4c58:	d115      	bne.n	4c86 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4c5a:	2316      	movs	r3, #22
    4c5c:	18fb      	adds	r3, r7, r3
    4c5e:	881b      	ldrh	r3, [r3, #0]
    4c60:	2216      	movs	r2, #22
    4c62:	18ba      	adds	r2, r7, r2
    4c64:	1c59      	adds	r1, r3, #1
    4c66:	8011      	strh	r1, [r2, #0]
    4c68:	001a      	movs	r2, r3
    4c6a:	68bb      	ldr	r3, [r7, #8]
    4c6c:	189b      	adds	r3, r3, r2
    4c6e:	781b      	ldrb	r3, [r3, #0]
    4c70:	021b      	lsls	r3, r3, #8
    4c72:	b21a      	sxth	r2, r3
    4c74:	2312      	movs	r3, #18
    4c76:	18fb      	adds	r3, r7, r3
    4c78:	2100      	movs	r1, #0
    4c7a:	5e5b      	ldrsh	r3, [r3, r1]
    4c7c:	4313      	orrs	r3, r2
    4c7e:	b21a      	sxth	r2, r3
    4c80:	2312      	movs	r3, #18
    4c82:	18fb      	adds	r3, r7, r3
    4c84:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    4c86:	2312      	movs	r3, #18
    4c88:	18fb      	adds	r3, r7, r3
    4c8a:	881a      	ldrh	r2, [r3, #0]
    4c8c:	68fb      	ldr	r3, [r7, #12]
    4c8e:	0011      	movs	r1, r2
    4c90:	0018      	movs	r0, r3
    4c92:	4b22      	ldr	r3, [pc, #136]	; (4d1c <spi_write_buffer_wait+0x13c>)
    4c94:	4798      	blx	r3

		if (module->receiver_enabled) {
    4c96:	68fb      	ldr	r3, [r7, #12]
    4c98:	79db      	ldrb	r3, [r3, #7]
    4c9a:	2214      	movs	r2, #20
    4c9c:	18ba      	adds	r2, r7, r2
    4c9e:	2114      	movs	r1, #20
    4ca0:	1879      	adds	r1, r7, r1
    4ca2:	8809      	ldrh	r1, [r1, #0]
    4ca4:	8011      	strh	r1, [r2, #0]
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	d019      	beq.n	4cde <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4caa:	46c0      	nop			; (mov r8, r8)
    4cac:	68fb      	ldr	r3, [r7, #12]
    4cae:	0018      	movs	r0, r3
    4cb0:	4b1b      	ldr	r3, [pc, #108]	; (4d20 <spi_write_buffer_wait+0x140>)
    4cb2:	4798      	blx	r3
    4cb4:	0003      	movs	r3, r0
    4cb6:	001a      	movs	r2, r3
    4cb8:	2301      	movs	r3, #1
    4cba:	4053      	eors	r3, r2
    4cbc:	b2db      	uxtb	r3, r3
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d1f4      	bne.n	4cac <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    4cc2:	2310      	movs	r3, #16
    4cc4:	18fa      	adds	r2, r7, r3
    4cc6:	68fb      	ldr	r3, [r7, #12]
    4cc8:	0011      	movs	r1, r2
    4cca:	0018      	movs	r0, r3
    4ccc:	4b15      	ldr	r3, [pc, #84]	; (4d24 <spi_write_buffer_wait+0x144>)
    4cce:	4798      	blx	r3
			flush_length--;
    4cd0:	2314      	movs	r3, #20
    4cd2:	18fb      	adds	r3, r7, r3
    4cd4:	881a      	ldrh	r2, [r3, #0]
    4cd6:	2314      	movs	r3, #20
    4cd8:	18fb      	adds	r3, r7, r3
    4cda:	3a01      	subs	r2, #1
    4cdc:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4cde:	1dbb      	adds	r3, r7, #6
    4ce0:	881b      	ldrh	r3, [r3, #0]
    4ce2:	1dba      	adds	r2, r7, #6
    4ce4:	1e59      	subs	r1, r3, #1
    4ce6:	8011      	strh	r1, [r2, #0]
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d198      	bne.n	4c1e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4cec:	68fb      	ldr	r3, [r7, #12]
    4cee:	795b      	ldrb	r3, [r3, #5]
    4cf0:	2b01      	cmp	r3, #1
    4cf2:	d10b      	bne.n	4d0c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4cf4:	46c0      	nop			; (mov r8, r8)
    4cf6:	68fb      	ldr	r3, [r7, #12]
    4cf8:	0018      	movs	r0, r3
    4cfa:	4b0b      	ldr	r3, [pc, #44]	; (4d28 <spi_write_buffer_wait+0x148>)
    4cfc:	4798      	blx	r3
    4cfe:	0003      	movs	r3, r0
    4d00:	001a      	movs	r2, r3
    4d02:	2301      	movs	r3, #1
    4d04:	4053      	eors	r3, r2
    4d06:	b2db      	uxtb	r3, r3
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d1f4      	bne.n	4cf6 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4d0c:	2300      	movs	r3, #0
}
    4d0e:	0018      	movs	r0, r3
    4d10:	46bd      	mov	sp, r7
    4d12:	b006      	add	sp, #24
    4d14:	bd80      	pop	{r7, pc}
    4d16:	46c0      	nop			; (mov r8, r8)
    4d18:	000043f5 	.word	0x000043f5
    4d1c:	00004445 	.word	0x00004445
    4d20:	0000441d 	.word	0x0000441d
    4d24:	0000448d 	.word	0x0000448d
    4d28:	000043cd 	.word	0x000043cd

00004d2c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    4d2c:	b580      	push	{r7, lr}
    4d2e:	b084      	sub	sp, #16
    4d30:	af00      	add	r7, sp, #0
    4d32:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d34:	687b      	ldr	r3, [r7, #4]
    4d36:	681b      	ldr	r3, [r3, #0]
    4d38:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d3e:	781b      	ldrb	r3, [r3, #0]
    4d40:	b2da      	uxtb	r2, r3
    4d42:	230e      	movs	r3, #14
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4d48:	687b      	ldr	r3, [r7, #4]
    4d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d4c:	1c5a      	adds	r2, r3, #1
    4d4e:	687b      	ldr	r3, [r7, #4]
    4d50:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	799b      	ldrb	r3, [r3, #6]
    4d56:	2b01      	cmp	r3, #1
    4d58:	d113      	bne.n	4d82 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4d5a:	687b      	ldr	r3, [r7, #4]
    4d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d5e:	781b      	ldrb	r3, [r3, #0]
    4d60:	b2db      	uxtb	r3, r3
    4d62:	021b      	lsls	r3, r3, #8
    4d64:	b21a      	sxth	r2, r3
    4d66:	230e      	movs	r3, #14
    4d68:	18fb      	adds	r3, r7, r3
    4d6a:	2100      	movs	r1, #0
    4d6c:	5e5b      	ldrsh	r3, [r3, r1]
    4d6e:	4313      	orrs	r3, r2
    4d70:	b21a      	sxth	r2, r3
    4d72:	230e      	movs	r3, #14
    4d74:	18fb      	adds	r3, r7, r3
    4d76:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4d78:	687b      	ldr	r3, [r7, #4]
    4d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d7c:	1c5a      	adds	r2, r3, #1
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4d82:	230e      	movs	r3, #14
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	881b      	ldrh	r3, [r3, #0]
    4d88:	05db      	lsls	r3, r3, #23
    4d8a:	0dda      	lsrs	r2, r3, #23
    4d8c:	68bb      	ldr	r3, [r7, #8]
    4d8e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4d90:	687b      	ldr	r3, [r7, #4]
    4d92:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4d94:	b29b      	uxth	r3, r3
    4d96:	3b01      	subs	r3, #1
    4d98:	b29a      	uxth	r2, r3
    4d9a:	687b      	ldr	r3, [r7, #4]
    4d9c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4d9e:	46c0      	nop			; (mov r8, r8)
    4da0:	46bd      	mov	sp, r7
    4da2:	b004      	add	sp, #16
    4da4:	bd80      	pop	{r7, pc}
	...

00004da8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b084      	sub	sp, #16
    4dac:	af00      	add	r7, sp, #0
    4dae:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4db0:	687b      	ldr	r3, [r7, #4]
    4db2:	681b      	ldr	r3, [r3, #0]
    4db4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    4db6:	4b08      	ldr	r3, [pc, #32]	; (4dd8 <_spi_write_dummy+0x30>)
    4db8:	881b      	ldrh	r3, [r3, #0]
    4dba:	001a      	movs	r2, r3
    4dbc:	68fb      	ldr	r3, [r7, #12]
    4dbe:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4dc0:	687b      	ldr	r3, [r7, #4]
    4dc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4dc4:	b29b      	uxth	r3, r3
    4dc6:	3b01      	subs	r3, #1
    4dc8:	b29a      	uxth	r2, r3
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4dce:	46c0      	nop			; (mov r8, r8)
    4dd0:	46bd      	mov	sp, r7
    4dd2:	b004      	add	sp, #16
    4dd4:	bd80      	pop	{r7, pc}
    4dd6:	46c0      	nop			; (mov r8, r8)
    4dd8:	20000a34 	.word	0x20000a34

00004ddc <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4ddc:	b580      	push	{r7, lr}
    4dde:	b084      	sub	sp, #16
    4de0:	af00      	add	r7, sp, #0
    4de2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4de4:	687b      	ldr	r3, [r7, #4]
    4de6:	681b      	ldr	r3, [r3, #0]
    4de8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    4dea:	230a      	movs	r3, #10
    4dec:	18fb      	adds	r3, r7, r3
    4dee:	2200      	movs	r2, #0
    4df0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4df2:	68fb      	ldr	r3, [r7, #12]
    4df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4df6:	230a      	movs	r3, #10
    4df8:	18fb      	adds	r3, r7, r3
    4dfa:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4dfc:	687b      	ldr	r3, [r7, #4]
    4dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4e00:	b29b      	uxth	r3, r3
    4e02:	3b01      	subs	r3, #1
    4e04:	b29a      	uxth	r2, r3
    4e06:	687b      	ldr	r3, [r7, #4]
    4e08:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4e0a:	46c0      	nop			; (mov r8, r8)
    4e0c:	46bd      	mov	sp, r7
    4e0e:	b004      	add	sp, #16
    4e10:	bd80      	pop	{r7, pc}

00004e12 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4e12:	b580      	push	{r7, lr}
    4e14:	b084      	sub	sp, #16
    4e16:	af00      	add	r7, sp, #0
    4e18:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	681b      	ldr	r3, [r3, #0]
    4e1e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4e20:	68fb      	ldr	r3, [r7, #12]
    4e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e24:	b29a      	uxth	r2, r3
    4e26:	230a      	movs	r3, #10
    4e28:	18fb      	adds	r3, r7, r3
    4e2a:	05d2      	lsls	r2, r2, #23
    4e2c:	0dd2      	lsrs	r2, r2, #23
    4e2e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4e30:	687b      	ldr	r3, [r7, #4]
    4e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e34:	220a      	movs	r2, #10
    4e36:	18ba      	adds	r2, r7, r2
    4e38:	8812      	ldrh	r2, [r2, #0]
    4e3a:	b2d2      	uxtb	r2, r2
    4e3c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e42:	1c5a      	adds	r2, r3, #1
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e48:	687b      	ldr	r3, [r7, #4]
    4e4a:	799b      	ldrb	r3, [r3, #6]
    4e4c:	2b01      	cmp	r3, #1
    4e4e:	d10d      	bne.n	4e6c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e54:	220a      	movs	r2, #10
    4e56:	18ba      	adds	r2, r7, r2
    4e58:	8812      	ldrh	r2, [r2, #0]
    4e5a:	0a12      	lsrs	r2, r2, #8
    4e5c:	b292      	uxth	r2, r2
    4e5e:	b2d2      	uxtb	r2, r2
    4e60:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4e62:	687b      	ldr	r3, [r7, #4]
    4e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e66:	1c5a      	adds	r2, r3, #1
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4e70:	b29b      	uxth	r3, r3
    4e72:	3b01      	subs	r3, #1
    4e74:	b29a      	uxth	r2, r3
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4e7a:	46c0      	nop			; (mov r8, r8)
    4e7c:	46bd      	mov	sp, r7
    4e7e:	b004      	add	sp, #16
    4e80:	bd80      	pop	{r7, pc}
	...

00004e84 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4e84:	b580      	push	{r7, lr}
    4e86:	b086      	sub	sp, #24
    4e88:	af00      	add	r7, sp, #0
    4e8a:	0002      	movs	r2, r0
    4e8c:	1dfb      	adds	r3, r7, #7
    4e8e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4e90:	1dfb      	adds	r3, r7, #7
    4e92:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    4e94:	4b96      	ldr	r3, [pc, #600]	; (50f0 <_spi_interrupt_handler+0x26c>)
    4e96:	0092      	lsls	r2, r2, #2
    4e98:	58d3      	ldr	r3, [r2, r3]
    4e9a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4e9c:	697b      	ldr	r3, [r7, #20]
    4e9e:	681b      	ldr	r3, [r3, #0]
    4ea0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4ea2:	697b      	ldr	r3, [r7, #20]
    4ea4:	2237      	movs	r2, #55	; 0x37
    4ea6:	5c9a      	ldrb	r2, [r3, r2]
    4ea8:	697b      	ldr	r3, [r7, #20]
    4eaa:	2136      	movs	r1, #54	; 0x36
    4eac:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4eae:	230f      	movs	r3, #15
    4eb0:	18fb      	adds	r3, r7, r3
    4eb2:	400a      	ands	r2, r1
    4eb4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4eb6:	693b      	ldr	r3, [r7, #16]
    4eb8:	7e1b      	ldrb	r3, [r3, #24]
    4eba:	b2da      	uxtb	r2, r3
    4ebc:	230c      	movs	r3, #12
    4ebe:	18fb      	adds	r3, r7, r3
    4ec0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4ec2:	693b      	ldr	r3, [r7, #16]
    4ec4:	7d9b      	ldrb	r3, [r3, #22]
    4ec6:	b2db      	uxtb	r3, r3
    4ec8:	b29a      	uxth	r2, r3
    4eca:	230c      	movs	r3, #12
    4ecc:	18fb      	adds	r3, r7, r3
    4ece:	210c      	movs	r1, #12
    4ed0:	1879      	adds	r1, r7, r1
    4ed2:	8809      	ldrh	r1, [r1, #0]
    4ed4:	400a      	ands	r2, r1
    4ed6:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4ed8:	230c      	movs	r3, #12
    4eda:	18fb      	adds	r3, r7, r3
    4edc:	881b      	ldrh	r3, [r3, #0]
    4ede:	2201      	movs	r2, #1
    4ee0:	4013      	ands	r3, r2
    4ee2:	d038      	beq.n	4f56 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4ee4:	697b      	ldr	r3, [r7, #20]
    4ee6:	795b      	ldrb	r3, [r3, #5]
    4ee8:	2b01      	cmp	r3, #1
    4eea:	d110      	bne.n	4f0e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4eec:	697b      	ldr	r3, [r7, #20]
    4eee:	7a5b      	ldrb	r3, [r3, #9]
    4ef0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d10b      	bne.n	4f0e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    4ef6:	697b      	ldr	r3, [r7, #20]
    4ef8:	0018      	movs	r0, r3
    4efa:	4b7e      	ldr	r3, [pc, #504]	; (50f4 <_spi_interrupt_handler+0x270>)
    4efc:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4efe:	697b      	ldr	r3, [r7, #20]
    4f00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4f02:	b29b      	uxth	r3, r3
    4f04:	2b00      	cmp	r3, #0
    4f06:	d102      	bne.n	4f0e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4f08:	693b      	ldr	r3, [r7, #16]
    4f0a:	2201      	movs	r2, #1
    4f0c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4f0e:	697b      	ldr	r3, [r7, #20]
    4f10:	795b      	ldrb	r3, [r3, #5]
		if (0
    4f12:	2b01      	cmp	r3, #1
    4f14:	d11f      	bne.n	4f56 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    4f16:	697b      	ldr	r3, [r7, #20]
    4f18:	7a5b      	ldrb	r3, [r3, #9]
    4f1a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4f1c:	2b00      	cmp	r3, #0
    4f1e:	d01a      	beq.n	4f56 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4f20:	697b      	ldr	r3, [r7, #20]
    4f22:	0018      	movs	r0, r3
    4f24:	4b74      	ldr	r3, [pc, #464]	; (50f8 <_spi_interrupt_handler+0x274>)
    4f26:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    4f28:	697b      	ldr	r3, [r7, #20]
    4f2a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4f2c:	b29b      	uxth	r3, r3
    4f2e:	2b00      	cmp	r3, #0
    4f30:	d111      	bne.n	4f56 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4f32:	693b      	ldr	r3, [r7, #16]
    4f34:	2201      	movs	r2, #1
    4f36:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4f38:	697b      	ldr	r3, [r7, #20]
    4f3a:	7a5b      	ldrb	r3, [r3, #9]
    4f3c:	b2db      	uxtb	r3, r3
    4f3e:	2b01      	cmp	r3, #1
    4f40:	d109      	bne.n	4f56 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    4f42:	697b      	ldr	r3, [r7, #20]
    4f44:	79db      	ldrb	r3, [r3, #7]
    4f46:	2201      	movs	r2, #1
    4f48:	4053      	eors	r3, r2
    4f4a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d002      	beq.n	4f56 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4f50:	693b      	ldr	r3, [r7, #16]
    4f52:	2202      	movs	r2, #2
    4f54:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4f56:	230c      	movs	r3, #12
    4f58:	18fb      	adds	r3, r7, r3
    4f5a:	881b      	ldrh	r3, [r3, #0]
    4f5c:	2204      	movs	r2, #4
    4f5e:	4013      	ands	r3, r2
    4f60:	d100      	bne.n	4f64 <_spi_interrupt_handler+0xe0>
    4f62:	e07e      	b.n	5062 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4f64:	693b      	ldr	r3, [r7, #16]
    4f66:	8b5b      	ldrh	r3, [r3, #26]
    4f68:	b29b      	uxth	r3, r3
    4f6a:	001a      	movs	r2, r3
    4f6c:	2304      	movs	r3, #4
    4f6e:	4013      	ands	r3, r2
    4f70:	d022      	beq.n	4fb8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4f72:	697b      	ldr	r3, [r7, #20]
    4f74:	7a5b      	ldrb	r3, [r3, #9]
    4f76:	b2db      	uxtb	r3, r3
    4f78:	2b01      	cmp	r3, #1
    4f7a:	d014      	beq.n	4fa6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4f7c:	697b      	ldr	r3, [r7, #20]
    4f7e:	2238      	movs	r2, #56	; 0x38
    4f80:	211e      	movs	r1, #30
    4f82:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4f84:	697b      	ldr	r3, [r7, #20]
    4f86:	2203      	movs	r2, #3
    4f88:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4f8a:	693b      	ldr	r3, [r7, #16]
    4f8c:	2205      	movs	r2, #5
    4f8e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4f90:	230f      	movs	r3, #15
    4f92:	18fb      	adds	r3, r7, r3
    4f94:	781b      	ldrb	r3, [r3, #0]
    4f96:	2208      	movs	r2, #8
    4f98:	4013      	ands	r3, r2
    4f9a:	d004      	beq.n	4fa6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4f9c:	697b      	ldr	r3, [r7, #20]
    4f9e:	699b      	ldr	r3, [r3, #24]
    4fa0:	697a      	ldr	r2, [r7, #20]
    4fa2:	0010      	movs	r0, r2
    4fa4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4fa6:	693b      	ldr	r3, [r7, #16]
    4fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4faa:	230a      	movs	r3, #10
    4fac:	18fb      	adds	r3, r7, r3
    4fae:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4fb0:	693b      	ldr	r3, [r7, #16]
    4fb2:	2204      	movs	r2, #4
    4fb4:	835a      	strh	r2, [r3, #26]
    4fb6:	e054      	b.n	5062 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4fb8:	697b      	ldr	r3, [r7, #20]
    4fba:	7a5b      	ldrb	r3, [r3, #9]
    4fbc:	b2db      	uxtb	r3, r3
    4fbe:	2b01      	cmp	r3, #1
    4fc0:	d11e      	bne.n	5000 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    4fc2:	697b      	ldr	r3, [r7, #20]
    4fc4:	0018      	movs	r0, r3
    4fc6:	4b4d      	ldr	r3, [pc, #308]	; (50fc <_spi_interrupt_handler+0x278>)
    4fc8:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    4fca:	697b      	ldr	r3, [r7, #20]
    4fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4fce:	b29b      	uxth	r3, r3
    4fd0:	2b00      	cmp	r3, #0
    4fd2:	d146      	bne.n	5062 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4fd4:	693b      	ldr	r3, [r7, #16]
    4fd6:	2204      	movs	r2, #4
    4fd8:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    4fda:	697b      	ldr	r3, [r7, #20]
    4fdc:	2238      	movs	r2, #56	; 0x38
    4fde:	2100      	movs	r1, #0
    4fe0:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    4fe2:	697b      	ldr	r3, [r7, #20]
    4fe4:	2203      	movs	r2, #3
    4fe6:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4fe8:	230f      	movs	r3, #15
    4fea:	18fb      	adds	r3, r7, r3
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	2201      	movs	r2, #1
    4ff0:	4013      	ands	r3, r2
    4ff2:	d036      	beq.n	5062 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4ff4:	697b      	ldr	r3, [r7, #20]
    4ff6:	68db      	ldr	r3, [r3, #12]
    4ff8:	697a      	ldr	r2, [r7, #20]
    4ffa:	0010      	movs	r0, r2
    4ffc:	4798      	blx	r3
    4ffe:	e030      	b.n	5062 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    5000:	697b      	ldr	r3, [r7, #20]
    5002:	0018      	movs	r0, r3
    5004:	4b3e      	ldr	r3, [pc, #248]	; (5100 <_spi_interrupt_handler+0x27c>)
    5006:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    5008:	697b      	ldr	r3, [r7, #20]
    500a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    500c:	b29b      	uxth	r3, r3
    500e:	2b00      	cmp	r3, #0
    5010:	d127      	bne.n	5062 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    5012:	697b      	ldr	r3, [r7, #20]
    5014:	2238      	movs	r2, #56	; 0x38
    5016:	2100      	movs	r1, #0
    5018:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    501a:	693b      	ldr	r3, [r7, #16]
    501c:	2204      	movs	r2, #4
    501e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    5020:	697b      	ldr	r3, [r7, #20]
    5022:	7a5b      	ldrb	r3, [r3, #9]
    5024:	b2db      	uxtb	r3, r3
    5026:	2b02      	cmp	r3, #2
    5028:	d10b      	bne.n	5042 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    502a:	230f      	movs	r3, #15
    502c:	18fb      	adds	r3, r7, r3
    502e:	781b      	ldrb	r3, [r3, #0]
    5030:	2204      	movs	r2, #4
    5032:	4013      	ands	r3, r2
    5034:	d015      	beq.n	5062 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    5036:	697b      	ldr	r3, [r7, #20]
    5038:	695b      	ldr	r3, [r3, #20]
    503a:	697a      	ldr	r2, [r7, #20]
    503c:	0010      	movs	r0, r2
    503e:	4798      	blx	r3
    5040:	e00f      	b.n	5062 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    5042:	697b      	ldr	r3, [r7, #20]
    5044:	7a5b      	ldrb	r3, [r3, #9]
    5046:	b2db      	uxtb	r3, r3
    5048:	2b00      	cmp	r3, #0
    504a:	d10a      	bne.n	5062 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    504c:	230f      	movs	r3, #15
    504e:	18fb      	adds	r3, r7, r3
    5050:	781b      	ldrb	r3, [r3, #0]
    5052:	2202      	movs	r2, #2
    5054:	4013      	ands	r3, r2
    5056:	d004      	beq.n	5062 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5058:	697b      	ldr	r3, [r7, #20]
    505a:	691b      	ldr	r3, [r3, #16]
    505c:	697a      	ldr	r2, [r7, #20]
    505e:	0010      	movs	r0, r2
    5060:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    5062:	230c      	movs	r3, #12
    5064:	18fb      	adds	r3, r7, r3
    5066:	881b      	ldrh	r3, [r3, #0]
    5068:	2202      	movs	r2, #2
    506a:	4013      	ands	r3, r2
    506c:	d024      	beq.n	50b8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    506e:	697b      	ldr	r3, [r7, #20]
    5070:	795b      	ldrb	r3, [r3, #5]
    5072:	2b01      	cmp	r3, #1
    5074:	d120      	bne.n	50b8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5076:	697b      	ldr	r3, [r7, #20]
    5078:	7a5b      	ldrb	r3, [r3, #9]
    507a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    507c:	2b01      	cmp	r3, #1
    507e:	d11b      	bne.n	50b8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5080:	697b      	ldr	r3, [r7, #20]
    5082:	79db      	ldrb	r3, [r3, #7]
    5084:	2201      	movs	r2, #1
    5086:	4053      	eors	r3, r2
    5088:	b2db      	uxtb	r3, r3
    508a:	2b00      	cmp	r3, #0
    508c:	d014      	beq.n	50b8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    508e:	693b      	ldr	r3, [r7, #16]
    5090:	2202      	movs	r2, #2
    5092:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    5094:	697b      	ldr	r3, [r7, #20]
    5096:	2203      	movs	r2, #3
    5098:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    509a:	697b      	ldr	r3, [r7, #20]
    509c:	2238      	movs	r2, #56	; 0x38
    509e:	2100      	movs	r1, #0
    50a0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    50a2:	230f      	movs	r3, #15
    50a4:	18fb      	adds	r3, r7, r3
    50a6:	781b      	ldrb	r3, [r3, #0]
    50a8:	2201      	movs	r2, #1
    50aa:	4013      	ands	r3, r2
    50ac:	d004      	beq.n	50b8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    50ae:	697b      	ldr	r3, [r7, #20]
    50b0:	68db      	ldr	r3, [r3, #12]
    50b2:	697a      	ldr	r2, [r7, #20]
    50b4:	0010      	movs	r0, r2
    50b6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    50b8:	230c      	movs	r3, #12
    50ba:	18fb      	adds	r3, r7, r3
    50bc:	881b      	ldrh	r3, [r3, #0]
    50be:	2280      	movs	r2, #128	; 0x80
    50c0:	4013      	ands	r3, r2
    50c2:	d010      	beq.n	50e6 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    50c4:	693b      	ldr	r3, [r7, #16]
    50c6:	2280      	movs	r2, #128	; 0x80
    50c8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    50ca:	693b      	ldr	r3, [r7, #16]
    50cc:	2280      	movs	r2, #128	; 0x80
    50ce:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    50d0:	230f      	movs	r3, #15
    50d2:	18fb      	adds	r3, r7, r3
    50d4:	781b      	ldrb	r3, [r3, #0]
    50d6:	2240      	movs	r2, #64	; 0x40
    50d8:	4013      	ands	r3, r2
    50da:	d004      	beq.n	50e6 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    50dc:	697b      	ldr	r3, [r7, #20]
    50de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    50e0:	697a      	ldr	r2, [r7, #20]
    50e2:	0010      	movs	r0, r2
    50e4:	4798      	blx	r3
		}
	}
#  endif
}
    50e6:	46c0      	nop			; (mov r8, r8)
    50e8:	46bd      	mov	sp, r7
    50ea:	b006      	add	sp, #24
    50ec:	bd80      	pop	{r7, pc}
    50ee:	46c0      	nop			; (mov r8, r8)
    50f0:	20000a1c 	.word	0x20000a1c
    50f4:	00004da9 	.word	0x00004da9
    50f8:	00004d2d 	.word	0x00004d2d
    50fc:	00004ddd 	.word	0x00004ddd
    5100:	00004e13 	.word	0x00004e13

00005104 <system_gclk_chan_get_config_defaults>:
{
    5104:	b580      	push	{r7, lr}
    5106:	b082      	sub	sp, #8
    5108:	af00      	add	r7, sp, #0
    510a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    510c:	687b      	ldr	r3, [r7, #4]
    510e:	2200      	movs	r2, #0
    5110:	701a      	strb	r2, [r3, #0]
}
    5112:	46c0      	nop			; (mov r8, r8)
    5114:	46bd      	mov	sp, r7
    5116:	b002      	add	sp, #8
    5118:	bd80      	pop	{r7, pc}
	...

0000511c <system_apb_clock_set_mask>:
{
    511c:	b580      	push	{r7, lr}
    511e:	b082      	sub	sp, #8
    5120:	af00      	add	r7, sp, #0
    5122:	0002      	movs	r2, r0
    5124:	6039      	str	r1, [r7, #0]
    5126:	1dfb      	adds	r3, r7, #7
    5128:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    512a:	1dfb      	adds	r3, r7, #7
    512c:	781b      	ldrb	r3, [r3, #0]
    512e:	2b01      	cmp	r3, #1
    5130:	d00a      	beq.n	5148 <system_apb_clock_set_mask+0x2c>
    5132:	2b02      	cmp	r3, #2
    5134:	d00f      	beq.n	5156 <system_apb_clock_set_mask+0x3a>
    5136:	2b00      	cmp	r3, #0
    5138:	d114      	bne.n	5164 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    513a:	4b0e      	ldr	r3, [pc, #56]	; (5174 <system_apb_clock_set_mask+0x58>)
    513c:	4a0d      	ldr	r2, [pc, #52]	; (5174 <system_apb_clock_set_mask+0x58>)
    513e:	6991      	ldr	r1, [r2, #24]
    5140:	683a      	ldr	r2, [r7, #0]
    5142:	430a      	orrs	r2, r1
    5144:	619a      	str	r2, [r3, #24]
			break;
    5146:	e00f      	b.n	5168 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5148:	4b0a      	ldr	r3, [pc, #40]	; (5174 <system_apb_clock_set_mask+0x58>)
    514a:	4a0a      	ldr	r2, [pc, #40]	; (5174 <system_apb_clock_set_mask+0x58>)
    514c:	69d1      	ldr	r1, [r2, #28]
    514e:	683a      	ldr	r2, [r7, #0]
    5150:	430a      	orrs	r2, r1
    5152:	61da      	str	r2, [r3, #28]
			break;
    5154:	e008      	b.n	5168 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5156:	4b07      	ldr	r3, [pc, #28]	; (5174 <system_apb_clock_set_mask+0x58>)
    5158:	4a06      	ldr	r2, [pc, #24]	; (5174 <system_apb_clock_set_mask+0x58>)
    515a:	6a11      	ldr	r1, [r2, #32]
    515c:	683a      	ldr	r2, [r7, #0]
    515e:	430a      	orrs	r2, r1
    5160:	621a      	str	r2, [r3, #32]
			break;
    5162:	e001      	b.n	5168 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5164:	2317      	movs	r3, #23
    5166:	e000      	b.n	516a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5168:	2300      	movs	r3, #0
}
    516a:	0018      	movs	r0, r3
    516c:	46bd      	mov	sp, r7
    516e:	b002      	add	sp, #8
    5170:	bd80      	pop	{r7, pc}
    5172:	46c0      	nop			; (mov r8, r8)
    5174:	40000400 	.word	0x40000400

00005178 <system_pinmux_get_config_defaults>:
{
    5178:	b580      	push	{r7, lr}
    517a:	b082      	sub	sp, #8
    517c:	af00      	add	r7, sp, #0
    517e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5180:	687b      	ldr	r3, [r7, #4]
    5182:	2280      	movs	r2, #128	; 0x80
    5184:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5186:	687b      	ldr	r3, [r7, #4]
    5188:	2200      	movs	r2, #0
    518a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    518c:	687b      	ldr	r3, [r7, #4]
    518e:	2201      	movs	r2, #1
    5190:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5192:	687b      	ldr	r3, [r7, #4]
    5194:	2200      	movs	r2, #0
    5196:	70da      	strb	r2, [r3, #3]
}
    5198:	46c0      	nop			; (mov r8, r8)
    519a:	46bd      	mov	sp, r7
    519c:	b002      	add	sp, #8
    519e:	bd80      	pop	{r7, pc}

000051a0 <system_is_debugger_present>:
{
    51a0:	b580      	push	{r7, lr}
    51a2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    51a4:	4b05      	ldr	r3, [pc, #20]	; (51bc <system_is_debugger_present+0x1c>)
    51a6:	789b      	ldrb	r3, [r3, #2]
    51a8:	b2db      	uxtb	r3, r3
    51aa:	001a      	movs	r2, r3
    51ac:	2302      	movs	r3, #2
    51ae:	4013      	ands	r3, r2
    51b0:	1e5a      	subs	r2, r3, #1
    51b2:	4193      	sbcs	r3, r2
    51b4:	b2db      	uxtb	r3, r3
}
    51b6:	0018      	movs	r0, r3
    51b8:	46bd      	mov	sp, r7
    51ba:	bd80      	pop	{r7, pc}
    51bc:	41002000 	.word	0x41002000

000051c0 <usart_is_syncing>:
{
    51c0:	b580      	push	{r7, lr}
    51c2:	b084      	sub	sp, #16
    51c4:	af00      	add	r7, sp, #0
    51c6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	681b      	ldr	r3, [r3, #0]
    51cc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    51ce:	68fb      	ldr	r3, [r7, #12]
    51d0:	69db      	ldr	r3, [r3, #28]
    51d2:	1e5a      	subs	r2, r3, #1
    51d4:	4193      	sbcs	r3, r2
    51d6:	b2db      	uxtb	r3, r3
}
    51d8:	0018      	movs	r0, r3
    51da:	46bd      	mov	sp, r7
    51dc:	b004      	add	sp, #16
    51de:	bd80      	pop	{r7, pc}

000051e0 <_usart_wait_for_sync>:
{
    51e0:	b580      	push	{r7, lr}
    51e2:	b082      	sub	sp, #8
    51e4:	af00      	add	r7, sp, #0
    51e6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    51e8:	46c0      	nop			; (mov r8, r8)
    51ea:	687b      	ldr	r3, [r7, #4]
    51ec:	0018      	movs	r0, r3
    51ee:	4b04      	ldr	r3, [pc, #16]	; (5200 <_usart_wait_for_sync+0x20>)
    51f0:	4798      	blx	r3
    51f2:	1e03      	subs	r3, r0, #0
    51f4:	d1f9      	bne.n	51ea <_usart_wait_for_sync+0xa>
}
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	46bd      	mov	sp, r7
    51fa:	b002      	add	sp, #8
    51fc:	bd80      	pop	{r7, pc}
    51fe:	46c0      	nop			; (mov r8, r8)
    5200:	000051c1 	.word	0x000051c1

00005204 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5204:	b5b0      	push	{r4, r5, r7, lr}
    5206:	b08c      	sub	sp, #48	; 0x30
    5208:	af02      	add	r7, sp, #8
    520a:	6078      	str	r0, [r7, #4]
    520c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    520e:	687b      	ldr	r3, [r7, #4]
    5210:	681b      	ldr	r3, [r3, #0]
    5212:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5214:	687b      	ldr	r3, [r7, #4]
    5216:	681b      	ldr	r3, [r3, #0]
    5218:	0018      	movs	r0, r3
    521a:	4bab      	ldr	r3, [pc, #684]	; (54c8 <_usart_set_config+0x2c4>)
    521c:	4798      	blx	r3
    521e:	0003      	movs	r3, r0
    5220:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5222:	697b      	ldr	r3, [r7, #20]
    5224:	3314      	adds	r3, #20
    5226:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5228:	2300      	movs	r3, #0
    522a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    522c:	2300      	movs	r3, #0
    522e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5230:	230a      	movs	r3, #10
    5232:	18fb      	adds	r3, r7, r3
    5234:	2200      	movs	r2, #0
    5236:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5238:	231f      	movs	r3, #31
    523a:	18fb      	adds	r3, r7, r3
    523c:	2200      	movs	r2, #0
    523e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5240:	231e      	movs	r3, #30
    5242:	18fb      	adds	r3, r7, r3
    5244:	2210      	movs	r2, #16
    5246:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5248:	683b      	ldr	r3, [r7, #0]
    524a:	8a1b      	ldrh	r3, [r3, #16]
    524c:	2280      	movs	r2, #128	; 0x80
    524e:	01d2      	lsls	r2, r2, #7
    5250:	4293      	cmp	r3, r2
    5252:	d01c      	beq.n	528e <_usart_set_config+0x8a>
    5254:	2280      	movs	r2, #128	; 0x80
    5256:	01d2      	lsls	r2, r2, #7
    5258:	4293      	cmp	r3, r2
    525a:	dc06      	bgt.n	526a <_usart_set_config+0x66>
    525c:	2b00      	cmp	r3, #0
    525e:	d00d      	beq.n	527c <_usart_set_config+0x78>
    5260:	2280      	movs	r2, #128	; 0x80
    5262:	0192      	lsls	r2, r2, #6
    5264:	4293      	cmp	r3, r2
    5266:	d024      	beq.n	52b2 <_usart_set_config+0xae>
    5268:	e035      	b.n	52d6 <_usart_set_config+0xd2>
    526a:	22c0      	movs	r2, #192	; 0xc0
    526c:	01d2      	lsls	r2, r2, #7
    526e:	4293      	cmp	r3, r2
    5270:	d028      	beq.n	52c4 <_usart_set_config+0xc0>
    5272:	2280      	movs	r2, #128	; 0x80
    5274:	0212      	lsls	r2, r2, #8
    5276:	4293      	cmp	r3, r2
    5278:	d012      	beq.n	52a0 <_usart_set_config+0x9c>
    527a:	e02c      	b.n	52d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    527c:	231f      	movs	r3, #31
    527e:	18fb      	adds	r3, r7, r3
    5280:	2200      	movs	r2, #0
    5282:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5284:	231e      	movs	r3, #30
    5286:	18fb      	adds	r3, r7, r3
    5288:	2210      	movs	r2, #16
    528a:	701a      	strb	r2, [r3, #0]
			break;
    528c:	e023      	b.n	52d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    528e:	231f      	movs	r3, #31
    5290:	18fb      	adds	r3, r7, r3
    5292:	2200      	movs	r2, #0
    5294:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5296:	231e      	movs	r3, #30
    5298:	18fb      	adds	r3, r7, r3
    529a:	2208      	movs	r2, #8
    529c:	701a      	strb	r2, [r3, #0]
			break;
    529e:	e01a      	b.n	52d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    52a0:	231f      	movs	r3, #31
    52a2:	18fb      	adds	r3, r7, r3
    52a4:	2200      	movs	r2, #0
    52a6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    52a8:	231e      	movs	r3, #30
    52aa:	18fb      	adds	r3, r7, r3
    52ac:	2203      	movs	r2, #3
    52ae:	701a      	strb	r2, [r3, #0]
			break;
    52b0:	e011      	b.n	52d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    52b2:	231f      	movs	r3, #31
    52b4:	18fb      	adds	r3, r7, r3
    52b6:	2201      	movs	r2, #1
    52b8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    52ba:	231e      	movs	r3, #30
    52bc:	18fb      	adds	r3, r7, r3
    52be:	2210      	movs	r2, #16
    52c0:	701a      	strb	r2, [r3, #0]
			break;
    52c2:	e008      	b.n	52d6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    52c4:	231f      	movs	r3, #31
    52c6:	18fb      	adds	r3, r7, r3
    52c8:	2201      	movs	r2, #1
    52ca:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    52cc:	231e      	movs	r3, #30
    52ce:	18fb      	adds	r3, r7, r3
    52d0:	2208      	movs	r2, #8
    52d2:	701a      	strb	r2, [r3, #0]
			break;
    52d4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    52d6:	683b      	ldr	r3, [r7, #0]
    52d8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    52da:	683b      	ldr	r3, [r7, #0]
    52dc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    52de:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    52e0:	683b      	ldr	r3, [r7, #0]
    52e2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    52e4:	4313      	orrs	r3, r2
		config->sample_rate |
    52e6:	683a      	ldr	r2, [r7, #0]
    52e8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    52ea:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    52ec:	683a      	ldr	r2, [r7, #0]
    52ee:	7e12      	ldrb	r2, [r2, #24]
    52f0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    52f2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    52f4:	683a      	ldr	r2, [r7, #0]
    52f6:	2126      	movs	r1, #38	; 0x26
    52f8:	5c52      	ldrb	r2, [r2, r1]
    52fa:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    52fc:	4313      	orrs	r3, r2
    52fe:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    5300:	231d      	movs	r3, #29
    5302:	18fb      	adds	r3, r7, r3
    5304:	2200      	movs	r2, #0
    5306:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5308:	683b      	ldr	r3, [r7, #0]
    530a:	685b      	ldr	r3, [r3, #4]
    530c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    530e:	68fb      	ldr	r3, [r7, #12]
    5310:	2b00      	cmp	r3, #0
    5312:	d01e      	beq.n	5352 <_usart_set_config+0x14e>
    5314:	2280      	movs	r2, #128	; 0x80
    5316:	0552      	lsls	r2, r2, #21
    5318:	4293      	cmp	r3, r2
    531a:	d14f      	bne.n	53bc <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    531c:	683b      	ldr	r3, [r7, #0]
    531e:	2227      	movs	r2, #39	; 0x27
    5320:	5c9b      	ldrb	r3, [r3, r2]
    5322:	2201      	movs	r2, #1
    5324:	4053      	eors	r3, r2
    5326:	b2db      	uxtb	r3, r3
    5328:	2b00      	cmp	r3, #0
    532a:	d046      	beq.n	53ba <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    532c:	683b      	ldr	r3, [r7, #0]
    532e:	6a1d      	ldr	r5, [r3, #32]
    5330:	693b      	ldr	r3, [r7, #16]
    5332:	b2db      	uxtb	r3, r3
    5334:	0018      	movs	r0, r3
    5336:	4b65      	ldr	r3, [pc, #404]	; (54cc <_usart_set_config+0x2c8>)
    5338:	4798      	blx	r3
    533a:	0001      	movs	r1, r0
    533c:	231d      	movs	r3, #29
    533e:	18fc      	adds	r4, r7, r3
    5340:	230a      	movs	r3, #10
    5342:	18fb      	adds	r3, r7, r3
    5344:	001a      	movs	r2, r3
    5346:	0028      	movs	r0, r5
    5348:	4b61      	ldr	r3, [pc, #388]	; (54d0 <_usart_set_config+0x2cc>)
    534a:	4798      	blx	r3
    534c:	0003      	movs	r3, r0
    534e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5350:	e033      	b.n	53ba <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5352:	683b      	ldr	r3, [r7, #0]
    5354:	2227      	movs	r2, #39	; 0x27
    5356:	5c9b      	ldrb	r3, [r3, r2]
    5358:	2b00      	cmp	r3, #0
    535a:	d014      	beq.n	5386 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    535c:	683b      	ldr	r3, [r7, #0]
    535e:	6a18      	ldr	r0, [r3, #32]
    5360:	683b      	ldr	r3, [r7, #0]
    5362:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5364:	231d      	movs	r3, #29
    5366:	18fc      	adds	r4, r7, r3
    5368:	231f      	movs	r3, #31
    536a:	18fb      	adds	r3, r7, r3
    536c:	781d      	ldrb	r5, [r3, #0]
    536e:	230a      	movs	r3, #10
    5370:	18fa      	adds	r2, r7, r3
    5372:	231e      	movs	r3, #30
    5374:	18fb      	adds	r3, r7, r3
    5376:	781b      	ldrb	r3, [r3, #0]
    5378:	9300      	str	r3, [sp, #0]
    537a:	002b      	movs	r3, r5
    537c:	4d55      	ldr	r5, [pc, #340]	; (54d4 <_usart_set_config+0x2d0>)
    537e:	47a8      	blx	r5
    5380:	0003      	movs	r3, r0
    5382:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5384:	e01a      	b.n	53bc <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5386:	683b      	ldr	r3, [r7, #0]
    5388:	6a1d      	ldr	r5, [r3, #32]
    538a:	693b      	ldr	r3, [r7, #16]
    538c:	b2db      	uxtb	r3, r3
    538e:	0018      	movs	r0, r3
    5390:	4b4e      	ldr	r3, [pc, #312]	; (54cc <_usart_set_config+0x2c8>)
    5392:	4798      	blx	r3
				status_code =
    5394:	231d      	movs	r3, #29
    5396:	18fc      	adds	r4, r7, r3
    5398:	231f      	movs	r3, #31
    539a:	18fb      	adds	r3, r7, r3
    539c:	7819      	ldrb	r1, [r3, #0]
    539e:	230a      	movs	r3, #10
    53a0:	18fa      	adds	r2, r7, r3
    53a2:	231e      	movs	r3, #30
    53a4:	18fb      	adds	r3, r7, r3
    53a6:	781b      	ldrb	r3, [r3, #0]
    53a8:	9300      	str	r3, [sp, #0]
    53aa:	000b      	movs	r3, r1
    53ac:	0001      	movs	r1, r0
    53ae:	0028      	movs	r0, r5
    53b0:	4d48      	ldr	r5, [pc, #288]	; (54d4 <_usart_set_config+0x2d0>)
    53b2:	47a8      	blx	r5
    53b4:	0003      	movs	r3, r0
    53b6:	7023      	strb	r3, [r4, #0]
			break;
    53b8:	e000      	b.n	53bc <_usart_set_config+0x1b8>
			break;
    53ba:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    53bc:	231d      	movs	r3, #29
    53be:	18fb      	adds	r3, r7, r3
    53c0:	781b      	ldrb	r3, [r3, #0]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d003      	beq.n	53ce <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    53c6:	231d      	movs	r3, #29
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	781b      	ldrb	r3, [r3, #0]
    53cc:	e077      	b.n	54be <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    53ce:	683b      	ldr	r3, [r7, #0]
    53d0:	7e5b      	ldrb	r3, [r3, #25]
    53d2:	2b00      	cmp	r3, #0
    53d4:	d003      	beq.n	53de <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    53d6:	683b      	ldr	r3, [r7, #0]
    53d8:	7e9a      	ldrb	r2, [r3, #26]
    53da:	69bb      	ldr	r3, [r7, #24]
    53dc:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    53de:	687b      	ldr	r3, [r7, #4]
    53e0:	0018      	movs	r0, r3
    53e2:	4b3d      	ldr	r3, [pc, #244]	; (54d8 <_usart_set_config+0x2d4>)
    53e4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    53e6:	230a      	movs	r3, #10
    53e8:	18fb      	adds	r3, r7, r3
    53ea:	881a      	ldrh	r2, [r3, #0]
    53ec:	69bb      	ldr	r3, [r7, #24]
    53ee:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    53f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    53f2:	68fb      	ldr	r3, [r7, #12]
    53f4:	4313      	orrs	r3, r2
    53f6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    53f8:	683b      	ldr	r3, [r7, #0]
    53fa:	2227      	movs	r2, #39	; 0x27
    53fc:	5c9b      	ldrb	r3, [r3, r2]
    53fe:	2201      	movs	r2, #1
    5400:	4053      	eors	r3, r2
    5402:	b2db      	uxtb	r3, r3
    5404:	2b00      	cmp	r3, #0
    5406:	d003      	beq.n	5410 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    540a:	2204      	movs	r2, #4
    540c:	4313      	orrs	r3, r2
    540e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5410:	683b      	ldr	r3, [r7, #0]
    5412:	7e5b      	ldrb	r3, [r3, #25]
    5414:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5416:	683b      	ldr	r3, [r7, #0]
    5418:	7f1b      	ldrb	r3, [r3, #28]
    541a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    541c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    541e:	683b      	ldr	r3, [r7, #0]
    5420:	7f5b      	ldrb	r3, [r3, #29]
    5422:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5424:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5426:	683b      	ldr	r3, [r7, #0]
    5428:	2124      	movs	r1, #36	; 0x24
    542a:	5c5b      	ldrb	r3, [r3, r1]
    542c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    542e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5430:	683b      	ldr	r3, [r7, #0]
    5432:	2125      	movs	r1, #37	; 0x25
    5434:	5c5b      	ldrb	r3, [r3, r1]
    5436:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5438:	4313      	orrs	r3, r2
	ctrlb =  
    543a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    543c:	683b      	ldr	r3, [r7, #0]
    543e:	7a9b      	ldrb	r3, [r3, #10]
    5440:	001a      	movs	r2, r3
    5442:	6a3b      	ldr	r3, [r7, #32]
    5444:	4313      	orrs	r3, r2
    5446:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    5448:	683b      	ldr	r3, [r7, #0]
    544a:	7adb      	ldrb	r3, [r3, #11]
    544c:	001a      	movs	r2, r3
    544e:	6a3b      	ldr	r3, [r7, #32]
    5450:	4313      	orrs	r3, r2
    5452:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5454:	683b      	ldr	r3, [r7, #0]
    5456:	891b      	ldrh	r3, [r3, #8]
    5458:	2bff      	cmp	r3, #255	; 0xff
    545a:	d00b      	beq.n	5474 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    545e:	2280      	movs	r2, #128	; 0x80
    5460:	0452      	lsls	r2, r2, #17
    5462:	4313      	orrs	r3, r2
    5464:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    5466:	683b      	ldr	r3, [r7, #0]
    5468:	891b      	ldrh	r3, [r3, #8]
    546a:	001a      	movs	r2, r3
    546c:	6a3b      	ldr	r3, [r7, #32]
    546e:	4313      	orrs	r3, r2
    5470:	623b      	str	r3, [r7, #32]
    5472:	e008      	b.n	5486 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5474:	683b      	ldr	r3, [r7, #0]
    5476:	7edb      	ldrb	r3, [r3, #27]
    5478:	2b00      	cmp	r3, #0
    547a:	d004      	beq.n	5486 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    547e:	2280      	movs	r2, #128	; 0x80
    5480:	04d2      	lsls	r2, r2, #19
    5482:	4313      	orrs	r3, r2
    5484:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5486:	683b      	ldr	r3, [r7, #0]
    5488:	222c      	movs	r2, #44	; 0x2c
    548a:	5c9b      	ldrb	r3, [r3, r2]
    548c:	2b00      	cmp	r3, #0
    548e:	d103      	bne.n	5498 <_usart_set_config+0x294>
    5490:	4b12      	ldr	r3, [pc, #72]	; (54dc <_usart_set_config+0x2d8>)
    5492:	4798      	blx	r3
    5494:	1e03      	subs	r3, r0, #0
    5496:	d003      	beq.n	54a0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    549a:	2280      	movs	r2, #128	; 0x80
    549c:	4313      	orrs	r3, r2
    549e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	0018      	movs	r0, r3
    54a4:	4b0c      	ldr	r3, [pc, #48]	; (54d8 <_usart_set_config+0x2d4>)
    54a6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    54a8:	69bb      	ldr	r3, [r7, #24]
    54aa:	6a3a      	ldr	r2, [r7, #32]
    54ac:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    54ae:	687b      	ldr	r3, [r7, #4]
    54b0:	0018      	movs	r0, r3
    54b2:	4b09      	ldr	r3, [pc, #36]	; (54d8 <_usart_set_config+0x2d4>)
    54b4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    54b6:	69bb      	ldr	r3, [r7, #24]
    54b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    54ba:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    54bc:	2300      	movs	r3, #0
}
    54be:	0018      	movs	r0, r3
    54c0:	46bd      	mov	sp, r7
    54c2:	b00a      	add	sp, #40	; 0x28
    54c4:	bdb0      	pop	{r4, r5, r7, pc}
    54c6:	46c0      	nop			; (mov r8, r8)
    54c8:	00003f6d 	.word	0x00003f6d
    54cc:	00006ba5 	.word	0x00006ba5
    54d0:	00003ae7 	.word	0x00003ae7
    54d4:	00003b65 	.word	0x00003b65
    54d8:	000051e1 	.word	0x000051e1
    54dc:	000051a1 	.word	0x000051a1

000054e0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    54e0:	b590      	push	{r4, r7, lr}
    54e2:	b093      	sub	sp, #76	; 0x4c
    54e4:	af00      	add	r7, sp, #0
    54e6:	60f8      	str	r0, [r7, #12]
    54e8:	60b9      	str	r1, [r7, #8]
    54ea:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    54ec:	233b      	movs	r3, #59	; 0x3b
    54ee:	18fb      	adds	r3, r7, r3
    54f0:	2200      	movs	r2, #0
    54f2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    54f4:	68fb      	ldr	r3, [r7, #12]
    54f6:	68ba      	ldr	r2, [r7, #8]
    54f8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    54fa:	68fb      	ldr	r3, [r7, #12]
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5500:	68fb      	ldr	r3, [r7, #12]
    5502:	681b      	ldr	r3, [r3, #0]
    5504:	0018      	movs	r0, r3
    5506:	4b86      	ldr	r3, [pc, #536]	; (5720 <usart_init+0x240>)
    5508:	4798      	blx	r3
    550a:	0003      	movs	r3, r0
    550c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5510:	3302      	adds	r3, #2
    5512:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5516:	3314      	adds	r3, #20
    5518:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    551c:	681b      	ldr	r3, [r3, #0]
    551e:	2201      	movs	r2, #1
    5520:	4013      	ands	r3, r2
    5522:	d001      	beq.n	5528 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5524:	2305      	movs	r3, #5
    5526:	e0f6      	b.n	5716 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    552a:	681b      	ldr	r3, [r3, #0]
    552c:	2202      	movs	r2, #2
    552e:	4013      	ands	r3, r2
    5530:	d001      	beq.n	5536 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    5532:	231c      	movs	r3, #28
    5534:	e0ef      	b.n	5716 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5536:	2201      	movs	r2, #1
    5538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    553a:	409a      	lsls	r2, r3
    553c:	0013      	movs	r3, r2
    553e:	0019      	movs	r1, r3
    5540:	2002      	movs	r0, #2
    5542:	4b78      	ldr	r3, [pc, #480]	; (5724 <usart_init+0x244>)
    5544:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5546:	2324      	movs	r3, #36	; 0x24
    5548:	18fb      	adds	r3, r7, r3
    554a:	0018      	movs	r0, r3
    554c:	4b76      	ldr	r3, [pc, #472]	; (5728 <usart_init+0x248>)
    554e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5550:	687b      	ldr	r3, [r7, #4]
    5552:	222d      	movs	r2, #45	; 0x2d
    5554:	5c9a      	ldrb	r2, [r3, r2]
    5556:	2324      	movs	r3, #36	; 0x24
    5558:	18fb      	adds	r3, r7, r3
    555a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    555e:	b2db      	uxtb	r3, r3
    5560:	2224      	movs	r2, #36	; 0x24
    5562:	18ba      	adds	r2, r7, r2
    5564:	0011      	movs	r1, r2
    5566:	0018      	movs	r0, r3
    5568:	4b70      	ldr	r3, [pc, #448]	; (572c <usart_init+0x24c>)
    556a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    556e:	b2db      	uxtb	r3, r3
    5570:	0018      	movs	r0, r3
    5572:	4b6f      	ldr	r3, [pc, #444]	; (5730 <usart_init+0x250>)
    5574:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5576:	687b      	ldr	r3, [r7, #4]
    5578:	222d      	movs	r2, #45	; 0x2d
    557a:	5c9b      	ldrb	r3, [r3, r2]
    557c:	2100      	movs	r1, #0
    557e:	0018      	movs	r0, r3
    5580:	4b6c      	ldr	r3, [pc, #432]	; (5734 <usart_init+0x254>)
    5582:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	7ada      	ldrb	r2, [r3, #11]
    5588:	68fb      	ldr	r3, [r7, #12]
    558a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	2224      	movs	r2, #36	; 0x24
    5590:	5c9a      	ldrb	r2, [r3, r2]
    5592:	68fb      	ldr	r3, [r7, #12]
    5594:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5596:	687b      	ldr	r3, [r7, #4]
    5598:	2225      	movs	r2, #37	; 0x25
    559a:	5c9a      	ldrb	r2, [r3, r2]
    559c:	68fb      	ldr	r3, [r7, #12]
    559e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	7eda      	ldrb	r2, [r3, #27]
    55a4:	68fb      	ldr	r3, [r7, #12]
    55a6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    55a8:	687b      	ldr	r3, [r7, #4]
    55aa:	7f1a      	ldrb	r2, [r3, #28]
    55ac:	68fb      	ldr	r3, [r7, #12]
    55ae:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    55b0:	233b      	movs	r3, #59	; 0x3b
    55b2:	18fc      	adds	r4, r7, r3
    55b4:	687a      	ldr	r2, [r7, #4]
    55b6:	68fb      	ldr	r3, [r7, #12]
    55b8:	0011      	movs	r1, r2
    55ba:	0018      	movs	r0, r3
    55bc:	4b5e      	ldr	r3, [pc, #376]	; (5738 <usart_init+0x258>)
    55be:	4798      	blx	r3
    55c0:	0003      	movs	r3, r0
    55c2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    55c4:	233b      	movs	r3, #59	; 0x3b
    55c6:	18fb      	adds	r3, r7, r3
    55c8:	781b      	ldrb	r3, [r3, #0]
    55ca:	2b00      	cmp	r3, #0
    55cc:	d003      	beq.n	55d6 <usart_init+0xf6>
		return status_code;
    55ce:	233b      	movs	r3, #59	; 0x3b
    55d0:	18fb      	adds	r3, r7, r3
    55d2:	781b      	ldrb	r3, [r3, #0]
    55d4:	e09f      	b.n	5716 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    55d6:	2320      	movs	r3, #32
    55d8:	18fb      	adds	r3, r7, r3
    55da:	0018      	movs	r0, r3
    55dc:	4b57      	ldr	r3, [pc, #348]	; (573c <usart_init+0x25c>)
    55de:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    55e0:	2320      	movs	r3, #32
    55e2:	18fb      	adds	r3, r7, r3
    55e4:	2200      	movs	r2, #0
    55e6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    55e8:	2320      	movs	r3, #32
    55ea:	18fb      	adds	r3, r7, r3
    55ec:	2200      	movs	r2, #0
    55ee:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    55f0:	687b      	ldr	r3, [r7, #4]
    55f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    55f4:	2310      	movs	r3, #16
    55f6:	18fb      	adds	r3, r7, r3
    55f8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    55fa:	687b      	ldr	r3, [r7, #4]
    55fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    55fe:	2310      	movs	r3, #16
    5600:	18fb      	adds	r3, r7, r3
    5602:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    5608:	2310      	movs	r3, #16
    560a:	18fb      	adds	r3, r7, r3
    560c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    560e:	687b      	ldr	r3, [r7, #4]
    5610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    5612:	2310      	movs	r3, #16
    5614:	18fb      	adds	r3, r7, r3
    5616:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5618:	2347      	movs	r3, #71	; 0x47
    561a:	18fb      	adds	r3, r7, r3
    561c:	2200      	movs	r2, #0
    561e:	701a      	strb	r2, [r3, #0]
    5620:	e02c      	b.n	567c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5622:	2347      	movs	r3, #71	; 0x47
    5624:	18fb      	adds	r3, r7, r3
    5626:	781a      	ldrb	r2, [r3, #0]
    5628:	2310      	movs	r3, #16
    562a:	18fb      	adds	r3, r7, r3
    562c:	0092      	lsls	r2, r2, #2
    562e:	58d3      	ldr	r3, [r2, r3]
    5630:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    5632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5634:	2b00      	cmp	r3, #0
    5636:	d109      	bne.n	564c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5638:	2347      	movs	r3, #71	; 0x47
    563a:	18fb      	adds	r3, r7, r3
    563c:	781a      	ldrb	r2, [r3, #0]
    563e:	68bb      	ldr	r3, [r7, #8]
    5640:	0011      	movs	r1, r2
    5642:	0018      	movs	r0, r3
    5644:	4b3e      	ldr	r3, [pc, #248]	; (5740 <usart_init+0x260>)
    5646:	4798      	blx	r3
    5648:	0003      	movs	r3, r0
    564a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    564c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    564e:	3301      	adds	r3, #1
    5650:	d00d      	beq.n	566e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5654:	b2da      	uxtb	r2, r3
    5656:	2320      	movs	r3, #32
    5658:	18fb      	adds	r3, r7, r3
    565a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    565c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    565e:	0c1b      	lsrs	r3, r3, #16
    5660:	b2db      	uxtb	r3, r3
    5662:	2220      	movs	r2, #32
    5664:	18ba      	adds	r2, r7, r2
    5666:	0011      	movs	r1, r2
    5668:	0018      	movs	r0, r3
    566a:	4b36      	ldr	r3, [pc, #216]	; (5744 <usart_init+0x264>)
    566c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    566e:	2347      	movs	r3, #71	; 0x47
    5670:	18fb      	adds	r3, r7, r3
    5672:	781a      	ldrb	r2, [r3, #0]
    5674:	2347      	movs	r3, #71	; 0x47
    5676:	18fb      	adds	r3, r7, r3
    5678:	3201      	adds	r2, #1
    567a:	701a      	strb	r2, [r3, #0]
    567c:	2347      	movs	r3, #71	; 0x47
    567e:	18fb      	adds	r3, r7, r3
    5680:	781b      	ldrb	r3, [r3, #0]
    5682:	2b03      	cmp	r3, #3
    5684:	d9cd      	bls.n	5622 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5686:	2300      	movs	r3, #0
    5688:	63fb      	str	r3, [r7, #60]	; 0x3c
    568a:	e00a      	b.n	56a2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    568c:	68fa      	ldr	r2, [r7, #12]
    568e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5690:	3302      	adds	r3, #2
    5692:	009b      	lsls	r3, r3, #2
    5694:	18d3      	adds	r3, r2, r3
    5696:	3304      	adds	r3, #4
    5698:	2200      	movs	r2, #0
    569a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    569e:	3301      	adds	r3, #1
    56a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    56a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    56a4:	2b05      	cmp	r3, #5
    56a6:	d9f1      	bls.n	568c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    56a8:	68fb      	ldr	r3, [r7, #12]
    56aa:	2200      	movs	r2, #0
    56ac:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    56ae:	68fb      	ldr	r3, [r7, #12]
    56b0:	2200      	movs	r2, #0
    56b2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    56b4:	68fb      	ldr	r3, [r7, #12]
    56b6:	2200      	movs	r2, #0
    56b8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    56ba:	68fb      	ldr	r3, [r7, #12]
    56bc:	2200      	movs	r2, #0
    56be:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    56c0:	68fb      	ldr	r3, [r7, #12]
    56c2:	2230      	movs	r2, #48	; 0x30
    56c4:	2100      	movs	r1, #0
    56c6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    56c8:	68fb      	ldr	r3, [r7, #12]
    56ca:	2231      	movs	r2, #49	; 0x31
    56cc:	2100      	movs	r1, #0
    56ce:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    56d0:	68fb      	ldr	r3, [r7, #12]
    56d2:	2232      	movs	r2, #50	; 0x32
    56d4:	2100      	movs	r1, #0
    56d6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    56d8:	68fb      	ldr	r3, [r7, #12]
    56da:	2233      	movs	r2, #51	; 0x33
    56dc:	2100      	movs	r1, #0
    56de:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    56e0:	68fb      	ldr	r3, [r7, #12]
    56e2:	681b      	ldr	r3, [r3, #0]
    56e4:	2227      	movs	r2, #39	; 0x27
    56e6:	18bc      	adds	r4, r7, r2
    56e8:	0018      	movs	r0, r3
    56ea:	4b0d      	ldr	r3, [pc, #52]	; (5720 <usart_init+0x240>)
    56ec:	4798      	blx	r3
    56ee:	0003      	movs	r3, r0
    56f0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    56f2:	4a15      	ldr	r2, [pc, #84]	; (5748 <usart_init+0x268>)
    56f4:	2327      	movs	r3, #39	; 0x27
    56f6:	18fb      	adds	r3, r7, r3
    56f8:	781b      	ldrb	r3, [r3, #0]
    56fa:	0011      	movs	r1, r2
    56fc:	0018      	movs	r0, r3
    56fe:	4b13      	ldr	r3, [pc, #76]	; (574c <usart_init+0x26c>)
    5700:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5702:	2327      	movs	r3, #39	; 0x27
    5704:	18fb      	adds	r3, r7, r3
    5706:	781a      	ldrb	r2, [r3, #0]
    5708:	4b11      	ldr	r3, [pc, #68]	; (5750 <usart_init+0x270>)
    570a:	0092      	lsls	r2, r2, #2
    570c:	68f9      	ldr	r1, [r7, #12]
    570e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5710:	233b      	movs	r3, #59	; 0x3b
    5712:	18fb      	adds	r3, r7, r3
    5714:	781b      	ldrb	r3, [r3, #0]
}
    5716:	0018      	movs	r0, r3
    5718:	46bd      	mov	sp, r7
    571a:	b013      	add	sp, #76	; 0x4c
    571c:	bd90      	pop	{r4, r7, pc}
    571e:	46c0      	nop			; (mov r8, r8)
    5720:	00003f6d 	.word	0x00003f6d
    5724:	0000511d 	.word	0x0000511d
    5728:	00005105 	.word	0x00005105
    572c:	00006a81 	.word	0x00006a81
    5730:	00006ac5 	.word	0x00006ac5
    5734:	00003d25 	.word	0x00003d25
    5738:	00005205 	.word	0x00005205
    573c:	00005179 	.word	0x00005179
    5740:	00003db1 	.word	0x00003db1
    5744:	00006d6d 	.word	0x00006d6d
    5748:	00005b0d 	.word	0x00005b0d
    574c:	00003fd1 	.word	0x00003fd1
    5750:	20000a1c 	.word	0x20000a1c

00005754 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5754:	b580      	push	{r7, lr}
    5756:	b084      	sub	sp, #16
    5758:	af00      	add	r7, sp, #0
    575a:	6078      	str	r0, [r7, #4]
    575c:	000a      	movs	r2, r1
    575e:	1cbb      	adds	r3, r7, #2
    5760:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5762:	687b      	ldr	r3, [r7, #4]
    5764:	681b      	ldr	r3, [r3, #0]
    5766:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5768:	687b      	ldr	r3, [r7, #4]
    576a:	79db      	ldrb	r3, [r3, #7]
    576c:	2201      	movs	r2, #1
    576e:	4053      	eors	r3, r2
    5770:	b2db      	uxtb	r3, r3
    5772:	2b00      	cmp	r3, #0
    5774:	d001      	beq.n	577a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5776:	231c      	movs	r3, #28
    5778:	e017      	b.n	57aa <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    577a:	687b      	ldr	r3, [r7, #4]
    577c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    577e:	b29b      	uxth	r3, r3
    5780:	2b00      	cmp	r3, #0
    5782:	d001      	beq.n	5788 <usart_write_wait+0x34>
		return STATUS_BUSY;
    5784:	2305      	movs	r3, #5
    5786:	e010      	b.n	57aa <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5788:	687b      	ldr	r3, [r7, #4]
    578a:	0018      	movs	r0, r3
    578c:	4b09      	ldr	r3, [pc, #36]	; (57b4 <usart_write_wait+0x60>)
    578e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5790:	68fb      	ldr	r3, [r7, #12]
    5792:	1cba      	adds	r2, r7, #2
    5794:	8812      	ldrh	r2, [r2, #0]
    5796:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5798:	46c0      	nop			; (mov r8, r8)
    579a:	68fb      	ldr	r3, [r7, #12]
    579c:	7e1b      	ldrb	r3, [r3, #24]
    579e:	b2db      	uxtb	r3, r3
    57a0:	001a      	movs	r2, r3
    57a2:	2302      	movs	r3, #2
    57a4:	4013      	ands	r3, r2
    57a6:	d0f8      	beq.n	579a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    57a8:	2300      	movs	r3, #0
}
    57aa:	0018      	movs	r0, r3
    57ac:	46bd      	mov	sp, r7
    57ae:	b004      	add	sp, #16
    57b0:	bd80      	pop	{r7, pc}
    57b2:	46c0      	nop			; (mov r8, r8)
    57b4:	000051e1 	.word	0x000051e1

000057b8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    57b8:	b580      	push	{r7, lr}
    57ba:	b084      	sub	sp, #16
    57bc:	af00      	add	r7, sp, #0
    57be:	6078      	str	r0, [r7, #4]
    57c0:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    57c2:	687b      	ldr	r3, [r7, #4]
    57c4:	681b      	ldr	r3, [r3, #0]
    57c6:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    57c8:	687b      	ldr	r3, [r7, #4]
    57ca:	799b      	ldrb	r3, [r3, #6]
    57cc:	2201      	movs	r2, #1
    57ce:	4053      	eors	r3, r2
    57d0:	b2db      	uxtb	r3, r3
    57d2:	2b00      	cmp	r3, #0
    57d4:	d001      	beq.n	57da <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    57d6:	231c      	movs	r3, #28
    57d8:	e05e      	b.n	5898 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    57da:	687b      	ldr	r3, [r7, #4]
    57dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    57de:	b29b      	uxth	r3, r3
    57e0:	2b00      	cmp	r3, #0
    57e2:	d001      	beq.n	57e8 <usart_read_wait+0x30>
		return STATUS_BUSY;
    57e4:	2305      	movs	r3, #5
    57e6:	e057      	b.n	5898 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    57e8:	68fb      	ldr	r3, [r7, #12]
    57ea:	7e1b      	ldrb	r3, [r3, #24]
    57ec:	b2db      	uxtb	r3, r3
    57ee:	001a      	movs	r2, r3
    57f0:	2304      	movs	r3, #4
    57f2:	4013      	ands	r3, r2
    57f4:	d101      	bne.n	57fa <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    57f6:	2305      	movs	r3, #5
    57f8:	e04e      	b.n	5898 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    57fa:	687b      	ldr	r3, [r7, #4]
    57fc:	0018      	movs	r0, r3
    57fe:	4b28      	ldr	r3, [pc, #160]	; (58a0 <usart_read_wait+0xe8>)
    5800:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5802:	68fb      	ldr	r3, [r7, #12]
    5804:	8b5b      	ldrh	r3, [r3, #26]
    5806:	b29b      	uxth	r3, r3
    5808:	b2da      	uxtb	r2, r3
    580a:	230b      	movs	r3, #11
    580c:	18fb      	adds	r3, r7, r3
    580e:	213f      	movs	r1, #63	; 0x3f
    5810:	400a      	ands	r2, r1
    5812:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    5814:	230b      	movs	r3, #11
    5816:	18fb      	adds	r3, r7, r3
    5818:	781b      	ldrb	r3, [r3, #0]
    581a:	2b00      	cmp	r3, #0
    581c:	d036      	beq.n	588c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    581e:	230b      	movs	r3, #11
    5820:	18fb      	adds	r3, r7, r3
    5822:	781b      	ldrb	r3, [r3, #0]
    5824:	2202      	movs	r2, #2
    5826:	4013      	ands	r3, r2
    5828:	d004      	beq.n	5834 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    582a:	68fb      	ldr	r3, [r7, #12]
    582c:	2202      	movs	r2, #2
    582e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    5830:	231a      	movs	r3, #26
    5832:	e031      	b.n	5898 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5834:	230b      	movs	r3, #11
    5836:	18fb      	adds	r3, r7, r3
    5838:	781b      	ldrb	r3, [r3, #0]
    583a:	2204      	movs	r2, #4
    583c:	4013      	ands	r3, r2
    583e:	d004      	beq.n	584a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5840:	68fb      	ldr	r3, [r7, #12]
    5842:	2204      	movs	r2, #4
    5844:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    5846:	231e      	movs	r3, #30
    5848:	e026      	b.n	5898 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    584a:	230b      	movs	r3, #11
    584c:	18fb      	adds	r3, r7, r3
    584e:	781b      	ldrb	r3, [r3, #0]
    5850:	2201      	movs	r2, #1
    5852:	4013      	ands	r3, r2
    5854:	d004      	beq.n	5860 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5856:	68fb      	ldr	r3, [r7, #12]
    5858:	2201      	movs	r2, #1
    585a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    585c:	2313      	movs	r3, #19
    585e:	e01b      	b.n	5898 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5860:	230b      	movs	r3, #11
    5862:	18fb      	adds	r3, r7, r3
    5864:	781b      	ldrb	r3, [r3, #0]
    5866:	2210      	movs	r2, #16
    5868:	4013      	ands	r3, r2
    586a:	d004      	beq.n	5876 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    586c:	68fb      	ldr	r3, [r7, #12]
    586e:	2210      	movs	r2, #16
    5870:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    5872:	2342      	movs	r3, #66	; 0x42
    5874:	e010      	b.n	5898 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5876:	230b      	movs	r3, #11
    5878:	18fb      	adds	r3, r7, r3
    587a:	781b      	ldrb	r3, [r3, #0]
    587c:	2220      	movs	r2, #32
    587e:	4013      	ands	r3, r2
    5880:	d004      	beq.n	588c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5882:	68fb      	ldr	r3, [r7, #12]
    5884:	2220      	movs	r2, #32
    5886:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    5888:	2341      	movs	r3, #65	; 0x41
    588a:	e005      	b.n	5898 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    588c:	68fb      	ldr	r3, [r7, #12]
    588e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5890:	b29a      	uxth	r2, r3
    5892:	683b      	ldr	r3, [r7, #0]
    5894:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    5896:	2300      	movs	r3, #0
}
    5898:	0018      	movs	r0, r3
    589a:	46bd      	mov	sp, r7
    589c:	b004      	add	sp, #16
    589e:	bd80      	pop	{r7, pc}
    58a0:	000051e1 	.word	0x000051e1

000058a4 <system_interrupt_enter_critical_section>:
{
    58a4:	b580      	push	{r7, lr}
    58a6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    58a8:	4b02      	ldr	r3, [pc, #8]	; (58b4 <system_interrupt_enter_critical_section+0x10>)
    58aa:	4798      	blx	r3
}
    58ac:	46c0      	nop			; (mov r8, r8)
    58ae:	46bd      	mov	sp, r7
    58b0:	bd80      	pop	{r7, pc}
    58b2:	46c0      	nop			; (mov r8, r8)
    58b4:	000033f5 	.word	0x000033f5

000058b8 <system_interrupt_leave_critical_section>:
{
    58b8:	b580      	push	{r7, lr}
    58ba:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    58bc:	4b02      	ldr	r3, [pc, #8]	; (58c8 <system_interrupt_leave_critical_section+0x10>)
    58be:	4798      	blx	r3
}
    58c0:	46c0      	nop			; (mov r8, r8)
    58c2:	46bd      	mov	sp, r7
    58c4:	bd80      	pop	{r7, pc}
    58c6:	46c0      	nop			; (mov r8, r8)
    58c8:	00003449 	.word	0x00003449

000058cc <usart_is_syncing>:
{
    58cc:	b580      	push	{r7, lr}
    58ce:	b084      	sub	sp, #16
    58d0:	af00      	add	r7, sp, #0
    58d2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	681b      	ldr	r3, [r3, #0]
    58d8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    58da:	68fb      	ldr	r3, [r7, #12]
    58dc:	69db      	ldr	r3, [r3, #28]
    58de:	1e5a      	subs	r2, r3, #1
    58e0:	4193      	sbcs	r3, r2
    58e2:	b2db      	uxtb	r3, r3
}
    58e4:	0018      	movs	r0, r3
    58e6:	46bd      	mov	sp, r7
    58e8:	b004      	add	sp, #16
    58ea:	bd80      	pop	{r7, pc}

000058ec <_usart_wait_for_sync>:
{
    58ec:	b580      	push	{r7, lr}
    58ee:	b082      	sub	sp, #8
    58f0:	af00      	add	r7, sp, #0
    58f2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    58f4:	46c0      	nop			; (mov r8, r8)
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	0018      	movs	r0, r3
    58fa:	4b04      	ldr	r3, [pc, #16]	; (590c <_usart_wait_for_sync+0x20>)
    58fc:	4798      	blx	r3
    58fe:	1e03      	subs	r3, r0, #0
    5900:	d1f9      	bne.n	58f6 <_usart_wait_for_sync+0xa>
}
    5902:	46c0      	nop			; (mov r8, r8)
    5904:	46bd      	mov	sp, r7
    5906:	b002      	add	sp, #8
    5908:	bd80      	pop	{r7, pc}
    590a:	46c0      	nop			; (mov r8, r8)
    590c:	000058cd 	.word	0x000058cd

00005910 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5910:	b580      	push	{r7, lr}
    5912:	b086      	sub	sp, #24
    5914:	af00      	add	r7, sp, #0
    5916:	60f8      	str	r0, [r7, #12]
    5918:	60b9      	str	r1, [r7, #8]
    591a:	1dbb      	adds	r3, r7, #6
    591c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    591e:	68fb      	ldr	r3, [r7, #12]
    5920:	681b      	ldr	r3, [r3, #0]
    5922:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5924:	4b0f      	ldr	r3, [pc, #60]	; (5964 <_usart_write_buffer+0x54>)
    5926:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    5928:	68fb      	ldr	r3, [r7, #12]
    592a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    592c:	b29b      	uxth	r3, r3
    592e:	2b00      	cmp	r3, #0
    5930:	d003      	beq.n	593a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5932:	4b0d      	ldr	r3, [pc, #52]	; (5968 <_usart_write_buffer+0x58>)
    5934:	4798      	blx	r3
		return STATUS_BUSY;
    5936:	2305      	movs	r3, #5
    5938:	e010      	b.n	595c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    593a:	68fb      	ldr	r3, [r7, #12]
    593c:	1dba      	adds	r2, r7, #6
    593e:	8812      	ldrh	r2, [r2, #0]
    5940:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    5942:	4b09      	ldr	r3, [pc, #36]	; (5968 <_usart_write_buffer+0x58>)
    5944:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    5946:	68fb      	ldr	r3, [r7, #12]
    5948:	68ba      	ldr	r2, [r7, #8]
    594a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    594c:	68fb      	ldr	r3, [r7, #12]
    594e:	2233      	movs	r2, #51	; 0x33
    5950:	2105      	movs	r1, #5
    5952:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    5954:	697b      	ldr	r3, [r7, #20]
    5956:	2201      	movs	r2, #1
    5958:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    595a:	2300      	movs	r3, #0
}
    595c:	0018      	movs	r0, r3
    595e:	46bd      	mov	sp, r7
    5960:	b006      	add	sp, #24
    5962:	bd80      	pop	{r7, pc}
    5964:	000058a5 	.word	0x000058a5
    5968:	000058b9 	.word	0x000058b9

0000596c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    596c:	b580      	push	{r7, lr}
    596e:	b086      	sub	sp, #24
    5970:	af00      	add	r7, sp, #0
    5972:	60f8      	str	r0, [r7, #12]
    5974:	60b9      	str	r1, [r7, #8]
    5976:	1dbb      	adds	r3, r7, #6
    5978:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    597a:	68fb      	ldr	r3, [r7, #12]
    597c:	681b      	ldr	r3, [r3, #0]
    597e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5980:	4b16      	ldr	r3, [pc, #88]	; (59dc <_usart_read_buffer+0x70>)
    5982:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5984:	68fb      	ldr	r3, [r7, #12]
    5986:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5988:	b29b      	uxth	r3, r3
    598a:	2b00      	cmp	r3, #0
    598c:	d003      	beq.n	5996 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    598e:	4b14      	ldr	r3, [pc, #80]	; (59e0 <_usart_read_buffer+0x74>)
    5990:	4798      	blx	r3
		return STATUS_BUSY;
    5992:	2305      	movs	r3, #5
    5994:	e01e      	b.n	59d4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    5996:	68fb      	ldr	r3, [r7, #12]
    5998:	1dba      	adds	r2, r7, #6
    599a:	8812      	ldrh	r2, [r2, #0]
    599c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    599e:	4b10      	ldr	r3, [pc, #64]	; (59e0 <_usart_read_buffer+0x74>)
    59a0:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    59a2:	68fb      	ldr	r3, [r7, #12]
    59a4:	68ba      	ldr	r2, [r7, #8]
    59a6:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    59a8:	68fb      	ldr	r3, [r7, #12]
    59aa:	2232      	movs	r2, #50	; 0x32
    59ac:	2105      	movs	r1, #5
    59ae:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    59b0:	697b      	ldr	r3, [r7, #20]
    59b2:	2204      	movs	r2, #4
    59b4:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    59b6:	68fb      	ldr	r3, [r7, #12]
    59b8:	7a1b      	ldrb	r3, [r3, #8]
    59ba:	2b00      	cmp	r3, #0
    59bc:	d002      	beq.n	59c4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    59be:	697b      	ldr	r3, [r7, #20]
    59c0:	2220      	movs	r2, #32
    59c2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    59c4:	68fb      	ldr	r3, [r7, #12]
    59c6:	7a5b      	ldrb	r3, [r3, #9]
    59c8:	2b00      	cmp	r3, #0
    59ca:	d002      	beq.n	59d2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    59cc:	697b      	ldr	r3, [r7, #20]
    59ce:	2208      	movs	r2, #8
    59d0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    59d2:	2300      	movs	r3, #0
}
    59d4:	0018      	movs	r0, r3
    59d6:	46bd      	mov	sp, r7
    59d8:	b006      	add	sp, #24
    59da:	bd80      	pop	{r7, pc}
    59dc:	000058a5 	.word	0x000058a5
    59e0:	000058b9 	.word	0x000058b9

000059e4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    59e4:	b580      	push	{r7, lr}
    59e6:	b084      	sub	sp, #16
    59e8:	af00      	add	r7, sp, #0
    59ea:	60f8      	str	r0, [r7, #12]
    59ec:	60b9      	str	r1, [r7, #8]
    59ee:	1dfb      	adds	r3, r7, #7
    59f0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    59f2:	1dfb      	adds	r3, r7, #7
    59f4:	781b      	ldrb	r3, [r3, #0]
    59f6:	68fa      	ldr	r2, [r7, #12]
    59f8:	3302      	adds	r3, #2
    59fa:	009b      	lsls	r3, r3, #2
    59fc:	18d3      	adds	r3, r2, r3
    59fe:	3304      	adds	r3, #4
    5a00:	68ba      	ldr	r2, [r7, #8]
    5a02:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5a04:	68fb      	ldr	r3, [r7, #12]
    5a06:	2230      	movs	r2, #48	; 0x30
    5a08:	5c9b      	ldrb	r3, [r3, r2]
    5a0a:	b25a      	sxtb	r2, r3
    5a0c:	1dfb      	adds	r3, r7, #7
    5a0e:	781b      	ldrb	r3, [r3, #0]
    5a10:	2101      	movs	r1, #1
    5a12:	4099      	lsls	r1, r3
    5a14:	000b      	movs	r3, r1
    5a16:	b25b      	sxtb	r3, r3
    5a18:	4313      	orrs	r3, r2
    5a1a:	b25b      	sxtb	r3, r3
    5a1c:	b2d9      	uxtb	r1, r3
    5a1e:	68fb      	ldr	r3, [r7, #12]
    5a20:	2230      	movs	r2, #48	; 0x30
    5a22:	5499      	strb	r1, [r3, r2]
}
    5a24:	46c0      	nop			; (mov r8, r8)
    5a26:	46bd      	mov	sp, r7
    5a28:	b004      	add	sp, #16
    5a2a:	bd80      	pop	{r7, pc}

00005a2c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5a2c:	b580      	push	{r7, lr}
    5a2e:	b084      	sub	sp, #16
    5a30:	af00      	add	r7, sp, #0
    5a32:	60f8      	str	r0, [r7, #12]
    5a34:	60b9      	str	r1, [r7, #8]
    5a36:	1dbb      	adds	r3, r7, #6
    5a38:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5a3a:	1dbb      	adds	r3, r7, #6
    5a3c:	881b      	ldrh	r3, [r3, #0]
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d101      	bne.n	5a46 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5a42:	2317      	movs	r3, #23
    5a44:	e010      	b.n	5a68 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5a46:	68fb      	ldr	r3, [r7, #12]
    5a48:	79db      	ldrb	r3, [r3, #7]
    5a4a:	2201      	movs	r2, #1
    5a4c:	4053      	eors	r3, r2
    5a4e:	b2db      	uxtb	r3, r3
    5a50:	2b00      	cmp	r3, #0
    5a52:	d001      	beq.n	5a58 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5a54:	231c      	movs	r3, #28
    5a56:	e007      	b.n	5a68 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    5a58:	1dbb      	adds	r3, r7, #6
    5a5a:	881a      	ldrh	r2, [r3, #0]
    5a5c:	68b9      	ldr	r1, [r7, #8]
    5a5e:	68fb      	ldr	r3, [r7, #12]
    5a60:	0018      	movs	r0, r3
    5a62:	4b03      	ldr	r3, [pc, #12]	; (5a70 <usart_write_buffer_job+0x44>)
    5a64:	4798      	blx	r3
    5a66:	0003      	movs	r3, r0
}
    5a68:	0018      	movs	r0, r3
    5a6a:	46bd      	mov	sp, r7
    5a6c:	b004      	add	sp, #16
    5a6e:	bd80      	pop	{r7, pc}
    5a70:	00005911 	.word	0x00005911

00005a74 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5a74:	b580      	push	{r7, lr}
    5a76:	b084      	sub	sp, #16
    5a78:	af00      	add	r7, sp, #0
    5a7a:	60f8      	str	r0, [r7, #12]
    5a7c:	60b9      	str	r1, [r7, #8]
    5a7e:	1dbb      	adds	r3, r7, #6
    5a80:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5a82:	1dbb      	adds	r3, r7, #6
    5a84:	881b      	ldrh	r3, [r3, #0]
    5a86:	2b00      	cmp	r3, #0
    5a88:	d101      	bne.n	5a8e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5a8a:	2317      	movs	r3, #23
    5a8c:	e010      	b.n	5ab0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5a8e:	68fb      	ldr	r3, [r7, #12]
    5a90:	799b      	ldrb	r3, [r3, #6]
    5a92:	2201      	movs	r2, #1
    5a94:	4053      	eors	r3, r2
    5a96:	b2db      	uxtb	r3, r3
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d001      	beq.n	5aa0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5a9c:	231c      	movs	r3, #28
    5a9e:	e007      	b.n	5ab0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5aa0:	1dbb      	adds	r3, r7, #6
    5aa2:	881a      	ldrh	r2, [r3, #0]
    5aa4:	68b9      	ldr	r1, [r7, #8]
    5aa6:	68fb      	ldr	r3, [r7, #12]
    5aa8:	0018      	movs	r0, r3
    5aaa:	4b03      	ldr	r3, [pc, #12]	; (5ab8 <usart_read_buffer_job+0x44>)
    5aac:	4798      	blx	r3
    5aae:	0003      	movs	r3, r0
}
    5ab0:	0018      	movs	r0, r3
    5ab2:	46bd      	mov	sp, r7
    5ab4:	b004      	add	sp, #16
    5ab6:	bd80      	pop	{r7, pc}
    5ab8:	0000596d 	.word	0x0000596d

00005abc <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    5abc:	b580      	push	{r7, lr}
    5abe:	b084      	sub	sp, #16
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	6078      	str	r0, [r7, #4]
    5ac4:	000a      	movs	r2, r1
    5ac6:	1cfb      	adds	r3, r7, #3
    5ac8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    5aca:	1cfb      	adds	r3, r7, #3
    5acc:	781b      	ldrb	r3, [r3, #0]
    5ace:	2b00      	cmp	r3, #0
    5ad0:	d002      	beq.n	5ad8 <usart_get_job_status+0x1c>
    5ad2:	2b01      	cmp	r3, #1
    5ad4:	d007      	beq.n	5ae6 <usart_get_job_status+0x2a>
    5ad6:	e00d      	b.n	5af4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    5ad8:	230f      	movs	r3, #15
    5ada:	18fb      	adds	r3, r7, r3
    5adc:	687a      	ldr	r2, [r7, #4]
    5ade:	2132      	movs	r1, #50	; 0x32
    5ae0:	5c52      	ldrb	r2, [r2, r1]
    5ae2:	701a      	strb	r2, [r3, #0]
			break;
    5ae4:	e00b      	b.n	5afe <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    5ae6:	230f      	movs	r3, #15
    5ae8:	18fb      	adds	r3, r7, r3
    5aea:	687a      	ldr	r2, [r7, #4]
    5aec:	2133      	movs	r1, #51	; 0x33
    5aee:	5c52      	ldrb	r2, [r2, r1]
    5af0:	701a      	strb	r2, [r3, #0]
			break;
    5af2:	e004      	b.n	5afe <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    5af4:	230f      	movs	r3, #15
    5af6:	18fb      	adds	r3, r7, r3
    5af8:	2217      	movs	r2, #23
    5afa:	701a      	strb	r2, [r3, #0]
			break;
    5afc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    5afe:	230f      	movs	r3, #15
    5b00:	18fb      	adds	r3, r7, r3
    5b02:	781b      	ldrb	r3, [r3, #0]
}
    5b04:	0018      	movs	r0, r3
    5b06:	46bd      	mov	sp, r7
    5b08:	b004      	add	sp, #16
    5b0a:	bd80      	pop	{r7, pc}

00005b0c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5b0c:	b580      	push	{r7, lr}
    5b0e:	b088      	sub	sp, #32
    5b10:	af00      	add	r7, sp, #0
    5b12:	0002      	movs	r2, r0
    5b14:	1dfb      	adds	r3, r7, #7
    5b16:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5b18:	1dfb      	adds	r3, r7, #7
    5b1a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    5b1c:	4ba3      	ldr	r3, [pc, #652]	; (5dac <_usart_interrupt_handler+0x2a0>)
    5b1e:	0092      	lsls	r2, r2, #2
    5b20:	58d3      	ldr	r3, [r2, r3]
    5b22:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5b24:	69bb      	ldr	r3, [r7, #24]
    5b26:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    5b28:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    5b2a:	69bb      	ldr	r3, [r7, #24]
    5b2c:	0018      	movs	r0, r3
    5b2e:	4ba0      	ldr	r3, [pc, #640]	; (5db0 <_usart_interrupt_handler+0x2a4>)
    5b30:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5b32:	697b      	ldr	r3, [r7, #20]
    5b34:	7e1b      	ldrb	r3, [r3, #24]
    5b36:	b2da      	uxtb	r2, r3
    5b38:	2312      	movs	r3, #18
    5b3a:	18fb      	adds	r3, r7, r3
    5b3c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    5b3e:	697b      	ldr	r3, [r7, #20]
    5b40:	7d9b      	ldrb	r3, [r3, #22]
    5b42:	b2db      	uxtb	r3, r3
    5b44:	b29a      	uxth	r2, r3
    5b46:	2312      	movs	r3, #18
    5b48:	18fb      	adds	r3, r7, r3
    5b4a:	2112      	movs	r1, #18
    5b4c:	1879      	adds	r1, r7, r1
    5b4e:	8809      	ldrh	r1, [r1, #0]
    5b50:	400a      	ands	r2, r1
    5b52:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    5b54:	69bb      	ldr	r3, [r7, #24]
    5b56:	2230      	movs	r2, #48	; 0x30
    5b58:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    5b5a:	69ba      	ldr	r2, [r7, #24]
    5b5c:	2131      	movs	r1, #49	; 0x31
    5b5e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    5b60:	4013      	ands	r3, r2
    5b62:	b2da      	uxtb	r2, r3
    5b64:	2310      	movs	r3, #16
    5b66:	18fb      	adds	r3, r7, r3
    5b68:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5b6a:	2312      	movs	r3, #18
    5b6c:	18fb      	adds	r3, r7, r3
    5b6e:	881b      	ldrh	r3, [r3, #0]
    5b70:	2201      	movs	r2, #1
    5b72:	4013      	ands	r3, r2
    5b74:	d044      	beq.n	5c00 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5b76:	69bb      	ldr	r3, [r7, #24]
    5b78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5b7a:	b29b      	uxth	r3, r3
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	d03c      	beq.n	5bfa <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5b80:	69bb      	ldr	r3, [r7, #24]
    5b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b84:	781b      	ldrb	r3, [r3, #0]
    5b86:	b2da      	uxtb	r2, r3
    5b88:	231c      	movs	r3, #28
    5b8a:	18fb      	adds	r3, r7, r3
    5b8c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5b8e:	69bb      	ldr	r3, [r7, #24]
    5b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b92:	1c5a      	adds	r2, r3, #1
    5b94:	69bb      	ldr	r3, [r7, #24]
    5b96:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5b98:	69bb      	ldr	r3, [r7, #24]
    5b9a:	795b      	ldrb	r3, [r3, #5]
    5b9c:	2b01      	cmp	r3, #1
    5b9e:	d113      	bne.n	5bc8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5ba0:	69bb      	ldr	r3, [r7, #24]
    5ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ba4:	781b      	ldrb	r3, [r3, #0]
    5ba6:	b2db      	uxtb	r3, r3
    5ba8:	021b      	lsls	r3, r3, #8
    5baa:	b21a      	sxth	r2, r3
    5bac:	231c      	movs	r3, #28
    5bae:	18fb      	adds	r3, r7, r3
    5bb0:	2100      	movs	r1, #0
    5bb2:	5e5b      	ldrsh	r3, [r3, r1]
    5bb4:	4313      	orrs	r3, r2
    5bb6:	b21a      	sxth	r2, r3
    5bb8:	231c      	movs	r3, #28
    5bba:	18fb      	adds	r3, r7, r3
    5bbc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5bbe:	69bb      	ldr	r3, [r7, #24]
    5bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bc2:	1c5a      	adds	r2, r3, #1
    5bc4:	69bb      	ldr	r3, [r7, #24]
    5bc6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5bc8:	231c      	movs	r3, #28
    5bca:	18fb      	adds	r3, r7, r3
    5bcc:	881b      	ldrh	r3, [r3, #0]
    5bce:	05db      	lsls	r3, r3, #23
    5bd0:	0ddb      	lsrs	r3, r3, #23
    5bd2:	b29a      	uxth	r2, r3
    5bd4:	697b      	ldr	r3, [r7, #20]
    5bd6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5bd8:	69bb      	ldr	r3, [r7, #24]
    5bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5bdc:	b29b      	uxth	r3, r3
    5bde:	3b01      	subs	r3, #1
    5be0:	b29b      	uxth	r3, r3
    5be2:	69ba      	ldr	r2, [r7, #24]
    5be4:	1c19      	adds	r1, r3, #0
    5be6:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5be8:	2b00      	cmp	r3, #0
    5bea:	d109      	bne.n	5c00 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5bec:	697b      	ldr	r3, [r7, #20]
    5bee:	2201      	movs	r2, #1
    5bf0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5bf2:	697b      	ldr	r3, [r7, #20]
    5bf4:	2202      	movs	r2, #2
    5bf6:	759a      	strb	r2, [r3, #22]
    5bf8:	e002      	b.n	5c00 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5bfa:	697b      	ldr	r3, [r7, #20]
    5bfc:	2201      	movs	r2, #1
    5bfe:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5c00:	2312      	movs	r3, #18
    5c02:	18fb      	adds	r3, r7, r3
    5c04:	881b      	ldrh	r3, [r3, #0]
    5c06:	2202      	movs	r2, #2
    5c08:	4013      	ands	r3, r2
    5c0a:	d011      	beq.n	5c30 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5c0c:	697b      	ldr	r3, [r7, #20]
    5c0e:	2202      	movs	r2, #2
    5c10:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5c12:	69bb      	ldr	r3, [r7, #24]
    5c14:	2233      	movs	r2, #51	; 0x33
    5c16:	2100      	movs	r1, #0
    5c18:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5c1a:	2310      	movs	r3, #16
    5c1c:	18fb      	adds	r3, r7, r3
    5c1e:	881b      	ldrh	r3, [r3, #0]
    5c20:	2201      	movs	r2, #1
    5c22:	4013      	ands	r3, r2
    5c24:	d004      	beq.n	5c30 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5c26:	69bb      	ldr	r3, [r7, #24]
    5c28:	68db      	ldr	r3, [r3, #12]
    5c2a:	69ba      	ldr	r2, [r7, #24]
    5c2c:	0010      	movs	r0, r2
    5c2e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5c30:	2312      	movs	r3, #18
    5c32:	18fb      	adds	r3, r7, r3
    5c34:	881b      	ldrh	r3, [r3, #0]
    5c36:	2204      	movs	r2, #4
    5c38:	4013      	ands	r3, r2
    5c3a:	d100      	bne.n	5c3e <_usart_interrupt_handler+0x132>
    5c3c:	e0bd      	b.n	5dba <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    5c3e:	69bb      	ldr	r3, [r7, #24]
    5c40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5c42:	b29b      	uxth	r3, r3
    5c44:	2b00      	cmp	r3, #0
    5c46:	d100      	bne.n	5c4a <_usart_interrupt_handler+0x13e>
    5c48:	e0b4      	b.n	5db4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5c4a:	697b      	ldr	r3, [r7, #20]
    5c4c:	8b5b      	ldrh	r3, [r3, #26]
    5c4e:	b29b      	uxth	r3, r3
    5c50:	b2da      	uxtb	r2, r3
    5c52:	231f      	movs	r3, #31
    5c54:	18fb      	adds	r3, r7, r3
    5c56:	213f      	movs	r1, #63	; 0x3f
    5c58:	400a      	ands	r2, r1
    5c5a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5c5c:	231f      	movs	r3, #31
    5c5e:	18fb      	adds	r3, r7, r3
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	2208      	movs	r2, #8
    5c64:	4013      	ands	r3, r2
    5c66:	d007      	beq.n	5c78 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5c68:	231f      	movs	r3, #31
    5c6a:	18fb      	adds	r3, r7, r3
    5c6c:	221f      	movs	r2, #31
    5c6e:	18ba      	adds	r2, r7, r2
    5c70:	7812      	ldrb	r2, [r2, #0]
    5c72:	2108      	movs	r1, #8
    5c74:	438a      	bics	r2, r1
    5c76:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5c78:	231f      	movs	r3, #31
    5c7a:	18fb      	adds	r3, r7, r3
    5c7c:	781b      	ldrb	r3, [r3, #0]
    5c7e:	2b00      	cmp	r3, #0
    5c80:	d050      	beq.n	5d24 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5c82:	231f      	movs	r3, #31
    5c84:	18fb      	adds	r3, r7, r3
    5c86:	781b      	ldrb	r3, [r3, #0]
    5c88:	2202      	movs	r2, #2
    5c8a:	4013      	ands	r3, r2
    5c8c:	d007      	beq.n	5c9e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5c8e:	69bb      	ldr	r3, [r7, #24]
    5c90:	2232      	movs	r2, #50	; 0x32
    5c92:	211a      	movs	r1, #26
    5c94:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5c96:	697b      	ldr	r3, [r7, #20]
    5c98:	2202      	movs	r2, #2
    5c9a:	835a      	strh	r2, [r3, #26]
    5c9c:	e036      	b.n	5d0c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5c9e:	231f      	movs	r3, #31
    5ca0:	18fb      	adds	r3, r7, r3
    5ca2:	781b      	ldrb	r3, [r3, #0]
    5ca4:	2204      	movs	r2, #4
    5ca6:	4013      	ands	r3, r2
    5ca8:	d007      	beq.n	5cba <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5caa:	69bb      	ldr	r3, [r7, #24]
    5cac:	2232      	movs	r2, #50	; 0x32
    5cae:	211e      	movs	r1, #30
    5cb0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5cb2:	697b      	ldr	r3, [r7, #20]
    5cb4:	2204      	movs	r2, #4
    5cb6:	835a      	strh	r2, [r3, #26]
    5cb8:	e028      	b.n	5d0c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5cba:	231f      	movs	r3, #31
    5cbc:	18fb      	adds	r3, r7, r3
    5cbe:	781b      	ldrb	r3, [r3, #0]
    5cc0:	2201      	movs	r2, #1
    5cc2:	4013      	ands	r3, r2
    5cc4:	d007      	beq.n	5cd6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    5cc6:	69bb      	ldr	r3, [r7, #24]
    5cc8:	2232      	movs	r2, #50	; 0x32
    5cca:	2113      	movs	r1, #19
    5ccc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5cce:	697b      	ldr	r3, [r7, #20]
    5cd0:	2201      	movs	r2, #1
    5cd2:	835a      	strh	r2, [r3, #26]
    5cd4:	e01a      	b.n	5d0c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5cd6:	231f      	movs	r3, #31
    5cd8:	18fb      	adds	r3, r7, r3
    5cda:	781b      	ldrb	r3, [r3, #0]
    5cdc:	2210      	movs	r2, #16
    5cde:	4013      	ands	r3, r2
    5ce0:	d007      	beq.n	5cf2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5ce2:	69bb      	ldr	r3, [r7, #24]
    5ce4:	2232      	movs	r2, #50	; 0x32
    5ce6:	2142      	movs	r1, #66	; 0x42
    5ce8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5cea:	697b      	ldr	r3, [r7, #20]
    5cec:	2210      	movs	r2, #16
    5cee:	835a      	strh	r2, [r3, #26]
    5cf0:	e00c      	b.n	5d0c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5cf2:	231f      	movs	r3, #31
    5cf4:	18fb      	adds	r3, r7, r3
    5cf6:	781b      	ldrb	r3, [r3, #0]
    5cf8:	2220      	movs	r2, #32
    5cfa:	4013      	ands	r3, r2
    5cfc:	d006      	beq.n	5d0c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5cfe:	69bb      	ldr	r3, [r7, #24]
    5d00:	2232      	movs	r2, #50	; 0x32
    5d02:	2141      	movs	r1, #65	; 0x41
    5d04:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5d06:	697b      	ldr	r3, [r7, #20]
    5d08:	2220      	movs	r2, #32
    5d0a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5d0c:	2310      	movs	r3, #16
    5d0e:	18fb      	adds	r3, r7, r3
    5d10:	881b      	ldrh	r3, [r3, #0]
    5d12:	2204      	movs	r2, #4
    5d14:	4013      	ands	r3, r2
				if (callback_status
    5d16:	d050      	beq.n	5dba <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5d18:	69bb      	ldr	r3, [r7, #24]
    5d1a:	695b      	ldr	r3, [r3, #20]
    5d1c:	69ba      	ldr	r2, [r7, #24]
    5d1e:	0010      	movs	r0, r2
    5d20:	4798      	blx	r3
    5d22:	e04a      	b.n	5dba <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5d24:	697b      	ldr	r3, [r7, #20]
    5d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5d28:	b29a      	uxth	r2, r3
    5d2a:	230e      	movs	r3, #14
    5d2c:	18fb      	adds	r3, r7, r3
    5d2e:	05d2      	lsls	r2, r2, #23
    5d30:	0dd2      	lsrs	r2, r2, #23
    5d32:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5d34:	69bb      	ldr	r3, [r7, #24]
    5d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d38:	220e      	movs	r2, #14
    5d3a:	18ba      	adds	r2, r7, r2
    5d3c:	8812      	ldrh	r2, [r2, #0]
    5d3e:	b2d2      	uxtb	r2, r2
    5d40:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5d42:	69bb      	ldr	r3, [r7, #24]
    5d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d46:	1c5a      	adds	r2, r3, #1
    5d48:	69bb      	ldr	r3, [r7, #24]
    5d4a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5d4c:	69bb      	ldr	r3, [r7, #24]
    5d4e:	795b      	ldrb	r3, [r3, #5]
    5d50:	2b01      	cmp	r3, #1
    5d52:	d10d      	bne.n	5d70 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5d54:	69bb      	ldr	r3, [r7, #24]
    5d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d58:	220e      	movs	r2, #14
    5d5a:	18ba      	adds	r2, r7, r2
    5d5c:	8812      	ldrh	r2, [r2, #0]
    5d5e:	0a12      	lsrs	r2, r2, #8
    5d60:	b292      	uxth	r2, r2
    5d62:	b2d2      	uxtb	r2, r2
    5d64:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5d66:	69bb      	ldr	r3, [r7, #24]
    5d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d6a:	1c5a      	adds	r2, r3, #1
    5d6c:	69bb      	ldr	r3, [r7, #24]
    5d6e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5d70:	69bb      	ldr	r3, [r7, #24]
    5d72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5d74:	b29b      	uxth	r3, r3
    5d76:	3b01      	subs	r3, #1
    5d78:	b29b      	uxth	r3, r3
    5d7a:	69ba      	ldr	r2, [r7, #24]
    5d7c:	1c19      	adds	r1, r3, #0
    5d7e:	8591      	strh	r1, [r2, #44]	; 0x2c
    5d80:	2b00      	cmp	r3, #0
    5d82:	d11a      	bne.n	5dba <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5d84:	697b      	ldr	r3, [r7, #20]
    5d86:	2204      	movs	r2, #4
    5d88:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5d8a:	69bb      	ldr	r3, [r7, #24]
    5d8c:	2232      	movs	r2, #50	; 0x32
    5d8e:	2100      	movs	r1, #0
    5d90:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5d92:	2310      	movs	r3, #16
    5d94:	18fb      	adds	r3, r7, r3
    5d96:	881b      	ldrh	r3, [r3, #0]
    5d98:	2202      	movs	r2, #2
    5d9a:	4013      	ands	r3, r2
					if (callback_status
    5d9c:	d00d      	beq.n	5dba <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5d9e:	69bb      	ldr	r3, [r7, #24]
    5da0:	691b      	ldr	r3, [r3, #16]
    5da2:	69ba      	ldr	r2, [r7, #24]
    5da4:	0010      	movs	r0, r2
    5da6:	4798      	blx	r3
    5da8:	e007      	b.n	5dba <_usart_interrupt_handler+0x2ae>
    5daa:	46c0      	nop			; (mov r8, r8)
    5dac:	20000a1c 	.word	0x20000a1c
    5db0:	000058ed 	.word	0x000058ed
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5db4:	697b      	ldr	r3, [r7, #20]
    5db6:	2204      	movs	r2, #4
    5db8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5dba:	2312      	movs	r3, #18
    5dbc:	18fb      	adds	r3, r7, r3
    5dbe:	881b      	ldrh	r3, [r3, #0]
    5dc0:	2210      	movs	r2, #16
    5dc2:	4013      	ands	r3, r2
    5dc4:	d010      	beq.n	5de8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5dc6:	697b      	ldr	r3, [r7, #20]
    5dc8:	2210      	movs	r2, #16
    5dca:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5dcc:	697b      	ldr	r3, [r7, #20]
    5dce:	2210      	movs	r2, #16
    5dd0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5dd2:	2310      	movs	r3, #16
    5dd4:	18fb      	adds	r3, r7, r3
    5dd6:	881b      	ldrh	r3, [r3, #0]
    5dd8:	2210      	movs	r2, #16
    5dda:	4013      	ands	r3, r2
    5ddc:	d004      	beq.n	5de8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5dde:	69bb      	ldr	r3, [r7, #24]
    5de0:	69db      	ldr	r3, [r3, #28]
    5de2:	69ba      	ldr	r2, [r7, #24]
    5de4:	0010      	movs	r0, r2
    5de6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5de8:	2312      	movs	r3, #18
    5dea:	18fb      	adds	r3, r7, r3
    5dec:	881b      	ldrh	r3, [r3, #0]
    5dee:	2220      	movs	r2, #32
    5df0:	4013      	ands	r3, r2
    5df2:	d010      	beq.n	5e16 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5df4:	697b      	ldr	r3, [r7, #20]
    5df6:	2220      	movs	r2, #32
    5df8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5dfa:	697b      	ldr	r3, [r7, #20]
    5dfc:	2220      	movs	r2, #32
    5dfe:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5e00:	2310      	movs	r3, #16
    5e02:	18fb      	adds	r3, r7, r3
    5e04:	881b      	ldrh	r3, [r3, #0]
    5e06:	2208      	movs	r2, #8
    5e08:	4013      	ands	r3, r2
    5e0a:	d004      	beq.n	5e16 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5e0c:	69bb      	ldr	r3, [r7, #24]
    5e0e:	699b      	ldr	r3, [r3, #24]
    5e10:	69ba      	ldr	r2, [r7, #24]
    5e12:	0010      	movs	r0, r2
    5e14:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5e16:	2312      	movs	r3, #18
    5e18:	18fb      	adds	r3, r7, r3
    5e1a:	881b      	ldrh	r3, [r3, #0]
    5e1c:	2208      	movs	r2, #8
    5e1e:	4013      	ands	r3, r2
    5e20:	d010      	beq.n	5e44 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5e22:	697b      	ldr	r3, [r7, #20]
    5e24:	2208      	movs	r2, #8
    5e26:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5e28:	697b      	ldr	r3, [r7, #20]
    5e2a:	2208      	movs	r2, #8
    5e2c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5e2e:	2310      	movs	r3, #16
    5e30:	18fb      	adds	r3, r7, r3
    5e32:	881b      	ldrh	r3, [r3, #0]
    5e34:	2220      	movs	r2, #32
    5e36:	4013      	ands	r3, r2
    5e38:	d004      	beq.n	5e44 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5e3a:	69bb      	ldr	r3, [r7, #24]
    5e3c:	6a1b      	ldr	r3, [r3, #32]
    5e3e:	69ba      	ldr	r2, [r7, #24]
    5e40:	0010      	movs	r0, r2
    5e42:	4798      	blx	r3
		}
	}
#endif
}
    5e44:	46c0      	nop			; (mov r8, r8)
    5e46:	46bd      	mov	sp, r7
    5e48:	b008      	add	sp, #32
    5e4a:	bd80      	pop	{r7, pc}

00005e4c <system_gclk_gen_get_config_defaults>:
{
    5e4c:	b580      	push	{r7, lr}
    5e4e:	b082      	sub	sp, #8
    5e50:	af00      	add	r7, sp, #0
    5e52:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    5e54:	687b      	ldr	r3, [r7, #4]
    5e56:	2201      	movs	r2, #1
    5e58:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5e5a:	687b      	ldr	r3, [r7, #4]
    5e5c:	2200      	movs	r2, #0
    5e5e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	2206      	movs	r2, #6
    5e64:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    5e66:	687b      	ldr	r3, [r7, #4]
    5e68:	2200      	movs	r2, #0
    5e6a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5e6c:	687b      	ldr	r3, [r7, #4]
    5e6e:	2200      	movs	r2, #0
    5e70:	725a      	strb	r2, [r3, #9]
}
    5e72:	46c0      	nop			; (mov r8, r8)
    5e74:	46bd      	mov	sp, r7
    5e76:	b002      	add	sp, #8
    5e78:	bd80      	pop	{r7, pc}

00005e7a <system_gclk_chan_get_config_defaults>:
{
    5e7a:	b580      	push	{r7, lr}
    5e7c:	b082      	sub	sp, #8
    5e7e:	af00      	add	r7, sp, #0
    5e80:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5e82:	687b      	ldr	r3, [r7, #4]
    5e84:	2200      	movs	r2, #0
    5e86:	701a      	strb	r2, [r3, #0]
}
    5e88:	46c0      	nop			; (mov r8, r8)
    5e8a:	46bd      	mov	sp, r7
    5e8c:	b002      	add	sp, #8
    5e8e:	bd80      	pop	{r7, pc}

00005e90 <system_clock_source_xosc32k_get_config_defaults>:
{
    5e90:	b580      	push	{r7, lr}
    5e92:	b082      	sub	sp, #8
    5e94:	af00      	add	r7, sp, #0
    5e96:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5e98:	687b      	ldr	r3, [r7, #4]
    5e9a:	2200      	movs	r2, #0
    5e9c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5e9e:	687b      	ldr	r3, [r7, #4]
    5ea0:	2204      	movs	r2, #4
    5ea2:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5ea4:	687b      	ldr	r3, [r7, #4]
    5ea6:	2200      	movs	r2, #0
    5ea8:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5eaa:	687b      	ldr	r3, [r7, #4]
    5eac:	2280      	movs	r2, #128	; 0x80
    5eae:	0212      	lsls	r2, r2, #8
    5eb0:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	2200      	movs	r2, #0
    5eb6:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5eb8:	687b      	ldr	r3, [r7, #4]
    5eba:	2201      	movs	r2, #1
    5ebc:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5ebe:	687b      	ldr	r3, [r7, #4]
    5ec0:	2200      	movs	r2, #0
    5ec2:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5ec4:	687b      	ldr	r3, [r7, #4]
    5ec6:	2201      	movs	r2, #1
    5ec8:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5eca:	687b      	ldr	r3, [r7, #4]
    5ecc:	2200      	movs	r2, #0
    5ece:	739a      	strb	r2, [r3, #14]
}
    5ed0:	46c0      	nop			; (mov r8, r8)
    5ed2:	46bd      	mov	sp, r7
    5ed4:	b002      	add	sp, #8
    5ed6:	bd80      	pop	{r7, pc}

00005ed8 <system_clock_source_osc8m_get_config_defaults>:
{
    5ed8:	b580      	push	{r7, lr}
    5eda:	b082      	sub	sp, #8
    5edc:	af00      	add	r7, sp, #0
    5ede:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5ee0:	687b      	ldr	r3, [r7, #4]
    5ee2:	2203      	movs	r2, #3
    5ee4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5ee6:	687b      	ldr	r3, [r7, #4]
    5ee8:	2200      	movs	r2, #0
    5eea:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5eec:	687b      	ldr	r3, [r7, #4]
    5eee:	2201      	movs	r2, #1
    5ef0:	709a      	strb	r2, [r3, #2]
}
    5ef2:	46c0      	nop			; (mov r8, r8)
    5ef4:	46bd      	mov	sp, r7
    5ef6:	b002      	add	sp, #8
    5ef8:	bd80      	pop	{r7, pc}

00005efa <system_clock_source_dfll_get_config_defaults>:
{
    5efa:	b580      	push	{r7, lr}
    5efc:	b082      	sub	sp, #8
    5efe:	af00      	add	r7, sp, #0
    5f00:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5f02:	687b      	ldr	r3, [r7, #4]
    5f04:	2200      	movs	r2, #0
    5f06:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	2200      	movs	r2, #0
    5f0c:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5f0e:	687b      	ldr	r3, [r7, #4]
    5f10:	2200      	movs	r2, #0
    5f12:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5f14:	687b      	ldr	r3, [r7, #4]
    5f16:	2200      	movs	r2, #0
    5f18:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5f1a:	687b      	ldr	r3, [r7, #4]
    5f1c:	2200      	movs	r2, #0
    5f1e:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	2201      	movs	r2, #1
    5f24:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5f26:	687b      	ldr	r3, [r7, #4]
    5f28:	2207      	movs	r2, #7
    5f2a:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	223f      	movs	r2, #63	; 0x3f
    5f30:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    5f32:	687b      	ldr	r3, [r7, #4]
    5f34:	2201      	movs	r2, #1
    5f36:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	2201      	movs	r2, #1
    5f3c:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5f3e:	687b      	ldr	r3, [r7, #4]
    5f40:	2206      	movs	r2, #6
    5f42:	821a      	strh	r2, [r3, #16]
}
    5f44:	46c0      	nop			; (mov r8, r8)
    5f46:	46bd      	mov	sp, r7
    5f48:	b002      	add	sp, #8
    5f4a:	bd80      	pop	{r7, pc}

00005f4c <system_cpu_clock_set_divider>:
{
    5f4c:	b580      	push	{r7, lr}
    5f4e:	b082      	sub	sp, #8
    5f50:	af00      	add	r7, sp, #0
    5f52:	0002      	movs	r2, r0
    5f54:	1dfb      	adds	r3, r7, #7
    5f56:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5f58:	4a03      	ldr	r2, [pc, #12]	; (5f68 <system_cpu_clock_set_divider+0x1c>)
    5f5a:	1dfb      	adds	r3, r7, #7
    5f5c:	781b      	ldrb	r3, [r3, #0]
    5f5e:	7213      	strb	r3, [r2, #8]
}
    5f60:	46c0      	nop			; (mov r8, r8)
    5f62:	46bd      	mov	sp, r7
    5f64:	b002      	add	sp, #8
    5f66:	bd80      	pop	{r7, pc}
    5f68:	40000400 	.word	0x40000400

00005f6c <system_apb_clock_set_divider>:
{
    5f6c:	b580      	push	{r7, lr}
    5f6e:	b082      	sub	sp, #8
    5f70:	af00      	add	r7, sp, #0
    5f72:	0002      	movs	r2, r0
    5f74:	1dfb      	adds	r3, r7, #7
    5f76:	701a      	strb	r2, [r3, #0]
    5f78:	1dbb      	adds	r3, r7, #6
    5f7a:	1c0a      	adds	r2, r1, #0
    5f7c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5f7e:	1dfb      	adds	r3, r7, #7
    5f80:	781b      	ldrb	r3, [r3, #0]
    5f82:	2b01      	cmp	r3, #1
    5f84:	d008      	beq.n	5f98 <system_apb_clock_set_divider+0x2c>
    5f86:	2b02      	cmp	r3, #2
    5f88:	d00b      	beq.n	5fa2 <system_apb_clock_set_divider+0x36>
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	d10e      	bne.n	5fac <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    5f8e:	4a0b      	ldr	r2, [pc, #44]	; (5fbc <system_apb_clock_set_divider+0x50>)
    5f90:	1dbb      	adds	r3, r7, #6
    5f92:	781b      	ldrb	r3, [r3, #0]
    5f94:	7253      	strb	r3, [r2, #9]
			break;
    5f96:	e00b      	b.n	5fb0 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5f98:	4a08      	ldr	r2, [pc, #32]	; (5fbc <system_apb_clock_set_divider+0x50>)
    5f9a:	1dbb      	adds	r3, r7, #6
    5f9c:	781b      	ldrb	r3, [r3, #0]
    5f9e:	7293      	strb	r3, [r2, #10]
			break;
    5fa0:	e006      	b.n	5fb0 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5fa2:	4a06      	ldr	r2, [pc, #24]	; (5fbc <system_apb_clock_set_divider+0x50>)
    5fa4:	1dbb      	adds	r3, r7, #6
    5fa6:	781b      	ldrb	r3, [r3, #0]
    5fa8:	72d3      	strb	r3, [r2, #11]
			break;
    5faa:	e001      	b.n	5fb0 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5fac:	2317      	movs	r3, #23
    5fae:	e000      	b.n	5fb2 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    5fb0:	2300      	movs	r3, #0
}
    5fb2:	0018      	movs	r0, r3
    5fb4:	46bd      	mov	sp, r7
    5fb6:	b002      	add	sp, #8
    5fb8:	bd80      	pop	{r7, pc}
    5fba:	46c0      	nop			; (mov r8, r8)
    5fbc:	40000400 	.word	0x40000400

00005fc0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b082      	sub	sp, #8
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	0002      	movs	r2, r0
    5fc8:	1dfb      	adds	r3, r7, #7
    5fca:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5fcc:	4a08      	ldr	r2, [pc, #32]	; (5ff0 <system_flash_set_waitstates+0x30>)
    5fce:	1dfb      	adds	r3, r7, #7
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	210f      	movs	r1, #15
    5fd4:	400b      	ands	r3, r1
    5fd6:	b2d9      	uxtb	r1, r3
    5fd8:	6853      	ldr	r3, [r2, #4]
    5fda:	200f      	movs	r0, #15
    5fdc:	4001      	ands	r1, r0
    5fde:	0049      	lsls	r1, r1, #1
    5fe0:	201e      	movs	r0, #30
    5fe2:	4383      	bics	r3, r0
    5fe4:	430b      	orrs	r3, r1
    5fe6:	6053      	str	r3, [r2, #4]
}
    5fe8:	46c0      	nop			; (mov r8, r8)
    5fea:	46bd      	mov	sp, r7
    5fec:	b002      	add	sp, #8
    5fee:	bd80      	pop	{r7, pc}
    5ff0:	41004000 	.word	0x41004000

00005ff4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5ff4:	b580      	push	{r7, lr}
    5ff6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5ff8:	46c0      	nop			; (mov r8, r8)
    5ffa:	4b04      	ldr	r3, [pc, #16]	; (600c <_system_dfll_wait_for_sync+0x18>)
    5ffc:	68db      	ldr	r3, [r3, #12]
    5ffe:	2210      	movs	r2, #16
    6000:	4013      	ands	r3, r2
    6002:	d0fa      	beq.n	5ffa <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    6004:	46c0      	nop			; (mov r8, r8)
    6006:	46bd      	mov	sp, r7
    6008:	bd80      	pop	{r7, pc}
    600a:	46c0      	nop			; (mov r8, r8)
    600c:	40000800 	.word	0x40000800

00006010 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    6010:	b580      	push	{r7, lr}
    6012:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    6014:	4b0c      	ldr	r3, [pc, #48]	; (6048 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6016:	2202      	movs	r2, #2
    6018:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    601a:	4b0c      	ldr	r3, [pc, #48]	; (604c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    601c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    601e:	4a0a      	ldr	r2, [pc, #40]	; (6048 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6020:	4b0b      	ldr	r3, [pc, #44]	; (6050 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6022:	689b      	ldr	r3, [r3, #8]
    6024:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6026:	4a08      	ldr	r2, [pc, #32]	; (6048 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6028:	4b09      	ldr	r3, [pc, #36]	; (6050 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    602a:	685b      	ldr	r3, [r3, #4]
    602c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    602e:	4b06      	ldr	r3, [pc, #24]	; (6048 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6030:	2200      	movs	r2, #0
    6032:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6034:	4b05      	ldr	r3, [pc, #20]	; (604c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6036:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6038:	4a03      	ldr	r2, [pc, #12]	; (6048 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    603a:	4b05      	ldr	r3, [pc, #20]	; (6050 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    603c:	681b      	ldr	r3, [r3, #0]
    603e:	b29b      	uxth	r3, r3
    6040:	8493      	strh	r3, [r2, #36]	; 0x24
}
    6042:	46c0      	nop			; (mov r8, r8)
    6044:	46bd      	mov	sp, r7
    6046:	bd80      	pop	{r7, pc}
    6048:	40000800 	.word	0x40000800
    604c:	00005ff5 	.word	0x00005ff5
    6050:	200001a8 	.word	0x200001a8

00006054 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6054:	b580      	push	{r7, lr}
    6056:	b082      	sub	sp, #8
    6058:	af00      	add	r7, sp, #0
    605a:	0002      	movs	r2, r0
    605c:	1dfb      	adds	r3, r7, #7
    605e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6060:	1dfb      	adds	r3, r7, #7
    6062:	781b      	ldrb	r3, [r3, #0]
    6064:	2b08      	cmp	r3, #8
    6066:	d841      	bhi.n	60ec <system_clock_source_get_hz+0x98>
    6068:	009a      	lsls	r2, r3, #2
    606a:	4b23      	ldr	r3, [pc, #140]	; (60f8 <system_clock_source_get_hz+0xa4>)
    606c:	18d3      	adds	r3, r2, r3
    606e:	681b      	ldr	r3, [r3, #0]
    6070:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    6072:	4b22      	ldr	r3, [pc, #136]	; (60fc <system_clock_source_get_hz+0xa8>)
    6074:	691b      	ldr	r3, [r3, #16]
    6076:	e03a      	b.n	60ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6078:	4b21      	ldr	r3, [pc, #132]	; (6100 <system_clock_source_get_hz+0xac>)
    607a:	6a1b      	ldr	r3, [r3, #32]
    607c:	059b      	lsls	r3, r3, #22
    607e:	0f9b      	lsrs	r3, r3, #30
    6080:	b2db      	uxtb	r3, r3
    6082:	001a      	movs	r2, r3
    6084:	4b1f      	ldr	r3, [pc, #124]	; (6104 <system_clock_source_get_hz+0xb0>)
    6086:	40d3      	lsrs	r3, r2
    6088:	e031      	b.n	60ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    608a:	2380      	movs	r3, #128	; 0x80
    608c:	021b      	lsls	r3, r3, #8
    608e:	e02e      	b.n	60ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    6090:	2380      	movs	r3, #128	; 0x80
    6092:	021b      	lsls	r3, r3, #8
    6094:	e02b      	b.n	60ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    6096:	4b19      	ldr	r3, [pc, #100]	; (60fc <system_clock_source_get_hz+0xa8>)
    6098:	695b      	ldr	r3, [r3, #20]
    609a:	e028      	b.n	60ee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    609c:	4b17      	ldr	r3, [pc, #92]	; (60fc <system_clock_source_get_hz+0xa8>)
    609e:	681b      	ldr	r3, [r3, #0]
    60a0:	2202      	movs	r2, #2
    60a2:	4013      	ands	r3, r2
    60a4:	d101      	bne.n	60aa <system_clock_source_get_hz+0x56>
			return 0;
    60a6:	2300      	movs	r3, #0
    60a8:	e021      	b.n	60ee <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    60aa:	4b17      	ldr	r3, [pc, #92]	; (6108 <system_clock_source_get_hz+0xb4>)
    60ac:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    60ae:	4b13      	ldr	r3, [pc, #76]	; (60fc <system_clock_source_get_hz+0xa8>)
    60b0:	681b      	ldr	r3, [r3, #0]
    60b2:	2224      	movs	r2, #36	; 0x24
    60b4:	4013      	ands	r3, r2
    60b6:	2b04      	cmp	r3, #4
    60b8:	d109      	bne.n	60ce <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    60ba:	2000      	movs	r0, #0
    60bc:	4b13      	ldr	r3, [pc, #76]	; (610c <system_clock_source_get_hz+0xb8>)
    60be:	4798      	blx	r3
    60c0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    60c2:	4b0e      	ldr	r3, [pc, #56]	; (60fc <system_clock_source_get_hz+0xa8>)
    60c4:	689b      	ldr	r3, [r3, #8]
    60c6:	041b      	lsls	r3, r3, #16
    60c8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    60ca:	4353      	muls	r3, r2
    60cc:	e00f      	b.n	60ee <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    60ce:	4b10      	ldr	r3, [pc, #64]	; (6110 <system_clock_source_get_hz+0xbc>)
    60d0:	e00d      	b.n	60ee <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    60d2:	4a0b      	ldr	r2, [pc, #44]	; (6100 <system_clock_source_get_hz+0xac>)
    60d4:	2350      	movs	r3, #80	; 0x50
    60d6:	5cd3      	ldrb	r3, [r2, r3]
    60d8:	b2db      	uxtb	r3, r3
    60da:	001a      	movs	r2, r3
    60dc:	2304      	movs	r3, #4
    60de:	4013      	ands	r3, r2
    60e0:	d101      	bne.n	60e6 <system_clock_source_get_hz+0x92>
			return 0;
    60e2:	2300      	movs	r3, #0
    60e4:	e003      	b.n	60ee <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    60e6:	4b05      	ldr	r3, [pc, #20]	; (60fc <system_clock_source_get_hz+0xa8>)
    60e8:	68db      	ldr	r3, [r3, #12]
    60ea:	e000      	b.n	60ee <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    60ec:	2300      	movs	r3, #0
	}
}
    60ee:	0018      	movs	r0, r3
    60f0:	46bd      	mov	sp, r7
    60f2:	b002      	add	sp, #8
    60f4:	bd80      	pop	{r7, pc}
    60f6:	46c0      	nop			; (mov r8, r8)
    60f8:	0000c998 	.word	0x0000c998
    60fc:	200001a8 	.word	0x200001a8
    6100:	40000800 	.word	0x40000800
    6104:	007a1200 	.word	0x007a1200
    6108:	00005ff5 	.word	0x00005ff5
    610c:	00006ba5 	.word	0x00006ba5
    6110:	02dc6c00 	.word	0x02dc6c00

00006114 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    6114:	b580      	push	{r7, lr}
    6116:	b084      	sub	sp, #16
    6118:	af00      	add	r7, sp, #0
    611a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    611c:	4b1a      	ldr	r3, [pc, #104]	; (6188 <system_clock_source_osc8m_set_config+0x74>)
    611e:	6a1b      	ldr	r3, [r3, #32]
    6120:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    6122:	687b      	ldr	r3, [r7, #4]
    6124:	781b      	ldrb	r3, [r3, #0]
    6126:	1c1a      	adds	r2, r3, #0
    6128:	2303      	movs	r3, #3
    612a:	4013      	ands	r3, r2
    612c:	b2da      	uxtb	r2, r3
    612e:	230d      	movs	r3, #13
    6130:	18fb      	adds	r3, r7, r3
    6132:	2103      	movs	r1, #3
    6134:	400a      	ands	r2, r1
    6136:	0010      	movs	r0, r2
    6138:	781a      	ldrb	r2, [r3, #0]
    613a:	2103      	movs	r1, #3
    613c:	438a      	bics	r2, r1
    613e:	1c11      	adds	r1, r2, #0
    6140:	1c02      	adds	r2, r0, #0
    6142:	430a      	orrs	r2, r1
    6144:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6146:	687b      	ldr	r3, [r7, #4]
    6148:	789a      	ldrb	r2, [r3, #2]
    614a:	230c      	movs	r3, #12
    614c:	18fb      	adds	r3, r7, r3
    614e:	01d0      	lsls	r0, r2, #7
    6150:	781a      	ldrb	r2, [r3, #0]
    6152:	217f      	movs	r1, #127	; 0x7f
    6154:	400a      	ands	r2, r1
    6156:	1c11      	adds	r1, r2, #0
    6158:	1c02      	adds	r2, r0, #0
    615a:	430a      	orrs	r2, r1
    615c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    615e:	687b      	ldr	r3, [r7, #4]
    6160:	785a      	ldrb	r2, [r3, #1]
    6162:	230c      	movs	r3, #12
    6164:	18fb      	adds	r3, r7, r3
    6166:	2101      	movs	r1, #1
    6168:	400a      	ands	r2, r1
    616a:	0190      	lsls	r0, r2, #6
    616c:	781a      	ldrb	r2, [r3, #0]
    616e:	2140      	movs	r1, #64	; 0x40
    6170:	438a      	bics	r2, r1
    6172:	1c11      	adds	r1, r2, #0
    6174:	1c02      	adds	r2, r0, #0
    6176:	430a      	orrs	r2, r1
    6178:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    617a:	4b03      	ldr	r3, [pc, #12]	; (6188 <system_clock_source_osc8m_set_config+0x74>)
    617c:	68fa      	ldr	r2, [r7, #12]
    617e:	621a      	str	r2, [r3, #32]
}
    6180:	46c0      	nop			; (mov r8, r8)
    6182:	46bd      	mov	sp, r7
    6184:	b004      	add	sp, #16
    6186:	bd80      	pop	{r7, pc}
    6188:	40000800 	.word	0x40000800

0000618c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    618c:	b580      	push	{r7, lr}
    618e:	b084      	sub	sp, #16
    6190:	af00      	add	r7, sp, #0
    6192:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    6194:	4a43      	ldr	r2, [pc, #268]	; (62a4 <system_clock_source_xosc32k_set_config+0x118>)
    6196:	230c      	movs	r3, #12
    6198:	18fb      	adds	r3, r7, r3
    619a:	8a92      	ldrh	r2, [r2, #20]
    619c:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	785b      	ldrb	r3, [r3, #1]
    61a2:	1c1a      	adds	r2, r3, #0
    61a4:	2307      	movs	r3, #7
    61a6:	4013      	ands	r3, r2
    61a8:	b2da      	uxtb	r2, r3
    61aa:	230c      	movs	r3, #12
    61ac:	18fb      	adds	r3, r7, r3
    61ae:	2107      	movs	r1, #7
    61b0:	400a      	ands	r2, r1
    61b2:	0010      	movs	r0, r2
    61b4:	785a      	ldrb	r2, [r3, #1]
    61b6:	2107      	movs	r1, #7
    61b8:	438a      	bics	r2, r1
    61ba:	1c11      	adds	r1, r2, #0
    61bc:	1c02      	adds	r2, r0, #0
    61be:	430a      	orrs	r2, r1
    61c0:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	781b      	ldrb	r3, [r3, #0]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d106      	bne.n	61d8 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    61ca:	230c      	movs	r3, #12
    61cc:	18fb      	adds	r3, r7, r3
    61ce:	781a      	ldrb	r2, [r3, #0]
    61d0:	2104      	movs	r1, #4
    61d2:	430a      	orrs	r2, r1
    61d4:	701a      	strb	r2, [r3, #0]
    61d6:	e005      	b.n	61e4 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    61d8:	230c      	movs	r3, #12
    61da:	18fb      	adds	r3, r7, r3
    61dc:	781a      	ldrb	r2, [r3, #0]
    61de:	2104      	movs	r1, #4
    61e0:	438a      	bics	r2, r1
    61e2:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    61e4:	687b      	ldr	r3, [r7, #4]
    61e6:	789a      	ldrb	r2, [r3, #2]
    61e8:	230c      	movs	r3, #12
    61ea:	18fb      	adds	r3, r7, r3
    61ec:	2101      	movs	r1, #1
    61ee:	400a      	ands	r2, r1
    61f0:	0150      	lsls	r0, r2, #5
    61f2:	781a      	ldrb	r2, [r3, #0]
    61f4:	2120      	movs	r1, #32
    61f6:	438a      	bics	r2, r1
    61f8:	1c11      	adds	r1, r2, #0
    61fa:	1c02      	adds	r2, r0, #0
    61fc:	430a      	orrs	r2, r1
    61fe:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    6200:	687b      	ldr	r3, [r7, #4]
    6202:	78da      	ldrb	r2, [r3, #3]
    6204:	230c      	movs	r3, #12
    6206:	18fb      	adds	r3, r7, r3
    6208:	2101      	movs	r1, #1
    620a:	400a      	ands	r2, r1
    620c:	0110      	lsls	r0, r2, #4
    620e:	781a      	ldrb	r2, [r3, #0]
    6210:	2110      	movs	r1, #16
    6212:	438a      	bics	r2, r1
    6214:	1c11      	adds	r1, r2, #0
    6216:	1c02      	adds	r2, r0, #0
    6218:	430a      	orrs	r2, r1
    621a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    621c:	687b      	ldr	r3, [r7, #4]
    621e:	791a      	ldrb	r2, [r3, #4]
    6220:	230c      	movs	r3, #12
    6222:	18fb      	adds	r3, r7, r3
    6224:	2101      	movs	r1, #1
    6226:	400a      	ands	r2, r1
    6228:	00d0      	lsls	r0, r2, #3
    622a:	781a      	ldrb	r2, [r3, #0]
    622c:	2108      	movs	r1, #8
    622e:	438a      	bics	r2, r1
    6230:	1c11      	adds	r1, r2, #0
    6232:	1c02      	adds	r2, r0, #0
    6234:	430a      	orrs	r2, r1
    6236:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    6238:	687b      	ldr	r3, [r7, #4]
    623a:	7b5a      	ldrb	r2, [r3, #13]
    623c:	230c      	movs	r3, #12
    623e:	18fb      	adds	r3, r7, r3
    6240:	01d0      	lsls	r0, r2, #7
    6242:	781a      	ldrb	r2, [r3, #0]
    6244:	217f      	movs	r1, #127	; 0x7f
    6246:	400a      	ands	r2, r1
    6248:	1c11      	adds	r1, r2, #0
    624a:	1c02      	adds	r2, r0, #0
    624c:	430a      	orrs	r2, r1
    624e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	7b1a      	ldrb	r2, [r3, #12]
    6254:	230c      	movs	r3, #12
    6256:	18fb      	adds	r3, r7, r3
    6258:	2101      	movs	r1, #1
    625a:	400a      	ands	r2, r1
    625c:	0190      	lsls	r0, r2, #6
    625e:	781a      	ldrb	r2, [r3, #0]
    6260:	2140      	movs	r1, #64	; 0x40
    6262:	438a      	bics	r2, r1
    6264:	1c11      	adds	r1, r2, #0
    6266:	1c02      	adds	r2, r0, #0
    6268:	430a      	orrs	r2, r1
    626a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	7b9a      	ldrb	r2, [r3, #14]
    6270:	230c      	movs	r3, #12
    6272:	18fb      	adds	r3, r7, r3
    6274:	2101      	movs	r1, #1
    6276:	400a      	ands	r2, r1
    6278:	0110      	lsls	r0, r2, #4
    627a:	785a      	ldrb	r2, [r3, #1]
    627c:	2110      	movs	r1, #16
    627e:	438a      	bics	r2, r1
    6280:	1c11      	adds	r1, r2, #0
    6282:	1c02      	adds	r2, r0, #0
    6284:	430a      	orrs	r2, r1
    6286:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6288:	687b      	ldr	r3, [r7, #4]
    628a:	689a      	ldr	r2, [r3, #8]
    628c:	4b06      	ldr	r3, [pc, #24]	; (62a8 <system_clock_source_xosc32k_set_config+0x11c>)
    628e:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    6290:	4a04      	ldr	r2, [pc, #16]	; (62a4 <system_clock_source_xosc32k_set_config+0x118>)
    6292:	230c      	movs	r3, #12
    6294:	18fb      	adds	r3, r7, r3
    6296:	881b      	ldrh	r3, [r3, #0]
    6298:	8293      	strh	r3, [r2, #20]
}
    629a:	46c0      	nop			; (mov r8, r8)
    629c:	46bd      	mov	sp, r7
    629e:	b004      	add	sp, #16
    62a0:	bd80      	pop	{r7, pc}
    62a2:	46c0      	nop			; (mov r8, r8)
    62a4:	40000800 	.word	0x40000800
    62a8:	200001a8 	.word	0x200001a8

000062ac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    62ac:	b580      	push	{r7, lr}
    62ae:	b082      	sub	sp, #8
    62b0:	af00      	add	r7, sp, #0
    62b2:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    62b4:	687b      	ldr	r3, [r7, #4]
    62b6:	7a1b      	ldrb	r3, [r3, #8]
    62b8:	029b      	lsls	r3, r3, #10
    62ba:	041b      	lsls	r3, r3, #16
    62bc:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    62be:	687b      	ldr	r3, [r7, #4]
    62c0:	895b      	ldrh	r3, [r3, #10]
    62c2:	059b      	lsls	r3, r3, #22
    62c4:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    62c6:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    62c8:	4b2a      	ldr	r3, [pc, #168]	; (6374 <system_clock_source_dfll_set_config+0xc8>)
    62ca:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    62cc:	687b      	ldr	r3, [r7, #4]
    62ce:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    62d4:	4313      	orrs	r3, r2
    62d6:	b2db      	uxtb	r3, r3
    62d8:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    62da:	687b      	ldr	r3, [r7, #4]
    62dc:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    62de:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    62e0:	687a      	ldr	r2, [r7, #4]
    62e2:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    62e4:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    62e6:	687b      	ldr	r3, [r7, #4]
    62e8:	785b      	ldrb	r3, [r3, #1]
    62ea:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    62ec:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    62ee:	4b21      	ldr	r3, [pc, #132]	; (6374 <system_clock_source_dfll_set_config+0xc8>)
    62f0:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    62f2:	687b      	ldr	r3, [r7, #4]
    62f4:	781b      	ldrb	r3, [r3, #0]
    62f6:	2b04      	cmp	r3, #4
    62f8:	d116      	bne.n	6328 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    62fa:	687b      	ldr	r3, [r7, #4]
    62fc:	7b1b      	ldrb	r3, [r3, #12]
    62fe:	069b      	lsls	r3, r3, #26
    6300:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6302:	687b      	ldr	r3, [r7, #4]
    6304:	89db      	ldrh	r3, [r3, #14]
    6306:	041b      	lsls	r3, r3, #16
    6308:	0019      	movs	r1, r3
    630a:	4b1b      	ldr	r3, [pc, #108]	; (6378 <system_clock_source_dfll_set_config+0xcc>)
    630c:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    630e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6310:	687a      	ldr	r2, [r7, #4]
    6312:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6314:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    6316:	4b17      	ldr	r3, [pc, #92]	; (6374 <system_clock_source_dfll_set_config+0xc8>)
    6318:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    631a:	4b16      	ldr	r3, [pc, #88]	; (6374 <system_clock_source_dfll_set_config+0xc8>)
    631c:	681b      	ldr	r3, [r3, #0]
    631e:	687a      	ldr	r2, [r7, #4]
    6320:	7812      	ldrb	r2, [r2, #0]
    6322:	431a      	orrs	r2, r3
    6324:	4b13      	ldr	r3, [pc, #76]	; (6374 <system_clock_source_dfll_set_config+0xc8>)
    6326:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6328:	687b      	ldr	r3, [r7, #4]
    632a:	781b      	ldrb	r3, [r3, #0]
    632c:	2b20      	cmp	r3, #32
    632e:	d11c      	bne.n	636a <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	7b1b      	ldrb	r3, [r3, #12]
    6334:	069b      	lsls	r3, r3, #26
    6336:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6338:	687b      	ldr	r3, [r7, #4]
    633a:	89db      	ldrh	r3, [r3, #14]
    633c:	041b      	lsls	r3, r3, #16
    633e:	0019      	movs	r1, r3
    6340:	4b0d      	ldr	r3, [pc, #52]	; (6378 <system_clock_source_dfll_set_config+0xcc>)
    6342:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6344:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6346:	687a      	ldr	r2, [r7, #4]
    6348:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    634a:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    634c:	4b09      	ldr	r3, [pc, #36]	; (6374 <system_clock_source_dfll_set_config+0xc8>)
    634e:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6350:	4b08      	ldr	r3, [pc, #32]	; (6374 <system_clock_source_dfll_set_config+0xc8>)
    6352:	681b      	ldr	r3, [r3, #0]
    6354:	687a      	ldr	r2, [r7, #4]
    6356:	7812      	ldrb	r2, [r2, #0]
    6358:	2104      	movs	r1, #4
    635a:	430a      	orrs	r2, r1
    635c:	b2d2      	uxtb	r2, r2
    635e:	4313      	orrs	r3, r2
    6360:	2280      	movs	r2, #128	; 0x80
    6362:	00d2      	lsls	r2, r2, #3
    6364:	431a      	orrs	r2, r3
    6366:	4b03      	ldr	r3, [pc, #12]	; (6374 <system_clock_source_dfll_set_config+0xc8>)
    6368:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    636a:	46c0      	nop			; (mov r8, r8)
    636c:	46bd      	mov	sp, r7
    636e:	b002      	add	sp, #8
    6370:	bd80      	pop	{r7, pc}
    6372:	46c0      	nop			; (mov r8, r8)
    6374:	200001a8 	.word	0x200001a8
    6378:	03ff0000 	.word	0x03ff0000

0000637c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    637c:	b580      	push	{r7, lr}
    637e:	b082      	sub	sp, #8
    6380:	af00      	add	r7, sp, #0
    6382:	0002      	movs	r2, r0
    6384:	1dfb      	adds	r3, r7, #7
    6386:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6388:	1dfb      	adds	r3, r7, #7
    638a:	781b      	ldrb	r3, [r3, #0]
    638c:	2b08      	cmp	r3, #8
    638e:	d83b      	bhi.n	6408 <system_clock_source_enable+0x8c>
    6390:	009a      	lsls	r2, r3, #2
    6392:	4b21      	ldr	r3, [pc, #132]	; (6418 <system_clock_source_enable+0x9c>)
    6394:	18d3      	adds	r3, r2, r3
    6396:	681b      	ldr	r3, [r3, #0]
    6398:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    639a:	4b20      	ldr	r3, [pc, #128]	; (641c <system_clock_source_enable+0xa0>)
    639c:	4a1f      	ldr	r2, [pc, #124]	; (641c <system_clock_source_enable+0xa0>)
    639e:	6a12      	ldr	r2, [r2, #32]
    63a0:	2102      	movs	r1, #2
    63a2:	430a      	orrs	r2, r1
    63a4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    63a6:	2300      	movs	r3, #0
    63a8:	e031      	b.n	640e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    63aa:	4b1c      	ldr	r3, [pc, #112]	; (641c <system_clock_source_enable+0xa0>)
    63ac:	4a1b      	ldr	r2, [pc, #108]	; (641c <system_clock_source_enable+0xa0>)
    63ae:	6992      	ldr	r2, [r2, #24]
    63b0:	2102      	movs	r1, #2
    63b2:	430a      	orrs	r2, r1
    63b4:	619a      	str	r2, [r3, #24]
		break;
    63b6:	e029      	b.n	640c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    63b8:	4a18      	ldr	r2, [pc, #96]	; (641c <system_clock_source_enable+0xa0>)
    63ba:	4b18      	ldr	r3, [pc, #96]	; (641c <system_clock_source_enable+0xa0>)
    63bc:	8a1b      	ldrh	r3, [r3, #16]
    63be:	b29b      	uxth	r3, r3
    63c0:	2102      	movs	r1, #2
    63c2:	430b      	orrs	r3, r1
    63c4:	b29b      	uxth	r3, r3
    63c6:	8213      	strh	r3, [r2, #16]
		break;
    63c8:	e020      	b.n	640c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    63ca:	4a14      	ldr	r2, [pc, #80]	; (641c <system_clock_source_enable+0xa0>)
    63cc:	4b13      	ldr	r3, [pc, #76]	; (641c <system_clock_source_enable+0xa0>)
    63ce:	8a9b      	ldrh	r3, [r3, #20]
    63d0:	b29b      	uxth	r3, r3
    63d2:	2102      	movs	r1, #2
    63d4:	430b      	orrs	r3, r1
    63d6:	b29b      	uxth	r3, r3
    63d8:	8293      	strh	r3, [r2, #20]
		break;
    63da:	e017      	b.n	640c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    63dc:	4b10      	ldr	r3, [pc, #64]	; (6420 <system_clock_source_enable+0xa4>)
    63de:	681b      	ldr	r3, [r3, #0]
    63e0:	2202      	movs	r2, #2
    63e2:	431a      	orrs	r2, r3
    63e4:	4b0e      	ldr	r3, [pc, #56]	; (6420 <system_clock_source_enable+0xa4>)
    63e6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    63e8:	4b0e      	ldr	r3, [pc, #56]	; (6424 <system_clock_source_enable+0xa8>)
    63ea:	4798      	blx	r3
		break;
    63ec:	e00e      	b.n	640c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    63ee:	4a0b      	ldr	r2, [pc, #44]	; (641c <system_clock_source_enable+0xa0>)
    63f0:	490a      	ldr	r1, [pc, #40]	; (641c <system_clock_source_enable+0xa0>)
    63f2:	2344      	movs	r3, #68	; 0x44
    63f4:	5ccb      	ldrb	r3, [r1, r3]
    63f6:	b2db      	uxtb	r3, r3
    63f8:	2102      	movs	r1, #2
    63fa:	430b      	orrs	r3, r1
    63fc:	b2d9      	uxtb	r1, r3
    63fe:	2344      	movs	r3, #68	; 0x44
    6400:	54d1      	strb	r1, [r2, r3]
		break;
    6402:	e003      	b.n	640c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    6404:	2300      	movs	r3, #0
    6406:	e002      	b.n	640e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6408:	2317      	movs	r3, #23
    640a:	e000      	b.n	640e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    640c:	2300      	movs	r3, #0
}
    640e:	0018      	movs	r0, r3
    6410:	46bd      	mov	sp, r7
    6412:	b002      	add	sp, #8
    6414:	bd80      	pop	{r7, pc}
    6416:	46c0      	nop			; (mov r8, r8)
    6418:	0000c9bc 	.word	0x0000c9bc
    641c:	40000800 	.word	0x40000800
    6420:	200001a8 	.word	0x200001a8
    6424:	00006011 	.word	0x00006011

00006428 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    6428:	b580      	push	{r7, lr}
    642a:	b084      	sub	sp, #16
    642c:	af00      	add	r7, sp, #0
    642e:	0002      	movs	r2, r0
    6430:	1dfb      	adds	r3, r7, #7
    6432:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    6434:	2300      	movs	r3, #0
    6436:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6438:	1dfb      	adds	r3, r7, #7
    643a:	781b      	ldrb	r3, [r3, #0]
    643c:	2b08      	cmp	r3, #8
    643e:	d821      	bhi.n	6484 <system_clock_source_is_ready+0x5c>
    6440:	009a      	lsls	r2, r3, #2
    6442:	4b18      	ldr	r3, [pc, #96]	; (64a4 <system_clock_source_is_ready+0x7c>)
    6444:	18d3      	adds	r3, r2, r3
    6446:	681b      	ldr	r3, [r3, #0]
    6448:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    644a:	2308      	movs	r3, #8
    644c:	60fb      	str	r3, [r7, #12]
		break;
    644e:	e01b      	b.n	6488 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    6450:	2304      	movs	r3, #4
    6452:	60fb      	str	r3, [r7, #12]
		break;
    6454:	e018      	b.n	6488 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    6456:	2301      	movs	r3, #1
    6458:	60fb      	str	r3, [r7, #12]
		break;
    645a:	e015      	b.n	6488 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    645c:	2302      	movs	r3, #2
    645e:	60fb      	str	r3, [r7, #12]
		break;
    6460:	e012      	b.n	6488 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    6462:	23d0      	movs	r3, #208	; 0xd0
    6464:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    6466:	e00f      	b.n	6488 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6468:	4a0f      	ldr	r2, [pc, #60]	; (64a8 <system_clock_source_is_ready+0x80>)
    646a:	2350      	movs	r3, #80	; 0x50
    646c:	5cd3      	ldrb	r3, [r2, r3]
    646e:	b2db      	uxtb	r3, r3
    6470:	001a      	movs	r2, r3
    6472:	2303      	movs	r3, #3
    6474:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    6476:	3b03      	subs	r3, #3
    6478:	425a      	negs	r2, r3
    647a:	4153      	adcs	r3, r2
    647c:	b2db      	uxtb	r3, r3
    647e:	e00c      	b.n	649a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6480:	2301      	movs	r3, #1
    6482:	e00a      	b.n	649a <system_clock_source_is_ready+0x72>

	default:
		return false;
    6484:	2300      	movs	r3, #0
    6486:	e008      	b.n	649a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6488:	4b07      	ldr	r3, [pc, #28]	; (64a8 <system_clock_source_is_ready+0x80>)
    648a:	68db      	ldr	r3, [r3, #12]
    648c:	68fa      	ldr	r2, [r7, #12]
    648e:	401a      	ands	r2, r3
    6490:	68fb      	ldr	r3, [r7, #12]
    6492:	1ad3      	subs	r3, r2, r3
    6494:	425a      	negs	r2, r3
    6496:	4153      	adcs	r3, r2
    6498:	b2db      	uxtb	r3, r3
}
    649a:	0018      	movs	r0, r3
    649c:	46bd      	mov	sp, r7
    649e:	b004      	add	sp, #16
    64a0:	bd80      	pop	{r7, pc}
    64a2:	46c0      	nop			; (mov r8, r8)
    64a4:	0000c9e0 	.word	0x0000c9e0
    64a8:	40000800 	.word	0x40000800

000064ac <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    64ac:	b580      	push	{r7, lr}
    64ae:	b082      	sub	sp, #8
    64b0:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    64b2:	003b      	movs	r3, r7
    64b4:	2202      	movs	r2, #2
    64b6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    64b8:	2300      	movs	r3, #0
    64ba:	607b      	str	r3, [r7, #4]
    64bc:	e009      	b.n	64d2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    64be:	687b      	ldr	r3, [r7, #4]
    64c0:	b2db      	uxtb	r3, r3
    64c2:	003a      	movs	r2, r7
    64c4:	0011      	movs	r1, r2
    64c6:	0018      	movs	r0, r3
    64c8:	4b05      	ldr	r3, [pc, #20]	; (64e0 <_switch_peripheral_gclk+0x34>)
    64ca:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    64cc:	687b      	ldr	r3, [r7, #4]
    64ce:	3301      	adds	r3, #1
    64d0:	607b      	str	r3, [r7, #4]
    64d2:	687b      	ldr	r3, [r7, #4]
    64d4:	2b24      	cmp	r3, #36	; 0x24
    64d6:	d9f2      	bls.n	64be <_switch_peripheral_gclk+0x12>
	}
}
    64d8:	46c0      	nop			; (mov r8, r8)
    64da:	46bd      	mov	sp, r7
    64dc:	b002      	add	sp, #8
    64de:	bd80      	pop	{r7, pc}
    64e0:	00006a81 	.word	0x00006a81

000064e4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    64e4:	b580      	push	{r7, lr}
    64e6:	b0aa      	sub	sp, #168	; 0xa8
    64e8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    64ea:	4b85      	ldr	r3, [pc, #532]	; (6700 <system_clock_init+0x21c>)
    64ec:	22c2      	movs	r2, #194	; 0xc2
    64ee:	00d2      	lsls	r2, r2, #3
    64f0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    64f2:	2002      	movs	r0, #2
    64f4:	4b83      	ldr	r3, [pc, #524]	; (6704 <system_clock_init+0x220>)
    64f6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    64f8:	4b83      	ldr	r3, [pc, #524]	; (6708 <system_clock_init+0x224>)
    64fa:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    64fc:	2394      	movs	r3, #148	; 0x94
    64fe:	18fb      	adds	r3, r7, r3
    6500:	0018      	movs	r0, r3
    6502:	4b82      	ldr	r3, [pc, #520]	; (670c <system_clock_init+0x228>)
    6504:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    6506:	2394      	movs	r3, #148	; 0x94
    6508:	18fb      	adds	r3, r7, r3
    650a:	2280      	movs	r2, #128	; 0x80
    650c:	0212      	lsls	r2, r2, #8
    650e:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    6510:	2394      	movs	r3, #148	; 0x94
    6512:	18fb      	adds	r3, r7, r3
    6514:	2200      	movs	r2, #0
    6516:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6518:	2394      	movs	r3, #148	; 0x94
    651a:	18fb      	adds	r3, r7, r3
    651c:	2206      	movs	r2, #6
    651e:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    6520:	2394      	movs	r3, #148	; 0x94
    6522:	18fb      	adds	r3, r7, r3
    6524:	2200      	movs	r2, #0
    6526:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    6528:	2394      	movs	r3, #148	; 0x94
    652a:	18fb      	adds	r3, r7, r3
    652c:	2200      	movs	r2, #0
    652e:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    6530:	2394      	movs	r3, #148	; 0x94
    6532:	18fb      	adds	r3, r7, r3
    6534:	2201      	movs	r2, #1
    6536:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    6538:	2394      	movs	r3, #148	; 0x94
    653a:	18fb      	adds	r3, r7, r3
    653c:	2200      	movs	r2, #0
    653e:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    6540:	2394      	movs	r3, #148	; 0x94
    6542:	18fb      	adds	r3, r7, r3
    6544:	2201      	movs	r2, #1
    6546:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6548:	2394      	movs	r3, #148	; 0x94
    654a:	18fb      	adds	r3, r7, r3
    654c:	0018      	movs	r0, r3
    654e:	4b70      	ldr	r3, [pc, #448]	; (6710 <system_clock_init+0x22c>)
    6550:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6552:	2005      	movs	r0, #5
    6554:	4b6f      	ldr	r3, [pc, #444]	; (6714 <system_clock_init+0x230>)
    6556:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6558:	46c0      	nop			; (mov r8, r8)
    655a:	2005      	movs	r0, #5
    655c:	4b6e      	ldr	r3, [pc, #440]	; (6718 <system_clock_init+0x234>)
    655e:	4798      	blx	r3
    6560:	0003      	movs	r3, r0
    6562:	001a      	movs	r2, r3
    6564:	2301      	movs	r3, #1
    6566:	4053      	eors	r3, r2
    6568:	b2db      	uxtb	r3, r3
    656a:	2b00      	cmp	r3, #0
    656c:	d1f5      	bne.n	655a <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    656e:	2380      	movs	r3, #128	; 0x80
    6570:	18fb      	adds	r3, r7, r3
    6572:	0018      	movs	r0, r3
    6574:	4b69      	ldr	r3, [pc, #420]	; (671c <system_clock_init+0x238>)
    6576:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6578:	2380      	movs	r3, #128	; 0x80
    657a:	18fb      	adds	r3, r7, r3
    657c:	2204      	movs	r2, #4
    657e:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6580:	2380      	movs	r3, #128	; 0x80
    6582:	18fb      	adds	r3, r7, r3
    6584:	2200      	movs	r2, #0
    6586:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6588:	4b65      	ldr	r3, [pc, #404]	; (6720 <system_clock_init+0x23c>)
    658a:	681b      	ldr	r3, [r3, #0]
    658c:	0e9b      	lsrs	r3, r3, #26
    658e:	22a4      	movs	r2, #164	; 0xa4
    6590:	18ba      	adds	r2, r7, r2
    6592:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6594:	23a4      	movs	r3, #164	; 0xa4
    6596:	18fb      	adds	r3, r7, r3
    6598:	681b      	ldr	r3, [r3, #0]
    659a:	2b3f      	cmp	r3, #63	; 0x3f
    659c:	d103      	bne.n	65a6 <system_clock_init+0xc2>
		coarse = 0x1f;
    659e:	231f      	movs	r3, #31
    65a0:	22a4      	movs	r2, #164	; 0xa4
    65a2:	18ba      	adds	r2, r7, r2
    65a4:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    65a6:	23a4      	movs	r3, #164	; 0xa4
    65a8:	18fb      	adds	r3, r7, r3
    65aa:	681b      	ldr	r3, [r3, #0]
    65ac:	b2da      	uxtb	r2, r3
    65ae:	2380      	movs	r3, #128	; 0x80
    65b0:	18fb      	adds	r3, r7, r3
    65b2:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    65b4:	2380      	movs	r3, #128	; 0x80
    65b6:	18fb      	adds	r3, r7, r3
    65b8:	2200      	movs	r2, #0
    65ba:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    65bc:	2380      	movs	r3, #128	; 0x80
    65be:	18fb      	adds	r3, r7, r3
    65c0:	2200      	movs	r2, #0
    65c2:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    65c4:	2380      	movs	r3, #128	; 0x80
    65c6:	18fb      	adds	r3, r7, r3
    65c8:	2200      	movs	r2, #0
    65ca:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    65cc:	2380      	movs	r3, #128	; 0x80
    65ce:	18fb      	adds	r3, r7, r3
    65d0:	2200      	movs	r2, #0
    65d2:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    65d4:	2380      	movs	r3, #128	; 0x80
    65d6:	18fb      	adds	r3, r7, r3
    65d8:	22b7      	movs	r2, #183	; 0xb7
    65da:	00d2      	lsls	r2, r2, #3
    65dc:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    65de:	2380      	movs	r3, #128	; 0x80
    65e0:	18fb      	adds	r3, r7, r3
    65e2:	2203      	movs	r2, #3
    65e4:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    65e6:	2380      	movs	r3, #128	; 0x80
    65e8:	18fb      	adds	r3, r7, r3
    65ea:	221f      	movs	r2, #31
    65ec:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    65ee:	2380      	movs	r3, #128	; 0x80
    65f0:	18fb      	adds	r3, r7, r3
    65f2:	0018      	movs	r0, r3
    65f4:	4b4b      	ldr	r3, [pc, #300]	; (6724 <system_clock_init+0x240>)
    65f6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    65f8:	237c      	movs	r3, #124	; 0x7c
    65fa:	18fb      	adds	r3, r7, r3
    65fc:	0018      	movs	r0, r3
    65fe:	4b4a      	ldr	r3, [pc, #296]	; (6728 <system_clock_init+0x244>)
    6600:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6602:	237c      	movs	r3, #124	; 0x7c
    6604:	18fb      	adds	r3, r7, r3
    6606:	2200      	movs	r2, #0
    6608:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    660a:	237c      	movs	r3, #124	; 0x7c
    660c:	18fb      	adds	r3, r7, r3
    660e:	2201      	movs	r2, #1
    6610:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6612:	237c      	movs	r3, #124	; 0x7c
    6614:	18fb      	adds	r3, r7, r3
    6616:	2201      	movs	r2, #1
    6618:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    661a:	237c      	movs	r3, #124	; 0x7c
    661c:	18fb      	adds	r3, r7, r3
    661e:	0018      	movs	r0, r3
    6620:	4b42      	ldr	r3, [pc, #264]	; (672c <system_clock_init+0x248>)
    6622:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6624:	2006      	movs	r0, #6
    6626:	4b3b      	ldr	r3, [pc, #236]	; (6714 <system_clock_init+0x230>)
    6628:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    662a:	4b41      	ldr	r3, [pc, #260]	; (6730 <system_clock_init+0x24c>)
    662c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    662e:	2364      	movs	r3, #100	; 0x64
    6630:	18fb      	adds	r3, r7, r3
    6632:	0018      	movs	r0, r3
    6634:	4b3f      	ldr	r3, [pc, #252]	; (6734 <system_clock_init+0x250>)
    6636:	4798      	blx	r3
    6638:	2364      	movs	r3, #100	; 0x64
    663a:	18fb      	adds	r3, r7, r3
    663c:	2205      	movs	r2, #5
    663e:	701a      	strb	r2, [r3, #0]
    6640:	2364      	movs	r3, #100	; 0x64
    6642:	18fb      	adds	r3, r7, r3
    6644:	2201      	movs	r2, #1
    6646:	605a      	str	r2, [r3, #4]
    6648:	2364      	movs	r3, #100	; 0x64
    664a:	18fb      	adds	r3, r7, r3
    664c:	2200      	movs	r2, #0
    664e:	721a      	strb	r2, [r3, #8]
    6650:	2364      	movs	r3, #100	; 0x64
    6652:	18fb      	adds	r3, r7, r3
    6654:	2200      	movs	r2, #0
    6656:	725a      	strb	r2, [r3, #9]
    6658:	2364      	movs	r3, #100	; 0x64
    665a:	18fb      	adds	r3, r7, r3
    665c:	0019      	movs	r1, r3
    665e:	2001      	movs	r0, #1
    6660:	4b35      	ldr	r3, [pc, #212]	; (6738 <system_clock_init+0x254>)
    6662:	4798      	blx	r3
    6664:	2001      	movs	r0, #1
    6666:	4b35      	ldr	r3, [pc, #212]	; (673c <system_clock_init+0x258>)
    6668:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    666a:	230c      	movs	r3, #12
    666c:	18fb      	adds	r3, r7, r3
    666e:	0018      	movs	r0, r3
    6670:	4b33      	ldr	r3, [pc, #204]	; (6740 <system_clock_init+0x25c>)
    6672:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6674:	230c      	movs	r3, #12
    6676:	18fb      	adds	r3, r7, r3
    6678:	2201      	movs	r2, #1
    667a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    667c:	230c      	movs	r3, #12
    667e:	18fb      	adds	r3, r7, r3
    6680:	0019      	movs	r1, r3
    6682:	2000      	movs	r0, #0
    6684:	4b2f      	ldr	r3, [pc, #188]	; (6744 <system_clock_init+0x260>)
    6686:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6688:	2000      	movs	r0, #0
    668a:	4b2f      	ldr	r3, [pc, #188]	; (6748 <system_clock_init+0x264>)
    668c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    668e:	2007      	movs	r0, #7
    6690:	4b20      	ldr	r3, [pc, #128]	; (6714 <system_clock_init+0x230>)
    6692:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6694:	46c0      	nop			; (mov r8, r8)
    6696:	2007      	movs	r0, #7
    6698:	4b1f      	ldr	r3, [pc, #124]	; (6718 <system_clock_init+0x234>)
    669a:	4798      	blx	r3
    669c:	0003      	movs	r3, r0
    669e:	001a      	movs	r2, r3
    66a0:	2301      	movs	r3, #1
    66a2:	4053      	eors	r3, r2
    66a4:	b2db      	uxtb	r3, r3
    66a6:	2b00      	cmp	r3, #0
    66a8:	d1f5      	bne.n	6696 <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    66aa:	2000      	movs	r0, #0
    66ac:	4b27      	ldr	r3, [pc, #156]	; (674c <system_clock_init+0x268>)
    66ae:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    66b0:	2100      	movs	r1, #0
    66b2:	2000      	movs	r0, #0
    66b4:	4b26      	ldr	r3, [pc, #152]	; (6750 <system_clock_init+0x26c>)
    66b6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    66b8:	2100      	movs	r1, #0
    66ba:	2001      	movs	r0, #1
    66bc:	4b24      	ldr	r3, [pc, #144]	; (6750 <system_clock_init+0x26c>)
    66be:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    66c0:	2100      	movs	r1, #0
    66c2:	2002      	movs	r0, #2
    66c4:	4b22      	ldr	r3, [pc, #136]	; (6750 <system_clock_init+0x26c>)
    66c6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    66c8:	003b      	movs	r3, r7
    66ca:	0018      	movs	r0, r3
    66cc:	4b19      	ldr	r3, [pc, #100]	; (6734 <system_clock_init+0x250>)
    66ce:	4798      	blx	r3
    66d0:	003b      	movs	r3, r7
    66d2:	2207      	movs	r2, #7
    66d4:	701a      	strb	r2, [r3, #0]
    66d6:	003b      	movs	r3, r7
    66d8:	2201      	movs	r2, #1
    66da:	605a      	str	r2, [r3, #4]
    66dc:	003b      	movs	r3, r7
    66de:	2201      	movs	r2, #1
    66e0:	721a      	strb	r2, [r3, #8]
    66e2:	003b      	movs	r3, r7
    66e4:	2200      	movs	r2, #0
    66e6:	725a      	strb	r2, [r3, #9]
    66e8:	003b      	movs	r3, r7
    66ea:	0019      	movs	r1, r3
    66ec:	2000      	movs	r0, #0
    66ee:	4b12      	ldr	r3, [pc, #72]	; (6738 <system_clock_init+0x254>)
    66f0:	4798      	blx	r3
    66f2:	2000      	movs	r0, #0
    66f4:	4b11      	ldr	r3, [pc, #68]	; (673c <system_clock_init+0x258>)
    66f6:	4798      	blx	r3
#endif
}
    66f8:	46c0      	nop			; (mov r8, r8)
    66fa:	46bd      	mov	sp, r7
    66fc:	b02a      	add	sp, #168	; 0xa8
    66fe:	bd80      	pop	{r7, pc}
    6700:	40000800 	.word	0x40000800
    6704:	00005fc1 	.word	0x00005fc1
    6708:	000064ad 	.word	0x000064ad
    670c:	00005e91 	.word	0x00005e91
    6710:	0000618d 	.word	0x0000618d
    6714:	0000637d 	.word	0x0000637d
    6718:	00006429 	.word	0x00006429
    671c:	00005efb 	.word	0x00005efb
    6720:	00806024 	.word	0x00806024
    6724:	000062ad 	.word	0x000062ad
    6728:	00005ed9 	.word	0x00005ed9
    672c:	00006115 	.word	0x00006115
    6730:	000067f9 	.word	0x000067f9
    6734:	00005e4d 	.word	0x00005e4d
    6738:	00006829 	.word	0x00006829
    673c:	0000694d 	.word	0x0000694d
    6740:	00005e7b 	.word	0x00005e7b
    6744:	00006a81 	.word	0x00006a81
    6748:	00006ac5 	.word	0x00006ac5
    674c:	00005f4d 	.word	0x00005f4d
    6750:	00005f6d 	.word	0x00005f6d

00006754 <system_apb_clock_set_mask>:
{
    6754:	b580      	push	{r7, lr}
    6756:	b082      	sub	sp, #8
    6758:	af00      	add	r7, sp, #0
    675a:	0002      	movs	r2, r0
    675c:	6039      	str	r1, [r7, #0]
    675e:	1dfb      	adds	r3, r7, #7
    6760:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6762:	1dfb      	adds	r3, r7, #7
    6764:	781b      	ldrb	r3, [r3, #0]
    6766:	2b01      	cmp	r3, #1
    6768:	d00a      	beq.n	6780 <system_apb_clock_set_mask+0x2c>
    676a:	2b02      	cmp	r3, #2
    676c:	d00f      	beq.n	678e <system_apb_clock_set_mask+0x3a>
    676e:	2b00      	cmp	r3, #0
    6770:	d114      	bne.n	679c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6772:	4b0e      	ldr	r3, [pc, #56]	; (67ac <system_apb_clock_set_mask+0x58>)
    6774:	4a0d      	ldr	r2, [pc, #52]	; (67ac <system_apb_clock_set_mask+0x58>)
    6776:	6991      	ldr	r1, [r2, #24]
    6778:	683a      	ldr	r2, [r7, #0]
    677a:	430a      	orrs	r2, r1
    677c:	619a      	str	r2, [r3, #24]
			break;
    677e:	e00f      	b.n	67a0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6780:	4b0a      	ldr	r3, [pc, #40]	; (67ac <system_apb_clock_set_mask+0x58>)
    6782:	4a0a      	ldr	r2, [pc, #40]	; (67ac <system_apb_clock_set_mask+0x58>)
    6784:	69d1      	ldr	r1, [r2, #28]
    6786:	683a      	ldr	r2, [r7, #0]
    6788:	430a      	orrs	r2, r1
    678a:	61da      	str	r2, [r3, #28]
			break;
    678c:	e008      	b.n	67a0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    678e:	4b07      	ldr	r3, [pc, #28]	; (67ac <system_apb_clock_set_mask+0x58>)
    6790:	4a06      	ldr	r2, [pc, #24]	; (67ac <system_apb_clock_set_mask+0x58>)
    6792:	6a11      	ldr	r1, [r2, #32]
    6794:	683a      	ldr	r2, [r7, #0]
    6796:	430a      	orrs	r2, r1
    6798:	621a      	str	r2, [r3, #32]
			break;
    679a:	e001      	b.n	67a0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    679c:	2317      	movs	r3, #23
    679e:	e000      	b.n	67a2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    67a0:	2300      	movs	r3, #0
}
    67a2:	0018      	movs	r0, r3
    67a4:	46bd      	mov	sp, r7
    67a6:	b002      	add	sp, #8
    67a8:	bd80      	pop	{r7, pc}
    67aa:	46c0      	nop			; (mov r8, r8)
    67ac:	40000400 	.word	0x40000400

000067b0 <system_interrupt_enter_critical_section>:
{
    67b0:	b580      	push	{r7, lr}
    67b2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    67b4:	4b02      	ldr	r3, [pc, #8]	; (67c0 <system_interrupt_enter_critical_section+0x10>)
    67b6:	4798      	blx	r3
}
    67b8:	46c0      	nop			; (mov r8, r8)
    67ba:	46bd      	mov	sp, r7
    67bc:	bd80      	pop	{r7, pc}
    67be:	46c0      	nop			; (mov r8, r8)
    67c0:	000033f5 	.word	0x000033f5

000067c4 <system_interrupt_leave_critical_section>:
{
    67c4:	b580      	push	{r7, lr}
    67c6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    67c8:	4b02      	ldr	r3, [pc, #8]	; (67d4 <system_interrupt_leave_critical_section+0x10>)
    67ca:	4798      	blx	r3
}
    67cc:	46c0      	nop			; (mov r8, r8)
    67ce:	46bd      	mov	sp, r7
    67d0:	bd80      	pop	{r7, pc}
    67d2:	46c0      	nop			; (mov r8, r8)
    67d4:	00003449 	.word	0x00003449

000067d8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    67d8:	b580      	push	{r7, lr}
    67da:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    67dc:	4b05      	ldr	r3, [pc, #20]	; (67f4 <system_gclk_is_syncing+0x1c>)
    67de:	785b      	ldrb	r3, [r3, #1]
    67e0:	b2db      	uxtb	r3, r3
    67e2:	b25b      	sxtb	r3, r3
    67e4:	2b00      	cmp	r3, #0
    67e6:	da01      	bge.n	67ec <system_gclk_is_syncing+0x14>
		return true;
    67e8:	2301      	movs	r3, #1
    67ea:	e000      	b.n	67ee <system_gclk_is_syncing+0x16>
	}

	return false;
    67ec:	2300      	movs	r3, #0
}
    67ee:	0018      	movs	r0, r3
    67f0:	46bd      	mov	sp, r7
    67f2:	bd80      	pop	{r7, pc}
    67f4:	40000c00 	.word	0x40000c00

000067f8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    67f8:	b580      	push	{r7, lr}
    67fa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    67fc:	2108      	movs	r1, #8
    67fe:	2000      	movs	r0, #0
    6800:	4b07      	ldr	r3, [pc, #28]	; (6820 <system_gclk_init+0x28>)
    6802:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6804:	4b07      	ldr	r3, [pc, #28]	; (6824 <system_gclk_init+0x2c>)
    6806:	2201      	movs	r2, #1
    6808:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    680a:	46c0      	nop			; (mov r8, r8)
    680c:	4b05      	ldr	r3, [pc, #20]	; (6824 <system_gclk_init+0x2c>)
    680e:	781b      	ldrb	r3, [r3, #0]
    6810:	b2db      	uxtb	r3, r3
    6812:	001a      	movs	r2, r3
    6814:	2301      	movs	r3, #1
    6816:	4013      	ands	r3, r2
    6818:	d1f8      	bne.n	680c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    681a:	46c0      	nop			; (mov r8, r8)
    681c:	46bd      	mov	sp, r7
    681e:	bd80      	pop	{r7, pc}
    6820:	00006755 	.word	0x00006755
    6824:	40000c00 	.word	0x40000c00

00006828 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6828:	b580      	push	{r7, lr}
    682a:	b086      	sub	sp, #24
    682c:	af00      	add	r7, sp, #0
    682e:	0002      	movs	r2, r0
    6830:	6039      	str	r1, [r7, #0]
    6832:	1dfb      	adds	r3, r7, #7
    6834:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6836:	1dfb      	adds	r3, r7, #7
    6838:	781b      	ldrb	r3, [r3, #0]
    683a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    683c:	1dfb      	adds	r3, r7, #7
    683e:	781b      	ldrb	r3, [r3, #0]
    6840:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6842:	683b      	ldr	r3, [r7, #0]
    6844:	781b      	ldrb	r3, [r3, #0]
    6846:	021b      	lsls	r3, r3, #8
    6848:	001a      	movs	r2, r3
    684a:	697b      	ldr	r3, [r7, #20]
    684c:	4313      	orrs	r3, r2
    684e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6850:	683b      	ldr	r3, [r7, #0]
    6852:	785b      	ldrb	r3, [r3, #1]
    6854:	2b00      	cmp	r3, #0
    6856:	d004      	beq.n	6862 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6858:	697b      	ldr	r3, [r7, #20]
    685a:	2280      	movs	r2, #128	; 0x80
    685c:	02d2      	lsls	r2, r2, #11
    685e:	4313      	orrs	r3, r2
    6860:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6862:	683b      	ldr	r3, [r7, #0]
    6864:	7a5b      	ldrb	r3, [r3, #9]
    6866:	2b00      	cmp	r3, #0
    6868:	d004      	beq.n	6874 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    686a:	697b      	ldr	r3, [r7, #20]
    686c:	2280      	movs	r2, #128	; 0x80
    686e:	0312      	lsls	r2, r2, #12
    6870:	4313      	orrs	r3, r2
    6872:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6874:	683b      	ldr	r3, [r7, #0]
    6876:	685b      	ldr	r3, [r3, #4]
    6878:	2b01      	cmp	r3, #1
    687a:	d92c      	bls.n	68d6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    687c:	683b      	ldr	r3, [r7, #0]
    687e:	685a      	ldr	r2, [r3, #4]
    6880:	683b      	ldr	r3, [r7, #0]
    6882:	685b      	ldr	r3, [r3, #4]
    6884:	3b01      	subs	r3, #1
    6886:	4013      	ands	r3, r2
    6888:	d11a      	bne.n	68c0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    688a:	2300      	movs	r3, #0
    688c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    688e:	2302      	movs	r3, #2
    6890:	60bb      	str	r3, [r7, #8]
    6892:	e005      	b.n	68a0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6894:	68fb      	ldr	r3, [r7, #12]
    6896:	3301      	adds	r3, #1
    6898:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    689a:	68bb      	ldr	r3, [r7, #8]
    689c:	005b      	lsls	r3, r3, #1
    689e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    68a0:	683b      	ldr	r3, [r7, #0]
    68a2:	685a      	ldr	r2, [r3, #4]
    68a4:	68bb      	ldr	r3, [r7, #8]
    68a6:	429a      	cmp	r2, r3
    68a8:	d8f4      	bhi.n	6894 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    68aa:	68fb      	ldr	r3, [r7, #12]
    68ac:	021b      	lsls	r3, r3, #8
    68ae:	693a      	ldr	r2, [r7, #16]
    68b0:	4313      	orrs	r3, r2
    68b2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    68b4:	697b      	ldr	r3, [r7, #20]
    68b6:	2280      	movs	r2, #128	; 0x80
    68b8:	0352      	lsls	r2, r2, #13
    68ba:	4313      	orrs	r3, r2
    68bc:	617b      	str	r3, [r7, #20]
    68be:	e00a      	b.n	68d6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    68c0:	683b      	ldr	r3, [r7, #0]
    68c2:	685b      	ldr	r3, [r3, #4]
    68c4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    68c6:	693a      	ldr	r2, [r7, #16]
    68c8:	4313      	orrs	r3, r2
    68ca:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    68cc:	697b      	ldr	r3, [r7, #20]
    68ce:	2280      	movs	r2, #128	; 0x80
    68d0:	0292      	lsls	r2, r2, #10
    68d2:	4313      	orrs	r3, r2
    68d4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    68d6:	683b      	ldr	r3, [r7, #0]
    68d8:	7a1b      	ldrb	r3, [r3, #8]
    68da:	2b00      	cmp	r3, #0
    68dc:	d004      	beq.n	68e8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    68de:	697b      	ldr	r3, [r7, #20]
    68e0:	2280      	movs	r2, #128	; 0x80
    68e2:	0392      	lsls	r2, r2, #14
    68e4:	4313      	orrs	r3, r2
    68e6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    68e8:	46c0      	nop			; (mov r8, r8)
    68ea:	4b13      	ldr	r3, [pc, #76]	; (6938 <system_gclk_gen_set_config+0x110>)
    68ec:	4798      	blx	r3
    68ee:	1e03      	subs	r3, r0, #0
    68f0:	d1fb      	bne.n	68ea <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    68f2:	4b12      	ldr	r3, [pc, #72]	; (693c <system_gclk_gen_set_config+0x114>)
    68f4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    68f6:	4a12      	ldr	r2, [pc, #72]	; (6940 <system_gclk_gen_set_config+0x118>)
    68f8:	1dfb      	adds	r3, r7, #7
    68fa:	781b      	ldrb	r3, [r3, #0]
    68fc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    68fe:	46c0      	nop			; (mov r8, r8)
    6900:	4b0d      	ldr	r3, [pc, #52]	; (6938 <system_gclk_gen_set_config+0x110>)
    6902:	4798      	blx	r3
    6904:	1e03      	subs	r3, r0, #0
    6906:	d1fb      	bne.n	6900 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6908:	4b0e      	ldr	r3, [pc, #56]	; (6944 <system_gclk_gen_set_config+0x11c>)
    690a:	693a      	ldr	r2, [r7, #16]
    690c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    690e:	46c0      	nop			; (mov r8, r8)
    6910:	4b09      	ldr	r3, [pc, #36]	; (6938 <system_gclk_gen_set_config+0x110>)
    6912:	4798      	blx	r3
    6914:	1e03      	subs	r3, r0, #0
    6916:	d1fb      	bne.n	6910 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6918:	4b0a      	ldr	r3, [pc, #40]	; (6944 <system_gclk_gen_set_config+0x11c>)
    691a:	4a0a      	ldr	r2, [pc, #40]	; (6944 <system_gclk_gen_set_config+0x11c>)
    691c:	6851      	ldr	r1, [r2, #4]
    691e:	2280      	movs	r2, #128	; 0x80
    6920:	0252      	lsls	r2, r2, #9
    6922:	4011      	ands	r1, r2
    6924:	697a      	ldr	r2, [r7, #20]
    6926:	430a      	orrs	r2, r1
    6928:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    692a:	4b07      	ldr	r3, [pc, #28]	; (6948 <system_gclk_gen_set_config+0x120>)
    692c:	4798      	blx	r3
}
    692e:	46c0      	nop			; (mov r8, r8)
    6930:	46bd      	mov	sp, r7
    6932:	b006      	add	sp, #24
    6934:	bd80      	pop	{r7, pc}
    6936:	46c0      	nop			; (mov r8, r8)
    6938:	000067d9 	.word	0x000067d9
    693c:	000067b1 	.word	0x000067b1
    6940:	40000c08 	.word	0x40000c08
    6944:	40000c00 	.word	0x40000c00
    6948:	000067c5 	.word	0x000067c5

0000694c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    694c:	b580      	push	{r7, lr}
    694e:	b082      	sub	sp, #8
    6950:	af00      	add	r7, sp, #0
    6952:	0002      	movs	r2, r0
    6954:	1dfb      	adds	r3, r7, #7
    6956:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6958:	46c0      	nop			; (mov r8, r8)
    695a:	4b0e      	ldr	r3, [pc, #56]	; (6994 <system_gclk_gen_enable+0x48>)
    695c:	4798      	blx	r3
    695e:	1e03      	subs	r3, r0, #0
    6960:	d1fb      	bne.n	695a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6962:	4b0d      	ldr	r3, [pc, #52]	; (6998 <system_gclk_gen_enable+0x4c>)
    6964:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6966:	4a0d      	ldr	r2, [pc, #52]	; (699c <system_gclk_gen_enable+0x50>)
    6968:	1dfb      	adds	r3, r7, #7
    696a:	781b      	ldrb	r3, [r3, #0]
    696c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    696e:	46c0      	nop			; (mov r8, r8)
    6970:	4b08      	ldr	r3, [pc, #32]	; (6994 <system_gclk_gen_enable+0x48>)
    6972:	4798      	blx	r3
    6974:	1e03      	subs	r3, r0, #0
    6976:	d1fb      	bne.n	6970 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6978:	4b09      	ldr	r3, [pc, #36]	; (69a0 <system_gclk_gen_enable+0x54>)
    697a:	4a09      	ldr	r2, [pc, #36]	; (69a0 <system_gclk_gen_enable+0x54>)
    697c:	6852      	ldr	r2, [r2, #4]
    697e:	2180      	movs	r1, #128	; 0x80
    6980:	0249      	lsls	r1, r1, #9
    6982:	430a      	orrs	r2, r1
    6984:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6986:	4b07      	ldr	r3, [pc, #28]	; (69a4 <system_gclk_gen_enable+0x58>)
    6988:	4798      	blx	r3
}
    698a:	46c0      	nop			; (mov r8, r8)
    698c:	46bd      	mov	sp, r7
    698e:	b002      	add	sp, #8
    6990:	bd80      	pop	{r7, pc}
    6992:	46c0      	nop			; (mov r8, r8)
    6994:	000067d9 	.word	0x000067d9
    6998:	000067b1 	.word	0x000067b1
    699c:	40000c04 	.word	0x40000c04
    69a0:	40000c00 	.word	0x40000c00
    69a4:	000067c5 	.word	0x000067c5

000069a8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    69a8:	b580      	push	{r7, lr}
    69aa:	b086      	sub	sp, #24
    69ac:	af00      	add	r7, sp, #0
    69ae:	0002      	movs	r2, r0
    69b0:	1dfb      	adds	r3, r7, #7
    69b2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    69b4:	46c0      	nop			; (mov r8, r8)
    69b6:	4b2a      	ldr	r3, [pc, #168]	; (6a60 <system_gclk_gen_get_hz+0xb8>)
    69b8:	4798      	blx	r3
    69ba:	1e03      	subs	r3, r0, #0
    69bc:	d1fb      	bne.n	69b6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    69be:	4b29      	ldr	r3, [pc, #164]	; (6a64 <system_gclk_gen_get_hz+0xbc>)
    69c0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    69c2:	4a29      	ldr	r2, [pc, #164]	; (6a68 <system_gclk_gen_get_hz+0xc0>)
    69c4:	1dfb      	adds	r3, r7, #7
    69c6:	781b      	ldrb	r3, [r3, #0]
    69c8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    69ca:	46c0      	nop			; (mov r8, r8)
    69cc:	4b24      	ldr	r3, [pc, #144]	; (6a60 <system_gclk_gen_get_hz+0xb8>)
    69ce:	4798      	blx	r3
    69d0:	1e03      	subs	r3, r0, #0
    69d2:	d1fb      	bne.n	69cc <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    69d4:	4b25      	ldr	r3, [pc, #148]	; (6a6c <system_gclk_gen_get_hz+0xc4>)
    69d6:	685b      	ldr	r3, [r3, #4]
    69d8:	04db      	lsls	r3, r3, #19
    69da:	0edb      	lsrs	r3, r3, #27
    69dc:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    69de:	0018      	movs	r0, r3
    69e0:	4b23      	ldr	r3, [pc, #140]	; (6a70 <system_gclk_gen_get_hz+0xc8>)
    69e2:	4798      	blx	r3
    69e4:	0003      	movs	r3, r0
    69e6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    69e8:	4a1f      	ldr	r2, [pc, #124]	; (6a68 <system_gclk_gen_get_hz+0xc0>)
    69ea:	1dfb      	adds	r3, r7, #7
    69ec:	781b      	ldrb	r3, [r3, #0]
    69ee:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    69f0:	4b1e      	ldr	r3, [pc, #120]	; (6a6c <system_gclk_gen_get_hz+0xc4>)
    69f2:	685b      	ldr	r3, [r3, #4]
    69f4:	02db      	lsls	r3, r3, #11
    69f6:	0fdb      	lsrs	r3, r3, #31
    69f8:	b2da      	uxtb	r2, r3
    69fa:	2313      	movs	r3, #19
    69fc:	18fb      	adds	r3, r7, r3
    69fe:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6a00:	4a1c      	ldr	r2, [pc, #112]	; (6a74 <system_gclk_gen_get_hz+0xcc>)
    6a02:	1dfb      	adds	r3, r7, #7
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6a08:	46c0      	nop			; (mov r8, r8)
    6a0a:	4b15      	ldr	r3, [pc, #84]	; (6a60 <system_gclk_gen_get_hz+0xb8>)
    6a0c:	4798      	blx	r3
    6a0e:	1e03      	subs	r3, r0, #0
    6a10:	d1fb      	bne.n	6a0a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6a12:	4b16      	ldr	r3, [pc, #88]	; (6a6c <system_gclk_gen_get_hz+0xc4>)
    6a14:	689b      	ldr	r3, [r3, #8]
    6a16:	021b      	lsls	r3, r3, #8
    6a18:	0c1b      	lsrs	r3, r3, #16
    6a1a:	b29b      	uxth	r3, r3
    6a1c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    6a1e:	4b16      	ldr	r3, [pc, #88]	; (6a78 <system_gclk_gen_get_hz+0xd0>)
    6a20:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6a22:	2313      	movs	r3, #19
    6a24:	18fb      	adds	r3, r7, r3
    6a26:	781b      	ldrb	r3, [r3, #0]
    6a28:	2b00      	cmp	r3, #0
    6a2a:	d109      	bne.n	6a40 <system_gclk_gen_get_hz+0x98>
    6a2c:	68fb      	ldr	r3, [r7, #12]
    6a2e:	2b01      	cmp	r3, #1
    6a30:	d906      	bls.n	6a40 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    6a32:	4b12      	ldr	r3, [pc, #72]	; (6a7c <system_gclk_gen_get_hz+0xd4>)
    6a34:	68f9      	ldr	r1, [r7, #12]
    6a36:	6978      	ldr	r0, [r7, #20]
    6a38:	4798      	blx	r3
    6a3a:	0003      	movs	r3, r0
    6a3c:	617b      	str	r3, [r7, #20]
    6a3e:	e00a      	b.n	6a56 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    6a40:	2313      	movs	r3, #19
    6a42:	18fb      	adds	r3, r7, r3
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	2b00      	cmp	r3, #0
    6a48:	d005      	beq.n	6a56 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    6a4a:	68fb      	ldr	r3, [r7, #12]
    6a4c:	3301      	adds	r3, #1
    6a4e:	697a      	ldr	r2, [r7, #20]
    6a50:	40da      	lsrs	r2, r3
    6a52:	0013      	movs	r3, r2
    6a54:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6a56:	697b      	ldr	r3, [r7, #20]
}
    6a58:	0018      	movs	r0, r3
    6a5a:	46bd      	mov	sp, r7
    6a5c:	b006      	add	sp, #24
    6a5e:	bd80      	pop	{r7, pc}
    6a60:	000067d9 	.word	0x000067d9
    6a64:	000067b1 	.word	0x000067b1
    6a68:	40000c04 	.word	0x40000c04
    6a6c:	40000c00 	.word	0x40000c00
    6a70:	00006055 	.word	0x00006055
    6a74:	40000c08 	.word	0x40000c08
    6a78:	000067c5 	.word	0x000067c5
    6a7c:	0000b53d 	.word	0x0000b53d

00006a80 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6a80:	b580      	push	{r7, lr}
    6a82:	b084      	sub	sp, #16
    6a84:	af00      	add	r7, sp, #0
    6a86:	0002      	movs	r2, r0
    6a88:	6039      	str	r1, [r7, #0]
    6a8a:	1dfb      	adds	r3, r7, #7
    6a8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6a8e:	1dfb      	adds	r3, r7, #7
    6a90:	781b      	ldrb	r3, [r3, #0]
    6a92:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6a94:	683b      	ldr	r3, [r7, #0]
    6a96:	781b      	ldrb	r3, [r3, #0]
    6a98:	021b      	lsls	r3, r3, #8
    6a9a:	001a      	movs	r2, r3
    6a9c:	68fb      	ldr	r3, [r7, #12]
    6a9e:	4313      	orrs	r3, r2
    6aa0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6aa2:	1dfb      	adds	r3, r7, #7
    6aa4:	781b      	ldrb	r3, [r3, #0]
    6aa6:	0018      	movs	r0, r3
    6aa8:	4b04      	ldr	r3, [pc, #16]	; (6abc <system_gclk_chan_set_config+0x3c>)
    6aaa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6aac:	4b04      	ldr	r3, [pc, #16]	; (6ac0 <system_gclk_chan_set_config+0x40>)
    6aae:	68fa      	ldr	r2, [r7, #12]
    6ab0:	b292      	uxth	r2, r2
    6ab2:	805a      	strh	r2, [r3, #2]
}
    6ab4:	46c0      	nop			; (mov r8, r8)
    6ab6:	46bd      	mov	sp, r7
    6ab8:	b004      	add	sp, #16
    6aba:	bd80      	pop	{r7, pc}
    6abc:	00006b0d 	.word	0x00006b0d
    6ac0:	40000c00 	.word	0x40000c00

00006ac4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6ac4:	b580      	push	{r7, lr}
    6ac6:	b082      	sub	sp, #8
    6ac8:	af00      	add	r7, sp, #0
    6aca:	0002      	movs	r2, r0
    6acc:	1dfb      	adds	r3, r7, #7
    6ace:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6ad0:	4b0a      	ldr	r3, [pc, #40]	; (6afc <system_gclk_chan_enable+0x38>)
    6ad2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6ad4:	4a0a      	ldr	r2, [pc, #40]	; (6b00 <system_gclk_chan_enable+0x3c>)
    6ad6:	1dfb      	adds	r3, r7, #7
    6ad8:	781b      	ldrb	r3, [r3, #0]
    6ada:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6adc:	4909      	ldr	r1, [pc, #36]	; (6b04 <system_gclk_chan_enable+0x40>)
    6ade:	4b09      	ldr	r3, [pc, #36]	; (6b04 <system_gclk_chan_enable+0x40>)
    6ae0:	885b      	ldrh	r3, [r3, #2]
    6ae2:	b29b      	uxth	r3, r3
    6ae4:	2280      	movs	r2, #128	; 0x80
    6ae6:	01d2      	lsls	r2, r2, #7
    6ae8:	4313      	orrs	r3, r2
    6aea:	b29b      	uxth	r3, r3
    6aec:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    6aee:	4b06      	ldr	r3, [pc, #24]	; (6b08 <system_gclk_chan_enable+0x44>)
    6af0:	4798      	blx	r3
}
    6af2:	46c0      	nop			; (mov r8, r8)
    6af4:	46bd      	mov	sp, r7
    6af6:	b002      	add	sp, #8
    6af8:	bd80      	pop	{r7, pc}
    6afa:	46c0      	nop			; (mov r8, r8)
    6afc:	000067b1 	.word	0x000067b1
    6b00:	40000c02 	.word	0x40000c02
    6b04:	40000c00 	.word	0x40000c00
    6b08:	000067c5 	.word	0x000067c5

00006b0c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6b0c:	b580      	push	{r7, lr}
    6b0e:	b084      	sub	sp, #16
    6b10:	af00      	add	r7, sp, #0
    6b12:	0002      	movs	r2, r0
    6b14:	1dfb      	adds	r3, r7, #7
    6b16:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6b18:	4b1c      	ldr	r3, [pc, #112]	; (6b8c <system_gclk_chan_disable+0x80>)
    6b1a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6b1c:	4a1c      	ldr	r2, [pc, #112]	; (6b90 <system_gclk_chan_disable+0x84>)
    6b1e:	1dfb      	adds	r3, r7, #7
    6b20:	781b      	ldrb	r3, [r3, #0]
    6b22:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6b24:	4b1b      	ldr	r3, [pc, #108]	; (6b94 <system_gclk_chan_disable+0x88>)
    6b26:	885b      	ldrh	r3, [r3, #2]
    6b28:	051b      	lsls	r3, r3, #20
    6b2a:	0f1b      	lsrs	r3, r3, #28
    6b2c:	b2db      	uxtb	r3, r3
    6b2e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6b30:	4a18      	ldr	r2, [pc, #96]	; (6b94 <system_gclk_chan_disable+0x88>)
    6b32:	8853      	ldrh	r3, [r2, #2]
    6b34:	4918      	ldr	r1, [pc, #96]	; (6b98 <system_gclk_chan_disable+0x8c>)
    6b36:	400b      	ands	r3, r1
    6b38:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6b3a:	4a16      	ldr	r2, [pc, #88]	; (6b94 <system_gclk_chan_disable+0x88>)
    6b3c:	4b15      	ldr	r3, [pc, #84]	; (6b94 <system_gclk_chan_disable+0x88>)
    6b3e:	885b      	ldrh	r3, [r3, #2]
    6b40:	b29b      	uxth	r3, r3
    6b42:	4916      	ldr	r1, [pc, #88]	; (6b9c <system_gclk_chan_disable+0x90>)
    6b44:	400b      	ands	r3, r1
    6b46:	b29b      	uxth	r3, r3
    6b48:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6b4a:	46c0      	nop			; (mov r8, r8)
    6b4c:	4b11      	ldr	r3, [pc, #68]	; (6b94 <system_gclk_chan_disable+0x88>)
    6b4e:	885b      	ldrh	r3, [r3, #2]
    6b50:	b29b      	uxth	r3, r3
    6b52:	001a      	movs	r2, r3
    6b54:	2380      	movs	r3, #128	; 0x80
    6b56:	01db      	lsls	r3, r3, #7
    6b58:	4013      	ands	r3, r2
    6b5a:	d1f7      	bne.n	6b4c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6b5c:	4a0d      	ldr	r2, [pc, #52]	; (6b94 <system_gclk_chan_disable+0x88>)
    6b5e:	68fb      	ldr	r3, [r7, #12]
    6b60:	b2db      	uxtb	r3, r3
    6b62:	1c19      	adds	r1, r3, #0
    6b64:	230f      	movs	r3, #15
    6b66:	400b      	ands	r3, r1
    6b68:	b2d9      	uxtb	r1, r3
    6b6a:	8853      	ldrh	r3, [r2, #2]
    6b6c:	1c08      	adds	r0, r1, #0
    6b6e:	210f      	movs	r1, #15
    6b70:	4001      	ands	r1, r0
    6b72:	0208      	lsls	r0, r1, #8
    6b74:	4908      	ldr	r1, [pc, #32]	; (6b98 <system_gclk_chan_disable+0x8c>)
    6b76:	400b      	ands	r3, r1
    6b78:	1c19      	adds	r1, r3, #0
    6b7a:	1c03      	adds	r3, r0, #0
    6b7c:	430b      	orrs	r3, r1
    6b7e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6b80:	4b07      	ldr	r3, [pc, #28]	; (6ba0 <system_gclk_chan_disable+0x94>)
    6b82:	4798      	blx	r3
}
    6b84:	46c0      	nop			; (mov r8, r8)
    6b86:	46bd      	mov	sp, r7
    6b88:	b004      	add	sp, #16
    6b8a:	bd80      	pop	{r7, pc}
    6b8c:	000067b1 	.word	0x000067b1
    6b90:	40000c02 	.word	0x40000c02
    6b94:	40000c00 	.word	0x40000c00
    6b98:	fffff0ff 	.word	0xfffff0ff
    6b9c:	ffffbfff 	.word	0xffffbfff
    6ba0:	000067c5 	.word	0x000067c5

00006ba4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b084      	sub	sp, #16
    6ba8:	af00      	add	r7, sp, #0
    6baa:	0002      	movs	r2, r0
    6bac:	1dfb      	adds	r3, r7, #7
    6bae:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6bb0:	4b0d      	ldr	r3, [pc, #52]	; (6be8 <system_gclk_chan_get_hz+0x44>)
    6bb2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6bb4:	4a0d      	ldr	r2, [pc, #52]	; (6bec <system_gclk_chan_get_hz+0x48>)
    6bb6:	1dfb      	adds	r3, r7, #7
    6bb8:	781b      	ldrb	r3, [r3, #0]
    6bba:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6bbc:	4b0c      	ldr	r3, [pc, #48]	; (6bf0 <system_gclk_chan_get_hz+0x4c>)
    6bbe:	885b      	ldrh	r3, [r3, #2]
    6bc0:	051b      	lsls	r3, r3, #20
    6bc2:	0f1b      	lsrs	r3, r3, #28
    6bc4:	b2da      	uxtb	r2, r3
    6bc6:	230f      	movs	r3, #15
    6bc8:	18fb      	adds	r3, r7, r3
    6bca:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6bcc:	4b09      	ldr	r3, [pc, #36]	; (6bf4 <system_gclk_chan_get_hz+0x50>)
    6bce:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6bd0:	230f      	movs	r3, #15
    6bd2:	18fb      	adds	r3, r7, r3
    6bd4:	781b      	ldrb	r3, [r3, #0]
    6bd6:	0018      	movs	r0, r3
    6bd8:	4b07      	ldr	r3, [pc, #28]	; (6bf8 <system_gclk_chan_get_hz+0x54>)
    6bda:	4798      	blx	r3
    6bdc:	0003      	movs	r3, r0
}
    6bde:	0018      	movs	r0, r3
    6be0:	46bd      	mov	sp, r7
    6be2:	b004      	add	sp, #16
    6be4:	bd80      	pop	{r7, pc}
    6be6:	46c0      	nop			; (mov r8, r8)
    6be8:	000067b1 	.word	0x000067b1
    6bec:	40000c02 	.word	0x40000c02
    6bf0:	40000c00 	.word	0x40000c00
    6bf4:	000067c5 	.word	0x000067c5
    6bf8:	000069a9 	.word	0x000069a9

00006bfc <system_pinmux_get_group_from_gpio_pin>:
{
    6bfc:	b580      	push	{r7, lr}
    6bfe:	b084      	sub	sp, #16
    6c00:	af00      	add	r7, sp, #0
    6c02:	0002      	movs	r2, r0
    6c04:	1dfb      	adds	r3, r7, #7
    6c06:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6c08:	230f      	movs	r3, #15
    6c0a:	18fb      	adds	r3, r7, r3
    6c0c:	1dfa      	adds	r2, r7, #7
    6c0e:	7812      	ldrb	r2, [r2, #0]
    6c10:	09d2      	lsrs	r2, r2, #7
    6c12:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6c14:	230e      	movs	r3, #14
    6c16:	18fb      	adds	r3, r7, r3
    6c18:	1dfa      	adds	r2, r7, #7
    6c1a:	7812      	ldrb	r2, [r2, #0]
    6c1c:	0952      	lsrs	r2, r2, #5
    6c1e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6c20:	4b0d      	ldr	r3, [pc, #52]	; (6c58 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6c22:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6c24:	230f      	movs	r3, #15
    6c26:	18fb      	adds	r3, r7, r3
    6c28:	781b      	ldrb	r3, [r3, #0]
    6c2a:	2b00      	cmp	r3, #0
    6c2c:	d10f      	bne.n	6c4e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6c2e:	230f      	movs	r3, #15
    6c30:	18fb      	adds	r3, r7, r3
    6c32:	781b      	ldrb	r3, [r3, #0]
    6c34:	009b      	lsls	r3, r3, #2
    6c36:	2210      	movs	r2, #16
    6c38:	4694      	mov	ip, r2
    6c3a:	44bc      	add	ip, r7
    6c3c:	4463      	add	r3, ip
    6c3e:	3b08      	subs	r3, #8
    6c40:	681a      	ldr	r2, [r3, #0]
    6c42:	230e      	movs	r3, #14
    6c44:	18fb      	adds	r3, r7, r3
    6c46:	781b      	ldrb	r3, [r3, #0]
    6c48:	01db      	lsls	r3, r3, #7
    6c4a:	18d3      	adds	r3, r2, r3
    6c4c:	e000      	b.n	6c50 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6c4e:	2300      	movs	r3, #0
}
    6c50:	0018      	movs	r0, r3
    6c52:	46bd      	mov	sp, r7
    6c54:	b004      	add	sp, #16
    6c56:	bd80      	pop	{r7, pc}
    6c58:	41004400 	.word	0x41004400

00006c5c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6c5c:	b580      	push	{r7, lr}
    6c5e:	b088      	sub	sp, #32
    6c60:	af00      	add	r7, sp, #0
    6c62:	60f8      	str	r0, [r7, #12]
    6c64:	60b9      	str	r1, [r7, #8]
    6c66:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6c68:	2300      	movs	r3, #0
    6c6a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	78db      	ldrb	r3, [r3, #3]
    6c70:	2201      	movs	r2, #1
    6c72:	4053      	eors	r3, r2
    6c74:	b2db      	uxtb	r3, r3
    6c76:	2b00      	cmp	r3, #0
    6c78:	d035      	beq.n	6ce6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	781b      	ldrb	r3, [r3, #0]
    6c7e:	2b80      	cmp	r3, #128	; 0x80
    6c80:	d00b      	beq.n	6c9a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6c82:	69fb      	ldr	r3, [r7, #28]
    6c84:	2280      	movs	r2, #128	; 0x80
    6c86:	0252      	lsls	r2, r2, #9
    6c88:	4313      	orrs	r3, r2
    6c8a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6c8c:	687b      	ldr	r3, [r7, #4]
    6c8e:	781b      	ldrb	r3, [r3, #0]
    6c90:	061b      	lsls	r3, r3, #24
    6c92:	001a      	movs	r2, r3
    6c94:	69fb      	ldr	r3, [r7, #28]
    6c96:	4313      	orrs	r3, r2
    6c98:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6c9a:	687b      	ldr	r3, [r7, #4]
    6c9c:	785b      	ldrb	r3, [r3, #1]
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	d003      	beq.n	6caa <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6ca2:	687b      	ldr	r3, [r7, #4]
    6ca4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6ca6:	2b02      	cmp	r3, #2
    6ca8:	d110      	bne.n	6ccc <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6caa:	69fb      	ldr	r3, [r7, #28]
    6cac:	2280      	movs	r2, #128	; 0x80
    6cae:	0292      	lsls	r2, r2, #10
    6cb0:	4313      	orrs	r3, r2
    6cb2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	789b      	ldrb	r3, [r3, #2]
    6cb8:	2b00      	cmp	r3, #0
    6cba:	d004      	beq.n	6cc6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6cbc:	69fb      	ldr	r3, [r7, #28]
    6cbe:	2280      	movs	r2, #128	; 0x80
    6cc0:	02d2      	lsls	r2, r2, #11
    6cc2:	4313      	orrs	r3, r2
    6cc4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6cc6:	68fb      	ldr	r3, [r7, #12]
    6cc8:	68ba      	ldr	r2, [r7, #8]
    6cca:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	785b      	ldrb	r3, [r3, #1]
    6cd0:	2b01      	cmp	r3, #1
    6cd2:	d003      	beq.n	6cdc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6cd4:	687b      	ldr	r3, [r7, #4]
    6cd6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6cd8:	2b02      	cmp	r3, #2
    6cda:	d107      	bne.n	6cec <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6cdc:	69fb      	ldr	r3, [r7, #28]
    6cde:	4a22      	ldr	r2, [pc, #136]	; (6d68 <_system_pinmux_config+0x10c>)
    6ce0:	4013      	ands	r3, r2
    6ce2:	61fb      	str	r3, [r7, #28]
    6ce4:	e002      	b.n	6cec <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6ce6:	68fb      	ldr	r3, [r7, #12]
    6ce8:	68ba      	ldr	r2, [r7, #8]
    6cea:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6cec:	68bb      	ldr	r3, [r7, #8]
    6cee:	041b      	lsls	r3, r3, #16
    6cf0:	0c1b      	lsrs	r3, r3, #16
    6cf2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6cf4:	68bb      	ldr	r3, [r7, #8]
    6cf6:	0c1b      	lsrs	r3, r3, #16
    6cf8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6cfa:	69ba      	ldr	r2, [r7, #24]
    6cfc:	69fb      	ldr	r3, [r7, #28]
    6cfe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6d00:	22a0      	movs	r2, #160	; 0xa0
    6d02:	05d2      	lsls	r2, r2, #23
    6d04:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6d06:	68fb      	ldr	r3, [r7, #12]
    6d08:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6d0a:	697a      	ldr	r2, [r7, #20]
    6d0c:	69fb      	ldr	r3, [r7, #28]
    6d0e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6d10:	22d0      	movs	r2, #208	; 0xd0
    6d12:	0612      	lsls	r2, r2, #24
    6d14:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6d16:	68fb      	ldr	r3, [r7, #12]
    6d18:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6d1a:	687b      	ldr	r3, [r7, #4]
    6d1c:	78db      	ldrb	r3, [r3, #3]
    6d1e:	2201      	movs	r2, #1
    6d20:	4053      	eors	r3, r2
    6d22:	b2db      	uxtb	r3, r3
    6d24:	2b00      	cmp	r3, #0
    6d26:	d01a      	beq.n	6d5e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6d28:	69fa      	ldr	r2, [r7, #28]
    6d2a:	2380      	movs	r3, #128	; 0x80
    6d2c:	02db      	lsls	r3, r3, #11
    6d2e:	4013      	ands	r3, r2
    6d30:	d00a      	beq.n	6d48 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6d32:	687b      	ldr	r3, [r7, #4]
    6d34:	789b      	ldrb	r3, [r3, #2]
    6d36:	2b01      	cmp	r3, #1
    6d38:	d103      	bne.n	6d42 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6d3a:	68fb      	ldr	r3, [r7, #12]
    6d3c:	68ba      	ldr	r2, [r7, #8]
    6d3e:	619a      	str	r2, [r3, #24]
    6d40:	e002      	b.n	6d48 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6d42:	68fb      	ldr	r3, [r7, #12]
    6d44:	68ba      	ldr	r2, [r7, #8]
    6d46:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6d48:	687b      	ldr	r3, [r7, #4]
    6d4a:	785b      	ldrb	r3, [r3, #1]
    6d4c:	2b01      	cmp	r3, #1
    6d4e:	d003      	beq.n	6d58 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6d50:	687b      	ldr	r3, [r7, #4]
    6d52:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6d54:	2b02      	cmp	r3, #2
    6d56:	d102      	bne.n	6d5e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6d58:	68fb      	ldr	r3, [r7, #12]
    6d5a:	68ba      	ldr	r2, [r7, #8]
    6d5c:	609a      	str	r2, [r3, #8]
		}
	}
}
    6d5e:	46c0      	nop			; (mov r8, r8)
    6d60:	46bd      	mov	sp, r7
    6d62:	b008      	add	sp, #32
    6d64:	bd80      	pop	{r7, pc}
    6d66:	46c0      	nop			; (mov r8, r8)
    6d68:	fffbffff 	.word	0xfffbffff

00006d6c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6d6c:	b580      	push	{r7, lr}
    6d6e:	b084      	sub	sp, #16
    6d70:	af00      	add	r7, sp, #0
    6d72:	0002      	movs	r2, r0
    6d74:	6039      	str	r1, [r7, #0]
    6d76:	1dfb      	adds	r3, r7, #7
    6d78:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6d7a:	1dfb      	adds	r3, r7, #7
    6d7c:	781b      	ldrb	r3, [r3, #0]
    6d7e:	0018      	movs	r0, r3
    6d80:	4b0a      	ldr	r3, [pc, #40]	; (6dac <system_pinmux_pin_set_config+0x40>)
    6d82:	4798      	blx	r3
    6d84:	0003      	movs	r3, r0
    6d86:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6d88:	1dfb      	adds	r3, r7, #7
    6d8a:	781b      	ldrb	r3, [r3, #0]
    6d8c:	221f      	movs	r2, #31
    6d8e:	4013      	ands	r3, r2
    6d90:	2201      	movs	r2, #1
    6d92:	409a      	lsls	r2, r3
    6d94:	0013      	movs	r3, r2
    6d96:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6d98:	683a      	ldr	r2, [r7, #0]
    6d9a:	68b9      	ldr	r1, [r7, #8]
    6d9c:	68fb      	ldr	r3, [r7, #12]
    6d9e:	0018      	movs	r0, r3
    6da0:	4b03      	ldr	r3, [pc, #12]	; (6db0 <system_pinmux_pin_set_config+0x44>)
    6da2:	4798      	blx	r3
}
    6da4:	46c0      	nop			; (mov r8, r8)
    6da6:	46bd      	mov	sp, r7
    6da8:	b004      	add	sp, #16
    6daa:	bd80      	pop	{r7, pc}
    6dac:	00006bfd 	.word	0x00006bfd
    6db0:	00006c5d 	.word	0x00006c5d

00006db4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6db4:	b580      	push	{r7, lr}
    6db6:	af00      	add	r7, sp, #0
	return;
    6db8:	46c0      	nop			; (mov r8, r8)
}
    6dba:	46bd      	mov	sp, r7
    6dbc:	bd80      	pop	{r7, pc}
	...

00006dc0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6dc0:	b580      	push	{r7, lr}
    6dc2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6dc4:	4b06      	ldr	r3, [pc, #24]	; (6de0 <system_init+0x20>)
    6dc6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6dc8:	4b06      	ldr	r3, [pc, #24]	; (6de4 <system_init+0x24>)
    6dca:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6dcc:	4b06      	ldr	r3, [pc, #24]	; (6de8 <system_init+0x28>)
    6dce:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6dd0:	4b06      	ldr	r3, [pc, #24]	; (6dec <system_init+0x2c>)
    6dd2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6dd4:	4b06      	ldr	r3, [pc, #24]	; (6df0 <system_init+0x30>)
    6dd6:	4798      	blx	r3
}
    6dd8:	46c0      	nop			; (mov r8, r8)
    6dda:	46bd      	mov	sp, r7
    6ddc:	bd80      	pop	{r7, pc}
    6dde:	46c0      	nop			; (mov r8, r8)
    6de0:	000064e5 	.word	0x000064e5
    6de4:	000002f9 	.word	0x000002f9
    6de8:	00006db5 	.word	0x00006db5
    6dec:	00006db5 	.word	0x00006db5
    6df0:	00006db5 	.word	0x00006db5

00006df4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6df4:	b580      	push	{r7, lr}
    6df6:	b082      	sub	sp, #8
    6df8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6dfa:	4b2f      	ldr	r3, [pc, #188]	; (6eb8 <Reset_Handler+0xc4>)
    6dfc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6dfe:	4b2f      	ldr	r3, [pc, #188]	; (6ebc <Reset_Handler+0xc8>)
    6e00:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6e02:	687a      	ldr	r2, [r7, #4]
    6e04:	683b      	ldr	r3, [r7, #0]
    6e06:	429a      	cmp	r2, r3
    6e08:	d00c      	beq.n	6e24 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6e0a:	e007      	b.n	6e1c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6e0c:	683b      	ldr	r3, [r7, #0]
    6e0e:	1d1a      	adds	r2, r3, #4
    6e10:	603a      	str	r2, [r7, #0]
    6e12:	687a      	ldr	r2, [r7, #4]
    6e14:	1d11      	adds	r1, r2, #4
    6e16:	6079      	str	r1, [r7, #4]
    6e18:	6812      	ldr	r2, [r2, #0]
    6e1a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6e1c:	683a      	ldr	r2, [r7, #0]
    6e1e:	4b28      	ldr	r3, [pc, #160]	; (6ec0 <Reset_Handler+0xcc>)
    6e20:	429a      	cmp	r2, r3
    6e22:	d3f3      	bcc.n	6e0c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6e24:	4b27      	ldr	r3, [pc, #156]	; (6ec4 <Reset_Handler+0xd0>)
    6e26:	603b      	str	r3, [r7, #0]
    6e28:	e004      	b.n	6e34 <Reset_Handler+0x40>
                *pDest++ = 0;
    6e2a:	683b      	ldr	r3, [r7, #0]
    6e2c:	1d1a      	adds	r2, r3, #4
    6e2e:	603a      	str	r2, [r7, #0]
    6e30:	2200      	movs	r2, #0
    6e32:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6e34:	683a      	ldr	r2, [r7, #0]
    6e36:	4b24      	ldr	r3, [pc, #144]	; (6ec8 <Reset_Handler+0xd4>)
    6e38:	429a      	cmp	r2, r3
    6e3a:	d3f6      	bcc.n	6e2a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6e3c:	4b23      	ldr	r3, [pc, #140]	; (6ecc <Reset_Handler+0xd8>)
    6e3e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6e40:	4b23      	ldr	r3, [pc, #140]	; (6ed0 <Reset_Handler+0xdc>)
    6e42:	687a      	ldr	r2, [r7, #4]
    6e44:	21ff      	movs	r1, #255	; 0xff
    6e46:	438a      	bics	r2, r1
    6e48:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6e4a:	4a22      	ldr	r2, [pc, #136]	; (6ed4 <Reset_Handler+0xe0>)
    6e4c:	2390      	movs	r3, #144	; 0x90
    6e4e:	005b      	lsls	r3, r3, #1
    6e50:	2102      	movs	r1, #2
    6e52:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6e54:	4a20      	ldr	r2, [pc, #128]	; (6ed8 <Reset_Handler+0xe4>)
    6e56:	78d3      	ldrb	r3, [r2, #3]
    6e58:	2103      	movs	r1, #3
    6e5a:	438b      	bics	r3, r1
    6e5c:	1c19      	adds	r1, r3, #0
    6e5e:	2302      	movs	r3, #2
    6e60:	430b      	orrs	r3, r1
    6e62:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6e64:	4a1c      	ldr	r2, [pc, #112]	; (6ed8 <Reset_Handler+0xe4>)
    6e66:	78d3      	ldrb	r3, [r2, #3]
    6e68:	210c      	movs	r1, #12
    6e6a:	438b      	bics	r3, r1
    6e6c:	1c19      	adds	r1, r3, #0
    6e6e:	2308      	movs	r3, #8
    6e70:	430b      	orrs	r3, r1
    6e72:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6e74:	4a19      	ldr	r2, [pc, #100]	; (6edc <Reset_Handler+0xe8>)
    6e76:	7b93      	ldrb	r3, [r2, #14]
    6e78:	2130      	movs	r1, #48	; 0x30
    6e7a:	438b      	bics	r3, r1
    6e7c:	1c19      	adds	r1, r3, #0
    6e7e:	2320      	movs	r3, #32
    6e80:	430b      	orrs	r3, r1
    6e82:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6e84:	4a15      	ldr	r2, [pc, #84]	; (6edc <Reset_Handler+0xe8>)
    6e86:	7b93      	ldrb	r3, [r2, #14]
    6e88:	210c      	movs	r1, #12
    6e8a:	438b      	bics	r3, r1
    6e8c:	1c19      	adds	r1, r3, #0
    6e8e:	2308      	movs	r3, #8
    6e90:	430b      	orrs	r3, r1
    6e92:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6e94:	4a11      	ldr	r2, [pc, #68]	; (6edc <Reset_Handler+0xe8>)
    6e96:	7b93      	ldrb	r3, [r2, #14]
    6e98:	2103      	movs	r1, #3
    6e9a:	438b      	bics	r3, r1
    6e9c:	1c19      	adds	r1, r3, #0
    6e9e:	2302      	movs	r3, #2
    6ea0:	430b      	orrs	r3, r1
    6ea2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6ea4:	4a0e      	ldr	r2, [pc, #56]	; (6ee0 <Reset_Handler+0xec>)
    6ea6:	6853      	ldr	r3, [r2, #4]
    6ea8:	2180      	movs	r1, #128	; 0x80
    6eaa:	430b      	orrs	r3, r1
    6eac:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6eae:	4b0d      	ldr	r3, [pc, #52]	; (6ee4 <Reset_Handler+0xf0>)
    6eb0:	4798      	blx	r3

        /* Branch to main function */
        main();
    6eb2:	4b0d      	ldr	r3, [pc, #52]	; (6ee8 <Reset_Handler+0xf4>)
    6eb4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6eb6:	e7fe      	b.n	6eb6 <Reset_Handler+0xc2>
    6eb8:	0000d3f8 	.word	0x0000d3f8
    6ebc:	20000000 	.word	0x20000000
    6ec0:	200000dc 	.word	0x200000dc
    6ec4:	200000dc 	.word	0x200000dc
    6ec8:	20000de0 	.word	0x20000de0
    6ecc:	00000000 	.word	0x00000000
    6ed0:	e000ed00 	.word	0xe000ed00
    6ed4:	41007000 	.word	0x41007000
    6ed8:	41005000 	.word	0x41005000
    6edc:	41004800 	.word	0x41004800
    6ee0:	41004000 	.word	0x41004000
    6ee4:	0000b87d 	.word	0x0000b87d
    6ee8:	0000acd1 	.word	0x0000acd1

00006eec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6eec:	b580      	push	{r7, lr}
    6eee:	af00      	add	r7, sp, #0
        while (1) {
    6ef0:	e7fe      	b.n	6ef0 <Dummy_Handler+0x4>
	...

00006ef4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6ef4:	b580      	push	{r7, lr}
    6ef6:	b086      	sub	sp, #24
    6ef8:	af00      	add	r7, sp, #0
    6efa:	60f8      	str	r0, [r7, #12]
    6efc:	60b9      	str	r1, [r7, #8]
    6efe:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6f00:	2300      	movs	r3, #0
    6f02:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6f04:	68fb      	ldr	r3, [r7, #12]
    6f06:	2b00      	cmp	r3, #0
    6f08:	d012      	beq.n	6f30 <_read+0x3c>
		return -1;
    6f0a:	2301      	movs	r3, #1
    6f0c:	425b      	negs	r3, r3
    6f0e:	e013      	b.n	6f38 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6f10:	4b0b      	ldr	r3, [pc, #44]	; (6f40 <_read+0x4c>)
    6f12:	681a      	ldr	r2, [r3, #0]
    6f14:	4b0b      	ldr	r3, [pc, #44]	; (6f44 <_read+0x50>)
    6f16:	681b      	ldr	r3, [r3, #0]
    6f18:	68b9      	ldr	r1, [r7, #8]
    6f1a:	0018      	movs	r0, r3
    6f1c:	4790      	blx	r2
		ptr++;
    6f1e:	68bb      	ldr	r3, [r7, #8]
    6f20:	3301      	adds	r3, #1
    6f22:	60bb      	str	r3, [r7, #8]
		nChars++;
    6f24:	697b      	ldr	r3, [r7, #20]
    6f26:	3301      	adds	r3, #1
    6f28:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    6f2a:	687b      	ldr	r3, [r7, #4]
    6f2c:	3b01      	subs	r3, #1
    6f2e:	607b      	str	r3, [r7, #4]
    6f30:	687b      	ldr	r3, [r7, #4]
    6f32:	2b00      	cmp	r3, #0
    6f34:	dcec      	bgt.n	6f10 <_read+0x1c>
	}
	return nChars;
    6f36:	697b      	ldr	r3, [r7, #20]
}
    6f38:	0018      	movs	r0, r3
    6f3a:	46bd      	mov	sp, r7
    6f3c:	b006      	add	sp, #24
    6f3e:	bd80      	pop	{r7, pc}
    6f40:	20000a38 	.word	0x20000a38
    6f44:	20000a40 	.word	0x20000a40

00006f48 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6f48:	b580      	push	{r7, lr}
    6f4a:	b086      	sub	sp, #24
    6f4c:	af00      	add	r7, sp, #0
    6f4e:	60f8      	str	r0, [r7, #12]
    6f50:	60b9      	str	r1, [r7, #8]
    6f52:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6f54:	2300      	movs	r3, #0
    6f56:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6f58:	68fb      	ldr	r3, [r7, #12]
    6f5a:	2b01      	cmp	r3, #1
    6f5c:	d01d      	beq.n	6f9a <_write+0x52>
    6f5e:	68fb      	ldr	r3, [r7, #12]
    6f60:	2b02      	cmp	r3, #2
    6f62:	d01a      	beq.n	6f9a <_write+0x52>
    6f64:	68fb      	ldr	r3, [r7, #12]
    6f66:	2b03      	cmp	r3, #3
    6f68:	d017      	beq.n	6f9a <_write+0x52>
		return -1;
    6f6a:	2301      	movs	r3, #1
    6f6c:	425b      	negs	r3, r3
    6f6e:	e018      	b.n	6fa2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6f70:	4b0e      	ldr	r3, [pc, #56]	; (6fac <_write+0x64>)
    6f72:	681a      	ldr	r2, [r3, #0]
    6f74:	4b0e      	ldr	r3, [pc, #56]	; (6fb0 <_write+0x68>)
    6f76:	6818      	ldr	r0, [r3, #0]
    6f78:	68bb      	ldr	r3, [r7, #8]
    6f7a:	1c59      	adds	r1, r3, #1
    6f7c:	60b9      	str	r1, [r7, #8]
    6f7e:	781b      	ldrb	r3, [r3, #0]
    6f80:	0019      	movs	r1, r3
    6f82:	4790      	blx	r2
    6f84:	1e03      	subs	r3, r0, #0
    6f86:	da02      	bge.n	6f8e <_write+0x46>
			return -1;
    6f88:	2301      	movs	r3, #1
    6f8a:	425b      	negs	r3, r3
    6f8c:	e009      	b.n	6fa2 <_write+0x5a>
		}
		++nChars;
    6f8e:	697b      	ldr	r3, [r7, #20]
    6f90:	3301      	adds	r3, #1
    6f92:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    6f94:	687b      	ldr	r3, [r7, #4]
    6f96:	3b01      	subs	r3, #1
    6f98:	607b      	str	r3, [r7, #4]
    6f9a:	687b      	ldr	r3, [r7, #4]
    6f9c:	2b00      	cmp	r3, #0
    6f9e:	d1e7      	bne.n	6f70 <_write+0x28>
	}
	return nChars;
    6fa0:	697b      	ldr	r3, [r7, #20]
}
    6fa2:	0018      	movs	r0, r3
    6fa4:	46bd      	mov	sp, r7
    6fa6:	b006      	add	sp, #24
    6fa8:	bd80      	pop	{r7, pc}
    6faa:	46c0      	nop			; (mov r8, r8)
    6fac:	20000a3c 	.word	0x20000a3c
    6fb0:	20000a40 	.word	0x20000a40

00006fb4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6fb4:	b580      	push	{r7, lr}
    6fb6:	b084      	sub	sp, #16
    6fb8:	af00      	add	r7, sp, #0
    6fba:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6fbc:	4b0a      	ldr	r3, [pc, #40]	; (6fe8 <_sbrk+0x34>)
    6fbe:	681b      	ldr	r3, [r3, #0]
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d102      	bne.n	6fca <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6fc4:	4b08      	ldr	r3, [pc, #32]	; (6fe8 <_sbrk+0x34>)
    6fc6:	4a09      	ldr	r2, [pc, #36]	; (6fec <_sbrk+0x38>)
    6fc8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6fca:	4b07      	ldr	r3, [pc, #28]	; (6fe8 <_sbrk+0x34>)
    6fcc:	681b      	ldr	r3, [r3, #0]
    6fce:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6fd0:	4b05      	ldr	r3, [pc, #20]	; (6fe8 <_sbrk+0x34>)
    6fd2:	681a      	ldr	r2, [r3, #0]
    6fd4:	687b      	ldr	r3, [r7, #4]
    6fd6:	18d2      	adds	r2, r2, r3
    6fd8:	4b03      	ldr	r3, [pc, #12]	; (6fe8 <_sbrk+0x34>)
    6fda:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6fdc:	68fb      	ldr	r3, [r7, #12]
}
    6fde:	0018      	movs	r0, r3
    6fe0:	46bd      	mov	sp, r7
    6fe2:	b004      	add	sp, #16
    6fe4:	bd80      	pop	{r7, pc}
    6fe6:	46c0      	nop			; (mov r8, r8)
    6fe8:	200001c0 	.word	0x200001c0
    6fec:	20002de0 	.word	0x20002de0

00006ff0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6ff0:	b580      	push	{r7, lr}
    6ff2:	b082      	sub	sp, #8
    6ff4:	af00      	add	r7, sp, #0
    6ff6:	6078      	str	r0, [r7, #4]
	return -1;
    6ff8:	2301      	movs	r3, #1
    6ffa:	425b      	negs	r3, r3
}
    6ffc:	0018      	movs	r0, r3
    6ffe:	46bd      	mov	sp, r7
    7000:	b002      	add	sp, #8
    7002:	bd80      	pop	{r7, pc}

00007004 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    7004:	b580      	push	{r7, lr}
    7006:	b082      	sub	sp, #8
    7008:	af00      	add	r7, sp, #0
    700a:	6078      	str	r0, [r7, #4]
    700c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    700e:	683b      	ldr	r3, [r7, #0]
    7010:	2280      	movs	r2, #128	; 0x80
    7012:	0192      	lsls	r2, r2, #6
    7014:	605a      	str	r2, [r3, #4]

	return 0;
    7016:	2300      	movs	r3, #0
}
    7018:	0018      	movs	r0, r3
    701a:	46bd      	mov	sp, r7
    701c:	b002      	add	sp, #8
    701e:	bd80      	pop	{r7, pc}

00007020 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    7020:	b580      	push	{r7, lr}
    7022:	b084      	sub	sp, #16
    7024:	af00      	add	r7, sp, #0
    7026:	60f8      	str	r0, [r7, #12]
    7028:	60b9      	str	r1, [r7, #8]
    702a:	607a      	str	r2, [r7, #4]
	return 0;
    702c:	2300      	movs	r3, #0
}
    702e:	0018      	movs	r0, r3
    7030:	46bd      	mov	sp, r7
    7032:	b004      	add	sp, #16
    7034:	bd80      	pop	{r7, pc}

00007036 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    7036:	b580      	push	{r7, lr}
    7038:	b082      	sub	sp, #8
    703a:	af00      	add	r7, sp, #0
    703c:	6078      	str	r0, [r7, #4]
	time->second = 0;
    703e:	687b      	ldr	r3, [r7, #4]
    7040:	2200      	movs	r2, #0
    7042:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    7044:	687b      	ldr	r3, [r7, #4]
    7046:	2200      	movs	r2, #0
    7048:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    704a:	687b      	ldr	r3, [r7, #4]
    704c:	2200      	movs	r2, #0
    704e:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	2200      	movs	r2, #0
    7054:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    7056:	687b      	ldr	r3, [r7, #4]
    7058:	2201      	movs	r2, #1
    705a:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    705c:	687b      	ldr	r3, [r7, #4]
    705e:	2201      	movs	r2, #1
    7060:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    7062:	687b      	ldr	r3, [r7, #4]
    7064:	22fa      	movs	r2, #250	; 0xfa
    7066:	00d2      	lsls	r2, r2, #3
    7068:	80da      	strh	r2, [r3, #6]
}
    706a:	46c0      	nop			; (mov r8, r8)
    706c:	46bd      	mov	sp, r7
    706e:	b002      	add	sp, #8
    7070:	bd80      	pop	{r7, pc}
	...

00007074 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    7074:	b580      	push	{r7, lr}
    7076:	b086      	sub	sp, #24
    7078:	af00      	add	r7, sp, #0
    707a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    707c:	230c      	movs	r3, #12
    707e:	18fb      	adds	r3, r7, r3
    7080:	0018      	movs	r0, r3
    7082:	4b23      	ldr	r3, [pc, #140]	; (7110 <rtc_calendar_get_config_defaults+0x9c>)
    7084:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    7086:	687b      	ldr	r3, [r7, #4]
    7088:	22a0      	movs	r2, #160	; 0xa0
    708a:	0112      	lsls	r2, r2, #4
    708c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    708e:	687b      	ldr	r3, [r7, #4]
    7090:	2200      	movs	r2, #0
    7092:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    7094:	687b      	ldr	r3, [r7, #4]
    7096:	2200      	movs	r2, #0
    7098:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    709a:	687b      	ldr	r3, [r7, #4]
    709c:	2200      	movs	r2, #0
    709e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	22fa      	movs	r2, #250	; 0xfa
    70a4:	00d2      	lsls	r2, r2, #3
    70a6:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    70a8:	2317      	movs	r3, #23
    70aa:	18fb      	adds	r3, r7, r3
    70ac:	2200      	movs	r2, #0
    70ae:	701a      	strb	r2, [r3, #0]
    70b0:	e025      	b.n	70fe <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    70b2:	2317      	movs	r3, #23
    70b4:	18fb      	adds	r3, r7, r3
    70b6:	781a      	ldrb	r2, [r3, #0]
    70b8:	6879      	ldr	r1, [r7, #4]
    70ba:	2008      	movs	r0, #8
    70bc:	0013      	movs	r3, r2
    70be:	009b      	lsls	r3, r3, #2
    70c0:	189b      	adds	r3, r3, r2
    70c2:	005b      	lsls	r3, r3, #1
    70c4:	18cb      	adds	r3, r1, r3
    70c6:	181a      	adds	r2, r3, r0
    70c8:	230c      	movs	r3, #12
    70ca:	18fb      	adds	r3, r7, r3
    70cc:	0010      	movs	r0, r2
    70ce:	0019      	movs	r1, r3
    70d0:	2308      	movs	r3, #8
    70d2:	001a      	movs	r2, r3
    70d4:	4b0f      	ldr	r3, [pc, #60]	; (7114 <rtc_calendar_get_config_defaults+0xa0>)
    70d6:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    70d8:	2317      	movs	r3, #23
    70da:	18fb      	adds	r3, r7, r3
    70dc:	781a      	ldrb	r2, [r3, #0]
    70de:	6879      	ldr	r1, [r7, #4]
    70e0:	0013      	movs	r3, r2
    70e2:	009b      	lsls	r3, r3, #2
    70e4:	189b      	adds	r3, r3, r2
    70e6:	005b      	lsls	r3, r3, #1
    70e8:	18cb      	adds	r3, r1, r3
    70ea:	3310      	adds	r3, #16
    70ec:	2206      	movs	r2, #6
    70ee:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    70f0:	2317      	movs	r3, #23
    70f2:	18fb      	adds	r3, r7, r3
    70f4:	781a      	ldrb	r2, [r3, #0]
    70f6:	2317      	movs	r3, #23
    70f8:	18fb      	adds	r3, r7, r3
    70fa:	3201      	adds	r2, #1
    70fc:	701a      	strb	r2, [r3, #0]
    70fe:	2317      	movs	r3, #23
    7100:	18fb      	adds	r3, r7, r3
    7102:	781b      	ldrb	r3, [r3, #0]
    7104:	2b00      	cmp	r3, #0
    7106:	d0d4      	beq.n	70b2 <rtc_calendar_get_config_defaults+0x3e>
	}
}
    7108:	46c0      	nop			; (mov r8, r8)
    710a:	46bd      	mov	sp, r7
    710c:	b006      	add	sp, #24
    710e:	bd80      	pop	{r7, pc}
    7110:	00007037 	.word	0x00007037
    7114:	0000b8d9 	.word	0x0000b8d9

00007118 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    7118:	b580      	push	{r7, lr}
    711a:	b088      	sub	sp, #32
    711c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    711e:	230c      	movs	r3, #12
    7120:	18fb      	adds	r3, r7, r3
    7122:	0018      	movs	r0, r3
    7124:	4b1a      	ldr	r3, [pc, #104]	; (7190 <configure_rtc_calendar+0x78>)
    7126:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    7128:	1d3b      	adds	r3, r7, #4
    712a:	0018      	movs	r0, r3
    712c:	4b19      	ldr	r3, [pc, #100]	; (7194 <configure_rtc_calendar+0x7c>)
    712e:	4798      	blx	r3
	init_time.year   = 2014;
    7130:	1d3b      	adds	r3, r7, #4
    7132:	4a19      	ldr	r2, [pc, #100]	; (7198 <configure_rtc_calendar+0x80>)
    7134:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    7136:	1d3b      	adds	r3, r7, #4
    7138:	2201      	movs	r2, #1
    713a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    713c:	1d3b      	adds	r3, r7, #4
    713e:	2201      	movs	r2, #1
    7140:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    7142:	1d3b      	adds	r3, r7, #4
    7144:	2200      	movs	r2, #0
    7146:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    7148:	1d3b      	adds	r3, r7, #4
    714a:	2200      	movs	r2, #0
    714c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    714e:	1d3b      	adds	r3, r7, #4
    7150:	2204      	movs	r2, #4
    7152:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    7154:	230c      	movs	r3, #12
    7156:	18fb      	adds	r3, r7, r3
    7158:	2201      	movs	r2, #1
    715a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    715c:	230c      	movs	r3, #12
    715e:	18fb      	adds	r3, r7, r3
    7160:	1d3a      	adds	r2, r7, #4
    7162:	3308      	adds	r3, #8
    7164:	ca03      	ldmia	r2!, {r0, r1}
    7166:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    7168:	230c      	movs	r3, #12
    716a:	18fb      	adds	r3, r7, r3
    716c:	2206      	movs	r2, #6
    716e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    7170:	230c      	movs	r3, #12
    7172:	18fa      	adds	r2, r7, r3
    7174:	4909      	ldr	r1, [pc, #36]	; (719c <configure_rtc_calendar+0x84>)
    7176:	4b0a      	ldr	r3, [pc, #40]	; (71a0 <configure_rtc_calendar+0x88>)
    7178:	0018      	movs	r0, r3
    717a:	4b0a      	ldr	r3, [pc, #40]	; (71a4 <configure_rtc_calendar+0x8c>)
    717c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    717e:	4b08      	ldr	r3, [pc, #32]	; (71a0 <configure_rtc_calendar+0x88>)
    7180:	0018      	movs	r0, r3
    7182:	4b09      	ldr	r3, [pc, #36]	; (71a8 <configure_rtc_calendar+0x90>)
    7184:	4798      	blx	r3
}
    7186:	46c0      	nop			; (mov r8, r8)
    7188:	46bd      	mov	sp, r7
    718a:	b008      	add	sp, #32
    718c:	bd80      	pop	{r7, pc}
    718e:	46c0      	nop			; (mov r8, r8)
    7190:	00007075 	.word	0x00007075
    7194:	00007037 	.word	0x00007037
    7198:	000007de 	.word	0x000007de
    719c:	40001400 	.word	0x40001400
    71a0:	20000a44 	.word	0x20000a44
    71a4:	0000385d 	.word	0x0000385d
    71a8:	000035ad 	.word	0x000035ad

000071ac <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    71ac:	b590      	push	{r4, r7, lr}
    71ae:	b085      	sub	sp, #20
    71b0:	af00      	add	r7, sp, #0
    71b2:	0002      	movs	r2, r0
    71b4:	1dfb      	adds	r3, r7, #7
    71b6:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    71b8:	4b1a      	ldr	r3, [pc, #104]	; (7224 <disk_initialize+0x78>)
    71ba:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    71bc:	1dfb      	adds	r3, r7, #7
    71be:	781b      	ldrb	r3, [r3, #0]
    71c0:	2b01      	cmp	r3, #1
    71c2:	d901      	bls.n	71c8 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    71c4:	2301      	movs	r3, #1
    71c6:	e029      	b.n	721c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    71c8:	2300      	movs	r3, #0
    71ca:	60fb      	str	r3, [r7, #12]
    71cc:	e010      	b.n	71f0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    71ce:	230b      	movs	r3, #11
    71d0:	18fc      	adds	r4, r7, r3
    71d2:	1dfb      	adds	r3, r7, #7
    71d4:	781b      	ldrb	r3, [r3, #0]
    71d6:	0018      	movs	r0, r3
    71d8:	4b13      	ldr	r3, [pc, #76]	; (7228 <disk_initialize+0x7c>)
    71da:	4798      	blx	r3
    71dc:	0003      	movs	r3, r0
    71de:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    71e0:	230b      	movs	r3, #11
    71e2:	18fb      	adds	r3, r7, r3
    71e4:	781b      	ldrb	r3, [r3, #0]
    71e6:	2b03      	cmp	r3, #3
    71e8:	d106      	bne.n	71f8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    71ea:	68fb      	ldr	r3, [r7, #12]
    71ec:	3301      	adds	r3, #1
    71ee:	60fb      	str	r3, [r7, #12]
    71f0:	68fb      	ldr	r3, [r7, #12]
    71f2:	2b01      	cmp	r3, #1
    71f4:	ddeb      	ble.n	71ce <disk_initialize+0x22>
    71f6:	e000      	b.n	71fa <disk_initialize+0x4e>
			break;
    71f8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    71fa:	230b      	movs	r3, #11
    71fc:	18fb      	adds	r3, r7, r3
    71fe:	781b      	ldrb	r3, [r3, #0]
    7200:	2b00      	cmp	r3, #0
    7202:	d001      	beq.n	7208 <disk_initialize+0x5c>
		return STA_NOINIT;
    7204:	2301      	movs	r3, #1
    7206:	e009      	b.n	721c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    7208:	1dfb      	adds	r3, r7, #7
    720a:	781b      	ldrb	r3, [r3, #0]
    720c:	0018      	movs	r0, r3
    720e:	4b07      	ldr	r3, [pc, #28]	; (722c <disk_initialize+0x80>)
    7210:	4798      	blx	r3
    7212:	1e03      	subs	r3, r0, #0
    7214:	d001      	beq.n	721a <disk_initialize+0x6e>
		return STA_PROTECT;
    7216:	2304      	movs	r3, #4
    7218:	e000      	b.n	721c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    721a:	2300      	movs	r3, #0
}
    721c:	0018      	movs	r0, r3
    721e:	46bd      	mov	sp, r7
    7220:	b005      	add	sp, #20
    7222:	bd90      	pop	{r4, r7, pc}
    7224:	00007119 	.word	0x00007119
    7228:	0000324d 	.word	0x0000324d
    722c:	00003305 	.word	0x00003305

00007230 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    7230:	b580      	push	{r7, lr}
    7232:	b082      	sub	sp, #8
    7234:	af00      	add	r7, sp, #0
    7236:	0002      	movs	r2, r0
    7238:	1dfb      	adds	r3, r7, #7
    723a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    723c:	1dfb      	adds	r3, r7, #7
    723e:	781b      	ldrb	r3, [r3, #0]
    7240:	0018      	movs	r0, r3
    7242:	4b08      	ldr	r3, [pc, #32]	; (7264 <disk_status+0x34>)
    7244:	4798      	blx	r3
    7246:	1e03      	subs	r3, r0, #0
    7248:	d002      	beq.n	7250 <disk_status+0x20>
    724a:	2b02      	cmp	r3, #2
    724c:	d002      	beq.n	7254 <disk_status+0x24>
    724e:	e003      	b.n	7258 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    7250:	2300      	movs	r3, #0
    7252:	e002      	b.n	725a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    7254:	2303      	movs	r3, #3
    7256:	e000      	b.n	725a <disk_status+0x2a>
	default:
		return STA_NOINIT;
    7258:	2301      	movs	r3, #1
	}
}
    725a:	0018      	movs	r0, r3
    725c:	46bd      	mov	sp, r7
    725e:	b002      	add	sp, #8
    7260:	bd80      	pop	{r7, pc}
    7262:	46c0      	nop			; (mov r8, r8)
    7264:	0000324d 	.word	0x0000324d

00007268 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    7268:	b590      	push	{r4, r7, lr}
    726a:	b089      	sub	sp, #36	; 0x24
    726c:	af00      	add	r7, sp, #0
    726e:	60b9      	str	r1, [r7, #8]
    7270:	607a      	str	r2, [r7, #4]
    7272:	0019      	movs	r1, r3
    7274:	230f      	movs	r3, #15
    7276:	18fb      	adds	r3, r7, r3
    7278:	1c02      	adds	r2, r0, #0
    727a:	701a      	strb	r2, [r3, #0]
    727c:	230e      	movs	r3, #14
    727e:	18fb      	adds	r3, r7, r3
    7280:	1c0a      	adds	r2, r1, #0
    7282:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    7284:	231b      	movs	r3, #27
    7286:	18fc      	adds	r4, r7, r3
    7288:	230f      	movs	r3, #15
    728a:	18fb      	adds	r3, r7, r3
    728c:	781b      	ldrb	r3, [r3, #0]
    728e:	0018      	movs	r0, r3
    7290:	4b28      	ldr	r3, [pc, #160]	; (7334 <disk_read+0xcc>)
    7292:	4798      	blx	r3
    7294:	0003      	movs	r3, r0
    7296:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    7298:	231b      	movs	r3, #27
    729a:	18fb      	adds	r3, r7, r3
    729c:	781b      	ldrb	r3, [r3, #0]
    729e:	2b00      	cmp	r3, #0
    72a0:	d101      	bne.n	72a6 <disk_read+0x3e>
		return RES_ERROR;
    72a2:	2301      	movs	r3, #1
    72a4:	e042      	b.n	732c <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    72a6:	2314      	movs	r3, #20
    72a8:	18fa      	adds	r2, r7, r3
    72aa:	230f      	movs	r3, #15
    72ac:	18fb      	adds	r3, r7, r3
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	0011      	movs	r1, r2
    72b2:	0018      	movs	r0, r3
    72b4:	4b20      	ldr	r3, [pc, #128]	; (7338 <disk_read+0xd0>)
    72b6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    72b8:	230e      	movs	r3, #14
    72ba:	18fb      	adds	r3, r7, r3
    72bc:	781b      	ldrb	r3, [r3, #0]
    72be:	221b      	movs	r2, #27
    72c0:	18ba      	adds	r2, r7, r2
    72c2:	7812      	ldrb	r2, [r2, #0]
    72c4:	4353      	muls	r3, r2
    72c6:	001a      	movs	r2, r3
    72c8:	687b      	ldr	r3, [r7, #4]
    72ca:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    72cc:	697b      	ldr	r3, [r7, #20]
    72ce:	3301      	adds	r3, #1
    72d0:	211b      	movs	r1, #27
    72d2:	1879      	adds	r1, r7, r1
    72d4:	7809      	ldrb	r1, [r1, #0]
    72d6:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    72d8:	429a      	cmp	r2, r3
    72da:	d901      	bls.n	72e0 <disk_read+0x78>
		return RES_PARERR;
    72dc:	2304      	movs	r3, #4
    72de:	e025      	b.n	732c <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    72e0:	2300      	movs	r3, #0
    72e2:	61fb      	str	r3, [r7, #28]
    72e4:	e01b      	b.n	731e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    72e6:	231b      	movs	r3, #27
    72e8:	18fb      	adds	r3, r7, r3
    72ea:	781b      	ldrb	r3, [r3, #0]
    72ec:	69fa      	ldr	r2, [r7, #28]
    72ee:	435a      	muls	r2, r3
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    72f4:	231b      	movs	r3, #27
    72f6:	18fb      	adds	r3, r7, r3
    72f8:	781b      	ldrb	r3, [r3, #0]
    72fa:	69fa      	ldr	r2, [r7, #28]
    72fc:	4353      	muls	r3, r2
    72fe:	025b      	lsls	r3, r3, #9
    7300:	68ba      	ldr	r2, [r7, #8]
    7302:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    7304:	230f      	movs	r3, #15
    7306:	18fb      	adds	r3, r7, r3
    7308:	781b      	ldrb	r3, [r3, #0]
    730a:	0018      	movs	r0, r3
    730c:	4b0b      	ldr	r3, [pc, #44]	; (733c <disk_read+0xd4>)
    730e:	4798      	blx	r3
    7310:	1e03      	subs	r3, r0, #0
    7312:	d001      	beq.n	7318 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    7314:	2301      	movs	r3, #1
    7316:	e009      	b.n	732c <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    7318:	69fb      	ldr	r3, [r7, #28]
    731a:	3301      	adds	r3, #1
    731c:	61fb      	str	r3, [r7, #28]
    731e:	230e      	movs	r3, #14
    7320:	18fb      	adds	r3, r7, r3
    7322:	781a      	ldrb	r2, [r3, #0]
    7324:	69fb      	ldr	r3, [r7, #28]
    7326:	429a      	cmp	r2, r3
    7328:	d8dd      	bhi.n	72e6 <disk_read+0x7e>
		}
	}

	return RES_OK;
    732a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    732c:	0018      	movs	r0, r3
    732e:	46bd      	mov	sp, r7
    7330:	b009      	add	sp, #36	; 0x24
    7332:	bd90      	pop	{r4, r7, pc}
    7334:	000032d9 	.word	0x000032d9
    7338:	0000328d 	.word	0x0000328d
    733c:	0000334d 	.word	0x0000334d

00007340 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    7340:	b590      	push	{r4, r7, lr}
    7342:	b089      	sub	sp, #36	; 0x24
    7344:	af00      	add	r7, sp, #0
    7346:	60b9      	str	r1, [r7, #8]
    7348:	607a      	str	r2, [r7, #4]
    734a:	0019      	movs	r1, r3
    734c:	230f      	movs	r3, #15
    734e:	18fb      	adds	r3, r7, r3
    7350:	1c02      	adds	r2, r0, #0
    7352:	701a      	strb	r2, [r3, #0]
    7354:	230e      	movs	r3, #14
    7356:	18fb      	adds	r3, r7, r3
    7358:	1c0a      	adds	r2, r1, #0
    735a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    735c:	231b      	movs	r3, #27
    735e:	18fc      	adds	r4, r7, r3
    7360:	230f      	movs	r3, #15
    7362:	18fb      	adds	r3, r7, r3
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	0018      	movs	r0, r3
    7368:	4b28      	ldr	r3, [pc, #160]	; (740c <disk_write+0xcc>)
    736a:	4798      	blx	r3
    736c:	0003      	movs	r3, r0
    736e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    7370:	231b      	movs	r3, #27
    7372:	18fb      	adds	r3, r7, r3
    7374:	781b      	ldrb	r3, [r3, #0]
    7376:	2b00      	cmp	r3, #0
    7378:	d101      	bne.n	737e <disk_write+0x3e>
		return RES_ERROR;
    737a:	2301      	movs	r3, #1
    737c:	e042      	b.n	7404 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    737e:	2314      	movs	r3, #20
    7380:	18fa      	adds	r2, r7, r3
    7382:	230f      	movs	r3, #15
    7384:	18fb      	adds	r3, r7, r3
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	0011      	movs	r1, r2
    738a:	0018      	movs	r0, r3
    738c:	4b20      	ldr	r3, [pc, #128]	; (7410 <disk_write+0xd0>)
    738e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    7390:	230e      	movs	r3, #14
    7392:	18fb      	adds	r3, r7, r3
    7394:	781b      	ldrb	r3, [r3, #0]
    7396:	221b      	movs	r2, #27
    7398:	18ba      	adds	r2, r7, r2
    739a:	7812      	ldrb	r2, [r2, #0]
    739c:	4353      	muls	r3, r2
    739e:	001a      	movs	r2, r3
    73a0:	687b      	ldr	r3, [r7, #4]
    73a2:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    73a4:	697b      	ldr	r3, [r7, #20]
    73a6:	3301      	adds	r3, #1
    73a8:	211b      	movs	r1, #27
    73aa:	1879      	adds	r1, r7, r1
    73ac:	7809      	ldrb	r1, [r1, #0]
    73ae:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    73b0:	429a      	cmp	r2, r3
    73b2:	d901      	bls.n	73b8 <disk_write+0x78>
		return RES_PARERR;
    73b4:	2304      	movs	r3, #4
    73b6:	e025      	b.n	7404 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    73b8:	2300      	movs	r3, #0
    73ba:	61fb      	str	r3, [r7, #28]
    73bc:	e01b      	b.n	73f6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    73be:	231b      	movs	r3, #27
    73c0:	18fb      	adds	r3, r7, r3
    73c2:	781b      	ldrb	r3, [r3, #0]
    73c4:	69fa      	ldr	r2, [r7, #28]
    73c6:	435a      	muls	r2, r3
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    73cc:	231b      	movs	r3, #27
    73ce:	18fb      	adds	r3, r7, r3
    73d0:	781b      	ldrb	r3, [r3, #0]
    73d2:	69fa      	ldr	r2, [r7, #28]
    73d4:	4353      	muls	r3, r2
    73d6:	025b      	lsls	r3, r3, #9
    73d8:	68ba      	ldr	r2, [r7, #8]
    73da:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    73dc:	230f      	movs	r3, #15
    73de:	18fb      	adds	r3, r7, r3
    73e0:	781b      	ldrb	r3, [r3, #0]
    73e2:	0018      	movs	r0, r3
    73e4:	4b0b      	ldr	r3, [pc, #44]	; (7414 <disk_write+0xd4>)
    73e6:	4798      	blx	r3
    73e8:	1e03      	subs	r3, r0, #0
    73ea:	d001      	beq.n	73f0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    73ec:	2301      	movs	r3, #1
    73ee:	e009      	b.n	7404 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    73f0:	69fb      	ldr	r3, [r7, #28]
    73f2:	3301      	adds	r3, #1
    73f4:	61fb      	str	r3, [r7, #28]
    73f6:	230e      	movs	r3, #14
    73f8:	18fb      	adds	r3, r7, r3
    73fa:	781a      	ldrb	r2, [r3, #0]
    73fc:	69fb      	ldr	r3, [r7, #28]
    73fe:	429a      	cmp	r2, r3
    7400:	d8dd      	bhi.n	73be <disk_write+0x7e>
		}
	}

	return RES_OK;
    7402:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    7404:	0018      	movs	r0, r3
    7406:	46bd      	mov	sp, r7
    7408:	b009      	add	sp, #36	; 0x24
    740a:	bd90      	pop	{r4, r7, pc}
    740c:	000032d9 	.word	0x000032d9
    7410:	0000328d 	.word	0x0000328d
    7414:	000033a1 	.word	0x000033a1

00007418 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    7418:	b590      	push	{r4, r7, lr}
    741a:	b085      	sub	sp, #20
    741c:	af00      	add	r7, sp, #0
    741e:	603a      	str	r2, [r7, #0]
    7420:	1dfb      	adds	r3, r7, #7
    7422:	1c02      	adds	r2, r0, #0
    7424:	701a      	strb	r2, [r3, #0]
    7426:	1dbb      	adds	r3, r7, #6
    7428:	1c0a      	adds	r2, r1, #0
    742a:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    742c:	230f      	movs	r3, #15
    742e:	18fb      	adds	r3, r7, r3
    7430:	2204      	movs	r2, #4
    7432:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    7434:	1dbb      	adds	r3, r7, #6
    7436:	781b      	ldrb	r3, [r3, #0]
    7438:	2b01      	cmp	r3, #1
    743a:	d00f      	beq.n	745c <disk_ioctl+0x44>
    743c:	dc02      	bgt.n	7444 <disk_ioctl+0x2c>
    743e:	2b00      	cmp	r3, #0
    7440:	d044      	beq.n	74cc <disk_ioctl+0xb4>
    7442:	e054      	b.n	74ee <disk_ioctl+0xd6>
    7444:	2b02      	cmp	r3, #2
    7446:	d01a      	beq.n	747e <disk_ioctl+0x66>
    7448:	2b03      	cmp	r3, #3
    744a:	d150      	bne.n	74ee <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    744c:	683b      	ldr	r3, [r7, #0]
    744e:	2201      	movs	r2, #1
    7450:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    7452:	230f      	movs	r3, #15
    7454:	18fb      	adds	r3, r7, r3
    7456:	2200      	movs	r2, #0
    7458:	701a      	strb	r2, [r3, #0]
		break;
    745a:	e04c      	b.n	74f6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    745c:	2308      	movs	r3, #8
    745e:	18fa      	adds	r2, r7, r3
    7460:	1dfb      	adds	r3, r7, #7
    7462:	781b      	ldrb	r3, [r3, #0]
    7464:	0011      	movs	r1, r2
    7466:	0018      	movs	r0, r3
    7468:	4b26      	ldr	r3, [pc, #152]	; (7504 <disk_ioctl+0xec>)
    746a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    746c:	68bb      	ldr	r3, [r7, #8]
    746e:	1c5a      	adds	r2, r3, #1
    7470:	683b      	ldr	r3, [r7, #0]
    7472:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    7474:	230f      	movs	r3, #15
    7476:	18fb      	adds	r3, r7, r3
    7478:	2200      	movs	r2, #0
    747a:	701a      	strb	r2, [r3, #0]
	}
	break;
    747c:	e03b      	b.n	74f6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    747e:	230e      	movs	r3, #14
    7480:	18fc      	adds	r4, r7, r3
    7482:	1dfb      	adds	r3, r7, #7
    7484:	781b      	ldrb	r3, [r3, #0]
    7486:	0018      	movs	r0, r3
    7488:	4b1f      	ldr	r3, [pc, #124]	; (7508 <disk_ioctl+0xf0>)
    748a:	4798      	blx	r3
    748c:	0003      	movs	r3, r0
    748e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    7490:	230e      	movs	r3, #14
    7492:	18fb      	adds	r3, r7, r3
    7494:	781b      	ldrb	r3, [r3, #0]
    7496:	2b01      	cmp	r3, #1
    7498:	d010      	beq.n	74bc <disk_ioctl+0xa4>
    749a:	230e      	movs	r3, #14
    749c:	18fb      	adds	r3, r7, r3
    749e:	781b      	ldrb	r3, [r3, #0]
    74a0:	2b02      	cmp	r3, #2
    74a2:	d00b      	beq.n	74bc <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    74a4:	230e      	movs	r3, #14
    74a6:	18fb      	adds	r3, r7, r3
    74a8:	781b      	ldrb	r3, [r3, #0]
    74aa:	2b04      	cmp	r3, #4
    74ac:	d006      	beq.n	74bc <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    74ae:	230e      	movs	r3, #14
    74b0:	18fb      	adds	r3, r7, r3
    74b2:	781b      	ldrb	r3, [r3, #0]
    74b4:	2b08      	cmp	r3, #8
    74b6:	d001      	beq.n	74bc <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    74b8:	2301      	movs	r3, #1
    74ba:	e01f      	b.n	74fc <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    74bc:	683b      	ldr	r3, [r7, #0]
    74be:	2200      	movs	r2, #0
    74c0:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    74c2:	230f      	movs	r3, #15
    74c4:	18fb      	adds	r3, r7, r3
    74c6:	2200      	movs	r2, #0
    74c8:	701a      	strb	r2, [r3, #0]
	}
	break;
    74ca:	e014      	b.n	74f6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    74cc:	1dfb      	adds	r3, r7, #7
    74ce:	781b      	ldrb	r3, [r3, #0]
    74d0:	0018      	movs	r0, r3
    74d2:	4b0e      	ldr	r3, [pc, #56]	; (750c <disk_ioctl+0xf4>)
    74d4:	4798      	blx	r3
    74d6:	1e03      	subs	r3, r0, #0
    74d8:	d104      	bne.n	74e4 <disk_ioctl+0xcc>
			res = RES_OK;
    74da:	230f      	movs	r3, #15
    74dc:	18fb      	adds	r3, r7, r3
    74de:	2200      	movs	r2, #0
    74e0:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    74e2:	e008      	b.n	74f6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
    74e4:	230f      	movs	r3, #15
    74e6:	18fb      	adds	r3, r7, r3
    74e8:	2203      	movs	r2, #3
    74ea:	701a      	strb	r2, [r3, #0]
		break;
    74ec:	e003      	b.n	74f6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    74ee:	230f      	movs	r3, #15
    74f0:	18fb      	adds	r3, r7, r3
    74f2:	2204      	movs	r2, #4
    74f4:	701a      	strb	r2, [r3, #0]
	}

	return res;
    74f6:	230f      	movs	r3, #15
    74f8:	18fb      	adds	r3, r7, r3
    74fa:	781b      	ldrb	r3, [r3, #0]
}
    74fc:	0018      	movs	r0, r3
    74fe:	46bd      	mov	sp, r7
    7500:	b005      	add	sp, #20
    7502:	bd90      	pop	{r4, r7, pc}
    7504:	0000328d 	.word	0x0000328d
    7508:	000032d9 	.word	0x000032d9
    750c:	0000324d 	.word	0x0000324d

00007510 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    7510:	b580      	push	{r7, lr}
    7512:	b084      	sub	sp, #16
    7514:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    7516:	1d3a      	adds	r2, r7, #4
    7518:	4b12      	ldr	r3, [pc, #72]	; (7564 <get_fattime+0x54>)
    751a:	0011      	movs	r1, r2
    751c:	0018      	movs	r0, r3
    751e:	4b12      	ldr	r3, [pc, #72]	; (7568 <get_fattime+0x58>)
    7520:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    7522:	1d3b      	adds	r3, r7, #4
    7524:	88db      	ldrh	r3, [r3, #6]
    7526:	4a11      	ldr	r2, [pc, #68]	; (756c <get_fattime+0x5c>)
    7528:	4694      	mov	ip, r2
    752a:	4463      	add	r3, ip
    752c:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    752e:	1d3b      	adds	r3, r7, #4
    7530:	795b      	ldrb	r3, [r3, #5]
    7532:	055b      	lsls	r3, r3, #21
    7534:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    7536:	1d3b      	adds	r3, r7, #4
    7538:	791b      	ldrb	r3, [r3, #4]
    753a:	041b      	lsls	r3, r3, #16
    753c:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    753e:	1d3b      	adds	r3, r7, #4
    7540:	789b      	ldrb	r3, [r3, #2]
    7542:	02db      	lsls	r3, r3, #11
    7544:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    7546:	1d3b      	adds	r3, r7, #4
    7548:	785b      	ldrb	r3, [r3, #1]
    754a:	015b      	lsls	r3, r3, #5
    754c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    754e:	1d3a      	adds	r2, r7, #4
    7550:	7812      	ldrb	r2, [r2, #0]
    7552:	0852      	lsrs	r2, r2, #1
    7554:	b2d2      	uxtb	r2, r2
    7556:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    7558:	60fb      	str	r3, [r7, #12]

	return ul_time;
    755a:	68fb      	ldr	r3, [r7, #12]
}
    755c:	0018      	movs	r0, r3
    755e:	46bd      	mov	sp, r7
    7560:	b004      	add	sp, #16
    7562:	bd80      	pop	{r7, pc}
    7564:	20000a44 	.word	0x20000a44
    7568:	000038f1 	.word	0x000038f1
    756c:	fffff844 	.word	0xfffff844

00007570 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    7570:	b580      	push	{r7, lr}
    7572:	b086      	sub	sp, #24
    7574:	af00      	add	r7, sp, #0
    7576:	60f8      	str	r0, [r7, #12]
    7578:	60b9      	str	r1, [r7, #8]
    757a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    757c:	68fb      	ldr	r3, [r7, #12]
    757e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    7580:	68bb      	ldr	r3, [r7, #8]
    7582:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    7584:	e007      	b.n	7596 <mem_cpy+0x26>
		*d++ = *s++;
    7586:	697b      	ldr	r3, [r7, #20]
    7588:	1c5a      	adds	r2, r3, #1
    758a:	617a      	str	r2, [r7, #20]
    758c:	693a      	ldr	r2, [r7, #16]
    758e:	1c51      	adds	r1, r2, #1
    7590:	6139      	str	r1, [r7, #16]
    7592:	7812      	ldrb	r2, [r2, #0]
    7594:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    7596:	687b      	ldr	r3, [r7, #4]
    7598:	1e5a      	subs	r2, r3, #1
    759a:	607a      	str	r2, [r7, #4]
    759c:	2b00      	cmp	r3, #0
    759e:	d1f2      	bne.n	7586 <mem_cpy+0x16>
}
    75a0:	46c0      	nop			; (mov r8, r8)
    75a2:	46bd      	mov	sp, r7
    75a4:	b006      	add	sp, #24
    75a6:	bd80      	pop	{r7, pc}

000075a8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    75a8:	b580      	push	{r7, lr}
    75aa:	b086      	sub	sp, #24
    75ac:	af00      	add	r7, sp, #0
    75ae:	60f8      	str	r0, [r7, #12]
    75b0:	60b9      	str	r1, [r7, #8]
    75b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    75b4:	68fb      	ldr	r3, [r7, #12]
    75b6:	617b      	str	r3, [r7, #20]

	while (cnt--)
    75b8:	e005      	b.n	75c6 <mem_set+0x1e>
		*d++ = (BYTE)val;
    75ba:	697b      	ldr	r3, [r7, #20]
    75bc:	1c5a      	adds	r2, r3, #1
    75be:	617a      	str	r2, [r7, #20]
    75c0:	68ba      	ldr	r2, [r7, #8]
    75c2:	b2d2      	uxtb	r2, r2
    75c4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    75c6:	687b      	ldr	r3, [r7, #4]
    75c8:	1e5a      	subs	r2, r3, #1
    75ca:	607a      	str	r2, [r7, #4]
    75cc:	2b00      	cmp	r3, #0
    75ce:	d1f4      	bne.n	75ba <mem_set+0x12>
}
    75d0:	46c0      	nop			; (mov r8, r8)
    75d2:	46bd      	mov	sp, r7
    75d4:	b006      	add	sp, #24
    75d6:	bd80      	pop	{r7, pc}

000075d8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    75d8:	b580      	push	{r7, lr}
    75da:	b088      	sub	sp, #32
    75dc:	af00      	add	r7, sp, #0
    75de:	60f8      	str	r0, [r7, #12]
    75e0:	60b9      	str	r1, [r7, #8]
    75e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    75e4:	68fb      	ldr	r3, [r7, #12]
    75e6:	61fb      	str	r3, [r7, #28]
    75e8:	68bb      	ldr	r3, [r7, #8]
    75ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
    75ec:	2300      	movs	r3, #0
    75ee:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    75f0:	46c0      	nop			; (mov r8, r8)
    75f2:	687b      	ldr	r3, [r7, #4]
    75f4:	1e5a      	subs	r2, r3, #1
    75f6:	607a      	str	r2, [r7, #4]
    75f8:	2b00      	cmp	r3, #0
    75fa:	d00d      	beq.n	7618 <mem_cmp+0x40>
    75fc:	69fb      	ldr	r3, [r7, #28]
    75fe:	1c5a      	adds	r2, r3, #1
    7600:	61fa      	str	r2, [r7, #28]
    7602:	781b      	ldrb	r3, [r3, #0]
    7604:	0019      	movs	r1, r3
    7606:	69bb      	ldr	r3, [r7, #24]
    7608:	1c5a      	adds	r2, r3, #1
    760a:	61ba      	str	r2, [r7, #24]
    760c:	781b      	ldrb	r3, [r3, #0]
    760e:	1acb      	subs	r3, r1, r3
    7610:	617b      	str	r3, [r7, #20]
    7612:	697b      	ldr	r3, [r7, #20]
    7614:	2b00      	cmp	r3, #0
    7616:	d0ec      	beq.n	75f2 <mem_cmp+0x1a>
	return r;
    7618:	697b      	ldr	r3, [r7, #20]
}
    761a:	0018      	movs	r0, r3
    761c:	46bd      	mov	sp, r7
    761e:	b008      	add	sp, #32
    7620:	bd80      	pop	{r7, pc}

00007622 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    7622:	b580      	push	{r7, lr}
    7624:	b082      	sub	sp, #8
    7626:	af00      	add	r7, sp, #0
    7628:	6078      	str	r0, [r7, #4]
    762a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    762c:	e002      	b.n	7634 <chk_chr+0x12>
    762e:	687b      	ldr	r3, [r7, #4]
    7630:	3301      	adds	r3, #1
    7632:	607b      	str	r3, [r7, #4]
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	781b      	ldrb	r3, [r3, #0]
    7638:	2b00      	cmp	r3, #0
    763a:	d005      	beq.n	7648 <chk_chr+0x26>
    763c:	687b      	ldr	r3, [r7, #4]
    763e:	781b      	ldrb	r3, [r3, #0]
    7640:	001a      	movs	r2, r3
    7642:	683b      	ldr	r3, [r7, #0]
    7644:	429a      	cmp	r2, r3
    7646:	d1f2      	bne.n	762e <chk_chr+0xc>
	return *str;
    7648:	687b      	ldr	r3, [r7, #4]
    764a:	781b      	ldrb	r3, [r3, #0]
}
    764c:	0018      	movs	r0, r3
    764e:	46bd      	mov	sp, r7
    7650:	b002      	add	sp, #8
    7652:	bd80      	pop	{r7, pc}

00007654 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    7654:	b590      	push	{r4, r7, lr}
    7656:	b085      	sub	sp, #20
    7658:	af00      	add	r7, sp, #0
    765a:	6078      	str	r0, [r7, #4]
    765c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    765e:	687b      	ldr	r3, [r7, #4]
    7660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7662:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    7664:	68fa      	ldr	r2, [r7, #12]
    7666:	683b      	ldr	r3, [r7, #0]
    7668:	429a      	cmp	r2, r3
    766a:	d04e      	beq.n	770a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    766c:	687b      	ldr	r3, [r7, #4]
    766e:	791b      	ldrb	r3, [r3, #4]
    7670:	2b00      	cmp	r3, #0
    7672:	d037      	beq.n	76e4 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7674:	687b      	ldr	r3, [r7, #4]
    7676:	7858      	ldrb	r0, [r3, #1]
    7678:	687b      	ldr	r3, [r7, #4]
    767a:	3330      	adds	r3, #48	; 0x30
    767c:	0019      	movs	r1, r3
    767e:	68fa      	ldr	r2, [r7, #12]
    7680:	2301      	movs	r3, #1
    7682:	4c24      	ldr	r4, [pc, #144]	; (7714 <move_window+0xc0>)
    7684:	47a0      	blx	r4
    7686:	1e03      	subs	r3, r0, #0
    7688:	d001      	beq.n	768e <move_window+0x3a>
				return FR_DISK_ERR;
    768a:	2301      	movs	r3, #1
    768c:	e03e      	b.n	770c <move_window+0xb8>
			fs->wflag = 0;
    768e:	687b      	ldr	r3, [r7, #4]
    7690:	2200      	movs	r2, #0
    7692:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    7694:	687b      	ldr	r3, [r7, #4]
    7696:	6a1a      	ldr	r2, [r3, #32]
    7698:	687b      	ldr	r3, [r7, #4]
    769a:	69db      	ldr	r3, [r3, #28]
    769c:	18d2      	adds	r2, r2, r3
    769e:	68fb      	ldr	r3, [r7, #12]
    76a0:	429a      	cmp	r2, r3
    76a2:	d91f      	bls.n	76e4 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    76a4:	230b      	movs	r3, #11
    76a6:	18fb      	adds	r3, r7, r3
    76a8:	687a      	ldr	r2, [r7, #4]
    76aa:	78d2      	ldrb	r2, [r2, #3]
    76ac:	701a      	strb	r2, [r3, #0]
    76ae:	e014      	b.n	76da <move_window+0x86>
					wsect += fs->fsize;
    76b0:	687b      	ldr	r3, [r7, #4]
    76b2:	69db      	ldr	r3, [r3, #28]
    76b4:	68fa      	ldr	r2, [r7, #12]
    76b6:	18d3      	adds	r3, r2, r3
    76b8:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    76ba:	687b      	ldr	r3, [r7, #4]
    76bc:	7858      	ldrb	r0, [r3, #1]
    76be:	687b      	ldr	r3, [r7, #4]
    76c0:	3330      	adds	r3, #48	; 0x30
    76c2:	0019      	movs	r1, r3
    76c4:	68fa      	ldr	r2, [r7, #12]
    76c6:	2301      	movs	r3, #1
    76c8:	4c12      	ldr	r4, [pc, #72]	; (7714 <move_window+0xc0>)
    76ca:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    76cc:	230b      	movs	r3, #11
    76ce:	18fb      	adds	r3, r7, r3
    76d0:	781a      	ldrb	r2, [r3, #0]
    76d2:	230b      	movs	r3, #11
    76d4:	18fb      	adds	r3, r7, r3
    76d6:	3a01      	subs	r2, #1
    76d8:	701a      	strb	r2, [r3, #0]
    76da:	230b      	movs	r3, #11
    76dc:	18fb      	adds	r3, r7, r3
    76de:	781b      	ldrb	r3, [r3, #0]
    76e0:	2b01      	cmp	r3, #1
    76e2:	d8e5      	bhi.n	76b0 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    76e4:	683b      	ldr	r3, [r7, #0]
    76e6:	2b00      	cmp	r3, #0
    76e8:	d00f      	beq.n	770a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    76ea:	687b      	ldr	r3, [r7, #4]
    76ec:	7858      	ldrb	r0, [r3, #1]
    76ee:	687b      	ldr	r3, [r7, #4]
    76f0:	3330      	adds	r3, #48	; 0x30
    76f2:	0019      	movs	r1, r3
    76f4:	683a      	ldr	r2, [r7, #0]
    76f6:	2301      	movs	r3, #1
    76f8:	4c07      	ldr	r4, [pc, #28]	; (7718 <move_window+0xc4>)
    76fa:	47a0      	blx	r4
    76fc:	1e03      	subs	r3, r0, #0
    76fe:	d001      	beq.n	7704 <move_window+0xb0>
				return FR_DISK_ERR;
    7700:	2301      	movs	r3, #1
    7702:	e003      	b.n	770c <move_window+0xb8>
			fs->winsect = sector;
    7704:	687b      	ldr	r3, [r7, #4]
    7706:	683a      	ldr	r2, [r7, #0]
    7708:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    770a:	2300      	movs	r3, #0
}
    770c:	0018      	movs	r0, r3
    770e:	46bd      	mov	sp, r7
    7710:	b005      	add	sp, #20
    7712:	bd90      	pop	{r4, r7, pc}
    7714:	00007341 	.word	0x00007341
    7718:	00007269 	.word	0x00007269

0000771c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    771c:	b590      	push	{r4, r7, lr}
    771e:	b085      	sub	sp, #20
    7720:	af00      	add	r7, sp, #0
    7722:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    7724:	230f      	movs	r3, #15
    7726:	18fc      	adds	r4, r7, r3
    7728:	687b      	ldr	r3, [r7, #4]
    772a:	2100      	movs	r1, #0
    772c:	0018      	movs	r0, r3
    772e:	4b52      	ldr	r3, [pc, #328]	; (7878 <sync+0x15c>)
    7730:	4798      	blx	r3
    7732:	0003      	movs	r3, r0
    7734:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    7736:	230f      	movs	r3, #15
    7738:	18fb      	adds	r3, r7, r3
    773a:	781b      	ldrb	r3, [r3, #0]
    773c:	2b00      	cmp	r3, #0
    773e:	d000      	beq.n	7742 <sync+0x26>
    7740:	e093      	b.n	786a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7742:	687b      	ldr	r3, [r7, #4]
    7744:	781b      	ldrb	r3, [r3, #0]
    7746:	2b03      	cmp	r3, #3
    7748:	d000      	beq.n	774c <sync+0x30>
    774a:	e081      	b.n	7850 <sync+0x134>
    774c:	687b      	ldr	r3, [r7, #4]
    774e:	795b      	ldrb	r3, [r3, #5]
    7750:	2b00      	cmp	r3, #0
    7752:	d07d      	beq.n	7850 <sync+0x134>
			fs->winsect = 0;
    7754:	687b      	ldr	r3, [r7, #4]
    7756:	2200      	movs	r2, #0
    7758:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    775a:	687b      	ldr	r3, [r7, #4]
    775c:	3330      	adds	r3, #48	; 0x30
    775e:	0018      	movs	r0, r3
    7760:	2380      	movs	r3, #128	; 0x80
    7762:	009b      	lsls	r3, r3, #2
    7764:	001a      	movs	r2, r3
    7766:	2100      	movs	r1, #0
    7768:	4b44      	ldr	r3, [pc, #272]	; (787c <sync+0x160>)
    776a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    776c:	687b      	ldr	r3, [r7, #4]
    776e:	4a44      	ldr	r2, [pc, #272]	; (7880 <sync+0x164>)
    7770:	2155      	movs	r1, #85	; 0x55
    7772:	5499      	strb	r1, [r3, r2]
    7774:	687b      	ldr	r3, [r7, #4]
    7776:	4a43      	ldr	r2, [pc, #268]	; (7884 <sync+0x168>)
    7778:	21aa      	movs	r1, #170	; 0xaa
    777a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    777c:	687b      	ldr	r3, [r7, #4]
    777e:	2230      	movs	r2, #48	; 0x30
    7780:	2152      	movs	r1, #82	; 0x52
    7782:	5499      	strb	r1, [r3, r2]
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	2231      	movs	r2, #49	; 0x31
    7788:	2152      	movs	r1, #82	; 0x52
    778a:	5499      	strb	r1, [r3, r2]
    778c:	687b      	ldr	r3, [r7, #4]
    778e:	2232      	movs	r2, #50	; 0x32
    7790:	2161      	movs	r1, #97	; 0x61
    7792:	5499      	strb	r1, [r3, r2]
    7794:	687b      	ldr	r3, [r7, #4]
    7796:	2233      	movs	r2, #51	; 0x33
    7798:	2141      	movs	r1, #65	; 0x41
    779a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    779c:	687a      	ldr	r2, [r7, #4]
    779e:	2385      	movs	r3, #133	; 0x85
    77a0:	009b      	lsls	r3, r3, #2
    77a2:	2172      	movs	r1, #114	; 0x72
    77a4:	54d1      	strb	r1, [r2, r3]
    77a6:	687b      	ldr	r3, [r7, #4]
    77a8:	4a37      	ldr	r2, [pc, #220]	; (7888 <sync+0x16c>)
    77aa:	2172      	movs	r1, #114	; 0x72
    77ac:	5499      	strb	r1, [r3, r2]
    77ae:	687b      	ldr	r3, [r7, #4]
    77b0:	4a36      	ldr	r2, [pc, #216]	; (788c <sync+0x170>)
    77b2:	2141      	movs	r1, #65	; 0x41
    77b4:	5499      	strb	r1, [r3, r2]
    77b6:	687b      	ldr	r3, [r7, #4]
    77b8:	4a35      	ldr	r2, [pc, #212]	; (7890 <sync+0x174>)
    77ba:	2161      	movs	r1, #97	; 0x61
    77bc:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    77be:	687b      	ldr	r3, [r7, #4]
    77c0:	691b      	ldr	r3, [r3, #16]
    77c2:	b2d9      	uxtb	r1, r3
    77c4:	687a      	ldr	r2, [r7, #4]
    77c6:	2386      	movs	r3, #134	; 0x86
    77c8:	009b      	lsls	r3, r3, #2
    77ca:	54d1      	strb	r1, [r2, r3]
    77cc:	687b      	ldr	r3, [r7, #4]
    77ce:	691b      	ldr	r3, [r3, #16]
    77d0:	b29b      	uxth	r3, r3
    77d2:	0a1b      	lsrs	r3, r3, #8
    77d4:	b29b      	uxth	r3, r3
    77d6:	b2d9      	uxtb	r1, r3
    77d8:	687b      	ldr	r3, [r7, #4]
    77da:	4a2e      	ldr	r2, [pc, #184]	; (7894 <sync+0x178>)
    77dc:	5499      	strb	r1, [r3, r2]
    77de:	687b      	ldr	r3, [r7, #4]
    77e0:	691b      	ldr	r3, [r3, #16]
    77e2:	0c1b      	lsrs	r3, r3, #16
    77e4:	b2d9      	uxtb	r1, r3
    77e6:	687b      	ldr	r3, [r7, #4]
    77e8:	4a2b      	ldr	r2, [pc, #172]	; (7898 <sync+0x17c>)
    77ea:	5499      	strb	r1, [r3, r2]
    77ec:	687b      	ldr	r3, [r7, #4]
    77ee:	691b      	ldr	r3, [r3, #16]
    77f0:	0e1b      	lsrs	r3, r3, #24
    77f2:	b2d9      	uxtb	r1, r3
    77f4:	687b      	ldr	r3, [r7, #4]
    77f6:	4a29      	ldr	r2, [pc, #164]	; (789c <sync+0x180>)
    77f8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    77fa:	687b      	ldr	r3, [r7, #4]
    77fc:	68db      	ldr	r3, [r3, #12]
    77fe:	b2d9      	uxtb	r1, r3
    7800:	687a      	ldr	r2, [r7, #4]
    7802:	2387      	movs	r3, #135	; 0x87
    7804:	009b      	lsls	r3, r3, #2
    7806:	54d1      	strb	r1, [r2, r3]
    7808:	687b      	ldr	r3, [r7, #4]
    780a:	68db      	ldr	r3, [r3, #12]
    780c:	b29b      	uxth	r3, r3
    780e:	0a1b      	lsrs	r3, r3, #8
    7810:	b29b      	uxth	r3, r3
    7812:	b2d9      	uxtb	r1, r3
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	4a22      	ldr	r2, [pc, #136]	; (78a0 <sync+0x184>)
    7818:	5499      	strb	r1, [r3, r2]
    781a:	687b      	ldr	r3, [r7, #4]
    781c:	68db      	ldr	r3, [r3, #12]
    781e:	0c1b      	lsrs	r3, r3, #16
    7820:	b2d9      	uxtb	r1, r3
    7822:	687b      	ldr	r3, [r7, #4]
    7824:	4a1f      	ldr	r2, [pc, #124]	; (78a4 <sync+0x188>)
    7826:	5499      	strb	r1, [r3, r2]
    7828:	687b      	ldr	r3, [r7, #4]
    782a:	68db      	ldr	r3, [r3, #12]
    782c:	0e1b      	lsrs	r3, r3, #24
    782e:	b2d9      	uxtb	r1, r3
    7830:	687b      	ldr	r3, [r7, #4]
    7832:	4a1d      	ldr	r2, [pc, #116]	; (78a8 <sync+0x18c>)
    7834:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    7836:	687b      	ldr	r3, [r7, #4]
    7838:	7858      	ldrb	r0, [r3, #1]
    783a:	687b      	ldr	r3, [r7, #4]
    783c:	3330      	adds	r3, #48	; 0x30
    783e:	0019      	movs	r1, r3
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	695a      	ldr	r2, [r3, #20]
    7844:	2301      	movs	r3, #1
    7846:	4c19      	ldr	r4, [pc, #100]	; (78ac <sync+0x190>)
    7848:	47a0      	blx	r4
			fs->fsi_flag = 0;
    784a:	687b      	ldr	r3, [r7, #4]
    784c:	2200      	movs	r2, #0
    784e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    7850:	687b      	ldr	r3, [r7, #4]
    7852:	785b      	ldrb	r3, [r3, #1]
    7854:	2200      	movs	r2, #0
    7856:	2100      	movs	r1, #0
    7858:	0018      	movs	r0, r3
    785a:	4b15      	ldr	r3, [pc, #84]	; (78b0 <sync+0x194>)
    785c:	4798      	blx	r3
    785e:	1e03      	subs	r3, r0, #0
    7860:	d003      	beq.n	786a <sync+0x14e>
			res = FR_DISK_ERR;
    7862:	230f      	movs	r3, #15
    7864:	18fb      	adds	r3, r7, r3
    7866:	2201      	movs	r2, #1
    7868:	701a      	strb	r2, [r3, #0]
	}

	return res;
    786a:	230f      	movs	r3, #15
    786c:	18fb      	adds	r3, r7, r3
    786e:	781b      	ldrb	r3, [r3, #0]
}
    7870:	0018      	movs	r0, r3
    7872:	46bd      	mov	sp, r7
    7874:	b005      	add	sp, #20
    7876:	bd90      	pop	{r4, r7, pc}
    7878:	00007655 	.word	0x00007655
    787c:	000075a9 	.word	0x000075a9
    7880:	0000022e 	.word	0x0000022e
    7884:	0000022f 	.word	0x0000022f
    7888:	00000215 	.word	0x00000215
    788c:	00000216 	.word	0x00000216
    7890:	00000217 	.word	0x00000217
    7894:	00000219 	.word	0x00000219
    7898:	0000021a 	.word	0x0000021a
    789c:	0000021b 	.word	0x0000021b
    78a0:	0000021d 	.word	0x0000021d
    78a4:	0000021e 	.word	0x0000021e
    78a8:	0000021f 	.word	0x0000021f
    78ac:	00007341 	.word	0x00007341
    78b0:	00007419 	.word	0x00007419

000078b4 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    78b4:	b580      	push	{r7, lr}
    78b6:	b082      	sub	sp, #8
    78b8:	af00      	add	r7, sp, #0
    78ba:	6078      	str	r0, [r7, #4]
    78bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
    78be:	683b      	ldr	r3, [r7, #0]
    78c0:	3b02      	subs	r3, #2
    78c2:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	699b      	ldr	r3, [r3, #24]
    78c8:	1e9a      	subs	r2, r3, #2
    78ca:	683b      	ldr	r3, [r7, #0]
    78cc:	429a      	cmp	r2, r3
    78ce:	d801      	bhi.n	78d4 <clust2sect+0x20>
    78d0:	2300      	movs	r3, #0
    78d2:	e007      	b.n	78e4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    78d4:	687b      	ldr	r3, [r7, #4]
    78d6:	789b      	ldrb	r3, [r3, #2]
    78d8:	001a      	movs	r2, r3
    78da:	683b      	ldr	r3, [r7, #0]
    78dc:	435a      	muls	r2, r3
    78de:	687b      	ldr	r3, [r7, #4]
    78e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78e2:	18d3      	adds	r3, r2, r3
}
    78e4:	0018      	movs	r0, r3
    78e6:	46bd      	mov	sp, r7
    78e8:	b002      	add	sp, #8
    78ea:	bd80      	pop	{r7, pc}

000078ec <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    78ec:	b580      	push	{r7, lr}
    78ee:	b086      	sub	sp, #24
    78f0:	af00      	add	r7, sp, #0
    78f2:	6078      	str	r0, [r7, #4]
    78f4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    78f6:	683b      	ldr	r3, [r7, #0]
    78f8:	2b01      	cmp	r3, #1
    78fa:	d904      	bls.n	7906 <get_fat+0x1a>
    78fc:	687b      	ldr	r3, [r7, #4]
    78fe:	699a      	ldr	r2, [r3, #24]
    7900:	683b      	ldr	r3, [r7, #0]
    7902:	429a      	cmp	r2, r3
    7904:	d801      	bhi.n	790a <get_fat+0x1e>
		return 1;
    7906:	2301      	movs	r3, #1
    7908:	e09f      	b.n	7a4a <get_fat+0x15e>

	switch (fs->fs_type) {
    790a:	687b      	ldr	r3, [r7, #4]
    790c:	781b      	ldrb	r3, [r3, #0]
    790e:	2b02      	cmp	r3, #2
    7910:	d048      	beq.n	79a4 <get_fat+0xb8>
    7912:	2b03      	cmp	r3, #3
    7914:	d067      	beq.n	79e6 <get_fat+0xfa>
    7916:	2b01      	cmp	r3, #1
    7918:	d000      	beq.n	791c <get_fat+0x30>
    791a:	e094      	b.n	7a46 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    791c:	683b      	ldr	r3, [r7, #0]
    791e:	617b      	str	r3, [r7, #20]
    7920:	697b      	ldr	r3, [r7, #20]
    7922:	085b      	lsrs	r3, r3, #1
    7924:	697a      	ldr	r2, [r7, #20]
    7926:	18d3      	adds	r3, r2, r3
    7928:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    792a:	687b      	ldr	r3, [r7, #4]
    792c:	6a1a      	ldr	r2, [r3, #32]
    792e:	697b      	ldr	r3, [r7, #20]
    7930:	0a5b      	lsrs	r3, r3, #9
    7932:	18d2      	adds	r2, r2, r3
    7934:	687b      	ldr	r3, [r7, #4]
    7936:	0011      	movs	r1, r2
    7938:	0018      	movs	r0, r3
    793a:	4b46      	ldr	r3, [pc, #280]	; (7a54 <get_fat+0x168>)
    793c:	4798      	blx	r3
    793e:	1e03      	subs	r3, r0, #0
    7940:	d000      	beq.n	7944 <get_fat+0x58>
    7942:	e079      	b.n	7a38 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    7944:	697b      	ldr	r3, [r7, #20]
    7946:	05db      	lsls	r3, r3, #23
    7948:	0ddb      	lsrs	r3, r3, #23
    794a:	687a      	ldr	r2, [r7, #4]
    794c:	2130      	movs	r1, #48	; 0x30
    794e:	18d3      	adds	r3, r2, r3
    7950:	185b      	adds	r3, r3, r1
    7952:	781b      	ldrb	r3, [r3, #0]
    7954:	613b      	str	r3, [r7, #16]
    7956:	697b      	ldr	r3, [r7, #20]
    7958:	3301      	adds	r3, #1
    795a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	6a1a      	ldr	r2, [r3, #32]
    7960:	697b      	ldr	r3, [r7, #20]
    7962:	0a5b      	lsrs	r3, r3, #9
    7964:	18d2      	adds	r2, r2, r3
    7966:	687b      	ldr	r3, [r7, #4]
    7968:	0011      	movs	r1, r2
    796a:	0018      	movs	r0, r3
    796c:	4b39      	ldr	r3, [pc, #228]	; (7a54 <get_fat+0x168>)
    796e:	4798      	blx	r3
    7970:	1e03      	subs	r3, r0, #0
    7972:	d163      	bne.n	7a3c <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    7974:	697b      	ldr	r3, [r7, #20]
    7976:	05db      	lsls	r3, r3, #23
    7978:	0ddb      	lsrs	r3, r3, #23
    797a:	687a      	ldr	r2, [r7, #4]
    797c:	2130      	movs	r1, #48	; 0x30
    797e:	18d3      	adds	r3, r2, r3
    7980:	185b      	adds	r3, r3, r1
    7982:	781b      	ldrb	r3, [r3, #0]
    7984:	021b      	lsls	r3, r3, #8
    7986:	001a      	movs	r2, r3
    7988:	693b      	ldr	r3, [r7, #16]
    798a:	4313      	orrs	r3, r2
    798c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    798e:	683b      	ldr	r3, [r7, #0]
    7990:	2201      	movs	r2, #1
    7992:	4013      	ands	r3, r2
    7994:	d002      	beq.n	799c <get_fat+0xb0>
    7996:	693b      	ldr	r3, [r7, #16]
    7998:	091b      	lsrs	r3, r3, #4
    799a:	e056      	b.n	7a4a <get_fat+0x15e>
    799c:	693b      	ldr	r3, [r7, #16]
    799e:	051b      	lsls	r3, r3, #20
    79a0:	0d1b      	lsrs	r3, r3, #20
    79a2:	e052      	b.n	7a4a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    79a4:	687b      	ldr	r3, [r7, #4]
    79a6:	6a1a      	ldr	r2, [r3, #32]
    79a8:	683b      	ldr	r3, [r7, #0]
    79aa:	0a1b      	lsrs	r3, r3, #8
    79ac:	18d2      	adds	r2, r2, r3
    79ae:	687b      	ldr	r3, [r7, #4]
    79b0:	0011      	movs	r1, r2
    79b2:	0018      	movs	r0, r3
    79b4:	4b27      	ldr	r3, [pc, #156]	; (7a54 <get_fat+0x168>)
    79b6:	4798      	blx	r3
    79b8:	1e03      	subs	r3, r0, #0
    79ba:	d141      	bne.n	7a40 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    79bc:	683b      	ldr	r3, [r7, #0]
    79be:	005a      	lsls	r2, r3, #1
    79c0:	23ff      	movs	r3, #255	; 0xff
    79c2:	005b      	lsls	r3, r3, #1
    79c4:	4013      	ands	r3, r2
    79c6:	3330      	adds	r3, #48	; 0x30
    79c8:	687a      	ldr	r2, [r7, #4]
    79ca:	18d3      	adds	r3, r2, r3
    79cc:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    79ce:	68fb      	ldr	r3, [r7, #12]
    79d0:	3301      	adds	r3, #1
    79d2:	781b      	ldrb	r3, [r3, #0]
    79d4:	021b      	lsls	r3, r3, #8
    79d6:	b21a      	sxth	r2, r3
    79d8:	68fb      	ldr	r3, [r7, #12]
    79da:	781b      	ldrb	r3, [r3, #0]
    79dc:	b21b      	sxth	r3, r3
    79de:	4313      	orrs	r3, r2
    79e0:	b21b      	sxth	r3, r3
    79e2:	b29b      	uxth	r3, r3
    79e4:	e031      	b.n	7a4a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    79e6:	687b      	ldr	r3, [r7, #4]
    79e8:	6a1a      	ldr	r2, [r3, #32]
    79ea:	683b      	ldr	r3, [r7, #0]
    79ec:	09db      	lsrs	r3, r3, #7
    79ee:	18d2      	adds	r2, r2, r3
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	0011      	movs	r1, r2
    79f4:	0018      	movs	r0, r3
    79f6:	4b17      	ldr	r3, [pc, #92]	; (7a54 <get_fat+0x168>)
    79f8:	4798      	blx	r3
    79fa:	1e03      	subs	r3, r0, #0
    79fc:	d122      	bne.n	7a44 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    79fe:	683b      	ldr	r3, [r7, #0]
    7a00:	009a      	lsls	r2, r3, #2
    7a02:	23fe      	movs	r3, #254	; 0xfe
    7a04:	005b      	lsls	r3, r3, #1
    7a06:	4013      	ands	r3, r2
    7a08:	3330      	adds	r3, #48	; 0x30
    7a0a:	687a      	ldr	r2, [r7, #4]
    7a0c:	18d3      	adds	r3, r2, r3
    7a0e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    7a10:	68fb      	ldr	r3, [r7, #12]
    7a12:	3303      	adds	r3, #3
    7a14:	781b      	ldrb	r3, [r3, #0]
    7a16:	061a      	lsls	r2, r3, #24
    7a18:	68fb      	ldr	r3, [r7, #12]
    7a1a:	3302      	adds	r3, #2
    7a1c:	781b      	ldrb	r3, [r3, #0]
    7a1e:	041b      	lsls	r3, r3, #16
    7a20:	4313      	orrs	r3, r2
    7a22:	68fa      	ldr	r2, [r7, #12]
    7a24:	3201      	adds	r2, #1
    7a26:	7812      	ldrb	r2, [r2, #0]
    7a28:	0212      	lsls	r2, r2, #8
    7a2a:	4313      	orrs	r3, r2
    7a2c:	68fa      	ldr	r2, [r7, #12]
    7a2e:	7812      	ldrb	r2, [r2, #0]
    7a30:	4313      	orrs	r3, r2
    7a32:	011b      	lsls	r3, r3, #4
    7a34:	091b      	lsrs	r3, r3, #4
    7a36:	e008      	b.n	7a4a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7a38:	46c0      	nop			; (mov r8, r8)
    7a3a:	e004      	b.n	7a46 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7a3c:	46c0      	nop			; (mov r8, r8)
    7a3e:	e002      	b.n	7a46 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7a40:	46c0      	nop			; (mov r8, r8)
    7a42:	e000      	b.n	7a46 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7a44:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7a46:	2301      	movs	r3, #1
    7a48:	425b      	negs	r3, r3
}
    7a4a:	0018      	movs	r0, r3
    7a4c:	46bd      	mov	sp, r7
    7a4e:	b006      	add	sp, #24
    7a50:	bd80      	pop	{r7, pc}
    7a52:	46c0      	nop			; (mov r8, r8)
    7a54:	00007655 	.word	0x00007655

00007a58 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7a58:	b590      	push	{r4, r7, lr}
    7a5a:	b089      	sub	sp, #36	; 0x24
    7a5c:	af00      	add	r7, sp, #0
    7a5e:	60f8      	str	r0, [r7, #12]
    7a60:	60b9      	str	r1, [r7, #8]
    7a62:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7a64:	68bb      	ldr	r3, [r7, #8]
    7a66:	2b01      	cmp	r3, #1
    7a68:	d904      	bls.n	7a74 <put_fat+0x1c>
    7a6a:	68fb      	ldr	r3, [r7, #12]
    7a6c:	699a      	ldr	r2, [r3, #24]
    7a6e:	68bb      	ldr	r3, [r7, #8]
    7a70:	429a      	cmp	r2, r3
    7a72:	d804      	bhi.n	7a7e <put_fat+0x26>
		res = FR_INT_ERR;
    7a74:	231f      	movs	r3, #31
    7a76:	18fb      	adds	r3, r7, r3
    7a78:	2202      	movs	r2, #2
    7a7a:	701a      	strb	r2, [r3, #0]
    7a7c:	e100      	b.n	7c80 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    7a7e:	68fb      	ldr	r3, [r7, #12]
    7a80:	781b      	ldrb	r3, [r3, #0]
    7a82:	2b02      	cmp	r3, #2
    7a84:	d100      	bne.n	7a88 <put_fat+0x30>
    7a86:	e078      	b.n	7b7a <put_fat+0x122>
    7a88:	2b03      	cmp	r3, #3
    7a8a:	d100      	bne.n	7a8e <put_fat+0x36>
    7a8c:	e09e      	b.n	7bcc <put_fat+0x174>
    7a8e:	2b01      	cmp	r3, #1
    7a90:	d000      	beq.n	7a94 <put_fat+0x3c>
    7a92:	e0e6      	b.n	7c62 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7a94:	68bb      	ldr	r3, [r7, #8]
    7a96:	61bb      	str	r3, [r7, #24]
    7a98:	69bb      	ldr	r3, [r7, #24]
    7a9a:	085b      	lsrs	r3, r3, #1
    7a9c:	69ba      	ldr	r2, [r7, #24]
    7a9e:	18d3      	adds	r3, r2, r3
    7aa0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7aa2:	68fb      	ldr	r3, [r7, #12]
    7aa4:	6a1a      	ldr	r2, [r3, #32]
    7aa6:	69bb      	ldr	r3, [r7, #24]
    7aa8:	0a5b      	lsrs	r3, r3, #9
    7aaa:	18d2      	adds	r2, r2, r3
    7aac:	231f      	movs	r3, #31
    7aae:	18fc      	adds	r4, r7, r3
    7ab0:	68fb      	ldr	r3, [r7, #12]
    7ab2:	0011      	movs	r1, r2
    7ab4:	0018      	movs	r0, r3
    7ab6:	4b76      	ldr	r3, [pc, #472]	; (7c90 <put_fat+0x238>)
    7ab8:	4798      	blx	r3
    7aba:	0003      	movs	r3, r0
    7abc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7abe:	231f      	movs	r3, #31
    7ac0:	18fb      	adds	r3, r7, r3
    7ac2:	781b      	ldrb	r3, [r3, #0]
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	d000      	beq.n	7aca <put_fat+0x72>
    7ac8:	e0d0      	b.n	7c6c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    7aca:	69bb      	ldr	r3, [r7, #24]
    7acc:	05db      	lsls	r3, r3, #23
    7ace:	0ddb      	lsrs	r3, r3, #23
    7ad0:	3330      	adds	r3, #48	; 0x30
    7ad2:	68fa      	ldr	r2, [r7, #12]
    7ad4:	18d3      	adds	r3, r2, r3
    7ad6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7ad8:	68bb      	ldr	r3, [r7, #8]
    7ada:	2201      	movs	r2, #1
    7adc:	4013      	ands	r3, r2
    7ade:	d00d      	beq.n	7afc <put_fat+0xa4>
    7ae0:	697b      	ldr	r3, [r7, #20]
    7ae2:	781b      	ldrb	r3, [r3, #0]
    7ae4:	b25b      	sxtb	r3, r3
    7ae6:	220f      	movs	r2, #15
    7ae8:	4013      	ands	r3, r2
    7aea:	b25a      	sxtb	r2, r3
    7aec:	687b      	ldr	r3, [r7, #4]
    7aee:	b2db      	uxtb	r3, r3
    7af0:	011b      	lsls	r3, r3, #4
    7af2:	b25b      	sxtb	r3, r3
    7af4:	4313      	orrs	r3, r2
    7af6:	b25b      	sxtb	r3, r3
    7af8:	b2db      	uxtb	r3, r3
    7afa:	e001      	b.n	7b00 <put_fat+0xa8>
    7afc:	687b      	ldr	r3, [r7, #4]
    7afe:	b2db      	uxtb	r3, r3
    7b00:	697a      	ldr	r2, [r7, #20]
    7b02:	7013      	strb	r3, [r2, #0]
			bc++;
    7b04:	69bb      	ldr	r3, [r7, #24]
    7b06:	3301      	adds	r3, #1
    7b08:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    7b0a:	68fb      	ldr	r3, [r7, #12]
    7b0c:	2201      	movs	r2, #1
    7b0e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7b10:	68fb      	ldr	r3, [r7, #12]
    7b12:	6a1a      	ldr	r2, [r3, #32]
    7b14:	69bb      	ldr	r3, [r7, #24]
    7b16:	0a5b      	lsrs	r3, r3, #9
    7b18:	18d2      	adds	r2, r2, r3
    7b1a:	231f      	movs	r3, #31
    7b1c:	18fc      	adds	r4, r7, r3
    7b1e:	68fb      	ldr	r3, [r7, #12]
    7b20:	0011      	movs	r1, r2
    7b22:	0018      	movs	r0, r3
    7b24:	4b5a      	ldr	r3, [pc, #360]	; (7c90 <put_fat+0x238>)
    7b26:	4798      	blx	r3
    7b28:	0003      	movs	r3, r0
    7b2a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7b2c:	231f      	movs	r3, #31
    7b2e:	18fb      	adds	r3, r7, r3
    7b30:	781b      	ldrb	r3, [r3, #0]
    7b32:	2b00      	cmp	r3, #0
    7b34:	d000      	beq.n	7b38 <put_fat+0xe0>
    7b36:	e09b      	b.n	7c70 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    7b38:	69bb      	ldr	r3, [r7, #24]
    7b3a:	05db      	lsls	r3, r3, #23
    7b3c:	0ddb      	lsrs	r3, r3, #23
    7b3e:	3330      	adds	r3, #48	; 0x30
    7b40:	68fa      	ldr	r2, [r7, #12]
    7b42:	18d3      	adds	r3, r2, r3
    7b44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7b46:	68bb      	ldr	r3, [r7, #8]
    7b48:	2201      	movs	r2, #1
    7b4a:	4013      	ands	r3, r2
    7b4c:	d003      	beq.n	7b56 <put_fat+0xfe>
    7b4e:	687b      	ldr	r3, [r7, #4]
    7b50:	091b      	lsrs	r3, r3, #4
    7b52:	b2db      	uxtb	r3, r3
    7b54:	e00e      	b.n	7b74 <put_fat+0x11c>
    7b56:	697b      	ldr	r3, [r7, #20]
    7b58:	781b      	ldrb	r3, [r3, #0]
    7b5a:	b25b      	sxtb	r3, r3
    7b5c:	220f      	movs	r2, #15
    7b5e:	4393      	bics	r3, r2
    7b60:	b25a      	sxtb	r2, r3
    7b62:	687b      	ldr	r3, [r7, #4]
    7b64:	0a1b      	lsrs	r3, r3, #8
    7b66:	b25b      	sxtb	r3, r3
    7b68:	210f      	movs	r1, #15
    7b6a:	400b      	ands	r3, r1
    7b6c:	b25b      	sxtb	r3, r3
    7b6e:	4313      	orrs	r3, r2
    7b70:	b25b      	sxtb	r3, r3
    7b72:	b2db      	uxtb	r3, r3
    7b74:	697a      	ldr	r2, [r7, #20]
    7b76:	7013      	strb	r3, [r2, #0]
			break;
    7b78:	e07f      	b.n	7c7a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    7b7a:	68fb      	ldr	r3, [r7, #12]
    7b7c:	6a1a      	ldr	r2, [r3, #32]
    7b7e:	68bb      	ldr	r3, [r7, #8]
    7b80:	0a1b      	lsrs	r3, r3, #8
    7b82:	18d2      	adds	r2, r2, r3
    7b84:	231f      	movs	r3, #31
    7b86:	18fc      	adds	r4, r7, r3
    7b88:	68fb      	ldr	r3, [r7, #12]
    7b8a:	0011      	movs	r1, r2
    7b8c:	0018      	movs	r0, r3
    7b8e:	4b40      	ldr	r3, [pc, #256]	; (7c90 <put_fat+0x238>)
    7b90:	4798      	blx	r3
    7b92:	0003      	movs	r3, r0
    7b94:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7b96:	231f      	movs	r3, #31
    7b98:	18fb      	adds	r3, r7, r3
    7b9a:	781b      	ldrb	r3, [r3, #0]
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	d169      	bne.n	7c74 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7ba0:	68bb      	ldr	r3, [r7, #8]
    7ba2:	005a      	lsls	r2, r3, #1
    7ba4:	23ff      	movs	r3, #255	; 0xff
    7ba6:	005b      	lsls	r3, r3, #1
    7ba8:	4013      	ands	r3, r2
    7baa:	3330      	adds	r3, #48	; 0x30
    7bac:	68fa      	ldr	r2, [r7, #12]
    7bae:	18d3      	adds	r3, r2, r3
    7bb0:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	b2da      	uxtb	r2, r3
    7bb6:	697b      	ldr	r3, [r7, #20]
    7bb8:	701a      	strb	r2, [r3, #0]
    7bba:	697b      	ldr	r3, [r7, #20]
    7bbc:	3301      	adds	r3, #1
    7bbe:	687a      	ldr	r2, [r7, #4]
    7bc0:	b292      	uxth	r2, r2
    7bc2:	0a12      	lsrs	r2, r2, #8
    7bc4:	b292      	uxth	r2, r2
    7bc6:	b2d2      	uxtb	r2, r2
    7bc8:	701a      	strb	r2, [r3, #0]
			break;
    7bca:	e056      	b.n	7c7a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7bcc:	68fb      	ldr	r3, [r7, #12]
    7bce:	6a1a      	ldr	r2, [r3, #32]
    7bd0:	68bb      	ldr	r3, [r7, #8]
    7bd2:	09db      	lsrs	r3, r3, #7
    7bd4:	18d2      	adds	r2, r2, r3
    7bd6:	231f      	movs	r3, #31
    7bd8:	18fc      	adds	r4, r7, r3
    7bda:	68fb      	ldr	r3, [r7, #12]
    7bdc:	0011      	movs	r1, r2
    7bde:	0018      	movs	r0, r3
    7be0:	4b2b      	ldr	r3, [pc, #172]	; (7c90 <put_fat+0x238>)
    7be2:	4798      	blx	r3
    7be4:	0003      	movs	r3, r0
    7be6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7be8:	231f      	movs	r3, #31
    7bea:	18fb      	adds	r3, r7, r3
    7bec:	781b      	ldrb	r3, [r3, #0]
    7bee:	2b00      	cmp	r3, #0
    7bf0:	d142      	bne.n	7c78 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    7bf2:	68bb      	ldr	r3, [r7, #8]
    7bf4:	009a      	lsls	r2, r3, #2
    7bf6:	23fe      	movs	r3, #254	; 0xfe
    7bf8:	005b      	lsls	r3, r3, #1
    7bfa:	4013      	ands	r3, r2
    7bfc:	3330      	adds	r3, #48	; 0x30
    7bfe:	68fa      	ldr	r2, [r7, #12]
    7c00:	18d3      	adds	r3, r2, r3
    7c02:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    7c04:	697b      	ldr	r3, [r7, #20]
    7c06:	3303      	adds	r3, #3
    7c08:	781b      	ldrb	r3, [r3, #0]
    7c0a:	061a      	lsls	r2, r3, #24
    7c0c:	697b      	ldr	r3, [r7, #20]
    7c0e:	3302      	adds	r3, #2
    7c10:	781b      	ldrb	r3, [r3, #0]
    7c12:	041b      	lsls	r3, r3, #16
    7c14:	4313      	orrs	r3, r2
    7c16:	697a      	ldr	r2, [r7, #20]
    7c18:	3201      	adds	r2, #1
    7c1a:	7812      	ldrb	r2, [r2, #0]
    7c1c:	0212      	lsls	r2, r2, #8
    7c1e:	4313      	orrs	r3, r2
    7c20:	697a      	ldr	r2, [r7, #20]
    7c22:	7812      	ldrb	r2, [r2, #0]
    7c24:	4313      	orrs	r3, r2
    7c26:	0f1b      	lsrs	r3, r3, #28
    7c28:	071b      	lsls	r3, r3, #28
    7c2a:	687a      	ldr	r2, [r7, #4]
    7c2c:	4313      	orrs	r3, r2
    7c2e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	b2da      	uxtb	r2, r3
    7c34:	697b      	ldr	r3, [r7, #20]
    7c36:	701a      	strb	r2, [r3, #0]
    7c38:	697b      	ldr	r3, [r7, #20]
    7c3a:	3301      	adds	r3, #1
    7c3c:	687a      	ldr	r2, [r7, #4]
    7c3e:	b292      	uxth	r2, r2
    7c40:	0a12      	lsrs	r2, r2, #8
    7c42:	b292      	uxth	r2, r2
    7c44:	b2d2      	uxtb	r2, r2
    7c46:	701a      	strb	r2, [r3, #0]
    7c48:	697b      	ldr	r3, [r7, #20]
    7c4a:	3302      	adds	r3, #2
    7c4c:	687a      	ldr	r2, [r7, #4]
    7c4e:	0c12      	lsrs	r2, r2, #16
    7c50:	b2d2      	uxtb	r2, r2
    7c52:	701a      	strb	r2, [r3, #0]
    7c54:	697b      	ldr	r3, [r7, #20]
    7c56:	3303      	adds	r3, #3
    7c58:	687a      	ldr	r2, [r7, #4]
    7c5a:	0e12      	lsrs	r2, r2, #24
    7c5c:	b2d2      	uxtb	r2, r2
    7c5e:	701a      	strb	r2, [r3, #0]
			break;
    7c60:	e00b      	b.n	7c7a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    7c62:	231f      	movs	r3, #31
    7c64:	18fb      	adds	r3, r7, r3
    7c66:	2202      	movs	r2, #2
    7c68:	701a      	strb	r2, [r3, #0]
    7c6a:	e006      	b.n	7c7a <put_fat+0x222>
			if (res != FR_OK) break;
    7c6c:	46c0      	nop			; (mov r8, r8)
    7c6e:	e004      	b.n	7c7a <put_fat+0x222>
			if (res != FR_OK) break;
    7c70:	46c0      	nop			; (mov r8, r8)
    7c72:	e002      	b.n	7c7a <put_fat+0x222>
			if (res != FR_OK) break;
    7c74:	46c0      	nop			; (mov r8, r8)
    7c76:	e000      	b.n	7c7a <put_fat+0x222>
			if (res != FR_OK) break;
    7c78:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    7c7a:	68fb      	ldr	r3, [r7, #12]
    7c7c:	2201      	movs	r2, #1
    7c7e:	711a      	strb	r2, [r3, #4]
	}

	return res;
    7c80:	231f      	movs	r3, #31
    7c82:	18fb      	adds	r3, r7, r3
    7c84:	781b      	ldrb	r3, [r3, #0]
}
    7c86:	0018      	movs	r0, r3
    7c88:	46bd      	mov	sp, r7
    7c8a:	b009      	add	sp, #36	; 0x24
    7c8c:	bd90      	pop	{r4, r7, pc}
    7c8e:	46c0      	nop			; (mov r8, r8)
    7c90:	00007655 	.word	0x00007655

00007c94 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7c94:	b590      	push	{r4, r7, lr}
    7c96:	b085      	sub	sp, #20
    7c98:	af00      	add	r7, sp, #0
    7c9a:	6078      	str	r0, [r7, #4]
    7c9c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7c9e:	683b      	ldr	r3, [r7, #0]
    7ca0:	2b01      	cmp	r3, #1
    7ca2:	d904      	bls.n	7cae <remove_chain+0x1a>
    7ca4:	687b      	ldr	r3, [r7, #4]
    7ca6:	699a      	ldr	r2, [r3, #24]
    7ca8:	683b      	ldr	r3, [r7, #0]
    7caa:	429a      	cmp	r2, r3
    7cac:	d804      	bhi.n	7cb8 <remove_chain+0x24>
		res = FR_INT_ERR;
    7cae:	230f      	movs	r3, #15
    7cb0:	18fb      	adds	r3, r7, r3
    7cb2:	2202      	movs	r2, #2
    7cb4:	701a      	strb	r2, [r3, #0]
    7cb6:	e045      	b.n	7d44 <remove_chain+0xb0>

	} else {
		res = FR_OK;
    7cb8:	230f      	movs	r3, #15
    7cba:	18fb      	adds	r3, r7, r3
    7cbc:	2200      	movs	r2, #0
    7cbe:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7cc0:	e037      	b.n	7d32 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7cc2:	683a      	ldr	r2, [r7, #0]
    7cc4:	687b      	ldr	r3, [r7, #4]
    7cc6:	0011      	movs	r1, r2
    7cc8:	0018      	movs	r0, r3
    7cca:	4b22      	ldr	r3, [pc, #136]	; (7d54 <remove_chain+0xc0>)
    7ccc:	4798      	blx	r3
    7cce:	0003      	movs	r3, r0
    7cd0:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    7cd2:	68bb      	ldr	r3, [r7, #8]
    7cd4:	2b00      	cmp	r3, #0
    7cd6:	d032      	beq.n	7d3e <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7cd8:	68bb      	ldr	r3, [r7, #8]
    7cda:	2b01      	cmp	r3, #1
    7cdc:	d104      	bne.n	7ce8 <remove_chain+0x54>
    7cde:	230f      	movs	r3, #15
    7ce0:	18fb      	adds	r3, r7, r3
    7ce2:	2202      	movs	r2, #2
    7ce4:	701a      	strb	r2, [r3, #0]
    7ce6:	e02d      	b.n	7d44 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7ce8:	68bb      	ldr	r3, [r7, #8]
    7cea:	3301      	adds	r3, #1
    7cec:	d104      	bne.n	7cf8 <remove_chain+0x64>
    7cee:	230f      	movs	r3, #15
    7cf0:	18fb      	adds	r3, r7, r3
    7cf2:	2201      	movs	r2, #1
    7cf4:	701a      	strb	r2, [r3, #0]
    7cf6:	e025      	b.n	7d44 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7cf8:	230f      	movs	r3, #15
    7cfa:	18fc      	adds	r4, r7, r3
    7cfc:	6839      	ldr	r1, [r7, #0]
    7cfe:	687b      	ldr	r3, [r7, #4]
    7d00:	2200      	movs	r2, #0
    7d02:	0018      	movs	r0, r3
    7d04:	4b14      	ldr	r3, [pc, #80]	; (7d58 <remove_chain+0xc4>)
    7d06:	4798      	blx	r3
    7d08:	0003      	movs	r3, r0
    7d0a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7d0c:	230f      	movs	r3, #15
    7d0e:	18fb      	adds	r3, r7, r3
    7d10:	781b      	ldrb	r3, [r3, #0]
    7d12:	2b00      	cmp	r3, #0
    7d14:	d115      	bne.n	7d42 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7d16:	687b      	ldr	r3, [r7, #4]
    7d18:	691b      	ldr	r3, [r3, #16]
    7d1a:	3301      	adds	r3, #1
    7d1c:	d007      	beq.n	7d2e <remove_chain+0x9a>
				fs->free_clust++;
    7d1e:	687b      	ldr	r3, [r7, #4]
    7d20:	691b      	ldr	r3, [r3, #16]
    7d22:	1c5a      	adds	r2, r3, #1
    7d24:	687b      	ldr	r3, [r7, #4]
    7d26:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    7d28:	687b      	ldr	r3, [r7, #4]
    7d2a:	2201      	movs	r2, #1
    7d2c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    7d2e:	68bb      	ldr	r3, [r7, #8]
    7d30:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7d32:	687b      	ldr	r3, [r7, #4]
    7d34:	699a      	ldr	r2, [r3, #24]
    7d36:	683b      	ldr	r3, [r7, #0]
    7d38:	429a      	cmp	r2, r3
    7d3a:	d8c2      	bhi.n	7cc2 <remove_chain+0x2e>
    7d3c:	e002      	b.n	7d44 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    7d3e:	46c0      	nop			; (mov r8, r8)
    7d40:	e000      	b.n	7d44 <remove_chain+0xb0>
			if (res != FR_OK) break;
    7d42:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    7d44:	230f      	movs	r3, #15
    7d46:	18fb      	adds	r3, r7, r3
    7d48:	781b      	ldrb	r3, [r3, #0]
}
    7d4a:	0018      	movs	r0, r3
    7d4c:	46bd      	mov	sp, r7
    7d4e:	b005      	add	sp, #20
    7d50:	bd90      	pop	{r4, r7, pc}
    7d52:	46c0      	nop			; (mov r8, r8)
    7d54:	000078ed 	.word	0x000078ed
    7d58:	00007a59 	.word	0x00007a59

00007d5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7d5c:	b590      	push	{r4, r7, lr}
    7d5e:	b087      	sub	sp, #28
    7d60:	af00      	add	r7, sp, #0
    7d62:	6078      	str	r0, [r7, #4]
    7d64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    7d66:	683b      	ldr	r3, [r7, #0]
    7d68:	2b00      	cmp	r3, #0
    7d6a:	d10d      	bne.n	7d88 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	68db      	ldr	r3, [r3, #12]
    7d70:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7d72:	693b      	ldr	r3, [r7, #16]
    7d74:	2b00      	cmp	r3, #0
    7d76:	d004      	beq.n	7d82 <create_chain+0x26>
    7d78:	687b      	ldr	r3, [r7, #4]
    7d7a:	699a      	ldr	r2, [r3, #24]
    7d7c:	693b      	ldr	r3, [r7, #16]
    7d7e:	429a      	cmp	r2, r3
    7d80:	d818      	bhi.n	7db4 <create_chain+0x58>
    7d82:	2301      	movs	r3, #1
    7d84:	613b      	str	r3, [r7, #16]
    7d86:	e015      	b.n	7db4 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7d88:	683a      	ldr	r2, [r7, #0]
    7d8a:	687b      	ldr	r3, [r7, #4]
    7d8c:	0011      	movs	r1, r2
    7d8e:	0018      	movs	r0, r3
    7d90:	4b3e      	ldr	r3, [pc, #248]	; (7e8c <create_chain+0x130>)
    7d92:	4798      	blx	r3
    7d94:	0003      	movs	r3, r0
    7d96:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7d98:	68bb      	ldr	r3, [r7, #8]
    7d9a:	2b01      	cmp	r3, #1
    7d9c:	d801      	bhi.n	7da2 <create_chain+0x46>
    7d9e:	2301      	movs	r3, #1
    7da0:	e070      	b.n	7e84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7da2:	687b      	ldr	r3, [r7, #4]
    7da4:	699a      	ldr	r2, [r3, #24]
    7da6:	68bb      	ldr	r3, [r7, #8]
    7da8:	429a      	cmp	r2, r3
    7daa:	d901      	bls.n	7db0 <create_chain+0x54>
    7dac:	68bb      	ldr	r3, [r7, #8]
    7dae:	e069      	b.n	7e84 <create_chain+0x128>
		scl = clst;
    7db0:	683b      	ldr	r3, [r7, #0]
    7db2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    7db4:	693b      	ldr	r3, [r7, #16]
    7db6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    7db8:	697b      	ldr	r3, [r7, #20]
    7dba:	3301      	adds	r3, #1
    7dbc:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7dbe:	687b      	ldr	r3, [r7, #4]
    7dc0:	699a      	ldr	r2, [r3, #24]
    7dc2:	697b      	ldr	r3, [r7, #20]
    7dc4:	429a      	cmp	r2, r3
    7dc6:	d807      	bhi.n	7dd8 <create_chain+0x7c>
			ncl = 2;
    7dc8:	2302      	movs	r3, #2
    7dca:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7dcc:	697a      	ldr	r2, [r7, #20]
    7dce:	693b      	ldr	r3, [r7, #16]
    7dd0:	429a      	cmp	r2, r3
    7dd2:	d901      	bls.n	7dd8 <create_chain+0x7c>
    7dd4:	2300      	movs	r3, #0
    7dd6:	e055      	b.n	7e84 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7dd8:	697a      	ldr	r2, [r7, #20]
    7dda:	687b      	ldr	r3, [r7, #4]
    7ddc:	0011      	movs	r1, r2
    7dde:	0018      	movs	r0, r3
    7de0:	4b2a      	ldr	r3, [pc, #168]	; (7e8c <create_chain+0x130>)
    7de2:	4798      	blx	r3
    7de4:	0003      	movs	r3, r0
    7de6:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    7de8:	68bb      	ldr	r3, [r7, #8]
    7dea:	2b00      	cmp	r3, #0
    7dec:	d00d      	beq.n	7e0a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7dee:	68bb      	ldr	r3, [r7, #8]
    7df0:	3301      	adds	r3, #1
    7df2:	d002      	beq.n	7dfa <create_chain+0x9e>
    7df4:	68bb      	ldr	r3, [r7, #8]
    7df6:	2b01      	cmp	r3, #1
    7df8:	d101      	bne.n	7dfe <create_chain+0xa2>
			return cs;
    7dfa:	68bb      	ldr	r3, [r7, #8]
    7dfc:	e042      	b.n	7e84 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    7dfe:	697a      	ldr	r2, [r7, #20]
    7e00:	693b      	ldr	r3, [r7, #16]
    7e02:	429a      	cmp	r2, r3
    7e04:	d1d8      	bne.n	7db8 <create_chain+0x5c>
    7e06:	2300      	movs	r3, #0
    7e08:	e03c      	b.n	7e84 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    7e0a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7e0c:	230f      	movs	r3, #15
    7e0e:	18fc      	adds	r4, r7, r3
    7e10:	4a1f      	ldr	r2, [pc, #124]	; (7e90 <create_chain+0x134>)
    7e12:	6979      	ldr	r1, [r7, #20]
    7e14:	687b      	ldr	r3, [r7, #4]
    7e16:	0018      	movs	r0, r3
    7e18:	4b1e      	ldr	r3, [pc, #120]	; (7e94 <create_chain+0x138>)
    7e1a:	4798      	blx	r3
    7e1c:	0003      	movs	r3, r0
    7e1e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    7e20:	230f      	movs	r3, #15
    7e22:	18fb      	adds	r3, r7, r3
    7e24:	781b      	ldrb	r3, [r3, #0]
    7e26:	2b00      	cmp	r3, #0
    7e28:	d10c      	bne.n	7e44 <create_chain+0xe8>
    7e2a:	683b      	ldr	r3, [r7, #0]
    7e2c:	2b00      	cmp	r3, #0
    7e2e:	d009      	beq.n	7e44 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    7e30:	230f      	movs	r3, #15
    7e32:	18fc      	adds	r4, r7, r3
    7e34:	697a      	ldr	r2, [r7, #20]
    7e36:	6839      	ldr	r1, [r7, #0]
    7e38:	687b      	ldr	r3, [r7, #4]
    7e3a:	0018      	movs	r0, r3
    7e3c:	4b15      	ldr	r3, [pc, #84]	; (7e94 <create_chain+0x138>)
    7e3e:	4798      	blx	r3
    7e40:	0003      	movs	r3, r0
    7e42:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    7e44:	230f      	movs	r3, #15
    7e46:	18fb      	adds	r3, r7, r3
    7e48:	781b      	ldrb	r3, [r3, #0]
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	d10f      	bne.n	7e6e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    7e4e:	687b      	ldr	r3, [r7, #4]
    7e50:	697a      	ldr	r2, [r7, #20]
    7e52:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    7e54:	687b      	ldr	r3, [r7, #4]
    7e56:	691b      	ldr	r3, [r3, #16]
    7e58:	3301      	adds	r3, #1
    7e5a:	d012      	beq.n	7e82 <create_chain+0x126>
			fs->free_clust--;
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	691b      	ldr	r3, [r3, #16]
    7e60:	1e5a      	subs	r2, r3, #1
    7e62:	687b      	ldr	r3, [r7, #4]
    7e64:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    7e66:	687b      	ldr	r3, [r7, #4]
    7e68:	2201      	movs	r2, #1
    7e6a:	715a      	strb	r2, [r3, #5]
    7e6c:	e009      	b.n	7e82 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7e6e:	230f      	movs	r3, #15
    7e70:	18fb      	adds	r3, r7, r3
    7e72:	781b      	ldrb	r3, [r3, #0]
    7e74:	2b01      	cmp	r3, #1
    7e76:	d102      	bne.n	7e7e <create_chain+0x122>
    7e78:	2301      	movs	r3, #1
    7e7a:	425b      	negs	r3, r3
    7e7c:	e000      	b.n	7e80 <create_chain+0x124>
    7e7e:	2301      	movs	r3, #1
    7e80:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    7e82:	697b      	ldr	r3, [r7, #20]
}
    7e84:	0018      	movs	r0, r3
    7e86:	46bd      	mov	sp, r7
    7e88:	b007      	add	sp, #28
    7e8a:	bd90      	pop	{r4, r7, pc}
    7e8c:	000078ed 	.word	0x000078ed
    7e90:	0fffffff 	.word	0x0fffffff
    7e94:	00007a59 	.word	0x00007a59

00007e98 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7e98:	b580      	push	{r7, lr}
    7e9a:	b084      	sub	sp, #16
    7e9c:	af00      	add	r7, sp, #0
    7e9e:	6078      	str	r0, [r7, #4]
    7ea0:	000a      	movs	r2, r1
    7ea2:	1cbb      	adds	r3, r7, #2
    7ea4:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7ea6:	687b      	ldr	r3, [r7, #4]
    7ea8:	1cba      	adds	r2, r7, #2
    7eaa:	8812      	ldrh	r2, [r2, #0]
    7eac:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7eae:	687b      	ldr	r3, [r7, #4]
    7eb0:	689b      	ldr	r3, [r3, #8]
    7eb2:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7eb4:	68fb      	ldr	r3, [r7, #12]
    7eb6:	2b01      	cmp	r3, #1
    7eb8:	d005      	beq.n	7ec6 <dir_sdi+0x2e>
    7eba:	687b      	ldr	r3, [r7, #4]
    7ebc:	681b      	ldr	r3, [r3, #0]
    7ebe:	699a      	ldr	r2, [r3, #24]
    7ec0:	68fb      	ldr	r3, [r7, #12]
    7ec2:	429a      	cmp	r2, r3
    7ec4:	d801      	bhi.n	7eca <dir_sdi+0x32>
		return FR_INT_ERR;
    7ec6:	2302      	movs	r3, #2
    7ec8:	e075      	b.n	7fb6 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7eca:	68fb      	ldr	r3, [r7, #12]
    7ecc:	2b00      	cmp	r3, #0
    7ece:	d108      	bne.n	7ee2 <dir_sdi+0x4a>
    7ed0:	687b      	ldr	r3, [r7, #4]
    7ed2:	681b      	ldr	r3, [r3, #0]
    7ed4:	781b      	ldrb	r3, [r3, #0]
    7ed6:	2b03      	cmp	r3, #3
    7ed8:	d103      	bne.n	7ee2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    7eda:	687b      	ldr	r3, [r7, #4]
    7edc:	681b      	ldr	r3, [r3, #0]
    7ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ee0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7ee2:	68fb      	ldr	r3, [r7, #12]
    7ee4:	2b00      	cmp	r3, #0
    7ee6:	d116      	bne.n	7f16 <dir_sdi+0x7e>
		dj->clust = clst;
    7ee8:	687b      	ldr	r3, [r7, #4]
    7eea:	68fa      	ldr	r2, [r7, #12]
    7eec:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7eee:	687b      	ldr	r3, [r7, #4]
    7ef0:	681b      	ldr	r3, [r3, #0]
    7ef2:	891b      	ldrh	r3, [r3, #8]
    7ef4:	1cba      	adds	r2, r7, #2
    7ef6:	8812      	ldrh	r2, [r2, #0]
    7ef8:	429a      	cmp	r2, r3
    7efa:	d301      	bcc.n	7f00 <dir_sdi+0x68>
			return FR_INT_ERR;
    7efc:	2302      	movs	r3, #2
    7efe:	e05a      	b.n	7fb6 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	681b      	ldr	r3, [r3, #0]
    7f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f06:	1cba      	adds	r2, r7, #2
    7f08:	8812      	ldrh	r2, [r2, #0]
    7f0a:	0912      	lsrs	r2, r2, #4
    7f0c:	b292      	uxth	r2, r2
    7f0e:	189a      	adds	r2, r3, r2
    7f10:	687b      	ldr	r3, [r7, #4]
    7f12:	611a      	str	r2, [r3, #16]
    7f14:	e042      	b.n	7f9c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7f16:	687b      	ldr	r3, [r7, #4]
    7f18:	681b      	ldr	r3, [r3, #0]
    7f1a:	789b      	ldrb	r3, [r3, #2]
    7f1c:	b29a      	uxth	r2, r3
    7f1e:	230a      	movs	r3, #10
    7f20:	18fb      	adds	r3, r7, r3
    7f22:	0112      	lsls	r2, r2, #4
    7f24:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7f26:	e020      	b.n	7f6a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7f28:	687b      	ldr	r3, [r7, #4]
    7f2a:	681b      	ldr	r3, [r3, #0]
    7f2c:	68fa      	ldr	r2, [r7, #12]
    7f2e:	0011      	movs	r1, r2
    7f30:	0018      	movs	r0, r3
    7f32:	4b23      	ldr	r3, [pc, #140]	; (7fc0 <dir_sdi+0x128>)
    7f34:	4798      	blx	r3
    7f36:	0003      	movs	r3, r0
    7f38:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7f3a:	68fb      	ldr	r3, [r7, #12]
    7f3c:	3301      	adds	r3, #1
    7f3e:	d101      	bne.n	7f44 <dir_sdi+0xac>
    7f40:	2301      	movs	r3, #1
    7f42:	e038      	b.n	7fb6 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7f44:	68fb      	ldr	r3, [r7, #12]
    7f46:	2b01      	cmp	r3, #1
    7f48:	d905      	bls.n	7f56 <dir_sdi+0xbe>
    7f4a:	687b      	ldr	r3, [r7, #4]
    7f4c:	681b      	ldr	r3, [r3, #0]
    7f4e:	699a      	ldr	r2, [r3, #24]
    7f50:	68fb      	ldr	r3, [r7, #12]
    7f52:	429a      	cmp	r2, r3
    7f54:	d801      	bhi.n	7f5a <dir_sdi+0xc2>
				return FR_INT_ERR;
    7f56:	2302      	movs	r3, #2
    7f58:	e02d      	b.n	7fb6 <dir_sdi+0x11e>
			idx -= ic;
    7f5a:	1cbb      	adds	r3, r7, #2
    7f5c:	1cb9      	adds	r1, r7, #2
    7f5e:	220a      	movs	r2, #10
    7f60:	18ba      	adds	r2, r7, r2
    7f62:	8809      	ldrh	r1, [r1, #0]
    7f64:	8812      	ldrh	r2, [r2, #0]
    7f66:	1a8a      	subs	r2, r1, r2
    7f68:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7f6a:	1cba      	adds	r2, r7, #2
    7f6c:	230a      	movs	r3, #10
    7f6e:	18fb      	adds	r3, r7, r3
    7f70:	8812      	ldrh	r2, [r2, #0]
    7f72:	881b      	ldrh	r3, [r3, #0]
    7f74:	429a      	cmp	r2, r3
    7f76:	d2d7      	bcs.n	7f28 <dir_sdi+0x90>
		}
		dj->clust = clst;
    7f78:	687b      	ldr	r3, [r7, #4]
    7f7a:	68fa      	ldr	r2, [r7, #12]
    7f7c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7f7e:	687b      	ldr	r3, [r7, #4]
    7f80:	681b      	ldr	r3, [r3, #0]
    7f82:	68fa      	ldr	r2, [r7, #12]
    7f84:	0011      	movs	r1, r2
    7f86:	0018      	movs	r0, r3
    7f88:	4b0e      	ldr	r3, [pc, #56]	; (7fc4 <dir_sdi+0x12c>)
    7f8a:	4798      	blx	r3
    7f8c:	0002      	movs	r2, r0
    7f8e:	1cbb      	adds	r3, r7, #2
    7f90:	881b      	ldrh	r3, [r3, #0]
    7f92:	091b      	lsrs	r3, r3, #4
    7f94:	b29b      	uxth	r3, r3
    7f96:	18d2      	adds	r2, r2, r3
    7f98:	687b      	ldr	r3, [r7, #4]
    7f9a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7f9c:	687b      	ldr	r3, [r7, #4]
    7f9e:	681b      	ldr	r3, [r3, #0]
    7fa0:	3330      	adds	r3, #48	; 0x30
    7fa2:	001a      	movs	r2, r3
    7fa4:	1cbb      	adds	r3, r7, #2
    7fa6:	881b      	ldrh	r3, [r3, #0]
    7fa8:	210f      	movs	r1, #15
    7faa:	400b      	ands	r3, r1
    7fac:	015b      	lsls	r3, r3, #5
    7fae:	18d2      	adds	r2, r2, r3
    7fb0:	687b      	ldr	r3, [r7, #4]
    7fb2:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    7fb4:	2300      	movs	r3, #0
}
    7fb6:	0018      	movs	r0, r3
    7fb8:	46bd      	mov	sp, r7
    7fba:	b004      	add	sp, #16
    7fbc:	bd80      	pop	{r7, pc}
    7fbe:	46c0      	nop			; (mov r8, r8)
    7fc0:	000078ed 	.word	0x000078ed
    7fc4:	000078b5 	.word	0x000078b5

00007fc8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    7fc8:	b590      	push	{r4, r7, lr}
    7fca:	b085      	sub	sp, #20
    7fcc:	af00      	add	r7, sp, #0
    7fce:	6078      	str	r0, [r7, #4]
    7fd0:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	88da      	ldrh	r2, [r3, #6]
    7fd6:	2308      	movs	r3, #8
    7fd8:	18fb      	adds	r3, r7, r3
    7fda:	3201      	adds	r2, #1
    7fdc:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7fde:	2308      	movs	r3, #8
    7fe0:	18fb      	adds	r3, r7, r3
    7fe2:	881b      	ldrh	r3, [r3, #0]
    7fe4:	2b00      	cmp	r3, #0
    7fe6:	d003      	beq.n	7ff0 <dir_next+0x28>
    7fe8:	687b      	ldr	r3, [r7, #4]
    7fea:	691b      	ldr	r3, [r3, #16]
    7fec:	2b00      	cmp	r3, #0
    7fee:	d101      	bne.n	7ff4 <dir_next+0x2c>
		return FR_NO_FILE;
    7ff0:	2304      	movs	r3, #4
    7ff2:	e0d2      	b.n	819a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7ff4:	2308      	movs	r3, #8
    7ff6:	18fb      	adds	r3, r7, r3
    7ff8:	881b      	ldrh	r3, [r3, #0]
    7ffa:	220f      	movs	r2, #15
    7ffc:	4013      	ands	r3, r2
    7ffe:	b29b      	uxth	r3, r3
    8000:	2b00      	cmp	r3, #0
    8002:	d000      	beq.n	8006 <dir_next+0x3e>
    8004:	e0b6      	b.n	8174 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	691b      	ldr	r3, [r3, #16]
    800a:	1c5a      	adds	r2, r3, #1
    800c:	687b      	ldr	r3, [r7, #4]
    800e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    8010:	687b      	ldr	r3, [r7, #4]
    8012:	68db      	ldr	r3, [r3, #12]
    8014:	2b00      	cmp	r3, #0
    8016:	d10a      	bne.n	802e <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    8018:	687b      	ldr	r3, [r7, #4]
    801a:	681b      	ldr	r3, [r3, #0]
    801c:	891b      	ldrh	r3, [r3, #8]
    801e:	2208      	movs	r2, #8
    8020:	18ba      	adds	r2, r7, r2
    8022:	8812      	ldrh	r2, [r2, #0]
    8024:	429a      	cmp	r2, r3
    8026:	d200      	bcs.n	802a <dir_next+0x62>
    8028:	e0a4      	b.n	8174 <dir_next+0x1ac>
				return FR_NO_FILE;
    802a:	2304      	movs	r3, #4
    802c:	e0b5      	b.n	819a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    802e:	2308      	movs	r3, #8
    8030:	18fb      	adds	r3, r7, r3
    8032:	881b      	ldrh	r3, [r3, #0]
    8034:	091b      	lsrs	r3, r3, #4
    8036:	b29b      	uxth	r3, r3
    8038:	001a      	movs	r2, r3
    803a:	687b      	ldr	r3, [r7, #4]
    803c:	681b      	ldr	r3, [r3, #0]
    803e:	789b      	ldrb	r3, [r3, #2]
    8040:	3b01      	subs	r3, #1
    8042:	4013      	ands	r3, r2
    8044:	d000      	beq.n	8048 <dir_next+0x80>
    8046:	e095      	b.n	8174 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    8048:	687b      	ldr	r3, [r7, #4]
    804a:	681a      	ldr	r2, [r3, #0]
    804c:	687b      	ldr	r3, [r7, #4]
    804e:	68db      	ldr	r3, [r3, #12]
    8050:	0019      	movs	r1, r3
    8052:	0010      	movs	r0, r2
    8054:	4b53      	ldr	r3, [pc, #332]	; (81a4 <dir_next+0x1dc>)
    8056:	4798      	blx	r3
    8058:	0003      	movs	r3, r0
    805a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    805c:	68fb      	ldr	r3, [r7, #12]
    805e:	2b01      	cmp	r3, #1
    8060:	d801      	bhi.n	8066 <dir_next+0x9e>
    8062:	2302      	movs	r3, #2
    8064:	e099      	b.n	819a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    8066:	68fb      	ldr	r3, [r7, #12]
    8068:	3301      	adds	r3, #1
    806a:	d101      	bne.n	8070 <dir_next+0xa8>
    806c:	2301      	movs	r3, #1
    806e:	e094      	b.n	819a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    8070:	687b      	ldr	r3, [r7, #4]
    8072:	681b      	ldr	r3, [r3, #0]
    8074:	699a      	ldr	r2, [r3, #24]
    8076:	68fb      	ldr	r3, [r7, #12]
    8078:	429a      	cmp	r2, r3
    807a:	d900      	bls.n	807e <dir_next+0xb6>
    807c:	e06d      	b.n	815a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    807e:	683b      	ldr	r3, [r7, #0]
    8080:	2b00      	cmp	r3, #0
    8082:	d101      	bne.n	8088 <dir_next+0xc0>
    8084:	2304      	movs	r3, #4
    8086:	e088      	b.n	819a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    8088:	687b      	ldr	r3, [r7, #4]
    808a:	681a      	ldr	r2, [r3, #0]
    808c:	687b      	ldr	r3, [r7, #4]
    808e:	68db      	ldr	r3, [r3, #12]
    8090:	0019      	movs	r1, r3
    8092:	0010      	movs	r0, r2
    8094:	4b44      	ldr	r3, [pc, #272]	; (81a8 <dir_next+0x1e0>)
    8096:	4798      	blx	r3
    8098:	0003      	movs	r3, r0
    809a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    809c:	68fb      	ldr	r3, [r7, #12]
    809e:	2b00      	cmp	r3, #0
    80a0:	d101      	bne.n	80a6 <dir_next+0xde>
    80a2:	2307      	movs	r3, #7
    80a4:	e079      	b.n	819a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    80a6:	68fb      	ldr	r3, [r7, #12]
    80a8:	2b01      	cmp	r3, #1
    80aa:	d101      	bne.n	80b0 <dir_next+0xe8>
    80ac:	2302      	movs	r3, #2
    80ae:	e074      	b.n	819a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    80b0:	68fb      	ldr	r3, [r7, #12]
    80b2:	3301      	adds	r3, #1
    80b4:	d101      	bne.n	80ba <dir_next+0xf2>
    80b6:	2301      	movs	r3, #1
    80b8:	e06f      	b.n	819a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    80ba:	687b      	ldr	r3, [r7, #4]
    80bc:	681b      	ldr	r3, [r3, #0]
    80be:	2100      	movs	r1, #0
    80c0:	0018      	movs	r0, r3
    80c2:	4b3a      	ldr	r3, [pc, #232]	; (81ac <dir_next+0x1e4>)
    80c4:	4798      	blx	r3
    80c6:	1e03      	subs	r3, r0, #0
    80c8:	d001      	beq.n	80ce <dir_next+0x106>
    80ca:	2301      	movs	r3, #1
    80cc:	e065      	b.n	819a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    80ce:	687b      	ldr	r3, [r7, #4]
    80d0:	681b      	ldr	r3, [r3, #0]
    80d2:	3330      	adds	r3, #48	; 0x30
    80d4:	0018      	movs	r0, r3
    80d6:	2380      	movs	r3, #128	; 0x80
    80d8:	009b      	lsls	r3, r3, #2
    80da:	001a      	movs	r2, r3
    80dc:	2100      	movs	r1, #0
    80de:	4b34      	ldr	r3, [pc, #208]	; (81b0 <dir_next+0x1e8>)
    80e0:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    80e2:	687b      	ldr	r3, [r7, #4]
    80e4:	681c      	ldr	r4, [r3, #0]
    80e6:	687b      	ldr	r3, [r7, #4]
    80e8:	681b      	ldr	r3, [r3, #0]
    80ea:	68fa      	ldr	r2, [r7, #12]
    80ec:	0011      	movs	r1, r2
    80ee:	0018      	movs	r0, r3
    80f0:	4b30      	ldr	r3, [pc, #192]	; (81b4 <dir_next+0x1ec>)
    80f2:	4798      	blx	r3
    80f4:	0003      	movs	r3, r0
    80f6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    80f8:	230b      	movs	r3, #11
    80fa:	18fb      	adds	r3, r7, r3
    80fc:	2200      	movs	r2, #0
    80fe:	701a      	strb	r2, [r3, #0]
    8100:	e019      	b.n	8136 <dir_next+0x16e>
						dj->fs->wflag = 1;
    8102:	687b      	ldr	r3, [r7, #4]
    8104:	681b      	ldr	r3, [r3, #0]
    8106:	2201      	movs	r2, #1
    8108:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    810a:	687b      	ldr	r3, [r7, #4]
    810c:	681b      	ldr	r3, [r3, #0]
    810e:	2100      	movs	r1, #0
    8110:	0018      	movs	r0, r3
    8112:	4b26      	ldr	r3, [pc, #152]	; (81ac <dir_next+0x1e4>)
    8114:	4798      	blx	r3
    8116:	1e03      	subs	r3, r0, #0
    8118:	d001      	beq.n	811e <dir_next+0x156>
    811a:	2301      	movs	r3, #1
    811c:	e03d      	b.n	819a <dir_next+0x1d2>
						dj->fs->winsect++;
    811e:	687b      	ldr	r3, [r7, #4]
    8120:	681b      	ldr	r3, [r3, #0]
    8122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8124:	3201      	adds	r2, #1
    8126:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    8128:	230b      	movs	r3, #11
    812a:	18fb      	adds	r3, r7, r3
    812c:	781a      	ldrb	r2, [r3, #0]
    812e:	230b      	movs	r3, #11
    8130:	18fb      	adds	r3, r7, r3
    8132:	3201      	adds	r2, #1
    8134:	701a      	strb	r2, [r3, #0]
    8136:	687b      	ldr	r3, [r7, #4]
    8138:	681b      	ldr	r3, [r3, #0]
    813a:	789b      	ldrb	r3, [r3, #2]
    813c:	220b      	movs	r2, #11
    813e:	18ba      	adds	r2, r7, r2
    8140:	7812      	ldrb	r2, [r2, #0]
    8142:	429a      	cmp	r2, r3
    8144:	d3dd      	bcc.n	8102 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    8146:	687b      	ldr	r3, [r7, #4]
    8148:	681b      	ldr	r3, [r3, #0]
    814a:	687a      	ldr	r2, [r7, #4]
    814c:	6812      	ldr	r2, [r2, #0]
    814e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    8150:	220b      	movs	r2, #11
    8152:	18ba      	adds	r2, r7, r2
    8154:	7812      	ldrb	r2, [r2, #0]
    8156:	1a8a      	subs	r2, r1, r2
    8158:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    815a:	687b      	ldr	r3, [r7, #4]
    815c:	68fa      	ldr	r2, [r7, #12]
    815e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    8160:	687b      	ldr	r3, [r7, #4]
    8162:	681b      	ldr	r3, [r3, #0]
    8164:	68fa      	ldr	r2, [r7, #12]
    8166:	0011      	movs	r1, r2
    8168:	0018      	movs	r0, r3
    816a:	4b12      	ldr	r3, [pc, #72]	; (81b4 <dir_next+0x1ec>)
    816c:	4798      	blx	r3
    816e:	0002      	movs	r2, r0
    8170:	687b      	ldr	r3, [r7, #4]
    8172:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    8174:	687b      	ldr	r3, [r7, #4]
    8176:	2208      	movs	r2, #8
    8178:	18ba      	adds	r2, r7, r2
    817a:	8812      	ldrh	r2, [r2, #0]
    817c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    817e:	687b      	ldr	r3, [r7, #4]
    8180:	681b      	ldr	r3, [r3, #0]
    8182:	3330      	adds	r3, #48	; 0x30
    8184:	001a      	movs	r2, r3
    8186:	2308      	movs	r3, #8
    8188:	18fb      	adds	r3, r7, r3
    818a:	881b      	ldrh	r3, [r3, #0]
    818c:	210f      	movs	r1, #15
    818e:	400b      	ands	r3, r1
    8190:	015b      	lsls	r3, r3, #5
    8192:	18d2      	adds	r2, r2, r3
    8194:	687b      	ldr	r3, [r7, #4]
    8196:	615a      	str	r2, [r3, #20]

	return FR_OK;
    8198:	2300      	movs	r3, #0
}
    819a:	0018      	movs	r0, r3
    819c:	46bd      	mov	sp, r7
    819e:	b005      	add	sp, #20
    81a0:	bd90      	pop	{r4, r7, pc}
    81a2:	46c0      	nop			; (mov r8, r8)
    81a4:	000078ed 	.word	0x000078ed
    81a8:	00007d5d 	.word	0x00007d5d
    81ac:	00007655 	.word	0x00007655
    81b0:	000075a9 	.word	0x000075a9
    81b4:	000078b5 	.word	0x000078b5

000081b8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    81b8:	b590      	push	{r4, r7, lr}
    81ba:	b087      	sub	sp, #28
    81bc:	af00      	add	r7, sp, #0
    81be:	6078      	str	r0, [r7, #4]
    81c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    81c2:	683b      	ldr	r3, [r7, #0]
    81c4:	781b      	ldrb	r3, [r3, #0]
    81c6:	001a      	movs	r2, r3
    81c8:	2340      	movs	r3, #64	; 0x40
    81ca:	439a      	bics	r2, r3
    81cc:	0013      	movs	r3, r2
    81ce:	1e5a      	subs	r2, r3, #1
    81d0:	0013      	movs	r3, r2
    81d2:	005b      	lsls	r3, r3, #1
    81d4:	189b      	adds	r3, r3, r2
    81d6:	009b      	lsls	r3, r3, #2
    81d8:	189b      	adds	r3, r3, r2
    81da:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    81dc:	2300      	movs	r3, #0
    81de:	613b      	str	r3, [r7, #16]
    81e0:	230e      	movs	r3, #14
    81e2:	18fb      	adds	r3, r7, r3
    81e4:	2201      	movs	r2, #1
    81e6:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    81e8:	4a31      	ldr	r2, [pc, #196]	; (82b0 <cmp_lfn+0xf8>)
    81ea:	693b      	ldr	r3, [r7, #16]
    81ec:	18d3      	adds	r3, r2, r3
    81ee:	781b      	ldrb	r3, [r3, #0]
    81f0:	3301      	adds	r3, #1
    81f2:	683a      	ldr	r2, [r7, #0]
    81f4:	18d3      	adds	r3, r2, r3
    81f6:	781b      	ldrb	r3, [r3, #0]
    81f8:	021b      	lsls	r3, r3, #8
    81fa:	b21a      	sxth	r2, r3
    81fc:	492c      	ldr	r1, [pc, #176]	; (82b0 <cmp_lfn+0xf8>)
    81fe:	693b      	ldr	r3, [r7, #16]
    8200:	18cb      	adds	r3, r1, r3
    8202:	781b      	ldrb	r3, [r3, #0]
    8204:	0019      	movs	r1, r3
    8206:	683b      	ldr	r3, [r7, #0]
    8208:	185b      	adds	r3, r3, r1
    820a:	781b      	ldrb	r3, [r3, #0]
    820c:	b21b      	sxth	r3, r3
    820e:	4313      	orrs	r3, r2
    8210:	b21a      	sxth	r2, r3
    8212:	230c      	movs	r3, #12
    8214:	18fb      	adds	r3, r7, r3
    8216:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    8218:	230e      	movs	r3, #14
    821a:	18fb      	adds	r3, r7, r3
    821c:	881b      	ldrh	r3, [r3, #0]
    821e:	2b00      	cmp	r3, #0
    8220:	d01f      	beq.n	8262 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    8222:	230e      	movs	r3, #14
    8224:	18fc      	adds	r4, r7, r3
    8226:	230c      	movs	r3, #12
    8228:	18fb      	adds	r3, r7, r3
    822a:	881b      	ldrh	r3, [r3, #0]
    822c:	0018      	movs	r0, r3
    822e:	4b21      	ldr	r3, [pc, #132]	; (82b4 <cmp_lfn+0xfc>)
    8230:	4798      	blx	r3
    8232:	0003      	movs	r3, r0
    8234:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    8236:	697b      	ldr	r3, [r7, #20]
    8238:	2bfe      	cmp	r3, #254	; 0xfe
    823a:	d810      	bhi.n	825e <cmp_lfn+0xa6>
    823c:	697b      	ldr	r3, [r7, #20]
    823e:	1c5a      	adds	r2, r3, #1
    8240:	617a      	str	r2, [r7, #20]
    8242:	005b      	lsls	r3, r3, #1
    8244:	687a      	ldr	r2, [r7, #4]
    8246:	18d3      	adds	r3, r2, r3
    8248:	881b      	ldrh	r3, [r3, #0]
    824a:	0018      	movs	r0, r3
    824c:	4b19      	ldr	r3, [pc, #100]	; (82b4 <cmp_lfn+0xfc>)
    824e:	4798      	blx	r3
    8250:	0003      	movs	r3, r0
    8252:	001a      	movs	r2, r3
    8254:	230e      	movs	r3, #14
    8256:	18fb      	adds	r3, r7, r3
    8258:	881b      	ldrh	r3, [r3, #0]
    825a:	4293      	cmp	r3, r2
    825c:	d009      	beq.n	8272 <cmp_lfn+0xba>
				return 0;				/* Not matched */
    825e:	2300      	movs	r3, #0
    8260:	e022      	b.n	82a8 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    8262:	230c      	movs	r3, #12
    8264:	18fb      	adds	r3, r7, r3
    8266:	881b      	ldrh	r3, [r3, #0]
    8268:	4a13      	ldr	r2, [pc, #76]	; (82b8 <cmp_lfn+0x100>)
    826a:	4293      	cmp	r3, r2
    826c:	d001      	beq.n	8272 <cmp_lfn+0xba>
    826e:	2300      	movs	r3, #0
    8270:	e01a      	b.n	82a8 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    8272:	693b      	ldr	r3, [r7, #16]
    8274:	3301      	adds	r3, #1
    8276:	613b      	str	r3, [r7, #16]
    8278:	693b      	ldr	r3, [r7, #16]
    827a:	2b0c      	cmp	r3, #12
    827c:	d9b4      	bls.n	81e8 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    827e:	683b      	ldr	r3, [r7, #0]
    8280:	781b      	ldrb	r3, [r3, #0]
    8282:	001a      	movs	r2, r3
    8284:	2340      	movs	r3, #64	; 0x40
    8286:	4013      	ands	r3, r2
    8288:	d00d      	beq.n	82a6 <cmp_lfn+0xee>
    828a:	230e      	movs	r3, #14
    828c:	18fb      	adds	r3, r7, r3
    828e:	881b      	ldrh	r3, [r3, #0]
    8290:	2b00      	cmp	r3, #0
    8292:	d008      	beq.n	82a6 <cmp_lfn+0xee>
    8294:	697b      	ldr	r3, [r7, #20]
    8296:	005b      	lsls	r3, r3, #1
    8298:	687a      	ldr	r2, [r7, #4]
    829a:	18d3      	adds	r3, r2, r3
    829c:	881b      	ldrh	r3, [r3, #0]
    829e:	2b00      	cmp	r3, #0
    82a0:	d001      	beq.n	82a6 <cmp_lfn+0xee>
		return 0;
    82a2:	2300      	movs	r3, #0
    82a4:	e000      	b.n	82a8 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    82a6:	2301      	movs	r3, #1
}
    82a8:	0018      	movs	r0, r3
    82aa:	46bd      	mov	sp, r7
    82ac:	b007      	add	sp, #28
    82ae:	bd90      	pop	{r4, r7, pc}
    82b0:	0000ca04 	.word	0x0000ca04
    82b4:	0000ab75 	.word	0x0000ab75
    82b8:	0000ffff 	.word	0x0000ffff

000082bc <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE *dir			/* Pointer to the directory entry */
)
{
    82bc:	b580      	push	{r7, lr}
    82be:	b086      	sub	sp, #24
    82c0:	af00      	add	r7, sp, #0
    82c2:	6078      	str	r0, [r7, #4]
    82c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    82c6:	683b      	ldr	r3, [r7, #0]
    82c8:	781b      	ldrb	r3, [r3, #0]
    82ca:	001a      	movs	r2, r3
    82cc:	233f      	movs	r3, #63	; 0x3f
    82ce:	4013      	ands	r3, r2
    82d0:	1e5a      	subs	r2, r3, #1
    82d2:	0013      	movs	r3, r2
    82d4:	005b      	lsls	r3, r3, #1
    82d6:	189b      	adds	r3, r3, r2
    82d8:	009b      	lsls	r3, r3, #2
    82da:	189b      	adds	r3, r3, r2
    82dc:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
    82de:	2300      	movs	r3, #0
    82e0:	613b      	str	r3, [r7, #16]
    82e2:	230e      	movs	r3, #14
    82e4:	18fb      	adds	r3, r7, r3
    82e6:	2201      	movs	r2, #1
    82e8:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    82ea:	4a2b      	ldr	r2, [pc, #172]	; (8398 <pick_lfn+0xdc>)
    82ec:	693b      	ldr	r3, [r7, #16]
    82ee:	18d3      	adds	r3, r2, r3
    82f0:	781b      	ldrb	r3, [r3, #0]
    82f2:	3301      	adds	r3, #1
    82f4:	683a      	ldr	r2, [r7, #0]
    82f6:	18d3      	adds	r3, r2, r3
    82f8:	781b      	ldrb	r3, [r3, #0]
    82fa:	021b      	lsls	r3, r3, #8
    82fc:	b21a      	sxth	r2, r3
    82fe:	4926      	ldr	r1, [pc, #152]	; (8398 <pick_lfn+0xdc>)
    8300:	693b      	ldr	r3, [r7, #16]
    8302:	18cb      	adds	r3, r1, r3
    8304:	781b      	ldrb	r3, [r3, #0]
    8306:	0019      	movs	r1, r3
    8308:	683b      	ldr	r3, [r7, #0]
    830a:	185b      	adds	r3, r3, r1
    830c:	781b      	ldrb	r3, [r3, #0]
    830e:	b21b      	sxth	r3, r3
    8310:	4313      	orrs	r3, r2
    8312:	b21a      	sxth	r2, r3
    8314:	230c      	movs	r3, #12
    8316:	18fb      	adds	r3, r7, r3
    8318:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    831a:	230e      	movs	r3, #14
    831c:	18fb      	adds	r3, r7, r3
    831e:	881b      	ldrh	r3, [r3, #0]
    8320:	2b00      	cmp	r3, #0
    8322:	d015      	beq.n	8350 <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    8324:	697b      	ldr	r3, [r7, #20]
    8326:	2bfe      	cmp	r3, #254	; 0xfe
    8328:	d901      	bls.n	832e <pick_lfn+0x72>
    832a:	2300      	movs	r3, #0
    832c:	e030      	b.n	8390 <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
    832e:	697b      	ldr	r3, [r7, #20]
    8330:	1c5a      	adds	r2, r3, #1
    8332:	617a      	str	r2, [r7, #20]
    8334:	005b      	lsls	r3, r3, #1
    8336:	687a      	ldr	r2, [r7, #4]
    8338:	18d3      	adds	r3, r2, r3
    833a:	220e      	movs	r2, #14
    833c:	18ba      	adds	r2, r7, r2
    833e:	210c      	movs	r1, #12
    8340:	1879      	adds	r1, r7, r1
    8342:	8809      	ldrh	r1, [r1, #0]
    8344:	8011      	strh	r1, [r2, #0]
    8346:	220e      	movs	r2, #14
    8348:	18ba      	adds	r2, r7, r2
    834a:	8812      	ldrh	r2, [r2, #0]
    834c:	801a      	strh	r2, [r3, #0]
    834e:	e007      	b.n	8360 <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    8350:	230c      	movs	r3, #12
    8352:	18fb      	adds	r3, r7, r3
    8354:	881b      	ldrh	r3, [r3, #0]
    8356:	4a11      	ldr	r2, [pc, #68]	; (839c <pick_lfn+0xe0>)
    8358:	4293      	cmp	r3, r2
    835a:	d001      	beq.n	8360 <pick_lfn+0xa4>
    835c:	2300      	movs	r3, #0
    835e:	e017      	b.n	8390 <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
    8360:	693b      	ldr	r3, [r7, #16]
    8362:	3301      	adds	r3, #1
    8364:	613b      	str	r3, [r7, #16]
    8366:	693b      	ldr	r3, [r7, #16]
    8368:	2b0c      	cmp	r3, #12
    836a:	d9be      	bls.n	82ea <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    836c:	683b      	ldr	r3, [r7, #0]
    836e:	781b      	ldrb	r3, [r3, #0]
    8370:	001a      	movs	r2, r3
    8372:	2340      	movs	r3, #64	; 0x40
    8374:	4013      	ands	r3, r2
    8376:	d00a      	beq.n	838e <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    8378:	697b      	ldr	r3, [r7, #20]
    837a:	2bfe      	cmp	r3, #254	; 0xfe
    837c:	d901      	bls.n	8382 <pick_lfn+0xc6>
    837e:	2300      	movs	r3, #0
    8380:	e006      	b.n	8390 <pick_lfn+0xd4>
		lfnbuf[i] = 0;
    8382:	697b      	ldr	r3, [r7, #20]
    8384:	005b      	lsls	r3, r3, #1
    8386:	687a      	ldr	r2, [r7, #4]
    8388:	18d3      	adds	r3, r2, r3
    838a:	2200      	movs	r2, #0
    838c:	801a      	strh	r2, [r3, #0]
	}

	return 1;
    838e:	2301      	movs	r3, #1
}
    8390:	0018      	movs	r0, r3
    8392:	46bd      	mov	sp, r7
    8394:	b006      	add	sp, #24
    8396:	bd80      	pop	{r7, pc}
    8398:	0000ca04 	.word	0x0000ca04
    839c:	0000ffff 	.word	0x0000ffff

000083a0 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    83a0:	b580      	push	{r7, lr}
    83a2:	b088      	sub	sp, #32
    83a4:	af00      	add	r7, sp, #0
    83a6:	60f8      	str	r0, [r7, #12]
    83a8:	60b9      	str	r1, [r7, #8]
    83aa:	0019      	movs	r1, r3
    83ac:	1dfb      	adds	r3, r7, #7
    83ae:	701a      	strb	r2, [r3, #0]
    83b0:	1dbb      	adds	r3, r7, #6
    83b2:	1c0a      	adds	r2, r1, #0
    83b4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    83b6:	68bb      	ldr	r3, [r7, #8]
    83b8:	330d      	adds	r3, #13
    83ba:	1dba      	adds	r2, r7, #6
    83bc:	7812      	ldrb	r2, [r2, #0]
    83be:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    83c0:	68bb      	ldr	r3, [r7, #8]
    83c2:	330b      	adds	r3, #11
    83c4:	220f      	movs	r2, #15
    83c6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    83c8:	68bb      	ldr	r3, [r7, #8]
    83ca:	330c      	adds	r3, #12
    83cc:	2200      	movs	r2, #0
    83ce:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    83d0:	68bb      	ldr	r3, [r7, #8]
    83d2:	331a      	adds	r3, #26
    83d4:	2200      	movs	r2, #0
    83d6:	701a      	strb	r2, [r3, #0]
    83d8:	68bb      	ldr	r3, [r7, #8]
    83da:	331b      	adds	r3, #27
    83dc:	2200      	movs	r2, #0
    83de:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    83e0:	1dfb      	adds	r3, r7, #7
    83e2:	781b      	ldrb	r3, [r3, #0]
    83e4:	1e5a      	subs	r2, r3, #1
    83e6:	0013      	movs	r3, r2
    83e8:	005b      	lsls	r3, r3, #1
    83ea:	189b      	adds	r3, r3, r2
    83ec:	009b      	lsls	r3, r3, #2
    83ee:	189b      	adds	r3, r3, r2
    83f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    83f2:	2316      	movs	r3, #22
    83f4:	18fb      	adds	r3, r7, r3
    83f6:	2200      	movs	r2, #0
    83f8:	801a      	strh	r2, [r3, #0]
    83fa:	2300      	movs	r3, #0
    83fc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    83fe:	2316      	movs	r3, #22
    8400:	18fb      	adds	r3, r7, r3
    8402:	881b      	ldrh	r3, [r3, #0]
    8404:	4a28      	ldr	r2, [pc, #160]	; (84a8 <fit_lfn+0x108>)
    8406:	4293      	cmp	r3, r2
    8408:	d009      	beq.n	841e <fit_lfn+0x7e>
    840a:	69fb      	ldr	r3, [r7, #28]
    840c:	1c5a      	adds	r2, r3, #1
    840e:	61fa      	str	r2, [r7, #28]
    8410:	005b      	lsls	r3, r3, #1
    8412:	68fa      	ldr	r2, [r7, #12]
    8414:	18d2      	adds	r2, r2, r3
    8416:	2316      	movs	r3, #22
    8418:	18fb      	adds	r3, r7, r3
    841a:	8812      	ldrh	r2, [r2, #0]
    841c:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    841e:	4a23      	ldr	r2, [pc, #140]	; (84ac <fit_lfn+0x10c>)
    8420:	69bb      	ldr	r3, [r7, #24]
    8422:	18d3      	adds	r3, r2, r3
    8424:	781b      	ldrb	r3, [r3, #0]
    8426:	001a      	movs	r2, r3
    8428:	68bb      	ldr	r3, [r7, #8]
    842a:	189b      	adds	r3, r3, r2
    842c:	2216      	movs	r2, #22
    842e:	18ba      	adds	r2, r7, r2
    8430:	8812      	ldrh	r2, [r2, #0]
    8432:	b2d2      	uxtb	r2, r2
    8434:	701a      	strb	r2, [r3, #0]
    8436:	4a1d      	ldr	r2, [pc, #116]	; (84ac <fit_lfn+0x10c>)
    8438:	69bb      	ldr	r3, [r7, #24]
    843a:	18d3      	adds	r3, r2, r3
    843c:	781b      	ldrb	r3, [r3, #0]
    843e:	3301      	adds	r3, #1
    8440:	68ba      	ldr	r2, [r7, #8]
    8442:	18d3      	adds	r3, r2, r3
    8444:	2216      	movs	r2, #22
    8446:	18ba      	adds	r2, r7, r2
    8448:	8812      	ldrh	r2, [r2, #0]
    844a:	0a12      	lsrs	r2, r2, #8
    844c:	b292      	uxth	r2, r2
    844e:	b2d2      	uxtb	r2, r2
    8450:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    8452:	2316      	movs	r3, #22
    8454:	18fb      	adds	r3, r7, r3
    8456:	881b      	ldrh	r3, [r3, #0]
    8458:	2b00      	cmp	r3, #0
    845a:	d104      	bne.n	8466 <fit_lfn+0xc6>
    845c:	2316      	movs	r3, #22
    845e:	18fb      	adds	r3, r7, r3
    8460:	2201      	movs	r2, #1
    8462:	4252      	negs	r2, r2
    8464:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    8466:	69bb      	ldr	r3, [r7, #24]
    8468:	3301      	adds	r3, #1
    846a:	61bb      	str	r3, [r7, #24]
    846c:	69bb      	ldr	r3, [r7, #24]
    846e:	2b0c      	cmp	r3, #12
    8470:	d9c5      	bls.n	83fe <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    8472:	2316      	movs	r3, #22
    8474:	18fb      	adds	r3, r7, r3
    8476:	881b      	ldrh	r3, [r3, #0]
    8478:	4a0b      	ldr	r2, [pc, #44]	; (84a8 <fit_lfn+0x108>)
    847a:	4293      	cmp	r3, r2
    847c:	d006      	beq.n	848c <fit_lfn+0xec>
    847e:	69fb      	ldr	r3, [r7, #28]
    8480:	005b      	lsls	r3, r3, #1
    8482:	68fa      	ldr	r2, [r7, #12]
    8484:	18d3      	adds	r3, r2, r3
    8486:	881b      	ldrh	r3, [r3, #0]
    8488:	2b00      	cmp	r3, #0
    848a:	d105      	bne.n	8498 <fit_lfn+0xf8>
    848c:	1dfb      	adds	r3, r7, #7
    848e:	1dfa      	adds	r2, r7, #7
    8490:	7812      	ldrb	r2, [r2, #0]
    8492:	2140      	movs	r1, #64	; 0x40
    8494:	430a      	orrs	r2, r1
    8496:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    8498:	68bb      	ldr	r3, [r7, #8]
    849a:	1dfa      	adds	r2, r7, #7
    849c:	7812      	ldrb	r2, [r2, #0]
    849e:	701a      	strb	r2, [r3, #0]
}
    84a0:	46c0      	nop			; (mov r8, r8)
    84a2:	46bd      	mov	sp, r7
    84a4:	b008      	add	sp, #32
    84a6:	bd80      	pop	{r7, pc}
    84a8:	0000ffff 	.word	0x0000ffff
    84ac:	0000ca04 	.word	0x0000ca04

000084b0 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    84b0:	b580      	push	{r7, lr}
    84b2:	b08a      	sub	sp, #40	; 0x28
    84b4:	af00      	add	r7, sp, #0
    84b6:	60f8      	str	r0, [r7, #12]
    84b8:	60b9      	str	r1, [r7, #8]
    84ba:	607a      	str	r2, [r7, #4]
    84bc:	001a      	movs	r2, r3
    84be:	1cbb      	adds	r3, r7, #2
    84c0:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    84c2:	68b9      	ldr	r1, [r7, #8]
    84c4:	68fb      	ldr	r3, [r7, #12]
    84c6:	220b      	movs	r2, #11
    84c8:	0018      	movs	r0, r3
    84ca:	4b38      	ldr	r3, [pc, #224]	; (85ac <gen_numname+0xfc>)
    84cc:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    84ce:	1cbb      	adds	r3, r7, #2
    84d0:	881b      	ldrh	r3, [r3, #0]
    84d2:	2b05      	cmp	r3, #5
    84d4:	d911      	bls.n	84fa <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    84d6:	1cbb      	adds	r3, r7, #2
    84d8:	881b      	ldrh	r3, [r3, #0]
    84da:	b29a      	uxth	r2, r3
    84dc:	0852      	lsrs	r2, r2, #1
    84de:	03db      	lsls	r3, r3, #15
    84e0:	4313      	orrs	r3, r2
    84e2:	b299      	uxth	r1, r3
    84e4:	687b      	ldr	r3, [r7, #4]
    84e6:	1c9a      	adds	r2, r3, #2
    84e8:	607a      	str	r2, [r7, #4]
    84ea:	881a      	ldrh	r2, [r3, #0]
    84ec:	1cbb      	adds	r3, r7, #2
    84ee:	188a      	adds	r2, r1, r2
    84f0:	801a      	strh	r2, [r3, #0]
    84f2:	687b      	ldr	r3, [r7, #4]
    84f4:	881b      	ldrh	r3, [r3, #0]
    84f6:	2b00      	cmp	r3, #0
    84f8:	d1ed      	bne.n	84d6 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    84fa:	2307      	movs	r3, #7
    84fc:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    84fe:	1cbb      	adds	r3, r7, #2
    8500:	881b      	ldrh	r3, [r3, #0]
    8502:	b2db      	uxtb	r3, r3
    8504:	220f      	movs	r2, #15
    8506:	4013      	ands	r3, r2
    8508:	b2da      	uxtb	r2, r3
    850a:	2327      	movs	r3, #39	; 0x27
    850c:	18fb      	adds	r3, r7, r3
    850e:	3230      	adds	r2, #48	; 0x30
    8510:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    8512:	2327      	movs	r3, #39	; 0x27
    8514:	18fb      	adds	r3, r7, r3
    8516:	781b      	ldrb	r3, [r3, #0]
    8518:	2b39      	cmp	r3, #57	; 0x39
    851a:	d906      	bls.n	852a <gen_numname+0x7a>
    851c:	2327      	movs	r3, #39	; 0x27
    851e:	18fb      	adds	r3, r7, r3
    8520:	2227      	movs	r2, #39	; 0x27
    8522:	18ba      	adds	r2, r7, r2
    8524:	7812      	ldrb	r2, [r2, #0]
    8526:	3207      	adds	r2, #7
    8528:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    852a:	6a3b      	ldr	r3, [r7, #32]
    852c:	1e5a      	subs	r2, r3, #1
    852e:	623a      	str	r2, [r7, #32]
    8530:	2214      	movs	r2, #20
    8532:	18ba      	adds	r2, r7, r2
    8534:	2127      	movs	r1, #39	; 0x27
    8536:	1879      	adds	r1, r7, r1
    8538:	7809      	ldrb	r1, [r1, #0]
    853a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    853c:	1cbb      	adds	r3, r7, #2
    853e:	1cba      	adds	r2, r7, #2
    8540:	8812      	ldrh	r2, [r2, #0]
    8542:	0912      	lsrs	r2, r2, #4
    8544:	801a      	strh	r2, [r3, #0]
	} while (seq);
    8546:	1cbb      	adds	r3, r7, #2
    8548:	881b      	ldrh	r3, [r3, #0]
    854a:	2b00      	cmp	r3, #0
    854c:	d1d7      	bne.n	84fe <gen_numname+0x4e>
	ns[i] = '~';
    854e:	2314      	movs	r3, #20
    8550:	18fa      	adds	r2, r7, r3
    8552:	6a3b      	ldr	r3, [r7, #32]
    8554:	18d3      	adds	r3, r2, r3
    8556:	227e      	movs	r2, #126	; 0x7e
    8558:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    855a:	2300      	movs	r3, #0
    855c:	61fb      	str	r3, [r7, #28]
    855e:	e002      	b.n	8566 <gen_numname+0xb6>
    8560:	69fb      	ldr	r3, [r7, #28]
    8562:	3301      	adds	r3, #1
    8564:	61fb      	str	r3, [r7, #28]
    8566:	69fa      	ldr	r2, [r7, #28]
    8568:	6a3b      	ldr	r3, [r7, #32]
    856a:	429a      	cmp	r2, r3
    856c:	d205      	bcs.n	857a <gen_numname+0xca>
    856e:	68fa      	ldr	r2, [r7, #12]
    8570:	69fb      	ldr	r3, [r7, #28]
    8572:	18d3      	adds	r3, r2, r3
    8574:	781b      	ldrb	r3, [r3, #0]
    8576:	2b20      	cmp	r3, #32
    8578:	d1f2      	bne.n	8560 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    857a:	69fb      	ldr	r3, [r7, #28]
    857c:	1c5a      	adds	r2, r3, #1
    857e:	61fa      	str	r2, [r7, #28]
    8580:	68fa      	ldr	r2, [r7, #12]
    8582:	18d2      	adds	r2, r2, r3
    8584:	6a3b      	ldr	r3, [r7, #32]
    8586:	2b07      	cmp	r3, #7
    8588:	d806      	bhi.n	8598 <gen_numname+0xe8>
    858a:	6a3b      	ldr	r3, [r7, #32]
    858c:	1c59      	adds	r1, r3, #1
    858e:	6239      	str	r1, [r7, #32]
    8590:	2114      	movs	r1, #20
    8592:	1879      	adds	r1, r7, r1
    8594:	5ccb      	ldrb	r3, [r1, r3]
    8596:	e000      	b.n	859a <gen_numname+0xea>
    8598:	2320      	movs	r3, #32
    859a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    859c:	69fb      	ldr	r3, [r7, #28]
    859e:	2b07      	cmp	r3, #7
    85a0:	d9eb      	bls.n	857a <gen_numname+0xca>
}
    85a2:	46c0      	nop			; (mov r8, r8)
    85a4:	46bd      	mov	sp, r7
    85a6:	b00a      	add	sp, #40	; 0x28
    85a8:	bd80      	pop	{r7, pc}
    85aa:	46c0      	nop			; (mov r8, r8)
    85ac:	00007571 	.word	0x00007571

000085b0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    85b0:	b580      	push	{r7, lr}
    85b2:	b084      	sub	sp, #16
    85b4:	af00      	add	r7, sp, #0
    85b6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    85b8:	230f      	movs	r3, #15
    85ba:	18fb      	adds	r3, r7, r3
    85bc:	2200      	movs	r2, #0
    85be:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    85c0:	230b      	movs	r3, #11
    85c2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    85c4:	230f      	movs	r3, #15
    85c6:	18fb      	adds	r3, r7, r3
    85c8:	781b      	ldrb	r3, [r3, #0]
    85ca:	b2da      	uxtb	r2, r3
    85cc:	0852      	lsrs	r2, r2, #1
    85ce:	01db      	lsls	r3, r3, #7
    85d0:	4313      	orrs	r3, r2
    85d2:	b2d9      	uxtb	r1, r3
    85d4:	687b      	ldr	r3, [r7, #4]
    85d6:	1c5a      	adds	r2, r3, #1
    85d8:	607a      	str	r2, [r7, #4]
    85da:	781a      	ldrb	r2, [r3, #0]
    85dc:	230f      	movs	r3, #15
    85de:	18fb      	adds	r3, r7, r3
    85e0:	188a      	adds	r2, r1, r2
    85e2:	701a      	strb	r2, [r3, #0]
    85e4:	68bb      	ldr	r3, [r7, #8]
    85e6:	3b01      	subs	r3, #1
    85e8:	60bb      	str	r3, [r7, #8]
    85ea:	68bb      	ldr	r3, [r7, #8]
    85ec:	2b00      	cmp	r3, #0
    85ee:	d1e9      	bne.n	85c4 <sum_sfn+0x14>
	return sum;
    85f0:	230f      	movs	r3, #15
    85f2:	18fb      	adds	r3, r7, r3
    85f4:	781b      	ldrb	r3, [r3, #0]
}
    85f6:	0018      	movs	r0, r3
    85f8:	46bd      	mov	sp, r7
    85fa:	b004      	add	sp, #16
    85fc:	bd80      	pop	{r7, pc}
	...

00008600 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    8600:	b590      	push	{r4, r7, lr}
    8602:	b087      	sub	sp, #28
    8604:	af00      	add	r7, sp, #0
    8606:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    8608:	2317      	movs	r3, #23
    860a:	18fc      	adds	r4, r7, r3
    860c:	687b      	ldr	r3, [r7, #4]
    860e:	2100      	movs	r1, #0
    8610:	0018      	movs	r0, r3
    8612:	4b74      	ldr	r3, [pc, #464]	; (87e4 <dir_find+0x1e4>)
    8614:	4798      	blx	r3
    8616:	0003      	movs	r3, r0
    8618:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    861a:	2317      	movs	r3, #23
    861c:	18fb      	adds	r3, r7, r3
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	2b00      	cmp	r3, #0
    8622:	d003      	beq.n	862c <dir_find+0x2c>
    8624:	2317      	movs	r3, #23
    8626:	18fb      	adds	r3, r7, r3
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	e0d6      	b.n	87da <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    862c:	2314      	movs	r3, #20
    862e:	18fb      	adds	r3, r7, r3
    8630:	22ff      	movs	r2, #255	; 0xff
    8632:	701a      	strb	r2, [r3, #0]
    8634:	2315      	movs	r3, #21
    8636:	18fb      	adds	r3, r7, r3
    8638:	2214      	movs	r2, #20
    863a:	18ba      	adds	r2, r7, r2
    863c:	7812      	ldrb	r2, [r2, #0]
    863e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    8640:	687b      	ldr	r3, [r7, #4]
    8642:	681a      	ldr	r2, [r3, #0]
    8644:	687b      	ldr	r3, [r7, #4]
    8646:	691b      	ldr	r3, [r3, #16]
    8648:	2117      	movs	r1, #23
    864a:	187c      	adds	r4, r7, r1
    864c:	0019      	movs	r1, r3
    864e:	0010      	movs	r0, r2
    8650:	4b65      	ldr	r3, [pc, #404]	; (87e8 <dir_find+0x1e8>)
    8652:	4798      	blx	r3
    8654:	0003      	movs	r3, r0
    8656:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8658:	2317      	movs	r3, #23
    865a:	18fb      	adds	r3, r7, r3
    865c:	781b      	ldrb	r3, [r3, #0]
    865e:	2b00      	cmp	r3, #0
    8660:	d000      	beq.n	8664 <dir_find+0x64>
    8662:	e0b2      	b.n	87ca <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8664:	687b      	ldr	r3, [r7, #4]
    8666:	695b      	ldr	r3, [r3, #20]
    8668:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    866a:	2316      	movs	r3, #22
    866c:	18fb      	adds	r3, r7, r3
    866e:	693a      	ldr	r2, [r7, #16]
    8670:	7812      	ldrb	r2, [r2, #0]
    8672:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8674:	2316      	movs	r3, #22
    8676:	18fb      	adds	r3, r7, r3
    8678:	781b      	ldrb	r3, [r3, #0]
    867a:	2b00      	cmp	r3, #0
    867c:	d104      	bne.n	8688 <dir_find+0x88>
    867e:	2317      	movs	r3, #23
    8680:	18fb      	adds	r3, r7, r3
    8682:	2204      	movs	r2, #4
    8684:	701a      	strb	r2, [r3, #0]
    8686:	e0a5      	b.n	87d4 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    8688:	693b      	ldr	r3, [r7, #16]
    868a:	330b      	adds	r3, #11
    868c:	781a      	ldrb	r2, [r3, #0]
    868e:	230f      	movs	r3, #15
    8690:	18fb      	adds	r3, r7, r3
    8692:	213f      	movs	r1, #63	; 0x3f
    8694:	400a      	ands	r2, r1
    8696:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    8698:	2316      	movs	r3, #22
    869a:	18fb      	adds	r3, r7, r3
    869c:	781b      	ldrb	r3, [r3, #0]
    869e:	2be5      	cmp	r3, #229	; 0xe5
    86a0:	d00a      	beq.n	86b8 <dir_find+0xb8>
    86a2:	230f      	movs	r3, #15
    86a4:	18fb      	adds	r3, r7, r3
    86a6:	781b      	ldrb	r3, [r3, #0]
    86a8:	2208      	movs	r2, #8
    86aa:	4013      	ands	r3, r2
    86ac:	d009      	beq.n	86c2 <dir_find+0xc2>
    86ae:	230f      	movs	r3, #15
    86b0:	18fb      	adds	r3, r7, r3
    86b2:	781b      	ldrb	r3, [r3, #0]
    86b4:	2b0f      	cmp	r3, #15
    86b6:	d004      	beq.n	86c2 <dir_find+0xc2>
			ord = 0xFF;
    86b8:	2315      	movs	r3, #21
    86ba:	18fb      	adds	r3, r7, r3
    86bc:	22ff      	movs	r2, #255	; 0xff
    86be:	701a      	strb	r2, [r3, #0]
    86c0:	e073      	b.n	87aa <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    86c2:	230f      	movs	r3, #15
    86c4:	18fb      	adds	r3, r7, r3
    86c6:	781b      	ldrb	r3, [r3, #0]
    86c8:	2b0f      	cmp	r3, #15
    86ca:	d145      	bne.n	8758 <dir_find+0x158>
				if (dj->lfn) {
    86cc:	687b      	ldr	r3, [r7, #4]
    86ce:	69db      	ldr	r3, [r3, #28]
    86d0:	2b00      	cmp	r3, #0
    86d2:	d100      	bne.n	86d6 <dir_find+0xd6>
    86d4:	e069      	b.n	87aa <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    86d6:	2316      	movs	r3, #22
    86d8:	18fb      	adds	r3, r7, r3
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	2240      	movs	r2, #64	; 0x40
    86de:	4013      	ands	r3, r2
    86e0:	d016      	beq.n	8710 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    86e2:	2314      	movs	r3, #20
    86e4:	18fb      	adds	r3, r7, r3
    86e6:	693a      	ldr	r2, [r7, #16]
    86e8:	7b52      	ldrb	r2, [r2, #13]
    86ea:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    86ec:	2316      	movs	r3, #22
    86ee:	18fb      	adds	r3, r7, r3
    86f0:	2216      	movs	r2, #22
    86f2:	18ba      	adds	r2, r7, r2
    86f4:	7812      	ldrb	r2, [r2, #0]
    86f6:	2140      	movs	r1, #64	; 0x40
    86f8:	438a      	bics	r2, r1
    86fa:	701a      	strb	r2, [r3, #0]
    86fc:	2315      	movs	r3, #21
    86fe:	18fb      	adds	r3, r7, r3
    8700:	2216      	movs	r2, #22
    8702:	18ba      	adds	r2, r7, r2
    8704:	7812      	ldrb	r2, [r2, #0]
    8706:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    8708:	687b      	ldr	r3, [r7, #4]
    870a:	88da      	ldrh	r2, [r3, #6]
    870c:	687b      	ldr	r3, [r7, #4]
    870e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    8710:	2316      	movs	r3, #22
    8712:	18fa      	adds	r2, r7, r3
    8714:	2315      	movs	r3, #21
    8716:	18fb      	adds	r3, r7, r3
    8718:	7812      	ldrb	r2, [r2, #0]
    871a:	781b      	ldrb	r3, [r3, #0]
    871c:	429a      	cmp	r2, r3
    871e:	d116      	bne.n	874e <dir_find+0x14e>
    8720:	693b      	ldr	r3, [r7, #16]
    8722:	330d      	adds	r3, #13
    8724:	781b      	ldrb	r3, [r3, #0]
    8726:	2214      	movs	r2, #20
    8728:	18ba      	adds	r2, r7, r2
    872a:	7812      	ldrb	r2, [r2, #0]
    872c:	429a      	cmp	r2, r3
    872e:	d10e      	bne.n	874e <dir_find+0x14e>
    8730:	687b      	ldr	r3, [r7, #4]
    8732:	69db      	ldr	r3, [r3, #28]
    8734:	693a      	ldr	r2, [r7, #16]
    8736:	0011      	movs	r1, r2
    8738:	0018      	movs	r0, r3
    873a:	4b2c      	ldr	r3, [pc, #176]	; (87ec <dir_find+0x1ec>)
    873c:	4798      	blx	r3
    873e:	1e03      	subs	r3, r0, #0
    8740:	d005      	beq.n	874e <dir_find+0x14e>
    8742:	2315      	movs	r3, #21
    8744:	18fb      	adds	r3, r7, r3
    8746:	781b      	ldrb	r3, [r3, #0]
    8748:	3b01      	subs	r3, #1
    874a:	b2da      	uxtb	r2, r3
    874c:	e000      	b.n	8750 <dir_find+0x150>
    874e:	22ff      	movs	r2, #255	; 0xff
    8750:	2315      	movs	r3, #21
    8752:	18fb      	adds	r3, r7, r3
    8754:	701a      	strb	r2, [r3, #0]
    8756:	e028      	b.n	87aa <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    8758:	2315      	movs	r3, #21
    875a:	18fb      	adds	r3, r7, r3
    875c:	781b      	ldrb	r3, [r3, #0]
    875e:	2b00      	cmp	r3, #0
    8760:	d10a      	bne.n	8778 <dir_find+0x178>
    8762:	693b      	ldr	r3, [r7, #16]
    8764:	0018      	movs	r0, r3
    8766:	4b22      	ldr	r3, [pc, #136]	; (87f0 <dir_find+0x1f0>)
    8768:	4798      	blx	r3
    876a:	0003      	movs	r3, r0
    876c:	001a      	movs	r2, r3
    876e:	2314      	movs	r3, #20
    8770:	18fb      	adds	r3, r7, r3
    8772:	781b      	ldrb	r3, [r3, #0]
    8774:	4293      	cmp	r3, r2
    8776:	d02a      	beq.n	87ce <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    8778:	2315      	movs	r3, #21
    877a:	18fb      	adds	r3, r7, r3
    877c:	22ff      	movs	r2, #255	; 0xff
    877e:	701a      	strb	r2, [r3, #0]
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	2201      	movs	r2, #1
    8784:	4252      	negs	r2, r2
    8786:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8788:	687b      	ldr	r3, [r7, #4]
    878a:	699b      	ldr	r3, [r3, #24]
    878c:	330b      	adds	r3, #11
    878e:	781b      	ldrb	r3, [r3, #0]
    8790:	001a      	movs	r2, r3
    8792:	2301      	movs	r3, #1
    8794:	4013      	ands	r3, r2
    8796:	d108      	bne.n	87aa <dir_find+0x1aa>
    8798:	687b      	ldr	r3, [r7, #4]
    879a:	6999      	ldr	r1, [r3, #24]
    879c:	693b      	ldr	r3, [r7, #16]
    879e:	220b      	movs	r2, #11
    87a0:	0018      	movs	r0, r3
    87a2:	4b14      	ldr	r3, [pc, #80]	; (87f4 <dir_find+0x1f4>)
    87a4:	4798      	blx	r3
    87a6:	1e03      	subs	r3, r0, #0
    87a8:	d013      	beq.n	87d2 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    87aa:	2317      	movs	r3, #23
    87ac:	18fc      	adds	r4, r7, r3
    87ae:	687b      	ldr	r3, [r7, #4]
    87b0:	2100      	movs	r1, #0
    87b2:	0018      	movs	r0, r3
    87b4:	4b10      	ldr	r3, [pc, #64]	; (87f8 <dir_find+0x1f8>)
    87b6:	4798      	blx	r3
    87b8:	0003      	movs	r3, r0
    87ba:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    87bc:	2317      	movs	r3, #23
    87be:	18fb      	adds	r3, r7, r3
    87c0:	781b      	ldrb	r3, [r3, #0]
    87c2:	2b00      	cmp	r3, #0
    87c4:	d100      	bne.n	87c8 <dir_find+0x1c8>
    87c6:	e73b      	b.n	8640 <dir_find+0x40>
    87c8:	e004      	b.n	87d4 <dir_find+0x1d4>
		if (res != FR_OK) break;
    87ca:	46c0      	nop			; (mov r8, r8)
    87cc:	e002      	b.n	87d4 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    87ce:	46c0      	nop			; (mov r8, r8)
    87d0:	e000      	b.n	87d4 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    87d2:	46c0      	nop			; (mov r8, r8)

	return res;
    87d4:	2317      	movs	r3, #23
    87d6:	18fb      	adds	r3, r7, r3
    87d8:	781b      	ldrb	r3, [r3, #0]
}
    87da:	0018      	movs	r0, r3
    87dc:	46bd      	mov	sp, r7
    87de:	b007      	add	sp, #28
    87e0:	bd90      	pop	{r4, r7, pc}
    87e2:	46c0      	nop			; (mov r8, r8)
    87e4:	00007e99 	.word	0x00007e99
    87e8:	00007655 	.word	0x00007655
    87ec:	000081b9 	.word	0x000081b9
    87f0:	000085b1 	.word	0x000085b1
    87f4:	000075d9 	.word	0x000075d9
    87f8:	00007fc9 	.word	0x00007fc9

000087fc <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    87fc:	b590      	push	{r4, r7, lr}
    87fe:	b087      	sub	sp, #28
    8800:	af00      	add	r7, sp, #0
    8802:	6078      	str	r0, [r7, #4]
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
    8804:	2315      	movs	r3, #21
    8806:	18fb      	adds	r3, r7, r3
    8808:	22ff      	movs	r2, #255	; 0xff
    880a:	701a      	strb	r2, [r3, #0]
    880c:	2314      	movs	r3, #20
    880e:	18fb      	adds	r3, r7, r3
    8810:	22ff      	movs	r2, #255	; 0xff
    8812:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
    8814:	2317      	movs	r3, #23
    8816:	18fb      	adds	r3, r7, r3
    8818:	2204      	movs	r2, #4
    881a:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    881c:	e0ae      	b.n	897c <dir_read+0x180>
		res = move_window(dj->fs, dj->sect);
    881e:	687b      	ldr	r3, [r7, #4]
    8820:	681a      	ldr	r2, [r3, #0]
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	691b      	ldr	r3, [r3, #16]
    8826:	2117      	movs	r1, #23
    8828:	187c      	adds	r4, r7, r1
    882a:	0019      	movs	r1, r3
    882c:	0010      	movs	r0, r2
    882e:	4b60      	ldr	r3, [pc, #384]	; (89b0 <dir_read+0x1b4>)
    8830:	4798      	blx	r3
    8832:	0003      	movs	r3, r0
    8834:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8836:	2317      	movs	r3, #23
    8838:	18fb      	adds	r3, r7, r3
    883a:	781b      	ldrb	r3, [r3, #0]
    883c:	2b00      	cmp	r3, #0
    883e:	d000      	beq.n	8842 <dir_read+0x46>
    8840:	e0a2      	b.n	8988 <dir_read+0x18c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8842:	687b      	ldr	r3, [r7, #4]
    8844:	695b      	ldr	r3, [r3, #20]
    8846:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    8848:	2316      	movs	r3, #22
    884a:	18fb      	adds	r3, r7, r3
    884c:	693a      	ldr	r2, [r7, #16]
    884e:	7812      	ldrb	r2, [r2, #0]
    8850:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8852:	2316      	movs	r3, #22
    8854:	18fb      	adds	r3, r7, r3
    8856:	781b      	ldrb	r3, [r3, #0]
    8858:	2b00      	cmp	r3, #0
    885a:	d104      	bne.n	8866 <dir_read+0x6a>
    885c:	2317      	movs	r3, #23
    885e:	18fb      	adds	r3, r7, r3
    8860:	2204      	movs	r2, #4
    8862:	701a      	strb	r2, [r3, #0]
    8864:	e095      	b.n	8992 <dir_read+0x196>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    8866:	693b      	ldr	r3, [r7, #16]
    8868:	330b      	adds	r3, #11
    886a:	781a      	ldrb	r2, [r3, #0]
    886c:	230f      	movs	r3, #15
    886e:	18fb      	adds	r3, r7, r3
    8870:	213f      	movs	r1, #63	; 0x3f
    8872:	400a      	ands	r2, r1
    8874:	701a      	strb	r2, [r3, #0]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    8876:	2316      	movs	r3, #22
    8878:	18fb      	adds	r3, r7, r3
    887a:	781b      	ldrb	r3, [r3, #0]
    887c:	2be5      	cmp	r3, #229	; 0xe5
    887e:	d00f      	beq.n	88a0 <dir_read+0xa4>
    8880:	2316      	movs	r3, #22
    8882:	18fb      	adds	r3, r7, r3
    8884:	781b      	ldrb	r3, [r3, #0]
    8886:	2b2e      	cmp	r3, #46	; 0x2e
    8888:	d00a      	beq.n	88a0 <dir_read+0xa4>
    888a:	230f      	movs	r3, #15
    888c:	18fb      	adds	r3, r7, r3
    888e:	781b      	ldrb	r3, [r3, #0]
    8890:	2208      	movs	r2, #8
    8892:	4013      	ands	r3, r2
    8894:	d009      	beq.n	88aa <dir_read+0xae>
    8896:	230f      	movs	r3, #15
    8898:	18fb      	adds	r3, r7, r3
    889a:	781b      	ldrb	r3, [r3, #0]
    889c:	2b0f      	cmp	r3, #15
    889e:	d004      	beq.n	88aa <dir_read+0xae>
			ord = 0xFF;
    88a0:	2315      	movs	r3, #21
    88a2:	18fb      	adds	r3, r7, r3
    88a4:	22ff      	movs	r2, #255	; 0xff
    88a6:	701a      	strb	r2, [r3, #0]
    88a8:	e05a      	b.n	8960 <dir_read+0x164>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    88aa:	230f      	movs	r3, #15
    88ac:	18fb      	adds	r3, r7, r3
    88ae:	781b      	ldrb	r3, [r3, #0]
    88b0:	2b0f      	cmp	r3, #15
    88b2:	d140      	bne.n	8936 <dir_read+0x13a>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    88b4:	2316      	movs	r3, #22
    88b6:	18fb      	adds	r3, r7, r3
    88b8:	781b      	ldrb	r3, [r3, #0]
    88ba:	2240      	movs	r2, #64	; 0x40
    88bc:	4013      	ands	r3, r2
    88be:	d016      	beq.n	88ee <dir_read+0xf2>
					sum = dir[LDIR_Chksum];
    88c0:	2314      	movs	r3, #20
    88c2:	18fb      	adds	r3, r7, r3
    88c4:	693a      	ldr	r2, [r7, #16]
    88c6:	7b52      	ldrb	r2, [r2, #13]
    88c8:	701a      	strb	r2, [r3, #0]
					c &= ~LLE; ord = c;
    88ca:	2316      	movs	r3, #22
    88cc:	18fb      	adds	r3, r7, r3
    88ce:	2216      	movs	r2, #22
    88d0:	18ba      	adds	r2, r7, r2
    88d2:	7812      	ldrb	r2, [r2, #0]
    88d4:	2140      	movs	r1, #64	; 0x40
    88d6:	438a      	bics	r2, r1
    88d8:	701a      	strb	r2, [r3, #0]
    88da:	2315      	movs	r3, #21
    88dc:	18fb      	adds	r3, r7, r3
    88de:	2216      	movs	r2, #22
    88e0:	18ba      	adds	r2, r7, r2
    88e2:	7812      	ldrb	r2, [r2, #0]
    88e4:	701a      	strb	r2, [r3, #0]
					dj->lfn_idx = dj->index;
    88e6:	687b      	ldr	r3, [r7, #4]
    88e8:	88da      	ldrh	r2, [r3, #6]
    88ea:	687b      	ldr	r3, [r7, #4]
    88ec:	841a      	strh	r2, [r3, #32]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    88ee:	2316      	movs	r3, #22
    88f0:	18fa      	adds	r2, r7, r3
    88f2:	2315      	movs	r3, #21
    88f4:	18fb      	adds	r3, r7, r3
    88f6:	7812      	ldrb	r2, [r2, #0]
    88f8:	781b      	ldrb	r3, [r3, #0]
    88fa:	429a      	cmp	r2, r3
    88fc:	d116      	bne.n	892c <dir_read+0x130>
    88fe:	693b      	ldr	r3, [r7, #16]
    8900:	330d      	adds	r3, #13
    8902:	781b      	ldrb	r3, [r3, #0]
    8904:	2214      	movs	r2, #20
    8906:	18ba      	adds	r2, r7, r2
    8908:	7812      	ldrb	r2, [r2, #0]
    890a:	429a      	cmp	r2, r3
    890c:	d10e      	bne.n	892c <dir_read+0x130>
    890e:	687b      	ldr	r3, [r7, #4]
    8910:	69db      	ldr	r3, [r3, #28]
    8912:	693a      	ldr	r2, [r7, #16]
    8914:	0011      	movs	r1, r2
    8916:	0018      	movs	r0, r3
    8918:	4b26      	ldr	r3, [pc, #152]	; (89b4 <dir_read+0x1b8>)
    891a:	4798      	blx	r3
    891c:	1e03      	subs	r3, r0, #0
    891e:	d005      	beq.n	892c <dir_read+0x130>
    8920:	2315      	movs	r3, #21
    8922:	18fb      	adds	r3, r7, r3
    8924:	781b      	ldrb	r3, [r3, #0]
    8926:	3b01      	subs	r3, #1
    8928:	b2da      	uxtb	r2, r3
    892a:	e000      	b.n	892e <dir_read+0x132>
    892c:	22ff      	movs	r2, #255	; 0xff
    892e:	2315      	movs	r3, #21
    8930:	18fb      	adds	r3, r7, r3
    8932:	701a      	strb	r2, [r3, #0]
    8934:	e014      	b.n	8960 <dir_read+0x164>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    8936:	2315      	movs	r3, #21
    8938:	18fb      	adds	r3, r7, r3
    893a:	781b      	ldrb	r3, [r3, #0]
    893c:	2b00      	cmp	r3, #0
    893e:	d10a      	bne.n	8956 <dir_read+0x15a>
    8940:	693b      	ldr	r3, [r7, #16]
    8942:	0018      	movs	r0, r3
    8944:	4b1c      	ldr	r3, [pc, #112]	; (89b8 <dir_read+0x1bc>)
    8946:	4798      	blx	r3
    8948:	0003      	movs	r3, r0
    894a:	001a      	movs	r2, r3
    894c:	2314      	movs	r3, #20
    894e:	18fb      	adds	r3, r7, r3
    8950:	781b      	ldrb	r3, [r3, #0]
    8952:	4293      	cmp	r3, r2
    8954:	d01a      	beq.n	898c <dir_read+0x190>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    8956:	687b      	ldr	r3, [r7, #4]
    8958:	2201      	movs	r2, #1
    895a:	4252      	negs	r2, r2
    895c:	841a      	strh	r2, [r3, #32]
				break;
    895e:	e015      	b.n	898c <dir_read+0x190>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    8960:	2317      	movs	r3, #23
    8962:	18fc      	adds	r4, r7, r3
    8964:	687b      	ldr	r3, [r7, #4]
    8966:	2100      	movs	r1, #0
    8968:	0018      	movs	r0, r3
    896a:	4b14      	ldr	r3, [pc, #80]	; (89bc <dir_read+0x1c0>)
    896c:	4798      	blx	r3
    896e:	0003      	movs	r3, r0
    8970:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8972:	2317      	movs	r3, #23
    8974:	18fb      	adds	r3, r7, r3
    8976:	781b      	ldrb	r3, [r3, #0]
    8978:	2b00      	cmp	r3, #0
    897a:	d109      	bne.n	8990 <dir_read+0x194>
	while (dj->sect) {
    897c:	687b      	ldr	r3, [r7, #4]
    897e:	691b      	ldr	r3, [r3, #16]
    8980:	2b00      	cmp	r3, #0
    8982:	d000      	beq.n	8986 <dir_read+0x18a>
    8984:	e74b      	b.n	881e <dir_read+0x22>
    8986:	e004      	b.n	8992 <dir_read+0x196>
		if (res != FR_OK) break;
    8988:	46c0      	nop			; (mov r8, r8)
    898a:	e002      	b.n	8992 <dir_read+0x196>
				break;
    898c:	46c0      	nop			; (mov r8, r8)
    898e:	e000      	b.n	8992 <dir_read+0x196>
		if (res != FR_OK) break;
    8990:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    8992:	2317      	movs	r3, #23
    8994:	18fb      	adds	r3, r7, r3
    8996:	781b      	ldrb	r3, [r3, #0]
    8998:	2b00      	cmp	r3, #0
    899a:	d002      	beq.n	89a2 <dir_read+0x1a6>
    899c:	687b      	ldr	r3, [r7, #4]
    899e:	2200      	movs	r2, #0
    89a0:	611a      	str	r2, [r3, #16]

	return res;
    89a2:	2317      	movs	r3, #23
    89a4:	18fb      	adds	r3, r7, r3
    89a6:	781b      	ldrb	r3, [r3, #0]
}
    89a8:	0018      	movs	r0, r3
    89aa:	46bd      	mov	sp, r7
    89ac:	b007      	add	sp, #28
    89ae:	bd90      	pop	{r4, r7, pc}
    89b0:	00007655 	.word	0x00007655
    89b4:	000082bd 	.word	0x000082bd
    89b8:	000085b1 	.word	0x000085b1
    89bc:	00007fc9 	.word	0x00007fc9

000089c0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    89c0:	b590      	push	{r4, r7, lr}
    89c2:	b08d      	sub	sp, #52	; 0x34
    89c4:	af00      	add	r7, sp, #0
    89c6:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    89c8:	687b      	ldr	r3, [r7, #4]
    89ca:	699b      	ldr	r3, [r3, #24]
    89cc:	627b      	str	r3, [r7, #36]	; 0x24
    89ce:	687b      	ldr	r3, [r7, #4]
    89d0:	69db      	ldr	r3, [r3, #28]
    89d2:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    89d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    89d6:	230c      	movs	r3, #12
    89d8:	18fb      	adds	r3, r7, r3
    89da:	220c      	movs	r2, #12
    89dc:	0018      	movs	r0, r3
    89de:	4bc8      	ldr	r3, [pc, #800]	; (8d00 <dir_register+0x340>)
    89e0:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    89e2:	230c      	movs	r3, #12
    89e4:	18fb      	adds	r3, r7, r3
    89e6:	7adb      	ldrb	r3, [r3, #11]
    89e8:	001a      	movs	r2, r3
    89ea:	2301      	movs	r3, #1
    89ec:	4013      	ands	r3, r2
    89ee:	d048      	beq.n	8a82 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    89f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    89f2:	330b      	adds	r3, #11
    89f4:	2200      	movs	r2, #0
    89f6:	701a      	strb	r2, [r3, #0]
    89f8:	687b      	ldr	r3, [r7, #4]
    89fa:	2200      	movs	r2, #0
    89fc:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    89fe:	232c      	movs	r3, #44	; 0x2c
    8a00:	18fb      	adds	r3, r7, r3
    8a02:	2201      	movs	r2, #1
    8a04:	801a      	strh	r2, [r3, #0]
    8a06:	e01c      	b.n	8a42 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    8a08:	232c      	movs	r3, #44	; 0x2c
    8a0a:	18fb      	adds	r3, r7, r3
    8a0c:	881b      	ldrh	r3, [r3, #0]
    8a0e:	6a3a      	ldr	r2, [r7, #32]
    8a10:	210c      	movs	r1, #12
    8a12:	1879      	adds	r1, r7, r1
    8a14:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8a16:	4cbb      	ldr	r4, [pc, #748]	; (8d04 <dir_register+0x344>)
    8a18:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    8a1a:	232f      	movs	r3, #47	; 0x2f
    8a1c:	18fc      	adds	r4, r7, r3
    8a1e:	687b      	ldr	r3, [r7, #4]
    8a20:	0018      	movs	r0, r3
    8a22:	4bb9      	ldr	r3, [pc, #740]	; (8d08 <dir_register+0x348>)
    8a24:	4798      	blx	r3
    8a26:	0003      	movs	r3, r0
    8a28:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8a2a:	232f      	movs	r3, #47	; 0x2f
    8a2c:	18fb      	adds	r3, r7, r3
    8a2e:	781b      	ldrb	r3, [r3, #0]
    8a30:	2b00      	cmp	r3, #0
    8a32:	d10c      	bne.n	8a4e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    8a34:	232c      	movs	r3, #44	; 0x2c
    8a36:	18fb      	adds	r3, r7, r3
    8a38:	881a      	ldrh	r2, [r3, #0]
    8a3a:	232c      	movs	r3, #44	; 0x2c
    8a3c:	18fb      	adds	r3, r7, r3
    8a3e:	3201      	adds	r2, #1
    8a40:	801a      	strh	r2, [r3, #0]
    8a42:	232c      	movs	r3, #44	; 0x2c
    8a44:	18fb      	adds	r3, r7, r3
    8a46:	881b      	ldrh	r3, [r3, #0]
    8a48:	2b63      	cmp	r3, #99	; 0x63
    8a4a:	d9dd      	bls.n	8a08 <dir_register+0x48>
    8a4c:	e000      	b.n	8a50 <dir_register+0x90>
			if (res != FR_OK) break;
    8a4e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    8a50:	232c      	movs	r3, #44	; 0x2c
    8a52:	18fb      	adds	r3, r7, r3
    8a54:	881b      	ldrh	r3, [r3, #0]
    8a56:	2b64      	cmp	r3, #100	; 0x64
    8a58:	d101      	bne.n	8a5e <dir_register+0x9e>
    8a5a:	2307      	movs	r3, #7
    8a5c:	e14c      	b.n	8cf8 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    8a5e:	232f      	movs	r3, #47	; 0x2f
    8a60:	18fb      	adds	r3, r7, r3
    8a62:	781b      	ldrb	r3, [r3, #0]
    8a64:	2b04      	cmp	r3, #4
    8a66:	d003      	beq.n	8a70 <dir_register+0xb0>
    8a68:	232f      	movs	r3, #47	; 0x2f
    8a6a:	18fb      	adds	r3, r7, r3
    8a6c:	781b      	ldrb	r3, [r3, #0]
    8a6e:	e143      	b.n	8cf8 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    8a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a72:	330b      	adds	r3, #11
    8a74:	220c      	movs	r2, #12
    8a76:	18ba      	adds	r2, r7, r2
    8a78:	7ad2      	ldrb	r2, [r2, #11]
    8a7a:	701a      	strb	r2, [r3, #0]
    8a7c:	687b      	ldr	r3, [r7, #4]
    8a7e:	6a3a      	ldr	r2, [r7, #32]
    8a80:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    8a82:	230c      	movs	r3, #12
    8a84:	18fb      	adds	r3, r7, r3
    8a86:	7adb      	ldrb	r3, [r3, #11]
    8a88:	001a      	movs	r2, r3
    8a8a:	2302      	movs	r3, #2
    8a8c:	4013      	ands	r3, r2
    8a8e:	d023      	beq.n	8ad8 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    8a90:	232a      	movs	r3, #42	; 0x2a
    8a92:	18fb      	adds	r3, r7, r3
    8a94:	2200      	movs	r2, #0
    8a96:	801a      	strh	r2, [r3, #0]
    8a98:	e006      	b.n	8aa8 <dir_register+0xe8>
    8a9a:	232a      	movs	r3, #42	; 0x2a
    8a9c:	18fb      	adds	r3, r7, r3
    8a9e:	881a      	ldrh	r2, [r3, #0]
    8aa0:	232a      	movs	r3, #42	; 0x2a
    8aa2:	18fb      	adds	r3, r7, r3
    8aa4:	3201      	adds	r2, #1
    8aa6:	801a      	strh	r2, [r3, #0]
    8aa8:	232a      	movs	r3, #42	; 0x2a
    8aaa:	18fb      	adds	r3, r7, r3
    8aac:	881b      	ldrh	r3, [r3, #0]
    8aae:	005b      	lsls	r3, r3, #1
    8ab0:	6a3a      	ldr	r2, [r7, #32]
    8ab2:	18d3      	adds	r3, r2, r3
    8ab4:	881b      	ldrh	r3, [r3, #0]
    8ab6:	2b00      	cmp	r3, #0
    8ab8:	d1ef      	bne.n	8a9a <dir_register+0xda>
		ne = (ne + 25) / 13;
    8aba:	232a      	movs	r3, #42	; 0x2a
    8abc:	18fb      	adds	r3, r7, r3
    8abe:	881b      	ldrh	r3, [r3, #0]
    8ac0:	3319      	adds	r3, #25
    8ac2:	001a      	movs	r2, r3
    8ac4:	4b91      	ldr	r3, [pc, #580]	; (8d0c <dir_register+0x34c>)
    8ac6:	210d      	movs	r1, #13
    8ac8:	0010      	movs	r0, r2
    8aca:	4798      	blx	r3
    8acc:	0003      	movs	r3, r0
    8ace:	001a      	movs	r2, r3
    8ad0:	232a      	movs	r3, #42	; 0x2a
    8ad2:	18fb      	adds	r3, r7, r3
    8ad4:	801a      	strh	r2, [r3, #0]
    8ad6:	e003      	b.n	8ae0 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    8ad8:	232a      	movs	r3, #42	; 0x2a
    8ada:	18fb      	adds	r3, r7, r3
    8adc:	2201      	movs	r2, #1
    8ade:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    8ae0:	232f      	movs	r3, #47	; 0x2f
    8ae2:	18fc      	adds	r4, r7, r3
    8ae4:	687b      	ldr	r3, [r7, #4]
    8ae6:	2100      	movs	r1, #0
    8ae8:	0018      	movs	r0, r3
    8aea:	4b89      	ldr	r3, [pc, #548]	; (8d10 <dir_register+0x350>)
    8aec:	4798      	blx	r3
    8aee:	0003      	movs	r3, r0
    8af0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    8af2:	232f      	movs	r3, #47	; 0x2f
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	781b      	ldrb	r3, [r3, #0]
    8af8:	2b00      	cmp	r3, #0
    8afa:	d003      	beq.n	8b04 <dir_register+0x144>
    8afc:	232f      	movs	r3, #47	; 0x2f
    8afe:	18fb      	adds	r3, r7, r3
    8b00:	781b      	ldrb	r3, [r3, #0]
    8b02:	e0f9      	b.n	8cf8 <dir_register+0x338>
	n = is = 0;
    8b04:	2328      	movs	r3, #40	; 0x28
    8b06:	18fb      	adds	r3, r7, r3
    8b08:	2200      	movs	r2, #0
    8b0a:	801a      	strh	r2, [r3, #0]
    8b0c:	232c      	movs	r3, #44	; 0x2c
    8b0e:	18fb      	adds	r3, r7, r3
    8b10:	2228      	movs	r2, #40	; 0x28
    8b12:	18ba      	adds	r2, r7, r2
    8b14:	8812      	ldrh	r2, [r2, #0]
    8b16:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    8b18:	687b      	ldr	r3, [r7, #4]
    8b1a:	681a      	ldr	r2, [r3, #0]
    8b1c:	687b      	ldr	r3, [r7, #4]
    8b1e:	691b      	ldr	r3, [r3, #16]
    8b20:	212f      	movs	r1, #47	; 0x2f
    8b22:	187c      	adds	r4, r7, r1
    8b24:	0019      	movs	r1, r3
    8b26:	0010      	movs	r0, r2
    8b28:	4b7a      	ldr	r3, [pc, #488]	; (8d14 <dir_register+0x354>)
    8b2a:	4798      	blx	r3
    8b2c:	0003      	movs	r3, r0
    8b2e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8b30:	232f      	movs	r3, #47	; 0x2f
    8b32:	18fb      	adds	r3, r7, r3
    8b34:	781b      	ldrb	r3, [r3, #0]
    8b36:	2b00      	cmp	r3, #0
    8b38:	d13c      	bne.n	8bb4 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	695a      	ldr	r2, [r3, #20]
    8b3e:	231f      	movs	r3, #31
    8b40:	18fb      	adds	r3, r7, r3
    8b42:	7812      	ldrb	r2, [r2, #0]
    8b44:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    8b46:	231f      	movs	r3, #31
    8b48:	18fb      	adds	r3, r7, r3
    8b4a:	781b      	ldrb	r3, [r3, #0]
    8b4c:	2be5      	cmp	r3, #229	; 0xe5
    8b4e:	d004      	beq.n	8b5a <dir_register+0x19a>
    8b50:	231f      	movs	r3, #31
    8b52:	18fb      	adds	r3, r7, r3
    8b54:	781b      	ldrb	r3, [r3, #0]
    8b56:	2b00      	cmp	r3, #0
    8b58:	d119      	bne.n	8b8e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    8b5a:	232c      	movs	r3, #44	; 0x2c
    8b5c:	18fb      	adds	r3, r7, r3
    8b5e:	881b      	ldrh	r3, [r3, #0]
    8b60:	2b00      	cmp	r3, #0
    8b62:	d104      	bne.n	8b6e <dir_register+0x1ae>
    8b64:	2328      	movs	r3, #40	; 0x28
    8b66:	18fb      	adds	r3, r7, r3
    8b68:	687a      	ldr	r2, [r7, #4]
    8b6a:	88d2      	ldrh	r2, [r2, #6]
    8b6c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    8b6e:	232c      	movs	r3, #44	; 0x2c
    8b70:	18fb      	adds	r3, r7, r3
    8b72:	222c      	movs	r2, #44	; 0x2c
    8b74:	18ba      	adds	r2, r7, r2
    8b76:	8812      	ldrh	r2, [r2, #0]
    8b78:	3201      	adds	r2, #1
    8b7a:	801a      	strh	r2, [r3, #0]
    8b7c:	232c      	movs	r3, #44	; 0x2c
    8b7e:	18fa      	adds	r2, r7, r3
    8b80:	232a      	movs	r3, #42	; 0x2a
    8b82:	18fb      	adds	r3, r7, r3
    8b84:	8812      	ldrh	r2, [r2, #0]
    8b86:	881b      	ldrh	r3, [r3, #0]
    8b88:	429a      	cmp	r2, r3
    8b8a:	d104      	bne.n	8b96 <dir_register+0x1d6>
    8b8c:	e013      	b.n	8bb6 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    8b8e:	232c      	movs	r3, #44	; 0x2c
    8b90:	18fb      	adds	r3, r7, r3
    8b92:	2200      	movs	r2, #0
    8b94:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    8b96:	232f      	movs	r3, #47	; 0x2f
    8b98:	18fc      	adds	r4, r7, r3
    8b9a:	687b      	ldr	r3, [r7, #4]
    8b9c:	2101      	movs	r1, #1
    8b9e:	0018      	movs	r0, r3
    8ba0:	4b5d      	ldr	r3, [pc, #372]	; (8d18 <dir_register+0x358>)
    8ba2:	4798      	blx	r3
    8ba4:	0003      	movs	r3, r0
    8ba6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8ba8:	232f      	movs	r3, #47	; 0x2f
    8baa:	18fb      	adds	r3, r7, r3
    8bac:	781b      	ldrb	r3, [r3, #0]
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d0b2      	beq.n	8b18 <dir_register+0x158>
    8bb2:	e000      	b.n	8bb6 <dir_register+0x1f6>
		if (res != FR_OK) break;
    8bb4:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    8bb6:	232f      	movs	r3, #47	; 0x2f
    8bb8:	18fb      	adds	r3, r7, r3
    8bba:	781b      	ldrb	r3, [r3, #0]
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d163      	bne.n	8c88 <dir_register+0x2c8>
    8bc0:	232a      	movs	r3, #42	; 0x2a
    8bc2:	18fb      	adds	r3, r7, r3
    8bc4:	881b      	ldrh	r3, [r3, #0]
    8bc6:	2b01      	cmp	r3, #1
    8bc8:	d95e      	bls.n	8c88 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    8bca:	232f      	movs	r3, #47	; 0x2f
    8bcc:	18fc      	adds	r4, r7, r3
    8bce:	2328      	movs	r3, #40	; 0x28
    8bd0:	18fb      	adds	r3, r7, r3
    8bd2:	881a      	ldrh	r2, [r3, #0]
    8bd4:	687b      	ldr	r3, [r7, #4]
    8bd6:	0011      	movs	r1, r2
    8bd8:	0018      	movs	r0, r3
    8bda:	4b4d      	ldr	r3, [pc, #308]	; (8d10 <dir_register+0x350>)
    8bdc:	4798      	blx	r3
    8bde:	0003      	movs	r3, r0
    8be0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8be2:	232f      	movs	r3, #47	; 0x2f
    8be4:	18fb      	adds	r3, r7, r3
    8be6:	781b      	ldrb	r3, [r3, #0]
    8be8:	2b00      	cmp	r3, #0
    8bea:	d14d      	bne.n	8c88 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    8bec:	687b      	ldr	r3, [r7, #4]
    8bee:	699b      	ldr	r3, [r3, #24]
    8bf0:	221e      	movs	r2, #30
    8bf2:	18bc      	adds	r4, r7, r2
    8bf4:	0018      	movs	r0, r3
    8bf6:	4b49      	ldr	r3, [pc, #292]	; (8d1c <dir_register+0x35c>)
    8bf8:	4798      	blx	r3
    8bfa:	0003      	movs	r3, r0
    8bfc:	7023      	strb	r3, [r4, #0]
			ne--;
    8bfe:	232a      	movs	r3, #42	; 0x2a
    8c00:	18fb      	adds	r3, r7, r3
    8c02:	881a      	ldrh	r2, [r3, #0]
    8c04:	232a      	movs	r3, #42	; 0x2a
    8c06:	18fb      	adds	r3, r7, r3
    8c08:	3a01      	subs	r2, #1
    8c0a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    8c0c:	687b      	ldr	r3, [r7, #4]
    8c0e:	681a      	ldr	r2, [r3, #0]
    8c10:	687b      	ldr	r3, [r7, #4]
    8c12:	691b      	ldr	r3, [r3, #16]
    8c14:	212f      	movs	r1, #47	; 0x2f
    8c16:	187c      	adds	r4, r7, r1
    8c18:	0019      	movs	r1, r3
    8c1a:	0010      	movs	r0, r2
    8c1c:	4b3d      	ldr	r3, [pc, #244]	; (8d14 <dir_register+0x354>)
    8c1e:	4798      	blx	r3
    8c20:	0003      	movs	r3, r0
    8c22:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    8c24:	232f      	movs	r3, #47	; 0x2f
    8c26:	18fb      	adds	r3, r7, r3
    8c28:	781b      	ldrb	r3, [r3, #0]
    8c2a:	2b00      	cmp	r3, #0
    8c2c:	d12b      	bne.n	8c86 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    8c2e:	687b      	ldr	r3, [r7, #4]
    8c30:	69d8      	ldr	r0, [r3, #28]
    8c32:	687b      	ldr	r3, [r7, #4]
    8c34:	6959      	ldr	r1, [r3, #20]
    8c36:	232a      	movs	r3, #42	; 0x2a
    8c38:	18fb      	adds	r3, r7, r3
    8c3a:	881b      	ldrh	r3, [r3, #0]
    8c3c:	b2da      	uxtb	r2, r3
    8c3e:	231e      	movs	r3, #30
    8c40:	18fb      	adds	r3, r7, r3
    8c42:	781b      	ldrb	r3, [r3, #0]
    8c44:	4c36      	ldr	r4, [pc, #216]	; (8d20 <dir_register+0x360>)
    8c46:	47a0      	blx	r4
				dj->fs->wflag = 1;
    8c48:	687b      	ldr	r3, [r7, #4]
    8c4a:	681b      	ldr	r3, [r3, #0]
    8c4c:	2201      	movs	r2, #1
    8c4e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    8c50:	232f      	movs	r3, #47	; 0x2f
    8c52:	18fc      	adds	r4, r7, r3
    8c54:	687b      	ldr	r3, [r7, #4]
    8c56:	2100      	movs	r1, #0
    8c58:	0018      	movs	r0, r3
    8c5a:	4b2f      	ldr	r3, [pc, #188]	; (8d18 <dir_register+0x358>)
    8c5c:	4798      	blx	r3
    8c5e:	0003      	movs	r3, r0
    8c60:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    8c62:	232f      	movs	r3, #47	; 0x2f
    8c64:	18fb      	adds	r3, r7, r3
    8c66:	781b      	ldrb	r3, [r3, #0]
    8c68:	2b00      	cmp	r3, #0
    8c6a:	d10d      	bne.n	8c88 <dir_register+0x2c8>
    8c6c:	232a      	movs	r3, #42	; 0x2a
    8c6e:	18fb      	adds	r3, r7, r3
    8c70:	222a      	movs	r2, #42	; 0x2a
    8c72:	18ba      	adds	r2, r7, r2
    8c74:	8812      	ldrh	r2, [r2, #0]
    8c76:	3a01      	subs	r2, #1
    8c78:	801a      	strh	r2, [r3, #0]
    8c7a:	232a      	movs	r3, #42	; 0x2a
    8c7c:	18fb      	adds	r3, r7, r3
    8c7e:	881b      	ldrh	r3, [r3, #0]
    8c80:	2b00      	cmp	r3, #0
    8c82:	d1c3      	bne.n	8c0c <dir_register+0x24c>
    8c84:	e000      	b.n	8c88 <dir_register+0x2c8>
				if (res != FR_OK) break;
    8c86:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    8c88:	232f      	movs	r3, #47	; 0x2f
    8c8a:	18fb      	adds	r3, r7, r3
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d12f      	bne.n	8cf2 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    8c92:	687b      	ldr	r3, [r7, #4]
    8c94:	681a      	ldr	r2, [r3, #0]
    8c96:	687b      	ldr	r3, [r7, #4]
    8c98:	691b      	ldr	r3, [r3, #16]
    8c9a:	212f      	movs	r1, #47	; 0x2f
    8c9c:	187c      	adds	r4, r7, r1
    8c9e:	0019      	movs	r1, r3
    8ca0:	0010      	movs	r0, r2
    8ca2:	4b1c      	ldr	r3, [pc, #112]	; (8d14 <dir_register+0x354>)
    8ca4:	4798      	blx	r3
    8ca6:	0003      	movs	r3, r0
    8ca8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8caa:	232f      	movs	r3, #47	; 0x2f
    8cac:	18fb      	adds	r3, r7, r3
    8cae:	781b      	ldrb	r3, [r3, #0]
    8cb0:	2b00      	cmp	r3, #0
    8cb2:	d11e      	bne.n	8cf2 <dir_register+0x332>
			dir = dj->dir;
    8cb4:	687b      	ldr	r3, [r7, #4]
    8cb6:	695b      	ldr	r3, [r3, #20]
    8cb8:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    8cba:	69bb      	ldr	r3, [r7, #24]
    8cbc:	2220      	movs	r2, #32
    8cbe:	2100      	movs	r1, #0
    8cc0:	0018      	movs	r0, r3
    8cc2:	4b18      	ldr	r3, [pc, #96]	; (8d24 <dir_register+0x364>)
    8cc4:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    8cc6:	687b      	ldr	r3, [r7, #4]
    8cc8:	6999      	ldr	r1, [r3, #24]
    8cca:	69bb      	ldr	r3, [r7, #24]
    8ccc:	220b      	movs	r2, #11
    8cce:	0018      	movs	r0, r3
    8cd0:	4b0b      	ldr	r3, [pc, #44]	; (8d00 <dir_register+0x340>)
    8cd2:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    8cd4:	69bb      	ldr	r3, [r7, #24]
    8cd6:	330c      	adds	r3, #12
    8cd8:	001a      	movs	r2, r3
    8cda:	687b      	ldr	r3, [r7, #4]
    8cdc:	699b      	ldr	r3, [r3, #24]
    8cde:	330b      	adds	r3, #11
    8ce0:	781b      	ldrb	r3, [r3, #0]
    8ce2:	2118      	movs	r1, #24
    8ce4:	400b      	ands	r3, r1
    8ce6:	b2db      	uxtb	r3, r3
    8ce8:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    8cea:	687b      	ldr	r3, [r7, #4]
    8cec:	681b      	ldr	r3, [r3, #0]
    8cee:	2201      	movs	r2, #1
    8cf0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    8cf2:	232f      	movs	r3, #47	; 0x2f
    8cf4:	18fb      	adds	r3, r7, r3
    8cf6:	781b      	ldrb	r3, [r3, #0]
}
    8cf8:	0018      	movs	r0, r3
    8cfa:	46bd      	mov	sp, r7
    8cfc:	b00d      	add	sp, #52	; 0x34
    8cfe:	bd90      	pop	{r4, r7, pc}
    8d00:	00007571 	.word	0x00007571
    8d04:	000084b1 	.word	0x000084b1
    8d08:	00008601 	.word	0x00008601
    8d0c:	0000b651 	.word	0x0000b651
    8d10:	00007e99 	.word	0x00007e99
    8d14:	00007655 	.word	0x00007655
    8d18:	00007fc9 	.word	0x00007fc9
    8d1c:	000085b1 	.word	0x000085b1
    8d20:	000083a1 	.word	0x000083a1
    8d24:	000075a9 	.word	0x000075a9

00008d28 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8d28:	b590      	push	{r4, r7, lr}
    8d2a:	b085      	sub	sp, #20
    8d2c:	af00      	add	r7, sp, #0
    8d2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    8d30:	230c      	movs	r3, #12
    8d32:	18fb      	adds	r3, r7, r3
    8d34:	687a      	ldr	r2, [r7, #4]
    8d36:	88d2      	ldrh	r2, [r2, #6]
    8d38:	801a      	strh	r2, [r3, #0]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    8d3a:	687b      	ldr	r3, [r7, #4]
    8d3c:	8c1b      	ldrh	r3, [r3, #32]
    8d3e:	4a2c      	ldr	r2, [pc, #176]	; (8df0 <dir_remove+0xc8>)
    8d40:	4293      	cmp	r3, r2
    8d42:	d002      	beq.n	8d4a <dir_remove+0x22>
    8d44:	687b      	ldr	r3, [r7, #4]
    8d46:	8c1b      	ldrh	r3, [r3, #32]
    8d48:	e002      	b.n	8d50 <dir_remove+0x28>
    8d4a:	230c      	movs	r3, #12
    8d4c:	18fb      	adds	r3, r7, r3
    8d4e:	881b      	ldrh	r3, [r3, #0]
    8d50:	220f      	movs	r2, #15
    8d52:	18bc      	adds	r4, r7, r2
    8d54:	687a      	ldr	r2, [r7, #4]
    8d56:	0019      	movs	r1, r3
    8d58:	0010      	movs	r0, r2
    8d5a:	4b26      	ldr	r3, [pc, #152]	; (8df4 <dir_remove+0xcc>)
    8d5c:	4798      	blx	r3
    8d5e:	0003      	movs	r3, r0
    8d60:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    8d62:	230f      	movs	r3, #15
    8d64:	18fb      	adds	r3, r7, r3
    8d66:	781b      	ldrb	r3, [r3, #0]
    8d68:	2b00      	cmp	r3, #0
    8d6a:	d13a      	bne.n	8de2 <dir_remove+0xba>
		do {
			res = move_window(dj->fs, dj->sect);
    8d6c:	687b      	ldr	r3, [r7, #4]
    8d6e:	681a      	ldr	r2, [r3, #0]
    8d70:	687b      	ldr	r3, [r7, #4]
    8d72:	691b      	ldr	r3, [r3, #16]
    8d74:	210f      	movs	r1, #15
    8d76:	187c      	adds	r4, r7, r1
    8d78:	0019      	movs	r1, r3
    8d7a:	0010      	movs	r0, r2
    8d7c:	4b1e      	ldr	r3, [pc, #120]	; (8df8 <dir_remove+0xd0>)
    8d7e:	4798      	blx	r3
    8d80:	0003      	movs	r3, r0
    8d82:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8d84:	230f      	movs	r3, #15
    8d86:	18fb      	adds	r3, r7, r3
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	2b00      	cmp	r3, #0
    8d8c:	d11d      	bne.n	8dca <dir_remove+0xa2>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    8d8e:	687b      	ldr	r3, [r7, #4]
    8d90:	695b      	ldr	r3, [r3, #20]
    8d92:	22e5      	movs	r2, #229	; 0xe5
    8d94:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    8d96:	687b      	ldr	r3, [r7, #4]
    8d98:	681b      	ldr	r3, [r3, #0]
    8d9a:	2201      	movs	r2, #1
    8d9c:	711a      	strb	r2, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8d9e:	687b      	ldr	r3, [r7, #4]
    8da0:	88db      	ldrh	r3, [r3, #6]
    8da2:	220c      	movs	r2, #12
    8da4:	18ba      	adds	r2, r7, r2
    8da6:	8812      	ldrh	r2, [r2, #0]
    8da8:	429a      	cmp	r2, r3
    8daa:	d910      	bls.n	8dce <dir_remove+0xa6>
			res = dir_next(dj, 0);		/* Next entry */
    8dac:	230f      	movs	r3, #15
    8dae:	18fc      	adds	r4, r7, r3
    8db0:	687b      	ldr	r3, [r7, #4]
    8db2:	2100      	movs	r1, #0
    8db4:	0018      	movs	r0, r3
    8db6:	4b11      	ldr	r3, [pc, #68]	; (8dfc <dir_remove+0xd4>)
    8db8:	4798      	blx	r3
    8dba:	0003      	movs	r3, r0
    8dbc:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    8dbe:	230f      	movs	r3, #15
    8dc0:	18fb      	adds	r3, r7, r3
    8dc2:	781b      	ldrb	r3, [r3, #0]
    8dc4:	2b00      	cmp	r3, #0
    8dc6:	d0d1      	beq.n	8d6c <dir_remove+0x44>
    8dc8:	e002      	b.n	8dd0 <dir_remove+0xa8>
			if (res != FR_OK) break;
    8dca:	46c0      	nop			; (mov r8, r8)
    8dcc:	e000      	b.n	8dd0 <dir_remove+0xa8>
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8dce:	46c0      	nop			; (mov r8, r8)
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    8dd0:	230f      	movs	r3, #15
    8dd2:	18fb      	adds	r3, r7, r3
    8dd4:	781b      	ldrb	r3, [r3, #0]
    8dd6:	2b04      	cmp	r3, #4
    8dd8:	d103      	bne.n	8de2 <dir_remove+0xba>
    8dda:	230f      	movs	r3, #15
    8ddc:	18fb      	adds	r3, r7, r3
    8dde:	2202      	movs	r2, #2
    8de0:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
		}
	}
#endif

	return res;
    8de2:	230f      	movs	r3, #15
    8de4:	18fb      	adds	r3, r7, r3
    8de6:	781b      	ldrb	r3, [r3, #0]
}
    8de8:	0018      	movs	r0, r3
    8dea:	46bd      	mov	sp, r7
    8dec:	b005      	add	sp, #20
    8dee:	bd90      	pop	{r4, r7, pc}
    8df0:	0000ffff 	.word	0x0000ffff
    8df4:	00007e99 	.word	0x00007e99
    8df8:	00007655 	.word	0x00007655
    8dfc:	00007fc9 	.word	0x00007fc9

00008e00 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    8e00:	b590      	push	{r4, r7, lr}
    8e02:	b08b      	sub	sp, #44	; 0x2c
    8e04:	af00      	add	r7, sp, #0
    8e06:	6078      	str	r0, [r7, #4]
    8e08:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8e0a:	683b      	ldr	r3, [r7, #0]
    8e0c:	681b      	ldr	r3, [r3, #0]
    8e0e:	613b      	str	r3, [r7, #16]
    8e10:	e002      	b.n	8e18 <create_name+0x18>
    8e12:	693b      	ldr	r3, [r7, #16]
    8e14:	3301      	adds	r3, #1
    8e16:	613b      	str	r3, [r7, #16]
    8e18:	693b      	ldr	r3, [r7, #16]
    8e1a:	781b      	ldrb	r3, [r3, #0]
    8e1c:	2b2f      	cmp	r3, #47	; 0x2f
    8e1e:	d0f8      	beq.n	8e12 <create_name+0x12>
    8e20:	693b      	ldr	r3, [r7, #16]
    8e22:	781b      	ldrb	r3, [r3, #0]
    8e24:	2b5c      	cmp	r3, #92	; 0x5c
    8e26:	d0f4      	beq.n	8e12 <create_name+0x12>
	lfn = dj->lfn;
    8e28:	687b      	ldr	r3, [r7, #4]
    8e2a:	69db      	ldr	r3, [r3, #28]
    8e2c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    8e2e:	2300      	movs	r3, #0
    8e30:	617b      	str	r3, [r7, #20]
    8e32:	697b      	ldr	r3, [r7, #20]
    8e34:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    8e36:	69bb      	ldr	r3, [r7, #24]
    8e38:	1c5a      	adds	r2, r3, #1
    8e3a:	61ba      	str	r2, [r7, #24]
    8e3c:	693a      	ldr	r2, [r7, #16]
    8e3e:	18d3      	adds	r3, r2, r3
    8e40:	781a      	ldrb	r2, [r3, #0]
    8e42:	2324      	movs	r3, #36	; 0x24
    8e44:	18fb      	adds	r3, r7, r3
    8e46:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    8e48:	2324      	movs	r3, #36	; 0x24
    8e4a:	18fb      	adds	r3, r7, r3
    8e4c:	881b      	ldrh	r3, [r3, #0]
    8e4e:	2b1f      	cmp	r3, #31
    8e50:	d944      	bls.n	8edc <create_name+0xdc>
    8e52:	2324      	movs	r3, #36	; 0x24
    8e54:	18fb      	adds	r3, r7, r3
    8e56:	881b      	ldrh	r3, [r3, #0]
    8e58:	2b2f      	cmp	r3, #47	; 0x2f
    8e5a:	d03f      	beq.n	8edc <create_name+0xdc>
    8e5c:	2324      	movs	r3, #36	; 0x24
    8e5e:	18fb      	adds	r3, r7, r3
    8e60:	881b      	ldrh	r3, [r3, #0]
    8e62:	2b5c      	cmp	r3, #92	; 0x5c
    8e64:	d03a      	beq.n	8edc <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    8e66:	697b      	ldr	r3, [r7, #20]
    8e68:	2bfe      	cmp	r3, #254	; 0xfe
    8e6a:	d901      	bls.n	8e70 <create_name+0x70>
			return FR_INVALID_NAME;
    8e6c:	2306      	movs	r3, #6
    8e6e:	e1e7      	b.n	9240 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    8e70:	2324      	movs	r3, #36	; 0x24
    8e72:	18fb      	adds	r3, r7, r3
    8e74:	2224      	movs	r2, #36	; 0x24
    8e76:	18ba      	adds	r2, r7, r2
    8e78:	8812      	ldrh	r2, [r2, #0]
    8e7a:	21ff      	movs	r1, #255	; 0xff
    8e7c:	400a      	ands	r2, r1
    8e7e:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    8e80:	2324      	movs	r3, #36	; 0x24
    8e82:	18fc      	adds	r4, r7, r3
    8e84:	2324      	movs	r3, #36	; 0x24
    8e86:	18fb      	adds	r3, r7, r3
    8e88:	881b      	ldrh	r3, [r3, #0]
    8e8a:	2101      	movs	r1, #1
    8e8c:	0018      	movs	r0, r3
    8e8e:	4bba      	ldr	r3, [pc, #744]	; (9178 <create_name+0x378>)
    8e90:	4798      	blx	r3
    8e92:	0003      	movs	r3, r0
    8e94:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    8e96:	2324      	movs	r3, #36	; 0x24
    8e98:	18fb      	adds	r3, r7, r3
    8e9a:	881b      	ldrh	r3, [r3, #0]
    8e9c:	2b00      	cmp	r3, #0
    8e9e:	d101      	bne.n	8ea4 <create_name+0xa4>
    8ea0:	2306      	movs	r3, #6
    8ea2:	e1cd      	b.n	9240 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    8ea4:	2324      	movs	r3, #36	; 0x24
    8ea6:	18fb      	adds	r3, r7, r3
    8ea8:	881b      	ldrh	r3, [r3, #0]
    8eaa:	2b7f      	cmp	r3, #127	; 0x7f
    8eac:	d80b      	bhi.n	8ec6 <create_name+0xc6>
    8eae:	2324      	movs	r3, #36	; 0x24
    8eb0:	18fb      	adds	r3, r7, r3
    8eb2:	881a      	ldrh	r2, [r3, #0]
    8eb4:	4bb1      	ldr	r3, [pc, #708]	; (917c <create_name+0x37c>)
    8eb6:	0011      	movs	r1, r2
    8eb8:	0018      	movs	r0, r3
    8eba:	4bb1      	ldr	r3, [pc, #708]	; (9180 <create_name+0x380>)
    8ebc:	4798      	blx	r3
    8ebe:	1e03      	subs	r3, r0, #0
    8ec0:	d001      	beq.n	8ec6 <create_name+0xc6>
			return FR_INVALID_NAME;
    8ec2:	2306      	movs	r3, #6
    8ec4:	e1bc      	b.n	9240 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    8ec6:	697b      	ldr	r3, [r7, #20]
    8ec8:	1c5a      	adds	r2, r3, #1
    8eca:	617a      	str	r2, [r7, #20]
    8ecc:	005b      	lsls	r3, r3, #1
    8ece:	68fa      	ldr	r2, [r7, #12]
    8ed0:	18d3      	adds	r3, r2, r3
    8ed2:	2224      	movs	r2, #36	; 0x24
    8ed4:	18ba      	adds	r2, r7, r2
    8ed6:	8812      	ldrh	r2, [r2, #0]
    8ed8:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    8eda:	e7ac      	b.n	8e36 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8edc:	693a      	ldr	r2, [r7, #16]
    8ede:	69bb      	ldr	r3, [r7, #24]
    8ee0:	18d2      	adds	r2, r2, r3
    8ee2:	683b      	ldr	r3, [r7, #0]
    8ee4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8ee6:	2324      	movs	r3, #36	; 0x24
    8ee8:	18fb      	adds	r3, r7, r3
    8eea:	881b      	ldrh	r3, [r3, #0]
    8eec:	2b1f      	cmp	r3, #31
    8eee:	d801      	bhi.n	8ef4 <create_name+0xf4>
    8ef0:	2204      	movs	r2, #4
    8ef2:	e000      	b.n	8ef6 <create_name+0xf6>
    8ef4:	2200      	movs	r2, #0
    8ef6:	2326      	movs	r3, #38	; 0x26
    8ef8:	18fb      	adds	r3, r7, r3
    8efa:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    8efc:	e017      	b.n	8f2e <create_name+0x12e>
		w = lfn[di-1];
    8efe:	697b      	ldr	r3, [r7, #20]
    8f00:	4aa0      	ldr	r2, [pc, #640]	; (9184 <create_name+0x384>)
    8f02:	4694      	mov	ip, r2
    8f04:	4463      	add	r3, ip
    8f06:	005b      	lsls	r3, r3, #1
    8f08:	68fa      	ldr	r2, [r7, #12]
    8f0a:	18d2      	adds	r2, r2, r3
    8f0c:	2324      	movs	r3, #36	; 0x24
    8f0e:	18fb      	adds	r3, r7, r3
    8f10:	8812      	ldrh	r2, [r2, #0]
    8f12:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    8f14:	2324      	movs	r3, #36	; 0x24
    8f16:	18fb      	adds	r3, r7, r3
    8f18:	881b      	ldrh	r3, [r3, #0]
    8f1a:	2b20      	cmp	r3, #32
    8f1c:	d004      	beq.n	8f28 <create_name+0x128>
    8f1e:	2324      	movs	r3, #36	; 0x24
    8f20:	18fb      	adds	r3, r7, r3
    8f22:	881b      	ldrh	r3, [r3, #0]
    8f24:	2b2e      	cmp	r3, #46	; 0x2e
    8f26:	d106      	bne.n	8f36 <create_name+0x136>
		di--;
    8f28:	697b      	ldr	r3, [r7, #20]
    8f2a:	3b01      	subs	r3, #1
    8f2c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8f2e:	697b      	ldr	r3, [r7, #20]
    8f30:	2b00      	cmp	r3, #0
    8f32:	d1e4      	bne.n	8efe <create_name+0xfe>
    8f34:	e000      	b.n	8f38 <create_name+0x138>
		if (w != ' ' && w != '.') break;
    8f36:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8f38:	697b      	ldr	r3, [r7, #20]
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d101      	bne.n	8f42 <create_name+0x142>
    8f3e:	2306      	movs	r3, #6
    8f40:	e17e      	b.n	9240 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    8f42:	697b      	ldr	r3, [r7, #20]
    8f44:	005b      	lsls	r3, r3, #1
    8f46:	68fa      	ldr	r2, [r7, #12]
    8f48:	18d3      	adds	r3, r2, r3
    8f4a:	2200      	movs	r2, #0
    8f4c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    8f4e:	687b      	ldr	r3, [r7, #4]
    8f50:	699b      	ldr	r3, [r3, #24]
    8f52:	220b      	movs	r2, #11
    8f54:	2120      	movs	r1, #32
    8f56:	0018      	movs	r0, r3
    8f58:	4b8b      	ldr	r3, [pc, #556]	; (9188 <create_name+0x388>)
    8f5a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    8f5c:	2300      	movs	r3, #0
    8f5e:	61bb      	str	r3, [r7, #24]
    8f60:	e002      	b.n	8f68 <create_name+0x168>
    8f62:	69bb      	ldr	r3, [r7, #24]
    8f64:	3301      	adds	r3, #1
    8f66:	61bb      	str	r3, [r7, #24]
    8f68:	69bb      	ldr	r3, [r7, #24]
    8f6a:	005b      	lsls	r3, r3, #1
    8f6c:	68fa      	ldr	r2, [r7, #12]
    8f6e:	18d3      	adds	r3, r2, r3
    8f70:	881b      	ldrh	r3, [r3, #0]
    8f72:	2b20      	cmp	r3, #32
    8f74:	d0f5      	beq.n	8f62 <create_name+0x162>
    8f76:	69bb      	ldr	r3, [r7, #24]
    8f78:	005b      	lsls	r3, r3, #1
    8f7a:	68fa      	ldr	r2, [r7, #12]
    8f7c:	18d3      	adds	r3, r2, r3
    8f7e:	881b      	ldrh	r3, [r3, #0]
    8f80:	2b2e      	cmp	r3, #46	; 0x2e
    8f82:	d0ee      	beq.n	8f62 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    8f84:	69bb      	ldr	r3, [r7, #24]
    8f86:	2b00      	cmp	r3, #0
    8f88:	d00b      	beq.n	8fa2 <create_name+0x1a2>
    8f8a:	2326      	movs	r3, #38	; 0x26
    8f8c:	18fb      	adds	r3, r7, r3
    8f8e:	2226      	movs	r2, #38	; 0x26
    8f90:	18ba      	adds	r2, r7, r2
    8f92:	7812      	ldrb	r2, [r2, #0]
    8f94:	2103      	movs	r1, #3
    8f96:	430a      	orrs	r2, r1
    8f98:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    8f9a:	e002      	b.n	8fa2 <create_name+0x1a2>
    8f9c:	697b      	ldr	r3, [r7, #20]
    8f9e:	3b01      	subs	r3, #1
    8fa0:	617b      	str	r3, [r7, #20]
    8fa2:	697b      	ldr	r3, [r7, #20]
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	d009      	beq.n	8fbc <create_name+0x1bc>
    8fa8:	697b      	ldr	r3, [r7, #20]
    8faa:	4a76      	ldr	r2, [pc, #472]	; (9184 <create_name+0x384>)
    8fac:	4694      	mov	ip, r2
    8fae:	4463      	add	r3, ip
    8fb0:	005b      	lsls	r3, r3, #1
    8fb2:	68fa      	ldr	r2, [r7, #12]
    8fb4:	18d3      	adds	r3, r2, r3
    8fb6:	881b      	ldrh	r3, [r3, #0]
    8fb8:	2b2e      	cmp	r3, #46	; 0x2e
    8fba:	d1ef      	bne.n	8f9c <create_name+0x19c>

	b = i = 0; ni = 8;
    8fbc:	2300      	movs	r3, #0
    8fbe:	623b      	str	r3, [r7, #32]
    8fc0:	2327      	movs	r3, #39	; 0x27
    8fc2:	18fb      	adds	r3, r7, r3
    8fc4:	2200      	movs	r2, #0
    8fc6:	701a      	strb	r2, [r3, #0]
    8fc8:	2308      	movs	r3, #8
    8fca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    8fcc:	69bb      	ldr	r3, [r7, #24]
    8fce:	1c5a      	adds	r2, r3, #1
    8fd0:	61ba      	str	r2, [r7, #24]
    8fd2:	005b      	lsls	r3, r3, #1
    8fd4:	68fa      	ldr	r2, [r7, #12]
    8fd6:	18d2      	adds	r2, r2, r3
    8fd8:	2324      	movs	r3, #36	; 0x24
    8fda:	18fb      	adds	r3, r7, r3
    8fdc:	8812      	ldrh	r2, [r2, #0]
    8fde:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    8fe0:	2324      	movs	r3, #36	; 0x24
    8fe2:	18fb      	adds	r3, r7, r3
    8fe4:	881b      	ldrh	r3, [r3, #0]
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d100      	bne.n	8fec <create_name+0x1ec>
    8fea:	e0c3      	b.n	9174 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    8fec:	2324      	movs	r3, #36	; 0x24
    8fee:	18fb      	adds	r3, r7, r3
    8ff0:	881b      	ldrh	r3, [r3, #0]
    8ff2:	2b20      	cmp	r3, #32
    8ff4:	d008      	beq.n	9008 <create_name+0x208>
    8ff6:	2324      	movs	r3, #36	; 0x24
    8ff8:	18fb      	adds	r3, r7, r3
    8ffa:	881b      	ldrh	r3, [r3, #0]
    8ffc:	2b2e      	cmp	r3, #46	; 0x2e
    8ffe:	d10c      	bne.n	901a <create_name+0x21a>
    9000:	69ba      	ldr	r2, [r7, #24]
    9002:	697b      	ldr	r3, [r7, #20]
    9004:	429a      	cmp	r2, r3
    9006:	d008      	beq.n	901a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    9008:	2326      	movs	r3, #38	; 0x26
    900a:	18fb      	adds	r3, r7, r3
    900c:	2226      	movs	r2, #38	; 0x26
    900e:	18ba      	adds	r2, r7, r2
    9010:	7812      	ldrb	r2, [r2, #0]
    9012:	2103      	movs	r1, #3
    9014:	430a      	orrs	r2, r1
    9016:	701a      	strb	r2, [r3, #0]
    9018:	e0ab      	b.n	9172 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    901a:	6a3a      	ldr	r2, [r7, #32]
    901c:	69fb      	ldr	r3, [r7, #28]
    901e:	429a      	cmp	r2, r3
    9020:	d203      	bcs.n	902a <create_name+0x22a>
    9022:	69ba      	ldr	r2, [r7, #24]
    9024:	697b      	ldr	r3, [r7, #20]
    9026:	429a      	cmp	r2, r3
    9028:	d12a      	bne.n	9080 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    902a:	69fb      	ldr	r3, [r7, #28]
    902c:	2b0b      	cmp	r3, #11
    902e:	d108      	bne.n	9042 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    9030:	2326      	movs	r3, #38	; 0x26
    9032:	18fb      	adds	r3, r7, r3
    9034:	2226      	movs	r2, #38	; 0x26
    9036:	18ba      	adds	r2, r7, r2
    9038:	7812      	ldrb	r2, [r2, #0]
    903a:	2103      	movs	r1, #3
    903c:	430a      	orrs	r2, r1
    903e:	701a      	strb	r2, [r3, #0]
    9040:	e0a9      	b.n	9196 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    9042:	69ba      	ldr	r2, [r7, #24]
    9044:	697b      	ldr	r3, [r7, #20]
    9046:	429a      	cmp	r2, r3
    9048:	d007      	beq.n	905a <create_name+0x25a>
    904a:	2326      	movs	r3, #38	; 0x26
    904c:	18fb      	adds	r3, r7, r3
    904e:	2226      	movs	r2, #38	; 0x26
    9050:	18ba      	adds	r2, r7, r2
    9052:	7812      	ldrb	r2, [r2, #0]
    9054:	2103      	movs	r1, #3
    9056:	430a      	orrs	r2, r1
    9058:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    905a:	69ba      	ldr	r2, [r7, #24]
    905c:	697b      	ldr	r3, [r7, #20]
    905e:	429a      	cmp	r2, r3
    9060:	d900      	bls.n	9064 <create_name+0x264>
    9062:	e097      	b.n	9194 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    9064:	697b      	ldr	r3, [r7, #20]
    9066:	61bb      	str	r3, [r7, #24]
    9068:	2308      	movs	r3, #8
    906a:	623b      	str	r3, [r7, #32]
    906c:	230b      	movs	r3, #11
    906e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    9070:	2327      	movs	r3, #39	; 0x27
    9072:	18fb      	adds	r3, r7, r3
    9074:	2227      	movs	r2, #39	; 0x27
    9076:	18ba      	adds	r2, r7, r2
    9078:	7812      	ldrb	r2, [r2, #0]
    907a:	0092      	lsls	r2, r2, #2
    907c:	701a      	strb	r2, [r3, #0]
    907e:	e078      	b.n	9172 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    9080:	2324      	movs	r3, #36	; 0x24
    9082:	18fb      	adds	r3, r7, r3
    9084:	881b      	ldrh	r3, [r3, #0]
    9086:	2b7f      	cmp	r3, #127	; 0x7f
    9088:	d920      	bls.n	90cc <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    908a:	2324      	movs	r3, #36	; 0x24
    908c:	18fc      	adds	r4, r7, r3
    908e:	2324      	movs	r3, #36	; 0x24
    9090:	18fb      	adds	r3, r7, r3
    9092:	881b      	ldrh	r3, [r3, #0]
    9094:	2100      	movs	r1, #0
    9096:	0018      	movs	r0, r3
    9098:	4b37      	ldr	r3, [pc, #220]	; (9178 <create_name+0x378>)
    909a:	4798      	blx	r3
    909c:	0003      	movs	r3, r0
    909e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    90a0:	2324      	movs	r3, #36	; 0x24
    90a2:	18fb      	adds	r3, r7, r3
    90a4:	881b      	ldrh	r3, [r3, #0]
    90a6:	2b00      	cmp	r3, #0
    90a8:	d008      	beq.n	90bc <create_name+0x2bc>
    90aa:	2324      	movs	r3, #36	; 0x24
    90ac:	18fb      	adds	r3, r7, r3
    90ae:	881b      	ldrh	r3, [r3, #0]
    90b0:	3b80      	subs	r3, #128	; 0x80
    90b2:	4a36      	ldr	r2, [pc, #216]	; (918c <create_name+0x38c>)
    90b4:	5cd2      	ldrb	r2, [r2, r3]
    90b6:	2324      	movs	r3, #36	; 0x24
    90b8:	18fb      	adds	r3, r7, r3
    90ba:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    90bc:	2326      	movs	r3, #38	; 0x26
    90be:	18fb      	adds	r3, r7, r3
    90c0:	2226      	movs	r2, #38	; 0x26
    90c2:	18ba      	adds	r2, r7, r2
    90c4:	7812      	ldrb	r2, [r2, #0]
    90c6:	2102      	movs	r1, #2
    90c8:	430a      	orrs	r2, r1
    90ca:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    90cc:	2324      	movs	r3, #36	; 0x24
    90ce:	18fb      	adds	r3, r7, r3
    90d0:	881b      	ldrh	r3, [r3, #0]
    90d2:	2b00      	cmp	r3, #0
    90d4:	d009      	beq.n	90ea <create_name+0x2ea>
    90d6:	2324      	movs	r3, #36	; 0x24
    90d8:	18fb      	adds	r3, r7, r3
    90da:	881a      	ldrh	r2, [r3, #0]
    90dc:	4b2c      	ldr	r3, [pc, #176]	; (9190 <create_name+0x390>)
    90de:	0011      	movs	r1, r2
    90e0:	0018      	movs	r0, r3
    90e2:	4b27      	ldr	r3, [pc, #156]	; (9180 <create_name+0x380>)
    90e4:	4798      	blx	r3
    90e6:	1e03      	subs	r3, r0, #0
    90e8:	d00c      	beq.n	9104 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    90ea:	2324      	movs	r3, #36	; 0x24
    90ec:	18fb      	adds	r3, r7, r3
    90ee:	225f      	movs	r2, #95	; 0x5f
    90f0:	801a      	strh	r2, [r3, #0]
    90f2:	2326      	movs	r3, #38	; 0x26
    90f4:	18fb      	adds	r3, r7, r3
    90f6:	2226      	movs	r2, #38	; 0x26
    90f8:	18ba      	adds	r2, r7, r2
    90fa:	7812      	ldrb	r2, [r2, #0]
    90fc:	2103      	movs	r1, #3
    90fe:	430a      	orrs	r2, r1
    9100:	701a      	strb	r2, [r3, #0]
    9102:	e02b      	b.n	915c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    9104:	2324      	movs	r3, #36	; 0x24
    9106:	18fb      	adds	r3, r7, r3
    9108:	881b      	ldrh	r3, [r3, #0]
    910a:	2b40      	cmp	r3, #64	; 0x40
    910c:	d90d      	bls.n	912a <create_name+0x32a>
    910e:	2324      	movs	r3, #36	; 0x24
    9110:	18fb      	adds	r3, r7, r3
    9112:	881b      	ldrh	r3, [r3, #0]
    9114:	2b5a      	cmp	r3, #90	; 0x5a
    9116:	d808      	bhi.n	912a <create_name+0x32a>
					b |= 2;
    9118:	2327      	movs	r3, #39	; 0x27
    911a:	18fb      	adds	r3, r7, r3
    911c:	2227      	movs	r2, #39	; 0x27
    911e:	18ba      	adds	r2, r7, r2
    9120:	7812      	ldrb	r2, [r2, #0]
    9122:	2102      	movs	r1, #2
    9124:	430a      	orrs	r2, r1
    9126:	701a      	strb	r2, [r3, #0]
    9128:	e018      	b.n	915c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    912a:	2324      	movs	r3, #36	; 0x24
    912c:	18fb      	adds	r3, r7, r3
    912e:	881b      	ldrh	r3, [r3, #0]
    9130:	2b60      	cmp	r3, #96	; 0x60
    9132:	d913      	bls.n	915c <create_name+0x35c>
    9134:	2324      	movs	r3, #36	; 0x24
    9136:	18fb      	adds	r3, r7, r3
    9138:	881b      	ldrh	r3, [r3, #0]
    913a:	2b7a      	cmp	r3, #122	; 0x7a
    913c:	d80e      	bhi.n	915c <create_name+0x35c>
						b |= 1; w -= 0x20;
    913e:	2327      	movs	r3, #39	; 0x27
    9140:	18fb      	adds	r3, r7, r3
    9142:	2227      	movs	r2, #39	; 0x27
    9144:	18ba      	adds	r2, r7, r2
    9146:	7812      	ldrb	r2, [r2, #0]
    9148:	2101      	movs	r1, #1
    914a:	430a      	orrs	r2, r1
    914c:	701a      	strb	r2, [r3, #0]
    914e:	2324      	movs	r3, #36	; 0x24
    9150:	18fb      	adds	r3, r7, r3
    9152:	2224      	movs	r2, #36	; 0x24
    9154:	18ba      	adds	r2, r7, r2
    9156:	8812      	ldrh	r2, [r2, #0]
    9158:	3a20      	subs	r2, #32
    915a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    915c:	687b      	ldr	r3, [r7, #4]
    915e:	699a      	ldr	r2, [r3, #24]
    9160:	6a3b      	ldr	r3, [r7, #32]
    9162:	1c59      	adds	r1, r3, #1
    9164:	6239      	str	r1, [r7, #32]
    9166:	18d3      	adds	r3, r2, r3
    9168:	2224      	movs	r2, #36	; 0x24
    916a:	18ba      	adds	r2, r7, r2
    916c:	8812      	ldrh	r2, [r2, #0]
    916e:	b2d2      	uxtb	r2, r2
    9170:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    9172:	e72b      	b.n	8fcc <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    9174:	46c0      	nop			; (mov r8, r8)
    9176:	e00e      	b.n	9196 <create_name+0x396>
    9178:	0000aac9 	.word	0x0000aac9
    917c:	0000ca14 	.word	0x0000ca14
    9180:	00007623 	.word	0x00007623
    9184:	7fffffff 	.word	0x7fffffff
    9188:	000075a9 	.word	0x000075a9
    918c:	0000ca5c 	.word	0x0000ca5c
    9190:	0000ca20 	.word	0x0000ca20
			if (si > di) break;			/* No extension */
    9194:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    9196:	687b      	ldr	r3, [r7, #4]
    9198:	699b      	ldr	r3, [r3, #24]
    919a:	781b      	ldrb	r3, [r3, #0]
    919c:	2be5      	cmp	r3, #229	; 0xe5
    919e:	d103      	bne.n	91a8 <create_name+0x3a8>
    91a0:	687b      	ldr	r3, [r7, #4]
    91a2:	699b      	ldr	r3, [r3, #24]
    91a4:	2205      	movs	r2, #5
    91a6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    91a8:	69fb      	ldr	r3, [r7, #28]
    91aa:	2b08      	cmp	r3, #8
    91ac:	d106      	bne.n	91bc <create_name+0x3bc>
    91ae:	2327      	movs	r3, #39	; 0x27
    91b0:	18fb      	adds	r3, r7, r3
    91b2:	2227      	movs	r2, #39	; 0x27
    91b4:	18ba      	adds	r2, r7, r2
    91b6:	7812      	ldrb	r2, [r2, #0]
    91b8:	0092      	lsls	r2, r2, #2
    91ba:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    91bc:	2327      	movs	r3, #39	; 0x27
    91be:	18fb      	adds	r3, r7, r3
    91c0:	781b      	ldrb	r3, [r3, #0]
    91c2:	220c      	movs	r2, #12
    91c4:	4013      	ands	r3, r2
    91c6:	2b0c      	cmp	r3, #12
    91c8:	d006      	beq.n	91d8 <create_name+0x3d8>
    91ca:	2327      	movs	r3, #39	; 0x27
    91cc:	18fb      	adds	r3, r7, r3
    91ce:	781b      	ldrb	r3, [r3, #0]
    91d0:	2203      	movs	r2, #3
    91d2:	4013      	ands	r3, r2
    91d4:	2b03      	cmp	r3, #3
    91d6:	d107      	bne.n	91e8 <create_name+0x3e8>
		cf |= NS_LFN;
    91d8:	2326      	movs	r3, #38	; 0x26
    91da:	18fb      	adds	r3, r7, r3
    91dc:	2226      	movs	r2, #38	; 0x26
    91de:	18ba      	adds	r2, r7, r2
    91e0:	7812      	ldrb	r2, [r2, #0]
    91e2:	2102      	movs	r1, #2
    91e4:	430a      	orrs	r2, r1
    91e6:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    91e8:	2326      	movs	r3, #38	; 0x26
    91ea:	18fb      	adds	r3, r7, r3
    91ec:	781b      	ldrb	r3, [r3, #0]
    91ee:	2202      	movs	r2, #2
    91f0:	4013      	ands	r3, r2
    91f2:	d11d      	bne.n	9230 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    91f4:	2327      	movs	r3, #39	; 0x27
    91f6:	18fb      	adds	r3, r7, r3
    91f8:	781b      	ldrb	r3, [r3, #0]
    91fa:	2203      	movs	r2, #3
    91fc:	4013      	ands	r3, r2
    91fe:	2b01      	cmp	r3, #1
    9200:	d107      	bne.n	9212 <create_name+0x412>
    9202:	2326      	movs	r3, #38	; 0x26
    9204:	18fb      	adds	r3, r7, r3
    9206:	2226      	movs	r2, #38	; 0x26
    9208:	18ba      	adds	r2, r7, r2
    920a:	7812      	ldrb	r2, [r2, #0]
    920c:	2110      	movs	r1, #16
    920e:	430a      	orrs	r2, r1
    9210:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    9212:	2327      	movs	r3, #39	; 0x27
    9214:	18fb      	adds	r3, r7, r3
    9216:	781b      	ldrb	r3, [r3, #0]
    9218:	220c      	movs	r2, #12
    921a:	4013      	ands	r3, r2
    921c:	2b04      	cmp	r3, #4
    921e:	d107      	bne.n	9230 <create_name+0x430>
    9220:	2326      	movs	r3, #38	; 0x26
    9222:	18fb      	adds	r3, r7, r3
    9224:	2226      	movs	r2, #38	; 0x26
    9226:	18ba      	adds	r2, r7, r2
    9228:	7812      	ldrb	r2, [r2, #0]
    922a:	2108      	movs	r1, #8
    922c:	430a      	orrs	r2, r1
    922e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    9230:	687b      	ldr	r3, [r7, #4]
    9232:	699b      	ldr	r3, [r3, #24]
    9234:	330b      	adds	r3, #11
    9236:	2226      	movs	r2, #38	; 0x26
    9238:	18ba      	adds	r2, r7, r2
    923a:	7812      	ldrb	r2, [r2, #0]
    923c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    923e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    9240:	0018      	movs	r0, r3
    9242:	46bd      	mov	sp, r7
    9244:	b00b      	add	sp, #44	; 0x2c
    9246:	bd90      	pop	{r4, r7, pc}

00009248 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    9248:	b590      	push	{r4, r7, lr}
    924a:	b085      	sub	sp, #20
    924c:	af00      	add	r7, sp, #0
    924e:	6078      	str	r0, [r7, #4]
    9250:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    9252:	683b      	ldr	r3, [r7, #0]
    9254:	781b      	ldrb	r3, [r3, #0]
    9256:	2b2f      	cmp	r3, #47	; 0x2f
    9258:	d003      	beq.n	9262 <follow_path+0x1a>
    925a:	683b      	ldr	r3, [r7, #0]
    925c:	781b      	ldrb	r3, [r3, #0]
    925e:	2b5c      	cmp	r3, #92	; 0x5c
    9260:	d102      	bne.n	9268 <follow_path+0x20>
		path++;
    9262:	683b      	ldr	r3, [r7, #0]
    9264:	3301      	adds	r3, #1
    9266:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    9268:	687b      	ldr	r3, [r7, #4]
    926a:	2200      	movs	r2, #0
    926c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    926e:	683b      	ldr	r3, [r7, #0]
    9270:	781b      	ldrb	r3, [r3, #0]
    9272:	2b1f      	cmp	r3, #31
    9274:	d80c      	bhi.n	9290 <follow_path+0x48>
		res = dir_sdi(dj, 0);
    9276:	230f      	movs	r3, #15
    9278:	18fc      	adds	r4, r7, r3
    927a:	687b      	ldr	r3, [r7, #4]
    927c:	2100      	movs	r1, #0
    927e:	0018      	movs	r0, r3
    9280:	4b3c      	ldr	r3, [pc, #240]	; (9374 <follow_path+0x12c>)
    9282:	4798      	blx	r3
    9284:	0003      	movs	r3, r0
    9286:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    9288:	687b      	ldr	r3, [r7, #4]
    928a:	2200      	movs	r2, #0
    928c:	615a      	str	r2, [r3, #20]
    928e:	e06a      	b.n	9366 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    9290:	230f      	movs	r3, #15
    9292:	18fc      	adds	r4, r7, r3
    9294:	003a      	movs	r2, r7
    9296:	687b      	ldr	r3, [r7, #4]
    9298:	0011      	movs	r1, r2
    929a:	0018      	movs	r0, r3
    929c:	4b36      	ldr	r3, [pc, #216]	; (9378 <follow_path+0x130>)
    929e:	4798      	blx	r3
    92a0:	0003      	movs	r3, r0
    92a2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    92a4:	230f      	movs	r3, #15
    92a6:	18fb      	adds	r3, r7, r3
    92a8:	781b      	ldrb	r3, [r3, #0]
    92aa:	2b00      	cmp	r3, #0
    92ac:	d154      	bne.n	9358 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    92ae:	230f      	movs	r3, #15
    92b0:	18fc      	adds	r4, r7, r3
    92b2:	687b      	ldr	r3, [r7, #4]
    92b4:	0018      	movs	r0, r3
    92b6:	4b31      	ldr	r3, [pc, #196]	; (937c <follow_path+0x134>)
    92b8:	4798      	blx	r3
    92ba:	0003      	movs	r3, r0
    92bc:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    92be:	687b      	ldr	r3, [r7, #4]
    92c0:	699a      	ldr	r2, [r3, #24]
    92c2:	230e      	movs	r3, #14
    92c4:	18fb      	adds	r3, r7, r3
    92c6:	7ad2      	ldrb	r2, [r2, #11]
    92c8:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    92ca:	230f      	movs	r3, #15
    92cc:	18fb      	adds	r3, r7, r3
    92ce:	781b      	ldrb	r3, [r3, #0]
    92d0:	2b00      	cmp	r3, #0
    92d2:	d00f      	beq.n	92f4 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    92d4:	230f      	movs	r3, #15
    92d6:	18fb      	adds	r3, r7, r3
    92d8:	781b      	ldrb	r3, [r3, #0]
    92da:	2b04      	cmp	r3, #4
    92dc:	d13e      	bne.n	935c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    92de:	230e      	movs	r3, #14
    92e0:	18fb      	adds	r3, r7, r3
    92e2:	781b      	ldrb	r3, [r3, #0]
    92e4:	2204      	movs	r2, #4
    92e6:	4013      	ands	r3, r2
    92e8:	d13a      	bne.n	9360 <follow_path+0x118>
    92ea:	230f      	movs	r3, #15
    92ec:	18fb      	adds	r3, r7, r3
    92ee:	2205      	movs	r2, #5
    92f0:	701a      	strb	r2, [r3, #0]
				}
				break;
    92f2:	e035      	b.n	9360 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    92f4:	230e      	movs	r3, #14
    92f6:	18fb      	adds	r3, r7, r3
    92f8:	781b      	ldrb	r3, [r3, #0]
    92fa:	2204      	movs	r2, #4
    92fc:	4013      	ands	r3, r2
    92fe:	d131      	bne.n	9364 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    9300:	687b      	ldr	r3, [r7, #4]
    9302:	695b      	ldr	r3, [r3, #20]
    9304:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    9306:	68bb      	ldr	r3, [r7, #8]
    9308:	330b      	adds	r3, #11
    930a:	781b      	ldrb	r3, [r3, #0]
    930c:	001a      	movs	r2, r3
    930e:	2310      	movs	r3, #16
    9310:	4013      	ands	r3, r2
    9312:	d104      	bne.n	931e <follow_path+0xd6>
				res = FR_NO_PATH; break;
    9314:	230f      	movs	r3, #15
    9316:	18fb      	adds	r3, r7, r3
    9318:	2205      	movs	r2, #5
    931a:	701a      	strb	r2, [r3, #0]
    931c:	e023      	b.n	9366 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    931e:	68bb      	ldr	r3, [r7, #8]
    9320:	3315      	adds	r3, #21
    9322:	781b      	ldrb	r3, [r3, #0]
    9324:	021b      	lsls	r3, r3, #8
    9326:	b21a      	sxth	r2, r3
    9328:	68bb      	ldr	r3, [r7, #8]
    932a:	3314      	adds	r3, #20
    932c:	781b      	ldrb	r3, [r3, #0]
    932e:	b21b      	sxth	r3, r3
    9330:	4313      	orrs	r3, r2
    9332:	b21b      	sxth	r3, r3
    9334:	b29b      	uxth	r3, r3
    9336:	041b      	lsls	r3, r3, #16
    9338:	68ba      	ldr	r2, [r7, #8]
    933a:	321b      	adds	r2, #27
    933c:	7812      	ldrb	r2, [r2, #0]
    933e:	0212      	lsls	r2, r2, #8
    9340:	b211      	sxth	r1, r2
    9342:	68ba      	ldr	r2, [r7, #8]
    9344:	321a      	adds	r2, #26
    9346:	7812      	ldrb	r2, [r2, #0]
    9348:	b212      	sxth	r2, r2
    934a:	430a      	orrs	r2, r1
    934c:	b212      	sxth	r2, r2
    934e:	b292      	uxth	r2, r2
    9350:	431a      	orrs	r2, r3
    9352:	687b      	ldr	r3, [r7, #4]
    9354:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    9356:	e79b      	b.n	9290 <follow_path+0x48>
			if (res != FR_OK) break;
    9358:	46c0      	nop			; (mov r8, r8)
    935a:	e004      	b.n	9366 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    935c:	46c0      	nop			; (mov r8, r8)
    935e:	e002      	b.n	9366 <follow_path+0x11e>
				break;
    9360:	46c0      	nop			; (mov r8, r8)
    9362:	e000      	b.n	9366 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    9364:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    9366:	230f      	movs	r3, #15
    9368:	18fb      	adds	r3, r7, r3
    936a:	781b      	ldrb	r3, [r3, #0]
}
    936c:	0018      	movs	r0, r3
    936e:	46bd      	mov	sp, r7
    9370:	b005      	add	sp, #20
    9372:	bd90      	pop	{r4, r7, pc}
    9374:	00007e99 	.word	0x00007e99
    9378:	00008e01 	.word	0x00008e01
    937c:	00008601 	.word	0x00008601

00009380 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    9380:	b590      	push	{r4, r7, lr}
    9382:	b083      	sub	sp, #12
    9384:	af00      	add	r7, sp, #0
    9386:	6078      	str	r0, [r7, #4]
    9388:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    938a:	687b      	ldr	r3, [r7, #4]
    938c:	7858      	ldrb	r0, [r3, #1]
    938e:	687b      	ldr	r3, [r7, #4]
    9390:	3330      	adds	r3, #48	; 0x30
    9392:	0019      	movs	r1, r3
    9394:	683a      	ldr	r2, [r7, #0]
    9396:	2301      	movs	r3, #1
    9398:	4c2a      	ldr	r4, [pc, #168]	; (9444 <check_fs+0xc4>)
    939a:	47a0      	blx	r4
    939c:	1e03      	subs	r3, r0, #0
    939e:	d001      	beq.n	93a4 <check_fs+0x24>
		return 3;
    93a0:	2303      	movs	r3, #3
    93a2:	e04b      	b.n	943c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	4a28      	ldr	r2, [pc, #160]	; (9448 <check_fs+0xc8>)
    93a8:	4694      	mov	ip, r2
    93aa:	4463      	add	r3, ip
    93ac:	3301      	adds	r3, #1
    93ae:	781b      	ldrb	r3, [r3, #0]
    93b0:	021b      	lsls	r3, r3, #8
    93b2:	b21a      	sxth	r2, r3
    93b4:	687b      	ldr	r3, [r7, #4]
    93b6:	4924      	ldr	r1, [pc, #144]	; (9448 <check_fs+0xc8>)
    93b8:	5c5b      	ldrb	r3, [r3, r1]
    93ba:	b21b      	sxth	r3, r3
    93bc:	4313      	orrs	r3, r2
    93be:	b21b      	sxth	r3, r3
    93c0:	4a22      	ldr	r2, [pc, #136]	; (944c <check_fs+0xcc>)
    93c2:	4293      	cmp	r3, r2
    93c4:	d001      	beq.n	93ca <check_fs+0x4a>
		return 2;
    93c6:	2302      	movs	r3, #2
    93c8:	e038      	b.n	943c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    93ca:	687b      	ldr	r3, [r7, #4]
    93cc:	3366      	adds	r3, #102	; 0x66
    93ce:	3303      	adds	r3, #3
    93d0:	781b      	ldrb	r3, [r3, #0]
    93d2:	061a      	lsls	r2, r3, #24
    93d4:	687b      	ldr	r3, [r7, #4]
    93d6:	3366      	adds	r3, #102	; 0x66
    93d8:	3302      	adds	r3, #2
    93da:	781b      	ldrb	r3, [r3, #0]
    93dc:	041b      	lsls	r3, r3, #16
    93de:	4313      	orrs	r3, r2
    93e0:	687a      	ldr	r2, [r7, #4]
    93e2:	3266      	adds	r2, #102	; 0x66
    93e4:	3201      	adds	r2, #1
    93e6:	7812      	ldrb	r2, [r2, #0]
    93e8:	0212      	lsls	r2, r2, #8
    93ea:	4313      	orrs	r3, r2
    93ec:	687a      	ldr	r2, [r7, #4]
    93ee:	2166      	movs	r1, #102	; 0x66
    93f0:	5c52      	ldrb	r2, [r2, r1]
    93f2:	4313      	orrs	r3, r2
    93f4:	021b      	lsls	r3, r3, #8
    93f6:	0a1b      	lsrs	r3, r3, #8
    93f8:	4a15      	ldr	r2, [pc, #84]	; (9450 <check_fs+0xd0>)
    93fa:	4293      	cmp	r3, r2
    93fc:	d101      	bne.n	9402 <check_fs+0x82>
		return 0;
    93fe:	2300      	movs	r3, #0
    9400:	e01c      	b.n	943c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    9402:	687b      	ldr	r3, [r7, #4]
    9404:	3382      	adds	r3, #130	; 0x82
    9406:	3303      	adds	r3, #3
    9408:	781b      	ldrb	r3, [r3, #0]
    940a:	061a      	lsls	r2, r3, #24
    940c:	687b      	ldr	r3, [r7, #4]
    940e:	3382      	adds	r3, #130	; 0x82
    9410:	3302      	adds	r3, #2
    9412:	781b      	ldrb	r3, [r3, #0]
    9414:	041b      	lsls	r3, r3, #16
    9416:	4313      	orrs	r3, r2
    9418:	687a      	ldr	r2, [r7, #4]
    941a:	3282      	adds	r2, #130	; 0x82
    941c:	3201      	adds	r2, #1
    941e:	7812      	ldrb	r2, [r2, #0]
    9420:	0212      	lsls	r2, r2, #8
    9422:	4313      	orrs	r3, r2
    9424:	687a      	ldr	r2, [r7, #4]
    9426:	2182      	movs	r1, #130	; 0x82
    9428:	5c52      	ldrb	r2, [r2, r1]
    942a:	4313      	orrs	r3, r2
    942c:	021b      	lsls	r3, r3, #8
    942e:	0a1b      	lsrs	r3, r3, #8
    9430:	4a07      	ldr	r2, [pc, #28]	; (9450 <check_fs+0xd0>)
    9432:	4293      	cmp	r3, r2
    9434:	d101      	bne.n	943a <check_fs+0xba>
		return 0;
    9436:	2300      	movs	r3, #0
    9438:	e000      	b.n	943c <check_fs+0xbc>

	return 1;
    943a:	2301      	movs	r3, #1
}
    943c:	0018      	movs	r0, r3
    943e:	46bd      	mov	sp, r7
    9440:	b003      	add	sp, #12
    9442:	bd90      	pop	{r4, r7, pc}
    9444:	00007269 	.word	0x00007269
    9448:	0000022e 	.word	0x0000022e
    944c:	ffffaa55 	.word	0xffffaa55
    9450:	00544146 	.word	0x00544146

00009454 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    9454:	b590      	push	{r4, r7, lr}
    9456:	b093      	sub	sp, #76	; 0x4c
    9458:	af00      	add	r7, sp, #0
    945a:	60f8      	str	r0, [r7, #12]
    945c:	60b9      	str	r1, [r7, #8]
    945e:	1dfb      	adds	r3, r7, #7
    9460:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    9462:	68fb      	ldr	r3, [r7, #12]
    9464:	681b      	ldr	r3, [r3, #0]
    9466:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    9468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	3b30      	subs	r3, #48	; 0x30
    946e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    9470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9472:	2b09      	cmp	r3, #9
    9474:	d80b      	bhi.n	948e <chk_mounted+0x3a>
    9476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9478:	3301      	adds	r3, #1
    947a:	781b      	ldrb	r3, [r3, #0]
    947c:	2b3a      	cmp	r3, #58	; 0x3a
    947e:	d106      	bne.n	948e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    9480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9482:	3302      	adds	r3, #2
    9484:	62fb      	str	r3, [r7, #44]	; 0x2c
    9486:	68fb      	ldr	r3, [r7, #12]
    9488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    948a:	601a      	str	r2, [r3, #0]
    948c:	e001      	b.n	9492 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    948e:	2300      	movs	r3, #0
    9490:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    9492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9494:	2b00      	cmp	r3, #0
    9496:	d001      	beq.n	949c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    9498:	230b      	movs	r3, #11
    949a:	e2af      	b.n	99fc <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    949c:	4bc5      	ldr	r3, [pc, #788]	; (97b4 <chk_mounted+0x360>)
    949e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    94a0:	0092      	lsls	r2, r2, #2
    94a2:	58d3      	ldr	r3, [r2, r3]
    94a4:	62bb      	str	r3, [r7, #40]	; 0x28
    94a6:	68bb      	ldr	r3, [r7, #8]
    94a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    94aa:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    94ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94ae:	2b00      	cmp	r3, #0
    94b0:	d101      	bne.n	94b6 <chk_mounted+0x62>
    94b2:	230c      	movs	r3, #12
    94b4:	e2a2      	b.n	99fc <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    94b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94b8:	781b      	ldrb	r3, [r3, #0]
    94ba:	2b00      	cmp	r3, #0
    94bc:	d01c      	beq.n	94f8 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    94be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94c0:	785b      	ldrb	r3, [r3, #1]
    94c2:	2227      	movs	r2, #39	; 0x27
    94c4:	18bc      	adds	r4, r7, r2
    94c6:	0018      	movs	r0, r3
    94c8:	4bbb      	ldr	r3, [pc, #748]	; (97b8 <chk_mounted+0x364>)
    94ca:	4798      	blx	r3
    94cc:	0003      	movs	r3, r0
    94ce:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    94d0:	2327      	movs	r3, #39	; 0x27
    94d2:	18fb      	adds	r3, r7, r3
    94d4:	781b      	ldrb	r3, [r3, #0]
    94d6:	2201      	movs	r2, #1
    94d8:	4013      	ands	r3, r2
    94da:	d10d      	bne.n	94f8 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    94dc:	1dfb      	adds	r3, r7, #7
    94de:	781b      	ldrb	r3, [r3, #0]
    94e0:	2b00      	cmp	r3, #0
    94e2:	d007      	beq.n	94f4 <chk_mounted+0xa0>
    94e4:	2327      	movs	r3, #39	; 0x27
    94e6:	18fb      	adds	r3, r7, r3
    94e8:	781b      	ldrb	r3, [r3, #0]
    94ea:	2204      	movs	r2, #4
    94ec:	4013      	ands	r3, r2
    94ee:	d001      	beq.n	94f4 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    94f0:	230a      	movs	r3, #10
    94f2:	e283      	b.n	99fc <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    94f4:	2300      	movs	r3, #0
    94f6:	e281      	b.n	99fc <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    94f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94fa:	2200      	movs	r2, #0
    94fc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    94fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9500:	b2da      	uxtb	r2, r3
    9502:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9504:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    9506:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9508:	785b      	ldrb	r3, [r3, #1]
    950a:	2227      	movs	r2, #39	; 0x27
    950c:	18bc      	adds	r4, r7, r2
    950e:	0018      	movs	r0, r3
    9510:	4baa      	ldr	r3, [pc, #680]	; (97bc <chk_mounted+0x368>)
    9512:	4798      	blx	r3
    9514:	0003      	movs	r3, r0
    9516:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    9518:	2327      	movs	r3, #39	; 0x27
    951a:	18fb      	adds	r3, r7, r3
    951c:	781b      	ldrb	r3, [r3, #0]
    951e:	2201      	movs	r2, #1
    9520:	4013      	ands	r3, r2
    9522:	d001      	beq.n	9528 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    9524:	2303      	movs	r3, #3
    9526:	e269      	b.n	99fc <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    9528:	1dfb      	adds	r3, r7, #7
    952a:	781b      	ldrb	r3, [r3, #0]
    952c:	2b00      	cmp	r3, #0
    952e:	d007      	beq.n	9540 <chk_mounted+0xec>
    9530:	2327      	movs	r3, #39	; 0x27
    9532:	18fb      	adds	r3, r7, r3
    9534:	781b      	ldrb	r3, [r3, #0]
    9536:	2204      	movs	r2, #4
    9538:	4013      	ands	r3, r2
    953a:	d001      	beq.n	9540 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    953c:	230a      	movs	r3, #10
    953e:	e25d      	b.n	99fc <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    9540:	2300      	movs	r3, #0
    9542:	63fb      	str	r3, [r7, #60]	; 0x3c
    9544:	2347      	movs	r3, #71	; 0x47
    9546:	18fc      	adds	r4, r7, r3
    9548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    954c:	0011      	movs	r1, r2
    954e:	0018      	movs	r0, r3
    9550:	4b9b      	ldr	r3, [pc, #620]	; (97c0 <chk_mounted+0x36c>)
    9552:	4798      	blx	r3
    9554:	0003      	movs	r3, r0
    9556:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    9558:	2347      	movs	r3, #71	; 0x47
    955a:	18fb      	adds	r3, r7, r3
    955c:	781b      	ldrb	r3, [r3, #0]
    955e:	2b01      	cmp	r3, #1
    9560:	d13b      	bne.n	95da <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    9562:	2346      	movs	r3, #70	; 0x46
    9564:	18fb      	adds	r3, r7, r3
    9566:	2200      	movs	r2, #0
    9568:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    956a:	2346      	movs	r3, #70	; 0x46
    956c:	18fb      	adds	r3, r7, r3
    956e:	781b      	ldrb	r3, [r3, #0]
    9570:	2b00      	cmp	r3, #0
    9572:	d006      	beq.n	9582 <chk_mounted+0x12e>
    9574:	2346      	movs	r3, #70	; 0x46
    9576:	18fb      	adds	r3, r7, r3
    9578:	781a      	ldrb	r2, [r3, #0]
    957a:	2346      	movs	r3, #70	; 0x46
    957c:	18fb      	adds	r3, r7, r3
    957e:	3a01      	subs	r2, #1
    9580:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    9582:	2346      	movs	r3, #70	; 0x46
    9584:	18fb      	adds	r3, r7, r3
    9586:	781b      	ldrb	r3, [r3, #0]
    9588:	011b      	lsls	r3, r3, #4
    958a:	33bf      	adds	r3, #191	; 0xbf
    958c:	33ff      	adds	r3, #255	; 0xff
    958e:	3330      	adds	r3, #48	; 0x30
    9590:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9592:	18d3      	adds	r3, r2, r3
    9594:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    9596:	6a3b      	ldr	r3, [r7, #32]
    9598:	3304      	adds	r3, #4
    959a:	781b      	ldrb	r3, [r3, #0]
    959c:	2b00      	cmp	r3, #0
    959e:	d01c      	beq.n	95da <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    95a0:	6a3b      	ldr	r3, [r7, #32]
    95a2:	330b      	adds	r3, #11
    95a4:	781b      	ldrb	r3, [r3, #0]
    95a6:	061a      	lsls	r2, r3, #24
    95a8:	6a3b      	ldr	r3, [r7, #32]
    95aa:	330a      	adds	r3, #10
    95ac:	781b      	ldrb	r3, [r3, #0]
    95ae:	041b      	lsls	r3, r3, #16
    95b0:	4313      	orrs	r3, r2
    95b2:	6a3a      	ldr	r2, [r7, #32]
    95b4:	3209      	adds	r2, #9
    95b6:	7812      	ldrb	r2, [r2, #0]
    95b8:	0212      	lsls	r2, r2, #8
    95ba:	4313      	orrs	r3, r2
    95bc:	6a3a      	ldr	r2, [r7, #32]
    95be:	3208      	adds	r2, #8
    95c0:	7812      	ldrb	r2, [r2, #0]
    95c2:	4313      	orrs	r3, r2
    95c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    95c6:	2347      	movs	r3, #71	; 0x47
    95c8:	18fc      	adds	r4, r7, r3
    95ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    95cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95ce:	0011      	movs	r1, r2
    95d0:	0018      	movs	r0, r3
    95d2:	4b7b      	ldr	r3, [pc, #492]	; (97c0 <chk_mounted+0x36c>)
    95d4:	4798      	blx	r3
    95d6:	0003      	movs	r3, r0
    95d8:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    95da:	2347      	movs	r3, #71	; 0x47
    95dc:	18fb      	adds	r3, r7, r3
    95de:	781b      	ldrb	r3, [r3, #0]
    95e0:	2b03      	cmp	r3, #3
    95e2:	d101      	bne.n	95e8 <chk_mounted+0x194>
    95e4:	2301      	movs	r3, #1
    95e6:	e209      	b.n	99fc <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    95e8:	2347      	movs	r3, #71	; 0x47
    95ea:	18fb      	adds	r3, r7, r3
    95ec:	781b      	ldrb	r3, [r3, #0]
    95ee:	2b00      	cmp	r3, #0
    95f0:	d001      	beq.n	95f6 <chk_mounted+0x1a2>
    95f2:	230d      	movs	r3, #13
    95f4:	e202      	b.n	99fc <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    95f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95f8:	223c      	movs	r2, #60	; 0x3c
    95fa:	5c9b      	ldrb	r3, [r3, r2]
    95fc:	021b      	lsls	r3, r3, #8
    95fe:	b21a      	sxth	r2, r3
    9600:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9602:	213b      	movs	r1, #59	; 0x3b
    9604:	5c5b      	ldrb	r3, [r3, r1]
    9606:	b21b      	sxth	r3, r3
    9608:	4313      	orrs	r3, r2
    960a:	b21a      	sxth	r2, r3
    960c:	2380      	movs	r3, #128	; 0x80
    960e:	009b      	lsls	r3, r3, #2
    9610:	429a      	cmp	r2, r3
    9612:	d001      	beq.n	9618 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    9614:	230d      	movs	r3, #13
    9616:	e1f1      	b.n	99fc <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    9618:	6abb      	ldr	r3, [r7, #40]	; 0x28
    961a:	2247      	movs	r2, #71	; 0x47
    961c:	5c9b      	ldrb	r3, [r3, r2]
    961e:	021b      	lsls	r3, r3, #8
    9620:	b21a      	sxth	r2, r3
    9622:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9624:	2146      	movs	r1, #70	; 0x46
    9626:	5c5b      	ldrb	r3, [r3, r1]
    9628:	b21b      	sxth	r3, r3
    962a:	4313      	orrs	r3, r2
    962c:	b21b      	sxth	r3, r3
    962e:	b29b      	uxth	r3, r3
    9630:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    9632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9634:	2b00      	cmp	r3, #0
    9636:	d112      	bne.n	965e <chk_mounted+0x20a>
    9638:	6abb      	ldr	r3, [r7, #40]	; 0x28
    963a:	2257      	movs	r2, #87	; 0x57
    963c:	5c9b      	ldrb	r3, [r3, r2]
    963e:	061a      	lsls	r2, r3, #24
    9640:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9642:	2156      	movs	r1, #86	; 0x56
    9644:	5c5b      	ldrb	r3, [r3, r1]
    9646:	041b      	lsls	r3, r3, #16
    9648:	4313      	orrs	r3, r2
    964a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    964c:	2155      	movs	r1, #85	; 0x55
    964e:	5c52      	ldrb	r2, [r2, r1]
    9650:	0212      	lsls	r2, r2, #8
    9652:	4313      	orrs	r3, r2
    9654:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9656:	2154      	movs	r1, #84	; 0x54
    9658:	5c52      	ldrb	r2, [r2, r1]
    965a:	4313      	orrs	r3, r2
    965c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9660:	6bba      	ldr	r2, [r7, #56]	; 0x38
    9662:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    9664:	231f      	movs	r3, #31
    9666:	18fb      	adds	r3, r7, r3
    9668:	6aba      	ldr	r2, [r7, #40]	; 0x28
    966a:	2140      	movs	r1, #64	; 0x40
    966c:	5c52      	ldrb	r2, [r2, r1]
    966e:	701a      	strb	r2, [r3, #0]
    9670:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9672:	221f      	movs	r2, #31
    9674:	18ba      	adds	r2, r7, r2
    9676:	7812      	ldrb	r2, [r2, #0]
    9678:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    967a:	231f      	movs	r3, #31
    967c:	18fb      	adds	r3, r7, r3
    967e:	781b      	ldrb	r3, [r3, #0]
    9680:	2b01      	cmp	r3, #1
    9682:	d006      	beq.n	9692 <chk_mounted+0x23e>
    9684:	231f      	movs	r3, #31
    9686:	18fb      	adds	r3, r7, r3
    9688:	781b      	ldrb	r3, [r3, #0]
    968a:	2b02      	cmp	r3, #2
    968c:	d001      	beq.n	9692 <chk_mounted+0x23e>
    968e:	230d      	movs	r3, #13
    9690:	e1b4      	b.n	99fc <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    9692:	231f      	movs	r3, #31
    9694:	18fb      	adds	r3, r7, r3
    9696:	781a      	ldrb	r2, [r3, #0]
    9698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    969a:	4353      	muls	r3, r2
    969c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    969e:	231f      	movs	r3, #31
    96a0:	18fb      	adds	r3, r7, r3
    96a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    96a4:	213d      	movs	r1, #61	; 0x3d
    96a6:	5c52      	ldrb	r2, [r2, r1]
    96a8:	701a      	strb	r2, [r3, #0]
    96aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96ac:	221f      	movs	r2, #31
    96ae:	18ba      	adds	r2, r7, r2
    96b0:	7812      	ldrb	r2, [r2, #0]
    96b2:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    96b4:	231f      	movs	r3, #31
    96b6:	18fb      	adds	r3, r7, r3
    96b8:	781b      	ldrb	r3, [r3, #0]
    96ba:	2b00      	cmp	r3, #0
    96bc:	d008      	beq.n	96d0 <chk_mounted+0x27c>
    96be:	231f      	movs	r3, #31
    96c0:	18fb      	adds	r3, r7, r3
    96c2:	781b      	ldrb	r3, [r3, #0]
    96c4:	221f      	movs	r2, #31
    96c6:	18ba      	adds	r2, r7, r2
    96c8:	7812      	ldrb	r2, [r2, #0]
    96ca:	3a01      	subs	r2, #1
    96cc:	4013      	ands	r3, r2
    96ce:	d001      	beq.n	96d4 <chk_mounted+0x280>
    96d0:	230d      	movs	r3, #13
    96d2:	e193      	b.n	99fc <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    96d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96d6:	2242      	movs	r2, #66	; 0x42
    96d8:	5c9b      	ldrb	r3, [r3, r2]
    96da:	021b      	lsls	r3, r3, #8
    96dc:	b21a      	sxth	r2, r3
    96de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96e0:	2141      	movs	r1, #65	; 0x41
    96e2:	5c5b      	ldrb	r3, [r3, r1]
    96e4:	b21b      	sxth	r3, r3
    96e6:	4313      	orrs	r3, r2
    96e8:	b21b      	sxth	r3, r3
    96ea:	b29a      	uxth	r2, r3
    96ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96ee:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    96f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96f2:	891b      	ldrh	r3, [r3, #8]
    96f4:	220f      	movs	r2, #15
    96f6:	4013      	ands	r3, r2
    96f8:	b29b      	uxth	r3, r3
    96fa:	2b00      	cmp	r3, #0
    96fc:	d001      	beq.n	9702 <chk_mounted+0x2ae>
    96fe:	230d      	movs	r3, #13
    9700:	e17c      	b.n	99fc <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    9702:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9704:	2244      	movs	r2, #68	; 0x44
    9706:	5c9b      	ldrb	r3, [r3, r2]
    9708:	021b      	lsls	r3, r3, #8
    970a:	b21a      	sxth	r2, r3
    970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    970e:	2143      	movs	r1, #67	; 0x43
    9710:	5c5b      	ldrb	r3, [r3, r1]
    9712:	b21b      	sxth	r3, r3
    9714:	4313      	orrs	r3, r2
    9716:	b21b      	sxth	r3, r3
    9718:	b29b      	uxth	r3, r3
    971a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    971c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    971e:	2b00      	cmp	r3, #0
    9720:	d112      	bne.n	9748 <chk_mounted+0x2f4>
    9722:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9724:	2253      	movs	r2, #83	; 0x53
    9726:	5c9b      	ldrb	r3, [r3, r2]
    9728:	061a      	lsls	r2, r3, #24
    972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    972c:	2152      	movs	r1, #82	; 0x52
    972e:	5c5b      	ldrb	r3, [r3, r1]
    9730:	041b      	lsls	r3, r3, #16
    9732:	4313      	orrs	r3, r2
    9734:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9736:	2151      	movs	r1, #81	; 0x51
    9738:	5c52      	ldrb	r2, [r2, r1]
    973a:	0212      	lsls	r2, r2, #8
    973c:	4313      	orrs	r3, r2
    973e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9740:	2150      	movs	r1, #80	; 0x50
    9742:	5c52      	ldrb	r2, [r2, r1]
    9744:	4313      	orrs	r3, r2
    9746:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    9748:	6abb      	ldr	r3, [r7, #40]	; 0x28
    974a:	223f      	movs	r2, #63	; 0x3f
    974c:	5c9b      	ldrb	r3, [r3, r2]
    974e:	021b      	lsls	r3, r3, #8
    9750:	b21a      	sxth	r2, r3
    9752:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9754:	213e      	movs	r1, #62	; 0x3e
    9756:	5c5b      	ldrb	r3, [r3, r1]
    9758:	b21b      	sxth	r3, r3
    975a:	4313      	orrs	r3, r2
    975c:	b21a      	sxth	r2, r3
    975e:	231c      	movs	r3, #28
    9760:	18fb      	adds	r3, r7, r3
    9762:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    9764:	231c      	movs	r3, #28
    9766:	18fb      	adds	r3, r7, r3
    9768:	881b      	ldrh	r3, [r3, #0]
    976a:	2b00      	cmp	r3, #0
    976c:	d101      	bne.n	9772 <chk_mounted+0x31e>
    976e:	230d      	movs	r3, #13
    9770:	e144      	b.n	99fc <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    9772:	231c      	movs	r3, #28
    9774:	18fb      	adds	r3, r7, r3
    9776:	881a      	ldrh	r2, [r3, #0]
    9778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    977a:	18d3      	adds	r3, r2, r3
    977c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    977e:	8912      	ldrh	r2, [r2, #8]
    9780:	0912      	lsrs	r2, r2, #4
    9782:	b292      	uxth	r2, r2
    9784:	189b      	adds	r3, r3, r2
    9786:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    9788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    978a:	69bb      	ldr	r3, [r7, #24]
    978c:	429a      	cmp	r2, r3
    978e:	d201      	bcs.n	9794 <chk_mounted+0x340>
    9790:	230d      	movs	r3, #13
    9792:	e133      	b.n	99fc <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    9794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9796:	69bb      	ldr	r3, [r7, #24]
    9798:	1ad2      	subs	r2, r2, r3
    979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    979c:	789b      	ldrb	r3, [r3, #2]
    979e:	0019      	movs	r1, r3
    97a0:	4b08      	ldr	r3, [pc, #32]	; (97c4 <chk_mounted+0x370>)
    97a2:	0010      	movs	r0, r2
    97a4:	4798      	blx	r3
    97a6:	0003      	movs	r3, r0
    97a8:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    97aa:	697b      	ldr	r3, [r7, #20]
    97ac:	2b00      	cmp	r3, #0
    97ae:	d10b      	bne.n	97c8 <chk_mounted+0x374>
    97b0:	230d      	movs	r3, #13
    97b2:	e123      	b.n	99fc <chk_mounted+0x5a8>
    97b4:	200001c4 	.word	0x200001c4
    97b8:	00007231 	.word	0x00007231
    97bc:	000071ad 	.word	0x000071ad
    97c0:	00009381 	.word	0x00009381
    97c4:	0000b53d 	.word	0x0000b53d
	fmt = FS_FAT12;
    97c8:	2347      	movs	r3, #71	; 0x47
    97ca:	18fb      	adds	r3, r7, r3
    97cc:	2201      	movs	r2, #1
    97ce:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    97d0:	697b      	ldr	r3, [r7, #20]
    97d2:	4a8c      	ldr	r2, [pc, #560]	; (9a04 <chk_mounted+0x5b0>)
    97d4:	4293      	cmp	r3, r2
    97d6:	d903      	bls.n	97e0 <chk_mounted+0x38c>
    97d8:	2347      	movs	r3, #71	; 0x47
    97da:	18fb      	adds	r3, r7, r3
    97dc:	2202      	movs	r2, #2
    97de:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    97e0:	697b      	ldr	r3, [r7, #20]
    97e2:	4a89      	ldr	r2, [pc, #548]	; (9a08 <chk_mounted+0x5b4>)
    97e4:	4293      	cmp	r3, r2
    97e6:	d903      	bls.n	97f0 <chk_mounted+0x39c>
    97e8:	2347      	movs	r3, #71	; 0x47
    97ea:	18fb      	adds	r3, r7, r3
    97ec:	2203      	movs	r2, #3
    97ee:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    97f0:	697b      	ldr	r3, [r7, #20]
    97f2:	1c9a      	adds	r2, r3, #2
    97f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97f6:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    97f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    97fa:	69bb      	ldr	r3, [r7, #24]
    97fc:	18d2      	adds	r2, r2, r3
    97fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9800:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    9802:	231c      	movs	r3, #28
    9804:	18fb      	adds	r3, r7, r3
    9806:	881a      	ldrh	r2, [r3, #0]
    9808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    980a:	18d2      	adds	r2, r2, r3
    980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    980e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    9810:	2347      	movs	r3, #71	; 0x47
    9812:	18fb      	adds	r3, r7, r3
    9814:	781b      	ldrb	r3, [r3, #0]
    9816:	2b03      	cmp	r3, #3
    9818:	d11e      	bne.n	9858 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    981c:	891b      	ldrh	r3, [r3, #8]
    981e:	2b00      	cmp	r3, #0
    9820:	d001      	beq.n	9826 <chk_mounted+0x3d2>
    9822:	230d      	movs	r3, #13
    9824:	e0ea      	b.n	99fc <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    9826:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9828:	225f      	movs	r2, #95	; 0x5f
    982a:	5c9b      	ldrb	r3, [r3, r2]
    982c:	061a      	lsls	r2, r3, #24
    982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9830:	215e      	movs	r1, #94	; 0x5e
    9832:	5c5b      	ldrb	r3, [r3, r1]
    9834:	041b      	lsls	r3, r3, #16
    9836:	4313      	orrs	r3, r2
    9838:	6aba      	ldr	r2, [r7, #40]	; 0x28
    983a:	215d      	movs	r1, #93	; 0x5d
    983c:	5c52      	ldrb	r2, [r2, r1]
    983e:	0212      	lsls	r2, r2, #8
    9840:	4313      	orrs	r3, r2
    9842:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9844:	215c      	movs	r1, #92	; 0x5c
    9846:	5c52      	ldrb	r2, [r2, r1]
    9848:	431a      	orrs	r2, r3
    984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    984c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9850:	699b      	ldr	r3, [r3, #24]
    9852:	009b      	lsls	r3, r3, #2
    9854:	633b      	str	r3, [r7, #48]	; 0x30
    9856:	e020      	b.n	989a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    9858:	6abb      	ldr	r3, [r7, #40]	; 0x28
    985a:	891b      	ldrh	r3, [r3, #8]
    985c:	2b00      	cmp	r3, #0
    985e:	d101      	bne.n	9864 <chk_mounted+0x410>
    9860:	230d      	movs	r3, #13
    9862:	e0cb      	b.n	99fc <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    9864:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9866:	6a1a      	ldr	r2, [r3, #32]
    9868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    986a:	18d2      	adds	r2, r2, r3
    986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    986e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9870:	2347      	movs	r3, #71	; 0x47
    9872:	18fb      	adds	r3, r7, r3
    9874:	781b      	ldrb	r3, [r3, #0]
    9876:	2b02      	cmp	r3, #2
    9878:	d103      	bne.n	9882 <chk_mounted+0x42e>
    987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    987c:	699b      	ldr	r3, [r3, #24]
    987e:	005b      	lsls	r3, r3, #1
    9880:	e00a      	b.n	9898 <chk_mounted+0x444>
    9882:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9884:	699a      	ldr	r2, [r3, #24]
    9886:	0013      	movs	r3, r2
    9888:	005b      	lsls	r3, r3, #1
    988a:	189b      	adds	r3, r3, r2
    988c:	085a      	lsrs	r2, r3, #1
    988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9890:	699b      	ldr	r3, [r3, #24]
    9892:	2101      	movs	r1, #1
    9894:	400b      	ands	r3, r1
    9896:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    9898:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    989c:	69da      	ldr	r2, [r3, #28]
    989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    98a0:	495a      	ldr	r1, [pc, #360]	; (9a0c <chk_mounted+0x5b8>)
    98a2:	468c      	mov	ip, r1
    98a4:	4463      	add	r3, ip
    98a6:	0a5b      	lsrs	r3, r3, #9
    98a8:	429a      	cmp	r2, r3
    98aa:	d201      	bcs.n	98b0 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    98ac:	230d      	movs	r3, #13
    98ae:	e0a5      	b.n	99fc <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    98b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98b2:	2201      	movs	r2, #1
    98b4:	4252      	negs	r2, r2
    98b6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    98b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98ba:	2200      	movs	r2, #0
    98bc:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    98be:	2347      	movs	r3, #71	; 0x47
    98c0:	18fb      	adds	r3, r7, r3
    98c2:	781b      	ldrb	r3, [r3, #0]
    98c4:	2b03      	cmp	r3, #3
    98c6:	d000      	beq.n	98ca <chk_mounted+0x476>
    98c8:	e082      	b.n	99d0 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    98ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98cc:	2200      	movs	r2, #0
    98ce:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    98d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98d2:	2261      	movs	r2, #97	; 0x61
    98d4:	5c9b      	ldrb	r3, [r3, r2]
    98d6:	021b      	lsls	r3, r3, #8
    98d8:	b21a      	sxth	r2, r3
    98da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98dc:	2160      	movs	r1, #96	; 0x60
    98de:	5c5b      	ldrb	r3, [r3, r1]
    98e0:	b21b      	sxth	r3, r3
    98e2:	4313      	orrs	r3, r2
    98e4:	b21b      	sxth	r3, r3
    98e6:	b29b      	uxth	r3, r3
    98e8:	001a      	movs	r2, r3
    98ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    98ec:	18d2      	adds	r2, r2, r3
    98ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98f0:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    98f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98f4:	7858      	ldrb	r0, [r3, #1]
    98f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98f8:	3330      	adds	r3, #48	; 0x30
    98fa:	0019      	movs	r1, r3
    98fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98fe:	695a      	ldr	r2, [r3, #20]
    9900:	2301      	movs	r3, #1
    9902:	4c43      	ldr	r4, [pc, #268]	; (9a10 <chk_mounted+0x5bc>)
    9904:	47a0      	blx	r4
    9906:	1e03      	subs	r3, r0, #0
    9908:	d162      	bne.n	99d0 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    990c:	4a41      	ldr	r2, [pc, #260]	; (9a14 <chk_mounted+0x5c0>)
    990e:	5c9b      	ldrb	r3, [r3, r2]
    9910:	021b      	lsls	r3, r3, #8
    9912:	b21a      	sxth	r2, r3
    9914:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9916:	4940      	ldr	r1, [pc, #256]	; (9a18 <chk_mounted+0x5c4>)
    9918:	5c5b      	ldrb	r3, [r3, r1]
    991a:	b21b      	sxth	r3, r3
    991c:	4313      	orrs	r3, r2
    991e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    9920:	4a3e      	ldr	r2, [pc, #248]	; (9a1c <chk_mounted+0x5c8>)
    9922:	4293      	cmp	r3, r2
    9924:	d154      	bne.n	99d0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9926:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9928:	2233      	movs	r2, #51	; 0x33
    992a:	5c9b      	ldrb	r3, [r3, r2]
    992c:	061a      	lsls	r2, r3, #24
    992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9930:	2132      	movs	r1, #50	; 0x32
    9932:	5c5b      	ldrb	r3, [r3, r1]
    9934:	041b      	lsls	r3, r3, #16
    9936:	4313      	orrs	r3, r2
    9938:	6aba      	ldr	r2, [r7, #40]	; 0x28
    993a:	2131      	movs	r1, #49	; 0x31
    993c:	5c52      	ldrb	r2, [r2, r1]
    993e:	0212      	lsls	r2, r2, #8
    9940:	4313      	orrs	r3, r2
    9942:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9944:	2130      	movs	r1, #48	; 0x30
    9946:	5c52      	ldrb	r2, [r2, r1]
    9948:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    994a:	4a35      	ldr	r2, [pc, #212]	; (9a20 <chk_mounted+0x5cc>)
    994c:	4293      	cmp	r3, r2
    994e:	d13f      	bne.n	99d0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    9950:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9952:	4a34      	ldr	r2, [pc, #208]	; (9a24 <chk_mounted+0x5d0>)
    9954:	5c9b      	ldrb	r3, [r3, r2]
    9956:	061a      	lsls	r2, r3, #24
    9958:	6abb      	ldr	r3, [r7, #40]	; 0x28
    995a:	4933      	ldr	r1, [pc, #204]	; (9a28 <chk_mounted+0x5d4>)
    995c:	5c5b      	ldrb	r3, [r3, r1]
    995e:	041b      	lsls	r3, r3, #16
    9960:	4313      	orrs	r3, r2
    9962:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9964:	4931      	ldr	r1, [pc, #196]	; (9a2c <chk_mounted+0x5d8>)
    9966:	5c52      	ldrb	r2, [r2, r1]
    9968:	0212      	lsls	r2, r2, #8
    996a:	4313      	orrs	r3, r2
    996c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    996e:	2285      	movs	r2, #133	; 0x85
    9970:	0092      	lsls	r2, r2, #2
    9972:	5c8a      	ldrb	r2, [r1, r2]
    9974:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9976:	4a2e      	ldr	r2, [pc, #184]	; (9a30 <chk_mounted+0x5dc>)
    9978:	4293      	cmp	r3, r2
    997a:	d129      	bne.n	99d0 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    997e:	4a2d      	ldr	r2, [pc, #180]	; (9a34 <chk_mounted+0x5e0>)
    9980:	5c9b      	ldrb	r3, [r3, r2]
    9982:	061a      	lsls	r2, r3, #24
    9984:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9986:	492c      	ldr	r1, [pc, #176]	; (9a38 <chk_mounted+0x5e4>)
    9988:	5c5b      	ldrb	r3, [r3, r1]
    998a:	041b      	lsls	r3, r3, #16
    998c:	4313      	orrs	r3, r2
    998e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9990:	492a      	ldr	r1, [pc, #168]	; (9a3c <chk_mounted+0x5e8>)
    9992:	5c52      	ldrb	r2, [r2, r1]
    9994:	0212      	lsls	r2, r2, #8
    9996:	4313      	orrs	r3, r2
    9998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    999a:	2287      	movs	r2, #135	; 0x87
    999c:	0092      	lsls	r2, r2, #2
    999e:	5c8a      	ldrb	r2, [r1, r2]
    99a0:	431a      	orrs	r2, r3
    99a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99a4:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    99a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99a8:	4a25      	ldr	r2, [pc, #148]	; (9a40 <chk_mounted+0x5ec>)
    99aa:	5c9b      	ldrb	r3, [r3, r2]
    99ac:	061a      	lsls	r2, r3, #24
    99ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99b0:	4924      	ldr	r1, [pc, #144]	; (9a44 <chk_mounted+0x5f0>)
    99b2:	5c5b      	ldrb	r3, [r3, r1]
    99b4:	041b      	lsls	r3, r3, #16
    99b6:	4313      	orrs	r3, r2
    99b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    99ba:	4923      	ldr	r1, [pc, #140]	; (9a48 <chk_mounted+0x5f4>)
    99bc:	5c52      	ldrb	r2, [r2, r1]
    99be:	0212      	lsls	r2, r2, #8
    99c0:	4313      	orrs	r3, r2
    99c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    99c4:	2286      	movs	r2, #134	; 0x86
    99c6:	0092      	lsls	r2, r2, #2
    99c8:	5c8a      	ldrb	r2, [r1, r2]
    99ca:	431a      	orrs	r2, r3
    99cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99ce:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    99d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99d2:	2247      	movs	r2, #71	; 0x47
    99d4:	18ba      	adds	r2, r7, r2
    99d6:	7812      	ldrb	r2, [r2, #0]
    99d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    99da:	4b1c      	ldr	r3, [pc, #112]	; (9a4c <chk_mounted+0x5f8>)
    99dc:	881b      	ldrh	r3, [r3, #0]
    99de:	3301      	adds	r3, #1
    99e0:	b29a      	uxth	r2, r3
    99e2:	4b1a      	ldr	r3, [pc, #104]	; (9a4c <chk_mounted+0x5f8>)
    99e4:	801a      	strh	r2, [r3, #0]
    99e6:	4b19      	ldr	r3, [pc, #100]	; (9a4c <chk_mounted+0x5f8>)
    99e8:	881a      	ldrh	r2, [r3, #0]
    99ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99ec:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    99ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99f0:	2200      	movs	r2, #0
    99f2:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    99f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99f6:	2200      	movs	r2, #0
    99f8:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    99fa:	2300      	movs	r3, #0
}
    99fc:	0018      	movs	r0, r3
    99fe:	46bd      	mov	sp, r7
    9a00:	b013      	add	sp, #76	; 0x4c
    9a02:	bd90      	pop	{r4, r7, pc}
    9a04:	00000ff5 	.word	0x00000ff5
    9a08:	0000fff5 	.word	0x0000fff5
    9a0c:	000001ff 	.word	0x000001ff
    9a10:	00007269 	.word	0x00007269
    9a14:	0000022f 	.word	0x0000022f
    9a18:	0000022e 	.word	0x0000022e
    9a1c:	ffffaa55 	.word	0xffffaa55
    9a20:	41615252 	.word	0x41615252
    9a24:	00000217 	.word	0x00000217
    9a28:	00000216 	.word	0x00000216
    9a2c:	00000215 	.word	0x00000215
    9a30:	61417272 	.word	0x61417272
    9a34:	0000021f 	.word	0x0000021f
    9a38:	0000021e 	.word	0x0000021e
    9a3c:	0000021d 	.word	0x0000021d
    9a40:	0000021b 	.word	0x0000021b
    9a44:	0000021a 	.word	0x0000021a
    9a48:	00000219 	.word	0x00000219
    9a4c:	200001c8 	.word	0x200001c8

00009a50 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    9a50:	b580      	push	{r7, lr}
    9a52:	b082      	sub	sp, #8
    9a54:	af00      	add	r7, sp, #0
    9a56:	6078      	str	r0, [r7, #4]
    9a58:	000a      	movs	r2, r1
    9a5a:	1cbb      	adds	r3, r7, #2
    9a5c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    9a5e:	687b      	ldr	r3, [r7, #4]
    9a60:	2b00      	cmp	r3, #0
    9a62:	d009      	beq.n	9a78 <validate+0x28>
    9a64:	687b      	ldr	r3, [r7, #4]
    9a66:	781b      	ldrb	r3, [r3, #0]
    9a68:	2b00      	cmp	r3, #0
    9a6a:	d005      	beq.n	9a78 <validate+0x28>
    9a6c:	687b      	ldr	r3, [r7, #4]
    9a6e:	88db      	ldrh	r3, [r3, #6]
    9a70:	1cba      	adds	r2, r7, #2
    9a72:	8812      	ldrh	r2, [r2, #0]
    9a74:	429a      	cmp	r2, r3
    9a76:	d001      	beq.n	9a7c <validate+0x2c>
		return FR_INVALID_OBJECT;
    9a78:	2309      	movs	r3, #9
    9a7a:	e00c      	b.n	9a96 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    9a7c:	687b      	ldr	r3, [r7, #4]
    9a7e:	785b      	ldrb	r3, [r3, #1]
    9a80:	0018      	movs	r0, r3
    9a82:	4b07      	ldr	r3, [pc, #28]	; (9aa0 <validate+0x50>)
    9a84:	4798      	blx	r3
    9a86:	0003      	movs	r3, r0
    9a88:	001a      	movs	r2, r3
    9a8a:	2301      	movs	r3, #1
    9a8c:	4013      	ands	r3, r2
    9a8e:	d001      	beq.n	9a94 <validate+0x44>
		return FR_NOT_READY;
    9a90:	2303      	movs	r3, #3
    9a92:	e000      	b.n	9a96 <validate+0x46>

	return FR_OK;
    9a94:	2300      	movs	r3, #0
}
    9a96:	0018      	movs	r0, r3
    9a98:	46bd      	mov	sp, r7
    9a9a:	b002      	add	sp, #8
    9a9c:	bd80      	pop	{r7, pc}
    9a9e:	46c0      	nop			; (mov r8, r8)
    9aa0:	00007231 	.word	0x00007231

00009aa4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    9aa4:	b580      	push	{r7, lr}
    9aa6:	b084      	sub	sp, #16
    9aa8:	af00      	add	r7, sp, #0
    9aaa:	0002      	movs	r2, r0
    9aac:	6039      	str	r1, [r7, #0]
    9aae:	1dfb      	adds	r3, r7, #7
    9ab0:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    9ab2:	1dfb      	adds	r3, r7, #7
    9ab4:	781b      	ldrb	r3, [r3, #0]
    9ab6:	2b00      	cmp	r3, #0
    9ab8:	d001      	beq.n	9abe <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    9aba:	230b      	movs	r3, #11
    9abc:	e018      	b.n	9af0 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    9abe:	1dfb      	adds	r3, r7, #7
    9ac0:	781a      	ldrb	r2, [r3, #0]
    9ac2:	4b0d      	ldr	r3, [pc, #52]	; (9af8 <f_mount+0x54>)
    9ac4:	0092      	lsls	r2, r2, #2
    9ac6:	58d3      	ldr	r3, [r2, r3]
    9ac8:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    9aca:	68fb      	ldr	r3, [r7, #12]
    9acc:	2b00      	cmp	r3, #0
    9ace:	d002      	beq.n	9ad6 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    9ad0:	68fb      	ldr	r3, [r7, #12]
    9ad2:	2200      	movs	r2, #0
    9ad4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    9ad6:	683b      	ldr	r3, [r7, #0]
    9ad8:	2b00      	cmp	r3, #0
    9ada:	d002      	beq.n	9ae2 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    9adc:	683b      	ldr	r3, [r7, #0]
    9ade:	2200      	movs	r2, #0
    9ae0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    9ae2:	1dfb      	adds	r3, r7, #7
    9ae4:	781a      	ldrb	r2, [r3, #0]
    9ae6:	4b04      	ldr	r3, [pc, #16]	; (9af8 <f_mount+0x54>)
    9ae8:	0092      	lsls	r2, r2, #2
    9aea:	6839      	ldr	r1, [r7, #0]
    9aec:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    9aee:	2300      	movs	r3, #0
}
    9af0:	0018      	movs	r0, r3
    9af2:	46bd      	mov	sp, r7
    9af4:	b004      	add	sp, #16
    9af6:	bd80      	pop	{r7, pc}
    9af8:	200001c4 	.word	0x200001c4

00009afc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9afc:	b590      	push	{r4, r7, lr}
    9afe:	4ce5      	ldr	r4, [pc, #916]	; (9e94 <f_open+0x398>)
    9b00:	44a5      	add	sp, r4
    9b02:	af00      	add	r7, sp, #0
    9b04:	60f8      	str	r0, [r7, #12]
    9b06:	60b9      	str	r1, [r7, #8]
    9b08:	4be3      	ldr	r3, [pc, #908]	; (9e98 <f_open+0x39c>)
    9b0a:	2194      	movs	r1, #148	; 0x94
    9b0c:	0089      	lsls	r1, r1, #2
    9b0e:	468c      	mov	ip, r1
    9b10:	44bc      	add	ip, r7
    9b12:	4463      	add	r3, ip
    9b14:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    9b16:	68fb      	ldr	r3, [r7, #12]
    9b18:	2200      	movs	r2, #0
    9b1a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    9b1c:	4bde      	ldr	r3, [pc, #888]	; (9e98 <f_open+0x39c>)
    9b1e:	2294      	movs	r2, #148	; 0x94
    9b20:	0092      	lsls	r2, r2, #2
    9b22:	4694      	mov	ip, r2
    9b24:	44bc      	add	ip, r7
    9b26:	4463      	add	r3, ip
    9b28:	4adb      	ldr	r2, [pc, #876]	; (9e98 <f_open+0x39c>)
    9b2a:	2194      	movs	r1, #148	; 0x94
    9b2c:	0089      	lsls	r1, r1, #2
    9b2e:	468c      	mov	ip, r1
    9b30:	44bc      	add	ip, r7
    9b32:	4462      	add	r2, ip
    9b34:	7812      	ldrb	r2, [r2, #0]
    9b36:	211f      	movs	r1, #31
    9b38:	400a      	ands	r2, r1
    9b3a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    9b3c:	4bd6      	ldr	r3, [pc, #856]	; (9e98 <f_open+0x39c>)
    9b3e:	2294      	movs	r2, #148	; 0x94
    9b40:	0092      	lsls	r2, r2, #2
    9b42:	4694      	mov	ip, r2
    9b44:	44bc      	add	ip, r7
    9b46:	4463      	add	r3, ip
    9b48:	781b      	ldrb	r3, [r3, #0]
    9b4a:	2201      	movs	r2, #1
    9b4c:	4393      	bics	r3, r2
    9b4e:	b2da      	uxtb	r2, r3
    9b50:	4bd2      	ldr	r3, [pc, #840]	; (9e9c <f_open+0x3a0>)
    9b52:	18fc      	adds	r4, r7, r3
    9b54:	2387      	movs	r3, #135	; 0x87
    9b56:	009b      	lsls	r3, r3, #2
    9b58:	18f9      	adds	r1, r7, r3
    9b5a:	2308      	movs	r3, #8
    9b5c:	18fb      	adds	r3, r7, r3
    9b5e:	0018      	movs	r0, r3
    9b60:	4bcf      	ldr	r3, [pc, #828]	; (9ea0 <f_open+0x3a4>)
    9b62:	4798      	blx	r3
    9b64:	0003      	movs	r3, r0
    9b66:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    9b68:	2387      	movs	r3, #135	; 0x87
    9b6a:	009b      	lsls	r3, r3, #2
    9b6c:	18fb      	adds	r3, r7, r3
    9b6e:	2284      	movs	r2, #132	; 0x84
    9b70:	0092      	lsls	r2, r2, #2
    9b72:	18ba      	adds	r2, r7, r2
    9b74:	619a      	str	r2, [r3, #24]
    9b76:	2387      	movs	r3, #135	; 0x87
    9b78:	009b      	lsls	r3, r3, #2
    9b7a:	18fb      	adds	r3, r7, r3
    9b7c:	2210      	movs	r2, #16
    9b7e:	18ba      	adds	r2, r7, r2
    9b80:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    9b82:	4bc6      	ldr	r3, [pc, #792]	; (9e9c <f_open+0x3a0>)
    9b84:	18fb      	adds	r3, r7, r3
    9b86:	781b      	ldrb	r3, [r3, #0]
    9b88:	2b00      	cmp	r3, #0
    9b8a:	d10b      	bne.n	9ba4 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    9b8c:	68ba      	ldr	r2, [r7, #8]
    9b8e:	4bc3      	ldr	r3, [pc, #780]	; (9e9c <f_open+0x3a0>)
    9b90:	18fc      	adds	r4, r7, r3
    9b92:	2387      	movs	r3, #135	; 0x87
    9b94:	009b      	lsls	r3, r3, #2
    9b96:	18fb      	adds	r3, r7, r3
    9b98:	0011      	movs	r1, r2
    9b9a:	0018      	movs	r0, r3
    9b9c:	4bc1      	ldr	r3, [pc, #772]	; (9ea4 <f_open+0x3a8>)
    9b9e:	4798      	blx	r3
    9ba0:	0003      	movs	r3, r0
    9ba2:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    9ba4:	2387      	movs	r3, #135	; 0x87
    9ba6:	009b      	lsls	r3, r3, #2
    9ba8:	18fb      	adds	r3, r7, r3
    9baa:	695b      	ldr	r3, [r3, #20]
    9bac:	2292      	movs	r2, #146	; 0x92
    9bae:	0092      	lsls	r2, r2, #2
    9bb0:	18ba      	adds	r2, r7, r2
    9bb2:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    9bb4:	4bb9      	ldr	r3, [pc, #740]	; (9e9c <f_open+0x3a0>)
    9bb6:	18fb      	adds	r3, r7, r3
    9bb8:	781b      	ldrb	r3, [r3, #0]
    9bba:	2b00      	cmp	r3, #0
    9bbc:	d109      	bne.n	9bd2 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    9bbe:	2392      	movs	r3, #146	; 0x92
    9bc0:	009b      	lsls	r3, r3, #2
    9bc2:	18fb      	adds	r3, r7, r3
    9bc4:	681b      	ldr	r3, [r3, #0]
    9bc6:	2b00      	cmp	r3, #0
    9bc8:	d103      	bne.n	9bd2 <f_open+0xd6>
			res = FR_INVALID_NAME;
    9bca:	4bb4      	ldr	r3, [pc, #720]	; (9e9c <f_open+0x3a0>)
    9bcc:	18fb      	adds	r3, r7, r3
    9bce:	2206      	movs	r2, #6
    9bd0:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9bd2:	4bb1      	ldr	r3, [pc, #708]	; (9e98 <f_open+0x39c>)
    9bd4:	2294      	movs	r2, #148	; 0x94
    9bd6:	0092      	lsls	r2, r2, #2
    9bd8:	4694      	mov	ip, r2
    9bda:	44bc      	add	ip, r7
    9bdc:	4463      	add	r3, ip
    9bde:	781b      	ldrb	r3, [r3, #0]
    9be0:	221c      	movs	r2, #28
    9be2:	4013      	ands	r3, r2
    9be4:	d100      	bne.n	9be8 <f_open+0xec>
    9be6:	e141      	b.n	9e6c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    9be8:	4bac      	ldr	r3, [pc, #688]	; (9e9c <f_open+0x3a0>)
    9bea:	18fb      	adds	r3, r7, r3
    9bec:	781b      	ldrb	r3, [r3, #0]
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d027      	beq.n	9c42 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    9bf2:	4baa      	ldr	r3, [pc, #680]	; (9e9c <f_open+0x3a0>)
    9bf4:	18fb      	adds	r3, r7, r3
    9bf6:	781b      	ldrb	r3, [r3, #0]
    9bf8:	2b04      	cmp	r3, #4
    9bfa:	d109      	bne.n	9c10 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    9bfc:	4ba7      	ldr	r3, [pc, #668]	; (9e9c <f_open+0x3a0>)
    9bfe:	18fc      	adds	r4, r7, r3
    9c00:	2387      	movs	r3, #135	; 0x87
    9c02:	009b      	lsls	r3, r3, #2
    9c04:	18fb      	adds	r3, r7, r3
    9c06:	0018      	movs	r0, r3
    9c08:	4ba7      	ldr	r3, [pc, #668]	; (9ea8 <f_open+0x3ac>)
    9c0a:	4798      	blx	r3
    9c0c:	0003      	movs	r3, r0
    9c0e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    9c10:	4ba1      	ldr	r3, [pc, #644]	; (9e98 <f_open+0x39c>)
    9c12:	2294      	movs	r2, #148	; 0x94
    9c14:	0092      	lsls	r2, r2, #2
    9c16:	4694      	mov	ip, r2
    9c18:	44bc      	add	ip, r7
    9c1a:	4463      	add	r3, ip
    9c1c:	4a9e      	ldr	r2, [pc, #632]	; (9e98 <f_open+0x39c>)
    9c1e:	2194      	movs	r1, #148	; 0x94
    9c20:	0089      	lsls	r1, r1, #2
    9c22:	468c      	mov	ip, r1
    9c24:	44bc      	add	ip, r7
    9c26:	4462      	add	r2, ip
    9c28:	7812      	ldrb	r2, [r2, #0]
    9c2a:	2108      	movs	r1, #8
    9c2c:	430a      	orrs	r2, r1
    9c2e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    9c30:	2387      	movs	r3, #135	; 0x87
    9c32:	009b      	lsls	r3, r3, #2
    9c34:	18fb      	adds	r3, r7, r3
    9c36:	695b      	ldr	r3, [r3, #20]
    9c38:	2292      	movs	r2, #146	; 0x92
    9c3a:	0092      	lsls	r2, r2, #2
    9c3c:	18ba      	adds	r2, r7, r2
    9c3e:	6013      	str	r3, [r2, #0]
    9c40:	e01c      	b.n	9c7c <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    9c42:	2392      	movs	r3, #146	; 0x92
    9c44:	009b      	lsls	r3, r3, #2
    9c46:	18fb      	adds	r3, r7, r3
    9c48:	681b      	ldr	r3, [r3, #0]
    9c4a:	330b      	adds	r3, #11
    9c4c:	781b      	ldrb	r3, [r3, #0]
    9c4e:	001a      	movs	r2, r3
    9c50:	2311      	movs	r3, #17
    9c52:	4013      	ands	r3, r2
    9c54:	d004      	beq.n	9c60 <f_open+0x164>
				res = FR_DENIED;
    9c56:	4b91      	ldr	r3, [pc, #580]	; (9e9c <f_open+0x3a0>)
    9c58:	18fb      	adds	r3, r7, r3
    9c5a:	2207      	movs	r2, #7
    9c5c:	701a      	strb	r2, [r3, #0]
    9c5e:	e00d      	b.n	9c7c <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    9c60:	4b8d      	ldr	r3, [pc, #564]	; (9e98 <f_open+0x39c>)
    9c62:	2294      	movs	r2, #148	; 0x94
    9c64:	0092      	lsls	r2, r2, #2
    9c66:	4694      	mov	ip, r2
    9c68:	44bc      	add	ip, r7
    9c6a:	4463      	add	r3, ip
    9c6c:	781b      	ldrb	r3, [r3, #0]
    9c6e:	2204      	movs	r2, #4
    9c70:	4013      	ands	r3, r2
    9c72:	d003      	beq.n	9c7c <f_open+0x180>
					res = FR_EXIST;
    9c74:	4b89      	ldr	r3, [pc, #548]	; (9e9c <f_open+0x3a0>)
    9c76:	18fb      	adds	r3, r7, r3
    9c78:	2208      	movs	r2, #8
    9c7a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9c7c:	4b87      	ldr	r3, [pc, #540]	; (9e9c <f_open+0x3a0>)
    9c7e:	18fb      	adds	r3, r7, r3
    9c80:	781b      	ldrb	r3, [r3, #0]
    9c82:	2b00      	cmp	r3, #0
    9c84:	d000      	beq.n	9c88 <f_open+0x18c>
    9c86:	e12f      	b.n	9ee8 <f_open+0x3ec>
    9c88:	4b83      	ldr	r3, [pc, #524]	; (9e98 <f_open+0x39c>)
    9c8a:	2294      	movs	r2, #148	; 0x94
    9c8c:	0092      	lsls	r2, r2, #2
    9c8e:	4694      	mov	ip, r2
    9c90:	44bc      	add	ip, r7
    9c92:	4463      	add	r3, ip
    9c94:	781b      	ldrb	r3, [r3, #0]
    9c96:	2208      	movs	r2, #8
    9c98:	4013      	ands	r3, r2
    9c9a:	d100      	bne.n	9c9e <f_open+0x1a2>
    9c9c:	e124      	b.n	9ee8 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    9c9e:	4b83      	ldr	r3, [pc, #524]	; (9eac <f_open+0x3b0>)
    9ca0:	4798      	blx	r3
    9ca2:	0003      	movs	r3, r0
    9ca4:	2291      	movs	r2, #145	; 0x91
    9ca6:	0092      	lsls	r2, r2, #2
    9ca8:	18ba      	adds	r2, r7, r2
    9caa:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    9cac:	2392      	movs	r3, #146	; 0x92
    9cae:	009b      	lsls	r3, r3, #2
    9cb0:	18fb      	adds	r3, r7, r3
    9cb2:	681b      	ldr	r3, [r3, #0]
    9cb4:	330e      	adds	r3, #14
    9cb6:	2291      	movs	r2, #145	; 0x91
    9cb8:	0092      	lsls	r2, r2, #2
    9cba:	18ba      	adds	r2, r7, r2
    9cbc:	6812      	ldr	r2, [r2, #0]
    9cbe:	b2d2      	uxtb	r2, r2
    9cc0:	701a      	strb	r2, [r3, #0]
    9cc2:	2392      	movs	r3, #146	; 0x92
    9cc4:	009b      	lsls	r3, r3, #2
    9cc6:	18fb      	adds	r3, r7, r3
    9cc8:	681b      	ldr	r3, [r3, #0]
    9cca:	330f      	adds	r3, #15
    9ccc:	2291      	movs	r2, #145	; 0x91
    9cce:	0092      	lsls	r2, r2, #2
    9cd0:	18ba      	adds	r2, r7, r2
    9cd2:	6812      	ldr	r2, [r2, #0]
    9cd4:	b292      	uxth	r2, r2
    9cd6:	0a12      	lsrs	r2, r2, #8
    9cd8:	b292      	uxth	r2, r2
    9cda:	b2d2      	uxtb	r2, r2
    9cdc:	701a      	strb	r2, [r3, #0]
    9cde:	2392      	movs	r3, #146	; 0x92
    9ce0:	009b      	lsls	r3, r3, #2
    9ce2:	18fb      	adds	r3, r7, r3
    9ce4:	681b      	ldr	r3, [r3, #0]
    9ce6:	3310      	adds	r3, #16
    9ce8:	2291      	movs	r2, #145	; 0x91
    9cea:	0092      	lsls	r2, r2, #2
    9cec:	18ba      	adds	r2, r7, r2
    9cee:	6812      	ldr	r2, [r2, #0]
    9cf0:	0c12      	lsrs	r2, r2, #16
    9cf2:	b2d2      	uxtb	r2, r2
    9cf4:	701a      	strb	r2, [r3, #0]
    9cf6:	2392      	movs	r3, #146	; 0x92
    9cf8:	009b      	lsls	r3, r3, #2
    9cfa:	18fb      	adds	r3, r7, r3
    9cfc:	681b      	ldr	r3, [r3, #0]
    9cfe:	3311      	adds	r3, #17
    9d00:	2291      	movs	r2, #145	; 0x91
    9d02:	0092      	lsls	r2, r2, #2
    9d04:	18ba      	adds	r2, r7, r2
    9d06:	6812      	ldr	r2, [r2, #0]
    9d08:	0e12      	lsrs	r2, r2, #24
    9d0a:	b2d2      	uxtb	r2, r2
    9d0c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9d0e:	2392      	movs	r3, #146	; 0x92
    9d10:	009b      	lsls	r3, r3, #2
    9d12:	18fb      	adds	r3, r7, r3
    9d14:	681b      	ldr	r3, [r3, #0]
    9d16:	330b      	adds	r3, #11
    9d18:	2200      	movs	r2, #0
    9d1a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9d1c:	2392      	movs	r3, #146	; 0x92
    9d1e:	009b      	lsls	r3, r3, #2
    9d20:	18fb      	adds	r3, r7, r3
    9d22:	681b      	ldr	r3, [r3, #0]
    9d24:	331c      	adds	r3, #28
    9d26:	2200      	movs	r2, #0
    9d28:	701a      	strb	r2, [r3, #0]
    9d2a:	2392      	movs	r3, #146	; 0x92
    9d2c:	009b      	lsls	r3, r3, #2
    9d2e:	18fb      	adds	r3, r7, r3
    9d30:	681b      	ldr	r3, [r3, #0]
    9d32:	331d      	adds	r3, #29
    9d34:	2200      	movs	r2, #0
    9d36:	701a      	strb	r2, [r3, #0]
    9d38:	2392      	movs	r3, #146	; 0x92
    9d3a:	009b      	lsls	r3, r3, #2
    9d3c:	18fb      	adds	r3, r7, r3
    9d3e:	681b      	ldr	r3, [r3, #0]
    9d40:	331e      	adds	r3, #30
    9d42:	2200      	movs	r2, #0
    9d44:	701a      	strb	r2, [r3, #0]
    9d46:	2392      	movs	r3, #146	; 0x92
    9d48:	009b      	lsls	r3, r3, #2
    9d4a:	18fb      	adds	r3, r7, r3
    9d4c:	681b      	ldr	r3, [r3, #0]
    9d4e:	331f      	adds	r3, #31
    9d50:	2200      	movs	r2, #0
    9d52:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    9d54:	2392      	movs	r3, #146	; 0x92
    9d56:	009b      	lsls	r3, r3, #2
    9d58:	18fb      	adds	r3, r7, r3
    9d5a:	681b      	ldr	r3, [r3, #0]
    9d5c:	3315      	adds	r3, #21
    9d5e:	781b      	ldrb	r3, [r3, #0]
    9d60:	021b      	lsls	r3, r3, #8
    9d62:	b21a      	sxth	r2, r3
    9d64:	2392      	movs	r3, #146	; 0x92
    9d66:	009b      	lsls	r3, r3, #2
    9d68:	18fb      	adds	r3, r7, r3
    9d6a:	681b      	ldr	r3, [r3, #0]
    9d6c:	3314      	adds	r3, #20
    9d6e:	781b      	ldrb	r3, [r3, #0]
    9d70:	b21b      	sxth	r3, r3
    9d72:	4313      	orrs	r3, r2
    9d74:	b21b      	sxth	r3, r3
    9d76:	b29b      	uxth	r3, r3
    9d78:	041b      	lsls	r3, r3, #16
    9d7a:	2292      	movs	r2, #146	; 0x92
    9d7c:	0092      	lsls	r2, r2, #2
    9d7e:	18ba      	adds	r2, r7, r2
    9d80:	6812      	ldr	r2, [r2, #0]
    9d82:	321b      	adds	r2, #27
    9d84:	7812      	ldrb	r2, [r2, #0]
    9d86:	0212      	lsls	r2, r2, #8
    9d88:	b211      	sxth	r1, r2
    9d8a:	2292      	movs	r2, #146	; 0x92
    9d8c:	0092      	lsls	r2, r2, #2
    9d8e:	18ba      	adds	r2, r7, r2
    9d90:	6812      	ldr	r2, [r2, #0]
    9d92:	321a      	adds	r2, #26
    9d94:	7812      	ldrb	r2, [r2, #0]
    9d96:	b212      	sxth	r2, r2
    9d98:	430a      	orrs	r2, r1
    9d9a:	b212      	sxth	r2, r2
    9d9c:	b292      	uxth	r2, r2
    9d9e:	4313      	orrs	r3, r2
    9da0:	2290      	movs	r2, #144	; 0x90
    9da2:	0092      	lsls	r2, r2, #2
    9da4:	18ba      	adds	r2, r7, r2
    9da6:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    9da8:	2392      	movs	r3, #146	; 0x92
    9daa:	009b      	lsls	r3, r3, #2
    9dac:	18fb      	adds	r3, r7, r3
    9dae:	681b      	ldr	r3, [r3, #0]
    9db0:	331a      	adds	r3, #26
    9db2:	2200      	movs	r2, #0
    9db4:	701a      	strb	r2, [r3, #0]
    9db6:	2392      	movs	r3, #146	; 0x92
    9db8:	009b      	lsls	r3, r3, #2
    9dba:	18fb      	adds	r3, r7, r3
    9dbc:	681b      	ldr	r3, [r3, #0]
    9dbe:	331b      	adds	r3, #27
    9dc0:	2200      	movs	r2, #0
    9dc2:	701a      	strb	r2, [r3, #0]
    9dc4:	2392      	movs	r3, #146	; 0x92
    9dc6:	009b      	lsls	r3, r3, #2
    9dc8:	18fb      	adds	r3, r7, r3
    9dca:	681b      	ldr	r3, [r3, #0]
    9dcc:	3314      	adds	r3, #20
    9dce:	2200      	movs	r2, #0
    9dd0:	701a      	strb	r2, [r3, #0]
    9dd2:	2392      	movs	r3, #146	; 0x92
    9dd4:	009b      	lsls	r3, r3, #2
    9dd6:	18fb      	adds	r3, r7, r3
    9dd8:	681b      	ldr	r3, [r3, #0]
    9dda:	3315      	adds	r3, #21
    9ddc:	2200      	movs	r2, #0
    9dde:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    9de0:	2387      	movs	r3, #135	; 0x87
    9de2:	009b      	lsls	r3, r3, #2
    9de4:	18fb      	adds	r3, r7, r3
    9de6:	681b      	ldr	r3, [r3, #0]
    9de8:	2201      	movs	r2, #1
    9dea:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    9dec:	2390      	movs	r3, #144	; 0x90
    9dee:	009b      	lsls	r3, r3, #2
    9df0:	18fb      	adds	r3, r7, r3
    9df2:	681b      	ldr	r3, [r3, #0]
    9df4:	2b00      	cmp	r3, #0
    9df6:	d100      	bne.n	9dfa <f_open+0x2fe>
    9df8:	e076      	b.n	9ee8 <f_open+0x3ec>
				dw = dj.fs->winsect;
    9dfa:	2387      	movs	r3, #135	; 0x87
    9dfc:	009b      	lsls	r3, r3, #2
    9dfe:	18fb      	adds	r3, r7, r3
    9e00:	681b      	ldr	r3, [r3, #0]
    9e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9e04:	2291      	movs	r2, #145	; 0x91
    9e06:	0092      	lsls	r2, r2, #2
    9e08:	18ba      	adds	r2, r7, r2
    9e0a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    9e0c:	2387      	movs	r3, #135	; 0x87
    9e0e:	009b      	lsls	r3, r3, #2
    9e10:	18fb      	adds	r3, r7, r3
    9e12:	681b      	ldr	r3, [r3, #0]
    9e14:	4a21      	ldr	r2, [pc, #132]	; (9e9c <f_open+0x3a0>)
    9e16:	18bc      	adds	r4, r7, r2
    9e18:	2290      	movs	r2, #144	; 0x90
    9e1a:	0092      	lsls	r2, r2, #2
    9e1c:	18ba      	adds	r2, r7, r2
    9e1e:	6812      	ldr	r2, [r2, #0]
    9e20:	0011      	movs	r1, r2
    9e22:	0018      	movs	r0, r3
    9e24:	4b22      	ldr	r3, [pc, #136]	; (9eb0 <f_open+0x3b4>)
    9e26:	4798      	blx	r3
    9e28:	0003      	movs	r3, r0
    9e2a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    9e2c:	4b1b      	ldr	r3, [pc, #108]	; (9e9c <f_open+0x3a0>)
    9e2e:	18fb      	adds	r3, r7, r3
    9e30:	781b      	ldrb	r3, [r3, #0]
    9e32:	2b00      	cmp	r3, #0
    9e34:	d158      	bne.n	9ee8 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9e36:	2387      	movs	r3, #135	; 0x87
    9e38:	009b      	lsls	r3, r3, #2
    9e3a:	18fb      	adds	r3, r7, r3
    9e3c:	681b      	ldr	r3, [r3, #0]
    9e3e:	2290      	movs	r2, #144	; 0x90
    9e40:	0092      	lsls	r2, r2, #2
    9e42:	18ba      	adds	r2, r7, r2
    9e44:	6812      	ldr	r2, [r2, #0]
    9e46:	3a01      	subs	r2, #1
    9e48:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    9e4a:	2387      	movs	r3, #135	; 0x87
    9e4c:	009b      	lsls	r3, r3, #2
    9e4e:	18fb      	adds	r3, r7, r3
    9e50:	681b      	ldr	r3, [r3, #0]
    9e52:	4a12      	ldr	r2, [pc, #72]	; (9e9c <f_open+0x3a0>)
    9e54:	18bc      	adds	r4, r7, r2
    9e56:	2291      	movs	r2, #145	; 0x91
    9e58:	0092      	lsls	r2, r2, #2
    9e5a:	18ba      	adds	r2, r7, r2
    9e5c:	6812      	ldr	r2, [r2, #0]
    9e5e:	0011      	movs	r1, r2
    9e60:	0018      	movs	r0, r3
    9e62:	4b14      	ldr	r3, [pc, #80]	; (9eb4 <f_open+0x3b8>)
    9e64:	4798      	blx	r3
    9e66:	0003      	movs	r3, r0
    9e68:	7023      	strb	r3, [r4, #0]
    9e6a:	e03d      	b.n	9ee8 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    9e6c:	4b0b      	ldr	r3, [pc, #44]	; (9e9c <f_open+0x3a0>)
    9e6e:	18fb      	adds	r3, r7, r3
    9e70:	781b      	ldrb	r3, [r3, #0]
    9e72:	2b00      	cmp	r3, #0
    9e74:	d138      	bne.n	9ee8 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    9e76:	2392      	movs	r3, #146	; 0x92
    9e78:	009b      	lsls	r3, r3, #2
    9e7a:	18fb      	adds	r3, r7, r3
    9e7c:	681b      	ldr	r3, [r3, #0]
    9e7e:	330b      	adds	r3, #11
    9e80:	781b      	ldrb	r3, [r3, #0]
    9e82:	001a      	movs	r2, r3
    9e84:	2310      	movs	r3, #16
    9e86:	4013      	ands	r3, r2
    9e88:	d016      	beq.n	9eb8 <f_open+0x3bc>
				res = FR_NO_FILE;
    9e8a:	4b04      	ldr	r3, [pc, #16]	; (9e9c <f_open+0x3a0>)
    9e8c:	18fb      	adds	r3, r7, r3
    9e8e:	2204      	movs	r2, #4
    9e90:	701a      	strb	r2, [r3, #0]
    9e92:	e029      	b.n	9ee8 <f_open+0x3ec>
    9e94:	fffffdac 	.word	0xfffffdac
    9e98:	fffffdb7 	.word	0xfffffdb7
    9e9c:	0000024f 	.word	0x0000024f
    9ea0:	00009455 	.word	0x00009455
    9ea4:	00009249 	.word	0x00009249
    9ea8:	000089c1 	.word	0x000089c1
    9eac:	00007511 	.word	0x00007511
    9eb0:	00007c95 	.word	0x00007c95
    9eb4:	00007655 	.word	0x00007655
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9eb8:	4b5a      	ldr	r3, [pc, #360]	; (a024 <f_open+0x528>)
    9eba:	2294      	movs	r2, #148	; 0x94
    9ebc:	0092      	lsls	r2, r2, #2
    9ebe:	4694      	mov	ip, r2
    9ec0:	44bc      	add	ip, r7
    9ec2:	4463      	add	r3, ip
    9ec4:	781b      	ldrb	r3, [r3, #0]
    9ec6:	2202      	movs	r2, #2
    9ec8:	4013      	ands	r3, r2
    9eca:	d00d      	beq.n	9ee8 <f_open+0x3ec>
    9ecc:	2392      	movs	r3, #146	; 0x92
    9ece:	009b      	lsls	r3, r3, #2
    9ed0:	18fb      	adds	r3, r7, r3
    9ed2:	681b      	ldr	r3, [r3, #0]
    9ed4:	330b      	adds	r3, #11
    9ed6:	781b      	ldrb	r3, [r3, #0]
    9ed8:	001a      	movs	r2, r3
    9eda:	2301      	movs	r3, #1
    9edc:	4013      	ands	r3, r2
    9ede:	d003      	beq.n	9ee8 <f_open+0x3ec>
					res = FR_DENIED;
    9ee0:	4b51      	ldr	r3, [pc, #324]	; (a028 <f_open+0x52c>)
    9ee2:	18fb      	adds	r3, r7, r3
    9ee4:	2207      	movs	r2, #7
    9ee6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    9ee8:	4b4f      	ldr	r3, [pc, #316]	; (a028 <f_open+0x52c>)
    9eea:	18fb      	adds	r3, r7, r3
    9eec:	781b      	ldrb	r3, [r3, #0]
    9eee:	2b00      	cmp	r3, #0
    9ef0:	d126      	bne.n	9f40 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    9ef2:	4b4c      	ldr	r3, [pc, #304]	; (a024 <f_open+0x528>)
    9ef4:	2294      	movs	r2, #148	; 0x94
    9ef6:	0092      	lsls	r2, r2, #2
    9ef8:	4694      	mov	ip, r2
    9efa:	44bc      	add	ip, r7
    9efc:	4463      	add	r3, ip
    9efe:	781b      	ldrb	r3, [r3, #0]
    9f00:	2208      	movs	r2, #8
    9f02:	4013      	ands	r3, r2
    9f04:	d00f      	beq.n	9f26 <f_open+0x42a>
			mode |= FA__WRITTEN;
    9f06:	4b47      	ldr	r3, [pc, #284]	; (a024 <f_open+0x528>)
    9f08:	2294      	movs	r2, #148	; 0x94
    9f0a:	0092      	lsls	r2, r2, #2
    9f0c:	4694      	mov	ip, r2
    9f0e:	44bc      	add	ip, r7
    9f10:	4463      	add	r3, ip
    9f12:	4a44      	ldr	r2, [pc, #272]	; (a024 <f_open+0x528>)
    9f14:	2194      	movs	r1, #148	; 0x94
    9f16:	0089      	lsls	r1, r1, #2
    9f18:	468c      	mov	ip, r1
    9f1a:	44bc      	add	ip, r7
    9f1c:	4462      	add	r2, ip
    9f1e:	7812      	ldrb	r2, [r2, #0]
    9f20:	2120      	movs	r1, #32
    9f22:	430a      	orrs	r2, r1
    9f24:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    9f26:	2387      	movs	r3, #135	; 0x87
    9f28:	009b      	lsls	r3, r3, #2
    9f2a:	18fb      	adds	r3, r7, r3
    9f2c:	681b      	ldr	r3, [r3, #0]
    9f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f30:	68fb      	ldr	r3, [r7, #12]
    9f32:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    9f34:	68fb      	ldr	r3, [r7, #12]
    9f36:	2292      	movs	r2, #146	; 0x92
    9f38:	0092      	lsls	r2, r2, #2
    9f3a:	18ba      	adds	r2, r7, r2
    9f3c:	6812      	ldr	r2, [r2, #0]
    9f3e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    9f40:	4b39      	ldr	r3, [pc, #228]	; (a028 <f_open+0x52c>)
    9f42:	18fb      	adds	r3, r7, r3
    9f44:	781b      	ldrb	r3, [r3, #0]
    9f46:	2b00      	cmp	r3, #0
    9f48:	d163      	bne.n	a012 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    9f4a:	68fb      	ldr	r3, [r7, #12]
    9f4c:	4a35      	ldr	r2, [pc, #212]	; (a024 <f_open+0x528>)
    9f4e:	2194      	movs	r1, #148	; 0x94
    9f50:	0089      	lsls	r1, r1, #2
    9f52:	468c      	mov	ip, r1
    9f54:	44bc      	add	ip, r7
    9f56:	4462      	add	r2, ip
    9f58:	7812      	ldrb	r2, [r2, #0]
    9f5a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    9f5c:	2392      	movs	r3, #146	; 0x92
    9f5e:	009b      	lsls	r3, r3, #2
    9f60:	18fb      	adds	r3, r7, r3
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	3315      	adds	r3, #21
    9f66:	781b      	ldrb	r3, [r3, #0]
    9f68:	021b      	lsls	r3, r3, #8
    9f6a:	b21a      	sxth	r2, r3
    9f6c:	2392      	movs	r3, #146	; 0x92
    9f6e:	009b      	lsls	r3, r3, #2
    9f70:	18fb      	adds	r3, r7, r3
    9f72:	681b      	ldr	r3, [r3, #0]
    9f74:	3314      	adds	r3, #20
    9f76:	781b      	ldrb	r3, [r3, #0]
    9f78:	b21b      	sxth	r3, r3
    9f7a:	4313      	orrs	r3, r2
    9f7c:	b21b      	sxth	r3, r3
    9f7e:	b29b      	uxth	r3, r3
    9f80:	041b      	lsls	r3, r3, #16
    9f82:	2292      	movs	r2, #146	; 0x92
    9f84:	0092      	lsls	r2, r2, #2
    9f86:	18ba      	adds	r2, r7, r2
    9f88:	6812      	ldr	r2, [r2, #0]
    9f8a:	321b      	adds	r2, #27
    9f8c:	7812      	ldrb	r2, [r2, #0]
    9f8e:	0212      	lsls	r2, r2, #8
    9f90:	b211      	sxth	r1, r2
    9f92:	2292      	movs	r2, #146	; 0x92
    9f94:	0092      	lsls	r2, r2, #2
    9f96:	18ba      	adds	r2, r7, r2
    9f98:	6812      	ldr	r2, [r2, #0]
    9f9a:	321a      	adds	r2, #26
    9f9c:	7812      	ldrb	r2, [r2, #0]
    9f9e:	b212      	sxth	r2, r2
    9fa0:	430a      	orrs	r2, r1
    9fa2:	b212      	sxth	r2, r2
    9fa4:	b292      	uxth	r2, r2
    9fa6:	431a      	orrs	r2, r3
    9fa8:	68fb      	ldr	r3, [r7, #12]
    9faa:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9fac:	2392      	movs	r3, #146	; 0x92
    9fae:	009b      	lsls	r3, r3, #2
    9fb0:	18fb      	adds	r3, r7, r3
    9fb2:	681b      	ldr	r3, [r3, #0]
    9fb4:	331f      	adds	r3, #31
    9fb6:	781b      	ldrb	r3, [r3, #0]
    9fb8:	061a      	lsls	r2, r3, #24
    9fba:	2392      	movs	r3, #146	; 0x92
    9fbc:	009b      	lsls	r3, r3, #2
    9fbe:	18fb      	adds	r3, r7, r3
    9fc0:	681b      	ldr	r3, [r3, #0]
    9fc2:	331e      	adds	r3, #30
    9fc4:	781b      	ldrb	r3, [r3, #0]
    9fc6:	041b      	lsls	r3, r3, #16
    9fc8:	4313      	orrs	r3, r2
    9fca:	2292      	movs	r2, #146	; 0x92
    9fcc:	0092      	lsls	r2, r2, #2
    9fce:	18ba      	adds	r2, r7, r2
    9fd0:	6812      	ldr	r2, [r2, #0]
    9fd2:	321d      	adds	r2, #29
    9fd4:	7812      	ldrb	r2, [r2, #0]
    9fd6:	0212      	lsls	r2, r2, #8
    9fd8:	4313      	orrs	r3, r2
    9fda:	2292      	movs	r2, #146	; 0x92
    9fdc:	0092      	lsls	r2, r2, #2
    9fde:	18ba      	adds	r2, r7, r2
    9fe0:	6812      	ldr	r2, [r2, #0]
    9fe2:	321c      	adds	r2, #28
    9fe4:	7812      	ldrb	r2, [r2, #0]
    9fe6:	431a      	orrs	r2, r3
    9fe8:	68fb      	ldr	r3, [r7, #12]
    9fea:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    9fec:	68fb      	ldr	r3, [r7, #12]
    9fee:	2200      	movs	r2, #0
    9ff0:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    9ff2:	68fb      	ldr	r3, [r7, #12]
    9ff4:	2200      	movs	r2, #0
    9ff6:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    9ff8:	2387      	movs	r3, #135	; 0x87
    9ffa:	009b      	lsls	r3, r3, #2
    9ffc:	18fb      	adds	r3, r7, r3
    9ffe:	681a      	ldr	r2, [r3, #0]
    a000:	68fb      	ldr	r3, [r7, #12]
    a002:	601a      	str	r2, [r3, #0]
    a004:	2387      	movs	r3, #135	; 0x87
    a006:	009b      	lsls	r3, r3, #2
    a008:	18fb      	adds	r3, r7, r3
    a00a:	681b      	ldr	r3, [r3, #0]
    a00c:	88da      	ldrh	r2, [r3, #6]
    a00e:	68fb      	ldr	r3, [r7, #12]
    a010:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    a012:	4b05      	ldr	r3, [pc, #20]	; (a028 <f_open+0x52c>)
    a014:	18fb      	adds	r3, r7, r3
    a016:	781b      	ldrb	r3, [r3, #0]
}
    a018:	0018      	movs	r0, r3
    a01a:	46bd      	mov	sp, r7
    a01c:	2395      	movs	r3, #149	; 0x95
    a01e:	009b      	lsls	r3, r3, #2
    a020:	449d      	add	sp, r3
    a022:	bd90      	pop	{r4, r7, pc}
    a024:	fffffdb7 	.word	0xfffffdb7
    a028:	0000024f 	.word	0x0000024f

0000a02c <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    a02c:	b590      	push	{r4, r7, lr}
    a02e:	b08d      	sub	sp, #52	; 0x34
    a030:	af00      	add	r7, sp, #0
    a032:	60f8      	str	r0, [r7, #12]
    a034:	60b9      	str	r1, [r7, #8]
    a036:	607a      	str	r2, [r7, #4]
    a038:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    a03a:	68bb      	ldr	r3, [r7, #8]
    a03c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
    a03e:	683b      	ldr	r3, [r7, #0]
    a040:	2200      	movs	r2, #0
    a042:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    a044:	68fb      	ldr	r3, [r7, #12]
    a046:	681a      	ldr	r2, [r3, #0]
    a048:	68fb      	ldr	r3, [r7, #12]
    a04a:	889b      	ldrh	r3, [r3, #4]
    a04c:	211f      	movs	r1, #31
    a04e:	187c      	adds	r4, r7, r1
    a050:	0019      	movs	r1, r3
    a052:	0010      	movs	r0, r2
    a054:	4b96      	ldr	r3, [pc, #600]	; (a2b0 <f_read+0x284>)
    a056:	4798      	blx	r3
    a058:	0003      	movs	r3, r0
    a05a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a05c:	231f      	movs	r3, #31
    a05e:	18fb      	adds	r3, r7, r3
    a060:	781b      	ldrb	r3, [r3, #0]
    a062:	2b00      	cmp	r3, #0
    a064:	d003      	beq.n	a06e <f_read+0x42>
    a066:	231f      	movs	r3, #31
    a068:	18fb      	adds	r3, r7, r3
    a06a:	781b      	ldrb	r3, [r3, #0]
    a06c:	e11b      	b.n	a2a6 <f_read+0x27a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    a06e:	68fb      	ldr	r3, [r7, #12]
    a070:	799b      	ldrb	r3, [r3, #6]
    a072:	b25b      	sxtb	r3, r3
    a074:	2b00      	cmp	r3, #0
    a076:	da01      	bge.n	a07c <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a078:	2302      	movs	r3, #2
    a07a:	e114      	b.n	a2a6 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    a07c:	68fb      	ldr	r3, [r7, #12]
    a07e:	799b      	ldrb	r3, [r3, #6]
    a080:	001a      	movs	r2, r3
    a082:	2301      	movs	r3, #1
    a084:	4013      	ands	r3, r2
    a086:	d101      	bne.n	a08c <f_read+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a088:	2307      	movs	r3, #7
    a08a:	e10c      	b.n	a2a6 <f_read+0x27a>
	remain = fp->fsize - fp->fptr;
    a08c:	68fb      	ldr	r3, [r7, #12]
    a08e:	68da      	ldr	r2, [r3, #12]
    a090:	68fb      	ldr	r3, [r7, #12]
    a092:	689b      	ldr	r3, [r3, #8]
    a094:	1ad3      	subs	r3, r2, r3
    a096:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    a098:	687a      	ldr	r2, [r7, #4]
    a09a:	69bb      	ldr	r3, [r7, #24]
    a09c:	429a      	cmp	r2, r3
    a09e:	d800      	bhi.n	a0a2 <f_read+0x76>
    a0a0:	e0fc      	b.n	a29c <f_read+0x270>
    a0a2:	69bb      	ldr	r3, [r7, #24]
    a0a4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
    a0a6:	e0f9      	b.n	a29c <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    a0a8:	68fb      	ldr	r3, [r7, #12]
    a0aa:	689b      	ldr	r3, [r3, #8]
    a0ac:	05db      	lsls	r3, r3, #23
    a0ae:	0ddb      	lsrs	r3, r3, #23
    a0b0:	d000      	beq.n	a0b4 <f_read+0x88>
    a0b2:	e0b0      	b.n	a216 <f_read+0x1ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a0b4:	68fb      	ldr	r3, [r7, #12]
    a0b6:	689b      	ldr	r3, [r3, #8]
    a0b8:	0a5b      	lsrs	r3, r3, #9
    a0ba:	b2da      	uxtb	r2, r3
    a0bc:	68fb      	ldr	r3, [r7, #12]
    a0be:	681b      	ldr	r3, [r3, #0]
    a0c0:	789b      	ldrb	r3, [r3, #2]
    a0c2:	3b01      	subs	r3, #1
    a0c4:	b2d9      	uxtb	r1, r3
    a0c6:	2317      	movs	r3, #23
    a0c8:	18fb      	adds	r3, r7, r3
    a0ca:	400a      	ands	r2, r1
    a0cc:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
    a0ce:	2317      	movs	r3, #23
    a0d0:	18fb      	adds	r3, r7, r3
    a0d2:	781b      	ldrb	r3, [r3, #0]
    a0d4:	2b00      	cmp	r3, #0
    a0d6:	d12e      	bne.n	a136 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    a0d8:	68fb      	ldr	r3, [r7, #12]
    a0da:	689b      	ldr	r3, [r3, #8]
    a0dc:	2b00      	cmp	r3, #0
    a0de:	d103      	bne.n	a0e8 <f_read+0xbc>
					clst = fp->sclust;			/* Follow from the origin */
    a0e0:	68fb      	ldr	r3, [r7, #12]
    a0e2:	691b      	ldr	r3, [r3, #16]
    a0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    a0e6:	e009      	b.n	a0fc <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    a0e8:	68fb      	ldr	r3, [r7, #12]
    a0ea:	681a      	ldr	r2, [r3, #0]
    a0ec:	68fb      	ldr	r3, [r7, #12]
    a0ee:	695b      	ldr	r3, [r3, #20]
    a0f0:	0019      	movs	r1, r3
    a0f2:	0010      	movs	r0, r2
    a0f4:	4b6f      	ldr	r3, [pc, #444]	; (a2b4 <f_read+0x288>)
    a0f6:	4798      	blx	r3
    a0f8:	0003      	movs	r3, r0
    a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    a0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a0fe:	2b01      	cmp	r3, #1
    a100:	d809      	bhi.n	a116 <f_read+0xea>
    a102:	68fb      	ldr	r3, [r7, #12]
    a104:	799b      	ldrb	r3, [r3, #6]
    a106:	2280      	movs	r2, #128	; 0x80
    a108:	4252      	negs	r2, r2
    a10a:	4313      	orrs	r3, r2
    a10c:	b2da      	uxtb	r2, r3
    a10e:	68fb      	ldr	r3, [r7, #12]
    a110:	719a      	strb	r2, [r3, #6]
    a112:	2302      	movs	r3, #2
    a114:	e0c7      	b.n	a2a6 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a118:	3301      	adds	r3, #1
    a11a:	d109      	bne.n	a130 <f_read+0x104>
    a11c:	68fb      	ldr	r3, [r7, #12]
    a11e:	799b      	ldrb	r3, [r3, #6]
    a120:	2280      	movs	r2, #128	; 0x80
    a122:	4252      	negs	r2, r2
    a124:	4313      	orrs	r3, r2
    a126:	b2da      	uxtb	r2, r3
    a128:	68fb      	ldr	r3, [r7, #12]
    a12a:	719a      	strb	r2, [r3, #6]
    a12c:	2301      	movs	r3, #1
    a12e:	e0ba      	b.n	a2a6 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
    a130:	68fb      	ldr	r3, [r7, #12]
    a132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a134:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a136:	68fb      	ldr	r3, [r7, #12]
    a138:	681a      	ldr	r2, [r3, #0]
    a13a:	68fb      	ldr	r3, [r7, #12]
    a13c:	695b      	ldr	r3, [r3, #20]
    a13e:	0019      	movs	r1, r3
    a140:	0010      	movs	r0, r2
    a142:	4b5d      	ldr	r3, [pc, #372]	; (a2b8 <f_read+0x28c>)
    a144:	4798      	blx	r3
    a146:	0003      	movs	r3, r0
    a148:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a14a:	693b      	ldr	r3, [r7, #16]
    a14c:	2b00      	cmp	r3, #0
    a14e:	d109      	bne.n	a164 <f_read+0x138>
    a150:	68fb      	ldr	r3, [r7, #12]
    a152:	799b      	ldrb	r3, [r3, #6]
    a154:	2280      	movs	r2, #128	; 0x80
    a156:	4252      	negs	r2, r2
    a158:	4313      	orrs	r3, r2
    a15a:	b2da      	uxtb	r2, r3
    a15c:	68fb      	ldr	r3, [r7, #12]
    a15e:	719a      	strb	r2, [r3, #6]
    a160:	2302      	movs	r3, #2
    a162:	e0a0      	b.n	a2a6 <f_read+0x27a>
			sect += csect;
    a164:	2317      	movs	r3, #23
    a166:	18fb      	adds	r3, r7, r3
    a168:	781b      	ldrb	r3, [r3, #0]
    a16a:	693a      	ldr	r2, [r7, #16]
    a16c:	18d3      	adds	r3, r2, r3
    a16e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    a170:	687b      	ldr	r3, [r7, #4]
    a172:	0a5b      	lsrs	r3, r3, #9
    a174:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
    a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a178:	2b00      	cmp	r3, #0
    a17a:	d049      	beq.n	a210 <f_read+0x1e4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a17c:	2317      	movs	r3, #23
    a17e:	18fb      	adds	r3, r7, r3
    a180:	781a      	ldrb	r2, [r3, #0]
    a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a184:	18d2      	adds	r2, r2, r3
    a186:	68fb      	ldr	r3, [r7, #12]
    a188:	681b      	ldr	r3, [r3, #0]
    a18a:	789b      	ldrb	r3, [r3, #2]
    a18c:	429a      	cmp	r2, r3
    a18e:	d908      	bls.n	a1a2 <f_read+0x176>
					cc = fp->fs->csize - csect;
    a190:	68fb      	ldr	r3, [r7, #12]
    a192:	681b      	ldr	r3, [r3, #0]
    a194:	789b      	ldrb	r3, [r3, #2]
    a196:	001a      	movs	r2, r3
    a198:	2317      	movs	r3, #23
    a19a:	18fb      	adds	r3, r7, r3
    a19c:	781b      	ldrb	r3, [r3, #0]
    a19e:	1ad3      	subs	r3, r2, r3
    a1a0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    a1a2:	68fb      	ldr	r3, [r7, #12]
    a1a4:	681b      	ldr	r3, [r3, #0]
    a1a6:	7858      	ldrb	r0, [r3, #1]
    a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1aa:	b2db      	uxtb	r3, r3
    a1ac:	693a      	ldr	r2, [r7, #16]
    a1ae:	6a39      	ldr	r1, [r7, #32]
    a1b0:	4c42      	ldr	r4, [pc, #264]	; (a2bc <f_read+0x290>)
    a1b2:	47a0      	blx	r4
    a1b4:	1e03      	subs	r3, r0, #0
    a1b6:	d009      	beq.n	a1cc <f_read+0x1a0>
					ABORT(fp->fs, FR_DISK_ERR);
    a1b8:	68fb      	ldr	r3, [r7, #12]
    a1ba:	799b      	ldrb	r3, [r3, #6]
    a1bc:	2280      	movs	r2, #128	; 0x80
    a1be:	4252      	negs	r2, r2
    a1c0:	4313      	orrs	r3, r2
    a1c2:	b2da      	uxtb	r2, r3
    a1c4:	68fb      	ldr	r3, [r7, #12]
    a1c6:	719a      	strb	r2, [r3, #6]
    a1c8:	2301      	movs	r3, #1
    a1ca:	e06c      	b.n	a2a6 <f_read+0x27a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    a1cc:	68fb      	ldr	r3, [r7, #12]
    a1ce:	681b      	ldr	r3, [r3, #0]
    a1d0:	791b      	ldrb	r3, [r3, #4]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d018      	beq.n	a208 <f_read+0x1dc>
    a1d6:	68fb      	ldr	r3, [r7, #12]
    a1d8:	681b      	ldr	r3, [r3, #0]
    a1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1dc:	693b      	ldr	r3, [r7, #16]
    a1de:	1ad2      	subs	r2, r2, r3
    a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1e2:	429a      	cmp	r2, r3
    a1e4:	d210      	bcs.n	a208 <f_read+0x1dc>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    a1e6:	68fb      	ldr	r3, [r7, #12]
    a1e8:	681b      	ldr	r3, [r3, #0]
    a1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1ec:	693b      	ldr	r3, [r7, #16]
    a1ee:	1ad3      	subs	r3, r2, r3
    a1f0:	025b      	lsls	r3, r3, #9
    a1f2:	6a3a      	ldr	r2, [r7, #32]
    a1f4:	18d0      	adds	r0, r2, r3
    a1f6:	68fb      	ldr	r3, [r7, #12]
    a1f8:	681b      	ldr	r3, [r3, #0]
    a1fa:	3330      	adds	r3, #48	; 0x30
    a1fc:	0019      	movs	r1, r3
    a1fe:	2380      	movs	r3, #128	; 0x80
    a200:	009b      	lsls	r3, r3, #2
    a202:	001a      	movs	r2, r3
    a204:	4b2e      	ldr	r3, [pc, #184]	; (a2c0 <f_read+0x294>)
    a206:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a20a:	025b      	lsls	r3, r3, #9
    a20c:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
    a20e:	e031      	b.n	a274 <f_read+0x248>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a210:	68fb      	ldr	r3, [r7, #12]
    a212:	693a      	ldr	r2, [r7, #16]
    a214:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a216:	68fb      	ldr	r3, [r7, #12]
    a218:	689b      	ldr	r3, [r3, #8]
    a21a:	05db      	lsls	r3, r3, #23
    a21c:	0ddb      	lsrs	r3, r3, #23
    a21e:	2280      	movs	r2, #128	; 0x80
    a220:	0092      	lsls	r2, r2, #2
    a222:	1ad3      	subs	r3, r2, r3
    a224:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
    a226:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a228:	687b      	ldr	r3, [r7, #4]
    a22a:	429a      	cmp	r2, r3
    a22c:	d901      	bls.n	a232 <f_read+0x206>
    a22e:	687b      	ldr	r3, [r7, #4]
    a230:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    a232:	68fb      	ldr	r3, [r7, #12]
    a234:	681a      	ldr	r2, [r3, #0]
    a236:	68fb      	ldr	r3, [r7, #12]
    a238:	699b      	ldr	r3, [r3, #24]
    a23a:	0019      	movs	r1, r3
    a23c:	0010      	movs	r0, r2
    a23e:	4b21      	ldr	r3, [pc, #132]	; (a2c4 <f_read+0x298>)
    a240:	4798      	blx	r3
    a242:	1e03      	subs	r3, r0, #0
    a244:	d009      	beq.n	a25a <f_read+0x22e>
			ABORT(fp->fs, FR_DISK_ERR);
    a246:	68fb      	ldr	r3, [r7, #12]
    a248:	799b      	ldrb	r3, [r3, #6]
    a24a:	2280      	movs	r2, #128	; 0x80
    a24c:	4252      	negs	r2, r2
    a24e:	4313      	orrs	r3, r2
    a250:	b2da      	uxtb	r2, r3
    a252:	68fb      	ldr	r3, [r7, #12]
    a254:	719a      	strb	r2, [r3, #6]
    a256:	2301      	movs	r3, #1
    a258:	e025      	b.n	a2a6 <f_read+0x27a>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    a25a:	68fb      	ldr	r3, [r7, #12]
    a25c:	681a      	ldr	r2, [r3, #0]
    a25e:	68fb      	ldr	r3, [r7, #12]
    a260:	689b      	ldr	r3, [r3, #8]
    a262:	05db      	lsls	r3, r3, #23
    a264:	0ddb      	lsrs	r3, r3, #23
    a266:	3330      	adds	r3, #48	; 0x30
    a268:	18d1      	adds	r1, r2, r3
    a26a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a26c:	6a3b      	ldr	r3, [r7, #32]
    a26e:	0018      	movs	r0, r3
    a270:	4b13      	ldr	r3, [pc, #76]	; (a2c0 <f_read+0x294>)
    a272:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    a274:	6a3a      	ldr	r2, [r7, #32]
    a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a278:	18d3      	adds	r3, r2, r3
    a27a:	623b      	str	r3, [r7, #32]
    a27c:	68fb      	ldr	r3, [r7, #12]
    a27e:	689a      	ldr	r2, [r3, #8]
    a280:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a282:	18d2      	adds	r2, r2, r3
    a284:	68fb      	ldr	r3, [r7, #12]
    a286:	609a      	str	r2, [r3, #8]
    a288:	683b      	ldr	r3, [r7, #0]
    a28a:	681a      	ldr	r2, [r3, #0]
    a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a28e:	18d2      	adds	r2, r2, r3
    a290:	683b      	ldr	r3, [r7, #0]
    a292:	601a      	str	r2, [r3, #0]
    a294:	687a      	ldr	r2, [r7, #4]
    a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a298:	1ad3      	subs	r3, r2, r3
    a29a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
    a29c:	687b      	ldr	r3, [r7, #4]
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d000      	beq.n	a2a4 <f_read+0x278>
    a2a2:	e701      	b.n	a0a8 <f_read+0x7c>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    a2a4:	2300      	movs	r3, #0
}
    a2a6:	0018      	movs	r0, r3
    a2a8:	46bd      	mov	sp, r7
    a2aa:	b00d      	add	sp, #52	; 0x34
    a2ac:	bd90      	pop	{r4, r7, pc}
    a2ae:	46c0      	nop			; (mov r8, r8)
    a2b0:	00009a51 	.word	0x00009a51
    a2b4:	000078ed 	.word	0x000078ed
    a2b8:	000078b5 	.word	0x000078b5
    a2bc:	00007269 	.word	0x00007269
    a2c0:	00007571 	.word	0x00007571
    a2c4:	00007655 	.word	0x00007655

0000a2c8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    a2c8:	b590      	push	{r4, r7, lr}
    a2ca:	b08b      	sub	sp, #44	; 0x2c
    a2cc:	af00      	add	r7, sp, #0
    a2ce:	60f8      	str	r0, [r7, #12]
    a2d0:	60b9      	str	r1, [r7, #8]
    a2d2:	607a      	str	r2, [r7, #4]
    a2d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    a2d6:	68bb      	ldr	r3, [r7, #8]
    a2d8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    a2da:	683b      	ldr	r3, [r7, #0]
    a2dc:	2200      	movs	r2, #0
    a2de:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    a2e0:	68fb      	ldr	r3, [r7, #12]
    a2e2:	681a      	ldr	r2, [r3, #0]
    a2e4:	68fb      	ldr	r3, [r7, #12]
    a2e6:	889b      	ldrh	r3, [r3, #4]
    a2e8:	2117      	movs	r1, #23
    a2ea:	187c      	adds	r4, r7, r1
    a2ec:	0019      	movs	r1, r3
    a2ee:	0010      	movs	r0, r2
    a2f0:	4bc3      	ldr	r3, [pc, #780]	; (a600 <f_write+0x338>)
    a2f2:	4798      	blx	r3
    a2f4:	0003      	movs	r3, r0
    a2f6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a2f8:	2317      	movs	r3, #23
    a2fa:	18fb      	adds	r3, r7, r3
    a2fc:	781b      	ldrb	r3, [r3, #0]
    a2fe:	2b00      	cmp	r3, #0
    a300:	d003      	beq.n	a30a <f_write+0x42>
    a302:	2317      	movs	r3, #23
    a304:	18fb      	adds	r3, r7, r3
    a306:	781b      	ldrb	r3, [r3, #0]
    a308:	e176      	b.n	a5f8 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    a30a:	68fb      	ldr	r3, [r7, #12]
    a30c:	799b      	ldrb	r3, [r3, #6]
    a30e:	b25b      	sxtb	r3, r3
    a310:	2b00      	cmp	r3, #0
    a312:	da01      	bge.n	a318 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a314:	2302      	movs	r3, #2
    a316:	e16f      	b.n	a5f8 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    a318:	68fb      	ldr	r3, [r7, #12]
    a31a:	799b      	ldrb	r3, [r3, #6]
    a31c:	001a      	movs	r2, r3
    a31e:	2302      	movs	r3, #2
    a320:	4013      	ands	r3, r2
    a322:	d101      	bne.n	a328 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a324:	2307      	movs	r3, #7
    a326:	e167      	b.n	a5f8 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    a328:	68fb      	ldr	r3, [r7, #12]
    a32a:	68da      	ldr	r2, [r3, #12]
    a32c:	687b      	ldr	r3, [r7, #4]
    a32e:	18d2      	adds	r2, r2, r3
    a330:	68fb      	ldr	r3, [r7, #12]
    a332:	68db      	ldr	r3, [r3, #12]
    a334:	429a      	cmp	r2, r3
    a336:	d300      	bcc.n	a33a <f_write+0x72>
    a338:	e146      	b.n	a5c8 <f_write+0x300>
    a33a:	2300      	movs	r3, #0
    a33c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    a33e:	e143      	b.n	a5c8 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    a340:	68fb      	ldr	r3, [r7, #12]
    a342:	689b      	ldr	r3, [r3, #8]
    a344:	05db      	lsls	r3, r3, #23
    a346:	0ddb      	lsrs	r3, r3, #23
    a348:	d000      	beq.n	a34c <f_write+0x84>
    a34a:	e0f6      	b.n	a53a <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a34c:	68fb      	ldr	r3, [r7, #12]
    a34e:	689b      	ldr	r3, [r3, #8]
    a350:	0a5b      	lsrs	r3, r3, #9
    a352:	b2da      	uxtb	r2, r3
    a354:	68fb      	ldr	r3, [r7, #12]
    a356:	681b      	ldr	r3, [r3, #0]
    a358:	789b      	ldrb	r3, [r3, #2]
    a35a:	3b01      	subs	r3, #1
    a35c:	b2d9      	uxtb	r1, r3
    a35e:	2316      	movs	r3, #22
    a360:	18fb      	adds	r3, r7, r3
    a362:	400a      	ands	r2, r1
    a364:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    a366:	2316      	movs	r3, #22
    a368:	18fb      	adds	r3, r7, r3
    a36a:	781b      	ldrb	r3, [r3, #0]
    a36c:	2b00      	cmp	r3, #0
    a36e:	d140      	bne.n	a3f2 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    a370:	68fb      	ldr	r3, [r7, #12]
    a372:	689b      	ldr	r3, [r3, #8]
    a374:	2b00      	cmp	r3, #0
    a376:	d111      	bne.n	a39c <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    a378:	68fb      	ldr	r3, [r7, #12]
    a37a:	691b      	ldr	r3, [r3, #16]
    a37c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a380:	2b00      	cmp	r3, #0
    a382:	d115      	bne.n	a3b0 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    a384:	68fb      	ldr	r3, [r7, #12]
    a386:	681b      	ldr	r3, [r3, #0]
    a388:	2100      	movs	r1, #0
    a38a:	0018      	movs	r0, r3
    a38c:	4b9d      	ldr	r3, [pc, #628]	; (a604 <f_write+0x33c>)
    a38e:	4798      	blx	r3
    a390:	0003      	movs	r3, r0
    a392:	627b      	str	r3, [r7, #36]	; 0x24
    a394:	68fb      	ldr	r3, [r7, #12]
    a396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a398:	611a      	str	r2, [r3, #16]
    a39a:	e009      	b.n	a3b0 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    a39c:	68fb      	ldr	r3, [r7, #12]
    a39e:	681a      	ldr	r2, [r3, #0]
    a3a0:	68fb      	ldr	r3, [r7, #12]
    a3a2:	695b      	ldr	r3, [r3, #20]
    a3a4:	0019      	movs	r1, r3
    a3a6:	0010      	movs	r0, r2
    a3a8:	4b96      	ldr	r3, [pc, #600]	; (a604 <f_write+0x33c>)
    a3aa:	4798      	blx	r3
    a3ac:	0003      	movs	r3, r0
    a3ae:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a3b2:	2b00      	cmp	r3, #0
    a3b4:	d100      	bne.n	a3b8 <f_write+0xf0>
    a3b6:	e10c      	b.n	a5d2 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a3ba:	2b01      	cmp	r3, #1
    a3bc:	d109      	bne.n	a3d2 <f_write+0x10a>
    a3be:	68fb      	ldr	r3, [r7, #12]
    a3c0:	799b      	ldrb	r3, [r3, #6]
    a3c2:	2280      	movs	r2, #128	; 0x80
    a3c4:	4252      	negs	r2, r2
    a3c6:	4313      	orrs	r3, r2
    a3c8:	b2da      	uxtb	r2, r3
    a3ca:	68fb      	ldr	r3, [r7, #12]
    a3cc:	719a      	strb	r2, [r3, #6]
    a3ce:	2302      	movs	r3, #2
    a3d0:	e112      	b.n	a5f8 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a3d4:	3301      	adds	r3, #1
    a3d6:	d109      	bne.n	a3ec <f_write+0x124>
    a3d8:	68fb      	ldr	r3, [r7, #12]
    a3da:	799b      	ldrb	r3, [r3, #6]
    a3dc:	2280      	movs	r2, #128	; 0x80
    a3de:	4252      	negs	r2, r2
    a3e0:	4313      	orrs	r3, r2
    a3e2:	b2da      	uxtb	r2, r3
    a3e4:	68fb      	ldr	r3, [r7, #12]
    a3e6:	719a      	strb	r2, [r3, #6]
    a3e8:	2301      	movs	r3, #1
    a3ea:	e105      	b.n	a5f8 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    a3ec:	68fb      	ldr	r3, [r7, #12]
    a3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a3f0:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    a3f2:	68fb      	ldr	r3, [r7, #12]
    a3f4:	681b      	ldr	r3, [r3, #0]
    a3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a3f8:	68fb      	ldr	r3, [r7, #12]
    a3fa:	699b      	ldr	r3, [r3, #24]
    a3fc:	429a      	cmp	r2, r3
    a3fe:	d111      	bne.n	a424 <f_write+0x15c>
    a400:	68fb      	ldr	r3, [r7, #12]
    a402:	681b      	ldr	r3, [r3, #0]
    a404:	2100      	movs	r1, #0
    a406:	0018      	movs	r0, r3
    a408:	4b7f      	ldr	r3, [pc, #508]	; (a608 <f_write+0x340>)
    a40a:	4798      	blx	r3
    a40c:	1e03      	subs	r3, r0, #0
    a40e:	d009      	beq.n	a424 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    a410:	68fb      	ldr	r3, [r7, #12]
    a412:	799b      	ldrb	r3, [r3, #6]
    a414:	2280      	movs	r2, #128	; 0x80
    a416:	4252      	negs	r2, r2
    a418:	4313      	orrs	r3, r2
    a41a:	b2da      	uxtb	r2, r3
    a41c:	68fb      	ldr	r3, [r7, #12]
    a41e:	719a      	strb	r2, [r3, #6]
    a420:	2301      	movs	r3, #1
    a422:	e0e9      	b.n	a5f8 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a424:	68fb      	ldr	r3, [r7, #12]
    a426:	681a      	ldr	r2, [r3, #0]
    a428:	68fb      	ldr	r3, [r7, #12]
    a42a:	695b      	ldr	r3, [r3, #20]
    a42c:	0019      	movs	r1, r3
    a42e:	0010      	movs	r0, r2
    a430:	4b76      	ldr	r3, [pc, #472]	; (a60c <f_write+0x344>)
    a432:	4798      	blx	r3
    a434:	0003      	movs	r3, r0
    a436:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a438:	693b      	ldr	r3, [r7, #16]
    a43a:	2b00      	cmp	r3, #0
    a43c:	d109      	bne.n	a452 <f_write+0x18a>
    a43e:	68fb      	ldr	r3, [r7, #12]
    a440:	799b      	ldrb	r3, [r3, #6]
    a442:	2280      	movs	r2, #128	; 0x80
    a444:	4252      	negs	r2, r2
    a446:	4313      	orrs	r3, r2
    a448:	b2da      	uxtb	r2, r3
    a44a:	68fb      	ldr	r3, [r7, #12]
    a44c:	719a      	strb	r2, [r3, #6]
    a44e:	2302      	movs	r3, #2
    a450:	e0d2      	b.n	a5f8 <f_write+0x330>
			sect += csect;
    a452:	2316      	movs	r3, #22
    a454:	18fb      	adds	r3, r7, r3
    a456:	781b      	ldrb	r3, [r3, #0]
    a458:	693a      	ldr	r2, [r7, #16]
    a45a:	18d3      	adds	r3, r2, r3
    a45c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    a45e:	687b      	ldr	r3, [r7, #4]
    a460:	0a5b      	lsrs	r3, r3, #9
    a462:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    a464:	69fb      	ldr	r3, [r7, #28]
    a466:	2b00      	cmp	r3, #0
    a468:	d048      	beq.n	a4fc <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a46a:	2316      	movs	r3, #22
    a46c:	18fb      	adds	r3, r7, r3
    a46e:	781a      	ldrb	r2, [r3, #0]
    a470:	69fb      	ldr	r3, [r7, #28]
    a472:	18d2      	adds	r2, r2, r3
    a474:	68fb      	ldr	r3, [r7, #12]
    a476:	681b      	ldr	r3, [r3, #0]
    a478:	789b      	ldrb	r3, [r3, #2]
    a47a:	429a      	cmp	r2, r3
    a47c:	d908      	bls.n	a490 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    a47e:	68fb      	ldr	r3, [r7, #12]
    a480:	681b      	ldr	r3, [r3, #0]
    a482:	789b      	ldrb	r3, [r3, #2]
    a484:	001a      	movs	r2, r3
    a486:	2316      	movs	r3, #22
    a488:	18fb      	adds	r3, r7, r3
    a48a:	781b      	ldrb	r3, [r3, #0]
    a48c:	1ad3      	subs	r3, r2, r3
    a48e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    a490:	68fb      	ldr	r3, [r7, #12]
    a492:	681b      	ldr	r3, [r3, #0]
    a494:	7858      	ldrb	r0, [r3, #1]
    a496:	69fb      	ldr	r3, [r7, #28]
    a498:	b2db      	uxtb	r3, r3
    a49a:	693a      	ldr	r2, [r7, #16]
    a49c:	69b9      	ldr	r1, [r7, #24]
    a49e:	4c5c      	ldr	r4, [pc, #368]	; (a610 <f_write+0x348>)
    a4a0:	47a0      	blx	r4
    a4a2:	1e03      	subs	r3, r0, #0
    a4a4:	d009      	beq.n	a4ba <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    a4a6:	68fb      	ldr	r3, [r7, #12]
    a4a8:	799b      	ldrb	r3, [r3, #6]
    a4aa:	2280      	movs	r2, #128	; 0x80
    a4ac:	4252      	negs	r2, r2
    a4ae:	4313      	orrs	r3, r2
    a4b0:	b2da      	uxtb	r2, r3
    a4b2:	68fb      	ldr	r3, [r7, #12]
    a4b4:	719a      	strb	r2, [r3, #6]
    a4b6:	2301      	movs	r3, #1
    a4b8:	e09e      	b.n	a5f8 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    a4ba:	68fb      	ldr	r3, [r7, #12]
    a4bc:	681b      	ldr	r3, [r3, #0]
    a4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a4c0:	693b      	ldr	r3, [r7, #16]
    a4c2:	1ad2      	subs	r2, r2, r3
    a4c4:	69fb      	ldr	r3, [r7, #28]
    a4c6:	429a      	cmp	r2, r3
    a4c8:	d214      	bcs.n	a4f4 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    a4ca:	68fb      	ldr	r3, [r7, #12]
    a4cc:	681b      	ldr	r3, [r3, #0]
    a4ce:	3330      	adds	r3, #48	; 0x30
    a4d0:	0018      	movs	r0, r3
    a4d2:	68fb      	ldr	r3, [r7, #12]
    a4d4:	681b      	ldr	r3, [r3, #0]
    a4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a4d8:	693b      	ldr	r3, [r7, #16]
    a4da:	1ad3      	subs	r3, r2, r3
    a4dc:	025b      	lsls	r3, r3, #9
    a4de:	69ba      	ldr	r2, [r7, #24]
    a4e0:	18d1      	adds	r1, r2, r3
    a4e2:	2380      	movs	r3, #128	; 0x80
    a4e4:	009b      	lsls	r3, r3, #2
    a4e6:	001a      	movs	r2, r3
    a4e8:	4b4a      	ldr	r3, [pc, #296]	; (a614 <f_write+0x34c>)
    a4ea:	4798      	blx	r3
					fp->fs->wflag = 0;
    a4ec:	68fb      	ldr	r3, [r7, #12]
    a4ee:	681b      	ldr	r3, [r3, #0]
    a4f0:	2200      	movs	r2, #0
    a4f2:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    a4f4:	69fb      	ldr	r3, [r7, #28]
    a4f6:	025b      	lsls	r3, r3, #9
    a4f8:	623b      	str	r3, [r7, #32]
				continue;
    a4fa:	e051      	b.n	a5a0 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    a4fc:	68fb      	ldr	r3, [r7, #12]
    a4fe:	689a      	ldr	r2, [r3, #8]
    a500:	68fb      	ldr	r3, [r7, #12]
    a502:	68db      	ldr	r3, [r3, #12]
    a504:	429a      	cmp	r2, r3
    a506:	d315      	bcc.n	a534 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    a508:	68fb      	ldr	r3, [r7, #12]
    a50a:	681b      	ldr	r3, [r3, #0]
    a50c:	2100      	movs	r1, #0
    a50e:	0018      	movs	r0, r3
    a510:	4b3d      	ldr	r3, [pc, #244]	; (a608 <f_write+0x340>)
    a512:	4798      	blx	r3
    a514:	1e03      	subs	r3, r0, #0
    a516:	d009      	beq.n	a52c <f_write+0x264>
    a518:	68fb      	ldr	r3, [r7, #12]
    a51a:	799b      	ldrb	r3, [r3, #6]
    a51c:	2280      	movs	r2, #128	; 0x80
    a51e:	4252      	negs	r2, r2
    a520:	4313      	orrs	r3, r2
    a522:	b2da      	uxtb	r2, r3
    a524:	68fb      	ldr	r3, [r7, #12]
    a526:	719a      	strb	r2, [r3, #6]
    a528:	2301      	movs	r3, #1
    a52a:	e065      	b.n	a5f8 <f_write+0x330>
				fp->fs->winsect = sect;
    a52c:	68fb      	ldr	r3, [r7, #12]
    a52e:	681b      	ldr	r3, [r3, #0]
    a530:	693a      	ldr	r2, [r7, #16]
    a532:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a534:	68fb      	ldr	r3, [r7, #12]
    a536:	693a      	ldr	r2, [r7, #16]
    a538:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    a53a:	68fb      	ldr	r3, [r7, #12]
    a53c:	689b      	ldr	r3, [r3, #8]
    a53e:	05db      	lsls	r3, r3, #23
    a540:	0ddb      	lsrs	r3, r3, #23
    a542:	2280      	movs	r2, #128	; 0x80
    a544:	0092      	lsls	r2, r2, #2
    a546:	1ad3      	subs	r3, r2, r3
    a548:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    a54a:	6a3a      	ldr	r2, [r7, #32]
    a54c:	687b      	ldr	r3, [r7, #4]
    a54e:	429a      	cmp	r2, r3
    a550:	d901      	bls.n	a556 <f_write+0x28e>
    a552:	687b      	ldr	r3, [r7, #4]
    a554:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    a556:	68fb      	ldr	r3, [r7, #12]
    a558:	681a      	ldr	r2, [r3, #0]
    a55a:	68fb      	ldr	r3, [r7, #12]
    a55c:	699b      	ldr	r3, [r3, #24]
    a55e:	0019      	movs	r1, r3
    a560:	0010      	movs	r0, r2
    a562:	4b29      	ldr	r3, [pc, #164]	; (a608 <f_write+0x340>)
    a564:	4798      	blx	r3
    a566:	1e03      	subs	r3, r0, #0
    a568:	d009      	beq.n	a57e <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    a56a:	68fb      	ldr	r3, [r7, #12]
    a56c:	799b      	ldrb	r3, [r3, #6]
    a56e:	2280      	movs	r2, #128	; 0x80
    a570:	4252      	negs	r2, r2
    a572:	4313      	orrs	r3, r2
    a574:	b2da      	uxtb	r2, r3
    a576:	68fb      	ldr	r3, [r7, #12]
    a578:	719a      	strb	r2, [r3, #6]
    a57a:	2301      	movs	r3, #1
    a57c:	e03c      	b.n	a5f8 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    a57e:	68fb      	ldr	r3, [r7, #12]
    a580:	681a      	ldr	r2, [r3, #0]
    a582:	68fb      	ldr	r3, [r7, #12]
    a584:	689b      	ldr	r3, [r3, #8]
    a586:	05db      	lsls	r3, r3, #23
    a588:	0ddb      	lsrs	r3, r3, #23
    a58a:	3330      	adds	r3, #48	; 0x30
    a58c:	18d3      	adds	r3, r2, r3
    a58e:	6a3a      	ldr	r2, [r7, #32]
    a590:	69b9      	ldr	r1, [r7, #24]
    a592:	0018      	movs	r0, r3
    a594:	4b1f      	ldr	r3, [pc, #124]	; (a614 <f_write+0x34c>)
    a596:	4798      	blx	r3
		fp->fs->wflag = 1;
    a598:	68fb      	ldr	r3, [r7, #12]
    a59a:	681b      	ldr	r3, [r3, #0]
    a59c:	2201      	movs	r2, #1
    a59e:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    a5a0:	69ba      	ldr	r2, [r7, #24]
    a5a2:	6a3b      	ldr	r3, [r7, #32]
    a5a4:	18d3      	adds	r3, r2, r3
    a5a6:	61bb      	str	r3, [r7, #24]
    a5a8:	68fb      	ldr	r3, [r7, #12]
    a5aa:	689a      	ldr	r2, [r3, #8]
    a5ac:	6a3b      	ldr	r3, [r7, #32]
    a5ae:	18d2      	adds	r2, r2, r3
    a5b0:	68fb      	ldr	r3, [r7, #12]
    a5b2:	609a      	str	r2, [r3, #8]
    a5b4:	683b      	ldr	r3, [r7, #0]
    a5b6:	681a      	ldr	r2, [r3, #0]
    a5b8:	6a3b      	ldr	r3, [r7, #32]
    a5ba:	18d2      	adds	r2, r2, r3
    a5bc:	683b      	ldr	r3, [r7, #0]
    a5be:	601a      	str	r2, [r3, #0]
    a5c0:	687a      	ldr	r2, [r7, #4]
    a5c2:	6a3b      	ldr	r3, [r7, #32]
    a5c4:	1ad3      	subs	r3, r2, r3
    a5c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    a5c8:	687b      	ldr	r3, [r7, #4]
    a5ca:	2b00      	cmp	r3, #0
    a5cc:	d000      	beq.n	a5d0 <f_write+0x308>
    a5ce:	e6b7      	b.n	a340 <f_write+0x78>
    a5d0:	e000      	b.n	a5d4 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a5d2:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    a5d4:	68fb      	ldr	r3, [r7, #12]
    a5d6:	689a      	ldr	r2, [r3, #8]
    a5d8:	68fb      	ldr	r3, [r7, #12]
    a5da:	68db      	ldr	r3, [r3, #12]
    a5dc:	429a      	cmp	r2, r3
    a5de:	d903      	bls.n	a5e8 <f_write+0x320>
    a5e0:	68fb      	ldr	r3, [r7, #12]
    a5e2:	689a      	ldr	r2, [r3, #8]
    a5e4:	68fb      	ldr	r3, [r7, #12]
    a5e6:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    a5e8:	68fb      	ldr	r3, [r7, #12]
    a5ea:	799b      	ldrb	r3, [r3, #6]
    a5ec:	2220      	movs	r2, #32
    a5ee:	4313      	orrs	r3, r2
    a5f0:	b2da      	uxtb	r2, r3
    a5f2:	68fb      	ldr	r3, [r7, #12]
    a5f4:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    a5f6:	2300      	movs	r3, #0
}
    a5f8:	0018      	movs	r0, r3
    a5fa:	46bd      	mov	sp, r7
    a5fc:	b00b      	add	sp, #44	; 0x2c
    a5fe:	bd90      	pop	{r4, r7, pc}
    a600:	00009a51 	.word	0x00009a51
    a604:	00007d5d 	.word	0x00007d5d
    a608:	00007655 	.word	0x00007655
    a60c:	000078b5 	.word	0x000078b5
    a610:	00007341 	.word	0x00007341
    a614:	00007571 	.word	0x00007571

0000a618 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    a618:	b590      	push	{r4, r7, lr}
    a61a:	b087      	sub	sp, #28
    a61c:	af00      	add	r7, sp, #0
    a61e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a620:	687b      	ldr	r3, [r7, #4]
    a622:	681a      	ldr	r2, [r3, #0]
    a624:	687b      	ldr	r3, [r7, #4]
    a626:	889b      	ldrh	r3, [r3, #4]
    a628:	2117      	movs	r1, #23
    a62a:	187c      	adds	r4, r7, r1
    a62c:	0019      	movs	r1, r3
    a62e:	0010      	movs	r0, r2
    a630:	4b55      	ldr	r3, [pc, #340]	; (a788 <f_sync+0x170>)
    a632:	4798      	blx	r3
    a634:	0003      	movs	r3, r0
    a636:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a638:	2317      	movs	r3, #23
    a63a:	18fb      	adds	r3, r7, r3
    a63c:	781b      	ldrb	r3, [r3, #0]
    a63e:	2b00      	cmp	r3, #0
    a640:	d000      	beq.n	a644 <f_sync+0x2c>
    a642:	e09a      	b.n	a77a <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    a644:	687b      	ldr	r3, [r7, #4]
    a646:	799b      	ldrb	r3, [r3, #6]
    a648:	001a      	movs	r2, r3
    a64a:	2320      	movs	r3, #32
    a64c:	4013      	ands	r3, r2
    a64e:	d100      	bne.n	a652 <f_sync+0x3a>
    a650:	e093      	b.n	a77a <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    a652:	687b      	ldr	r3, [r7, #4]
    a654:	681a      	ldr	r2, [r3, #0]
    a656:	687b      	ldr	r3, [r7, #4]
    a658:	69db      	ldr	r3, [r3, #28]
    a65a:	2117      	movs	r1, #23
    a65c:	187c      	adds	r4, r7, r1
    a65e:	0019      	movs	r1, r3
    a660:	0010      	movs	r0, r2
    a662:	4b4a      	ldr	r3, [pc, #296]	; (a78c <f_sync+0x174>)
    a664:	4798      	blx	r3
    a666:	0003      	movs	r3, r0
    a668:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    a66a:	2317      	movs	r3, #23
    a66c:	18fb      	adds	r3, r7, r3
    a66e:	781b      	ldrb	r3, [r3, #0]
    a670:	2b00      	cmp	r3, #0
    a672:	d000      	beq.n	a676 <f_sync+0x5e>
    a674:	e081      	b.n	a77a <f_sync+0x162>
				dir = fp->dir_ptr;
    a676:	687b      	ldr	r3, [r7, #4]
    a678:	6a1b      	ldr	r3, [r3, #32]
    a67a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    a67c:	693b      	ldr	r3, [r7, #16]
    a67e:	330b      	adds	r3, #11
    a680:	693a      	ldr	r2, [r7, #16]
    a682:	320b      	adds	r2, #11
    a684:	7812      	ldrb	r2, [r2, #0]
    a686:	2120      	movs	r1, #32
    a688:	430a      	orrs	r2, r1
    a68a:	b2d2      	uxtb	r2, r2
    a68c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    a68e:	693b      	ldr	r3, [r7, #16]
    a690:	331c      	adds	r3, #28
    a692:	001a      	movs	r2, r3
    a694:	687b      	ldr	r3, [r7, #4]
    a696:	68db      	ldr	r3, [r3, #12]
    a698:	b2db      	uxtb	r3, r3
    a69a:	7013      	strb	r3, [r2, #0]
    a69c:	693b      	ldr	r3, [r7, #16]
    a69e:	331d      	adds	r3, #29
    a6a0:	001a      	movs	r2, r3
    a6a2:	687b      	ldr	r3, [r7, #4]
    a6a4:	68db      	ldr	r3, [r3, #12]
    a6a6:	b29b      	uxth	r3, r3
    a6a8:	0a1b      	lsrs	r3, r3, #8
    a6aa:	b29b      	uxth	r3, r3
    a6ac:	b2db      	uxtb	r3, r3
    a6ae:	7013      	strb	r3, [r2, #0]
    a6b0:	693b      	ldr	r3, [r7, #16]
    a6b2:	331e      	adds	r3, #30
    a6b4:	001a      	movs	r2, r3
    a6b6:	687b      	ldr	r3, [r7, #4]
    a6b8:	68db      	ldr	r3, [r3, #12]
    a6ba:	0c1b      	lsrs	r3, r3, #16
    a6bc:	b2db      	uxtb	r3, r3
    a6be:	7013      	strb	r3, [r2, #0]
    a6c0:	693b      	ldr	r3, [r7, #16]
    a6c2:	331f      	adds	r3, #31
    a6c4:	001a      	movs	r2, r3
    a6c6:	687b      	ldr	r3, [r7, #4]
    a6c8:	68db      	ldr	r3, [r3, #12]
    a6ca:	0e1b      	lsrs	r3, r3, #24
    a6cc:	b2db      	uxtb	r3, r3
    a6ce:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    a6d0:	693b      	ldr	r3, [r7, #16]
    a6d2:	331a      	adds	r3, #26
    a6d4:	001a      	movs	r2, r3
    a6d6:	687b      	ldr	r3, [r7, #4]
    a6d8:	691b      	ldr	r3, [r3, #16]
    a6da:	b2db      	uxtb	r3, r3
    a6dc:	7013      	strb	r3, [r2, #0]
    a6de:	693b      	ldr	r3, [r7, #16]
    a6e0:	331b      	adds	r3, #27
    a6e2:	001a      	movs	r2, r3
    a6e4:	687b      	ldr	r3, [r7, #4]
    a6e6:	691b      	ldr	r3, [r3, #16]
    a6e8:	b29b      	uxth	r3, r3
    a6ea:	0a1b      	lsrs	r3, r3, #8
    a6ec:	b29b      	uxth	r3, r3
    a6ee:	b2db      	uxtb	r3, r3
    a6f0:	7013      	strb	r3, [r2, #0]
    a6f2:	693b      	ldr	r3, [r7, #16]
    a6f4:	3314      	adds	r3, #20
    a6f6:	001a      	movs	r2, r3
    a6f8:	687b      	ldr	r3, [r7, #4]
    a6fa:	691b      	ldr	r3, [r3, #16]
    a6fc:	0c1b      	lsrs	r3, r3, #16
    a6fe:	b2db      	uxtb	r3, r3
    a700:	7013      	strb	r3, [r2, #0]
    a702:	693b      	ldr	r3, [r7, #16]
    a704:	3315      	adds	r3, #21
    a706:	001a      	movs	r2, r3
    a708:	687b      	ldr	r3, [r7, #4]
    a70a:	691b      	ldr	r3, [r3, #16]
    a70c:	0c1b      	lsrs	r3, r3, #16
    a70e:	b29b      	uxth	r3, r3
    a710:	0a1b      	lsrs	r3, r3, #8
    a712:	b29b      	uxth	r3, r3
    a714:	b2db      	uxtb	r3, r3
    a716:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    a718:	4b1d      	ldr	r3, [pc, #116]	; (a790 <f_sync+0x178>)
    a71a:	4798      	blx	r3
    a71c:	0003      	movs	r3, r0
    a71e:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    a720:	693b      	ldr	r3, [r7, #16]
    a722:	3316      	adds	r3, #22
    a724:	68fa      	ldr	r2, [r7, #12]
    a726:	b2d2      	uxtb	r2, r2
    a728:	701a      	strb	r2, [r3, #0]
    a72a:	693b      	ldr	r3, [r7, #16]
    a72c:	3317      	adds	r3, #23
    a72e:	68fa      	ldr	r2, [r7, #12]
    a730:	b292      	uxth	r2, r2
    a732:	0a12      	lsrs	r2, r2, #8
    a734:	b292      	uxth	r2, r2
    a736:	b2d2      	uxtb	r2, r2
    a738:	701a      	strb	r2, [r3, #0]
    a73a:	693b      	ldr	r3, [r7, #16]
    a73c:	3318      	adds	r3, #24
    a73e:	68fa      	ldr	r2, [r7, #12]
    a740:	0c12      	lsrs	r2, r2, #16
    a742:	b2d2      	uxtb	r2, r2
    a744:	701a      	strb	r2, [r3, #0]
    a746:	693b      	ldr	r3, [r7, #16]
    a748:	3319      	adds	r3, #25
    a74a:	68fa      	ldr	r2, [r7, #12]
    a74c:	0e12      	lsrs	r2, r2, #24
    a74e:	b2d2      	uxtb	r2, r2
    a750:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    a752:	687b      	ldr	r3, [r7, #4]
    a754:	799b      	ldrb	r3, [r3, #6]
    a756:	2220      	movs	r2, #32
    a758:	4393      	bics	r3, r2
    a75a:	b2da      	uxtb	r2, r3
    a75c:	687b      	ldr	r3, [r7, #4]
    a75e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    a760:	687b      	ldr	r3, [r7, #4]
    a762:	681b      	ldr	r3, [r3, #0]
    a764:	2201      	movs	r2, #1
    a766:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    a768:	687b      	ldr	r3, [r7, #4]
    a76a:	681b      	ldr	r3, [r3, #0]
    a76c:	2217      	movs	r2, #23
    a76e:	18bc      	adds	r4, r7, r2
    a770:	0018      	movs	r0, r3
    a772:	4b08      	ldr	r3, [pc, #32]	; (a794 <f_sync+0x17c>)
    a774:	4798      	blx	r3
    a776:	0003      	movs	r3, r0
    a778:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    a77a:	2317      	movs	r3, #23
    a77c:	18fb      	adds	r3, r7, r3
    a77e:	781b      	ldrb	r3, [r3, #0]
}
    a780:	0018      	movs	r0, r3
    a782:	46bd      	mov	sp, r7
    a784:	b007      	add	sp, #28
    a786:	bd90      	pop	{r4, r7, pc}
    a788:	00009a51 	.word	0x00009a51
    a78c:	00007655 	.word	0x00007655
    a790:	00007511 	.word	0x00007511
    a794:	0000771d 	.word	0x0000771d

0000a798 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    a798:	b590      	push	{r4, r7, lr}
    a79a:	b085      	sub	sp, #20
    a79c:	af00      	add	r7, sp, #0
    a79e:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    a7a0:	230f      	movs	r3, #15
    a7a2:	18fc      	adds	r4, r7, r3
    a7a4:	687b      	ldr	r3, [r7, #4]
    a7a6:	0018      	movs	r0, r3
    a7a8:	4b09      	ldr	r3, [pc, #36]	; (a7d0 <f_close+0x38>)
    a7aa:	4798      	blx	r3
    a7ac:	0003      	movs	r3, r0
    a7ae:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    a7b0:	230f      	movs	r3, #15
    a7b2:	18fb      	adds	r3, r7, r3
    a7b4:	781b      	ldrb	r3, [r3, #0]
    a7b6:	2b00      	cmp	r3, #0
    a7b8:	d102      	bne.n	a7c0 <f_close+0x28>
    a7ba:	687b      	ldr	r3, [r7, #4]
    a7bc:	2200      	movs	r2, #0
    a7be:	601a      	str	r2, [r3, #0]
	return res;
    a7c0:	230f      	movs	r3, #15
    a7c2:	18fb      	adds	r3, r7, r3
    a7c4:	781b      	ldrb	r3, [r3, #0]
#endif
}
    a7c6:	0018      	movs	r0, r3
    a7c8:	46bd      	mov	sp, r7
    a7ca:	b005      	add	sp, #20
    a7cc:	bd90      	pop	{r4, r7, pc}
    a7ce:	46c0      	nop			; (mov r8, r8)
    a7d0:	0000a619 	.word	0x0000a619

0000a7d4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    a7d4:	b590      	push	{r4, r7, lr}
    a7d6:	4c8d      	ldr	r4, [pc, #564]	; (aa0c <f_unlink+0x238>)
    a7d8:	44a5      	add	sp, r4
    a7da:	af00      	add	r7, sp, #0
    a7dc:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    a7de:	4b8c      	ldr	r3, [pc, #560]	; (aa10 <f_unlink+0x23c>)
    a7e0:	18fc      	adds	r4, r7, r3
    a7e2:	238e      	movs	r3, #142	; 0x8e
    a7e4:	009b      	lsls	r3, r3, #2
    a7e6:	18f9      	adds	r1, r7, r3
    a7e8:	1d3b      	adds	r3, r7, #4
    a7ea:	2201      	movs	r2, #1
    a7ec:	0018      	movs	r0, r3
    a7ee:	4b89      	ldr	r3, [pc, #548]	; (aa14 <f_unlink+0x240>)
    a7f0:	4798      	blx	r3
    a7f2:	0003      	movs	r3, r0
    a7f4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a7f6:	4b86      	ldr	r3, [pc, #536]	; (aa10 <f_unlink+0x23c>)
    a7f8:	18fb      	adds	r3, r7, r3
    a7fa:	781b      	ldrb	r3, [r3, #0]
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	d000      	beq.n	a802 <f_unlink+0x2e>
    a800:	e0fb      	b.n	a9fa <f_unlink+0x226>
		INIT_BUF(dj);
    a802:	238e      	movs	r3, #142	; 0x8e
    a804:	009b      	lsls	r3, r3, #2
    a806:	18fb      	adds	r3, r7, r3
    a808:	2282      	movs	r2, #130	; 0x82
    a80a:	0092      	lsls	r2, r2, #2
    a80c:	18ba      	adds	r2, r7, r2
    a80e:	619a      	str	r2, [r3, #24]
    a810:	238e      	movs	r3, #142	; 0x8e
    a812:	009b      	lsls	r3, r3, #2
    a814:	18fb      	adds	r3, r7, r3
    a816:	2208      	movs	r2, #8
    a818:	18ba      	adds	r2, r7, r2
    a81a:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);		/* Follow the file path */
    a81c:	687a      	ldr	r2, [r7, #4]
    a81e:	4b7c      	ldr	r3, [pc, #496]	; (aa10 <f_unlink+0x23c>)
    a820:	18fc      	adds	r4, r7, r3
    a822:	238e      	movs	r3, #142	; 0x8e
    a824:	009b      	lsls	r3, r3, #2
    a826:	18fb      	adds	r3, r7, r3
    a828:	0011      	movs	r1, r2
    a82a:	0018      	movs	r0, r3
    a82c:	4b7a      	ldr	r3, [pc, #488]	; (aa18 <f_unlink+0x244>)
    a82e:	4798      	blx	r3
    a830:	0003      	movs	r3, r0
    a832:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    a834:	4b76      	ldr	r3, [pc, #472]	; (aa10 <f_unlink+0x23c>)
    a836:	18fb      	adds	r3, r7, r3
    a838:	781b      	ldrb	r3, [r3, #0]
    a83a:	2b00      	cmp	r3, #0
    a83c:	d000      	beq.n	a840 <f_unlink+0x6c>
    a83e:	e0dc      	b.n	a9fa <f_unlink+0x226>
			dir = dj.dir;
    a840:	238e      	movs	r3, #142	; 0x8e
    a842:	009b      	lsls	r3, r3, #2
    a844:	18fb      	adds	r3, r7, r3
    a846:	695b      	ldr	r3, [r3, #20]
    a848:	2298      	movs	r2, #152	; 0x98
    a84a:	0092      	lsls	r2, r2, #2
    a84c:	18ba      	adds	r2, r7, r2
    a84e:	6013      	str	r3, [r2, #0]
			if (!dir) {
    a850:	2398      	movs	r3, #152	; 0x98
    a852:	009b      	lsls	r3, r3, #2
    a854:	18fb      	adds	r3, r7, r3
    a856:	681b      	ldr	r3, [r3, #0]
    a858:	2b00      	cmp	r3, #0
    a85a:	d104      	bne.n	a866 <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    a85c:	4b6c      	ldr	r3, [pc, #432]	; (aa10 <f_unlink+0x23c>)
    a85e:	18fb      	adds	r3, r7, r3
    a860:	2206      	movs	r2, #6
    a862:	701a      	strb	r2, [r3, #0]
    a864:	e00d      	b.n	a882 <f_unlink+0xae>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    a866:	2398      	movs	r3, #152	; 0x98
    a868:	009b      	lsls	r3, r3, #2
    a86a:	18fb      	adds	r3, r7, r3
    a86c:	681b      	ldr	r3, [r3, #0]
    a86e:	330b      	adds	r3, #11
    a870:	781b      	ldrb	r3, [r3, #0]
    a872:	001a      	movs	r2, r3
    a874:	2301      	movs	r3, #1
    a876:	4013      	ands	r3, r2
    a878:	d003      	beq.n	a882 <f_unlink+0xae>
					res = FR_DENIED;		/* Cannot remove R/O object */
    a87a:	4b65      	ldr	r3, [pc, #404]	; (aa10 <f_unlink+0x23c>)
    a87c:	18fb      	adds	r3, r7, r3
    a87e:	2207      	movs	r2, #7
    a880:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
    a882:	2398      	movs	r3, #152	; 0x98
    a884:	009b      	lsls	r3, r3, #2
    a886:	18fb      	adds	r3, r7, r3
    a888:	681b      	ldr	r3, [r3, #0]
    a88a:	3315      	adds	r3, #21
    a88c:	781b      	ldrb	r3, [r3, #0]
    a88e:	021b      	lsls	r3, r3, #8
    a890:	b21a      	sxth	r2, r3
    a892:	2398      	movs	r3, #152	; 0x98
    a894:	009b      	lsls	r3, r3, #2
    a896:	18fb      	adds	r3, r7, r3
    a898:	681b      	ldr	r3, [r3, #0]
    a89a:	3314      	adds	r3, #20
    a89c:	781b      	ldrb	r3, [r3, #0]
    a89e:	b21b      	sxth	r3, r3
    a8a0:	4313      	orrs	r3, r2
    a8a2:	b21b      	sxth	r3, r3
    a8a4:	b29b      	uxth	r3, r3
    a8a6:	041b      	lsls	r3, r3, #16
    a8a8:	2298      	movs	r2, #152	; 0x98
    a8aa:	0092      	lsls	r2, r2, #2
    a8ac:	18ba      	adds	r2, r7, r2
    a8ae:	6812      	ldr	r2, [r2, #0]
    a8b0:	321b      	adds	r2, #27
    a8b2:	7812      	ldrb	r2, [r2, #0]
    a8b4:	0212      	lsls	r2, r2, #8
    a8b6:	b211      	sxth	r1, r2
    a8b8:	2298      	movs	r2, #152	; 0x98
    a8ba:	0092      	lsls	r2, r2, #2
    a8bc:	18ba      	adds	r2, r7, r2
    a8be:	6812      	ldr	r2, [r2, #0]
    a8c0:	321a      	adds	r2, #26
    a8c2:	7812      	ldrb	r2, [r2, #0]
    a8c4:	b212      	sxth	r2, r2
    a8c6:	430a      	orrs	r2, r1
    a8c8:	b212      	sxth	r2, r2
    a8ca:	b292      	uxth	r2, r2
    a8cc:	4313      	orrs	r3, r2
    a8ce:	2297      	movs	r2, #151	; 0x97
    a8d0:	0092      	lsls	r2, r2, #2
    a8d2:	18ba      	adds	r2, r7, r2
    a8d4:	6013      	str	r3, [r2, #0]
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    a8d6:	4b4e      	ldr	r3, [pc, #312]	; (aa10 <f_unlink+0x23c>)
    a8d8:	18fb      	adds	r3, r7, r3
    a8da:	781b      	ldrb	r3, [r3, #0]
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d152      	bne.n	a986 <f_unlink+0x1b2>
    a8e0:	2398      	movs	r3, #152	; 0x98
    a8e2:	009b      	lsls	r3, r3, #2
    a8e4:	18fb      	adds	r3, r7, r3
    a8e6:	681b      	ldr	r3, [r3, #0]
    a8e8:	330b      	adds	r3, #11
    a8ea:	781b      	ldrb	r3, [r3, #0]
    a8ec:	001a      	movs	r2, r3
    a8ee:	2310      	movs	r3, #16
    a8f0:	4013      	ands	r3, r2
    a8f2:	d048      	beq.n	a986 <f_unlink+0x1b2>
				if (dclst < 2) {
    a8f4:	2397      	movs	r3, #151	; 0x97
    a8f6:	009b      	lsls	r3, r3, #2
    a8f8:	18fb      	adds	r3, r7, r3
    a8fa:	681b      	ldr	r3, [r3, #0]
    a8fc:	2b01      	cmp	r3, #1
    a8fe:	d804      	bhi.n	a90a <f_unlink+0x136>
					res = FR_INT_ERR;
    a900:	4b43      	ldr	r3, [pc, #268]	; (aa10 <f_unlink+0x23c>)
    a902:	18fb      	adds	r3, r7, r3
    a904:	2202      	movs	r2, #2
    a906:	701a      	strb	r2, [r3, #0]
    a908:	e03d      	b.n	a986 <f_unlink+0x1b2>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    a90a:	238e      	movs	r3, #142	; 0x8e
    a90c:	009b      	lsls	r3, r3, #2
    a90e:	18f9      	adds	r1, r7, r3
    a910:	2385      	movs	r3, #133	; 0x85
    a912:	009b      	lsls	r3, r3, #2
    a914:	18fb      	adds	r3, r7, r3
    a916:	2224      	movs	r2, #36	; 0x24
    a918:	0018      	movs	r0, r3
    a91a:	4b40      	ldr	r3, [pc, #256]	; (aa1c <f_unlink+0x248>)
    a91c:	4798      	blx	r3
					sdj.sclust = dclst;
    a91e:	2385      	movs	r3, #133	; 0x85
    a920:	009b      	lsls	r3, r3, #2
    a922:	18fb      	adds	r3, r7, r3
    a924:	2297      	movs	r2, #151	; 0x97
    a926:	0092      	lsls	r2, r2, #2
    a928:	18ba      	adds	r2, r7, r2
    a92a:	6812      	ldr	r2, [r2, #0]
    a92c:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    a92e:	4b38      	ldr	r3, [pc, #224]	; (aa10 <f_unlink+0x23c>)
    a930:	18fc      	adds	r4, r7, r3
    a932:	2385      	movs	r3, #133	; 0x85
    a934:	009b      	lsls	r3, r3, #2
    a936:	18fb      	adds	r3, r7, r3
    a938:	2102      	movs	r1, #2
    a93a:	0018      	movs	r0, r3
    a93c:	4b38      	ldr	r3, [pc, #224]	; (aa20 <f_unlink+0x24c>)
    a93e:	4798      	blx	r3
    a940:	0003      	movs	r3, r0
    a942:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
    a944:	4b32      	ldr	r3, [pc, #200]	; (aa10 <f_unlink+0x23c>)
    a946:	18fb      	adds	r3, r7, r3
    a948:	781b      	ldrb	r3, [r3, #0]
    a94a:	2b00      	cmp	r3, #0
    a94c:	d11b      	bne.n	a986 <f_unlink+0x1b2>
						res = dir_read(&sdj);
    a94e:	4b30      	ldr	r3, [pc, #192]	; (aa10 <f_unlink+0x23c>)
    a950:	18fc      	adds	r4, r7, r3
    a952:	2385      	movs	r3, #133	; 0x85
    a954:	009b      	lsls	r3, r3, #2
    a956:	18fb      	adds	r3, r7, r3
    a958:	0018      	movs	r0, r3
    a95a:	4b32      	ldr	r3, [pc, #200]	; (aa24 <f_unlink+0x250>)
    a95c:	4798      	blx	r3
    a95e:	0003      	movs	r3, r0
    a960:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
    a962:	4b2b      	ldr	r3, [pc, #172]	; (aa10 <f_unlink+0x23c>)
    a964:	18fb      	adds	r3, r7, r3
    a966:	781b      	ldrb	r3, [r3, #0]
    a968:	2b00      	cmp	r3, #0
    a96a:	d103      	bne.n	a974 <f_unlink+0x1a0>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    a96c:	4b28      	ldr	r3, [pc, #160]	; (aa10 <f_unlink+0x23c>)
    a96e:	18fb      	adds	r3, r7, r3
    a970:	2207      	movs	r2, #7
    a972:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    a974:	4b26      	ldr	r3, [pc, #152]	; (aa10 <f_unlink+0x23c>)
    a976:	18fb      	adds	r3, r7, r3
    a978:	781b      	ldrb	r3, [r3, #0]
    a97a:	2b04      	cmp	r3, #4
    a97c:	d103      	bne.n	a986 <f_unlink+0x1b2>
    a97e:	4b24      	ldr	r3, [pc, #144]	; (aa10 <f_unlink+0x23c>)
    a980:	18fb      	adds	r3, r7, r3
    a982:	2200      	movs	r2, #0
    a984:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
    a986:	4b22      	ldr	r3, [pc, #136]	; (aa10 <f_unlink+0x23c>)
    a988:	18fb      	adds	r3, r7, r3
    a98a:	781b      	ldrb	r3, [r3, #0]
    a98c:	2b00      	cmp	r3, #0
    a98e:	d134      	bne.n	a9fa <f_unlink+0x226>
				res = dir_remove(&dj);		/* Remove the directory entry */
    a990:	4b1f      	ldr	r3, [pc, #124]	; (aa10 <f_unlink+0x23c>)
    a992:	18fc      	adds	r4, r7, r3
    a994:	238e      	movs	r3, #142	; 0x8e
    a996:	009b      	lsls	r3, r3, #2
    a998:	18fb      	adds	r3, r7, r3
    a99a:	0018      	movs	r0, r3
    a99c:	4b22      	ldr	r3, [pc, #136]	; (aa28 <f_unlink+0x254>)
    a99e:	4798      	blx	r3
    a9a0:	0003      	movs	r3, r0
    a9a2:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    a9a4:	4b1a      	ldr	r3, [pc, #104]	; (aa10 <f_unlink+0x23c>)
    a9a6:	18fb      	adds	r3, r7, r3
    a9a8:	781b      	ldrb	r3, [r3, #0]
    a9aa:	2b00      	cmp	r3, #0
    a9ac:	d125      	bne.n	a9fa <f_unlink+0x226>
					if (dclst)				/* Remove the cluster chain if exist */
    a9ae:	2397      	movs	r3, #151	; 0x97
    a9b0:	009b      	lsls	r3, r3, #2
    a9b2:	18fb      	adds	r3, r7, r3
    a9b4:	681b      	ldr	r3, [r3, #0]
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	d00f      	beq.n	a9da <f_unlink+0x206>
						res = remove_chain(dj.fs, dclst);
    a9ba:	238e      	movs	r3, #142	; 0x8e
    a9bc:	009b      	lsls	r3, r3, #2
    a9be:	18fb      	adds	r3, r7, r3
    a9c0:	681b      	ldr	r3, [r3, #0]
    a9c2:	4a13      	ldr	r2, [pc, #76]	; (aa10 <f_unlink+0x23c>)
    a9c4:	18bc      	adds	r4, r7, r2
    a9c6:	2297      	movs	r2, #151	; 0x97
    a9c8:	0092      	lsls	r2, r2, #2
    a9ca:	18ba      	adds	r2, r7, r2
    a9cc:	6812      	ldr	r2, [r2, #0]
    a9ce:	0011      	movs	r1, r2
    a9d0:	0018      	movs	r0, r3
    a9d2:	4b16      	ldr	r3, [pc, #88]	; (aa2c <f_unlink+0x258>)
    a9d4:	4798      	blx	r3
    a9d6:	0003      	movs	r3, r0
    a9d8:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
    a9da:	4b0d      	ldr	r3, [pc, #52]	; (aa10 <f_unlink+0x23c>)
    a9dc:	18fb      	adds	r3, r7, r3
    a9de:	781b      	ldrb	r3, [r3, #0]
    a9e0:	2b00      	cmp	r3, #0
    a9e2:	d10a      	bne.n	a9fa <f_unlink+0x226>
    a9e4:	238e      	movs	r3, #142	; 0x8e
    a9e6:	009b      	lsls	r3, r3, #2
    a9e8:	18fb      	adds	r3, r7, r3
    a9ea:	681b      	ldr	r3, [r3, #0]
    a9ec:	4a08      	ldr	r2, [pc, #32]	; (aa10 <f_unlink+0x23c>)
    a9ee:	18bc      	adds	r4, r7, r2
    a9f0:	0018      	movs	r0, r3
    a9f2:	4b0f      	ldr	r3, [pc, #60]	; (aa30 <f_unlink+0x25c>)
    a9f4:	4798      	blx	r3
    a9f6:	0003      	movs	r3, r0
    a9f8:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    a9fa:	4b05      	ldr	r3, [pc, #20]	; (aa10 <f_unlink+0x23c>)
    a9fc:	18fb      	adds	r3, r7, r3
    a9fe:	781b      	ldrb	r3, [r3, #0]
}
    aa00:	0018      	movs	r0, r3
    aa02:	46bd      	mov	sp, r7
    aa04:	239b      	movs	r3, #155	; 0x9b
    aa06:	009b      	lsls	r3, r3, #2
    aa08:	449d      	add	sp, r3
    aa0a:	bd90      	pop	{r4, r7, pc}
    aa0c:	fffffd94 	.word	0xfffffd94
    aa10:	00000267 	.word	0x00000267
    aa14:	00009455 	.word	0x00009455
    aa18:	00009249 	.word	0x00009249
    aa1c:	00007571 	.word	0x00007571
    aa20:	00007e99 	.word	0x00007e99
    aa24:	000087fd 	.word	0x000087fd
    aa28:	00008d29 	.word	0x00008d29
    aa2c:	00007c95 	.word	0x00007c95
    aa30:	0000771d 	.word	0x0000771d

0000aa34 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    aa34:	b590      	push	{r4, r7, lr}
    aa36:	b087      	sub	sp, #28
    aa38:	af00      	add	r7, sp, #0
    aa3a:	0002      	movs	r2, r0
    aa3c:	6039      	str	r1, [r7, #0]
    aa3e:	1dfb      	adds	r3, r7, #7
    aa40:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    aa42:	230c      	movs	r3, #12
    aa44:	18fb      	adds	r3, r7, r3
    aa46:	1dfa      	adds	r2, r7, #7
    aa48:	7812      	ldrb	r2, [r2, #0]
    aa4a:	701a      	strb	r2, [r3, #0]
	btw = 1;
    aa4c:	2301      	movs	r3, #1
    aa4e:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    aa50:	2310      	movs	r3, #16
    aa52:	18fb      	adds	r3, r7, r3
    aa54:	697a      	ldr	r2, [r7, #20]
    aa56:	210c      	movs	r1, #12
    aa58:	1879      	adds	r1, r7, r1
    aa5a:	6838      	ldr	r0, [r7, #0]
    aa5c:	4c06      	ldr	r4, [pc, #24]	; (aa78 <f_putc+0x44>)
    aa5e:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    aa60:	693a      	ldr	r2, [r7, #16]
    aa62:	697b      	ldr	r3, [r7, #20]
    aa64:	429a      	cmp	r2, r3
    aa66:	d101      	bne.n	aa6c <f_putc+0x38>
    aa68:	2301      	movs	r3, #1
    aa6a:	e001      	b.n	aa70 <f_putc+0x3c>
    aa6c:	2301      	movs	r3, #1
    aa6e:	425b      	negs	r3, r3
}
    aa70:	0018      	movs	r0, r3
    aa72:	46bd      	mov	sp, r7
    aa74:	b007      	add	sp, #28
    aa76:	bd90      	pop	{r4, r7, pc}
    aa78:	0000a2c9 	.word	0x0000a2c9

0000aa7c <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    aa7c:	b580      	push	{r7, lr}
    aa7e:	b084      	sub	sp, #16
    aa80:	af00      	add	r7, sp, #0
    aa82:	6078      	str	r0, [r7, #4]
    aa84:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    aa86:	2300      	movs	r3, #0
    aa88:	60fb      	str	r3, [r7, #12]
    aa8a:	e012      	b.n	aab2 <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    aa8c:	687b      	ldr	r3, [r7, #4]
    aa8e:	781b      	ldrb	r3, [r3, #0]
    aa90:	683a      	ldr	r2, [r7, #0]
    aa92:	0011      	movs	r1, r2
    aa94:	0018      	movs	r0, r3
    aa96:	4b0b      	ldr	r3, [pc, #44]	; (aac4 <f_puts+0x48>)
    aa98:	4798      	blx	r3
    aa9a:	0003      	movs	r3, r0
    aa9c:	3301      	adds	r3, #1
    aa9e:	d102      	bne.n	aaa6 <f_puts+0x2a>
    aaa0:	2301      	movs	r3, #1
    aaa2:	425b      	negs	r3, r3
    aaa4:	e00a      	b.n	aabc <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    aaa6:	687b      	ldr	r3, [r7, #4]
    aaa8:	3301      	adds	r3, #1
    aaaa:	607b      	str	r3, [r7, #4]
    aaac:	68fb      	ldr	r3, [r7, #12]
    aaae:	3301      	adds	r3, #1
    aab0:	60fb      	str	r3, [r7, #12]
    aab2:	687b      	ldr	r3, [r7, #4]
    aab4:	781b      	ldrb	r3, [r3, #0]
    aab6:	2b00      	cmp	r3, #0
    aab8:	d1e8      	bne.n	aa8c <f_puts+0x10>
	}
	return n;
    aaba:	68fb      	ldr	r3, [r7, #12]
}
    aabc:	0018      	movs	r0, r3
    aabe:	46bd      	mov	sp, r7
    aac0:	b004      	add	sp, #16
    aac2:	bd80      	pop	{r7, pc}
    aac4:	0000aa35 	.word	0x0000aa35

0000aac8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    aac8:	b580      	push	{r7, lr}
    aaca:	b084      	sub	sp, #16
    aacc:	af00      	add	r7, sp, #0
    aace:	0002      	movs	r2, r0
    aad0:	6039      	str	r1, [r7, #0]
    aad2:	1dbb      	adds	r3, r7, #6
    aad4:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    aad6:	1dbb      	adds	r3, r7, #6
    aad8:	881b      	ldrh	r3, [r3, #0]
    aada:	2b7f      	cmp	r3, #127	; 0x7f
    aadc:	d805      	bhi.n	aaea <ff_convert+0x22>
		c = src;
    aade:	230e      	movs	r3, #14
    aae0:	18fb      	adds	r3, r7, r3
    aae2:	1dba      	adds	r2, r7, #6
    aae4:	8812      	ldrh	r2, [r2, #0]
    aae6:	801a      	strh	r2, [r3, #0]
    aae8:	e03a      	b.n	ab60 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    aaea:	683b      	ldr	r3, [r7, #0]
    aaec:	2b00      	cmp	r3, #0
    aaee:	d010      	beq.n	ab12 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    aaf0:	1dbb      	adds	r3, r7, #6
    aaf2:	881b      	ldrh	r3, [r3, #0]
    aaf4:	2bff      	cmp	r3, #255	; 0xff
    aaf6:	d807      	bhi.n	ab08 <ff_convert+0x40>
    aaf8:	1dbb      	adds	r3, r7, #6
    aafa:	881b      	ldrh	r3, [r3, #0]
    aafc:	3b80      	subs	r3, #128	; 0x80
    aafe:	001a      	movs	r2, r3
    ab00:	4b1b      	ldr	r3, [pc, #108]	; (ab70 <ff_convert+0xa8>)
    ab02:	0052      	lsls	r2, r2, #1
    ab04:	5ad2      	ldrh	r2, [r2, r3]
    ab06:	e000      	b.n	ab0a <ff_convert+0x42>
    ab08:	2200      	movs	r2, #0
    ab0a:	230e      	movs	r3, #14
    ab0c:	18fb      	adds	r3, r7, r3
    ab0e:	801a      	strh	r2, [r3, #0]
    ab10:	e026      	b.n	ab60 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    ab12:	230e      	movs	r3, #14
    ab14:	18fb      	adds	r3, r7, r3
    ab16:	2200      	movs	r2, #0
    ab18:	801a      	strh	r2, [r3, #0]
    ab1a:	e010      	b.n	ab3e <ff_convert+0x76>
				if (src == Tbl[c]) break;
    ab1c:	230e      	movs	r3, #14
    ab1e:	18fb      	adds	r3, r7, r3
    ab20:	881a      	ldrh	r2, [r3, #0]
    ab22:	4b13      	ldr	r3, [pc, #76]	; (ab70 <ff_convert+0xa8>)
    ab24:	0052      	lsls	r2, r2, #1
    ab26:	5ad3      	ldrh	r3, [r2, r3]
    ab28:	1dba      	adds	r2, r7, #6
    ab2a:	8812      	ldrh	r2, [r2, #0]
    ab2c:	429a      	cmp	r2, r3
    ab2e:	d00c      	beq.n	ab4a <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
    ab30:	230e      	movs	r3, #14
    ab32:	18fb      	adds	r3, r7, r3
    ab34:	881a      	ldrh	r2, [r3, #0]
    ab36:	230e      	movs	r3, #14
    ab38:	18fb      	adds	r3, r7, r3
    ab3a:	3201      	adds	r2, #1
    ab3c:	801a      	strh	r2, [r3, #0]
    ab3e:	230e      	movs	r3, #14
    ab40:	18fb      	adds	r3, r7, r3
    ab42:	881b      	ldrh	r3, [r3, #0]
    ab44:	2b7f      	cmp	r3, #127	; 0x7f
    ab46:	d9e9      	bls.n	ab1c <ff_convert+0x54>
    ab48:	e000      	b.n	ab4c <ff_convert+0x84>
				if (src == Tbl[c]) break;
    ab4a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
    ab4c:	230e      	movs	r3, #14
    ab4e:	18fb      	adds	r3, r7, r3
    ab50:	881b      	ldrh	r3, [r3, #0]
    ab52:	3380      	adds	r3, #128	; 0x80
    ab54:	b29a      	uxth	r2, r3
    ab56:	230e      	movs	r3, #14
    ab58:	18fb      	adds	r3, r7, r3
    ab5a:	21ff      	movs	r1, #255	; 0xff
    ab5c:	400a      	ands	r2, r1
    ab5e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
    ab60:	230e      	movs	r3, #14
    ab62:	18fb      	adds	r3, r7, r3
    ab64:	881b      	ldrh	r3, [r3, #0]
}
    ab66:	0018      	movs	r0, r3
    ab68:	46bd      	mov	sp, r7
    ab6a:	b004      	add	sp, #16
    ab6c:	bd80      	pop	{r7, pc}
    ab6e:	46c0      	nop			; (mov r8, r8)
    ab70:	0000cadc 	.word	0x0000cadc

0000ab74 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    ab74:	b580      	push	{r7, lr}
    ab76:	b084      	sub	sp, #16
    ab78:	af00      	add	r7, sp, #0
    ab7a:	0002      	movs	r2, r0
    ab7c:	1dbb      	adds	r3, r7, #6
    ab7e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    ab80:	2300      	movs	r3, #0
    ab82:	60fb      	str	r3, [r7, #12]
    ab84:	e002      	b.n	ab8c <ff_wtoupper+0x18>
    ab86:	68fb      	ldr	r3, [r7, #12]
    ab88:	3301      	adds	r3, #1
    ab8a:	60fb      	str	r3, [r7, #12]
    ab8c:	4b0f      	ldr	r3, [pc, #60]	; (abcc <ff_wtoupper+0x58>)
    ab8e:	68fa      	ldr	r2, [r7, #12]
    ab90:	0052      	lsls	r2, r2, #1
    ab92:	5ad3      	ldrh	r3, [r2, r3]
    ab94:	2b00      	cmp	r3, #0
    ab96:	d007      	beq.n	aba8 <ff_wtoupper+0x34>
    ab98:	4b0c      	ldr	r3, [pc, #48]	; (abcc <ff_wtoupper+0x58>)
    ab9a:	68fa      	ldr	r2, [r7, #12]
    ab9c:	0052      	lsls	r2, r2, #1
    ab9e:	5ad3      	ldrh	r3, [r2, r3]
    aba0:	1dba      	adds	r2, r7, #6
    aba2:	8812      	ldrh	r2, [r2, #0]
    aba4:	429a      	cmp	r2, r3
    aba6:	d1ee      	bne.n	ab86 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    aba8:	4b08      	ldr	r3, [pc, #32]	; (abcc <ff_wtoupper+0x58>)
    abaa:	68fa      	ldr	r2, [r7, #12]
    abac:	0052      	lsls	r2, r2, #1
    abae:	5ad3      	ldrh	r3, [r2, r3]
    abb0:	2b00      	cmp	r3, #0
    abb2:	d004      	beq.n	abbe <ff_wtoupper+0x4a>
    abb4:	4b06      	ldr	r3, [pc, #24]	; (abd0 <ff_wtoupper+0x5c>)
    abb6:	68fa      	ldr	r2, [r7, #12]
    abb8:	0052      	lsls	r2, r2, #1
    abba:	5ad3      	ldrh	r3, [r2, r3]
    abbc:	e001      	b.n	abc2 <ff_wtoupper+0x4e>
    abbe:	1dbb      	adds	r3, r7, #6
    abc0:	881b      	ldrh	r3, [r3, #0]
}
    abc2:	0018      	movs	r0, r3
    abc4:	46bd      	mov	sp, r7
    abc6:	b004      	add	sp, #16
    abc8:	bd80      	pop	{r7, pc}
    abca:	46c0      	nop			; (mov r8, r8)
    abcc:	0000cbdc 	.word	0x0000cbdc
    abd0:	0000cdbc 	.word	0x0000cdbc

0000abd4 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    abd4:	b580      	push	{r7, lr}
    abd6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    abd8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    abdc:	4b02      	ldr	r3, [pc, #8]	; (abe8 <NVIC_SystemReset+0x14>)
    abde:	4a03      	ldr	r2, [pc, #12]	; (abec <NVIC_SystemReset+0x18>)
    abe0:	60da      	str	r2, [r3, #12]
    abe2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    abe6:	e7fe      	b.n	abe6 <NVIC_SystemReset+0x12>
    abe8:	e000ed00 	.word	0xe000ed00
    abec:	05fa0004 	.word	0x05fa0004

0000abf0 <system_apb_clock_set_mask>:
{
    abf0:	b580      	push	{r7, lr}
    abf2:	b082      	sub	sp, #8
    abf4:	af00      	add	r7, sp, #0
    abf6:	0002      	movs	r2, r0
    abf8:	6039      	str	r1, [r7, #0]
    abfa:	1dfb      	adds	r3, r7, #7
    abfc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    abfe:	1dfb      	adds	r3, r7, #7
    ac00:	781b      	ldrb	r3, [r3, #0]
    ac02:	2b01      	cmp	r3, #1
    ac04:	d00a      	beq.n	ac1c <system_apb_clock_set_mask+0x2c>
    ac06:	2b02      	cmp	r3, #2
    ac08:	d00f      	beq.n	ac2a <system_apb_clock_set_mask+0x3a>
    ac0a:	2b00      	cmp	r3, #0
    ac0c:	d114      	bne.n	ac38 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    ac0e:	4b0e      	ldr	r3, [pc, #56]	; (ac48 <system_apb_clock_set_mask+0x58>)
    ac10:	4a0d      	ldr	r2, [pc, #52]	; (ac48 <system_apb_clock_set_mask+0x58>)
    ac12:	6991      	ldr	r1, [r2, #24]
    ac14:	683a      	ldr	r2, [r7, #0]
    ac16:	430a      	orrs	r2, r1
    ac18:	619a      	str	r2, [r3, #24]
			break;
    ac1a:	e00f      	b.n	ac3c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    ac1c:	4b0a      	ldr	r3, [pc, #40]	; (ac48 <system_apb_clock_set_mask+0x58>)
    ac1e:	4a0a      	ldr	r2, [pc, #40]	; (ac48 <system_apb_clock_set_mask+0x58>)
    ac20:	69d1      	ldr	r1, [r2, #28]
    ac22:	683a      	ldr	r2, [r7, #0]
    ac24:	430a      	orrs	r2, r1
    ac26:	61da      	str	r2, [r3, #28]
			break;
    ac28:	e008      	b.n	ac3c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    ac2a:	4b07      	ldr	r3, [pc, #28]	; (ac48 <system_apb_clock_set_mask+0x58>)
    ac2c:	4a06      	ldr	r2, [pc, #24]	; (ac48 <system_apb_clock_set_mask+0x58>)
    ac2e:	6a11      	ldr	r1, [r2, #32]
    ac30:	683a      	ldr	r2, [r7, #0]
    ac32:	430a      	orrs	r2, r1
    ac34:	621a      	str	r2, [r3, #32]
			break;
    ac36:	e001      	b.n	ac3c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    ac38:	2317      	movs	r3, #23
    ac3a:	e000      	b.n	ac3e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    ac3c:	2300      	movs	r3, #0
}
    ac3e:	0018      	movs	r0, r3
    ac40:	46bd      	mov	sp, r7
    ac42:	b002      	add	sp, #8
    ac44:	bd80      	pop	{r7, pc}
    ac46:	46c0      	nop			; (mov r8, r8)
    ac48:	40000400 	.word	0x40000400

0000ac4c <nvm_get_config_defaults>:
{
    ac4c:	b580      	push	{r7, lr}
    ac4e:	b082      	sub	sp, #8
    ac50:	af00      	add	r7, sp, #0
    ac52:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    ac54:	687b      	ldr	r3, [r7, #4]
    ac56:	2200      	movs	r2, #0
    ac58:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    ac5a:	687b      	ldr	r3, [r7, #4]
    ac5c:	2201      	movs	r2, #1
    ac5e:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    ac60:	4b08      	ldr	r3, [pc, #32]	; (ac84 <nvm_get_config_defaults+0x38>)
    ac62:	685b      	ldr	r3, [r3, #4]
    ac64:	06db      	lsls	r3, r3, #27
    ac66:	0f1b      	lsrs	r3, r3, #28
    ac68:	b2db      	uxtb	r3, r3
    ac6a:	001a      	movs	r2, r3
    ac6c:	687b      	ldr	r3, [r7, #4]
    ac6e:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    ac70:	687b      	ldr	r3, [r7, #4]
    ac72:	2200      	movs	r2, #0
    ac74:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    ac76:	687b      	ldr	r3, [r7, #4]
    ac78:	2200      	movs	r2, #0
    ac7a:	711a      	strb	r2, [r3, #4]
}
    ac7c:	46c0      	nop			; (mov r8, r8)
    ac7e:	46bd      	mov	sp, r7
    ac80:	b002      	add	sp, #8
    ac82:	bd80      	pop	{r7, pc}
    ac84:	41004000 	.word	0x41004000

0000ac88 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    ac88:	b580      	push	{r7, lr}
    ac8a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    ac8c:	4b02      	ldr	r3, [pc, #8]	; (ac98 <system_reset+0x10>)
    ac8e:	4798      	blx	r3
}
    ac90:	46c0      	nop			; (mov r8, r8)
    ac92:	46bd      	mov	sp, r7
    ac94:	bd80      	pop	{r7, pc}
    ac96:	46c0      	nop			; (mov r8, r8)
    ac98:	0000abd5 	.word	0x0000abd5

0000ac9c <system_interrupt_enable_global>:
{
    ac9c:	b580      	push	{r7, lr}
    ac9e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    aca0:	4b04      	ldr	r3, [pc, #16]	; (acb4 <system_interrupt_enable_global+0x18>)
    aca2:	2201      	movs	r2, #1
    aca4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    aca6:	f3bf 8f5f 	dmb	sy
    acaa:	b662      	cpsie	i
}
    acac:	46c0      	nop			; (mov r8, r8)
    acae:	46bd      	mov	sp, r7
    acb0:	bd80      	pop	{r7, pc}
    acb2:	46c0      	nop			; (mov r8, r8)
    acb4:	20000009 	.word	0x20000009

0000acb8 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    acb8:	b580      	push	{r7, lr}
    acba:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    acbc:	2102      	movs	r1, #2
    acbe:	2001      	movs	r0, #1
    acc0:	4b02      	ldr	r3, [pc, #8]	; (accc <dsu_crc32_init+0x14>)
    acc2:	4798      	blx	r3
#endif

}
    acc4:	46c0      	nop			; (mov r8, r8)
    acc6:	46bd      	mov	sp, r7
    acc8:	bd80      	pop	{r7, pc}
    acca:	46c0      	nop			; (mov r8, r8)
    accc:	0000abf1 	.word	0x0000abf1

0000acd0 <main>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void) {
    acd0:	b580      	push	{r7, lr}
    acd2:	af00      	add	r7, sp, #0

    /*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
    system_init();
    acd4:	4b4e      	ldr	r3, [pc, #312]	; (ae10 <main+0x140>)
    acd6:	4798      	blx	r3
    delay_init();
    acd8:	4b4e      	ldr	r3, [pc, #312]	; (ae14 <main+0x144>)
    acda:	4798      	blx	r3
    InitializeSerialConsole();
    acdc:	4b4e      	ldr	r3, [pc, #312]	; (ae18 <main+0x148>)
    acde:	4798      	blx	r3
    system_interrupt_enable_global();
    ace0:	4b4e      	ldr	r3, [pc, #312]	; (ae1c <main+0x14c>)
    ace2:	4798      	blx	r3

    /* Initialize SD MMC stack */
    sd_mmc_init();
    ace4:	4b4e      	ldr	r3, [pc, #312]	; (ae20 <main+0x150>)
    ace6:	4798      	blx	r3

    // Initialize the NVM driver
    configure_nvm();
    ace8:	4b4e      	ldr	r3, [pc, #312]	; (ae24 <main+0x154>)
    acea:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
    acec:	4b4e      	ldr	r3, [pc, #312]	; (ae28 <main+0x158>)
    acee:	2201      	movs	r2, #1
    acf0:	701a      	strb	r2, [r3, #0]
    acf2:	f3bf 8f5f 	dmb	sy
    acf6:	b662      	cpsie	i

    // Configure CRC32
    dsu_crc32_init();
    acf8:	4b4c      	ldr	r3, [pc, #304]	; (ae2c <main+0x15c>)
    acfa:	4798      	blx	r3

    SerialConsoleWriteString("ESE5160 - ENTER BOOTLOADER");   // Order to add string to TX Buffer
    acfc:	4b4c      	ldr	r3, [pc, #304]	; (ae30 <main+0x160>)
    acfe:	0018      	movs	r0, r3
    ad00:	4b4c      	ldr	r3, [pc, #304]	; (ae34 <main+0x164>)
    ad02:	4798      	blx	r3

    /*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

    // EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
    // See function inside to see how to open a file
    SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    ad04:	4b4c      	ldr	r3, [pc, #304]	; (ae38 <main+0x168>)
    ad06:	0018      	movs	r0, r3
    ad08:	4b4a      	ldr	r3, [pc, #296]	; (ae34 <main+0x164>)
    ad0a:	4798      	blx	r3

    if (StartFilesystemAndTest() == false) {
    ad0c:	4b4b      	ldr	r3, [pc, #300]	; (ae3c <main+0x16c>)
    ad0e:	4798      	blx	r3
    ad10:	0003      	movs	r3, r0
    ad12:	001a      	movs	r2, r3
    ad14:	2301      	movs	r3, #1
    ad16:	4053      	eors	r3, r2
    ad18:	b2db      	uxtb	r3, r3
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	d00a      	beq.n	ad34 <main+0x64>
        SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    ad1e:	4b48      	ldr	r3, [pc, #288]	; (ae40 <main+0x170>)
    ad20:	0018      	movs	r0, r3
    ad22:	4b44      	ldr	r3, [pc, #272]	; (ae34 <main+0x164>)
    ad24:	4798      	blx	r3
        delay_cycles_ms(5000);
    ad26:	4b47      	ldr	r3, [pc, #284]	; (ae44 <main+0x174>)
    ad28:	0018      	movs	r0, r3
    ad2a:	4b47      	ldr	r3, [pc, #284]	; (ae48 <main+0x178>)
    ad2c:	4798      	blx	r3
        system_reset();
    ad2e:	4b47      	ldr	r3, [pc, #284]	; (ae4c <main+0x17c>)
    ad30:	4798      	blx	r3
    ad32:	e003      	b.n	ad3c <main+0x6c>
    } else {
        SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    ad34:	4b46      	ldr	r3, [pc, #280]	; (ae50 <main+0x180>)
    ad36:	0018      	movs	r0, r3
    ad38:	4b3e      	ldr	r3, [pc, #248]	; (ae34 <main+0x164>)
    ad3a:	4798      	blx	r3
    /*END SIMPLE SD CARD MOUNTING AND TEST!*/

    /*3.) STARTS BOOTLOADER HERE!*/
    // Open flag file and check for flags
    static bool is_flashing = false;
    test_txt_flagA[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ad3c:	4b45      	ldr	r3, [pc, #276]	; (ae54 <main+0x184>)
    ad3e:	2230      	movs	r2, #48	; 0x30
    ad40:	701a      	strb	r2, [r3, #0]
	flagA_status = f_open(&file_object, (char const *)test_txt_flagA, FA_READ|FA_OPEN_EXISTING);
    ad42:	4944      	ldr	r1, [pc, #272]	; (ae54 <main+0x184>)
    ad44:	4b44      	ldr	r3, [pc, #272]	; (ae58 <main+0x188>)
    ad46:	2201      	movs	r2, #1
    ad48:	0018      	movs	r0, r3
    ad4a:	4b44      	ldr	r3, [pc, #272]	; (ae5c <main+0x18c>)
    ad4c:	4798      	blx	r3
    ad4e:	0003      	movs	r3, r0
    ad50:	001a      	movs	r2, r3
    ad52:	4b43      	ldr	r3, [pc, #268]	; (ae60 <main+0x190>)
    ad54:	701a      	strb	r2, [r3, #0]
    // Check if FlagA is present
    if(flagA_status == FR_OK){
    ad56:	4b42      	ldr	r3, [pc, #264]	; (ae60 <main+0x190>)
    ad58:	781b      	ldrb	r3, [r3, #0]
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	d112      	bne.n	ad84 <main+0xb4>
        is_flashing = true;
    ad5e:	4b41      	ldr	r3, [pc, #260]	; (ae64 <main+0x194>)
    ad60:	2201      	movs	r2, #1
    ad62:	701a      	strb	r2, [r3, #0]
        // remove Flag file it exists to prevent update next reset
        f_unlink((char const *)test_txt_flagA);
    ad64:	4b3b      	ldr	r3, [pc, #236]	; (ae54 <main+0x184>)
    ad66:	0018      	movs	r0, r3
    ad68:	4b3f      	ldr	r3, [pc, #252]	; (ae68 <main+0x198>)
    ad6a:	4798      	blx	r3
        test_bin_TestA[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ad6c:	4b3f      	ldr	r3, [pc, #252]	; (ae6c <main+0x19c>)
    ad6e:	2230      	movs	r2, #48	; 0x30
    ad70:	701a      	strb	r2, [r3, #0]
        // Flash TestA
        flash_status = flash_bin(test_bin_TestA);
    ad72:	4b3e      	ldr	r3, [pc, #248]	; (ae6c <main+0x19c>)
    ad74:	0018      	movs	r0, r3
    ad76:	4b3e      	ldr	r3, [pc, #248]	; (ae70 <main+0x1a0>)
    ad78:	4798      	blx	r3
    ad7a:	0003      	movs	r3, r0
    ad7c:	001a      	movs	r2, r3
    ad7e:	4b3d      	ldr	r3, [pc, #244]	; (ae74 <main+0x1a4>)
    ad80:	701a      	strb	r2, [r3, #0]
    ad82:	e022      	b.n	adca <main+0xfa>
    }
    else{
        test_txt_flagB[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ad84:	4b3c      	ldr	r3, [pc, #240]	; (ae78 <main+0x1a8>)
    ad86:	2230      	movs	r2, #48	; 0x30
    ad88:	701a      	strb	r2, [r3, #0]
        flagB_status = f_open(&file_object, (char const *)test_txt_flagB, FA_READ|FA_OPEN_EXISTING);
    ad8a:	493b      	ldr	r1, [pc, #236]	; (ae78 <main+0x1a8>)
    ad8c:	4b32      	ldr	r3, [pc, #200]	; (ae58 <main+0x188>)
    ad8e:	2201      	movs	r2, #1
    ad90:	0018      	movs	r0, r3
    ad92:	4b32      	ldr	r3, [pc, #200]	; (ae5c <main+0x18c>)
    ad94:	4798      	blx	r3
    ad96:	0003      	movs	r3, r0
    ad98:	001a      	movs	r2, r3
    ad9a:	4b38      	ldr	r3, [pc, #224]	; (ae7c <main+0x1ac>)
    ad9c:	701a      	strb	r2, [r3, #0]
        // Check if FlagB is present
        if(flagB_status == FR_OK){
    ad9e:	4b37      	ldr	r3, [pc, #220]	; (ae7c <main+0x1ac>)
    ada0:	781b      	ldrb	r3, [r3, #0]
    ada2:	2b00      	cmp	r3, #0
    ada4:	d111      	bne.n	adca <main+0xfa>
            is_flashing = true;
    ada6:	4b2f      	ldr	r3, [pc, #188]	; (ae64 <main+0x194>)
    ada8:	2201      	movs	r2, #1
    adaa:	701a      	strb	r2, [r3, #0]
            // remove Flag file it exists to prevent update next reset
            f_unlink((char const *)test_txt_flagB);
    adac:	4b32      	ldr	r3, [pc, #200]	; (ae78 <main+0x1a8>)
    adae:	0018      	movs	r0, r3
    adb0:	4b2d      	ldr	r3, [pc, #180]	; (ae68 <main+0x198>)
    adb2:	4798      	blx	r3
            test_bin_TestB[0] = LUN_ID_SD_MMC_0_MEM + '0';
    adb4:	4b32      	ldr	r3, [pc, #200]	; (ae80 <main+0x1b0>)
    adb6:	2230      	movs	r2, #48	; 0x30
    adb8:	701a      	strb	r2, [r3, #0]
            // Flash TestB
            flash_status = flash_bin(test_bin_TestB);
    adba:	4b31      	ldr	r3, [pc, #196]	; (ae80 <main+0x1b0>)
    adbc:	0018      	movs	r0, r3
    adbe:	4b2c      	ldr	r3, [pc, #176]	; (ae70 <main+0x1a0>)
    adc0:	4798      	blx	r3
    adc2:	0003      	movs	r3, r0
    adc4:	001a      	movs	r2, r3
    adc6:	4b2b      	ldr	r3, [pc, #172]	; (ae74 <main+0x1a4>)
    adc8:	701a      	strb	r2, [r3, #0]
    //     if(flagA_status != FR_OK && flagB_status != FR_OK){
    //         test_bin_TestA[0] = LUN_ID_SD_MMC_0_MEM + '0';
    //         flash_bin(test_bin_TestA);
    //     }
    // #endif
    if(is_flashing){
    adca:	4b26      	ldr	r3, [pc, #152]	; (ae64 <main+0x194>)
    adcc:	781b      	ldrb	r3, [r3, #0]
    adce:	2b00      	cmp	r3, #0
    add0:	d00c      	beq.n	adec <main+0x11c>
    if(flash_status==STATUS_OK){
    add2:	4b28      	ldr	r3, [pc, #160]	; (ae74 <main+0x1a4>)
    add4:	781b      	ldrb	r3, [r3, #0]
    add6:	2b00      	cmp	r3, #0
    add8:	d104      	bne.n	ade4 <main+0x114>
        SerialConsoleWriteString("Updated Firmware Successfully");
    adda:	4b2a      	ldr	r3, [pc, #168]	; (ae84 <main+0x1b4>)
    addc:	0018      	movs	r0, r3
    adde:	4b15      	ldr	r3, [pc, #84]	; (ae34 <main+0x164>)
    ade0:	4798      	blx	r3
    ade2:	e003      	b.n	adec <main+0x11c>
    }
    else{
        SerialConsoleWriteString("Unsuccessful in updating Firmware");
    ade4:	4b28      	ldr	r3, [pc, #160]	; (ae88 <main+0x1b8>)
    ade6:	0018      	movs	r0, r3
    ade8:	4b12      	ldr	r3, [pc, #72]	; (ae34 <main+0x164>)
    adea:	4798      	blx	r3
    // Students - this is your mission!

    /* END BOOTLOADER HERE!*/

    // 4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
    SerialConsoleWriteString("ESE5160 - EXIT BOOTLOADER");   // Order to add string to TX Buffer
    adec:	4b27      	ldr	r3, [pc, #156]	; (ae8c <main+0x1bc>)
    adee:	0018      	movs	r0, r3
    adf0:	4b10      	ldr	r3, [pc, #64]	; (ae34 <main+0x164>)
    adf2:	4798      	blx	r3
    delay_cycles_ms(100);                                    // Delay to allow print
    adf4:	2064      	movs	r0, #100	; 0x64
    adf6:	4b14      	ldr	r3, [pc, #80]	; (ae48 <main+0x178>)
    adf8:	4798      	blx	r3

    // Deinitialize HW - deinitialize started HW here!
    DeinitializeSerialConsole();   // Deinitializes UART
    adfa:	4b25      	ldr	r3, [pc, #148]	; (ae90 <main+0x1c0>)
    adfc:	4798      	blx	r3
    sd_mmc_deinit();               // Deinitialize SD CARD
    adfe:	4b25      	ldr	r3, [pc, #148]	; (ae94 <main+0x1c4>)
    ae00:	4798      	blx	r3

    // Jump to application
    jumpToApplication();
    ae02:	4b25      	ldr	r3, [pc, #148]	; (ae98 <main+0x1c8>)
    ae04:	4798      	blx	r3
    ae06:	2300      	movs	r3, #0

    // Should not reach here! The device should have jumped to the main FW.
}
    ae08:	0018      	movs	r0, r3
    ae0a:	46bd      	mov	sp, r7
    ae0c:	bd80      	pop	{r7, pc}
    ae0e:	46c0      	nop			; (mov r8, r8)
    ae10:	00006dc1 	.word	0x00006dc1
    ae14:	00000149 	.word	0x00000149
    ae18:	00000f5d 	.word	0x00000f5d
    ae1c:	0000ac9d 	.word	0x0000ac9d
    ae20:	00001e09 	.word	0x00001e09
    ae24:	0000b17d 	.word	0x0000b17d
    ae28:	20000009 	.word	0x20000009
    ae2c:	0000acb9 	.word	0x0000acb9
    ae30:	0000cf9c 	.word	0x0000cf9c
    ae34:	00000fe9 	.word	0x00000fe9
    ae38:	0000cfb8 	.word	0x0000cfb8
    ae3c:	0000ae9d 	.word	0x0000ae9d
    ae40:	0000cfe0 	.word	0x0000cfe0
    ae44:	00001388 	.word	0x00001388
    ae48:	000001a1 	.word	0x000001a1
    ae4c:	0000ac89 	.word	0x0000ac89
    ae50:	0000d02c 	.word	0x0000d02c
    ae54:	20000054 	.word	0x20000054
    ae58:	20000c7c 	.word	0x20000c7c
    ae5c:	00009afd 	.word	0x00009afd
    ae60:	20000dd7 	.word	0x20000dd7
    ae64:	200001ca 	.word	0x200001ca
    ae68:	0000a7d5 	.word	0x0000a7d5
    ae6c:	20000030 	.word	0x20000030
    ae70:	0000b3d1 	.word	0x0000b3d1
    ae74:	20000dd4 	.word	0x20000dd4
    ae78:	2000006c 	.word	0x2000006c
    ae7c:	20000dd5 	.word	0x20000dd5
    ae80:	20000048 	.word	0x20000048
    ae84:	0000d060 	.word	0x0000d060
    ae88:	0000d080 	.word	0x0000d080
    ae8c:	0000d0a4 	.word	0x0000d0a4
    ae90:	00000fcd 	.word	0x00000fcd
    ae94:	00002bb1 	.word	0x00002bb1
    ae98:	0000b145 	.word	0x0000b145

0000ae9c <StartFilesystemAndTest>:
 * @brief        Starts the filesystem and tests it. Sets the filesystem to the global variable fs
 * @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
 *				before performing the jump!
 * @return       Returns true is SD card and file system test passed. False otherwise.
 ******************************************************************************/
static bool StartFilesystemAndTest(void) {
    ae9c:	b590      	push	{r4, r7, lr}
    ae9e:	b0c5      	sub	sp, #276	; 0x114
    aea0:	af00      	add	r7, sp, #0
    bool sdCardPass = true;
    aea2:	2310      	movs	r3, #16
    aea4:	33ff      	adds	r3, #255	; 0xff
    aea6:	18fb      	adds	r3, r7, r3
    aea8:	2201      	movs	r2, #1
    aeaa:	701a      	strb	r2, [r3, #0]
    uint8_t binbuff[256];

    // Before we begin - fill buffer for binary write test
    // Fill binbuff with values 0x00 - 0xFF
    for (int i = 0; i < 256; i++) {
    aeac:	2300      	movs	r3, #0
    aeae:	2284      	movs	r2, #132	; 0x84
    aeb0:	0052      	lsls	r2, r2, #1
    aeb2:	18ba      	adds	r2, r7, r2
    aeb4:	6013      	str	r3, [r2, #0]
    aeb6:	e019      	b.n	aeec <StartFilesystemAndTest+0x50>
        binbuff[i] = i;
    aeb8:	2384      	movs	r3, #132	; 0x84
    aeba:	005b      	lsls	r3, r3, #1
    aebc:	18fb      	adds	r3, r7, r3
    aebe:	681b      	ldr	r3, [r3, #0]
    aec0:	b2d9      	uxtb	r1, r3
    aec2:	4b84      	ldr	r3, [pc, #528]	; (b0d4 <StartFilesystemAndTest+0x238>)
    aec4:	2288      	movs	r2, #136	; 0x88
    aec6:	0052      	lsls	r2, r2, #1
    aec8:	18ba      	adds	r2, r7, r2
    aeca:	18d2      	adds	r2, r2, r3
    aecc:	2384      	movs	r3, #132	; 0x84
    aece:	005b      	lsls	r3, r3, #1
    aed0:	18fb      	adds	r3, r7, r3
    aed2:	681b      	ldr	r3, [r3, #0]
    aed4:	18d3      	adds	r3, r2, r3
    aed6:	1c0a      	adds	r2, r1, #0
    aed8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 256; i++) {
    aeda:	2384      	movs	r3, #132	; 0x84
    aedc:	005b      	lsls	r3, r3, #1
    aede:	18fb      	adds	r3, r7, r3
    aee0:	681b      	ldr	r3, [r3, #0]
    aee2:	3301      	adds	r3, #1
    aee4:	2284      	movs	r2, #132	; 0x84
    aee6:	0052      	lsls	r2, r2, #1
    aee8:	18ba      	adds	r2, r7, r2
    aeea:	6013      	str	r3, [r2, #0]
    aeec:	2384      	movs	r3, #132	; 0x84
    aeee:	005b      	lsls	r3, r3, #1
    aef0:	18fb      	adds	r3, r7, r3
    aef2:	681b      	ldr	r3, [r3, #0]
    aef4:	2bff      	cmp	r3, #255	; 0xff
    aef6:	dddf      	ble.n	aeb8 <StartFilesystemAndTest+0x1c>
    }

    // MOUNT SD CARD
    Ctrl_status sdStatus = SdCard_Initiate();
    aef8:	2308      	movs	r3, #8
    aefa:	33ff      	adds	r3, #255	; 0xff
    aefc:	18fc      	adds	r4, r7, r3
    aefe:	4b76      	ldr	r3, [pc, #472]	; (b0d8 <StartFilesystemAndTest+0x23c>)
    af00:	4798      	blx	r3
    af02:	0003      	movs	r3, r0
    af04:	7023      	strb	r3, [r4, #0]
    if (sdStatus == CTRL_GOOD)   // If the SD card is good we continue mounting the system!
    af06:	2308      	movs	r3, #8
    af08:	33ff      	adds	r3, #255	; 0xff
    af0a:	18fb      	adds	r3, r7, r3
    af0c:	781b      	ldrb	r3, [r3, #0]
    af0e:	2b00      	cmp	r3, #0
    af10:	d000      	beq.n	af14 <StartFilesystemAndTest+0x78>
    af12:	e0ce      	b.n	b0b2 <StartFilesystemAndTest+0x216>
    {
        SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    af14:	4b71      	ldr	r3, [pc, #452]	; (b0dc <StartFilesystemAndTest+0x240>)
    af16:	0018      	movs	r0, r3
    af18:	4b71      	ldr	r3, [pc, #452]	; (b0e0 <StartFilesystemAndTest+0x244>)
    af1a:	4798      	blx	r3

        // Attempt to mount a FAT file system on the SD Card using FATFS
        SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    af1c:	4b71      	ldr	r3, [pc, #452]	; (b0e4 <StartFilesystemAndTest+0x248>)
    af1e:	0018      	movs	r0, r3
    af20:	4b6f      	ldr	r3, [pc, #444]	; (b0e0 <StartFilesystemAndTest+0x244>)
    af22:	4798      	blx	r3
        memset(&fs, 0, sizeof(FATFS));
    af24:	238c      	movs	r3, #140	; 0x8c
    af26:	009a      	lsls	r2, r3, #2
    af28:	4b6f      	ldr	r3, [pc, #444]	; (b0e8 <StartFilesystemAndTest+0x24c>)
    af2a:	2100      	movs	r1, #0
    af2c:	0018      	movs	r0, r3
    af2e:	4b6f      	ldr	r3, [pc, #444]	; (b0ec <StartFilesystemAndTest+0x250>)
    af30:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);   // Order FATFS Mount
    af32:	4b6d      	ldr	r3, [pc, #436]	; (b0e8 <StartFilesystemAndTest+0x24c>)
    af34:	0019      	movs	r1, r3
    af36:	2000      	movs	r0, #0
    af38:	4b6d      	ldr	r3, [pc, #436]	; (b0f0 <StartFilesystemAndTest+0x254>)
    af3a:	4798      	blx	r3
    af3c:	0003      	movs	r3, r0
    af3e:	001a      	movs	r2, r3
    af40:	4b6c      	ldr	r3, [pc, #432]	; (b0f4 <StartFilesystemAndTest+0x258>)
    af42:	701a      	strb	r2, [r3, #0]
        if (FR_INVALID_DRIVE == res) {
    af44:	4b6b      	ldr	r3, [pc, #428]	; (b0f4 <StartFilesystemAndTest+0x258>)
    af46:	781b      	ldrb	r3, [r3, #0]
    af48:	2b0b      	cmp	r3, #11
    af4a:	d10d      	bne.n	af68 <StartFilesystemAndTest+0xcc>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    af4c:	4b69      	ldr	r3, [pc, #420]	; (b0f4 <StartFilesystemAndTest+0x258>)
    af4e:	781b      	ldrb	r3, [r3, #0]
    af50:	001a      	movs	r2, r3
    af52:	4b69      	ldr	r3, [pc, #420]	; (b0f8 <StartFilesystemAndTest+0x25c>)
    af54:	0019      	movs	r1, r3
    af56:	2000      	movs	r0, #0
    af58:	4b68      	ldr	r3, [pc, #416]	; (b0fc <StartFilesystemAndTest+0x260>)
    af5a:	4798      	blx	r3
            sdCardPass = false;
    af5c:	2310      	movs	r3, #16
    af5e:	33ff      	adds	r3, #255	; 0xff
    af60:	18fb      	adds	r3, r7, r3
    af62:	2200      	movs	r2, #0
    af64:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    af66:	e09f      	b.n	b0a8 <StartFilesystemAndTest+0x20c>
        }
        SerialConsoleWriteString("[OK]\r\n");
    af68:	4b65      	ldr	r3, [pc, #404]	; (b100 <StartFilesystemAndTest+0x264>)
    af6a:	0018      	movs	r0, r3
    af6c:	4b5c      	ldr	r3, [pc, #368]	; (b0e0 <StartFilesystemAndTest+0x244>)
    af6e:	4798      	blx	r3

        // Create and open a file
        SerialConsoleWriteString("Create a file (f_open)...\r\n");
    af70:	4b64      	ldr	r3, [pc, #400]	; (b104 <StartFilesystemAndTest+0x268>)
    af72:	0018      	movs	r0, r3
    af74:	4b5a      	ldr	r3, [pc, #360]	; (b0e0 <StartFilesystemAndTest+0x244>)
    af76:	4798      	blx	r3

        test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    af78:	4b63      	ldr	r3, [pc, #396]	; (b108 <StartFilesystemAndTest+0x26c>)
    af7a:	2230      	movs	r2, #48	; 0x30
    af7c:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    af7e:	4962      	ldr	r1, [pc, #392]	; (b108 <StartFilesystemAndTest+0x26c>)
    af80:	4b62      	ldr	r3, [pc, #392]	; (b10c <StartFilesystemAndTest+0x270>)
    af82:	220a      	movs	r2, #10
    af84:	0018      	movs	r0, r3
    af86:	4b62      	ldr	r3, [pc, #392]	; (b110 <StartFilesystemAndTest+0x274>)
    af88:	4798      	blx	r3
    af8a:	0003      	movs	r3, r0
    af8c:	001a      	movs	r2, r3
    af8e:	4b59      	ldr	r3, [pc, #356]	; (b0f4 <StartFilesystemAndTest+0x258>)
    af90:	701a      	strb	r2, [r3, #0]

        if (res != FR_OK) {
    af92:	4b58      	ldr	r3, [pc, #352]	; (b0f4 <StartFilesystemAndTest+0x258>)
    af94:	781b      	ldrb	r3, [r3, #0]
    af96:	2b00      	cmp	r3, #0
    af98:	d00d      	beq.n	afb6 <StartFilesystemAndTest+0x11a>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    af9a:	4b56      	ldr	r3, [pc, #344]	; (b0f4 <StartFilesystemAndTest+0x258>)
    af9c:	781b      	ldrb	r3, [r3, #0]
    af9e:	001a      	movs	r2, r3
    afa0:	4b55      	ldr	r3, [pc, #340]	; (b0f8 <StartFilesystemAndTest+0x25c>)
    afa2:	0019      	movs	r1, r3
    afa4:	2000      	movs	r0, #0
    afa6:	4b55      	ldr	r3, [pc, #340]	; (b0fc <StartFilesystemAndTest+0x260>)
    afa8:	4798      	blx	r3
            sdCardPass = false;
    afaa:	2310      	movs	r3, #16
    afac:	33ff      	adds	r3, #255	; 0xff
    afae:	18fb      	adds	r3, r7, r3
    afb0:	2200      	movs	r2, #0
    afb2:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    afb4:	e078      	b.n	b0a8 <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    afb6:	4b52      	ldr	r3, [pc, #328]	; (b100 <StartFilesystemAndTest+0x264>)
    afb8:	0018      	movs	r0, r3
    afba:	4b49      	ldr	r3, [pc, #292]	; (b0e0 <StartFilesystemAndTest+0x244>)
    afbc:	4798      	blx	r3

        // Write to a file
        SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    afbe:	4b55      	ldr	r3, [pc, #340]	; (b114 <StartFilesystemAndTest+0x278>)
    afc0:	0018      	movs	r0, r3
    afc2:	4b47      	ldr	r3, [pc, #284]	; (b0e0 <StartFilesystemAndTest+0x244>)
    afc4:	4798      	blx	r3

        if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    afc6:	4a51      	ldr	r2, [pc, #324]	; (b10c <StartFilesystemAndTest+0x270>)
    afc8:	4b53      	ldr	r3, [pc, #332]	; (b118 <StartFilesystemAndTest+0x27c>)
    afca:	0011      	movs	r1, r2
    afcc:	0018      	movs	r0, r3
    afce:	4b53      	ldr	r3, [pc, #332]	; (b11c <StartFilesystemAndTest+0x280>)
    afd0:	4798      	blx	r3
    afd2:	1e03      	subs	r3, r0, #0
    afd4:	d10e      	bne.n	aff4 <StartFilesystemAndTest+0x158>
            f_close(&file_object);
    afd6:	4b4d      	ldr	r3, [pc, #308]	; (b10c <StartFilesystemAndTest+0x270>)
    afd8:	0018      	movs	r0, r3
    afda:	4b51      	ldr	r3, [pc, #324]	; (b120 <StartFilesystemAndTest+0x284>)
    afdc:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    afde:	4b51      	ldr	r3, [pc, #324]	; (b124 <StartFilesystemAndTest+0x288>)
    afe0:	0019      	movs	r1, r3
    afe2:	2000      	movs	r0, #0
    afe4:	4b45      	ldr	r3, [pc, #276]	; (b0fc <StartFilesystemAndTest+0x260>)
    afe6:	4798      	blx	r3
            sdCardPass = false;
    afe8:	2310      	movs	r3, #16
    afea:	33ff      	adds	r3, #255	; 0xff
    afec:	18fb      	adds	r3, r7, r3
    afee:	2200      	movs	r2, #0
    aff0:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    aff2:	e059      	b.n	b0a8 <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    aff4:	4b42      	ldr	r3, [pc, #264]	; (b100 <StartFilesystemAndTest+0x264>)
    aff6:	0018      	movs	r0, r3
    aff8:	4b39      	ldr	r3, [pc, #228]	; (b0e0 <StartFilesystemAndTest+0x244>)
    affa:	4798      	blx	r3
        f_close(&file_object);   // Close file
    affc:	4b43      	ldr	r3, [pc, #268]	; (b10c <StartFilesystemAndTest+0x270>)
    affe:	0018      	movs	r0, r3
    b000:	4b47      	ldr	r3, [pc, #284]	; (b120 <StartFilesystemAndTest+0x284>)
    b002:	4798      	blx	r3
        SerialConsoleWriteString("Test is successful.\n\r");
    b004:	4b48      	ldr	r3, [pc, #288]	; (b128 <StartFilesystemAndTest+0x28c>)
    b006:	0018      	movs	r0, r3
    b008:	4b35      	ldr	r3, [pc, #212]	; (b0e0 <StartFilesystemAndTest+0x244>)
    b00a:	4798      	blx	r3

        // Write binary file
        // Read SD Card File
        test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b00c:	4b47      	ldr	r3, [pc, #284]	; (b12c <StartFilesystemAndTest+0x290>)
    b00e:	2230      	movs	r2, #48	; 0x30
    b010:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    b012:	4946      	ldr	r1, [pc, #280]	; (b12c <StartFilesystemAndTest+0x290>)
    b014:	4b3d      	ldr	r3, [pc, #244]	; (b10c <StartFilesystemAndTest+0x270>)
    b016:	220a      	movs	r2, #10
    b018:	0018      	movs	r0, r3
    b01a:	4b3d      	ldr	r3, [pc, #244]	; (b110 <StartFilesystemAndTest+0x274>)
    b01c:	4798      	blx	r3
    b01e:	0003      	movs	r3, r0
    b020:	001a      	movs	r2, r3
    b022:	4b34      	ldr	r3, [pc, #208]	; (b0f4 <StartFilesystemAndTest+0x258>)
    b024:	701a      	strb	r2, [r3, #0]

        if (res != FR_OK) {
    b026:	4b33      	ldr	r3, [pc, #204]	; (b0f4 <StartFilesystemAndTest+0x258>)
    b028:	781b      	ldrb	r3, [r3, #0]
    b02a:	2b00      	cmp	r3, #0
    b02c:	d011      	beq.n	b052 <StartFilesystemAndTest+0x1b6>
            SerialConsoleWriteString("Could not open binary file!\r\n");
    b02e:	4b40      	ldr	r3, [pc, #256]	; (b130 <StartFilesystemAndTest+0x294>)
    b030:	0018      	movs	r0, r3
    b032:	4b2b      	ldr	r3, [pc, #172]	; (b0e0 <StartFilesystemAndTest+0x244>)
    b034:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    b036:	4b2f      	ldr	r3, [pc, #188]	; (b0f4 <StartFilesystemAndTest+0x258>)
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	001a      	movs	r2, r3
    b03c:	4b2e      	ldr	r3, [pc, #184]	; (b0f8 <StartFilesystemAndTest+0x25c>)
    b03e:	0019      	movs	r1, r3
    b040:	2000      	movs	r0, #0
    b042:	4b2e      	ldr	r3, [pc, #184]	; (b0fc <StartFilesystemAndTest+0x260>)
    b044:	4798      	blx	r3
            sdCardPass = false;
    b046:	2310      	movs	r3, #16
    b048:	33ff      	adds	r3, #255	; 0xff
    b04a:	18fb      	adds	r3, r7, r3
    b04c:	2200      	movs	r2, #0
    b04e:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b050:	e02a      	b.n	b0a8 <StartFilesystemAndTest+0x20c>
        }

        // Write to a binaryfile
        SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    b052:	4b38      	ldr	r3, [pc, #224]	; (b134 <StartFilesystemAndTest+0x298>)
    b054:	0018      	movs	r0, r3
    b056:	4b22      	ldr	r3, [pc, #136]	; (b0e0 <StartFilesystemAndTest+0x244>)
    b058:	4798      	blx	r3
        uint32_t varWrite = 0;
    b05a:	2300      	movs	r3, #0
    b05c:	603b      	str	r3, [r7, #0]
        if (0 != f_write(&file_object, binbuff, 256, &varWrite)) {
    b05e:	003c      	movs	r4, r7
    b060:	2380      	movs	r3, #128	; 0x80
    b062:	005a      	lsls	r2, r3, #1
    b064:	1d39      	adds	r1, r7, #4
    b066:	4829      	ldr	r0, [pc, #164]	; (b10c <StartFilesystemAndTest+0x270>)
    b068:	0023      	movs	r3, r4
    b06a:	4c33      	ldr	r4, [pc, #204]	; (b138 <StartFilesystemAndTest+0x29c>)
    b06c:	47a0      	blx	r4
    b06e:	1e03      	subs	r3, r0, #0
    b070:	d00e      	beq.n	b090 <StartFilesystemAndTest+0x1f4>
            f_close(&file_object);
    b072:	4b26      	ldr	r3, [pc, #152]	; (b10c <StartFilesystemAndTest+0x270>)
    b074:	0018      	movs	r0, r3
    b076:	4b2a      	ldr	r3, [pc, #168]	; (b120 <StartFilesystemAndTest+0x284>)
    b078:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    b07a:	4b2a      	ldr	r3, [pc, #168]	; (b124 <StartFilesystemAndTest+0x288>)
    b07c:	0019      	movs	r1, r3
    b07e:	2000      	movs	r0, #0
    b080:	4b1e      	ldr	r3, [pc, #120]	; (b0fc <StartFilesystemAndTest+0x260>)
    b082:	4798      	blx	r3
            sdCardPass = false;
    b084:	2310      	movs	r3, #16
    b086:	33ff      	adds	r3, #255	; 0xff
    b088:	18fb      	adds	r3, r7, r3
    b08a:	2200      	movs	r2, #0
    b08c:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b08e:	e00b      	b.n	b0a8 <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    b090:	4b1b      	ldr	r3, [pc, #108]	; (b100 <StartFilesystemAndTest+0x264>)
    b092:	0018      	movs	r0, r3
    b094:	4b12      	ldr	r3, [pc, #72]	; (b0e0 <StartFilesystemAndTest+0x244>)
    b096:	4798      	blx	r3
        f_close(&file_object);   // Close file
    b098:	4b1c      	ldr	r3, [pc, #112]	; (b10c <StartFilesystemAndTest+0x270>)
    b09a:	0018      	movs	r0, r3
    b09c:	4b20      	ldr	r3, [pc, #128]	; (b120 <StartFilesystemAndTest+0x284>)
    b09e:	4798      	blx	r3
        SerialConsoleWriteString("Test is successful.\n\r");
    b0a0:	4b21      	ldr	r3, [pc, #132]	; (b128 <StartFilesystemAndTest+0x28c>)
    b0a2:	0018      	movs	r0, r3
    b0a4:	4b0e      	ldr	r3, [pc, #56]	; (b0e0 <StartFilesystemAndTest+0x244>)
    b0a6:	4798      	blx	r3

    main_end_of_test:
        SerialConsoleWriteString("End of Test.\n\r");
    b0a8:	4b24      	ldr	r3, [pc, #144]	; (b13c <StartFilesystemAndTest+0x2a0>)
    b0aa:	0018      	movs	r0, r3
    b0ac:	4b0c      	ldr	r3, [pc, #48]	; (b0e0 <StartFilesystemAndTest+0x244>)
    b0ae:	4798      	blx	r3
    b0b0:	e008      	b.n	b0c4 <StartFilesystemAndTest+0x228>

    } else {
        SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    b0b2:	4b23      	ldr	r3, [pc, #140]	; (b140 <StartFilesystemAndTest+0x2a4>)
    b0b4:	0018      	movs	r0, r3
    b0b6:	4b0a      	ldr	r3, [pc, #40]	; (b0e0 <StartFilesystemAndTest+0x244>)
    b0b8:	4798      	blx	r3
        sdCardPass = false;
    b0ba:	2310      	movs	r3, #16
    b0bc:	33ff      	adds	r3, #255	; 0xff
    b0be:	18fb      	adds	r3, r7, r3
    b0c0:	2200      	movs	r2, #0
    b0c2:	701a      	strb	r2, [r3, #0]
    }

    return sdCardPass;
    b0c4:	2310      	movs	r3, #16
    b0c6:	33ff      	adds	r3, #255	; 0xff
    b0c8:	18fb      	adds	r3, r7, r3
    b0ca:	781b      	ldrb	r3, [r3, #0]
}
    b0cc:	0018      	movs	r0, r3
    b0ce:	46bd      	mov	sp, r7
    b0d0:	b045      	add	sp, #276	; 0x114
    b0d2:	bd90      	pop	{r4, r7, pc}
    b0d4:	fffffef4 	.word	0xfffffef4
    b0d8:	00000a3d 	.word	0x00000a3d
    b0dc:	0000d0c0 	.word	0x0000d0c0
    b0e0:	00000fe9 	.word	0x00000fe9
    b0e4:	0000d0e0 	.word	0x0000d0e0
    b0e8:	20000a4c 	.word	0x20000a4c
    b0ec:	0000b8eb 	.word	0x0000b8eb
    b0f0:	00009aa5 	.word	0x00009aa5
    b0f4:	20000dd6 	.word	0x20000dd6
    b0f8:	0000d0fc 	.word	0x0000d0fc
    b0fc:	00001075 	.word	0x00001075
    b100:	0000d10c 	.word	0x0000d10c
    b104:	0000d114 	.word	0x0000d114
    b108:	2000000c 	.word	0x2000000c
    b10c:	20000c7c 	.word	0x20000c7c
    b110:	00009afd 	.word	0x00009afd
    b114:	0000d130 	.word	0x0000d130
    b118:	0000d154 	.word	0x0000d154
    b11c:	0000aa7d 	.word	0x0000aa7d
    b120:	0000a799 	.word	0x0000a799
    b124:	0000d168 	.word	0x0000d168
    b128:	0000d174 	.word	0x0000d174
    b12c:	20000020 	.word	0x20000020
    b130:	0000d18c 	.word	0x0000d18c
    b134:	0000d1ac 	.word	0x0000d1ac
    b138:	0000a2c9 	.word	0x0000a2c9
    b13c:	0000d1d0 	.word	0x0000d1d0
    b140:	0000d1e0 	.word	0x0000d1e0

0000b144 <jumpToApplication>:
 * @brief        Jumps to main application
 * @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
 *				before performing the jump!
 * @return
 ******************************************************************************/
static void jumpToApplication(void) {
    b144:	b580      	push	{r7, lr}
    b146:	b082      	sub	sp, #8
    b148:	af00      	add	r7, sp, #0
    // Function pointer to application section
    void (*applicationCodeEntry)(void);

    // Rebase stack pointer
    __set_MSP(*(uint32_t *) APP_START_ADDRESS);
    b14a:	2390      	movs	r3, #144	; 0x90
    b14c:	025b      	lsls	r3, r3, #9
    b14e:	681b      	ldr	r3, [r3, #0]
    b150:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    b152:	683b      	ldr	r3, [r7, #0]
    b154:	f383 8808 	msr	MSP, r3

    // Rebase vector table
    SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    b158:	4b06      	ldr	r3, [pc, #24]	; (b174 <jumpToApplication+0x30>)
    b15a:	2290      	movs	r2, #144	; 0x90
    b15c:	0252      	lsls	r2, r2, #9
    b15e:	609a      	str	r2, [r3, #8]

    // Set pointer to application section
    applicationCodeEntry = (void (*)(void))(unsigned *) (*(unsigned *) (APP_START_RESET_VEC_ADDRESS));
    b160:	4b05      	ldr	r3, [pc, #20]	; (b178 <jumpToApplication+0x34>)
    b162:	681b      	ldr	r3, [r3, #0]
    b164:	607b      	str	r3, [r7, #4]

    // Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry,
    // which should be the start of the main FW.
    applicationCodeEntry();
    b166:	687b      	ldr	r3, [r7, #4]
    b168:	4798      	blx	r3
}
    b16a:	46c0      	nop			; (mov r8, r8)
    b16c:	46bd      	mov	sp, r7
    b16e:	b002      	add	sp, #8
    b170:	bd80      	pop	{r7, pc}
    b172:	46c0      	nop			; (mov r8, r8)
    b174:	e000ed00 	.word	0xe000ed00
    b178:	00012004 	.word	0x00012004

0000b17c <configure_nvm>:
 * function      static void configure_nvm(void)
 * @brief        Configures the NVM driver
 * @details
 * @return
 ******************************************************************************/
static void configure_nvm(void) {
    b17c:	b580      	push	{r7, lr}
    b17e:	b082      	sub	sp, #8
    b180:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    b182:	003b      	movs	r3, r7
    b184:	0018      	movs	r0, r3
    b186:	4b06      	ldr	r3, [pc, #24]	; (b1a0 <configure_nvm+0x24>)
    b188:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    b18a:	003b      	movs	r3, r7
    b18c:	2200      	movs	r2, #0
    b18e:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    b190:	003b      	movs	r3, r7
    b192:	0018      	movs	r0, r3
    b194:	4b03      	ldr	r3, [pc, #12]	; (b1a4 <configure_nvm+0x28>)
    b196:	4798      	blx	r3
}
    b198:	46c0      	nop			; (mov r8, r8)
    b19a:	46bd      	mov	sp, r7
    b19c:	b002      	add	sp, #8
    b19e:	bd80      	pop	{r7, pc}
    b1a0:	0000ac4d 	.word	0x0000ac4d
    b1a4:	000004cd 	.word	0x000004cd

0000b1a8 <perform_nvm_crc>:
 * @param[in] row_number row number
 * @return enum status_code 
 * \retval STATUS_OK Data is not corrupted
 * \retval STATUS_ABORTED could not calculate CRC
 */
static enum status_code perform_nvm_crc(uint8_t *dataBuffer, int row_number){
    b1a8:	b590      	push	{r4, r7, lr}
    b1aa:	b0c7      	sub	sp, #284	; 0x11c
    b1ac:	af00      	add	r7, sp, #0
    b1ae:	6078      	str	r0, [r7, #4]
    b1b0:	6039      	str	r1, [r7, #0]
    enum status_code crcResult = STATUS_ABORTED;
    b1b2:	2318      	movs	r3, #24
    b1b4:	33ff      	adds	r3, #255	; 0xff
    b1b6:	18fb      	adds	r3, r7, r3
    b1b8:	2204      	movs	r2, #4
    b1ba:	701a      	strb	r2, [r3, #0]
    uint32_t firstresultCRC = 0;
    b1bc:	2300      	movs	r3, #0
    b1be:	2288      	movs	r2, #136	; 0x88
    b1c0:	0052      	lsls	r2, r2, #1
    b1c2:	18ba      	adds	r2, r7, r2
    b1c4:	6013      	str	r3, [r2, #0]
    uint8_t nvmBuffer[NVM_BYTES_PER_ROW];
    // Calculate CRC on the data read from SDCard
    //Before using the CRC32 on RAM, execute the following code:
    *((volatile unsigned int*) 0x41007058) &= ~0x30000UL;
    b1c6:	4b30      	ldr	r3, [pc, #192]	; (b288 <perform_nvm_crc+0xe0>)
    b1c8:	4a2f      	ldr	r2, [pc, #188]	; (b288 <perform_nvm_crc+0xe0>)
    b1ca:	6812      	ldr	r2, [r2, #0]
    b1cc:	492f      	ldr	r1, [pc, #188]	; (b28c <perform_nvm_crc+0xe4>)
    b1ce:	400a      	ands	r2, r1
    b1d0:	601a      	str	r2, [r3, #0]
    enum status_code rtr_code = dsu_crc32_cal(dataBuffer, NVM_BYTES_PER_ROW, &firstresultCRC);
    b1d2:	6878      	ldr	r0, [r7, #4]
    b1d4:	238b      	movs	r3, #139	; 0x8b
    b1d6:	005b      	lsls	r3, r3, #1
    b1d8:	18fc      	adds	r4, r7, r3
    b1da:	2388      	movs	r3, #136	; 0x88
    b1dc:	005b      	lsls	r3, r3, #1
    b1de:	18fa      	adds	r2, r7, r3
    b1e0:	2380      	movs	r3, #128	; 0x80
    b1e2:	005b      	lsls	r3, r3, #1
    b1e4:	0019      	movs	r1, r3
    b1e6:	4b2a      	ldr	r3, [pc, #168]	; (b290 <perform_nvm_crc+0xe8>)
    b1e8:	4798      	blx	r3
    b1ea:	0003      	movs	r3, r0
    b1ec:	7023      	strb	r3, [r4, #0]
    //After using the CRC32, execute the following code:
    *((volatile unsigned int*) 0x41007058) |= 0x20000UL;
    b1ee:	4b26      	ldr	r3, [pc, #152]	; (b288 <perform_nvm_crc+0xe0>)
    b1f0:	4a25      	ldr	r2, [pc, #148]	; (b288 <perform_nvm_crc+0xe0>)
    b1f2:	6812      	ldr	r2, [r2, #0]
    b1f4:	2180      	movs	r1, #128	; 0x80
    b1f6:	0289      	lsls	r1, r1, #10
    b1f8:	430a      	orrs	r2, r1
    b1fa:	601a      	str	r2, [r3, #0]

    if(rtr_code != STATUS_OK){
    b1fc:	238b      	movs	r3, #139	; 0x8b
    b1fe:	005b      	lsls	r3, r3, #1
    b200:	18fb      	adds	r3, r7, r3
    b202:	781b      	ldrb	r3, [r3, #0]
    b204:	2b00      	cmp	r3, #0
    b206:	d003      	beq.n	b210 <perform_nvm_crc+0x68>
        SerialConsoleWriteString("Could not calculate CRC on Buffer Data\r\n");
    b208:	4b22      	ldr	r3, [pc, #136]	; (b294 <perform_nvm_crc+0xec>)
    b20a:	0018      	movs	r0, r3
    b20c:	4b22      	ldr	r3, [pc, #136]	; (b298 <perform_nvm_crc+0xf0>)
    b20e:	4798      	blx	r3
    }
    // Read data from the NVM and perform CRC and check against the resultCRC
    // we need to read page by page, one page is 64 bytes, to read 256 bytes we need to read 4 times
    // Reading from the NVM memory can be performed using direct addressing into the NVM memory space, or by calling the nvm_read_buffer() function
    uint32_t secondresultCRC = 0;
    b210:	2300      	movs	r3, #0
    b212:	60fb      	str	r3, [r7, #12]
    if(rtr_code == STATUS_OK){
    b214:	238b      	movs	r3, #139	; 0x8b
    b216:	005b      	lsls	r3, r3, #1
    b218:	18fb      	adds	r3, r7, r3
    b21a:	781b      	ldrb	r3, [r3, #0]
    b21c:	2b00      	cmp	r3, #0
    b21e:	d11a      	bne.n	b256 <perform_nvm_crc+0xae>
        rtr_code = dsu_crc32_cal(APP_START_ADDRESS + row_number*NVM_BYTES_PER_ROW, NVM_BYTES_PER_ROW, &secondresultCRC);
    b220:	683b      	ldr	r3, [r7, #0]
    b222:	021b      	lsls	r3, r3, #8
    b224:	2290      	movs	r2, #144	; 0x90
    b226:	0252      	lsls	r2, r2, #9
    b228:	1898      	adds	r0, r3, r2
    b22a:	238b      	movs	r3, #139	; 0x8b
    b22c:	005b      	lsls	r3, r3, #1
    b22e:	18fc      	adds	r4, r7, r3
    b230:	230c      	movs	r3, #12
    b232:	18fa      	adds	r2, r7, r3
    b234:	2380      	movs	r3, #128	; 0x80
    b236:	005b      	lsls	r3, r3, #1
    b238:	0019      	movs	r1, r3
    b23a:	4b15      	ldr	r3, [pc, #84]	; (b290 <perform_nvm_crc+0xe8>)
    b23c:	4798      	blx	r3
    b23e:	0003      	movs	r3, r0
    b240:	7023      	strb	r3, [r4, #0]
        if(rtr_code != STATUS_OK){
    b242:	238b      	movs	r3, #139	; 0x8b
    b244:	005b      	lsls	r3, r3, #1
    b246:	18fb      	adds	r3, r7, r3
    b248:	781b      	ldrb	r3, [r3, #0]
    b24a:	2b00      	cmp	r3, #0
    b24c:	d003      	beq.n	b256 <perform_nvm_crc+0xae>
            SerialConsoleWriteString("Could not calculate CRC on NVM Data\r\n");
    b24e:	4b13      	ldr	r3, [pc, #76]	; (b29c <perform_nvm_crc+0xf4>)
    b250:	0018      	movs	r0, r3
    b252:	4b11      	ldr	r3, [pc, #68]	; (b298 <perform_nvm_crc+0xf0>)
    b254:	4798      	blx	r3
        }
    }
    if(firstresultCRC == secondresultCRC){
    b256:	2388      	movs	r3, #136	; 0x88
    b258:	005b      	lsls	r3, r3, #1
    b25a:	18fb      	adds	r3, r7, r3
    b25c:	681a      	ldr	r2, [r3, #0]
    b25e:	68fb      	ldr	r3, [r7, #12]
    b260:	429a      	cmp	r2, r3
    b262:	d105      	bne.n	b270 <perform_nvm_crc+0xc8>
        crcResult = STATUS_OK;
    b264:	2318      	movs	r3, #24
    b266:	33ff      	adds	r3, #255	; 0xff
    b268:	18fb      	adds	r3, r7, r3
    b26a:	2200      	movs	r2, #0
    b26c:	701a      	strb	r2, [r3, #0]
    b26e:	e003      	b.n	b278 <perform_nvm_crc+0xd0>
    }
    else{
        SerialConsoleWriteString("CRC did not match\r\n");
    b270:	4b0b      	ldr	r3, [pc, #44]	; (b2a0 <perform_nvm_crc+0xf8>)
    b272:	0018      	movs	r0, r3
    b274:	4b08      	ldr	r3, [pc, #32]	; (b298 <perform_nvm_crc+0xf0>)
    b276:	4798      	blx	r3
    }
    
    return crcResult;
    b278:	2318      	movs	r3, #24
    b27a:	33ff      	adds	r3, #255	; 0xff
    b27c:	18fb      	adds	r3, r7, r3
    b27e:	781b      	ldrb	r3, [r3, #0]
}
    b280:	0018      	movs	r0, r3
    b282:	46bd      	mov	sp, r7
    b284:	b047      	add	sp, #284	; 0x11c
    b286:	bd90      	pop	{r4, r7, pc}
    b288:	41007058 	.word	0x41007058
    b28c:	fffcffff 	.word	0xfffcffff
    b290:	00000391 	.word	0x00000391
    b294:	0000d210 	.word	0x0000d210
    b298:	00000fe9 	.word	0x00000fe9
    b29c:	0000d23c 	.word	0x0000d23c
    b2a0:	0000d264 	.word	0x0000d264

0000b2a4 <write_nvm>:
 * @param[in] buffer data to write
 * @return enum status_code 
 * \retval STATUS_ABORTED 
 * \retval STATUS_OK
 */
static enum status_code write_nvm(int row_number, uint8_t *buffer){
    b2a4:	b590      	push	{r4, r7, lr}
    b2a6:	b085      	sub	sp, #20
    b2a8:	af00      	add	r7, sp, #0
    b2aa:	6078      	str	r0, [r7, #4]
    b2ac:	6039      	str	r1, [r7, #0]
    enum status_code rtr_code = STATUS_ABORTED;
    b2ae:	230f      	movs	r3, #15
    b2b0:	18fb      	adds	r3, r7, r3
    b2b2:	2204      	movs	r2, #4
    b2b4:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<4;i++){
    b2b6:	2300      	movs	r3, #0
    b2b8:	60bb      	str	r3, [r7, #8]
    b2ba:	e022      	b.n	b302 <write_nvm+0x5e>
        rtr_code = nvm_write_buffer(APP_START_ADDRESS + row_number*NVM_BYTES_PER_ROW + NVMCTRL_PAGE_SIZE*i, buffer + i*NVMCTRL_PAGE_SIZE, NVMCTRL_PAGE_SIZE);
    b2bc:	687b      	ldr	r3, [r7, #4]
    b2be:	021b      	lsls	r3, r3, #8
    b2c0:	001a      	movs	r2, r3
    b2c2:	68bb      	ldr	r3, [r7, #8]
    b2c4:	019b      	lsls	r3, r3, #6
    b2c6:	18d3      	adds	r3, r2, r3
    b2c8:	2290      	movs	r2, #144	; 0x90
    b2ca:	0252      	lsls	r2, r2, #9
    b2cc:	1898      	adds	r0, r3, r2
    b2ce:	68bb      	ldr	r3, [r7, #8]
    b2d0:	019b      	lsls	r3, r3, #6
    b2d2:	001a      	movs	r2, r3
    b2d4:	683b      	ldr	r3, [r7, #0]
    b2d6:	189b      	adds	r3, r3, r2
    b2d8:	220f      	movs	r2, #15
    b2da:	18bc      	adds	r4, r7, r2
    b2dc:	2240      	movs	r2, #64	; 0x40
    b2de:	0019      	movs	r1, r3
    b2e0:	4b0d      	ldr	r3, [pc, #52]	; (b318 <write_nvm+0x74>)
    b2e2:	4798      	blx	r3
    b2e4:	0003      	movs	r3, r0
    b2e6:	7023      	strb	r3, [r4, #0]
        if(rtr_code != STATUS_OK){
    b2e8:	230f      	movs	r3, #15
    b2ea:	18fb      	adds	r3, r7, r3
    b2ec:	781b      	ldrb	r3, [r3, #0]
    b2ee:	2b00      	cmp	r3, #0
    b2f0:	d004      	beq.n	b2fc <write_nvm+0x58>
            SerialConsoleWriteString("Failed To write NVM\r\n");
    b2f2:	4b0a      	ldr	r3, [pc, #40]	; (b31c <write_nvm+0x78>)
    b2f4:	0018      	movs	r0, r3
    b2f6:	4b0a      	ldr	r3, [pc, #40]	; (b320 <write_nvm+0x7c>)
    b2f8:	4798      	blx	r3
            break;
    b2fa:	e005      	b.n	b308 <write_nvm+0x64>
    for(int i=0;i<4;i++){
    b2fc:	68bb      	ldr	r3, [r7, #8]
    b2fe:	3301      	adds	r3, #1
    b300:	60bb      	str	r3, [r7, #8]
    b302:	68bb      	ldr	r3, [r7, #8]
    b304:	2b03      	cmp	r3, #3
    b306:	ddd9      	ble.n	b2bc <write_nvm+0x18>
        }
    }
    return rtr_code;
    b308:	230f      	movs	r3, #15
    b30a:	18fb      	adds	r3, r7, r3
    b30c:	781b      	ldrb	r3, [r3, #0]
}
    b30e:	0018      	movs	r0, r3
    b310:	46bd      	mov	sp, r7
    b312:	b005      	add	sp, #20
    b314:	bd90      	pop	{r4, r7, pc}
    b316:	46c0      	nop			; (mov r8, r8)
    b318:	000006bd 	.word	0x000006bd
    b31c:	0000d278 	.word	0x0000d278
    b320:	00000fe9 	.word	0x00000fe9

0000b324 <erase_nvm>:
 * @brief Erases NVM
 * Erases one row in NVM from nvm_addr
 * @param[in] row_number Row number to erase
 * @return enum status_code 
 */
static enum status_code erase_nvm(int row_number){
    b324:	b590      	push	{r4, r7, lr}
    b326:	b087      	sub	sp, #28
    b328:	af00      	add	r7, sp, #0
    b32a:	6078      	str	r0, [r7, #4]
    enum status_code rtr_code = nvm_erase_row(APP_START_ADDRESS + row_number*NVM_BYTES_PER_ROW);
    b32c:	687b      	ldr	r3, [r7, #4]
    b32e:	021b      	lsls	r3, r3, #8
    b330:	2290      	movs	r2, #144	; 0x90
    b332:	0252      	lsls	r2, r2, #9
    b334:	4694      	mov	ip, r2
    b336:	4463      	add	r3, ip
    b338:	2217      	movs	r2, #23
    b33a:	18bc      	adds	r4, r7, r2
    b33c:	0018      	movs	r0, r3
    b33e:	4b20      	ldr	r3, [pc, #128]	; (b3c0 <erase_nvm+0x9c>)
    b340:	4798      	blx	r3
    b342:	0003      	movs	r3, r0
    b344:	7023      	strb	r3, [r4, #0]
    char erased_byte_NVM = 0xFF;
    b346:	230f      	movs	r3, #15
    b348:	18fb      	adds	r3, r7, r3
    b34a:	22ff      	movs	r2, #255	; 0xff
    b34c:	701a      	strb	r2, [r3, #0]
    if(rtr_code!=STATUS_OK){
    b34e:	2317      	movs	r3, #23
    b350:	18fb      	adds	r3, r7, r3
    b352:	781b      	ldrb	r3, [r3, #0]
    b354:	2b00      	cmp	r3, #0
    b356:	d003      	beq.n	b360 <erase_nvm+0x3c>
            SerialConsoleWriteString("Error While erasing data\r\n");
    b358:	4b1a      	ldr	r3, [pc, #104]	; (b3c4 <erase_nvm+0xa0>)
    b35a:	0018      	movs	r0, r3
    b35c:	4b1a      	ldr	r3, [pc, #104]	; (b3c8 <erase_nvm+0xa4>)
    b35e:	4798      	blx	r3
    }
    // Reading from the NVM memory can be performed using direct addressing into the NVM memory space
    // reading each bytes in the row
    if(rtr_code!=STATUS_OK){
    b360:	2317      	movs	r3, #23
    b362:	18fb      	adds	r3, r7, r3
    b364:	781b      	ldrb	r3, [r3, #0]
    b366:	2b00      	cmp	r3, #0
    b368:	d022      	beq.n	b3b0 <erase_nvm+0x8c>
        for(int i=0;i<NVM_BYTES_PER_ROW;i++){
    b36a:	2300      	movs	r3, #0
    b36c:	613b      	str	r3, [r7, #16]
    b36e:	e01c      	b.n	b3aa <erase_nvm+0x86>
            char *a = (char *)(APP_START_ADDRESS + i + (row_number*NVM_BYTES_PER_ROW));
    b370:	687b      	ldr	r3, [r7, #4]
    b372:	021b      	lsls	r3, r3, #8
    b374:	001a      	movs	r2, r3
    b376:	693b      	ldr	r3, [r7, #16]
    b378:	18d3      	adds	r3, r2, r3
    b37a:	2290      	movs	r2, #144	; 0x90
    b37c:	0252      	lsls	r2, r2, #9
    b37e:	4694      	mov	ip, r2
    b380:	4463      	add	r3, ip
    b382:	60bb      	str	r3, [r7, #8]
            if(*a != erased_byte_NVM){
    b384:	68bb      	ldr	r3, [r7, #8]
    b386:	781b      	ldrb	r3, [r3, #0]
    b388:	220f      	movs	r2, #15
    b38a:	18ba      	adds	r2, r7, r2
    b38c:	7812      	ldrb	r2, [r2, #0]
    b38e:	429a      	cmp	r2, r3
    b390:	d008      	beq.n	b3a4 <erase_nvm+0x80>
                SerialConsoleWriteString("Page not erased\r\n");
    b392:	4b0e      	ldr	r3, [pc, #56]	; (b3cc <erase_nvm+0xa8>)
    b394:	0018      	movs	r0, r3
    b396:	4b0c      	ldr	r3, [pc, #48]	; (b3c8 <erase_nvm+0xa4>)
    b398:	4798      	blx	r3
                rtr_code = STATUS_ABORTED;
    b39a:	2317      	movs	r3, #23
    b39c:	18fb      	adds	r3, r7, r3
    b39e:	2204      	movs	r2, #4
    b3a0:	701a      	strb	r2, [r3, #0]
                break;
    b3a2:	e005      	b.n	b3b0 <erase_nvm+0x8c>
        for(int i=0;i<NVM_BYTES_PER_ROW;i++){
    b3a4:	693b      	ldr	r3, [r7, #16]
    b3a6:	3301      	adds	r3, #1
    b3a8:	613b      	str	r3, [r7, #16]
    b3aa:	693b      	ldr	r3, [r7, #16]
    b3ac:	2bff      	cmp	r3, #255	; 0xff
    b3ae:	dddf      	ble.n	b370 <erase_nvm+0x4c>
            }
        }
    }
    return rtr_code;
    b3b0:	2317      	movs	r3, #23
    b3b2:	18fb      	adds	r3, r7, r3
    b3b4:	781b      	ldrb	r3, [r3, #0]
}
    b3b6:	0018      	movs	r0, r3
    b3b8:	46bd      	mov	sp, r7
    b3ba:	b007      	add	sp, #28
    b3bc:	bd90      	pop	{r4, r7, pc}
    b3be:	46c0      	nop			; (mov r8, r8)
    b3c0:	00000809 	.word	0x00000809
    b3c4:	0000d290 	.word	0x0000d290
    b3c8:	00000fe9 	.word	0x00000fe9
    b3cc:	0000d2ac 	.word	0x0000d2ac

0000b3d0 <flash_bin>:
 * @brief Flashes the bin file
 * 
 * @param[in] bin_to_flash Bin File name to flash
 * @return enum status_code 
 */
static enum status_code flash_bin(char *bin_to_flash){
    b3d0:	b590      	push	{r4, r7, lr}
    b3d2:	b09b      	sub	sp, #108	; 0x6c
    b3d4:	af00      	add	r7, sp, #0
    b3d6:	6078      	str	r0, [r7, #4]
    const uint32_t len = NVM_BYTES_PER_ROW;
    b3d8:	2380      	movs	r3, #128	; 0x80
    b3da:	005b      	lsls	r3, r3, #1
    b3dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    char h[64];
    enum status_code rtr_code = STATUS_ABORTED;
    b3de:	2367      	movs	r3, #103	; 0x67
    b3e0:	18fb      	adds	r3, r7, r3
    b3e2:	2204      	movs	r2, #4
    b3e4:	701a      	strb	r2, [r3, #0]
    res = f_open(&file_object, (char const *)bin_to_flash, FA_READ);		
    b3e6:	6879      	ldr	r1, [r7, #4]
    b3e8:	4b43      	ldr	r3, [pc, #268]	; (b4f8 <flash_bin+0x128>)
    b3ea:	2201      	movs	r2, #1
    b3ec:	0018      	movs	r0, r3
    b3ee:	4b43      	ldr	r3, [pc, #268]	; (b4fc <flash_bin+0x12c>)
    b3f0:	4798      	blx	r3
    b3f2:	0003      	movs	r3, r0
    b3f4:	001a      	movs	r2, r3
    b3f6:	4b42      	ldr	r3, [pc, #264]	; (b500 <flash_bin+0x130>)
    b3f8:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)
    b3fa:	4b41      	ldr	r3, [pc, #260]	; (b500 <flash_bin+0x130>)
    b3fc:	781b      	ldrb	r3, [r3, #0]
    b3fe:	2b00      	cmp	r3, #0
    b400:	d004      	beq.n	b40c <flash_bin+0x3c>
	{
		SerialConsoleWriteString("Could not open bin file!\r\n");
    b402:	4b40      	ldr	r3, [pc, #256]	; (b504 <flash_bin+0x134>)
    b404:	0018      	movs	r0, r3
    b406:	4b40      	ldr	r3, [pc, #256]	; (b508 <flash_bin+0x138>)
    b408:	4798      	blx	r3
    b40a:	e069      	b.n	b4e0 <flash_bin+0x110>
	}
    else{
        uint32_t size_of_bin = (uint32_t)f_size(&file_object);
    b40c:	4b3a      	ldr	r3, [pc, #232]	; (b4f8 <flash_bin+0x128>)
    b40e:	68db      	ldr	r3, [r3, #12]
    b410:	65bb      	str	r3, [r7, #88]	; 0x58
        for(uint32_t i=0; i<360;i++){
    b412:	2300      	movs	r3, #0
    b414:	663b      	str	r3, [r7, #96]	; 0x60
    b416:	e05e      	b.n	b4d6 <flash_bin+0x106>

            uint32_t readBytes = 0, bytesLeft = len, BufferOffset = 0;
    b418:	2300      	movs	r3, #0
    b41a:	60fb      	str	r3, [r7, #12]
    b41c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b41e:	657b      	str	r3, [r7, #84]	; 0x54
    b420:	2300      	movs	r3, #0
    b422:	653b      	str	r3, [r7, #80]	; 0x50

            res = f_read(&file_object, readBuffer, bytesLeft, &readBytes);
    b424:	230c      	movs	r3, #12
    b426:	18fb      	adds	r3, r7, r3
    b428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b42a:	4938      	ldr	r1, [pc, #224]	; (b50c <flash_bin+0x13c>)
    b42c:	4832      	ldr	r0, [pc, #200]	; (b4f8 <flash_bin+0x128>)
    b42e:	4c38      	ldr	r4, [pc, #224]	; (b510 <flash_bin+0x140>)
    b430:	47a0      	blx	r4
    b432:	0003      	movs	r3, r0
    b434:	001a      	movs	r2, r3
    b436:	4b32      	ldr	r3, [pc, #200]	; (b500 <flash_bin+0x130>)
    b438:	701a      	strb	r2, [r3, #0]

            if(res != FR_OK){
    b43a:	4b31      	ldr	r3, [pc, #196]	; (b500 <flash_bin+0x130>)
    b43c:	781b      	ldrb	r3, [r3, #0]
    b43e:	2b00      	cmp	r3, #0
    b440:	d003      	beq.n	b44a <flash_bin+0x7a>
                SerialConsoleWriteString("Bin Read Failed!\r\n");
    b442:	4b34      	ldr	r3, [pc, #208]	; (b514 <flash_bin+0x144>)
    b444:	0018      	movs	r0, r3
    b446:	4b30      	ldr	r3, [pc, #192]	; (b508 <flash_bin+0x138>)
    b448:	4798      	blx	r3
            }
            // Erase NVM
            rtr_code = erase_nvm(i);
    b44a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    b44c:	2267      	movs	r2, #103	; 0x67
    b44e:	18bc      	adds	r4, r7, r2
    b450:	0018      	movs	r0, r3
    b452:	4b31      	ldr	r3, [pc, #196]	; (b518 <flash_bin+0x148>)
    b454:	4798      	blx	r3
    b456:	0003      	movs	r3, r0
    b458:	7023      	strb	r3, [r4, #0]
            #if __DEBUG__
            if(rtr_code==STATUS_OK){
    b45a:	2367      	movs	r3, #103	; 0x67
    b45c:	18fb      	adds	r3, r7, r3
    b45e:	781b      	ldrb	r3, [r3, #0]
    b460:	2b00      	cmp	r3, #0
    b462:	d103      	bne.n	b46c <flash_bin+0x9c>
                SerialConsoleWriteString("Memory Erased \r\n");
    b464:	4b2d      	ldr	r3, [pc, #180]	; (b51c <flash_bin+0x14c>)
    b466:	0018      	movs	r0, r3
    b468:	4b27      	ldr	r3, [pc, #156]	; (b508 <flash_bin+0x138>)
    b46a:	4798      	blx	r3
            }
            #endif
            // Write BIN to NVM
            rtr_code = write_nvm(i, readBuffer);
    b46c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    b46e:	2267      	movs	r2, #103	; 0x67
    b470:	18bc      	adds	r4, r7, r2
    b472:	4a26      	ldr	r2, [pc, #152]	; (b50c <flash_bin+0x13c>)
    b474:	0011      	movs	r1, r2
    b476:	0018      	movs	r0, r3
    b478:	4b29      	ldr	r3, [pc, #164]	; (b520 <flash_bin+0x150>)
    b47a:	4798      	blx	r3
    b47c:	0003      	movs	r3, r0
    b47e:	7023      	strb	r3, [r4, #0]
            #if __DEBUG__
            if(rtr_code==STATUS_OK){
    b480:	2367      	movs	r3, #103	; 0x67
    b482:	18fb      	adds	r3, r7, r3
    b484:	781b      	ldrb	r3, [r3, #0]
    b486:	2b00      	cmp	r3, #0
    b488:	d103      	bne.n	b492 <flash_bin+0xc2>
                SerialConsoleWriteString("Bin Written to NVM\r\n");
    b48a:	4b26      	ldr	r3, [pc, #152]	; (b524 <flash_bin+0x154>)
    b48c:	0018      	movs	r0, r3
    b48e:	4b1e      	ldr	r3, [pc, #120]	; (b508 <flash_bin+0x138>)
    b490:	4798      	blx	r3
                
            }
            #endif
            // Perform CRC on the NVM
            rtr_code = perform_nvm_crc(readBuffer, i);
    b492:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    b494:	2367      	movs	r3, #103	; 0x67
    b496:	18fc      	adds	r4, r7, r3
    b498:	4b1c      	ldr	r3, [pc, #112]	; (b50c <flash_bin+0x13c>)
    b49a:	0011      	movs	r1, r2
    b49c:	0018      	movs	r0, r3
    b49e:	4b22      	ldr	r3, [pc, #136]	; (b528 <flash_bin+0x158>)
    b4a0:	4798      	blx	r3
    b4a2:	0003      	movs	r3, r0
    b4a4:	7023      	strb	r3, [r4, #0]
            #if __DEBUG__
            if(rtr_code==STATUS_OK){
    b4a6:	2367      	movs	r3, #103	; 0x67
    b4a8:	18fb      	adds	r3, r7, r3
    b4aa:	781b      	ldrb	r3, [r3, #0]
    b4ac:	2b00      	cmp	r3, #0
    b4ae:	d103      	bne.n	b4b8 <flash_bin+0xe8>
                SerialConsoleWriteString("CRC Passed\r\n");
    b4b0:	4b1e      	ldr	r3, [pc, #120]	; (b52c <flash_bin+0x15c>)
    b4b2:	0018      	movs	r0, r3
    b4b4:	4b14      	ldr	r3, [pc, #80]	; (b508 <flash_bin+0x138>)
    b4b6:	4798      	blx	r3
            }
            snprintf(h,63,"Number of Rows %d\r\n", i);
    b4b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    b4ba:	4a1d      	ldr	r2, [pc, #116]	; (b530 <flash_bin+0x160>)
    b4bc:	2110      	movs	r1, #16
    b4be:	1878      	adds	r0, r7, r1
    b4c0:	213f      	movs	r1, #63	; 0x3f
    b4c2:	4c1c      	ldr	r4, [pc, #112]	; (b534 <flash_bin+0x164>)
    b4c4:	47a0      	blx	r4
            SerialConsoleWriteString(h);
    b4c6:	2310      	movs	r3, #16
    b4c8:	18fb      	adds	r3, r7, r3
    b4ca:	0018      	movs	r0, r3
    b4cc:	4b0e      	ldr	r3, [pc, #56]	; (b508 <flash_bin+0x138>)
    b4ce:	4798      	blx	r3
        for(uint32_t i=0; i<360;i++){
    b4d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    b4d2:	3301      	adds	r3, #1
    b4d4:	663b      	str	r3, [r7, #96]	; 0x60
    b4d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    b4d8:	2368      	movs	r3, #104	; 0x68
    b4da:	33ff      	adds	r3, #255	; 0xff
    b4dc:	429a      	cmp	r2, r3
    b4de:	d99b      	bls.n	b418 <flash_bin+0x48>
            #endif
        }
    }
    f_close(&file_object);
    b4e0:	4b05      	ldr	r3, [pc, #20]	; (b4f8 <flash_bin+0x128>)
    b4e2:	0018      	movs	r0, r3
    b4e4:	4b14      	ldr	r3, [pc, #80]	; (b538 <flash_bin+0x168>)
    b4e6:	4798      	blx	r3
    return rtr_code;
    b4e8:	2367      	movs	r3, #103	; 0x67
    b4ea:	18fb      	adds	r3, r7, r3
    b4ec:	781b      	ldrb	r3, [r3, #0]
}
    b4ee:	0018      	movs	r0, r3
    b4f0:	46bd      	mov	sp, r7
    b4f2:	b01b      	add	sp, #108	; 0x6c
    b4f4:	bd90      	pop	{r4, r7, pc}
    b4f6:	46c0      	nop			; (mov r8, r8)
    b4f8:	20000c7c 	.word	0x20000c7c
    b4fc:	00009afd 	.word	0x00009afd
    b500:	20000dd6 	.word	0x20000dd6
    b504:	0000d2c0 	.word	0x0000d2c0
    b508:	00000fe9 	.word	0x00000fe9
    b50c:	20000cd4 	.word	0x20000cd4
    b510:	0000a02d 	.word	0x0000a02d
    b514:	0000d2dc 	.word	0x0000d2dc
    b518:	0000b325 	.word	0x0000b325
    b51c:	0000d2f0 	.word	0x0000d2f0
    b520:	0000b2a5 	.word	0x0000b2a5
    b524:	0000d304 	.word	0x0000d304
    b528:	0000b1a9 	.word	0x0000b1a9
    b52c:	0000d31c 	.word	0x0000d31c
    b530:	0000d32c 	.word	0x0000d32c
    b534:	0000bbdd 	.word	0x0000bbdd
    b538:	0000a799 	.word	0x0000a799

0000b53c <__udivsi3>:
    b53c:	2200      	movs	r2, #0
    b53e:	0843      	lsrs	r3, r0, #1
    b540:	428b      	cmp	r3, r1
    b542:	d374      	bcc.n	b62e <__udivsi3+0xf2>
    b544:	0903      	lsrs	r3, r0, #4
    b546:	428b      	cmp	r3, r1
    b548:	d35f      	bcc.n	b60a <__udivsi3+0xce>
    b54a:	0a03      	lsrs	r3, r0, #8
    b54c:	428b      	cmp	r3, r1
    b54e:	d344      	bcc.n	b5da <__udivsi3+0x9e>
    b550:	0b03      	lsrs	r3, r0, #12
    b552:	428b      	cmp	r3, r1
    b554:	d328      	bcc.n	b5a8 <__udivsi3+0x6c>
    b556:	0c03      	lsrs	r3, r0, #16
    b558:	428b      	cmp	r3, r1
    b55a:	d30d      	bcc.n	b578 <__udivsi3+0x3c>
    b55c:	22ff      	movs	r2, #255	; 0xff
    b55e:	0209      	lsls	r1, r1, #8
    b560:	ba12      	rev	r2, r2
    b562:	0c03      	lsrs	r3, r0, #16
    b564:	428b      	cmp	r3, r1
    b566:	d302      	bcc.n	b56e <__udivsi3+0x32>
    b568:	1212      	asrs	r2, r2, #8
    b56a:	0209      	lsls	r1, r1, #8
    b56c:	d065      	beq.n	b63a <__udivsi3+0xfe>
    b56e:	0b03      	lsrs	r3, r0, #12
    b570:	428b      	cmp	r3, r1
    b572:	d319      	bcc.n	b5a8 <__udivsi3+0x6c>
    b574:	e000      	b.n	b578 <__udivsi3+0x3c>
    b576:	0a09      	lsrs	r1, r1, #8
    b578:	0bc3      	lsrs	r3, r0, #15
    b57a:	428b      	cmp	r3, r1
    b57c:	d301      	bcc.n	b582 <__udivsi3+0x46>
    b57e:	03cb      	lsls	r3, r1, #15
    b580:	1ac0      	subs	r0, r0, r3
    b582:	4152      	adcs	r2, r2
    b584:	0b83      	lsrs	r3, r0, #14
    b586:	428b      	cmp	r3, r1
    b588:	d301      	bcc.n	b58e <__udivsi3+0x52>
    b58a:	038b      	lsls	r3, r1, #14
    b58c:	1ac0      	subs	r0, r0, r3
    b58e:	4152      	adcs	r2, r2
    b590:	0b43      	lsrs	r3, r0, #13
    b592:	428b      	cmp	r3, r1
    b594:	d301      	bcc.n	b59a <__udivsi3+0x5e>
    b596:	034b      	lsls	r3, r1, #13
    b598:	1ac0      	subs	r0, r0, r3
    b59a:	4152      	adcs	r2, r2
    b59c:	0b03      	lsrs	r3, r0, #12
    b59e:	428b      	cmp	r3, r1
    b5a0:	d301      	bcc.n	b5a6 <__udivsi3+0x6a>
    b5a2:	030b      	lsls	r3, r1, #12
    b5a4:	1ac0      	subs	r0, r0, r3
    b5a6:	4152      	adcs	r2, r2
    b5a8:	0ac3      	lsrs	r3, r0, #11
    b5aa:	428b      	cmp	r3, r1
    b5ac:	d301      	bcc.n	b5b2 <__udivsi3+0x76>
    b5ae:	02cb      	lsls	r3, r1, #11
    b5b0:	1ac0      	subs	r0, r0, r3
    b5b2:	4152      	adcs	r2, r2
    b5b4:	0a83      	lsrs	r3, r0, #10
    b5b6:	428b      	cmp	r3, r1
    b5b8:	d301      	bcc.n	b5be <__udivsi3+0x82>
    b5ba:	028b      	lsls	r3, r1, #10
    b5bc:	1ac0      	subs	r0, r0, r3
    b5be:	4152      	adcs	r2, r2
    b5c0:	0a43      	lsrs	r3, r0, #9
    b5c2:	428b      	cmp	r3, r1
    b5c4:	d301      	bcc.n	b5ca <__udivsi3+0x8e>
    b5c6:	024b      	lsls	r3, r1, #9
    b5c8:	1ac0      	subs	r0, r0, r3
    b5ca:	4152      	adcs	r2, r2
    b5cc:	0a03      	lsrs	r3, r0, #8
    b5ce:	428b      	cmp	r3, r1
    b5d0:	d301      	bcc.n	b5d6 <__udivsi3+0x9a>
    b5d2:	020b      	lsls	r3, r1, #8
    b5d4:	1ac0      	subs	r0, r0, r3
    b5d6:	4152      	adcs	r2, r2
    b5d8:	d2cd      	bcs.n	b576 <__udivsi3+0x3a>
    b5da:	09c3      	lsrs	r3, r0, #7
    b5dc:	428b      	cmp	r3, r1
    b5de:	d301      	bcc.n	b5e4 <__udivsi3+0xa8>
    b5e0:	01cb      	lsls	r3, r1, #7
    b5e2:	1ac0      	subs	r0, r0, r3
    b5e4:	4152      	adcs	r2, r2
    b5e6:	0983      	lsrs	r3, r0, #6
    b5e8:	428b      	cmp	r3, r1
    b5ea:	d301      	bcc.n	b5f0 <__udivsi3+0xb4>
    b5ec:	018b      	lsls	r3, r1, #6
    b5ee:	1ac0      	subs	r0, r0, r3
    b5f0:	4152      	adcs	r2, r2
    b5f2:	0943      	lsrs	r3, r0, #5
    b5f4:	428b      	cmp	r3, r1
    b5f6:	d301      	bcc.n	b5fc <__udivsi3+0xc0>
    b5f8:	014b      	lsls	r3, r1, #5
    b5fa:	1ac0      	subs	r0, r0, r3
    b5fc:	4152      	adcs	r2, r2
    b5fe:	0903      	lsrs	r3, r0, #4
    b600:	428b      	cmp	r3, r1
    b602:	d301      	bcc.n	b608 <__udivsi3+0xcc>
    b604:	010b      	lsls	r3, r1, #4
    b606:	1ac0      	subs	r0, r0, r3
    b608:	4152      	adcs	r2, r2
    b60a:	08c3      	lsrs	r3, r0, #3
    b60c:	428b      	cmp	r3, r1
    b60e:	d301      	bcc.n	b614 <__udivsi3+0xd8>
    b610:	00cb      	lsls	r3, r1, #3
    b612:	1ac0      	subs	r0, r0, r3
    b614:	4152      	adcs	r2, r2
    b616:	0883      	lsrs	r3, r0, #2
    b618:	428b      	cmp	r3, r1
    b61a:	d301      	bcc.n	b620 <__udivsi3+0xe4>
    b61c:	008b      	lsls	r3, r1, #2
    b61e:	1ac0      	subs	r0, r0, r3
    b620:	4152      	adcs	r2, r2
    b622:	0843      	lsrs	r3, r0, #1
    b624:	428b      	cmp	r3, r1
    b626:	d301      	bcc.n	b62c <__udivsi3+0xf0>
    b628:	004b      	lsls	r3, r1, #1
    b62a:	1ac0      	subs	r0, r0, r3
    b62c:	4152      	adcs	r2, r2
    b62e:	1a41      	subs	r1, r0, r1
    b630:	d200      	bcs.n	b634 <__udivsi3+0xf8>
    b632:	4601      	mov	r1, r0
    b634:	4152      	adcs	r2, r2
    b636:	4610      	mov	r0, r2
    b638:	4770      	bx	lr
    b63a:	e7ff      	b.n	b63c <__udivsi3+0x100>
    b63c:	b501      	push	{r0, lr}
    b63e:	2000      	movs	r0, #0
    b640:	f000 f8f0 	bl	b824 <__aeabi_idiv0>
    b644:	bd02      	pop	{r1, pc}
    b646:	46c0      	nop			; (mov r8, r8)

0000b648 <__aeabi_uidivmod>:
    b648:	2900      	cmp	r1, #0
    b64a:	d0f7      	beq.n	b63c <__udivsi3+0x100>
    b64c:	e776      	b.n	b53c <__udivsi3>
    b64e:	4770      	bx	lr

0000b650 <__divsi3>:
    b650:	4603      	mov	r3, r0
    b652:	430b      	orrs	r3, r1
    b654:	d47f      	bmi.n	b756 <__divsi3+0x106>
    b656:	2200      	movs	r2, #0
    b658:	0843      	lsrs	r3, r0, #1
    b65a:	428b      	cmp	r3, r1
    b65c:	d374      	bcc.n	b748 <__divsi3+0xf8>
    b65e:	0903      	lsrs	r3, r0, #4
    b660:	428b      	cmp	r3, r1
    b662:	d35f      	bcc.n	b724 <__divsi3+0xd4>
    b664:	0a03      	lsrs	r3, r0, #8
    b666:	428b      	cmp	r3, r1
    b668:	d344      	bcc.n	b6f4 <__divsi3+0xa4>
    b66a:	0b03      	lsrs	r3, r0, #12
    b66c:	428b      	cmp	r3, r1
    b66e:	d328      	bcc.n	b6c2 <__divsi3+0x72>
    b670:	0c03      	lsrs	r3, r0, #16
    b672:	428b      	cmp	r3, r1
    b674:	d30d      	bcc.n	b692 <__divsi3+0x42>
    b676:	22ff      	movs	r2, #255	; 0xff
    b678:	0209      	lsls	r1, r1, #8
    b67a:	ba12      	rev	r2, r2
    b67c:	0c03      	lsrs	r3, r0, #16
    b67e:	428b      	cmp	r3, r1
    b680:	d302      	bcc.n	b688 <__divsi3+0x38>
    b682:	1212      	asrs	r2, r2, #8
    b684:	0209      	lsls	r1, r1, #8
    b686:	d065      	beq.n	b754 <__divsi3+0x104>
    b688:	0b03      	lsrs	r3, r0, #12
    b68a:	428b      	cmp	r3, r1
    b68c:	d319      	bcc.n	b6c2 <__divsi3+0x72>
    b68e:	e000      	b.n	b692 <__divsi3+0x42>
    b690:	0a09      	lsrs	r1, r1, #8
    b692:	0bc3      	lsrs	r3, r0, #15
    b694:	428b      	cmp	r3, r1
    b696:	d301      	bcc.n	b69c <__divsi3+0x4c>
    b698:	03cb      	lsls	r3, r1, #15
    b69a:	1ac0      	subs	r0, r0, r3
    b69c:	4152      	adcs	r2, r2
    b69e:	0b83      	lsrs	r3, r0, #14
    b6a0:	428b      	cmp	r3, r1
    b6a2:	d301      	bcc.n	b6a8 <__divsi3+0x58>
    b6a4:	038b      	lsls	r3, r1, #14
    b6a6:	1ac0      	subs	r0, r0, r3
    b6a8:	4152      	adcs	r2, r2
    b6aa:	0b43      	lsrs	r3, r0, #13
    b6ac:	428b      	cmp	r3, r1
    b6ae:	d301      	bcc.n	b6b4 <__divsi3+0x64>
    b6b0:	034b      	lsls	r3, r1, #13
    b6b2:	1ac0      	subs	r0, r0, r3
    b6b4:	4152      	adcs	r2, r2
    b6b6:	0b03      	lsrs	r3, r0, #12
    b6b8:	428b      	cmp	r3, r1
    b6ba:	d301      	bcc.n	b6c0 <__divsi3+0x70>
    b6bc:	030b      	lsls	r3, r1, #12
    b6be:	1ac0      	subs	r0, r0, r3
    b6c0:	4152      	adcs	r2, r2
    b6c2:	0ac3      	lsrs	r3, r0, #11
    b6c4:	428b      	cmp	r3, r1
    b6c6:	d301      	bcc.n	b6cc <__divsi3+0x7c>
    b6c8:	02cb      	lsls	r3, r1, #11
    b6ca:	1ac0      	subs	r0, r0, r3
    b6cc:	4152      	adcs	r2, r2
    b6ce:	0a83      	lsrs	r3, r0, #10
    b6d0:	428b      	cmp	r3, r1
    b6d2:	d301      	bcc.n	b6d8 <__divsi3+0x88>
    b6d4:	028b      	lsls	r3, r1, #10
    b6d6:	1ac0      	subs	r0, r0, r3
    b6d8:	4152      	adcs	r2, r2
    b6da:	0a43      	lsrs	r3, r0, #9
    b6dc:	428b      	cmp	r3, r1
    b6de:	d301      	bcc.n	b6e4 <__divsi3+0x94>
    b6e0:	024b      	lsls	r3, r1, #9
    b6e2:	1ac0      	subs	r0, r0, r3
    b6e4:	4152      	adcs	r2, r2
    b6e6:	0a03      	lsrs	r3, r0, #8
    b6e8:	428b      	cmp	r3, r1
    b6ea:	d301      	bcc.n	b6f0 <__divsi3+0xa0>
    b6ec:	020b      	lsls	r3, r1, #8
    b6ee:	1ac0      	subs	r0, r0, r3
    b6f0:	4152      	adcs	r2, r2
    b6f2:	d2cd      	bcs.n	b690 <__divsi3+0x40>
    b6f4:	09c3      	lsrs	r3, r0, #7
    b6f6:	428b      	cmp	r3, r1
    b6f8:	d301      	bcc.n	b6fe <__divsi3+0xae>
    b6fa:	01cb      	lsls	r3, r1, #7
    b6fc:	1ac0      	subs	r0, r0, r3
    b6fe:	4152      	adcs	r2, r2
    b700:	0983      	lsrs	r3, r0, #6
    b702:	428b      	cmp	r3, r1
    b704:	d301      	bcc.n	b70a <__divsi3+0xba>
    b706:	018b      	lsls	r3, r1, #6
    b708:	1ac0      	subs	r0, r0, r3
    b70a:	4152      	adcs	r2, r2
    b70c:	0943      	lsrs	r3, r0, #5
    b70e:	428b      	cmp	r3, r1
    b710:	d301      	bcc.n	b716 <__divsi3+0xc6>
    b712:	014b      	lsls	r3, r1, #5
    b714:	1ac0      	subs	r0, r0, r3
    b716:	4152      	adcs	r2, r2
    b718:	0903      	lsrs	r3, r0, #4
    b71a:	428b      	cmp	r3, r1
    b71c:	d301      	bcc.n	b722 <__divsi3+0xd2>
    b71e:	010b      	lsls	r3, r1, #4
    b720:	1ac0      	subs	r0, r0, r3
    b722:	4152      	adcs	r2, r2
    b724:	08c3      	lsrs	r3, r0, #3
    b726:	428b      	cmp	r3, r1
    b728:	d301      	bcc.n	b72e <__divsi3+0xde>
    b72a:	00cb      	lsls	r3, r1, #3
    b72c:	1ac0      	subs	r0, r0, r3
    b72e:	4152      	adcs	r2, r2
    b730:	0883      	lsrs	r3, r0, #2
    b732:	428b      	cmp	r3, r1
    b734:	d301      	bcc.n	b73a <__divsi3+0xea>
    b736:	008b      	lsls	r3, r1, #2
    b738:	1ac0      	subs	r0, r0, r3
    b73a:	4152      	adcs	r2, r2
    b73c:	0843      	lsrs	r3, r0, #1
    b73e:	428b      	cmp	r3, r1
    b740:	d301      	bcc.n	b746 <__divsi3+0xf6>
    b742:	004b      	lsls	r3, r1, #1
    b744:	1ac0      	subs	r0, r0, r3
    b746:	4152      	adcs	r2, r2
    b748:	1a41      	subs	r1, r0, r1
    b74a:	d200      	bcs.n	b74e <__divsi3+0xfe>
    b74c:	4601      	mov	r1, r0
    b74e:	4152      	adcs	r2, r2
    b750:	4610      	mov	r0, r2
    b752:	4770      	bx	lr
    b754:	e05d      	b.n	b812 <__divsi3+0x1c2>
    b756:	0fca      	lsrs	r2, r1, #31
    b758:	d000      	beq.n	b75c <__divsi3+0x10c>
    b75a:	4249      	negs	r1, r1
    b75c:	1003      	asrs	r3, r0, #32
    b75e:	d300      	bcc.n	b762 <__divsi3+0x112>
    b760:	4240      	negs	r0, r0
    b762:	4053      	eors	r3, r2
    b764:	2200      	movs	r2, #0
    b766:	469c      	mov	ip, r3
    b768:	0903      	lsrs	r3, r0, #4
    b76a:	428b      	cmp	r3, r1
    b76c:	d32d      	bcc.n	b7ca <__divsi3+0x17a>
    b76e:	0a03      	lsrs	r3, r0, #8
    b770:	428b      	cmp	r3, r1
    b772:	d312      	bcc.n	b79a <__divsi3+0x14a>
    b774:	22fc      	movs	r2, #252	; 0xfc
    b776:	0189      	lsls	r1, r1, #6
    b778:	ba12      	rev	r2, r2
    b77a:	0a03      	lsrs	r3, r0, #8
    b77c:	428b      	cmp	r3, r1
    b77e:	d30c      	bcc.n	b79a <__divsi3+0x14a>
    b780:	0189      	lsls	r1, r1, #6
    b782:	1192      	asrs	r2, r2, #6
    b784:	428b      	cmp	r3, r1
    b786:	d308      	bcc.n	b79a <__divsi3+0x14a>
    b788:	0189      	lsls	r1, r1, #6
    b78a:	1192      	asrs	r2, r2, #6
    b78c:	428b      	cmp	r3, r1
    b78e:	d304      	bcc.n	b79a <__divsi3+0x14a>
    b790:	0189      	lsls	r1, r1, #6
    b792:	d03a      	beq.n	b80a <__divsi3+0x1ba>
    b794:	1192      	asrs	r2, r2, #6
    b796:	e000      	b.n	b79a <__divsi3+0x14a>
    b798:	0989      	lsrs	r1, r1, #6
    b79a:	09c3      	lsrs	r3, r0, #7
    b79c:	428b      	cmp	r3, r1
    b79e:	d301      	bcc.n	b7a4 <__divsi3+0x154>
    b7a0:	01cb      	lsls	r3, r1, #7
    b7a2:	1ac0      	subs	r0, r0, r3
    b7a4:	4152      	adcs	r2, r2
    b7a6:	0983      	lsrs	r3, r0, #6
    b7a8:	428b      	cmp	r3, r1
    b7aa:	d301      	bcc.n	b7b0 <__divsi3+0x160>
    b7ac:	018b      	lsls	r3, r1, #6
    b7ae:	1ac0      	subs	r0, r0, r3
    b7b0:	4152      	adcs	r2, r2
    b7b2:	0943      	lsrs	r3, r0, #5
    b7b4:	428b      	cmp	r3, r1
    b7b6:	d301      	bcc.n	b7bc <__divsi3+0x16c>
    b7b8:	014b      	lsls	r3, r1, #5
    b7ba:	1ac0      	subs	r0, r0, r3
    b7bc:	4152      	adcs	r2, r2
    b7be:	0903      	lsrs	r3, r0, #4
    b7c0:	428b      	cmp	r3, r1
    b7c2:	d301      	bcc.n	b7c8 <__divsi3+0x178>
    b7c4:	010b      	lsls	r3, r1, #4
    b7c6:	1ac0      	subs	r0, r0, r3
    b7c8:	4152      	adcs	r2, r2
    b7ca:	08c3      	lsrs	r3, r0, #3
    b7cc:	428b      	cmp	r3, r1
    b7ce:	d301      	bcc.n	b7d4 <__divsi3+0x184>
    b7d0:	00cb      	lsls	r3, r1, #3
    b7d2:	1ac0      	subs	r0, r0, r3
    b7d4:	4152      	adcs	r2, r2
    b7d6:	0883      	lsrs	r3, r0, #2
    b7d8:	428b      	cmp	r3, r1
    b7da:	d301      	bcc.n	b7e0 <__divsi3+0x190>
    b7dc:	008b      	lsls	r3, r1, #2
    b7de:	1ac0      	subs	r0, r0, r3
    b7e0:	4152      	adcs	r2, r2
    b7e2:	d2d9      	bcs.n	b798 <__divsi3+0x148>
    b7e4:	0843      	lsrs	r3, r0, #1
    b7e6:	428b      	cmp	r3, r1
    b7e8:	d301      	bcc.n	b7ee <__divsi3+0x19e>
    b7ea:	004b      	lsls	r3, r1, #1
    b7ec:	1ac0      	subs	r0, r0, r3
    b7ee:	4152      	adcs	r2, r2
    b7f0:	1a41      	subs	r1, r0, r1
    b7f2:	d200      	bcs.n	b7f6 <__divsi3+0x1a6>
    b7f4:	4601      	mov	r1, r0
    b7f6:	4663      	mov	r3, ip
    b7f8:	4152      	adcs	r2, r2
    b7fa:	105b      	asrs	r3, r3, #1
    b7fc:	4610      	mov	r0, r2
    b7fe:	d301      	bcc.n	b804 <__divsi3+0x1b4>
    b800:	4240      	negs	r0, r0
    b802:	2b00      	cmp	r3, #0
    b804:	d500      	bpl.n	b808 <__divsi3+0x1b8>
    b806:	4249      	negs	r1, r1
    b808:	4770      	bx	lr
    b80a:	4663      	mov	r3, ip
    b80c:	105b      	asrs	r3, r3, #1
    b80e:	d300      	bcc.n	b812 <__divsi3+0x1c2>
    b810:	4240      	negs	r0, r0
    b812:	b501      	push	{r0, lr}
    b814:	2000      	movs	r0, #0
    b816:	f000 f805 	bl	b824 <__aeabi_idiv0>
    b81a:	bd02      	pop	{r1, pc}

0000b81c <__aeabi_idivmod>:
    b81c:	2900      	cmp	r1, #0
    b81e:	d0f8      	beq.n	b812 <__divsi3+0x1c2>
    b820:	e716      	b.n	b650 <__divsi3>
    b822:	4770      	bx	lr

0000b824 <__aeabi_idiv0>:
    b824:	4770      	bx	lr
    b826:	46c0      	nop			; (mov r8, r8)

0000b828 <__aeabi_lmul>:
    b828:	b5f0      	push	{r4, r5, r6, r7, lr}
    b82a:	46ce      	mov	lr, r9
    b82c:	4647      	mov	r7, r8
    b82e:	0415      	lsls	r5, r2, #16
    b830:	0c2d      	lsrs	r5, r5, #16
    b832:	002e      	movs	r6, r5
    b834:	b580      	push	{r7, lr}
    b836:	0407      	lsls	r7, r0, #16
    b838:	0c14      	lsrs	r4, r2, #16
    b83a:	0c3f      	lsrs	r7, r7, #16
    b83c:	4699      	mov	r9, r3
    b83e:	0c03      	lsrs	r3, r0, #16
    b840:	437e      	muls	r6, r7
    b842:	435d      	muls	r5, r3
    b844:	4367      	muls	r7, r4
    b846:	4363      	muls	r3, r4
    b848:	197f      	adds	r7, r7, r5
    b84a:	0c34      	lsrs	r4, r6, #16
    b84c:	19e4      	adds	r4, r4, r7
    b84e:	469c      	mov	ip, r3
    b850:	42a5      	cmp	r5, r4
    b852:	d903      	bls.n	b85c <__aeabi_lmul+0x34>
    b854:	2380      	movs	r3, #128	; 0x80
    b856:	025b      	lsls	r3, r3, #9
    b858:	4698      	mov	r8, r3
    b85a:	44c4      	add	ip, r8
    b85c:	464b      	mov	r3, r9
    b85e:	4351      	muls	r1, r2
    b860:	4343      	muls	r3, r0
    b862:	0436      	lsls	r6, r6, #16
    b864:	0c36      	lsrs	r6, r6, #16
    b866:	0c25      	lsrs	r5, r4, #16
    b868:	0424      	lsls	r4, r4, #16
    b86a:	4465      	add	r5, ip
    b86c:	19a4      	adds	r4, r4, r6
    b86e:	1859      	adds	r1, r3, r1
    b870:	1949      	adds	r1, r1, r5
    b872:	0020      	movs	r0, r4
    b874:	bc0c      	pop	{r2, r3}
    b876:	4690      	mov	r8, r2
    b878:	4699      	mov	r9, r3
    b87a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b87c <__libc_init_array>:
    b87c:	b570      	push	{r4, r5, r6, lr}
    b87e:	2600      	movs	r6, #0
    b880:	4d0c      	ldr	r5, [pc, #48]	; (b8b4 <__libc_init_array+0x38>)
    b882:	4c0d      	ldr	r4, [pc, #52]	; (b8b8 <__libc_init_array+0x3c>)
    b884:	1b64      	subs	r4, r4, r5
    b886:	10a4      	asrs	r4, r4, #2
    b888:	42a6      	cmp	r6, r4
    b88a:	d109      	bne.n	b8a0 <__libc_init_array+0x24>
    b88c:	2600      	movs	r6, #0
    b88e:	f001 fda3 	bl	d3d8 <_init>
    b892:	4d0a      	ldr	r5, [pc, #40]	; (b8bc <__libc_init_array+0x40>)
    b894:	4c0a      	ldr	r4, [pc, #40]	; (b8c0 <__libc_init_array+0x44>)
    b896:	1b64      	subs	r4, r4, r5
    b898:	10a4      	asrs	r4, r4, #2
    b89a:	42a6      	cmp	r6, r4
    b89c:	d105      	bne.n	b8aa <__libc_init_array+0x2e>
    b89e:	bd70      	pop	{r4, r5, r6, pc}
    b8a0:	00b3      	lsls	r3, r6, #2
    b8a2:	58eb      	ldr	r3, [r5, r3]
    b8a4:	4798      	blx	r3
    b8a6:	3601      	adds	r6, #1
    b8a8:	e7ee      	b.n	b888 <__libc_init_array+0xc>
    b8aa:	00b3      	lsls	r3, r6, #2
    b8ac:	58eb      	ldr	r3, [r5, r3]
    b8ae:	4798      	blx	r3
    b8b0:	3601      	adds	r6, #1
    b8b2:	e7f2      	b.n	b89a <__libc_init_array+0x1e>
    b8b4:	0000d3e4 	.word	0x0000d3e4
    b8b8:	0000d3e4 	.word	0x0000d3e4
    b8bc:	0000d3e4 	.word	0x0000d3e4
    b8c0:	0000d3e8 	.word	0x0000d3e8

0000b8c4 <malloc>:
    b8c4:	b510      	push	{r4, lr}
    b8c6:	4b03      	ldr	r3, [pc, #12]	; (b8d4 <malloc+0x10>)
    b8c8:	0001      	movs	r1, r0
    b8ca:	6818      	ldr	r0, [r3, #0]
    b8cc:	f000 f860 	bl	b990 <_malloc_r>
    b8d0:	bd10      	pop	{r4, pc}
    b8d2:	46c0      	nop			; (mov r8, r8)
    b8d4:	20000078 	.word	0x20000078

0000b8d8 <memcpy>:
    b8d8:	2300      	movs	r3, #0
    b8da:	b510      	push	{r4, lr}
    b8dc:	429a      	cmp	r2, r3
    b8de:	d100      	bne.n	b8e2 <memcpy+0xa>
    b8e0:	bd10      	pop	{r4, pc}
    b8e2:	5ccc      	ldrb	r4, [r1, r3]
    b8e4:	54c4      	strb	r4, [r0, r3]
    b8e6:	3301      	adds	r3, #1
    b8e8:	e7f8      	b.n	b8dc <memcpy+0x4>

0000b8ea <memset>:
    b8ea:	0003      	movs	r3, r0
    b8ec:	1882      	adds	r2, r0, r2
    b8ee:	4293      	cmp	r3, r2
    b8f0:	d100      	bne.n	b8f4 <memset+0xa>
    b8f2:	4770      	bx	lr
    b8f4:	7019      	strb	r1, [r3, #0]
    b8f6:	3301      	adds	r3, #1
    b8f8:	e7f9      	b.n	b8ee <memset+0x4>
	...

0000b8fc <_free_r>:
    b8fc:	b570      	push	{r4, r5, r6, lr}
    b8fe:	0005      	movs	r5, r0
    b900:	2900      	cmp	r1, #0
    b902:	d010      	beq.n	b926 <_free_r+0x2a>
    b904:	1f0c      	subs	r4, r1, #4
    b906:	6823      	ldr	r3, [r4, #0]
    b908:	2b00      	cmp	r3, #0
    b90a:	da00      	bge.n	b90e <_free_r+0x12>
    b90c:	18e4      	adds	r4, r4, r3
    b90e:	0028      	movs	r0, r5
    b910:	f000 fb54 	bl	bfbc <__malloc_lock>
    b914:	4a1d      	ldr	r2, [pc, #116]	; (b98c <_free_r+0x90>)
    b916:	6813      	ldr	r3, [r2, #0]
    b918:	2b00      	cmp	r3, #0
    b91a:	d105      	bne.n	b928 <_free_r+0x2c>
    b91c:	6063      	str	r3, [r4, #4]
    b91e:	6014      	str	r4, [r2, #0]
    b920:	0028      	movs	r0, r5
    b922:	f000 fb4c 	bl	bfbe <__malloc_unlock>
    b926:	bd70      	pop	{r4, r5, r6, pc}
    b928:	42a3      	cmp	r3, r4
    b92a:	d909      	bls.n	b940 <_free_r+0x44>
    b92c:	6821      	ldr	r1, [r4, #0]
    b92e:	1860      	adds	r0, r4, r1
    b930:	4283      	cmp	r3, r0
    b932:	d1f3      	bne.n	b91c <_free_r+0x20>
    b934:	6818      	ldr	r0, [r3, #0]
    b936:	685b      	ldr	r3, [r3, #4]
    b938:	1841      	adds	r1, r0, r1
    b93a:	6021      	str	r1, [r4, #0]
    b93c:	e7ee      	b.n	b91c <_free_r+0x20>
    b93e:	0013      	movs	r3, r2
    b940:	685a      	ldr	r2, [r3, #4]
    b942:	2a00      	cmp	r2, #0
    b944:	d001      	beq.n	b94a <_free_r+0x4e>
    b946:	42a2      	cmp	r2, r4
    b948:	d9f9      	bls.n	b93e <_free_r+0x42>
    b94a:	6819      	ldr	r1, [r3, #0]
    b94c:	1858      	adds	r0, r3, r1
    b94e:	42a0      	cmp	r0, r4
    b950:	d10b      	bne.n	b96a <_free_r+0x6e>
    b952:	6820      	ldr	r0, [r4, #0]
    b954:	1809      	adds	r1, r1, r0
    b956:	1858      	adds	r0, r3, r1
    b958:	6019      	str	r1, [r3, #0]
    b95a:	4282      	cmp	r2, r0
    b95c:	d1e0      	bne.n	b920 <_free_r+0x24>
    b95e:	6810      	ldr	r0, [r2, #0]
    b960:	6852      	ldr	r2, [r2, #4]
    b962:	1841      	adds	r1, r0, r1
    b964:	6019      	str	r1, [r3, #0]
    b966:	605a      	str	r2, [r3, #4]
    b968:	e7da      	b.n	b920 <_free_r+0x24>
    b96a:	42a0      	cmp	r0, r4
    b96c:	d902      	bls.n	b974 <_free_r+0x78>
    b96e:	230c      	movs	r3, #12
    b970:	602b      	str	r3, [r5, #0]
    b972:	e7d5      	b.n	b920 <_free_r+0x24>
    b974:	6821      	ldr	r1, [r4, #0]
    b976:	1860      	adds	r0, r4, r1
    b978:	4282      	cmp	r2, r0
    b97a:	d103      	bne.n	b984 <_free_r+0x88>
    b97c:	6810      	ldr	r0, [r2, #0]
    b97e:	6852      	ldr	r2, [r2, #4]
    b980:	1841      	adds	r1, r0, r1
    b982:	6021      	str	r1, [r4, #0]
    b984:	6062      	str	r2, [r4, #4]
    b986:	605c      	str	r4, [r3, #4]
    b988:	e7ca      	b.n	b920 <_free_r+0x24>
    b98a:	46c0      	nop			; (mov r8, r8)
    b98c:	200001cc 	.word	0x200001cc

0000b990 <_malloc_r>:
    b990:	2303      	movs	r3, #3
    b992:	b570      	push	{r4, r5, r6, lr}
    b994:	1ccd      	adds	r5, r1, #3
    b996:	439d      	bics	r5, r3
    b998:	3508      	adds	r5, #8
    b99a:	0006      	movs	r6, r0
    b99c:	2d0c      	cmp	r5, #12
    b99e:	d21e      	bcs.n	b9de <_malloc_r+0x4e>
    b9a0:	250c      	movs	r5, #12
    b9a2:	42a9      	cmp	r1, r5
    b9a4:	d81d      	bhi.n	b9e2 <_malloc_r+0x52>
    b9a6:	0030      	movs	r0, r6
    b9a8:	f000 fb08 	bl	bfbc <__malloc_lock>
    b9ac:	4a25      	ldr	r2, [pc, #148]	; (ba44 <_malloc_r+0xb4>)
    b9ae:	6814      	ldr	r4, [r2, #0]
    b9b0:	0021      	movs	r1, r4
    b9b2:	2900      	cmp	r1, #0
    b9b4:	d119      	bne.n	b9ea <_malloc_r+0x5a>
    b9b6:	4c24      	ldr	r4, [pc, #144]	; (ba48 <_malloc_r+0xb8>)
    b9b8:	6823      	ldr	r3, [r4, #0]
    b9ba:	2b00      	cmp	r3, #0
    b9bc:	d103      	bne.n	b9c6 <_malloc_r+0x36>
    b9be:	0030      	movs	r0, r6
    b9c0:	f000 f844 	bl	ba4c <_sbrk_r>
    b9c4:	6020      	str	r0, [r4, #0]
    b9c6:	0029      	movs	r1, r5
    b9c8:	0030      	movs	r0, r6
    b9ca:	f000 f83f 	bl	ba4c <_sbrk_r>
    b9ce:	1c43      	adds	r3, r0, #1
    b9d0:	d12c      	bne.n	ba2c <_malloc_r+0x9c>
    b9d2:	230c      	movs	r3, #12
    b9d4:	0030      	movs	r0, r6
    b9d6:	6033      	str	r3, [r6, #0]
    b9d8:	f000 faf1 	bl	bfbe <__malloc_unlock>
    b9dc:	e003      	b.n	b9e6 <_malloc_r+0x56>
    b9de:	2d00      	cmp	r5, #0
    b9e0:	dadf      	bge.n	b9a2 <_malloc_r+0x12>
    b9e2:	230c      	movs	r3, #12
    b9e4:	6033      	str	r3, [r6, #0]
    b9e6:	2000      	movs	r0, #0
    b9e8:	bd70      	pop	{r4, r5, r6, pc}
    b9ea:	680b      	ldr	r3, [r1, #0]
    b9ec:	1b5b      	subs	r3, r3, r5
    b9ee:	d41a      	bmi.n	ba26 <_malloc_r+0x96>
    b9f0:	2b0b      	cmp	r3, #11
    b9f2:	d903      	bls.n	b9fc <_malloc_r+0x6c>
    b9f4:	600b      	str	r3, [r1, #0]
    b9f6:	18cc      	adds	r4, r1, r3
    b9f8:	6025      	str	r5, [r4, #0]
    b9fa:	e003      	b.n	ba04 <_malloc_r+0x74>
    b9fc:	428c      	cmp	r4, r1
    b9fe:	d10e      	bne.n	ba1e <_malloc_r+0x8e>
    ba00:	6863      	ldr	r3, [r4, #4]
    ba02:	6013      	str	r3, [r2, #0]
    ba04:	0030      	movs	r0, r6
    ba06:	f000 fada 	bl	bfbe <__malloc_unlock>
    ba0a:	0020      	movs	r0, r4
    ba0c:	2207      	movs	r2, #7
    ba0e:	300b      	adds	r0, #11
    ba10:	1d23      	adds	r3, r4, #4
    ba12:	4390      	bics	r0, r2
    ba14:	1ac3      	subs	r3, r0, r3
    ba16:	d0e7      	beq.n	b9e8 <_malloc_r+0x58>
    ba18:	425a      	negs	r2, r3
    ba1a:	50e2      	str	r2, [r4, r3]
    ba1c:	e7e4      	b.n	b9e8 <_malloc_r+0x58>
    ba1e:	684b      	ldr	r3, [r1, #4]
    ba20:	6063      	str	r3, [r4, #4]
    ba22:	000c      	movs	r4, r1
    ba24:	e7ee      	b.n	ba04 <_malloc_r+0x74>
    ba26:	000c      	movs	r4, r1
    ba28:	6849      	ldr	r1, [r1, #4]
    ba2a:	e7c2      	b.n	b9b2 <_malloc_r+0x22>
    ba2c:	2303      	movs	r3, #3
    ba2e:	1cc4      	adds	r4, r0, #3
    ba30:	439c      	bics	r4, r3
    ba32:	42a0      	cmp	r0, r4
    ba34:	d0e0      	beq.n	b9f8 <_malloc_r+0x68>
    ba36:	1a21      	subs	r1, r4, r0
    ba38:	0030      	movs	r0, r6
    ba3a:	f000 f807 	bl	ba4c <_sbrk_r>
    ba3e:	1c43      	adds	r3, r0, #1
    ba40:	d1da      	bne.n	b9f8 <_malloc_r+0x68>
    ba42:	e7c6      	b.n	b9d2 <_malloc_r+0x42>
    ba44:	200001cc 	.word	0x200001cc
    ba48:	200001d0 	.word	0x200001d0

0000ba4c <_sbrk_r>:
    ba4c:	2300      	movs	r3, #0
    ba4e:	b570      	push	{r4, r5, r6, lr}
    ba50:	4c06      	ldr	r4, [pc, #24]	; (ba6c <_sbrk_r+0x20>)
    ba52:	0005      	movs	r5, r0
    ba54:	0008      	movs	r0, r1
    ba56:	6023      	str	r3, [r4, #0]
    ba58:	f7fb faac 	bl	6fb4 <_sbrk>
    ba5c:	1c43      	adds	r3, r0, #1
    ba5e:	d103      	bne.n	ba68 <_sbrk_r+0x1c>
    ba60:	6823      	ldr	r3, [r4, #0]
    ba62:	2b00      	cmp	r3, #0
    ba64:	d000      	beq.n	ba68 <_sbrk_r+0x1c>
    ba66:	602b      	str	r3, [r5, #0]
    ba68:	bd70      	pop	{r4, r5, r6, pc}
    ba6a:	46c0      	nop			; (mov r8, r8)
    ba6c:	20000ddc 	.word	0x20000ddc

0000ba70 <setbuf>:
    ba70:	424a      	negs	r2, r1
    ba72:	414a      	adcs	r2, r1
    ba74:	2380      	movs	r3, #128	; 0x80
    ba76:	b510      	push	{r4, lr}
    ba78:	0052      	lsls	r2, r2, #1
    ba7a:	00db      	lsls	r3, r3, #3
    ba7c:	f000 f802 	bl	ba84 <setvbuf>
    ba80:	bd10      	pop	{r4, pc}
	...

0000ba84 <setvbuf>:
    ba84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba86:	001d      	movs	r5, r3
    ba88:	4b4f      	ldr	r3, [pc, #316]	; (bbc8 <setvbuf+0x144>)
    ba8a:	b085      	sub	sp, #20
    ba8c:	681e      	ldr	r6, [r3, #0]
    ba8e:	0004      	movs	r4, r0
    ba90:	000f      	movs	r7, r1
    ba92:	9200      	str	r2, [sp, #0]
    ba94:	2e00      	cmp	r6, #0
    ba96:	d005      	beq.n	baa4 <setvbuf+0x20>
    ba98:	69b3      	ldr	r3, [r6, #24]
    ba9a:	2b00      	cmp	r3, #0
    ba9c:	d102      	bne.n	baa4 <setvbuf+0x20>
    ba9e:	0030      	movs	r0, r6
    baa0:	f000 f9ce 	bl	be40 <__sinit>
    baa4:	4b49      	ldr	r3, [pc, #292]	; (bbcc <setvbuf+0x148>)
    baa6:	429c      	cmp	r4, r3
    baa8:	d150      	bne.n	bb4c <setvbuf+0xc8>
    baaa:	6874      	ldr	r4, [r6, #4]
    baac:	9b00      	ldr	r3, [sp, #0]
    baae:	2b02      	cmp	r3, #2
    bab0:	d005      	beq.n	babe <setvbuf+0x3a>
    bab2:	2b01      	cmp	r3, #1
    bab4:	d900      	bls.n	bab8 <setvbuf+0x34>
    bab6:	e084      	b.n	bbc2 <setvbuf+0x13e>
    bab8:	2d00      	cmp	r5, #0
    baba:	da00      	bge.n	babe <setvbuf+0x3a>
    babc:	e081      	b.n	bbc2 <setvbuf+0x13e>
    babe:	0021      	movs	r1, r4
    bac0:	0030      	movs	r0, r6
    bac2:	f000 f94f 	bl	bd64 <_fflush_r>
    bac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bac8:	2900      	cmp	r1, #0
    baca:	d008      	beq.n	bade <setvbuf+0x5a>
    bacc:	0023      	movs	r3, r4
    bace:	3344      	adds	r3, #68	; 0x44
    bad0:	4299      	cmp	r1, r3
    bad2:	d002      	beq.n	bada <setvbuf+0x56>
    bad4:	0030      	movs	r0, r6
    bad6:	f7ff ff11 	bl	b8fc <_free_r>
    bada:	2300      	movs	r3, #0
    badc:	6363      	str	r3, [r4, #52]	; 0x34
    bade:	2300      	movs	r3, #0
    bae0:	61a3      	str	r3, [r4, #24]
    bae2:	6063      	str	r3, [r4, #4]
    bae4:	89a3      	ldrh	r3, [r4, #12]
    bae6:	061b      	lsls	r3, r3, #24
    bae8:	d503      	bpl.n	baf2 <setvbuf+0x6e>
    baea:	6921      	ldr	r1, [r4, #16]
    baec:	0030      	movs	r0, r6
    baee:	f7ff ff05 	bl	b8fc <_free_r>
    baf2:	89a3      	ldrh	r3, [r4, #12]
    baf4:	4a36      	ldr	r2, [pc, #216]	; (bbd0 <setvbuf+0x14c>)
    baf6:	4013      	ands	r3, r2
    baf8:	81a3      	strh	r3, [r4, #12]
    bafa:	9b00      	ldr	r3, [sp, #0]
    bafc:	2b02      	cmp	r3, #2
    bafe:	d05a      	beq.n	bbb6 <setvbuf+0x132>
    bb00:	ab03      	add	r3, sp, #12
    bb02:	aa02      	add	r2, sp, #8
    bb04:	0021      	movs	r1, r4
    bb06:	0030      	movs	r0, r6
    bb08:	f000 fa30 	bl	bf6c <__swhatbuf_r>
    bb0c:	89a3      	ldrh	r3, [r4, #12]
    bb0e:	4318      	orrs	r0, r3
    bb10:	81a0      	strh	r0, [r4, #12]
    bb12:	2d00      	cmp	r5, #0
    bb14:	d124      	bne.n	bb60 <setvbuf+0xdc>
    bb16:	9d02      	ldr	r5, [sp, #8]
    bb18:	0028      	movs	r0, r5
    bb1a:	f7ff fed3 	bl	b8c4 <malloc>
    bb1e:	9501      	str	r5, [sp, #4]
    bb20:	1e07      	subs	r7, r0, #0
    bb22:	d142      	bne.n	bbaa <setvbuf+0x126>
    bb24:	9b02      	ldr	r3, [sp, #8]
    bb26:	9301      	str	r3, [sp, #4]
    bb28:	42ab      	cmp	r3, r5
    bb2a:	d139      	bne.n	bba0 <setvbuf+0x11c>
    bb2c:	2001      	movs	r0, #1
    bb2e:	4240      	negs	r0, r0
    bb30:	2302      	movs	r3, #2
    bb32:	89a2      	ldrh	r2, [r4, #12]
    bb34:	4313      	orrs	r3, r2
    bb36:	81a3      	strh	r3, [r4, #12]
    bb38:	2300      	movs	r3, #0
    bb3a:	60a3      	str	r3, [r4, #8]
    bb3c:	0023      	movs	r3, r4
    bb3e:	3347      	adds	r3, #71	; 0x47
    bb40:	6023      	str	r3, [r4, #0]
    bb42:	6123      	str	r3, [r4, #16]
    bb44:	2301      	movs	r3, #1
    bb46:	6163      	str	r3, [r4, #20]
    bb48:	b005      	add	sp, #20
    bb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb4c:	4b21      	ldr	r3, [pc, #132]	; (bbd4 <setvbuf+0x150>)
    bb4e:	429c      	cmp	r4, r3
    bb50:	d101      	bne.n	bb56 <setvbuf+0xd2>
    bb52:	68b4      	ldr	r4, [r6, #8]
    bb54:	e7aa      	b.n	baac <setvbuf+0x28>
    bb56:	4b20      	ldr	r3, [pc, #128]	; (bbd8 <setvbuf+0x154>)
    bb58:	429c      	cmp	r4, r3
    bb5a:	d1a7      	bne.n	baac <setvbuf+0x28>
    bb5c:	68f4      	ldr	r4, [r6, #12]
    bb5e:	e7a5      	b.n	baac <setvbuf+0x28>
    bb60:	2f00      	cmp	r7, #0
    bb62:	d0d9      	beq.n	bb18 <setvbuf+0x94>
    bb64:	69b3      	ldr	r3, [r6, #24]
    bb66:	2b00      	cmp	r3, #0
    bb68:	d102      	bne.n	bb70 <setvbuf+0xec>
    bb6a:	0030      	movs	r0, r6
    bb6c:	f000 f968 	bl	be40 <__sinit>
    bb70:	9b00      	ldr	r3, [sp, #0]
    bb72:	2b01      	cmp	r3, #1
    bb74:	d103      	bne.n	bb7e <setvbuf+0xfa>
    bb76:	89a3      	ldrh	r3, [r4, #12]
    bb78:	9a00      	ldr	r2, [sp, #0]
    bb7a:	431a      	orrs	r2, r3
    bb7c:	81a2      	strh	r2, [r4, #12]
    bb7e:	2008      	movs	r0, #8
    bb80:	89a3      	ldrh	r3, [r4, #12]
    bb82:	6027      	str	r7, [r4, #0]
    bb84:	6127      	str	r7, [r4, #16]
    bb86:	6165      	str	r5, [r4, #20]
    bb88:	4018      	ands	r0, r3
    bb8a:	d018      	beq.n	bbbe <setvbuf+0x13a>
    bb8c:	2001      	movs	r0, #1
    bb8e:	4018      	ands	r0, r3
    bb90:	2300      	movs	r3, #0
    bb92:	4298      	cmp	r0, r3
    bb94:	d011      	beq.n	bbba <setvbuf+0x136>
    bb96:	426d      	negs	r5, r5
    bb98:	60a3      	str	r3, [r4, #8]
    bb9a:	61a5      	str	r5, [r4, #24]
    bb9c:	0018      	movs	r0, r3
    bb9e:	e7d3      	b.n	bb48 <setvbuf+0xc4>
    bba0:	9801      	ldr	r0, [sp, #4]
    bba2:	f7ff fe8f 	bl	b8c4 <malloc>
    bba6:	1e07      	subs	r7, r0, #0
    bba8:	d0c0      	beq.n	bb2c <setvbuf+0xa8>
    bbaa:	2380      	movs	r3, #128	; 0x80
    bbac:	89a2      	ldrh	r2, [r4, #12]
    bbae:	9d01      	ldr	r5, [sp, #4]
    bbb0:	4313      	orrs	r3, r2
    bbb2:	81a3      	strh	r3, [r4, #12]
    bbb4:	e7d6      	b.n	bb64 <setvbuf+0xe0>
    bbb6:	2000      	movs	r0, #0
    bbb8:	e7ba      	b.n	bb30 <setvbuf+0xac>
    bbba:	60a5      	str	r5, [r4, #8]
    bbbc:	e7c4      	b.n	bb48 <setvbuf+0xc4>
    bbbe:	60a0      	str	r0, [r4, #8]
    bbc0:	e7c2      	b.n	bb48 <setvbuf+0xc4>
    bbc2:	2001      	movs	r0, #1
    bbc4:	4240      	negs	r0, r0
    bbc6:	e7bf      	b.n	bb48 <setvbuf+0xc4>
    bbc8:	20000078 	.word	0x20000078
    bbcc:	0000d364 	.word	0x0000d364
    bbd0:	fffff35c 	.word	0xfffff35c
    bbd4:	0000d384 	.word	0x0000d384
    bbd8:	0000d344 	.word	0x0000d344

0000bbdc <sniprintf>:
    bbdc:	b40c      	push	{r2, r3}
    bbde:	b530      	push	{r4, r5, lr}
    bbe0:	4b16      	ldr	r3, [pc, #88]	; (bc3c <sniprintf+0x60>)
    bbe2:	b09d      	sub	sp, #116	; 0x74
    bbe4:	1e0c      	subs	r4, r1, #0
    bbe6:	681d      	ldr	r5, [r3, #0]
    bbe8:	da08      	bge.n	bbfc <sniprintf+0x20>
    bbea:	238b      	movs	r3, #139	; 0x8b
    bbec:	2001      	movs	r0, #1
    bbee:	602b      	str	r3, [r5, #0]
    bbf0:	4240      	negs	r0, r0
    bbf2:	b01d      	add	sp, #116	; 0x74
    bbf4:	bc30      	pop	{r4, r5}
    bbf6:	bc08      	pop	{r3}
    bbf8:	b002      	add	sp, #8
    bbfa:	4718      	bx	r3
    bbfc:	2382      	movs	r3, #130	; 0x82
    bbfe:	a902      	add	r1, sp, #8
    bc00:	009b      	lsls	r3, r3, #2
    bc02:	818b      	strh	r3, [r1, #12]
    bc04:	2300      	movs	r3, #0
    bc06:	9002      	str	r0, [sp, #8]
    bc08:	6108      	str	r0, [r1, #16]
    bc0a:	429c      	cmp	r4, r3
    bc0c:	d000      	beq.n	bc10 <sniprintf+0x34>
    bc0e:	1e63      	subs	r3, r4, #1
    bc10:	608b      	str	r3, [r1, #8]
    bc12:	614b      	str	r3, [r1, #20]
    bc14:	2301      	movs	r3, #1
    bc16:	425b      	negs	r3, r3
    bc18:	81cb      	strh	r3, [r1, #14]
    bc1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    bc1c:	ab21      	add	r3, sp, #132	; 0x84
    bc1e:	0028      	movs	r0, r5
    bc20:	9301      	str	r3, [sp, #4]
    bc22:	f000 fa2f 	bl	c084 <_svfiprintf_r>
    bc26:	1c43      	adds	r3, r0, #1
    bc28:	da01      	bge.n	bc2e <sniprintf+0x52>
    bc2a:	238b      	movs	r3, #139	; 0x8b
    bc2c:	602b      	str	r3, [r5, #0]
    bc2e:	2c00      	cmp	r4, #0
    bc30:	d0df      	beq.n	bbf2 <sniprintf+0x16>
    bc32:	2300      	movs	r3, #0
    bc34:	9a02      	ldr	r2, [sp, #8]
    bc36:	7013      	strb	r3, [r2, #0]
    bc38:	e7db      	b.n	bbf2 <sniprintf+0x16>
    bc3a:	46c0      	nop			; (mov r8, r8)
    bc3c:	20000078 	.word	0x20000078

0000bc40 <strlen>:
    bc40:	2300      	movs	r3, #0
    bc42:	5cc2      	ldrb	r2, [r0, r3]
    bc44:	3301      	adds	r3, #1
    bc46:	2a00      	cmp	r2, #0
    bc48:	d1fb      	bne.n	bc42 <strlen+0x2>
    bc4a:	1e58      	subs	r0, r3, #1
    bc4c:	4770      	bx	lr
	...

0000bc50 <__sflush_r>:
    bc50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bc52:	898a      	ldrh	r2, [r1, #12]
    bc54:	0005      	movs	r5, r0
    bc56:	000c      	movs	r4, r1
    bc58:	0713      	lsls	r3, r2, #28
    bc5a:	d460      	bmi.n	bd1e <__sflush_r+0xce>
    bc5c:	684b      	ldr	r3, [r1, #4]
    bc5e:	2b00      	cmp	r3, #0
    bc60:	dc04      	bgt.n	bc6c <__sflush_r+0x1c>
    bc62:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    bc64:	2b00      	cmp	r3, #0
    bc66:	dc01      	bgt.n	bc6c <__sflush_r+0x1c>
    bc68:	2000      	movs	r0, #0
    bc6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bc6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    bc6e:	2f00      	cmp	r7, #0
    bc70:	d0fa      	beq.n	bc68 <__sflush_r+0x18>
    bc72:	2300      	movs	r3, #0
    bc74:	682e      	ldr	r6, [r5, #0]
    bc76:	602b      	str	r3, [r5, #0]
    bc78:	2380      	movs	r3, #128	; 0x80
    bc7a:	015b      	lsls	r3, r3, #5
    bc7c:	401a      	ands	r2, r3
    bc7e:	d034      	beq.n	bcea <__sflush_r+0x9a>
    bc80:	6d60      	ldr	r0, [r4, #84]	; 0x54
    bc82:	89a3      	ldrh	r3, [r4, #12]
    bc84:	075b      	lsls	r3, r3, #29
    bc86:	d506      	bpl.n	bc96 <__sflush_r+0x46>
    bc88:	6863      	ldr	r3, [r4, #4]
    bc8a:	1ac0      	subs	r0, r0, r3
    bc8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bc8e:	2b00      	cmp	r3, #0
    bc90:	d001      	beq.n	bc96 <__sflush_r+0x46>
    bc92:	6c23      	ldr	r3, [r4, #64]	; 0x40
    bc94:	1ac0      	subs	r0, r0, r3
    bc96:	0002      	movs	r2, r0
    bc98:	6a21      	ldr	r1, [r4, #32]
    bc9a:	2300      	movs	r3, #0
    bc9c:	0028      	movs	r0, r5
    bc9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    bca0:	47b8      	blx	r7
    bca2:	89a1      	ldrh	r1, [r4, #12]
    bca4:	1c43      	adds	r3, r0, #1
    bca6:	d106      	bne.n	bcb6 <__sflush_r+0x66>
    bca8:	682b      	ldr	r3, [r5, #0]
    bcaa:	2b1d      	cmp	r3, #29
    bcac:	d831      	bhi.n	bd12 <__sflush_r+0xc2>
    bcae:	4a2c      	ldr	r2, [pc, #176]	; (bd60 <__sflush_r+0x110>)
    bcb0:	40da      	lsrs	r2, r3
    bcb2:	07d3      	lsls	r3, r2, #31
    bcb4:	d52d      	bpl.n	bd12 <__sflush_r+0xc2>
    bcb6:	2300      	movs	r3, #0
    bcb8:	6063      	str	r3, [r4, #4]
    bcba:	6923      	ldr	r3, [r4, #16]
    bcbc:	6023      	str	r3, [r4, #0]
    bcbe:	04cb      	lsls	r3, r1, #19
    bcc0:	d505      	bpl.n	bcce <__sflush_r+0x7e>
    bcc2:	1c43      	adds	r3, r0, #1
    bcc4:	d102      	bne.n	bccc <__sflush_r+0x7c>
    bcc6:	682b      	ldr	r3, [r5, #0]
    bcc8:	2b00      	cmp	r3, #0
    bcca:	d100      	bne.n	bcce <__sflush_r+0x7e>
    bccc:	6560      	str	r0, [r4, #84]	; 0x54
    bcce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bcd0:	602e      	str	r6, [r5, #0]
    bcd2:	2900      	cmp	r1, #0
    bcd4:	d0c8      	beq.n	bc68 <__sflush_r+0x18>
    bcd6:	0023      	movs	r3, r4
    bcd8:	3344      	adds	r3, #68	; 0x44
    bcda:	4299      	cmp	r1, r3
    bcdc:	d002      	beq.n	bce4 <__sflush_r+0x94>
    bcde:	0028      	movs	r0, r5
    bce0:	f7ff fe0c 	bl	b8fc <_free_r>
    bce4:	2000      	movs	r0, #0
    bce6:	6360      	str	r0, [r4, #52]	; 0x34
    bce8:	e7bf      	b.n	bc6a <__sflush_r+0x1a>
    bcea:	2301      	movs	r3, #1
    bcec:	6a21      	ldr	r1, [r4, #32]
    bcee:	0028      	movs	r0, r5
    bcf0:	47b8      	blx	r7
    bcf2:	1c43      	adds	r3, r0, #1
    bcf4:	d1c5      	bne.n	bc82 <__sflush_r+0x32>
    bcf6:	682b      	ldr	r3, [r5, #0]
    bcf8:	2b00      	cmp	r3, #0
    bcfa:	d0c2      	beq.n	bc82 <__sflush_r+0x32>
    bcfc:	2b1d      	cmp	r3, #29
    bcfe:	d001      	beq.n	bd04 <__sflush_r+0xb4>
    bd00:	2b16      	cmp	r3, #22
    bd02:	d101      	bne.n	bd08 <__sflush_r+0xb8>
    bd04:	602e      	str	r6, [r5, #0]
    bd06:	e7af      	b.n	bc68 <__sflush_r+0x18>
    bd08:	2340      	movs	r3, #64	; 0x40
    bd0a:	89a2      	ldrh	r2, [r4, #12]
    bd0c:	4313      	orrs	r3, r2
    bd0e:	81a3      	strh	r3, [r4, #12]
    bd10:	e7ab      	b.n	bc6a <__sflush_r+0x1a>
    bd12:	2340      	movs	r3, #64	; 0x40
    bd14:	430b      	orrs	r3, r1
    bd16:	2001      	movs	r0, #1
    bd18:	81a3      	strh	r3, [r4, #12]
    bd1a:	4240      	negs	r0, r0
    bd1c:	e7a5      	b.n	bc6a <__sflush_r+0x1a>
    bd1e:	690f      	ldr	r7, [r1, #16]
    bd20:	2f00      	cmp	r7, #0
    bd22:	d0a1      	beq.n	bc68 <__sflush_r+0x18>
    bd24:	680b      	ldr	r3, [r1, #0]
    bd26:	600f      	str	r7, [r1, #0]
    bd28:	1bdb      	subs	r3, r3, r7
    bd2a:	9301      	str	r3, [sp, #4]
    bd2c:	2300      	movs	r3, #0
    bd2e:	0792      	lsls	r2, r2, #30
    bd30:	d100      	bne.n	bd34 <__sflush_r+0xe4>
    bd32:	694b      	ldr	r3, [r1, #20]
    bd34:	60a3      	str	r3, [r4, #8]
    bd36:	9b01      	ldr	r3, [sp, #4]
    bd38:	2b00      	cmp	r3, #0
    bd3a:	dc00      	bgt.n	bd3e <__sflush_r+0xee>
    bd3c:	e794      	b.n	bc68 <__sflush_r+0x18>
    bd3e:	9b01      	ldr	r3, [sp, #4]
    bd40:	003a      	movs	r2, r7
    bd42:	6a21      	ldr	r1, [r4, #32]
    bd44:	0028      	movs	r0, r5
    bd46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    bd48:	47b0      	blx	r6
    bd4a:	2800      	cmp	r0, #0
    bd4c:	dc03      	bgt.n	bd56 <__sflush_r+0x106>
    bd4e:	2340      	movs	r3, #64	; 0x40
    bd50:	89a2      	ldrh	r2, [r4, #12]
    bd52:	4313      	orrs	r3, r2
    bd54:	e7df      	b.n	bd16 <__sflush_r+0xc6>
    bd56:	9b01      	ldr	r3, [sp, #4]
    bd58:	183f      	adds	r7, r7, r0
    bd5a:	1a1b      	subs	r3, r3, r0
    bd5c:	9301      	str	r3, [sp, #4]
    bd5e:	e7ea      	b.n	bd36 <__sflush_r+0xe6>
    bd60:	20400001 	.word	0x20400001

0000bd64 <_fflush_r>:
    bd64:	690b      	ldr	r3, [r1, #16]
    bd66:	b570      	push	{r4, r5, r6, lr}
    bd68:	0005      	movs	r5, r0
    bd6a:	000c      	movs	r4, r1
    bd6c:	2b00      	cmp	r3, #0
    bd6e:	d101      	bne.n	bd74 <_fflush_r+0x10>
    bd70:	2000      	movs	r0, #0
    bd72:	bd70      	pop	{r4, r5, r6, pc}
    bd74:	2800      	cmp	r0, #0
    bd76:	d004      	beq.n	bd82 <_fflush_r+0x1e>
    bd78:	6983      	ldr	r3, [r0, #24]
    bd7a:	2b00      	cmp	r3, #0
    bd7c:	d101      	bne.n	bd82 <_fflush_r+0x1e>
    bd7e:	f000 f85f 	bl	be40 <__sinit>
    bd82:	4b0b      	ldr	r3, [pc, #44]	; (bdb0 <_fflush_r+0x4c>)
    bd84:	429c      	cmp	r4, r3
    bd86:	d109      	bne.n	bd9c <_fflush_r+0x38>
    bd88:	686c      	ldr	r4, [r5, #4]
    bd8a:	220c      	movs	r2, #12
    bd8c:	5ea3      	ldrsh	r3, [r4, r2]
    bd8e:	2b00      	cmp	r3, #0
    bd90:	d0ee      	beq.n	bd70 <_fflush_r+0xc>
    bd92:	0021      	movs	r1, r4
    bd94:	0028      	movs	r0, r5
    bd96:	f7ff ff5b 	bl	bc50 <__sflush_r>
    bd9a:	e7ea      	b.n	bd72 <_fflush_r+0xe>
    bd9c:	4b05      	ldr	r3, [pc, #20]	; (bdb4 <_fflush_r+0x50>)
    bd9e:	429c      	cmp	r4, r3
    bda0:	d101      	bne.n	bda6 <_fflush_r+0x42>
    bda2:	68ac      	ldr	r4, [r5, #8]
    bda4:	e7f1      	b.n	bd8a <_fflush_r+0x26>
    bda6:	4b04      	ldr	r3, [pc, #16]	; (bdb8 <_fflush_r+0x54>)
    bda8:	429c      	cmp	r4, r3
    bdaa:	d1ee      	bne.n	bd8a <_fflush_r+0x26>
    bdac:	68ec      	ldr	r4, [r5, #12]
    bdae:	e7ec      	b.n	bd8a <_fflush_r+0x26>
    bdb0:	0000d364 	.word	0x0000d364
    bdb4:	0000d384 	.word	0x0000d384
    bdb8:	0000d344 	.word	0x0000d344

0000bdbc <_cleanup_r>:
    bdbc:	b510      	push	{r4, lr}
    bdbe:	4902      	ldr	r1, [pc, #8]	; (bdc8 <_cleanup_r+0xc>)
    bdc0:	f000 f8b2 	bl	bf28 <_fwalk_reent>
    bdc4:	bd10      	pop	{r4, pc}
    bdc6:	46c0      	nop			; (mov r8, r8)
    bdc8:	0000bd65 	.word	0x0000bd65

0000bdcc <std.isra.0>:
    bdcc:	2300      	movs	r3, #0
    bdce:	b510      	push	{r4, lr}
    bdd0:	0004      	movs	r4, r0
    bdd2:	6003      	str	r3, [r0, #0]
    bdd4:	6043      	str	r3, [r0, #4]
    bdd6:	6083      	str	r3, [r0, #8]
    bdd8:	8181      	strh	r1, [r0, #12]
    bdda:	6643      	str	r3, [r0, #100]	; 0x64
    bddc:	81c2      	strh	r2, [r0, #14]
    bdde:	6103      	str	r3, [r0, #16]
    bde0:	6143      	str	r3, [r0, #20]
    bde2:	6183      	str	r3, [r0, #24]
    bde4:	0019      	movs	r1, r3
    bde6:	2208      	movs	r2, #8
    bde8:	305c      	adds	r0, #92	; 0x5c
    bdea:	f7ff fd7e 	bl	b8ea <memset>
    bdee:	4b05      	ldr	r3, [pc, #20]	; (be04 <std.isra.0+0x38>)
    bdf0:	6224      	str	r4, [r4, #32]
    bdf2:	6263      	str	r3, [r4, #36]	; 0x24
    bdf4:	4b04      	ldr	r3, [pc, #16]	; (be08 <std.isra.0+0x3c>)
    bdf6:	62a3      	str	r3, [r4, #40]	; 0x28
    bdf8:	4b04      	ldr	r3, [pc, #16]	; (be0c <std.isra.0+0x40>)
    bdfa:	62e3      	str	r3, [r4, #44]	; 0x2c
    bdfc:	4b04      	ldr	r3, [pc, #16]	; (be10 <std.isra.0+0x44>)
    bdfe:	6323      	str	r3, [r4, #48]	; 0x30
    be00:	bd10      	pop	{r4, pc}
    be02:	46c0      	nop			; (mov r8, r8)
    be04:	0000c59d 	.word	0x0000c59d
    be08:	0000c5c5 	.word	0x0000c5c5
    be0c:	0000c5fd 	.word	0x0000c5fd
    be10:	0000c629 	.word	0x0000c629

0000be14 <__sfmoreglue>:
    be14:	b570      	push	{r4, r5, r6, lr}
    be16:	2568      	movs	r5, #104	; 0x68
    be18:	1e4a      	subs	r2, r1, #1
    be1a:	4355      	muls	r5, r2
    be1c:	000e      	movs	r6, r1
    be1e:	0029      	movs	r1, r5
    be20:	3174      	adds	r1, #116	; 0x74
    be22:	f7ff fdb5 	bl	b990 <_malloc_r>
    be26:	1e04      	subs	r4, r0, #0
    be28:	d008      	beq.n	be3c <__sfmoreglue+0x28>
    be2a:	2100      	movs	r1, #0
    be2c:	002a      	movs	r2, r5
    be2e:	6001      	str	r1, [r0, #0]
    be30:	6046      	str	r6, [r0, #4]
    be32:	300c      	adds	r0, #12
    be34:	60a0      	str	r0, [r4, #8]
    be36:	3268      	adds	r2, #104	; 0x68
    be38:	f7ff fd57 	bl	b8ea <memset>
    be3c:	0020      	movs	r0, r4
    be3e:	bd70      	pop	{r4, r5, r6, pc}

0000be40 <__sinit>:
    be40:	6983      	ldr	r3, [r0, #24]
    be42:	b513      	push	{r0, r1, r4, lr}
    be44:	0004      	movs	r4, r0
    be46:	2b00      	cmp	r3, #0
    be48:	d128      	bne.n	be9c <__sinit+0x5c>
    be4a:	6483      	str	r3, [r0, #72]	; 0x48
    be4c:	64c3      	str	r3, [r0, #76]	; 0x4c
    be4e:	6503      	str	r3, [r0, #80]	; 0x50
    be50:	4b13      	ldr	r3, [pc, #76]	; (bea0 <__sinit+0x60>)
    be52:	4a14      	ldr	r2, [pc, #80]	; (bea4 <__sinit+0x64>)
    be54:	681b      	ldr	r3, [r3, #0]
    be56:	6282      	str	r2, [r0, #40]	; 0x28
    be58:	9301      	str	r3, [sp, #4]
    be5a:	4298      	cmp	r0, r3
    be5c:	d101      	bne.n	be62 <__sinit+0x22>
    be5e:	2301      	movs	r3, #1
    be60:	6183      	str	r3, [r0, #24]
    be62:	0020      	movs	r0, r4
    be64:	f000 f820 	bl	bea8 <__sfp>
    be68:	6060      	str	r0, [r4, #4]
    be6a:	0020      	movs	r0, r4
    be6c:	f000 f81c 	bl	bea8 <__sfp>
    be70:	60a0      	str	r0, [r4, #8]
    be72:	0020      	movs	r0, r4
    be74:	f000 f818 	bl	bea8 <__sfp>
    be78:	2200      	movs	r2, #0
    be7a:	60e0      	str	r0, [r4, #12]
    be7c:	2104      	movs	r1, #4
    be7e:	6860      	ldr	r0, [r4, #4]
    be80:	f7ff ffa4 	bl	bdcc <std.isra.0>
    be84:	2201      	movs	r2, #1
    be86:	2109      	movs	r1, #9
    be88:	68a0      	ldr	r0, [r4, #8]
    be8a:	f7ff ff9f 	bl	bdcc <std.isra.0>
    be8e:	2202      	movs	r2, #2
    be90:	2112      	movs	r1, #18
    be92:	68e0      	ldr	r0, [r4, #12]
    be94:	f7ff ff9a 	bl	bdcc <std.isra.0>
    be98:	2301      	movs	r3, #1
    be9a:	61a3      	str	r3, [r4, #24]
    be9c:	bd13      	pop	{r0, r1, r4, pc}
    be9e:	46c0      	nop			; (mov r8, r8)
    bea0:	0000d340 	.word	0x0000d340
    bea4:	0000bdbd 	.word	0x0000bdbd

0000bea8 <__sfp>:
    bea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    beaa:	4b1e      	ldr	r3, [pc, #120]	; (bf24 <__sfp+0x7c>)
    beac:	0007      	movs	r7, r0
    beae:	681e      	ldr	r6, [r3, #0]
    beb0:	69b3      	ldr	r3, [r6, #24]
    beb2:	2b00      	cmp	r3, #0
    beb4:	d102      	bne.n	bebc <__sfp+0x14>
    beb6:	0030      	movs	r0, r6
    beb8:	f7ff ffc2 	bl	be40 <__sinit>
    bebc:	3648      	adds	r6, #72	; 0x48
    bebe:	68b4      	ldr	r4, [r6, #8]
    bec0:	6873      	ldr	r3, [r6, #4]
    bec2:	3b01      	subs	r3, #1
    bec4:	d504      	bpl.n	bed0 <__sfp+0x28>
    bec6:	6833      	ldr	r3, [r6, #0]
    bec8:	2b00      	cmp	r3, #0
    beca:	d007      	beq.n	bedc <__sfp+0x34>
    becc:	6836      	ldr	r6, [r6, #0]
    bece:	e7f6      	b.n	bebe <__sfp+0x16>
    bed0:	220c      	movs	r2, #12
    bed2:	5ea5      	ldrsh	r5, [r4, r2]
    bed4:	2d00      	cmp	r5, #0
    bed6:	d00d      	beq.n	bef4 <__sfp+0x4c>
    bed8:	3468      	adds	r4, #104	; 0x68
    beda:	e7f2      	b.n	bec2 <__sfp+0x1a>
    bedc:	2104      	movs	r1, #4
    bede:	0038      	movs	r0, r7
    bee0:	f7ff ff98 	bl	be14 <__sfmoreglue>
    bee4:	6030      	str	r0, [r6, #0]
    bee6:	2800      	cmp	r0, #0
    bee8:	d1f0      	bne.n	becc <__sfp+0x24>
    beea:	230c      	movs	r3, #12
    beec:	0004      	movs	r4, r0
    beee:	603b      	str	r3, [r7, #0]
    bef0:	0020      	movs	r0, r4
    bef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bef4:	2301      	movs	r3, #1
    bef6:	0020      	movs	r0, r4
    bef8:	425b      	negs	r3, r3
    befa:	81e3      	strh	r3, [r4, #14]
    befc:	3302      	adds	r3, #2
    befe:	81a3      	strh	r3, [r4, #12]
    bf00:	6665      	str	r5, [r4, #100]	; 0x64
    bf02:	6025      	str	r5, [r4, #0]
    bf04:	60a5      	str	r5, [r4, #8]
    bf06:	6065      	str	r5, [r4, #4]
    bf08:	6125      	str	r5, [r4, #16]
    bf0a:	6165      	str	r5, [r4, #20]
    bf0c:	61a5      	str	r5, [r4, #24]
    bf0e:	2208      	movs	r2, #8
    bf10:	0029      	movs	r1, r5
    bf12:	305c      	adds	r0, #92	; 0x5c
    bf14:	f7ff fce9 	bl	b8ea <memset>
    bf18:	6365      	str	r5, [r4, #52]	; 0x34
    bf1a:	63a5      	str	r5, [r4, #56]	; 0x38
    bf1c:	64a5      	str	r5, [r4, #72]	; 0x48
    bf1e:	64e5      	str	r5, [r4, #76]	; 0x4c
    bf20:	e7e6      	b.n	bef0 <__sfp+0x48>
    bf22:	46c0      	nop			; (mov r8, r8)
    bf24:	0000d340 	.word	0x0000d340

0000bf28 <_fwalk_reent>:
    bf28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bf2a:	0004      	movs	r4, r0
    bf2c:	0007      	movs	r7, r0
    bf2e:	2600      	movs	r6, #0
    bf30:	9101      	str	r1, [sp, #4]
    bf32:	3448      	adds	r4, #72	; 0x48
    bf34:	2c00      	cmp	r4, #0
    bf36:	d101      	bne.n	bf3c <_fwalk_reent+0x14>
    bf38:	0030      	movs	r0, r6
    bf3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bf3c:	6863      	ldr	r3, [r4, #4]
    bf3e:	68a5      	ldr	r5, [r4, #8]
    bf40:	9300      	str	r3, [sp, #0]
    bf42:	9b00      	ldr	r3, [sp, #0]
    bf44:	3b01      	subs	r3, #1
    bf46:	9300      	str	r3, [sp, #0]
    bf48:	d501      	bpl.n	bf4e <_fwalk_reent+0x26>
    bf4a:	6824      	ldr	r4, [r4, #0]
    bf4c:	e7f2      	b.n	bf34 <_fwalk_reent+0xc>
    bf4e:	89ab      	ldrh	r3, [r5, #12]
    bf50:	2b01      	cmp	r3, #1
    bf52:	d908      	bls.n	bf66 <_fwalk_reent+0x3e>
    bf54:	220e      	movs	r2, #14
    bf56:	5eab      	ldrsh	r3, [r5, r2]
    bf58:	3301      	adds	r3, #1
    bf5a:	d004      	beq.n	bf66 <_fwalk_reent+0x3e>
    bf5c:	0029      	movs	r1, r5
    bf5e:	0038      	movs	r0, r7
    bf60:	9b01      	ldr	r3, [sp, #4]
    bf62:	4798      	blx	r3
    bf64:	4306      	orrs	r6, r0
    bf66:	3568      	adds	r5, #104	; 0x68
    bf68:	e7eb      	b.n	bf42 <_fwalk_reent+0x1a>
	...

0000bf6c <__swhatbuf_r>:
    bf6c:	b570      	push	{r4, r5, r6, lr}
    bf6e:	000e      	movs	r6, r1
    bf70:	001d      	movs	r5, r3
    bf72:	230e      	movs	r3, #14
    bf74:	5ec9      	ldrsh	r1, [r1, r3]
    bf76:	b090      	sub	sp, #64	; 0x40
    bf78:	0014      	movs	r4, r2
    bf7a:	2900      	cmp	r1, #0
    bf7c:	da07      	bge.n	bf8e <__swhatbuf_r+0x22>
    bf7e:	2300      	movs	r3, #0
    bf80:	602b      	str	r3, [r5, #0]
    bf82:	89b3      	ldrh	r3, [r6, #12]
    bf84:	061b      	lsls	r3, r3, #24
    bf86:	d411      	bmi.n	bfac <__swhatbuf_r+0x40>
    bf88:	2380      	movs	r3, #128	; 0x80
    bf8a:	00db      	lsls	r3, r3, #3
    bf8c:	e00f      	b.n	bfae <__swhatbuf_r+0x42>
    bf8e:	aa01      	add	r2, sp, #4
    bf90:	f000 fb76 	bl	c680 <_fstat_r>
    bf94:	2800      	cmp	r0, #0
    bf96:	dbf2      	blt.n	bf7e <__swhatbuf_r+0x12>
    bf98:	22f0      	movs	r2, #240	; 0xf0
    bf9a:	9b02      	ldr	r3, [sp, #8]
    bf9c:	0212      	lsls	r2, r2, #8
    bf9e:	4013      	ands	r3, r2
    bfa0:	4a05      	ldr	r2, [pc, #20]	; (bfb8 <__swhatbuf_r+0x4c>)
    bfa2:	189b      	adds	r3, r3, r2
    bfa4:	425a      	negs	r2, r3
    bfa6:	4153      	adcs	r3, r2
    bfa8:	602b      	str	r3, [r5, #0]
    bfaa:	e7ed      	b.n	bf88 <__swhatbuf_r+0x1c>
    bfac:	2340      	movs	r3, #64	; 0x40
    bfae:	2000      	movs	r0, #0
    bfb0:	6023      	str	r3, [r4, #0]
    bfb2:	b010      	add	sp, #64	; 0x40
    bfb4:	bd70      	pop	{r4, r5, r6, pc}
    bfb6:	46c0      	nop			; (mov r8, r8)
    bfb8:	ffffe000 	.word	0xffffe000

0000bfbc <__malloc_lock>:
    bfbc:	4770      	bx	lr

0000bfbe <__malloc_unlock>:
    bfbe:	4770      	bx	lr

0000bfc0 <__ssputs_r>:
    bfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfc2:	688e      	ldr	r6, [r1, #8]
    bfc4:	b085      	sub	sp, #20
    bfc6:	0007      	movs	r7, r0
    bfc8:	000c      	movs	r4, r1
    bfca:	9203      	str	r2, [sp, #12]
    bfcc:	9301      	str	r3, [sp, #4]
    bfce:	429e      	cmp	r6, r3
    bfd0:	d839      	bhi.n	c046 <__ssputs_r+0x86>
    bfd2:	2390      	movs	r3, #144	; 0x90
    bfd4:	898a      	ldrh	r2, [r1, #12]
    bfd6:	00db      	lsls	r3, r3, #3
    bfd8:	421a      	tst	r2, r3
    bfda:	d034      	beq.n	c046 <__ssputs_r+0x86>
    bfdc:	2503      	movs	r5, #3
    bfde:	6909      	ldr	r1, [r1, #16]
    bfe0:	6823      	ldr	r3, [r4, #0]
    bfe2:	1a5b      	subs	r3, r3, r1
    bfe4:	9302      	str	r3, [sp, #8]
    bfe6:	6963      	ldr	r3, [r4, #20]
    bfe8:	9802      	ldr	r0, [sp, #8]
    bfea:	435d      	muls	r5, r3
    bfec:	0feb      	lsrs	r3, r5, #31
    bfee:	195d      	adds	r5, r3, r5
    bff0:	9b01      	ldr	r3, [sp, #4]
    bff2:	106d      	asrs	r5, r5, #1
    bff4:	3301      	adds	r3, #1
    bff6:	181b      	adds	r3, r3, r0
    bff8:	42ab      	cmp	r3, r5
    bffa:	d900      	bls.n	bffe <__ssputs_r+0x3e>
    bffc:	001d      	movs	r5, r3
    bffe:	0553      	lsls	r3, r2, #21
    c000:	d532      	bpl.n	c068 <__ssputs_r+0xa8>
    c002:	0029      	movs	r1, r5
    c004:	0038      	movs	r0, r7
    c006:	f7ff fcc3 	bl	b990 <_malloc_r>
    c00a:	1e06      	subs	r6, r0, #0
    c00c:	d109      	bne.n	c022 <__ssputs_r+0x62>
    c00e:	230c      	movs	r3, #12
    c010:	603b      	str	r3, [r7, #0]
    c012:	2340      	movs	r3, #64	; 0x40
    c014:	2001      	movs	r0, #1
    c016:	89a2      	ldrh	r2, [r4, #12]
    c018:	4240      	negs	r0, r0
    c01a:	4313      	orrs	r3, r2
    c01c:	81a3      	strh	r3, [r4, #12]
    c01e:	b005      	add	sp, #20
    c020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c022:	9a02      	ldr	r2, [sp, #8]
    c024:	6921      	ldr	r1, [r4, #16]
    c026:	f7ff fc57 	bl	b8d8 <memcpy>
    c02a:	89a3      	ldrh	r3, [r4, #12]
    c02c:	4a14      	ldr	r2, [pc, #80]	; (c080 <__ssputs_r+0xc0>)
    c02e:	401a      	ands	r2, r3
    c030:	2380      	movs	r3, #128	; 0x80
    c032:	4313      	orrs	r3, r2
    c034:	81a3      	strh	r3, [r4, #12]
    c036:	9b02      	ldr	r3, [sp, #8]
    c038:	6126      	str	r6, [r4, #16]
    c03a:	18f6      	adds	r6, r6, r3
    c03c:	6026      	str	r6, [r4, #0]
    c03e:	6165      	str	r5, [r4, #20]
    c040:	9e01      	ldr	r6, [sp, #4]
    c042:	1aed      	subs	r5, r5, r3
    c044:	60a5      	str	r5, [r4, #8]
    c046:	9b01      	ldr	r3, [sp, #4]
    c048:	42b3      	cmp	r3, r6
    c04a:	d200      	bcs.n	c04e <__ssputs_r+0x8e>
    c04c:	001e      	movs	r6, r3
    c04e:	0032      	movs	r2, r6
    c050:	9903      	ldr	r1, [sp, #12]
    c052:	6820      	ldr	r0, [r4, #0]
    c054:	f000 fb45 	bl	c6e2 <memmove>
    c058:	68a3      	ldr	r3, [r4, #8]
    c05a:	2000      	movs	r0, #0
    c05c:	1b9b      	subs	r3, r3, r6
    c05e:	60a3      	str	r3, [r4, #8]
    c060:	6823      	ldr	r3, [r4, #0]
    c062:	199e      	adds	r6, r3, r6
    c064:	6026      	str	r6, [r4, #0]
    c066:	e7da      	b.n	c01e <__ssputs_r+0x5e>
    c068:	002a      	movs	r2, r5
    c06a:	0038      	movs	r0, r7
    c06c:	f000 fb4b 	bl	c706 <_realloc_r>
    c070:	1e06      	subs	r6, r0, #0
    c072:	d1e0      	bne.n	c036 <__ssputs_r+0x76>
    c074:	6921      	ldr	r1, [r4, #16]
    c076:	0038      	movs	r0, r7
    c078:	f7ff fc40 	bl	b8fc <_free_r>
    c07c:	e7c7      	b.n	c00e <__ssputs_r+0x4e>
    c07e:	46c0      	nop			; (mov r8, r8)
    c080:	fffffb7f 	.word	0xfffffb7f

0000c084 <_svfiprintf_r>:
    c084:	b5f0      	push	{r4, r5, r6, r7, lr}
    c086:	b09f      	sub	sp, #124	; 0x7c
    c088:	9002      	str	r0, [sp, #8]
    c08a:	9305      	str	r3, [sp, #20]
    c08c:	898b      	ldrh	r3, [r1, #12]
    c08e:	000f      	movs	r7, r1
    c090:	0016      	movs	r6, r2
    c092:	061b      	lsls	r3, r3, #24
    c094:	d511      	bpl.n	c0ba <_svfiprintf_r+0x36>
    c096:	690b      	ldr	r3, [r1, #16]
    c098:	2b00      	cmp	r3, #0
    c09a:	d10e      	bne.n	c0ba <_svfiprintf_r+0x36>
    c09c:	2140      	movs	r1, #64	; 0x40
    c09e:	f7ff fc77 	bl	b990 <_malloc_r>
    c0a2:	6038      	str	r0, [r7, #0]
    c0a4:	6138      	str	r0, [r7, #16]
    c0a6:	2800      	cmp	r0, #0
    c0a8:	d105      	bne.n	c0b6 <_svfiprintf_r+0x32>
    c0aa:	230c      	movs	r3, #12
    c0ac:	9a02      	ldr	r2, [sp, #8]
    c0ae:	3801      	subs	r0, #1
    c0b0:	6013      	str	r3, [r2, #0]
    c0b2:	b01f      	add	sp, #124	; 0x7c
    c0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0b6:	2340      	movs	r3, #64	; 0x40
    c0b8:	617b      	str	r3, [r7, #20]
    c0ba:	2300      	movs	r3, #0
    c0bc:	ad06      	add	r5, sp, #24
    c0be:	616b      	str	r3, [r5, #20]
    c0c0:	3320      	adds	r3, #32
    c0c2:	766b      	strb	r3, [r5, #25]
    c0c4:	3310      	adds	r3, #16
    c0c6:	76ab      	strb	r3, [r5, #26]
    c0c8:	0034      	movs	r4, r6
    c0ca:	7823      	ldrb	r3, [r4, #0]
    c0cc:	2b00      	cmp	r3, #0
    c0ce:	d147      	bne.n	c160 <_svfiprintf_r+0xdc>
    c0d0:	1ba3      	subs	r3, r4, r6
    c0d2:	9304      	str	r3, [sp, #16]
    c0d4:	d00d      	beq.n	c0f2 <_svfiprintf_r+0x6e>
    c0d6:	1ba3      	subs	r3, r4, r6
    c0d8:	0032      	movs	r2, r6
    c0da:	0039      	movs	r1, r7
    c0dc:	9802      	ldr	r0, [sp, #8]
    c0de:	f7ff ff6f 	bl	bfc0 <__ssputs_r>
    c0e2:	1c43      	adds	r3, r0, #1
    c0e4:	d100      	bne.n	c0e8 <_svfiprintf_r+0x64>
    c0e6:	e0b5      	b.n	c254 <_svfiprintf_r+0x1d0>
    c0e8:	696a      	ldr	r2, [r5, #20]
    c0ea:	9b04      	ldr	r3, [sp, #16]
    c0ec:	4694      	mov	ip, r2
    c0ee:	4463      	add	r3, ip
    c0f0:	616b      	str	r3, [r5, #20]
    c0f2:	7823      	ldrb	r3, [r4, #0]
    c0f4:	2b00      	cmp	r3, #0
    c0f6:	d100      	bne.n	c0fa <_svfiprintf_r+0x76>
    c0f8:	e0ac      	b.n	c254 <_svfiprintf_r+0x1d0>
    c0fa:	2201      	movs	r2, #1
    c0fc:	2300      	movs	r3, #0
    c0fe:	4252      	negs	r2, r2
    c100:	606a      	str	r2, [r5, #4]
    c102:	a902      	add	r1, sp, #8
    c104:	3254      	adds	r2, #84	; 0x54
    c106:	1852      	adds	r2, r2, r1
    c108:	3401      	adds	r4, #1
    c10a:	602b      	str	r3, [r5, #0]
    c10c:	60eb      	str	r3, [r5, #12]
    c10e:	60ab      	str	r3, [r5, #8]
    c110:	7013      	strb	r3, [r2, #0]
    c112:	65ab      	str	r3, [r5, #88]	; 0x58
    c114:	4e58      	ldr	r6, [pc, #352]	; (c278 <_svfiprintf_r+0x1f4>)
    c116:	2205      	movs	r2, #5
    c118:	7821      	ldrb	r1, [r4, #0]
    c11a:	0030      	movs	r0, r6
    c11c:	f000 fad6 	bl	c6cc <memchr>
    c120:	1c62      	adds	r2, r4, #1
    c122:	2800      	cmp	r0, #0
    c124:	d120      	bne.n	c168 <_svfiprintf_r+0xe4>
    c126:	6829      	ldr	r1, [r5, #0]
    c128:	06cb      	lsls	r3, r1, #27
    c12a:	d504      	bpl.n	c136 <_svfiprintf_r+0xb2>
    c12c:	2353      	movs	r3, #83	; 0x53
    c12e:	ae02      	add	r6, sp, #8
    c130:	3020      	adds	r0, #32
    c132:	199b      	adds	r3, r3, r6
    c134:	7018      	strb	r0, [r3, #0]
    c136:	070b      	lsls	r3, r1, #28
    c138:	d504      	bpl.n	c144 <_svfiprintf_r+0xc0>
    c13a:	2353      	movs	r3, #83	; 0x53
    c13c:	202b      	movs	r0, #43	; 0x2b
    c13e:	ae02      	add	r6, sp, #8
    c140:	199b      	adds	r3, r3, r6
    c142:	7018      	strb	r0, [r3, #0]
    c144:	7823      	ldrb	r3, [r4, #0]
    c146:	2b2a      	cmp	r3, #42	; 0x2a
    c148:	d016      	beq.n	c178 <_svfiprintf_r+0xf4>
    c14a:	2000      	movs	r0, #0
    c14c:	210a      	movs	r1, #10
    c14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c150:	7822      	ldrb	r2, [r4, #0]
    c152:	3a30      	subs	r2, #48	; 0x30
    c154:	2a09      	cmp	r2, #9
    c156:	d955      	bls.n	c204 <_svfiprintf_r+0x180>
    c158:	2800      	cmp	r0, #0
    c15a:	d015      	beq.n	c188 <_svfiprintf_r+0x104>
    c15c:	9309      	str	r3, [sp, #36]	; 0x24
    c15e:	e013      	b.n	c188 <_svfiprintf_r+0x104>
    c160:	2b25      	cmp	r3, #37	; 0x25
    c162:	d0b5      	beq.n	c0d0 <_svfiprintf_r+0x4c>
    c164:	3401      	adds	r4, #1
    c166:	e7b0      	b.n	c0ca <_svfiprintf_r+0x46>
    c168:	2301      	movs	r3, #1
    c16a:	1b80      	subs	r0, r0, r6
    c16c:	4083      	lsls	r3, r0
    c16e:	6829      	ldr	r1, [r5, #0]
    c170:	0014      	movs	r4, r2
    c172:	430b      	orrs	r3, r1
    c174:	602b      	str	r3, [r5, #0]
    c176:	e7cd      	b.n	c114 <_svfiprintf_r+0x90>
    c178:	9b05      	ldr	r3, [sp, #20]
    c17a:	1d18      	adds	r0, r3, #4
    c17c:	681b      	ldr	r3, [r3, #0]
    c17e:	9005      	str	r0, [sp, #20]
    c180:	2b00      	cmp	r3, #0
    c182:	db39      	blt.n	c1f8 <_svfiprintf_r+0x174>
    c184:	9309      	str	r3, [sp, #36]	; 0x24
    c186:	0014      	movs	r4, r2
    c188:	7823      	ldrb	r3, [r4, #0]
    c18a:	2b2e      	cmp	r3, #46	; 0x2e
    c18c:	d10b      	bne.n	c1a6 <_svfiprintf_r+0x122>
    c18e:	7863      	ldrb	r3, [r4, #1]
    c190:	1c62      	adds	r2, r4, #1
    c192:	2b2a      	cmp	r3, #42	; 0x2a
    c194:	d13e      	bne.n	c214 <_svfiprintf_r+0x190>
    c196:	9b05      	ldr	r3, [sp, #20]
    c198:	3402      	adds	r4, #2
    c19a:	1d1a      	adds	r2, r3, #4
    c19c:	681b      	ldr	r3, [r3, #0]
    c19e:	9205      	str	r2, [sp, #20]
    c1a0:	2b00      	cmp	r3, #0
    c1a2:	db34      	blt.n	c20e <_svfiprintf_r+0x18a>
    c1a4:	9307      	str	r3, [sp, #28]
    c1a6:	4e35      	ldr	r6, [pc, #212]	; (c27c <_svfiprintf_r+0x1f8>)
    c1a8:	7821      	ldrb	r1, [r4, #0]
    c1aa:	2203      	movs	r2, #3
    c1ac:	0030      	movs	r0, r6
    c1ae:	f000 fa8d 	bl	c6cc <memchr>
    c1b2:	2800      	cmp	r0, #0
    c1b4:	d006      	beq.n	c1c4 <_svfiprintf_r+0x140>
    c1b6:	2340      	movs	r3, #64	; 0x40
    c1b8:	1b80      	subs	r0, r0, r6
    c1ba:	4083      	lsls	r3, r0
    c1bc:	682a      	ldr	r2, [r5, #0]
    c1be:	3401      	adds	r4, #1
    c1c0:	4313      	orrs	r3, r2
    c1c2:	602b      	str	r3, [r5, #0]
    c1c4:	7821      	ldrb	r1, [r4, #0]
    c1c6:	2206      	movs	r2, #6
    c1c8:	482d      	ldr	r0, [pc, #180]	; (c280 <_svfiprintf_r+0x1fc>)
    c1ca:	1c66      	adds	r6, r4, #1
    c1cc:	7629      	strb	r1, [r5, #24]
    c1ce:	f000 fa7d 	bl	c6cc <memchr>
    c1d2:	2800      	cmp	r0, #0
    c1d4:	d046      	beq.n	c264 <_svfiprintf_r+0x1e0>
    c1d6:	4b2b      	ldr	r3, [pc, #172]	; (c284 <_svfiprintf_r+0x200>)
    c1d8:	2b00      	cmp	r3, #0
    c1da:	d12f      	bne.n	c23c <_svfiprintf_r+0x1b8>
    c1dc:	6829      	ldr	r1, [r5, #0]
    c1de:	9b05      	ldr	r3, [sp, #20]
    c1e0:	2207      	movs	r2, #7
    c1e2:	05c9      	lsls	r1, r1, #23
    c1e4:	d528      	bpl.n	c238 <_svfiprintf_r+0x1b4>
    c1e6:	189b      	adds	r3, r3, r2
    c1e8:	4393      	bics	r3, r2
    c1ea:	3308      	adds	r3, #8
    c1ec:	9305      	str	r3, [sp, #20]
    c1ee:	696b      	ldr	r3, [r5, #20]
    c1f0:	9a03      	ldr	r2, [sp, #12]
    c1f2:	189b      	adds	r3, r3, r2
    c1f4:	616b      	str	r3, [r5, #20]
    c1f6:	e767      	b.n	c0c8 <_svfiprintf_r+0x44>
    c1f8:	425b      	negs	r3, r3
    c1fa:	60eb      	str	r3, [r5, #12]
    c1fc:	2302      	movs	r3, #2
    c1fe:	430b      	orrs	r3, r1
    c200:	602b      	str	r3, [r5, #0]
    c202:	e7c0      	b.n	c186 <_svfiprintf_r+0x102>
    c204:	434b      	muls	r3, r1
    c206:	3401      	adds	r4, #1
    c208:	189b      	adds	r3, r3, r2
    c20a:	2001      	movs	r0, #1
    c20c:	e7a0      	b.n	c150 <_svfiprintf_r+0xcc>
    c20e:	2301      	movs	r3, #1
    c210:	425b      	negs	r3, r3
    c212:	e7c7      	b.n	c1a4 <_svfiprintf_r+0x120>
    c214:	2300      	movs	r3, #0
    c216:	0014      	movs	r4, r2
    c218:	200a      	movs	r0, #10
    c21a:	001a      	movs	r2, r3
    c21c:	606b      	str	r3, [r5, #4]
    c21e:	7821      	ldrb	r1, [r4, #0]
    c220:	3930      	subs	r1, #48	; 0x30
    c222:	2909      	cmp	r1, #9
    c224:	d903      	bls.n	c22e <_svfiprintf_r+0x1aa>
    c226:	2b00      	cmp	r3, #0
    c228:	d0bd      	beq.n	c1a6 <_svfiprintf_r+0x122>
    c22a:	9207      	str	r2, [sp, #28]
    c22c:	e7bb      	b.n	c1a6 <_svfiprintf_r+0x122>
    c22e:	4342      	muls	r2, r0
    c230:	3401      	adds	r4, #1
    c232:	1852      	adds	r2, r2, r1
    c234:	2301      	movs	r3, #1
    c236:	e7f2      	b.n	c21e <_svfiprintf_r+0x19a>
    c238:	3307      	adds	r3, #7
    c23a:	e7d5      	b.n	c1e8 <_svfiprintf_r+0x164>
    c23c:	ab05      	add	r3, sp, #20
    c23e:	9300      	str	r3, [sp, #0]
    c240:	003a      	movs	r2, r7
    c242:	4b11      	ldr	r3, [pc, #68]	; (c288 <_svfiprintf_r+0x204>)
    c244:	0029      	movs	r1, r5
    c246:	9802      	ldr	r0, [sp, #8]
    c248:	e000      	b.n	c24c <_svfiprintf_r+0x1c8>
    c24a:	bf00      	nop
    c24c:	9003      	str	r0, [sp, #12]
    c24e:	9b03      	ldr	r3, [sp, #12]
    c250:	3301      	adds	r3, #1
    c252:	d1cc      	bne.n	c1ee <_svfiprintf_r+0x16a>
    c254:	89bb      	ldrh	r3, [r7, #12]
    c256:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c258:	065b      	lsls	r3, r3, #25
    c25a:	d400      	bmi.n	c25e <_svfiprintf_r+0x1da>
    c25c:	e729      	b.n	c0b2 <_svfiprintf_r+0x2e>
    c25e:	2001      	movs	r0, #1
    c260:	4240      	negs	r0, r0
    c262:	e726      	b.n	c0b2 <_svfiprintf_r+0x2e>
    c264:	ab05      	add	r3, sp, #20
    c266:	9300      	str	r3, [sp, #0]
    c268:	003a      	movs	r2, r7
    c26a:	4b07      	ldr	r3, [pc, #28]	; (c288 <_svfiprintf_r+0x204>)
    c26c:	0029      	movs	r1, r5
    c26e:	9802      	ldr	r0, [sp, #8]
    c270:	f000 f87a 	bl	c368 <_printf_i>
    c274:	e7ea      	b.n	c24c <_svfiprintf_r+0x1c8>
    c276:	46c0      	nop			; (mov r8, r8)
    c278:	0000d3a4 	.word	0x0000d3a4
    c27c:	0000d3aa 	.word	0x0000d3aa
    c280:	0000d3ae 	.word	0x0000d3ae
    c284:	00000000 	.word	0x00000000
    c288:	0000bfc1 	.word	0x0000bfc1

0000c28c <_printf_common>:
    c28c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c28e:	0015      	movs	r5, r2
    c290:	9301      	str	r3, [sp, #4]
    c292:	688a      	ldr	r2, [r1, #8]
    c294:	690b      	ldr	r3, [r1, #16]
    c296:	9000      	str	r0, [sp, #0]
    c298:	000c      	movs	r4, r1
    c29a:	4293      	cmp	r3, r2
    c29c:	da00      	bge.n	c2a0 <_printf_common+0x14>
    c29e:	0013      	movs	r3, r2
    c2a0:	0022      	movs	r2, r4
    c2a2:	602b      	str	r3, [r5, #0]
    c2a4:	3243      	adds	r2, #67	; 0x43
    c2a6:	7812      	ldrb	r2, [r2, #0]
    c2a8:	2a00      	cmp	r2, #0
    c2aa:	d001      	beq.n	c2b0 <_printf_common+0x24>
    c2ac:	3301      	adds	r3, #1
    c2ae:	602b      	str	r3, [r5, #0]
    c2b0:	6823      	ldr	r3, [r4, #0]
    c2b2:	069b      	lsls	r3, r3, #26
    c2b4:	d502      	bpl.n	c2bc <_printf_common+0x30>
    c2b6:	682b      	ldr	r3, [r5, #0]
    c2b8:	3302      	adds	r3, #2
    c2ba:	602b      	str	r3, [r5, #0]
    c2bc:	2706      	movs	r7, #6
    c2be:	6823      	ldr	r3, [r4, #0]
    c2c0:	401f      	ands	r7, r3
    c2c2:	d027      	beq.n	c314 <_printf_common+0x88>
    c2c4:	0023      	movs	r3, r4
    c2c6:	3343      	adds	r3, #67	; 0x43
    c2c8:	781b      	ldrb	r3, [r3, #0]
    c2ca:	1e5a      	subs	r2, r3, #1
    c2cc:	4193      	sbcs	r3, r2
    c2ce:	6822      	ldr	r2, [r4, #0]
    c2d0:	0692      	lsls	r2, r2, #26
    c2d2:	d430      	bmi.n	c336 <_printf_common+0xaa>
    c2d4:	0022      	movs	r2, r4
    c2d6:	9901      	ldr	r1, [sp, #4]
    c2d8:	3243      	adds	r2, #67	; 0x43
    c2da:	9800      	ldr	r0, [sp, #0]
    c2dc:	9e08      	ldr	r6, [sp, #32]
    c2de:	47b0      	blx	r6
    c2e0:	1c43      	adds	r3, r0, #1
    c2e2:	d025      	beq.n	c330 <_printf_common+0xa4>
    c2e4:	2306      	movs	r3, #6
    c2e6:	6820      	ldr	r0, [r4, #0]
    c2e8:	682a      	ldr	r2, [r5, #0]
    c2ea:	68e1      	ldr	r1, [r4, #12]
    c2ec:	4003      	ands	r3, r0
    c2ee:	2500      	movs	r5, #0
    c2f0:	2b04      	cmp	r3, #4
    c2f2:	d103      	bne.n	c2fc <_printf_common+0x70>
    c2f4:	1a8d      	subs	r5, r1, r2
    c2f6:	43eb      	mvns	r3, r5
    c2f8:	17db      	asrs	r3, r3, #31
    c2fa:	401d      	ands	r5, r3
    c2fc:	68a3      	ldr	r3, [r4, #8]
    c2fe:	6922      	ldr	r2, [r4, #16]
    c300:	4293      	cmp	r3, r2
    c302:	dd01      	ble.n	c308 <_printf_common+0x7c>
    c304:	1a9b      	subs	r3, r3, r2
    c306:	18ed      	adds	r5, r5, r3
    c308:	2700      	movs	r7, #0
    c30a:	42bd      	cmp	r5, r7
    c30c:	d120      	bne.n	c350 <_printf_common+0xc4>
    c30e:	2000      	movs	r0, #0
    c310:	e010      	b.n	c334 <_printf_common+0xa8>
    c312:	3701      	adds	r7, #1
    c314:	68e3      	ldr	r3, [r4, #12]
    c316:	682a      	ldr	r2, [r5, #0]
    c318:	1a9b      	subs	r3, r3, r2
    c31a:	429f      	cmp	r7, r3
    c31c:	dad2      	bge.n	c2c4 <_printf_common+0x38>
    c31e:	0022      	movs	r2, r4
    c320:	2301      	movs	r3, #1
    c322:	3219      	adds	r2, #25
    c324:	9901      	ldr	r1, [sp, #4]
    c326:	9800      	ldr	r0, [sp, #0]
    c328:	9e08      	ldr	r6, [sp, #32]
    c32a:	47b0      	blx	r6
    c32c:	1c43      	adds	r3, r0, #1
    c32e:	d1f0      	bne.n	c312 <_printf_common+0x86>
    c330:	2001      	movs	r0, #1
    c332:	4240      	negs	r0, r0
    c334:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c336:	2030      	movs	r0, #48	; 0x30
    c338:	18e1      	adds	r1, r4, r3
    c33a:	3143      	adds	r1, #67	; 0x43
    c33c:	7008      	strb	r0, [r1, #0]
    c33e:	0021      	movs	r1, r4
    c340:	1c5a      	adds	r2, r3, #1
    c342:	3145      	adds	r1, #69	; 0x45
    c344:	7809      	ldrb	r1, [r1, #0]
    c346:	18a2      	adds	r2, r4, r2
    c348:	3243      	adds	r2, #67	; 0x43
    c34a:	3302      	adds	r3, #2
    c34c:	7011      	strb	r1, [r2, #0]
    c34e:	e7c1      	b.n	c2d4 <_printf_common+0x48>
    c350:	0022      	movs	r2, r4
    c352:	2301      	movs	r3, #1
    c354:	321a      	adds	r2, #26
    c356:	9901      	ldr	r1, [sp, #4]
    c358:	9800      	ldr	r0, [sp, #0]
    c35a:	9e08      	ldr	r6, [sp, #32]
    c35c:	47b0      	blx	r6
    c35e:	1c43      	adds	r3, r0, #1
    c360:	d0e6      	beq.n	c330 <_printf_common+0xa4>
    c362:	3701      	adds	r7, #1
    c364:	e7d1      	b.n	c30a <_printf_common+0x7e>
	...

0000c368 <_printf_i>:
    c368:	b5f0      	push	{r4, r5, r6, r7, lr}
    c36a:	b08b      	sub	sp, #44	; 0x2c
    c36c:	9206      	str	r2, [sp, #24]
    c36e:	000a      	movs	r2, r1
    c370:	3243      	adds	r2, #67	; 0x43
    c372:	9307      	str	r3, [sp, #28]
    c374:	9005      	str	r0, [sp, #20]
    c376:	9204      	str	r2, [sp, #16]
    c378:	7e0a      	ldrb	r2, [r1, #24]
    c37a:	000c      	movs	r4, r1
    c37c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c37e:	2a6e      	cmp	r2, #110	; 0x6e
    c380:	d100      	bne.n	c384 <_printf_i+0x1c>
    c382:	e08f      	b.n	c4a4 <_printf_i+0x13c>
    c384:	d817      	bhi.n	c3b6 <_printf_i+0x4e>
    c386:	2a63      	cmp	r2, #99	; 0x63
    c388:	d02c      	beq.n	c3e4 <_printf_i+0x7c>
    c38a:	d808      	bhi.n	c39e <_printf_i+0x36>
    c38c:	2a00      	cmp	r2, #0
    c38e:	d100      	bne.n	c392 <_printf_i+0x2a>
    c390:	e099      	b.n	c4c6 <_printf_i+0x15e>
    c392:	2a58      	cmp	r2, #88	; 0x58
    c394:	d054      	beq.n	c440 <_printf_i+0xd8>
    c396:	0026      	movs	r6, r4
    c398:	3642      	adds	r6, #66	; 0x42
    c39a:	7032      	strb	r2, [r6, #0]
    c39c:	e029      	b.n	c3f2 <_printf_i+0x8a>
    c39e:	2a64      	cmp	r2, #100	; 0x64
    c3a0:	d001      	beq.n	c3a6 <_printf_i+0x3e>
    c3a2:	2a69      	cmp	r2, #105	; 0x69
    c3a4:	d1f7      	bne.n	c396 <_printf_i+0x2e>
    c3a6:	6821      	ldr	r1, [r4, #0]
    c3a8:	681a      	ldr	r2, [r3, #0]
    c3aa:	0608      	lsls	r0, r1, #24
    c3ac:	d523      	bpl.n	c3f6 <_printf_i+0x8e>
    c3ae:	1d11      	adds	r1, r2, #4
    c3b0:	6019      	str	r1, [r3, #0]
    c3b2:	6815      	ldr	r5, [r2, #0]
    c3b4:	e025      	b.n	c402 <_printf_i+0x9a>
    c3b6:	2a73      	cmp	r2, #115	; 0x73
    c3b8:	d100      	bne.n	c3bc <_printf_i+0x54>
    c3ba:	e088      	b.n	c4ce <_printf_i+0x166>
    c3bc:	d808      	bhi.n	c3d0 <_printf_i+0x68>
    c3be:	2a6f      	cmp	r2, #111	; 0x6f
    c3c0:	d029      	beq.n	c416 <_printf_i+0xae>
    c3c2:	2a70      	cmp	r2, #112	; 0x70
    c3c4:	d1e7      	bne.n	c396 <_printf_i+0x2e>
    c3c6:	2220      	movs	r2, #32
    c3c8:	6809      	ldr	r1, [r1, #0]
    c3ca:	430a      	orrs	r2, r1
    c3cc:	6022      	str	r2, [r4, #0]
    c3ce:	e003      	b.n	c3d8 <_printf_i+0x70>
    c3d0:	2a75      	cmp	r2, #117	; 0x75
    c3d2:	d020      	beq.n	c416 <_printf_i+0xae>
    c3d4:	2a78      	cmp	r2, #120	; 0x78
    c3d6:	d1de      	bne.n	c396 <_printf_i+0x2e>
    c3d8:	0022      	movs	r2, r4
    c3da:	2178      	movs	r1, #120	; 0x78
    c3dc:	3245      	adds	r2, #69	; 0x45
    c3de:	7011      	strb	r1, [r2, #0]
    c3e0:	4a6c      	ldr	r2, [pc, #432]	; (c594 <_printf_i+0x22c>)
    c3e2:	e030      	b.n	c446 <_printf_i+0xde>
    c3e4:	000e      	movs	r6, r1
    c3e6:	681a      	ldr	r2, [r3, #0]
    c3e8:	3642      	adds	r6, #66	; 0x42
    c3ea:	1d11      	adds	r1, r2, #4
    c3ec:	6019      	str	r1, [r3, #0]
    c3ee:	6813      	ldr	r3, [r2, #0]
    c3f0:	7033      	strb	r3, [r6, #0]
    c3f2:	2301      	movs	r3, #1
    c3f4:	e079      	b.n	c4ea <_printf_i+0x182>
    c3f6:	0649      	lsls	r1, r1, #25
    c3f8:	d5d9      	bpl.n	c3ae <_printf_i+0x46>
    c3fa:	1d11      	adds	r1, r2, #4
    c3fc:	6019      	str	r1, [r3, #0]
    c3fe:	2300      	movs	r3, #0
    c400:	5ed5      	ldrsh	r5, [r2, r3]
    c402:	2d00      	cmp	r5, #0
    c404:	da03      	bge.n	c40e <_printf_i+0xa6>
    c406:	232d      	movs	r3, #45	; 0x2d
    c408:	9a04      	ldr	r2, [sp, #16]
    c40a:	426d      	negs	r5, r5
    c40c:	7013      	strb	r3, [r2, #0]
    c40e:	4b62      	ldr	r3, [pc, #392]	; (c598 <_printf_i+0x230>)
    c410:	270a      	movs	r7, #10
    c412:	9303      	str	r3, [sp, #12]
    c414:	e02f      	b.n	c476 <_printf_i+0x10e>
    c416:	6820      	ldr	r0, [r4, #0]
    c418:	6819      	ldr	r1, [r3, #0]
    c41a:	0605      	lsls	r5, r0, #24
    c41c:	d503      	bpl.n	c426 <_printf_i+0xbe>
    c41e:	1d08      	adds	r0, r1, #4
    c420:	6018      	str	r0, [r3, #0]
    c422:	680d      	ldr	r5, [r1, #0]
    c424:	e005      	b.n	c432 <_printf_i+0xca>
    c426:	0640      	lsls	r0, r0, #25
    c428:	d5f9      	bpl.n	c41e <_printf_i+0xb6>
    c42a:	680d      	ldr	r5, [r1, #0]
    c42c:	1d08      	adds	r0, r1, #4
    c42e:	6018      	str	r0, [r3, #0]
    c430:	b2ad      	uxth	r5, r5
    c432:	4b59      	ldr	r3, [pc, #356]	; (c598 <_printf_i+0x230>)
    c434:	2708      	movs	r7, #8
    c436:	9303      	str	r3, [sp, #12]
    c438:	2a6f      	cmp	r2, #111	; 0x6f
    c43a:	d018      	beq.n	c46e <_printf_i+0x106>
    c43c:	270a      	movs	r7, #10
    c43e:	e016      	b.n	c46e <_printf_i+0x106>
    c440:	3145      	adds	r1, #69	; 0x45
    c442:	700a      	strb	r2, [r1, #0]
    c444:	4a54      	ldr	r2, [pc, #336]	; (c598 <_printf_i+0x230>)
    c446:	9203      	str	r2, [sp, #12]
    c448:	681a      	ldr	r2, [r3, #0]
    c44a:	6821      	ldr	r1, [r4, #0]
    c44c:	1d10      	adds	r0, r2, #4
    c44e:	6018      	str	r0, [r3, #0]
    c450:	6815      	ldr	r5, [r2, #0]
    c452:	0608      	lsls	r0, r1, #24
    c454:	d522      	bpl.n	c49c <_printf_i+0x134>
    c456:	07cb      	lsls	r3, r1, #31
    c458:	d502      	bpl.n	c460 <_printf_i+0xf8>
    c45a:	2320      	movs	r3, #32
    c45c:	4319      	orrs	r1, r3
    c45e:	6021      	str	r1, [r4, #0]
    c460:	2710      	movs	r7, #16
    c462:	2d00      	cmp	r5, #0
    c464:	d103      	bne.n	c46e <_printf_i+0x106>
    c466:	2320      	movs	r3, #32
    c468:	6822      	ldr	r2, [r4, #0]
    c46a:	439a      	bics	r2, r3
    c46c:	6022      	str	r2, [r4, #0]
    c46e:	0023      	movs	r3, r4
    c470:	2200      	movs	r2, #0
    c472:	3343      	adds	r3, #67	; 0x43
    c474:	701a      	strb	r2, [r3, #0]
    c476:	6863      	ldr	r3, [r4, #4]
    c478:	60a3      	str	r3, [r4, #8]
    c47a:	2b00      	cmp	r3, #0
    c47c:	db5c      	blt.n	c538 <_printf_i+0x1d0>
    c47e:	2204      	movs	r2, #4
    c480:	6821      	ldr	r1, [r4, #0]
    c482:	4391      	bics	r1, r2
    c484:	6021      	str	r1, [r4, #0]
    c486:	2d00      	cmp	r5, #0
    c488:	d158      	bne.n	c53c <_printf_i+0x1d4>
    c48a:	9e04      	ldr	r6, [sp, #16]
    c48c:	2b00      	cmp	r3, #0
    c48e:	d064      	beq.n	c55a <_printf_i+0x1f2>
    c490:	0026      	movs	r6, r4
    c492:	9b03      	ldr	r3, [sp, #12]
    c494:	3642      	adds	r6, #66	; 0x42
    c496:	781b      	ldrb	r3, [r3, #0]
    c498:	7033      	strb	r3, [r6, #0]
    c49a:	e05e      	b.n	c55a <_printf_i+0x1f2>
    c49c:	0648      	lsls	r0, r1, #25
    c49e:	d5da      	bpl.n	c456 <_printf_i+0xee>
    c4a0:	b2ad      	uxth	r5, r5
    c4a2:	e7d8      	b.n	c456 <_printf_i+0xee>
    c4a4:	6809      	ldr	r1, [r1, #0]
    c4a6:	681a      	ldr	r2, [r3, #0]
    c4a8:	0608      	lsls	r0, r1, #24
    c4aa:	d505      	bpl.n	c4b8 <_printf_i+0x150>
    c4ac:	1d11      	adds	r1, r2, #4
    c4ae:	6019      	str	r1, [r3, #0]
    c4b0:	6813      	ldr	r3, [r2, #0]
    c4b2:	6962      	ldr	r2, [r4, #20]
    c4b4:	601a      	str	r2, [r3, #0]
    c4b6:	e006      	b.n	c4c6 <_printf_i+0x15e>
    c4b8:	0649      	lsls	r1, r1, #25
    c4ba:	d5f7      	bpl.n	c4ac <_printf_i+0x144>
    c4bc:	1d11      	adds	r1, r2, #4
    c4be:	6019      	str	r1, [r3, #0]
    c4c0:	6813      	ldr	r3, [r2, #0]
    c4c2:	8aa2      	ldrh	r2, [r4, #20]
    c4c4:	801a      	strh	r2, [r3, #0]
    c4c6:	2300      	movs	r3, #0
    c4c8:	9e04      	ldr	r6, [sp, #16]
    c4ca:	6123      	str	r3, [r4, #16]
    c4cc:	e054      	b.n	c578 <_printf_i+0x210>
    c4ce:	681a      	ldr	r2, [r3, #0]
    c4d0:	1d11      	adds	r1, r2, #4
    c4d2:	6019      	str	r1, [r3, #0]
    c4d4:	6816      	ldr	r6, [r2, #0]
    c4d6:	2100      	movs	r1, #0
    c4d8:	6862      	ldr	r2, [r4, #4]
    c4da:	0030      	movs	r0, r6
    c4dc:	f000 f8f6 	bl	c6cc <memchr>
    c4e0:	2800      	cmp	r0, #0
    c4e2:	d001      	beq.n	c4e8 <_printf_i+0x180>
    c4e4:	1b80      	subs	r0, r0, r6
    c4e6:	6060      	str	r0, [r4, #4]
    c4e8:	6863      	ldr	r3, [r4, #4]
    c4ea:	6123      	str	r3, [r4, #16]
    c4ec:	2300      	movs	r3, #0
    c4ee:	9a04      	ldr	r2, [sp, #16]
    c4f0:	7013      	strb	r3, [r2, #0]
    c4f2:	e041      	b.n	c578 <_printf_i+0x210>
    c4f4:	6923      	ldr	r3, [r4, #16]
    c4f6:	0032      	movs	r2, r6
    c4f8:	9906      	ldr	r1, [sp, #24]
    c4fa:	9805      	ldr	r0, [sp, #20]
    c4fc:	9d07      	ldr	r5, [sp, #28]
    c4fe:	47a8      	blx	r5
    c500:	1c43      	adds	r3, r0, #1
    c502:	d043      	beq.n	c58c <_printf_i+0x224>
    c504:	6823      	ldr	r3, [r4, #0]
    c506:	2500      	movs	r5, #0
    c508:	079b      	lsls	r3, r3, #30
    c50a:	d40f      	bmi.n	c52c <_printf_i+0x1c4>
    c50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c50e:	68e0      	ldr	r0, [r4, #12]
    c510:	4298      	cmp	r0, r3
    c512:	da3d      	bge.n	c590 <_printf_i+0x228>
    c514:	0018      	movs	r0, r3
    c516:	e03b      	b.n	c590 <_printf_i+0x228>
    c518:	0022      	movs	r2, r4
    c51a:	2301      	movs	r3, #1
    c51c:	3219      	adds	r2, #25
    c51e:	9906      	ldr	r1, [sp, #24]
    c520:	9805      	ldr	r0, [sp, #20]
    c522:	9e07      	ldr	r6, [sp, #28]
    c524:	47b0      	blx	r6
    c526:	1c43      	adds	r3, r0, #1
    c528:	d030      	beq.n	c58c <_printf_i+0x224>
    c52a:	3501      	adds	r5, #1
    c52c:	68e3      	ldr	r3, [r4, #12]
    c52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c530:	1a9b      	subs	r3, r3, r2
    c532:	429d      	cmp	r5, r3
    c534:	dbf0      	blt.n	c518 <_printf_i+0x1b0>
    c536:	e7e9      	b.n	c50c <_printf_i+0x1a4>
    c538:	2d00      	cmp	r5, #0
    c53a:	d0a9      	beq.n	c490 <_printf_i+0x128>
    c53c:	9e04      	ldr	r6, [sp, #16]
    c53e:	0028      	movs	r0, r5
    c540:	0039      	movs	r1, r7
    c542:	f7ff f881 	bl	b648 <__aeabi_uidivmod>
    c546:	9b03      	ldr	r3, [sp, #12]
    c548:	3e01      	subs	r6, #1
    c54a:	5c5b      	ldrb	r3, [r3, r1]
    c54c:	0028      	movs	r0, r5
    c54e:	7033      	strb	r3, [r6, #0]
    c550:	0039      	movs	r1, r7
    c552:	f7fe fff3 	bl	b53c <__udivsi3>
    c556:	1e05      	subs	r5, r0, #0
    c558:	d1f1      	bne.n	c53e <_printf_i+0x1d6>
    c55a:	2f08      	cmp	r7, #8
    c55c:	d109      	bne.n	c572 <_printf_i+0x20a>
    c55e:	6823      	ldr	r3, [r4, #0]
    c560:	07db      	lsls	r3, r3, #31
    c562:	d506      	bpl.n	c572 <_printf_i+0x20a>
    c564:	6863      	ldr	r3, [r4, #4]
    c566:	6922      	ldr	r2, [r4, #16]
    c568:	4293      	cmp	r3, r2
    c56a:	dc02      	bgt.n	c572 <_printf_i+0x20a>
    c56c:	2330      	movs	r3, #48	; 0x30
    c56e:	3e01      	subs	r6, #1
    c570:	7033      	strb	r3, [r6, #0]
    c572:	9b04      	ldr	r3, [sp, #16]
    c574:	1b9b      	subs	r3, r3, r6
    c576:	6123      	str	r3, [r4, #16]
    c578:	9b07      	ldr	r3, [sp, #28]
    c57a:	aa09      	add	r2, sp, #36	; 0x24
    c57c:	9300      	str	r3, [sp, #0]
    c57e:	0021      	movs	r1, r4
    c580:	9b06      	ldr	r3, [sp, #24]
    c582:	9805      	ldr	r0, [sp, #20]
    c584:	f7ff fe82 	bl	c28c <_printf_common>
    c588:	1c43      	adds	r3, r0, #1
    c58a:	d1b3      	bne.n	c4f4 <_printf_i+0x18c>
    c58c:	2001      	movs	r0, #1
    c58e:	4240      	negs	r0, r0
    c590:	b00b      	add	sp, #44	; 0x2c
    c592:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c594:	0000d3c6 	.word	0x0000d3c6
    c598:	0000d3b5 	.word	0x0000d3b5

0000c59c <__sread>:
    c59c:	b570      	push	{r4, r5, r6, lr}
    c59e:	000c      	movs	r4, r1
    c5a0:	250e      	movs	r5, #14
    c5a2:	5f49      	ldrsh	r1, [r1, r5]
    c5a4:	f000 f8d6 	bl	c754 <_read_r>
    c5a8:	2800      	cmp	r0, #0
    c5aa:	db03      	blt.n	c5b4 <__sread+0x18>
    c5ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c5ae:	181b      	adds	r3, r3, r0
    c5b0:	6563      	str	r3, [r4, #84]	; 0x54
    c5b2:	bd70      	pop	{r4, r5, r6, pc}
    c5b4:	89a3      	ldrh	r3, [r4, #12]
    c5b6:	4a02      	ldr	r2, [pc, #8]	; (c5c0 <__sread+0x24>)
    c5b8:	4013      	ands	r3, r2
    c5ba:	81a3      	strh	r3, [r4, #12]
    c5bc:	e7f9      	b.n	c5b2 <__sread+0x16>
    c5be:	46c0      	nop			; (mov r8, r8)
    c5c0:	ffffefff 	.word	0xffffefff

0000c5c4 <__swrite>:
    c5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5c6:	001f      	movs	r7, r3
    c5c8:	898b      	ldrh	r3, [r1, #12]
    c5ca:	0005      	movs	r5, r0
    c5cc:	000c      	movs	r4, r1
    c5ce:	0016      	movs	r6, r2
    c5d0:	05db      	lsls	r3, r3, #23
    c5d2:	d505      	bpl.n	c5e0 <__swrite+0x1c>
    c5d4:	230e      	movs	r3, #14
    c5d6:	5ec9      	ldrsh	r1, [r1, r3]
    c5d8:	2200      	movs	r2, #0
    c5da:	2302      	movs	r3, #2
    c5dc:	f000 f862 	bl	c6a4 <_lseek_r>
    c5e0:	89a3      	ldrh	r3, [r4, #12]
    c5e2:	4a05      	ldr	r2, [pc, #20]	; (c5f8 <__swrite+0x34>)
    c5e4:	0028      	movs	r0, r5
    c5e6:	4013      	ands	r3, r2
    c5e8:	81a3      	strh	r3, [r4, #12]
    c5ea:	0032      	movs	r2, r6
    c5ec:	230e      	movs	r3, #14
    c5ee:	5ee1      	ldrsh	r1, [r4, r3]
    c5f0:	003b      	movs	r3, r7
    c5f2:	f000 f81f 	bl	c634 <_write_r>
    c5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c5f8:	ffffefff 	.word	0xffffefff

0000c5fc <__sseek>:
    c5fc:	b570      	push	{r4, r5, r6, lr}
    c5fe:	000c      	movs	r4, r1
    c600:	250e      	movs	r5, #14
    c602:	5f49      	ldrsh	r1, [r1, r5]
    c604:	f000 f84e 	bl	c6a4 <_lseek_r>
    c608:	89a3      	ldrh	r3, [r4, #12]
    c60a:	1c42      	adds	r2, r0, #1
    c60c:	d103      	bne.n	c616 <__sseek+0x1a>
    c60e:	4a05      	ldr	r2, [pc, #20]	; (c624 <__sseek+0x28>)
    c610:	4013      	ands	r3, r2
    c612:	81a3      	strh	r3, [r4, #12]
    c614:	bd70      	pop	{r4, r5, r6, pc}
    c616:	2280      	movs	r2, #128	; 0x80
    c618:	0152      	lsls	r2, r2, #5
    c61a:	4313      	orrs	r3, r2
    c61c:	81a3      	strh	r3, [r4, #12]
    c61e:	6560      	str	r0, [r4, #84]	; 0x54
    c620:	e7f8      	b.n	c614 <__sseek+0x18>
    c622:	46c0      	nop			; (mov r8, r8)
    c624:	ffffefff 	.word	0xffffefff

0000c628 <__sclose>:
    c628:	b510      	push	{r4, lr}
    c62a:	230e      	movs	r3, #14
    c62c:	5ec9      	ldrsh	r1, [r1, r3]
    c62e:	f000 f815 	bl	c65c <_close_r>
    c632:	bd10      	pop	{r4, pc}

0000c634 <_write_r>:
    c634:	b570      	push	{r4, r5, r6, lr}
    c636:	0005      	movs	r5, r0
    c638:	0008      	movs	r0, r1
    c63a:	0011      	movs	r1, r2
    c63c:	2200      	movs	r2, #0
    c63e:	4c06      	ldr	r4, [pc, #24]	; (c658 <_write_r+0x24>)
    c640:	6022      	str	r2, [r4, #0]
    c642:	001a      	movs	r2, r3
    c644:	f7fa fc80 	bl	6f48 <_write>
    c648:	1c43      	adds	r3, r0, #1
    c64a:	d103      	bne.n	c654 <_write_r+0x20>
    c64c:	6823      	ldr	r3, [r4, #0]
    c64e:	2b00      	cmp	r3, #0
    c650:	d000      	beq.n	c654 <_write_r+0x20>
    c652:	602b      	str	r3, [r5, #0]
    c654:	bd70      	pop	{r4, r5, r6, pc}
    c656:	46c0      	nop			; (mov r8, r8)
    c658:	20000ddc 	.word	0x20000ddc

0000c65c <_close_r>:
    c65c:	2300      	movs	r3, #0
    c65e:	b570      	push	{r4, r5, r6, lr}
    c660:	4c06      	ldr	r4, [pc, #24]	; (c67c <_close_r+0x20>)
    c662:	0005      	movs	r5, r0
    c664:	0008      	movs	r0, r1
    c666:	6023      	str	r3, [r4, #0]
    c668:	f7fa fcc2 	bl	6ff0 <_close>
    c66c:	1c43      	adds	r3, r0, #1
    c66e:	d103      	bne.n	c678 <_close_r+0x1c>
    c670:	6823      	ldr	r3, [r4, #0]
    c672:	2b00      	cmp	r3, #0
    c674:	d000      	beq.n	c678 <_close_r+0x1c>
    c676:	602b      	str	r3, [r5, #0]
    c678:	bd70      	pop	{r4, r5, r6, pc}
    c67a:	46c0      	nop			; (mov r8, r8)
    c67c:	20000ddc 	.word	0x20000ddc

0000c680 <_fstat_r>:
    c680:	2300      	movs	r3, #0
    c682:	b570      	push	{r4, r5, r6, lr}
    c684:	4c06      	ldr	r4, [pc, #24]	; (c6a0 <_fstat_r+0x20>)
    c686:	0005      	movs	r5, r0
    c688:	0008      	movs	r0, r1
    c68a:	0011      	movs	r1, r2
    c68c:	6023      	str	r3, [r4, #0]
    c68e:	f7fa fcb9 	bl	7004 <_fstat>
    c692:	1c43      	adds	r3, r0, #1
    c694:	d103      	bne.n	c69e <_fstat_r+0x1e>
    c696:	6823      	ldr	r3, [r4, #0]
    c698:	2b00      	cmp	r3, #0
    c69a:	d000      	beq.n	c69e <_fstat_r+0x1e>
    c69c:	602b      	str	r3, [r5, #0]
    c69e:	bd70      	pop	{r4, r5, r6, pc}
    c6a0:	20000ddc 	.word	0x20000ddc

0000c6a4 <_lseek_r>:
    c6a4:	b570      	push	{r4, r5, r6, lr}
    c6a6:	0005      	movs	r5, r0
    c6a8:	0008      	movs	r0, r1
    c6aa:	0011      	movs	r1, r2
    c6ac:	2200      	movs	r2, #0
    c6ae:	4c06      	ldr	r4, [pc, #24]	; (c6c8 <_lseek_r+0x24>)
    c6b0:	6022      	str	r2, [r4, #0]
    c6b2:	001a      	movs	r2, r3
    c6b4:	f7fa fcb4 	bl	7020 <_lseek>
    c6b8:	1c43      	adds	r3, r0, #1
    c6ba:	d103      	bne.n	c6c4 <_lseek_r+0x20>
    c6bc:	6823      	ldr	r3, [r4, #0]
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d000      	beq.n	c6c4 <_lseek_r+0x20>
    c6c2:	602b      	str	r3, [r5, #0]
    c6c4:	bd70      	pop	{r4, r5, r6, pc}
    c6c6:	46c0      	nop			; (mov r8, r8)
    c6c8:	20000ddc 	.word	0x20000ddc

0000c6cc <memchr>:
    c6cc:	b2c9      	uxtb	r1, r1
    c6ce:	1882      	adds	r2, r0, r2
    c6d0:	4290      	cmp	r0, r2
    c6d2:	d101      	bne.n	c6d8 <memchr+0xc>
    c6d4:	2000      	movs	r0, #0
    c6d6:	4770      	bx	lr
    c6d8:	7803      	ldrb	r3, [r0, #0]
    c6da:	428b      	cmp	r3, r1
    c6dc:	d0fb      	beq.n	c6d6 <memchr+0xa>
    c6de:	3001      	adds	r0, #1
    c6e0:	e7f6      	b.n	c6d0 <memchr+0x4>

0000c6e2 <memmove>:
    c6e2:	b510      	push	{r4, lr}
    c6e4:	4288      	cmp	r0, r1
    c6e6:	d902      	bls.n	c6ee <memmove+0xc>
    c6e8:	188b      	adds	r3, r1, r2
    c6ea:	4298      	cmp	r0, r3
    c6ec:	d308      	bcc.n	c700 <memmove+0x1e>
    c6ee:	2300      	movs	r3, #0
    c6f0:	429a      	cmp	r2, r3
    c6f2:	d007      	beq.n	c704 <memmove+0x22>
    c6f4:	5ccc      	ldrb	r4, [r1, r3]
    c6f6:	54c4      	strb	r4, [r0, r3]
    c6f8:	3301      	adds	r3, #1
    c6fa:	e7f9      	b.n	c6f0 <memmove+0xe>
    c6fc:	5c8b      	ldrb	r3, [r1, r2]
    c6fe:	5483      	strb	r3, [r0, r2]
    c700:	3a01      	subs	r2, #1
    c702:	d2fb      	bcs.n	c6fc <memmove+0x1a>
    c704:	bd10      	pop	{r4, pc}

0000c706 <_realloc_r>:
    c706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c708:	0007      	movs	r7, r0
    c70a:	000d      	movs	r5, r1
    c70c:	0016      	movs	r6, r2
    c70e:	2900      	cmp	r1, #0
    c710:	d105      	bne.n	c71e <_realloc_r+0x18>
    c712:	0011      	movs	r1, r2
    c714:	f7ff f93c 	bl	b990 <_malloc_r>
    c718:	0004      	movs	r4, r0
    c71a:	0020      	movs	r0, r4
    c71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c71e:	2a00      	cmp	r2, #0
    c720:	d103      	bne.n	c72a <_realloc_r+0x24>
    c722:	f7ff f8eb 	bl	b8fc <_free_r>
    c726:	0034      	movs	r4, r6
    c728:	e7f7      	b.n	c71a <_realloc_r+0x14>
    c72a:	f000 f827 	bl	c77c <_malloc_usable_size_r>
    c72e:	002c      	movs	r4, r5
    c730:	4286      	cmp	r6, r0
    c732:	d9f2      	bls.n	c71a <_realloc_r+0x14>
    c734:	0031      	movs	r1, r6
    c736:	0038      	movs	r0, r7
    c738:	f7ff f92a 	bl	b990 <_malloc_r>
    c73c:	1e04      	subs	r4, r0, #0
    c73e:	d0ec      	beq.n	c71a <_realloc_r+0x14>
    c740:	0029      	movs	r1, r5
    c742:	0032      	movs	r2, r6
    c744:	f7ff f8c8 	bl	b8d8 <memcpy>
    c748:	0029      	movs	r1, r5
    c74a:	0038      	movs	r0, r7
    c74c:	f7ff f8d6 	bl	b8fc <_free_r>
    c750:	e7e3      	b.n	c71a <_realloc_r+0x14>
	...

0000c754 <_read_r>:
    c754:	b570      	push	{r4, r5, r6, lr}
    c756:	0005      	movs	r5, r0
    c758:	0008      	movs	r0, r1
    c75a:	0011      	movs	r1, r2
    c75c:	2200      	movs	r2, #0
    c75e:	4c06      	ldr	r4, [pc, #24]	; (c778 <_read_r+0x24>)
    c760:	6022      	str	r2, [r4, #0]
    c762:	001a      	movs	r2, r3
    c764:	f7fa fbc6 	bl	6ef4 <_read>
    c768:	1c43      	adds	r3, r0, #1
    c76a:	d103      	bne.n	c774 <_read_r+0x20>
    c76c:	6823      	ldr	r3, [r4, #0]
    c76e:	2b00      	cmp	r3, #0
    c770:	d000      	beq.n	c774 <_read_r+0x20>
    c772:	602b      	str	r3, [r5, #0]
    c774:	bd70      	pop	{r4, r5, r6, pc}
    c776:	46c0      	nop			; (mov r8, r8)
    c778:	20000ddc 	.word	0x20000ddc

0000c77c <_malloc_usable_size_r>:
    c77c:	1f0b      	subs	r3, r1, #4
    c77e:	681b      	ldr	r3, [r3, #0]
    c780:	1f18      	subs	r0, r3, #4
    c782:	2b00      	cmp	r3, #0
    c784:	da01      	bge.n	c78a <_malloc_usable_size_r+0xe>
    c786:	580b      	ldr	r3, [r1, r0]
    c788:	18c0      	adds	r0, r0, r3
    c78a:	4770      	bx	lr
    c78c:	0000065c 	.word	0x0000065c
    c790:	0000065c 	.word	0x0000065c
    c794:	00000650 	.word	0x00000650
    c798:	0000065c 	.word	0x0000065c
    c79c:	00000650 	.word	0x00000650
    c7a0:	0000062a 	.word	0x0000062a
    c7a4:	0000062a 	.word	0x0000062a
    c7a8:	0000065c 	.word	0x0000065c
    c7ac:	0000065c 	.word	0x0000065c
    c7b0:	0000065c 	.word	0x0000065c
    c7b4:	0000065c 	.word	0x0000065c
    c7b8:	0000065c 	.word	0x0000065c
    c7bc:	0000065c 	.word	0x0000065c
    c7c0:	0000065c 	.word	0x0000065c
    c7c4:	0000065c 	.word	0x0000065c
    c7c8:	0000065c 	.word	0x0000065c
    c7cc:	0000065c 	.word	0x0000065c
    c7d0:	0000065c 	.word	0x0000065c
    c7d4:	0000065c 	.word	0x0000065c
    c7d8:	0000065c 	.word	0x0000065c
    c7dc:	0000065c 	.word	0x0000065c
    c7e0:	0000065c 	.word	0x0000065c
    c7e4:	0000065c 	.word	0x0000065c
    c7e8:	0000065c 	.word	0x0000065c
    c7ec:	0000065c 	.word	0x0000065c
    c7f0:	0000065c 	.word	0x0000065c
    c7f4:	0000065c 	.word	0x0000065c
    c7f8:	0000065c 	.word	0x0000065c
    c7fc:	0000065c 	.word	0x0000065c
    c800:	0000065c 	.word	0x0000065c
    c804:	0000065c 	.word	0x0000065c
    c808:	0000065c 	.word	0x0000065c
    c80c:	0000065c 	.word	0x0000065c
    c810:	0000065c 	.word	0x0000065c
    c814:	0000065c 	.word	0x0000065c
    c818:	0000065c 	.word	0x0000065c
    c81c:	0000065c 	.word	0x0000065c
    c820:	0000065c 	.word	0x0000065c
    c824:	0000065c 	.word	0x0000065c
    c828:	0000065c 	.word	0x0000065c
    c82c:	0000065c 	.word	0x0000065c
    c830:	0000065c 	.word	0x0000065c
    c834:	0000065c 	.word	0x0000065c
    c838:	0000065c 	.word	0x0000065c
    c83c:	0000065c 	.word	0x0000065c
    c840:	0000065c 	.word	0x0000065c
    c844:	0000065c 	.word	0x0000065c
    c848:	0000065c 	.word	0x0000065c
    c84c:	0000065c 	.word	0x0000065c
    c850:	0000065c 	.word	0x0000065c
    c854:	0000065c 	.word	0x0000065c
    c858:	0000065c 	.word	0x0000065c
    c85c:	0000065c 	.word	0x0000065c
    c860:	0000065c 	.word	0x0000065c
    c864:	0000065c 	.word	0x0000065c
    c868:	0000065c 	.word	0x0000065c
    c86c:	0000065c 	.word	0x0000065c
    c870:	0000065c 	.word	0x0000065c
    c874:	0000065c 	.word	0x0000065c
    c878:	0000065c 	.word	0x0000065c
    c87c:	0000065c 	.word	0x0000065c
    c880:	0000065c 	.word	0x0000065c
    c884:	0000065c 	.word	0x0000065c
    c888:	0000065c 	.word	0x0000065c
    c88c:	00000650 	.word	0x00000650
    c890:	00000650 	.word	0x00000650
    c894:	00000666 	.word	0x00000666
    c898:	00000666 	.word	0x00000666
    c89c:	00000666 	.word	0x00000666
    c8a0:	00000666 	.word	0x00000666

0000c8a4 <sd_mmc_trans_units>:
    c8a4:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000c8c0 <sd_trans_multipliers>:
    c8c0:	00000000 0000000a 0000000c 0000000d     ................
    c8d0:	0000000f 00000014 00000019 0000001e     ................
    c8e0:	00000023 00000028 0000002d 00000032     #...(...-...2...
    c8f0:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000c900 <mmc_trans_multipliers>:
    c900:	00000000 0000000a 0000000c 0000000d     ................
    c910:	0000000f 00000014 0000001a 0000001e     ................
    c920:	00000023 00000028 0000002d 00000034     #...(...-...4...
    c930:	00000037 0000003c 00000046 00000050     7...<...F...P...
    c940:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
    c950:	22302074 00000000                       t 0"....

0000c958 <lun_desc>:
    c958:	0000235d 000023b5 00002401 0000244d     ]#...#...$..M$..
    c968:	0000247d 00002501 00002591 0000c940     }$...%...%..@...
    c978:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    c988:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    c998:	00006072 000060ec 000060ec 00006090     r`...`...`...`..
    c9a8:	0000608a 00006096 00006078 0000609c     .`...`..x`...`..
    c9b8:	000060d2 000063b8 00006408 00006408     .`...c...d...d..
    c9c8:	00006404 000063aa 000063ca 0000639a     .d...c...c...c..
    c9d8:	000063dc 000063ee 00006456 00006484     .c...c..Vd...d..
    c9e8:	00006484 00006480 00006450 0000645c     .d...d..Pd..\d..
    c9f8:	0000644a 00006462 00006468              Jd..bd..hd..

0000ca04 <LfnOfs>:
    ca04:	07050301 12100e09 1c181614 0000001e     ................
    ca14:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    ca24:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
    ca34:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
    ca44:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
    ca54:	20205441 00202020                       AT     .

0000ca5c <excvt.4558>:
    ca5c:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    ca6c:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    ca7c:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    ca8c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    ca9c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    caac:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    cabc:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    cacc:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000cadc <Tbl>:
    cadc:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    caec:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    cafc:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    cb0c:	00d600ff 00f800dc 00d800a3 019200d7     ................
    cb1c:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    cb2c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    cb3c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    cb4c:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    cb5c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    cb6c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    cb7c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    cb8c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    cb9c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    cbac:	00da00de 00d900db 00dd00fd 00b400af     ................
    cbbc:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    cbcc:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000cbdc <tbl_lower.4308>:
    cbdc:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    cbec:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    cbfc:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    cc0c:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    cc1c:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    cc2c:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    cc3c:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    cc4c:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    cc5c:	01050103 01090107 010d010b 0111010f     ................
    cc6c:	01150113 01190117 011d011b 0121011f     ..............!.
    cc7c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    cc8c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    cc9c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    ccac:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    ccbc:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    cccc:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    ccdc:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    ccec:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    ccfc:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    cd0c:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    cd1c:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    cd2c:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    cd3c:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    cd4c:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    cd5c:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    cd6c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    cd7c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    cd8c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    cd9c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    cdac:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000cdbc <tbl_upper.4309>:
    cdbc:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    cdcc:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    cddc:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    cdec:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    cdfc:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    ce0c:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    ce1c:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    ce2c:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    ce3c:	01040102 01080106 010c010a 0110010e     ................
    ce4c:	01140112 01180116 011c011a 0120011e     .............. .
    ce5c:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    ce6c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    ce7c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    ce8c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    ce9c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    ceac:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    cebc:	03940393 03960395 03980397 039a0399     ................
    cecc:	039c039b 039e039d 03a0039f 03a303a1     ................
    cedc:	03a503a4 03a703a6 03a903a8 041003aa     ................
    ceec:	04120411 04140413 04160415 04180417     ................
    cefc:	041a0419 041c041b 041e041d 0420041f     .............. .
    cf0c:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    cf1c:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    cf2c:	04030402 04050404 04070406 04090408     ................
    cf3c:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    cf4c:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    cf5c:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    cf6c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    cf7c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    cf8c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    cf9c:	35455345 20303631 4e45202d 20524554     ESE5160 - ENTER 
    cfac:	544f4f42 44414f4c 00005245 2d0d0a0c     BOOTLOADER.....-
    cfbc:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    cfcc:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    cfdc:	000d0a2d 43204453 20445241 6c696166     -...SD CARD fail
    cfec:	20216465 63656843 6f79206b 63207275     ed! Check your c
    cffc:	656e6e6f 6f697463 202e736e 74737953     onnections. Syst
    d00c:	77206d65 206c6c69 74736572 20747261     em will restart 
    d01c:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
    d02c:	43204453 20445241 6e756f6d 75732074     SD CARD mount su
    d03c:	73656363 46202173 73656c69 65747379     ccess! Filesyste
    d04c:	6c61206d 6d206f73 746e756f 202e6465     m also mounted. 
    d05c:	00000a0d 61647055 20646574 6d726946     ....Updated Firm
    d06c:	65726177 63755320 73736563 6c6c7566     ware Successfull
    d07c:	00000079 75736e55 73656363 6c756673     y...Unsuccessful
    d08c:	206e6920 61647075 676e6974 72694620      in updating Fir
    d09c:	7261776d 00000065 35455345 20303631     mware...ESE5160 
    d0ac:	5845202d 42205449 4c544f4f 4544414f     - EXIT BOOTLOADE
    d0bc:	00000052 43204453 20647261 74696e69     R...SD Card init
    d0cc:	65746169 6f632064 63657272 21796c74     iated correctly!
    d0dc:	00000d0a 6e756f4d 69642074 28206b73     ....Mount disk (
    d0ec:	6f6d5f66 29746e75 0d2e2e2e 0000000a     f_mount)........
    d0fc:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
    d10c:	5d4b4f5b 00000a0d 61657243 61206574     [OK]....Create a
    d11c:	6c696620 66282065 65706f5f 2e2e296e      file (f_open)..
    d12c:	000a0d2e 74697257 6f742065 73657420     ....Write to tes
    d13c:	69662074 2820656c 75705f66 2e297374     t file (f_puts).
    d14c:	0a0d2e2e 00000000 74736554 2f445320     ........Test SD/
    d15c:	20434d4d 63617473 00000a6b 4941465b     MMC stack...[FAI
    d16c:	0a0d5d4c 00000000 74736554 20736920     L]......Test is 
    d17c:	63637573 66737365 0a2e6c75 0000000d     successful......
    d18c:	6c756f43 6f6e2064 706f2074 62206e65     Could not open b
    d19c:	72616e69 69662079 0d21656c 0000000a     inary file!.....
    d1ac:	74697257 6f742065 73657420 69662074     Write to test fi
    d1bc:	2820656c 72775f66 29657469 0d2e2e2e     le (f_write)....
    d1cc:	0000000a 20646e45 5420666f 2e747365     ....End of Test.
    d1dc:	00000d0a 43204453 20647261 6c696166     ....SD Card fail
    d1ec:	69206465 6974696e 6f697461 4320216e     ed initiation! C
    d1fc:	6b636568 6e6f6320 7463656e 736e6f69     heck connections
    d20c:	000d0a21 6c756f43 6f6e2064 61632074     !...Could not ca
    d21c:	6c75636c 20657461 20435243 42206e6f     lculate CRC on B
    d22c:	65666675 61442072 0a0d6174 00000000     uffer Data......
    d23c:	6c756f43 6f6e2064 61632074 6c75636c     Could not calcul
    d24c:	20657461 20435243 4e206e6f 44204d56     ate CRC on NVM D
    d25c:	0d617461 0000000a 20435243 20646964     ata.....CRC did 
    d26c:	20746f6e 6374616d 000a0d68 6c696146     not match...Fail
    d27c:	54206465 7277206f 20657469 0d4d564e     ed To write NVM.
    d28c:	0000000a 6f727245 68572072 20656c69     ....Error While 
    d29c:	73617265 20676e69 61746164 00000a0d     erasing data....
    d2ac:	65676150 746f6e20 61726520 0d646573     Page not erased.
    d2bc:	0000000a 6c756f43 6f6e2064 706f2074     ....Could not op
    d2cc:	62206e65 66206e69 21656c69 00000a0d     en bin file!....
    d2dc:	206e6942 64616552 69614620 2164656c     Bin Read Failed!
    d2ec:	00000a0d 6f6d654d 45207972 65736172     ....Memory Erase
    d2fc:	0a0d2064 00000000 206e6942 74697257     d ......Bin Writ
    d30c:	206e6574 4e206f74 0a0d4d56 00000000     ten to NVM......
    d31c:	20435243 73736150 0a0d6465 00000000     CRC Passed......
    d32c:	626d754e 6f207265 6f522066 25207377     Number of Rows %
    d33c:	000a0d64                                d...

0000d340 <_global_impure_ptr>:
    d340:	2000007c                                |.. 

0000d344 <__sf_fake_stderr>:
	...

0000d364 <__sf_fake_stdin>:
	...

0000d384 <__sf_fake_stdout>:
	...
    d3a4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    d3b4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    d3c4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    d3d4:	00006665                                ef..

0000d3d8 <_init>:
    d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3da:	46c0      	nop			; (mov r8, r8)
    d3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d3de:	bc08      	pop	{r3}
    d3e0:	469e      	mov	lr, r3
    d3e2:	4770      	bx	lr

0000d3e4 <__init_array_start>:
    d3e4:	000000dd 	.word	0x000000dd

0000d3e8 <_fini>:
    d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3ea:	46c0      	nop			; (mov r8, r8)
    d3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d3ee:	bc08      	pop	{r3}
    d3f0:	469e      	mov	lr, r3
    d3f2:	4770      	bx	lr

0000d3f4 <__fini_array_start>:
    d3f4:	000000b5 	.word	0x000000b5
