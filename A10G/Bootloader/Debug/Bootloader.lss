
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cc24  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c4  20000000  0000cc24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d04  200000c4  0000cce8  000200c4  2**2
                  ALLOC
  3 .stack        00002000  20000dc8  0000d9ec  000200c4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d88f  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006238  00000000  00000000  0006d9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005ba3  00000000  00000000  00073c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010c0  00000000  00000000  000797af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e90  00000000  00000000  0007a86f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021900  00000000  00000000  0007b6ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019b77  00000000  00000000  0009cfff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093dfb  00000000  00000000  000b6b76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003d6c  00000000  00000000  0014a974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c8 2d 00 20 e5 6d 00 00 dd 6e 00 00 dd 6e 00 00     .-. .m...n...n..
	...
      2c:	dd 6e 00 00 00 00 00 00 00 00 00 00 dd 6e 00 00     .n...........n..
      3c:	e5 01 00 00 dd 6e 00 00 dd 6e 00 00 dd 6e 00 00     .....n...n...n..
      4c:	dd 6e 00 00 dd 6e 00 00 dd 6e 00 00 dd 6e 00 00     .n...n...n...n..
      5c:	dd 6e 00 00 dd 6e 00 00 71 40 00 00 89 40 00 00     .n...n..q@...@..
      6c:	a1 40 00 00 b9 40 00 00 d1 40 00 00 e9 40 00 00     .@...@...@...@..
      7c:	dd 6e 00 00 dd 6e 00 00 dd 6e 00 00 dd 6e 00 00     .n...n...n...n..
      8c:	dd 6e 00 00 dd 6e 00 00 00 00 00 00 00 00 00 00     .n...n..........
      9c:	dd 6e 00 00 dd 6e 00 00 dd 6e 00 00 dd 6e 00 00     .n...n...n...n..
      ac:	dd 6e 00 00 00 00 00 00                             .n......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000c4 	.word	0x200000c4
      d4:	00000000 	.word	0x00000000
      d8:	0000cc24 	.word	0x0000cc24

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c8 	.word	0x200000c8
     108:	0000cc24 	.word	0x0000cc24
     10c:	0000cc24 	.word	0x0000cc24
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00006999 	.word	0x00006999
     190:	20000000 	.word	0x20000000
     194:	0000b4c5 	.word	0x0000b4c5
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000e0 	.word	0x200000e0

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000e0 	.word	0x200000e0

000001fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     208:	230f      	movs	r3, #15
     20a:	18fb      	adds	r3, r7, r3
     20c:	1dfa      	adds	r2, r7, #7
     20e:	7812      	ldrb	r2, [r2, #0]
     210:	09d2      	lsrs	r2, r2, #7
     212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     214:	230e      	movs	r3, #14
     216:	18fb      	adds	r3, r7, r3
     218:	1dfa      	adds	r2, r7, #7
     21a:	7812      	ldrb	r2, [r2, #0]
     21c:	0952      	lsrs	r2, r2, #5
     21e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     224:	230f      	movs	r3, #15
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d10f      	bne.n	24e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22e:	230f      	movs	r3, #15
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b08      	subs	r3, #8
     240:	681a      	ldr	r2, [r3, #0]
     242:	230e      	movs	r3, #14
     244:	18fb      	adds	r3, r7, r3
     246:	781b      	ldrb	r3, [r3, #0]
     248:	01db      	lsls	r3, r3, #7
     24a:	18d3      	adds	r3, r2, r3
     24c:	e000      	b.n	250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24e:	2300      	movs	r3, #0
	}
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}
     258:	41004400 	.word	0x41004400

0000025c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     268:	1dfb      	adds	r3, r7, #7
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	0018      	movs	r0, r3
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <port_get_group_from_gpio_pin+0x20>)
     270:	4798      	blx	r3
     272:	0003      	movs	r3, r0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b002      	add	sp, #8
     27a:	bd80      	pop	{r7, pc}
     27c:	000001fd 	.word	0x000001fd

00000280 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	b002      	add	sp, #8
     2a0:	bd80      	pop	{r7, pc}
	...

000002a4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	0002      	movs	r2, r0
     2ac:	1dfb      	adds	r3, r7, #7
     2ae:	701a      	strb	r2, [r3, #0]
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	0018      	movs	r0, r3
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <port_pin_set_output_level+0x50>)
     2be:	4798      	blx	r3
     2c0:	0003      	movs	r3, r0
     2c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	221f      	movs	r2, #31
     2ca:	4013      	ands	r3, r2
     2cc:	2201      	movs	r2, #1
     2ce:	409a      	lsls	r2, r3
     2d0:	0013      	movs	r3, r2
     2d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2d4:	1dbb      	adds	r3, r7, #6
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d003      	beq.n	2e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2e2:	e002      	b.n	2ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	68ba      	ldr	r2, [r7, #8]
     2e8:	615a      	str	r2, [r3, #20]
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b004      	add	sp, #16
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000025d 	.word	0x0000025d

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fe:	1d3b      	adds	r3, r7, #4
     300:	0018      	movs	r0, r3
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <system_board_init+0x44>)
     304:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     306:	1d3b      	adds	r3, r7, #4
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     30c:	1d3b      	adds	r3, r7, #4
     30e:	0019      	movs	r1, r3
     310:	2017      	movs	r0, #23
     312:	4b0b      	ldr	r3, [pc, #44]	; (340 <system_board_init+0x48>)
     314:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     316:	2101      	movs	r1, #1
     318:	2017      	movs	r0, #23
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <system_board_init+0x4c>)
     31c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     31e:	1d3b      	adds	r3, r7, #4
     320:	2200      	movs	r2, #0
     322:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     324:	1d3b      	adds	r3, r7, #4
     326:	2201      	movs	r2, #1
     328:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     32a:	1d3b      	adds	r3, r7, #4
     32c:	0019      	movs	r1, r3
     32e:	2037      	movs	r0, #55	; 0x37
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <system_board_init+0x48>)
     332:	4798      	blx	r3
}
     334:	46c0      	nop			; (mov r8, r8)
     336:	46bd      	mov	sp, r7
     338:	b002      	add	sp, #8
     33a:	bd80      	pop	{r7, pc}
     33c:	00000281 	.word	0x00000281
     340:	000034a1 	.word	0x000034a1
     344:	000002a5 	.word	0x000002a5

00000348 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     348:	b580      	push	{r7, lr}
     34a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     34c:	4b04      	ldr	r3, [pc, #16]	; (360 <system_interrupt_enable_global+0x18>)
     34e:	2201      	movs	r2, #1
     350:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     352:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     356:	b662      	cpsie	i
}
     358:	46c0      	nop			; (mov r8, r8)
     35a:	46bd      	mov	sp, r7
     35c:	bd80      	pop	{r7, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	20000009 	.word	0x20000009

00000364 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     364:	b580      	push	{r7, lr}
     366:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     368:	b672      	cpsid	i
     36a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     36e:	4b03      	ldr	r3, [pc, #12]	; (37c <system_interrupt_disable_global+0x18>)
     370:	2200      	movs	r2, #0
     372:	701a      	strb	r2, [r3, #0]
}
     374:	46c0      	nop			; (mov r8, r8)
     376:	46bd      	mov	sp, r7
     378:	bd80      	pop	{r7, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	20000009 	.word	0x20000009

00000380 <dsu_crc32_cal>:
 * \retval STATUS_ERR_BAD_ADDRESS  The address was not aligned with 4 bytes.
 
 * \retval STATUS_ERR_IO  A bus error is detected
 */
enum status_code dsu_crc32_cal(const uint32_t addr, const uint32_t len, uint32_t *pcrc32)
{
     380:	b580      	push	{r7, lr}
     382:	b084      	sub	sp, #16
     384:	af00      	add	r7, sp, #0
     386:	60f8      	str	r0, [r7, #12]
     388:	60b9      	str	r1, [r7, #8]
     38a:	607a      	str	r2, [r7, #4]
	if (addr & 0x00000003) {
     38c:	68fb      	ldr	r3, [r7, #12]
     38e:	2203      	movs	r2, #3
     390:	4013      	ands	r3, r2
     392:	d001      	beq.n	398 <dsu_crc32_cal+0x18>
		return STATUS_ERR_BAD_ADDRESS;
     394:	2318      	movs	r3, #24
     396:	e040      	b.n	41a <dsu_crc32_cal+0x9a>
	}

	system_interrupt_disable_global();
     398:	4b22      	ldr	r3, [pc, #136]	; (424 <dsu_crc32_cal+0xa4>)
     39a:	4798      	blx	r3
	system_peripheral_unlock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     39c:	2322      	movs	r3, #34	; 0x22
     39e:	425b      	negs	r3, r3
     3a0:	0019      	movs	r1, r3
     3a2:	2021      	movs	r0, #33	; 0x21
     3a4:	4b20      	ldr	r3, [pc, #128]	; (428 <dsu_crc32_cal+0xa8>)
     3a6:	4798      	blx	r3

	DSU->DATA.reg = *pcrc32;
     3a8:	4a20      	ldr	r2, [pc, #128]	; (42c <dsu_crc32_cal+0xac>)
     3aa:	687b      	ldr	r3, [r7, #4]
     3ac:	681b      	ldr	r3, [r3, #0]
     3ae:	60d3      	str	r3, [r2, #12]
	DSU->ADDR.reg = addr;
     3b0:	4b1e      	ldr	r3, [pc, #120]	; (42c <dsu_crc32_cal+0xac>)
     3b2:	68fa      	ldr	r2, [r7, #12]
     3b4:	605a      	str	r2, [r3, #4]
	DSU->LENGTH.reg = len;
     3b6:	4b1d      	ldr	r3, [pc, #116]	; (42c <dsu_crc32_cal+0xac>)
     3b8:	68ba      	ldr	r2, [r7, #8]
     3ba:	609a      	str	r2, [r3, #8]

	DSU->CTRL.bit.CRC = 1;
     3bc:	4a1b      	ldr	r2, [pc, #108]	; (42c <dsu_crc32_cal+0xac>)
     3be:	7813      	ldrb	r3, [r2, #0]
     3c0:	2104      	movs	r1, #4
     3c2:	430b      	orrs	r3, r1
     3c4:	7013      	strb	r3, [r2, #0]
	while ((DSU->STATUSA.reg & DSU_STATUSA_DONE) != 1) {	
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	4b18      	ldr	r3, [pc, #96]	; (42c <dsu_crc32_cal+0xac>)
     3ca:	785b      	ldrb	r3, [r3, #1]
     3cc:	b2db      	uxtb	r3, r3
     3ce:	001a      	movs	r2, r3
     3d0:	2301      	movs	r3, #1
     3d2:	4013      	ands	r3, r2
     3d4:	2b01      	cmp	r3, #1
     3d6:	d1f7      	bne.n	3c8 <dsu_crc32_cal+0x48>
	}

	if (DSU->STATUSA.reg & DSU_STATUSA_BERR) {
     3d8:	4b14      	ldr	r3, [pc, #80]	; (42c <dsu_crc32_cal+0xac>)
     3da:	785b      	ldrb	r3, [r3, #1]
     3dc:	b2db      	uxtb	r3, r3
     3de:	001a      	movs	r2, r3
     3e0:	2304      	movs	r3, #4
     3e2:	4013      	ands	r3, r2
     3e4:	d009      	beq.n	3fa <dsu_crc32_cal+0x7a>
		system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     3e6:	2322      	movs	r3, #34	; 0x22
     3e8:	425b      	negs	r3, r3
     3ea:	0019      	movs	r1, r3
     3ec:	2021      	movs	r0, #33	; 0x21
     3ee:	4b10      	ldr	r3, [pc, #64]	; (430 <dsu_crc32_cal+0xb0>)
     3f0:	4798      	blx	r3
		system_interrupt_enable_global();
     3f2:	4b10      	ldr	r3, [pc, #64]	; (434 <dsu_crc32_cal+0xb4>)
     3f4:	4798      	blx	r3
		return STATUS_ERR_IO;
     3f6:	2310      	movs	r3, #16
     3f8:	e00f      	b.n	41a <dsu_crc32_cal+0x9a>
	}

	*pcrc32 = DSU->DATA.reg;
     3fa:	4b0c      	ldr	r3, [pc, #48]	; (42c <dsu_crc32_cal+0xac>)
     3fc:	68da      	ldr	r2, [r3, #12]
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	601a      	str	r2, [r3, #0]
	DSU->STATUSA.reg = DSU_STATUSA_DONE;
     402:	4b0a      	ldr	r3, [pc, #40]	; (42c <dsu_crc32_cal+0xac>)
     404:	2201      	movs	r2, #1
     406:	705a      	strb	r2, [r3, #1]

	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     408:	2322      	movs	r3, #34	; 0x22
     40a:	425b      	negs	r3, r3
     40c:	0019      	movs	r1, r3
     40e:	2021      	movs	r0, #33	; 0x21
     410:	4b07      	ldr	r3, [pc, #28]	; (430 <dsu_crc32_cal+0xb0>)
     412:	4798      	blx	r3
	system_interrupt_enable_global();
     414:	4b07      	ldr	r3, [pc, #28]	; (434 <dsu_crc32_cal+0xb4>)
     416:	4798      	blx	r3
	return STATUS_OK;
     418:	2300      	movs	r3, #0
     41a:	0018      	movs	r0, r3
     41c:	46bd      	mov	sp, r7
     41e:	b004      	add	sp, #16
     420:	bd80      	pop	{r7, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	00000365 	.word	0x00000365
     428:	00000995 	.word	0x00000995
     42c:	41002000 	.word	0x41002000
     430:	000008fd 	.word	0x000008fd
     434:	00000349 	.word	0x00000349

00000438 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     438:	b580      	push	{r7, lr}
     43a:	b082      	sub	sp, #8
     43c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     43e:	4b07      	ldr	r3, [pc, #28]	; (45c <nvm_is_ready+0x24>)
     440:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     442:	687b      	ldr	r3, [r7, #4]
     444:	7d1b      	ldrb	r3, [r3, #20]
     446:	b2db      	uxtb	r3, r3
     448:	001a      	movs	r2, r3
     44a:	2301      	movs	r3, #1
     44c:	4013      	ands	r3, r2
     44e:	1e5a      	subs	r2, r3, #1
     450:	4193      	sbcs	r3, r2
     452:	b2db      	uxtb	r3, r3
}
     454:	0018      	movs	r0, r3
     456:	46bd      	mov	sp, r7
     458:	b002      	add	sp, #8
     45a:	bd80      	pop	{r7, pc}
     45c:	41004000 	.word	0x41004000

00000460 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	0002      	movs	r2, r0
     468:	6039      	str	r1, [r7, #0]
     46a:	1dfb      	adds	r3, r7, #7
     46c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     46e:	1dfb      	adds	r3, r7, #7
     470:	781b      	ldrb	r3, [r3, #0]
     472:	2b01      	cmp	r3, #1
     474:	d00a      	beq.n	48c <system_apb_clock_set_mask+0x2c>
     476:	2b02      	cmp	r3, #2
     478:	d00f      	beq.n	49a <system_apb_clock_set_mask+0x3a>
     47a:	2b00      	cmp	r3, #0
     47c:	d114      	bne.n	4a8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     47e:	4b0e      	ldr	r3, [pc, #56]	; (4b8 <system_apb_clock_set_mask+0x58>)
     480:	4a0d      	ldr	r2, [pc, #52]	; (4b8 <system_apb_clock_set_mask+0x58>)
     482:	6991      	ldr	r1, [r2, #24]
     484:	683a      	ldr	r2, [r7, #0]
     486:	430a      	orrs	r2, r1
     488:	619a      	str	r2, [r3, #24]
			break;
     48a:	e00f      	b.n	4ac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     48c:	4b0a      	ldr	r3, [pc, #40]	; (4b8 <system_apb_clock_set_mask+0x58>)
     48e:	4a0a      	ldr	r2, [pc, #40]	; (4b8 <system_apb_clock_set_mask+0x58>)
     490:	69d1      	ldr	r1, [r2, #28]
     492:	683a      	ldr	r2, [r7, #0]
     494:	430a      	orrs	r2, r1
     496:	61da      	str	r2, [r3, #28]
			break;
     498:	e008      	b.n	4ac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     49a:	4b07      	ldr	r3, [pc, #28]	; (4b8 <system_apb_clock_set_mask+0x58>)
     49c:	4a06      	ldr	r2, [pc, #24]	; (4b8 <system_apb_clock_set_mask+0x58>)
     49e:	6a11      	ldr	r1, [r2, #32]
     4a0:	683a      	ldr	r2, [r7, #0]
     4a2:	430a      	orrs	r2, r1
     4a4:	621a      	str	r2, [r3, #32]
			break;
     4a6:	e001      	b.n	4ac <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     4a8:	2317      	movs	r3, #23
     4aa:	e000      	b.n	4ae <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     4ac:	2300      	movs	r3, #0
}
     4ae:	0018      	movs	r0, r3
     4b0:	46bd      	mov	sp, r7
     4b2:	b002      	add	sp, #8
     4b4:	bd80      	pop	{r7, pc}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	40000400 	.word	0x40000400

000004bc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     4bc:	b580      	push	{r7, lr}
     4be:	b084      	sub	sp, #16
     4c0:	af00      	add	r7, sp, #0
     4c2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     4c4:	4b2f      	ldr	r3, [pc, #188]	; (584 <nvm_set_config+0xc8>)
     4c6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     4c8:	2104      	movs	r1, #4
     4ca:	2001      	movs	r0, #1
     4cc:	4b2e      	ldr	r3, [pc, #184]	; (588 <nvm_set_config+0xcc>)
     4ce:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     4d0:	68fb      	ldr	r3, [r7, #12]
     4d2:	2220      	movs	r2, #32
     4d4:	32ff      	adds	r2, #255	; 0xff
     4d6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     4d8:	4b2c      	ldr	r3, [pc, #176]	; (58c <nvm_set_config+0xd0>)
     4da:	4798      	blx	r3
     4dc:	0003      	movs	r3, r0
     4de:	001a      	movs	r2, r3
     4e0:	2301      	movs	r3, #1
     4e2:	4053      	eors	r3, r2
     4e4:	b2db      	uxtb	r3, r3
     4e6:	2b00      	cmp	r3, #0
     4e8:	d001      	beq.n	4ee <nvm_set_config+0x32>
		return STATUS_BUSY;
     4ea:	2305      	movs	r3, #5
     4ec:	e045      	b.n	57a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     4ee:	687b      	ldr	r3, [r7, #4]
     4f0:	781b      	ldrb	r3, [r3, #0]
     4f2:	021b      	lsls	r3, r3, #8
     4f4:	001a      	movs	r2, r3
     4f6:	23c0      	movs	r3, #192	; 0xc0
     4f8:	009b      	lsls	r3, r3, #2
     4fa:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	785b      	ldrb	r3, [r3, #1]
     500:	01db      	lsls	r3, r3, #7
     502:	0019      	movs	r1, r3
     504:	23ff      	movs	r3, #255	; 0xff
     506:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     508:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	789b      	ldrb	r3, [r3, #2]
     50e:	005b      	lsls	r3, r3, #1
     510:	0019      	movs	r1, r3
     512:	231e      	movs	r3, #30
     514:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     516:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     518:	687b      	ldr	r3, [r7, #4]
     51a:	78db      	ldrb	r3, [r3, #3]
     51c:	049b      	lsls	r3, r3, #18
     51e:	0019      	movs	r1, r3
     520:	2380      	movs	r3, #128	; 0x80
     522:	02db      	lsls	r3, r3, #11
     524:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     526:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     528:	687b      	ldr	r3, [r7, #4]
     52a:	791b      	ldrb	r3, [r3, #4]
     52c:	041b      	lsls	r3, r3, #16
     52e:	0019      	movs	r1, r3
     530:	23c0      	movs	r3, #192	; 0xc0
     532:	029b      	lsls	r3, r3, #10
     534:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     536:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     538:	68fb      	ldr	r3, [r7, #12]
     53a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     53c:	68fb      	ldr	r3, [r7, #12]
     53e:	689b      	ldr	r3, [r3, #8]
     540:	035b      	lsls	r3, r3, #13
     542:	0f5b      	lsrs	r3, r3, #29
     544:	b2db      	uxtb	r3, r3
     546:	001a      	movs	r2, r3
     548:	2308      	movs	r3, #8
     54a:	4093      	lsls	r3, r2
     54c:	b29a      	uxth	r2, r3
     54e:	4b10      	ldr	r3, [pc, #64]	; (590 <nvm_set_config+0xd4>)
     550:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     552:	68fb      	ldr	r3, [r7, #12]
     554:	689b      	ldr	r3, [r3, #8]
     556:	b29a      	uxth	r2, r3
     558:	4b0d      	ldr	r3, [pc, #52]	; (590 <nvm_set_config+0xd4>)
     55a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     55c:	687b      	ldr	r3, [r7, #4]
     55e:	785a      	ldrb	r2, [r3, #1]
     560:	4b0b      	ldr	r3, [pc, #44]	; (590 <nvm_set_config+0xd4>)
     562:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     564:	68fb      	ldr	r3, [r7, #12]
     566:	8b1b      	ldrh	r3, [r3, #24]
     568:	b29b      	uxth	r3, r3
     56a:	001a      	movs	r2, r3
     56c:	2380      	movs	r3, #128	; 0x80
     56e:	005b      	lsls	r3, r3, #1
     570:	4013      	ands	r3, r2
     572:	d001      	beq.n	578 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     574:	2310      	movs	r3, #16
     576:	e000      	b.n	57a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     578:	2300      	movs	r3, #0
}
     57a:	0018      	movs	r0, r3
     57c:	46bd      	mov	sp, r7
     57e:	b004      	add	sp, #16
     580:	bd80      	pop	{r7, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	41004000 	.word	0x41004000
     588:	00000461 	.word	0x00000461
     58c:	00000439 	.word	0x00000439
     590:	200000e4 	.word	0x200000e4

00000594 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     594:	b580      	push	{r7, lr}
     596:	b086      	sub	sp, #24
     598:	af00      	add	r7, sp, #0
     59a:	60b9      	str	r1, [r7, #8]
     59c:	607a      	str	r2, [r7, #4]
     59e:	230f      	movs	r3, #15
     5a0:	18fb      	adds	r3, r7, r3
     5a2:	1c02      	adds	r2, r0, #0
     5a4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     5a6:	4b3a      	ldr	r3, [pc, #232]	; (690 <nvm_execute_command+0xfc>)
     5a8:	881b      	ldrh	r3, [r3, #0]
     5aa:	001a      	movs	r2, r3
     5ac:	4b38      	ldr	r3, [pc, #224]	; (690 <nvm_execute_command+0xfc>)
     5ae:	885b      	ldrh	r3, [r3, #2]
     5b0:	435a      	muls	r2, r3
     5b2:	68bb      	ldr	r3, [r7, #8]
     5b4:	429a      	cmp	r2, r3
     5b6:	d209      	bcs.n	5cc <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     5b8:	68bb      	ldr	r3, [r7, #8]
     5ba:	4a36      	ldr	r2, [pc, #216]	; (694 <nvm_execute_command+0x100>)
     5bc:	4293      	cmp	r3, r2
     5be:	d903      	bls.n	5c8 <nvm_execute_command+0x34>
     5c0:	68bb      	ldr	r3, [r7, #8]
     5c2:	4a35      	ldr	r2, [pc, #212]	; (698 <nvm_execute_command+0x104>)
     5c4:	4293      	cmp	r3, r2
     5c6:	d901      	bls.n	5cc <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     5c8:	2318      	movs	r3, #24
     5ca:	e05c      	b.n	686 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     5cc:	4b33      	ldr	r3, [pc, #204]	; (69c <nvm_execute_command+0x108>)
     5ce:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     5d0:	697b      	ldr	r3, [r7, #20]
     5d2:	685b      	ldr	r3, [r3, #4]
     5d4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     5d6:	693b      	ldr	r3, [r7, #16]
     5d8:	2280      	movs	r2, #128	; 0x80
     5da:	02d2      	lsls	r2, r2, #11
     5dc:	431a      	orrs	r2, r3
     5de:	697b      	ldr	r3, [r7, #20]
     5e0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     5e2:	697b      	ldr	r3, [r7, #20]
     5e4:	2220      	movs	r2, #32
     5e6:	32ff      	adds	r2, #255	; 0xff
     5e8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     5ea:	4b2d      	ldr	r3, [pc, #180]	; (6a0 <nvm_execute_command+0x10c>)
     5ec:	4798      	blx	r3
     5ee:	0003      	movs	r3, r0
     5f0:	001a      	movs	r2, r3
     5f2:	2301      	movs	r3, #1
     5f4:	4053      	eors	r3, r2
     5f6:	b2db      	uxtb	r3, r3
     5f8:	2b00      	cmp	r3, #0
     5fa:	d004      	beq.n	606 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     5fc:	697b      	ldr	r3, [r7, #20]
     5fe:	693a      	ldr	r2, [r7, #16]
     600:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
     602:	2305      	movs	r3, #5
     604:	e03f      	b.n	686 <nvm_execute_command+0xf2>
	}

	switch (command) {
     606:	230f      	movs	r3, #15
     608:	18fb      	adds	r3, r7, r3
     60a:	781b      	ldrb	r3, [r3, #0]
     60c:	2b45      	cmp	r3, #69	; 0x45
     60e:	d81d      	bhi.n	64c <nvm_execute_command+0xb8>
     610:	009a      	lsls	r2, r3, #2
     612:	4b24      	ldr	r3, [pc, #144]	; (6a4 <nvm_execute_command+0x110>)
     614:	18d3      	adds	r3, r2, r3
     616:	681b      	ldr	r3, [r3, #0]
     618:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     61a:	697b      	ldr	r3, [r7, #20]
     61c:	8b1b      	ldrh	r3, [r3, #24]
     61e:	b29b      	uxth	r3, r3
     620:	001a      	movs	r2, r3
     622:	2380      	movs	r3, #128	; 0x80
     624:	005b      	lsls	r3, r3, #1
     626:	4013      	ands	r3, r2
     628:	d004      	beq.n	634 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
     62a:	697b      	ldr	r3, [r7, #20]
     62c:	693a      	ldr	r2, [r7, #16]
     62e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
     630:	2310      	movs	r3, #16
     632:	e028      	b.n	686 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     634:	68bb      	ldr	r3, [r7, #8]
     636:	089b      	lsrs	r3, r3, #2
     638:	005a      	lsls	r2, r3, #1
     63a:	697b      	ldr	r3, [r7, #20]
     63c:	61da      	str	r2, [r3, #28]
			break;
     63e:	e00b      	b.n	658 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     640:	68bb      	ldr	r3, [r7, #8]
     642:	089b      	lsrs	r3, r3, #2
     644:	005a      	lsls	r2, r3, #1
     646:	697b      	ldr	r3, [r7, #20]
     648:	61da      	str	r2, [r3, #28]
			break;
     64a:	e005      	b.n	658 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
     64c:	697b      	ldr	r3, [r7, #20]
     64e:	693a      	ldr	r2, [r7, #16]
     650:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     652:	2317      	movs	r3, #23
     654:	e017      	b.n	686 <nvm_execute_command+0xf2>
			break;
     656:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     658:	230f      	movs	r3, #15
     65a:	18fb      	adds	r3, r7, r3
     65c:	781b      	ldrb	r3, [r3, #0]
     65e:	b29b      	uxth	r3, r3
     660:	4a11      	ldr	r2, [pc, #68]	; (6a8 <nvm_execute_command+0x114>)
     662:	4313      	orrs	r3, r2
     664:	b29a      	uxth	r2, r3
     666:	697b      	ldr	r3, [r7, #20]
     668:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	4b0c      	ldr	r3, [pc, #48]	; (6a0 <nvm_execute_command+0x10c>)
     66e:	4798      	blx	r3
     670:	0003      	movs	r3, r0
     672:	001a      	movs	r2, r3
     674:	2301      	movs	r3, #1
     676:	4053      	eors	r3, r2
     678:	b2db      	uxtb	r3, r3
     67a:	2b00      	cmp	r3, #0
     67c:	d1f6      	bne.n	66c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
     67e:	697b      	ldr	r3, [r7, #20]
     680:	693a      	ldr	r2, [r7, #16]
     682:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     684:	2300      	movs	r3, #0
}
     686:	0018      	movs	r0, r3
     688:	46bd      	mov	sp, r7
     68a:	b006      	add	sp, #24
     68c:	bd80      	pop	{r7, pc}
     68e:	46c0      	nop			; (mov r8, r8)
     690:	200000e4 	.word	0x200000e4
     694:	00803fff 	.word	0x00803fff
     698:	00806000 	.word	0x00806000
     69c:	41004000 	.word	0x41004000
     6a0:	00000439 	.word	0x00000439
     6a4:	0000c03c 	.word	0x0000c03c
     6a8:	ffffa500 	.word	0xffffa500

000006ac <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     6ac:	b580      	push	{r7, lr}
     6ae:	b088      	sub	sp, #32
     6b0:	af00      	add	r7, sp, #0
     6b2:	60f8      	str	r0, [r7, #12]
     6b4:	60b9      	str	r1, [r7, #8]
     6b6:	1dbb      	adds	r3, r7, #6
     6b8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     6ba:	4b4a      	ldr	r3, [pc, #296]	; (7e4 <nvm_write_buffer+0x138>)
     6bc:	881b      	ldrh	r3, [r3, #0]
     6be:	001a      	movs	r2, r3
     6c0:	4b48      	ldr	r3, [pc, #288]	; (7e4 <nvm_write_buffer+0x138>)
     6c2:	885b      	ldrh	r3, [r3, #2]
     6c4:	435a      	muls	r2, r3
	if (destination_address >
     6c6:	68fb      	ldr	r3, [r7, #12]
     6c8:	429a      	cmp	r2, r3
     6ca:	d201      	bcs.n	6d0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     6cc:	2318      	movs	r3, #24
     6ce:	e084      	b.n	7da <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     6d0:	4b44      	ldr	r3, [pc, #272]	; (7e4 <nvm_write_buffer+0x138>)
     6d2:	881b      	ldrh	r3, [r3, #0]
     6d4:	3b01      	subs	r3, #1
     6d6:	001a      	movs	r2, r3
     6d8:	68fb      	ldr	r3, [r7, #12]
     6da:	4013      	ands	r3, r2
     6dc:	d001      	beq.n	6e2 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
     6de:	2318      	movs	r3, #24
     6e0:	e07b      	b.n	7da <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
     6e2:	4b40      	ldr	r3, [pc, #256]	; (7e4 <nvm_write_buffer+0x138>)
     6e4:	881b      	ldrh	r3, [r3, #0]
     6e6:	1dba      	adds	r2, r7, #6
     6e8:	8812      	ldrh	r2, [r2, #0]
     6ea:	429a      	cmp	r2, r3
     6ec:	d901      	bls.n	6f2 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
     6ee:	2317      	movs	r3, #23
     6f0:	e073      	b.n	7da <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     6f2:	4b3d      	ldr	r3, [pc, #244]	; (7e8 <nvm_write_buffer+0x13c>)
     6f4:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     6f6:	4b3d      	ldr	r3, [pc, #244]	; (7ec <nvm_write_buffer+0x140>)
     6f8:	4798      	blx	r3
     6fa:	0003      	movs	r3, r0
     6fc:	001a      	movs	r2, r3
     6fe:	2301      	movs	r3, #1
     700:	4053      	eors	r3, r2
     702:	b2db      	uxtb	r3, r3
     704:	2b00      	cmp	r3, #0
     706:	d001      	beq.n	70c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
     708:	2305      	movs	r3, #5
     70a:	e066      	b.n	7da <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     70c:	697b      	ldr	r3, [r7, #20]
     70e:	4a38      	ldr	r2, [pc, #224]	; (7f0 <nvm_write_buffer+0x144>)
     710:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     712:	46c0      	nop			; (mov r8, r8)
     714:	4b35      	ldr	r3, [pc, #212]	; (7ec <nvm_write_buffer+0x140>)
     716:	4798      	blx	r3
     718:	0003      	movs	r3, r0
     71a:	001a      	movs	r2, r3
     71c:	2301      	movs	r3, #1
     71e:	4053      	eors	r3, r2
     720:	b2db      	uxtb	r3, r3
     722:	2b00      	cmp	r3, #0
     724:	d1f6      	bne.n	714 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     726:	697b      	ldr	r3, [r7, #20]
     728:	2220      	movs	r2, #32
     72a:	32ff      	adds	r2, #255	; 0xff
     72c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
     72e:	68fb      	ldr	r3, [r7, #12]
     730:	085b      	lsrs	r3, r3, #1
     732:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     734:	231a      	movs	r3, #26
     736:	18fb      	adds	r3, r7, r3
     738:	2200      	movs	r2, #0
     73a:	801a      	strh	r2, [r3, #0]
     73c:	e032      	b.n	7a4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     73e:	231a      	movs	r3, #26
     740:	18fb      	adds	r3, r7, r3
     742:	881b      	ldrh	r3, [r3, #0]
     744:	68ba      	ldr	r2, [r7, #8]
     746:	18d3      	adds	r3, r2, r3
     748:	781a      	ldrb	r2, [r3, #0]
     74a:	2318      	movs	r3, #24
     74c:	18fb      	adds	r3, r7, r3
     74e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     750:	231a      	movs	r3, #26
     752:	18fb      	adds	r3, r7, r3
     754:	881a      	ldrh	r2, [r3, #0]
     756:	1dbb      	adds	r3, r7, #6
     758:	881b      	ldrh	r3, [r3, #0]
     75a:	3b01      	subs	r3, #1
     75c:	429a      	cmp	r2, r3
     75e:	da11      	bge.n	784 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
     760:	231a      	movs	r3, #26
     762:	18fb      	adds	r3, r7, r3
     764:	881b      	ldrh	r3, [r3, #0]
     766:	3301      	adds	r3, #1
     768:	68ba      	ldr	r2, [r7, #8]
     76a:	18d3      	adds	r3, r2, r3
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	021b      	lsls	r3, r3, #8
     770:	b21a      	sxth	r2, r3
     772:	2318      	movs	r3, #24
     774:	18fb      	adds	r3, r7, r3
     776:	2100      	movs	r1, #0
     778:	5e5b      	ldrsh	r3, [r3, r1]
     77a:	4313      	orrs	r3, r2
     77c:	b21a      	sxth	r2, r3
     77e:	2318      	movs	r3, #24
     780:	18fb      	adds	r3, r7, r3
     782:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     784:	69fb      	ldr	r3, [r7, #28]
     786:	1c5a      	adds	r2, r3, #1
     788:	61fa      	str	r2, [r7, #28]
     78a:	005b      	lsls	r3, r3, #1
     78c:	001a      	movs	r2, r3
     78e:	2318      	movs	r3, #24
     790:	18fb      	adds	r3, r7, r3
     792:	881b      	ldrh	r3, [r3, #0]
     794:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     796:	231a      	movs	r3, #26
     798:	18fb      	adds	r3, r7, r3
     79a:	221a      	movs	r2, #26
     79c:	18ba      	adds	r2, r7, r2
     79e:	8812      	ldrh	r2, [r2, #0]
     7a0:	3202      	adds	r2, #2
     7a2:	801a      	strh	r2, [r3, #0]
     7a4:	231a      	movs	r3, #26
     7a6:	18fa      	adds	r2, r7, r3
     7a8:	1dbb      	adds	r3, r7, #6
     7aa:	8812      	ldrh	r2, [r2, #0]
     7ac:	881b      	ldrh	r3, [r3, #0]
     7ae:	429a      	cmp	r2, r3
     7b0:	d3c5      	bcc.n	73e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     7b2:	4b0c      	ldr	r3, [pc, #48]	; (7e4 <nvm_write_buffer+0x138>)
     7b4:	791b      	ldrb	r3, [r3, #4]
     7b6:	2201      	movs	r2, #1
     7b8:	4053      	eors	r3, r2
     7ba:	b2db      	uxtb	r3, r3
     7bc:	2b00      	cmp	r3, #0
     7be:	d00b      	beq.n	7d8 <nvm_write_buffer+0x12c>
     7c0:	1dbb      	adds	r3, r7, #6
     7c2:	881b      	ldrh	r3, [r3, #0]
     7c4:	2b3f      	cmp	r3, #63	; 0x3f
     7c6:	d807      	bhi.n	7d8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     7c8:	68fb      	ldr	r3, [r7, #12]
     7ca:	2200      	movs	r2, #0
     7cc:	0019      	movs	r1, r3
     7ce:	2004      	movs	r0, #4
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <nvm_write_buffer+0x148>)
     7d2:	4798      	blx	r3
     7d4:	0003      	movs	r3, r0
     7d6:	e000      	b.n	7da <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     7d8:	2300      	movs	r3, #0
}
     7da:	0018      	movs	r0, r3
     7dc:	46bd      	mov	sp, r7
     7de:	b008      	add	sp, #32
     7e0:	bd80      	pop	{r7, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	200000e4 	.word	0x200000e4
     7e8:	41004000 	.word	0x41004000
     7ec:	00000439 	.word	0x00000439
     7f0:	ffffa544 	.word	0xffffa544
     7f4:	00000595 	.word	0x00000595

000007f8 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     800:	4b23      	ldr	r3, [pc, #140]	; (890 <nvm_erase_row+0x98>)
     802:	881b      	ldrh	r3, [r3, #0]
     804:	001a      	movs	r2, r3
     806:	4b22      	ldr	r3, [pc, #136]	; (890 <nvm_erase_row+0x98>)
     808:	885b      	ldrh	r3, [r3, #2]
     80a:	435a      	muls	r2, r3
	if (row_address >
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	429a      	cmp	r2, r3
     810:	d201      	bcs.n	816 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     812:	2318      	movs	r3, #24
     814:	e037      	b.n	886 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     816:	4b1e      	ldr	r3, [pc, #120]	; (890 <nvm_erase_row+0x98>)
     818:	881b      	ldrh	r3, [r3, #0]
     81a:	009b      	lsls	r3, r3, #2
     81c:	3b01      	subs	r3, #1
     81e:	001a      	movs	r2, r3
     820:	687b      	ldr	r3, [r7, #4]
     822:	4013      	ands	r3, r2
     824:	d001      	beq.n	82a <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
     826:	2318      	movs	r3, #24
     828:	e02d      	b.n	886 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     82a:	4b1a      	ldr	r3, [pc, #104]	; (894 <nvm_erase_row+0x9c>)
     82c:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     82e:	4b1a      	ldr	r3, [pc, #104]	; (898 <nvm_erase_row+0xa0>)
     830:	4798      	blx	r3
     832:	0003      	movs	r3, r0
     834:	001a      	movs	r2, r3
     836:	2301      	movs	r3, #1
     838:	4053      	eors	r3, r2
     83a:	b2db      	uxtb	r3, r3
     83c:	2b00      	cmp	r3, #0
     83e:	d001      	beq.n	844 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
     840:	2305      	movs	r3, #5
     842:	e020      	b.n	886 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     844:	68fb      	ldr	r3, [r7, #12]
     846:	2220      	movs	r2, #32
     848:	32ff      	adds	r2, #255	; 0xff
     84a:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	089b      	lsrs	r3, r3, #2
     850:	005a      	lsls	r2, r3, #1
     852:	68fb      	ldr	r3, [r7, #12]
     854:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     856:	68fb      	ldr	r3, [r7, #12]
     858:	4a10      	ldr	r2, [pc, #64]	; (89c <nvm_erase_row+0xa4>)
     85a:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
     85c:	46c0      	nop			; (mov r8, r8)
     85e:	4b0e      	ldr	r3, [pc, #56]	; (898 <nvm_erase_row+0xa0>)
     860:	4798      	blx	r3
     862:	0003      	movs	r3, r0
     864:	001a      	movs	r2, r3
     866:	2301      	movs	r3, #1
     868:	4053      	eors	r3, r2
     86a:	b2db      	uxtb	r3, r3
     86c:	2b00      	cmp	r3, #0
     86e:	d1f6      	bne.n	85e <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     870:	68fb      	ldr	r3, [r7, #12]
     872:	8b1b      	ldrh	r3, [r3, #24]
     874:	b29b      	uxth	r3, r3
     876:	b2db      	uxtb	r3, r3
     878:	001a      	movs	r2, r3
     87a:	231c      	movs	r3, #28
     87c:	4013      	ands	r3, r2
     87e:	d001      	beq.n	884 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
     880:	2304      	movs	r3, #4
     882:	e000      	b.n	886 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
     884:	2300      	movs	r3, #0
}
     886:	0018      	movs	r0, r3
     888:	46bd      	mov	sp, r7
     88a:	b004      	add	sp, #16
     88c:	bd80      	pop	{r7, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	200000e4 	.word	0x200000e4
     894:	41004000 	.word	0x41004000
     898:	00000439 	.word	0x00000439
     89c:	ffffa502 	.word	0xffffa502

000008a0 <system_apb_clock_set_mask>:
{
     8a0:	b580      	push	{r7, lr}
     8a2:	b082      	sub	sp, #8
     8a4:	af00      	add	r7, sp, #0
     8a6:	0002      	movs	r2, r0
     8a8:	6039      	str	r1, [r7, #0]
     8aa:	1dfb      	adds	r3, r7, #7
     8ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     8ae:	1dfb      	adds	r3, r7, #7
     8b0:	781b      	ldrb	r3, [r3, #0]
     8b2:	2b01      	cmp	r3, #1
     8b4:	d00a      	beq.n	8cc <system_apb_clock_set_mask+0x2c>
     8b6:	2b02      	cmp	r3, #2
     8b8:	d00f      	beq.n	8da <system_apb_clock_set_mask+0x3a>
     8ba:	2b00      	cmp	r3, #0
     8bc:	d114      	bne.n	8e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     8be:	4b0e      	ldr	r3, [pc, #56]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8c0:	4a0d      	ldr	r2, [pc, #52]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8c2:	6991      	ldr	r1, [r2, #24]
     8c4:	683a      	ldr	r2, [r7, #0]
     8c6:	430a      	orrs	r2, r1
     8c8:	619a      	str	r2, [r3, #24]
			break;
     8ca:	e00f      	b.n	8ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     8cc:	4b0a      	ldr	r3, [pc, #40]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8ce:	4a0a      	ldr	r2, [pc, #40]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8d0:	69d1      	ldr	r1, [r2, #28]
     8d2:	683a      	ldr	r2, [r7, #0]
     8d4:	430a      	orrs	r2, r1
     8d6:	61da      	str	r2, [r3, #28]
			break;
     8d8:	e008      	b.n	8ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     8da:	4b07      	ldr	r3, [pc, #28]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8dc:	4a06      	ldr	r2, [pc, #24]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8de:	6a11      	ldr	r1, [r2, #32]
     8e0:	683a      	ldr	r2, [r7, #0]
     8e2:	430a      	orrs	r2, r1
     8e4:	621a      	str	r2, [r3, #32]
			break;
     8e6:	e001      	b.n	8ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     8e8:	2317      	movs	r3, #23
     8ea:	e000      	b.n	8ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     8ec:	2300      	movs	r3, #0
}
     8ee:	0018      	movs	r0, r3
     8f0:	46bd      	mov	sp, r7
     8f2:	b002      	add	sp, #8
     8f4:	bd80      	pop	{r7, pc}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	40000400 	.word	0x40000400

000008fc <system_peripheral_lock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_lock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
     8fc:	b580      	push	{r7, lr}
     8fe:	b084      	sub	sp, #16
     900:	af00      	add	r7, sp, #0
     902:	6078      	str	r0, [r7, #4]
     904:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
     906:	687b      	ldr	r3, [r7, #4]
     908:	b2da      	uxtb	r2, r3
     90a:	230f      	movs	r3, #15
     90c:	18fb      	adds	r3, r7, r3
     90e:	211f      	movs	r1, #31
     910:	400a      	ands	r2, r1
     912:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
     914:	687b      	ldr	r3, [r7, #4]
     916:	095a      	lsrs	r2, r3, #5
     918:	230e      	movs	r3, #14
     91a:	18fb      	adds	r3, r7, r3
     91c:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     91e:	687b      	ldr	r3, [r7, #4]
     920:	43da      	mvns	r2, r3
     922:	683b      	ldr	r3, [r7, #0]
     924:	429a      	cmp	r2, r3
     926:	d001      	beq.n	92c <system_peripheral_lock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     928:	2317      	movs	r3, #23
     92a:	e02d      	b.n	988 <system_peripheral_lock+0x8c>
	}

	switch (register_pos) {
     92c:	230e      	movs	r3, #14
     92e:	18fb      	adds	r3, r7, r3
     930:	781b      	ldrb	r3, [r3, #0]
     932:	2b01      	cmp	r3, #1
     934:	d00d      	beq.n	952 <system_peripheral_lock+0x56>
     936:	2b02      	cmp	r3, #2
     938:	d015      	beq.n	966 <system_peripheral_lock+0x6a>
     93a:	2b00      	cmp	r3, #0
     93c:	d121      	bne.n	982 <system_peripheral_lock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPSET.reg = (1 << register_bit_pos);
     93e:	2380      	movs	r3, #128	; 0x80
     940:	05db      	lsls	r3, r3, #23
     942:	220f      	movs	r2, #15
     944:	18ba      	adds	r2, r7, r2
     946:	7812      	ldrb	r2, [r2, #0]
     948:	2101      	movs	r1, #1
     94a:	4091      	lsls	r1, r2
     94c:	000a      	movs	r2, r1
     94e:	605a      	str	r2, [r3, #4]
			break;
     950:	e019      	b.n	986 <system_peripheral_lock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPSET.reg = (1 << register_bit_pos);
     952:	2382      	movs	r3, #130	; 0x82
     954:	05db      	lsls	r3, r3, #23
     956:	220f      	movs	r2, #15
     958:	18ba      	adds	r2, r7, r2
     95a:	7812      	ldrb	r2, [r2, #0]
     95c:	2101      	movs	r1, #1
     95e:	4091      	lsls	r1, r2
     960:	000a      	movs	r2, r1
     962:	605a      	str	r2, [r3, #4]
			break;
     964:	e00f      	b.n	986 <system_peripheral_lock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
     966:	2101      	movs	r1, #1
     968:	2002      	movs	r0, #2
     96a:	4b09      	ldr	r3, [pc, #36]	; (990 <system_peripheral_lock+0x94>)
     96c:	4798      	blx	r3
			PAC2->WPSET.reg = (1 << register_bit_pos);
     96e:	2384      	movs	r3, #132	; 0x84
     970:	05db      	lsls	r3, r3, #23
     972:	220f      	movs	r2, #15
     974:	18ba      	adds	r2, r7, r2
     976:	7812      	ldrb	r2, [r2, #0]
     978:	2101      	movs	r1, #1
     97a:	4091      	lsls	r1, r2
     97c:	000a      	movs	r2, r1
     97e:	605a      	str	r2, [r3, #4]
			break;
     980:	e001      	b.n	986 <system_peripheral_lock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     982:	2317      	movs	r3, #23
     984:	e000      	b.n	988 <system_peripheral_lock+0x8c>
	}

	return STATUS_OK;
     986:	2300      	movs	r3, #0
}
     988:	0018      	movs	r0, r3
     98a:	46bd      	mov	sp, r7
     98c:	b004      	add	sp, #16
     98e:	bd80      	pop	{r7, pc}
     990:	000008a1 	.word	0x000008a1

00000994 <system_peripheral_unlock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_unlock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
     994:	b580      	push	{r7, lr}
     996:	b084      	sub	sp, #16
     998:	af00      	add	r7, sp, #0
     99a:	6078      	str	r0, [r7, #4]
     99c:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	b2da      	uxtb	r2, r3
     9a2:	230f      	movs	r3, #15
     9a4:	18fb      	adds	r3, r7, r3
     9a6:	211f      	movs	r1, #31
     9a8:	400a      	ands	r2, r1
     9aa:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	095a      	lsrs	r2, r3, #5
     9b0:	230e      	movs	r3, #14
     9b2:	18fb      	adds	r3, r7, r3
     9b4:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	43da      	mvns	r2, r3
     9ba:	683b      	ldr	r3, [r7, #0]
     9bc:	429a      	cmp	r2, r3
     9be:	d001      	beq.n	9c4 <system_peripheral_unlock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     9c0:	2317      	movs	r3, #23
     9c2:	e02d      	b.n	a20 <system_peripheral_unlock+0x8c>
	}

	switch (register_pos) {
     9c4:	230e      	movs	r3, #14
     9c6:	18fb      	adds	r3, r7, r3
     9c8:	781b      	ldrb	r3, [r3, #0]
     9ca:	2b01      	cmp	r3, #1
     9cc:	d00d      	beq.n	9ea <system_peripheral_unlock+0x56>
     9ce:	2b02      	cmp	r3, #2
     9d0:	d015      	beq.n	9fe <system_peripheral_unlock+0x6a>
     9d2:	2b00      	cmp	r3, #0
     9d4:	d121      	bne.n	a1a <system_peripheral_unlock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPCLR.reg = (1 << register_bit_pos);
     9d6:	2380      	movs	r3, #128	; 0x80
     9d8:	05db      	lsls	r3, r3, #23
     9da:	220f      	movs	r2, #15
     9dc:	18ba      	adds	r2, r7, r2
     9de:	7812      	ldrb	r2, [r2, #0]
     9e0:	2101      	movs	r1, #1
     9e2:	4091      	lsls	r1, r2
     9e4:	000a      	movs	r2, r1
     9e6:	601a      	str	r2, [r3, #0]
			break;
     9e8:	e019      	b.n	a1e <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPCLR.reg = (1 << register_bit_pos);
     9ea:	2382      	movs	r3, #130	; 0x82
     9ec:	05db      	lsls	r3, r3, #23
     9ee:	220f      	movs	r2, #15
     9f0:	18ba      	adds	r2, r7, r2
     9f2:	7812      	ldrb	r2, [r2, #0]
     9f4:	2101      	movs	r1, #1
     9f6:	4091      	lsls	r1, r2
     9f8:	000a      	movs	r2, r1
     9fa:	601a      	str	r2, [r3, #0]
			break;
     9fc:	e00f      	b.n	a1e <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
     9fe:	2101      	movs	r1, #1
     a00:	2002      	movs	r0, #2
     a02:	4b09      	ldr	r3, [pc, #36]	; (a28 <system_peripheral_unlock+0x94>)
     a04:	4798      	blx	r3
			PAC2->WPCLR.reg = (1 << register_bit_pos);
     a06:	2384      	movs	r3, #132	; 0x84
     a08:	05db      	lsls	r3, r3, #23
     a0a:	220f      	movs	r2, #15
     a0c:	18ba      	adds	r2, r7, r2
     a0e:	7812      	ldrb	r2, [r2, #0]
     a10:	2101      	movs	r1, #1
     a12:	4091      	lsls	r1, r2
     a14:	000a      	movs	r2, r1
     a16:	601a      	str	r2, [r3, #0]
			break;
     a18:	e001      	b.n	a1e <system_peripheral_unlock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     a1a:	2317      	movs	r3, #23
     a1c:	e000      	b.n	a20 <system_peripheral_unlock+0x8c>
	}

	return STATUS_OK;
     a1e:	2300      	movs	r3, #0
}
     a20:	0018      	movs	r0, r3
     a22:	46bd      	mov	sp, r7
     a24:	b004      	add	sp, #16
     a26:	bd80      	pop	{r7, pc}
     a28:	000008a1 	.word	0x000008a1

00000a2c <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     a2c:	b590      	push	{r4, r7, lr}
     a2e:	b083      	sub	sp, #12
     a30:	af00      	add	r7, sp, #0
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     a32:	4b16      	ldr	r3, [pc, #88]	; (a8c <SdCard_Initiate+0x60>)
     a34:	4798      	blx	r3
     a36:	0003      	movs	r3, r0
     a38:	603b      	str	r3, [r7, #0]

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     a3a:	1dfc      	adds	r4, r7, #7
     a3c:	2000      	movs	r0, #0
     a3e:	4b14      	ldr	r3, [pc, #80]	; (a90 <SdCard_Initiate+0x64>)
     a40:	4798      	blx	r3
     a42:	0003      	movs	r3, r0
     a44:	7023      	strb	r3, [r4, #0]
	if (CTRL_FAIL == status) {
     a46:	1dfb      	adds	r3, r7, #7
     a48:	781b      	ldrb	r3, [r3, #0]
     a4a:	2b01      	cmp	r3, #1
     a4c:	d106      	bne.n	a5c <SdCard_Initiate+0x30>
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	2000      	movs	r0, #0
     a52:	4b10      	ldr	r3, [pc, #64]	; (a94 <SdCard_Initiate+0x68>)
     a54:	4798      	blx	r3
     a56:	0003      	movs	r3, r0
     a58:	2b02      	cmp	r3, #2
     a5a:	d1f9      	bne.n	a50 <SdCard_Initiate+0x24>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     a5c:	4b0b      	ldr	r3, [pc, #44]	; (a8c <SdCard_Initiate+0x60>)
     a5e:	4798      	blx	r3
     a60:	0002      	movs	r2, r0
     a62:	683b      	ldr	r3, [r7, #0]
     a64:	1ad2      	subs	r2, r2, r3
     a66:	23fa      	movs	r3, #250	; 0xfa
     a68:	005b      	lsls	r3, r3, #1
     a6a:	429a      	cmp	r2, r3
     a6c:	d903      	bls.n	a76 <SdCard_Initiate+0x4a>
	{
		status = CTRL_FAIL;
     a6e:	1dfb      	adds	r3, r7, #7
     a70:	2201      	movs	r2, #1
     a72:	701a      	strb	r2, [r3, #0]
		break;
     a74:	e003      	b.n	a7e <SdCard_Initiate+0x52>
	}
} while (CTRL_GOOD != status );
     a76:	1dfb      	adds	r3, r7, #7
     a78:	781b      	ldrb	r3, [r3, #0]
     a7a:	2b00      	cmp	r3, #0
     a7c:	d1dd      	bne.n	a3a <SdCard_Initiate+0xe>

return status;
     a7e:	1dfb      	adds	r3, r7, #7
     a80:	781b      	ldrb	r3, [r3, #0]
}
     a82:	0018      	movs	r0, r3
     a84:	46bd      	mov	sp, r7
     a86:	b003      	add	sp, #12
     a88:	bd90      	pop	{r4, r7, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	000001d1 	.word	0x000001d1
     a90:	000022d5 	.word	0x000022d5
     a94:	00001e49 	.word	0x00001e49

00000a98 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     a98:	b580      	push	{r7, lr}
     a9a:	b082      	sub	sp, #8
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     aa0:	687b      	ldr	r3, [r7, #4]
     aa2:	7c1b      	ldrb	r3, [r3, #16]
     aa4:	2b00      	cmp	r3, #0
     aa6:	d00b      	beq.n	ac0 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	689b      	ldr	r3, [r3, #8]
     aac:	1c5a      	adds	r2, r3, #1
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	68d9      	ldr	r1, [r3, #12]
     ab2:	4b10      	ldr	r3, [pc, #64]	; (af4 <advance_pointer+0x5c>)
     ab4:	0010      	movs	r0, r2
     ab6:	4798      	blx	r3
     ab8:	000b      	movs	r3, r1
     aba:	001a      	movs	r2, r3
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	685b      	ldr	r3, [r3, #4]
     ac4:	1c5a      	adds	r2, r3, #1
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	68d9      	ldr	r1, [r3, #12]
     aca:	4b0a      	ldr	r3, [pc, #40]	; (af4 <advance_pointer+0x5c>)
     acc:	0010      	movs	r0, r2
     ace:	4798      	blx	r3
     ad0:	000b      	movs	r3, r1
     ad2:	001a      	movs	r2, r3
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	685a      	ldr	r2, [r3, #4]
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	689b      	ldr	r3, [r3, #8]
     ae0:	1ad3      	subs	r3, r2, r3
     ae2:	425a      	negs	r2, r3
     ae4:	4153      	adcs	r3, r2
     ae6:	b2da      	uxtb	r2, r3
     ae8:	687b      	ldr	r3, [r7, #4]
     aea:	741a      	strb	r2, [r3, #16]
 }
     aec:	46c0      	nop			; (mov r8, r8)
     aee:	46bd      	mov	sp, r7
     af0:	b002      	add	sp, #8
     af2:	bd80      	pop	{r7, pc}
     af4:	0000b5d1 	.word	0x0000b5d1

00000af8 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     af8:	b580      	push	{r7, lr}
     afa:	b082      	sub	sp, #8
     afc:	af00      	add	r7, sp, #0
     afe:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	2200      	movs	r2, #0
     b04:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	689b      	ldr	r3, [r3, #8]
     b0a:	1c5a      	adds	r2, r3, #1
     b0c:	687b      	ldr	r3, [r7, #4]
     b0e:	68d9      	ldr	r1, [r3, #12]
     b10:	4b05      	ldr	r3, [pc, #20]	; (b28 <retreat_pointer+0x30>)
     b12:	0010      	movs	r0, r2
     b14:	4798      	blx	r3
     b16:	000b      	movs	r3, r1
     b18:	001a      	movs	r2, r3
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	609a      	str	r2, [r3, #8]
 }
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	46bd      	mov	sp, r7
     b22:	b002      	add	sp, #8
     b24:	bd80      	pop	{r7, pc}
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	0000b5d1 	.word	0x0000b5d1

00000b2c <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     b2c:	b580      	push	{r7, lr}
     b2e:	b084      	sub	sp, #16
     b30:	af00      	add	r7, sp, #0
     b32:	6078      	str	r0, [r7, #4]
     b34:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     b36:	2014      	movs	r0, #20
     b38:	4b09      	ldr	r3, [pc, #36]	; (b60 <circular_buf_init+0x34>)
     b3a:	4798      	blx	r3
     b3c:	0003      	movs	r3, r0
     b3e:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     b40:	68fb      	ldr	r3, [r7, #12]
     b42:	687a      	ldr	r2, [r7, #4]
     b44:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	683a      	ldr	r2, [r7, #0]
     b4a:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     b4c:	68fb      	ldr	r3, [r7, #12]
     b4e:	0018      	movs	r0, r3
     b50:	4b04      	ldr	r3, [pc, #16]	; (b64 <circular_buf_init+0x38>)
     b52:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     b54:	68fb      	ldr	r3, [r7, #12]
 }
     b56:	0018      	movs	r0, r3
     b58:	46bd      	mov	sp, r7
     b5a:	b004      	add	sp, #16
     b5c:	bd80      	pop	{r7, pc}
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	0000b84d 	.word	0x0000b84d
     b64:	00000b69 	.word	0x00000b69

00000b68 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     b68:	b580      	push	{r7, lr}
     b6a:	b082      	sub	sp, #8
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     b70:	687b      	ldr	r3, [r7, #4]
     b72:	2200      	movs	r2, #0
     b74:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	2200      	movs	r2, #0
     b7a:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     b7c:	687b      	ldr	r3, [r7, #4]
     b7e:	2200      	movs	r2, #0
     b80:	741a      	strb	r2, [r3, #16]
 }
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	46bd      	mov	sp, r7
     b86:	b002      	add	sp, #8
     b88:	bd80      	pop	{r7, pc}
	...

00000b8c <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     b8c:	b580      	push	{r7, lr}
     b8e:	b082      	sub	sp, #8
     b90:	af00      	add	r7, sp, #0
     b92:	6078      	str	r0, [r7, #4]
     b94:	000a      	movs	r2, r1
     b96:	1cfb      	adds	r3, r7, #3
     b98:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	681a      	ldr	r2, [r3, #0]
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	685b      	ldr	r3, [r3, #4]
     ba2:	18d3      	adds	r3, r2, r3
     ba4:	1cfa      	adds	r2, r7, #3
     ba6:	7812      	ldrb	r2, [r2, #0]
     ba8:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	0018      	movs	r0, r3
     bae:	4b03      	ldr	r3, [pc, #12]	; (bbc <circular_buf_put+0x30>)
     bb0:	4798      	blx	r3
 }
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	46bd      	mov	sp, r7
     bb6:	b002      	add	sp, #8
     bb8:	bd80      	pop	{r7, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	00000a99 	.word	0x00000a99

00000bc0 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     bc0:	b580      	push	{r7, lr}
     bc2:	b084      	sub	sp, #16
     bc4:	af00      	add	r7, sp, #0
     bc6:	6078      	str	r0, [r7, #4]
     bc8:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     bca:	2301      	movs	r3, #1
     bcc:	425b      	negs	r3, r3
     bce:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     bd0:	687b      	ldr	r3, [r7, #4]
     bd2:	0018      	movs	r0, r3
     bd4:	4b0d      	ldr	r3, [pc, #52]	; (c0c <circular_buf_get+0x4c>)
     bd6:	4798      	blx	r3
     bd8:	0003      	movs	r3, r0
     bda:	001a      	movs	r2, r3
     bdc:	2301      	movs	r3, #1
     bde:	4053      	eors	r3, r2
     be0:	b2db      	uxtb	r3, r3
     be2:	2b00      	cmp	r3, #0
     be4:	d00d      	beq.n	c02 <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	681a      	ldr	r2, [r3, #0]
     bea:	687b      	ldr	r3, [r7, #4]
     bec:	689b      	ldr	r3, [r3, #8]
     bee:	18d3      	adds	r3, r2, r3
     bf0:	781a      	ldrb	r2, [r3, #0]
     bf2:	683b      	ldr	r3, [r7, #0]
     bf4:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     bf6:	687b      	ldr	r3, [r7, #4]
     bf8:	0018      	movs	r0, r3
     bfa:	4b05      	ldr	r3, [pc, #20]	; (c10 <circular_buf_get+0x50>)
     bfc:	4798      	blx	r3

		 r = 0;
     bfe:	2300      	movs	r3, #0
     c00:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     c02:	68fb      	ldr	r3, [r7, #12]
 }
     c04:	0018      	movs	r0, r3
     c06:	46bd      	mov	sp, r7
     c08:	b004      	add	sp, #16
     c0a:	bd80      	pop	{r7, pc}
     c0c:	00000c15 	.word	0x00000c15
     c10:	00000af9 	.word	0x00000af9

00000c14 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     c14:	b580      	push	{r7, lr}
     c16:	b082      	sub	sp, #8
     c18:	af00      	add	r7, sp, #0
     c1a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     c1c:	687b      	ldr	r3, [r7, #4]
     c1e:	7c1b      	ldrb	r3, [r3, #16]
     c20:	2201      	movs	r2, #1
     c22:	4053      	eors	r3, r2
     c24:	b2db      	uxtb	r3, r3
     c26:	2b00      	cmp	r3, #0
     c28:	d007      	beq.n	c3a <circular_buf_empty+0x26>
     c2a:	687b      	ldr	r3, [r7, #4]
     c2c:	685a      	ldr	r2, [r3, #4]
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	689b      	ldr	r3, [r3, #8]
     c32:	429a      	cmp	r2, r3
     c34:	d101      	bne.n	c3a <circular_buf_empty+0x26>
     c36:	2301      	movs	r3, #1
     c38:	e000      	b.n	c3c <circular_buf_empty+0x28>
     c3a:	2300      	movs	r3, #0
     c3c:	1c1a      	adds	r2, r3, #0
     c3e:	2301      	movs	r3, #1
     c40:	4013      	ands	r3, r2
     c42:	b2db      	uxtb	r3, r3
 }
     c44:	0018      	movs	r0, r3
     c46:	46bd      	mov	sp, r7
     c48:	b002      	add	sp, #8
     c4a:	bd80      	pop	{r7, pc}

00000c4c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     c4c:	b580      	push	{r7, lr}
     c4e:	b082      	sub	sp, #8
     c50:	af00      	add	r7, sp, #0
     c52:	0002      	movs	r2, r0
     c54:	1dfb      	adds	r3, r7, #7
     c56:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c58:	4b06      	ldr	r3, [pc, #24]	; (c74 <system_interrupt_enable+0x28>)
     c5a:	1dfa      	adds	r2, r7, #7
     c5c:	7812      	ldrb	r2, [r2, #0]
     c5e:	0011      	movs	r1, r2
     c60:	221f      	movs	r2, #31
     c62:	400a      	ands	r2, r1
     c64:	2101      	movs	r1, #1
     c66:	4091      	lsls	r1, r2
     c68:	000a      	movs	r2, r1
     c6a:	601a      	str	r2, [r3, #0]
}
     c6c:	46c0      	nop			; (mov r8, r8)
     c6e:	46bd      	mov	sp, r7
     c70:	b002      	add	sp, #8
     c72:	bd80      	pop	{r7, pc}
     c74:	e000e100 	.word	0xe000e100

00000c78 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     c78:	b580      	push	{r7, lr}
     c7a:	b082      	sub	sp, #8
     c7c:	af00      	add	r7, sp, #0
     c7e:	0002      	movs	r2, r0
     c80:	1dfb      	adds	r3, r7, #7
     c82:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c84:	4a07      	ldr	r2, [pc, #28]	; (ca4 <system_interrupt_disable+0x2c>)
     c86:	1dfb      	adds	r3, r7, #7
     c88:	781b      	ldrb	r3, [r3, #0]
     c8a:	0019      	movs	r1, r3
     c8c:	231f      	movs	r3, #31
     c8e:	400b      	ands	r3, r1
     c90:	2101      	movs	r1, #1
     c92:	4099      	lsls	r1, r3
     c94:	000b      	movs	r3, r1
     c96:	0019      	movs	r1, r3
     c98:	2380      	movs	r3, #128	; 0x80
     c9a:	50d1      	str	r1, [r2, r3]
}
     c9c:	46c0      	nop			; (mov r8, r8)
     c9e:	46bd      	mov	sp, r7
     ca0:	b002      	add	sp, #8
     ca2:	bd80      	pop	{r7, pc}
     ca4:	e000e100 	.word	0xe000e100

00000ca8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     ca8:	b580      	push	{r7, lr}
     caa:	b084      	sub	sp, #16
     cac:	af00      	add	r7, sp, #0
     cae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	681b      	ldr	r3, [r3, #0]
     cb4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	69db      	ldr	r3, [r3, #28]
     cba:	1e5a      	subs	r2, r3, #1
     cbc:	4193      	sbcs	r3, r2
     cbe:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     cc0:	0018      	movs	r0, r3
     cc2:	46bd      	mov	sp, r7
     cc4:	b004      	add	sp, #16
     cc6:	bd80      	pop	{r7, pc}

00000cc8 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     cc8:	b580      	push	{r7, lr}
     cca:	b082      	sub	sp, #8
     ccc:	af00      	add	r7, sp, #0
     cce:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     cd0:	46c0      	nop			; (mov r8, r8)
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	0018      	movs	r0, r3
     cd6:	4b04      	ldr	r3, [pc, #16]	; (ce8 <_usart_wait_for_sync+0x20>)
     cd8:	4798      	blx	r3
     cda:	1e03      	subs	r3, r0, #0
     cdc:	d1f9      	bne.n	cd2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	46bd      	mov	sp, r7
     ce2:	b002      	add	sp, #8
     ce4:	bd80      	pop	{r7, pc}
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	00000ca9 	.word	0x00000ca9

00000cec <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     cec:	b580      	push	{r7, lr}
     cee:	b082      	sub	sp, #8
     cf0:	af00      	add	r7, sp, #0
     cf2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	2280      	movs	r2, #128	; 0x80
     cf8:	05d2      	lsls	r2, r2, #23
     cfa:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     cfc:	687b      	ldr	r3, [r7, #4]
     cfe:	2200      	movs	r2, #0
     d00:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	22ff      	movs	r2, #255	; 0xff
     d06:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	2200      	movs	r2, #0
     d0c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	2200      	movs	r2, #0
     d12:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	2296      	movs	r2, #150	; 0x96
     d18:	0192      	lsls	r2, r2, #6
     d1a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	2224      	movs	r2, #36	; 0x24
     d20:	2101      	movs	r1, #1
     d22:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	2225      	movs	r2, #37	; 0x25
     d28:	2101      	movs	r1, #1
     d2a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	2226      	movs	r2, #38	; 0x26
     d30:	2100      	movs	r1, #0
     d32:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	2227      	movs	r2, #39	; 0x27
     d38:	2100      	movs	r1, #0
     d3a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     d3c:	687b      	ldr	r3, [r7, #4]
     d3e:	2200      	movs	r2, #0
     d40:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     d42:	687b      	ldr	r3, [r7, #4]
     d44:	2288      	movs	r2, #136	; 0x88
     d46:	0352      	lsls	r2, r2, #13
     d48:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     d4a:	687b      	ldr	r3, [r7, #4]
     d4c:	222c      	movs	r2, #44	; 0x2c
     d4e:	2100      	movs	r1, #0
     d50:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	222d      	movs	r2, #45	; 0x2d
     d56:	2100      	movs	r1, #0
     d58:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	2200      	movs	r2, #0
     d5e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	2200      	movs	r2, #0
     d64:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	2200      	movs	r2, #0
     d6a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     d6c:	687b      	ldr	r3, [r7, #4]
     d6e:	2200      	movs	r2, #0
     d70:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	2200      	movs	r2, #0
     d76:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	2200      	movs	r2, #0
     d7c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	2200      	movs	r2, #0
     d82:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     d84:	687b      	ldr	r3, [r7, #4]
     d86:	2200      	movs	r2, #0
     d88:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	2200      	movs	r2, #0
     d8e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	2200      	movs	r2, #0
     d94:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	2213      	movs	r2, #19
     d9a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	2200      	movs	r2, #0
     da0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	46bd      	mov	sp, r7
     da6:	b002      	add	sp, #8
     da8:	bd80      	pop	{r7, pc}
	...

00000dac <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     dac:	b580      	push	{r7, lr}
     dae:	b084      	sub	sp, #16
     db0:	af00      	add	r7, sp, #0
     db2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	0018      	movs	r0, r3
     dc0:	4b09      	ldr	r3, [pc, #36]	; (de8 <usart_enable+0x3c>)
     dc2:	4798      	blx	r3
     dc4:	0003      	movs	r3, r0
     dc6:	0018      	movs	r0, r3
     dc8:	4b08      	ldr	r3, [pc, #32]	; (dec <usart_enable+0x40>)
     dca:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	0018      	movs	r0, r3
     dd0:	4b07      	ldr	r3, [pc, #28]	; (df0 <usart_enable+0x44>)
     dd2:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     dd4:	68fb      	ldr	r3, [r7, #12]
     dd6:	681b      	ldr	r3, [r3, #0]
     dd8:	2202      	movs	r2, #2
     dda:	431a      	orrs	r2, r3
     ddc:	68fb      	ldr	r3, [r7, #12]
     dde:	601a      	str	r2, [r3, #0]
}
     de0:	46c0      	nop			; (mov r8, r8)
     de2:	46bd      	mov	sp, r7
     de4:	b004      	add	sp, #16
     de6:	bd80      	pop	{r7, pc}
     de8:	0000402d 	.word	0x0000402d
     dec:	00000c4d 	.word	0x00000c4d
     df0:	00000cc9 	.word	0x00000cc9

00000df4 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     df4:	b580      	push	{r7, lr}
     df6:	b084      	sub	sp, #16
     df8:	af00      	add	r7, sp, #0
     dfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     dfc:	687b      	ldr	r3, [r7, #4]
     dfe:	681b      	ldr	r3, [r3, #0]
     e00:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     e02:	687b      	ldr	r3, [r7, #4]
     e04:	681b      	ldr	r3, [r3, #0]
     e06:	0018      	movs	r0, r3
     e08:	4b0a      	ldr	r3, [pc, #40]	; (e34 <usart_disable+0x40>)
     e0a:	4798      	blx	r3
     e0c:	0003      	movs	r3, r0
     e0e:	0018      	movs	r0, r3
     e10:	4b09      	ldr	r3, [pc, #36]	; (e38 <usart_disable+0x44>)
     e12:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     e14:	687b      	ldr	r3, [r7, #4]
     e16:	0018      	movs	r0, r3
     e18:	4b08      	ldr	r3, [pc, #32]	; (e3c <usart_disable+0x48>)
     e1a:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     e1c:	68fb      	ldr	r3, [r7, #12]
     e1e:	681b      	ldr	r3, [r3, #0]
     e20:	2202      	movs	r2, #2
     e22:	4393      	bics	r3, r2
     e24:	001a      	movs	r2, r3
     e26:	68fb      	ldr	r3, [r7, #12]
     e28:	601a      	str	r2, [r3, #0]
}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	46bd      	mov	sp, r7
     e2e:	b004      	add	sp, #16
     e30:	bd80      	pop	{r7, pc}
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	0000402d 	.word	0x0000402d
     e38:	00000c79 	.word	0x00000c79
     e3c:	00000cc9 	.word	0x00000cc9

00000e40 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     e40:	b580      	push	{r7, lr}
     e42:	b082      	sub	sp, #8
     e44:	af00      	add	r7, sp, #0
     e46:	6078      	str	r0, [r7, #4]
     e48:	000a      	movs	r2, r1
     e4a:	1cfb      	adds	r3, r7, #3
     e4c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	2231      	movs	r2, #49	; 0x31
     e52:	5c9b      	ldrb	r3, [r3, r2]
     e54:	b25a      	sxtb	r2, r3
     e56:	1cfb      	adds	r3, r7, #3
     e58:	781b      	ldrb	r3, [r3, #0]
     e5a:	2101      	movs	r1, #1
     e5c:	4099      	lsls	r1, r3
     e5e:	000b      	movs	r3, r1
     e60:	b25b      	sxtb	r3, r3
     e62:	4313      	orrs	r3, r2
     e64:	b25b      	sxtb	r3, r3
     e66:	b2d9      	uxtb	r1, r3
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	2231      	movs	r2, #49	; 0x31
     e6c:	5499      	strb	r1, [r3, r2]

}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	46bd      	mov	sp, r7
     e72:	b002      	add	sp, #8
     e74:	bd80      	pop	{r7, pc}
	...

00000e78 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     e78:	b580      	push	{r7, lr}
     e7a:	b082      	sub	sp, #8
     e7c:	af00      	add	r7, sp, #0
     e7e:	6078      	str	r0, [r7, #4]
     e80:	000a      	movs	r2, r1
     e82:	1cfb      	adds	r3, r7, #3
     e84:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	1cfb      	adds	r3, r7, #3
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	b29a      	uxth	r2, r3
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	0011      	movs	r1, r2
     e92:	0018      	movs	r0, r3
     e94:	4b04      	ldr	r3, [pc, #16]	; (ea8 <usart_serial_putchar+0x30>)
     e96:	4798      	blx	r3
     e98:	1e03      	subs	r3, r0, #0
     e9a:	d1f5      	bne.n	e88 <usart_serial_putchar+0x10>

	return STATUS_OK;
     e9c:	2300      	movs	r3, #0
}
     e9e:	0018      	movs	r0, r3
     ea0:	46bd      	mov	sp, r7
     ea2:	b002      	add	sp, #8
     ea4:	bd80      	pop	{r7, pc}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	00005745 	.word	0x00005745

00000eac <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     eac:	b580      	push	{r7, lr}
     eae:	b084      	sub	sp, #16
     eb0:	af00      	add	r7, sp, #0
     eb2:	6078      	str	r0, [r7, #4]
     eb4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     eb6:	230e      	movs	r3, #14
     eb8:	18fb      	adds	r3, r7, r3
     eba:	2200      	movs	r2, #0
     ebc:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	230e      	movs	r3, #14
     ec2:	18fa      	adds	r2, r7, r3
     ec4:	687b      	ldr	r3, [r7, #4]
     ec6:	0011      	movs	r1, r2
     ec8:	0018      	movs	r0, r3
     eca:	4b07      	ldr	r3, [pc, #28]	; (ee8 <usart_serial_getchar+0x3c>)
     ecc:	4798      	blx	r3
     ece:	1e03      	subs	r3, r0, #0
     ed0:	d1f6      	bne.n	ec0 <usart_serial_getchar+0x14>

	*c = temp;
     ed2:	230e      	movs	r3, #14
     ed4:	18fb      	adds	r3, r7, r3
     ed6:	881b      	ldrh	r3, [r3, #0]
     ed8:	b2da      	uxtb	r2, r3
     eda:	683b      	ldr	r3, [r7, #0]
     edc:	701a      	strb	r2, [r3, #0]
}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	46bd      	mov	sp, r7
     ee2:	b004      	add	sp, #16
     ee4:	bd80      	pop	{r7, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	000057a9 	.word	0x000057a9

00000eec <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     eec:	b580      	push	{r7, lr}
     eee:	b084      	sub	sp, #16
     ef0:	af00      	add	r7, sp, #0
     ef2:	60f8      	str	r0, [r7, #12]
     ef4:	60b9      	str	r1, [r7, #8]
     ef6:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     ef8:	4b0d      	ldr	r3, [pc, #52]	; (f30 <stdio_serial_init+0x44>)
     efa:	68fa      	ldr	r2, [r7, #12]
     efc:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     efe:	4b0d      	ldr	r3, [pc, #52]	; (f34 <stdio_serial_init+0x48>)
     f00:	4a0d      	ldr	r2, [pc, #52]	; (f38 <stdio_serial_init+0x4c>)
     f02:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     f04:	4b0d      	ldr	r3, [pc, #52]	; (f3c <stdio_serial_init+0x50>)
     f06:	4a0e      	ldr	r2, [pc, #56]	; (f40 <stdio_serial_init+0x54>)
     f08:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     f0a:	4b0e      	ldr	r3, [pc, #56]	; (f44 <stdio_serial_init+0x58>)
     f0c:	681b      	ldr	r3, [r3, #0]
     f0e:	689b      	ldr	r3, [r3, #8]
     f10:	2100      	movs	r1, #0
     f12:	0018      	movs	r0, r3
     f14:	4b0c      	ldr	r3, [pc, #48]	; (f48 <stdio_serial_init+0x5c>)
     f16:	4798      	blx	r3
	setbuf(stdin, NULL);
     f18:	4b0a      	ldr	r3, [pc, #40]	; (f44 <stdio_serial_init+0x58>)
     f1a:	681b      	ldr	r3, [r3, #0]
     f1c:	685b      	ldr	r3, [r3, #4]
     f1e:	2100      	movs	r1, #0
     f20:	0018      	movs	r0, r3
     f22:	4b09      	ldr	r3, [pc, #36]	; (f48 <stdio_serial_init+0x5c>)
     f24:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	46bd      	mov	sp, r7
     f2a:	b004      	add	sp, #16
     f2c:	bd80      	pop	{r7, pc}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	20000a28 	.word	0x20000a28
     f34:	20000a24 	.word	0x20000a24
     f38:	00000e79 	.word	0x00000e79
     f3c:	20000a20 	.word	0x20000a20
     f40:	00000ead 	.word	0x00000ead
     f44:	20000060 	.word	0x20000060
     f48:	0000b9f9 	.word	0x0000b9f9

00000f4c <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @details		Initializes the UART - sets up the SERCOM to act as UART and registers the callbacks for
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 *****************************************************************************/
void InitializeSerialConsole() {
     f4c:	b580      	push	{r7, lr}
     f4e:	af00      	add	r7, sp, #0

    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *) rxCharacterBuffer, RX_BUFFER_SIZE);
     f50:	2380      	movs	r3, #128	; 0x80
     f52:	00da      	lsls	r2, r3, #3
     f54:	4b0f      	ldr	r3, [pc, #60]	; (f94 <InitializeSerialConsole+0x48>)
     f56:	0011      	movs	r1, r2
     f58:	0018      	movs	r0, r3
     f5a:	4b0f      	ldr	r3, [pc, #60]	; (f98 <InitializeSerialConsole+0x4c>)
     f5c:	4798      	blx	r3
     f5e:	0002      	movs	r2, r0
     f60:	4b0e      	ldr	r3, [pc, #56]	; (f9c <InitializeSerialConsole+0x50>)
     f62:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *) txCharacterBuffer, TX_BUFFER_SIZE);
     f64:	2380      	movs	r3, #128	; 0x80
     f66:	00da      	lsls	r2, r3, #3
     f68:	4b0d      	ldr	r3, [pc, #52]	; (fa0 <InitializeSerialConsole+0x54>)
     f6a:	0011      	movs	r1, r2
     f6c:	0018      	movs	r0, r3
     f6e:	4b0a      	ldr	r3, [pc, #40]	; (f98 <InitializeSerialConsole+0x4c>)
     f70:	4798      	blx	r3
     f72:	0002      	movs	r2, r0
     f74:	4b0b      	ldr	r3, [pc, #44]	; (fa4 <InitializeSerialConsole+0x58>)
     f76:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
     f78:	4b0b      	ldr	r3, [pc, #44]	; (fa8 <InitializeSerialConsole+0x5c>)
     f7a:	4798      	blx	r3
    configure_usart_callbacks();
     f7c:	4b0b      	ldr	r3, [pc, #44]	; (fac <InitializeSerialConsole+0x60>)
     f7e:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *) &latestRx, 1);   // Kicks off constant reading of characters
     f80:	490b      	ldr	r1, [pc, #44]	; (fb0 <InitializeSerialConsole+0x64>)
     f82:	4b0c      	ldr	r3, [pc, #48]	; (fb4 <InitializeSerialConsole+0x68>)
     f84:	2201      	movs	r2, #1
     f86:	0018      	movs	r0, r3
     f88:	4b0b      	ldr	r3, [pc, #44]	; (fb8 <InitializeSerialConsole+0x6c>)
     f8a:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
     f8c:	46c0      	nop			; (mov r8, r8)
     f8e:	46bd      	mov	sp, r7
     f90:	bd80      	pop	{r7, pc}
     f92:	46c0      	nop			; (mov r8, r8)
     f94:	200005f8 	.word	0x200005f8
     f98:	00000b2d 	.word	0x00000b2d
     f9c:	200001f0 	.word	0x200001f0
     fa0:	200001f8 	.word	0x200001f8
     fa4:	200009fc 	.word	0x200009fc
     fa8:	00001081 	.word	0x00001081
     fac:	00001109 	.word	0x00001109
     fb0:	200001f4 	.word	0x200001f4
     fb4:	200001bc 	.word	0x200001bc
     fb8:	00005a65 	.word	0x00005a65

00000fbc <DeinitializeSerialConsole>:

/**
 * @fn			void DeinitializeSerialConsole(void)
 *****************************************************************************/
void DeinitializeSerialConsole() { usart_disable(&usart_instance); }
     fbc:	b580      	push	{r7, lr}
     fbe:	af00      	add	r7, sp, #0
     fc0:	4b03      	ldr	r3, [pc, #12]	; (fd0 <DeinitializeSerialConsole+0x14>)
     fc2:	0018      	movs	r0, r3
     fc4:	4b03      	ldr	r3, [pc, #12]	; (fd4 <DeinitializeSerialConsole+0x18>)
     fc6:	4798      	blx	r3
     fc8:	46c0      	nop			; (mov r8, r8)
     fca:	46bd      	mov	sp, r7
     fcc:	bd80      	pop	{r7, pc}
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	200001bc 	.word	0x200001bc
     fd4:	00000df5 	.word	0x00000df5

00000fd8 <SerialConsoleWriteString>:
 * @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the
 *				text send to the uart
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
 * @note		Use to send a string of characters to the user via UART
 *****************************************************************************/
void SerialConsoleWriteString(char *string) {
     fd8:	b580      	push	{r7, lr}
     fda:	b084      	sub	sp, #16
     fdc:	af00      	add	r7, sp, #0
     fde:	6078      	str	r0, [r7, #4]
    if (string != NULL) {
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d02a      	beq.n	103c <SerialConsoleWriteString+0x64>
        for (size_t iter = 0; iter < strlen(string); iter++) {
     fe6:	2300      	movs	r3, #0
     fe8:	60fb      	str	r3, [r7, #12]
     fea:	e00b      	b.n	1004 <SerialConsoleWriteString+0x2c>
            circular_buf_put(cbufTx, string[iter]);
     fec:	4b15      	ldr	r3, [pc, #84]	; (1044 <SerialConsoleWriteString+0x6c>)
     fee:	6818      	ldr	r0, [r3, #0]
     ff0:	687a      	ldr	r2, [r7, #4]
     ff2:	68fb      	ldr	r3, [r7, #12]
     ff4:	18d3      	adds	r3, r2, r3
     ff6:	781b      	ldrb	r3, [r3, #0]
     ff8:	0019      	movs	r1, r3
     ffa:	4b13      	ldr	r3, [pc, #76]	; (1048 <SerialConsoleWriteString+0x70>)
     ffc:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
     ffe:	68fb      	ldr	r3, [r7, #12]
    1000:	3301      	adds	r3, #1
    1002:	60fb      	str	r3, [r7, #12]
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	0018      	movs	r0, r3
    1008:	4b10      	ldr	r3, [pc, #64]	; (104c <SerialConsoleWriteString+0x74>)
    100a:	4798      	blx	r3
    100c:	0002      	movs	r2, r0
    100e:	68fb      	ldr	r3, [r7, #12]
    1010:	429a      	cmp	r2, r3
    1012:	d8eb      	bhi.n	fec <SerialConsoleWriteString+0x14>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
    1014:	4b0e      	ldr	r3, [pc, #56]	; (1050 <SerialConsoleWriteString+0x78>)
    1016:	2101      	movs	r1, #1
    1018:	0018      	movs	r0, r3
    101a:	4b0e      	ldr	r3, [pc, #56]	; (1054 <SerialConsoleWriteString+0x7c>)
    101c:	4798      	blx	r3
    101e:	1e03      	subs	r3, r0, #0
    1020:	d10c      	bne.n	103c <SerialConsoleWriteString+0x64>
            circular_buf_get(cbufTx, (uint8_t *) &latestTx);   // Perform only if the SERCOM TX is free (not busy)
    1022:	4b08      	ldr	r3, [pc, #32]	; (1044 <SerialConsoleWriteString+0x6c>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	4a0c      	ldr	r2, [pc, #48]	; (1058 <SerialConsoleWriteString+0x80>)
    1028:	0011      	movs	r1, r2
    102a:	0018      	movs	r0, r3
    102c:	4b0b      	ldr	r3, [pc, #44]	; (105c <SerialConsoleWriteString+0x84>)
    102e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
    1030:	4909      	ldr	r1, [pc, #36]	; (1058 <SerialConsoleWriteString+0x80>)
    1032:	4b07      	ldr	r3, [pc, #28]	; (1050 <SerialConsoleWriteString+0x78>)
    1034:	2201      	movs	r2, #1
    1036:	0018      	movs	r0, r3
    1038:	4b09      	ldr	r3, [pc, #36]	; (1060 <SerialConsoleWriteString+0x88>)
    103a:	4798      	blx	r3
        }
    }
}
    103c:	46c0      	nop			; (mov r8, r8)
    103e:	46bd      	mov	sp, r7
    1040:	b004      	add	sp, #16
    1042:	bd80      	pop	{r7, pc}
    1044:	200009fc 	.word	0x200009fc
    1048:	00000b8d 	.word	0x00000b8d
    104c:	0000bb65 	.word	0x0000bb65
    1050:	200001bc 	.word	0x200001bc
    1054:	00005aad 	.word	0x00005aad
    1058:	200009f8 	.word	0x200009f8
    105c:	00000bc1 	.word	0x00000bc1
    1060:	00005a1d 	.word	0x00005a1d

00001064 <LogMessage>:
/**
 * @fn			LogMessage (Students to fill out this)
 * @brief
 * @note
 *****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...){};
    1064:	b40e      	push	{r1, r2, r3}
    1066:	b580      	push	{r7, lr}
    1068:	b083      	sub	sp, #12
    106a:	af00      	add	r7, sp, #0
    106c:	0002      	movs	r2, r0
    106e:	1dfb      	adds	r3, r7, #7
    1070:	701a      	strb	r2, [r3, #0]
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	46bd      	mov	sp, r7
    1076:	b003      	add	sp, #12
    1078:	bc80      	pop	{r7}
    107a:	bc08      	pop	{r3}
    107c:	b003      	add	sp, #12
    107e:	4718      	bx	r3

00001080 <configure_usart>:
/**
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 *****************************************************************************/
static void configure_usart(void) {
    1080:	b580      	push	{r7, lr}
    1082:	b090      	sub	sp, #64	; 0x40
    1084:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    1086:	003b      	movs	r3, r7
    1088:	0018      	movs	r0, r3
    108a:	4b17      	ldr	r3, [pc, #92]	; (10e8 <configure_usart+0x68>)
    108c:	4798      	blx	r3

    config_usart.baudrate = 115200;
    108e:	003b      	movs	r3, r7
    1090:	22e1      	movs	r2, #225	; 0xe1
    1092:	0252      	lsls	r2, r2, #9
    1094:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1096:	003b      	movs	r3, r7
    1098:	22c4      	movs	r2, #196	; 0xc4
    109a:	0392      	lsls	r2, r2, #14
    109c:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    109e:	003b      	movs	r3, r7
    10a0:	2201      	movs	r2, #1
    10a2:	4252      	negs	r2, r2
    10a4:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    10a6:	003b      	movs	r3, r7
    10a8:	2201      	movs	r2, #1
    10aa:	4252      	negs	r2, r2
    10ac:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    10ae:	003b      	movs	r3, r7
    10b0:	4a0e      	ldr	r2, [pc, #56]	; (10ec <configure_usart+0x6c>)
    10b2:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    10b4:	003b      	movs	r3, r7
    10b6:	4a0e      	ldr	r2, [pc, #56]	; (10f0 <configure_usart+0x70>)
    10b8:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	003a      	movs	r2, r7
    10be:	490d      	ldr	r1, [pc, #52]	; (10f4 <configure_usart+0x74>)
    10c0:	4b0d      	ldr	r3, [pc, #52]	; (10f8 <configure_usart+0x78>)
    10c2:	0018      	movs	r0, r3
    10c4:	4b0d      	ldr	r3, [pc, #52]	; (10fc <configure_usart+0x7c>)
    10c6:	4798      	blx	r3
    10c8:	1e03      	subs	r3, r0, #0
    10ca:	d1f7      	bne.n	10bc <configure_usart+0x3c>
    }
    stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    10cc:	003a      	movs	r2, r7
    10ce:	4909      	ldr	r1, [pc, #36]	; (10f4 <configure_usart+0x74>)
    10d0:	4b09      	ldr	r3, [pc, #36]	; (10f8 <configure_usart+0x78>)
    10d2:	0018      	movs	r0, r3
    10d4:	4b0a      	ldr	r3, [pc, #40]	; (1100 <configure_usart+0x80>)
    10d6:	4798      	blx	r3
    usart_enable(&usart_instance);
    10d8:	4b07      	ldr	r3, [pc, #28]	; (10f8 <configure_usart+0x78>)
    10da:	0018      	movs	r0, r3
    10dc:	4b09      	ldr	r3, [pc, #36]	; (1104 <configure_usart+0x84>)
    10de:	4798      	blx	r3
}
    10e0:	46c0      	nop			; (mov r8, r8)
    10e2:	46bd      	mov	sp, r7
    10e4:	b010      	add	sp, #64	; 0x40
    10e6:	bd80      	pop	{r7, pc}
    10e8:	00000ced 	.word	0x00000ced
    10ec:	002a0003 	.word	0x002a0003
    10f0:	002b0003 	.word	0x002b0003
    10f4:	42001800 	.word	0x42001800
    10f8:	200001bc 	.word	0x200001bc
    10fc:	000054d1 	.word	0x000054d1
    1100:	00000eed 	.word	0x00000eed
    1104:	00000dad 	.word	0x00000dad

00001108 <configure_usart_callbacks>:
/**
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 *****************************************************************************/
static void configure_usart_callbacks(void) {
    1108:	b580      	push	{r7, lr}
    110a:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    110c:	490c      	ldr	r1, [pc, #48]	; (1140 <configure_usart_callbacks+0x38>)
    110e:	4b0d      	ldr	r3, [pc, #52]	; (1144 <configure_usart_callbacks+0x3c>)
    1110:	2200      	movs	r2, #0
    1112:	0018      	movs	r0, r3
    1114:	4b0c      	ldr	r3, [pc, #48]	; (1148 <configure_usart_callbacks+0x40>)
    1116:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    1118:	490c      	ldr	r1, [pc, #48]	; (114c <configure_usart_callbacks+0x44>)
    111a:	4b0a      	ldr	r3, [pc, #40]	; (1144 <configure_usart_callbacks+0x3c>)
    111c:	2201      	movs	r2, #1
    111e:	0018      	movs	r0, r3
    1120:	4b09      	ldr	r3, [pc, #36]	; (1148 <configure_usart_callbacks+0x40>)
    1122:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    1124:	4b07      	ldr	r3, [pc, #28]	; (1144 <configure_usart_callbacks+0x3c>)
    1126:	2100      	movs	r1, #0
    1128:	0018      	movs	r0, r3
    112a:	4b09      	ldr	r3, [pc, #36]	; (1150 <configure_usart_callbacks+0x48>)
    112c:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    112e:	4b05      	ldr	r3, [pc, #20]	; (1144 <configure_usart_callbacks+0x3c>)
    1130:	2101      	movs	r1, #1
    1132:	0018      	movs	r0, r3
    1134:	4b06      	ldr	r3, [pc, #24]	; (1150 <configure_usart_callbacks+0x48>)
    1136:	4798      	blx	r3
}
    1138:	46c0      	nop			; (mov r8, r8)
    113a:	46bd      	mov	sp, r7
    113c:	bd80      	pop	{r7, pc}
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	00001165 	.word	0x00001165
    1144:	200001bc 	.word	0x200001bc
    1148:	000059d5 	.word	0x000059d5
    114c:	00001155 	.word	0x00001155
    1150:	00000e41 	.word	0x00000e41

00001154 <usart_read_callback>:
/**
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module) {}
    1154:	b580      	push	{r7, lr}
    1156:	b082      	sub	sp, #8
    1158:	af00      	add	r7, sp, #0
    115a:	6078      	str	r0, [r7, #4]
    115c:	46c0      	nop			; (mov r8, r8)
    115e:	46bd      	mov	sp, r7
    1160:	b002      	add	sp, #8
    1162:	bd80      	pop	{r7, pc}

00001164 <usart_write_callback>:
/**
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 *****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module) {
    1164:	b580      	push	{r7, lr}
    1166:	b082      	sub	sp, #8
    1168:	af00      	add	r7, sp, #0
    116a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *) &latestTx) != -1)   // Only continue if there are more characters to send
    116c:	4b09      	ldr	r3, [pc, #36]	; (1194 <usart_write_callback+0x30>)
    116e:	681b      	ldr	r3, [r3, #0]
    1170:	4a09      	ldr	r2, [pc, #36]	; (1198 <usart_write_callback+0x34>)
    1172:	0011      	movs	r1, r2
    1174:	0018      	movs	r0, r3
    1176:	4b09      	ldr	r3, [pc, #36]	; (119c <usart_write_callback+0x38>)
    1178:	4798      	blx	r3
    117a:	0003      	movs	r3, r0
    117c:	3301      	adds	r3, #1
    117e:	d005      	beq.n	118c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *) &latestTx, 1);
    1180:	4905      	ldr	r1, [pc, #20]	; (1198 <usart_write_callback+0x34>)
    1182:	4b07      	ldr	r3, [pc, #28]	; (11a0 <usart_write_callback+0x3c>)
    1184:	2201      	movs	r2, #1
    1186:	0018      	movs	r0, r3
    1188:	4b06      	ldr	r3, [pc, #24]	; (11a4 <usart_write_callback+0x40>)
    118a:	4798      	blx	r3
    }
}
    118c:	46c0      	nop			; (mov r8, r8)
    118e:	46bd      	mov	sp, r7
    1190:	b002      	add	sp, #8
    1192:	bd80      	pop	{r7, pc}
    1194:	200009fc 	.word	0x200009fc
    1198:	200009f8 	.word	0x200009f8
    119c:	00000bc1 	.word	0x00000bc1
    11a0:	200001bc 	.word	0x200001bc
    11a4:	00005a1d 	.word	0x00005a1d

000011a8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    11a8:	b590      	push	{r4, r7, lr}
    11aa:	b087      	sub	sp, #28
    11ac:	af00      	add	r7, sp, #0
    11ae:	60f8      	str	r0, [r7, #12]
    11b0:	000c      	movs	r4, r1
    11b2:	0010      	movs	r0, r2
    11b4:	0019      	movs	r1, r3
    11b6:	230a      	movs	r3, #10
    11b8:	18fb      	adds	r3, r7, r3
    11ba:	1c22      	adds	r2, r4, #0
    11bc:	801a      	strh	r2, [r3, #0]
    11be:	2308      	movs	r3, #8
    11c0:	18fb      	adds	r3, r7, r3
    11c2:	1c02      	adds	r2, r0, #0
    11c4:	801a      	strh	r2, [r3, #0]
    11c6:	1dfb      	adds	r3, r7, #7
    11c8:	1c0a      	adds	r2, r1, #0
    11ca:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    11cc:	230a      	movs	r3, #10
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	881a      	ldrh	r2, [r3, #0]
    11d2:	2308      	movs	r3, #8
    11d4:	18fb      	adds	r3, r7, r3
    11d6:	881b      	ldrh	r3, [r3, #0]
    11d8:	1ad3      	subs	r3, r2, r3
    11da:	3307      	adds	r3, #7
    11dc:	2b00      	cmp	r3, #0
    11de:	da00      	bge.n	11e2 <SDMMC_UNSTUFF_BITS+0x3a>
    11e0:	3307      	adds	r3, #7
    11e2:	10db      	asrs	r3, r3, #3
    11e4:	3b01      	subs	r3, #1
    11e6:	68fa      	ldr	r2, [r7, #12]
    11e8:	18d3      	adds	r3, r2, r3
    11ea:	781b      	ldrb	r3, [r3, #0]
    11ec:	0019      	movs	r1, r3
    11ee:	2308      	movs	r3, #8
    11f0:	18fb      	adds	r3, r7, r3
    11f2:	881b      	ldrh	r3, [r3, #0]
    11f4:	2207      	movs	r2, #7
    11f6:	4013      	ands	r3, r2
    11f8:	4119      	asrs	r1, r3
    11fa:	000b      	movs	r3, r1
    11fc:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    11fe:	2308      	movs	r3, #8
    1200:	18fb      	adds	r3, r7, r3
    1202:	881b      	ldrh	r3, [r3, #0]
    1204:	2207      	movs	r2, #7
    1206:	401a      	ands	r2, r3
    1208:	1dfb      	adds	r3, r7, #7
    120a:	781b      	ldrb	r3, [r3, #0]
    120c:	18d3      	adds	r3, r2, r3
    120e:	2b08      	cmp	r3, #8
    1210:	dd1c      	ble.n	124c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    1212:	230a      	movs	r3, #10
    1214:	18fb      	adds	r3, r7, r3
    1216:	881a      	ldrh	r2, [r3, #0]
    1218:	2308      	movs	r3, #8
    121a:	18fb      	adds	r3, r7, r3
    121c:	881b      	ldrh	r3, [r3, #0]
    121e:	1ad3      	subs	r3, r2, r3
    1220:	3307      	adds	r3, #7
    1222:	2b00      	cmp	r3, #0
    1224:	da00      	bge.n	1228 <SDMMC_UNSTUFF_BITS+0x80>
    1226:	3307      	adds	r3, #7
    1228:	10db      	asrs	r3, r3, #3
    122a:	3b02      	subs	r3, #2
    122c:	68fa      	ldr	r2, [r7, #12]
    122e:	18d3      	adds	r3, r2, r3
    1230:	781b      	ldrb	r3, [r3, #0]
    1232:	0019      	movs	r1, r3
    1234:	2308      	movs	r3, #8
    1236:	18fb      	adds	r3, r7, r3
    1238:	881b      	ldrh	r3, [r3, #0]
    123a:	2207      	movs	r2, #7
    123c:	4013      	ands	r3, r2
    123e:	2208      	movs	r2, #8
    1240:	1ad3      	subs	r3, r2, r3
    1242:	4099      	lsls	r1, r3
    1244:	000b      	movs	r3, r1
    1246:	697a      	ldr	r2, [r7, #20]
    1248:	4313      	orrs	r3, r2
    124a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    124c:	2308      	movs	r3, #8
    124e:	18fb      	adds	r3, r7, r3
    1250:	881b      	ldrh	r3, [r3, #0]
    1252:	2207      	movs	r2, #7
    1254:	401a      	ands	r2, r3
    1256:	1dfb      	adds	r3, r7, #7
    1258:	781b      	ldrb	r3, [r3, #0]
    125a:	18d3      	adds	r3, r2, r3
    125c:	2b10      	cmp	r3, #16
    125e:	dd1c      	ble.n	129a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    1260:	230a      	movs	r3, #10
    1262:	18fb      	adds	r3, r7, r3
    1264:	881a      	ldrh	r2, [r3, #0]
    1266:	2308      	movs	r3, #8
    1268:	18fb      	adds	r3, r7, r3
    126a:	881b      	ldrh	r3, [r3, #0]
    126c:	1ad3      	subs	r3, r2, r3
    126e:	3307      	adds	r3, #7
    1270:	2b00      	cmp	r3, #0
    1272:	da00      	bge.n	1276 <SDMMC_UNSTUFF_BITS+0xce>
    1274:	3307      	adds	r3, #7
    1276:	10db      	asrs	r3, r3, #3
    1278:	3b03      	subs	r3, #3
    127a:	68fa      	ldr	r2, [r7, #12]
    127c:	18d3      	adds	r3, r2, r3
    127e:	781b      	ldrb	r3, [r3, #0]
    1280:	0019      	movs	r1, r3
    1282:	2308      	movs	r3, #8
    1284:	18fb      	adds	r3, r7, r3
    1286:	881b      	ldrh	r3, [r3, #0]
    1288:	2207      	movs	r2, #7
    128a:	4013      	ands	r3, r2
    128c:	2210      	movs	r2, #16
    128e:	1ad3      	subs	r3, r2, r3
    1290:	4099      	lsls	r1, r3
    1292:	000b      	movs	r3, r1
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    129a:	2308      	movs	r3, #8
    129c:	18fb      	adds	r3, r7, r3
    129e:	881b      	ldrh	r3, [r3, #0]
    12a0:	2207      	movs	r2, #7
    12a2:	401a      	ands	r2, r3
    12a4:	1dfb      	adds	r3, r7, #7
    12a6:	781b      	ldrb	r3, [r3, #0]
    12a8:	18d3      	adds	r3, r2, r3
    12aa:	2b10      	cmp	r3, #16
    12ac:	dd1c      	ble.n	12e8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    12ae:	230a      	movs	r3, #10
    12b0:	18fb      	adds	r3, r7, r3
    12b2:	881a      	ldrh	r2, [r3, #0]
    12b4:	2308      	movs	r3, #8
    12b6:	18fb      	adds	r3, r7, r3
    12b8:	881b      	ldrh	r3, [r3, #0]
    12ba:	1ad3      	subs	r3, r2, r3
    12bc:	3307      	adds	r3, #7
    12be:	2b00      	cmp	r3, #0
    12c0:	da00      	bge.n	12c4 <SDMMC_UNSTUFF_BITS+0x11c>
    12c2:	3307      	adds	r3, #7
    12c4:	10db      	asrs	r3, r3, #3
    12c6:	3b03      	subs	r3, #3
    12c8:	68fa      	ldr	r2, [r7, #12]
    12ca:	18d3      	adds	r3, r2, r3
    12cc:	781b      	ldrb	r3, [r3, #0]
    12ce:	0019      	movs	r1, r3
    12d0:	2308      	movs	r3, #8
    12d2:	18fb      	adds	r3, r7, r3
    12d4:	881b      	ldrh	r3, [r3, #0]
    12d6:	2207      	movs	r2, #7
    12d8:	4013      	ands	r3, r2
    12da:	2210      	movs	r2, #16
    12dc:	1ad3      	subs	r3, r2, r3
    12de:	4099      	lsls	r1, r3
    12e0:	000b      	movs	r3, r1
    12e2:	697a      	ldr	r2, [r7, #20]
    12e4:	4313      	orrs	r3, r2
    12e6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    12e8:	1dfb      	adds	r3, r7, #7
    12ea:	781b      	ldrb	r3, [r3, #0]
    12ec:	2201      	movs	r2, #1
    12ee:	409a      	lsls	r2, r3
    12f0:	0013      	movs	r3, r2
    12f2:	1e5a      	subs	r2, r3, #1
    12f4:	697b      	ldr	r3, [r7, #20]
    12f6:	4013      	ands	r3, r2
    12f8:	617b      	str	r3, [r7, #20]
	return value;
    12fa:	697b      	ldr	r3, [r7, #20]
}
    12fc:	0018      	movs	r0, r3
    12fe:	46bd      	mov	sp, r7
    1300:	b007      	add	sp, #28
    1302:	bd90      	pop	{r4, r7, pc}

00001304 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    1304:	b580      	push	{r7, lr}
    1306:	b082      	sub	sp, #8
    1308:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    130a:	4b23      	ldr	r3, [pc, #140]	; (1398 <mmc_spi_op_cond+0x94>)
    130c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    130e:	4b23      	ldr	r3, [pc, #140]	; (139c <mmc_spi_op_cond+0x98>)
    1310:	2100      	movs	r1, #0
    1312:	0018      	movs	r0, r3
    1314:	4b22      	ldr	r3, [pc, #136]	; (13a0 <mmc_spi_op_cond+0x9c>)
    1316:	4798      	blx	r3
    1318:	0003      	movs	r3, r0
    131a:	001a      	movs	r2, r3
    131c:	2301      	movs	r3, #1
    131e:	4053      	eors	r3, r2
    1320:	b2db      	uxtb	r3, r3
    1322:	2b00      	cmp	r3, #0
    1324:	d001      	beq.n	132a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    1326:	2300      	movs	r3, #0
    1328:	e031      	b.n	138e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    132a:	4b1e      	ldr	r3, [pc, #120]	; (13a4 <mmc_spi_op_cond+0xa0>)
    132c:	4798      	blx	r3
    132e:	0003      	movs	r3, r0
    1330:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    1332:	683b      	ldr	r3, [r7, #0]
    1334:	2201      	movs	r2, #1
    1336:	4013      	ands	r3, r2
    1338:	d006      	beq.n	1348 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    133a:	687b      	ldr	r3, [r7, #4]
    133c:	1e5a      	subs	r2, r3, #1
    133e:	607a      	str	r2, [r7, #4]
    1340:	2b00      	cmp	r3, #0
    1342:	d1e4      	bne.n	130e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    1344:	2300      	movs	r3, #0
    1346:	e022      	b.n	138e <mmc_spi_op_cond+0x8a>
			break;
    1348:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    134a:	4b17      	ldr	r3, [pc, #92]	; (13a8 <mmc_spi_op_cond+0xa4>)
    134c:	2100      	movs	r1, #0
    134e:	0018      	movs	r0, r3
    1350:	4b13      	ldr	r3, [pc, #76]	; (13a0 <mmc_spi_op_cond+0x9c>)
    1352:	4798      	blx	r3
    1354:	0003      	movs	r3, r0
    1356:	001a      	movs	r2, r3
    1358:	2301      	movs	r3, #1
    135a:	4053      	eors	r3, r2
    135c:	b2db      	uxtb	r3, r3
    135e:	2b00      	cmp	r3, #0
    1360:	d001      	beq.n	1366 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    1362:	2300      	movs	r3, #0
    1364:	e013      	b.n	138e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    1366:	4b0f      	ldr	r3, [pc, #60]	; (13a4 <mmc_spi_op_cond+0xa0>)
    1368:	4798      	blx	r3
    136a:	0002      	movs	r2, r0
    136c:	23c0      	movs	r3, #192	; 0xc0
    136e:	05db      	lsls	r3, r3, #23
    1370:	401a      	ands	r2, r3
    1372:	2380      	movs	r3, #128	; 0x80
    1374:	05db      	lsls	r3, r3, #23
    1376:	429a      	cmp	r2, r3
    1378:	d108      	bne.n	138c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    137a:	4b0c      	ldr	r3, [pc, #48]	; (13ac <mmc_spi_op_cond+0xa8>)
    137c:	681a      	ldr	r2, [r3, #0]
    137e:	4b0b      	ldr	r3, [pc, #44]	; (13ac <mmc_spi_op_cond+0xa8>)
    1380:	681b      	ldr	r3, [r3, #0]
    1382:	7adb      	ldrb	r3, [r3, #11]
    1384:	2108      	movs	r1, #8
    1386:	430b      	orrs	r3, r1
    1388:	b2db      	uxtb	r3, r3
    138a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    138c:	2301      	movs	r3, #1
}
    138e:	0018      	movs	r0, r3
    1390:	46bd      	mov	sp, r7
    1392:	b002      	add	sp, #8
    1394:	bd80      	pop	{r7, pc}
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	00001bee 	.word	0x00001bee
    139c:	00001101 	.word	0x00001101
    13a0:	00002d9d 	.word	0x00002d9d
    13a4:	00002fdd 	.word	0x00002fdd
    13a8:	0000053a 	.word	0x0000053a
    13ac:	20000110 	.word	0x20000110

000013b0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    13b0:	b580      	push	{r7, lr}
    13b2:	b086      	sub	sp, #24
    13b4:	af00      	add	r7, sp, #0
    13b6:	0002      	movs	r2, r0
    13b8:	1dfb      	adds	r3, r7, #7
    13ba:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    13bc:	4b2e      	ldr	r3, [pc, #184]	; (1478 <sd_spi_op_cond+0xc8>)
    13be:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    13c0:	4b2e      	ldr	r3, [pc, #184]	; (147c <sd_spi_op_cond+0xcc>)
    13c2:	2100      	movs	r1, #0
    13c4:	0018      	movs	r0, r3
    13c6:	4b2e      	ldr	r3, [pc, #184]	; (1480 <sd_spi_op_cond+0xd0>)
    13c8:	4798      	blx	r3
    13ca:	0003      	movs	r3, r0
    13cc:	001a      	movs	r2, r3
    13ce:	2301      	movs	r3, #1
    13d0:	4053      	eors	r3, r2
    13d2:	b2db      	uxtb	r3, r3
    13d4:	2b00      	cmp	r3, #0
    13d6:	d001      	beq.n	13dc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    13d8:	2300      	movs	r3, #0
    13da:	e048      	b.n	146e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    13dc:	2300      	movs	r3, #0
    13de:	617b      	str	r3, [r7, #20]
		if (v2) {
    13e0:	1dfb      	adds	r3, r7, #7
    13e2:	781b      	ldrb	r3, [r3, #0]
    13e4:	2b00      	cmp	r3, #0
    13e6:	d004      	beq.n	13f2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    13e8:	697b      	ldr	r3, [r7, #20]
    13ea:	2280      	movs	r2, #128	; 0x80
    13ec:	05d2      	lsls	r2, r2, #23
    13ee:	4313      	orrs	r3, r2
    13f0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    13f2:	697b      	ldr	r3, [r7, #20]
    13f4:	4a23      	ldr	r2, [pc, #140]	; (1484 <sd_spi_op_cond+0xd4>)
    13f6:	0019      	movs	r1, r3
    13f8:	0010      	movs	r0, r2
    13fa:	4b21      	ldr	r3, [pc, #132]	; (1480 <sd_spi_op_cond+0xd0>)
    13fc:	4798      	blx	r3
    13fe:	0003      	movs	r3, r0
    1400:	001a      	movs	r2, r3
    1402:	2301      	movs	r3, #1
    1404:	4053      	eors	r3, r2
    1406:	b2db      	uxtb	r3, r3
    1408:	2b00      	cmp	r3, #0
    140a:	d001      	beq.n	1410 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    140c:	2300      	movs	r3, #0
    140e:	e02e      	b.n	146e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    1410:	4b1d      	ldr	r3, [pc, #116]	; (1488 <sd_spi_op_cond+0xd8>)
    1412:	4798      	blx	r3
    1414:	0003      	movs	r3, r0
    1416:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    1418:	68fb      	ldr	r3, [r7, #12]
    141a:	2201      	movs	r2, #1
    141c:	4013      	ands	r3, r2
    141e:	d006      	beq.n	142e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    1420:	693b      	ldr	r3, [r7, #16]
    1422:	1e5a      	subs	r2, r3, #1
    1424:	613a      	str	r2, [r7, #16]
    1426:	2b00      	cmp	r3, #0
    1428:	d1ca      	bne.n	13c0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    142a:	2300      	movs	r3, #0
    142c:	e01f      	b.n	146e <sd_spi_op_cond+0xbe>
			break;
    142e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    1430:	4b16      	ldr	r3, [pc, #88]	; (148c <sd_spi_op_cond+0xdc>)
    1432:	2100      	movs	r1, #0
    1434:	0018      	movs	r0, r3
    1436:	4b12      	ldr	r3, [pc, #72]	; (1480 <sd_spi_op_cond+0xd0>)
    1438:	4798      	blx	r3
    143a:	0003      	movs	r3, r0
    143c:	001a      	movs	r2, r3
    143e:	2301      	movs	r3, #1
    1440:	4053      	eors	r3, r2
    1442:	b2db      	uxtb	r3, r3
    1444:	2b00      	cmp	r3, #0
    1446:	d001      	beq.n	144c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    1448:	2300      	movs	r3, #0
    144a:	e010      	b.n	146e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    144c:	4b0e      	ldr	r3, [pc, #56]	; (1488 <sd_spi_op_cond+0xd8>)
    144e:	4798      	blx	r3
    1450:	0002      	movs	r2, r0
    1452:	2380      	movs	r3, #128	; 0x80
    1454:	05db      	lsls	r3, r3, #23
    1456:	4013      	ands	r3, r2
    1458:	d008      	beq.n	146c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    145a:	4b0d      	ldr	r3, [pc, #52]	; (1490 <sd_spi_op_cond+0xe0>)
    145c:	681a      	ldr	r2, [r3, #0]
    145e:	4b0c      	ldr	r3, [pc, #48]	; (1490 <sd_spi_op_cond+0xe0>)
    1460:	681b      	ldr	r3, [r3, #0]
    1462:	7adb      	ldrb	r3, [r3, #11]
    1464:	2108      	movs	r1, #8
    1466:	430b      	orrs	r3, r1
    1468:	b2db      	uxtb	r3, r3
    146a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    146c:	2301      	movs	r3, #1
}
    146e:	0018      	movs	r0, r3
    1470:	46bd      	mov	sp, r7
    1472:	b006      	add	sp, #24
    1474:	bd80      	pop	{r7, pc}
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	00001bee 	.word	0x00001bee
    147c:	00001137 	.word	0x00001137
    1480:	00002d9d 	.word	0x00002d9d
    1484:	00001129 	.word	0x00001129
    1488:	00002fdd 	.word	0x00002fdd
    148c:	0000053a 	.word	0x0000053a
    1490:	20000110 	.word	0x20000110

00001494 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    1494:	b580      	push	{r7, lr}
    1496:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    1498:	2301      	movs	r3, #1
}
    149a:	0018      	movs	r0, r3
    149c:	46bd      	mov	sp, r7
    149e:	bd80      	pop	{r7, pc}

000014a0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    14a0:	b580      	push	{r7, lr}
    14a2:	b084      	sub	sp, #16
    14a4:	af00      	add	r7, sp, #0
    14a6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	2200      	movs	r2, #0
    14ac:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    14ae:	23d5      	movs	r3, #213	; 0xd5
    14b0:	005b      	lsls	r3, r3, #1
    14b2:	4a14      	ldr	r2, [pc, #80]	; (1504 <sd_cmd8+0x64>)
    14b4:	0019      	movs	r1, r3
    14b6:	0010      	movs	r0, r2
    14b8:	4b13      	ldr	r3, [pc, #76]	; (1508 <sd_cmd8+0x68>)
    14ba:	4798      	blx	r3
    14bc:	0003      	movs	r3, r0
    14be:	001a      	movs	r2, r3
    14c0:	2301      	movs	r3, #1
    14c2:	4053      	eors	r3, r2
    14c4:	b2db      	uxtb	r3, r3
    14c6:	2b00      	cmp	r3, #0
    14c8:	d001      	beq.n	14ce <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    14ca:	2301      	movs	r3, #1
    14cc:	e015      	b.n	14fa <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    14ce:	4b0f      	ldr	r3, [pc, #60]	; (150c <sd_cmd8+0x6c>)
    14d0:	4798      	blx	r3
    14d2:	0003      	movs	r3, r0
    14d4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    14d6:	68fb      	ldr	r3, [r7, #12]
    14d8:	3301      	adds	r3, #1
    14da:	d101      	bne.n	14e0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    14dc:	2301      	movs	r3, #1
    14de:	e00c      	b.n	14fa <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    14e0:	68fb      	ldr	r3, [r7, #12]
    14e2:	051b      	lsls	r3, r3, #20
    14e4:	0d1a      	lsrs	r2, r3, #20
    14e6:	23d5      	movs	r3, #213	; 0xd5
    14e8:	005b      	lsls	r3, r3, #1
    14ea:	429a      	cmp	r2, r3
    14ec:	d001      	beq.n	14f2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    14ee:	2300      	movs	r3, #0
    14f0:	e003      	b.n	14fa <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    14f2:	687b      	ldr	r3, [r7, #4]
    14f4:	2201      	movs	r2, #1
    14f6:	701a      	strb	r2, [r3, #0]
	return true;
    14f8:	2301      	movs	r3, #1
}
    14fa:	0018      	movs	r0, r3
    14fc:	46bd      	mov	sp, r7
    14fe:	b004      	add	sp, #16
    1500:	bd80      	pop	{r7, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	00005508 	.word	0x00005508
    1508:	00002d9d 	.word	0x00002d9d
    150c:	00002fdd 	.word	0x00002fdd

00001510 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    1510:	b590      	push	{r4, r7, lr}
    1512:	b089      	sub	sp, #36	; 0x24
    1514:	af02      	add	r7, sp, #8
    1516:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    1518:	2380      	movs	r3, #128	; 0x80
    151a:	009a      	lsls	r2, r3, #2
    151c:	4841      	ldr	r0, [pc, #260]	; (1624 <mmc_cmd8+0x114>)
    151e:	2300      	movs	r3, #0
    1520:	9300      	str	r3, [sp, #0]
    1522:	2301      	movs	r3, #1
    1524:	2100      	movs	r1, #0
    1526:	4c40      	ldr	r4, [pc, #256]	; (1628 <mmc_cmd8+0x118>)
    1528:	47a0      	blx	r4
    152a:	0003      	movs	r3, r0
    152c:	001a      	movs	r2, r3
    152e:	2301      	movs	r3, #1
    1530:	4053      	eors	r3, r2
    1532:	b2db      	uxtb	r3, r3
    1534:	2b00      	cmp	r3, #0
    1536:	d001      	beq.n	153c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    1538:	2300      	movs	r3, #0
    153a:	e06e      	b.n	161a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    153c:	2316      	movs	r3, #22
    153e:	18fb      	adds	r3, r7, r3
    1540:	2200      	movs	r2, #0
    1542:	801a      	strh	r2, [r3, #0]
    1544:	e014      	b.n	1570 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    1546:	2310      	movs	r3, #16
    1548:	18fb      	adds	r3, r7, r3
    154a:	0018      	movs	r0, r3
    154c:	4b37      	ldr	r3, [pc, #220]	; (162c <mmc_cmd8+0x11c>)
    154e:	4798      	blx	r3
    1550:	0003      	movs	r3, r0
    1552:	001a      	movs	r2, r3
    1554:	2301      	movs	r3, #1
    1556:	4053      	eors	r3, r2
    1558:	b2db      	uxtb	r3, r3
    155a:	2b00      	cmp	r3, #0
    155c:	d001      	beq.n	1562 <mmc_cmd8+0x52>
			return false;
    155e:	2300      	movs	r3, #0
    1560:	e05b      	b.n	161a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    1562:	2316      	movs	r3, #22
    1564:	18fb      	adds	r3, r7, r3
    1566:	881a      	ldrh	r2, [r3, #0]
    1568:	2316      	movs	r3, #22
    156a:	18fb      	adds	r3, r7, r3
    156c:	3201      	adds	r2, #1
    156e:	801a      	strh	r2, [r3, #0]
    1570:	2316      	movs	r3, #22
    1572:	18fb      	adds	r3, r7, r3
    1574:	881b      	ldrh	r3, [r3, #0]
    1576:	2b31      	cmp	r3, #49	; 0x31
    1578:	d9e5      	bls.n	1546 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    157a:	693b      	ldr	r3, [r7, #16]
    157c:	b2db      	uxtb	r3, r3
    157e:	2202      	movs	r2, #2
    1580:	4013      	ands	r3, r2
    1582:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    1584:	687b      	ldr	r3, [r7, #4]
    1586:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    1588:	4b29      	ldr	r3, [pc, #164]	; (1630 <mmc_cmd8+0x120>)
    158a:	681b      	ldr	r3, [r3, #0]
    158c:	330e      	adds	r3, #14
    158e:	0018      	movs	r0, r3
    1590:	230c      	movs	r3, #12
    1592:	223e      	movs	r2, #62	; 0x3e
    1594:	2180      	movs	r1, #128	; 0x80
    1596:	4c27      	ldr	r4, [pc, #156]	; (1634 <mmc_cmd8+0x124>)
    1598:	47a0      	blx	r4
    159a:	0002      	movs	r2, r0
    159c:	4b26      	ldr	r3, [pc, #152]	; (1638 <mmc_cmd8+0x128>)
    159e:	429a      	cmp	r2, r3
    15a0:	d135      	bne.n	160e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    15a2:	e014      	b.n	15ce <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    15a4:	230c      	movs	r3, #12
    15a6:	18fb      	adds	r3, r7, r3
    15a8:	0018      	movs	r0, r3
    15aa:	4b20      	ldr	r3, [pc, #128]	; (162c <mmc_cmd8+0x11c>)
    15ac:	4798      	blx	r3
    15ae:	0003      	movs	r3, r0
    15b0:	001a      	movs	r2, r3
    15b2:	2301      	movs	r3, #1
    15b4:	4053      	eors	r3, r2
    15b6:	b2db      	uxtb	r3, r3
    15b8:	2b00      	cmp	r3, #0
    15ba:	d001      	beq.n	15c0 <mmc_cmd8+0xb0>
				return false;
    15bc:	2300      	movs	r3, #0
    15be:	e02c      	b.n	161a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    15c0:	2316      	movs	r3, #22
    15c2:	18fb      	adds	r3, r7, r3
    15c4:	881a      	ldrh	r2, [r3, #0]
    15c6:	2316      	movs	r3, #22
    15c8:	18fb      	adds	r3, r7, r3
    15ca:	3201      	adds	r2, #1
    15cc:	801a      	strh	r2, [r3, #0]
    15ce:	2316      	movs	r3, #22
    15d0:	18fb      	adds	r3, r7, r3
    15d2:	881b      	ldrh	r3, [r3, #0]
    15d4:	2b35      	cmp	r3, #53	; 0x35
    15d6:	d9e5      	bls.n	15a4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    15d8:	4b15      	ldr	r3, [pc, #84]	; (1630 <mmc_cmd8+0x120>)
    15da:	681b      	ldr	r3, [r3, #0]
    15dc:	68fa      	ldr	r2, [r7, #12]
    15de:	0852      	lsrs	r2, r2, #1
    15e0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    15e2:	e014      	b.n	160e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    15e4:	230c      	movs	r3, #12
    15e6:	18fb      	adds	r3, r7, r3
    15e8:	0018      	movs	r0, r3
    15ea:	4b10      	ldr	r3, [pc, #64]	; (162c <mmc_cmd8+0x11c>)
    15ec:	4798      	blx	r3
    15ee:	0003      	movs	r3, r0
    15f0:	001a      	movs	r2, r3
    15f2:	2301      	movs	r3, #1
    15f4:	4053      	eors	r3, r2
    15f6:	b2db      	uxtb	r3, r3
    15f8:	2b00      	cmp	r3, #0
    15fa:	d001      	beq.n	1600 <mmc_cmd8+0xf0>
			return false;
    15fc:	2300      	movs	r3, #0
    15fe:	e00c      	b.n	161a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1600:	2316      	movs	r3, #22
    1602:	18fb      	adds	r3, r7, r3
    1604:	881a      	ldrh	r2, [r3, #0]
    1606:	2316      	movs	r3, #22
    1608:	18fb      	adds	r3, r7, r3
    160a:	3201      	adds	r2, #1
    160c:	801a      	strh	r2, [r3, #0]
    160e:	2316      	movs	r3, #22
    1610:	18fb      	adds	r3, r7, r3
    1612:	881b      	ldrh	r3, [r3, #0]
    1614:	2b7f      	cmp	r3, #127	; 0x7f
    1616:	d9e5      	bls.n	15e4 <mmc_cmd8+0xd4>
		}
	}
	return true;
    1618:	2301      	movs	r3, #1
}
    161a:	0018      	movs	r0, r3
    161c:	46bd      	mov	sp, r7
    161e:	b007      	add	sp, #28
    1620:	bd90      	pop	{r4, r7, pc}
    1622:	46c0      	nop			; (mov r8, r8)
    1624:	00081108 	.word	0x00081108
    1628:	00002dc5 	.word	0x00002dc5
    162c:	00002ff1 	.word	0x00002ff1
    1630:	20000110 	.word	0x20000110
    1634:	000011a9 	.word	0x000011a9
    1638:	00000fff 	.word	0x00000fff

0000163c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    163c:	b590      	push	{r4, r7, lr}
    163e:	b083      	sub	sp, #12
    1640:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    1642:	4b15      	ldr	r3, [pc, #84]	; (1698 <sd_mmc_cmd9_spi+0x5c>)
    1644:	681b      	ldr	r3, [r3, #0]
    1646:	891b      	ldrh	r3, [r3, #8]
    1648:	0419      	lsls	r1, r3, #16
    164a:	4814      	ldr	r0, [pc, #80]	; (169c <sd_mmc_cmd9_spi+0x60>)
    164c:	2301      	movs	r3, #1
    164e:	9300      	str	r3, [sp, #0]
    1650:	2301      	movs	r3, #1
    1652:	2210      	movs	r2, #16
    1654:	4c12      	ldr	r4, [pc, #72]	; (16a0 <sd_mmc_cmd9_spi+0x64>)
    1656:	47a0      	blx	r4
    1658:	0003      	movs	r3, r0
    165a:	001a      	movs	r2, r3
    165c:	2301      	movs	r3, #1
    165e:	4053      	eors	r3, r2
    1660:	b2db      	uxtb	r3, r3
    1662:	2b00      	cmp	r3, #0
    1664:	d001      	beq.n	166a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    1666:	2300      	movs	r3, #0
    1668:	e012      	b.n	1690 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    166a:	4b0b      	ldr	r3, [pc, #44]	; (1698 <sd_mmc_cmd9_spi+0x5c>)
    166c:	681b      	ldr	r3, [r3, #0]
    166e:	330e      	adds	r3, #14
    1670:	2101      	movs	r1, #1
    1672:	0018      	movs	r0, r3
    1674:	4b0b      	ldr	r3, [pc, #44]	; (16a4 <sd_mmc_cmd9_spi+0x68>)
    1676:	4798      	blx	r3
    1678:	0003      	movs	r3, r0
    167a:	001a      	movs	r2, r3
    167c:	2301      	movs	r3, #1
    167e:	4053      	eors	r3, r2
    1680:	b2db      	uxtb	r3, r3
    1682:	2b00      	cmp	r3, #0
    1684:	d001      	beq.n	168a <sd_mmc_cmd9_spi+0x4e>
		return false;
    1686:	2300      	movs	r3, #0
    1688:	e002      	b.n	1690 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    168a:	4b07      	ldr	r3, [pc, #28]	; (16a8 <sd_mmc_cmd9_spi+0x6c>)
    168c:	4798      	blx	r3
    168e:	0003      	movs	r3, r0
}
    1690:	0018      	movs	r0, r3
    1692:	46bd      	mov	sp, r7
    1694:	b001      	add	sp, #4
    1696:	bd90      	pop	{r4, r7, pc}
    1698:	20000110 	.word	0x20000110
    169c:	00081109 	.word	0x00081109
    16a0:	00002dc5 	.word	0x00002dc5
    16a4:	00003095 	.word	0x00003095
    16a8:	00003139 	.word	0x00003139

000016ac <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    16ac:	b5b0      	push	{r4, r5, r7, lr}
    16ae:	b084      	sub	sp, #16
    16b0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    16b2:	4b45      	ldr	r3, [pc, #276]	; (17c8 <mmc_decode_csd+0x11c>)
    16b4:	681b      	ldr	r3, [r3, #0]
    16b6:	330e      	adds	r3, #14
    16b8:	0018      	movs	r0, r3
    16ba:	2304      	movs	r3, #4
    16bc:	227a      	movs	r2, #122	; 0x7a
    16be:	2180      	movs	r1, #128	; 0x80
    16c0:	4c42      	ldr	r4, [pc, #264]	; (17cc <mmc_decode_csd+0x120>)
    16c2:	47a0      	blx	r4
    16c4:	0003      	movs	r3, r0
    16c6:	2b02      	cmp	r3, #2
    16c8:	d011      	beq.n	16ee <mmc_decode_csd+0x42>
    16ca:	d802      	bhi.n	16d2 <mmc_decode_csd+0x26>
    16cc:	2b01      	cmp	r3, #1
    16ce:	d009      	beq.n	16e4 <mmc_decode_csd+0x38>
    16d0:	e003      	b.n	16da <mmc_decode_csd+0x2e>
    16d2:	2b03      	cmp	r3, #3
    16d4:	d010      	beq.n	16f8 <mmc_decode_csd+0x4c>
    16d6:	2b04      	cmp	r3, #4
    16d8:	d013      	beq.n	1702 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    16da:	4b3b      	ldr	r3, [pc, #236]	; (17c8 <mmc_decode_csd+0x11c>)
    16dc:	681b      	ldr	r3, [r3, #0]
    16de:	2212      	movs	r2, #18
    16e0:	731a      	strb	r2, [r3, #12]
		break;
    16e2:	e013      	b.n	170c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    16e4:	4b38      	ldr	r3, [pc, #224]	; (17c8 <mmc_decode_csd+0x11c>)
    16e6:	681b      	ldr	r3, [r3, #0]
    16e8:	2214      	movs	r2, #20
    16ea:	731a      	strb	r2, [r3, #12]
		break;
    16ec:	e00e      	b.n	170c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    16ee:	4b36      	ldr	r3, [pc, #216]	; (17c8 <mmc_decode_csd+0x11c>)
    16f0:	681b      	ldr	r3, [r3, #0]
    16f2:	2222      	movs	r2, #34	; 0x22
    16f4:	731a      	strb	r2, [r3, #12]
		break;
    16f6:	e009      	b.n	170c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    16f8:	4b33      	ldr	r3, [pc, #204]	; (17c8 <mmc_decode_csd+0x11c>)
    16fa:	681b      	ldr	r3, [r3, #0]
    16fc:	2230      	movs	r2, #48	; 0x30
    16fe:	731a      	strb	r2, [r3, #12]
		break;
    1700:	e004      	b.n	170c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    1702:	4b31      	ldr	r3, [pc, #196]	; (17c8 <mmc_decode_csd+0x11c>)
    1704:	681b      	ldr	r3, [r3, #0]
    1706:	2240      	movs	r2, #64	; 0x40
    1708:	731a      	strb	r2, [r3, #12]
		break;
    170a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    170c:	4b2e      	ldr	r3, [pc, #184]	; (17c8 <mmc_decode_csd+0x11c>)
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	330e      	adds	r3, #14
    1712:	0018      	movs	r0, r3
    1714:	2308      	movs	r3, #8
    1716:	2260      	movs	r2, #96	; 0x60
    1718:	2180      	movs	r1, #128	; 0x80
    171a:	4c2c      	ldr	r4, [pc, #176]	; (17cc <mmc_decode_csd+0x120>)
    171c:	47a0      	blx	r4
    171e:	0003      	movs	r3, r0
    1720:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    1722:	68fb      	ldr	r3, [r7, #12]
    1724:	2207      	movs	r2, #7
    1726:	401a      	ands	r2, r3
    1728:	4b29      	ldr	r3, [pc, #164]	; (17d0 <mmc_decode_csd+0x124>)
    172a:	0092      	lsls	r2, r2, #2
    172c:	58d3      	ldr	r3, [r2, r3]
    172e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    1730:	68fb      	ldr	r3, [r7, #12]
    1732:	08db      	lsrs	r3, r3, #3
    1734:	220f      	movs	r2, #15
    1736:	401a      	ands	r2, r3
    1738:	4b26      	ldr	r3, [pc, #152]	; (17d4 <mmc_decode_csd+0x128>)
    173a:	0092      	lsls	r2, r2, #2
    173c:	58d3      	ldr	r3, [r2, r3]
    173e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    1740:	4b21      	ldr	r3, [pc, #132]	; (17c8 <mmc_decode_csd+0x11c>)
    1742:	681b      	ldr	r3, [r3, #0]
    1744:	68ba      	ldr	r2, [r7, #8]
    1746:	6879      	ldr	r1, [r7, #4]
    1748:	434a      	muls	r2, r1
    174a:	21fa      	movs	r1, #250	; 0xfa
    174c:	0089      	lsls	r1, r1, #2
    174e:	434a      	muls	r2, r1
    1750:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    1752:	4b1d      	ldr	r3, [pc, #116]	; (17c8 <mmc_decode_csd+0x11c>)
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	330e      	adds	r3, #14
    1758:	0018      	movs	r0, r3
    175a:	230c      	movs	r3, #12
    175c:	223e      	movs	r2, #62	; 0x3e
    175e:	2180      	movs	r1, #128	; 0x80
    1760:	4c1a      	ldr	r4, [pc, #104]	; (17cc <mmc_decode_csd+0x120>)
    1762:	47a0      	blx	r4
    1764:	0002      	movs	r2, r0
    1766:	4b1c      	ldr	r3, [pc, #112]	; (17d8 <mmc_decode_csd+0x12c>)
    1768:	429a      	cmp	r2, r3
    176a:	d028      	beq.n	17be <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    176c:	4b16      	ldr	r3, [pc, #88]	; (17c8 <mmc_decode_csd+0x11c>)
    176e:	681b      	ldr	r3, [r3, #0]
    1770:	330e      	adds	r3, #14
    1772:	0018      	movs	r0, r3
    1774:	230c      	movs	r3, #12
    1776:	223e      	movs	r2, #62	; 0x3e
    1778:	2180      	movs	r1, #128	; 0x80
    177a:	4c14      	ldr	r4, [pc, #80]	; (17cc <mmc_decode_csd+0x120>)
    177c:	47a0      	blx	r4
    177e:	0003      	movs	r3, r0
    1780:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1782:	4b11      	ldr	r3, [pc, #68]	; (17c8 <mmc_decode_csd+0x11c>)
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	330e      	adds	r3, #14
    1788:	0018      	movs	r0, r3
    178a:	2303      	movs	r3, #3
    178c:	222f      	movs	r2, #47	; 0x2f
    178e:	2180      	movs	r1, #128	; 0x80
    1790:	4d0e      	ldr	r5, [pc, #56]	; (17cc <mmc_decode_csd+0x120>)
    1792:	47a8      	blx	r5
    1794:	0003      	movs	r3, r0
    1796:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1798:	409c      	lsls	r4, r3
    179a:	0023      	movs	r3, r4
    179c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    179e:	4b0a      	ldr	r3, [pc, #40]	; (17c8 <mmc_decode_csd+0x11c>)
    17a0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    17a2:	4b09      	ldr	r3, [pc, #36]	; (17c8 <mmc_decode_csd+0x11c>)
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	330e      	adds	r3, #14
    17a8:	0018      	movs	r0, r3
    17aa:	2304      	movs	r3, #4
    17ac:	2250      	movs	r2, #80	; 0x50
    17ae:	2180      	movs	r1, #128	; 0x80
    17b0:	4d06      	ldr	r5, [pc, #24]	; (17cc <mmc_decode_csd+0x120>)
    17b2:	47a8      	blx	r5
    17b4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    17b6:	683b      	ldr	r3, [r7, #0]
    17b8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    17ba:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    17bc:	6063      	str	r3, [r4, #4]
	}
}
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	46bd      	mov	sp, r7
    17c2:	b004      	add	sp, #16
    17c4:	bdb0      	pop	{r4, r5, r7, pc}
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	20000110 	.word	0x20000110
    17cc:	000011a9 	.word	0x000011a9
    17d0:	0000c154 	.word	0x0000c154
    17d4:	0000c1b0 	.word	0x0000c1b0
    17d8:	00000fff 	.word	0x00000fff

000017dc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    17dc:	b5b0      	push	{r4, r5, r7, lr}
    17de:	b084      	sub	sp, #16
    17e0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    17e2:	4b35      	ldr	r3, [pc, #212]	; (18b8 <sd_decode_csd+0xdc>)
    17e4:	681b      	ldr	r3, [r3, #0]
    17e6:	330e      	adds	r3, #14
    17e8:	0018      	movs	r0, r3
    17ea:	2308      	movs	r3, #8
    17ec:	2260      	movs	r2, #96	; 0x60
    17ee:	2180      	movs	r1, #128	; 0x80
    17f0:	4c32      	ldr	r4, [pc, #200]	; (18bc <sd_decode_csd+0xe0>)
    17f2:	47a0      	blx	r4
    17f4:	0003      	movs	r3, r0
    17f6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    17f8:	68fb      	ldr	r3, [r7, #12]
    17fa:	2207      	movs	r2, #7
    17fc:	401a      	ands	r2, r3
    17fe:	4b30      	ldr	r3, [pc, #192]	; (18c0 <sd_decode_csd+0xe4>)
    1800:	0092      	lsls	r2, r2, #2
    1802:	58d3      	ldr	r3, [r2, r3]
    1804:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    1806:	68fb      	ldr	r3, [r7, #12]
    1808:	08db      	lsrs	r3, r3, #3
    180a:	220f      	movs	r2, #15
    180c:	401a      	ands	r2, r3
    180e:	4b2d      	ldr	r3, [pc, #180]	; (18c4 <sd_decode_csd+0xe8>)
    1810:	0092      	lsls	r2, r2, #2
    1812:	58d3      	ldr	r3, [r2, r3]
    1814:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    1816:	4b28      	ldr	r3, [pc, #160]	; (18b8 <sd_decode_csd+0xdc>)
    1818:	681b      	ldr	r3, [r3, #0]
    181a:	68ba      	ldr	r2, [r7, #8]
    181c:	6879      	ldr	r1, [r7, #4]
    181e:	434a      	muls	r2, r1
    1820:	21fa      	movs	r1, #250	; 0xfa
    1822:	0089      	lsls	r1, r1, #2
    1824:	434a      	muls	r2, r1
    1826:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    1828:	4b23      	ldr	r3, [pc, #140]	; (18b8 <sd_decode_csd+0xdc>)
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	330e      	adds	r3, #14
    182e:	0018      	movs	r0, r3
    1830:	2302      	movs	r3, #2
    1832:	227e      	movs	r2, #126	; 0x7e
    1834:	2180      	movs	r1, #128	; 0x80
    1836:	4c21      	ldr	r4, [pc, #132]	; (18bc <sd_decode_csd+0xe0>)
    1838:	47a0      	blx	r4
    183a:	1e03      	subs	r3, r0, #0
    183c:	d00f      	beq.n	185e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    183e:	4b1e      	ldr	r3, [pc, #120]	; (18b8 <sd_decode_csd+0xdc>)
    1840:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    1842:	4b1d      	ldr	r3, [pc, #116]	; (18b8 <sd_decode_csd+0xdc>)
    1844:	681b      	ldr	r3, [r3, #0]
    1846:	330e      	adds	r3, #14
    1848:	0018      	movs	r0, r3
    184a:	2316      	movs	r3, #22
    184c:	2230      	movs	r2, #48	; 0x30
    184e:	2180      	movs	r1, #128	; 0x80
    1850:	4d1a      	ldr	r5, [pc, #104]	; (18bc <sd_decode_csd+0xe0>)
    1852:	47a8      	blx	r5
    1854:	0003      	movs	r3, r0
				* 512;
    1856:	3301      	adds	r3, #1
    1858:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    185a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    185c:	e028      	b.n	18b0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    185e:	4b16      	ldr	r3, [pc, #88]	; (18b8 <sd_decode_csd+0xdc>)
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	330e      	adds	r3, #14
    1864:	0018      	movs	r0, r3
    1866:	230c      	movs	r3, #12
    1868:	223e      	movs	r2, #62	; 0x3e
    186a:	2180      	movs	r1, #128	; 0x80
    186c:	4c13      	ldr	r4, [pc, #76]	; (18bc <sd_decode_csd+0xe0>)
    186e:	47a0      	blx	r4
    1870:	0003      	movs	r3, r0
    1872:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1874:	4b10      	ldr	r3, [pc, #64]	; (18b8 <sd_decode_csd+0xdc>)
    1876:	681b      	ldr	r3, [r3, #0]
    1878:	330e      	adds	r3, #14
    187a:	0018      	movs	r0, r3
    187c:	2303      	movs	r3, #3
    187e:	222f      	movs	r2, #47	; 0x2f
    1880:	2180      	movs	r1, #128	; 0x80
    1882:	4d0e      	ldr	r5, [pc, #56]	; (18bc <sd_decode_csd+0xe0>)
    1884:	47a8      	blx	r5
    1886:	0003      	movs	r3, r0
    1888:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    188a:	409c      	lsls	r4, r3
    188c:	0023      	movs	r3, r4
    188e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1890:	4b09      	ldr	r3, [pc, #36]	; (18b8 <sd_decode_csd+0xdc>)
    1892:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    1894:	4b08      	ldr	r3, [pc, #32]	; (18b8 <sd_decode_csd+0xdc>)
    1896:	681b      	ldr	r3, [r3, #0]
    1898:	330e      	adds	r3, #14
    189a:	0018      	movs	r0, r3
    189c:	2304      	movs	r3, #4
    189e:	2250      	movs	r2, #80	; 0x50
    18a0:	2180      	movs	r1, #128	; 0x80
    18a2:	4d06      	ldr	r5, [pc, #24]	; (18bc <sd_decode_csd+0xe0>)
    18a4:	47a8      	blx	r5
    18a6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    18a8:	683b      	ldr	r3, [r7, #0]
    18aa:	4093      	lsls	r3, r2
				/ 1024;
    18ac:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    18ae:	6063      	str	r3, [r4, #4]
}
    18b0:	46c0      	nop			; (mov r8, r8)
    18b2:	46bd      	mov	sp, r7
    18b4:	b004      	add	sp, #16
    18b6:	bdb0      	pop	{r4, r5, r7, pc}
    18b8:	20000110 	.word	0x20000110
    18bc:	000011a9 	.word	0x000011a9
    18c0:	0000c154 	.word	0x0000c154
    18c4:	0000c170 	.word	0x0000c170

000018c8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    18c8:	b580      	push	{r7, lr}
    18ca:	b082      	sub	sp, #8
    18cc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    18ce:	4b11      	ldr	r3, [pc, #68]	; (1914 <sd_mmc_cmd13+0x4c>)
    18d0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    18d2:	4b11      	ldr	r3, [pc, #68]	; (1918 <sd_mmc_cmd13+0x50>)
    18d4:	2100      	movs	r1, #0
    18d6:	0018      	movs	r0, r3
    18d8:	4b10      	ldr	r3, [pc, #64]	; (191c <sd_mmc_cmd13+0x54>)
    18da:	4798      	blx	r3
    18dc:	0003      	movs	r3, r0
    18de:	001a      	movs	r2, r3
    18e0:	2301      	movs	r3, #1
    18e2:	4053      	eors	r3, r2
    18e4:	b2db      	uxtb	r3, r3
    18e6:	2b00      	cmp	r3, #0
    18e8:	d001      	beq.n	18ee <sd_mmc_cmd13+0x26>
				return false;
    18ea:	2300      	movs	r3, #0
    18ec:	e00e      	b.n	190c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    18ee:	4b0c      	ldr	r3, [pc, #48]	; (1920 <sd_mmc_cmd13+0x58>)
    18f0:	4798      	blx	r3
    18f2:	0002      	movs	r2, r0
    18f4:	23ff      	movs	r3, #255	; 0xff
    18f6:	4013      	ands	r3, r2
    18f8:	d006      	beq.n	1908 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    18fa:	687b      	ldr	r3, [r7, #4]
    18fc:	1e5a      	subs	r2, r3, #1
    18fe:	607a      	str	r2, [r7, #4]
    1900:	2b00      	cmp	r3, #0
    1902:	d1e6      	bne.n	18d2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    1904:	2300      	movs	r3, #0
    1906:	e001      	b.n	190c <sd_mmc_cmd13+0x44>
				break;
    1908:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    190a:	2301      	movs	r3, #1
}
    190c:	0018      	movs	r0, r3
    190e:	46bd      	mov	sp, r7
    1910:	b002      	add	sp, #8
    1912:	bd80      	pop	{r7, pc}
    1914:	00030d40 	.word	0x00030d40
    1918:	00001b0d 	.word	0x00001b0d
    191c:	00002d9d 	.word	0x00002d9d
    1920:	00002fdd 	.word	0x00002fdd

00001924 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    1924:	b590      	push	{r4, r7, lr}
    1926:	b085      	sub	sp, #20
    1928:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    192a:	4b38      	ldr	r3, [pc, #224]	; (1a0c <sd_acmd51+0xe8>)
    192c:	681b      	ldr	r3, [r3, #0]
    192e:	891b      	ldrh	r3, [r3, #8]
    1930:	041b      	lsls	r3, r3, #16
    1932:	4a37      	ldr	r2, [pc, #220]	; (1a10 <sd_acmd51+0xec>)
    1934:	0019      	movs	r1, r3
    1936:	0010      	movs	r0, r2
    1938:	4b36      	ldr	r3, [pc, #216]	; (1a14 <sd_acmd51+0xf0>)
    193a:	4798      	blx	r3
    193c:	0003      	movs	r3, r0
    193e:	001a      	movs	r2, r3
    1940:	2301      	movs	r3, #1
    1942:	4053      	eors	r3, r2
    1944:	b2db      	uxtb	r3, r3
    1946:	2b00      	cmp	r3, #0
    1948:	d001      	beq.n	194e <sd_acmd51+0x2a>
		return false;
    194a:	2300      	movs	r3, #0
    194c:	e059      	b.n	1a02 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    194e:	4832      	ldr	r0, [pc, #200]	; (1a18 <sd_acmd51+0xf4>)
    1950:	2301      	movs	r3, #1
    1952:	9300      	str	r3, [sp, #0]
    1954:	2301      	movs	r3, #1
    1956:	2208      	movs	r2, #8
    1958:	2100      	movs	r1, #0
    195a:	4c30      	ldr	r4, [pc, #192]	; (1a1c <sd_acmd51+0xf8>)
    195c:	47a0      	blx	r4
    195e:	0003      	movs	r3, r0
    1960:	001a      	movs	r2, r3
    1962:	2301      	movs	r3, #1
    1964:	4053      	eors	r3, r2
    1966:	b2db      	uxtb	r3, r3
    1968:	2b00      	cmp	r3, #0
    196a:	d001      	beq.n	1970 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    196c:	2300      	movs	r3, #0
    196e:	e048      	b.n	1a02 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    1970:	003b      	movs	r3, r7
    1972:	2101      	movs	r1, #1
    1974:	0018      	movs	r0, r3
    1976:	4b2a      	ldr	r3, [pc, #168]	; (1a20 <sd_acmd51+0xfc>)
    1978:	4798      	blx	r3
    197a:	0003      	movs	r3, r0
    197c:	001a      	movs	r2, r3
    197e:	2301      	movs	r3, #1
    1980:	4053      	eors	r3, r2
    1982:	b2db      	uxtb	r3, r3
    1984:	2b00      	cmp	r3, #0
    1986:	d001      	beq.n	198c <sd_acmd51+0x68>
		return false;
    1988:	2300      	movs	r3, #0
    198a:	e03a      	b.n	1a02 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    198c:	4b25      	ldr	r3, [pc, #148]	; (1a24 <sd_acmd51+0x100>)
    198e:	4798      	blx	r3
    1990:	0003      	movs	r3, r0
    1992:	001a      	movs	r2, r3
    1994:	2301      	movs	r3, #1
    1996:	4053      	eors	r3, r2
    1998:	b2db      	uxtb	r3, r3
    199a:	2b00      	cmp	r3, #0
    199c:	d001      	beq.n	19a2 <sd_acmd51+0x7e>
		return false;
    199e:	2300      	movs	r3, #0
    19a0:	e02f      	b.n	1a02 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    19a2:	0038      	movs	r0, r7
    19a4:	2304      	movs	r3, #4
    19a6:	2238      	movs	r2, #56	; 0x38
    19a8:	2140      	movs	r1, #64	; 0x40
    19aa:	4c1f      	ldr	r4, [pc, #124]	; (1a28 <sd_acmd51+0x104>)
    19ac:	47a0      	blx	r4
    19ae:	0003      	movs	r3, r0
    19b0:	2b01      	cmp	r3, #1
    19b2:	d008      	beq.n	19c6 <sd_acmd51+0xa2>
    19b4:	d302      	bcc.n	19bc <sd_acmd51+0x98>
    19b6:	2b02      	cmp	r3, #2
    19b8:	d00a      	beq.n	19d0 <sd_acmd51+0xac>
    19ba:	e01c      	b.n	19f6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    19bc:	4b13      	ldr	r3, [pc, #76]	; (1a0c <sd_acmd51+0xe8>)
    19be:	681b      	ldr	r3, [r3, #0]
    19c0:	2210      	movs	r2, #16
    19c2:	731a      	strb	r2, [r3, #12]
		break;
    19c4:	e01c      	b.n	1a00 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    19c6:	4b11      	ldr	r3, [pc, #68]	; (1a0c <sd_acmd51+0xe8>)
    19c8:	681b      	ldr	r3, [r3, #0]
    19ca:	221a      	movs	r2, #26
    19cc:	731a      	strb	r2, [r3, #12]
		break;
    19ce:	e017      	b.n	1a00 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    19d0:	0038      	movs	r0, r7
    19d2:	2301      	movs	r3, #1
    19d4:	222f      	movs	r2, #47	; 0x2f
    19d6:	2140      	movs	r1, #64	; 0x40
    19d8:	4c13      	ldr	r4, [pc, #76]	; (1a28 <sd_acmd51+0x104>)
    19da:	47a0      	blx	r4
    19dc:	0003      	movs	r3, r0
    19de:	2b01      	cmp	r3, #1
    19e0:	d104      	bne.n	19ec <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    19e2:	4b0a      	ldr	r3, [pc, #40]	; (1a0c <sd_acmd51+0xe8>)
    19e4:	681b      	ldr	r3, [r3, #0]
    19e6:	2230      	movs	r2, #48	; 0x30
    19e8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    19ea:	e009      	b.n	1a00 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    19ec:	4b07      	ldr	r3, [pc, #28]	; (1a0c <sd_acmd51+0xe8>)
    19ee:	681b      	ldr	r3, [r3, #0]
    19f0:	2220      	movs	r2, #32
    19f2:	731a      	strb	r2, [r3, #12]
		break;
    19f4:	e004      	b.n	1a00 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <sd_acmd51+0xe8>)
    19f8:	681b      	ldr	r3, [r3, #0]
    19fa:	2210      	movs	r2, #16
    19fc:	731a      	strb	r2, [r3, #12]
		break;
    19fe:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    1a00:	2301      	movs	r3, #1
}
    1a02:	0018      	movs	r0, r3
    1a04:	46bd      	mov	sp, r7
    1a06:	b003      	add	sp, #12
    1a08:	bd90      	pop	{r4, r7, pc}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	20000110 	.word	0x20000110
    1a10:	00001137 	.word	0x00001137
    1a14:	00002d9d 	.word	0x00002d9d
    1a18:	00081133 	.word	0x00081133
    1a1c:	00002dc5 	.word	0x00002dc5
    1a20:	00003095 	.word	0x00003095
    1a24:	00003139 	.word	0x00003139
    1a28:	000011a9 	.word	0x000011a9

00001a2c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    1a2c:	b580      	push	{r7, lr}
    1a2e:	b082      	sub	sp, #8
    1a30:	af00      	add	r7, sp, #0
    1a32:	0002      	movs	r2, r0
    1a34:	1dfb      	adds	r3, r7, #7
    1a36:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    1a38:	1dfb      	adds	r3, r7, #7
    1a3a:	781b      	ldrb	r3, [r3, #0]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d001      	beq.n	1a44 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    1a40:	2304      	movs	r3, #4
    1a42:	e047      	b.n	1ad4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    1a44:	1dfb      	adds	r3, r7, #7
    1a46:	781b      	ldrb	r3, [r3, #0]
    1a48:	4a24      	ldr	r2, [pc, #144]	; (1adc <sd_mmc_select_slot+0xb0>)
    1a4a:	015b      	lsls	r3, r3, #5
    1a4c:	18d3      	adds	r3, r2, r3
    1a4e:	330a      	adds	r3, #10
    1a50:	781b      	ldrb	r3, [r3, #0]
    1a52:	2b04      	cmp	r3, #4
    1a54:	d008      	beq.n	1a68 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    1a56:	1dfb      	adds	r3, r7, #7
    1a58:	781b      	ldrb	r3, [r3, #0]
    1a5a:	4a20      	ldr	r2, [pc, #128]	; (1adc <sd_mmc_select_slot+0xb0>)
    1a5c:	015b      	lsls	r3, r3, #5
    1a5e:	18d3      	adds	r3, r2, r3
    1a60:	330a      	adds	r3, #10
    1a62:	781b      	ldrb	r3, [r3, #0]
    1a64:	2b03      	cmp	r3, #3
    1a66:	d11d      	bne.n	1aa4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    1a68:	1dfb      	adds	r3, r7, #7
    1a6a:	781b      	ldrb	r3, [r3, #0]
    1a6c:	4a1b      	ldr	r2, [pc, #108]	; (1adc <sd_mmc_select_slot+0xb0>)
    1a6e:	015b      	lsls	r3, r3, #5
    1a70:	18d3      	adds	r3, r2, r3
    1a72:	330a      	adds	r3, #10
    1a74:	2202      	movs	r2, #2
    1a76:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    1a78:	1dfb      	adds	r3, r7, #7
    1a7a:	781a      	ldrb	r2, [r3, #0]
    1a7c:	4b17      	ldr	r3, [pc, #92]	; (1adc <sd_mmc_select_slot+0xb0>)
    1a7e:	0152      	lsls	r2, r2, #5
    1a80:	4917      	ldr	r1, [pc, #92]	; (1ae0 <sd_mmc_select_slot+0xb4>)
    1a82:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    1a84:	1dfb      	adds	r3, r7, #7
    1a86:	781b      	ldrb	r3, [r3, #0]
    1a88:	4a14      	ldr	r2, [pc, #80]	; (1adc <sd_mmc_select_slot+0xb0>)
    1a8a:	015b      	lsls	r3, r3, #5
    1a8c:	18d3      	adds	r3, r2, r3
    1a8e:	330d      	adds	r3, #13
    1a90:	2201      	movs	r2, #1
    1a92:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    1a94:	1dfb      	adds	r3, r7, #7
    1a96:	781b      	ldrb	r3, [r3, #0]
    1a98:	4a10      	ldr	r2, [pc, #64]	; (1adc <sd_mmc_select_slot+0xb0>)
    1a9a:	015b      	lsls	r3, r3, #5
    1a9c:	18d3      	adds	r3, r2, r3
    1a9e:	331e      	adds	r3, #30
    1aa0:	2200      	movs	r2, #0
    1aa2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1aa4:	4b0f      	ldr	r3, [pc, #60]	; (1ae4 <sd_mmc_select_slot+0xb8>)
    1aa6:	1dfa      	adds	r2, r7, #7
    1aa8:	7812      	ldrb	r2, [r2, #0]
    1aaa:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    1aac:	1dfb      	adds	r3, r7, #7
    1aae:	781b      	ldrb	r3, [r3, #0]
    1ab0:	015a      	lsls	r2, r3, #5
    1ab2:	4b0a      	ldr	r3, [pc, #40]	; (1adc <sd_mmc_select_slot+0xb0>)
    1ab4:	18d2      	adds	r2, r2, r3
    1ab6:	4b0c      	ldr	r3, [pc, #48]	; (1ae8 <sd_mmc_select_slot+0xbc>)
    1ab8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    1aba:	4b0c      	ldr	r3, [pc, #48]	; (1aec <sd_mmc_select_slot+0xc0>)
    1abc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    1abe:	1dfb      	adds	r3, r7, #7
    1ac0:	781b      	ldrb	r3, [r3, #0]
    1ac2:	4a06      	ldr	r2, [pc, #24]	; (1adc <sd_mmc_select_slot+0xb0>)
    1ac4:	015b      	lsls	r3, r3, #5
    1ac6:	18d3      	adds	r3, r2, r3
    1ac8:	330a      	adds	r3, #10
    1aca:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    1acc:	3b02      	subs	r3, #2
    1ace:	425a      	negs	r2, r3
    1ad0:	4153      	adcs	r3, r2
    1ad2:	b2db      	uxtb	r3, r3
}
    1ad4:	0018      	movs	r0, r3
    1ad6:	46bd      	mov	sp, r7
    1ad8:	b002      	add	sp, #8
    1ada:	bd80      	pop	{r7, pc}
    1adc:	200000ec 	.word	0x200000ec
    1ae0:	00061a80 	.word	0x00061a80
    1ae4:	2000010c 	.word	0x2000010c
    1ae8:	20000110 	.word	0x20000110
    1aec:	00001af1 	.word	0x00001af1

00001af0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    1af0:	b5b0      	push	{r4, r5, r7, lr}
    1af2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1af4:	4b09      	ldr	r3, [pc, #36]	; (1b1c <sd_mmc_configure_slot+0x2c>)
    1af6:	7818      	ldrb	r0, [r3, #0]
    1af8:	4b09      	ldr	r3, [pc, #36]	; (1b20 <sd_mmc_configure_slot+0x30>)
    1afa:	681b      	ldr	r3, [r3, #0]
    1afc:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1afe:	4b08      	ldr	r3, [pc, #32]	; (1b20 <sd_mmc_configure_slot+0x30>)
    1b00:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1b02:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1b04:	4b06      	ldr	r3, [pc, #24]	; (1b20 <sd_mmc_configure_slot+0x30>)
    1b06:	681b      	ldr	r3, [r3, #0]
    1b08:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1b0a:	1e5c      	subs	r4, r3, #1
    1b0c:	41a3      	sbcs	r3, r4
    1b0e:	b2db      	uxtb	r3, r3
    1b10:	4c04      	ldr	r4, [pc, #16]	; (1b24 <sd_mmc_configure_slot+0x34>)
    1b12:	47a0      	blx	r4
}
    1b14:	46c0      	nop			; (mov r8, r8)
    1b16:	46bd      	mov	sp, r7
    1b18:	bdb0      	pop	{r4, r5, r7, pc}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	2000010c 	.word	0x2000010c
    1b20:	20000110 	.word	0x20000110
    1b24:	00002c85 	.word	0x00002c85

00001b28 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    1b2c:	4b05      	ldr	r3, [pc, #20]	; (1b44 <sd_mmc_deselect_slot+0x1c>)
    1b2e:	781b      	ldrb	r3, [r3, #0]
    1b30:	2b00      	cmp	r3, #0
    1b32:	d104      	bne.n	1b3e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    1b34:	4b03      	ldr	r3, [pc, #12]	; (1b44 <sd_mmc_deselect_slot+0x1c>)
    1b36:	781b      	ldrb	r3, [r3, #0]
    1b38:	0018      	movs	r0, r3
    1b3a:	4b03      	ldr	r3, [pc, #12]	; (1b48 <sd_mmc_deselect_slot+0x20>)
    1b3c:	4798      	blx	r3
	}
}
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	46bd      	mov	sp, r7
    1b42:	bd80      	pop	{r7, pc}
    1b44:	2000010c 	.word	0x2000010c
    1b48:	00002d0d 	.word	0x00002d0d

00001b4c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    1b4c:	b580      	push	{r7, lr}
    1b4e:	b082      	sub	sp, #8
    1b50:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    1b52:	1dfb      	adds	r3, r7, #7
    1b54:	2200      	movs	r2, #0
    1b56:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    1b58:	4b59      	ldr	r3, [pc, #356]	; (1cc0 <sd_mmc_spi_card_init+0x174>)
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	2201      	movs	r2, #1
    1b5e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    1b60:	4b57      	ldr	r3, [pc, #348]	; (1cc0 <sd_mmc_spi_card_init+0x174>)
    1b62:	681b      	ldr	r3, [r3, #0]
    1b64:	2200      	movs	r2, #0
    1b66:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    1b68:	4b55      	ldr	r3, [pc, #340]	; (1cc0 <sd_mmc_spi_card_init+0x174>)
    1b6a:	681b      	ldr	r3, [r3, #0]
    1b6c:	2200      	movs	r2, #0
    1b6e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    1b70:	4b54      	ldr	r3, [pc, #336]	; (1cc4 <sd_mmc_spi_card_init+0x178>)
    1b72:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1b74:	2388      	movs	r3, #136	; 0x88
    1b76:	015b      	lsls	r3, r3, #5
    1b78:	2100      	movs	r1, #0
    1b7a:	0018      	movs	r0, r3
    1b7c:	4b52      	ldr	r3, [pc, #328]	; (1cc8 <sd_mmc_spi_card_init+0x17c>)
    1b7e:	4798      	blx	r3
    1b80:	0003      	movs	r3, r0
    1b82:	001a      	movs	r2, r3
    1b84:	2301      	movs	r3, #1
    1b86:	4053      	eors	r3, r2
    1b88:	b2db      	uxtb	r3, r3
    1b8a:	2b00      	cmp	r3, #0
    1b8c:	d001      	beq.n	1b92 <sd_mmc_spi_card_init+0x46>
		return false;
    1b8e:	2300      	movs	r3, #0
    1b90:	e092      	b.n	1cb8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    1b92:	1dfb      	adds	r3, r7, #7
    1b94:	0018      	movs	r0, r3
    1b96:	4b4d      	ldr	r3, [pc, #308]	; (1ccc <sd_mmc_spi_card_init+0x180>)
    1b98:	4798      	blx	r3
    1b9a:	0003      	movs	r3, r0
    1b9c:	001a      	movs	r2, r3
    1b9e:	2301      	movs	r3, #1
    1ba0:	4053      	eors	r3, r2
    1ba2:	b2db      	uxtb	r3, r3
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d001      	beq.n	1bac <sd_mmc_spi_card_init+0x60>
		return false;
    1ba8:	2300      	movs	r3, #0
    1baa:	e085      	b.n	1cb8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1bac:	4b48      	ldr	r3, [pc, #288]	; (1cd0 <sd_mmc_spi_card_init+0x184>)
    1bae:	4798      	blx	r3
    1bb0:	0003      	movs	r3, r0
    1bb2:	001a      	movs	r2, r3
    1bb4:	2301      	movs	r3, #1
    1bb6:	4053      	eors	r3, r2
    1bb8:	b2db      	uxtb	r3, r3
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d001      	beq.n	1bc2 <sd_mmc_spi_card_init+0x76>
		return false;
    1bbe:	2300      	movs	r3, #0
    1bc0:	e07a      	b.n	1cb8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1bc2:	4b3f      	ldr	r3, [pc, #252]	; (1cc0 <sd_mmc_spi_card_init+0x174>)
    1bc4:	681b      	ldr	r3, [r3, #0]
    1bc6:	7adb      	ldrb	r3, [r3, #11]
    1bc8:	001a      	movs	r2, r3
    1bca:	2301      	movs	r3, #1
    1bcc:	4013      	ands	r3, r2
    1bce:	d021      	beq.n	1c14 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1bd0:	1dfb      	adds	r3, r7, #7
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	0018      	movs	r0, r3
    1bd6:	4b3f      	ldr	r3, [pc, #252]	; (1cd4 <sd_mmc_spi_card_init+0x188>)
    1bd8:	4798      	blx	r3
    1bda:	0003      	movs	r3, r0
    1bdc:	001a      	movs	r2, r3
    1bde:	2301      	movs	r3, #1
    1be0:	4053      	eors	r3, r2
    1be2:	b2db      	uxtb	r3, r3
    1be4:	2b00      	cmp	r3, #0
    1be6:	d007      	beq.n	1bf8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    1be8:	4b35      	ldr	r3, [pc, #212]	; (1cc0 <sd_mmc_spi_card_init+0x174>)
    1bea:	681b      	ldr	r3, [r3, #0]
    1bec:	2202      	movs	r2, #2
    1bee:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    1bf0:	4b39      	ldr	r3, [pc, #228]	; (1cd8 <sd_mmc_spi_card_init+0x18c>)
    1bf2:	4798      	blx	r3
    1bf4:	0003      	movs	r3, r0
    1bf6:	e05f      	b.n	1cb8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1bf8:	4b38      	ldr	r3, [pc, #224]	; (1cdc <sd_mmc_spi_card_init+0x190>)
    1bfa:	2100      	movs	r1, #0
    1bfc:	0018      	movs	r0, r3
    1bfe:	4b32      	ldr	r3, [pc, #200]	; (1cc8 <sd_mmc_spi_card_init+0x17c>)
    1c00:	4798      	blx	r3
    1c02:	0003      	movs	r3, r0
    1c04:	001a      	movs	r2, r3
    1c06:	2301      	movs	r3, #1
    1c08:	4053      	eors	r3, r2
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d001      	beq.n	1c14 <sd_mmc_spi_card_init+0xc8>
			return false;
    1c10:	2300      	movs	r3, #0
    1c12:	e051      	b.n	1cb8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1c14:	4b2a      	ldr	r3, [pc, #168]	; (1cc0 <sd_mmc_spi_card_init+0x174>)
    1c16:	681b      	ldr	r3, [r3, #0]
    1c18:	7adb      	ldrb	r3, [r3, #11]
    1c1a:	001a      	movs	r2, r3
    1c1c:	2301      	movs	r3, #1
    1c1e:	4013      	ands	r3, r2
    1c20:	d017      	beq.n	1c52 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    1c22:	4b2f      	ldr	r3, [pc, #188]	; (1ce0 <sd_mmc_spi_card_init+0x194>)
    1c24:	4798      	blx	r3
    1c26:	0003      	movs	r3, r0
    1c28:	001a      	movs	r2, r3
    1c2a:	2301      	movs	r3, #1
    1c2c:	4053      	eors	r3, r2
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	2b00      	cmp	r3, #0
    1c32:	d001      	beq.n	1c38 <sd_mmc_spi_card_init+0xec>
			return false;
    1c34:	2300      	movs	r3, #0
    1c36:	e03f      	b.n	1cb8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    1c38:	4b2a      	ldr	r3, [pc, #168]	; (1ce4 <sd_mmc_spi_card_init+0x198>)
    1c3a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    1c3c:	4b2a      	ldr	r3, [pc, #168]	; (1ce8 <sd_mmc_spi_card_init+0x19c>)
    1c3e:	4798      	blx	r3
    1c40:	0003      	movs	r3, r0
    1c42:	001a      	movs	r2, r3
    1c44:	2301      	movs	r3, #1
    1c46:	4053      	eors	r3, r2
    1c48:	b2db      	uxtb	r3, r3
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d001      	beq.n	1c52 <sd_mmc_spi_card_init+0x106>
			return false;
    1c4e:	2300      	movs	r3, #0
    1c50:	e032      	b.n	1cb8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1c52:	4b1b      	ldr	r3, [pc, #108]	; (1cc0 <sd_mmc_spi_card_init+0x174>)
    1c54:	681b      	ldr	r3, [r3, #0]
    1c56:	7adb      	ldrb	r3, [r3, #11]
    1c58:	001a      	movs	r2, r3
    1c5a:	2301      	movs	r3, #1
    1c5c:	4013      	ands	r3, r2
    1c5e:	d016      	beq.n	1c8e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    1c60:	4b17      	ldr	r3, [pc, #92]	; (1cc0 <sd_mmc_spi_card_init+0x174>)
    1c62:	681b      	ldr	r3, [r3, #0]
    1c64:	7adb      	ldrb	r3, [r3, #11]
    1c66:	001a      	movs	r2, r3
    1c68:	2308      	movs	r3, #8
    1c6a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1c6c:	d10f      	bne.n	1c8e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1c6e:	2380      	movs	r3, #128	; 0x80
    1c70:	009b      	lsls	r3, r3, #2
    1c72:	4a1e      	ldr	r2, [pc, #120]	; (1cec <sd_mmc_spi_card_init+0x1a0>)
    1c74:	0019      	movs	r1, r3
    1c76:	0010      	movs	r0, r2
    1c78:	4b13      	ldr	r3, [pc, #76]	; (1cc8 <sd_mmc_spi_card_init+0x17c>)
    1c7a:	4798      	blx	r3
    1c7c:	0003      	movs	r3, r0
    1c7e:	001a      	movs	r2, r3
    1c80:	2301      	movs	r3, #1
    1c82:	4053      	eors	r3, r2
    1c84:	b2db      	uxtb	r3, r3
    1c86:	2b00      	cmp	r3, #0
    1c88:	d001      	beq.n	1c8e <sd_mmc_spi_card_init+0x142>
			return false;
    1c8a:	2300      	movs	r3, #0
    1c8c:	e014      	b.n	1cb8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1c8e:	4b0c      	ldr	r3, [pc, #48]	; (1cc0 <sd_mmc_spi_card_init+0x174>)
    1c90:	681b      	ldr	r3, [r3, #0]
    1c92:	7adb      	ldrb	r3, [r3, #11]
    1c94:	001a      	movs	r2, r3
    1c96:	2301      	movs	r3, #1
    1c98:	4013      	ands	r3, r2
    1c9a:	d00a      	beq.n	1cb2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1c9c:	4b14      	ldr	r3, [pc, #80]	; (1cf0 <sd_mmc_spi_card_init+0x1a4>)
    1c9e:	4798      	blx	r3
    1ca0:	0003      	movs	r3, r0
    1ca2:	001a      	movs	r2, r3
    1ca4:	2301      	movs	r3, #1
    1ca6:	4053      	eors	r3, r2
    1ca8:	b2db      	uxtb	r3, r3
    1caa:	2b00      	cmp	r3, #0
    1cac:	d001      	beq.n	1cb2 <sd_mmc_spi_card_init+0x166>
			return false;
    1cae:	2300      	movs	r3, #0
    1cb0:	e002      	b.n	1cb8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1cb2:	4b10      	ldr	r3, [pc, #64]	; (1cf4 <sd_mmc_spi_card_init+0x1a8>)
    1cb4:	4798      	blx	r3
	return true;
    1cb6:	2301      	movs	r3, #1
}
    1cb8:	0018      	movs	r0, r3
    1cba:	46bd      	mov	sp, r7
    1cbc:	b002      	add	sp, #8
    1cbe:	bd80      	pop	{r7, pc}
    1cc0:	20000110 	.word	0x20000110
    1cc4:	00002d51 	.word	0x00002d51
    1cc8:	00002d9d 	.word	0x00002d9d
    1ccc:	000014a1 	.word	0x000014a1
    1cd0:	00001495 	.word	0x00001495
    1cd4:	000013b1 	.word	0x000013b1
    1cd8:	00001cf9 	.word	0x00001cf9
    1cdc:	0000113b 	.word	0x0000113b
    1ce0:	0000163d 	.word	0x0000163d
    1ce4:	000017dd 	.word	0x000017dd
    1ce8:	00001925 	.word	0x00001925
    1cec:	00001110 	.word	0x00001110
    1cf0:	000018c9 	.word	0x000018c9
    1cf4:	00001af1 	.word	0x00001af1

00001cf8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    1cf8:	b580      	push	{r7, lr}
    1cfa:	b082      	sub	sp, #8
    1cfc:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1cfe:	2388      	movs	r3, #136	; 0x88
    1d00:	015b      	lsls	r3, r3, #5
    1d02:	2100      	movs	r1, #0
    1d04:	0018      	movs	r0, r3
    1d06:	4b32      	ldr	r3, [pc, #200]	; (1dd0 <sd_mmc_spi_install_mmc+0xd8>)
    1d08:	4798      	blx	r3
    1d0a:	0003      	movs	r3, r0
    1d0c:	001a      	movs	r2, r3
    1d0e:	2301      	movs	r3, #1
    1d10:	4053      	eors	r3, r2
    1d12:	b2db      	uxtb	r3, r3
    1d14:	2b00      	cmp	r3, #0
    1d16:	d001      	beq.n	1d1c <sd_mmc_spi_install_mmc+0x24>
		return false;
    1d18:	2300      	movs	r3, #0
    1d1a:	e055      	b.n	1dc8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    1d1c:	4b2d      	ldr	r3, [pc, #180]	; (1dd4 <sd_mmc_spi_install_mmc+0xdc>)
    1d1e:	4798      	blx	r3
    1d20:	0003      	movs	r3, r0
    1d22:	001a      	movs	r2, r3
    1d24:	2301      	movs	r3, #1
    1d26:	4053      	eors	r3, r2
    1d28:	b2db      	uxtb	r3, r3
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d001      	beq.n	1d32 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    1d2e:	2300      	movs	r3, #0
    1d30:	e04a      	b.n	1dc8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1d32:	4b29      	ldr	r3, [pc, #164]	; (1dd8 <sd_mmc_spi_install_mmc+0xe0>)
    1d34:	2100      	movs	r1, #0
    1d36:	0018      	movs	r0, r3
    1d38:	4b25      	ldr	r3, [pc, #148]	; (1dd0 <sd_mmc_spi_install_mmc+0xd8>)
    1d3a:	4798      	blx	r3
    1d3c:	0003      	movs	r3, r0
    1d3e:	001a      	movs	r2, r3
    1d40:	2301      	movs	r3, #1
    1d42:	4053      	eors	r3, r2
    1d44:	b2db      	uxtb	r3, r3
    1d46:	2b00      	cmp	r3, #0
    1d48:	d001      	beq.n	1d4e <sd_mmc_spi_install_mmc+0x56>
		return false;
    1d4a:	2300      	movs	r3, #0
    1d4c:	e03c      	b.n	1dc8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    1d4e:	4b23      	ldr	r3, [pc, #140]	; (1ddc <sd_mmc_spi_install_mmc+0xe4>)
    1d50:	4798      	blx	r3
    1d52:	0003      	movs	r3, r0
    1d54:	001a      	movs	r2, r3
    1d56:	2301      	movs	r3, #1
    1d58:	4053      	eors	r3, r2
    1d5a:	b2db      	uxtb	r3, r3
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d001      	beq.n	1d64 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    1d60:	2300      	movs	r3, #0
    1d62:	e031      	b.n	1dc8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    1d64:	4b1e      	ldr	r3, [pc, #120]	; (1de0 <sd_mmc_spi_install_mmc+0xe8>)
    1d66:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    1d68:	4b1e      	ldr	r3, [pc, #120]	; (1de4 <sd_mmc_spi_install_mmc+0xec>)
    1d6a:	681b      	ldr	r3, [r3, #0]
    1d6c:	7b1b      	ldrb	r3, [r3, #12]
    1d6e:	2b3f      	cmp	r3, #63	; 0x3f
    1d70:	d90c      	bls.n	1d8c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    1d72:	1dfb      	adds	r3, r7, #7
    1d74:	0018      	movs	r0, r3
    1d76:	4b1c      	ldr	r3, [pc, #112]	; (1de8 <sd_mmc_spi_install_mmc+0xf0>)
    1d78:	4798      	blx	r3
    1d7a:	0003      	movs	r3, r0
    1d7c:	001a      	movs	r2, r3
    1d7e:	2301      	movs	r3, #1
    1d80:	4053      	eors	r3, r2
    1d82:	b2db      	uxtb	r3, r3
    1d84:	2b00      	cmp	r3, #0
    1d86:	d001      	beq.n	1d8c <sd_mmc_spi_install_mmc+0x94>
			return false;
    1d88:	2300      	movs	r3, #0
    1d8a:	e01d      	b.n	1dc8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1d8c:	2380      	movs	r3, #128	; 0x80
    1d8e:	009b      	lsls	r3, r3, #2
    1d90:	4a16      	ldr	r2, [pc, #88]	; (1dec <sd_mmc_spi_install_mmc+0xf4>)
    1d92:	0019      	movs	r1, r3
    1d94:	0010      	movs	r0, r2
    1d96:	4b0e      	ldr	r3, [pc, #56]	; (1dd0 <sd_mmc_spi_install_mmc+0xd8>)
    1d98:	4798      	blx	r3
    1d9a:	0003      	movs	r3, r0
    1d9c:	001a      	movs	r2, r3
    1d9e:	2301      	movs	r3, #1
    1da0:	4053      	eors	r3, r2
    1da2:	b2db      	uxtb	r3, r3
    1da4:	2b00      	cmp	r3, #0
    1da6:	d001      	beq.n	1dac <sd_mmc_spi_install_mmc+0xb4>
		return false;
    1da8:	2300      	movs	r3, #0
    1daa:	e00d      	b.n	1dc8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1dac:	4b10      	ldr	r3, [pc, #64]	; (1df0 <sd_mmc_spi_install_mmc+0xf8>)
    1dae:	4798      	blx	r3
    1db0:	0003      	movs	r3, r0
    1db2:	001a      	movs	r2, r3
    1db4:	2301      	movs	r3, #1
    1db6:	4053      	eors	r3, r2
    1db8:	b2db      	uxtb	r3, r3
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d001      	beq.n	1dc2 <sd_mmc_spi_install_mmc+0xca>
		return false;
    1dbe:	2300      	movs	r3, #0
    1dc0:	e002      	b.n	1dc8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1dc2:	4b0c      	ldr	r3, [pc, #48]	; (1df4 <sd_mmc_spi_install_mmc+0xfc>)
    1dc4:	4798      	blx	r3
	return true;
    1dc6:	2301      	movs	r3, #1
}
    1dc8:	0018      	movs	r0, r3
    1dca:	46bd      	mov	sp, r7
    1dcc:	b002      	add	sp, #8
    1dce:	bd80      	pop	{r7, pc}
    1dd0:	00002d9d 	.word	0x00002d9d
    1dd4:	00001305 	.word	0x00001305
    1dd8:	0000113b 	.word	0x0000113b
    1ddc:	0000163d 	.word	0x0000163d
    1de0:	000016ad 	.word	0x000016ad
    1de4:	20000110 	.word	0x20000110
    1de8:	00001511 	.word	0x00001511
    1dec:	00001110 	.word	0x00001110
    1df0:	000018c9 	.word	0x000018c9
    1df4:	00001af1 	.word	0x00001af1

00001df8 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    1df8:	b580      	push	{r7, lr}
    1dfa:	b082      	sub	sp, #8
    1dfc:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1dfe:	1dfb      	adds	r3, r7, #7
    1e00:	2200      	movs	r2, #0
    1e02:	701a      	strb	r2, [r3, #0]
    1e04:	e00c      	b.n	1e20 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1e06:	1dfb      	adds	r3, r7, #7
    1e08:	781b      	ldrb	r3, [r3, #0]
    1e0a:	4a0c      	ldr	r2, [pc, #48]	; (1e3c <sd_mmc_init+0x44>)
    1e0c:	015b      	lsls	r3, r3, #5
    1e0e:	18d3      	adds	r3, r2, r3
    1e10:	330a      	adds	r3, #10
    1e12:	2204      	movs	r2, #4
    1e14:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1e16:	1dfb      	adds	r3, r7, #7
    1e18:	781a      	ldrb	r2, [r3, #0]
    1e1a:	1dfb      	adds	r3, r7, #7
    1e1c:	3201      	adds	r2, #1
    1e1e:	701a      	strb	r2, [r3, #0]
    1e20:	1dfb      	adds	r3, r7, #7
    1e22:	781b      	ldrb	r3, [r3, #0]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d0ee      	beq.n	1e06 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    1e28:	4b05      	ldr	r3, [pc, #20]	; (1e40 <sd_mmc_init+0x48>)
    1e2a:	22ff      	movs	r2, #255	; 0xff
    1e2c:	701a      	strb	r2, [r3, #0]
	driver_init();
    1e2e:	4b05      	ldr	r3, [pc, #20]	; (1e44 <sd_mmc_init+0x4c>)
    1e30:	4798      	blx	r3
}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	46bd      	mov	sp, r7
    1e36:	b002      	add	sp, #8
    1e38:	bd80      	pop	{r7, pc}
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	200000ec 	.word	0x200000ec
    1e40:	2000010c 	.word	0x2000010c
    1e44:	00002bbd 	.word	0x00002bbd

00001e48 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    1e48:	b590      	push	{r4, r7, lr}
    1e4a:	b085      	sub	sp, #20
    1e4c:	af00      	add	r7, sp, #0
    1e4e:	0002      	movs	r2, r0
    1e50:	1dfb      	adds	r3, r7, #7
    1e52:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1e54:	230f      	movs	r3, #15
    1e56:	18fc      	adds	r4, r7, r3
    1e58:	1dfb      	adds	r3, r7, #7
    1e5a:	781b      	ldrb	r3, [r3, #0]
    1e5c:	0018      	movs	r0, r3
    1e5e:	4b13      	ldr	r3, [pc, #76]	; (1eac <sd_mmc_check+0x64>)
    1e60:	4798      	blx	r3
    1e62:	0003      	movs	r3, r0
    1e64:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    1e66:	230f      	movs	r3, #15
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	781b      	ldrb	r3, [r3, #0]
    1e6c:	2b01      	cmp	r3, #1
    1e6e:	d005      	beq.n	1e7c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    1e70:	4b0f      	ldr	r3, [pc, #60]	; (1eb0 <sd_mmc_check+0x68>)
    1e72:	4798      	blx	r3
		return sd_mmc_err;
    1e74:	230f      	movs	r3, #15
    1e76:	18fb      	adds	r3, r7, r3
    1e78:	781b      	ldrb	r3, [r3, #0]
    1e7a:	e012      	b.n	1ea2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1e7c:	4b0d      	ldr	r3, [pc, #52]	; (1eb4 <sd_mmc_check+0x6c>)
    1e7e:	4798      	blx	r3
    1e80:	1e03      	subs	r3, r0, #0
    1e82:	d007      	beq.n	1e94 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    1e84:	4b0c      	ldr	r3, [pc, #48]	; (1eb8 <sd_mmc_check+0x70>)
    1e86:	681b      	ldr	r3, [r3, #0]
    1e88:	2200      	movs	r2, #0
    1e8a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1e8c:	4b08      	ldr	r3, [pc, #32]	; (1eb0 <sd_mmc_check+0x68>)
    1e8e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1e90:	2301      	movs	r3, #1
    1e92:	e006      	b.n	1ea2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1e94:	4b08      	ldr	r3, [pc, #32]	; (1eb8 <sd_mmc_check+0x70>)
    1e96:	681b      	ldr	r3, [r3, #0]
    1e98:	2203      	movs	r2, #3
    1e9a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1e9c:	4b04      	ldr	r3, [pc, #16]	; (1eb0 <sd_mmc_check+0x68>)
    1e9e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1ea0:	2303      	movs	r3, #3
}
    1ea2:	0018      	movs	r0, r3
    1ea4:	46bd      	mov	sp, r7
    1ea6:	b005      	add	sp, #20
    1ea8:	bd90      	pop	{r4, r7, pc}
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	00001a2d 	.word	0x00001a2d
    1eb0:	00001b29 	.word	0x00001b29
    1eb4:	00001b4d 	.word	0x00001b4d
    1eb8:	20000110 	.word	0x20000110

00001ebc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b082      	sub	sp, #8
    1ec0:	af00      	add	r7, sp, #0
    1ec2:	0002      	movs	r2, r0
    1ec4:	1dfb      	adds	r3, r7, #7
    1ec6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1ec8:	1dfb      	adds	r3, r7, #7
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	0018      	movs	r0, r3
    1ece:	4b07      	ldr	r3, [pc, #28]	; (1eec <sd_mmc_get_type+0x30>)
    1ed0:	4798      	blx	r3
    1ed2:	1e03      	subs	r3, r0, #0
    1ed4:	d001      	beq.n	1eda <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    1ed6:	2300      	movs	r3, #0
    1ed8:	e004      	b.n	1ee4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    1eda:	4b05      	ldr	r3, [pc, #20]	; (1ef0 <sd_mmc_get_type+0x34>)
    1edc:	4798      	blx	r3
	return sd_mmc_card->type;
    1ede:	4b05      	ldr	r3, [pc, #20]	; (1ef4 <sd_mmc_get_type+0x38>)
    1ee0:	681b      	ldr	r3, [r3, #0]
    1ee2:	7adb      	ldrb	r3, [r3, #11]
}
    1ee4:	0018      	movs	r0, r3
    1ee6:	46bd      	mov	sp, r7
    1ee8:	b002      	add	sp, #8
    1eea:	bd80      	pop	{r7, pc}
    1eec:	00001a2d 	.word	0x00001a2d
    1ef0:	00001b29 	.word	0x00001b29
    1ef4:	20000110 	.word	0x20000110

00001ef8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	b082      	sub	sp, #8
    1efc:	af00      	add	r7, sp, #0
    1efe:	0002      	movs	r2, r0
    1f00:	1dfb      	adds	r3, r7, #7
    1f02:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1f04:	1dfb      	adds	r3, r7, #7
    1f06:	781b      	ldrb	r3, [r3, #0]
    1f08:	0018      	movs	r0, r3
    1f0a:	4b07      	ldr	r3, [pc, #28]	; (1f28 <sd_mmc_get_capacity+0x30>)
    1f0c:	4798      	blx	r3
    1f0e:	1e03      	subs	r3, r0, #0
    1f10:	d001      	beq.n	1f16 <sd_mmc_get_capacity+0x1e>
		return 0;
    1f12:	2300      	movs	r3, #0
    1f14:	e004      	b.n	1f20 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    1f16:	4b05      	ldr	r3, [pc, #20]	; (1f2c <sd_mmc_get_capacity+0x34>)
    1f18:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1f1a:	4b05      	ldr	r3, [pc, #20]	; (1f30 <sd_mmc_get_capacity+0x38>)
    1f1c:	681b      	ldr	r3, [r3, #0]
    1f1e:	685b      	ldr	r3, [r3, #4]
}
    1f20:	0018      	movs	r0, r3
    1f22:	46bd      	mov	sp, r7
    1f24:	b002      	add	sp, #8
    1f26:	bd80      	pop	{r7, pc}
    1f28:	00001a2d 	.word	0x00001a2d
    1f2c:	00001b29 	.word	0x00001b29
    1f30:	20000110 	.word	0x20000110

00001f34 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	b082      	sub	sp, #8
    1f38:	af00      	add	r7, sp, #0
    1f3a:	0002      	movs	r2, r0
    1f3c:	1dfb      	adds	r3, r7, #7
    1f3e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    1f40:	2300      	movs	r3, #0
}
    1f42:	0018      	movs	r0, r3
    1f44:	46bd      	mov	sp, r7
    1f46:	b002      	add	sp, #8
    1f48:	bd80      	pop	{r7, pc}
	...

00001f4c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1f4c:	b590      	push	{r4, r7, lr}
    1f4e:	b089      	sub	sp, #36	; 0x24
    1f50:	af02      	add	r7, sp, #8
    1f52:	6039      	str	r1, [r7, #0]
    1f54:	0011      	movs	r1, r2
    1f56:	1dfb      	adds	r3, r7, #7
    1f58:	1c02      	adds	r2, r0, #0
    1f5a:	701a      	strb	r2, [r3, #0]
    1f5c:	1d3b      	adds	r3, r7, #4
    1f5e:	1c0a      	adds	r2, r1, #0
    1f60:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1f62:	230f      	movs	r3, #15
    1f64:	18fc      	adds	r4, r7, r3
    1f66:	1dfb      	adds	r3, r7, #7
    1f68:	781b      	ldrb	r3, [r3, #0]
    1f6a:	0018      	movs	r0, r3
    1f6c:	4b29      	ldr	r3, [pc, #164]	; (2014 <STACK_SIZE+0x14>)
    1f6e:	4798      	blx	r3
    1f70:	0003      	movs	r3, r0
    1f72:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1f74:	230f      	movs	r3, #15
    1f76:	18fb      	adds	r3, r7, r3
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d003      	beq.n	1f86 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    1f7e:	230f      	movs	r3, #15
    1f80:	18fb      	adds	r3, r7, r3
    1f82:	781b      	ldrb	r3, [r3, #0]
    1f84:	e041      	b.n	200a <STACK_SIZE+0xa>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1f86:	4b24      	ldr	r3, [pc, #144]	; (2018 <STACK_SIZE+0x18>)
    1f88:	4798      	blx	r3
    1f8a:	0003      	movs	r3, r0
    1f8c:	001a      	movs	r2, r3
    1f8e:	2301      	movs	r3, #1
    1f90:	4053      	eors	r3, r2
    1f92:	b2db      	uxtb	r3, r3
    1f94:	2b00      	cmp	r3, #0
    1f96:	d003      	beq.n	1fa0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    1f98:	4b20      	ldr	r3, [pc, #128]	; (201c <STACK_SIZE+0x1c>)
    1f9a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1f9c:	2305      	movs	r3, #5
    1f9e:	e034      	b.n	200a <STACK_SIZE+0xa>
	}

	if (nb_block > 1) {
    1fa0:	1d3b      	adds	r3, r7, #4
    1fa2:	881b      	ldrh	r3, [r3, #0]
    1fa4:	2b01      	cmp	r3, #1
    1fa6:	d902      	bls.n	1fae <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    1fa8:	4b1d      	ldr	r3, [pc, #116]	; (2020 <STACK_SIZE+0x20>)
    1faa:	617b      	str	r3, [r7, #20]
    1fac:	e001      	b.n	1fb2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    1fae:	4b1d      	ldr	r3, [pc, #116]	; (2024 <STACK_SIZE+0x24>)
    1fb0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1fb2:	4b1d      	ldr	r3, [pc, #116]	; (2028 <STACK_SIZE+0x28>)
    1fb4:	681b      	ldr	r3, [r3, #0]
    1fb6:	7adb      	ldrb	r3, [r3, #11]
    1fb8:	001a      	movs	r2, r3
    1fba:	2308      	movs	r3, #8
    1fbc:	4013      	ands	r3, r2
    1fbe:	d002      	beq.n	1fc6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    1fc0:	683b      	ldr	r3, [r7, #0]
    1fc2:	613b      	str	r3, [r7, #16]
    1fc4:	e002      	b.n	1fcc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1fc6:	683b      	ldr	r3, [r7, #0]
    1fc8:	025b      	lsls	r3, r3, #9
    1fca:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1fcc:	1d3b      	adds	r3, r7, #4
    1fce:	881c      	ldrh	r4, [r3, #0]
    1fd0:	2380      	movs	r3, #128	; 0x80
    1fd2:	009a      	lsls	r2, r3, #2
    1fd4:	6939      	ldr	r1, [r7, #16]
    1fd6:	6978      	ldr	r0, [r7, #20]
    1fd8:	2301      	movs	r3, #1
    1fda:	9300      	str	r3, [sp, #0]
    1fdc:	0023      	movs	r3, r4
    1fde:	4c13      	ldr	r4, [pc, #76]	; (202c <STACK_SIZE+0x2c>)
    1fe0:	47a0      	blx	r4
    1fe2:	0003      	movs	r3, r0
    1fe4:	001a      	movs	r2, r3
    1fe6:	2301      	movs	r3, #1
    1fe8:	4053      	eors	r3, r2
    1fea:	b2db      	uxtb	r3, r3
    1fec:	2b00      	cmp	r3, #0
    1fee:	d003      	beq.n	1ff8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    1ff0:	4b0a      	ldr	r3, [pc, #40]	; (201c <STACK_SIZE+0x1c>)
    1ff2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1ff4:	2305      	movs	r3, #5
    1ff6:	e008      	b.n	200a <STACK_SIZE+0xa>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1ff8:	4b0d      	ldr	r3, [pc, #52]	; (2030 <STACK_SIZE+0x30>)
    1ffa:	1d3a      	adds	r2, r7, #4
    1ffc:	8812      	ldrh	r2, [r2, #0]
    1ffe:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    2000:	4b0c      	ldr	r3, [pc, #48]	; (2034 <STACK_SIZE+0x34>)
    2002:	1d3a      	adds	r2, r7, #4
    2004:	8812      	ldrh	r2, [r2, #0]
    2006:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2008:	2300      	movs	r3, #0
}
    200a:	0018      	movs	r0, r3
    200c:	46bd      	mov	sp, r7
    200e:	b007      	add	sp, #28
    2010:	bd90      	pop	{r4, r7, pc}
    2012:	46c0      	nop			; (mov r8, r8)
    2014:	00001a2d 	.word	0x00001a2d
    2018:	000018c9 	.word	0x000018c9
    201c:	00001b29 	.word	0x00001b29
    2020:	00101112 	.word	0x00101112
    2024:	00081111 	.word	0x00081111
    2028:	20000110 	.word	0x20000110
    202c:	00002dc5 	.word	0x00002dc5
    2030:	20000116 	.word	0x20000116
    2034:	20000114 	.word	0x20000114

00002038 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    2038:	b580      	push	{r7, lr}
    203a:	b082      	sub	sp, #8
    203c:	af00      	add	r7, sp, #0
    203e:	6078      	str	r0, [r7, #4]
    2040:	000a      	movs	r2, r1
    2042:	1cbb      	adds	r3, r7, #2
    2044:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    2046:	1cbb      	adds	r3, r7, #2
    2048:	881a      	ldrh	r2, [r3, #0]
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	0011      	movs	r1, r2
    204e:	0018      	movs	r0, r3
    2050:	4b0d      	ldr	r3, [pc, #52]	; (2088 <sd_mmc_start_read_blocks+0x50>)
    2052:	4798      	blx	r3
    2054:	0003      	movs	r3, r0
    2056:	001a      	movs	r2, r3
    2058:	2301      	movs	r3, #1
    205a:	4053      	eors	r3, r2
    205c:	b2db      	uxtb	r3, r3
    205e:	2b00      	cmp	r3, #0
    2060:	d004      	beq.n	206c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    2062:	4b0a      	ldr	r3, [pc, #40]	; (208c <sd_mmc_start_read_blocks+0x54>)
    2064:	2200      	movs	r2, #0
    2066:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    2068:	2305      	movs	r3, #5
    206a:	e008      	b.n	207e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <sd_mmc_start_read_blocks+0x54>)
    206e:	881a      	ldrh	r2, [r3, #0]
    2070:	1cbb      	adds	r3, r7, #2
    2072:	881b      	ldrh	r3, [r3, #0]
    2074:	1ad3      	subs	r3, r2, r3
    2076:	b29a      	uxth	r2, r3
    2078:	4b04      	ldr	r3, [pc, #16]	; (208c <sd_mmc_start_read_blocks+0x54>)
    207a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    207c:	2300      	movs	r3, #0
}
    207e:	0018      	movs	r0, r3
    2080:	46bd      	mov	sp, r7
    2082:	b002      	add	sp, #8
    2084:	bd80      	pop	{r7, pc}
    2086:	46c0      	nop			; (mov r8, r8)
    2088:	00003095 	.word	0x00003095
    208c:	20000116 	.word	0x20000116

00002090 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    2090:	b580      	push	{r7, lr}
    2092:	b082      	sub	sp, #8
    2094:	af00      	add	r7, sp, #0
    2096:	0002      	movs	r2, r0
    2098:	1dfb      	adds	r3, r7, #7
    209a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    209c:	4b1c      	ldr	r3, [pc, #112]	; (2110 <sd_mmc_wait_end_of_read_blocks+0x80>)
    209e:	4798      	blx	r3
    20a0:	0003      	movs	r3, r0
    20a2:	001a      	movs	r2, r3
    20a4:	2301      	movs	r3, #1
    20a6:	4053      	eors	r3, r2
    20a8:	b2db      	uxtb	r3, r3
    20aa:	2b00      	cmp	r3, #0
    20ac:	d001      	beq.n	20b2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    20ae:	2305      	movs	r3, #5
    20b0:	e029      	b.n	2106 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    20b2:	1dfb      	adds	r3, r7, #7
    20b4:	781b      	ldrb	r3, [r3, #0]
    20b6:	2b00      	cmp	r3, #0
    20b8:	d003      	beq.n	20c2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    20ba:	4b16      	ldr	r3, [pc, #88]	; (2114 <sd_mmc_wait_end_of_read_blocks+0x84>)
    20bc:	2200      	movs	r2, #0
    20be:	801a      	strh	r2, [r3, #0]
    20c0:	e005      	b.n	20ce <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    20c2:	4b14      	ldr	r3, [pc, #80]	; (2114 <sd_mmc_wait_end_of_read_blocks+0x84>)
    20c4:	881b      	ldrh	r3, [r3, #0]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d001      	beq.n	20ce <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    20ca:	2300      	movs	r3, #0
    20cc:	e01b      	b.n	2106 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    20ce:	4b12      	ldr	r3, [pc, #72]	; (2118 <sd_mmc_wait_end_of_read_blocks+0x88>)
    20d0:	881b      	ldrh	r3, [r3, #0]
    20d2:	2b01      	cmp	r3, #1
    20d4:	d103      	bne.n	20de <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    20d6:	4b11      	ldr	r3, [pc, #68]	; (211c <sd_mmc_wait_end_of_read_blocks+0x8c>)
    20d8:	4798      	blx	r3
		return SD_MMC_OK;
    20da:	2300      	movs	r3, #0
    20dc:	e013      	b.n	2106 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    20de:	4b10      	ldr	r3, [pc, #64]	; (2120 <sd_mmc_wait_end_of_read_blocks+0x90>)
    20e0:	2100      	movs	r1, #0
    20e2:	0018      	movs	r0, r3
    20e4:	4b0f      	ldr	r3, [pc, #60]	; (2124 <sd_mmc_wait_end_of_read_blocks+0x94>)
    20e6:	4798      	blx	r3
    20e8:	0003      	movs	r3, r0
    20ea:	001a      	movs	r2, r3
    20ec:	2301      	movs	r3, #1
    20ee:	4053      	eors	r3, r2
    20f0:	b2db      	uxtb	r3, r3
    20f2:	2b00      	cmp	r3, #0
    20f4:	d004      	beq.n	2100 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    20f6:	4b0a      	ldr	r3, [pc, #40]	; (2120 <sd_mmc_wait_end_of_read_blocks+0x90>)
    20f8:	2100      	movs	r1, #0
    20fa:	0018      	movs	r0, r3
    20fc:	4b09      	ldr	r3, [pc, #36]	; (2124 <sd_mmc_wait_end_of_read_blocks+0x94>)
    20fe:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    2100:	4b06      	ldr	r3, [pc, #24]	; (211c <sd_mmc_wait_end_of_read_blocks+0x8c>)
    2102:	4798      	blx	r3
	return SD_MMC_OK;
    2104:	2300      	movs	r3, #0
}
    2106:	0018      	movs	r0, r3
    2108:	46bd      	mov	sp, r7
    210a:	b002      	add	sp, #8
    210c:	bd80      	pop	{r7, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	00003139 	.word	0x00003139
    2114:	20000116 	.word	0x20000116
    2118:	20000114 	.word	0x20000114
    211c:	00001b29 	.word	0x00001b29
    2120:	0000310c 	.word	0x0000310c
    2124:	00002d9d 	.word	0x00002d9d

00002128 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    2128:	b590      	push	{r4, r7, lr}
    212a:	b089      	sub	sp, #36	; 0x24
    212c:	af02      	add	r7, sp, #8
    212e:	6039      	str	r1, [r7, #0]
    2130:	0011      	movs	r1, r2
    2132:	1dfb      	adds	r3, r7, #7
    2134:	1c02      	adds	r2, r0, #0
    2136:	701a      	strb	r2, [r3, #0]
    2138:	1d3b      	adds	r3, r7, #4
    213a:	1c0a      	adds	r2, r1, #0
    213c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    213e:	230f      	movs	r3, #15
    2140:	18fc      	adds	r4, r7, r3
    2142:	1dfb      	adds	r3, r7, #7
    2144:	781b      	ldrb	r3, [r3, #0]
    2146:	0018      	movs	r0, r3
    2148:	4b28      	ldr	r3, [pc, #160]	; (21ec <sd_mmc_init_write_blocks+0xc4>)
    214a:	4798      	blx	r3
    214c:	0003      	movs	r3, r0
    214e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    2150:	230f      	movs	r3, #15
    2152:	18fb      	adds	r3, r7, r3
    2154:	781b      	ldrb	r3, [r3, #0]
    2156:	2b00      	cmp	r3, #0
    2158:	d003      	beq.n	2162 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    215a:	230f      	movs	r3, #15
    215c:	18fb      	adds	r3, r7, r3
    215e:	781b      	ldrb	r3, [r3, #0]
    2160:	e03f      	b.n	21e2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    2162:	1dfb      	adds	r3, r7, #7
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	0018      	movs	r0, r3
    2168:	4b21      	ldr	r3, [pc, #132]	; (21f0 <sd_mmc_init_write_blocks+0xc8>)
    216a:	4798      	blx	r3
    216c:	1e03      	subs	r3, r0, #0
    216e:	d003      	beq.n	2178 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    2170:	4b20      	ldr	r3, [pc, #128]	; (21f4 <sd_mmc_init_write_blocks+0xcc>)
    2172:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    2174:	2307      	movs	r3, #7
    2176:	e034      	b.n	21e2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    2178:	1d3b      	adds	r3, r7, #4
    217a:	881b      	ldrh	r3, [r3, #0]
    217c:	2b01      	cmp	r3, #1
    217e:	d902      	bls.n	2186 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    2180:	4b1d      	ldr	r3, [pc, #116]	; (21f8 <sd_mmc_init_write_blocks+0xd0>)
    2182:	617b      	str	r3, [r7, #20]
    2184:	e001      	b.n	218a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    2186:	4b1d      	ldr	r3, [pc, #116]	; (21fc <sd_mmc_init_write_blocks+0xd4>)
    2188:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    218a:	4b1d      	ldr	r3, [pc, #116]	; (2200 <sd_mmc_init_write_blocks+0xd8>)
    218c:	681b      	ldr	r3, [r3, #0]
    218e:	7adb      	ldrb	r3, [r3, #11]
    2190:	001a      	movs	r2, r3
    2192:	2308      	movs	r3, #8
    2194:	4013      	ands	r3, r2
    2196:	d002      	beq.n	219e <sd_mmc_init_write_blocks+0x76>
		arg = start;
    2198:	683b      	ldr	r3, [r7, #0]
    219a:	613b      	str	r3, [r7, #16]
    219c:	e002      	b.n	21a4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    219e:	683b      	ldr	r3, [r7, #0]
    21a0:	025b      	lsls	r3, r3, #9
    21a2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    21a4:	1d3b      	adds	r3, r7, #4
    21a6:	881c      	ldrh	r4, [r3, #0]
    21a8:	2380      	movs	r3, #128	; 0x80
    21aa:	009a      	lsls	r2, r3, #2
    21ac:	6939      	ldr	r1, [r7, #16]
    21ae:	6978      	ldr	r0, [r7, #20]
    21b0:	2301      	movs	r3, #1
    21b2:	9300      	str	r3, [sp, #0]
    21b4:	0023      	movs	r3, r4
    21b6:	4c13      	ldr	r4, [pc, #76]	; (2204 <sd_mmc_init_write_blocks+0xdc>)
    21b8:	47a0      	blx	r4
    21ba:	0003      	movs	r3, r0
    21bc:	001a      	movs	r2, r3
    21be:	2301      	movs	r3, #1
    21c0:	4053      	eors	r3, r2
    21c2:	b2db      	uxtb	r3, r3
    21c4:	2b00      	cmp	r3, #0
    21c6:	d003      	beq.n	21d0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    21c8:	4b0a      	ldr	r3, [pc, #40]	; (21f4 <sd_mmc_init_write_blocks+0xcc>)
    21ca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    21cc:	2305      	movs	r3, #5
    21ce:	e008      	b.n	21e2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    21d0:	4b0d      	ldr	r3, [pc, #52]	; (2208 <sd_mmc_init_write_blocks+0xe0>)
    21d2:	1d3a      	adds	r2, r7, #4
    21d4:	8812      	ldrh	r2, [r2, #0]
    21d6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    21d8:	4b0c      	ldr	r3, [pc, #48]	; (220c <sd_mmc_init_write_blocks+0xe4>)
    21da:	1d3a      	adds	r2, r7, #4
    21dc:	8812      	ldrh	r2, [r2, #0]
    21de:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    21e0:	2300      	movs	r3, #0
}
    21e2:	0018      	movs	r0, r3
    21e4:	46bd      	mov	sp, r7
    21e6:	b007      	add	sp, #28
    21e8:	bd90      	pop	{r4, r7, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	00001a2d 	.word	0x00001a2d
    21f0:	00001f35 	.word	0x00001f35
    21f4:	00001b29 	.word	0x00001b29
    21f8:	00109119 	.word	0x00109119
    21fc:	00089118 	.word	0x00089118
    2200:	20000110 	.word	0x20000110
    2204:	00002dc5 	.word	0x00002dc5
    2208:	20000116 	.word	0x20000116
    220c:	20000114 	.word	0x20000114

00002210 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    2210:	b580      	push	{r7, lr}
    2212:	b082      	sub	sp, #8
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
    2218:	000a      	movs	r2, r1
    221a:	1cbb      	adds	r3, r7, #2
    221c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    221e:	1cbb      	adds	r3, r7, #2
    2220:	881a      	ldrh	r2, [r3, #0]
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	0011      	movs	r1, r2
    2226:	0018      	movs	r0, r3
    2228:	4b0d      	ldr	r3, [pc, #52]	; (2260 <sd_mmc_start_write_blocks+0x50>)
    222a:	4798      	blx	r3
    222c:	0003      	movs	r3, r0
    222e:	001a      	movs	r2, r3
    2230:	2301      	movs	r3, #1
    2232:	4053      	eors	r3, r2
    2234:	b2db      	uxtb	r3, r3
    2236:	2b00      	cmp	r3, #0
    2238:	d004      	beq.n	2244 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    223a:	4b0a      	ldr	r3, [pc, #40]	; (2264 <sd_mmc_start_write_blocks+0x54>)
    223c:	2200      	movs	r2, #0
    223e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    2240:	2305      	movs	r3, #5
    2242:	e008      	b.n	2256 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    2244:	4b07      	ldr	r3, [pc, #28]	; (2264 <sd_mmc_start_write_blocks+0x54>)
    2246:	881a      	ldrh	r2, [r3, #0]
    2248:	1cbb      	adds	r3, r7, #2
    224a:	881b      	ldrh	r3, [r3, #0]
    224c:	1ad3      	subs	r3, r2, r3
    224e:	b29a      	uxth	r2, r3
    2250:	4b04      	ldr	r3, [pc, #16]	; (2264 <sd_mmc_start_write_blocks+0x54>)
    2252:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2254:	2300      	movs	r3, #0
}
    2256:	0018      	movs	r0, r3
    2258:	46bd      	mov	sp, r7
    225a:	b002      	add	sp, #8
    225c:	bd80      	pop	{r7, pc}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	00003145 	.word	0x00003145
    2264:	20000116 	.word	0x20000116

00002268 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    2268:	b580      	push	{r7, lr}
    226a:	b082      	sub	sp, #8
    226c:	af00      	add	r7, sp, #0
    226e:	0002      	movs	r2, r0
    2270:	1dfb      	adds	r3, r7, #7
    2272:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    2274:	4b13      	ldr	r3, [pc, #76]	; (22c4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    2276:	4798      	blx	r3
    2278:	0003      	movs	r3, r0
    227a:	001a      	movs	r2, r3
    227c:	2301      	movs	r3, #1
    227e:	4053      	eors	r3, r2
    2280:	b2db      	uxtb	r3, r3
    2282:	2b00      	cmp	r3, #0
    2284:	d001      	beq.n	228a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    2286:	2305      	movs	r3, #5
    2288:	e018      	b.n	22bc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    228a:	1dfb      	adds	r3, r7, #7
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	2b00      	cmp	r3, #0
    2290:	d003      	beq.n	229a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    2292:	4b0d      	ldr	r3, [pc, #52]	; (22c8 <sd_mmc_wait_end_of_write_blocks+0x60>)
    2294:	2200      	movs	r2, #0
    2296:	801a      	strh	r2, [r3, #0]
    2298:	e005      	b.n	22a6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    229a:	4b0b      	ldr	r3, [pc, #44]	; (22c8 <sd_mmc_wait_end_of_write_blocks+0x60>)
    229c:	881b      	ldrh	r3, [r3, #0]
    229e:	2b00      	cmp	r3, #0
    22a0:	d001      	beq.n	22a6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    22a2:	2300      	movs	r3, #0
    22a4:	e00a      	b.n	22bc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    22a6:	4b09      	ldr	r3, [pc, #36]	; (22cc <sd_mmc_wait_end_of_write_blocks+0x64>)
    22a8:	881b      	ldrh	r3, [r3, #0]
    22aa:	2b01      	cmp	r3, #1
    22ac:	d103      	bne.n	22b6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    22ae:	4b08      	ldr	r3, [pc, #32]	; (22d0 <sd_mmc_wait_end_of_write_blocks+0x68>)
    22b0:	4798      	blx	r3
		return SD_MMC_OK;
    22b2:	2300      	movs	r3, #0
    22b4:	e002      	b.n	22bc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    22b6:	4b06      	ldr	r3, [pc, #24]	; (22d0 <sd_mmc_wait_end_of_write_blocks+0x68>)
    22b8:	4798      	blx	r3
	return SD_MMC_OK;
    22ba:	2300      	movs	r3, #0
}
    22bc:	0018      	movs	r0, r3
    22be:	46bd      	mov	sp, r7
    22c0:	b002      	add	sp, #8
    22c2:	bd80      	pop	{r7, pc}
    22c4:	00003205 	.word	0x00003205
    22c8:	20000116 	.word	0x20000116
    22cc:	20000114 	.word	0x20000114
    22d0:	00001b29 	.word	0x00001b29

000022d4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    22d4:	b580      	push	{r7, lr}
    22d6:	b082      	sub	sp, #8
    22d8:	af00      	add	r7, sp, #0
    22da:	0002      	movs	r2, r0
    22dc:	1dfb      	adds	r3, r7, #7
    22de:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    22e0:	1dfb      	adds	r3, r7, #7
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	0018      	movs	r0, r3
    22e6:	4b16      	ldr	r3, [pc, #88]	; (2340 <sd_mmc_test_unit_ready+0x6c>)
    22e8:	4798      	blx	r3
    22ea:	0003      	movs	r3, r0
    22ec:	2b01      	cmp	r3, #1
    22ee:	d019      	beq.n	2324 <sd_mmc_test_unit_ready+0x50>
    22f0:	2b02      	cmp	r3, #2
    22f2:	d019      	beq.n	2328 <sd_mmc_test_unit_ready+0x54>
    22f4:	2b00      	cmp	r3, #0
    22f6:	d11e      	bne.n	2336 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    22f8:	1dfb      	adds	r3, r7, #7
    22fa:	781b      	ldrb	r3, [r3, #0]
    22fc:	4a11      	ldr	r2, [pc, #68]	; (2344 <sd_mmc_test_unit_ready+0x70>)
    22fe:	5cd3      	ldrb	r3, [r2, r3]
    2300:	2b00      	cmp	r3, #0
    2302:	d001      	beq.n	2308 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    2304:	2302      	movs	r3, #2
    2306:	e017      	b.n	2338 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    2308:	1dfb      	adds	r3, r7, #7
    230a:	781b      	ldrb	r3, [r3, #0]
    230c:	0018      	movs	r0, r3
    230e:	4b0e      	ldr	r3, [pc, #56]	; (2348 <sd_mmc_test_unit_ready+0x74>)
    2310:	4798      	blx	r3
    2312:	0003      	movs	r3, r0
    2314:	001a      	movs	r2, r3
    2316:	2303      	movs	r3, #3
    2318:	4013      	ands	r3, r2
    231a:	d001      	beq.n	2320 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    231c:	2300      	movs	r3, #0
    231e:	e00b      	b.n	2338 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    2320:	2302      	movs	r3, #2
    2322:	e009      	b.n	2338 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    2324:	2303      	movs	r3, #3
    2326:	e007      	b.n	2338 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    2328:	1dfb      	adds	r3, r7, #7
    232a:	781b      	ldrb	r3, [r3, #0]
    232c:	4a05      	ldr	r2, [pc, #20]	; (2344 <sd_mmc_test_unit_ready+0x70>)
    232e:	2100      	movs	r1, #0
    2330:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    2332:	2302      	movs	r3, #2
    2334:	e000      	b.n	2338 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    2336:	2301      	movs	r3, #1
	}
}
    2338:	0018      	movs	r0, r3
    233a:	46bd      	mov	sp, r7
    233c:	b002      	add	sp, #8
    233e:	bd80      	pop	{r7, pc}
    2340:	00001e49 	.word	0x00001e49
    2344:	20000118 	.word	0x20000118
    2348:	00001ebd 	.word	0x00001ebd

0000234c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    234c:	b580      	push	{r7, lr}
    234e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    2350:	2000      	movs	r0, #0
    2352:	4b03      	ldr	r3, [pc, #12]	; (2360 <sd_mmc_test_unit_ready_0+0x14>)
    2354:	4798      	blx	r3
    2356:	0003      	movs	r3, r0
}
    2358:	0018      	movs	r0, r3
    235a:	46bd      	mov	sp, r7
    235c:	bd80      	pop	{r7, pc}
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	000022d5 	.word	0x000022d5

00002364 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    2364:	b580      	push	{r7, lr}
    2366:	b082      	sub	sp, #8
    2368:	af00      	add	r7, sp, #0
    236a:	0002      	movs	r2, r0
    236c:	6039      	str	r1, [r7, #0]
    236e:	1dfb      	adds	r3, r7, #7
    2370:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    2372:	1dfb      	adds	r3, r7, #7
    2374:	781b      	ldrb	r3, [r3, #0]
    2376:	0018      	movs	r0, r3
    2378:	4b08      	ldr	r3, [pc, #32]	; (239c <sd_mmc_read_capacity+0x38>)
    237a:	4798      	blx	r3
    237c:	0003      	movs	r3, r0
    237e:	005b      	lsls	r3, r3, #1
    2380:	1e5a      	subs	r2, r3, #1
    2382:	683b      	ldr	r3, [r7, #0]
    2384:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    2386:	1dfb      	adds	r3, r7, #7
    2388:	781b      	ldrb	r3, [r3, #0]
    238a:	0018      	movs	r0, r3
    238c:	4b04      	ldr	r3, [pc, #16]	; (23a0 <sd_mmc_read_capacity+0x3c>)
    238e:	4798      	blx	r3
    2390:	0003      	movs	r3, r0
}
    2392:	0018      	movs	r0, r3
    2394:	46bd      	mov	sp, r7
    2396:	b002      	add	sp, #8
    2398:	bd80      	pop	{r7, pc}
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	00001ef9 	.word	0x00001ef9
    23a0:	000022d5 	.word	0x000022d5

000023a4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    23a4:	b580      	push	{r7, lr}
    23a6:	b082      	sub	sp, #8
    23a8:	af00      	add	r7, sp, #0
    23aa:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	0019      	movs	r1, r3
    23b0:	2000      	movs	r0, #0
    23b2:	4b03      	ldr	r3, [pc, #12]	; (23c0 <sd_mmc_read_capacity_0+0x1c>)
    23b4:	4798      	blx	r3
    23b6:	0003      	movs	r3, r0
}
    23b8:	0018      	movs	r0, r3
    23ba:	46bd      	mov	sp, r7
    23bc:	b002      	add	sp, #8
    23be:	bd80      	pop	{r7, pc}
    23c0:	00002365 	.word	0x00002365

000023c4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    23c4:	b580      	push	{r7, lr}
    23c6:	b082      	sub	sp, #8
    23c8:	af00      	add	r7, sp, #0
    23ca:	0002      	movs	r2, r0
    23cc:	1dfb      	adds	r3, r7, #7
    23ce:	701a      	strb	r2, [r3, #0]
    23d0:	1dbb      	adds	r3, r7, #6
    23d2:	1c0a      	adds	r2, r1, #0
    23d4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    23d6:	1dfb      	adds	r3, r7, #7
    23d8:	781b      	ldrb	r3, [r3, #0]
    23da:	4a04      	ldr	r2, [pc, #16]	; (23ec <sd_mmc_unload+0x28>)
    23dc:	1db9      	adds	r1, r7, #6
    23de:	7809      	ldrb	r1, [r1, #0]
    23e0:	54d1      	strb	r1, [r2, r3]
	return true;
    23e2:	2301      	movs	r3, #1
}
    23e4:	0018      	movs	r0, r3
    23e6:	46bd      	mov	sp, r7
    23e8:	b002      	add	sp, #8
    23ea:	bd80      	pop	{r7, pc}
    23ec:	20000118 	.word	0x20000118

000023f0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    23f0:	b580      	push	{r7, lr}
    23f2:	b082      	sub	sp, #8
    23f4:	af00      	add	r7, sp, #0
    23f6:	0002      	movs	r2, r0
    23f8:	1dfb      	adds	r3, r7, #7
    23fa:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    23fc:	1dfb      	adds	r3, r7, #7
    23fe:	781b      	ldrb	r3, [r3, #0]
    2400:	0019      	movs	r1, r3
    2402:	2000      	movs	r0, #0
    2404:	4b03      	ldr	r3, [pc, #12]	; (2414 <sd_mmc_unload_0+0x24>)
    2406:	4798      	blx	r3
    2408:	0003      	movs	r3, r0
}
    240a:	0018      	movs	r0, r3
    240c:	46bd      	mov	sp, r7
    240e:	b002      	add	sp, #8
    2410:	bd80      	pop	{r7, pc}
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	000023c5 	.word	0x000023c5

00002418 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    2418:	b580      	push	{r7, lr}
    241a:	b082      	sub	sp, #8
    241c:	af00      	add	r7, sp, #0
    241e:	0002      	movs	r2, r0
    2420:	1dfb      	adds	r3, r7, #7
    2422:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    2424:	1dfb      	adds	r3, r7, #7
    2426:	781b      	ldrb	r3, [r3, #0]
    2428:	0018      	movs	r0, r3
    242a:	4b03      	ldr	r3, [pc, #12]	; (2438 <sd_mmc_wr_protect+0x20>)
    242c:	4798      	blx	r3
    242e:	0003      	movs	r3, r0
}
    2430:	0018      	movs	r0, r3
    2432:	46bd      	mov	sp, r7
    2434:	b002      	add	sp, #8
    2436:	bd80      	pop	{r7, pc}
    2438:	00001f35 	.word	0x00001f35

0000243c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    243c:	b580      	push	{r7, lr}
    243e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    2440:	2000      	movs	r0, #0
    2442:	4b03      	ldr	r3, [pc, #12]	; (2450 <sd_mmc_wr_protect_0+0x14>)
    2444:	4798      	blx	r3
    2446:	0003      	movs	r3, r0
}
    2448:	0018      	movs	r0, r3
    244a:	46bd      	mov	sp, r7
    244c:	bd80      	pop	{r7, pc}
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	00002419 	.word	0x00002419

00002454 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    2454:	b580      	push	{r7, lr}
    2456:	b082      	sub	sp, #8
    2458:	af00      	add	r7, sp, #0
    245a:	0002      	movs	r2, r0
    245c:	1dfb      	adds	r3, r7, #7
    245e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    2460:	2301      	movs	r3, #1
}
    2462:	0018      	movs	r0, r3
    2464:	46bd      	mov	sp, r7
    2466:	b002      	add	sp, #8
    2468:	bd80      	pop	{r7, pc}
	...

0000246c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    246c:	b580      	push	{r7, lr}
    246e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    2470:	2000      	movs	r0, #0
    2472:	4b03      	ldr	r3, [pc, #12]	; (2480 <sd_mmc_removal_0+0x14>)
    2474:	4798      	blx	r3
    2476:	0003      	movs	r3, r0
}
    2478:	0018      	movs	r0, r3
    247a:	46bd      	mov	sp, r7
    247c:	bd80      	pop	{r7, pc}
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	00002455 	.word	0x00002455

00002484 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    2484:	b580      	push	{r7, lr}
    2486:	b084      	sub	sp, #16
    2488:	af00      	add	r7, sp, #0
    248a:	60b9      	str	r1, [r7, #8]
    248c:	607a      	str	r2, [r7, #4]
    248e:	230f      	movs	r3, #15
    2490:	18fb      	adds	r3, r7, r3
    2492:	1c02      	adds	r2, r0, #0
    2494:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    2496:	68b9      	ldr	r1, [r7, #8]
    2498:	230f      	movs	r3, #15
    249a:	18fb      	adds	r3, r7, r3
    249c:	781b      	ldrb	r3, [r3, #0]
    249e:	2201      	movs	r2, #1
    24a0:	0018      	movs	r0, r3
    24a2:	4b10      	ldr	r3, [pc, #64]	; (24e4 <sd_mmc_mem_2_ram+0x60>)
    24a4:	4798      	blx	r3
    24a6:	1e03      	subs	r3, r0, #0
    24a8:	d005      	beq.n	24b6 <sd_mmc_mem_2_ram+0x32>
    24aa:	2b02      	cmp	r3, #2
    24ac:	d101      	bne.n	24b2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    24ae:	2302      	movs	r3, #2
    24b0:	e013      	b.n	24da <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    24b2:	2301      	movs	r3, #1
    24b4:	e011      	b.n	24da <sd_mmc_mem_2_ram+0x56>
		break;
    24b6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    24b8:	687b      	ldr	r3, [r7, #4]
    24ba:	2101      	movs	r1, #1
    24bc:	0018      	movs	r0, r3
    24be:	4b0a      	ldr	r3, [pc, #40]	; (24e8 <sd_mmc_mem_2_ram+0x64>)
    24c0:	4798      	blx	r3
    24c2:	1e03      	subs	r3, r0, #0
    24c4:	d001      	beq.n	24ca <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    24c6:	2301      	movs	r3, #1
    24c8:	e007      	b.n	24da <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    24ca:	2000      	movs	r0, #0
    24cc:	4b07      	ldr	r3, [pc, #28]	; (24ec <sd_mmc_mem_2_ram+0x68>)
    24ce:	4798      	blx	r3
    24d0:	1e03      	subs	r3, r0, #0
    24d2:	d001      	beq.n	24d8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    24d4:	2301      	movs	r3, #1
    24d6:	e000      	b.n	24da <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    24d8:	2300      	movs	r3, #0
}
    24da:	0018      	movs	r0, r3
    24dc:	46bd      	mov	sp, r7
    24de:	b004      	add	sp, #16
    24e0:	bd80      	pop	{r7, pc}
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	00001f4d 	.word	0x00001f4d
    24e8:	00002039 	.word	0x00002039
    24ec:	00002091 	.word	0x00002091

000024f0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    24f0:	b580      	push	{r7, lr}
    24f2:	b082      	sub	sp, #8
    24f4:	af00      	add	r7, sp, #0
    24f6:	6078      	str	r0, [r7, #4]
    24f8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    24fa:	683a      	ldr	r2, [r7, #0]
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	0019      	movs	r1, r3
    2500:	2000      	movs	r0, #0
    2502:	4b03      	ldr	r3, [pc, #12]	; (2510 <sd_mmc_mem_2_ram_0+0x20>)
    2504:	4798      	blx	r3
    2506:	0003      	movs	r3, r0
}
    2508:	0018      	movs	r0, r3
    250a:	46bd      	mov	sp, r7
    250c:	b002      	add	sp, #8
    250e:	bd80      	pop	{r7, pc}
    2510:	00002485 	.word	0x00002485

00002514 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    2514:	b580      	push	{r7, lr}
    2516:	b084      	sub	sp, #16
    2518:	af00      	add	r7, sp, #0
    251a:	60b9      	str	r1, [r7, #8]
    251c:	607a      	str	r2, [r7, #4]
    251e:	230f      	movs	r3, #15
    2520:	18fb      	adds	r3, r7, r3
    2522:	1c02      	adds	r2, r0, #0
    2524:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    2526:	68b9      	ldr	r1, [r7, #8]
    2528:	230f      	movs	r3, #15
    252a:	18fb      	adds	r3, r7, r3
    252c:	781b      	ldrb	r3, [r3, #0]
    252e:	2201      	movs	r2, #1
    2530:	0018      	movs	r0, r3
    2532:	4b10      	ldr	r3, [pc, #64]	; (2574 <sd_mmc_ram_2_mem+0x60>)
    2534:	4798      	blx	r3
    2536:	1e03      	subs	r3, r0, #0
    2538:	d005      	beq.n	2546 <sd_mmc_ram_2_mem+0x32>
    253a:	2b02      	cmp	r3, #2
    253c:	d101      	bne.n	2542 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    253e:	2302      	movs	r3, #2
    2540:	e013      	b.n	256a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    2542:	2301      	movs	r3, #1
    2544:	e011      	b.n	256a <sd_mmc_ram_2_mem+0x56>
		break;
    2546:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    2548:	687b      	ldr	r3, [r7, #4]
    254a:	2101      	movs	r1, #1
    254c:	0018      	movs	r0, r3
    254e:	4b0a      	ldr	r3, [pc, #40]	; (2578 <sd_mmc_ram_2_mem+0x64>)
    2550:	4798      	blx	r3
    2552:	1e03      	subs	r3, r0, #0
    2554:	d001      	beq.n	255a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    2556:	2301      	movs	r3, #1
    2558:	e007      	b.n	256a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    255a:	2000      	movs	r0, #0
    255c:	4b07      	ldr	r3, [pc, #28]	; (257c <sd_mmc_ram_2_mem+0x68>)
    255e:	4798      	blx	r3
    2560:	1e03      	subs	r3, r0, #0
    2562:	d001      	beq.n	2568 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    2564:	2301      	movs	r3, #1
    2566:	e000      	b.n	256a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    2568:	2300      	movs	r3, #0
}
    256a:	0018      	movs	r0, r3
    256c:	46bd      	mov	sp, r7
    256e:	b004      	add	sp, #16
    2570:	bd80      	pop	{r7, pc}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	00002129 	.word	0x00002129
    2578:	00002211 	.word	0x00002211
    257c:	00002269 	.word	0x00002269

00002580 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    2580:	b580      	push	{r7, lr}
    2582:	b082      	sub	sp, #8
    2584:	af00      	add	r7, sp, #0
    2586:	6078      	str	r0, [r7, #4]
    2588:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    258a:	683a      	ldr	r2, [r7, #0]
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	0019      	movs	r1, r3
    2590:	2000      	movs	r0, #0
    2592:	4b03      	ldr	r3, [pc, #12]	; (25a0 <sd_mmc_ram_2_mem_0+0x20>)
    2594:	4798      	blx	r3
    2596:	0003      	movs	r3, r0
}
    2598:	0018      	movs	r0, r3
    259a:	46bd      	mov	sp, r7
    259c:	b002      	add	sp, #8
    259e:	bd80      	pop	{r7, pc}
    25a0:	00002515 	.word	0x00002515

000025a4 <system_pinmux_get_group_from_gpio_pin>:
{
    25a4:	b580      	push	{r7, lr}
    25a6:	b084      	sub	sp, #16
    25a8:	af00      	add	r7, sp, #0
    25aa:	0002      	movs	r2, r0
    25ac:	1dfb      	adds	r3, r7, #7
    25ae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    25b0:	230f      	movs	r3, #15
    25b2:	18fb      	adds	r3, r7, r3
    25b4:	1dfa      	adds	r2, r7, #7
    25b6:	7812      	ldrb	r2, [r2, #0]
    25b8:	09d2      	lsrs	r2, r2, #7
    25ba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    25bc:	230e      	movs	r3, #14
    25be:	18fb      	adds	r3, r7, r3
    25c0:	1dfa      	adds	r2, r7, #7
    25c2:	7812      	ldrb	r2, [r2, #0]
    25c4:	0952      	lsrs	r2, r2, #5
    25c6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    25c8:	4b0d      	ldr	r3, [pc, #52]	; (2600 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    25ca:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    25cc:	230f      	movs	r3, #15
    25ce:	18fb      	adds	r3, r7, r3
    25d0:	781b      	ldrb	r3, [r3, #0]
    25d2:	2b00      	cmp	r3, #0
    25d4:	d10f      	bne.n	25f6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    25d6:	230f      	movs	r3, #15
    25d8:	18fb      	adds	r3, r7, r3
    25da:	781b      	ldrb	r3, [r3, #0]
    25dc:	009b      	lsls	r3, r3, #2
    25de:	2210      	movs	r2, #16
    25e0:	4694      	mov	ip, r2
    25e2:	44bc      	add	ip, r7
    25e4:	4463      	add	r3, ip
    25e6:	3b08      	subs	r3, #8
    25e8:	681a      	ldr	r2, [r3, #0]
    25ea:	230e      	movs	r3, #14
    25ec:	18fb      	adds	r3, r7, r3
    25ee:	781b      	ldrb	r3, [r3, #0]
    25f0:	01db      	lsls	r3, r3, #7
    25f2:	18d3      	adds	r3, r2, r3
    25f4:	e000      	b.n	25f8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    25f6:	2300      	movs	r3, #0
}
    25f8:	0018      	movs	r0, r3
    25fa:	46bd      	mov	sp, r7
    25fc:	b004      	add	sp, #16
    25fe:	bd80      	pop	{r7, pc}
    2600:	41004400 	.word	0x41004400

00002604 <port_get_group_from_gpio_pin>:
{
    2604:	b580      	push	{r7, lr}
    2606:	b082      	sub	sp, #8
    2608:	af00      	add	r7, sp, #0
    260a:	0002      	movs	r2, r0
    260c:	1dfb      	adds	r3, r7, #7
    260e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2610:	1dfb      	adds	r3, r7, #7
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	0018      	movs	r0, r3
    2616:	4b03      	ldr	r3, [pc, #12]	; (2624 <port_get_group_from_gpio_pin+0x20>)
    2618:	4798      	blx	r3
    261a:	0003      	movs	r3, r0
}
    261c:	0018      	movs	r0, r3
    261e:	46bd      	mov	sp, r7
    2620:	b002      	add	sp, #8
    2622:	bd80      	pop	{r7, pc}
    2624:	000025a5 	.word	0x000025a5

00002628 <port_get_config_defaults>:
{
    2628:	b580      	push	{r7, lr}
    262a:	b082      	sub	sp, #8
    262c:	af00      	add	r7, sp, #0
    262e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	2200      	movs	r2, #0
    2634:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2636:	687b      	ldr	r3, [r7, #4]
    2638:	2201      	movs	r2, #1
    263a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    263c:	687b      	ldr	r3, [r7, #4]
    263e:	2200      	movs	r2, #0
    2640:	709a      	strb	r2, [r3, #2]
}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	46bd      	mov	sp, r7
    2646:	b002      	add	sp, #8
    2648:	bd80      	pop	{r7, pc}
	...

0000264c <port_pin_set_output_level>:
{
    264c:	b580      	push	{r7, lr}
    264e:	b084      	sub	sp, #16
    2650:	af00      	add	r7, sp, #0
    2652:	0002      	movs	r2, r0
    2654:	1dfb      	adds	r3, r7, #7
    2656:	701a      	strb	r2, [r3, #0]
    2658:	1dbb      	adds	r3, r7, #6
    265a:	1c0a      	adds	r2, r1, #0
    265c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    265e:	1dfb      	adds	r3, r7, #7
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	0018      	movs	r0, r3
    2664:	4b0d      	ldr	r3, [pc, #52]	; (269c <port_pin_set_output_level+0x50>)
    2666:	4798      	blx	r3
    2668:	0003      	movs	r3, r0
    266a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    266c:	1dfb      	adds	r3, r7, #7
    266e:	781b      	ldrb	r3, [r3, #0]
    2670:	221f      	movs	r2, #31
    2672:	4013      	ands	r3, r2
    2674:	2201      	movs	r2, #1
    2676:	409a      	lsls	r2, r3
    2678:	0013      	movs	r3, r2
    267a:	60bb      	str	r3, [r7, #8]
	if (level) {
    267c:	1dbb      	adds	r3, r7, #6
    267e:	781b      	ldrb	r3, [r3, #0]
    2680:	2b00      	cmp	r3, #0
    2682:	d003      	beq.n	268c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2684:	68fb      	ldr	r3, [r7, #12]
    2686:	68ba      	ldr	r2, [r7, #8]
    2688:	619a      	str	r2, [r3, #24]
}
    268a:	e002      	b.n	2692 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    268c:	68fb      	ldr	r3, [r7, #12]
    268e:	68ba      	ldr	r2, [r7, #8]
    2690:	615a      	str	r2, [r3, #20]
}
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	46bd      	mov	sp, r7
    2696:	b004      	add	sp, #16
    2698:	bd80      	pop	{r7, pc}
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	00002605 	.word	0x00002605

000026a0 <system_interrupt_enable>:
{
    26a0:	b580      	push	{r7, lr}
    26a2:	b082      	sub	sp, #8
    26a4:	af00      	add	r7, sp, #0
    26a6:	0002      	movs	r2, r0
    26a8:	1dfb      	adds	r3, r7, #7
    26aa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    26ac:	4b06      	ldr	r3, [pc, #24]	; (26c8 <system_interrupt_enable+0x28>)
    26ae:	1dfa      	adds	r2, r7, #7
    26b0:	7812      	ldrb	r2, [r2, #0]
    26b2:	0011      	movs	r1, r2
    26b4:	221f      	movs	r2, #31
    26b6:	400a      	ands	r2, r1
    26b8:	2101      	movs	r1, #1
    26ba:	4091      	lsls	r1, r2
    26bc:	000a      	movs	r2, r1
    26be:	601a      	str	r2, [r3, #0]
}
    26c0:	46c0      	nop			; (mov r8, r8)
    26c2:	46bd      	mov	sp, r7
    26c4:	b002      	add	sp, #8
    26c6:	bd80      	pop	{r7, pc}
    26c8:	e000e100 	.word	0xe000e100

000026cc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    26cc:	b580      	push	{r7, lr}
    26ce:	b084      	sub	sp, #16
    26d0:	af00      	add	r7, sp, #0
    26d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    26d4:	687b      	ldr	r3, [r7, #4]
    26d6:	681b      	ldr	r3, [r3, #0]
    26d8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    26da:	68fb      	ldr	r3, [r7, #12]
    26dc:	69db      	ldr	r3, [r3, #28]
    26de:	1e5a      	subs	r2, r3, #1
    26e0:	4193      	sbcs	r3, r2
    26e2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    26e4:	0018      	movs	r0, r3
    26e6:	46bd      	mov	sp, r7
    26e8:	b004      	add	sp, #16
    26ea:	bd80      	pop	{r7, pc}

000026ec <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    26ec:	b580      	push	{r7, lr}
    26ee:	b082      	sub	sp, #8
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    26f4:	687b      	ldr	r3, [r7, #4]
    26f6:	2201      	movs	r2, #1
    26f8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	2200      	movs	r2, #0
    26fe:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	2200      	movs	r2, #0
    2704:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	22c0      	movs	r2, #192	; 0xc0
    270a:	0392      	lsls	r2, r2, #14
    270c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	2200      	movs	r2, #0
    2712:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	2200      	movs	r2, #0
    2718:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    271a:	687b      	ldr	r3, [r7, #4]
    271c:	2201      	movs	r2, #1
    271e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	2201      	movs	r2, #1
    2724:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	2200      	movs	r2, #0
    272a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	2224      	movs	r2, #36	; 0x24
    2730:	2100      	movs	r1, #0
    2732:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2734:	687b      	ldr	r3, [r7, #4]
    2736:	3318      	adds	r3, #24
    2738:	220c      	movs	r2, #12
    273a:	2100      	movs	r1, #0
    273c:	0018      	movs	r0, r3
    273e:	4b0a      	ldr	r3, [pc, #40]	; (2768 <spi_get_config_defaults+0x7c>)
    2740:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	4a09      	ldr	r2, [pc, #36]	; (276c <spi_get_config_defaults+0x80>)
    2746:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	2200      	movs	r2, #0
    274c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	2200      	movs	r2, #0
    2752:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	2200      	movs	r2, #0
    2758:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	2200      	movs	r2, #0
    275e:	635a      	str	r2, [r3, #52]	; 0x34

};
    2760:	46c0      	nop			; (mov r8, r8)
    2762:	46bd      	mov	sp, r7
    2764:	b002      	add	sp, #8
    2766:	bd80      	pop	{r7, pc}
    2768:	0000b873 	.word	0x0000b873
    276c:	000186a0 	.word	0x000186a0

00002770 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2770:	b580      	push	{r7, lr}
    2772:	b082      	sub	sp, #8
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	220a      	movs	r2, #10
    277c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	2200      	movs	r2, #0
    2782:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	2200      	movs	r2, #0
    2788:	709a      	strb	r2, [r3, #2]
}
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	46bd      	mov	sp, r7
    278e:	b002      	add	sp, #8
    2790:	bd80      	pop	{r7, pc}
	...

00002794 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2794:	b580      	push	{r7, lr}
    2796:	b084      	sub	sp, #16
    2798:	af00      	add	r7, sp, #0
    279a:	6078      	str	r0, [r7, #4]
    279c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    279e:	683b      	ldr	r3, [r7, #0]
    27a0:	781a      	ldrb	r2, [r3, #0]
    27a2:	687b      	ldr	r3, [r7, #4]
    27a4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    27a6:	683b      	ldr	r3, [r7, #0]
    27a8:	785a      	ldrb	r2, [r3, #1]
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    27ae:	683b      	ldr	r3, [r7, #0]
    27b0:	789a      	ldrb	r2, [r3, #2]
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    27b6:	230c      	movs	r3, #12
    27b8:	18fb      	adds	r3, r7, r3
    27ba:	0018      	movs	r0, r3
    27bc:	4b0b      	ldr	r3, [pc, #44]	; (27ec <spi_attach_slave+0x58>)
    27be:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    27c0:	230c      	movs	r3, #12
    27c2:	18fb      	adds	r3, r7, r3
    27c4:	2201      	movs	r2, #1
    27c6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    27c8:	687b      	ldr	r3, [r7, #4]
    27ca:	781b      	ldrb	r3, [r3, #0]
    27cc:	220c      	movs	r2, #12
    27ce:	18ba      	adds	r2, r7, r2
    27d0:	0011      	movs	r1, r2
    27d2:	0018      	movs	r0, r3
    27d4:	4b06      	ldr	r3, [pc, #24]	; (27f0 <spi_attach_slave+0x5c>)
    27d6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	781b      	ldrb	r3, [r3, #0]
    27dc:	2101      	movs	r1, #1
    27de:	0018      	movs	r0, r3
    27e0:	4b04      	ldr	r3, [pc, #16]	; (27f4 <spi_attach_slave+0x60>)
    27e2:	4798      	blx	r3
}
    27e4:	46c0      	nop			; (mov r8, r8)
    27e6:	46bd      	mov	sp, r7
    27e8:	b004      	add	sp, #16
    27ea:	bd80      	pop	{r7, pc}
    27ec:	00002629 	.word	0x00002629
    27f0:	000034a1 	.word	0x000034a1
    27f4:	0000264d 	.word	0x0000264d

000027f8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    27f8:	b580      	push	{r7, lr}
    27fa:	b084      	sub	sp, #16
    27fc:	af00      	add	r7, sp, #0
    27fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2800:	687b      	ldr	r3, [r7, #4]
    2802:	681b      	ldr	r3, [r3, #0]
    2804:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2806:	687b      	ldr	r3, [r7, #4]
    2808:	681b      	ldr	r3, [r3, #0]
    280a:	0018      	movs	r0, r3
    280c:	4b0b      	ldr	r3, [pc, #44]	; (283c <spi_enable+0x44>)
    280e:	4798      	blx	r3
    2810:	0003      	movs	r3, r0
    2812:	0018      	movs	r0, r3
    2814:	4b0a      	ldr	r3, [pc, #40]	; (2840 <spi_enable+0x48>)
    2816:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    2818:	46c0      	nop			; (mov r8, r8)
    281a:	687b      	ldr	r3, [r7, #4]
    281c:	0018      	movs	r0, r3
    281e:	4b09      	ldr	r3, [pc, #36]	; (2844 <spi_enable+0x4c>)
    2820:	4798      	blx	r3
    2822:	1e03      	subs	r3, r0, #0
    2824:	d1f9      	bne.n	281a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2826:	68fb      	ldr	r3, [r7, #12]
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	2202      	movs	r2, #2
    282c:	431a      	orrs	r2, r3
    282e:	68fb      	ldr	r3, [r7, #12]
    2830:	601a      	str	r2, [r3, #0]
}
    2832:	46c0      	nop			; (mov r8, r8)
    2834:	46bd      	mov	sp, r7
    2836:	b004      	add	sp, #16
    2838:	bd80      	pop	{r7, pc}
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	0000402d 	.word	0x0000402d
    2840:	000026a1 	.word	0x000026a1
    2844:	000026cd 	.word	0x000026cd

00002848 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    2848:	b580      	push	{r7, lr}
    284a:	b084      	sub	sp, #16
    284c:	af00      	add	r7, sp, #0
    284e:	6078      	str	r0, [r7, #4]
    2850:	000a      	movs	r2, r1
    2852:	1cfb      	adds	r3, r7, #3
    2854:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    2856:	230f      	movs	r3, #15
    2858:	18fb      	adds	r3, r7, r3
    285a:	2200      	movs	r2, #0
    285c:	701a      	strb	r2, [r3, #0]
	while (size--) {
    285e:	e038      	b.n	28d2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	1c5a      	adds	r2, r3, #1
    2864:	607a      	str	r2, [r7, #4]
    2866:	220e      	movs	r2, #14
    2868:	18ba      	adds	r2, r7, r2
    286a:	781b      	ldrb	r3, [r3, #0]
    286c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    286e:	230d      	movs	r3, #13
    2870:	18fb      	adds	r3, r7, r3
    2872:	2200      	movs	r2, #0
    2874:	701a      	strb	r2, [r3, #0]
    2876:	e027      	b.n	28c8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    2878:	230f      	movs	r3, #15
    287a:	18fa      	adds	r2, r7, r3
    287c:	230f      	movs	r3, #15
    287e:	18fb      	adds	r3, r7, r3
    2880:	781b      	ldrb	r3, [r3, #0]
    2882:	18db      	adds	r3, r3, r3
    2884:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    2886:	230e      	movs	r3, #14
    2888:	18fa      	adds	r2, r7, r3
    288a:	230f      	movs	r3, #15
    288c:	18fb      	adds	r3, r7, r3
    288e:	7812      	ldrb	r2, [r2, #0]
    2890:	781b      	ldrb	r3, [r3, #0]
    2892:	4053      	eors	r3, r2
    2894:	b2db      	uxtb	r3, r3
    2896:	b25b      	sxtb	r3, r3
    2898:	2b00      	cmp	r3, #0
    289a:	da07      	bge.n	28ac <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    289c:	230f      	movs	r3, #15
    289e:	18fb      	adds	r3, r7, r3
    28a0:	220f      	movs	r2, #15
    28a2:	18ba      	adds	r2, r7, r2
    28a4:	7812      	ldrb	r2, [r2, #0]
    28a6:	2109      	movs	r1, #9
    28a8:	404a      	eors	r2, r1
    28aa:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    28ac:	230e      	movs	r3, #14
    28ae:	18fa      	adds	r2, r7, r3
    28b0:	230e      	movs	r3, #14
    28b2:	18fb      	adds	r3, r7, r3
    28b4:	781b      	ldrb	r3, [r3, #0]
    28b6:	18db      	adds	r3, r3, r3
    28b8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    28ba:	230d      	movs	r3, #13
    28bc:	18fb      	adds	r3, r7, r3
    28be:	781a      	ldrb	r2, [r3, #0]
    28c0:	230d      	movs	r3, #13
    28c2:	18fb      	adds	r3, r7, r3
    28c4:	3201      	adds	r2, #1
    28c6:	701a      	strb	r2, [r3, #0]
    28c8:	230d      	movs	r3, #13
    28ca:	18fb      	adds	r3, r7, r3
    28cc:	781b      	ldrb	r3, [r3, #0]
    28ce:	2b07      	cmp	r3, #7
    28d0:	d9d2      	bls.n	2878 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    28d2:	1cfb      	adds	r3, r7, #3
    28d4:	781b      	ldrb	r3, [r3, #0]
    28d6:	1cfa      	adds	r2, r7, #3
    28d8:	1e59      	subs	r1, r3, #1
    28da:	7011      	strb	r1, [r2, #0]
    28dc:	2b00      	cmp	r3, #0
    28de:	d1bf      	bne.n	2860 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    28e0:	230f      	movs	r3, #15
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	781b      	ldrb	r3, [r3, #0]
    28e6:	005b      	lsls	r3, r3, #1
    28e8:	b25b      	sxtb	r3, r3
    28ea:	2201      	movs	r2, #1
    28ec:	4313      	orrs	r3, r2
    28ee:	b25a      	sxtb	r2, r3
    28f0:	230f      	movs	r3, #15
    28f2:	18fb      	adds	r3, r7, r3
    28f4:	701a      	strb	r2, [r3, #0]
	return crc;
    28f6:	230f      	movs	r3, #15
    28f8:	18fb      	adds	r3, r7, r3
    28fa:	781b      	ldrb	r3, [r3, #0]
}
    28fc:	0018      	movs	r0, r3
    28fe:	46bd      	mov	sp, r7
    2900:	b004      	add	sp, #16
    2902:	bd80      	pop	{r7, pc}

00002904 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    2904:	b590      	push	{r4, r7, lr}
    2906:	b083      	sub	sp, #12
    2908:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    290a:	1c7b      	adds	r3, r7, #1
    290c:	22ff      	movs	r2, #255	; 0xff
    290e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    2910:	1cbb      	adds	r3, r7, #2
    2912:	22ff      	movs	r2, #255	; 0xff
    2914:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2916:	1cbb      	adds	r3, r7, #2
    2918:	881b      	ldrh	r3, [r3, #0]
    291a:	1c79      	adds	r1, r7, #1
    291c:	4811      	ldr	r0, [pc, #68]	; (2964 <sd_mmc_spi_wait_busy+0x60>)
    291e:	2201      	movs	r2, #1
    2920:	4c11      	ldr	r4, [pc, #68]	; (2968 <sd_mmc_spi_wait_busy+0x64>)
    2922:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    2924:	4b11      	ldr	r3, [pc, #68]	; (296c <sd_mmc_spi_wait_busy+0x68>)
    2926:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2928:	1cbb      	adds	r3, r7, #2
    292a:	881b      	ldrh	r3, [r3, #0]
    292c:	1c79      	adds	r1, r7, #1
    292e:	480d      	ldr	r0, [pc, #52]	; (2964 <sd_mmc_spi_wait_busy+0x60>)
    2930:	2201      	movs	r2, #1
    2932:	4c0d      	ldr	r4, [pc, #52]	; (2968 <sd_mmc_spi_wait_busy+0x64>)
    2934:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2936:	1cbb      	adds	r3, r7, #2
    2938:	881b      	ldrh	r3, [r3, #0]
    293a:	1c79      	adds	r1, r7, #1
    293c:	4809      	ldr	r0, [pc, #36]	; (2964 <sd_mmc_spi_wait_busy+0x60>)
    293e:	2201      	movs	r2, #1
    2940:	4c09      	ldr	r4, [pc, #36]	; (2968 <sd_mmc_spi_wait_busy+0x64>)
    2942:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	1e5a      	subs	r2, r3, #1
    2948:	607a      	str	r2, [r7, #4]
    294a:	2b00      	cmp	r3, #0
    294c:	d101      	bne.n	2952 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    294e:	2300      	movs	r3, #0
    2950:	e004      	b.n	295c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    2952:	1c7b      	adds	r3, r7, #1
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	2bff      	cmp	r3, #255	; 0xff
    2958:	d1ed      	bne.n	2936 <sd_mmc_spi_wait_busy+0x32>
	return true;
    295a:	2301      	movs	r3, #1
}
    295c:	0018      	movs	r0, r3
    295e:	46bd      	mov	sp, r7
    2960:	b003      	add	sp, #12
    2962:	bd90      	pop	{r4, r7, pc}
    2964:	2000011c 	.word	0x2000011c
    2968:	000049ad 	.word	0x000049ad
    296c:	00030d40 	.word	0x00030d40

00002970 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    2970:	b590      	push	{r4, r7, lr}
    2972:	b083      	sub	sp, #12
    2974:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    2976:	1cbb      	adds	r3, r7, #2
    2978:	22ff      	movs	r2, #255	; 0xff
    297a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    297c:	1c7b      	adds	r3, r7, #1
    297e:	2200      	movs	r2, #0
    2980:	701a      	strb	r2, [r3, #0]
	i = 500000;
    2982:	4b18      	ldr	r3, [pc, #96]	; (29e4 <sd_mmc_spi_start_read_block+0x74>)
    2984:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	1e5a      	subs	r2, r3, #1
    298a:	607a      	str	r2, [r7, #4]
    298c:	2b00      	cmp	r3, #0
    298e:	d104      	bne.n	299a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    2990:	4b15      	ldr	r3, [pc, #84]	; (29e8 <sd_mmc_spi_start_read_block+0x78>)
    2992:	2204      	movs	r2, #4
    2994:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    2996:	2300      	movs	r3, #0
    2998:	e020      	b.n	29dc <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    299a:	1cbb      	adds	r3, r7, #2
    299c:	881b      	ldrh	r3, [r3, #0]
    299e:	1c79      	adds	r1, r7, #1
    29a0:	4812      	ldr	r0, [pc, #72]	; (29ec <sd_mmc_spi_start_read_block+0x7c>)
    29a2:	2201      	movs	r2, #1
    29a4:	4c12      	ldr	r4, [pc, #72]	; (29f0 <sd_mmc_spi_start_read_block+0x80>)
    29a6:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    29a8:	1c7b      	adds	r3, r7, #1
    29aa:	781b      	ldrb	r3, [r3, #0]
    29ac:	001a      	movs	r2, r3
    29ae:	23f0      	movs	r3, #240	; 0xf0
    29b0:	4013      	ands	r3, r2
    29b2:	d10e      	bne.n	29d2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    29b4:	1c7b      	adds	r3, r7, #1
    29b6:	781b      	ldrb	r3, [r3, #0]
    29b8:	001a      	movs	r2, r3
    29ba:	2307      	movs	r3, #7
    29bc:	4013      	ands	r3, r2
    29be:	d003      	beq.n	29c8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    29c0:	4b09      	ldr	r3, [pc, #36]	; (29e8 <sd_mmc_spi_start_read_block+0x78>)
    29c2:	2207      	movs	r2, #7
    29c4:	701a      	strb	r2, [r3, #0]
    29c6:	e002      	b.n	29ce <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    29c8:	4b07      	ldr	r3, [pc, #28]	; (29e8 <sd_mmc_spi_start_read_block+0x78>)
    29ca:	220b      	movs	r2, #11
    29cc:	701a      	strb	r2, [r3, #0]
			}
			return false;
    29ce:	2300      	movs	r3, #0
    29d0:	e004      	b.n	29dc <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    29d2:	1c7b      	adds	r3, r7, #1
    29d4:	781b      	ldrb	r3, [r3, #0]
    29d6:	2bfe      	cmp	r3, #254	; 0xfe
    29d8:	d1d5      	bne.n	2986 <sd_mmc_spi_start_read_block+0x16>

	return true;
    29da:	2301      	movs	r3, #1
}
    29dc:	0018      	movs	r0, r3
    29de:	46bd      	mov	sp, r7
    29e0:	b003      	add	sp, #12
    29e2:	bd90      	pop	{r4, r7, pc}
    29e4:	0007a120 	.word	0x0007a120
    29e8:	2000015f 	.word	0x2000015f
    29ec:	2000011c 	.word	0x2000011c
    29f0:	000049ad 	.word	0x000049ad

000029f4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    29f4:	b590      	push	{r4, r7, lr}
    29f6:	b083      	sub	sp, #12
    29f8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    29fa:	1dbb      	adds	r3, r7, #6
    29fc:	22ff      	movs	r2, #255	; 0xff
    29fe:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    2a00:	1dbb      	adds	r3, r7, #6
    2a02:	881b      	ldrh	r3, [r3, #0]
    2a04:	1d39      	adds	r1, r7, #4
    2a06:	4804      	ldr	r0, [pc, #16]	; (2a18 <sd_mmc_spi_stop_read_block+0x24>)
    2a08:	2202      	movs	r2, #2
    2a0a:	4c04      	ldr	r4, [pc, #16]	; (2a1c <sd_mmc_spi_stop_read_block+0x28>)
    2a0c:	47a0      	blx	r4
			dummy);
}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	46bd      	mov	sp, r7
    2a12:	b003      	add	sp, #12
    2a14:	bd90      	pop	{r4, r7, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	2000011c 	.word	0x2000011c
    2a1c:	000049ad 	.word	0x000049ad

00002a20 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    2a20:	b580      	push	{r7, lr}
    2a22:	b082      	sub	sp, #8
    2a24:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    2a26:	1dfb      	adds	r3, r7, #7
    2a28:	22ff      	movs	r2, #255	; 0xff
    2a2a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    2a2c:	1df9      	adds	r1, r7, #7
    2a2e:	4b0d      	ldr	r3, [pc, #52]	; (2a64 <sd_mmc_spi_start_write_block+0x44>)
    2a30:	2201      	movs	r2, #1
    2a32:	0018      	movs	r0, r3
    2a34:	4b0c      	ldr	r3, [pc, #48]	; (2a68 <sd_mmc_spi_start_write_block+0x48>)
    2a36:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    2a38:	4b0c      	ldr	r3, [pc, #48]	; (2a6c <sd_mmc_spi_start_write_block+0x4c>)
    2a3a:	881b      	ldrh	r3, [r3, #0]
    2a3c:	2b01      	cmp	r3, #1
    2a3e:	d103      	bne.n	2a48 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    2a40:	1dbb      	adds	r3, r7, #6
    2a42:	22fe      	movs	r2, #254	; 0xfe
    2a44:	701a      	strb	r2, [r3, #0]
    2a46:	e002      	b.n	2a4e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    2a48:	1dbb      	adds	r3, r7, #6
    2a4a:	22fc      	movs	r2, #252	; 0xfc
    2a4c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    2a4e:	1db9      	adds	r1, r7, #6
    2a50:	4b04      	ldr	r3, [pc, #16]	; (2a64 <sd_mmc_spi_start_write_block+0x44>)
    2a52:	2201      	movs	r2, #1
    2a54:	0018      	movs	r0, r3
    2a56:	4b04      	ldr	r3, [pc, #16]	; (2a68 <sd_mmc_spi_start_write_block+0x48>)
    2a58:	4798      	blx	r3
}
    2a5a:	46c0      	nop			; (mov r8, r8)
    2a5c:	46bd      	mov	sp, r7
    2a5e:	b002      	add	sp, #8
    2a60:	bd80      	pop	{r7, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	2000011c 	.word	0x2000011c
    2a68:	00004bd1 	.word	0x00004bd1
    2a6c:	2000016a 	.word	0x2000016a

00002a70 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    2a70:	b590      	push	{r4, r7, lr}
    2a72:	b083      	sub	sp, #12
    2a74:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    2a76:	1dbb      	adds	r3, r7, #6
    2a78:	22ff      	movs	r2, #255	; 0xff
    2a7a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    2a7c:	1cbb      	adds	r3, r7, #2
    2a7e:	2201      	movs	r2, #1
    2a80:	4252      	negs	r2, r2
    2a82:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    2a84:	1cb9      	adds	r1, r7, #2
    2a86:	4b1b      	ldr	r3, [pc, #108]	; (2af4 <sd_mmc_spi_stop_write_block+0x84>)
    2a88:	2202      	movs	r2, #2
    2a8a:	0018      	movs	r0, r3
    2a8c:	4b1a      	ldr	r3, [pc, #104]	; (2af8 <sd_mmc_spi_stop_write_block+0x88>)
    2a8e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2a90:	1dbb      	adds	r3, r7, #6
    2a92:	881b      	ldrh	r3, [r3, #0]
    2a94:	1d79      	adds	r1, r7, #5
    2a96:	4817      	ldr	r0, [pc, #92]	; (2af4 <sd_mmc_spi_stop_write_block+0x84>)
    2a98:	2201      	movs	r2, #1
    2a9a:	4c18      	ldr	r4, [pc, #96]	; (2afc <sd_mmc_spi_stop_write_block+0x8c>)
    2a9c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    2a9e:	1d7b      	adds	r3, r7, #5
    2aa0:	781b      	ldrb	r3, [r3, #0]
    2aa2:	001a      	movs	r2, r3
    2aa4:	2310      	movs	r3, #16
    2aa6:	4013      	ands	r3, r2
    2aa8:	d105      	bne.n	2ab6 <sd_mmc_spi_stop_write_block+0x46>
    2aaa:	1d7b      	adds	r3, r7, #5
    2aac:	781b      	ldrb	r3, [r3, #0]
    2aae:	001a      	movs	r2, r3
    2ab0:	2301      	movs	r3, #1
    2ab2:	4013      	ands	r3, r2
    2ab4:	d104      	bne.n	2ac0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2ab6:	4b12      	ldr	r3, [pc, #72]	; (2b00 <sd_mmc_spi_stop_write_block+0x90>)
    2ab8:	2201      	movs	r2, #1
    2aba:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    2abc:	2300      	movs	r3, #0
    2abe:	e014      	b.n	2aea <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2ac0:	1d7b      	adds	r3, r7, #5
    2ac2:	781b      	ldrb	r3, [r3, #0]
    2ac4:	001a      	movs	r2, r3
    2ac6:	231e      	movs	r3, #30
    2ac8:	4013      	ands	r3, r2
    2aca:	2b04      	cmp	r3, #4
    2acc:	d00b      	beq.n	2ae6 <sd_mmc_spi_stop_write_block+0x76>
    2ace:	2b0a      	cmp	r3, #10
    2ad0:	d104      	bne.n	2adc <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    2ad2:	4b0b      	ldr	r3, [pc, #44]	; (2b00 <sd_mmc_spi_stop_write_block+0x90>)
    2ad4:	2208      	movs	r2, #8
    2ad6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2ad8:	2300      	movs	r3, #0
    2ada:	e006      	b.n	2aea <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    2adc:	4b08      	ldr	r3, [pc, #32]	; (2b00 <sd_mmc_spi_stop_write_block+0x90>)
    2ade:	220a      	movs	r2, #10
    2ae0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2ae2:	2300      	movs	r3, #0
    2ae4:	e001      	b.n	2aea <sd_mmc_spi_stop_write_block+0x7a>
		break;
    2ae6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    2ae8:	2301      	movs	r3, #1
}
    2aea:	0018      	movs	r0, r3
    2aec:	46bd      	mov	sp, r7
    2aee:	b003      	add	sp, #12
    2af0:	bd90      	pop	{r4, r7, pc}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	2000011c 	.word	0x2000011c
    2af8:	00004bd1 	.word	0x00004bd1
    2afc:	000049ad 	.word	0x000049ad
    2b00:	2000015f 	.word	0x2000015f

00002b04 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    2b04:	b590      	push	{r4, r7, lr}
    2b06:	b083      	sub	sp, #12
    2b08:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    2b0a:	4b1d      	ldr	r3, [pc, #116]	; (2b80 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2b0c:	881b      	ldrh	r3, [r3, #0]
    2b0e:	2b01      	cmp	r3, #1
    2b10:	d101      	bne.n	2b16 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    2b12:	2301      	movs	r3, #1
    2b14:	e030      	b.n	2b78 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    2b16:	4b1a      	ldr	r3, [pc, #104]	; (2b80 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2b18:	881b      	ldrh	r3, [r3, #0]
    2b1a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    2b1c:	4b19      	ldr	r3, [pc, #100]	; (2b84 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    2b1e:	681a      	ldr	r2, [r3, #0]
    2b20:	4b19      	ldr	r3, [pc, #100]	; (2b88 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    2b22:	881b      	ldrh	r3, [r3, #0]
    2b24:	0019      	movs	r1, r3
    2b26:	4b19      	ldr	r3, [pc, #100]	; (2b8c <sd_mmc_spi_stop_multiwrite_block+0x88>)
    2b28:	0010      	movs	r0, r2
    2b2a:	4798      	blx	r3
    2b2c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    2b2e:	429c      	cmp	r4, r3
    2b30:	d901      	bls.n	2b36 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    2b32:	2301      	movs	r3, #1
    2b34:	e020      	b.n	2b78 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    2b36:	1dfb      	adds	r3, r7, #7
    2b38:	22ff      	movs	r2, #255	; 0xff
    2b3a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2b3c:	1df9      	adds	r1, r7, #7
    2b3e:	4b14      	ldr	r3, [pc, #80]	; (2b90 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2b40:	2201      	movs	r2, #1
    2b42:	0018      	movs	r0, r3
    2b44:	4b13      	ldr	r3, [pc, #76]	; (2b94 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2b46:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    2b48:	1dfb      	adds	r3, r7, #7
    2b4a:	22fd      	movs	r2, #253	; 0xfd
    2b4c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2b4e:	1df9      	adds	r1, r7, #7
    2b50:	4b0f      	ldr	r3, [pc, #60]	; (2b90 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2b52:	2201      	movs	r2, #1
    2b54:	0018      	movs	r0, r3
    2b56:	4b0f      	ldr	r3, [pc, #60]	; (2b94 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2b58:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    2b5a:	4b0f      	ldr	r3, [pc, #60]	; (2b98 <sd_mmc_spi_stop_multiwrite_block+0x94>)
    2b5c:	4798      	blx	r3
    2b5e:	0003      	movs	r3, r0
    2b60:	001a      	movs	r2, r3
    2b62:	2301      	movs	r3, #1
    2b64:	4053      	eors	r3, r2
    2b66:	b2db      	uxtb	r3, r3
    2b68:	2b00      	cmp	r3, #0
    2b6a:	d004      	beq.n	2b76 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2b6c:	4b0b      	ldr	r3, [pc, #44]	; (2b9c <sd_mmc_spi_stop_multiwrite_block+0x98>)
    2b6e:	2205      	movs	r2, #5
    2b70:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    2b72:	2300      	movs	r3, #0
    2b74:	e000      	b.n	2b78 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    2b76:	2301      	movs	r3, #1
}
    2b78:	0018      	movs	r0, r3
    2b7a:	46bd      	mov	sp, r7
    2b7c:	b003      	add	sp, #12
    2b7e:	bd90      	pop	{r4, r7, pc}
    2b80:	2000016a 	.word	0x2000016a
    2b84:	20000164 	.word	0x20000164
    2b88:	20000168 	.word	0x20000168
    2b8c:	0000b4c5 	.word	0x0000b4c5
    2b90:	2000011c 	.word	0x2000011c
    2b94:	00004bd1 	.word	0x00004bd1
    2b98:	00002905 	.word	0x00002905
    2b9c:	2000015f 	.word	0x2000015f

00002ba0 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2ba0:	b580      	push	{r7, lr}
    2ba2:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    2ba4:	4b03      	ldr	r3, [pc, #12]	; (2bb4 <sd_mmc_deinit+0x14>)
    2ba6:	0018      	movs	r0, r3
    2ba8:	4b03      	ldr	r3, [pc, #12]	; (2bb8 <sd_mmc_deinit+0x18>)
    2baa:	4798      	blx	r3
}
    2bac:	46c0      	nop			; (mov r8, r8)
    2bae:	46bd      	mov	sp, r7
    2bb0:	bd80      	pop	{r7, pc}
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	2000011c 	.word	0x2000011c
    2bb8:	00004505 	.word	0x00004505

00002bbc <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2bbc:	b580      	push	{r7, lr}
    2bbe:	b090      	sub	sp, #64	; 0x40
    2bc0:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2bc2:	4b1f      	ldr	r3, [pc, #124]	; (2c40 <sd_mmc_spi_init+0x84>)
    2bc4:	2200      	movs	r2, #0
    2bc6:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2bc8:	233c      	movs	r3, #60	; 0x3c
    2bca:	18fb      	adds	r3, r7, r3
    2bcc:	0018      	movs	r0, r3
    2bce:	4b1d      	ldr	r3, [pc, #116]	; (2c44 <sd_mmc_spi_init+0x88>)
    2bd0:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    2bd2:	1d3b      	adds	r3, r7, #4
    2bd4:	0018      	movs	r0, r3
    2bd6:	4b1c      	ldr	r3, [pc, #112]	; (2c48 <sd_mmc_spi_init+0x8c>)
    2bd8:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    2bda:	1d3b      	adds	r3, r7, #4
    2bdc:	2280      	movs	r2, #128	; 0x80
    2bde:	0252      	lsls	r2, r2, #9
    2be0:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    2be2:	1d3b      	adds	r3, r7, #4
    2be4:	4a19      	ldr	r2, [pc, #100]	; (2c4c <sd_mmc_spi_init+0x90>)
    2be6:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    2be8:	1d3b      	adds	r3, r7, #4
    2bea:	4a19      	ldr	r2, [pc, #100]	; (2c50 <sd_mmc_spi_init+0x94>)
    2bec:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    2bee:	1d3b      	adds	r3, r7, #4
    2bf0:	4a18      	ldr	r2, [pc, #96]	; (2c54 <sd_mmc_spi_init+0x98>)
    2bf2:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    2bf4:	1d3b      	adds	r3, r7, #4
    2bf6:	4a18      	ldr	r2, [pc, #96]	; (2c58 <sd_mmc_spi_init+0x9c>)
    2bf8:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    2bfa:	1d3b      	adds	r3, r7, #4
    2bfc:	2224      	movs	r2, #36	; 0x24
    2bfe:	2100      	movs	r1, #0
    2c00:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    2c02:	1d3b      	adds	r3, r7, #4
    2c04:	4a15      	ldr	r2, [pc, #84]	; (2c5c <sd_mmc_spi_init+0xa0>)
    2c06:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    2c08:	1d3a      	adds	r2, r7, #4
    2c0a:	4915      	ldr	r1, [pc, #84]	; (2c60 <sd_mmc_spi_init+0xa4>)
    2c0c:	4b15      	ldr	r3, [pc, #84]	; (2c64 <sd_mmc_spi_init+0xa8>)
    2c0e:	0018      	movs	r0, r3
    2c10:	4b15      	ldr	r3, [pc, #84]	; (2c68 <sd_mmc_spi_init+0xac>)
    2c12:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    2c14:	4b13      	ldr	r3, [pc, #76]	; (2c64 <sd_mmc_spi_init+0xa8>)
    2c16:	0018      	movs	r0, r3
    2c18:	4b14      	ldr	r3, [pc, #80]	; (2c6c <sd_mmc_spi_init+0xb0>)
    2c1a:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    2c1c:	4b14      	ldr	r3, [pc, #80]	; (2c70 <sd_mmc_spi_init+0xb4>)
    2c1e:	0018      	movs	r0, r3
    2c20:	4b14      	ldr	r3, [pc, #80]	; (2c74 <sd_mmc_spi_init+0xb8>)
    2c22:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    2c24:	4b14      	ldr	r3, [pc, #80]	; (2c78 <sd_mmc_spi_init+0xbc>)
    2c26:	781a      	ldrb	r2, [r3, #0]
    2c28:	4b11      	ldr	r3, [pc, #68]	; (2c70 <sd_mmc_spi_init+0xb4>)
    2c2a:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    2c2c:	4a10      	ldr	r2, [pc, #64]	; (2c70 <sd_mmc_spi_init+0xb4>)
    2c2e:	4b13      	ldr	r3, [pc, #76]	; (2c7c <sd_mmc_spi_init+0xc0>)
    2c30:	0011      	movs	r1, r2
    2c32:	0018      	movs	r0, r3
    2c34:	4b12      	ldr	r3, [pc, #72]	; (2c80 <sd_mmc_spi_init+0xc4>)
    2c36:	4798      	blx	r3
}
    2c38:	46c0      	nop			; (mov r8, r8)
    2c3a:	46bd      	mov	sp, r7
    2c3c:	b010      	add	sp, #64	; 0x40
    2c3e:	bd80      	pop	{r7, pc}
    2c40:	2000015f 	.word	0x2000015f
    2c44:	00002629 	.word	0x00002629
    2c48:	000026ed 	.word	0x000026ed
    2c4c:	00100002 	.word	0x00100002
    2c50:	00110002 	.word	0x00110002
    2c54:	00120002 	.word	0x00120002
    2c58:	00130002 	.word	0x00130002
    2c5c:	00061a80 	.word	0x00061a80
    2c60:	42000c00 	.word	0x42000c00
    2c64:	2000011c 	.word	0x2000011c
    2c68:	0000481d 	.word	0x0000481d
    2c6c:	000027f9 	.word	0x000027f9
    2c70:	2000015c 	.word	0x2000015c
    2c74:	00002771 	.word	0x00002771
    2c78:	20000008 	.word	0x20000008
    2c7c:	20000158 	.word	0x20000158
    2c80:	00002795 	.word	0x00002795

00002c84 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    2c84:	b590      	push	{r4, r7, lr}
    2c86:	b083      	sub	sp, #12
    2c88:	af00      	add	r7, sp, #0
    2c8a:	0004      	movs	r4, r0
    2c8c:	6039      	str	r1, [r7, #0]
    2c8e:	0010      	movs	r0, r2
    2c90:	0019      	movs	r1, r3
    2c92:	1dfb      	adds	r3, r7, #7
    2c94:	1c22      	adds	r2, r4, #0
    2c96:	701a      	strb	r2, [r3, #0]
    2c98:	1dbb      	adds	r3, r7, #6
    2c9a:	1c02      	adds	r2, r0, #0
    2c9c:	701a      	strb	r2, [r3, #0]
    2c9e:	1d7b      	adds	r3, r7, #5
    2ca0:	1c0a      	adds	r2, r1, #0
    2ca2:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2ca4:	4b13      	ldr	r3, [pc, #76]	; (2cf4 <sd_mmc_spi_select_device+0x70>)
    2ca6:	2200      	movs	r2, #0
    2ca8:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    2caa:	683b      	ldr	r3, [r7, #0]
    2cac:	4a12      	ldr	r2, [pc, #72]	; (2cf8 <sd_mmc_spi_select_device+0x74>)
    2cae:	4293      	cmp	r3, r2
    2cb0:	d907      	bls.n	2cc2 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    2cb2:	4b11      	ldr	r3, [pc, #68]	; (2cf8 <sd_mmc_spi_select_device+0x74>)
    2cb4:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2cb6:	e004      	b.n	2cc2 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    2cb8:	683b      	ldr	r3, [r7, #0]
    2cba:	08db      	lsrs	r3, r3, #3
    2cbc:	683a      	ldr	r2, [r7, #0]
    2cbe:	1ad3      	subs	r3, r2, r3
    2cc0:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2cc2:	683a      	ldr	r2, [r7, #0]
    2cc4:	4b0d      	ldr	r3, [pc, #52]	; (2cfc <sd_mmc_spi_select_device+0x78>)
    2cc6:	0011      	movs	r1, r2
    2cc8:	0018      	movs	r0, r3
    2cca:	4b0d      	ldr	r3, [pc, #52]	; (2d00 <sd_mmc_spi_select_device+0x7c>)
    2ccc:	4798      	blx	r3
    2cce:	0003      	movs	r3, r0
    2cd0:	2b17      	cmp	r3, #23
    2cd2:	d0f1      	beq.n	2cb8 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    2cd4:	1dfb      	adds	r3, r7, #7
    2cd6:	781a      	ldrb	r2, [r3, #0]
    2cd8:	0013      	movs	r3, r2
    2cda:	005b      	lsls	r3, r3, #1
    2cdc:	189b      	adds	r3, r3, r2
    2cde:	4a09      	ldr	r2, [pc, #36]	; (2d04 <sd_mmc_spi_select_device+0x80>)
    2ce0:	1899      	adds	r1, r3, r2
    2ce2:	4b06      	ldr	r3, [pc, #24]	; (2cfc <sd_mmc_spi_select_device+0x78>)
    2ce4:	2201      	movs	r2, #1
    2ce6:	0018      	movs	r0, r3
    2ce8:	4b07      	ldr	r3, [pc, #28]	; (2d08 <sd_mmc_spi_select_device+0x84>)
    2cea:	4798      	blx	r3
}
    2cec:	46c0      	nop			; (mov r8, r8)
    2cee:	46bd      	mov	sp, r7
    2cf0:	b003      	add	sp, #12
    2cf2:	bd90      	pop	{r4, r7, pc}
    2cf4:	2000015f 	.word	0x2000015f
    2cf8:	00989680 	.word	0x00989680
    2cfc:	2000011c 	.word	0x2000011c
    2d00:	00004545 	.word	0x00004545
    2d04:	20000158 	.word	0x20000158
    2d08:	00004ae1 	.word	0x00004ae1

00002d0c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    2d0c:	b580      	push	{r7, lr}
    2d0e:	b082      	sub	sp, #8
    2d10:	af00      	add	r7, sp, #0
    2d12:	0002      	movs	r2, r0
    2d14:	1dfb      	adds	r3, r7, #7
    2d16:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2d18:	4b09      	ldr	r3, [pc, #36]	; (2d40 <sd_mmc_spi_deselect_device+0x34>)
    2d1a:	2200      	movs	r2, #0
    2d1c:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    2d1e:	1dfb      	adds	r3, r7, #7
    2d20:	781a      	ldrb	r2, [r3, #0]
    2d22:	0013      	movs	r3, r2
    2d24:	005b      	lsls	r3, r3, #1
    2d26:	189b      	adds	r3, r3, r2
    2d28:	4a06      	ldr	r2, [pc, #24]	; (2d44 <sd_mmc_spi_deselect_device+0x38>)
    2d2a:	1899      	adds	r1, r3, r2
    2d2c:	4b06      	ldr	r3, [pc, #24]	; (2d48 <sd_mmc_spi_deselect_device+0x3c>)
    2d2e:	2200      	movs	r2, #0
    2d30:	0018      	movs	r0, r3
    2d32:	4b06      	ldr	r3, [pc, #24]	; (2d4c <sd_mmc_spi_deselect_device+0x40>)
    2d34:	4798      	blx	r3
}
    2d36:	46c0      	nop			; (mov r8, r8)
    2d38:	46bd      	mov	sp, r7
    2d3a:	b002      	add	sp, #8
    2d3c:	bd80      	pop	{r7, pc}
    2d3e:	46c0      	nop			; (mov r8, r8)
    2d40:	2000015f 	.word	0x2000015f
    2d44:	20000158 	.word	0x20000158
    2d48:	2000011c 	.word	0x2000011c
    2d4c:	00004ae1 	.word	0x00004ae1

00002d50 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    2d50:	b580      	push	{r7, lr}
    2d52:	b082      	sub	sp, #8
    2d54:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    2d56:	1dbb      	adds	r3, r7, #6
    2d58:	22ff      	movs	r2, #255	; 0xff
    2d5a:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2d5c:	4b0c      	ldr	r3, [pc, #48]	; (2d90 <sd_mmc_spi_send_clock+0x40>)
    2d5e:	2200      	movs	r2, #0
    2d60:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    2d62:	1dfb      	adds	r3, r7, #7
    2d64:	2200      	movs	r2, #0
    2d66:	701a      	strb	r2, [r3, #0]
    2d68:	e00a      	b.n	2d80 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    2d6a:	1db9      	adds	r1, r7, #6
    2d6c:	4b09      	ldr	r3, [pc, #36]	; (2d94 <sd_mmc_spi_send_clock+0x44>)
    2d6e:	2201      	movs	r2, #1
    2d70:	0018      	movs	r0, r3
    2d72:	4b09      	ldr	r3, [pc, #36]	; (2d98 <sd_mmc_spi_send_clock+0x48>)
    2d74:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    2d76:	1dfb      	adds	r3, r7, #7
    2d78:	781a      	ldrb	r2, [r3, #0]
    2d7a:	1dfb      	adds	r3, r7, #7
    2d7c:	3201      	adds	r2, #1
    2d7e:	701a      	strb	r2, [r3, #0]
    2d80:	1dfb      	adds	r3, r7, #7
    2d82:	781b      	ldrb	r3, [r3, #0]
    2d84:	2b09      	cmp	r3, #9
    2d86:	d9f0      	bls.n	2d6a <sd_mmc_spi_send_clock+0x1a>
	}
}
    2d88:	46c0      	nop			; (mov r8, r8)
    2d8a:	46bd      	mov	sp, r7
    2d8c:	b002      	add	sp, #8
    2d8e:	bd80      	pop	{r7, pc}
    2d90:	2000015f 	.word	0x2000015f
    2d94:	2000011c 	.word	0x2000011c
    2d98:	00004bd1 	.word	0x00004bd1

00002d9c <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2d9c:	b590      	push	{r4, r7, lr}
    2d9e:	b085      	sub	sp, #20
    2da0:	af02      	add	r7, sp, #8
    2da2:	6078      	str	r0, [r7, #4]
    2da4:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    2da6:	6839      	ldr	r1, [r7, #0]
    2da8:	6878      	ldr	r0, [r7, #4]
    2daa:	2300      	movs	r3, #0
    2dac:	9300      	str	r3, [sp, #0]
    2dae:	2300      	movs	r3, #0
    2db0:	2200      	movs	r2, #0
    2db2:	4c03      	ldr	r4, [pc, #12]	; (2dc0 <sd_mmc_spi_send_cmd+0x24>)
    2db4:	47a0      	blx	r4
    2db6:	0003      	movs	r3, r0
}
    2db8:	0018      	movs	r0, r3
    2dba:	46bd      	mov	sp, r7
    2dbc:	b003      	add	sp, #12
    2dbe:	bd90      	pop	{r4, r7, pc}
    2dc0:	00002dc5 	.word	0x00002dc5

00002dc4 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    2dc4:	b590      	push	{r4, r7, lr}
    2dc6:	b089      	sub	sp, #36	; 0x24
    2dc8:	af00      	add	r7, sp, #0
    2dca:	60f8      	str	r0, [r7, #12]
    2dcc:	60b9      	str	r1, [r7, #8]
    2dce:	0019      	movs	r1, r3
    2dd0:	1dbb      	adds	r3, r7, #6
    2dd2:	801a      	strh	r2, [r3, #0]
    2dd4:	1d3b      	adds	r3, r7, #4
    2dd6:	1c0a      	adds	r2, r1, #0
    2dd8:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    2dda:	231b      	movs	r3, #27
    2ddc:	18fb      	adds	r3, r7, r3
    2dde:	22ff      	movs	r2, #255	; 0xff
    2de0:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    2de2:	231c      	movs	r3, #28
    2de4:	18fb      	adds	r3, r7, r3
    2de6:	22ff      	movs	r2, #255	; 0xff
    2de8:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2dea:	4b72      	ldr	r3, [pc, #456]	; (2fb4 <sd_mmc_spi_adtc_start+0x1f0>)
    2dec:	2200      	movs	r2, #0
    2dee:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    2df0:	68fb      	ldr	r3, [r7, #12]
    2df2:	b2db      	uxtb	r3, r3
    2df4:	223f      	movs	r2, #63	; 0x3f
    2df6:	4013      	ands	r3, r2
    2df8:	b2db      	uxtb	r3, r3
    2dfa:	2240      	movs	r2, #64	; 0x40
    2dfc:	4313      	orrs	r3, r2
    2dfe:	b2da      	uxtb	r2, r3
    2e00:	2314      	movs	r3, #20
    2e02:	18fb      	adds	r3, r7, r3
    2e04:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    2e06:	68bb      	ldr	r3, [r7, #8]
    2e08:	0e1b      	lsrs	r3, r3, #24
    2e0a:	b2da      	uxtb	r2, r3
    2e0c:	2314      	movs	r3, #20
    2e0e:	18fb      	adds	r3, r7, r3
    2e10:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    2e12:	68bb      	ldr	r3, [r7, #8]
    2e14:	0c1b      	lsrs	r3, r3, #16
    2e16:	b2da      	uxtb	r2, r3
    2e18:	2314      	movs	r3, #20
    2e1a:	18fb      	adds	r3, r7, r3
    2e1c:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    2e1e:	68bb      	ldr	r3, [r7, #8]
    2e20:	0a1b      	lsrs	r3, r3, #8
    2e22:	b2da      	uxtb	r2, r3
    2e24:	2314      	movs	r3, #20
    2e26:	18fb      	adds	r3, r7, r3
    2e28:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    2e2a:	68bb      	ldr	r3, [r7, #8]
    2e2c:	b2da      	uxtb	r2, r3
    2e2e:	2314      	movs	r3, #20
    2e30:	18fb      	adds	r3, r7, r3
    2e32:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    2e34:	2314      	movs	r3, #20
    2e36:	18fb      	adds	r3, r7, r3
    2e38:	2105      	movs	r1, #5
    2e3a:	0018      	movs	r0, r3
    2e3c:	4b5e      	ldr	r3, [pc, #376]	; (2fb8 <sd_mmc_spi_adtc_start+0x1f4>)
    2e3e:	4798      	blx	r3
    2e40:	0003      	movs	r3, r0
    2e42:	001a      	movs	r2, r3
    2e44:	2314      	movs	r3, #20
    2e46:	18fb      	adds	r3, r7, r3
    2e48:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    2e4a:	231b      	movs	r3, #27
    2e4c:	18f9      	adds	r1, r7, r3
    2e4e:	4b5b      	ldr	r3, [pc, #364]	; (2fbc <sd_mmc_spi_adtc_start+0x1f8>)
    2e50:	2201      	movs	r2, #1
    2e52:	0018      	movs	r0, r3
    2e54:	4b5a      	ldr	r3, [pc, #360]	; (2fc0 <sd_mmc_spi_adtc_start+0x1fc>)
    2e56:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    2e58:	2314      	movs	r3, #20
    2e5a:	18f9      	adds	r1, r7, r3
    2e5c:	4b57      	ldr	r3, [pc, #348]	; (2fbc <sd_mmc_spi_adtc_start+0x1f8>)
    2e5e:	2206      	movs	r2, #6
    2e60:	0018      	movs	r0, r3
    2e62:	4b57      	ldr	r3, [pc, #348]	; (2fc0 <sd_mmc_spi_adtc_start+0x1fc>)
    2e64:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    2e66:	2313      	movs	r3, #19
    2e68:	18fb      	adds	r3, r7, r3
    2e6a:	22ff      	movs	r2, #255	; 0xff
    2e6c:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2e6e:	231c      	movs	r3, #28
    2e70:	18fb      	adds	r3, r7, r3
    2e72:	881b      	ldrh	r3, [r3, #0]
    2e74:	2213      	movs	r2, #19
    2e76:	18b9      	adds	r1, r7, r2
    2e78:	4850      	ldr	r0, [pc, #320]	; (2fbc <sd_mmc_spi_adtc_start+0x1f8>)
    2e7a:	2201      	movs	r2, #1
    2e7c:	4c51      	ldr	r4, [pc, #324]	; (2fc4 <sd_mmc_spi_adtc_start+0x200>)
    2e7e:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    2e80:	231f      	movs	r3, #31
    2e82:	18fb      	adds	r3, r7, r3
    2e84:	2207      	movs	r2, #7
    2e86:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2e88:	231c      	movs	r3, #28
    2e8a:	18fb      	adds	r3, r7, r3
    2e8c:	881b      	ldrh	r3, [r3, #0]
    2e8e:	2213      	movs	r2, #19
    2e90:	18b9      	adds	r1, r7, r2
    2e92:	484a      	ldr	r0, [pc, #296]	; (2fbc <sd_mmc_spi_adtc_start+0x1f8>)
    2e94:	2201      	movs	r2, #1
    2e96:	4c4b      	ldr	r4, [pc, #300]	; (2fc4 <sd_mmc_spi_adtc_start+0x200>)
    2e98:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2e9a:	2313      	movs	r3, #19
    2e9c:	18fb      	adds	r3, r7, r3
    2e9e:	781b      	ldrb	r3, [r3, #0]
    2ea0:	b25b      	sxtb	r3, r3
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	da10      	bge.n	2ec8 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    2ea6:	231f      	movs	r3, #31
    2ea8:	18fb      	adds	r3, r7, r3
    2eaa:	221f      	movs	r2, #31
    2eac:	18ba      	adds	r2, r7, r2
    2eae:	7812      	ldrb	r2, [r2, #0]
    2eb0:	3a01      	subs	r2, #1
    2eb2:	701a      	strb	r2, [r3, #0]
    2eb4:	231f      	movs	r3, #31
    2eb6:	18fb      	adds	r3, r7, r3
    2eb8:	781b      	ldrb	r3, [r3, #0]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d1e4      	bne.n	2e88 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2ebe:	4b3d      	ldr	r3, [pc, #244]	; (2fb4 <sd_mmc_spi_adtc_start+0x1f0>)
    2ec0:	2202      	movs	r2, #2
    2ec2:	701a      	strb	r2, [r3, #0]
			return false;
    2ec4:	2300      	movs	r3, #0
    2ec6:	e070      	b.n	2faa <sd_mmc_spi_adtc_start+0x1e6>
			break;
    2ec8:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    2eca:	2313      	movs	r3, #19
    2ecc:	18fb      	adds	r3, r7, r3
    2ece:	781b      	ldrb	r3, [r3, #0]
    2ed0:	001a      	movs	r2, r3
    2ed2:	4b3d      	ldr	r3, [pc, #244]	; (2fc8 <sd_mmc_spi_adtc_start+0x204>)
    2ed4:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    2ed6:	2313      	movs	r3, #19
    2ed8:	18fb      	adds	r3, r7, r3
    2eda:	781b      	ldrb	r3, [r3, #0]
    2edc:	001a      	movs	r2, r3
    2ede:	2308      	movs	r3, #8
    2ee0:	4013      	ands	r3, r2
    2ee2:	d004      	beq.n	2eee <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    2ee4:	4b33      	ldr	r3, [pc, #204]	; (2fb4 <sd_mmc_spi_adtc_start+0x1f0>)
    2ee6:	2206      	movs	r2, #6
    2ee8:	701a      	strb	r2, [r3, #0]
		return false;
    2eea:	2300      	movs	r3, #0
    2eec:	e05d      	b.n	2faa <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    2eee:	2313      	movs	r3, #19
    2ef0:	18fb      	adds	r3, r7, r3
    2ef2:	781b      	ldrb	r3, [r3, #0]
    2ef4:	001a      	movs	r2, r3
    2ef6:	2304      	movs	r3, #4
    2ef8:	4013      	ands	r3, r2
    2efa:	d004      	beq.n	2f06 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    2efc:	4b2d      	ldr	r3, [pc, #180]	; (2fb4 <sd_mmc_spi_adtc_start+0x1f0>)
    2efe:	2209      	movs	r2, #9
    2f00:	701a      	strb	r2, [r3, #0]
		return false;
    2f02:	2300      	movs	r3, #0
    2f04:	e051      	b.n	2faa <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    2f06:	2313      	movs	r3, #19
    2f08:	18fb      	adds	r3, r7, r3
    2f0a:	781b      	ldrb	r3, [r3, #0]
    2f0c:	001a      	movs	r2, r3
    2f0e:	2301      	movs	r3, #1
    2f10:	439a      	bics	r2, r3
    2f12:	1e13      	subs	r3, r2, #0
    2f14:	d004      	beq.n	2f20 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2f16:	4b27      	ldr	r3, [pc, #156]	; (2fb4 <sd_mmc_spi_adtc_start+0x1f0>)
    2f18:	2201      	movs	r2, #1
    2f1a:	701a      	strb	r2, [r3, #0]
		return false;
    2f1c:	2300      	movs	r3, #0
    2f1e:	e044      	b.n	2faa <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    2f20:	68fa      	ldr	r2, [r7, #12]
    2f22:	2380      	movs	r3, #128	; 0x80
    2f24:	019b      	lsls	r3, r3, #6
    2f26:	4013      	ands	r3, r2
    2f28:	d00d      	beq.n	2f46 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    2f2a:	4b28      	ldr	r3, [pc, #160]	; (2fcc <sd_mmc_spi_adtc_start+0x208>)
    2f2c:	4798      	blx	r3
    2f2e:	0003      	movs	r3, r0
    2f30:	001a      	movs	r2, r3
    2f32:	2301      	movs	r3, #1
    2f34:	4053      	eors	r3, r2
    2f36:	b2db      	uxtb	r3, r3
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d004      	beq.n	2f46 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    2f3c:	4b1d      	ldr	r3, [pc, #116]	; (2fb4 <sd_mmc_spi_adtc_start+0x1f0>)
    2f3e:	2203      	movs	r2, #3
    2f40:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    2f42:	2300      	movs	r3, #0
    2f44:	e031      	b.n	2faa <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    2f46:	68fa      	ldr	r2, [r7, #12]
    2f48:	2380      	movs	r3, #128	; 0x80
    2f4a:	009b      	lsls	r3, r3, #2
    2f4c:	4013      	ands	r3, r2
    2f4e:	d00e      	beq.n	2f6e <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    2f50:	4b1d      	ldr	r3, [pc, #116]	; (2fc8 <sd_mmc_spi_adtc_start+0x204>)
    2f52:	2200      	movs	r2, #0
    2f54:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    2f56:	231c      	movs	r3, #28
    2f58:	18fb      	adds	r3, r7, r3
    2f5a:	881b      	ldrh	r3, [r3, #0]
    2f5c:	491a      	ldr	r1, [pc, #104]	; (2fc8 <sd_mmc_spi_adtc_start+0x204>)
    2f5e:	4817      	ldr	r0, [pc, #92]	; (2fbc <sd_mmc_spi_adtc_start+0x1f8>)
    2f60:	2201      	movs	r2, #1
    2f62:	4c18      	ldr	r4, [pc, #96]	; (2fc4 <sd_mmc_spi_adtc_start+0x200>)
    2f64:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    2f66:	4b18      	ldr	r3, [pc, #96]	; (2fc8 <sd_mmc_spi_adtc_start+0x204>)
    2f68:	681a      	ldr	r2, [r3, #0]
    2f6a:	4b17      	ldr	r3, [pc, #92]	; (2fc8 <sd_mmc_spi_adtc_start+0x204>)
    2f6c:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    2f6e:	68fa      	ldr	r2, [r7, #12]
    2f70:	2380      	movs	r3, #128	; 0x80
    2f72:	00db      	lsls	r3, r3, #3
    2f74:	4013      	ands	r3, r2
    2f76:	d00c      	beq.n	2f92 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    2f78:	231c      	movs	r3, #28
    2f7a:	18fb      	adds	r3, r7, r3
    2f7c:	881b      	ldrh	r3, [r3, #0]
    2f7e:	4912      	ldr	r1, [pc, #72]	; (2fc8 <sd_mmc_spi_adtc_start+0x204>)
    2f80:	480e      	ldr	r0, [pc, #56]	; (2fbc <sd_mmc_spi_adtc_start+0x1f8>)
    2f82:	2204      	movs	r2, #4
    2f84:	4c0f      	ldr	r4, [pc, #60]	; (2fc4 <sd_mmc_spi_adtc_start+0x200>)
    2f86:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    2f88:	4b0f      	ldr	r3, [pc, #60]	; (2fc8 <sd_mmc_spi_adtc_start+0x204>)
    2f8a:	681b      	ldr	r3, [r3, #0]
    2f8c:	ba1a      	rev	r2, r3
    2f8e:	4b0e      	ldr	r3, [pc, #56]	; (2fc8 <sd_mmc_spi_adtc_start+0x204>)
    2f90:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    2f92:	4b0f      	ldr	r3, [pc, #60]	; (2fd0 <sd_mmc_spi_adtc_start+0x20c>)
    2f94:	1dba      	adds	r2, r7, #6
    2f96:	8812      	ldrh	r2, [r2, #0]
    2f98:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    2f9a:	4b0e      	ldr	r3, [pc, #56]	; (2fd4 <sd_mmc_spi_adtc_start+0x210>)
    2f9c:	1d3a      	adds	r2, r7, #4
    2f9e:	8812      	ldrh	r2, [r2, #0]
    2fa0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    2fa2:	4b0d      	ldr	r3, [pc, #52]	; (2fd8 <sd_mmc_spi_adtc_start+0x214>)
    2fa4:	2200      	movs	r2, #0
    2fa6:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    2fa8:	2301      	movs	r3, #1
}
    2faa:	0018      	movs	r0, r3
    2fac:	46bd      	mov	sp, r7
    2fae:	b009      	add	sp, #36	; 0x24
    2fb0:	bd90      	pop	{r4, r7, pc}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	2000015f 	.word	0x2000015f
    2fb8:	00002849 	.word	0x00002849
    2fbc:	2000011c 	.word	0x2000011c
    2fc0:	00004bd1 	.word	0x00004bd1
    2fc4:	000049ad 	.word	0x000049ad
    2fc8:	20000160 	.word	0x20000160
    2fcc:	00002905 	.word	0x00002905
    2fd0:	20000168 	.word	0x20000168
    2fd4:	2000016a 	.word	0x2000016a
    2fd8:	20000164 	.word	0x20000164

00002fdc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    2fdc:	b580      	push	{r7, lr}
    2fde:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    2fe0:	4b02      	ldr	r3, [pc, #8]	; (2fec <sd_mmc_spi_get_response+0x10>)
    2fe2:	681b      	ldr	r3, [r3, #0]
}
    2fe4:	0018      	movs	r0, r3
    2fe6:	46bd      	mov	sp, r7
    2fe8:	bd80      	pop	{r7, pc}
    2fea:	46c0      	nop			; (mov r8, r8)
    2fec:	20000160 	.word	0x20000160

00002ff0 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    2ff0:	b590      	push	{r4, r7, lr}
    2ff2:	b085      	sub	sp, #20
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    2ff8:	230e      	movs	r3, #14
    2ffa:	18fb      	adds	r3, r7, r3
    2ffc:	22ff      	movs	r2, #255	; 0xff
    2ffe:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3000:	4b1c      	ldr	r3, [pc, #112]	; (3074 <sd_mmc_spi_read_word+0x84>)
    3002:	2200      	movs	r2, #0
    3004:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    3006:	4b1c      	ldr	r3, [pc, #112]	; (3078 <sd_mmc_spi_read_word+0x88>)
    3008:	681a      	ldr	r2, [r3, #0]
    300a:	4b1c      	ldr	r3, [pc, #112]	; (307c <sd_mmc_spi_read_word+0x8c>)
    300c:	881b      	ldrh	r3, [r3, #0]
    300e:	0019      	movs	r1, r3
    3010:	4b1b      	ldr	r3, [pc, #108]	; (3080 <sd_mmc_spi_read_word+0x90>)
    3012:	0010      	movs	r0, r2
    3014:	4798      	blx	r3
    3016:	1e0b      	subs	r3, r1, #0
    3018:	d10a      	bne.n	3030 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    301a:	4b1a      	ldr	r3, [pc, #104]	; (3084 <sd_mmc_spi_read_word+0x94>)
    301c:	4798      	blx	r3
    301e:	0003      	movs	r3, r0
    3020:	001a      	movs	r2, r3
    3022:	2301      	movs	r3, #1
    3024:	4053      	eors	r3, r2
    3026:	b2db      	uxtb	r3, r3
    3028:	2b00      	cmp	r3, #0
    302a:	d001      	beq.n	3030 <sd_mmc_spi_read_word+0x40>
			return false;
    302c:	2300      	movs	r3, #0
    302e:	e01d      	b.n	306c <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    3030:	230e      	movs	r3, #14
    3032:	18fb      	adds	r3, r7, r3
    3034:	881b      	ldrh	r3, [r3, #0]
    3036:	1d39      	adds	r1, r7, #4
    3038:	4813      	ldr	r0, [pc, #76]	; (3088 <sd_mmc_spi_read_word+0x98>)
    303a:	2204      	movs	r2, #4
    303c:	4c13      	ldr	r4, [pc, #76]	; (308c <sd_mmc_spi_read_word+0x9c>)
    303e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	687a      	ldr	r2, [r7, #4]
    3044:	6812      	ldr	r2, [r2, #0]
    3046:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    3048:	4b0b      	ldr	r3, [pc, #44]	; (3078 <sd_mmc_spi_read_word+0x88>)
    304a:	681b      	ldr	r3, [r3, #0]
    304c:	1d1a      	adds	r2, r3, #4
    304e:	4b0a      	ldr	r3, [pc, #40]	; (3078 <sd_mmc_spi_read_word+0x88>)
    3050:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    3052:	4b09      	ldr	r3, [pc, #36]	; (3078 <sd_mmc_spi_read_word+0x88>)
    3054:	681a      	ldr	r2, [r3, #0]
    3056:	4b09      	ldr	r3, [pc, #36]	; (307c <sd_mmc_spi_read_word+0x8c>)
    3058:	881b      	ldrh	r3, [r3, #0]
    305a:	0019      	movs	r1, r3
    305c:	4b08      	ldr	r3, [pc, #32]	; (3080 <sd_mmc_spi_read_word+0x90>)
    305e:	0010      	movs	r0, r2
    3060:	4798      	blx	r3
    3062:	1e0b      	subs	r3, r1, #0
    3064:	d101      	bne.n	306a <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    3066:	4b0a      	ldr	r3, [pc, #40]	; (3090 <sd_mmc_spi_read_word+0xa0>)
    3068:	4798      	blx	r3
	}
	return true;
    306a:	2301      	movs	r3, #1
}
    306c:	0018      	movs	r0, r3
    306e:	46bd      	mov	sp, r7
    3070:	b005      	add	sp, #20
    3072:	bd90      	pop	{r4, r7, pc}
    3074:	2000015f 	.word	0x2000015f
    3078:	20000164 	.word	0x20000164
    307c:	20000168 	.word	0x20000168
    3080:	0000b5d1 	.word	0x0000b5d1
    3084:	00002971 	.word	0x00002971
    3088:	2000011c 	.word	0x2000011c
    308c:	000049ad 	.word	0x000049ad
    3090:	000029f5 	.word	0x000029f5

00003094 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    3094:	b590      	push	{r4, r7, lr}
    3096:	b085      	sub	sp, #20
    3098:	af00      	add	r7, sp, #0
    309a:	6078      	str	r0, [r7, #4]
    309c:	000a      	movs	r2, r1
    309e:	1cbb      	adds	r3, r7, #2
    30a0:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    30a2:	230a      	movs	r3, #10
    30a4:	18fb      	adds	r3, r7, r3
    30a6:	22ff      	movs	r2, #255	; 0xff
    30a8:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    30aa:	4b1c      	ldr	r3, [pc, #112]	; (311c <sd_mmc_spi_start_read_blocks+0x88>)
    30ac:	2200      	movs	r2, #0
    30ae:	701a      	strb	r2, [r3, #0]
	pos = 0;
    30b0:	2300      	movs	r3, #0
    30b2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    30b4:	e025      	b.n	3102 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    30b6:	4b1a      	ldr	r3, [pc, #104]	; (3120 <sd_mmc_spi_start_read_blocks+0x8c>)
    30b8:	4798      	blx	r3
    30ba:	0003      	movs	r3, r0
    30bc:	001a      	movs	r2, r3
    30be:	2301      	movs	r3, #1
    30c0:	4053      	eors	r3, r2
    30c2:	b2db      	uxtb	r3, r3
    30c4:	2b00      	cmp	r3, #0
    30c6:	d001      	beq.n	30cc <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    30c8:	2300      	movs	r3, #0
    30ca:	e022      	b.n	3112 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    30cc:	687a      	ldr	r2, [r7, #4]
    30ce:	68fb      	ldr	r3, [r7, #12]
    30d0:	18d1      	adds	r1, r2, r3
    30d2:	4b14      	ldr	r3, [pc, #80]	; (3124 <sd_mmc_spi_start_read_blocks+0x90>)
    30d4:	881a      	ldrh	r2, [r3, #0]
    30d6:	230a      	movs	r3, #10
    30d8:	18fb      	adds	r3, r7, r3
    30da:	881b      	ldrh	r3, [r3, #0]
    30dc:	4812      	ldr	r0, [pc, #72]	; (3128 <sd_mmc_spi_start_read_blocks+0x94>)
    30de:	4c13      	ldr	r4, [pc, #76]	; (312c <sd_mmc_spi_start_read_blocks+0x98>)
    30e0:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    30e2:	4b10      	ldr	r3, [pc, #64]	; (3124 <sd_mmc_spi_start_read_blocks+0x90>)
    30e4:	881b      	ldrh	r3, [r3, #0]
    30e6:	001a      	movs	r2, r3
    30e8:	68fb      	ldr	r3, [r7, #12]
    30ea:	189b      	adds	r3, r3, r2
    30ec:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    30ee:	4b0d      	ldr	r3, [pc, #52]	; (3124 <sd_mmc_spi_start_read_blocks+0x90>)
    30f0:	881b      	ldrh	r3, [r3, #0]
    30f2:	001a      	movs	r2, r3
    30f4:	4b0e      	ldr	r3, [pc, #56]	; (3130 <sd_mmc_spi_start_read_blocks+0x9c>)
    30f6:	681b      	ldr	r3, [r3, #0]
    30f8:	18d2      	adds	r2, r2, r3
    30fa:	4b0d      	ldr	r3, [pc, #52]	; (3130 <sd_mmc_spi_start_read_blocks+0x9c>)
    30fc:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    30fe:	4b0d      	ldr	r3, [pc, #52]	; (3134 <sd_mmc_spi_start_read_blocks+0xa0>)
    3100:	4798      	blx	r3
	while (nb_block--) {
    3102:	1cbb      	adds	r3, r7, #2
    3104:	881b      	ldrh	r3, [r3, #0]
    3106:	1cba      	adds	r2, r7, #2
    3108:	1e59      	subs	r1, r3, #1
    310a:	8011      	strh	r1, [r2, #0]
    310c:	2b00      	cmp	r3, #0
    310e:	d1d2      	bne.n	30b6 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    3110:	2301      	movs	r3, #1
}
    3112:	0018      	movs	r0, r3
    3114:	46bd      	mov	sp, r7
    3116:	b005      	add	sp, #20
    3118:	bd90      	pop	{r4, r7, pc}
    311a:	46c0      	nop			; (mov r8, r8)
    311c:	2000015f 	.word	0x2000015f
    3120:	00002971 	.word	0x00002971
    3124:	20000168 	.word	0x20000168
    3128:	2000011c 	.word	0x2000011c
    312c:	000049ad 	.word	0x000049ad
    3130:	20000164 	.word	0x20000164
    3134:	000029f5 	.word	0x000029f5

00003138 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    3138:	b580      	push	{r7, lr}
    313a:	af00      	add	r7, sp, #0
	return true;
    313c:	2301      	movs	r3, #1
}
    313e:	0018      	movs	r0, r3
    3140:	46bd      	mov	sp, r7
    3142:	bd80      	pop	{r7, pc}

00003144 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    3144:	b580      	push	{r7, lr}
    3146:	b084      	sub	sp, #16
    3148:	af00      	add	r7, sp, #0
    314a:	6078      	str	r0, [r7, #4]
    314c:	000a      	movs	r2, r1
    314e:	1cbb      	adds	r3, r7, #2
    3150:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3152:	4b24      	ldr	r3, [pc, #144]	; (31e4 <sd_mmc_spi_start_write_blocks+0xa0>)
    3154:	2200      	movs	r2, #0
    3156:	701a      	strb	r2, [r3, #0]
	pos = 0;
    3158:	2300      	movs	r3, #0
    315a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    315c:	e035      	b.n	31ca <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    315e:	4b22      	ldr	r3, [pc, #136]	; (31e8 <sd_mmc_spi_start_write_blocks+0xa4>)
    3160:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    3162:	687a      	ldr	r2, [r7, #4]
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	18d1      	adds	r1, r2, r3
    3168:	4b20      	ldr	r3, [pc, #128]	; (31ec <sd_mmc_spi_start_write_blocks+0xa8>)
    316a:	881a      	ldrh	r2, [r3, #0]
    316c:	4b20      	ldr	r3, [pc, #128]	; (31f0 <sd_mmc_spi_start_write_blocks+0xac>)
    316e:	0018      	movs	r0, r3
    3170:	4b20      	ldr	r3, [pc, #128]	; (31f4 <sd_mmc_spi_start_write_blocks+0xb0>)
    3172:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    3174:	4b1d      	ldr	r3, [pc, #116]	; (31ec <sd_mmc_spi_start_write_blocks+0xa8>)
    3176:	881b      	ldrh	r3, [r3, #0]
    3178:	001a      	movs	r2, r3
    317a:	68fb      	ldr	r3, [r7, #12]
    317c:	189b      	adds	r3, r3, r2
    317e:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    3180:	4b1a      	ldr	r3, [pc, #104]	; (31ec <sd_mmc_spi_start_write_blocks+0xa8>)
    3182:	881b      	ldrh	r3, [r3, #0]
    3184:	001a      	movs	r2, r3
    3186:	4b1c      	ldr	r3, [pc, #112]	; (31f8 <sd_mmc_spi_start_write_blocks+0xb4>)
    3188:	681b      	ldr	r3, [r3, #0]
    318a:	18d2      	adds	r2, r2, r3
    318c:	4b1a      	ldr	r3, [pc, #104]	; (31f8 <sd_mmc_spi_start_write_blocks+0xb4>)
    318e:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    3190:	4b1a      	ldr	r3, [pc, #104]	; (31fc <sd_mmc_spi_start_write_blocks+0xb8>)
    3192:	4798      	blx	r3
    3194:	0003      	movs	r3, r0
    3196:	001a      	movs	r2, r3
    3198:	2301      	movs	r3, #1
    319a:	4053      	eors	r3, r2
    319c:	b2db      	uxtb	r3, r3
    319e:	2b00      	cmp	r3, #0
    31a0:	d001      	beq.n	31a6 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    31a2:	2300      	movs	r3, #0
    31a4:	e019      	b.n	31da <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    31a6:	1cbb      	adds	r3, r7, #2
    31a8:	881b      	ldrh	r3, [r3, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d00d      	beq.n	31ca <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    31ae:	4b14      	ldr	r3, [pc, #80]	; (3200 <sd_mmc_spi_start_write_blocks+0xbc>)
    31b0:	4798      	blx	r3
    31b2:	0003      	movs	r3, r0
    31b4:	001a      	movs	r2, r3
    31b6:	2301      	movs	r3, #1
    31b8:	4053      	eors	r3, r2
    31ba:	b2db      	uxtb	r3, r3
    31bc:	2b00      	cmp	r3, #0
    31be:	d004      	beq.n	31ca <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    31c0:	4b08      	ldr	r3, [pc, #32]	; (31e4 <sd_mmc_spi_start_write_blocks+0xa0>)
    31c2:	2205      	movs	r2, #5
    31c4:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    31c6:	2300      	movs	r3, #0
    31c8:	e007      	b.n	31da <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    31ca:	1cbb      	adds	r3, r7, #2
    31cc:	881b      	ldrh	r3, [r3, #0]
    31ce:	1cba      	adds	r2, r7, #2
    31d0:	1e59      	subs	r1, r3, #1
    31d2:	8011      	strh	r1, [r2, #0]
    31d4:	2b00      	cmp	r3, #0
    31d6:	d1c2      	bne.n	315e <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    31d8:	2301      	movs	r3, #1
}
    31da:	0018      	movs	r0, r3
    31dc:	46bd      	mov	sp, r7
    31de:	b004      	add	sp, #16
    31e0:	bd80      	pop	{r7, pc}
    31e2:	46c0      	nop			; (mov r8, r8)
    31e4:	2000015f 	.word	0x2000015f
    31e8:	00002a21 	.word	0x00002a21
    31ec:	20000168 	.word	0x20000168
    31f0:	2000011c 	.word	0x2000011c
    31f4:	00004bd1 	.word	0x00004bd1
    31f8:	20000164 	.word	0x20000164
    31fc:	00002a71 	.word	0x00002a71
    3200:	00002905 	.word	0x00002905

00003204 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    3204:	b580      	push	{r7, lr}
    3206:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    3208:	4b09      	ldr	r3, [pc, #36]	; (3230 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    320a:	4798      	blx	r3
    320c:	0003      	movs	r3, r0
    320e:	001a      	movs	r2, r3
    3210:	2301      	movs	r3, #1
    3212:	4053      	eors	r3, r2
    3214:	b2db      	uxtb	r3, r3
    3216:	2b00      	cmp	r3, #0
    3218:	d004      	beq.n	3224 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    321a:	4b06      	ldr	r3, [pc, #24]	; (3234 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    321c:	2205      	movs	r2, #5
    321e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    3220:	2300      	movs	r3, #0
    3222:	e002      	b.n	322a <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    3224:	4b04      	ldr	r3, [pc, #16]	; (3238 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    3226:	4798      	blx	r3
    3228:	0003      	movs	r3, r0
}
    322a:	0018      	movs	r0, r3
    322c:	46bd      	mov	sp, r7
    322e:	bd80      	pop	{r7, pc}
    3230:	00002905 	.word	0x00002905
    3234:	2000015f 	.word	0x2000015f
    3238:	00002b05 	.word	0x00002b05

0000323c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    323c:	b580      	push	{r7, lr}
    323e:	b084      	sub	sp, #16
    3240:	af00      	add	r7, sp, #0
    3242:	0002      	movs	r2, r0
    3244:	1dfb      	adds	r3, r7, #7
    3246:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    3248:	1dfb      	adds	r3, r7, #7
    324a:	781b      	ldrb	r3, [r3, #0]
    324c:	2b00      	cmp	r3, #0
    324e:	d108      	bne.n	3262 <mem_test_unit_ready+0x26>
    3250:	1dfb      	adds	r3, r7, #7
    3252:	781a      	ldrb	r2, [r3, #0]
    3254:	4b08      	ldr	r3, [pc, #32]	; (3278 <mem_test_unit_ready+0x3c>)
    3256:	0152      	lsls	r2, r2, #5
    3258:	58d3      	ldr	r3, [r2, r3]
    325a:	4798      	blx	r3
    325c:	0003      	movs	r3, r0
    325e:	001a      	movs	r2, r3
    3260:	e000      	b.n	3264 <mem_test_unit_ready+0x28>
    3262:	2201      	movs	r2, #1
  status =
    3264:	230f      	movs	r3, #15
    3266:	18fb      	adds	r3, r7, r3
    3268:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    326a:	230f      	movs	r3, #15
    326c:	18fb      	adds	r3, r7, r3
    326e:	781b      	ldrb	r3, [r3, #0]
}
    3270:	0018      	movs	r0, r3
    3272:	46bd      	mov	sp, r7
    3274:	b004      	add	sp, #16
    3276:	bd80      	pop	{r7, pc}
    3278:	0000c208 	.word	0x0000c208

0000327c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    327c:	b580      	push	{r7, lr}
    327e:	b084      	sub	sp, #16
    3280:	af00      	add	r7, sp, #0
    3282:	0002      	movs	r2, r0
    3284:	6039      	str	r1, [r7, #0]
    3286:	1dfb      	adds	r3, r7, #7
    3288:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    328a:	1dfb      	adds	r3, r7, #7
    328c:	781b      	ldrb	r3, [r3, #0]
    328e:	2b00      	cmp	r3, #0
    3290:	d10c      	bne.n	32ac <mem_read_capacity+0x30>
    3292:	1dfb      	adds	r3, r7, #7
    3294:	781b      	ldrb	r3, [r3, #0]
    3296:	4a0b      	ldr	r2, [pc, #44]	; (32c4 <mem_read_capacity+0x48>)
    3298:	015b      	lsls	r3, r3, #5
    329a:	18d3      	adds	r3, r2, r3
    329c:	3304      	adds	r3, #4
    329e:	681b      	ldr	r3, [r3, #0]
    32a0:	683a      	ldr	r2, [r7, #0]
    32a2:	0010      	movs	r0, r2
    32a4:	4798      	blx	r3
    32a6:	0003      	movs	r3, r0
    32a8:	001a      	movs	r2, r3
    32aa:	e000      	b.n	32ae <mem_read_capacity+0x32>
    32ac:	2201      	movs	r2, #1
  status =
    32ae:	230f      	movs	r3, #15
    32b0:	18fb      	adds	r3, r7, r3
    32b2:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    32b4:	230f      	movs	r3, #15
    32b6:	18fb      	adds	r3, r7, r3
    32b8:	781b      	ldrb	r3, [r3, #0]
}
    32ba:	0018      	movs	r0, r3
    32bc:	46bd      	mov	sp, r7
    32be:	b004      	add	sp, #16
    32c0:	bd80      	pop	{r7, pc}
    32c2:	46c0      	nop			; (mov r8, r8)
    32c4:	0000c208 	.word	0x0000c208

000032c8 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b084      	sub	sp, #16
    32cc:	af00      	add	r7, sp, #0
    32ce:	0002      	movs	r2, r0
    32d0:	1dfb      	adds	r3, r7, #7
    32d2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    32d4:	1dfb      	adds	r3, r7, #7
    32d6:	781b      	ldrb	r3, [r3, #0]
    32d8:	425a      	negs	r2, r3
    32da:	4153      	adcs	r3, r2
    32dc:	b2da      	uxtb	r2, r3
  sector_size =
    32de:	230f      	movs	r3, #15
    32e0:	18fb      	adds	r3, r7, r3
    32e2:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    32e4:	230f      	movs	r3, #15
    32e6:	18fb      	adds	r3, r7, r3
    32e8:	781b      	ldrb	r3, [r3, #0]
}
    32ea:	0018      	movs	r0, r3
    32ec:	46bd      	mov	sp, r7
    32ee:	b004      	add	sp, #16
    32f0:	bd80      	pop	{r7, pc}
	...

000032f4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    32f4:	b580      	push	{r7, lr}
    32f6:	b084      	sub	sp, #16
    32f8:	af00      	add	r7, sp, #0
    32fa:	0002      	movs	r2, r0
    32fc:	1dfb      	adds	r3, r7, #7
    32fe:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    3300:	1dfb      	adds	r3, r7, #7
    3302:	781b      	ldrb	r3, [r3, #0]
    3304:	2b00      	cmp	r3, #0
    3306:	d109      	bne.n	331c <mem_wr_protect+0x28>
    3308:	1dfb      	adds	r3, r7, #7
    330a:	781b      	ldrb	r3, [r3, #0]
    330c:	4a0a      	ldr	r2, [pc, #40]	; (3338 <mem_wr_protect+0x44>)
    330e:	015b      	lsls	r3, r3, #5
    3310:	18d3      	adds	r3, r2, r3
    3312:	330c      	adds	r3, #12
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	4798      	blx	r3
    3318:	1e03      	subs	r3, r0, #0
    331a:	d001      	beq.n	3320 <mem_wr_protect+0x2c>
    331c:	2201      	movs	r2, #1
    331e:	e000      	b.n	3322 <mem_wr_protect+0x2e>
    3320:	2200      	movs	r2, #0
  wr_protect =
    3322:	230f      	movs	r3, #15
    3324:	18fb      	adds	r3, r7, r3
    3326:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    3328:	230f      	movs	r3, #15
    332a:	18fb      	adds	r3, r7, r3
    332c:	781b      	ldrb	r3, [r3, #0]
}
    332e:	0018      	movs	r0, r3
    3330:	46bd      	mov	sp, r7
    3332:	b004      	add	sp, #16
    3334:	bd80      	pop	{r7, pc}
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	0000c208 	.word	0x0000c208

0000333c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    333c:	b580      	push	{r7, lr}
    333e:	b086      	sub	sp, #24
    3340:	af00      	add	r7, sp, #0
    3342:	60b9      	str	r1, [r7, #8]
    3344:	607a      	str	r2, [r7, #4]
    3346:	230f      	movs	r3, #15
    3348:	18fb      	adds	r3, r7, r3
    334a:	1c02      	adds	r2, r0, #0
    334c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    334e:	230f      	movs	r3, #15
    3350:	18fb      	adds	r3, r7, r3
    3352:	781b      	ldrb	r3, [r3, #0]
    3354:	2b00      	cmp	r3, #0
    3356:	d10e      	bne.n	3376 <memory_2_ram+0x3a>
    3358:	230f      	movs	r3, #15
    335a:	18fb      	adds	r3, r7, r3
    335c:	781b      	ldrb	r3, [r3, #0]
    335e:	4a0b      	ldr	r2, [pc, #44]	; (338c <memory_2_ram+0x50>)
    3360:	015b      	lsls	r3, r3, #5
    3362:	18d3      	adds	r3, r2, r3
    3364:	3314      	adds	r3, #20
    3366:	681b      	ldr	r3, [r3, #0]
    3368:	6879      	ldr	r1, [r7, #4]
    336a:	68ba      	ldr	r2, [r7, #8]
    336c:	0010      	movs	r0, r2
    336e:	4798      	blx	r3
    3370:	0003      	movs	r3, r0
    3372:	001a      	movs	r2, r3
    3374:	e000      	b.n	3378 <memory_2_ram+0x3c>
    3376:	2201      	movs	r2, #1
  status =
    3378:	2317      	movs	r3, #23
    337a:	18fb      	adds	r3, r7, r3
    337c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    337e:	2317      	movs	r3, #23
    3380:	18fb      	adds	r3, r7, r3
    3382:	781b      	ldrb	r3, [r3, #0]
}
    3384:	0018      	movs	r0, r3
    3386:	46bd      	mov	sp, r7
    3388:	b006      	add	sp, #24
    338a:	bd80      	pop	{r7, pc}
    338c:	0000c208 	.word	0x0000c208

00003390 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    3390:	b580      	push	{r7, lr}
    3392:	b086      	sub	sp, #24
    3394:	af00      	add	r7, sp, #0
    3396:	60b9      	str	r1, [r7, #8]
    3398:	607a      	str	r2, [r7, #4]
    339a:	230f      	movs	r3, #15
    339c:	18fb      	adds	r3, r7, r3
    339e:	1c02      	adds	r2, r0, #0
    33a0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    33a2:	230f      	movs	r3, #15
    33a4:	18fb      	adds	r3, r7, r3
    33a6:	781b      	ldrb	r3, [r3, #0]
    33a8:	2b00      	cmp	r3, #0
    33aa:	d10e      	bne.n	33ca <ram_2_memory+0x3a>
    33ac:	230f      	movs	r3, #15
    33ae:	18fb      	adds	r3, r7, r3
    33b0:	781b      	ldrb	r3, [r3, #0]
    33b2:	4a0b      	ldr	r2, [pc, #44]	; (33e0 <ram_2_memory+0x50>)
    33b4:	015b      	lsls	r3, r3, #5
    33b6:	18d3      	adds	r3, r2, r3
    33b8:	3318      	adds	r3, #24
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	6879      	ldr	r1, [r7, #4]
    33be:	68ba      	ldr	r2, [r7, #8]
    33c0:	0010      	movs	r0, r2
    33c2:	4798      	blx	r3
    33c4:	0003      	movs	r3, r0
    33c6:	001a      	movs	r2, r3
    33c8:	e000      	b.n	33cc <ram_2_memory+0x3c>
    33ca:	2201      	movs	r2, #1
  status =
    33cc:	2317      	movs	r3, #23
    33ce:	18fb      	adds	r3, r7, r3
    33d0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    33d2:	2317      	movs	r3, #23
    33d4:	18fb      	adds	r3, r7, r3
    33d6:	781b      	ldrb	r3, [r3, #0]
}
    33d8:	0018      	movs	r0, r3
    33da:	46bd      	mov	sp, r7
    33dc:	b006      	add	sp, #24
    33de:	bd80      	pop	{r7, pc}
    33e0:	0000c208 	.word	0x0000c208

000033e4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    33e4:	b580      	push	{r7, lr}
    33e6:	b082      	sub	sp, #8
    33e8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    33ea:	4b10      	ldr	r3, [pc, #64]	; (342c <cpu_irq_enter_critical+0x48>)
    33ec:	681b      	ldr	r3, [r3, #0]
    33ee:	2b00      	cmp	r3, #0
    33f0:	d112      	bne.n	3418 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    33f2:	f3ef 8310 	mrs	r3, PRIMASK
    33f6:	607b      	str	r3, [r7, #4]
  return(result);
    33f8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    33fa:	2b00      	cmp	r3, #0
    33fc:	d109      	bne.n	3412 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    33fe:	b672      	cpsid	i
    3400:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3404:	4b0a      	ldr	r3, [pc, #40]	; (3430 <cpu_irq_enter_critical+0x4c>)
    3406:	2200      	movs	r2, #0
    3408:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    340a:	4b0a      	ldr	r3, [pc, #40]	; (3434 <cpu_irq_enter_critical+0x50>)
    340c:	2201      	movs	r2, #1
    340e:	701a      	strb	r2, [r3, #0]
    3410:	e002      	b.n	3418 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3412:	4b08      	ldr	r3, [pc, #32]	; (3434 <cpu_irq_enter_critical+0x50>)
    3414:	2200      	movs	r2, #0
    3416:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3418:	4b04      	ldr	r3, [pc, #16]	; (342c <cpu_irq_enter_critical+0x48>)
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	1c5a      	adds	r2, r3, #1
    341e:	4b03      	ldr	r3, [pc, #12]	; (342c <cpu_irq_enter_critical+0x48>)
    3420:	601a      	str	r2, [r3, #0]
}
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	46bd      	mov	sp, r7
    3426:	b002      	add	sp, #8
    3428:	bd80      	pop	{r7, pc}
    342a:	46c0      	nop			; (mov r8, r8)
    342c:	2000016c 	.word	0x2000016c
    3430:	20000009 	.word	0x20000009
    3434:	20000170 	.word	0x20000170

00003438 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3438:	b580      	push	{r7, lr}
    343a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    343c:	4b0b      	ldr	r3, [pc, #44]	; (346c <cpu_irq_leave_critical+0x34>)
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	1e5a      	subs	r2, r3, #1
    3442:	4b0a      	ldr	r3, [pc, #40]	; (346c <cpu_irq_leave_critical+0x34>)
    3444:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3446:	4b09      	ldr	r3, [pc, #36]	; (346c <cpu_irq_leave_critical+0x34>)
    3448:	681b      	ldr	r3, [r3, #0]
    344a:	2b00      	cmp	r3, #0
    344c:	d10a      	bne.n	3464 <cpu_irq_leave_critical+0x2c>
    344e:	4b08      	ldr	r3, [pc, #32]	; (3470 <cpu_irq_leave_critical+0x38>)
    3450:	781b      	ldrb	r3, [r3, #0]
    3452:	b2db      	uxtb	r3, r3
    3454:	2b00      	cmp	r3, #0
    3456:	d005      	beq.n	3464 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3458:	4b06      	ldr	r3, [pc, #24]	; (3474 <cpu_irq_leave_critical+0x3c>)
    345a:	2201      	movs	r2, #1
    345c:	701a      	strb	r2, [r3, #0]
    345e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3462:	b662      	cpsie	i
	}
}
    3464:	46c0      	nop			; (mov r8, r8)
    3466:	46bd      	mov	sp, r7
    3468:	bd80      	pop	{r7, pc}
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	2000016c 	.word	0x2000016c
    3470:	20000170 	.word	0x20000170
    3474:	20000009 	.word	0x20000009

00003478 <system_pinmux_get_config_defaults>:
{
    3478:	b580      	push	{r7, lr}
    347a:	b082      	sub	sp, #8
    347c:	af00      	add	r7, sp, #0
    347e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	2280      	movs	r2, #128	; 0x80
    3484:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3486:	687b      	ldr	r3, [r7, #4]
    3488:	2200      	movs	r2, #0
    348a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    348c:	687b      	ldr	r3, [r7, #4]
    348e:	2201      	movs	r2, #1
    3490:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	2200      	movs	r2, #0
    3496:	70da      	strb	r2, [r3, #3]
}
    3498:	46c0      	nop			; (mov r8, r8)
    349a:	46bd      	mov	sp, r7
    349c:	b002      	add	sp, #8
    349e:	bd80      	pop	{r7, pc}

000034a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b084      	sub	sp, #16
    34a4:	af00      	add	r7, sp, #0
    34a6:	0002      	movs	r2, r0
    34a8:	6039      	str	r1, [r7, #0]
    34aa:	1dfb      	adds	r3, r7, #7
    34ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    34ae:	230c      	movs	r3, #12
    34b0:	18fb      	adds	r3, r7, r3
    34b2:	0018      	movs	r0, r3
    34b4:	4b10      	ldr	r3, [pc, #64]	; (34f8 <port_pin_set_config+0x58>)
    34b6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    34b8:	230c      	movs	r3, #12
    34ba:	18fb      	adds	r3, r7, r3
    34bc:	2280      	movs	r2, #128	; 0x80
    34be:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    34c0:	683b      	ldr	r3, [r7, #0]
    34c2:	781a      	ldrb	r2, [r3, #0]
    34c4:	230c      	movs	r3, #12
    34c6:	18fb      	adds	r3, r7, r3
    34c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    34ca:	683b      	ldr	r3, [r7, #0]
    34cc:	785a      	ldrb	r2, [r3, #1]
    34ce:	230c      	movs	r3, #12
    34d0:	18fb      	adds	r3, r7, r3
    34d2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    34d4:	683b      	ldr	r3, [r7, #0]
    34d6:	789a      	ldrb	r2, [r3, #2]
    34d8:	230c      	movs	r3, #12
    34da:	18fb      	adds	r3, r7, r3
    34dc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    34de:	230c      	movs	r3, #12
    34e0:	18fa      	adds	r2, r7, r3
    34e2:	1dfb      	adds	r3, r7, #7
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	0011      	movs	r1, r2
    34e8:	0018      	movs	r0, r3
    34ea:	4b04      	ldr	r3, [pc, #16]	; (34fc <port_pin_set_config+0x5c>)
    34ec:	4798      	blx	r3
}
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	46bd      	mov	sp, r7
    34f2:	b004      	add	sp, #16
    34f4:	bd80      	pop	{r7, pc}
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	00003479 	.word	0x00003479
    34fc:	00006d5d 	.word	0x00006d5d

00003500 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3500:	b580      	push	{r7, lr}
    3502:	b082      	sub	sp, #8
    3504:	af00      	add	r7, sp, #0
    3506:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3508:	687b      	ldr	r3, [r7, #4]
    350a:	2200      	movs	r2, #0
    350c:	701a      	strb	r2, [r3, #0]
}
    350e:	46c0      	nop			; (mov r8, r8)
    3510:	46bd      	mov	sp, r7
    3512:	b002      	add	sp, #8
    3514:	bd80      	pop	{r7, pc}
	...

00003518 <system_apb_clock_set_mask>:
{
    3518:	b580      	push	{r7, lr}
    351a:	b082      	sub	sp, #8
    351c:	af00      	add	r7, sp, #0
    351e:	0002      	movs	r2, r0
    3520:	6039      	str	r1, [r7, #0]
    3522:	1dfb      	adds	r3, r7, #7
    3524:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3526:	1dfb      	adds	r3, r7, #7
    3528:	781b      	ldrb	r3, [r3, #0]
    352a:	2b01      	cmp	r3, #1
    352c:	d00a      	beq.n	3544 <system_apb_clock_set_mask+0x2c>
    352e:	2b02      	cmp	r3, #2
    3530:	d00f      	beq.n	3552 <system_apb_clock_set_mask+0x3a>
    3532:	2b00      	cmp	r3, #0
    3534:	d114      	bne.n	3560 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3536:	4b0e      	ldr	r3, [pc, #56]	; (3570 <system_apb_clock_set_mask+0x58>)
    3538:	4a0d      	ldr	r2, [pc, #52]	; (3570 <system_apb_clock_set_mask+0x58>)
    353a:	6991      	ldr	r1, [r2, #24]
    353c:	683a      	ldr	r2, [r7, #0]
    353e:	430a      	orrs	r2, r1
    3540:	619a      	str	r2, [r3, #24]
			break;
    3542:	e00f      	b.n	3564 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3544:	4b0a      	ldr	r3, [pc, #40]	; (3570 <system_apb_clock_set_mask+0x58>)
    3546:	4a0a      	ldr	r2, [pc, #40]	; (3570 <system_apb_clock_set_mask+0x58>)
    3548:	69d1      	ldr	r1, [r2, #28]
    354a:	683a      	ldr	r2, [r7, #0]
    354c:	430a      	orrs	r2, r1
    354e:	61da      	str	r2, [r3, #28]
			break;
    3550:	e008      	b.n	3564 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3552:	4b07      	ldr	r3, [pc, #28]	; (3570 <system_apb_clock_set_mask+0x58>)
    3554:	4a06      	ldr	r2, [pc, #24]	; (3570 <system_apb_clock_set_mask+0x58>)
    3556:	6a11      	ldr	r1, [r2, #32]
    3558:	683a      	ldr	r2, [r7, #0]
    355a:	430a      	orrs	r2, r1
    355c:	621a      	str	r2, [r3, #32]
			break;
    355e:	e001      	b.n	3564 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3560:	2317      	movs	r3, #23
    3562:	e000      	b.n	3566 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3564:	2300      	movs	r3, #0
}
    3566:	0018      	movs	r0, r3
    3568:	46bd      	mov	sp, r7
    356a:	b002      	add	sp, #8
    356c:	bd80      	pop	{r7, pc}
    356e:	46c0      	nop			; (mov r8, r8)
    3570:	40000400 	.word	0x40000400

00003574 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    3574:	b580      	push	{r7, lr}
    3576:	b084      	sub	sp, #16
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    357c:	687b      	ldr	r3, [r7, #4]
    357e:	681b      	ldr	r3, [r3, #0]
    3580:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    3582:	68fb      	ldr	r3, [r7, #12]
    3584:	7a9b      	ldrb	r3, [r3, #10]
    3586:	b2db      	uxtb	r3, r3
    3588:	b25b      	sxtb	r3, r3
    358a:	2b00      	cmp	r3, #0
    358c:	da01      	bge.n	3592 <rtc_calendar_is_syncing+0x1e>
                return true;
    358e:	2301      	movs	r3, #1
    3590:	e000      	b.n	3594 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    3592:	2300      	movs	r3, #0
}
    3594:	0018      	movs	r0, r3
    3596:	46bd      	mov	sp, r7
    3598:	b004      	add	sp, #16
    359a:	bd80      	pop	{r7, pc}

0000359c <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    359c:	b580      	push	{r7, lr}
    359e:	b084      	sub	sp, #16
    35a0:	af00      	add	r7, sp, #0
    35a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    35a4:	687b      	ldr	r3, [r7, #4]
    35a6:	681b      	ldr	r3, [r3, #0]
    35a8:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	687b      	ldr	r3, [r7, #4]
    35ae:	0018      	movs	r0, r3
    35b0:	4b07      	ldr	r3, [pc, #28]	; (35d0 <rtc_calendar_enable+0x34>)
    35b2:	4798      	blx	r3
    35b4:	1e03      	subs	r3, r0, #0
    35b6:	d1f9      	bne.n	35ac <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    35b8:	68fb      	ldr	r3, [r7, #12]
    35ba:	881b      	ldrh	r3, [r3, #0]
    35bc:	b29b      	uxth	r3, r3
    35be:	2202      	movs	r2, #2
    35c0:	4313      	orrs	r3, r2
    35c2:	b29a      	uxth	r2, r3
    35c4:	68fb      	ldr	r3, [r7, #12]
    35c6:	801a      	strh	r2, [r3, #0]
}
    35c8:	46c0      	nop			; (mov r8, r8)
    35ca:	46bd      	mov	sp, r7
    35cc:	b004      	add	sp, #16
    35ce:	bd80      	pop	{r7, pc}
    35d0:	00003575 	.word	0x00003575

000035d4 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    35d4:	b580      	push	{r7, lr}
    35d6:	b084      	sub	sp, #16
    35d8:	af00      	add	r7, sp, #0
    35da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    35dc:	687b      	ldr	r3, [r7, #4]
    35de:	681b      	ldr	r3, [r3, #0]
    35e0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    35e2:	46c0      	nop			; (mov r8, r8)
    35e4:	687b      	ldr	r3, [r7, #4]
    35e6:	0018      	movs	r0, r3
    35e8:	4b0a      	ldr	r3, [pc, #40]	; (3614 <rtc_calendar_disable+0x40>)
    35ea:	4798      	blx	r3
    35ec:	1e03      	subs	r3, r0, #0
    35ee:	d1f9      	bne.n	35e4 <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    35f0:	68fb      	ldr	r3, [r7, #12]
    35f2:	22c1      	movs	r2, #193	; 0xc1
    35f4:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    35f6:	68fb      	ldr	r3, [r7, #12]
    35f8:	22c1      	movs	r2, #193	; 0xc1
    35fa:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    35fc:	68fb      	ldr	r3, [r7, #12]
    35fe:	881b      	ldrh	r3, [r3, #0]
    3600:	b29b      	uxth	r3, r3
    3602:	2202      	movs	r2, #2
    3604:	4393      	bics	r3, r2
    3606:	b29a      	uxth	r2, r3
    3608:	68fb      	ldr	r3, [r7, #12]
    360a:	801a      	strh	r2, [r3, #0]
}
    360c:	46c0      	nop			; (mov r8, r8)
    360e:	46bd      	mov	sp, r7
    3610:	b004      	add	sp, #16
    3612:	bd80      	pop	{r7, pc}
    3614:	00003575 	.word	0x00003575

00003618 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    3618:	b580      	push	{r7, lr}
    361a:	b084      	sub	sp, #16
    361c:	af00      	add	r7, sp, #0
    361e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	681b      	ldr	r3, [r3, #0]
    3624:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    3626:	687b      	ldr	r3, [r7, #4]
    3628:	0018      	movs	r0, r3
    362a:	4b0a      	ldr	r3, [pc, #40]	; (3654 <rtc_calendar_reset+0x3c>)
    362c:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    362e:	46c0      	nop			; (mov r8, r8)
    3630:	687b      	ldr	r3, [r7, #4]
    3632:	0018      	movs	r0, r3
    3634:	4b08      	ldr	r3, [pc, #32]	; (3658 <rtc_calendar_reset+0x40>)
    3636:	4798      	blx	r3
    3638:	1e03      	subs	r3, r0, #0
    363a:	d1f9      	bne.n	3630 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    363c:	68fb      	ldr	r3, [r7, #12]
    363e:	881b      	ldrh	r3, [r3, #0]
    3640:	b29b      	uxth	r3, r3
    3642:	2201      	movs	r2, #1
    3644:	4313      	orrs	r3, r2
    3646:	b29a      	uxth	r2, r3
    3648:	68fb      	ldr	r3, [r7, #12]
    364a:	801a      	strh	r2, [r3, #0]
}
    364c:	46c0      	nop			; (mov r8, r8)
    364e:	46bd      	mov	sp, r7
    3650:	b004      	add	sp, #16
    3652:	bd80      	pop	{r7, pc}
    3654:	000035d5 	.word	0x000035d5
    3658:	00003575 	.word	0x00003575

0000365c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    365c:	b580      	push	{r7, lr}
    365e:	b084      	sub	sp, #16
    3660:	af00      	add	r7, sp, #0
    3662:	6078      	str	r0, [r7, #4]
    3664:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    3666:	683b      	ldr	r3, [r7, #0]
    3668:	88db      	ldrh	r3, [r3, #6]
    366a:	001a      	movs	r2, r3
    366c:	687b      	ldr	r3, [r7, #4]
    366e:	88db      	ldrh	r3, [r3, #6]
    3670:	1ad3      	subs	r3, r2, r3
    3672:	069b      	lsls	r3, r3, #26
    3674:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    3676:	683b      	ldr	r3, [r7, #0]
    3678:	795b      	ldrb	r3, [r3, #5]
    367a:	059b      	lsls	r3, r3, #22
    367c:	001a      	movs	r2, r3
    367e:	68fb      	ldr	r3, [r7, #12]
    3680:	4313      	orrs	r3, r2
    3682:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    3684:	683b      	ldr	r3, [r7, #0]
    3686:	791b      	ldrb	r3, [r3, #4]
    3688:	045b      	lsls	r3, r3, #17
    368a:	001a      	movs	r2, r3
    368c:	68fb      	ldr	r3, [r7, #12]
    368e:	4313      	orrs	r3, r2
    3690:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    3692:	683b      	ldr	r3, [r7, #0]
    3694:	789b      	ldrb	r3, [r3, #2]
    3696:	031b      	lsls	r3, r3, #12
    3698:	001a      	movs	r2, r3
    369a:	68fb      	ldr	r3, [r7, #12]
    369c:	4313      	orrs	r3, r2
    369e:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    36a0:	687b      	ldr	r3, [r7, #4]
    36a2:	791b      	ldrb	r3, [r3, #4]
    36a4:	2201      	movs	r2, #1
    36a6:	4053      	eors	r3, r2
    36a8:	b2db      	uxtb	r3, r3
    36aa:	2b00      	cmp	r3, #0
    36ac:	d008      	beq.n	36c0 <rtc_calendar_time_to_register_value+0x64>
    36ae:	683b      	ldr	r3, [r7, #0]
    36b0:	78db      	ldrb	r3, [r3, #3]
    36b2:	2b00      	cmp	r3, #0
    36b4:	d004      	beq.n	36c0 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    36b6:	68fb      	ldr	r3, [r7, #12]
    36b8:	2280      	movs	r2, #128	; 0x80
    36ba:	0252      	lsls	r2, r2, #9
    36bc:	4313      	orrs	r3, r2
    36be:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    36c0:	683b      	ldr	r3, [r7, #0]
    36c2:	785b      	ldrb	r3, [r3, #1]
    36c4:	019b      	lsls	r3, r3, #6
    36c6:	001a      	movs	r2, r3
    36c8:	68fb      	ldr	r3, [r7, #12]
    36ca:	4313      	orrs	r3, r2
    36cc:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    36ce:	683b      	ldr	r3, [r7, #0]
    36d0:	781b      	ldrb	r3, [r3, #0]
    36d2:	001a      	movs	r2, r3
    36d4:	68fb      	ldr	r3, [r7, #12]
    36d6:	4313      	orrs	r3, r2
    36d8:	60fb      	str	r3, [r7, #12]

	return register_value;
    36da:	68fb      	ldr	r3, [r7, #12]
}
    36dc:	0018      	movs	r0, r3
    36de:	46bd      	mov	sp, r7
    36e0:	b004      	add	sp, #16
    36e2:	bd80      	pop	{r7, pc}

000036e4 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    36e4:	b580      	push	{r7, lr}
    36e6:	b084      	sub	sp, #16
    36e8:	af00      	add	r7, sp, #0
    36ea:	60f8      	str	r0, [r7, #12]
    36ec:	60b9      	str	r1, [r7, #8]
    36ee:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    36f0:	68bb      	ldr	r3, [r7, #8]
    36f2:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    36f4:	b29a      	uxth	r2, r3
    36f6:	68fb      	ldr	r3, [r7, #12]
    36f8:	88db      	ldrh	r3, [r3, #6]
    36fa:	18d3      	adds	r3, r2, r3
    36fc:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    36fe:	687b      	ldr	r3, [r7, #4]
    3700:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    3702:	68bb      	ldr	r3, [r7, #8]
    3704:	0d9b      	lsrs	r3, r3, #22
    3706:	b2db      	uxtb	r3, r3
    3708:	220f      	movs	r2, #15
    370a:	4013      	ands	r3, r2
    370c:	b2da      	uxtb	r2, r3
    370e:	687b      	ldr	r3, [r7, #4]
    3710:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    3712:	68bb      	ldr	r3, [r7, #8]
    3714:	0c5b      	lsrs	r3, r3, #17
    3716:	b2db      	uxtb	r3, r3
    3718:	221f      	movs	r2, #31
    371a:	4013      	ands	r3, r2
    371c:	b2da      	uxtb	r2, r3
    371e:	687b      	ldr	r3, [r7, #4]
    3720:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    3722:	68fb      	ldr	r3, [r7, #12]
    3724:	791b      	ldrb	r3, [r3, #4]
    3726:	2b00      	cmp	r3, #0
    3728:	d008      	beq.n	373c <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    372a:	68bb      	ldr	r3, [r7, #8]
    372c:	0b1b      	lsrs	r3, r3, #12
    372e:	b2db      	uxtb	r3, r3
    3730:	221f      	movs	r2, #31
    3732:	4013      	ands	r3, r2
    3734:	b2da      	uxtb	r2, r3
    3736:	687b      	ldr	r3, [r7, #4]
    3738:	709a      	strb	r2, [r3, #2]
    373a:	e010      	b.n	375e <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    373c:	68bb      	ldr	r3, [r7, #8]
    373e:	0b1b      	lsrs	r3, r3, #12
    3740:	b2db      	uxtb	r3, r3
    3742:	220f      	movs	r2, #15
    3744:	4013      	ands	r3, r2
    3746:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    3748:	687b      	ldr	r3, [r7, #4]
    374a:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    374c:	68ba      	ldr	r2, [r7, #8]
    374e:	2380      	movs	r3, #128	; 0x80
    3750:	025b      	lsls	r3, r3, #9
    3752:	4013      	ands	r3, r2
    3754:	1e5a      	subs	r2, r3, #1
    3756:	4193      	sbcs	r3, r2
    3758:	b2da      	uxtb	r2, r3
    375a:	687b      	ldr	r3, [r7, #4]
    375c:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    375e:	68bb      	ldr	r3, [r7, #8]
    3760:	099b      	lsrs	r3, r3, #6
    3762:	b2db      	uxtb	r3, r3
    3764:	223f      	movs	r2, #63	; 0x3f
    3766:	4013      	ands	r3, r2
    3768:	b2da      	uxtb	r2, r3
    376a:	687b      	ldr	r3, [r7, #4]
    376c:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    376e:	68bb      	ldr	r3, [r7, #8]
    3770:	b2db      	uxtb	r3, r3
    3772:	223f      	movs	r2, #63	; 0x3f
    3774:	4013      	ands	r3, r2
    3776:	b2da      	uxtb	r2, r3
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    377c:	46c0      	nop			; (mov r8, r8)
    377e:	46bd      	mov	sp, r7
    3780:	b004      	add	sp, #16
    3782:	bd80      	pop	{r7, pc}

00003784 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    3784:	b580      	push	{r7, lr}
    3786:	b084      	sub	sp, #16
    3788:	af00      	add	r7, sp, #0
    378a:	6078      	str	r0, [r7, #4]
    378c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    378e:	687b      	ldr	r3, [r7, #4]
    3790:	681b      	ldr	r3, [r3, #0]
    3792:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    3794:	683b      	ldr	r3, [r7, #0]
    3796:	881a      	ldrh	r2, [r3, #0]
    3798:	230e      	movs	r3, #14
    379a:	18fb      	adds	r3, r7, r3
    379c:	2108      	movs	r1, #8
    379e:	430a      	orrs	r2, r1
    37a0:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    37a2:	683b      	ldr	r3, [r7, #0]
    37a4:	791b      	ldrb	r3, [r3, #4]
    37a6:	2201      	movs	r2, #1
    37a8:	4053      	eors	r3, r2
    37aa:	b2db      	uxtb	r3, r3
    37ac:	2b00      	cmp	r3, #0
    37ae:	d007      	beq.n	37c0 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    37b0:	230e      	movs	r3, #14
    37b2:	18fb      	adds	r3, r7, r3
    37b4:	220e      	movs	r2, #14
    37b6:	18ba      	adds	r2, r7, r2
    37b8:	8812      	ldrh	r2, [r2, #0]
    37ba:	2140      	movs	r1, #64	; 0x40
    37bc:	430a      	orrs	r2, r1
    37be:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    37c0:	683b      	ldr	r3, [r7, #0]
    37c2:	789b      	ldrb	r3, [r3, #2]
    37c4:	2b00      	cmp	r3, #0
    37c6:	d007      	beq.n	37d8 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    37c8:	230e      	movs	r3, #14
    37ca:	18fb      	adds	r3, r7, r3
    37cc:	220e      	movs	r2, #14
    37ce:	18ba      	adds	r2, r7, r2
    37d0:	8812      	ldrh	r2, [r2, #0]
    37d2:	2180      	movs	r1, #128	; 0x80
    37d4:	430a      	orrs	r2, r1
    37d6:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    37d8:	68bb      	ldr	r3, [r7, #8]
    37da:	220e      	movs	r2, #14
    37dc:	18ba      	adds	r2, r7, r2
    37de:	8812      	ldrh	r2, [r2, #0]
    37e0:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    37e2:	683b      	ldr	r3, [r7, #0]
    37e4:	78db      	ldrb	r3, [r3, #3]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d008      	beq.n	37fc <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    37ea:	68bb      	ldr	r3, [r7, #8]
    37ec:	885b      	ldrh	r3, [r3, #2]
    37ee:	b29b      	uxth	r3, r3
    37f0:	2280      	movs	r2, #128	; 0x80
    37f2:	01d2      	lsls	r2, r2, #7
    37f4:	4313      	orrs	r3, r2
    37f6:	b29a      	uxth	r2, r3
    37f8:	68bb      	ldr	r3, [r7, #8]
    37fa:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    37fc:	230d      	movs	r3, #13
    37fe:	18fb      	adds	r3, r7, r3
    3800:	2200      	movs	r2, #0
    3802:	701a      	strb	r2, [r3, #0]
    3804:	e017      	b.n	3836 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    3806:	230d      	movs	r3, #13
    3808:	18fb      	adds	r3, r7, r3
    380a:	781a      	ldrb	r2, [r3, #0]
    380c:	0013      	movs	r3, r2
    380e:	009b      	lsls	r3, r3, #2
    3810:	189b      	adds	r3, r3, r2
    3812:	005b      	lsls	r3, r3, #1
    3814:	3308      	adds	r3, #8
    3816:	683a      	ldr	r2, [r7, #0]
    3818:	18d1      	adds	r1, r2, r3
    381a:	230d      	movs	r3, #13
    381c:	18fb      	adds	r3, r7, r3
    381e:	781a      	ldrb	r2, [r3, #0]
    3820:	687b      	ldr	r3, [r7, #4]
    3822:	0018      	movs	r0, r3
    3824:	4b08      	ldr	r3, [pc, #32]	; (3848 <_rtc_calendar_set_config+0xc4>)
    3826:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3828:	230d      	movs	r3, #13
    382a:	18fb      	adds	r3, r7, r3
    382c:	781a      	ldrb	r2, [r3, #0]
    382e:	230d      	movs	r3, #13
    3830:	18fb      	adds	r3, r7, r3
    3832:	3201      	adds	r2, #1
    3834:	701a      	strb	r2, [r3, #0]
    3836:	230d      	movs	r3, #13
    3838:	18fb      	adds	r3, r7, r3
    383a:	781b      	ldrb	r3, [r3, #0]
    383c:	2b00      	cmp	r3, #0
    383e:	d0e2      	beq.n	3806 <_rtc_calendar_set_config+0x82>
	}
}
    3840:	46c0      	nop			; (mov r8, r8)
    3842:	46bd      	mov	sp, r7
    3844:	b004      	add	sp, #16
    3846:	bd80      	pop	{r7, pc}
    3848:	0000396d 	.word	0x0000396d

0000384c <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    384c:	b580      	push	{r7, lr}
    384e:	b086      	sub	sp, #24
    3850:	af00      	add	r7, sp, #0
    3852:	60f8      	str	r0, [r7, #12]
    3854:	60b9      	str	r1, [r7, #8]
    3856:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3858:	68fb      	ldr	r3, [r7, #12]
    385a:	68ba      	ldr	r2, [r7, #8]
    385c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    385e:	2120      	movs	r1, #32
    3860:	2000      	movs	r0, #0
    3862:	4b18      	ldr	r3, [pc, #96]	; (38c4 <rtc_calendar_init+0x78>)
    3864:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3866:	2314      	movs	r3, #20
    3868:	18fb      	adds	r3, r7, r3
    386a:	0018      	movs	r0, r3
    386c:	4b16      	ldr	r3, [pc, #88]	; (38c8 <rtc_calendar_init+0x7c>)
    386e:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    3870:	2314      	movs	r3, #20
    3872:	18fb      	adds	r3, r7, r3
    3874:	2202      	movs	r2, #2
    3876:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    3878:	2314      	movs	r3, #20
    387a:	18fb      	adds	r3, r7, r3
    387c:	0019      	movs	r1, r3
    387e:	2004      	movs	r0, #4
    3880:	4b12      	ldr	r3, [pc, #72]	; (38cc <rtc_calendar_init+0x80>)
    3882:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    3884:	2004      	movs	r0, #4
    3886:	4b12      	ldr	r3, [pc, #72]	; (38d0 <rtc_calendar_init+0x84>)
    3888:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    388a:	68fb      	ldr	r3, [r7, #12]
    388c:	0018      	movs	r0, r3
    388e:	4b11      	ldr	r3, [pc, #68]	; (38d4 <rtc_calendar_init+0x88>)
    3890:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    3892:	687b      	ldr	r3, [r7, #4]
    3894:	791a      	ldrb	r2, [r3, #4]
    3896:	68fb      	ldr	r3, [r7, #12]
    3898:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	78da      	ldrb	r2, [r3, #3]
    389e:	68fb      	ldr	r3, [r7, #12]
    38a0:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    38a2:	687b      	ldr	r3, [r7, #4]
    38a4:	88da      	ldrh	r2, [r3, #6]
    38a6:	68fb      	ldr	r3, [r7, #12]
    38a8:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    38aa:	4b0b      	ldr	r3, [pc, #44]	; (38d8 <rtc_calendar_init+0x8c>)
    38ac:	68fa      	ldr	r2, [r7, #12]
    38ae:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    38b0:	687a      	ldr	r2, [r7, #4]
    38b2:	68fb      	ldr	r3, [r7, #12]
    38b4:	0011      	movs	r1, r2
    38b6:	0018      	movs	r0, r3
    38b8:	4b08      	ldr	r3, [pc, #32]	; (38dc <rtc_calendar_init+0x90>)
    38ba:	4798      	blx	r3
}
    38bc:	46c0      	nop			; (mov r8, r8)
    38be:	46bd      	mov	sp, r7
    38c0:	b006      	add	sp, #24
    38c2:	bd80      	pop	{r7, pc}
    38c4:	00003519 	.word	0x00003519
    38c8:	00003501 	.word	0x00003501
    38cc:	00006a71 	.word	0x00006a71
    38d0:	00006ab5 	.word	0x00006ab5
    38d4:	00003619 	.word	0x00003619
    38d8:	20000a00 	.word	0x20000a00
    38dc:	00003785 	.word	0x00003785

000038e0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    38e0:	b580      	push	{r7, lr}
    38e2:	b084      	sub	sp, #16
    38e4:	af00      	add	r7, sp, #0
    38e6:	6078      	str	r0, [r7, #4]
    38e8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	681b      	ldr	r3, [r3, #0]
    38ee:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    38f0:	687b      	ldr	r3, [r7, #4]
    38f2:	795b      	ldrb	r3, [r3, #5]
    38f4:	2201      	movs	r2, #1
    38f6:	4053      	eors	r3, r2
    38f8:	b2db      	uxtb	r3, r3
    38fa:	2b00      	cmp	r3, #0
    38fc:	d00a      	beq.n	3914 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    38fe:	68fb      	ldr	r3, [r7, #12]
    3900:	4a16      	ldr	r2, [pc, #88]	; (395c <rtc_calendar_get_time+0x7c>)
    3902:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    3904:	46c0      	nop			; (mov r8, r8)
    3906:	687b      	ldr	r3, [r7, #4]
    3908:	0018      	movs	r0, r3
    390a:	4b15      	ldr	r3, [pc, #84]	; (3960 <rtc_calendar_get_time+0x80>)
    390c:	4798      	blx	r3
    390e:	1e03      	subs	r3, r0, #0
    3910:	d1f9      	bne.n	3906 <rtc_calendar_get_time+0x26>
    3912:	e016      	b.n	3942 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    3914:	68fb      	ldr	r3, [r7, #12]
    3916:	885b      	ldrh	r3, [r3, #2]
    3918:	b29b      	uxth	r3, r3
    391a:	001a      	movs	r2, r3
    391c:	2380      	movs	r3, #128	; 0x80
    391e:	01db      	lsls	r3, r3, #7
    3920:	4013      	ands	r3, r2
    3922:	d10e      	bne.n	3942 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    3924:	68fb      	ldr	r3, [r7, #12]
    3926:	885b      	ldrh	r3, [r3, #2]
    3928:	b29b      	uxth	r3, r3
    392a:	4a0e      	ldr	r2, [pc, #56]	; (3964 <rtc_calendar_get_time+0x84>)
    392c:	4313      	orrs	r3, r2
    392e:	b29a      	uxth	r2, r3
    3930:	68fb      	ldr	r3, [r7, #12]
    3932:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    3934:	46c0      	nop			; (mov r8, r8)
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	0018      	movs	r0, r3
    393a:	4b09      	ldr	r3, [pc, #36]	; (3960 <rtc_calendar_get_time+0x80>)
    393c:	4798      	blx	r3
    393e:	1e03      	subs	r3, r0, #0
    3940:	d1f9      	bne.n	3936 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    3942:	68fb      	ldr	r3, [r7, #12]
    3944:	691b      	ldr	r3, [r3, #16]
    3946:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    3948:	683a      	ldr	r2, [r7, #0]
    394a:	68b9      	ldr	r1, [r7, #8]
    394c:	687b      	ldr	r3, [r7, #4]
    394e:	0018      	movs	r0, r3
    3950:	4b05      	ldr	r3, [pc, #20]	; (3968 <rtc_calendar_get_time+0x88>)
    3952:	4798      	blx	r3
}
    3954:	46c0      	nop			; (mov r8, r8)
    3956:	46bd      	mov	sp, r7
    3958:	b004      	add	sp, #16
    395a:	bd80      	pop	{r7, pc}
    395c:	ffff8000 	.word	0xffff8000
    3960:	00003575 	.word	0x00003575
    3964:	ffffc000 	.word	0xffffc000
    3968:	000036e5 	.word	0x000036e5

0000396c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    396c:	b580      	push	{r7, lr}
    396e:	b086      	sub	sp, #24
    3970:	af00      	add	r7, sp, #0
    3972:	60f8      	str	r0, [r7, #12]
    3974:	60b9      	str	r1, [r7, #8]
    3976:	1dfb      	adds	r3, r7, #7
    3978:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    397a:	68fb      	ldr	r3, [r7, #12]
    397c:	681b      	ldr	r3, [r3, #0]
    397e:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    3980:	1dfb      	adds	r3, r7, #7
    3982:	781b      	ldrb	r3, [r3, #0]
    3984:	2b01      	cmp	r3, #1
    3986:	d901      	bls.n	398c <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    3988:	2317      	movs	r3, #23
    398a:	e021      	b.n	39d0 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    398c:	68ba      	ldr	r2, [r7, #8]
    398e:	68fb      	ldr	r3, [r7, #12]
    3990:	0011      	movs	r1, r2
    3992:	0018      	movs	r0, r3
    3994:	4b10      	ldr	r3, [pc, #64]	; (39d8 <rtc_calendar_set_alarm+0x6c>)
    3996:	4798      	blx	r3
    3998:	0003      	movs	r3, r0
    399a:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    399c:	46c0      	nop			; (mov r8, r8)
    399e:	68fb      	ldr	r3, [r7, #12]
    39a0:	0018      	movs	r0, r3
    39a2:	4b0e      	ldr	r3, [pc, #56]	; (39dc <rtc_calendar_set_alarm+0x70>)
    39a4:	4798      	blx	r3
    39a6:	1e03      	subs	r3, r0, #0
    39a8:	d1f9      	bne.n	399e <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    39aa:	1dfb      	adds	r3, r7, #7
    39ac:	781a      	ldrb	r2, [r3, #0]
    39ae:	697b      	ldr	r3, [r7, #20]
    39b0:	3203      	adds	r2, #3
    39b2:	00d2      	lsls	r2, r2, #3
    39b4:	6939      	ldr	r1, [r7, #16]
    39b6:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    39b8:	1dfb      	adds	r3, r7, #7
    39ba:	781b      	ldrb	r3, [r3, #0]
    39bc:	68ba      	ldr	r2, [r7, #8]
    39be:	7a11      	ldrb	r1, [r2, #8]
    39c0:	697a      	ldr	r2, [r7, #20]
    39c2:	3303      	adds	r3, #3
    39c4:	00db      	lsls	r3, r3, #3
    39c6:	18d3      	adds	r3, r2, r3
    39c8:	3304      	adds	r3, #4
    39ca:	1c0a      	adds	r2, r1, #0
    39cc:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    39ce:	2300      	movs	r3, #0
}
    39d0:	0018      	movs	r0, r3
    39d2:	46bd      	mov	sp, r7
    39d4:	b006      	add	sp, #24
    39d6:	bd80      	pop	{r7, pc}
    39d8:	0000365d 	.word	0x0000365d
    39dc:	00003575 	.word	0x00003575

000039e0 <system_gclk_chan_get_config_defaults>:
{
    39e0:	b580      	push	{r7, lr}
    39e2:	b082      	sub	sp, #8
    39e4:	af00      	add	r7, sp, #0
    39e6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    39e8:	687b      	ldr	r3, [r7, #4]
    39ea:	2200      	movs	r2, #0
    39ec:	701a      	strb	r2, [r3, #0]
}
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	46bd      	mov	sp, r7
    39f2:	b002      	add	sp, #8
    39f4:	bd80      	pop	{r7, pc}

000039f6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    39f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    39f8:	b08d      	sub	sp, #52	; 0x34
    39fa:	af00      	add	r7, sp, #0
    39fc:	60b8      	str	r0, [r7, #8]
    39fe:	60f9      	str	r1, [r7, #12]
    3a00:	603a      	str	r2, [r7, #0]
    3a02:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3a04:	2300      	movs	r3, #0
    3a06:	2400      	movs	r4, #0
    3a08:	623b      	str	r3, [r7, #32]
    3a0a:	627c      	str	r4, [r7, #36]	; 0x24
    3a0c:	2300      	movs	r3, #0
    3a0e:	2400      	movs	r4, #0
    3a10:	61bb      	str	r3, [r7, #24]
    3a12:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    3a14:	233f      	movs	r3, #63	; 0x3f
    3a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    3a18:	e053      	b.n	3ac2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    3a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a1c:	3b20      	subs	r3, #32
    3a1e:	2b00      	cmp	r3, #0
    3a20:	db04      	blt.n	3a2c <long_division+0x36>
    3a22:	2201      	movs	r2, #1
    3a24:	409a      	lsls	r2, r3
    3a26:	0013      	movs	r3, r2
    3a28:	617b      	str	r3, [r7, #20]
    3a2a:	e00b      	b.n	3a44 <long_division+0x4e>
    3a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a2e:	2220      	movs	r2, #32
    3a30:	1ad3      	subs	r3, r2, r3
    3a32:	2201      	movs	r2, #1
    3a34:	40da      	lsrs	r2, r3
    3a36:	0013      	movs	r3, r2
    3a38:	2100      	movs	r1, #0
    3a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3a3c:	4091      	lsls	r1, r2
    3a3e:	000a      	movs	r2, r1
    3a40:	4313      	orrs	r3, r2
    3a42:	617b      	str	r3, [r7, #20]
    3a44:	2201      	movs	r2, #1
    3a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a48:	409a      	lsls	r2, r3
    3a4a:	0013      	movs	r3, r2
    3a4c:	613b      	str	r3, [r7, #16]

		r = r << 1;
    3a4e:	69bb      	ldr	r3, [r7, #24]
    3a50:	69fc      	ldr	r4, [r7, #28]
    3a52:	18db      	adds	r3, r3, r3
    3a54:	4164      	adcs	r4, r4
    3a56:	61bb      	str	r3, [r7, #24]
    3a58:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    3a5a:	68bb      	ldr	r3, [r7, #8]
    3a5c:	693a      	ldr	r2, [r7, #16]
    3a5e:	401a      	ands	r2, r3
    3a60:	0015      	movs	r5, r2
    3a62:	68fb      	ldr	r3, [r7, #12]
    3a64:	697a      	ldr	r2, [r7, #20]
    3a66:	401a      	ands	r2, r3
    3a68:	0016      	movs	r6, r2
    3a6a:	002b      	movs	r3, r5
    3a6c:	4333      	orrs	r3, r6
    3a6e:	d007      	beq.n	3a80 <long_division+0x8a>
			r |= 0x01;
    3a70:	69bb      	ldr	r3, [r7, #24]
    3a72:	2201      	movs	r2, #1
    3a74:	4313      	orrs	r3, r2
    3a76:	61bb      	str	r3, [r7, #24]
    3a78:	69fb      	ldr	r3, [r7, #28]
    3a7a:	2200      	movs	r2, #0
    3a7c:	4313      	orrs	r3, r2
    3a7e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3a80:	687a      	ldr	r2, [r7, #4]
    3a82:	69fb      	ldr	r3, [r7, #28]
    3a84:	429a      	cmp	r2, r3
    3a86:	d819      	bhi.n	3abc <long_division+0xc6>
    3a88:	687a      	ldr	r2, [r7, #4]
    3a8a:	69fb      	ldr	r3, [r7, #28]
    3a8c:	429a      	cmp	r2, r3
    3a8e:	d103      	bne.n	3a98 <long_division+0xa2>
    3a90:	683a      	ldr	r2, [r7, #0]
    3a92:	69bb      	ldr	r3, [r7, #24]
    3a94:	429a      	cmp	r2, r3
    3a96:	d811      	bhi.n	3abc <long_division+0xc6>
			r = r - d;
    3a98:	69b9      	ldr	r1, [r7, #24]
    3a9a:	69fa      	ldr	r2, [r7, #28]
    3a9c:	683b      	ldr	r3, [r7, #0]
    3a9e:	687c      	ldr	r4, [r7, #4]
    3aa0:	1ac9      	subs	r1, r1, r3
    3aa2:	41a2      	sbcs	r2, r4
    3aa4:	000b      	movs	r3, r1
    3aa6:	0014      	movs	r4, r2
    3aa8:	61bb      	str	r3, [r7, #24]
    3aaa:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3aac:	6a3a      	ldr	r2, [r7, #32]
    3aae:	693b      	ldr	r3, [r7, #16]
    3ab0:	4313      	orrs	r3, r2
    3ab2:	623b      	str	r3, [r7, #32]
    3ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3ab6:	697b      	ldr	r3, [r7, #20]
    3ab8:	4313      	orrs	r3, r2
    3aba:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3abe:	3b01      	subs	r3, #1
    3ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    3ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	daa8      	bge.n	3a1a <long_division+0x24>
		}
	}

	return q;
    3ac8:	6a3b      	ldr	r3, [r7, #32]
    3aca:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3acc:	0018      	movs	r0, r3
    3ace:	0021      	movs	r1, r4
    3ad0:	46bd      	mov	sp, r7
    3ad2:	b00d      	add	sp, #52	; 0x34
    3ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003ad6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3ad6:	b580      	push	{r7, lr}
    3ad8:	b086      	sub	sp, #24
    3ada:	af00      	add	r7, sp, #0
    3adc:	60f8      	str	r0, [r7, #12]
    3ade:	60b9      	str	r1, [r7, #8]
    3ae0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3ae2:	2316      	movs	r3, #22
    3ae4:	18fb      	adds	r3, r7, r3
    3ae6:	2200      	movs	r2, #0
    3ae8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3aea:	68bb      	ldr	r3, [r7, #8]
    3aec:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3aee:	68bb      	ldr	r3, [r7, #8]
    3af0:	085a      	lsrs	r2, r3, #1
    3af2:	68fb      	ldr	r3, [r7, #12]
    3af4:	429a      	cmp	r2, r3
    3af6:	d201      	bcs.n	3afc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3af8:	2340      	movs	r3, #64	; 0x40
    3afa:	e026      	b.n	3b4a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3afc:	68bb      	ldr	r3, [r7, #8]
    3afe:	085b      	lsrs	r3, r3, #1
    3b00:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3b02:	e00a      	b.n	3b1a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3b04:	693a      	ldr	r2, [r7, #16]
    3b06:	68fb      	ldr	r3, [r7, #12]
    3b08:	1ad3      	subs	r3, r2, r3
    3b0a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3b0c:	2316      	movs	r3, #22
    3b0e:	18fb      	adds	r3, r7, r3
    3b10:	881a      	ldrh	r2, [r3, #0]
    3b12:	2316      	movs	r3, #22
    3b14:	18fb      	adds	r3, r7, r3
    3b16:	3201      	adds	r2, #1
    3b18:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    3b1a:	693a      	ldr	r2, [r7, #16]
    3b1c:	68fb      	ldr	r3, [r7, #12]
    3b1e:	429a      	cmp	r2, r3
    3b20:	d2f0      	bcs.n	3b04 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    3b22:	2316      	movs	r3, #22
    3b24:	18fb      	adds	r3, r7, r3
    3b26:	2216      	movs	r2, #22
    3b28:	18ba      	adds	r2, r7, r2
    3b2a:	8812      	ldrh	r2, [r2, #0]
    3b2c:	3a01      	subs	r2, #1
    3b2e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3b30:	2316      	movs	r3, #22
    3b32:	18fb      	adds	r3, r7, r3
    3b34:	881b      	ldrh	r3, [r3, #0]
    3b36:	2bff      	cmp	r3, #255	; 0xff
    3b38:	d901      	bls.n	3b3e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b3a:	2340      	movs	r3, #64	; 0x40
    3b3c:	e005      	b.n	3b4a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3b3e:	687b      	ldr	r3, [r7, #4]
    3b40:	2216      	movs	r2, #22
    3b42:	18ba      	adds	r2, r7, r2
    3b44:	8812      	ldrh	r2, [r2, #0]
    3b46:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3b48:	2300      	movs	r3, #0
	}
}
    3b4a:	0018      	movs	r0, r3
    3b4c:	46bd      	mov	sp, r7
    3b4e:	b006      	add	sp, #24
    3b50:	bd80      	pop	{r7, pc}
	...

00003b54 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b56:	b0a1      	sub	sp, #132	; 0x84
    3b58:	af00      	add	r7, sp, #0
    3b5a:	64f8      	str	r0, [r7, #76]	; 0x4c
    3b5c:	64b9      	str	r1, [r7, #72]	; 0x48
    3b5e:	647a      	str	r2, [r7, #68]	; 0x44
    3b60:	2243      	movs	r2, #67	; 0x43
    3b62:	18ba      	adds	r2, r7, r2
    3b64:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    3b66:	2300      	movs	r3, #0
    3b68:	2400      	movs	r4, #0
    3b6a:	673b      	str	r3, [r7, #112]	; 0x70
    3b6c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3b6e:	2300      	movs	r3, #0
    3b70:	2400      	movs	r4, #0
    3b72:	66bb      	str	r3, [r7, #104]	; 0x68
    3b74:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    3b76:	2300      	movs	r3, #0
    3b78:	2400      	movs	r4, #0
    3b7a:	67bb      	str	r3, [r7, #120]	; 0x78
    3b7c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3b7e:	2300      	movs	r3, #0
    3b80:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3b82:	2358      	movs	r3, #88	; 0x58
    3b84:	2240      	movs	r2, #64	; 0x40
    3b86:	4694      	mov	ip, r2
    3b88:	44bc      	add	ip, r7
    3b8a:	4463      	add	r3, ip
    3b8c:	781a      	ldrb	r2, [r3, #0]
    3b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3b90:	435a      	muls	r2, r3
    3b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b94:	429a      	cmp	r2, r3
    3b96:	d901      	bls.n	3b9c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b98:	2340      	movs	r3, #64	; 0x40
    3b9a:	e0b3      	b.n	3d04 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3b9c:	2343      	movs	r3, #67	; 0x43
    3b9e:	18fb      	adds	r3, r7, r3
    3ba0:	781b      	ldrb	r3, [r3, #0]
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d13d      	bne.n	3c22 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3ba6:	2358      	movs	r3, #88	; 0x58
    3ba8:	2240      	movs	r2, #64	; 0x40
    3baa:	4694      	mov	ip, r2
    3bac:	44bc      	add	ip, r7
    3bae:	4463      	add	r3, ip
    3bb0:	781b      	ldrb	r3, [r3, #0]
    3bb2:	b2db      	uxtb	r3, r3
    3bb4:	613b      	str	r3, [r7, #16]
    3bb6:	2300      	movs	r3, #0
    3bb8:	617b      	str	r3, [r7, #20]
    3bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3bbc:	60bb      	str	r3, [r7, #8]
    3bbe:	2300      	movs	r3, #0
    3bc0:	60fb      	str	r3, [r7, #12]
    3bc2:	4c52      	ldr	r4, [pc, #328]	; (3d0c <_sercom_get_async_baud_val+0x1b8>)
    3bc4:	68ba      	ldr	r2, [r7, #8]
    3bc6:	68fb      	ldr	r3, [r7, #12]
    3bc8:	6938      	ldr	r0, [r7, #16]
    3bca:	6979      	ldr	r1, [r7, #20]
    3bcc:	47a0      	blx	r4
    3bce:	0003      	movs	r3, r0
    3bd0:	000c      	movs	r4, r1
    3bd2:	001b      	movs	r3, r3
    3bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
    3bd6:	2300      	movs	r3, #0
    3bd8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    3bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3bdc:	603b      	str	r3, [r7, #0]
    3bde:	2300      	movs	r3, #0
    3be0:	607b      	str	r3, [r7, #4]
    3be2:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3be4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3be6:	683a      	ldr	r2, [r7, #0]
    3be8:	687b      	ldr	r3, [r7, #4]
    3bea:	4c49      	ldr	r4, [pc, #292]	; (3d10 <_sercom_get_async_baud_val+0x1bc>)
    3bec:	47a0      	blx	r4
    3bee:	0003      	movs	r3, r0
    3bf0:	000c      	movs	r4, r1
    3bf2:	673b      	str	r3, [r7, #112]	; 0x70
    3bf4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3bf6:	2100      	movs	r1, #0
    3bf8:	2201      	movs	r2, #1
    3bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3bfc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3bfe:	1ac9      	subs	r1, r1, r3
    3c00:	41a2      	sbcs	r2, r4
    3c02:	000b      	movs	r3, r1
    3c04:	0014      	movs	r4, r2
    3c06:	66bb      	str	r3, [r7, #104]	; 0x68
    3c08:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    3c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3c0c:	0c1b      	lsrs	r3, r3, #16
    3c0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3c10:	0416      	lsls	r6, r2, #16
    3c12:	431e      	orrs	r6, r3
    3c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3c16:	041d      	lsls	r5, r3, #16
    3c18:	0033      	movs	r3, r6
    3c1a:	67bb      	str	r3, [r7, #120]	; 0x78
    3c1c:	2300      	movs	r3, #0
    3c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    3c20:	e06a      	b.n	3cf8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3c22:	2343      	movs	r3, #67	; 0x43
    3c24:	18fb      	adds	r3, r7, r3
    3c26:	781b      	ldrb	r3, [r3, #0]
    3c28:	2b01      	cmp	r3, #1
    3c2a:	d165      	bne.n	3cf8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    3c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c2e:	633b      	str	r3, [r7, #48]	; 0x30
    3c30:	2300      	movs	r3, #0
    3c32:	637b      	str	r3, [r7, #52]	; 0x34
    3c34:	2358      	movs	r3, #88	; 0x58
    3c36:	2240      	movs	r2, #64	; 0x40
    3c38:	4694      	mov	ip, r2
    3c3a:	44bc      	add	ip, r7
    3c3c:	4463      	add	r3, ip
    3c3e:	781b      	ldrb	r3, [r3, #0]
    3c40:	b2db      	uxtb	r3, r3
    3c42:	62bb      	str	r3, [r7, #40]	; 0x28
    3c44:	2300      	movs	r3, #0
    3c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    3c48:	4c30      	ldr	r4, [pc, #192]	; (3d0c <_sercom_get_async_baud_val+0x1b8>)
    3c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3c4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3c50:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c52:	47a0      	blx	r4
    3c54:	0003      	movs	r3, r0
    3c56:	000c      	movs	r4, r1
    3c58:	65bb      	str	r3, [r7, #88]	; 0x58
    3c5a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    3c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c5e:	623b      	str	r3, [r7, #32]
    3c60:	2300      	movs	r3, #0
    3c62:	627b      	str	r3, [r7, #36]	; 0x24
    3c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3c66:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3c68:	001a      	movs	r2, r3
    3c6a:	0023      	movs	r3, r4
    3c6c:	6a38      	ldr	r0, [r7, #32]
    3c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3c70:	4c27      	ldr	r4, [pc, #156]	; (3d10 <_sercom_get_async_baud_val+0x1bc>)
    3c72:	47a0      	blx	r4
    3c74:	0003      	movs	r3, r0
    3c76:	000c      	movs	r4, r1
    3c78:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3c7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3c7c:	2380      	movs	r3, #128	; 0x80
    3c7e:	019b      	lsls	r3, r3, #6
    3c80:	429a      	cmp	r2, r3
    3c82:	d901      	bls.n	3c88 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3c84:	2340      	movs	r3, #64	; 0x40
    3c86:	e03d      	b.n	3d04 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c8a:	61bb      	str	r3, [r7, #24]
    3c8c:	2300      	movs	r3, #0
    3c8e:	61fb      	str	r3, [r7, #28]
    3c90:	69b9      	ldr	r1, [r7, #24]
    3c92:	69fa      	ldr	r2, [r7, #28]
    3c94:	000b      	movs	r3, r1
    3c96:	0f5b      	lsrs	r3, r3, #29
    3c98:	0010      	movs	r0, r2
    3c9a:	00c0      	lsls	r0, r0, #3
    3c9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    3c9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3ca0:	4318      	orrs	r0, r3
    3ca2:	63f8      	str	r0, [r7, #60]	; 0x3c
    3ca4:	000b      	movs	r3, r1
    3ca6:	00db      	lsls	r3, r3, #3
    3ca8:	63bb      	str	r3, [r7, #56]	; 0x38
    3caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3cac:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3cae:	001a      	movs	r2, r3
    3cb0:	0023      	movs	r3, r4
    3cb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3cb6:	4c16      	ldr	r4, [pc, #88]	; (3d10 <_sercom_get_async_baud_val+0x1bc>)
    3cb8:	47a0      	blx	r4
    3cba:	0003      	movs	r3, r0
    3cbc:	000c      	movs	r4, r1
    3cbe:	65bb      	str	r3, [r7, #88]	; 0x58
    3cc0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3cc4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3cc6:	b2d9      	uxtb	r1, r3
    3cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3cca:	b2db      	uxtb	r3, r3
    3ccc:	00db      	lsls	r3, r3, #3
    3cce:	b2da      	uxtb	r2, r3
    3cd0:	2317      	movs	r3, #23
    3cd2:	2040      	movs	r0, #64	; 0x40
    3cd4:	4684      	mov	ip, r0
    3cd6:	44bc      	add	ip, r7
    3cd8:	4463      	add	r3, ip
    3cda:	1a8a      	subs	r2, r1, r2
    3cdc:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3cde:	2317      	movs	r3, #23
    3ce0:	2240      	movs	r2, #64	; 0x40
    3ce2:	4694      	mov	ip, r2
    3ce4:	44bc      	add	ip, r7
    3ce6:	4463      	add	r3, ip
    3ce8:	781b      	ldrb	r3, [r3, #0]
    3cea:	035b      	lsls	r3, r3, #13
    3cec:	001a      	movs	r2, r3
    3cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3cf0:	4313      	orrs	r3, r2
    3cf2:	67bb      	str	r3, [r7, #120]	; 0x78
    3cf4:	2300      	movs	r3, #0
    3cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3cf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3cfa:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3cfc:	b29a      	uxth	r2, r3
    3cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3d00:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3d02:	2300      	movs	r3, #0
}
    3d04:	0018      	movs	r0, r3
    3d06:	46bd      	mov	sp, r7
    3d08:	b021      	add	sp, #132	; 0x84
    3d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d0c:	0000b7b1 	.word	0x0000b7b1
    3d10:	000039f7 	.word	0x000039f7

00003d14 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3d14:	b580      	push	{r7, lr}
    3d16:	b084      	sub	sp, #16
    3d18:	af00      	add	r7, sp, #0
    3d1a:	0002      	movs	r2, r0
    3d1c:	1dfb      	adds	r3, r7, #7
    3d1e:	701a      	strb	r2, [r3, #0]
    3d20:	1dbb      	adds	r3, r7, #6
    3d22:	1c0a      	adds	r2, r1, #0
    3d24:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3d26:	4b1a      	ldr	r3, [pc, #104]	; (3d90 <sercom_set_gclk_generator+0x7c>)
    3d28:	781b      	ldrb	r3, [r3, #0]
    3d2a:	2201      	movs	r2, #1
    3d2c:	4053      	eors	r3, r2
    3d2e:	b2db      	uxtb	r3, r3
    3d30:	2b00      	cmp	r3, #0
    3d32:	d103      	bne.n	3d3c <sercom_set_gclk_generator+0x28>
    3d34:	1dbb      	adds	r3, r7, #6
    3d36:	781b      	ldrb	r3, [r3, #0]
    3d38:	2b00      	cmp	r3, #0
    3d3a:	d01b      	beq.n	3d74 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3d3c:	230c      	movs	r3, #12
    3d3e:	18fb      	adds	r3, r7, r3
    3d40:	0018      	movs	r0, r3
    3d42:	4b14      	ldr	r3, [pc, #80]	; (3d94 <sercom_set_gclk_generator+0x80>)
    3d44:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3d46:	230c      	movs	r3, #12
    3d48:	18fb      	adds	r3, r7, r3
    3d4a:	1dfa      	adds	r2, r7, #7
    3d4c:	7812      	ldrb	r2, [r2, #0]
    3d4e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3d50:	230c      	movs	r3, #12
    3d52:	18fb      	adds	r3, r7, r3
    3d54:	0019      	movs	r1, r3
    3d56:	2013      	movs	r0, #19
    3d58:	4b0f      	ldr	r3, [pc, #60]	; (3d98 <sercom_set_gclk_generator+0x84>)
    3d5a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3d5c:	2013      	movs	r0, #19
    3d5e:	4b0f      	ldr	r3, [pc, #60]	; (3d9c <sercom_set_gclk_generator+0x88>)
    3d60:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3d62:	4b0b      	ldr	r3, [pc, #44]	; (3d90 <sercom_set_gclk_generator+0x7c>)
    3d64:	1dfa      	adds	r2, r7, #7
    3d66:	7812      	ldrb	r2, [r2, #0]
    3d68:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3d6a:	4b09      	ldr	r3, [pc, #36]	; (3d90 <sercom_set_gclk_generator+0x7c>)
    3d6c:	2201      	movs	r2, #1
    3d6e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3d70:	2300      	movs	r3, #0
    3d72:	e008      	b.n	3d86 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3d74:	4b06      	ldr	r3, [pc, #24]	; (3d90 <sercom_set_gclk_generator+0x7c>)
    3d76:	785b      	ldrb	r3, [r3, #1]
    3d78:	1dfa      	adds	r2, r7, #7
    3d7a:	7812      	ldrb	r2, [r2, #0]
    3d7c:	429a      	cmp	r2, r3
    3d7e:	d101      	bne.n	3d84 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3d80:	2300      	movs	r3, #0
    3d82:	e000      	b.n	3d86 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3d84:	231d      	movs	r3, #29
}
    3d86:	0018      	movs	r0, r3
    3d88:	46bd      	mov	sp, r7
    3d8a:	b004      	add	sp, #16
    3d8c:	bd80      	pop	{r7, pc}
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	20000174 	.word	0x20000174
    3d94:	000039e1 	.word	0x000039e1
    3d98:	00006a71 	.word	0x00006a71
    3d9c:	00006ab5 	.word	0x00006ab5

00003da0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3da0:	b580      	push	{r7, lr}
    3da2:	b082      	sub	sp, #8
    3da4:	af00      	add	r7, sp, #0
    3da6:	6078      	str	r0, [r7, #4]
    3da8:	000a      	movs	r2, r1
    3daa:	1cfb      	adds	r3, r7, #3
    3dac:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3dae:	687b      	ldr	r3, [r7, #4]
    3db0:	4a4d      	ldr	r2, [pc, #308]	; (3ee8 <_sercom_get_default_pad+0x148>)
    3db2:	4293      	cmp	r3, r2
    3db4:	d03f      	beq.n	3e36 <_sercom_get_default_pad+0x96>
    3db6:	4a4c      	ldr	r2, [pc, #304]	; (3ee8 <_sercom_get_default_pad+0x148>)
    3db8:	4293      	cmp	r3, r2
    3dba:	d806      	bhi.n	3dca <_sercom_get_default_pad+0x2a>
    3dbc:	4a4b      	ldr	r2, [pc, #300]	; (3eec <_sercom_get_default_pad+0x14c>)
    3dbe:	4293      	cmp	r3, r2
    3dc0:	d00f      	beq.n	3de2 <_sercom_get_default_pad+0x42>
    3dc2:	4a4b      	ldr	r2, [pc, #300]	; (3ef0 <_sercom_get_default_pad+0x150>)
    3dc4:	4293      	cmp	r3, r2
    3dc6:	d021      	beq.n	3e0c <_sercom_get_default_pad+0x6c>
    3dc8:	e089      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3dca:	4a4a      	ldr	r2, [pc, #296]	; (3ef4 <_sercom_get_default_pad+0x154>)
    3dcc:	4293      	cmp	r3, r2
    3dce:	d100      	bne.n	3dd2 <_sercom_get_default_pad+0x32>
    3dd0:	e05b      	b.n	3e8a <_sercom_get_default_pad+0xea>
    3dd2:	4a49      	ldr	r2, [pc, #292]	; (3ef8 <_sercom_get_default_pad+0x158>)
    3dd4:	4293      	cmp	r3, r2
    3dd6:	d100      	bne.n	3dda <_sercom_get_default_pad+0x3a>
    3dd8:	e06c      	b.n	3eb4 <_sercom_get_default_pad+0x114>
    3dda:	4a48      	ldr	r2, [pc, #288]	; (3efc <_sercom_get_default_pad+0x15c>)
    3ddc:	4293      	cmp	r3, r2
    3dde:	d03f      	beq.n	3e60 <_sercom_get_default_pad+0xc0>
    3de0:	e07d      	b.n	3ede <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3de2:	1cfb      	adds	r3, r7, #3
    3de4:	781b      	ldrb	r3, [r3, #0]
    3de6:	2b01      	cmp	r3, #1
    3de8:	d00a      	beq.n	3e00 <_sercom_get_default_pad+0x60>
    3dea:	dc02      	bgt.n	3df2 <_sercom_get_default_pad+0x52>
    3dec:	2b00      	cmp	r3, #0
    3dee:	d005      	beq.n	3dfc <_sercom_get_default_pad+0x5c>
    3df0:	e075      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3df2:	2b02      	cmp	r3, #2
    3df4:	d006      	beq.n	3e04 <_sercom_get_default_pad+0x64>
    3df6:	2b03      	cmp	r3, #3
    3df8:	d006      	beq.n	3e08 <_sercom_get_default_pad+0x68>
    3dfa:	e070      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3dfc:	4b40      	ldr	r3, [pc, #256]	; (3f00 <_sercom_get_default_pad+0x160>)
    3dfe:	e06f      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e00:	4b40      	ldr	r3, [pc, #256]	; (3f04 <_sercom_get_default_pad+0x164>)
    3e02:	e06d      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e04:	4b40      	ldr	r3, [pc, #256]	; (3f08 <_sercom_get_default_pad+0x168>)
    3e06:	e06b      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e08:	4b40      	ldr	r3, [pc, #256]	; (3f0c <_sercom_get_default_pad+0x16c>)
    3e0a:	e069      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e0c:	1cfb      	adds	r3, r7, #3
    3e0e:	781b      	ldrb	r3, [r3, #0]
    3e10:	2b01      	cmp	r3, #1
    3e12:	d00a      	beq.n	3e2a <_sercom_get_default_pad+0x8a>
    3e14:	dc02      	bgt.n	3e1c <_sercom_get_default_pad+0x7c>
    3e16:	2b00      	cmp	r3, #0
    3e18:	d005      	beq.n	3e26 <_sercom_get_default_pad+0x86>
    3e1a:	e060      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3e1c:	2b02      	cmp	r3, #2
    3e1e:	d006      	beq.n	3e2e <_sercom_get_default_pad+0x8e>
    3e20:	2b03      	cmp	r3, #3
    3e22:	d006      	beq.n	3e32 <_sercom_get_default_pad+0x92>
    3e24:	e05b      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3e26:	2303      	movs	r3, #3
    3e28:	e05a      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e2a:	4b39      	ldr	r3, [pc, #228]	; (3f10 <_sercom_get_default_pad+0x170>)
    3e2c:	e058      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e2e:	4b39      	ldr	r3, [pc, #228]	; (3f14 <_sercom_get_default_pad+0x174>)
    3e30:	e056      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e32:	4b39      	ldr	r3, [pc, #228]	; (3f18 <_sercom_get_default_pad+0x178>)
    3e34:	e054      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e36:	1cfb      	adds	r3, r7, #3
    3e38:	781b      	ldrb	r3, [r3, #0]
    3e3a:	2b01      	cmp	r3, #1
    3e3c:	d00a      	beq.n	3e54 <_sercom_get_default_pad+0xb4>
    3e3e:	dc02      	bgt.n	3e46 <_sercom_get_default_pad+0xa6>
    3e40:	2b00      	cmp	r3, #0
    3e42:	d005      	beq.n	3e50 <_sercom_get_default_pad+0xb0>
    3e44:	e04b      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3e46:	2b02      	cmp	r3, #2
    3e48:	d006      	beq.n	3e58 <_sercom_get_default_pad+0xb8>
    3e4a:	2b03      	cmp	r3, #3
    3e4c:	d006      	beq.n	3e5c <_sercom_get_default_pad+0xbc>
    3e4e:	e046      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3e50:	4b32      	ldr	r3, [pc, #200]	; (3f1c <_sercom_get_default_pad+0x17c>)
    3e52:	e045      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e54:	4b32      	ldr	r3, [pc, #200]	; (3f20 <_sercom_get_default_pad+0x180>)
    3e56:	e043      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e58:	4b32      	ldr	r3, [pc, #200]	; (3f24 <_sercom_get_default_pad+0x184>)
    3e5a:	e041      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e5c:	4b32      	ldr	r3, [pc, #200]	; (3f28 <_sercom_get_default_pad+0x188>)
    3e5e:	e03f      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e60:	1cfb      	adds	r3, r7, #3
    3e62:	781b      	ldrb	r3, [r3, #0]
    3e64:	2b01      	cmp	r3, #1
    3e66:	d00a      	beq.n	3e7e <_sercom_get_default_pad+0xde>
    3e68:	dc02      	bgt.n	3e70 <_sercom_get_default_pad+0xd0>
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d005      	beq.n	3e7a <_sercom_get_default_pad+0xda>
    3e6e:	e036      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3e70:	2b02      	cmp	r3, #2
    3e72:	d006      	beq.n	3e82 <_sercom_get_default_pad+0xe2>
    3e74:	2b03      	cmp	r3, #3
    3e76:	d006      	beq.n	3e86 <_sercom_get_default_pad+0xe6>
    3e78:	e031      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3e7a:	4b2c      	ldr	r3, [pc, #176]	; (3f2c <_sercom_get_default_pad+0x18c>)
    3e7c:	e030      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e7e:	4b2c      	ldr	r3, [pc, #176]	; (3f30 <_sercom_get_default_pad+0x190>)
    3e80:	e02e      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e82:	4b2c      	ldr	r3, [pc, #176]	; (3f34 <_sercom_get_default_pad+0x194>)
    3e84:	e02c      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e86:	4b2c      	ldr	r3, [pc, #176]	; (3f38 <_sercom_get_default_pad+0x198>)
    3e88:	e02a      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3e8a:	1cfb      	adds	r3, r7, #3
    3e8c:	781b      	ldrb	r3, [r3, #0]
    3e8e:	2b01      	cmp	r3, #1
    3e90:	d00a      	beq.n	3ea8 <_sercom_get_default_pad+0x108>
    3e92:	dc02      	bgt.n	3e9a <_sercom_get_default_pad+0xfa>
    3e94:	2b00      	cmp	r3, #0
    3e96:	d005      	beq.n	3ea4 <_sercom_get_default_pad+0x104>
    3e98:	e021      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3e9a:	2b02      	cmp	r3, #2
    3e9c:	d006      	beq.n	3eac <_sercom_get_default_pad+0x10c>
    3e9e:	2b03      	cmp	r3, #3
    3ea0:	d006      	beq.n	3eb0 <_sercom_get_default_pad+0x110>
    3ea2:	e01c      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3ea4:	4b25      	ldr	r3, [pc, #148]	; (3f3c <_sercom_get_default_pad+0x19c>)
    3ea6:	e01b      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3ea8:	4b25      	ldr	r3, [pc, #148]	; (3f40 <_sercom_get_default_pad+0x1a0>)
    3eaa:	e019      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3eac:	4b25      	ldr	r3, [pc, #148]	; (3f44 <_sercom_get_default_pad+0x1a4>)
    3eae:	e017      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3eb0:	4b25      	ldr	r3, [pc, #148]	; (3f48 <_sercom_get_default_pad+0x1a8>)
    3eb2:	e015      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3eb4:	1cfb      	adds	r3, r7, #3
    3eb6:	781b      	ldrb	r3, [r3, #0]
    3eb8:	2b01      	cmp	r3, #1
    3eba:	d00a      	beq.n	3ed2 <_sercom_get_default_pad+0x132>
    3ebc:	dc02      	bgt.n	3ec4 <_sercom_get_default_pad+0x124>
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d005      	beq.n	3ece <_sercom_get_default_pad+0x12e>
    3ec2:	e00c      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3ec4:	2b02      	cmp	r3, #2
    3ec6:	d006      	beq.n	3ed6 <_sercom_get_default_pad+0x136>
    3ec8:	2b03      	cmp	r3, #3
    3eca:	d006      	beq.n	3eda <_sercom_get_default_pad+0x13a>
    3ecc:	e007      	b.n	3ede <_sercom_get_default_pad+0x13e>
    3ece:	4b1f      	ldr	r3, [pc, #124]	; (3f4c <_sercom_get_default_pad+0x1ac>)
    3ed0:	e006      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3ed2:	4b1f      	ldr	r3, [pc, #124]	; (3f50 <_sercom_get_default_pad+0x1b0>)
    3ed4:	e004      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3ed6:	4b1f      	ldr	r3, [pc, #124]	; (3f54 <_sercom_get_default_pad+0x1b4>)
    3ed8:	e002      	b.n	3ee0 <_sercom_get_default_pad+0x140>
    3eda:	4b1f      	ldr	r3, [pc, #124]	; (3f58 <_sercom_get_default_pad+0x1b8>)
    3edc:	e000      	b.n	3ee0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3ede:	2300      	movs	r3, #0
}
    3ee0:	0018      	movs	r0, r3
    3ee2:	46bd      	mov	sp, r7
    3ee4:	b002      	add	sp, #8
    3ee6:	bd80      	pop	{r7, pc}
    3ee8:	42001000 	.word	0x42001000
    3eec:	42000800 	.word	0x42000800
    3ef0:	42000c00 	.word	0x42000c00
    3ef4:	42001800 	.word	0x42001800
    3ef8:	42001c00 	.word	0x42001c00
    3efc:	42001400 	.word	0x42001400
    3f00:	00040003 	.word	0x00040003
    3f04:	00050003 	.word	0x00050003
    3f08:	00060003 	.word	0x00060003
    3f0c:	00070003 	.word	0x00070003
    3f10:	00010003 	.word	0x00010003
    3f14:	001e0003 	.word	0x001e0003
    3f18:	001f0003 	.word	0x001f0003
    3f1c:	00080003 	.word	0x00080003
    3f20:	00090003 	.word	0x00090003
    3f24:	000a0003 	.word	0x000a0003
    3f28:	000b0003 	.word	0x000b0003
    3f2c:	00100003 	.word	0x00100003
    3f30:	00110003 	.word	0x00110003
    3f34:	00120003 	.word	0x00120003
    3f38:	00130003 	.word	0x00130003
    3f3c:	000c0003 	.word	0x000c0003
    3f40:	000d0003 	.word	0x000d0003
    3f44:	000e0003 	.word	0x000e0003
    3f48:	000f0003 	.word	0x000f0003
    3f4c:	00160003 	.word	0x00160003
    3f50:	00170003 	.word	0x00170003
    3f54:	00180003 	.word	0x00180003
    3f58:	00190003 	.word	0x00190003

00003f5c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3f5c:	b590      	push	{r4, r7, lr}
    3f5e:	b08b      	sub	sp, #44	; 0x2c
    3f60:	af00      	add	r7, sp, #0
    3f62:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3f64:	230c      	movs	r3, #12
    3f66:	18fb      	adds	r3, r7, r3
    3f68:	4a0f      	ldr	r2, [pc, #60]	; (3fa8 <_sercom_get_sercom_inst_index+0x4c>)
    3f6a:	ca13      	ldmia	r2!, {r0, r1, r4}
    3f6c:	c313      	stmia	r3!, {r0, r1, r4}
    3f6e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3f70:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3f72:	2300      	movs	r3, #0
    3f74:	627b      	str	r3, [r7, #36]	; 0x24
    3f76:	e00e      	b.n	3f96 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3f78:	230c      	movs	r3, #12
    3f7a:	18fb      	adds	r3, r7, r3
    3f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3f7e:	0092      	lsls	r2, r2, #2
    3f80:	58d3      	ldr	r3, [r2, r3]
    3f82:	001a      	movs	r2, r3
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	429a      	cmp	r2, r3
    3f88:	d102      	bne.n	3f90 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f8c:	b2db      	uxtb	r3, r3
    3f8e:	e006      	b.n	3f9e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f92:	3301      	adds	r3, #1
    3f94:	627b      	str	r3, [r7, #36]	; 0x24
    3f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f98:	2b05      	cmp	r3, #5
    3f9a:	d9ed      	bls.n	3f78 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3f9c:	2300      	movs	r3, #0
}
    3f9e:	0018      	movs	r0, r3
    3fa0:	46bd      	mov	sp, r7
    3fa2:	b00b      	add	sp, #44	; 0x2c
    3fa4:	bd90      	pop	{r4, r7, pc}
    3fa6:	46c0      	nop			; (mov r8, r8)
    3fa8:	0000c228 	.word	0x0000c228

00003fac <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b082      	sub	sp, #8
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	0002      	movs	r2, r0
    3fb4:	1dfb      	adds	r3, r7, #7
    3fb6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3fb8:	46c0      	nop			; (mov r8, r8)
    3fba:	46bd      	mov	sp, r7
    3fbc:	b002      	add	sp, #8
    3fbe:	bd80      	pop	{r7, pc}

00003fc0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3fc0:	b580      	push	{r7, lr}
    3fc2:	b084      	sub	sp, #16
    3fc4:	af00      	add	r7, sp, #0
    3fc6:	0002      	movs	r2, r0
    3fc8:	6039      	str	r1, [r7, #0]
    3fca:	1dfb      	adds	r3, r7, #7
    3fcc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3fce:	4b13      	ldr	r3, [pc, #76]	; (401c <_sercom_set_handler+0x5c>)
    3fd0:	781b      	ldrb	r3, [r3, #0]
    3fd2:	2201      	movs	r2, #1
    3fd4:	4053      	eors	r3, r2
    3fd6:	b2db      	uxtb	r3, r3
    3fd8:	2b00      	cmp	r3, #0
    3fda:	d015      	beq.n	4008 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3fdc:	2300      	movs	r3, #0
    3fde:	60fb      	str	r3, [r7, #12]
    3fe0:	e00c      	b.n	3ffc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3fe2:	4b0f      	ldr	r3, [pc, #60]	; (4020 <_sercom_set_handler+0x60>)
    3fe4:	68fa      	ldr	r2, [r7, #12]
    3fe6:	0092      	lsls	r2, r2, #2
    3fe8:	490e      	ldr	r1, [pc, #56]	; (4024 <_sercom_set_handler+0x64>)
    3fea:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3fec:	4b0e      	ldr	r3, [pc, #56]	; (4028 <_sercom_set_handler+0x68>)
    3fee:	68fa      	ldr	r2, [r7, #12]
    3ff0:	0092      	lsls	r2, r2, #2
    3ff2:	2100      	movs	r1, #0
    3ff4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3ff6:	68fb      	ldr	r3, [r7, #12]
    3ff8:	3301      	adds	r3, #1
    3ffa:	60fb      	str	r3, [r7, #12]
    3ffc:	68fb      	ldr	r3, [r7, #12]
    3ffe:	2b05      	cmp	r3, #5
    4000:	d9ef      	bls.n	3fe2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    4002:	4b06      	ldr	r3, [pc, #24]	; (401c <_sercom_set_handler+0x5c>)
    4004:	2201      	movs	r2, #1
    4006:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4008:	1dfb      	adds	r3, r7, #7
    400a:	781a      	ldrb	r2, [r3, #0]
    400c:	4b04      	ldr	r3, [pc, #16]	; (4020 <_sercom_set_handler+0x60>)
    400e:	0092      	lsls	r2, r2, #2
    4010:	6839      	ldr	r1, [r7, #0]
    4012:	50d1      	str	r1, [r2, r3]
}
    4014:	46c0      	nop			; (mov r8, r8)
    4016:	46bd      	mov	sp, r7
    4018:	b004      	add	sp, #16
    401a:	bd80      	pop	{r7, pc}
    401c:	20000176 	.word	0x20000176
    4020:	20000178 	.word	0x20000178
    4024:	00003fad 	.word	0x00003fad
    4028:	20000a04 	.word	0x20000a04

0000402c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    402c:	b590      	push	{r4, r7, lr}
    402e:	b085      	sub	sp, #20
    4030:	af00      	add	r7, sp, #0
    4032:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4034:	2308      	movs	r3, #8
    4036:	18fb      	adds	r3, r7, r3
    4038:	4a0b      	ldr	r2, [pc, #44]	; (4068 <_sercom_get_interrupt_vector+0x3c>)
    403a:	6811      	ldr	r1, [r2, #0]
    403c:	6019      	str	r1, [r3, #0]
    403e:	8892      	ldrh	r2, [r2, #4]
    4040:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4042:	230f      	movs	r3, #15
    4044:	18fc      	adds	r4, r7, r3
    4046:	687b      	ldr	r3, [r7, #4]
    4048:	0018      	movs	r0, r3
    404a:	4b08      	ldr	r3, [pc, #32]	; (406c <_sercom_get_interrupt_vector+0x40>)
    404c:	4798      	blx	r3
    404e:	0003      	movs	r3, r0
    4050:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4052:	230f      	movs	r3, #15
    4054:	18fb      	adds	r3, r7, r3
    4056:	781b      	ldrb	r3, [r3, #0]
    4058:	2208      	movs	r2, #8
    405a:	18ba      	adds	r2, r7, r2
    405c:	5cd3      	ldrb	r3, [r2, r3]
    405e:	b25b      	sxtb	r3, r3
}
    4060:	0018      	movs	r0, r3
    4062:	46bd      	mov	sp, r7
    4064:	b005      	add	sp, #20
    4066:	bd90      	pop	{r4, r7, pc}
    4068:	0000c240 	.word	0x0000c240
    406c:	00003f5d 	.word	0x00003f5d

00004070 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4070:	b580      	push	{r7, lr}
    4072:	af00      	add	r7, sp, #0
    4074:	4b03      	ldr	r3, [pc, #12]	; (4084 <SERCOM0_Handler+0x14>)
    4076:	681b      	ldr	r3, [r3, #0]
    4078:	2000      	movs	r0, #0
    407a:	4798      	blx	r3
    407c:	46c0      	nop			; (mov r8, r8)
    407e:	46bd      	mov	sp, r7
    4080:	bd80      	pop	{r7, pc}
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	20000178 	.word	0x20000178

00004088 <SERCOM1_Handler>:
    4088:	b580      	push	{r7, lr}
    408a:	af00      	add	r7, sp, #0
    408c:	4b03      	ldr	r3, [pc, #12]	; (409c <SERCOM1_Handler+0x14>)
    408e:	685b      	ldr	r3, [r3, #4]
    4090:	2001      	movs	r0, #1
    4092:	4798      	blx	r3
    4094:	46c0      	nop			; (mov r8, r8)
    4096:	46bd      	mov	sp, r7
    4098:	bd80      	pop	{r7, pc}
    409a:	46c0      	nop			; (mov r8, r8)
    409c:	20000178 	.word	0x20000178

000040a0 <SERCOM2_Handler>:
    40a0:	b580      	push	{r7, lr}
    40a2:	af00      	add	r7, sp, #0
    40a4:	4b03      	ldr	r3, [pc, #12]	; (40b4 <SERCOM2_Handler+0x14>)
    40a6:	689b      	ldr	r3, [r3, #8]
    40a8:	2002      	movs	r0, #2
    40aa:	4798      	blx	r3
    40ac:	46c0      	nop			; (mov r8, r8)
    40ae:	46bd      	mov	sp, r7
    40b0:	bd80      	pop	{r7, pc}
    40b2:	46c0      	nop			; (mov r8, r8)
    40b4:	20000178 	.word	0x20000178

000040b8 <SERCOM3_Handler>:
    40b8:	b580      	push	{r7, lr}
    40ba:	af00      	add	r7, sp, #0
    40bc:	4b03      	ldr	r3, [pc, #12]	; (40cc <SERCOM3_Handler+0x14>)
    40be:	68db      	ldr	r3, [r3, #12]
    40c0:	2003      	movs	r0, #3
    40c2:	4798      	blx	r3
    40c4:	46c0      	nop			; (mov r8, r8)
    40c6:	46bd      	mov	sp, r7
    40c8:	bd80      	pop	{r7, pc}
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	20000178 	.word	0x20000178

000040d0 <SERCOM4_Handler>:
    40d0:	b580      	push	{r7, lr}
    40d2:	af00      	add	r7, sp, #0
    40d4:	4b03      	ldr	r3, [pc, #12]	; (40e4 <SERCOM4_Handler+0x14>)
    40d6:	691b      	ldr	r3, [r3, #16]
    40d8:	2004      	movs	r0, #4
    40da:	4798      	blx	r3
    40dc:	46c0      	nop			; (mov r8, r8)
    40de:	46bd      	mov	sp, r7
    40e0:	bd80      	pop	{r7, pc}
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	20000178 	.word	0x20000178

000040e8 <SERCOM5_Handler>:
    40e8:	b580      	push	{r7, lr}
    40ea:	af00      	add	r7, sp, #0
    40ec:	4b03      	ldr	r3, [pc, #12]	; (40fc <SERCOM5_Handler+0x14>)
    40ee:	695b      	ldr	r3, [r3, #20]
    40f0:	2005      	movs	r0, #5
    40f2:	4798      	blx	r3
    40f4:	46c0      	nop			; (mov r8, r8)
    40f6:	46bd      	mov	sp, r7
    40f8:	bd80      	pop	{r7, pc}
    40fa:	46c0      	nop			; (mov r8, r8)
    40fc:	20000178 	.word	0x20000178

00004100 <system_pinmux_get_config_defaults>:
{
    4100:	b580      	push	{r7, lr}
    4102:	b082      	sub	sp, #8
    4104:	af00      	add	r7, sp, #0
    4106:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4108:	687b      	ldr	r3, [r7, #4]
    410a:	2280      	movs	r2, #128	; 0x80
    410c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	2200      	movs	r2, #0
    4112:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	2201      	movs	r2, #1
    4118:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	2200      	movs	r2, #0
    411e:	70da      	strb	r2, [r3, #3]
}
    4120:	46c0      	nop			; (mov r8, r8)
    4122:	46bd      	mov	sp, r7
    4124:	b002      	add	sp, #8
    4126:	bd80      	pop	{r7, pc}

00004128 <system_pinmux_get_group_from_gpio_pin>:
{
    4128:	b580      	push	{r7, lr}
    412a:	b084      	sub	sp, #16
    412c:	af00      	add	r7, sp, #0
    412e:	0002      	movs	r2, r0
    4130:	1dfb      	adds	r3, r7, #7
    4132:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4134:	230f      	movs	r3, #15
    4136:	18fb      	adds	r3, r7, r3
    4138:	1dfa      	adds	r2, r7, #7
    413a:	7812      	ldrb	r2, [r2, #0]
    413c:	09d2      	lsrs	r2, r2, #7
    413e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4140:	230e      	movs	r3, #14
    4142:	18fb      	adds	r3, r7, r3
    4144:	1dfa      	adds	r2, r7, #7
    4146:	7812      	ldrb	r2, [r2, #0]
    4148:	0952      	lsrs	r2, r2, #5
    414a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    414c:	4b0d      	ldr	r3, [pc, #52]	; (4184 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    414e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    4150:	230f      	movs	r3, #15
    4152:	18fb      	adds	r3, r7, r3
    4154:	781b      	ldrb	r3, [r3, #0]
    4156:	2b00      	cmp	r3, #0
    4158:	d10f      	bne.n	417a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    415a:	230f      	movs	r3, #15
    415c:	18fb      	adds	r3, r7, r3
    415e:	781b      	ldrb	r3, [r3, #0]
    4160:	009b      	lsls	r3, r3, #2
    4162:	2210      	movs	r2, #16
    4164:	4694      	mov	ip, r2
    4166:	44bc      	add	ip, r7
    4168:	4463      	add	r3, ip
    416a:	3b08      	subs	r3, #8
    416c:	681a      	ldr	r2, [r3, #0]
    416e:	230e      	movs	r3, #14
    4170:	18fb      	adds	r3, r7, r3
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	01db      	lsls	r3, r3, #7
    4176:	18d3      	adds	r3, r2, r3
    4178:	e000      	b.n	417c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    417a:	2300      	movs	r3, #0
}
    417c:	0018      	movs	r0, r3
    417e:	46bd      	mov	sp, r7
    4180:	b004      	add	sp, #16
    4182:	bd80      	pop	{r7, pc}
    4184:	41004400 	.word	0x41004400

00004188 <port_get_group_from_gpio_pin>:
{
    4188:	b580      	push	{r7, lr}
    418a:	b082      	sub	sp, #8
    418c:	af00      	add	r7, sp, #0
    418e:	0002      	movs	r2, r0
    4190:	1dfb      	adds	r3, r7, #7
    4192:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4194:	1dfb      	adds	r3, r7, #7
    4196:	781b      	ldrb	r3, [r3, #0]
    4198:	0018      	movs	r0, r3
    419a:	4b03      	ldr	r3, [pc, #12]	; (41a8 <port_get_group_from_gpio_pin+0x20>)
    419c:	4798      	blx	r3
    419e:	0003      	movs	r3, r0
}
    41a0:	0018      	movs	r0, r3
    41a2:	46bd      	mov	sp, r7
    41a4:	b002      	add	sp, #8
    41a6:	bd80      	pop	{r7, pc}
    41a8:	00004129 	.word	0x00004129

000041ac <port_pin_set_output_level>:
{
    41ac:	b580      	push	{r7, lr}
    41ae:	b084      	sub	sp, #16
    41b0:	af00      	add	r7, sp, #0
    41b2:	0002      	movs	r2, r0
    41b4:	1dfb      	adds	r3, r7, #7
    41b6:	701a      	strb	r2, [r3, #0]
    41b8:	1dbb      	adds	r3, r7, #6
    41ba:	1c0a      	adds	r2, r1, #0
    41bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    41be:	1dfb      	adds	r3, r7, #7
    41c0:	781b      	ldrb	r3, [r3, #0]
    41c2:	0018      	movs	r0, r3
    41c4:	4b0d      	ldr	r3, [pc, #52]	; (41fc <port_pin_set_output_level+0x50>)
    41c6:	4798      	blx	r3
    41c8:	0003      	movs	r3, r0
    41ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    41cc:	1dfb      	adds	r3, r7, #7
    41ce:	781b      	ldrb	r3, [r3, #0]
    41d0:	221f      	movs	r2, #31
    41d2:	4013      	ands	r3, r2
    41d4:	2201      	movs	r2, #1
    41d6:	409a      	lsls	r2, r3
    41d8:	0013      	movs	r3, r2
    41da:	60bb      	str	r3, [r7, #8]
	if (level) {
    41dc:	1dbb      	adds	r3, r7, #6
    41de:	781b      	ldrb	r3, [r3, #0]
    41e0:	2b00      	cmp	r3, #0
    41e2:	d003      	beq.n	41ec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    41e4:	68fb      	ldr	r3, [r7, #12]
    41e6:	68ba      	ldr	r2, [r7, #8]
    41e8:	619a      	str	r2, [r3, #24]
}
    41ea:	e002      	b.n	41f2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    41ec:	68fb      	ldr	r3, [r7, #12]
    41ee:	68ba      	ldr	r2, [r7, #8]
    41f0:	615a      	str	r2, [r3, #20]
}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	46bd      	mov	sp, r7
    41f6:	b004      	add	sp, #16
    41f8:	bd80      	pop	{r7, pc}
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	00004189 	.word	0x00004189

00004200 <system_gclk_chan_get_config_defaults>:
{
    4200:	b580      	push	{r7, lr}
    4202:	b082      	sub	sp, #8
    4204:	af00      	add	r7, sp, #0
    4206:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	2200      	movs	r2, #0
    420c:	701a      	strb	r2, [r3, #0]
}
    420e:	46c0      	nop			; (mov r8, r8)
    4210:	46bd      	mov	sp, r7
    4212:	b002      	add	sp, #8
    4214:	bd80      	pop	{r7, pc}
	...

00004218 <system_apb_clock_set_mask>:
{
    4218:	b580      	push	{r7, lr}
    421a:	b082      	sub	sp, #8
    421c:	af00      	add	r7, sp, #0
    421e:	0002      	movs	r2, r0
    4220:	6039      	str	r1, [r7, #0]
    4222:	1dfb      	adds	r3, r7, #7
    4224:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4226:	1dfb      	adds	r3, r7, #7
    4228:	781b      	ldrb	r3, [r3, #0]
    422a:	2b01      	cmp	r3, #1
    422c:	d00a      	beq.n	4244 <system_apb_clock_set_mask+0x2c>
    422e:	2b02      	cmp	r3, #2
    4230:	d00f      	beq.n	4252 <system_apb_clock_set_mask+0x3a>
    4232:	2b00      	cmp	r3, #0
    4234:	d114      	bne.n	4260 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4236:	4b0e      	ldr	r3, [pc, #56]	; (4270 <system_apb_clock_set_mask+0x58>)
    4238:	4a0d      	ldr	r2, [pc, #52]	; (4270 <system_apb_clock_set_mask+0x58>)
    423a:	6991      	ldr	r1, [r2, #24]
    423c:	683a      	ldr	r2, [r7, #0]
    423e:	430a      	orrs	r2, r1
    4240:	619a      	str	r2, [r3, #24]
			break;
    4242:	e00f      	b.n	4264 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4244:	4b0a      	ldr	r3, [pc, #40]	; (4270 <system_apb_clock_set_mask+0x58>)
    4246:	4a0a      	ldr	r2, [pc, #40]	; (4270 <system_apb_clock_set_mask+0x58>)
    4248:	69d1      	ldr	r1, [r2, #28]
    424a:	683a      	ldr	r2, [r7, #0]
    424c:	430a      	orrs	r2, r1
    424e:	61da      	str	r2, [r3, #28]
			break;
    4250:	e008      	b.n	4264 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4252:	4b07      	ldr	r3, [pc, #28]	; (4270 <system_apb_clock_set_mask+0x58>)
    4254:	4a06      	ldr	r2, [pc, #24]	; (4270 <system_apb_clock_set_mask+0x58>)
    4256:	6a11      	ldr	r1, [r2, #32]
    4258:	683a      	ldr	r2, [r7, #0]
    425a:	430a      	orrs	r2, r1
    425c:	621a      	str	r2, [r3, #32]
			break;
    425e:	e001      	b.n	4264 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4260:	2317      	movs	r3, #23
    4262:	e000      	b.n	4266 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4264:	2300      	movs	r3, #0
}
    4266:	0018      	movs	r0, r3
    4268:	46bd      	mov	sp, r7
    426a:	b002      	add	sp, #8
    426c:	bd80      	pop	{r7, pc}
    426e:	46c0      	nop			; (mov r8, r8)
    4270:	40000400 	.word	0x40000400

00004274 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4274:	b580      	push	{r7, lr}
    4276:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4278:	4b05      	ldr	r3, [pc, #20]	; (4290 <system_is_debugger_present+0x1c>)
    427a:	789b      	ldrb	r3, [r3, #2]
    427c:	b2db      	uxtb	r3, r3
    427e:	001a      	movs	r2, r3
    4280:	2302      	movs	r3, #2
    4282:	4013      	ands	r3, r2
    4284:	1e5a      	subs	r2, r3, #1
    4286:	4193      	sbcs	r3, r2
    4288:	b2db      	uxtb	r3, r3
}
    428a:	0018      	movs	r0, r3
    428c:	46bd      	mov	sp, r7
    428e:	bd80      	pop	{r7, pc}
    4290:	41002000 	.word	0x41002000

00004294 <system_interrupt_enable>:
{
    4294:	b580      	push	{r7, lr}
    4296:	b082      	sub	sp, #8
    4298:	af00      	add	r7, sp, #0
    429a:	0002      	movs	r2, r0
    429c:	1dfb      	adds	r3, r7, #7
    429e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    42a0:	4b06      	ldr	r3, [pc, #24]	; (42bc <system_interrupt_enable+0x28>)
    42a2:	1dfa      	adds	r2, r7, #7
    42a4:	7812      	ldrb	r2, [r2, #0]
    42a6:	0011      	movs	r1, r2
    42a8:	221f      	movs	r2, #31
    42aa:	400a      	ands	r2, r1
    42ac:	2101      	movs	r1, #1
    42ae:	4091      	lsls	r1, r2
    42b0:	000a      	movs	r2, r1
    42b2:	601a      	str	r2, [r3, #0]
}
    42b4:	46c0      	nop			; (mov r8, r8)
    42b6:	46bd      	mov	sp, r7
    42b8:	b002      	add	sp, #8
    42ba:	bd80      	pop	{r7, pc}
    42bc:	e000e100 	.word	0xe000e100

000042c0 <system_interrupt_disable>:
{
    42c0:	b580      	push	{r7, lr}
    42c2:	b082      	sub	sp, #8
    42c4:	af00      	add	r7, sp, #0
    42c6:	0002      	movs	r2, r0
    42c8:	1dfb      	adds	r3, r7, #7
    42ca:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    42cc:	4a07      	ldr	r2, [pc, #28]	; (42ec <system_interrupt_disable+0x2c>)
    42ce:	1dfb      	adds	r3, r7, #7
    42d0:	781b      	ldrb	r3, [r3, #0]
    42d2:	0019      	movs	r1, r3
    42d4:	231f      	movs	r3, #31
    42d6:	400b      	ands	r3, r1
    42d8:	2101      	movs	r1, #1
    42da:	4099      	lsls	r1, r3
    42dc:	000b      	movs	r3, r1
    42de:	0019      	movs	r1, r3
    42e0:	2380      	movs	r3, #128	; 0x80
    42e2:	50d1      	str	r1, [r2, r3]
}
    42e4:	46c0      	nop			; (mov r8, r8)
    42e6:	46bd      	mov	sp, r7
    42e8:	b002      	add	sp, #8
    42ea:	bd80      	pop	{r7, pc}
    42ec:	e000e100 	.word	0xe000e100

000042f0 <spi_is_syncing>:
{
    42f0:	b580      	push	{r7, lr}
    42f2:	b084      	sub	sp, #16
    42f4:	af00      	add	r7, sp, #0
    42f6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	681b      	ldr	r3, [r3, #0]
    42fc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    42fe:	68fb      	ldr	r3, [r7, #12]
    4300:	69db      	ldr	r3, [r3, #28]
    4302:	1e5a      	subs	r2, r3, #1
    4304:	4193      	sbcs	r3, r2
    4306:	b2db      	uxtb	r3, r3
}
    4308:	0018      	movs	r0, r3
    430a:	46bd      	mov	sp, r7
    430c:	b004      	add	sp, #16
    430e:	bd80      	pop	{r7, pc}

00004310 <spi_enable>:
{
    4310:	b580      	push	{r7, lr}
    4312:	b084      	sub	sp, #16
    4314:	af00      	add	r7, sp, #0
    4316:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4318:	687b      	ldr	r3, [r7, #4]
    431a:	681b      	ldr	r3, [r3, #0]
    431c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    431e:	687b      	ldr	r3, [r7, #4]
    4320:	681b      	ldr	r3, [r3, #0]
    4322:	0018      	movs	r0, r3
    4324:	4b0b      	ldr	r3, [pc, #44]	; (4354 <spi_enable+0x44>)
    4326:	4798      	blx	r3
    4328:	0003      	movs	r3, r0
    432a:	0018      	movs	r0, r3
    432c:	4b0a      	ldr	r3, [pc, #40]	; (4358 <spi_enable+0x48>)
    432e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    4330:	46c0      	nop			; (mov r8, r8)
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	0018      	movs	r0, r3
    4336:	4b09      	ldr	r3, [pc, #36]	; (435c <spi_enable+0x4c>)
    4338:	4798      	blx	r3
    433a:	1e03      	subs	r3, r0, #0
    433c:	d1f9      	bne.n	4332 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    433e:	68fb      	ldr	r3, [r7, #12]
    4340:	681b      	ldr	r3, [r3, #0]
    4342:	2202      	movs	r2, #2
    4344:	431a      	orrs	r2, r3
    4346:	68fb      	ldr	r3, [r7, #12]
    4348:	601a      	str	r2, [r3, #0]
}
    434a:	46c0      	nop			; (mov r8, r8)
    434c:	46bd      	mov	sp, r7
    434e:	b004      	add	sp, #16
    4350:	bd80      	pop	{r7, pc}
    4352:	46c0      	nop			; (mov r8, r8)
    4354:	0000402d 	.word	0x0000402d
    4358:	00004295 	.word	0x00004295
    435c:	000042f1 	.word	0x000042f1

00004360 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    4360:	b580      	push	{r7, lr}
    4362:	b084      	sub	sp, #16
    4364:	af00      	add	r7, sp, #0
    4366:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4368:	687b      	ldr	r3, [r7, #4]
    436a:	681b      	ldr	r3, [r3, #0]
    436c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	681b      	ldr	r3, [r3, #0]
    4372:	0018      	movs	r0, r3
    4374:	4b0e      	ldr	r3, [pc, #56]	; (43b0 <spi_disable+0x50>)
    4376:	4798      	blx	r3
    4378:	0003      	movs	r3, r0
    437a:	0018      	movs	r0, r3
    437c:	4b0d      	ldr	r3, [pc, #52]	; (43b4 <spi_disable+0x54>)
    437e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    4380:	46c0      	nop			; (mov r8, r8)
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	0018      	movs	r0, r3
    4386:	4b0c      	ldr	r3, [pc, #48]	; (43b8 <spi_disable+0x58>)
    4388:	4798      	blx	r3
    438a:	1e03      	subs	r3, r0, #0
    438c:	d1f9      	bne.n	4382 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    438e:	68fb      	ldr	r3, [r7, #12]
    4390:	228f      	movs	r2, #143	; 0x8f
    4392:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4394:	68fb      	ldr	r3, [r7, #12]
    4396:	228f      	movs	r2, #143	; 0x8f
    4398:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    439a:	68fb      	ldr	r3, [r7, #12]
    439c:	681b      	ldr	r3, [r3, #0]
    439e:	2202      	movs	r2, #2
    43a0:	4393      	bics	r3, r2
    43a2:	001a      	movs	r2, r3
    43a4:	68fb      	ldr	r3, [r7, #12]
    43a6:	601a      	str	r2, [r3, #0]
}
    43a8:	46c0      	nop			; (mov r8, r8)
    43aa:	46bd      	mov	sp, r7
    43ac:	b004      	add	sp, #16
    43ae:	bd80      	pop	{r7, pc}
    43b0:	0000402d 	.word	0x0000402d
    43b4:	000042c1 	.word	0x000042c1
    43b8:	000042f1 	.word	0x000042f1

000043bc <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    43bc:	b580      	push	{r7, lr}
    43be:	b084      	sub	sp, #16
    43c0:	af00      	add	r7, sp, #0
    43c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43c4:	687b      	ldr	r3, [r7, #4]
    43c6:	681b      	ldr	r3, [r3, #0]
    43c8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	7e1b      	ldrb	r3, [r3, #24]
    43ce:	b2db      	uxtb	r3, r3
    43d0:	001a      	movs	r2, r3
    43d2:	2302      	movs	r3, #2
    43d4:	4013      	ands	r3, r2
    43d6:	1e5a      	subs	r2, r3, #1
    43d8:	4193      	sbcs	r3, r2
    43da:	b2db      	uxtb	r3, r3
}
    43dc:	0018      	movs	r0, r3
    43de:	46bd      	mov	sp, r7
    43e0:	b004      	add	sp, #16
    43e2:	bd80      	pop	{r7, pc}

000043e4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    43e4:	b580      	push	{r7, lr}
    43e6:	b084      	sub	sp, #16
    43e8:	af00      	add	r7, sp, #0
    43ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43ec:	687b      	ldr	r3, [r7, #4]
    43ee:	681b      	ldr	r3, [r3, #0]
    43f0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    43f2:	68fb      	ldr	r3, [r7, #12]
    43f4:	7e1b      	ldrb	r3, [r3, #24]
    43f6:	b2db      	uxtb	r3, r3
    43f8:	001a      	movs	r2, r3
    43fa:	2301      	movs	r3, #1
    43fc:	4013      	ands	r3, r2
    43fe:	1e5a      	subs	r2, r3, #1
    4400:	4193      	sbcs	r3, r2
    4402:	b2db      	uxtb	r3, r3
}
    4404:	0018      	movs	r0, r3
    4406:	46bd      	mov	sp, r7
    4408:	b004      	add	sp, #16
    440a:	bd80      	pop	{r7, pc}

0000440c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    440c:	b580      	push	{r7, lr}
    440e:	b084      	sub	sp, #16
    4410:	af00      	add	r7, sp, #0
    4412:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	681b      	ldr	r3, [r3, #0]
    4418:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    441a:	68fb      	ldr	r3, [r7, #12]
    441c:	7e1b      	ldrb	r3, [r3, #24]
    441e:	b2db      	uxtb	r3, r3
    4420:	001a      	movs	r2, r3
    4422:	2304      	movs	r3, #4
    4424:	4013      	ands	r3, r2
    4426:	1e5a      	subs	r2, r3, #1
    4428:	4193      	sbcs	r3, r2
    442a:	b2db      	uxtb	r3, r3
}
    442c:	0018      	movs	r0, r3
    442e:	46bd      	mov	sp, r7
    4430:	b004      	add	sp, #16
    4432:	bd80      	pop	{r7, pc}

00004434 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4434:	b580      	push	{r7, lr}
    4436:	b084      	sub	sp, #16
    4438:	af00      	add	r7, sp, #0
    443a:	6078      	str	r0, [r7, #4]
    443c:	000a      	movs	r2, r1
    443e:	1cbb      	adds	r3, r7, #2
    4440:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4448:	687b      	ldr	r3, [r7, #4]
    444a:	0018      	movs	r0, r3
    444c:	4b0a      	ldr	r3, [pc, #40]	; (4478 <spi_write+0x44>)
    444e:	4798      	blx	r3
    4450:	0003      	movs	r3, r0
    4452:	001a      	movs	r2, r3
    4454:	2301      	movs	r3, #1
    4456:	4053      	eors	r3, r2
    4458:	b2db      	uxtb	r3, r3
    445a:	2b00      	cmp	r3, #0
    445c:	d001      	beq.n	4462 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    445e:	2305      	movs	r3, #5
    4460:	e006      	b.n	4470 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4462:	1cbb      	adds	r3, r7, #2
    4464:	881b      	ldrh	r3, [r3, #0]
    4466:	05db      	lsls	r3, r3, #23
    4468:	0dda      	lsrs	r2, r3, #23
    446a:	68fb      	ldr	r3, [r7, #12]
    446c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    446e:	2300      	movs	r3, #0
}
    4470:	0018      	movs	r0, r3
    4472:	46bd      	mov	sp, r7
    4474:	b004      	add	sp, #16
    4476:	bd80      	pop	{r7, pc}
    4478:	000043e5 	.word	0x000043e5

0000447c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    447c:	b580      	push	{r7, lr}
    447e:	b084      	sub	sp, #16
    4480:	af00      	add	r7, sp, #0
    4482:	6078      	str	r0, [r7, #4]
    4484:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4486:	687b      	ldr	r3, [r7, #4]
    4488:	681b      	ldr	r3, [r3, #0]
    448a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	0018      	movs	r0, r3
    4490:	4b1b      	ldr	r3, [pc, #108]	; (4500 <spi_read+0x84>)
    4492:	4798      	blx	r3
    4494:	0003      	movs	r3, r0
    4496:	001a      	movs	r2, r3
    4498:	2301      	movs	r3, #1
    449a:	4053      	eors	r3, r2
    449c:	b2db      	uxtb	r3, r3
    449e:	2b00      	cmp	r3, #0
    44a0:	d001      	beq.n	44a6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    44a2:	2310      	movs	r3, #16
    44a4:	e027      	b.n	44f6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    44a6:	230f      	movs	r3, #15
    44a8:	18fb      	adds	r3, r7, r3
    44aa:	2200      	movs	r2, #0
    44ac:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    44ae:	68bb      	ldr	r3, [r7, #8]
    44b0:	8b5b      	ldrh	r3, [r3, #26]
    44b2:	b29b      	uxth	r3, r3
    44b4:	001a      	movs	r2, r3
    44b6:	2304      	movs	r3, #4
    44b8:	4013      	ands	r3, r2
    44ba:	d006      	beq.n	44ca <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    44bc:	230f      	movs	r3, #15
    44be:	18fb      	adds	r3, r7, r3
    44c0:	221e      	movs	r2, #30
    44c2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    44c4:	68bb      	ldr	r3, [r7, #8]
    44c6:	2204      	movs	r2, #4
    44c8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	799b      	ldrb	r3, [r3, #6]
    44ce:	2b01      	cmp	r3, #1
    44d0:	d108      	bne.n	44e4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    44d2:	68bb      	ldr	r3, [r7, #8]
    44d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44d6:	b29b      	uxth	r3, r3
    44d8:	05db      	lsls	r3, r3, #23
    44da:	0ddb      	lsrs	r3, r3, #23
    44dc:	b29a      	uxth	r2, r3
    44de:	683b      	ldr	r3, [r7, #0]
    44e0:	801a      	strh	r2, [r3, #0]
    44e2:	e005      	b.n	44f0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    44e4:	68bb      	ldr	r3, [r7, #8]
    44e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44e8:	b2db      	uxtb	r3, r3
    44ea:	b29a      	uxth	r2, r3
    44ec:	683b      	ldr	r3, [r7, #0]
    44ee:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    44f0:	230f      	movs	r3, #15
    44f2:	18fb      	adds	r3, r7, r3
    44f4:	781b      	ldrb	r3, [r3, #0]
}
    44f6:	0018      	movs	r0, r3
    44f8:	46bd      	mov	sp, r7
    44fa:	b004      	add	sp, #16
    44fc:	bd80      	pop	{r7, pc}
    44fe:	46c0      	nop			; (mov r8, r8)
    4500:	0000440d 	.word	0x0000440d

00004504 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    4504:	b580      	push	{r7, lr}
    4506:	b084      	sub	sp, #16
    4508:	af00      	add	r7, sp, #0
    450a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    450c:	687b      	ldr	r3, [r7, #4]
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    4512:	687b      	ldr	r3, [r7, #4]
    4514:	0018      	movs	r0, r3
    4516:	4b09      	ldr	r3, [pc, #36]	; (453c <spi_reset+0x38>)
    4518:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    451a:	46c0      	nop			; (mov r8, r8)
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	0018      	movs	r0, r3
    4520:	4b07      	ldr	r3, [pc, #28]	; (4540 <spi_reset+0x3c>)
    4522:	4798      	blx	r3
    4524:	1e03      	subs	r3, r0, #0
    4526:	d1f9      	bne.n	451c <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    4528:	68fb      	ldr	r3, [r7, #12]
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	2201      	movs	r2, #1
    452e:	431a      	orrs	r2, r3
    4530:	68fb      	ldr	r3, [r7, #12]
    4532:	601a      	str	r2, [r3, #0]
}
    4534:	46c0      	nop			; (mov r8, r8)
    4536:	46bd      	mov	sp, r7
    4538:	b004      	add	sp, #16
    453a:	bd80      	pop	{r7, pc}
    453c:	00004361 	.word	0x00004361
    4540:	000042f1 	.word	0x000042f1

00004544 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4544:	b590      	push	{r4, r7, lr}
    4546:	b089      	sub	sp, #36	; 0x24
    4548:	af00      	add	r7, sp, #0
    454a:	6078      	str	r0, [r7, #4]
    454c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    454e:	230c      	movs	r3, #12
    4550:	18fb      	adds	r3, r7, r3
    4552:	2200      	movs	r2, #0
    4554:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4556:	687b      	ldr	r3, [r7, #4]
    4558:	681b      	ldr	r3, [r3, #0]
    455a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    455c:	687b      	ldr	r3, [r7, #4]
    455e:	0018      	movs	r0, r3
    4560:	4b24      	ldr	r3, [pc, #144]	; (45f4 <spi_set_baudrate+0xb0>)
    4562:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    4564:	46c0      	nop			; (mov r8, r8)
    4566:	687b      	ldr	r3, [r7, #4]
    4568:	0018      	movs	r0, r3
    456a:	4b23      	ldr	r3, [pc, #140]	; (45f8 <spi_set_baudrate+0xb4>)
    456c:	4798      	blx	r3
    456e:	1e03      	subs	r3, r0, #0
    4570:	d1f9      	bne.n	4566 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4572:	687b      	ldr	r3, [r7, #4]
    4574:	681b      	ldr	r3, [r3, #0]
    4576:	0018      	movs	r0, r3
    4578:	4b20      	ldr	r3, [pc, #128]	; (45fc <spi_set_baudrate+0xb8>)
    457a:	4798      	blx	r3
    457c:	0003      	movs	r3, r0
    457e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4580:	69bb      	ldr	r3, [r7, #24]
    4582:	3314      	adds	r3, #20
    4584:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4586:	697b      	ldr	r3, [r7, #20]
    4588:	b2db      	uxtb	r3, r3
    458a:	0018      	movs	r0, r3
    458c:	4b1c      	ldr	r3, [pc, #112]	; (4600 <spi_set_baudrate+0xbc>)
    458e:	4798      	blx	r3
    4590:	0003      	movs	r3, r0
    4592:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4594:	230f      	movs	r3, #15
    4596:	18fc      	adds	r4, r7, r3
    4598:	230c      	movs	r3, #12
    459a:	18fa      	adds	r2, r7, r3
    459c:	6939      	ldr	r1, [r7, #16]
    459e:	683b      	ldr	r3, [r7, #0]
    45a0:	0018      	movs	r0, r3
    45a2:	4b18      	ldr	r3, [pc, #96]	; (4604 <spi_set_baudrate+0xc0>)
    45a4:	4798      	blx	r3
    45a6:	0003      	movs	r3, r0
    45a8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    45aa:	230f      	movs	r3, #15
    45ac:	18fb      	adds	r3, r7, r3
    45ae:	781b      	ldrb	r3, [r3, #0]
    45b0:	2b00      	cmp	r3, #0
    45b2:	d001      	beq.n	45b8 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    45b4:	2317      	movs	r3, #23
    45b6:	e018      	b.n	45ea <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    45b8:	230c      	movs	r3, #12
    45ba:	18fb      	adds	r3, r7, r3
    45bc:	881b      	ldrh	r3, [r3, #0]
    45be:	b2da      	uxtb	r2, r3
    45c0:	69fb      	ldr	r3, [r7, #28]
    45c2:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    45c4:	46c0      	nop			; (mov r8, r8)
    45c6:	687b      	ldr	r3, [r7, #4]
    45c8:	0018      	movs	r0, r3
    45ca:	4b0b      	ldr	r3, [pc, #44]	; (45f8 <spi_set_baudrate+0xb4>)
    45cc:	4798      	blx	r3
    45ce:	1e03      	subs	r3, r0, #0
    45d0:	d1f9      	bne.n	45c6 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    45d2:	687b      	ldr	r3, [r7, #4]
    45d4:	0018      	movs	r0, r3
    45d6:	4b0c      	ldr	r3, [pc, #48]	; (4608 <spi_set_baudrate+0xc4>)
    45d8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	687b      	ldr	r3, [r7, #4]
    45de:	0018      	movs	r0, r3
    45e0:	4b05      	ldr	r3, [pc, #20]	; (45f8 <spi_set_baudrate+0xb4>)
    45e2:	4798      	blx	r3
    45e4:	1e03      	subs	r3, r0, #0
    45e6:	d1f9      	bne.n	45dc <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    45e8:	2300      	movs	r3, #0
}
    45ea:	0018      	movs	r0, r3
    45ec:	46bd      	mov	sp, r7
    45ee:	b009      	add	sp, #36	; 0x24
    45f0:	bd90      	pop	{r4, r7, pc}
    45f2:	46c0      	nop			; (mov r8, r8)
    45f4:	00004361 	.word	0x00004361
    45f8:	000042f1 	.word	0x000042f1
    45fc:	00003f5d 	.word	0x00003f5d
    4600:	00006b95 	.word	0x00006b95
    4604:	00003ad7 	.word	0x00003ad7
    4608:	00004311 	.word	0x00004311

0000460c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    460c:	b590      	push	{r4, r7, lr}
    460e:	b093      	sub	sp, #76	; 0x4c
    4610:	af00      	add	r7, sp, #0
    4612:	6078      	str	r0, [r7, #4]
    4614:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4616:	687b      	ldr	r3, [r7, #4]
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    461c:	687b      	ldr	r3, [r7, #4]
    461e:	681b      	ldr	r3, [r3, #0]
    4620:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4622:	231c      	movs	r3, #28
    4624:	18fb      	adds	r3, r7, r3
    4626:	0018      	movs	r0, r3
    4628:	4b75      	ldr	r3, [pc, #468]	; (4800 <_spi_set_config+0x1f4>)
    462a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    462c:	231c      	movs	r3, #28
    462e:	18fb      	adds	r3, r7, r3
    4630:	2200      	movs	r2, #0
    4632:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    4634:	683b      	ldr	r3, [r7, #0]
    4636:	781b      	ldrb	r3, [r3, #0]
    4638:	2b00      	cmp	r3, #0
    463a:	d103      	bne.n	4644 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    463c:	231c      	movs	r3, #28
    463e:	18fb      	adds	r3, r7, r3
    4640:	2200      	movs	r2, #0
    4642:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4644:	683b      	ldr	r3, [r7, #0]
    4646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    4648:	230c      	movs	r3, #12
    464a:	18fb      	adds	r3, r7, r3
    464c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    464e:	683b      	ldr	r3, [r7, #0]
    4650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    4652:	230c      	movs	r3, #12
    4654:	18fb      	adds	r3, r7, r3
    4656:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4658:	683b      	ldr	r3, [r7, #0]
    465a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    465c:	230c      	movs	r3, #12
    465e:	18fb      	adds	r3, r7, r3
    4660:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    4662:	683b      	ldr	r3, [r7, #0]
    4664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    4666:	230c      	movs	r3, #12
    4668:	18fb      	adds	r3, r7, r3
    466a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    466c:	2347      	movs	r3, #71	; 0x47
    466e:	18fb      	adds	r3, r7, r3
    4670:	2200      	movs	r2, #0
    4672:	701a      	strb	r2, [r3, #0]
    4674:	e02c      	b.n	46d0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4676:	2347      	movs	r3, #71	; 0x47
    4678:	18fb      	adds	r3, r7, r3
    467a:	781a      	ldrb	r2, [r3, #0]
    467c:	230c      	movs	r3, #12
    467e:	18fb      	adds	r3, r7, r3
    4680:	0092      	lsls	r2, r2, #2
    4682:	58d3      	ldr	r3, [r2, r3]
    4684:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4688:	2b00      	cmp	r3, #0
    468a:	d109      	bne.n	46a0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    468c:	2347      	movs	r3, #71	; 0x47
    468e:	18fb      	adds	r3, r7, r3
    4690:	781a      	ldrb	r2, [r3, #0]
    4692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4694:	0011      	movs	r1, r2
    4696:	0018      	movs	r0, r3
    4698:	4b5a      	ldr	r3, [pc, #360]	; (4804 <_spi_set_config+0x1f8>)
    469a:	4798      	blx	r3
    469c:	0003      	movs	r3, r0
    469e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    46a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46a2:	3301      	adds	r3, #1
    46a4:	d00d      	beq.n	46c2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    46a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46a8:	b2da      	uxtb	r2, r3
    46aa:	231c      	movs	r3, #28
    46ac:	18fb      	adds	r3, r7, r3
    46ae:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    46b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46b2:	0c1b      	lsrs	r3, r3, #16
    46b4:	b2db      	uxtb	r3, r3
    46b6:	221c      	movs	r2, #28
    46b8:	18ba      	adds	r2, r7, r2
    46ba:	0011      	movs	r1, r2
    46bc:	0018      	movs	r0, r3
    46be:	4b52      	ldr	r3, [pc, #328]	; (4808 <_spi_set_config+0x1fc>)
    46c0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    46c2:	2347      	movs	r3, #71	; 0x47
    46c4:	18fb      	adds	r3, r7, r3
    46c6:	781a      	ldrb	r2, [r3, #0]
    46c8:	2347      	movs	r3, #71	; 0x47
    46ca:	18fb      	adds	r3, r7, r3
    46cc:	3201      	adds	r2, #1
    46ce:	701a      	strb	r2, [r3, #0]
    46d0:	2347      	movs	r3, #71	; 0x47
    46d2:	18fb      	adds	r3, r7, r3
    46d4:	781b      	ldrb	r3, [r3, #0]
    46d6:	2b03      	cmp	r3, #3
    46d8:	d9cd      	bls.n	4676 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    46da:	683b      	ldr	r3, [r7, #0]
    46dc:	781a      	ldrb	r2, [r3, #0]
    46de:	687b      	ldr	r3, [r7, #4]
    46e0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    46e2:	683b      	ldr	r3, [r7, #0]
    46e4:	7c1a      	ldrb	r2, [r3, #16]
    46e6:	687b      	ldr	r3, [r7, #4]
    46e8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    46ea:	683b      	ldr	r3, [r7, #0]
    46ec:	7c9a      	ldrb	r2, [r3, #18]
    46ee:	687b      	ldr	r3, [r7, #4]
    46f0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    46f2:	683b      	ldr	r3, [r7, #0]
    46f4:	7d1a      	ldrb	r2, [r3, #20]
    46f6:	687b      	ldr	r3, [r7, #4]
    46f8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    46fa:	230a      	movs	r3, #10
    46fc:	18fb      	adds	r3, r7, r3
    46fe:	2200      	movs	r2, #0
    4700:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4702:	2300      	movs	r3, #0
    4704:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    4706:	2300      	movs	r3, #0
    4708:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    470a:	683b      	ldr	r3, [r7, #0]
    470c:	781b      	ldrb	r3, [r3, #0]
    470e:	2b01      	cmp	r3, #1
    4710:	d129      	bne.n	4766 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4712:	687b      	ldr	r3, [r7, #4]
    4714:	681b      	ldr	r3, [r3, #0]
    4716:	0018      	movs	r0, r3
    4718:	4b3c      	ldr	r3, [pc, #240]	; (480c <_spi_set_config+0x200>)
    471a:	4798      	blx	r3
    471c:	0003      	movs	r3, r0
    471e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4722:	3314      	adds	r3, #20
    4724:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4726:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4728:	b2db      	uxtb	r3, r3
    472a:	0018      	movs	r0, r3
    472c:	4b38      	ldr	r3, [pc, #224]	; (4810 <_spi_set_config+0x204>)
    472e:	4798      	blx	r3
    4730:	0003      	movs	r3, r0
    4732:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4734:	683b      	ldr	r3, [r7, #0]
    4736:	699b      	ldr	r3, [r3, #24]
    4738:	2223      	movs	r2, #35	; 0x23
    473a:	18bc      	adds	r4, r7, r2
    473c:	220a      	movs	r2, #10
    473e:	18ba      	adds	r2, r7, r2
    4740:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4742:	0018      	movs	r0, r3
    4744:	4b33      	ldr	r3, [pc, #204]	; (4814 <_spi_set_config+0x208>)
    4746:	4798      	blx	r3
    4748:	0003      	movs	r3, r0
    474a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    474c:	2323      	movs	r3, #35	; 0x23
    474e:	18fb      	adds	r3, r7, r3
    4750:	781b      	ldrb	r3, [r3, #0]
    4752:	2b00      	cmp	r3, #0
    4754:	d001      	beq.n	475a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4756:	2317      	movs	r3, #23
    4758:	e04e      	b.n	47f8 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    475a:	230a      	movs	r3, #10
    475c:	18fb      	adds	r3, r7, r3
    475e:	881b      	ldrh	r3, [r3, #0]
    4760:	b2da      	uxtb	r2, r3
    4762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4764:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    4766:	683b      	ldr	r3, [r7, #0]
    4768:	685b      	ldr	r3, [r3, #4]
    476a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    476c:	4313      	orrs	r3, r2
    476e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4770:	683b      	ldr	r3, [r7, #0]
    4772:	689b      	ldr	r3, [r3, #8]
    4774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4776:	4313      	orrs	r3, r2
    4778:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    477a:	683b      	ldr	r3, [r7, #0]
    477c:	68db      	ldr	r3, [r3, #12]
    477e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4780:	4313      	orrs	r3, r2
    4782:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4784:	683b      	ldr	r3, [r7, #0]
    4786:	7c1b      	ldrb	r3, [r3, #16]
    4788:	001a      	movs	r2, r3
    478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    478c:	4313      	orrs	r3, r2
    478e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4790:	683b      	ldr	r3, [r7, #0]
    4792:	7c5b      	ldrb	r3, [r3, #17]
    4794:	2b00      	cmp	r3, #0
    4796:	d103      	bne.n	47a0 <_spi_set_config+0x194>
    4798:	4b1f      	ldr	r3, [pc, #124]	; (4818 <_spi_set_config+0x20c>)
    479a:	4798      	blx	r3
    479c:	1e03      	subs	r3, r0, #0
    479e:	d003      	beq.n	47a8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    47a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    47a2:	2280      	movs	r2, #128	; 0x80
    47a4:	4313      	orrs	r3, r2
    47a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    47a8:	683b      	ldr	r3, [r7, #0]
    47aa:	7c9b      	ldrb	r3, [r3, #18]
    47ac:	2b00      	cmp	r3, #0
    47ae:	d004      	beq.n	47ba <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    47b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    47b2:	2280      	movs	r2, #128	; 0x80
    47b4:	0292      	lsls	r2, r2, #10
    47b6:	4313      	orrs	r3, r2
    47b8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    47ba:	683b      	ldr	r3, [r7, #0]
    47bc:	7cdb      	ldrb	r3, [r3, #19]
    47be:	2b00      	cmp	r3, #0
    47c0:	d004      	beq.n	47cc <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    47c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    47c4:	2280      	movs	r2, #128	; 0x80
    47c6:	0092      	lsls	r2, r2, #2
    47c8:	4313      	orrs	r3, r2
    47ca:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    47cc:	683b      	ldr	r3, [r7, #0]
    47ce:	7d1b      	ldrb	r3, [r3, #20]
    47d0:	2b00      	cmp	r3, #0
    47d2:	d004      	beq.n	47de <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    47d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    47d6:	2280      	movs	r2, #128	; 0x80
    47d8:	0192      	lsls	r2, r2, #6
    47da:	4313      	orrs	r3, r2
    47dc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    47de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47e0:	681a      	ldr	r2, [r3, #0]
    47e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    47e4:	431a      	orrs	r2, r3
    47e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47e8:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    47ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47ec:	685a      	ldr	r2, [r3, #4]
    47ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    47f0:	431a      	orrs	r2, r3
    47f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47f4:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    47f6:	2300      	movs	r3, #0
}
    47f8:	0018      	movs	r0, r3
    47fa:	46bd      	mov	sp, r7
    47fc:	b013      	add	sp, #76	; 0x4c
    47fe:	bd90      	pop	{r4, r7, pc}
    4800:	00004101 	.word	0x00004101
    4804:	00003da1 	.word	0x00003da1
    4808:	00006d5d 	.word	0x00006d5d
    480c:	00003f5d 	.word	0x00003f5d
    4810:	00006b95 	.word	0x00006b95
    4814:	00003ad7 	.word	0x00003ad7
    4818:	00004275 	.word	0x00004275

0000481c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    481c:	b590      	push	{r4, r7, lr}
    481e:	b08b      	sub	sp, #44	; 0x2c
    4820:	af00      	add	r7, sp, #0
    4822:	60f8      	str	r0, [r7, #12]
    4824:	60b9      	str	r1, [r7, #8]
    4826:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4828:	68fb      	ldr	r3, [r7, #12]
    482a:	68ba      	ldr	r2, [r7, #8]
    482c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    482e:	68fb      	ldr	r3, [r7, #12]
    4830:	681b      	ldr	r3, [r3, #0]
    4832:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4834:	6a3b      	ldr	r3, [r7, #32]
    4836:	681b      	ldr	r3, [r3, #0]
    4838:	2202      	movs	r2, #2
    483a:	4013      	ands	r3, r2
    483c:	d001      	beq.n	4842 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    483e:	231c      	movs	r3, #28
    4840:	e09c      	b.n	497c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4842:	6a3b      	ldr	r3, [r7, #32]
    4844:	681b      	ldr	r3, [r3, #0]
    4846:	2201      	movs	r2, #1
    4848:	4013      	ands	r3, r2
    484a:	d001      	beq.n	4850 <spi_init+0x34>
		return STATUS_BUSY;
    484c:	2305      	movs	r3, #5
    484e:	e095      	b.n	497c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4850:	68fb      	ldr	r3, [r7, #12]
    4852:	681b      	ldr	r3, [r3, #0]
    4854:	0018      	movs	r0, r3
    4856:	4b4b      	ldr	r3, [pc, #300]	; (4984 <spi_init+0x168>)
    4858:	4798      	blx	r3
    485a:	0003      	movs	r3, r0
    485c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    485e:	69fb      	ldr	r3, [r7, #28]
    4860:	3302      	adds	r3, #2
    4862:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4864:	69fb      	ldr	r3, [r7, #28]
    4866:	3314      	adds	r3, #20
    4868:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    486a:	2201      	movs	r2, #1
    486c:	69bb      	ldr	r3, [r7, #24]
    486e:	409a      	lsls	r2, r3
    4870:	0013      	movs	r3, r2
    4872:	0019      	movs	r1, r3
    4874:	2002      	movs	r0, #2
    4876:	4b44      	ldr	r3, [pc, #272]	; (4988 <spi_init+0x16c>)
    4878:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    487a:	2310      	movs	r3, #16
    487c:	18fb      	adds	r3, r7, r3
    487e:	0018      	movs	r0, r3
    4880:	4b42      	ldr	r3, [pc, #264]	; (498c <spi_init+0x170>)
    4882:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4884:	687b      	ldr	r3, [r7, #4]
    4886:	2224      	movs	r2, #36	; 0x24
    4888:	5c9a      	ldrb	r2, [r3, r2]
    488a:	2310      	movs	r3, #16
    488c:	18fb      	adds	r3, r7, r3
    488e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4890:	697b      	ldr	r3, [r7, #20]
    4892:	b2db      	uxtb	r3, r3
    4894:	2210      	movs	r2, #16
    4896:	18ba      	adds	r2, r7, r2
    4898:	0011      	movs	r1, r2
    489a:	0018      	movs	r0, r3
    489c:	4b3c      	ldr	r3, [pc, #240]	; (4990 <spi_init+0x174>)
    489e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    48a0:	697b      	ldr	r3, [r7, #20]
    48a2:	b2db      	uxtb	r3, r3
    48a4:	0018      	movs	r0, r3
    48a6:	4b3b      	ldr	r3, [pc, #236]	; (4994 <spi_init+0x178>)
    48a8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    48aa:	687b      	ldr	r3, [r7, #4]
    48ac:	2224      	movs	r2, #36	; 0x24
    48ae:	5c9b      	ldrb	r3, [r3, r2]
    48b0:	2100      	movs	r1, #0
    48b2:	0018      	movs	r0, r3
    48b4:	4b38      	ldr	r3, [pc, #224]	; (4998 <spi_init+0x17c>)
    48b6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	781b      	ldrb	r3, [r3, #0]
    48bc:	2b01      	cmp	r3, #1
    48be:	d105      	bne.n	48cc <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    48c0:	6a3b      	ldr	r3, [r7, #32]
    48c2:	681b      	ldr	r3, [r3, #0]
    48c4:	220c      	movs	r2, #12
    48c6:	431a      	orrs	r2, r3
    48c8:	6a3b      	ldr	r3, [r7, #32]
    48ca:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    48cc:	2327      	movs	r3, #39	; 0x27
    48ce:	18fb      	adds	r3, r7, r3
    48d0:	2200      	movs	r2, #0
    48d2:	701a      	strb	r2, [r3, #0]
    48d4:	e010      	b.n	48f8 <spi_init+0xdc>
		module->callback[i]        = NULL;
    48d6:	2327      	movs	r3, #39	; 0x27
    48d8:	18fb      	adds	r3, r7, r3
    48da:	781b      	ldrb	r3, [r3, #0]
    48dc:	68fa      	ldr	r2, [r7, #12]
    48de:	3302      	adds	r3, #2
    48e0:	009b      	lsls	r3, r3, #2
    48e2:	18d3      	adds	r3, r2, r3
    48e4:	3304      	adds	r3, #4
    48e6:	2200      	movs	r2, #0
    48e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    48ea:	2327      	movs	r3, #39	; 0x27
    48ec:	18fb      	adds	r3, r7, r3
    48ee:	781a      	ldrb	r2, [r3, #0]
    48f0:	2327      	movs	r3, #39	; 0x27
    48f2:	18fb      	adds	r3, r7, r3
    48f4:	3201      	adds	r2, #1
    48f6:	701a      	strb	r2, [r3, #0]
    48f8:	2327      	movs	r3, #39	; 0x27
    48fa:	18fb      	adds	r3, r7, r3
    48fc:	781b      	ldrb	r3, [r3, #0]
    48fe:	2b06      	cmp	r3, #6
    4900:	d9e9      	bls.n	48d6 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    4902:	68fb      	ldr	r3, [r7, #12]
    4904:	2200      	movs	r2, #0
    4906:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4908:	68fb      	ldr	r3, [r7, #12]
    490a:	2200      	movs	r2, #0
    490c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    490e:	68fb      	ldr	r3, [r7, #12]
    4910:	2200      	movs	r2, #0
    4912:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4914:	68fb      	ldr	r3, [r7, #12]
    4916:	2200      	movs	r2, #0
    4918:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    491a:	68fb      	ldr	r3, [r7, #12]
    491c:	2236      	movs	r2, #54	; 0x36
    491e:	2100      	movs	r1, #0
    4920:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    4922:	68fb      	ldr	r3, [r7, #12]
    4924:	2237      	movs	r2, #55	; 0x37
    4926:	2100      	movs	r1, #0
    4928:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    492a:	68fb      	ldr	r3, [r7, #12]
    492c:	2238      	movs	r2, #56	; 0x38
    492e:	2100      	movs	r1, #0
    4930:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    4932:	68fb      	ldr	r3, [r7, #12]
    4934:	2203      	movs	r2, #3
    4936:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    4938:	68fb      	ldr	r3, [r7, #12]
    493a:	2200      	movs	r2, #0
    493c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    493e:	68fb      	ldr	r3, [r7, #12]
    4940:	681b      	ldr	r3, [r3, #0]
    4942:	2213      	movs	r2, #19
    4944:	18bc      	adds	r4, r7, r2
    4946:	0018      	movs	r0, r3
    4948:	4b0e      	ldr	r3, [pc, #56]	; (4984 <spi_init+0x168>)
    494a:	4798      	blx	r3
    494c:	0003      	movs	r3, r0
    494e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4950:	4a12      	ldr	r2, [pc, #72]	; (499c <spi_init+0x180>)
    4952:	2313      	movs	r3, #19
    4954:	18fb      	adds	r3, r7, r3
    4956:	781b      	ldrb	r3, [r3, #0]
    4958:	0011      	movs	r1, r2
    495a:	0018      	movs	r0, r3
    495c:	4b10      	ldr	r3, [pc, #64]	; (49a0 <spi_init+0x184>)
    495e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4960:	2313      	movs	r3, #19
    4962:	18fb      	adds	r3, r7, r3
    4964:	781a      	ldrb	r2, [r3, #0]
    4966:	4b0f      	ldr	r3, [pc, #60]	; (49a4 <spi_init+0x188>)
    4968:	0092      	lsls	r2, r2, #2
    496a:	68f9      	ldr	r1, [r7, #12]
    496c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    496e:	687a      	ldr	r2, [r7, #4]
    4970:	68fb      	ldr	r3, [r7, #12]
    4972:	0011      	movs	r1, r2
    4974:	0018      	movs	r0, r3
    4976:	4b0c      	ldr	r3, [pc, #48]	; (49a8 <spi_init+0x18c>)
    4978:	4798      	blx	r3
    497a:	0003      	movs	r3, r0
}
    497c:	0018      	movs	r0, r3
    497e:	46bd      	mov	sp, r7
    4980:	b00b      	add	sp, #44	; 0x2c
    4982:	bd90      	pop	{r4, r7, pc}
    4984:	00003f5d 	.word	0x00003f5d
    4988:	00004219 	.word	0x00004219
    498c:	00004201 	.word	0x00004201
    4990:	00006a71 	.word	0x00006a71
    4994:	00006ab5 	.word	0x00006ab5
    4998:	00003d15 	.word	0x00003d15
    499c:	00004e75 	.word	0x00004e75
    49a0:	00003fc1 	.word	0x00003fc1
    49a4:	20000a04 	.word	0x20000a04
    49a8:	0000460d 	.word	0x0000460d

000049ac <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    49ac:	b590      	push	{r4, r7, lr}
    49ae:	b087      	sub	sp, #28
    49b0:	af00      	add	r7, sp, #0
    49b2:	60f8      	str	r0, [r7, #12]
    49b4:	60b9      	str	r1, [r7, #8]
    49b6:	0019      	movs	r1, r3
    49b8:	1dbb      	adds	r3, r7, #6
    49ba:	801a      	strh	r2, [r3, #0]
    49bc:	1d3b      	adds	r3, r7, #4
    49be:	1c0a      	adds	r2, r1, #0
    49c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    49c2:	68fb      	ldr	r3, [r7, #12]
    49c4:	2238      	movs	r2, #56	; 0x38
    49c6:	5c9b      	ldrb	r3, [r3, r2]
    49c8:	b2db      	uxtb	r3, r3
    49ca:	2b05      	cmp	r3, #5
    49cc:	d101      	bne.n	49d2 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    49ce:	2305      	movs	r3, #5
    49d0:	e07a      	b.n	4ac8 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    49d2:	1dbb      	adds	r3, r7, #6
    49d4:	881b      	ldrh	r3, [r3, #0]
    49d6:	2b00      	cmp	r3, #0
    49d8:	d101      	bne.n	49de <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    49da:	2317      	movs	r3, #23
    49dc:	e074      	b.n	4ac8 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    49de:	68fb      	ldr	r3, [r7, #12]
    49e0:	79db      	ldrb	r3, [r3, #7]
    49e2:	2201      	movs	r2, #1
    49e4:	4053      	eors	r3, r2
    49e6:	b2db      	uxtb	r3, r3
    49e8:	2b00      	cmp	r3, #0
    49ea:	d001      	beq.n	49f0 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    49ec:	231c      	movs	r3, #28
    49ee:	e06b      	b.n	4ac8 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    49f0:	2316      	movs	r3, #22
    49f2:	18fb      	adds	r3, r7, r3
    49f4:	2200      	movs	r2, #0
    49f6:	801a      	strh	r2, [r3, #0]

	while (length--) {
    49f8:	e05e      	b.n	4ab8 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    49fa:	68fb      	ldr	r3, [r7, #12]
    49fc:	795b      	ldrb	r3, [r3, #5]
    49fe:	2b01      	cmp	r3, #1
    4a00:	d112      	bne.n	4a28 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    4a02:	46c0      	nop			; (mov r8, r8)
    4a04:	68fb      	ldr	r3, [r7, #12]
    4a06:	0018      	movs	r0, r3
    4a08:	4b31      	ldr	r3, [pc, #196]	; (4ad0 <spi_read_buffer_wait+0x124>)
    4a0a:	4798      	blx	r3
    4a0c:	0003      	movs	r3, r0
    4a0e:	001a      	movs	r2, r3
    4a10:	2301      	movs	r3, #1
    4a12:	4053      	eors	r3, r2
    4a14:	b2db      	uxtb	r3, r3
    4a16:	2b00      	cmp	r3, #0
    4a18:	d1f4      	bne.n	4a04 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    4a1a:	1d3b      	adds	r3, r7, #4
    4a1c:	881a      	ldrh	r2, [r3, #0]
    4a1e:	68fb      	ldr	r3, [r7, #12]
    4a20:	0011      	movs	r1, r2
    4a22:	0018      	movs	r0, r3
    4a24:	4b2b      	ldr	r3, [pc, #172]	; (4ad4 <spi_read_buffer_wait+0x128>)
    4a26:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    4a28:	46c0      	nop			; (mov r8, r8)
    4a2a:	68fb      	ldr	r3, [r7, #12]
    4a2c:	0018      	movs	r0, r3
    4a2e:	4b2a      	ldr	r3, [pc, #168]	; (4ad8 <spi_read_buffer_wait+0x12c>)
    4a30:	4798      	blx	r3
    4a32:	0003      	movs	r3, r0
    4a34:	001a      	movs	r2, r3
    4a36:	2301      	movs	r3, #1
    4a38:	4053      	eors	r3, r2
    4a3a:	b2db      	uxtb	r3, r3
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d1f4      	bne.n	4a2a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    4a40:	2312      	movs	r3, #18
    4a42:	18fb      	adds	r3, r7, r3
    4a44:	2200      	movs	r2, #0
    4a46:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    4a48:	2315      	movs	r3, #21
    4a4a:	18fc      	adds	r4, r7, r3
    4a4c:	2312      	movs	r3, #18
    4a4e:	18fa      	adds	r2, r7, r3
    4a50:	68fb      	ldr	r3, [r7, #12]
    4a52:	0011      	movs	r1, r2
    4a54:	0018      	movs	r0, r3
    4a56:	4b21      	ldr	r3, [pc, #132]	; (4adc <spi_read_buffer_wait+0x130>)
    4a58:	4798      	blx	r3
    4a5a:	0003      	movs	r3, r0
    4a5c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    4a5e:	2315      	movs	r3, #21
    4a60:	18fb      	adds	r3, r7, r3
    4a62:	781b      	ldrb	r3, [r3, #0]
    4a64:	2b00      	cmp	r3, #0
    4a66:	d003      	beq.n	4a70 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    4a68:	2315      	movs	r3, #21
    4a6a:	18fb      	adds	r3, r7, r3
    4a6c:	781b      	ldrb	r3, [r3, #0]
    4a6e:	e02b      	b.n	4ac8 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4a70:	2316      	movs	r3, #22
    4a72:	18fb      	adds	r3, r7, r3
    4a74:	881b      	ldrh	r3, [r3, #0]
    4a76:	2216      	movs	r2, #22
    4a78:	18ba      	adds	r2, r7, r2
    4a7a:	1c59      	adds	r1, r3, #1
    4a7c:	8011      	strh	r1, [r2, #0]
    4a7e:	001a      	movs	r2, r3
    4a80:	68bb      	ldr	r3, [r7, #8]
    4a82:	189b      	adds	r3, r3, r2
    4a84:	2212      	movs	r2, #18
    4a86:	18ba      	adds	r2, r7, r2
    4a88:	8812      	ldrh	r2, [r2, #0]
    4a8a:	b2d2      	uxtb	r2, r2
    4a8c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4a8e:	68fb      	ldr	r3, [r7, #12]
    4a90:	799b      	ldrb	r3, [r3, #6]
    4a92:	2b01      	cmp	r3, #1
    4a94:	d110      	bne.n	4ab8 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    4a96:	2316      	movs	r3, #22
    4a98:	18fb      	adds	r3, r7, r3
    4a9a:	881b      	ldrh	r3, [r3, #0]
    4a9c:	2216      	movs	r2, #22
    4a9e:	18ba      	adds	r2, r7, r2
    4aa0:	1c59      	adds	r1, r3, #1
    4aa2:	8011      	strh	r1, [r2, #0]
    4aa4:	001a      	movs	r2, r3
    4aa6:	68bb      	ldr	r3, [r7, #8]
    4aa8:	189b      	adds	r3, r3, r2
    4aaa:	2212      	movs	r2, #18
    4aac:	18ba      	adds	r2, r7, r2
    4aae:	8812      	ldrh	r2, [r2, #0]
    4ab0:	0a12      	lsrs	r2, r2, #8
    4ab2:	b292      	uxth	r2, r2
    4ab4:	b2d2      	uxtb	r2, r2
    4ab6:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4ab8:	1dbb      	adds	r3, r7, #6
    4aba:	881b      	ldrh	r3, [r3, #0]
    4abc:	1dba      	adds	r2, r7, #6
    4abe:	1e59      	subs	r1, r3, #1
    4ac0:	8011      	strh	r1, [r2, #0]
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d199      	bne.n	49fa <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    4ac6:	2300      	movs	r3, #0
}
    4ac8:	0018      	movs	r0, r3
    4aca:	46bd      	mov	sp, r7
    4acc:	b007      	add	sp, #28
    4ace:	bd90      	pop	{r4, r7, pc}
    4ad0:	000043e5 	.word	0x000043e5
    4ad4:	00004435 	.word	0x00004435
    4ad8:	0000440d 	.word	0x0000440d
    4adc:	0000447d 	.word	0x0000447d

00004ae0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4ae0:	b580      	push	{r7, lr}
    4ae2:	b086      	sub	sp, #24
    4ae4:	af00      	add	r7, sp, #0
    4ae6:	60f8      	str	r0, [r7, #12]
    4ae8:	60b9      	str	r1, [r7, #8]
    4aea:	1dfb      	adds	r3, r7, #7
    4aec:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	795b      	ldrb	r3, [r3, #5]
    4af2:	2b01      	cmp	r3, #1
    4af4:	d001      	beq.n	4afa <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    4af6:	2315      	movs	r3, #21
    4af8:	e05c      	b.n	4bb4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    4afa:	68fb      	ldr	r3, [r7, #12]
    4afc:	7a1b      	ldrb	r3, [r3, #8]
    4afe:	2201      	movs	r2, #1
    4b00:	4053      	eors	r3, r2
    4b02:	b2db      	uxtb	r3, r3
    4b04:	2b00      	cmp	r3, #0
    4b06:	d054      	beq.n	4bb2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    4b08:	1dfb      	adds	r3, r7, #7
    4b0a:	781b      	ldrb	r3, [r3, #0]
    4b0c:	2b00      	cmp	r3, #0
    4b0e:	d04a      	beq.n	4ba6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    4b10:	68bb      	ldr	r3, [r7, #8]
    4b12:	785b      	ldrb	r3, [r3, #1]
    4b14:	2b00      	cmp	r3, #0
    4b16:	d03f      	beq.n	4b98 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    4b18:	68fb      	ldr	r3, [r7, #12]
    4b1a:	0018      	movs	r0, r3
    4b1c:	4b27      	ldr	r3, [pc, #156]	; (4bbc <spi_select_slave+0xdc>)
    4b1e:	4798      	blx	r3
    4b20:	0003      	movs	r3, r0
    4b22:	001a      	movs	r2, r3
    4b24:	2301      	movs	r3, #1
    4b26:	4053      	eors	r3, r2
    4b28:	b2db      	uxtb	r3, r3
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	d007      	beq.n	4b3e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    4b2e:	68bb      	ldr	r3, [r7, #8]
    4b30:	781b      	ldrb	r3, [r3, #0]
    4b32:	2101      	movs	r1, #1
    4b34:	0018      	movs	r0, r3
    4b36:	4b22      	ldr	r3, [pc, #136]	; (4bc0 <spi_select_slave+0xe0>)
    4b38:	4798      	blx	r3
					return STATUS_BUSY;
    4b3a:	2305      	movs	r3, #5
    4b3c:	e03a      	b.n	4bb4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4b3e:	68bb      	ldr	r3, [r7, #8]
    4b40:	781b      	ldrb	r3, [r3, #0]
    4b42:	2100      	movs	r1, #0
    4b44:	0018      	movs	r0, r3
    4b46:	4b1e      	ldr	r3, [pc, #120]	; (4bc0 <spi_select_slave+0xe0>)
    4b48:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    4b4a:	68bb      	ldr	r3, [r7, #8]
    4b4c:	789b      	ldrb	r3, [r3, #2]
    4b4e:	b29a      	uxth	r2, r3
    4b50:	68fb      	ldr	r3, [r7, #12]
    4b52:	0011      	movs	r1, r2
    4b54:	0018      	movs	r0, r3
    4b56:	4b1b      	ldr	r3, [pc, #108]	; (4bc4 <spi_select_slave+0xe4>)
    4b58:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    4b5a:	68fb      	ldr	r3, [r7, #12]
    4b5c:	79db      	ldrb	r3, [r3, #7]
    4b5e:	2201      	movs	r2, #1
    4b60:	4053      	eors	r3, r2
    4b62:	b2db      	uxtb	r3, r3
    4b64:	2b00      	cmp	r3, #0
    4b66:	d024      	beq.n	4bb2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4b68:	46c0      	nop			; (mov r8, r8)
    4b6a:	68fb      	ldr	r3, [r7, #12]
    4b6c:	0018      	movs	r0, r3
    4b6e:	4b16      	ldr	r3, [pc, #88]	; (4bc8 <spi_select_slave+0xe8>)
    4b70:	4798      	blx	r3
    4b72:	0003      	movs	r3, r0
    4b74:	001a      	movs	r2, r3
    4b76:	2301      	movs	r3, #1
    4b78:	4053      	eors	r3, r2
    4b7a:	b2db      	uxtb	r3, r3
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	d1f4      	bne.n	4b6a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4b80:	2316      	movs	r3, #22
    4b82:	18fb      	adds	r3, r7, r3
    4b84:	2200      	movs	r2, #0
    4b86:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4b88:	2316      	movs	r3, #22
    4b8a:	18fa      	adds	r2, r7, r3
    4b8c:	68fb      	ldr	r3, [r7, #12]
    4b8e:	0011      	movs	r1, r2
    4b90:	0018      	movs	r0, r3
    4b92:	4b0e      	ldr	r3, [pc, #56]	; (4bcc <spi_select_slave+0xec>)
    4b94:	4798      	blx	r3
    4b96:	e00c      	b.n	4bb2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4b98:	68bb      	ldr	r3, [r7, #8]
    4b9a:	781b      	ldrb	r3, [r3, #0]
    4b9c:	2100      	movs	r1, #0
    4b9e:	0018      	movs	r0, r3
    4ba0:	4b07      	ldr	r3, [pc, #28]	; (4bc0 <spi_select_slave+0xe0>)
    4ba2:	4798      	blx	r3
    4ba4:	e005      	b.n	4bb2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    4ba6:	68bb      	ldr	r3, [r7, #8]
    4ba8:	781b      	ldrb	r3, [r3, #0]
    4baa:	2101      	movs	r1, #1
    4bac:	0018      	movs	r0, r3
    4bae:	4b04      	ldr	r3, [pc, #16]	; (4bc0 <spi_select_slave+0xe0>)
    4bb0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    4bb2:	2300      	movs	r3, #0
}
    4bb4:	0018      	movs	r0, r3
    4bb6:	46bd      	mov	sp, r7
    4bb8:	b006      	add	sp, #24
    4bba:	bd80      	pop	{r7, pc}
    4bbc:	000043e5 	.word	0x000043e5
    4bc0:	000041ad 	.word	0x000041ad
    4bc4:	00004435 	.word	0x00004435
    4bc8:	0000440d 	.word	0x0000440d
    4bcc:	0000447d 	.word	0x0000447d

00004bd0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4bd0:	b580      	push	{r7, lr}
    4bd2:	b086      	sub	sp, #24
    4bd4:	af00      	add	r7, sp, #0
    4bd6:	60f8      	str	r0, [r7, #12]
    4bd8:	60b9      	str	r1, [r7, #8]
    4bda:	1dbb      	adds	r3, r7, #6
    4bdc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4bde:	68fb      	ldr	r3, [r7, #12]
    4be0:	2238      	movs	r2, #56	; 0x38
    4be2:	5c9b      	ldrb	r3, [r3, r2]
    4be4:	b2db      	uxtb	r3, r3
    4be6:	2b05      	cmp	r3, #5
    4be8:	d101      	bne.n	4bee <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4bea:	2305      	movs	r3, #5
    4bec:	e087      	b.n	4cfe <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    4bee:	1dbb      	adds	r3, r7, #6
    4bf0:	881b      	ldrh	r3, [r3, #0]
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	d101      	bne.n	4bfa <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    4bf6:	2317      	movs	r3, #23
    4bf8:	e081      	b.n	4cfe <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    4bfa:	2316      	movs	r3, #22
    4bfc:	18fb      	adds	r3, r7, r3
    4bfe:	2200      	movs	r2, #0
    4c00:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    4c02:	2314      	movs	r3, #20
    4c04:	18fb      	adds	r3, r7, r3
    4c06:	1dba      	adds	r2, r7, #6
    4c08:	8812      	ldrh	r2, [r2, #0]
    4c0a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    4c0c:	e05f      	b.n	4cce <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	68fb      	ldr	r3, [r7, #12]
    4c12:	0018      	movs	r0, r3
    4c14:	4b3c      	ldr	r3, [pc, #240]	; (4d08 <spi_write_buffer_wait+0x138>)
    4c16:	4798      	blx	r3
    4c18:	0003      	movs	r3, r0
    4c1a:	001a      	movs	r2, r3
    4c1c:	2301      	movs	r3, #1
    4c1e:	4053      	eors	r3, r2
    4c20:	b2db      	uxtb	r3, r3
    4c22:	2b00      	cmp	r3, #0
    4c24:	d1f4      	bne.n	4c10 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    4c26:	2316      	movs	r3, #22
    4c28:	18fb      	adds	r3, r7, r3
    4c2a:	881b      	ldrh	r3, [r3, #0]
    4c2c:	2216      	movs	r2, #22
    4c2e:	18ba      	adds	r2, r7, r2
    4c30:	1c59      	adds	r1, r3, #1
    4c32:	8011      	strh	r1, [r2, #0]
    4c34:	001a      	movs	r2, r3
    4c36:	68bb      	ldr	r3, [r7, #8]
    4c38:	189b      	adds	r3, r3, r2
    4c3a:	781a      	ldrb	r2, [r3, #0]
    4c3c:	2312      	movs	r3, #18
    4c3e:	18fb      	adds	r3, r7, r3
    4c40:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c42:	68fb      	ldr	r3, [r7, #12]
    4c44:	799b      	ldrb	r3, [r3, #6]
    4c46:	2b01      	cmp	r3, #1
    4c48:	d115      	bne.n	4c76 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4c4a:	2316      	movs	r3, #22
    4c4c:	18fb      	adds	r3, r7, r3
    4c4e:	881b      	ldrh	r3, [r3, #0]
    4c50:	2216      	movs	r2, #22
    4c52:	18ba      	adds	r2, r7, r2
    4c54:	1c59      	adds	r1, r3, #1
    4c56:	8011      	strh	r1, [r2, #0]
    4c58:	001a      	movs	r2, r3
    4c5a:	68bb      	ldr	r3, [r7, #8]
    4c5c:	189b      	adds	r3, r3, r2
    4c5e:	781b      	ldrb	r3, [r3, #0]
    4c60:	021b      	lsls	r3, r3, #8
    4c62:	b21a      	sxth	r2, r3
    4c64:	2312      	movs	r3, #18
    4c66:	18fb      	adds	r3, r7, r3
    4c68:	2100      	movs	r1, #0
    4c6a:	5e5b      	ldrsh	r3, [r3, r1]
    4c6c:	4313      	orrs	r3, r2
    4c6e:	b21a      	sxth	r2, r3
    4c70:	2312      	movs	r3, #18
    4c72:	18fb      	adds	r3, r7, r3
    4c74:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    4c76:	2312      	movs	r3, #18
    4c78:	18fb      	adds	r3, r7, r3
    4c7a:	881a      	ldrh	r2, [r3, #0]
    4c7c:	68fb      	ldr	r3, [r7, #12]
    4c7e:	0011      	movs	r1, r2
    4c80:	0018      	movs	r0, r3
    4c82:	4b22      	ldr	r3, [pc, #136]	; (4d0c <spi_write_buffer_wait+0x13c>)
    4c84:	4798      	blx	r3

		if (module->receiver_enabled) {
    4c86:	68fb      	ldr	r3, [r7, #12]
    4c88:	79db      	ldrb	r3, [r3, #7]
    4c8a:	2214      	movs	r2, #20
    4c8c:	18ba      	adds	r2, r7, r2
    4c8e:	2114      	movs	r1, #20
    4c90:	1879      	adds	r1, r7, r1
    4c92:	8809      	ldrh	r1, [r1, #0]
    4c94:	8011      	strh	r1, [r2, #0]
    4c96:	2b00      	cmp	r3, #0
    4c98:	d019      	beq.n	4cce <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	68fb      	ldr	r3, [r7, #12]
    4c9e:	0018      	movs	r0, r3
    4ca0:	4b1b      	ldr	r3, [pc, #108]	; (4d10 <spi_write_buffer_wait+0x140>)
    4ca2:	4798      	blx	r3
    4ca4:	0003      	movs	r3, r0
    4ca6:	001a      	movs	r2, r3
    4ca8:	2301      	movs	r3, #1
    4caa:	4053      	eors	r3, r2
    4cac:	b2db      	uxtb	r3, r3
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d1f4      	bne.n	4c9c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    4cb2:	2310      	movs	r3, #16
    4cb4:	18fa      	adds	r2, r7, r3
    4cb6:	68fb      	ldr	r3, [r7, #12]
    4cb8:	0011      	movs	r1, r2
    4cba:	0018      	movs	r0, r3
    4cbc:	4b15      	ldr	r3, [pc, #84]	; (4d14 <spi_write_buffer_wait+0x144>)
    4cbe:	4798      	blx	r3
			flush_length--;
    4cc0:	2314      	movs	r3, #20
    4cc2:	18fb      	adds	r3, r7, r3
    4cc4:	881a      	ldrh	r2, [r3, #0]
    4cc6:	2314      	movs	r3, #20
    4cc8:	18fb      	adds	r3, r7, r3
    4cca:	3a01      	subs	r2, #1
    4ccc:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4cce:	1dbb      	adds	r3, r7, #6
    4cd0:	881b      	ldrh	r3, [r3, #0]
    4cd2:	1dba      	adds	r2, r7, #6
    4cd4:	1e59      	subs	r1, r3, #1
    4cd6:	8011      	strh	r1, [r2, #0]
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d198      	bne.n	4c0e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4cdc:	68fb      	ldr	r3, [r7, #12]
    4cde:	795b      	ldrb	r3, [r3, #5]
    4ce0:	2b01      	cmp	r3, #1
    4ce2:	d10b      	bne.n	4cfc <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4ce4:	46c0      	nop			; (mov r8, r8)
    4ce6:	68fb      	ldr	r3, [r7, #12]
    4ce8:	0018      	movs	r0, r3
    4cea:	4b0b      	ldr	r3, [pc, #44]	; (4d18 <spi_write_buffer_wait+0x148>)
    4cec:	4798      	blx	r3
    4cee:	0003      	movs	r3, r0
    4cf0:	001a      	movs	r2, r3
    4cf2:	2301      	movs	r3, #1
    4cf4:	4053      	eors	r3, r2
    4cf6:	b2db      	uxtb	r3, r3
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d1f4      	bne.n	4ce6 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4cfc:	2300      	movs	r3, #0
}
    4cfe:	0018      	movs	r0, r3
    4d00:	46bd      	mov	sp, r7
    4d02:	b006      	add	sp, #24
    4d04:	bd80      	pop	{r7, pc}
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	000043e5 	.word	0x000043e5
    4d0c:	00004435 	.word	0x00004435
    4d10:	0000440d 	.word	0x0000440d
    4d14:	0000447d 	.word	0x0000447d
    4d18:	000043bd 	.word	0x000043bd

00004d1c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    4d1c:	b580      	push	{r7, lr}
    4d1e:	b084      	sub	sp, #16
    4d20:	af00      	add	r7, sp, #0
    4d22:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d24:	687b      	ldr	r3, [r7, #4]
    4d26:	681b      	ldr	r3, [r3, #0]
    4d28:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d2e:	781b      	ldrb	r3, [r3, #0]
    4d30:	b2da      	uxtb	r2, r3
    4d32:	230e      	movs	r3, #14
    4d34:	18fb      	adds	r3, r7, r3
    4d36:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4d38:	687b      	ldr	r3, [r7, #4]
    4d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d3c:	1c5a      	adds	r2, r3, #1
    4d3e:	687b      	ldr	r3, [r7, #4]
    4d40:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	799b      	ldrb	r3, [r3, #6]
    4d46:	2b01      	cmp	r3, #1
    4d48:	d113      	bne.n	4d72 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d4e:	781b      	ldrb	r3, [r3, #0]
    4d50:	b2db      	uxtb	r3, r3
    4d52:	021b      	lsls	r3, r3, #8
    4d54:	b21a      	sxth	r2, r3
    4d56:	230e      	movs	r3, #14
    4d58:	18fb      	adds	r3, r7, r3
    4d5a:	2100      	movs	r1, #0
    4d5c:	5e5b      	ldrsh	r3, [r3, r1]
    4d5e:	4313      	orrs	r3, r2
    4d60:	b21a      	sxth	r2, r3
    4d62:	230e      	movs	r3, #14
    4d64:	18fb      	adds	r3, r7, r3
    4d66:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4d68:	687b      	ldr	r3, [r7, #4]
    4d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d6c:	1c5a      	adds	r2, r3, #1
    4d6e:	687b      	ldr	r3, [r7, #4]
    4d70:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4d72:	230e      	movs	r3, #14
    4d74:	18fb      	adds	r3, r7, r3
    4d76:	881b      	ldrh	r3, [r3, #0]
    4d78:	05db      	lsls	r3, r3, #23
    4d7a:	0dda      	lsrs	r2, r3, #23
    4d7c:	68bb      	ldr	r3, [r7, #8]
    4d7e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4d80:	687b      	ldr	r3, [r7, #4]
    4d82:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4d84:	b29b      	uxth	r3, r3
    4d86:	3b01      	subs	r3, #1
    4d88:	b29a      	uxth	r2, r3
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4d8e:	46c0      	nop			; (mov r8, r8)
    4d90:	46bd      	mov	sp, r7
    4d92:	b004      	add	sp, #16
    4d94:	bd80      	pop	{r7, pc}
	...

00004d98 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4d98:	b580      	push	{r7, lr}
    4d9a:	b084      	sub	sp, #16
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4da0:	687b      	ldr	r3, [r7, #4]
    4da2:	681b      	ldr	r3, [r3, #0]
    4da4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    4da6:	4b08      	ldr	r3, [pc, #32]	; (4dc8 <_spi_write_dummy+0x30>)
    4da8:	881b      	ldrh	r3, [r3, #0]
    4daa:	001a      	movs	r2, r3
    4dac:	68fb      	ldr	r3, [r7, #12]
    4dae:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4db0:	687b      	ldr	r3, [r7, #4]
    4db2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4db4:	b29b      	uxth	r3, r3
    4db6:	3b01      	subs	r3, #1
    4db8:	b29a      	uxth	r2, r3
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4dbe:	46c0      	nop			; (mov r8, r8)
    4dc0:	46bd      	mov	sp, r7
    4dc2:	b004      	add	sp, #16
    4dc4:	bd80      	pop	{r7, pc}
    4dc6:	46c0      	nop			; (mov r8, r8)
    4dc8:	20000a1c 	.word	0x20000a1c

00004dcc <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4dcc:	b580      	push	{r7, lr}
    4dce:	b084      	sub	sp, #16
    4dd0:	af00      	add	r7, sp, #0
    4dd2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4dd4:	687b      	ldr	r3, [r7, #4]
    4dd6:	681b      	ldr	r3, [r3, #0]
    4dd8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    4dda:	230a      	movs	r3, #10
    4ddc:	18fb      	adds	r3, r7, r3
    4dde:	2200      	movs	r2, #0
    4de0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4de2:	68fb      	ldr	r3, [r7, #12]
    4de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4de6:	230a      	movs	r3, #10
    4de8:	18fb      	adds	r3, r7, r3
    4dea:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4dec:	687b      	ldr	r3, [r7, #4]
    4dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4df0:	b29b      	uxth	r3, r3
    4df2:	3b01      	subs	r3, #1
    4df4:	b29a      	uxth	r2, r3
    4df6:	687b      	ldr	r3, [r7, #4]
    4df8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	46bd      	mov	sp, r7
    4dfe:	b004      	add	sp, #16
    4e00:	bd80      	pop	{r7, pc}

00004e02 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4e02:	b580      	push	{r7, lr}
    4e04:	b084      	sub	sp, #16
    4e06:	af00      	add	r7, sp, #0
    4e08:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	681b      	ldr	r3, [r3, #0]
    4e0e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4e10:	68fb      	ldr	r3, [r7, #12]
    4e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e14:	b29a      	uxth	r2, r3
    4e16:	230a      	movs	r3, #10
    4e18:	18fb      	adds	r3, r7, r3
    4e1a:	05d2      	lsls	r2, r2, #23
    4e1c:	0dd2      	lsrs	r2, r2, #23
    4e1e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e24:	220a      	movs	r2, #10
    4e26:	18ba      	adds	r2, r7, r2
    4e28:	8812      	ldrh	r2, [r2, #0]
    4e2a:	b2d2      	uxtb	r2, r2
    4e2c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4e2e:	687b      	ldr	r3, [r7, #4]
    4e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e32:	1c5a      	adds	r2, r3, #1
    4e34:	687b      	ldr	r3, [r7, #4]
    4e36:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	799b      	ldrb	r3, [r3, #6]
    4e3c:	2b01      	cmp	r3, #1
    4e3e:	d10d      	bne.n	4e5c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4e40:	687b      	ldr	r3, [r7, #4]
    4e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e44:	220a      	movs	r2, #10
    4e46:	18ba      	adds	r2, r7, r2
    4e48:	8812      	ldrh	r2, [r2, #0]
    4e4a:	0a12      	lsrs	r2, r2, #8
    4e4c:	b292      	uxth	r2, r2
    4e4e:	b2d2      	uxtb	r2, r2
    4e50:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4e52:	687b      	ldr	r3, [r7, #4]
    4e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e56:	1c5a      	adds	r2, r3, #1
    4e58:	687b      	ldr	r3, [r7, #4]
    4e5a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4e60:	b29b      	uxth	r3, r3
    4e62:	3b01      	subs	r3, #1
    4e64:	b29a      	uxth	r2, r3
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4e6a:	46c0      	nop			; (mov r8, r8)
    4e6c:	46bd      	mov	sp, r7
    4e6e:	b004      	add	sp, #16
    4e70:	bd80      	pop	{r7, pc}
	...

00004e74 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4e74:	b580      	push	{r7, lr}
    4e76:	b086      	sub	sp, #24
    4e78:	af00      	add	r7, sp, #0
    4e7a:	0002      	movs	r2, r0
    4e7c:	1dfb      	adds	r3, r7, #7
    4e7e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4e80:	1dfb      	adds	r3, r7, #7
    4e82:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    4e84:	4b96      	ldr	r3, [pc, #600]	; (50e0 <_spi_interrupt_handler+0x26c>)
    4e86:	0092      	lsls	r2, r2, #2
    4e88:	58d3      	ldr	r3, [r2, r3]
    4e8a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4e8c:	697b      	ldr	r3, [r7, #20]
    4e8e:	681b      	ldr	r3, [r3, #0]
    4e90:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4e92:	697b      	ldr	r3, [r7, #20]
    4e94:	2237      	movs	r2, #55	; 0x37
    4e96:	5c9a      	ldrb	r2, [r3, r2]
    4e98:	697b      	ldr	r3, [r7, #20]
    4e9a:	2136      	movs	r1, #54	; 0x36
    4e9c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4e9e:	230f      	movs	r3, #15
    4ea0:	18fb      	adds	r3, r7, r3
    4ea2:	400a      	ands	r2, r1
    4ea4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4ea6:	693b      	ldr	r3, [r7, #16]
    4ea8:	7e1b      	ldrb	r3, [r3, #24]
    4eaa:	b2da      	uxtb	r2, r3
    4eac:	230c      	movs	r3, #12
    4eae:	18fb      	adds	r3, r7, r3
    4eb0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4eb2:	693b      	ldr	r3, [r7, #16]
    4eb4:	7d9b      	ldrb	r3, [r3, #22]
    4eb6:	b2db      	uxtb	r3, r3
    4eb8:	b29a      	uxth	r2, r3
    4eba:	230c      	movs	r3, #12
    4ebc:	18fb      	adds	r3, r7, r3
    4ebe:	210c      	movs	r1, #12
    4ec0:	1879      	adds	r1, r7, r1
    4ec2:	8809      	ldrh	r1, [r1, #0]
    4ec4:	400a      	ands	r2, r1
    4ec6:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4ec8:	230c      	movs	r3, #12
    4eca:	18fb      	adds	r3, r7, r3
    4ecc:	881b      	ldrh	r3, [r3, #0]
    4ece:	2201      	movs	r2, #1
    4ed0:	4013      	ands	r3, r2
    4ed2:	d038      	beq.n	4f46 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4ed4:	697b      	ldr	r3, [r7, #20]
    4ed6:	795b      	ldrb	r3, [r3, #5]
    4ed8:	2b01      	cmp	r3, #1
    4eda:	d110      	bne.n	4efe <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4edc:	697b      	ldr	r3, [r7, #20]
    4ede:	7a5b      	ldrb	r3, [r3, #9]
    4ee0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d10b      	bne.n	4efe <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    4ee6:	697b      	ldr	r3, [r7, #20]
    4ee8:	0018      	movs	r0, r3
    4eea:	4b7e      	ldr	r3, [pc, #504]	; (50e4 <_spi_interrupt_handler+0x270>)
    4eec:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4eee:	697b      	ldr	r3, [r7, #20]
    4ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4ef2:	b29b      	uxth	r3, r3
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d102      	bne.n	4efe <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4ef8:	693b      	ldr	r3, [r7, #16]
    4efa:	2201      	movs	r2, #1
    4efc:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4efe:	697b      	ldr	r3, [r7, #20]
    4f00:	795b      	ldrb	r3, [r3, #5]
		if (0
    4f02:	2b01      	cmp	r3, #1
    4f04:	d11f      	bne.n	4f46 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    4f06:	697b      	ldr	r3, [r7, #20]
    4f08:	7a5b      	ldrb	r3, [r3, #9]
    4f0a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d01a      	beq.n	4f46 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4f10:	697b      	ldr	r3, [r7, #20]
    4f12:	0018      	movs	r0, r3
    4f14:	4b74      	ldr	r3, [pc, #464]	; (50e8 <_spi_interrupt_handler+0x274>)
    4f16:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    4f18:	697b      	ldr	r3, [r7, #20]
    4f1a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4f1c:	b29b      	uxth	r3, r3
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d111      	bne.n	4f46 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4f22:	693b      	ldr	r3, [r7, #16]
    4f24:	2201      	movs	r2, #1
    4f26:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4f28:	697b      	ldr	r3, [r7, #20]
    4f2a:	7a5b      	ldrb	r3, [r3, #9]
    4f2c:	b2db      	uxtb	r3, r3
    4f2e:	2b01      	cmp	r3, #1
    4f30:	d109      	bne.n	4f46 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    4f32:	697b      	ldr	r3, [r7, #20]
    4f34:	79db      	ldrb	r3, [r3, #7]
    4f36:	2201      	movs	r2, #1
    4f38:	4053      	eors	r3, r2
    4f3a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    4f3c:	2b00      	cmp	r3, #0
    4f3e:	d002      	beq.n	4f46 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4f40:	693b      	ldr	r3, [r7, #16]
    4f42:	2202      	movs	r2, #2
    4f44:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4f46:	230c      	movs	r3, #12
    4f48:	18fb      	adds	r3, r7, r3
    4f4a:	881b      	ldrh	r3, [r3, #0]
    4f4c:	2204      	movs	r2, #4
    4f4e:	4013      	ands	r3, r2
    4f50:	d100      	bne.n	4f54 <_spi_interrupt_handler+0xe0>
    4f52:	e07e      	b.n	5052 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4f54:	693b      	ldr	r3, [r7, #16]
    4f56:	8b5b      	ldrh	r3, [r3, #26]
    4f58:	b29b      	uxth	r3, r3
    4f5a:	001a      	movs	r2, r3
    4f5c:	2304      	movs	r3, #4
    4f5e:	4013      	ands	r3, r2
    4f60:	d022      	beq.n	4fa8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4f62:	697b      	ldr	r3, [r7, #20]
    4f64:	7a5b      	ldrb	r3, [r3, #9]
    4f66:	b2db      	uxtb	r3, r3
    4f68:	2b01      	cmp	r3, #1
    4f6a:	d014      	beq.n	4f96 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4f6c:	697b      	ldr	r3, [r7, #20]
    4f6e:	2238      	movs	r2, #56	; 0x38
    4f70:	211e      	movs	r1, #30
    4f72:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4f74:	697b      	ldr	r3, [r7, #20]
    4f76:	2203      	movs	r2, #3
    4f78:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4f7a:	693b      	ldr	r3, [r7, #16]
    4f7c:	2205      	movs	r2, #5
    4f7e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4f80:	230f      	movs	r3, #15
    4f82:	18fb      	adds	r3, r7, r3
    4f84:	781b      	ldrb	r3, [r3, #0]
    4f86:	2208      	movs	r2, #8
    4f88:	4013      	ands	r3, r2
    4f8a:	d004      	beq.n	4f96 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4f8c:	697b      	ldr	r3, [r7, #20]
    4f8e:	699b      	ldr	r3, [r3, #24]
    4f90:	697a      	ldr	r2, [r7, #20]
    4f92:	0010      	movs	r0, r2
    4f94:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4f96:	693b      	ldr	r3, [r7, #16]
    4f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f9a:	230a      	movs	r3, #10
    4f9c:	18fb      	adds	r3, r7, r3
    4f9e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4fa0:	693b      	ldr	r3, [r7, #16]
    4fa2:	2204      	movs	r2, #4
    4fa4:	835a      	strh	r2, [r3, #26]
    4fa6:	e054      	b.n	5052 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4fa8:	697b      	ldr	r3, [r7, #20]
    4faa:	7a5b      	ldrb	r3, [r3, #9]
    4fac:	b2db      	uxtb	r3, r3
    4fae:	2b01      	cmp	r3, #1
    4fb0:	d11e      	bne.n	4ff0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    4fb2:	697b      	ldr	r3, [r7, #20]
    4fb4:	0018      	movs	r0, r3
    4fb6:	4b4d      	ldr	r3, [pc, #308]	; (50ec <_spi_interrupt_handler+0x278>)
    4fb8:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    4fba:	697b      	ldr	r3, [r7, #20]
    4fbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4fbe:	b29b      	uxth	r3, r3
    4fc0:	2b00      	cmp	r3, #0
    4fc2:	d146      	bne.n	5052 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4fc4:	693b      	ldr	r3, [r7, #16]
    4fc6:	2204      	movs	r2, #4
    4fc8:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    4fca:	697b      	ldr	r3, [r7, #20]
    4fcc:	2238      	movs	r2, #56	; 0x38
    4fce:	2100      	movs	r1, #0
    4fd0:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    4fd2:	697b      	ldr	r3, [r7, #20]
    4fd4:	2203      	movs	r2, #3
    4fd6:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4fd8:	230f      	movs	r3, #15
    4fda:	18fb      	adds	r3, r7, r3
    4fdc:	781b      	ldrb	r3, [r3, #0]
    4fde:	2201      	movs	r2, #1
    4fe0:	4013      	ands	r3, r2
    4fe2:	d036      	beq.n	5052 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4fe4:	697b      	ldr	r3, [r7, #20]
    4fe6:	68db      	ldr	r3, [r3, #12]
    4fe8:	697a      	ldr	r2, [r7, #20]
    4fea:	0010      	movs	r0, r2
    4fec:	4798      	blx	r3
    4fee:	e030      	b.n	5052 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    4ff0:	697b      	ldr	r3, [r7, #20]
    4ff2:	0018      	movs	r0, r3
    4ff4:	4b3e      	ldr	r3, [pc, #248]	; (50f0 <_spi_interrupt_handler+0x27c>)
    4ff6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    4ff8:	697b      	ldr	r3, [r7, #20]
    4ffa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4ffc:	b29b      	uxth	r3, r3
    4ffe:	2b00      	cmp	r3, #0
    5000:	d127      	bne.n	5052 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    5002:	697b      	ldr	r3, [r7, #20]
    5004:	2238      	movs	r2, #56	; 0x38
    5006:	2100      	movs	r1, #0
    5008:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    500a:	693b      	ldr	r3, [r7, #16]
    500c:	2204      	movs	r2, #4
    500e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    5010:	697b      	ldr	r3, [r7, #20]
    5012:	7a5b      	ldrb	r3, [r3, #9]
    5014:	b2db      	uxtb	r3, r3
    5016:	2b02      	cmp	r3, #2
    5018:	d10b      	bne.n	5032 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    501a:	230f      	movs	r3, #15
    501c:	18fb      	adds	r3, r7, r3
    501e:	781b      	ldrb	r3, [r3, #0]
    5020:	2204      	movs	r2, #4
    5022:	4013      	ands	r3, r2
    5024:	d015      	beq.n	5052 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    5026:	697b      	ldr	r3, [r7, #20]
    5028:	695b      	ldr	r3, [r3, #20]
    502a:	697a      	ldr	r2, [r7, #20]
    502c:	0010      	movs	r0, r2
    502e:	4798      	blx	r3
    5030:	e00f      	b.n	5052 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    5032:	697b      	ldr	r3, [r7, #20]
    5034:	7a5b      	ldrb	r3, [r3, #9]
    5036:	b2db      	uxtb	r3, r3
    5038:	2b00      	cmp	r3, #0
    503a:	d10a      	bne.n	5052 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    503c:	230f      	movs	r3, #15
    503e:	18fb      	adds	r3, r7, r3
    5040:	781b      	ldrb	r3, [r3, #0]
    5042:	2202      	movs	r2, #2
    5044:	4013      	ands	r3, r2
    5046:	d004      	beq.n	5052 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5048:	697b      	ldr	r3, [r7, #20]
    504a:	691b      	ldr	r3, [r3, #16]
    504c:	697a      	ldr	r2, [r7, #20]
    504e:	0010      	movs	r0, r2
    5050:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    5052:	230c      	movs	r3, #12
    5054:	18fb      	adds	r3, r7, r3
    5056:	881b      	ldrh	r3, [r3, #0]
    5058:	2202      	movs	r2, #2
    505a:	4013      	ands	r3, r2
    505c:	d024      	beq.n	50a8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    505e:	697b      	ldr	r3, [r7, #20]
    5060:	795b      	ldrb	r3, [r3, #5]
    5062:	2b01      	cmp	r3, #1
    5064:	d120      	bne.n	50a8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5066:	697b      	ldr	r3, [r7, #20]
    5068:	7a5b      	ldrb	r3, [r3, #9]
    506a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    506c:	2b01      	cmp	r3, #1
    506e:	d11b      	bne.n	50a8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5070:	697b      	ldr	r3, [r7, #20]
    5072:	79db      	ldrb	r3, [r3, #7]
    5074:	2201      	movs	r2, #1
    5076:	4053      	eors	r3, r2
    5078:	b2db      	uxtb	r3, r3
    507a:	2b00      	cmp	r3, #0
    507c:	d014      	beq.n	50a8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    507e:	693b      	ldr	r3, [r7, #16]
    5080:	2202      	movs	r2, #2
    5082:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    5084:	697b      	ldr	r3, [r7, #20]
    5086:	2203      	movs	r2, #3
    5088:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    508a:	697b      	ldr	r3, [r7, #20]
    508c:	2238      	movs	r2, #56	; 0x38
    508e:	2100      	movs	r1, #0
    5090:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    5092:	230f      	movs	r3, #15
    5094:	18fb      	adds	r3, r7, r3
    5096:	781b      	ldrb	r3, [r3, #0]
    5098:	2201      	movs	r2, #1
    509a:	4013      	ands	r3, r2
    509c:	d004      	beq.n	50a8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    509e:	697b      	ldr	r3, [r7, #20]
    50a0:	68db      	ldr	r3, [r3, #12]
    50a2:	697a      	ldr	r2, [r7, #20]
    50a4:	0010      	movs	r0, r2
    50a6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    50a8:	230c      	movs	r3, #12
    50aa:	18fb      	adds	r3, r7, r3
    50ac:	881b      	ldrh	r3, [r3, #0]
    50ae:	2280      	movs	r2, #128	; 0x80
    50b0:	4013      	ands	r3, r2
    50b2:	d010      	beq.n	50d6 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    50b4:	693b      	ldr	r3, [r7, #16]
    50b6:	2280      	movs	r2, #128	; 0x80
    50b8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    50ba:	693b      	ldr	r3, [r7, #16]
    50bc:	2280      	movs	r2, #128	; 0x80
    50be:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    50c0:	230f      	movs	r3, #15
    50c2:	18fb      	adds	r3, r7, r3
    50c4:	781b      	ldrb	r3, [r3, #0]
    50c6:	2240      	movs	r2, #64	; 0x40
    50c8:	4013      	ands	r3, r2
    50ca:	d004      	beq.n	50d6 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    50cc:	697b      	ldr	r3, [r7, #20]
    50ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    50d0:	697a      	ldr	r2, [r7, #20]
    50d2:	0010      	movs	r0, r2
    50d4:	4798      	blx	r3
		}
	}
#  endif
}
    50d6:	46c0      	nop			; (mov r8, r8)
    50d8:	46bd      	mov	sp, r7
    50da:	b006      	add	sp, #24
    50dc:	bd80      	pop	{r7, pc}
    50de:	46c0      	nop			; (mov r8, r8)
    50e0:	20000a04 	.word	0x20000a04
    50e4:	00004d99 	.word	0x00004d99
    50e8:	00004d1d 	.word	0x00004d1d
    50ec:	00004dcd 	.word	0x00004dcd
    50f0:	00004e03 	.word	0x00004e03

000050f4 <system_gclk_chan_get_config_defaults>:
{
    50f4:	b580      	push	{r7, lr}
    50f6:	b082      	sub	sp, #8
    50f8:	af00      	add	r7, sp, #0
    50fa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	2200      	movs	r2, #0
    5100:	701a      	strb	r2, [r3, #0]
}
    5102:	46c0      	nop			; (mov r8, r8)
    5104:	46bd      	mov	sp, r7
    5106:	b002      	add	sp, #8
    5108:	bd80      	pop	{r7, pc}
	...

0000510c <system_apb_clock_set_mask>:
{
    510c:	b580      	push	{r7, lr}
    510e:	b082      	sub	sp, #8
    5110:	af00      	add	r7, sp, #0
    5112:	0002      	movs	r2, r0
    5114:	6039      	str	r1, [r7, #0]
    5116:	1dfb      	adds	r3, r7, #7
    5118:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    511a:	1dfb      	adds	r3, r7, #7
    511c:	781b      	ldrb	r3, [r3, #0]
    511e:	2b01      	cmp	r3, #1
    5120:	d00a      	beq.n	5138 <system_apb_clock_set_mask+0x2c>
    5122:	2b02      	cmp	r3, #2
    5124:	d00f      	beq.n	5146 <system_apb_clock_set_mask+0x3a>
    5126:	2b00      	cmp	r3, #0
    5128:	d114      	bne.n	5154 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    512a:	4b0e      	ldr	r3, [pc, #56]	; (5164 <system_apb_clock_set_mask+0x58>)
    512c:	4a0d      	ldr	r2, [pc, #52]	; (5164 <system_apb_clock_set_mask+0x58>)
    512e:	6991      	ldr	r1, [r2, #24]
    5130:	683a      	ldr	r2, [r7, #0]
    5132:	430a      	orrs	r2, r1
    5134:	619a      	str	r2, [r3, #24]
			break;
    5136:	e00f      	b.n	5158 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5138:	4b0a      	ldr	r3, [pc, #40]	; (5164 <system_apb_clock_set_mask+0x58>)
    513a:	4a0a      	ldr	r2, [pc, #40]	; (5164 <system_apb_clock_set_mask+0x58>)
    513c:	69d1      	ldr	r1, [r2, #28]
    513e:	683a      	ldr	r2, [r7, #0]
    5140:	430a      	orrs	r2, r1
    5142:	61da      	str	r2, [r3, #28]
			break;
    5144:	e008      	b.n	5158 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5146:	4b07      	ldr	r3, [pc, #28]	; (5164 <system_apb_clock_set_mask+0x58>)
    5148:	4a06      	ldr	r2, [pc, #24]	; (5164 <system_apb_clock_set_mask+0x58>)
    514a:	6a11      	ldr	r1, [r2, #32]
    514c:	683a      	ldr	r2, [r7, #0]
    514e:	430a      	orrs	r2, r1
    5150:	621a      	str	r2, [r3, #32]
			break;
    5152:	e001      	b.n	5158 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5154:	2317      	movs	r3, #23
    5156:	e000      	b.n	515a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5158:	2300      	movs	r3, #0
}
    515a:	0018      	movs	r0, r3
    515c:	46bd      	mov	sp, r7
    515e:	b002      	add	sp, #8
    5160:	bd80      	pop	{r7, pc}
    5162:	46c0      	nop			; (mov r8, r8)
    5164:	40000400 	.word	0x40000400

00005168 <system_pinmux_get_config_defaults>:
{
    5168:	b580      	push	{r7, lr}
    516a:	b082      	sub	sp, #8
    516c:	af00      	add	r7, sp, #0
    516e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	2280      	movs	r2, #128	; 0x80
    5174:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5176:	687b      	ldr	r3, [r7, #4]
    5178:	2200      	movs	r2, #0
    517a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    517c:	687b      	ldr	r3, [r7, #4]
    517e:	2201      	movs	r2, #1
    5180:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5182:	687b      	ldr	r3, [r7, #4]
    5184:	2200      	movs	r2, #0
    5186:	70da      	strb	r2, [r3, #3]
}
    5188:	46c0      	nop			; (mov r8, r8)
    518a:	46bd      	mov	sp, r7
    518c:	b002      	add	sp, #8
    518e:	bd80      	pop	{r7, pc}

00005190 <system_is_debugger_present>:
{
    5190:	b580      	push	{r7, lr}
    5192:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5194:	4b05      	ldr	r3, [pc, #20]	; (51ac <system_is_debugger_present+0x1c>)
    5196:	789b      	ldrb	r3, [r3, #2]
    5198:	b2db      	uxtb	r3, r3
    519a:	001a      	movs	r2, r3
    519c:	2302      	movs	r3, #2
    519e:	4013      	ands	r3, r2
    51a0:	1e5a      	subs	r2, r3, #1
    51a2:	4193      	sbcs	r3, r2
    51a4:	b2db      	uxtb	r3, r3
}
    51a6:	0018      	movs	r0, r3
    51a8:	46bd      	mov	sp, r7
    51aa:	bd80      	pop	{r7, pc}
    51ac:	41002000 	.word	0x41002000

000051b0 <usart_is_syncing>:
{
    51b0:	b580      	push	{r7, lr}
    51b2:	b084      	sub	sp, #16
    51b4:	af00      	add	r7, sp, #0
    51b6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	681b      	ldr	r3, [r3, #0]
    51bc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    51be:	68fb      	ldr	r3, [r7, #12]
    51c0:	69db      	ldr	r3, [r3, #28]
    51c2:	1e5a      	subs	r2, r3, #1
    51c4:	4193      	sbcs	r3, r2
    51c6:	b2db      	uxtb	r3, r3
}
    51c8:	0018      	movs	r0, r3
    51ca:	46bd      	mov	sp, r7
    51cc:	b004      	add	sp, #16
    51ce:	bd80      	pop	{r7, pc}

000051d0 <_usart_wait_for_sync>:
{
    51d0:	b580      	push	{r7, lr}
    51d2:	b082      	sub	sp, #8
    51d4:	af00      	add	r7, sp, #0
    51d6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    51d8:	46c0      	nop			; (mov r8, r8)
    51da:	687b      	ldr	r3, [r7, #4]
    51dc:	0018      	movs	r0, r3
    51de:	4b04      	ldr	r3, [pc, #16]	; (51f0 <_usart_wait_for_sync+0x20>)
    51e0:	4798      	blx	r3
    51e2:	1e03      	subs	r3, r0, #0
    51e4:	d1f9      	bne.n	51da <_usart_wait_for_sync+0xa>
}
    51e6:	46c0      	nop			; (mov r8, r8)
    51e8:	46bd      	mov	sp, r7
    51ea:	b002      	add	sp, #8
    51ec:	bd80      	pop	{r7, pc}
    51ee:	46c0      	nop			; (mov r8, r8)
    51f0:	000051b1 	.word	0x000051b1

000051f4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    51f4:	b5b0      	push	{r4, r5, r7, lr}
    51f6:	b08c      	sub	sp, #48	; 0x30
    51f8:	af02      	add	r7, sp, #8
    51fa:	6078      	str	r0, [r7, #4]
    51fc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    51fe:	687b      	ldr	r3, [r7, #4]
    5200:	681b      	ldr	r3, [r3, #0]
    5202:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	681b      	ldr	r3, [r3, #0]
    5208:	0018      	movs	r0, r3
    520a:	4bab      	ldr	r3, [pc, #684]	; (54b8 <_usart_set_config+0x2c4>)
    520c:	4798      	blx	r3
    520e:	0003      	movs	r3, r0
    5210:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5212:	697b      	ldr	r3, [r7, #20]
    5214:	3314      	adds	r3, #20
    5216:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5218:	2300      	movs	r3, #0
    521a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    521c:	2300      	movs	r3, #0
    521e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5220:	230a      	movs	r3, #10
    5222:	18fb      	adds	r3, r7, r3
    5224:	2200      	movs	r2, #0
    5226:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5228:	231f      	movs	r3, #31
    522a:	18fb      	adds	r3, r7, r3
    522c:	2200      	movs	r2, #0
    522e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5230:	231e      	movs	r3, #30
    5232:	18fb      	adds	r3, r7, r3
    5234:	2210      	movs	r2, #16
    5236:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5238:	683b      	ldr	r3, [r7, #0]
    523a:	8a1b      	ldrh	r3, [r3, #16]
    523c:	2280      	movs	r2, #128	; 0x80
    523e:	01d2      	lsls	r2, r2, #7
    5240:	4293      	cmp	r3, r2
    5242:	d01c      	beq.n	527e <_usart_set_config+0x8a>
    5244:	2280      	movs	r2, #128	; 0x80
    5246:	01d2      	lsls	r2, r2, #7
    5248:	4293      	cmp	r3, r2
    524a:	dc06      	bgt.n	525a <_usart_set_config+0x66>
    524c:	2b00      	cmp	r3, #0
    524e:	d00d      	beq.n	526c <_usart_set_config+0x78>
    5250:	2280      	movs	r2, #128	; 0x80
    5252:	0192      	lsls	r2, r2, #6
    5254:	4293      	cmp	r3, r2
    5256:	d024      	beq.n	52a2 <_usart_set_config+0xae>
    5258:	e035      	b.n	52c6 <_usart_set_config+0xd2>
    525a:	22c0      	movs	r2, #192	; 0xc0
    525c:	01d2      	lsls	r2, r2, #7
    525e:	4293      	cmp	r3, r2
    5260:	d028      	beq.n	52b4 <_usart_set_config+0xc0>
    5262:	2280      	movs	r2, #128	; 0x80
    5264:	0212      	lsls	r2, r2, #8
    5266:	4293      	cmp	r3, r2
    5268:	d012      	beq.n	5290 <_usart_set_config+0x9c>
    526a:	e02c      	b.n	52c6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    526c:	231f      	movs	r3, #31
    526e:	18fb      	adds	r3, r7, r3
    5270:	2200      	movs	r2, #0
    5272:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5274:	231e      	movs	r3, #30
    5276:	18fb      	adds	r3, r7, r3
    5278:	2210      	movs	r2, #16
    527a:	701a      	strb	r2, [r3, #0]
			break;
    527c:	e023      	b.n	52c6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    527e:	231f      	movs	r3, #31
    5280:	18fb      	adds	r3, r7, r3
    5282:	2200      	movs	r2, #0
    5284:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5286:	231e      	movs	r3, #30
    5288:	18fb      	adds	r3, r7, r3
    528a:	2208      	movs	r2, #8
    528c:	701a      	strb	r2, [r3, #0]
			break;
    528e:	e01a      	b.n	52c6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5290:	231f      	movs	r3, #31
    5292:	18fb      	adds	r3, r7, r3
    5294:	2200      	movs	r2, #0
    5296:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5298:	231e      	movs	r3, #30
    529a:	18fb      	adds	r3, r7, r3
    529c:	2203      	movs	r2, #3
    529e:	701a      	strb	r2, [r3, #0]
			break;
    52a0:	e011      	b.n	52c6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    52a2:	231f      	movs	r3, #31
    52a4:	18fb      	adds	r3, r7, r3
    52a6:	2201      	movs	r2, #1
    52a8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    52aa:	231e      	movs	r3, #30
    52ac:	18fb      	adds	r3, r7, r3
    52ae:	2210      	movs	r2, #16
    52b0:	701a      	strb	r2, [r3, #0]
			break;
    52b2:	e008      	b.n	52c6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    52b4:	231f      	movs	r3, #31
    52b6:	18fb      	adds	r3, r7, r3
    52b8:	2201      	movs	r2, #1
    52ba:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    52bc:	231e      	movs	r3, #30
    52be:	18fb      	adds	r3, r7, r3
    52c0:	2208      	movs	r2, #8
    52c2:	701a      	strb	r2, [r3, #0]
			break;
    52c4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    52c6:	683b      	ldr	r3, [r7, #0]
    52c8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    52ca:	683b      	ldr	r3, [r7, #0]
    52cc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    52ce:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    52d0:	683b      	ldr	r3, [r7, #0]
    52d2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    52d4:	4313      	orrs	r3, r2
		config->sample_rate |
    52d6:	683a      	ldr	r2, [r7, #0]
    52d8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    52da:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    52dc:	683a      	ldr	r2, [r7, #0]
    52de:	7e12      	ldrb	r2, [r2, #24]
    52e0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    52e2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    52e4:	683a      	ldr	r2, [r7, #0]
    52e6:	2126      	movs	r1, #38	; 0x26
    52e8:	5c52      	ldrb	r2, [r2, r1]
    52ea:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    52ec:	4313      	orrs	r3, r2
    52ee:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    52f0:	231d      	movs	r3, #29
    52f2:	18fb      	adds	r3, r7, r3
    52f4:	2200      	movs	r2, #0
    52f6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    52f8:	683b      	ldr	r3, [r7, #0]
    52fa:	685b      	ldr	r3, [r3, #4]
    52fc:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    52fe:	68fb      	ldr	r3, [r7, #12]
    5300:	2b00      	cmp	r3, #0
    5302:	d01e      	beq.n	5342 <_usart_set_config+0x14e>
    5304:	2280      	movs	r2, #128	; 0x80
    5306:	0552      	lsls	r2, r2, #21
    5308:	4293      	cmp	r3, r2
    530a:	d14f      	bne.n	53ac <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    530c:	683b      	ldr	r3, [r7, #0]
    530e:	2227      	movs	r2, #39	; 0x27
    5310:	5c9b      	ldrb	r3, [r3, r2]
    5312:	2201      	movs	r2, #1
    5314:	4053      	eors	r3, r2
    5316:	b2db      	uxtb	r3, r3
    5318:	2b00      	cmp	r3, #0
    531a:	d046      	beq.n	53aa <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    531c:	683b      	ldr	r3, [r7, #0]
    531e:	6a1d      	ldr	r5, [r3, #32]
    5320:	693b      	ldr	r3, [r7, #16]
    5322:	b2db      	uxtb	r3, r3
    5324:	0018      	movs	r0, r3
    5326:	4b65      	ldr	r3, [pc, #404]	; (54bc <_usart_set_config+0x2c8>)
    5328:	4798      	blx	r3
    532a:	0001      	movs	r1, r0
    532c:	231d      	movs	r3, #29
    532e:	18fc      	adds	r4, r7, r3
    5330:	230a      	movs	r3, #10
    5332:	18fb      	adds	r3, r7, r3
    5334:	001a      	movs	r2, r3
    5336:	0028      	movs	r0, r5
    5338:	4b61      	ldr	r3, [pc, #388]	; (54c0 <_usart_set_config+0x2cc>)
    533a:	4798      	blx	r3
    533c:	0003      	movs	r3, r0
    533e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5340:	e033      	b.n	53aa <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5342:	683b      	ldr	r3, [r7, #0]
    5344:	2227      	movs	r2, #39	; 0x27
    5346:	5c9b      	ldrb	r3, [r3, r2]
    5348:	2b00      	cmp	r3, #0
    534a:	d014      	beq.n	5376 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    534c:	683b      	ldr	r3, [r7, #0]
    534e:	6a18      	ldr	r0, [r3, #32]
    5350:	683b      	ldr	r3, [r7, #0]
    5352:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    5354:	231d      	movs	r3, #29
    5356:	18fc      	adds	r4, r7, r3
    5358:	231f      	movs	r3, #31
    535a:	18fb      	adds	r3, r7, r3
    535c:	781d      	ldrb	r5, [r3, #0]
    535e:	230a      	movs	r3, #10
    5360:	18fa      	adds	r2, r7, r3
    5362:	231e      	movs	r3, #30
    5364:	18fb      	adds	r3, r7, r3
    5366:	781b      	ldrb	r3, [r3, #0]
    5368:	9300      	str	r3, [sp, #0]
    536a:	002b      	movs	r3, r5
    536c:	4d55      	ldr	r5, [pc, #340]	; (54c4 <_usart_set_config+0x2d0>)
    536e:	47a8      	blx	r5
    5370:	0003      	movs	r3, r0
    5372:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5374:	e01a      	b.n	53ac <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5376:	683b      	ldr	r3, [r7, #0]
    5378:	6a1d      	ldr	r5, [r3, #32]
    537a:	693b      	ldr	r3, [r7, #16]
    537c:	b2db      	uxtb	r3, r3
    537e:	0018      	movs	r0, r3
    5380:	4b4e      	ldr	r3, [pc, #312]	; (54bc <_usart_set_config+0x2c8>)
    5382:	4798      	blx	r3
				status_code =
    5384:	231d      	movs	r3, #29
    5386:	18fc      	adds	r4, r7, r3
    5388:	231f      	movs	r3, #31
    538a:	18fb      	adds	r3, r7, r3
    538c:	7819      	ldrb	r1, [r3, #0]
    538e:	230a      	movs	r3, #10
    5390:	18fa      	adds	r2, r7, r3
    5392:	231e      	movs	r3, #30
    5394:	18fb      	adds	r3, r7, r3
    5396:	781b      	ldrb	r3, [r3, #0]
    5398:	9300      	str	r3, [sp, #0]
    539a:	000b      	movs	r3, r1
    539c:	0001      	movs	r1, r0
    539e:	0028      	movs	r0, r5
    53a0:	4d48      	ldr	r5, [pc, #288]	; (54c4 <_usart_set_config+0x2d0>)
    53a2:	47a8      	blx	r5
    53a4:	0003      	movs	r3, r0
    53a6:	7023      	strb	r3, [r4, #0]
			break;
    53a8:	e000      	b.n	53ac <_usart_set_config+0x1b8>
			break;
    53aa:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    53ac:	231d      	movs	r3, #29
    53ae:	18fb      	adds	r3, r7, r3
    53b0:	781b      	ldrb	r3, [r3, #0]
    53b2:	2b00      	cmp	r3, #0
    53b4:	d003      	beq.n	53be <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    53b6:	231d      	movs	r3, #29
    53b8:	18fb      	adds	r3, r7, r3
    53ba:	781b      	ldrb	r3, [r3, #0]
    53bc:	e077      	b.n	54ae <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    53be:	683b      	ldr	r3, [r7, #0]
    53c0:	7e5b      	ldrb	r3, [r3, #25]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d003      	beq.n	53ce <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    53c6:	683b      	ldr	r3, [r7, #0]
    53c8:	7e9a      	ldrb	r2, [r3, #26]
    53ca:	69bb      	ldr	r3, [r7, #24]
    53cc:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    53ce:	687b      	ldr	r3, [r7, #4]
    53d0:	0018      	movs	r0, r3
    53d2:	4b3d      	ldr	r3, [pc, #244]	; (54c8 <_usart_set_config+0x2d4>)
    53d4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    53d6:	230a      	movs	r3, #10
    53d8:	18fb      	adds	r3, r7, r3
    53da:	881a      	ldrh	r2, [r3, #0]
    53dc:	69bb      	ldr	r3, [r7, #24]
    53de:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    53e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    53e2:	68fb      	ldr	r3, [r7, #12]
    53e4:	4313      	orrs	r3, r2
    53e6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    53e8:	683b      	ldr	r3, [r7, #0]
    53ea:	2227      	movs	r2, #39	; 0x27
    53ec:	5c9b      	ldrb	r3, [r3, r2]
    53ee:	2201      	movs	r2, #1
    53f0:	4053      	eors	r3, r2
    53f2:	b2db      	uxtb	r3, r3
    53f4:	2b00      	cmp	r3, #0
    53f6:	d003      	beq.n	5400 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    53f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    53fa:	2204      	movs	r2, #4
    53fc:	4313      	orrs	r3, r2
    53fe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5400:	683b      	ldr	r3, [r7, #0]
    5402:	7e5b      	ldrb	r3, [r3, #25]
    5404:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5406:	683b      	ldr	r3, [r7, #0]
    5408:	7f1b      	ldrb	r3, [r3, #28]
    540a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    540c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    540e:	683b      	ldr	r3, [r7, #0]
    5410:	7f5b      	ldrb	r3, [r3, #29]
    5412:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5414:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5416:	683b      	ldr	r3, [r7, #0]
    5418:	2124      	movs	r1, #36	; 0x24
    541a:	5c5b      	ldrb	r3, [r3, r1]
    541c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    541e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5420:	683b      	ldr	r3, [r7, #0]
    5422:	2125      	movs	r1, #37	; 0x25
    5424:	5c5b      	ldrb	r3, [r3, r1]
    5426:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5428:	4313      	orrs	r3, r2
	ctrlb =  
    542a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    542c:	683b      	ldr	r3, [r7, #0]
    542e:	7a9b      	ldrb	r3, [r3, #10]
    5430:	001a      	movs	r2, r3
    5432:	6a3b      	ldr	r3, [r7, #32]
    5434:	4313      	orrs	r3, r2
    5436:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    5438:	683b      	ldr	r3, [r7, #0]
    543a:	7adb      	ldrb	r3, [r3, #11]
    543c:	001a      	movs	r2, r3
    543e:	6a3b      	ldr	r3, [r7, #32]
    5440:	4313      	orrs	r3, r2
    5442:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5444:	683b      	ldr	r3, [r7, #0]
    5446:	891b      	ldrh	r3, [r3, #8]
    5448:	2bff      	cmp	r3, #255	; 0xff
    544a:	d00b      	beq.n	5464 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    544e:	2280      	movs	r2, #128	; 0x80
    5450:	0452      	lsls	r2, r2, #17
    5452:	4313      	orrs	r3, r2
    5454:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    5456:	683b      	ldr	r3, [r7, #0]
    5458:	891b      	ldrh	r3, [r3, #8]
    545a:	001a      	movs	r2, r3
    545c:	6a3b      	ldr	r3, [r7, #32]
    545e:	4313      	orrs	r3, r2
    5460:	623b      	str	r3, [r7, #32]
    5462:	e008      	b.n	5476 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5464:	683b      	ldr	r3, [r7, #0]
    5466:	7edb      	ldrb	r3, [r3, #27]
    5468:	2b00      	cmp	r3, #0
    546a:	d004      	beq.n	5476 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    546e:	2280      	movs	r2, #128	; 0x80
    5470:	04d2      	lsls	r2, r2, #19
    5472:	4313      	orrs	r3, r2
    5474:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5476:	683b      	ldr	r3, [r7, #0]
    5478:	222c      	movs	r2, #44	; 0x2c
    547a:	5c9b      	ldrb	r3, [r3, r2]
    547c:	2b00      	cmp	r3, #0
    547e:	d103      	bne.n	5488 <_usart_set_config+0x294>
    5480:	4b12      	ldr	r3, [pc, #72]	; (54cc <_usart_set_config+0x2d8>)
    5482:	4798      	blx	r3
    5484:	1e03      	subs	r3, r0, #0
    5486:	d003      	beq.n	5490 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    548a:	2280      	movs	r2, #128	; 0x80
    548c:	4313      	orrs	r3, r2
    548e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5490:	687b      	ldr	r3, [r7, #4]
    5492:	0018      	movs	r0, r3
    5494:	4b0c      	ldr	r3, [pc, #48]	; (54c8 <_usart_set_config+0x2d4>)
    5496:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5498:	69bb      	ldr	r3, [r7, #24]
    549a:	6a3a      	ldr	r2, [r7, #32]
    549c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    549e:	687b      	ldr	r3, [r7, #4]
    54a0:	0018      	movs	r0, r3
    54a2:	4b09      	ldr	r3, [pc, #36]	; (54c8 <_usart_set_config+0x2d4>)
    54a4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    54a6:	69bb      	ldr	r3, [r7, #24]
    54a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    54aa:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    54ac:	2300      	movs	r3, #0
}
    54ae:	0018      	movs	r0, r3
    54b0:	46bd      	mov	sp, r7
    54b2:	b00a      	add	sp, #40	; 0x28
    54b4:	bdb0      	pop	{r4, r5, r7, pc}
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	00003f5d 	.word	0x00003f5d
    54bc:	00006b95 	.word	0x00006b95
    54c0:	00003ad7 	.word	0x00003ad7
    54c4:	00003b55 	.word	0x00003b55
    54c8:	000051d1 	.word	0x000051d1
    54cc:	00005191 	.word	0x00005191

000054d0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    54d0:	b590      	push	{r4, r7, lr}
    54d2:	b093      	sub	sp, #76	; 0x4c
    54d4:	af00      	add	r7, sp, #0
    54d6:	60f8      	str	r0, [r7, #12]
    54d8:	60b9      	str	r1, [r7, #8]
    54da:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    54dc:	233b      	movs	r3, #59	; 0x3b
    54de:	18fb      	adds	r3, r7, r3
    54e0:	2200      	movs	r2, #0
    54e2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    54e4:	68fb      	ldr	r3, [r7, #12]
    54e6:	68ba      	ldr	r2, [r7, #8]
    54e8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    54ea:	68fb      	ldr	r3, [r7, #12]
    54ec:	681b      	ldr	r3, [r3, #0]
    54ee:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    54f0:	68fb      	ldr	r3, [r7, #12]
    54f2:	681b      	ldr	r3, [r3, #0]
    54f4:	0018      	movs	r0, r3
    54f6:	4b86      	ldr	r3, [pc, #536]	; (5710 <usart_init+0x240>)
    54f8:	4798      	blx	r3
    54fa:	0003      	movs	r3, r0
    54fc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    54fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5500:	3302      	adds	r3, #2
    5502:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5506:	3314      	adds	r3, #20
    5508:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    550c:	681b      	ldr	r3, [r3, #0]
    550e:	2201      	movs	r2, #1
    5510:	4013      	ands	r3, r2
    5512:	d001      	beq.n	5518 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5514:	2305      	movs	r3, #5
    5516:	e0f6      	b.n	5706 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    551a:	681b      	ldr	r3, [r3, #0]
    551c:	2202      	movs	r2, #2
    551e:	4013      	ands	r3, r2
    5520:	d001      	beq.n	5526 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    5522:	231c      	movs	r3, #28
    5524:	e0ef      	b.n	5706 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5526:	2201      	movs	r2, #1
    5528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    552a:	409a      	lsls	r2, r3
    552c:	0013      	movs	r3, r2
    552e:	0019      	movs	r1, r3
    5530:	2002      	movs	r0, #2
    5532:	4b78      	ldr	r3, [pc, #480]	; (5714 <usart_init+0x244>)
    5534:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5536:	2324      	movs	r3, #36	; 0x24
    5538:	18fb      	adds	r3, r7, r3
    553a:	0018      	movs	r0, r3
    553c:	4b76      	ldr	r3, [pc, #472]	; (5718 <usart_init+0x248>)
    553e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	222d      	movs	r2, #45	; 0x2d
    5544:	5c9a      	ldrb	r2, [r3, r2]
    5546:	2324      	movs	r3, #36	; 0x24
    5548:	18fb      	adds	r3, r7, r3
    554a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    554e:	b2db      	uxtb	r3, r3
    5550:	2224      	movs	r2, #36	; 0x24
    5552:	18ba      	adds	r2, r7, r2
    5554:	0011      	movs	r1, r2
    5556:	0018      	movs	r0, r3
    5558:	4b70      	ldr	r3, [pc, #448]	; (571c <usart_init+0x24c>)
    555a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    555e:	b2db      	uxtb	r3, r3
    5560:	0018      	movs	r0, r3
    5562:	4b6f      	ldr	r3, [pc, #444]	; (5720 <usart_init+0x250>)
    5564:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5566:	687b      	ldr	r3, [r7, #4]
    5568:	222d      	movs	r2, #45	; 0x2d
    556a:	5c9b      	ldrb	r3, [r3, r2]
    556c:	2100      	movs	r1, #0
    556e:	0018      	movs	r0, r3
    5570:	4b6c      	ldr	r3, [pc, #432]	; (5724 <usart_init+0x254>)
    5572:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	7ada      	ldrb	r2, [r3, #11]
    5578:	68fb      	ldr	r3, [r7, #12]
    557a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    557c:	687b      	ldr	r3, [r7, #4]
    557e:	2224      	movs	r2, #36	; 0x24
    5580:	5c9a      	ldrb	r2, [r3, r2]
    5582:	68fb      	ldr	r3, [r7, #12]
    5584:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5586:	687b      	ldr	r3, [r7, #4]
    5588:	2225      	movs	r2, #37	; 0x25
    558a:	5c9a      	ldrb	r2, [r3, r2]
    558c:	68fb      	ldr	r3, [r7, #12]
    558e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5590:	687b      	ldr	r3, [r7, #4]
    5592:	7eda      	ldrb	r2, [r3, #27]
    5594:	68fb      	ldr	r3, [r7, #12]
    5596:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5598:	687b      	ldr	r3, [r7, #4]
    559a:	7f1a      	ldrb	r2, [r3, #28]
    559c:	68fb      	ldr	r3, [r7, #12]
    559e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    55a0:	233b      	movs	r3, #59	; 0x3b
    55a2:	18fc      	adds	r4, r7, r3
    55a4:	687a      	ldr	r2, [r7, #4]
    55a6:	68fb      	ldr	r3, [r7, #12]
    55a8:	0011      	movs	r1, r2
    55aa:	0018      	movs	r0, r3
    55ac:	4b5e      	ldr	r3, [pc, #376]	; (5728 <usart_init+0x258>)
    55ae:	4798      	blx	r3
    55b0:	0003      	movs	r3, r0
    55b2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    55b4:	233b      	movs	r3, #59	; 0x3b
    55b6:	18fb      	adds	r3, r7, r3
    55b8:	781b      	ldrb	r3, [r3, #0]
    55ba:	2b00      	cmp	r3, #0
    55bc:	d003      	beq.n	55c6 <usart_init+0xf6>
		return status_code;
    55be:	233b      	movs	r3, #59	; 0x3b
    55c0:	18fb      	adds	r3, r7, r3
    55c2:	781b      	ldrb	r3, [r3, #0]
    55c4:	e09f      	b.n	5706 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    55c6:	2320      	movs	r3, #32
    55c8:	18fb      	adds	r3, r7, r3
    55ca:	0018      	movs	r0, r3
    55cc:	4b57      	ldr	r3, [pc, #348]	; (572c <usart_init+0x25c>)
    55ce:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    55d0:	2320      	movs	r3, #32
    55d2:	18fb      	adds	r3, r7, r3
    55d4:	2200      	movs	r2, #0
    55d6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    55d8:	2320      	movs	r3, #32
    55da:	18fb      	adds	r3, r7, r3
    55dc:	2200      	movs	r2, #0
    55de:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    55e4:	2310      	movs	r3, #16
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    55ea:	687b      	ldr	r3, [r7, #4]
    55ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    55ee:	2310      	movs	r3, #16
    55f0:	18fb      	adds	r3, r7, r3
    55f2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    55f4:	687b      	ldr	r3, [r7, #4]
    55f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    55f8:	2310      	movs	r3, #16
    55fa:	18fb      	adds	r3, r7, r3
    55fc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    55fe:	687b      	ldr	r3, [r7, #4]
    5600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    5602:	2310      	movs	r3, #16
    5604:	18fb      	adds	r3, r7, r3
    5606:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5608:	2347      	movs	r3, #71	; 0x47
    560a:	18fb      	adds	r3, r7, r3
    560c:	2200      	movs	r2, #0
    560e:	701a      	strb	r2, [r3, #0]
    5610:	e02c      	b.n	566c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5612:	2347      	movs	r3, #71	; 0x47
    5614:	18fb      	adds	r3, r7, r3
    5616:	781a      	ldrb	r2, [r3, #0]
    5618:	2310      	movs	r3, #16
    561a:	18fb      	adds	r3, r7, r3
    561c:	0092      	lsls	r2, r2, #2
    561e:	58d3      	ldr	r3, [r2, r3]
    5620:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    5622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5624:	2b00      	cmp	r3, #0
    5626:	d109      	bne.n	563c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5628:	2347      	movs	r3, #71	; 0x47
    562a:	18fb      	adds	r3, r7, r3
    562c:	781a      	ldrb	r2, [r3, #0]
    562e:	68bb      	ldr	r3, [r7, #8]
    5630:	0011      	movs	r1, r2
    5632:	0018      	movs	r0, r3
    5634:	4b3e      	ldr	r3, [pc, #248]	; (5730 <usart_init+0x260>)
    5636:	4798      	blx	r3
    5638:	0003      	movs	r3, r0
    563a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    563c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    563e:	3301      	adds	r3, #1
    5640:	d00d      	beq.n	565e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5644:	b2da      	uxtb	r2, r3
    5646:	2320      	movs	r3, #32
    5648:	18fb      	adds	r3, r7, r3
    564a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    564c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    564e:	0c1b      	lsrs	r3, r3, #16
    5650:	b2db      	uxtb	r3, r3
    5652:	2220      	movs	r2, #32
    5654:	18ba      	adds	r2, r7, r2
    5656:	0011      	movs	r1, r2
    5658:	0018      	movs	r0, r3
    565a:	4b36      	ldr	r3, [pc, #216]	; (5734 <usart_init+0x264>)
    565c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    565e:	2347      	movs	r3, #71	; 0x47
    5660:	18fb      	adds	r3, r7, r3
    5662:	781a      	ldrb	r2, [r3, #0]
    5664:	2347      	movs	r3, #71	; 0x47
    5666:	18fb      	adds	r3, r7, r3
    5668:	3201      	adds	r2, #1
    566a:	701a      	strb	r2, [r3, #0]
    566c:	2347      	movs	r3, #71	; 0x47
    566e:	18fb      	adds	r3, r7, r3
    5670:	781b      	ldrb	r3, [r3, #0]
    5672:	2b03      	cmp	r3, #3
    5674:	d9cd      	bls.n	5612 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5676:	2300      	movs	r3, #0
    5678:	63fb      	str	r3, [r7, #60]	; 0x3c
    567a:	e00a      	b.n	5692 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    567c:	68fa      	ldr	r2, [r7, #12]
    567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5680:	3302      	adds	r3, #2
    5682:	009b      	lsls	r3, r3, #2
    5684:	18d3      	adds	r3, r2, r3
    5686:	3304      	adds	r3, #4
    5688:	2200      	movs	r2, #0
    568a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    568c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    568e:	3301      	adds	r3, #1
    5690:	63fb      	str	r3, [r7, #60]	; 0x3c
    5692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5694:	2b05      	cmp	r3, #5
    5696:	d9f1      	bls.n	567c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    5698:	68fb      	ldr	r3, [r7, #12]
    569a:	2200      	movs	r2, #0
    569c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    569e:	68fb      	ldr	r3, [r7, #12]
    56a0:	2200      	movs	r2, #0
    56a2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    56a4:	68fb      	ldr	r3, [r7, #12]
    56a6:	2200      	movs	r2, #0
    56a8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    56aa:	68fb      	ldr	r3, [r7, #12]
    56ac:	2200      	movs	r2, #0
    56ae:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    56b0:	68fb      	ldr	r3, [r7, #12]
    56b2:	2230      	movs	r2, #48	; 0x30
    56b4:	2100      	movs	r1, #0
    56b6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    56b8:	68fb      	ldr	r3, [r7, #12]
    56ba:	2231      	movs	r2, #49	; 0x31
    56bc:	2100      	movs	r1, #0
    56be:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    56c0:	68fb      	ldr	r3, [r7, #12]
    56c2:	2232      	movs	r2, #50	; 0x32
    56c4:	2100      	movs	r1, #0
    56c6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    56c8:	68fb      	ldr	r3, [r7, #12]
    56ca:	2233      	movs	r2, #51	; 0x33
    56cc:	2100      	movs	r1, #0
    56ce:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    56d0:	68fb      	ldr	r3, [r7, #12]
    56d2:	681b      	ldr	r3, [r3, #0]
    56d4:	2227      	movs	r2, #39	; 0x27
    56d6:	18bc      	adds	r4, r7, r2
    56d8:	0018      	movs	r0, r3
    56da:	4b0d      	ldr	r3, [pc, #52]	; (5710 <usart_init+0x240>)
    56dc:	4798      	blx	r3
    56de:	0003      	movs	r3, r0
    56e0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    56e2:	4a15      	ldr	r2, [pc, #84]	; (5738 <usart_init+0x268>)
    56e4:	2327      	movs	r3, #39	; 0x27
    56e6:	18fb      	adds	r3, r7, r3
    56e8:	781b      	ldrb	r3, [r3, #0]
    56ea:	0011      	movs	r1, r2
    56ec:	0018      	movs	r0, r3
    56ee:	4b13      	ldr	r3, [pc, #76]	; (573c <usart_init+0x26c>)
    56f0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    56f2:	2327      	movs	r3, #39	; 0x27
    56f4:	18fb      	adds	r3, r7, r3
    56f6:	781a      	ldrb	r2, [r3, #0]
    56f8:	4b11      	ldr	r3, [pc, #68]	; (5740 <usart_init+0x270>)
    56fa:	0092      	lsls	r2, r2, #2
    56fc:	68f9      	ldr	r1, [r7, #12]
    56fe:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5700:	233b      	movs	r3, #59	; 0x3b
    5702:	18fb      	adds	r3, r7, r3
    5704:	781b      	ldrb	r3, [r3, #0]
}
    5706:	0018      	movs	r0, r3
    5708:	46bd      	mov	sp, r7
    570a:	b013      	add	sp, #76	; 0x4c
    570c:	bd90      	pop	{r4, r7, pc}
    570e:	46c0      	nop			; (mov r8, r8)
    5710:	00003f5d 	.word	0x00003f5d
    5714:	0000510d 	.word	0x0000510d
    5718:	000050f5 	.word	0x000050f5
    571c:	00006a71 	.word	0x00006a71
    5720:	00006ab5 	.word	0x00006ab5
    5724:	00003d15 	.word	0x00003d15
    5728:	000051f5 	.word	0x000051f5
    572c:	00005169 	.word	0x00005169
    5730:	00003da1 	.word	0x00003da1
    5734:	00006d5d 	.word	0x00006d5d
    5738:	00005afd 	.word	0x00005afd
    573c:	00003fc1 	.word	0x00003fc1
    5740:	20000a04 	.word	0x20000a04

00005744 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5744:	b580      	push	{r7, lr}
    5746:	b084      	sub	sp, #16
    5748:	af00      	add	r7, sp, #0
    574a:	6078      	str	r0, [r7, #4]
    574c:	000a      	movs	r2, r1
    574e:	1cbb      	adds	r3, r7, #2
    5750:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5752:	687b      	ldr	r3, [r7, #4]
    5754:	681b      	ldr	r3, [r3, #0]
    5756:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	79db      	ldrb	r3, [r3, #7]
    575c:	2201      	movs	r2, #1
    575e:	4053      	eors	r3, r2
    5760:	b2db      	uxtb	r3, r3
    5762:	2b00      	cmp	r3, #0
    5764:	d001      	beq.n	576a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5766:	231c      	movs	r3, #28
    5768:	e017      	b.n	579a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    576a:	687b      	ldr	r3, [r7, #4]
    576c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    576e:	b29b      	uxth	r3, r3
    5770:	2b00      	cmp	r3, #0
    5772:	d001      	beq.n	5778 <usart_write_wait+0x34>
		return STATUS_BUSY;
    5774:	2305      	movs	r3, #5
    5776:	e010      	b.n	579a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5778:	687b      	ldr	r3, [r7, #4]
    577a:	0018      	movs	r0, r3
    577c:	4b09      	ldr	r3, [pc, #36]	; (57a4 <usart_write_wait+0x60>)
    577e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5780:	68fb      	ldr	r3, [r7, #12]
    5782:	1cba      	adds	r2, r7, #2
    5784:	8812      	ldrh	r2, [r2, #0]
    5786:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5788:	46c0      	nop			; (mov r8, r8)
    578a:	68fb      	ldr	r3, [r7, #12]
    578c:	7e1b      	ldrb	r3, [r3, #24]
    578e:	b2db      	uxtb	r3, r3
    5790:	001a      	movs	r2, r3
    5792:	2302      	movs	r3, #2
    5794:	4013      	ands	r3, r2
    5796:	d0f8      	beq.n	578a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5798:	2300      	movs	r3, #0
}
    579a:	0018      	movs	r0, r3
    579c:	46bd      	mov	sp, r7
    579e:	b004      	add	sp, #16
    57a0:	bd80      	pop	{r7, pc}
    57a2:	46c0      	nop			; (mov r8, r8)
    57a4:	000051d1 	.word	0x000051d1

000057a8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    57a8:	b580      	push	{r7, lr}
    57aa:	b084      	sub	sp, #16
    57ac:	af00      	add	r7, sp, #0
    57ae:	6078      	str	r0, [r7, #4]
    57b0:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    57b2:	687b      	ldr	r3, [r7, #4]
    57b4:	681b      	ldr	r3, [r3, #0]
    57b6:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    57b8:	687b      	ldr	r3, [r7, #4]
    57ba:	799b      	ldrb	r3, [r3, #6]
    57bc:	2201      	movs	r2, #1
    57be:	4053      	eors	r3, r2
    57c0:	b2db      	uxtb	r3, r3
    57c2:	2b00      	cmp	r3, #0
    57c4:	d001      	beq.n	57ca <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    57c6:	231c      	movs	r3, #28
    57c8:	e05e      	b.n	5888 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    57ce:	b29b      	uxth	r3, r3
    57d0:	2b00      	cmp	r3, #0
    57d2:	d001      	beq.n	57d8 <usart_read_wait+0x30>
		return STATUS_BUSY;
    57d4:	2305      	movs	r3, #5
    57d6:	e057      	b.n	5888 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    57d8:	68fb      	ldr	r3, [r7, #12]
    57da:	7e1b      	ldrb	r3, [r3, #24]
    57dc:	b2db      	uxtb	r3, r3
    57de:	001a      	movs	r2, r3
    57e0:	2304      	movs	r3, #4
    57e2:	4013      	ands	r3, r2
    57e4:	d101      	bne.n	57ea <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    57e6:	2305      	movs	r3, #5
    57e8:	e04e      	b.n	5888 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    57ea:	687b      	ldr	r3, [r7, #4]
    57ec:	0018      	movs	r0, r3
    57ee:	4b28      	ldr	r3, [pc, #160]	; (5890 <usart_read_wait+0xe8>)
    57f0:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    57f2:	68fb      	ldr	r3, [r7, #12]
    57f4:	8b5b      	ldrh	r3, [r3, #26]
    57f6:	b29b      	uxth	r3, r3
    57f8:	b2da      	uxtb	r2, r3
    57fa:	230b      	movs	r3, #11
    57fc:	18fb      	adds	r3, r7, r3
    57fe:	213f      	movs	r1, #63	; 0x3f
    5800:	400a      	ands	r2, r1
    5802:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    5804:	230b      	movs	r3, #11
    5806:	18fb      	adds	r3, r7, r3
    5808:	781b      	ldrb	r3, [r3, #0]
    580a:	2b00      	cmp	r3, #0
    580c:	d036      	beq.n	587c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    580e:	230b      	movs	r3, #11
    5810:	18fb      	adds	r3, r7, r3
    5812:	781b      	ldrb	r3, [r3, #0]
    5814:	2202      	movs	r2, #2
    5816:	4013      	ands	r3, r2
    5818:	d004      	beq.n	5824 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    581a:	68fb      	ldr	r3, [r7, #12]
    581c:	2202      	movs	r2, #2
    581e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    5820:	231a      	movs	r3, #26
    5822:	e031      	b.n	5888 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5824:	230b      	movs	r3, #11
    5826:	18fb      	adds	r3, r7, r3
    5828:	781b      	ldrb	r3, [r3, #0]
    582a:	2204      	movs	r2, #4
    582c:	4013      	ands	r3, r2
    582e:	d004      	beq.n	583a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5830:	68fb      	ldr	r3, [r7, #12]
    5832:	2204      	movs	r2, #4
    5834:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    5836:	231e      	movs	r3, #30
    5838:	e026      	b.n	5888 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    583a:	230b      	movs	r3, #11
    583c:	18fb      	adds	r3, r7, r3
    583e:	781b      	ldrb	r3, [r3, #0]
    5840:	2201      	movs	r2, #1
    5842:	4013      	ands	r3, r2
    5844:	d004      	beq.n	5850 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5846:	68fb      	ldr	r3, [r7, #12]
    5848:	2201      	movs	r2, #1
    584a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    584c:	2313      	movs	r3, #19
    584e:	e01b      	b.n	5888 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5850:	230b      	movs	r3, #11
    5852:	18fb      	adds	r3, r7, r3
    5854:	781b      	ldrb	r3, [r3, #0]
    5856:	2210      	movs	r2, #16
    5858:	4013      	ands	r3, r2
    585a:	d004      	beq.n	5866 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    585c:	68fb      	ldr	r3, [r7, #12]
    585e:	2210      	movs	r2, #16
    5860:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    5862:	2342      	movs	r3, #66	; 0x42
    5864:	e010      	b.n	5888 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5866:	230b      	movs	r3, #11
    5868:	18fb      	adds	r3, r7, r3
    586a:	781b      	ldrb	r3, [r3, #0]
    586c:	2220      	movs	r2, #32
    586e:	4013      	ands	r3, r2
    5870:	d004      	beq.n	587c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5872:	68fb      	ldr	r3, [r7, #12]
    5874:	2220      	movs	r2, #32
    5876:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    5878:	2341      	movs	r3, #65	; 0x41
    587a:	e005      	b.n	5888 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    587c:	68fb      	ldr	r3, [r7, #12]
    587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5880:	b29a      	uxth	r2, r3
    5882:	683b      	ldr	r3, [r7, #0]
    5884:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    5886:	2300      	movs	r3, #0
}
    5888:	0018      	movs	r0, r3
    588a:	46bd      	mov	sp, r7
    588c:	b004      	add	sp, #16
    588e:	bd80      	pop	{r7, pc}
    5890:	000051d1 	.word	0x000051d1

00005894 <system_interrupt_enter_critical_section>:
{
    5894:	b580      	push	{r7, lr}
    5896:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5898:	4b02      	ldr	r3, [pc, #8]	; (58a4 <system_interrupt_enter_critical_section+0x10>)
    589a:	4798      	blx	r3
}
    589c:	46c0      	nop			; (mov r8, r8)
    589e:	46bd      	mov	sp, r7
    58a0:	bd80      	pop	{r7, pc}
    58a2:	46c0      	nop			; (mov r8, r8)
    58a4:	000033e5 	.word	0x000033e5

000058a8 <system_interrupt_leave_critical_section>:
{
    58a8:	b580      	push	{r7, lr}
    58aa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    58ac:	4b02      	ldr	r3, [pc, #8]	; (58b8 <system_interrupt_leave_critical_section+0x10>)
    58ae:	4798      	blx	r3
}
    58b0:	46c0      	nop			; (mov r8, r8)
    58b2:	46bd      	mov	sp, r7
    58b4:	bd80      	pop	{r7, pc}
    58b6:	46c0      	nop			; (mov r8, r8)
    58b8:	00003439 	.word	0x00003439

000058bc <usart_is_syncing>:
{
    58bc:	b580      	push	{r7, lr}
    58be:	b084      	sub	sp, #16
    58c0:	af00      	add	r7, sp, #0
    58c2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    58c4:	687b      	ldr	r3, [r7, #4]
    58c6:	681b      	ldr	r3, [r3, #0]
    58c8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    58ca:	68fb      	ldr	r3, [r7, #12]
    58cc:	69db      	ldr	r3, [r3, #28]
    58ce:	1e5a      	subs	r2, r3, #1
    58d0:	4193      	sbcs	r3, r2
    58d2:	b2db      	uxtb	r3, r3
}
    58d4:	0018      	movs	r0, r3
    58d6:	46bd      	mov	sp, r7
    58d8:	b004      	add	sp, #16
    58da:	bd80      	pop	{r7, pc}

000058dc <_usart_wait_for_sync>:
{
    58dc:	b580      	push	{r7, lr}
    58de:	b082      	sub	sp, #8
    58e0:	af00      	add	r7, sp, #0
    58e2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    58e4:	46c0      	nop			; (mov r8, r8)
    58e6:	687b      	ldr	r3, [r7, #4]
    58e8:	0018      	movs	r0, r3
    58ea:	4b04      	ldr	r3, [pc, #16]	; (58fc <_usart_wait_for_sync+0x20>)
    58ec:	4798      	blx	r3
    58ee:	1e03      	subs	r3, r0, #0
    58f0:	d1f9      	bne.n	58e6 <_usart_wait_for_sync+0xa>
}
    58f2:	46c0      	nop			; (mov r8, r8)
    58f4:	46bd      	mov	sp, r7
    58f6:	b002      	add	sp, #8
    58f8:	bd80      	pop	{r7, pc}
    58fa:	46c0      	nop			; (mov r8, r8)
    58fc:	000058bd 	.word	0x000058bd

00005900 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5900:	b580      	push	{r7, lr}
    5902:	b086      	sub	sp, #24
    5904:	af00      	add	r7, sp, #0
    5906:	60f8      	str	r0, [r7, #12]
    5908:	60b9      	str	r1, [r7, #8]
    590a:	1dbb      	adds	r3, r7, #6
    590c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    590e:	68fb      	ldr	r3, [r7, #12]
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5914:	4b0f      	ldr	r3, [pc, #60]	; (5954 <_usart_write_buffer+0x54>)
    5916:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    5918:	68fb      	ldr	r3, [r7, #12]
    591a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    591c:	b29b      	uxth	r3, r3
    591e:	2b00      	cmp	r3, #0
    5920:	d003      	beq.n	592a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5922:	4b0d      	ldr	r3, [pc, #52]	; (5958 <_usart_write_buffer+0x58>)
    5924:	4798      	blx	r3
		return STATUS_BUSY;
    5926:	2305      	movs	r3, #5
    5928:	e010      	b.n	594c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    592a:	68fb      	ldr	r3, [r7, #12]
    592c:	1dba      	adds	r2, r7, #6
    592e:	8812      	ldrh	r2, [r2, #0]
    5930:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    5932:	4b09      	ldr	r3, [pc, #36]	; (5958 <_usart_write_buffer+0x58>)
    5934:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    5936:	68fb      	ldr	r3, [r7, #12]
    5938:	68ba      	ldr	r2, [r7, #8]
    593a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    593c:	68fb      	ldr	r3, [r7, #12]
    593e:	2233      	movs	r2, #51	; 0x33
    5940:	2105      	movs	r1, #5
    5942:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    5944:	697b      	ldr	r3, [r7, #20]
    5946:	2201      	movs	r2, #1
    5948:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    594a:	2300      	movs	r3, #0
}
    594c:	0018      	movs	r0, r3
    594e:	46bd      	mov	sp, r7
    5950:	b006      	add	sp, #24
    5952:	bd80      	pop	{r7, pc}
    5954:	00005895 	.word	0x00005895
    5958:	000058a9 	.word	0x000058a9

0000595c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    595c:	b580      	push	{r7, lr}
    595e:	b086      	sub	sp, #24
    5960:	af00      	add	r7, sp, #0
    5962:	60f8      	str	r0, [r7, #12]
    5964:	60b9      	str	r1, [r7, #8]
    5966:	1dbb      	adds	r3, r7, #6
    5968:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    596a:	68fb      	ldr	r3, [r7, #12]
    596c:	681b      	ldr	r3, [r3, #0]
    596e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5970:	4b16      	ldr	r3, [pc, #88]	; (59cc <_usart_read_buffer+0x70>)
    5972:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5974:	68fb      	ldr	r3, [r7, #12]
    5976:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5978:	b29b      	uxth	r3, r3
    597a:	2b00      	cmp	r3, #0
    597c:	d003      	beq.n	5986 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    597e:	4b14      	ldr	r3, [pc, #80]	; (59d0 <_usart_read_buffer+0x74>)
    5980:	4798      	blx	r3
		return STATUS_BUSY;
    5982:	2305      	movs	r3, #5
    5984:	e01e      	b.n	59c4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    5986:	68fb      	ldr	r3, [r7, #12]
    5988:	1dba      	adds	r2, r7, #6
    598a:	8812      	ldrh	r2, [r2, #0]
    598c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    598e:	4b10      	ldr	r3, [pc, #64]	; (59d0 <_usart_read_buffer+0x74>)
    5990:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    5992:	68fb      	ldr	r3, [r7, #12]
    5994:	68ba      	ldr	r2, [r7, #8]
    5996:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5998:	68fb      	ldr	r3, [r7, #12]
    599a:	2232      	movs	r2, #50	; 0x32
    599c:	2105      	movs	r1, #5
    599e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    59a0:	697b      	ldr	r3, [r7, #20]
    59a2:	2204      	movs	r2, #4
    59a4:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    59a6:	68fb      	ldr	r3, [r7, #12]
    59a8:	7a1b      	ldrb	r3, [r3, #8]
    59aa:	2b00      	cmp	r3, #0
    59ac:	d002      	beq.n	59b4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    59ae:	697b      	ldr	r3, [r7, #20]
    59b0:	2220      	movs	r2, #32
    59b2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    59b4:	68fb      	ldr	r3, [r7, #12]
    59b6:	7a5b      	ldrb	r3, [r3, #9]
    59b8:	2b00      	cmp	r3, #0
    59ba:	d002      	beq.n	59c2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    59bc:	697b      	ldr	r3, [r7, #20]
    59be:	2208      	movs	r2, #8
    59c0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    59c2:	2300      	movs	r3, #0
}
    59c4:	0018      	movs	r0, r3
    59c6:	46bd      	mov	sp, r7
    59c8:	b006      	add	sp, #24
    59ca:	bd80      	pop	{r7, pc}
    59cc:	00005895 	.word	0x00005895
    59d0:	000058a9 	.word	0x000058a9

000059d4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    59d4:	b580      	push	{r7, lr}
    59d6:	b084      	sub	sp, #16
    59d8:	af00      	add	r7, sp, #0
    59da:	60f8      	str	r0, [r7, #12]
    59dc:	60b9      	str	r1, [r7, #8]
    59de:	1dfb      	adds	r3, r7, #7
    59e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    59e2:	1dfb      	adds	r3, r7, #7
    59e4:	781b      	ldrb	r3, [r3, #0]
    59e6:	68fa      	ldr	r2, [r7, #12]
    59e8:	3302      	adds	r3, #2
    59ea:	009b      	lsls	r3, r3, #2
    59ec:	18d3      	adds	r3, r2, r3
    59ee:	3304      	adds	r3, #4
    59f0:	68ba      	ldr	r2, [r7, #8]
    59f2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    59f4:	68fb      	ldr	r3, [r7, #12]
    59f6:	2230      	movs	r2, #48	; 0x30
    59f8:	5c9b      	ldrb	r3, [r3, r2]
    59fa:	b25a      	sxtb	r2, r3
    59fc:	1dfb      	adds	r3, r7, #7
    59fe:	781b      	ldrb	r3, [r3, #0]
    5a00:	2101      	movs	r1, #1
    5a02:	4099      	lsls	r1, r3
    5a04:	000b      	movs	r3, r1
    5a06:	b25b      	sxtb	r3, r3
    5a08:	4313      	orrs	r3, r2
    5a0a:	b25b      	sxtb	r3, r3
    5a0c:	b2d9      	uxtb	r1, r3
    5a0e:	68fb      	ldr	r3, [r7, #12]
    5a10:	2230      	movs	r2, #48	; 0x30
    5a12:	5499      	strb	r1, [r3, r2]
}
    5a14:	46c0      	nop			; (mov r8, r8)
    5a16:	46bd      	mov	sp, r7
    5a18:	b004      	add	sp, #16
    5a1a:	bd80      	pop	{r7, pc}

00005a1c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5a1c:	b580      	push	{r7, lr}
    5a1e:	b084      	sub	sp, #16
    5a20:	af00      	add	r7, sp, #0
    5a22:	60f8      	str	r0, [r7, #12]
    5a24:	60b9      	str	r1, [r7, #8]
    5a26:	1dbb      	adds	r3, r7, #6
    5a28:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5a2a:	1dbb      	adds	r3, r7, #6
    5a2c:	881b      	ldrh	r3, [r3, #0]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d101      	bne.n	5a36 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5a32:	2317      	movs	r3, #23
    5a34:	e010      	b.n	5a58 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5a36:	68fb      	ldr	r3, [r7, #12]
    5a38:	79db      	ldrb	r3, [r3, #7]
    5a3a:	2201      	movs	r2, #1
    5a3c:	4053      	eors	r3, r2
    5a3e:	b2db      	uxtb	r3, r3
    5a40:	2b00      	cmp	r3, #0
    5a42:	d001      	beq.n	5a48 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5a44:	231c      	movs	r3, #28
    5a46:	e007      	b.n	5a58 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    5a48:	1dbb      	adds	r3, r7, #6
    5a4a:	881a      	ldrh	r2, [r3, #0]
    5a4c:	68b9      	ldr	r1, [r7, #8]
    5a4e:	68fb      	ldr	r3, [r7, #12]
    5a50:	0018      	movs	r0, r3
    5a52:	4b03      	ldr	r3, [pc, #12]	; (5a60 <usart_write_buffer_job+0x44>)
    5a54:	4798      	blx	r3
    5a56:	0003      	movs	r3, r0
}
    5a58:	0018      	movs	r0, r3
    5a5a:	46bd      	mov	sp, r7
    5a5c:	b004      	add	sp, #16
    5a5e:	bd80      	pop	{r7, pc}
    5a60:	00005901 	.word	0x00005901

00005a64 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5a64:	b580      	push	{r7, lr}
    5a66:	b084      	sub	sp, #16
    5a68:	af00      	add	r7, sp, #0
    5a6a:	60f8      	str	r0, [r7, #12]
    5a6c:	60b9      	str	r1, [r7, #8]
    5a6e:	1dbb      	adds	r3, r7, #6
    5a70:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5a72:	1dbb      	adds	r3, r7, #6
    5a74:	881b      	ldrh	r3, [r3, #0]
    5a76:	2b00      	cmp	r3, #0
    5a78:	d101      	bne.n	5a7e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5a7a:	2317      	movs	r3, #23
    5a7c:	e010      	b.n	5aa0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5a7e:	68fb      	ldr	r3, [r7, #12]
    5a80:	799b      	ldrb	r3, [r3, #6]
    5a82:	2201      	movs	r2, #1
    5a84:	4053      	eors	r3, r2
    5a86:	b2db      	uxtb	r3, r3
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d001      	beq.n	5a90 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5a8c:	231c      	movs	r3, #28
    5a8e:	e007      	b.n	5aa0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5a90:	1dbb      	adds	r3, r7, #6
    5a92:	881a      	ldrh	r2, [r3, #0]
    5a94:	68b9      	ldr	r1, [r7, #8]
    5a96:	68fb      	ldr	r3, [r7, #12]
    5a98:	0018      	movs	r0, r3
    5a9a:	4b03      	ldr	r3, [pc, #12]	; (5aa8 <usart_read_buffer_job+0x44>)
    5a9c:	4798      	blx	r3
    5a9e:	0003      	movs	r3, r0
}
    5aa0:	0018      	movs	r0, r3
    5aa2:	46bd      	mov	sp, r7
    5aa4:	b004      	add	sp, #16
    5aa6:	bd80      	pop	{r7, pc}
    5aa8:	0000595d 	.word	0x0000595d

00005aac <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    5aac:	b580      	push	{r7, lr}
    5aae:	b084      	sub	sp, #16
    5ab0:	af00      	add	r7, sp, #0
    5ab2:	6078      	str	r0, [r7, #4]
    5ab4:	000a      	movs	r2, r1
    5ab6:	1cfb      	adds	r3, r7, #3
    5ab8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    5aba:	1cfb      	adds	r3, r7, #3
    5abc:	781b      	ldrb	r3, [r3, #0]
    5abe:	2b00      	cmp	r3, #0
    5ac0:	d002      	beq.n	5ac8 <usart_get_job_status+0x1c>
    5ac2:	2b01      	cmp	r3, #1
    5ac4:	d007      	beq.n	5ad6 <usart_get_job_status+0x2a>
    5ac6:	e00d      	b.n	5ae4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    5ac8:	230f      	movs	r3, #15
    5aca:	18fb      	adds	r3, r7, r3
    5acc:	687a      	ldr	r2, [r7, #4]
    5ace:	2132      	movs	r1, #50	; 0x32
    5ad0:	5c52      	ldrb	r2, [r2, r1]
    5ad2:	701a      	strb	r2, [r3, #0]
			break;
    5ad4:	e00b      	b.n	5aee <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    5ad6:	230f      	movs	r3, #15
    5ad8:	18fb      	adds	r3, r7, r3
    5ada:	687a      	ldr	r2, [r7, #4]
    5adc:	2133      	movs	r1, #51	; 0x33
    5ade:	5c52      	ldrb	r2, [r2, r1]
    5ae0:	701a      	strb	r2, [r3, #0]
			break;
    5ae2:	e004      	b.n	5aee <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    5ae4:	230f      	movs	r3, #15
    5ae6:	18fb      	adds	r3, r7, r3
    5ae8:	2217      	movs	r2, #23
    5aea:	701a      	strb	r2, [r3, #0]
			break;
    5aec:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    5aee:	230f      	movs	r3, #15
    5af0:	18fb      	adds	r3, r7, r3
    5af2:	781b      	ldrb	r3, [r3, #0]
}
    5af4:	0018      	movs	r0, r3
    5af6:	46bd      	mov	sp, r7
    5af8:	b004      	add	sp, #16
    5afa:	bd80      	pop	{r7, pc}

00005afc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5afc:	b580      	push	{r7, lr}
    5afe:	b088      	sub	sp, #32
    5b00:	af00      	add	r7, sp, #0
    5b02:	0002      	movs	r2, r0
    5b04:	1dfb      	adds	r3, r7, #7
    5b06:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5b08:	1dfb      	adds	r3, r7, #7
    5b0a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    5b0c:	4ba3      	ldr	r3, [pc, #652]	; (5d9c <_usart_interrupt_handler+0x2a0>)
    5b0e:	0092      	lsls	r2, r2, #2
    5b10:	58d3      	ldr	r3, [r2, r3]
    5b12:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5b14:	69bb      	ldr	r3, [r7, #24]
    5b16:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    5b18:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    5b1a:	69bb      	ldr	r3, [r7, #24]
    5b1c:	0018      	movs	r0, r3
    5b1e:	4ba0      	ldr	r3, [pc, #640]	; (5da0 <_usart_interrupt_handler+0x2a4>)
    5b20:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5b22:	697b      	ldr	r3, [r7, #20]
    5b24:	7e1b      	ldrb	r3, [r3, #24]
    5b26:	b2da      	uxtb	r2, r3
    5b28:	2312      	movs	r3, #18
    5b2a:	18fb      	adds	r3, r7, r3
    5b2c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    5b2e:	697b      	ldr	r3, [r7, #20]
    5b30:	7d9b      	ldrb	r3, [r3, #22]
    5b32:	b2db      	uxtb	r3, r3
    5b34:	b29a      	uxth	r2, r3
    5b36:	2312      	movs	r3, #18
    5b38:	18fb      	adds	r3, r7, r3
    5b3a:	2112      	movs	r1, #18
    5b3c:	1879      	adds	r1, r7, r1
    5b3e:	8809      	ldrh	r1, [r1, #0]
    5b40:	400a      	ands	r2, r1
    5b42:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    5b44:	69bb      	ldr	r3, [r7, #24]
    5b46:	2230      	movs	r2, #48	; 0x30
    5b48:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    5b4a:	69ba      	ldr	r2, [r7, #24]
    5b4c:	2131      	movs	r1, #49	; 0x31
    5b4e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    5b50:	4013      	ands	r3, r2
    5b52:	b2da      	uxtb	r2, r3
    5b54:	2310      	movs	r3, #16
    5b56:	18fb      	adds	r3, r7, r3
    5b58:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5b5a:	2312      	movs	r3, #18
    5b5c:	18fb      	adds	r3, r7, r3
    5b5e:	881b      	ldrh	r3, [r3, #0]
    5b60:	2201      	movs	r2, #1
    5b62:	4013      	ands	r3, r2
    5b64:	d044      	beq.n	5bf0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5b66:	69bb      	ldr	r3, [r7, #24]
    5b68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5b6a:	b29b      	uxth	r3, r3
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	d03c      	beq.n	5bea <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5b70:	69bb      	ldr	r3, [r7, #24]
    5b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b74:	781b      	ldrb	r3, [r3, #0]
    5b76:	b2da      	uxtb	r2, r3
    5b78:	231c      	movs	r3, #28
    5b7a:	18fb      	adds	r3, r7, r3
    5b7c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5b7e:	69bb      	ldr	r3, [r7, #24]
    5b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b82:	1c5a      	adds	r2, r3, #1
    5b84:	69bb      	ldr	r3, [r7, #24]
    5b86:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5b88:	69bb      	ldr	r3, [r7, #24]
    5b8a:	795b      	ldrb	r3, [r3, #5]
    5b8c:	2b01      	cmp	r3, #1
    5b8e:	d113      	bne.n	5bb8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5b90:	69bb      	ldr	r3, [r7, #24]
    5b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5b94:	781b      	ldrb	r3, [r3, #0]
    5b96:	b2db      	uxtb	r3, r3
    5b98:	021b      	lsls	r3, r3, #8
    5b9a:	b21a      	sxth	r2, r3
    5b9c:	231c      	movs	r3, #28
    5b9e:	18fb      	adds	r3, r7, r3
    5ba0:	2100      	movs	r1, #0
    5ba2:	5e5b      	ldrsh	r3, [r3, r1]
    5ba4:	4313      	orrs	r3, r2
    5ba6:	b21a      	sxth	r2, r3
    5ba8:	231c      	movs	r3, #28
    5baa:	18fb      	adds	r3, r7, r3
    5bac:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5bae:	69bb      	ldr	r3, [r7, #24]
    5bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bb2:	1c5a      	adds	r2, r3, #1
    5bb4:	69bb      	ldr	r3, [r7, #24]
    5bb6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5bb8:	231c      	movs	r3, #28
    5bba:	18fb      	adds	r3, r7, r3
    5bbc:	881b      	ldrh	r3, [r3, #0]
    5bbe:	05db      	lsls	r3, r3, #23
    5bc0:	0ddb      	lsrs	r3, r3, #23
    5bc2:	b29a      	uxth	r2, r3
    5bc4:	697b      	ldr	r3, [r7, #20]
    5bc6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5bc8:	69bb      	ldr	r3, [r7, #24]
    5bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5bcc:	b29b      	uxth	r3, r3
    5bce:	3b01      	subs	r3, #1
    5bd0:	b29b      	uxth	r3, r3
    5bd2:	69ba      	ldr	r2, [r7, #24]
    5bd4:	1c19      	adds	r1, r3, #0
    5bd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d109      	bne.n	5bf0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5bdc:	697b      	ldr	r3, [r7, #20]
    5bde:	2201      	movs	r2, #1
    5be0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5be2:	697b      	ldr	r3, [r7, #20]
    5be4:	2202      	movs	r2, #2
    5be6:	759a      	strb	r2, [r3, #22]
    5be8:	e002      	b.n	5bf0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5bea:	697b      	ldr	r3, [r7, #20]
    5bec:	2201      	movs	r2, #1
    5bee:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5bf0:	2312      	movs	r3, #18
    5bf2:	18fb      	adds	r3, r7, r3
    5bf4:	881b      	ldrh	r3, [r3, #0]
    5bf6:	2202      	movs	r2, #2
    5bf8:	4013      	ands	r3, r2
    5bfa:	d011      	beq.n	5c20 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5bfc:	697b      	ldr	r3, [r7, #20]
    5bfe:	2202      	movs	r2, #2
    5c00:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5c02:	69bb      	ldr	r3, [r7, #24]
    5c04:	2233      	movs	r2, #51	; 0x33
    5c06:	2100      	movs	r1, #0
    5c08:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5c0a:	2310      	movs	r3, #16
    5c0c:	18fb      	adds	r3, r7, r3
    5c0e:	881b      	ldrh	r3, [r3, #0]
    5c10:	2201      	movs	r2, #1
    5c12:	4013      	ands	r3, r2
    5c14:	d004      	beq.n	5c20 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5c16:	69bb      	ldr	r3, [r7, #24]
    5c18:	68db      	ldr	r3, [r3, #12]
    5c1a:	69ba      	ldr	r2, [r7, #24]
    5c1c:	0010      	movs	r0, r2
    5c1e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5c20:	2312      	movs	r3, #18
    5c22:	18fb      	adds	r3, r7, r3
    5c24:	881b      	ldrh	r3, [r3, #0]
    5c26:	2204      	movs	r2, #4
    5c28:	4013      	ands	r3, r2
    5c2a:	d100      	bne.n	5c2e <_usart_interrupt_handler+0x132>
    5c2c:	e0bd      	b.n	5daa <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    5c2e:	69bb      	ldr	r3, [r7, #24]
    5c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5c32:	b29b      	uxth	r3, r3
    5c34:	2b00      	cmp	r3, #0
    5c36:	d100      	bne.n	5c3a <_usart_interrupt_handler+0x13e>
    5c38:	e0b4      	b.n	5da4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5c3a:	697b      	ldr	r3, [r7, #20]
    5c3c:	8b5b      	ldrh	r3, [r3, #26]
    5c3e:	b29b      	uxth	r3, r3
    5c40:	b2da      	uxtb	r2, r3
    5c42:	231f      	movs	r3, #31
    5c44:	18fb      	adds	r3, r7, r3
    5c46:	213f      	movs	r1, #63	; 0x3f
    5c48:	400a      	ands	r2, r1
    5c4a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5c4c:	231f      	movs	r3, #31
    5c4e:	18fb      	adds	r3, r7, r3
    5c50:	781b      	ldrb	r3, [r3, #0]
    5c52:	2208      	movs	r2, #8
    5c54:	4013      	ands	r3, r2
    5c56:	d007      	beq.n	5c68 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5c58:	231f      	movs	r3, #31
    5c5a:	18fb      	adds	r3, r7, r3
    5c5c:	221f      	movs	r2, #31
    5c5e:	18ba      	adds	r2, r7, r2
    5c60:	7812      	ldrb	r2, [r2, #0]
    5c62:	2108      	movs	r1, #8
    5c64:	438a      	bics	r2, r1
    5c66:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5c68:	231f      	movs	r3, #31
    5c6a:	18fb      	adds	r3, r7, r3
    5c6c:	781b      	ldrb	r3, [r3, #0]
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d050      	beq.n	5d14 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5c72:	231f      	movs	r3, #31
    5c74:	18fb      	adds	r3, r7, r3
    5c76:	781b      	ldrb	r3, [r3, #0]
    5c78:	2202      	movs	r2, #2
    5c7a:	4013      	ands	r3, r2
    5c7c:	d007      	beq.n	5c8e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5c7e:	69bb      	ldr	r3, [r7, #24]
    5c80:	2232      	movs	r2, #50	; 0x32
    5c82:	211a      	movs	r1, #26
    5c84:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5c86:	697b      	ldr	r3, [r7, #20]
    5c88:	2202      	movs	r2, #2
    5c8a:	835a      	strh	r2, [r3, #26]
    5c8c:	e036      	b.n	5cfc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5c8e:	231f      	movs	r3, #31
    5c90:	18fb      	adds	r3, r7, r3
    5c92:	781b      	ldrb	r3, [r3, #0]
    5c94:	2204      	movs	r2, #4
    5c96:	4013      	ands	r3, r2
    5c98:	d007      	beq.n	5caa <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5c9a:	69bb      	ldr	r3, [r7, #24]
    5c9c:	2232      	movs	r2, #50	; 0x32
    5c9e:	211e      	movs	r1, #30
    5ca0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5ca2:	697b      	ldr	r3, [r7, #20]
    5ca4:	2204      	movs	r2, #4
    5ca6:	835a      	strh	r2, [r3, #26]
    5ca8:	e028      	b.n	5cfc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5caa:	231f      	movs	r3, #31
    5cac:	18fb      	adds	r3, r7, r3
    5cae:	781b      	ldrb	r3, [r3, #0]
    5cb0:	2201      	movs	r2, #1
    5cb2:	4013      	ands	r3, r2
    5cb4:	d007      	beq.n	5cc6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    5cb6:	69bb      	ldr	r3, [r7, #24]
    5cb8:	2232      	movs	r2, #50	; 0x32
    5cba:	2113      	movs	r1, #19
    5cbc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5cbe:	697b      	ldr	r3, [r7, #20]
    5cc0:	2201      	movs	r2, #1
    5cc2:	835a      	strh	r2, [r3, #26]
    5cc4:	e01a      	b.n	5cfc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5cc6:	231f      	movs	r3, #31
    5cc8:	18fb      	adds	r3, r7, r3
    5cca:	781b      	ldrb	r3, [r3, #0]
    5ccc:	2210      	movs	r2, #16
    5cce:	4013      	ands	r3, r2
    5cd0:	d007      	beq.n	5ce2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5cd2:	69bb      	ldr	r3, [r7, #24]
    5cd4:	2232      	movs	r2, #50	; 0x32
    5cd6:	2142      	movs	r1, #66	; 0x42
    5cd8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5cda:	697b      	ldr	r3, [r7, #20]
    5cdc:	2210      	movs	r2, #16
    5cde:	835a      	strh	r2, [r3, #26]
    5ce0:	e00c      	b.n	5cfc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5ce2:	231f      	movs	r3, #31
    5ce4:	18fb      	adds	r3, r7, r3
    5ce6:	781b      	ldrb	r3, [r3, #0]
    5ce8:	2220      	movs	r2, #32
    5cea:	4013      	ands	r3, r2
    5cec:	d006      	beq.n	5cfc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5cee:	69bb      	ldr	r3, [r7, #24]
    5cf0:	2232      	movs	r2, #50	; 0x32
    5cf2:	2141      	movs	r1, #65	; 0x41
    5cf4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5cf6:	697b      	ldr	r3, [r7, #20]
    5cf8:	2220      	movs	r2, #32
    5cfa:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5cfc:	2310      	movs	r3, #16
    5cfe:	18fb      	adds	r3, r7, r3
    5d00:	881b      	ldrh	r3, [r3, #0]
    5d02:	2204      	movs	r2, #4
    5d04:	4013      	ands	r3, r2
				if (callback_status
    5d06:	d050      	beq.n	5daa <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5d08:	69bb      	ldr	r3, [r7, #24]
    5d0a:	695b      	ldr	r3, [r3, #20]
    5d0c:	69ba      	ldr	r2, [r7, #24]
    5d0e:	0010      	movs	r0, r2
    5d10:	4798      	blx	r3
    5d12:	e04a      	b.n	5daa <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5d14:	697b      	ldr	r3, [r7, #20]
    5d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5d18:	b29a      	uxth	r2, r3
    5d1a:	230e      	movs	r3, #14
    5d1c:	18fb      	adds	r3, r7, r3
    5d1e:	05d2      	lsls	r2, r2, #23
    5d20:	0dd2      	lsrs	r2, r2, #23
    5d22:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5d24:	69bb      	ldr	r3, [r7, #24]
    5d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d28:	220e      	movs	r2, #14
    5d2a:	18ba      	adds	r2, r7, r2
    5d2c:	8812      	ldrh	r2, [r2, #0]
    5d2e:	b2d2      	uxtb	r2, r2
    5d30:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5d32:	69bb      	ldr	r3, [r7, #24]
    5d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d36:	1c5a      	adds	r2, r3, #1
    5d38:	69bb      	ldr	r3, [r7, #24]
    5d3a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5d3c:	69bb      	ldr	r3, [r7, #24]
    5d3e:	795b      	ldrb	r3, [r3, #5]
    5d40:	2b01      	cmp	r3, #1
    5d42:	d10d      	bne.n	5d60 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5d44:	69bb      	ldr	r3, [r7, #24]
    5d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d48:	220e      	movs	r2, #14
    5d4a:	18ba      	adds	r2, r7, r2
    5d4c:	8812      	ldrh	r2, [r2, #0]
    5d4e:	0a12      	lsrs	r2, r2, #8
    5d50:	b292      	uxth	r2, r2
    5d52:	b2d2      	uxtb	r2, r2
    5d54:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5d56:	69bb      	ldr	r3, [r7, #24]
    5d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d5a:	1c5a      	adds	r2, r3, #1
    5d5c:	69bb      	ldr	r3, [r7, #24]
    5d5e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5d60:	69bb      	ldr	r3, [r7, #24]
    5d62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5d64:	b29b      	uxth	r3, r3
    5d66:	3b01      	subs	r3, #1
    5d68:	b29b      	uxth	r3, r3
    5d6a:	69ba      	ldr	r2, [r7, #24]
    5d6c:	1c19      	adds	r1, r3, #0
    5d6e:	8591      	strh	r1, [r2, #44]	; 0x2c
    5d70:	2b00      	cmp	r3, #0
    5d72:	d11a      	bne.n	5daa <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5d74:	697b      	ldr	r3, [r7, #20]
    5d76:	2204      	movs	r2, #4
    5d78:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5d7a:	69bb      	ldr	r3, [r7, #24]
    5d7c:	2232      	movs	r2, #50	; 0x32
    5d7e:	2100      	movs	r1, #0
    5d80:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5d82:	2310      	movs	r3, #16
    5d84:	18fb      	adds	r3, r7, r3
    5d86:	881b      	ldrh	r3, [r3, #0]
    5d88:	2202      	movs	r2, #2
    5d8a:	4013      	ands	r3, r2
					if (callback_status
    5d8c:	d00d      	beq.n	5daa <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5d8e:	69bb      	ldr	r3, [r7, #24]
    5d90:	691b      	ldr	r3, [r3, #16]
    5d92:	69ba      	ldr	r2, [r7, #24]
    5d94:	0010      	movs	r0, r2
    5d96:	4798      	blx	r3
    5d98:	e007      	b.n	5daa <_usart_interrupt_handler+0x2ae>
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	20000a04 	.word	0x20000a04
    5da0:	000058dd 	.word	0x000058dd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5da4:	697b      	ldr	r3, [r7, #20]
    5da6:	2204      	movs	r2, #4
    5da8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5daa:	2312      	movs	r3, #18
    5dac:	18fb      	adds	r3, r7, r3
    5dae:	881b      	ldrh	r3, [r3, #0]
    5db0:	2210      	movs	r2, #16
    5db2:	4013      	ands	r3, r2
    5db4:	d010      	beq.n	5dd8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5db6:	697b      	ldr	r3, [r7, #20]
    5db8:	2210      	movs	r2, #16
    5dba:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5dbc:	697b      	ldr	r3, [r7, #20]
    5dbe:	2210      	movs	r2, #16
    5dc0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5dc2:	2310      	movs	r3, #16
    5dc4:	18fb      	adds	r3, r7, r3
    5dc6:	881b      	ldrh	r3, [r3, #0]
    5dc8:	2210      	movs	r2, #16
    5dca:	4013      	ands	r3, r2
    5dcc:	d004      	beq.n	5dd8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5dce:	69bb      	ldr	r3, [r7, #24]
    5dd0:	69db      	ldr	r3, [r3, #28]
    5dd2:	69ba      	ldr	r2, [r7, #24]
    5dd4:	0010      	movs	r0, r2
    5dd6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5dd8:	2312      	movs	r3, #18
    5dda:	18fb      	adds	r3, r7, r3
    5ddc:	881b      	ldrh	r3, [r3, #0]
    5dde:	2220      	movs	r2, #32
    5de0:	4013      	ands	r3, r2
    5de2:	d010      	beq.n	5e06 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5de4:	697b      	ldr	r3, [r7, #20]
    5de6:	2220      	movs	r2, #32
    5de8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5dea:	697b      	ldr	r3, [r7, #20]
    5dec:	2220      	movs	r2, #32
    5dee:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5df0:	2310      	movs	r3, #16
    5df2:	18fb      	adds	r3, r7, r3
    5df4:	881b      	ldrh	r3, [r3, #0]
    5df6:	2208      	movs	r2, #8
    5df8:	4013      	ands	r3, r2
    5dfa:	d004      	beq.n	5e06 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5dfc:	69bb      	ldr	r3, [r7, #24]
    5dfe:	699b      	ldr	r3, [r3, #24]
    5e00:	69ba      	ldr	r2, [r7, #24]
    5e02:	0010      	movs	r0, r2
    5e04:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5e06:	2312      	movs	r3, #18
    5e08:	18fb      	adds	r3, r7, r3
    5e0a:	881b      	ldrh	r3, [r3, #0]
    5e0c:	2208      	movs	r2, #8
    5e0e:	4013      	ands	r3, r2
    5e10:	d010      	beq.n	5e34 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5e12:	697b      	ldr	r3, [r7, #20]
    5e14:	2208      	movs	r2, #8
    5e16:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5e18:	697b      	ldr	r3, [r7, #20]
    5e1a:	2208      	movs	r2, #8
    5e1c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5e1e:	2310      	movs	r3, #16
    5e20:	18fb      	adds	r3, r7, r3
    5e22:	881b      	ldrh	r3, [r3, #0]
    5e24:	2220      	movs	r2, #32
    5e26:	4013      	ands	r3, r2
    5e28:	d004      	beq.n	5e34 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5e2a:	69bb      	ldr	r3, [r7, #24]
    5e2c:	6a1b      	ldr	r3, [r3, #32]
    5e2e:	69ba      	ldr	r2, [r7, #24]
    5e30:	0010      	movs	r0, r2
    5e32:	4798      	blx	r3
		}
	}
#endif
}
    5e34:	46c0      	nop			; (mov r8, r8)
    5e36:	46bd      	mov	sp, r7
    5e38:	b008      	add	sp, #32
    5e3a:	bd80      	pop	{r7, pc}

00005e3c <system_gclk_gen_get_config_defaults>:
{
    5e3c:	b580      	push	{r7, lr}
    5e3e:	b082      	sub	sp, #8
    5e40:	af00      	add	r7, sp, #0
    5e42:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    5e44:	687b      	ldr	r3, [r7, #4]
    5e46:	2201      	movs	r2, #1
    5e48:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5e4a:	687b      	ldr	r3, [r7, #4]
    5e4c:	2200      	movs	r2, #0
    5e4e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	2206      	movs	r2, #6
    5e54:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    5e56:	687b      	ldr	r3, [r7, #4]
    5e58:	2200      	movs	r2, #0
    5e5a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5e5c:	687b      	ldr	r3, [r7, #4]
    5e5e:	2200      	movs	r2, #0
    5e60:	725a      	strb	r2, [r3, #9]
}
    5e62:	46c0      	nop			; (mov r8, r8)
    5e64:	46bd      	mov	sp, r7
    5e66:	b002      	add	sp, #8
    5e68:	bd80      	pop	{r7, pc}

00005e6a <system_gclk_chan_get_config_defaults>:
{
    5e6a:	b580      	push	{r7, lr}
    5e6c:	b082      	sub	sp, #8
    5e6e:	af00      	add	r7, sp, #0
    5e70:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5e72:	687b      	ldr	r3, [r7, #4]
    5e74:	2200      	movs	r2, #0
    5e76:	701a      	strb	r2, [r3, #0]
}
    5e78:	46c0      	nop			; (mov r8, r8)
    5e7a:	46bd      	mov	sp, r7
    5e7c:	b002      	add	sp, #8
    5e7e:	bd80      	pop	{r7, pc}

00005e80 <system_clock_source_xosc32k_get_config_defaults>:
{
    5e80:	b580      	push	{r7, lr}
    5e82:	b082      	sub	sp, #8
    5e84:	af00      	add	r7, sp, #0
    5e86:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5e88:	687b      	ldr	r3, [r7, #4]
    5e8a:	2200      	movs	r2, #0
    5e8c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5e8e:	687b      	ldr	r3, [r7, #4]
    5e90:	2204      	movs	r2, #4
    5e92:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5e94:	687b      	ldr	r3, [r7, #4]
    5e96:	2200      	movs	r2, #0
    5e98:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5e9a:	687b      	ldr	r3, [r7, #4]
    5e9c:	2280      	movs	r2, #128	; 0x80
    5e9e:	0212      	lsls	r2, r2, #8
    5ea0:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5ea2:	687b      	ldr	r3, [r7, #4]
    5ea4:	2200      	movs	r2, #0
    5ea6:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5ea8:	687b      	ldr	r3, [r7, #4]
    5eaa:	2201      	movs	r2, #1
    5eac:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5eae:	687b      	ldr	r3, [r7, #4]
    5eb0:	2200      	movs	r2, #0
    5eb2:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5eb4:	687b      	ldr	r3, [r7, #4]
    5eb6:	2201      	movs	r2, #1
    5eb8:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5eba:	687b      	ldr	r3, [r7, #4]
    5ebc:	2200      	movs	r2, #0
    5ebe:	739a      	strb	r2, [r3, #14]
}
    5ec0:	46c0      	nop			; (mov r8, r8)
    5ec2:	46bd      	mov	sp, r7
    5ec4:	b002      	add	sp, #8
    5ec6:	bd80      	pop	{r7, pc}

00005ec8 <system_clock_source_osc8m_get_config_defaults>:
{
    5ec8:	b580      	push	{r7, lr}
    5eca:	b082      	sub	sp, #8
    5ecc:	af00      	add	r7, sp, #0
    5ece:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5ed0:	687b      	ldr	r3, [r7, #4]
    5ed2:	2203      	movs	r2, #3
    5ed4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5ed6:	687b      	ldr	r3, [r7, #4]
    5ed8:	2200      	movs	r2, #0
    5eda:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5edc:	687b      	ldr	r3, [r7, #4]
    5ede:	2201      	movs	r2, #1
    5ee0:	709a      	strb	r2, [r3, #2]
}
    5ee2:	46c0      	nop			; (mov r8, r8)
    5ee4:	46bd      	mov	sp, r7
    5ee6:	b002      	add	sp, #8
    5ee8:	bd80      	pop	{r7, pc}

00005eea <system_clock_source_dfll_get_config_defaults>:
{
    5eea:	b580      	push	{r7, lr}
    5eec:	b082      	sub	sp, #8
    5eee:	af00      	add	r7, sp, #0
    5ef0:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5ef2:	687b      	ldr	r3, [r7, #4]
    5ef4:	2200      	movs	r2, #0
    5ef6:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5ef8:	687b      	ldr	r3, [r7, #4]
    5efa:	2200      	movs	r2, #0
    5efc:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5efe:	687b      	ldr	r3, [r7, #4]
    5f00:	2200      	movs	r2, #0
    5f02:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5f04:	687b      	ldr	r3, [r7, #4]
    5f06:	2200      	movs	r2, #0
    5f08:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5f0a:	687b      	ldr	r3, [r7, #4]
    5f0c:	2200      	movs	r2, #0
    5f0e:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	2201      	movs	r2, #1
    5f14:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	2207      	movs	r2, #7
    5f1a:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5f1c:	687b      	ldr	r3, [r7, #4]
    5f1e:	223f      	movs	r2, #63	; 0x3f
    5f20:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	2201      	movs	r2, #1
    5f26:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	2201      	movs	r2, #1
    5f2c:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5f2e:	687b      	ldr	r3, [r7, #4]
    5f30:	2206      	movs	r2, #6
    5f32:	821a      	strh	r2, [r3, #16]
}
    5f34:	46c0      	nop			; (mov r8, r8)
    5f36:	46bd      	mov	sp, r7
    5f38:	b002      	add	sp, #8
    5f3a:	bd80      	pop	{r7, pc}

00005f3c <system_cpu_clock_set_divider>:
{
    5f3c:	b580      	push	{r7, lr}
    5f3e:	b082      	sub	sp, #8
    5f40:	af00      	add	r7, sp, #0
    5f42:	0002      	movs	r2, r0
    5f44:	1dfb      	adds	r3, r7, #7
    5f46:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5f48:	4a03      	ldr	r2, [pc, #12]	; (5f58 <system_cpu_clock_set_divider+0x1c>)
    5f4a:	1dfb      	adds	r3, r7, #7
    5f4c:	781b      	ldrb	r3, [r3, #0]
    5f4e:	7213      	strb	r3, [r2, #8]
}
    5f50:	46c0      	nop			; (mov r8, r8)
    5f52:	46bd      	mov	sp, r7
    5f54:	b002      	add	sp, #8
    5f56:	bd80      	pop	{r7, pc}
    5f58:	40000400 	.word	0x40000400

00005f5c <system_apb_clock_set_divider>:
{
    5f5c:	b580      	push	{r7, lr}
    5f5e:	b082      	sub	sp, #8
    5f60:	af00      	add	r7, sp, #0
    5f62:	0002      	movs	r2, r0
    5f64:	1dfb      	adds	r3, r7, #7
    5f66:	701a      	strb	r2, [r3, #0]
    5f68:	1dbb      	adds	r3, r7, #6
    5f6a:	1c0a      	adds	r2, r1, #0
    5f6c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5f6e:	1dfb      	adds	r3, r7, #7
    5f70:	781b      	ldrb	r3, [r3, #0]
    5f72:	2b01      	cmp	r3, #1
    5f74:	d008      	beq.n	5f88 <system_apb_clock_set_divider+0x2c>
    5f76:	2b02      	cmp	r3, #2
    5f78:	d00b      	beq.n	5f92 <system_apb_clock_set_divider+0x36>
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d10e      	bne.n	5f9c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    5f7e:	4a0b      	ldr	r2, [pc, #44]	; (5fac <system_apb_clock_set_divider+0x50>)
    5f80:	1dbb      	adds	r3, r7, #6
    5f82:	781b      	ldrb	r3, [r3, #0]
    5f84:	7253      	strb	r3, [r2, #9]
			break;
    5f86:	e00b      	b.n	5fa0 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5f88:	4a08      	ldr	r2, [pc, #32]	; (5fac <system_apb_clock_set_divider+0x50>)
    5f8a:	1dbb      	adds	r3, r7, #6
    5f8c:	781b      	ldrb	r3, [r3, #0]
    5f8e:	7293      	strb	r3, [r2, #10]
			break;
    5f90:	e006      	b.n	5fa0 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5f92:	4a06      	ldr	r2, [pc, #24]	; (5fac <system_apb_clock_set_divider+0x50>)
    5f94:	1dbb      	adds	r3, r7, #6
    5f96:	781b      	ldrb	r3, [r3, #0]
    5f98:	72d3      	strb	r3, [r2, #11]
			break;
    5f9a:	e001      	b.n	5fa0 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5f9c:	2317      	movs	r3, #23
    5f9e:	e000      	b.n	5fa2 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    5fa0:	2300      	movs	r3, #0
}
    5fa2:	0018      	movs	r0, r3
    5fa4:	46bd      	mov	sp, r7
    5fa6:	b002      	add	sp, #8
    5fa8:	bd80      	pop	{r7, pc}
    5faa:	46c0      	nop			; (mov r8, r8)
    5fac:	40000400 	.word	0x40000400

00005fb0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5fb0:	b580      	push	{r7, lr}
    5fb2:	b082      	sub	sp, #8
    5fb4:	af00      	add	r7, sp, #0
    5fb6:	0002      	movs	r2, r0
    5fb8:	1dfb      	adds	r3, r7, #7
    5fba:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5fbc:	4a08      	ldr	r2, [pc, #32]	; (5fe0 <system_flash_set_waitstates+0x30>)
    5fbe:	1dfb      	adds	r3, r7, #7
    5fc0:	781b      	ldrb	r3, [r3, #0]
    5fc2:	210f      	movs	r1, #15
    5fc4:	400b      	ands	r3, r1
    5fc6:	b2d9      	uxtb	r1, r3
    5fc8:	6853      	ldr	r3, [r2, #4]
    5fca:	200f      	movs	r0, #15
    5fcc:	4001      	ands	r1, r0
    5fce:	0049      	lsls	r1, r1, #1
    5fd0:	201e      	movs	r0, #30
    5fd2:	4383      	bics	r3, r0
    5fd4:	430b      	orrs	r3, r1
    5fd6:	6053      	str	r3, [r2, #4]
}
    5fd8:	46c0      	nop			; (mov r8, r8)
    5fda:	46bd      	mov	sp, r7
    5fdc:	b002      	add	sp, #8
    5fde:	bd80      	pop	{r7, pc}
    5fe0:	41004000 	.word	0x41004000

00005fe4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5fe4:	b580      	push	{r7, lr}
    5fe6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5fe8:	46c0      	nop			; (mov r8, r8)
    5fea:	4b04      	ldr	r3, [pc, #16]	; (5ffc <_system_dfll_wait_for_sync+0x18>)
    5fec:	68db      	ldr	r3, [r3, #12]
    5fee:	2210      	movs	r2, #16
    5ff0:	4013      	ands	r3, r2
    5ff2:	d0fa      	beq.n	5fea <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5ff4:	46c0      	nop			; (mov r8, r8)
    5ff6:	46bd      	mov	sp, r7
    5ff8:	bd80      	pop	{r7, pc}
    5ffa:	46c0      	nop			; (mov r8, r8)
    5ffc:	40000800 	.word	0x40000800

00006000 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    6000:	b580      	push	{r7, lr}
    6002:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    6004:	4b0c      	ldr	r3, [pc, #48]	; (6038 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6006:	2202      	movs	r2, #2
    6008:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    600a:	4b0c      	ldr	r3, [pc, #48]	; (603c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    600c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    600e:	4a0a      	ldr	r2, [pc, #40]	; (6038 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6010:	4b0b      	ldr	r3, [pc, #44]	; (6040 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6012:	689b      	ldr	r3, [r3, #8]
    6014:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6016:	4a08      	ldr	r2, [pc, #32]	; (6038 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6018:	4b09      	ldr	r3, [pc, #36]	; (6040 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    601a:	685b      	ldr	r3, [r3, #4]
    601c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    601e:	4b06      	ldr	r3, [pc, #24]	; (6038 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6020:	2200      	movs	r2, #0
    6022:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6024:	4b05      	ldr	r3, [pc, #20]	; (603c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6026:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6028:	4a03      	ldr	r2, [pc, #12]	; (6038 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    602a:	4b05      	ldr	r3, [pc, #20]	; (6040 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    602c:	681b      	ldr	r3, [r3, #0]
    602e:	b29b      	uxth	r3, r3
    6030:	8493      	strh	r3, [r2, #36]	; 0x24
}
    6032:	46c0      	nop			; (mov r8, r8)
    6034:	46bd      	mov	sp, r7
    6036:	bd80      	pop	{r7, pc}
    6038:	40000800 	.word	0x40000800
    603c:	00005fe5 	.word	0x00005fe5
    6040:	20000190 	.word	0x20000190

00006044 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6044:	b580      	push	{r7, lr}
    6046:	b082      	sub	sp, #8
    6048:	af00      	add	r7, sp, #0
    604a:	0002      	movs	r2, r0
    604c:	1dfb      	adds	r3, r7, #7
    604e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6050:	1dfb      	adds	r3, r7, #7
    6052:	781b      	ldrb	r3, [r3, #0]
    6054:	2b08      	cmp	r3, #8
    6056:	d841      	bhi.n	60dc <system_clock_source_get_hz+0x98>
    6058:	009a      	lsls	r2, r3, #2
    605a:	4b23      	ldr	r3, [pc, #140]	; (60e8 <system_clock_source_get_hz+0xa4>)
    605c:	18d3      	adds	r3, r2, r3
    605e:	681b      	ldr	r3, [r3, #0]
    6060:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    6062:	4b22      	ldr	r3, [pc, #136]	; (60ec <system_clock_source_get_hz+0xa8>)
    6064:	691b      	ldr	r3, [r3, #16]
    6066:	e03a      	b.n	60de <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6068:	4b21      	ldr	r3, [pc, #132]	; (60f0 <system_clock_source_get_hz+0xac>)
    606a:	6a1b      	ldr	r3, [r3, #32]
    606c:	059b      	lsls	r3, r3, #22
    606e:	0f9b      	lsrs	r3, r3, #30
    6070:	b2db      	uxtb	r3, r3
    6072:	001a      	movs	r2, r3
    6074:	4b1f      	ldr	r3, [pc, #124]	; (60f4 <system_clock_source_get_hz+0xb0>)
    6076:	40d3      	lsrs	r3, r2
    6078:	e031      	b.n	60de <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    607a:	2380      	movs	r3, #128	; 0x80
    607c:	021b      	lsls	r3, r3, #8
    607e:	e02e      	b.n	60de <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    6080:	2380      	movs	r3, #128	; 0x80
    6082:	021b      	lsls	r3, r3, #8
    6084:	e02b      	b.n	60de <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    6086:	4b19      	ldr	r3, [pc, #100]	; (60ec <system_clock_source_get_hz+0xa8>)
    6088:	695b      	ldr	r3, [r3, #20]
    608a:	e028      	b.n	60de <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    608c:	4b17      	ldr	r3, [pc, #92]	; (60ec <system_clock_source_get_hz+0xa8>)
    608e:	681b      	ldr	r3, [r3, #0]
    6090:	2202      	movs	r2, #2
    6092:	4013      	ands	r3, r2
    6094:	d101      	bne.n	609a <system_clock_source_get_hz+0x56>
			return 0;
    6096:	2300      	movs	r3, #0
    6098:	e021      	b.n	60de <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    609a:	4b17      	ldr	r3, [pc, #92]	; (60f8 <system_clock_source_get_hz+0xb4>)
    609c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    609e:	4b13      	ldr	r3, [pc, #76]	; (60ec <system_clock_source_get_hz+0xa8>)
    60a0:	681b      	ldr	r3, [r3, #0]
    60a2:	2224      	movs	r2, #36	; 0x24
    60a4:	4013      	ands	r3, r2
    60a6:	2b04      	cmp	r3, #4
    60a8:	d109      	bne.n	60be <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    60aa:	2000      	movs	r0, #0
    60ac:	4b13      	ldr	r3, [pc, #76]	; (60fc <system_clock_source_get_hz+0xb8>)
    60ae:	4798      	blx	r3
    60b0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    60b2:	4b0e      	ldr	r3, [pc, #56]	; (60ec <system_clock_source_get_hz+0xa8>)
    60b4:	689b      	ldr	r3, [r3, #8]
    60b6:	041b      	lsls	r3, r3, #16
    60b8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    60ba:	4353      	muls	r3, r2
    60bc:	e00f      	b.n	60de <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    60be:	4b10      	ldr	r3, [pc, #64]	; (6100 <system_clock_source_get_hz+0xbc>)
    60c0:	e00d      	b.n	60de <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    60c2:	4a0b      	ldr	r2, [pc, #44]	; (60f0 <system_clock_source_get_hz+0xac>)
    60c4:	2350      	movs	r3, #80	; 0x50
    60c6:	5cd3      	ldrb	r3, [r2, r3]
    60c8:	b2db      	uxtb	r3, r3
    60ca:	001a      	movs	r2, r3
    60cc:	2304      	movs	r3, #4
    60ce:	4013      	ands	r3, r2
    60d0:	d101      	bne.n	60d6 <system_clock_source_get_hz+0x92>
			return 0;
    60d2:	2300      	movs	r3, #0
    60d4:	e003      	b.n	60de <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    60d6:	4b05      	ldr	r3, [pc, #20]	; (60ec <system_clock_source_get_hz+0xa8>)
    60d8:	68db      	ldr	r3, [r3, #12]
    60da:	e000      	b.n	60de <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    60dc:	2300      	movs	r3, #0
	}
}
    60de:	0018      	movs	r0, r3
    60e0:	46bd      	mov	sp, r7
    60e2:	b002      	add	sp, #8
    60e4:	bd80      	pop	{r7, pc}
    60e6:	46c0      	nop			; (mov r8, r8)
    60e8:	0000c248 	.word	0x0000c248
    60ec:	20000190 	.word	0x20000190
    60f0:	40000800 	.word	0x40000800
    60f4:	007a1200 	.word	0x007a1200
    60f8:	00005fe5 	.word	0x00005fe5
    60fc:	00006b95 	.word	0x00006b95
    6100:	02dc6c00 	.word	0x02dc6c00

00006104 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    6104:	b580      	push	{r7, lr}
    6106:	b084      	sub	sp, #16
    6108:	af00      	add	r7, sp, #0
    610a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    610c:	4b1a      	ldr	r3, [pc, #104]	; (6178 <system_clock_source_osc8m_set_config+0x74>)
    610e:	6a1b      	ldr	r3, [r3, #32]
    6110:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    6112:	687b      	ldr	r3, [r7, #4]
    6114:	781b      	ldrb	r3, [r3, #0]
    6116:	1c1a      	adds	r2, r3, #0
    6118:	2303      	movs	r3, #3
    611a:	4013      	ands	r3, r2
    611c:	b2da      	uxtb	r2, r3
    611e:	230d      	movs	r3, #13
    6120:	18fb      	adds	r3, r7, r3
    6122:	2103      	movs	r1, #3
    6124:	400a      	ands	r2, r1
    6126:	0010      	movs	r0, r2
    6128:	781a      	ldrb	r2, [r3, #0]
    612a:	2103      	movs	r1, #3
    612c:	438a      	bics	r2, r1
    612e:	1c11      	adds	r1, r2, #0
    6130:	1c02      	adds	r2, r0, #0
    6132:	430a      	orrs	r2, r1
    6134:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6136:	687b      	ldr	r3, [r7, #4]
    6138:	789a      	ldrb	r2, [r3, #2]
    613a:	230c      	movs	r3, #12
    613c:	18fb      	adds	r3, r7, r3
    613e:	01d0      	lsls	r0, r2, #7
    6140:	781a      	ldrb	r2, [r3, #0]
    6142:	217f      	movs	r1, #127	; 0x7f
    6144:	400a      	ands	r2, r1
    6146:	1c11      	adds	r1, r2, #0
    6148:	1c02      	adds	r2, r0, #0
    614a:	430a      	orrs	r2, r1
    614c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    614e:	687b      	ldr	r3, [r7, #4]
    6150:	785a      	ldrb	r2, [r3, #1]
    6152:	230c      	movs	r3, #12
    6154:	18fb      	adds	r3, r7, r3
    6156:	2101      	movs	r1, #1
    6158:	400a      	ands	r2, r1
    615a:	0190      	lsls	r0, r2, #6
    615c:	781a      	ldrb	r2, [r3, #0]
    615e:	2140      	movs	r1, #64	; 0x40
    6160:	438a      	bics	r2, r1
    6162:	1c11      	adds	r1, r2, #0
    6164:	1c02      	adds	r2, r0, #0
    6166:	430a      	orrs	r2, r1
    6168:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    616a:	4b03      	ldr	r3, [pc, #12]	; (6178 <system_clock_source_osc8m_set_config+0x74>)
    616c:	68fa      	ldr	r2, [r7, #12]
    616e:	621a      	str	r2, [r3, #32]
}
    6170:	46c0      	nop			; (mov r8, r8)
    6172:	46bd      	mov	sp, r7
    6174:	b004      	add	sp, #16
    6176:	bd80      	pop	{r7, pc}
    6178:	40000800 	.word	0x40000800

0000617c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    617c:	b580      	push	{r7, lr}
    617e:	b084      	sub	sp, #16
    6180:	af00      	add	r7, sp, #0
    6182:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    6184:	4a43      	ldr	r2, [pc, #268]	; (6294 <system_clock_source_xosc32k_set_config+0x118>)
    6186:	230c      	movs	r3, #12
    6188:	18fb      	adds	r3, r7, r3
    618a:	8a92      	ldrh	r2, [r2, #20]
    618c:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    618e:	687b      	ldr	r3, [r7, #4]
    6190:	785b      	ldrb	r3, [r3, #1]
    6192:	1c1a      	adds	r2, r3, #0
    6194:	2307      	movs	r3, #7
    6196:	4013      	ands	r3, r2
    6198:	b2da      	uxtb	r2, r3
    619a:	230c      	movs	r3, #12
    619c:	18fb      	adds	r3, r7, r3
    619e:	2107      	movs	r1, #7
    61a0:	400a      	ands	r2, r1
    61a2:	0010      	movs	r0, r2
    61a4:	785a      	ldrb	r2, [r3, #1]
    61a6:	2107      	movs	r1, #7
    61a8:	438a      	bics	r2, r1
    61aa:	1c11      	adds	r1, r2, #0
    61ac:	1c02      	adds	r2, r0, #0
    61ae:	430a      	orrs	r2, r1
    61b0:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    61b2:	687b      	ldr	r3, [r7, #4]
    61b4:	781b      	ldrb	r3, [r3, #0]
    61b6:	2b00      	cmp	r3, #0
    61b8:	d106      	bne.n	61c8 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    61ba:	230c      	movs	r3, #12
    61bc:	18fb      	adds	r3, r7, r3
    61be:	781a      	ldrb	r2, [r3, #0]
    61c0:	2104      	movs	r1, #4
    61c2:	430a      	orrs	r2, r1
    61c4:	701a      	strb	r2, [r3, #0]
    61c6:	e005      	b.n	61d4 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    61c8:	230c      	movs	r3, #12
    61ca:	18fb      	adds	r3, r7, r3
    61cc:	781a      	ldrb	r2, [r3, #0]
    61ce:	2104      	movs	r1, #4
    61d0:	438a      	bics	r2, r1
    61d2:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    61d4:	687b      	ldr	r3, [r7, #4]
    61d6:	789a      	ldrb	r2, [r3, #2]
    61d8:	230c      	movs	r3, #12
    61da:	18fb      	adds	r3, r7, r3
    61dc:	2101      	movs	r1, #1
    61de:	400a      	ands	r2, r1
    61e0:	0150      	lsls	r0, r2, #5
    61e2:	781a      	ldrb	r2, [r3, #0]
    61e4:	2120      	movs	r1, #32
    61e6:	438a      	bics	r2, r1
    61e8:	1c11      	adds	r1, r2, #0
    61ea:	1c02      	adds	r2, r0, #0
    61ec:	430a      	orrs	r2, r1
    61ee:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	78da      	ldrb	r2, [r3, #3]
    61f4:	230c      	movs	r3, #12
    61f6:	18fb      	adds	r3, r7, r3
    61f8:	2101      	movs	r1, #1
    61fa:	400a      	ands	r2, r1
    61fc:	0110      	lsls	r0, r2, #4
    61fe:	781a      	ldrb	r2, [r3, #0]
    6200:	2110      	movs	r1, #16
    6202:	438a      	bics	r2, r1
    6204:	1c11      	adds	r1, r2, #0
    6206:	1c02      	adds	r2, r0, #0
    6208:	430a      	orrs	r2, r1
    620a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    620c:	687b      	ldr	r3, [r7, #4]
    620e:	791a      	ldrb	r2, [r3, #4]
    6210:	230c      	movs	r3, #12
    6212:	18fb      	adds	r3, r7, r3
    6214:	2101      	movs	r1, #1
    6216:	400a      	ands	r2, r1
    6218:	00d0      	lsls	r0, r2, #3
    621a:	781a      	ldrb	r2, [r3, #0]
    621c:	2108      	movs	r1, #8
    621e:	438a      	bics	r2, r1
    6220:	1c11      	adds	r1, r2, #0
    6222:	1c02      	adds	r2, r0, #0
    6224:	430a      	orrs	r2, r1
    6226:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    6228:	687b      	ldr	r3, [r7, #4]
    622a:	7b5a      	ldrb	r2, [r3, #13]
    622c:	230c      	movs	r3, #12
    622e:	18fb      	adds	r3, r7, r3
    6230:	01d0      	lsls	r0, r2, #7
    6232:	781a      	ldrb	r2, [r3, #0]
    6234:	217f      	movs	r1, #127	; 0x7f
    6236:	400a      	ands	r2, r1
    6238:	1c11      	adds	r1, r2, #0
    623a:	1c02      	adds	r2, r0, #0
    623c:	430a      	orrs	r2, r1
    623e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	7b1a      	ldrb	r2, [r3, #12]
    6244:	230c      	movs	r3, #12
    6246:	18fb      	adds	r3, r7, r3
    6248:	2101      	movs	r1, #1
    624a:	400a      	ands	r2, r1
    624c:	0190      	lsls	r0, r2, #6
    624e:	781a      	ldrb	r2, [r3, #0]
    6250:	2140      	movs	r1, #64	; 0x40
    6252:	438a      	bics	r2, r1
    6254:	1c11      	adds	r1, r2, #0
    6256:	1c02      	adds	r2, r0, #0
    6258:	430a      	orrs	r2, r1
    625a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	7b9a      	ldrb	r2, [r3, #14]
    6260:	230c      	movs	r3, #12
    6262:	18fb      	adds	r3, r7, r3
    6264:	2101      	movs	r1, #1
    6266:	400a      	ands	r2, r1
    6268:	0110      	lsls	r0, r2, #4
    626a:	785a      	ldrb	r2, [r3, #1]
    626c:	2110      	movs	r1, #16
    626e:	438a      	bics	r2, r1
    6270:	1c11      	adds	r1, r2, #0
    6272:	1c02      	adds	r2, r0, #0
    6274:	430a      	orrs	r2, r1
    6276:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6278:	687b      	ldr	r3, [r7, #4]
    627a:	689a      	ldr	r2, [r3, #8]
    627c:	4b06      	ldr	r3, [pc, #24]	; (6298 <system_clock_source_xosc32k_set_config+0x11c>)
    627e:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    6280:	4a04      	ldr	r2, [pc, #16]	; (6294 <system_clock_source_xosc32k_set_config+0x118>)
    6282:	230c      	movs	r3, #12
    6284:	18fb      	adds	r3, r7, r3
    6286:	881b      	ldrh	r3, [r3, #0]
    6288:	8293      	strh	r3, [r2, #20]
}
    628a:	46c0      	nop			; (mov r8, r8)
    628c:	46bd      	mov	sp, r7
    628e:	b004      	add	sp, #16
    6290:	bd80      	pop	{r7, pc}
    6292:	46c0      	nop			; (mov r8, r8)
    6294:	40000800 	.word	0x40000800
    6298:	20000190 	.word	0x20000190

0000629c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    629c:	b580      	push	{r7, lr}
    629e:	b082      	sub	sp, #8
    62a0:	af00      	add	r7, sp, #0
    62a2:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    62a4:	687b      	ldr	r3, [r7, #4]
    62a6:	7a1b      	ldrb	r3, [r3, #8]
    62a8:	029b      	lsls	r3, r3, #10
    62aa:	041b      	lsls	r3, r3, #16
    62ac:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	895b      	ldrh	r3, [r3, #10]
    62b2:	059b      	lsls	r3, r3, #22
    62b4:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    62b6:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    62b8:	4b2a      	ldr	r3, [pc, #168]	; (6364 <system_clock_source_dfll_set_config+0xc8>)
    62ba:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    62bc:	687b      	ldr	r3, [r7, #4]
    62be:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    62c4:	4313      	orrs	r3, r2
    62c6:	b2db      	uxtb	r3, r3
    62c8:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    62ca:	687b      	ldr	r3, [r7, #4]
    62cc:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    62ce:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    62d0:	687a      	ldr	r2, [r7, #4]
    62d2:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    62d4:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    62d6:	687b      	ldr	r3, [r7, #4]
    62d8:	785b      	ldrb	r3, [r3, #1]
    62da:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    62dc:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    62de:	4b21      	ldr	r3, [pc, #132]	; (6364 <system_clock_source_dfll_set_config+0xc8>)
    62e0:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	781b      	ldrb	r3, [r3, #0]
    62e6:	2b04      	cmp	r3, #4
    62e8:	d116      	bne.n	6318 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    62ea:	687b      	ldr	r3, [r7, #4]
    62ec:	7b1b      	ldrb	r3, [r3, #12]
    62ee:	069b      	lsls	r3, r3, #26
    62f0:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    62f2:	687b      	ldr	r3, [r7, #4]
    62f4:	89db      	ldrh	r3, [r3, #14]
    62f6:	041b      	lsls	r3, r3, #16
    62f8:	0019      	movs	r1, r3
    62fa:	4b1b      	ldr	r3, [pc, #108]	; (6368 <system_clock_source_dfll_set_config+0xcc>)
    62fc:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    62fe:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6300:	687a      	ldr	r2, [r7, #4]
    6302:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6304:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    6306:	4b17      	ldr	r3, [pc, #92]	; (6364 <system_clock_source_dfll_set_config+0xc8>)
    6308:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    630a:	4b16      	ldr	r3, [pc, #88]	; (6364 <system_clock_source_dfll_set_config+0xc8>)
    630c:	681b      	ldr	r3, [r3, #0]
    630e:	687a      	ldr	r2, [r7, #4]
    6310:	7812      	ldrb	r2, [r2, #0]
    6312:	431a      	orrs	r2, r3
    6314:	4b13      	ldr	r3, [pc, #76]	; (6364 <system_clock_source_dfll_set_config+0xc8>)
    6316:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	781b      	ldrb	r3, [r3, #0]
    631c:	2b20      	cmp	r3, #32
    631e:	d11c      	bne.n	635a <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	7b1b      	ldrb	r3, [r3, #12]
    6324:	069b      	lsls	r3, r3, #26
    6326:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6328:	687b      	ldr	r3, [r7, #4]
    632a:	89db      	ldrh	r3, [r3, #14]
    632c:	041b      	lsls	r3, r3, #16
    632e:	0019      	movs	r1, r3
    6330:	4b0d      	ldr	r3, [pc, #52]	; (6368 <system_clock_source_dfll_set_config+0xcc>)
    6332:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6334:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6336:	687a      	ldr	r2, [r7, #4]
    6338:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    633a:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    633c:	4b09      	ldr	r3, [pc, #36]	; (6364 <system_clock_source_dfll_set_config+0xc8>)
    633e:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6340:	4b08      	ldr	r3, [pc, #32]	; (6364 <system_clock_source_dfll_set_config+0xc8>)
    6342:	681b      	ldr	r3, [r3, #0]
    6344:	687a      	ldr	r2, [r7, #4]
    6346:	7812      	ldrb	r2, [r2, #0]
    6348:	2104      	movs	r1, #4
    634a:	430a      	orrs	r2, r1
    634c:	b2d2      	uxtb	r2, r2
    634e:	4313      	orrs	r3, r2
    6350:	2280      	movs	r2, #128	; 0x80
    6352:	00d2      	lsls	r2, r2, #3
    6354:	431a      	orrs	r2, r3
    6356:	4b03      	ldr	r3, [pc, #12]	; (6364 <system_clock_source_dfll_set_config+0xc8>)
    6358:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    635a:	46c0      	nop			; (mov r8, r8)
    635c:	46bd      	mov	sp, r7
    635e:	b002      	add	sp, #8
    6360:	bd80      	pop	{r7, pc}
    6362:	46c0      	nop			; (mov r8, r8)
    6364:	20000190 	.word	0x20000190
    6368:	03ff0000 	.word	0x03ff0000

0000636c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    636c:	b580      	push	{r7, lr}
    636e:	b082      	sub	sp, #8
    6370:	af00      	add	r7, sp, #0
    6372:	0002      	movs	r2, r0
    6374:	1dfb      	adds	r3, r7, #7
    6376:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6378:	1dfb      	adds	r3, r7, #7
    637a:	781b      	ldrb	r3, [r3, #0]
    637c:	2b08      	cmp	r3, #8
    637e:	d83b      	bhi.n	63f8 <system_clock_source_enable+0x8c>
    6380:	009a      	lsls	r2, r3, #2
    6382:	4b21      	ldr	r3, [pc, #132]	; (6408 <system_clock_source_enable+0x9c>)
    6384:	18d3      	adds	r3, r2, r3
    6386:	681b      	ldr	r3, [r3, #0]
    6388:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    638a:	4b20      	ldr	r3, [pc, #128]	; (640c <system_clock_source_enable+0xa0>)
    638c:	4a1f      	ldr	r2, [pc, #124]	; (640c <system_clock_source_enable+0xa0>)
    638e:	6a12      	ldr	r2, [r2, #32]
    6390:	2102      	movs	r1, #2
    6392:	430a      	orrs	r2, r1
    6394:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    6396:	2300      	movs	r3, #0
    6398:	e031      	b.n	63fe <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    639a:	4b1c      	ldr	r3, [pc, #112]	; (640c <system_clock_source_enable+0xa0>)
    639c:	4a1b      	ldr	r2, [pc, #108]	; (640c <system_clock_source_enable+0xa0>)
    639e:	6992      	ldr	r2, [r2, #24]
    63a0:	2102      	movs	r1, #2
    63a2:	430a      	orrs	r2, r1
    63a4:	619a      	str	r2, [r3, #24]
		break;
    63a6:	e029      	b.n	63fc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    63a8:	4a18      	ldr	r2, [pc, #96]	; (640c <system_clock_source_enable+0xa0>)
    63aa:	4b18      	ldr	r3, [pc, #96]	; (640c <system_clock_source_enable+0xa0>)
    63ac:	8a1b      	ldrh	r3, [r3, #16]
    63ae:	b29b      	uxth	r3, r3
    63b0:	2102      	movs	r1, #2
    63b2:	430b      	orrs	r3, r1
    63b4:	b29b      	uxth	r3, r3
    63b6:	8213      	strh	r3, [r2, #16]
		break;
    63b8:	e020      	b.n	63fc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    63ba:	4a14      	ldr	r2, [pc, #80]	; (640c <system_clock_source_enable+0xa0>)
    63bc:	4b13      	ldr	r3, [pc, #76]	; (640c <system_clock_source_enable+0xa0>)
    63be:	8a9b      	ldrh	r3, [r3, #20]
    63c0:	b29b      	uxth	r3, r3
    63c2:	2102      	movs	r1, #2
    63c4:	430b      	orrs	r3, r1
    63c6:	b29b      	uxth	r3, r3
    63c8:	8293      	strh	r3, [r2, #20]
		break;
    63ca:	e017      	b.n	63fc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    63cc:	4b10      	ldr	r3, [pc, #64]	; (6410 <system_clock_source_enable+0xa4>)
    63ce:	681b      	ldr	r3, [r3, #0]
    63d0:	2202      	movs	r2, #2
    63d2:	431a      	orrs	r2, r3
    63d4:	4b0e      	ldr	r3, [pc, #56]	; (6410 <system_clock_source_enable+0xa4>)
    63d6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    63d8:	4b0e      	ldr	r3, [pc, #56]	; (6414 <system_clock_source_enable+0xa8>)
    63da:	4798      	blx	r3
		break;
    63dc:	e00e      	b.n	63fc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    63de:	4a0b      	ldr	r2, [pc, #44]	; (640c <system_clock_source_enable+0xa0>)
    63e0:	490a      	ldr	r1, [pc, #40]	; (640c <system_clock_source_enable+0xa0>)
    63e2:	2344      	movs	r3, #68	; 0x44
    63e4:	5ccb      	ldrb	r3, [r1, r3]
    63e6:	b2db      	uxtb	r3, r3
    63e8:	2102      	movs	r1, #2
    63ea:	430b      	orrs	r3, r1
    63ec:	b2d9      	uxtb	r1, r3
    63ee:	2344      	movs	r3, #68	; 0x44
    63f0:	54d1      	strb	r1, [r2, r3]
		break;
    63f2:	e003      	b.n	63fc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    63f4:	2300      	movs	r3, #0
    63f6:	e002      	b.n	63fe <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    63f8:	2317      	movs	r3, #23
    63fa:	e000      	b.n	63fe <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    63fc:	2300      	movs	r3, #0
}
    63fe:	0018      	movs	r0, r3
    6400:	46bd      	mov	sp, r7
    6402:	b002      	add	sp, #8
    6404:	bd80      	pop	{r7, pc}
    6406:	46c0      	nop			; (mov r8, r8)
    6408:	0000c26c 	.word	0x0000c26c
    640c:	40000800 	.word	0x40000800
    6410:	20000190 	.word	0x20000190
    6414:	00006001 	.word	0x00006001

00006418 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    6418:	b580      	push	{r7, lr}
    641a:	b084      	sub	sp, #16
    641c:	af00      	add	r7, sp, #0
    641e:	0002      	movs	r2, r0
    6420:	1dfb      	adds	r3, r7, #7
    6422:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    6424:	2300      	movs	r3, #0
    6426:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6428:	1dfb      	adds	r3, r7, #7
    642a:	781b      	ldrb	r3, [r3, #0]
    642c:	2b08      	cmp	r3, #8
    642e:	d821      	bhi.n	6474 <system_clock_source_is_ready+0x5c>
    6430:	009a      	lsls	r2, r3, #2
    6432:	4b18      	ldr	r3, [pc, #96]	; (6494 <system_clock_source_is_ready+0x7c>)
    6434:	18d3      	adds	r3, r2, r3
    6436:	681b      	ldr	r3, [r3, #0]
    6438:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    643a:	2308      	movs	r3, #8
    643c:	60fb      	str	r3, [r7, #12]
		break;
    643e:	e01b      	b.n	6478 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    6440:	2304      	movs	r3, #4
    6442:	60fb      	str	r3, [r7, #12]
		break;
    6444:	e018      	b.n	6478 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    6446:	2301      	movs	r3, #1
    6448:	60fb      	str	r3, [r7, #12]
		break;
    644a:	e015      	b.n	6478 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    644c:	2302      	movs	r3, #2
    644e:	60fb      	str	r3, [r7, #12]
		break;
    6450:	e012      	b.n	6478 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    6452:	23d0      	movs	r3, #208	; 0xd0
    6454:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    6456:	e00f      	b.n	6478 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6458:	4a0f      	ldr	r2, [pc, #60]	; (6498 <system_clock_source_is_ready+0x80>)
    645a:	2350      	movs	r3, #80	; 0x50
    645c:	5cd3      	ldrb	r3, [r2, r3]
    645e:	b2db      	uxtb	r3, r3
    6460:	001a      	movs	r2, r3
    6462:	2303      	movs	r3, #3
    6464:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    6466:	3b03      	subs	r3, #3
    6468:	425a      	negs	r2, r3
    646a:	4153      	adcs	r3, r2
    646c:	b2db      	uxtb	r3, r3
    646e:	e00c      	b.n	648a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6470:	2301      	movs	r3, #1
    6472:	e00a      	b.n	648a <system_clock_source_is_ready+0x72>

	default:
		return false;
    6474:	2300      	movs	r3, #0
    6476:	e008      	b.n	648a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6478:	4b07      	ldr	r3, [pc, #28]	; (6498 <system_clock_source_is_ready+0x80>)
    647a:	68db      	ldr	r3, [r3, #12]
    647c:	68fa      	ldr	r2, [r7, #12]
    647e:	401a      	ands	r2, r3
    6480:	68fb      	ldr	r3, [r7, #12]
    6482:	1ad3      	subs	r3, r2, r3
    6484:	425a      	negs	r2, r3
    6486:	4153      	adcs	r3, r2
    6488:	b2db      	uxtb	r3, r3
}
    648a:	0018      	movs	r0, r3
    648c:	46bd      	mov	sp, r7
    648e:	b004      	add	sp, #16
    6490:	bd80      	pop	{r7, pc}
    6492:	46c0      	nop			; (mov r8, r8)
    6494:	0000c290 	.word	0x0000c290
    6498:	40000800 	.word	0x40000800

0000649c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    649c:	b580      	push	{r7, lr}
    649e:	b082      	sub	sp, #8
    64a0:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    64a2:	003b      	movs	r3, r7
    64a4:	2202      	movs	r2, #2
    64a6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    64a8:	2300      	movs	r3, #0
    64aa:	607b      	str	r3, [r7, #4]
    64ac:	e009      	b.n	64c2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    64ae:	687b      	ldr	r3, [r7, #4]
    64b0:	b2db      	uxtb	r3, r3
    64b2:	003a      	movs	r2, r7
    64b4:	0011      	movs	r1, r2
    64b6:	0018      	movs	r0, r3
    64b8:	4b05      	ldr	r3, [pc, #20]	; (64d0 <_switch_peripheral_gclk+0x34>)
    64ba:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    64bc:	687b      	ldr	r3, [r7, #4]
    64be:	3301      	adds	r3, #1
    64c0:	607b      	str	r3, [r7, #4]
    64c2:	687b      	ldr	r3, [r7, #4]
    64c4:	2b24      	cmp	r3, #36	; 0x24
    64c6:	d9f2      	bls.n	64ae <_switch_peripheral_gclk+0x12>
	}
}
    64c8:	46c0      	nop			; (mov r8, r8)
    64ca:	46bd      	mov	sp, r7
    64cc:	b002      	add	sp, #8
    64ce:	bd80      	pop	{r7, pc}
    64d0:	00006a71 	.word	0x00006a71

000064d4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    64d4:	b580      	push	{r7, lr}
    64d6:	b0aa      	sub	sp, #168	; 0xa8
    64d8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    64da:	4b85      	ldr	r3, [pc, #532]	; (66f0 <system_clock_init+0x21c>)
    64dc:	22c2      	movs	r2, #194	; 0xc2
    64de:	00d2      	lsls	r2, r2, #3
    64e0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    64e2:	2002      	movs	r0, #2
    64e4:	4b83      	ldr	r3, [pc, #524]	; (66f4 <system_clock_init+0x220>)
    64e6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    64e8:	4b83      	ldr	r3, [pc, #524]	; (66f8 <system_clock_init+0x224>)
    64ea:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    64ec:	2394      	movs	r3, #148	; 0x94
    64ee:	18fb      	adds	r3, r7, r3
    64f0:	0018      	movs	r0, r3
    64f2:	4b82      	ldr	r3, [pc, #520]	; (66fc <system_clock_init+0x228>)
    64f4:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    64f6:	2394      	movs	r3, #148	; 0x94
    64f8:	18fb      	adds	r3, r7, r3
    64fa:	2280      	movs	r2, #128	; 0x80
    64fc:	0212      	lsls	r2, r2, #8
    64fe:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    6500:	2394      	movs	r3, #148	; 0x94
    6502:	18fb      	adds	r3, r7, r3
    6504:	2200      	movs	r2, #0
    6506:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6508:	2394      	movs	r3, #148	; 0x94
    650a:	18fb      	adds	r3, r7, r3
    650c:	2206      	movs	r2, #6
    650e:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    6510:	2394      	movs	r3, #148	; 0x94
    6512:	18fb      	adds	r3, r7, r3
    6514:	2200      	movs	r2, #0
    6516:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    6518:	2394      	movs	r3, #148	; 0x94
    651a:	18fb      	adds	r3, r7, r3
    651c:	2200      	movs	r2, #0
    651e:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    6520:	2394      	movs	r3, #148	; 0x94
    6522:	18fb      	adds	r3, r7, r3
    6524:	2201      	movs	r2, #1
    6526:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    6528:	2394      	movs	r3, #148	; 0x94
    652a:	18fb      	adds	r3, r7, r3
    652c:	2200      	movs	r2, #0
    652e:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    6530:	2394      	movs	r3, #148	; 0x94
    6532:	18fb      	adds	r3, r7, r3
    6534:	2201      	movs	r2, #1
    6536:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6538:	2394      	movs	r3, #148	; 0x94
    653a:	18fb      	adds	r3, r7, r3
    653c:	0018      	movs	r0, r3
    653e:	4b70      	ldr	r3, [pc, #448]	; (6700 <system_clock_init+0x22c>)
    6540:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6542:	2005      	movs	r0, #5
    6544:	4b6f      	ldr	r3, [pc, #444]	; (6704 <system_clock_init+0x230>)
    6546:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6548:	46c0      	nop			; (mov r8, r8)
    654a:	2005      	movs	r0, #5
    654c:	4b6e      	ldr	r3, [pc, #440]	; (6708 <system_clock_init+0x234>)
    654e:	4798      	blx	r3
    6550:	0003      	movs	r3, r0
    6552:	001a      	movs	r2, r3
    6554:	2301      	movs	r3, #1
    6556:	4053      	eors	r3, r2
    6558:	b2db      	uxtb	r3, r3
    655a:	2b00      	cmp	r3, #0
    655c:	d1f5      	bne.n	654a <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    655e:	2380      	movs	r3, #128	; 0x80
    6560:	18fb      	adds	r3, r7, r3
    6562:	0018      	movs	r0, r3
    6564:	4b69      	ldr	r3, [pc, #420]	; (670c <system_clock_init+0x238>)
    6566:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6568:	2380      	movs	r3, #128	; 0x80
    656a:	18fb      	adds	r3, r7, r3
    656c:	2204      	movs	r2, #4
    656e:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6570:	2380      	movs	r3, #128	; 0x80
    6572:	18fb      	adds	r3, r7, r3
    6574:	2200      	movs	r2, #0
    6576:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6578:	4b65      	ldr	r3, [pc, #404]	; (6710 <system_clock_init+0x23c>)
    657a:	681b      	ldr	r3, [r3, #0]
    657c:	0e9b      	lsrs	r3, r3, #26
    657e:	22a4      	movs	r2, #164	; 0xa4
    6580:	18ba      	adds	r2, r7, r2
    6582:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6584:	23a4      	movs	r3, #164	; 0xa4
    6586:	18fb      	adds	r3, r7, r3
    6588:	681b      	ldr	r3, [r3, #0]
    658a:	2b3f      	cmp	r3, #63	; 0x3f
    658c:	d103      	bne.n	6596 <system_clock_init+0xc2>
		coarse = 0x1f;
    658e:	231f      	movs	r3, #31
    6590:	22a4      	movs	r2, #164	; 0xa4
    6592:	18ba      	adds	r2, r7, r2
    6594:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    6596:	23a4      	movs	r3, #164	; 0xa4
    6598:	18fb      	adds	r3, r7, r3
    659a:	681b      	ldr	r3, [r3, #0]
    659c:	b2da      	uxtb	r2, r3
    659e:	2380      	movs	r3, #128	; 0x80
    65a0:	18fb      	adds	r3, r7, r3
    65a2:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    65a4:	2380      	movs	r3, #128	; 0x80
    65a6:	18fb      	adds	r3, r7, r3
    65a8:	2200      	movs	r2, #0
    65aa:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    65ac:	2380      	movs	r3, #128	; 0x80
    65ae:	18fb      	adds	r3, r7, r3
    65b0:	2200      	movs	r2, #0
    65b2:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    65b4:	2380      	movs	r3, #128	; 0x80
    65b6:	18fb      	adds	r3, r7, r3
    65b8:	2200      	movs	r2, #0
    65ba:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    65bc:	2380      	movs	r3, #128	; 0x80
    65be:	18fb      	adds	r3, r7, r3
    65c0:	2200      	movs	r2, #0
    65c2:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    65c4:	2380      	movs	r3, #128	; 0x80
    65c6:	18fb      	adds	r3, r7, r3
    65c8:	22b7      	movs	r2, #183	; 0xb7
    65ca:	00d2      	lsls	r2, r2, #3
    65cc:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    65ce:	2380      	movs	r3, #128	; 0x80
    65d0:	18fb      	adds	r3, r7, r3
    65d2:	2203      	movs	r2, #3
    65d4:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    65d6:	2380      	movs	r3, #128	; 0x80
    65d8:	18fb      	adds	r3, r7, r3
    65da:	221f      	movs	r2, #31
    65dc:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    65de:	2380      	movs	r3, #128	; 0x80
    65e0:	18fb      	adds	r3, r7, r3
    65e2:	0018      	movs	r0, r3
    65e4:	4b4b      	ldr	r3, [pc, #300]	; (6714 <system_clock_init+0x240>)
    65e6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    65e8:	237c      	movs	r3, #124	; 0x7c
    65ea:	18fb      	adds	r3, r7, r3
    65ec:	0018      	movs	r0, r3
    65ee:	4b4a      	ldr	r3, [pc, #296]	; (6718 <system_clock_init+0x244>)
    65f0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    65f2:	237c      	movs	r3, #124	; 0x7c
    65f4:	18fb      	adds	r3, r7, r3
    65f6:	2200      	movs	r2, #0
    65f8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    65fa:	237c      	movs	r3, #124	; 0x7c
    65fc:	18fb      	adds	r3, r7, r3
    65fe:	2201      	movs	r2, #1
    6600:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6602:	237c      	movs	r3, #124	; 0x7c
    6604:	18fb      	adds	r3, r7, r3
    6606:	2201      	movs	r2, #1
    6608:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    660a:	237c      	movs	r3, #124	; 0x7c
    660c:	18fb      	adds	r3, r7, r3
    660e:	0018      	movs	r0, r3
    6610:	4b42      	ldr	r3, [pc, #264]	; (671c <system_clock_init+0x248>)
    6612:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6614:	2006      	movs	r0, #6
    6616:	4b3b      	ldr	r3, [pc, #236]	; (6704 <system_clock_init+0x230>)
    6618:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    661a:	4b41      	ldr	r3, [pc, #260]	; (6720 <system_clock_init+0x24c>)
    661c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    661e:	2364      	movs	r3, #100	; 0x64
    6620:	18fb      	adds	r3, r7, r3
    6622:	0018      	movs	r0, r3
    6624:	4b3f      	ldr	r3, [pc, #252]	; (6724 <system_clock_init+0x250>)
    6626:	4798      	blx	r3
    6628:	2364      	movs	r3, #100	; 0x64
    662a:	18fb      	adds	r3, r7, r3
    662c:	2205      	movs	r2, #5
    662e:	701a      	strb	r2, [r3, #0]
    6630:	2364      	movs	r3, #100	; 0x64
    6632:	18fb      	adds	r3, r7, r3
    6634:	2201      	movs	r2, #1
    6636:	605a      	str	r2, [r3, #4]
    6638:	2364      	movs	r3, #100	; 0x64
    663a:	18fb      	adds	r3, r7, r3
    663c:	2200      	movs	r2, #0
    663e:	721a      	strb	r2, [r3, #8]
    6640:	2364      	movs	r3, #100	; 0x64
    6642:	18fb      	adds	r3, r7, r3
    6644:	2200      	movs	r2, #0
    6646:	725a      	strb	r2, [r3, #9]
    6648:	2364      	movs	r3, #100	; 0x64
    664a:	18fb      	adds	r3, r7, r3
    664c:	0019      	movs	r1, r3
    664e:	2001      	movs	r0, #1
    6650:	4b35      	ldr	r3, [pc, #212]	; (6728 <system_clock_init+0x254>)
    6652:	4798      	blx	r3
    6654:	2001      	movs	r0, #1
    6656:	4b35      	ldr	r3, [pc, #212]	; (672c <system_clock_init+0x258>)
    6658:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    665a:	230c      	movs	r3, #12
    665c:	18fb      	adds	r3, r7, r3
    665e:	0018      	movs	r0, r3
    6660:	4b33      	ldr	r3, [pc, #204]	; (6730 <system_clock_init+0x25c>)
    6662:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6664:	230c      	movs	r3, #12
    6666:	18fb      	adds	r3, r7, r3
    6668:	2201      	movs	r2, #1
    666a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    666c:	230c      	movs	r3, #12
    666e:	18fb      	adds	r3, r7, r3
    6670:	0019      	movs	r1, r3
    6672:	2000      	movs	r0, #0
    6674:	4b2f      	ldr	r3, [pc, #188]	; (6734 <system_clock_init+0x260>)
    6676:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6678:	2000      	movs	r0, #0
    667a:	4b2f      	ldr	r3, [pc, #188]	; (6738 <system_clock_init+0x264>)
    667c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    667e:	2007      	movs	r0, #7
    6680:	4b20      	ldr	r3, [pc, #128]	; (6704 <system_clock_init+0x230>)
    6682:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6684:	46c0      	nop			; (mov r8, r8)
    6686:	2007      	movs	r0, #7
    6688:	4b1f      	ldr	r3, [pc, #124]	; (6708 <system_clock_init+0x234>)
    668a:	4798      	blx	r3
    668c:	0003      	movs	r3, r0
    668e:	001a      	movs	r2, r3
    6690:	2301      	movs	r3, #1
    6692:	4053      	eors	r3, r2
    6694:	b2db      	uxtb	r3, r3
    6696:	2b00      	cmp	r3, #0
    6698:	d1f5      	bne.n	6686 <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    669a:	2000      	movs	r0, #0
    669c:	4b27      	ldr	r3, [pc, #156]	; (673c <system_clock_init+0x268>)
    669e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    66a0:	2100      	movs	r1, #0
    66a2:	2000      	movs	r0, #0
    66a4:	4b26      	ldr	r3, [pc, #152]	; (6740 <system_clock_init+0x26c>)
    66a6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    66a8:	2100      	movs	r1, #0
    66aa:	2001      	movs	r0, #1
    66ac:	4b24      	ldr	r3, [pc, #144]	; (6740 <system_clock_init+0x26c>)
    66ae:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    66b0:	2100      	movs	r1, #0
    66b2:	2002      	movs	r0, #2
    66b4:	4b22      	ldr	r3, [pc, #136]	; (6740 <system_clock_init+0x26c>)
    66b6:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    66b8:	003b      	movs	r3, r7
    66ba:	0018      	movs	r0, r3
    66bc:	4b19      	ldr	r3, [pc, #100]	; (6724 <system_clock_init+0x250>)
    66be:	4798      	blx	r3
    66c0:	003b      	movs	r3, r7
    66c2:	2207      	movs	r2, #7
    66c4:	701a      	strb	r2, [r3, #0]
    66c6:	003b      	movs	r3, r7
    66c8:	2201      	movs	r2, #1
    66ca:	605a      	str	r2, [r3, #4]
    66cc:	003b      	movs	r3, r7
    66ce:	2201      	movs	r2, #1
    66d0:	721a      	strb	r2, [r3, #8]
    66d2:	003b      	movs	r3, r7
    66d4:	2200      	movs	r2, #0
    66d6:	725a      	strb	r2, [r3, #9]
    66d8:	003b      	movs	r3, r7
    66da:	0019      	movs	r1, r3
    66dc:	2000      	movs	r0, #0
    66de:	4b12      	ldr	r3, [pc, #72]	; (6728 <system_clock_init+0x254>)
    66e0:	4798      	blx	r3
    66e2:	2000      	movs	r0, #0
    66e4:	4b11      	ldr	r3, [pc, #68]	; (672c <system_clock_init+0x258>)
    66e6:	4798      	blx	r3
#endif
}
    66e8:	46c0      	nop			; (mov r8, r8)
    66ea:	46bd      	mov	sp, r7
    66ec:	b02a      	add	sp, #168	; 0xa8
    66ee:	bd80      	pop	{r7, pc}
    66f0:	40000800 	.word	0x40000800
    66f4:	00005fb1 	.word	0x00005fb1
    66f8:	0000649d 	.word	0x0000649d
    66fc:	00005e81 	.word	0x00005e81
    6700:	0000617d 	.word	0x0000617d
    6704:	0000636d 	.word	0x0000636d
    6708:	00006419 	.word	0x00006419
    670c:	00005eeb 	.word	0x00005eeb
    6710:	00806024 	.word	0x00806024
    6714:	0000629d 	.word	0x0000629d
    6718:	00005ec9 	.word	0x00005ec9
    671c:	00006105 	.word	0x00006105
    6720:	000067e9 	.word	0x000067e9
    6724:	00005e3d 	.word	0x00005e3d
    6728:	00006819 	.word	0x00006819
    672c:	0000693d 	.word	0x0000693d
    6730:	00005e6b 	.word	0x00005e6b
    6734:	00006a71 	.word	0x00006a71
    6738:	00006ab5 	.word	0x00006ab5
    673c:	00005f3d 	.word	0x00005f3d
    6740:	00005f5d 	.word	0x00005f5d

00006744 <system_apb_clock_set_mask>:
{
    6744:	b580      	push	{r7, lr}
    6746:	b082      	sub	sp, #8
    6748:	af00      	add	r7, sp, #0
    674a:	0002      	movs	r2, r0
    674c:	6039      	str	r1, [r7, #0]
    674e:	1dfb      	adds	r3, r7, #7
    6750:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6752:	1dfb      	adds	r3, r7, #7
    6754:	781b      	ldrb	r3, [r3, #0]
    6756:	2b01      	cmp	r3, #1
    6758:	d00a      	beq.n	6770 <system_apb_clock_set_mask+0x2c>
    675a:	2b02      	cmp	r3, #2
    675c:	d00f      	beq.n	677e <system_apb_clock_set_mask+0x3a>
    675e:	2b00      	cmp	r3, #0
    6760:	d114      	bne.n	678c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6762:	4b0e      	ldr	r3, [pc, #56]	; (679c <system_apb_clock_set_mask+0x58>)
    6764:	4a0d      	ldr	r2, [pc, #52]	; (679c <system_apb_clock_set_mask+0x58>)
    6766:	6991      	ldr	r1, [r2, #24]
    6768:	683a      	ldr	r2, [r7, #0]
    676a:	430a      	orrs	r2, r1
    676c:	619a      	str	r2, [r3, #24]
			break;
    676e:	e00f      	b.n	6790 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6770:	4b0a      	ldr	r3, [pc, #40]	; (679c <system_apb_clock_set_mask+0x58>)
    6772:	4a0a      	ldr	r2, [pc, #40]	; (679c <system_apb_clock_set_mask+0x58>)
    6774:	69d1      	ldr	r1, [r2, #28]
    6776:	683a      	ldr	r2, [r7, #0]
    6778:	430a      	orrs	r2, r1
    677a:	61da      	str	r2, [r3, #28]
			break;
    677c:	e008      	b.n	6790 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    677e:	4b07      	ldr	r3, [pc, #28]	; (679c <system_apb_clock_set_mask+0x58>)
    6780:	4a06      	ldr	r2, [pc, #24]	; (679c <system_apb_clock_set_mask+0x58>)
    6782:	6a11      	ldr	r1, [r2, #32]
    6784:	683a      	ldr	r2, [r7, #0]
    6786:	430a      	orrs	r2, r1
    6788:	621a      	str	r2, [r3, #32]
			break;
    678a:	e001      	b.n	6790 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    678c:	2317      	movs	r3, #23
    678e:	e000      	b.n	6792 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6790:	2300      	movs	r3, #0
}
    6792:	0018      	movs	r0, r3
    6794:	46bd      	mov	sp, r7
    6796:	b002      	add	sp, #8
    6798:	bd80      	pop	{r7, pc}
    679a:	46c0      	nop			; (mov r8, r8)
    679c:	40000400 	.word	0x40000400

000067a0 <system_interrupt_enter_critical_section>:
{
    67a0:	b580      	push	{r7, lr}
    67a2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    67a4:	4b02      	ldr	r3, [pc, #8]	; (67b0 <system_interrupt_enter_critical_section+0x10>)
    67a6:	4798      	blx	r3
}
    67a8:	46c0      	nop			; (mov r8, r8)
    67aa:	46bd      	mov	sp, r7
    67ac:	bd80      	pop	{r7, pc}
    67ae:	46c0      	nop			; (mov r8, r8)
    67b0:	000033e5 	.word	0x000033e5

000067b4 <system_interrupt_leave_critical_section>:
{
    67b4:	b580      	push	{r7, lr}
    67b6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    67b8:	4b02      	ldr	r3, [pc, #8]	; (67c4 <system_interrupt_leave_critical_section+0x10>)
    67ba:	4798      	blx	r3
}
    67bc:	46c0      	nop			; (mov r8, r8)
    67be:	46bd      	mov	sp, r7
    67c0:	bd80      	pop	{r7, pc}
    67c2:	46c0      	nop			; (mov r8, r8)
    67c4:	00003439 	.word	0x00003439

000067c8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    67c8:	b580      	push	{r7, lr}
    67ca:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    67cc:	4b05      	ldr	r3, [pc, #20]	; (67e4 <system_gclk_is_syncing+0x1c>)
    67ce:	785b      	ldrb	r3, [r3, #1]
    67d0:	b2db      	uxtb	r3, r3
    67d2:	b25b      	sxtb	r3, r3
    67d4:	2b00      	cmp	r3, #0
    67d6:	da01      	bge.n	67dc <system_gclk_is_syncing+0x14>
		return true;
    67d8:	2301      	movs	r3, #1
    67da:	e000      	b.n	67de <system_gclk_is_syncing+0x16>
	}

	return false;
    67dc:	2300      	movs	r3, #0
}
    67de:	0018      	movs	r0, r3
    67e0:	46bd      	mov	sp, r7
    67e2:	bd80      	pop	{r7, pc}
    67e4:	40000c00 	.word	0x40000c00

000067e8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    67e8:	b580      	push	{r7, lr}
    67ea:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    67ec:	2108      	movs	r1, #8
    67ee:	2000      	movs	r0, #0
    67f0:	4b07      	ldr	r3, [pc, #28]	; (6810 <system_gclk_init+0x28>)
    67f2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    67f4:	4b07      	ldr	r3, [pc, #28]	; (6814 <system_gclk_init+0x2c>)
    67f6:	2201      	movs	r2, #1
    67f8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    67fa:	46c0      	nop			; (mov r8, r8)
    67fc:	4b05      	ldr	r3, [pc, #20]	; (6814 <system_gclk_init+0x2c>)
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	b2db      	uxtb	r3, r3
    6802:	001a      	movs	r2, r3
    6804:	2301      	movs	r3, #1
    6806:	4013      	ands	r3, r2
    6808:	d1f8      	bne.n	67fc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    680a:	46c0      	nop			; (mov r8, r8)
    680c:	46bd      	mov	sp, r7
    680e:	bd80      	pop	{r7, pc}
    6810:	00006745 	.word	0x00006745
    6814:	40000c00 	.word	0x40000c00

00006818 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6818:	b580      	push	{r7, lr}
    681a:	b086      	sub	sp, #24
    681c:	af00      	add	r7, sp, #0
    681e:	0002      	movs	r2, r0
    6820:	6039      	str	r1, [r7, #0]
    6822:	1dfb      	adds	r3, r7, #7
    6824:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6826:	1dfb      	adds	r3, r7, #7
    6828:	781b      	ldrb	r3, [r3, #0]
    682a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    682c:	1dfb      	adds	r3, r7, #7
    682e:	781b      	ldrb	r3, [r3, #0]
    6830:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6832:	683b      	ldr	r3, [r7, #0]
    6834:	781b      	ldrb	r3, [r3, #0]
    6836:	021b      	lsls	r3, r3, #8
    6838:	001a      	movs	r2, r3
    683a:	697b      	ldr	r3, [r7, #20]
    683c:	4313      	orrs	r3, r2
    683e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6840:	683b      	ldr	r3, [r7, #0]
    6842:	785b      	ldrb	r3, [r3, #1]
    6844:	2b00      	cmp	r3, #0
    6846:	d004      	beq.n	6852 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6848:	697b      	ldr	r3, [r7, #20]
    684a:	2280      	movs	r2, #128	; 0x80
    684c:	02d2      	lsls	r2, r2, #11
    684e:	4313      	orrs	r3, r2
    6850:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6852:	683b      	ldr	r3, [r7, #0]
    6854:	7a5b      	ldrb	r3, [r3, #9]
    6856:	2b00      	cmp	r3, #0
    6858:	d004      	beq.n	6864 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    685a:	697b      	ldr	r3, [r7, #20]
    685c:	2280      	movs	r2, #128	; 0x80
    685e:	0312      	lsls	r2, r2, #12
    6860:	4313      	orrs	r3, r2
    6862:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6864:	683b      	ldr	r3, [r7, #0]
    6866:	685b      	ldr	r3, [r3, #4]
    6868:	2b01      	cmp	r3, #1
    686a:	d92c      	bls.n	68c6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    686c:	683b      	ldr	r3, [r7, #0]
    686e:	685a      	ldr	r2, [r3, #4]
    6870:	683b      	ldr	r3, [r7, #0]
    6872:	685b      	ldr	r3, [r3, #4]
    6874:	3b01      	subs	r3, #1
    6876:	4013      	ands	r3, r2
    6878:	d11a      	bne.n	68b0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    687a:	2300      	movs	r3, #0
    687c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    687e:	2302      	movs	r3, #2
    6880:	60bb      	str	r3, [r7, #8]
    6882:	e005      	b.n	6890 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6884:	68fb      	ldr	r3, [r7, #12]
    6886:	3301      	adds	r3, #1
    6888:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    688a:	68bb      	ldr	r3, [r7, #8]
    688c:	005b      	lsls	r3, r3, #1
    688e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6890:	683b      	ldr	r3, [r7, #0]
    6892:	685a      	ldr	r2, [r3, #4]
    6894:	68bb      	ldr	r3, [r7, #8]
    6896:	429a      	cmp	r2, r3
    6898:	d8f4      	bhi.n	6884 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    689a:	68fb      	ldr	r3, [r7, #12]
    689c:	021b      	lsls	r3, r3, #8
    689e:	693a      	ldr	r2, [r7, #16]
    68a0:	4313      	orrs	r3, r2
    68a2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    68a4:	697b      	ldr	r3, [r7, #20]
    68a6:	2280      	movs	r2, #128	; 0x80
    68a8:	0352      	lsls	r2, r2, #13
    68aa:	4313      	orrs	r3, r2
    68ac:	617b      	str	r3, [r7, #20]
    68ae:	e00a      	b.n	68c6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    68b0:	683b      	ldr	r3, [r7, #0]
    68b2:	685b      	ldr	r3, [r3, #4]
    68b4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    68b6:	693a      	ldr	r2, [r7, #16]
    68b8:	4313      	orrs	r3, r2
    68ba:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    68bc:	697b      	ldr	r3, [r7, #20]
    68be:	2280      	movs	r2, #128	; 0x80
    68c0:	0292      	lsls	r2, r2, #10
    68c2:	4313      	orrs	r3, r2
    68c4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    68c6:	683b      	ldr	r3, [r7, #0]
    68c8:	7a1b      	ldrb	r3, [r3, #8]
    68ca:	2b00      	cmp	r3, #0
    68cc:	d004      	beq.n	68d8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    68ce:	697b      	ldr	r3, [r7, #20]
    68d0:	2280      	movs	r2, #128	; 0x80
    68d2:	0392      	lsls	r2, r2, #14
    68d4:	4313      	orrs	r3, r2
    68d6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    68d8:	46c0      	nop			; (mov r8, r8)
    68da:	4b13      	ldr	r3, [pc, #76]	; (6928 <system_gclk_gen_set_config+0x110>)
    68dc:	4798      	blx	r3
    68de:	1e03      	subs	r3, r0, #0
    68e0:	d1fb      	bne.n	68da <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    68e2:	4b12      	ldr	r3, [pc, #72]	; (692c <system_gclk_gen_set_config+0x114>)
    68e4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    68e6:	4a12      	ldr	r2, [pc, #72]	; (6930 <system_gclk_gen_set_config+0x118>)
    68e8:	1dfb      	adds	r3, r7, #7
    68ea:	781b      	ldrb	r3, [r3, #0]
    68ec:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    68ee:	46c0      	nop			; (mov r8, r8)
    68f0:	4b0d      	ldr	r3, [pc, #52]	; (6928 <system_gclk_gen_set_config+0x110>)
    68f2:	4798      	blx	r3
    68f4:	1e03      	subs	r3, r0, #0
    68f6:	d1fb      	bne.n	68f0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    68f8:	4b0e      	ldr	r3, [pc, #56]	; (6934 <system_gclk_gen_set_config+0x11c>)
    68fa:	693a      	ldr	r2, [r7, #16]
    68fc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    68fe:	46c0      	nop			; (mov r8, r8)
    6900:	4b09      	ldr	r3, [pc, #36]	; (6928 <system_gclk_gen_set_config+0x110>)
    6902:	4798      	blx	r3
    6904:	1e03      	subs	r3, r0, #0
    6906:	d1fb      	bne.n	6900 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6908:	4b0a      	ldr	r3, [pc, #40]	; (6934 <system_gclk_gen_set_config+0x11c>)
    690a:	4a0a      	ldr	r2, [pc, #40]	; (6934 <system_gclk_gen_set_config+0x11c>)
    690c:	6851      	ldr	r1, [r2, #4]
    690e:	2280      	movs	r2, #128	; 0x80
    6910:	0252      	lsls	r2, r2, #9
    6912:	4011      	ands	r1, r2
    6914:	697a      	ldr	r2, [r7, #20]
    6916:	430a      	orrs	r2, r1
    6918:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    691a:	4b07      	ldr	r3, [pc, #28]	; (6938 <system_gclk_gen_set_config+0x120>)
    691c:	4798      	blx	r3
}
    691e:	46c0      	nop			; (mov r8, r8)
    6920:	46bd      	mov	sp, r7
    6922:	b006      	add	sp, #24
    6924:	bd80      	pop	{r7, pc}
    6926:	46c0      	nop			; (mov r8, r8)
    6928:	000067c9 	.word	0x000067c9
    692c:	000067a1 	.word	0x000067a1
    6930:	40000c08 	.word	0x40000c08
    6934:	40000c00 	.word	0x40000c00
    6938:	000067b5 	.word	0x000067b5

0000693c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    693c:	b580      	push	{r7, lr}
    693e:	b082      	sub	sp, #8
    6940:	af00      	add	r7, sp, #0
    6942:	0002      	movs	r2, r0
    6944:	1dfb      	adds	r3, r7, #7
    6946:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6948:	46c0      	nop			; (mov r8, r8)
    694a:	4b0e      	ldr	r3, [pc, #56]	; (6984 <system_gclk_gen_enable+0x48>)
    694c:	4798      	blx	r3
    694e:	1e03      	subs	r3, r0, #0
    6950:	d1fb      	bne.n	694a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6952:	4b0d      	ldr	r3, [pc, #52]	; (6988 <system_gclk_gen_enable+0x4c>)
    6954:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6956:	4a0d      	ldr	r2, [pc, #52]	; (698c <system_gclk_gen_enable+0x50>)
    6958:	1dfb      	adds	r3, r7, #7
    695a:	781b      	ldrb	r3, [r3, #0]
    695c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	4b08      	ldr	r3, [pc, #32]	; (6984 <system_gclk_gen_enable+0x48>)
    6962:	4798      	blx	r3
    6964:	1e03      	subs	r3, r0, #0
    6966:	d1fb      	bne.n	6960 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6968:	4b09      	ldr	r3, [pc, #36]	; (6990 <system_gclk_gen_enable+0x54>)
    696a:	4a09      	ldr	r2, [pc, #36]	; (6990 <system_gclk_gen_enable+0x54>)
    696c:	6852      	ldr	r2, [r2, #4]
    696e:	2180      	movs	r1, #128	; 0x80
    6970:	0249      	lsls	r1, r1, #9
    6972:	430a      	orrs	r2, r1
    6974:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6976:	4b07      	ldr	r3, [pc, #28]	; (6994 <system_gclk_gen_enable+0x58>)
    6978:	4798      	blx	r3
}
    697a:	46c0      	nop			; (mov r8, r8)
    697c:	46bd      	mov	sp, r7
    697e:	b002      	add	sp, #8
    6980:	bd80      	pop	{r7, pc}
    6982:	46c0      	nop			; (mov r8, r8)
    6984:	000067c9 	.word	0x000067c9
    6988:	000067a1 	.word	0x000067a1
    698c:	40000c04 	.word	0x40000c04
    6990:	40000c00 	.word	0x40000c00
    6994:	000067b5 	.word	0x000067b5

00006998 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6998:	b580      	push	{r7, lr}
    699a:	b086      	sub	sp, #24
    699c:	af00      	add	r7, sp, #0
    699e:	0002      	movs	r2, r0
    69a0:	1dfb      	adds	r3, r7, #7
    69a2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    69a4:	46c0      	nop			; (mov r8, r8)
    69a6:	4b2a      	ldr	r3, [pc, #168]	; (6a50 <system_gclk_gen_get_hz+0xb8>)
    69a8:	4798      	blx	r3
    69aa:	1e03      	subs	r3, r0, #0
    69ac:	d1fb      	bne.n	69a6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    69ae:	4b29      	ldr	r3, [pc, #164]	; (6a54 <system_gclk_gen_get_hz+0xbc>)
    69b0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    69b2:	4a29      	ldr	r2, [pc, #164]	; (6a58 <system_gclk_gen_get_hz+0xc0>)
    69b4:	1dfb      	adds	r3, r7, #7
    69b6:	781b      	ldrb	r3, [r3, #0]
    69b8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    69ba:	46c0      	nop			; (mov r8, r8)
    69bc:	4b24      	ldr	r3, [pc, #144]	; (6a50 <system_gclk_gen_get_hz+0xb8>)
    69be:	4798      	blx	r3
    69c0:	1e03      	subs	r3, r0, #0
    69c2:	d1fb      	bne.n	69bc <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    69c4:	4b25      	ldr	r3, [pc, #148]	; (6a5c <system_gclk_gen_get_hz+0xc4>)
    69c6:	685b      	ldr	r3, [r3, #4]
    69c8:	04db      	lsls	r3, r3, #19
    69ca:	0edb      	lsrs	r3, r3, #27
    69cc:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    69ce:	0018      	movs	r0, r3
    69d0:	4b23      	ldr	r3, [pc, #140]	; (6a60 <system_gclk_gen_get_hz+0xc8>)
    69d2:	4798      	blx	r3
    69d4:	0003      	movs	r3, r0
    69d6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    69d8:	4a1f      	ldr	r2, [pc, #124]	; (6a58 <system_gclk_gen_get_hz+0xc0>)
    69da:	1dfb      	adds	r3, r7, #7
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    69e0:	4b1e      	ldr	r3, [pc, #120]	; (6a5c <system_gclk_gen_get_hz+0xc4>)
    69e2:	685b      	ldr	r3, [r3, #4]
    69e4:	02db      	lsls	r3, r3, #11
    69e6:	0fdb      	lsrs	r3, r3, #31
    69e8:	b2da      	uxtb	r2, r3
    69ea:	2313      	movs	r3, #19
    69ec:	18fb      	adds	r3, r7, r3
    69ee:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    69f0:	4a1c      	ldr	r2, [pc, #112]	; (6a64 <system_gclk_gen_get_hz+0xcc>)
    69f2:	1dfb      	adds	r3, r7, #7
    69f4:	781b      	ldrb	r3, [r3, #0]
    69f6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    69f8:	46c0      	nop			; (mov r8, r8)
    69fa:	4b15      	ldr	r3, [pc, #84]	; (6a50 <system_gclk_gen_get_hz+0xb8>)
    69fc:	4798      	blx	r3
    69fe:	1e03      	subs	r3, r0, #0
    6a00:	d1fb      	bne.n	69fa <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6a02:	4b16      	ldr	r3, [pc, #88]	; (6a5c <system_gclk_gen_get_hz+0xc4>)
    6a04:	689b      	ldr	r3, [r3, #8]
    6a06:	021b      	lsls	r3, r3, #8
    6a08:	0c1b      	lsrs	r3, r3, #16
    6a0a:	b29b      	uxth	r3, r3
    6a0c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    6a0e:	4b16      	ldr	r3, [pc, #88]	; (6a68 <system_gclk_gen_get_hz+0xd0>)
    6a10:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6a12:	2313      	movs	r3, #19
    6a14:	18fb      	adds	r3, r7, r3
    6a16:	781b      	ldrb	r3, [r3, #0]
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d109      	bne.n	6a30 <system_gclk_gen_get_hz+0x98>
    6a1c:	68fb      	ldr	r3, [r7, #12]
    6a1e:	2b01      	cmp	r3, #1
    6a20:	d906      	bls.n	6a30 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    6a22:	4b12      	ldr	r3, [pc, #72]	; (6a6c <system_gclk_gen_get_hz+0xd4>)
    6a24:	68f9      	ldr	r1, [r7, #12]
    6a26:	6978      	ldr	r0, [r7, #20]
    6a28:	4798      	blx	r3
    6a2a:	0003      	movs	r3, r0
    6a2c:	617b      	str	r3, [r7, #20]
    6a2e:	e00a      	b.n	6a46 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    6a30:	2313      	movs	r3, #19
    6a32:	18fb      	adds	r3, r7, r3
    6a34:	781b      	ldrb	r3, [r3, #0]
    6a36:	2b00      	cmp	r3, #0
    6a38:	d005      	beq.n	6a46 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    6a3a:	68fb      	ldr	r3, [r7, #12]
    6a3c:	3301      	adds	r3, #1
    6a3e:	697a      	ldr	r2, [r7, #20]
    6a40:	40da      	lsrs	r2, r3
    6a42:	0013      	movs	r3, r2
    6a44:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6a46:	697b      	ldr	r3, [r7, #20]
}
    6a48:	0018      	movs	r0, r3
    6a4a:	46bd      	mov	sp, r7
    6a4c:	b006      	add	sp, #24
    6a4e:	bd80      	pop	{r7, pc}
    6a50:	000067c9 	.word	0x000067c9
    6a54:	000067a1 	.word	0x000067a1
    6a58:	40000c04 	.word	0x40000c04
    6a5c:	40000c00 	.word	0x40000c00
    6a60:	00006045 	.word	0x00006045
    6a64:	40000c08 	.word	0x40000c08
    6a68:	000067b5 	.word	0x000067b5
    6a6c:	0000b4c5 	.word	0x0000b4c5

00006a70 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6a70:	b580      	push	{r7, lr}
    6a72:	b084      	sub	sp, #16
    6a74:	af00      	add	r7, sp, #0
    6a76:	0002      	movs	r2, r0
    6a78:	6039      	str	r1, [r7, #0]
    6a7a:	1dfb      	adds	r3, r7, #7
    6a7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6a7e:	1dfb      	adds	r3, r7, #7
    6a80:	781b      	ldrb	r3, [r3, #0]
    6a82:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6a84:	683b      	ldr	r3, [r7, #0]
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	021b      	lsls	r3, r3, #8
    6a8a:	001a      	movs	r2, r3
    6a8c:	68fb      	ldr	r3, [r7, #12]
    6a8e:	4313      	orrs	r3, r2
    6a90:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6a92:	1dfb      	adds	r3, r7, #7
    6a94:	781b      	ldrb	r3, [r3, #0]
    6a96:	0018      	movs	r0, r3
    6a98:	4b04      	ldr	r3, [pc, #16]	; (6aac <system_gclk_chan_set_config+0x3c>)
    6a9a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6a9c:	4b04      	ldr	r3, [pc, #16]	; (6ab0 <system_gclk_chan_set_config+0x40>)
    6a9e:	68fa      	ldr	r2, [r7, #12]
    6aa0:	b292      	uxth	r2, r2
    6aa2:	805a      	strh	r2, [r3, #2]
}
    6aa4:	46c0      	nop			; (mov r8, r8)
    6aa6:	46bd      	mov	sp, r7
    6aa8:	b004      	add	sp, #16
    6aaa:	bd80      	pop	{r7, pc}
    6aac:	00006afd 	.word	0x00006afd
    6ab0:	40000c00 	.word	0x40000c00

00006ab4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6ab4:	b580      	push	{r7, lr}
    6ab6:	b082      	sub	sp, #8
    6ab8:	af00      	add	r7, sp, #0
    6aba:	0002      	movs	r2, r0
    6abc:	1dfb      	adds	r3, r7, #7
    6abe:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6ac0:	4b0a      	ldr	r3, [pc, #40]	; (6aec <system_gclk_chan_enable+0x38>)
    6ac2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6ac4:	4a0a      	ldr	r2, [pc, #40]	; (6af0 <system_gclk_chan_enable+0x3c>)
    6ac6:	1dfb      	adds	r3, r7, #7
    6ac8:	781b      	ldrb	r3, [r3, #0]
    6aca:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6acc:	4909      	ldr	r1, [pc, #36]	; (6af4 <system_gclk_chan_enable+0x40>)
    6ace:	4b09      	ldr	r3, [pc, #36]	; (6af4 <system_gclk_chan_enable+0x40>)
    6ad0:	885b      	ldrh	r3, [r3, #2]
    6ad2:	b29b      	uxth	r3, r3
    6ad4:	2280      	movs	r2, #128	; 0x80
    6ad6:	01d2      	lsls	r2, r2, #7
    6ad8:	4313      	orrs	r3, r2
    6ada:	b29b      	uxth	r3, r3
    6adc:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    6ade:	4b06      	ldr	r3, [pc, #24]	; (6af8 <system_gclk_chan_enable+0x44>)
    6ae0:	4798      	blx	r3
}
    6ae2:	46c0      	nop			; (mov r8, r8)
    6ae4:	46bd      	mov	sp, r7
    6ae6:	b002      	add	sp, #8
    6ae8:	bd80      	pop	{r7, pc}
    6aea:	46c0      	nop			; (mov r8, r8)
    6aec:	000067a1 	.word	0x000067a1
    6af0:	40000c02 	.word	0x40000c02
    6af4:	40000c00 	.word	0x40000c00
    6af8:	000067b5 	.word	0x000067b5

00006afc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6afc:	b580      	push	{r7, lr}
    6afe:	b084      	sub	sp, #16
    6b00:	af00      	add	r7, sp, #0
    6b02:	0002      	movs	r2, r0
    6b04:	1dfb      	adds	r3, r7, #7
    6b06:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6b08:	4b1c      	ldr	r3, [pc, #112]	; (6b7c <system_gclk_chan_disable+0x80>)
    6b0a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6b0c:	4a1c      	ldr	r2, [pc, #112]	; (6b80 <system_gclk_chan_disable+0x84>)
    6b0e:	1dfb      	adds	r3, r7, #7
    6b10:	781b      	ldrb	r3, [r3, #0]
    6b12:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6b14:	4b1b      	ldr	r3, [pc, #108]	; (6b84 <system_gclk_chan_disable+0x88>)
    6b16:	885b      	ldrh	r3, [r3, #2]
    6b18:	051b      	lsls	r3, r3, #20
    6b1a:	0f1b      	lsrs	r3, r3, #28
    6b1c:	b2db      	uxtb	r3, r3
    6b1e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6b20:	4a18      	ldr	r2, [pc, #96]	; (6b84 <system_gclk_chan_disable+0x88>)
    6b22:	8853      	ldrh	r3, [r2, #2]
    6b24:	4918      	ldr	r1, [pc, #96]	; (6b88 <system_gclk_chan_disable+0x8c>)
    6b26:	400b      	ands	r3, r1
    6b28:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6b2a:	4a16      	ldr	r2, [pc, #88]	; (6b84 <system_gclk_chan_disable+0x88>)
    6b2c:	4b15      	ldr	r3, [pc, #84]	; (6b84 <system_gclk_chan_disable+0x88>)
    6b2e:	885b      	ldrh	r3, [r3, #2]
    6b30:	b29b      	uxth	r3, r3
    6b32:	4916      	ldr	r1, [pc, #88]	; (6b8c <system_gclk_chan_disable+0x90>)
    6b34:	400b      	ands	r3, r1
    6b36:	b29b      	uxth	r3, r3
    6b38:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6b3a:	46c0      	nop			; (mov r8, r8)
    6b3c:	4b11      	ldr	r3, [pc, #68]	; (6b84 <system_gclk_chan_disable+0x88>)
    6b3e:	885b      	ldrh	r3, [r3, #2]
    6b40:	b29b      	uxth	r3, r3
    6b42:	001a      	movs	r2, r3
    6b44:	2380      	movs	r3, #128	; 0x80
    6b46:	01db      	lsls	r3, r3, #7
    6b48:	4013      	ands	r3, r2
    6b4a:	d1f7      	bne.n	6b3c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6b4c:	4a0d      	ldr	r2, [pc, #52]	; (6b84 <system_gclk_chan_disable+0x88>)
    6b4e:	68fb      	ldr	r3, [r7, #12]
    6b50:	b2db      	uxtb	r3, r3
    6b52:	1c19      	adds	r1, r3, #0
    6b54:	230f      	movs	r3, #15
    6b56:	400b      	ands	r3, r1
    6b58:	b2d9      	uxtb	r1, r3
    6b5a:	8853      	ldrh	r3, [r2, #2]
    6b5c:	1c08      	adds	r0, r1, #0
    6b5e:	210f      	movs	r1, #15
    6b60:	4001      	ands	r1, r0
    6b62:	0208      	lsls	r0, r1, #8
    6b64:	4908      	ldr	r1, [pc, #32]	; (6b88 <system_gclk_chan_disable+0x8c>)
    6b66:	400b      	ands	r3, r1
    6b68:	1c19      	adds	r1, r3, #0
    6b6a:	1c03      	adds	r3, r0, #0
    6b6c:	430b      	orrs	r3, r1
    6b6e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6b70:	4b07      	ldr	r3, [pc, #28]	; (6b90 <system_gclk_chan_disable+0x94>)
    6b72:	4798      	blx	r3
}
    6b74:	46c0      	nop			; (mov r8, r8)
    6b76:	46bd      	mov	sp, r7
    6b78:	b004      	add	sp, #16
    6b7a:	bd80      	pop	{r7, pc}
    6b7c:	000067a1 	.word	0x000067a1
    6b80:	40000c02 	.word	0x40000c02
    6b84:	40000c00 	.word	0x40000c00
    6b88:	fffff0ff 	.word	0xfffff0ff
    6b8c:	ffffbfff 	.word	0xffffbfff
    6b90:	000067b5 	.word	0x000067b5

00006b94 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6b94:	b580      	push	{r7, lr}
    6b96:	b084      	sub	sp, #16
    6b98:	af00      	add	r7, sp, #0
    6b9a:	0002      	movs	r2, r0
    6b9c:	1dfb      	adds	r3, r7, #7
    6b9e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6ba0:	4b0d      	ldr	r3, [pc, #52]	; (6bd8 <system_gclk_chan_get_hz+0x44>)
    6ba2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6ba4:	4a0d      	ldr	r2, [pc, #52]	; (6bdc <system_gclk_chan_get_hz+0x48>)
    6ba6:	1dfb      	adds	r3, r7, #7
    6ba8:	781b      	ldrb	r3, [r3, #0]
    6baa:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6bac:	4b0c      	ldr	r3, [pc, #48]	; (6be0 <system_gclk_chan_get_hz+0x4c>)
    6bae:	885b      	ldrh	r3, [r3, #2]
    6bb0:	051b      	lsls	r3, r3, #20
    6bb2:	0f1b      	lsrs	r3, r3, #28
    6bb4:	b2da      	uxtb	r2, r3
    6bb6:	230f      	movs	r3, #15
    6bb8:	18fb      	adds	r3, r7, r3
    6bba:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6bbc:	4b09      	ldr	r3, [pc, #36]	; (6be4 <system_gclk_chan_get_hz+0x50>)
    6bbe:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6bc0:	230f      	movs	r3, #15
    6bc2:	18fb      	adds	r3, r7, r3
    6bc4:	781b      	ldrb	r3, [r3, #0]
    6bc6:	0018      	movs	r0, r3
    6bc8:	4b07      	ldr	r3, [pc, #28]	; (6be8 <system_gclk_chan_get_hz+0x54>)
    6bca:	4798      	blx	r3
    6bcc:	0003      	movs	r3, r0
}
    6bce:	0018      	movs	r0, r3
    6bd0:	46bd      	mov	sp, r7
    6bd2:	b004      	add	sp, #16
    6bd4:	bd80      	pop	{r7, pc}
    6bd6:	46c0      	nop			; (mov r8, r8)
    6bd8:	000067a1 	.word	0x000067a1
    6bdc:	40000c02 	.word	0x40000c02
    6be0:	40000c00 	.word	0x40000c00
    6be4:	000067b5 	.word	0x000067b5
    6be8:	00006999 	.word	0x00006999

00006bec <system_pinmux_get_group_from_gpio_pin>:
{
    6bec:	b580      	push	{r7, lr}
    6bee:	b084      	sub	sp, #16
    6bf0:	af00      	add	r7, sp, #0
    6bf2:	0002      	movs	r2, r0
    6bf4:	1dfb      	adds	r3, r7, #7
    6bf6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6bf8:	230f      	movs	r3, #15
    6bfa:	18fb      	adds	r3, r7, r3
    6bfc:	1dfa      	adds	r2, r7, #7
    6bfe:	7812      	ldrb	r2, [r2, #0]
    6c00:	09d2      	lsrs	r2, r2, #7
    6c02:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6c04:	230e      	movs	r3, #14
    6c06:	18fb      	adds	r3, r7, r3
    6c08:	1dfa      	adds	r2, r7, #7
    6c0a:	7812      	ldrb	r2, [r2, #0]
    6c0c:	0952      	lsrs	r2, r2, #5
    6c0e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6c10:	4b0d      	ldr	r3, [pc, #52]	; (6c48 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6c12:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6c14:	230f      	movs	r3, #15
    6c16:	18fb      	adds	r3, r7, r3
    6c18:	781b      	ldrb	r3, [r3, #0]
    6c1a:	2b00      	cmp	r3, #0
    6c1c:	d10f      	bne.n	6c3e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6c1e:	230f      	movs	r3, #15
    6c20:	18fb      	adds	r3, r7, r3
    6c22:	781b      	ldrb	r3, [r3, #0]
    6c24:	009b      	lsls	r3, r3, #2
    6c26:	2210      	movs	r2, #16
    6c28:	4694      	mov	ip, r2
    6c2a:	44bc      	add	ip, r7
    6c2c:	4463      	add	r3, ip
    6c2e:	3b08      	subs	r3, #8
    6c30:	681a      	ldr	r2, [r3, #0]
    6c32:	230e      	movs	r3, #14
    6c34:	18fb      	adds	r3, r7, r3
    6c36:	781b      	ldrb	r3, [r3, #0]
    6c38:	01db      	lsls	r3, r3, #7
    6c3a:	18d3      	adds	r3, r2, r3
    6c3c:	e000      	b.n	6c40 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6c3e:	2300      	movs	r3, #0
}
    6c40:	0018      	movs	r0, r3
    6c42:	46bd      	mov	sp, r7
    6c44:	b004      	add	sp, #16
    6c46:	bd80      	pop	{r7, pc}
    6c48:	41004400 	.word	0x41004400

00006c4c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6c4c:	b580      	push	{r7, lr}
    6c4e:	b088      	sub	sp, #32
    6c50:	af00      	add	r7, sp, #0
    6c52:	60f8      	str	r0, [r7, #12]
    6c54:	60b9      	str	r1, [r7, #8]
    6c56:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6c58:	2300      	movs	r3, #0
    6c5a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6c5c:	687b      	ldr	r3, [r7, #4]
    6c5e:	78db      	ldrb	r3, [r3, #3]
    6c60:	2201      	movs	r2, #1
    6c62:	4053      	eors	r3, r2
    6c64:	b2db      	uxtb	r3, r3
    6c66:	2b00      	cmp	r3, #0
    6c68:	d035      	beq.n	6cd6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6c6a:	687b      	ldr	r3, [r7, #4]
    6c6c:	781b      	ldrb	r3, [r3, #0]
    6c6e:	2b80      	cmp	r3, #128	; 0x80
    6c70:	d00b      	beq.n	6c8a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6c72:	69fb      	ldr	r3, [r7, #28]
    6c74:	2280      	movs	r2, #128	; 0x80
    6c76:	0252      	lsls	r2, r2, #9
    6c78:	4313      	orrs	r3, r2
    6c7a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6c7c:	687b      	ldr	r3, [r7, #4]
    6c7e:	781b      	ldrb	r3, [r3, #0]
    6c80:	061b      	lsls	r3, r3, #24
    6c82:	001a      	movs	r2, r3
    6c84:	69fb      	ldr	r3, [r7, #28]
    6c86:	4313      	orrs	r3, r2
    6c88:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6c8a:	687b      	ldr	r3, [r7, #4]
    6c8c:	785b      	ldrb	r3, [r3, #1]
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d003      	beq.n	6c9a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6c92:	687b      	ldr	r3, [r7, #4]
    6c94:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6c96:	2b02      	cmp	r3, #2
    6c98:	d110      	bne.n	6cbc <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6c9a:	69fb      	ldr	r3, [r7, #28]
    6c9c:	2280      	movs	r2, #128	; 0x80
    6c9e:	0292      	lsls	r2, r2, #10
    6ca0:	4313      	orrs	r3, r2
    6ca2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6ca4:	687b      	ldr	r3, [r7, #4]
    6ca6:	789b      	ldrb	r3, [r3, #2]
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d004      	beq.n	6cb6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6cac:	69fb      	ldr	r3, [r7, #28]
    6cae:	2280      	movs	r2, #128	; 0x80
    6cb0:	02d2      	lsls	r2, r2, #11
    6cb2:	4313      	orrs	r3, r2
    6cb4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6cb6:	68fb      	ldr	r3, [r7, #12]
    6cb8:	68ba      	ldr	r2, [r7, #8]
    6cba:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6cbc:	687b      	ldr	r3, [r7, #4]
    6cbe:	785b      	ldrb	r3, [r3, #1]
    6cc0:	2b01      	cmp	r3, #1
    6cc2:	d003      	beq.n	6ccc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6cc4:	687b      	ldr	r3, [r7, #4]
    6cc6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6cc8:	2b02      	cmp	r3, #2
    6cca:	d107      	bne.n	6cdc <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6ccc:	69fb      	ldr	r3, [r7, #28]
    6cce:	4a22      	ldr	r2, [pc, #136]	; (6d58 <_system_pinmux_config+0x10c>)
    6cd0:	4013      	ands	r3, r2
    6cd2:	61fb      	str	r3, [r7, #28]
    6cd4:	e002      	b.n	6cdc <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6cd6:	68fb      	ldr	r3, [r7, #12]
    6cd8:	68ba      	ldr	r2, [r7, #8]
    6cda:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6cdc:	68bb      	ldr	r3, [r7, #8]
    6cde:	041b      	lsls	r3, r3, #16
    6ce0:	0c1b      	lsrs	r3, r3, #16
    6ce2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6ce4:	68bb      	ldr	r3, [r7, #8]
    6ce6:	0c1b      	lsrs	r3, r3, #16
    6ce8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6cea:	69ba      	ldr	r2, [r7, #24]
    6cec:	69fb      	ldr	r3, [r7, #28]
    6cee:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6cf0:	22a0      	movs	r2, #160	; 0xa0
    6cf2:	05d2      	lsls	r2, r2, #23
    6cf4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6cf6:	68fb      	ldr	r3, [r7, #12]
    6cf8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6cfa:	697a      	ldr	r2, [r7, #20]
    6cfc:	69fb      	ldr	r3, [r7, #28]
    6cfe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6d00:	22d0      	movs	r2, #208	; 0xd0
    6d02:	0612      	lsls	r2, r2, #24
    6d04:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6d06:	68fb      	ldr	r3, [r7, #12]
    6d08:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6d0a:	687b      	ldr	r3, [r7, #4]
    6d0c:	78db      	ldrb	r3, [r3, #3]
    6d0e:	2201      	movs	r2, #1
    6d10:	4053      	eors	r3, r2
    6d12:	b2db      	uxtb	r3, r3
    6d14:	2b00      	cmp	r3, #0
    6d16:	d01a      	beq.n	6d4e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6d18:	69fa      	ldr	r2, [r7, #28]
    6d1a:	2380      	movs	r3, #128	; 0x80
    6d1c:	02db      	lsls	r3, r3, #11
    6d1e:	4013      	ands	r3, r2
    6d20:	d00a      	beq.n	6d38 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	789b      	ldrb	r3, [r3, #2]
    6d26:	2b01      	cmp	r3, #1
    6d28:	d103      	bne.n	6d32 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6d2a:	68fb      	ldr	r3, [r7, #12]
    6d2c:	68ba      	ldr	r2, [r7, #8]
    6d2e:	619a      	str	r2, [r3, #24]
    6d30:	e002      	b.n	6d38 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6d32:	68fb      	ldr	r3, [r7, #12]
    6d34:	68ba      	ldr	r2, [r7, #8]
    6d36:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6d38:	687b      	ldr	r3, [r7, #4]
    6d3a:	785b      	ldrb	r3, [r3, #1]
    6d3c:	2b01      	cmp	r3, #1
    6d3e:	d003      	beq.n	6d48 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6d44:	2b02      	cmp	r3, #2
    6d46:	d102      	bne.n	6d4e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6d48:	68fb      	ldr	r3, [r7, #12]
    6d4a:	68ba      	ldr	r2, [r7, #8]
    6d4c:	609a      	str	r2, [r3, #8]
		}
	}
}
    6d4e:	46c0      	nop			; (mov r8, r8)
    6d50:	46bd      	mov	sp, r7
    6d52:	b008      	add	sp, #32
    6d54:	bd80      	pop	{r7, pc}
    6d56:	46c0      	nop			; (mov r8, r8)
    6d58:	fffbffff 	.word	0xfffbffff

00006d5c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6d5c:	b580      	push	{r7, lr}
    6d5e:	b084      	sub	sp, #16
    6d60:	af00      	add	r7, sp, #0
    6d62:	0002      	movs	r2, r0
    6d64:	6039      	str	r1, [r7, #0]
    6d66:	1dfb      	adds	r3, r7, #7
    6d68:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6d6a:	1dfb      	adds	r3, r7, #7
    6d6c:	781b      	ldrb	r3, [r3, #0]
    6d6e:	0018      	movs	r0, r3
    6d70:	4b0a      	ldr	r3, [pc, #40]	; (6d9c <system_pinmux_pin_set_config+0x40>)
    6d72:	4798      	blx	r3
    6d74:	0003      	movs	r3, r0
    6d76:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6d78:	1dfb      	adds	r3, r7, #7
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	221f      	movs	r2, #31
    6d7e:	4013      	ands	r3, r2
    6d80:	2201      	movs	r2, #1
    6d82:	409a      	lsls	r2, r3
    6d84:	0013      	movs	r3, r2
    6d86:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6d88:	683a      	ldr	r2, [r7, #0]
    6d8a:	68b9      	ldr	r1, [r7, #8]
    6d8c:	68fb      	ldr	r3, [r7, #12]
    6d8e:	0018      	movs	r0, r3
    6d90:	4b03      	ldr	r3, [pc, #12]	; (6da0 <system_pinmux_pin_set_config+0x44>)
    6d92:	4798      	blx	r3
}
    6d94:	46c0      	nop			; (mov r8, r8)
    6d96:	46bd      	mov	sp, r7
    6d98:	b004      	add	sp, #16
    6d9a:	bd80      	pop	{r7, pc}
    6d9c:	00006bed 	.word	0x00006bed
    6da0:	00006c4d 	.word	0x00006c4d

00006da4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6da4:	b580      	push	{r7, lr}
    6da6:	af00      	add	r7, sp, #0
	return;
    6da8:	46c0      	nop			; (mov r8, r8)
}
    6daa:	46bd      	mov	sp, r7
    6dac:	bd80      	pop	{r7, pc}
	...

00006db0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6db0:	b580      	push	{r7, lr}
    6db2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6db4:	4b06      	ldr	r3, [pc, #24]	; (6dd0 <system_init+0x20>)
    6db6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6db8:	4b06      	ldr	r3, [pc, #24]	; (6dd4 <system_init+0x24>)
    6dba:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6dbc:	4b06      	ldr	r3, [pc, #24]	; (6dd8 <system_init+0x28>)
    6dbe:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6dc0:	4b06      	ldr	r3, [pc, #24]	; (6ddc <system_init+0x2c>)
    6dc2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6dc4:	4b06      	ldr	r3, [pc, #24]	; (6de0 <system_init+0x30>)
    6dc6:	4798      	blx	r3
}
    6dc8:	46c0      	nop			; (mov r8, r8)
    6dca:	46bd      	mov	sp, r7
    6dcc:	bd80      	pop	{r7, pc}
    6dce:	46c0      	nop			; (mov r8, r8)
    6dd0:	000064d5 	.word	0x000064d5
    6dd4:	000002f9 	.word	0x000002f9
    6dd8:	00006da5 	.word	0x00006da5
    6ddc:	00006da5 	.word	0x00006da5
    6de0:	00006da5 	.word	0x00006da5

00006de4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6de4:	b580      	push	{r7, lr}
    6de6:	b082      	sub	sp, #8
    6de8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6dea:	4b2f      	ldr	r3, [pc, #188]	; (6ea8 <Reset_Handler+0xc4>)
    6dec:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6dee:	4b2f      	ldr	r3, [pc, #188]	; (6eac <Reset_Handler+0xc8>)
    6df0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6df2:	687a      	ldr	r2, [r7, #4]
    6df4:	683b      	ldr	r3, [r7, #0]
    6df6:	429a      	cmp	r2, r3
    6df8:	d00c      	beq.n	6e14 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6dfa:	e007      	b.n	6e0c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6dfc:	683b      	ldr	r3, [r7, #0]
    6dfe:	1d1a      	adds	r2, r3, #4
    6e00:	603a      	str	r2, [r7, #0]
    6e02:	687a      	ldr	r2, [r7, #4]
    6e04:	1d11      	adds	r1, r2, #4
    6e06:	6079      	str	r1, [r7, #4]
    6e08:	6812      	ldr	r2, [r2, #0]
    6e0a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6e0c:	683a      	ldr	r2, [r7, #0]
    6e0e:	4b28      	ldr	r3, [pc, #160]	; (6eb0 <Reset_Handler+0xcc>)
    6e10:	429a      	cmp	r2, r3
    6e12:	d3f3      	bcc.n	6dfc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6e14:	4b27      	ldr	r3, [pc, #156]	; (6eb4 <Reset_Handler+0xd0>)
    6e16:	603b      	str	r3, [r7, #0]
    6e18:	e004      	b.n	6e24 <Reset_Handler+0x40>
                *pDest++ = 0;
    6e1a:	683b      	ldr	r3, [r7, #0]
    6e1c:	1d1a      	adds	r2, r3, #4
    6e1e:	603a      	str	r2, [r7, #0]
    6e20:	2200      	movs	r2, #0
    6e22:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6e24:	683a      	ldr	r2, [r7, #0]
    6e26:	4b24      	ldr	r3, [pc, #144]	; (6eb8 <Reset_Handler+0xd4>)
    6e28:	429a      	cmp	r2, r3
    6e2a:	d3f6      	bcc.n	6e1a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6e2c:	4b23      	ldr	r3, [pc, #140]	; (6ebc <Reset_Handler+0xd8>)
    6e2e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6e30:	4b23      	ldr	r3, [pc, #140]	; (6ec0 <Reset_Handler+0xdc>)
    6e32:	687a      	ldr	r2, [r7, #4]
    6e34:	21ff      	movs	r1, #255	; 0xff
    6e36:	438a      	bics	r2, r1
    6e38:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6e3a:	4a22      	ldr	r2, [pc, #136]	; (6ec4 <Reset_Handler+0xe0>)
    6e3c:	2390      	movs	r3, #144	; 0x90
    6e3e:	005b      	lsls	r3, r3, #1
    6e40:	2102      	movs	r1, #2
    6e42:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6e44:	4a20      	ldr	r2, [pc, #128]	; (6ec8 <Reset_Handler+0xe4>)
    6e46:	78d3      	ldrb	r3, [r2, #3]
    6e48:	2103      	movs	r1, #3
    6e4a:	438b      	bics	r3, r1
    6e4c:	1c19      	adds	r1, r3, #0
    6e4e:	2302      	movs	r3, #2
    6e50:	430b      	orrs	r3, r1
    6e52:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6e54:	4a1c      	ldr	r2, [pc, #112]	; (6ec8 <Reset_Handler+0xe4>)
    6e56:	78d3      	ldrb	r3, [r2, #3]
    6e58:	210c      	movs	r1, #12
    6e5a:	438b      	bics	r3, r1
    6e5c:	1c19      	adds	r1, r3, #0
    6e5e:	2308      	movs	r3, #8
    6e60:	430b      	orrs	r3, r1
    6e62:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6e64:	4a19      	ldr	r2, [pc, #100]	; (6ecc <Reset_Handler+0xe8>)
    6e66:	7b93      	ldrb	r3, [r2, #14]
    6e68:	2130      	movs	r1, #48	; 0x30
    6e6a:	438b      	bics	r3, r1
    6e6c:	1c19      	adds	r1, r3, #0
    6e6e:	2320      	movs	r3, #32
    6e70:	430b      	orrs	r3, r1
    6e72:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6e74:	4a15      	ldr	r2, [pc, #84]	; (6ecc <Reset_Handler+0xe8>)
    6e76:	7b93      	ldrb	r3, [r2, #14]
    6e78:	210c      	movs	r1, #12
    6e7a:	438b      	bics	r3, r1
    6e7c:	1c19      	adds	r1, r3, #0
    6e7e:	2308      	movs	r3, #8
    6e80:	430b      	orrs	r3, r1
    6e82:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6e84:	4a11      	ldr	r2, [pc, #68]	; (6ecc <Reset_Handler+0xe8>)
    6e86:	7b93      	ldrb	r3, [r2, #14]
    6e88:	2103      	movs	r1, #3
    6e8a:	438b      	bics	r3, r1
    6e8c:	1c19      	adds	r1, r3, #0
    6e8e:	2302      	movs	r3, #2
    6e90:	430b      	orrs	r3, r1
    6e92:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6e94:	4a0e      	ldr	r2, [pc, #56]	; (6ed0 <Reset_Handler+0xec>)
    6e96:	6853      	ldr	r3, [r2, #4]
    6e98:	2180      	movs	r1, #128	; 0x80
    6e9a:	430b      	orrs	r3, r1
    6e9c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6e9e:	4b0d      	ldr	r3, [pc, #52]	; (6ed4 <Reset_Handler+0xf0>)
    6ea0:	4798      	blx	r3

        /* Branch to main function */
        main();
    6ea2:	4b0d      	ldr	r3, [pc, #52]	; (6ed8 <Reset_Handler+0xf4>)
    6ea4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6ea6:	e7fe      	b.n	6ea6 <Reset_Handler+0xc2>
    6ea8:	0000cc24 	.word	0x0000cc24
    6eac:	20000000 	.word	0x20000000
    6eb0:	200000c4 	.word	0x200000c4
    6eb4:	200000c4 	.word	0x200000c4
    6eb8:	20000dc8 	.word	0x20000dc8
    6ebc:	00000000 	.word	0x00000000
    6ec0:	e000ed00 	.word	0xe000ed00
    6ec4:	41007000 	.word	0x41007000
    6ec8:	41005000 	.word	0x41005000
    6ecc:	41004800 	.word	0x41004800
    6ed0:	41004000 	.word	0x41004000
    6ed4:	0000b805 	.word	0x0000b805
    6ed8:	0000acc1 	.word	0x0000acc1

00006edc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6edc:	b580      	push	{r7, lr}
    6ede:	af00      	add	r7, sp, #0
        while (1) {
    6ee0:	e7fe      	b.n	6ee0 <Dummy_Handler+0x4>
	...

00006ee4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6ee4:	b580      	push	{r7, lr}
    6ee6:	b086      	sub	sp, #24
    6ee8:	af00      	add	r7, sp, #0
    6eea:	60f8      	str	r0, [r7, #12]
    6eec:	60b9      	str	r1, [r7, #8]
    6eee:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6ef0:	2300      	movs	r3, #0
    6ef2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6ef4:	68fb      	ldr	r3, [r7, #12]
    6ef6:	2b00      	cmp	r3, #0
    6ef8:	d012      	beq.n	6f20 <_read+0x3c>
		return -1;
    6efa:	2301      	movs	r3, #1
    6efc:	425b      	negs	r3, r3
    6efe:	e013      	b.n	6f28 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6f00:	4b0b      	ldr	r3, [pc, #44]	; (6f30 <_read+0x4c>)
    6f02:	681a      	ldr	r2, [r3, #0]
    6f04:	4b0b      	ldr	r3, [pc, #44]	; (6f34 <_read+0x50>)
    6f06:	681b      	ldr	r3, [r3, #0]
    6f08:	68b9      	ldr	r1, [r7, #8]
    6f0a:	0018      	movs	r0, r3
    6f0c:	4790      	blx	r2
		ptr++;
    6f0e:	68bb      	ldr	r3, [r7, #8]
    6f10:	3301      	adds	r3, #1
    6f12:	60bb      	str	r3, [r7, #8]
		nChars++;
    6f14:	697b      	ldr	r3, [r7, #20]
    6f16:	3301      	adds	r3, #1
    6f18:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	3b01      	subs	r3, #1
    6f1e:	607b      	str	r3, [r7, #4]
    6f20:	687b      	ldr	r3, [r7, #4]
    6f22:	2b00      	cmp	r3, #0
    6f24:	dcec      	bgt.n	6f00 <_read+0x1c>
	}
	return nChars;
    6f26:	697b      	ldr	r3, [r7, #20]
}
    6f28:	0018      	movs	r0, r3
    6f2a:	46bd      	mov	sp, r7
    6f2c:	b006      	add	sp, #24
    6f2e:	bd80      	pop	{r7, pc}
    6f30:	20000a20 	.word	0x20000a20
    6f34:	20000a28 	.word	0x20000a28

00006f38 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6f38:	b580      	push	{r7, lr}
    6f3a:	b086      	sub	sp, #24
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	60f8      	str	r0, [r7, #12]
    6f40:	60b9      	str	r1, [r7, #8]
    6f42:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6f44:	2300      	movs	r3, #0
    6f46:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6f48:	68fb      	ldr	r3, [r7, #12]
    6f4a:	2b01      	cmp	r3, #1
    6f4c:	d01d      	beq.n	6f8a <_write+0x52>
    6f4e:	68fb      	ldr	r3, [r7, #12]
    6f50:	2b02      	cmp	r3, #2
    6f52:	d01a      	beq.n	6f8a <_write+0x52>
    6f54:	68fb      	ldr	r3, [r7, #12]
    6f56:	2b03      	cmp	r3, #3
    6f58:	d017      	beq.n	6f8a <_write+0x52>
		return -1;
    6f5a:	2301      	movs	r3, #1
    6f5c:	425b      	negs	r3, r3
    6f5e:	e018      	b.n	6f92 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6f60:	4b0e      	ldr	r3, [pc, #56]	; (6f9c <_write+0x64>)
    6f62:	681a      	ldr	r2, [r3, #0]
    6f64:	4b0e      	ldr	r3, [pc, #56]	; (6fa0 <_write+0x68>)
    6f66:	6818      	ldr	r0, [r3, #0]
    6f68:	68bb      	ldr	r3, [r7, #8]
    6f6a:	1c59      	adds	r1, r3, #1
    6f6c:	60b9      	str	r1, [r7, #8]
    6f6e:	781b      	ldrb	r3, [r3, #0]
    6f70:	0019      	movs	r1, r3
    6f72:	4790      	blx	r2
    6f74:	1e03      	subs	r3, r0, #0
    6f76:	da02      	bge.n	6f7e <_write+0x46>
			return -1;
    6f78:	2301      	movs	r3, #1
    6f7a:	425b      	negs	r3, r3
    6f7c:	e009      	b.n	6f92 <_write+0x5a>
		}
		++nChars;
    6f7e:	697b      	ldr	r3, [r7, #20]
    6f80:	3301      	adds	r3, #1
    6f82:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    6f84:	687b      	ldr	r3, [r7, #4]
    6f86:	3b01      	subs	r3, #1
    6f88:	607b      	str	r3, [r7, #4]
    6f8a:	687b      	ldr	r3, [r7, #4]
    6f8c:	2b00      	cmp	r3, #0
    6f8e:	d1e7      	bne.n	6f60 <_write+0x28>
	}
	return nChars;
    6f90:	697b      	ldr	r3, [r7, #20]
}
    6f92:	0018      	movs	r0, r3
    6f94:	46bd      	mov	sp, r7
    6f96:	b006      	add	sp, #24
    6f98:	bd80      	pop	{r7, pc}
    6f9a:	46c0      	nop			; (mov r8, r8)
    6f9c:	20000a24 	.word	0x20000a24
    6fa0:	20000a28 	.word	0x20000a28

00006fa4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6fa4:	b580      	push	{r7, lr}
    6fa6:	b084      	sub	sp, #16
    6fa8:	af00      	add	r7, sp, #0
    6faa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6fac:	4b0a      	ldr	r3, [pc, #40]	; (6fd8 <_sbrk+0x34>)
    6fae:	681b      	ldr	r3, [r3, #0]
    6fb0:	2b00      	cmp	r3, #0
    6fb2:	d102      	bne.n	6fba <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6fb4:	4b08      	ldr	r3, [pc, #32]	; (6fd8 <_sbrk+0x34>)
    6fb6:	4a09      	ldr	r2, [pc, #36]	; (6fdc <_sbrk+0x38>)
    6fb8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6fba:	4b07      	ldr	r3, [pc, #28]	; (6fd8 <_sbrk+0x34>)
    6fbc:	681b      	ldr	r3, [r3, #0]
    6fbe:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6fc0:	4b05      	ldr	r3, [pc, #20]	; (6fd8 <_sbrk+0x34>)
    6fc2:	681a      	ldr	r2, [r3, #0]
    6fc4:	687b      	ldr	r3, [r7, #4]
    6fc6:	18d2      	adds	r2, r2, r3
    6fc8:	4b03      	ldr	r3, [pc, #12]	; (6fd8 <_sbrk+0x34>)
    6fca:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6fcc:	68fb      	ldr	r3, [r7, #12]
}
    6fce:	0018      	movs	r0, r3
    6fd0:	46bd      	mov	sp, r7
    6fd2:	b004      	add	sp, #16
    6fd4:	bd80      	pop	{r7, pc}
    6fd6:	46c0      	nop			; (mov r8, r8)
    6fd8:	200001a8 	.word	0x200001a8
    6fdc:	20002dc8 	.word	0x20002dc8

00006fe0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6fe0:	b580      	push	{r7, lr}
    6fe2:	b082      	sub	sp, #8
    6fe4:	af00      	add	r7, sp, #0
    6fe6:	6078      	str	r0, [r7, #4]
	return -1;
    6fe8:	2301      	movs	r3, #1
    6fea:	425b      	negs	r3, r3
}
    6fec:	0018      	movs	r0, r3
    6fee:	46bd      	mov	sp, r7
    6ff0:	b002      	add	sp, #8
    6ff2:	bd80      	pop	{r7, pc}

00006ff4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6ff4:	b580      	push	{r7, lr}
    6ff6:	b082      	sub	sp, #8
    6ff8:	af00      	add	r7, sp, #0
    6ffa:	6078      	str	r0, [r7, #4]
    6ffc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6ffe:	683b      	ldr	r3, [r7, #0]
    7000:	2280      	movs	r2, #128	; 0x80
    7002:	0192      	lsls	r2, r2, #6
    7004:	605a      	str	r2, [r3, #4]

	return 0;
    7006:	2300      	movs	r3, #0
}
    7008:	0018      	movs	r0, r3
    700a:	46bd      	mov	sp, r7
    700c:	b002      	add	sp, #8
    700e:	bd80      	pop	{r7, pc}

00007010 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    7010:	b580      	push	{r7, lr}
    7012:	b084      	sub	sp, #16
    7014:	af00      	add	r7, sp, #0
    7016:	60f8      	str	r0, [r7, #12]
    7018:	60b9      	str	r1, [r7, #8]
    701a:	607a      	str	r2, [r7, #4]
	return 0;
    701c:	2300      	movs	r3, #0
}
    701e:	0018      	movs	r0, r3
    7020:	46bd      	mov	sp, r7
    7022:	b004      	add	sp, #16
    7024:	bd80      	pop	{r7, pc}

00007026 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    7026:	b580      	push	{r7, lr}
    7028:	b082      	sub	sp, #8
    702a:	af00      	add	r7, sp, #0
    702c:	6078      	str	r0, [r7, #4]
	time->second = 0;
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	2200      	movs	r2, #0
    7032:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    7034:	687b      	ldr	r3, [r7, #4]
    7036:	2200      	movs	r2, #0
    7038:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    703a:	687b      	ldr	r3, [r7, #4]
    703c:	2200      	movs	r2, #0
    703e:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	2200      	movs	r2, #0
    7044:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    7046:	687b      	ldr	r3, [r7, #4]
    7048:	2201      	movs	r2, #1
    704a:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    704c:	687b      	ldr	r3, [r7, #4]
    704e:	2201      	movs	r2, #1
    7050:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    7052:	687b      	ldr	r3, [r7, #4]
    7054:	22fa      	movs	r2, #250	; 0xfa
    7056:	00d2      	lsls	r2, r2, #3
    7058:	80da      	strh	r2, [r3, #6]
}
    705a:	46c0      	nop			; (mov r8, r8)
    705c:	46bd      	mov	sp, r7
    705e:	b002      	add	sp, #8
    7060:	bd80      	pop	{r7, pc}
	...

00007064 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    7064:	b580      	push	{r7, lr}
    7066:	b086      	sub	sp, #24
    7068:	af00      	add	r7, sp, #0
    706a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    706c:	230c      	movs	r3, #12
    706e:	18fb      	adds	r3, r7, r3
    7070:	0018      	movs	r0, r3
    7072:	4b23      	ldr	r3, [pc, #140]	; (7100 <rtc_calendar_get_config_defaults+0x9c>)
    7074:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	22a0      	movs	r2, #160	; 0xa0
    707a:	0112      	lsls	r2, r2, #4
    707c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    707e:	687b      	ldr	r3, [r7, #4]
    7080:	2200      	movs	r2, #0
    7082:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    7084:	687b      	ldr	r3, [r7, #4]
    7086:	2200      	movs	r2, #0
    7088:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    708a:	687b      	ldr	r3, [r7, #4]
    708c:	2200      	movs	r2, #0
    708e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    7090:	687b      	ldr	r3, [r7, #4]
    7092:	22fa      	movs	r2, #250	; 0xfa
    7094:	00d2      	lsls	r2, r2, #3
    7096:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    7098:	2317      	movs	r3, #23
    709a:	18fb      	adds	r3, r7, r3
    709c:	2200      	movs	r2, #0
    709e:	701a      	strb	r2, [r3, #0]
    70a0:	e025      	b.n	70ee <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    70a2:	2317      	movs	r3, #23
    70a4:	18fb      	adds	r3, r7, r3
    70a6:	781a      	ldrb	r2, [r3, #0]
    70a8:	6879      	ldr	r1, [r7, #4]
    70aa:	2008      	movs	r0, #8
    70ac:	0013      	movs	r3, r2
    70ae:	009b      	lsls	r3, r3, #2
    70b0:	189b      	adds	r3, r3, r2
    70b2:	005b      	lsls	r3, r3, #1
    70b4:	18cb      	adds	r3, r1, r3
    70b6:	181a      	adds	r2, r3, r0
    70b8:	230c      	movs	r3, #12
    70ba:	18fb      	adds	r3, r7, r3
    70bc:	0010      	movs	r0, r2
    70be:	0019      	movs	r1, r3
    70c0:	2308      	movs	r3, #8
    70c2:	001a      	movs	r2, r3
    70c4:	4b0f      	ldr	r3, [pc, #60]	; (7104 <rtc_calendar_get_config_defaults+0xa0>)
    70c6:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    70c8:	2317      	movs	r3, #23
    70ca:	18fb      	adds	r3, r7, r3
    70cc:	781a      	ldrb	r2, [r3, #0]
    70ce:	6879      	ldr	r1, [r7, #4]
    70d0:	0013      	movs	r3, r2
    70d2:	009b      	lsls	r3, r3, #2
    70d4:	189b      	adds	r3, r3, r2
    70d6:	005b      	lsls	r3, r3, #1
    70d8:	18cb      	adds	r3, r1, r3
    70da:	3310      	adds	r3, #16
    70dc:	2206      	movs	r2, #6
    70de:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    70e0:	2317      	movs	r3, #23
    70e2:	18fb      	adds	r3, r7, r3
    70e4:	781a      	ldrb	r2, [r3, #0]
    70e6:	2317      	movs	r3, #23
    70e8:	18fb      	adds	r3, r7, r3
    70ea:	3201      	adds	r2, #1
    70ec:	701a      	strb	r2, [r3, #0]
    70ee:	2317      	movs	r3, #23
    70f0:	18fb      	adds	r3, r7, r3
    70f2:	781b      	ldrb	r3, [r3, #0]
    70f4:	2b00      	cmp	r3, #0
    70f6:	d0d4      	beq.n	70a2 <rtc_calendar_get_config_defaults+0x3e>
	}
}
    70f8:	46c0      	nop			; (mov r8, r8)
    70fa:	46bd      	mov	sp, r7
    70fc:	b006      	add	sp, #24
    70fe:	bd80      	pop	{r7, pc}
    7100:	00007027 	.word	0x00007027
    7104:	0000b861 	.word	0x0000b861

00007108 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    7108:	b580      	push	{r7, lr}
    710a:	b088      	sub	sp, #32
    710c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    710e:	230c      	movs	r3, #12
    7110:	18fb      	adds	r3, r7, r3
    7112:	0018      	movs	r0, r3
    7114:	4b1a      	ldr	r3, [pc, #104]	; (7180 <configure_rtc_calendar+0x78>)
    7116:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    7118:	1d3b      	adds	r3, r7, #4
    711a:	0018      	movs	r0, r3
    711c:	4b19      	ldr	r3, [pc, #100]	; (7184 <configure_rtc_calendar+0x7c>)
    711e:	4798      	blx	r3
	init_time.year   = 2014;
    7120:	1d3b      	adds	r3, r7, #4
    7122:	4a19      	ldr	r2, [pc, #100]	; (7188 <configure_rtc_calendar+0x80>)
    7124:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    7126:	1d3b      	adds	r3, r7, #4
    7128:	2201      	movs	r2, #1
    712a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    712c:	1d3b      	adds	r3, r7, #4
    712e:	2201      	movs	r2, #1
    7130:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    7132:	1d3b      	adds	r3, r7, #4
    7134:	2200      	movs	r2, #0
    7136:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    7138:	1d3b      	adds	r3, r7, #4
    713a:	2200      	movs	r2, #0
    713c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    713e:	1d3b      	adds	r3, r7, #4
    7140:	2204      	movs	r2, #4
    7142:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    7144:	230c      	movs	r3, #12
    7146:	18fb      	adds	r3, r7, r3
    7148:	2201      	movs	r2, #1
    714a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    714c:	230c      	movs	r3, #12
    714e:	18fb      	adds	r3, r7, r3
    7150:	1d3a      	adds	r2, r7, #4
    7152:	3308      	adds	r3, #8
    7154:	ca03      	ldmia	r2!, {r0, r1}
    7156:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    7158:	230c      	movs	r3, #12
    715a:	18fb      	adds	r3, r7, r3
    715c:	2206      	movs	r2, #6
    715e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    7160:	230c      	movs	r3, #12
    7162:	18fa      	adds	r2, r7, r3
    7164:	4909      	ldr	r1, [pc, #36]	; (718c <configure_rtc_calendar+0x84>)
    7166:	4b0a      	ldr	r3, [pc, #40]	; (7190 <configure_rtc_calendar+0x88>)
    7168:	0018      	movs	r0, r3
    716a:	4b0a      	ldr	r3, [pc, #40]	; (7194 <configure_rtc_calendar+0x8c>)
    716c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    716e:	4b08      	ldr	r3, [pc, #32]	; (7190 <configure_rtc_calendar+0x88>)
    7170:	0018      	movs	r0, r3
    7172:	4b09      	ldr	r3, [pc, #36]	; (7198 <configure_rtc_calendar+0x90>)
    7174:	4798      	blx	r3
}
    7176:	46c0      	nop			; (mov r8, r8)
    7178:	46bd      	mov	sp, r7
    717a:	b008      	add	sp, #32
    717c:	bd80      	pop	{r7, pc}
    717e:	46c0      	nop			; (mov r8, r8)
    7180:	00007065 	.word	0x00007065
    7184:	00007027 	.word	0x00007027
    7188:	000007de 	.word	0x000007de
    718c:	40001400 	.word	0x40001400
    7190:	20000a2c 	.word	0x20000a2c
    7194:	0000384d 	.word	0x0000384d
    7198:	0000359d 	.word	0x0000359d

0000719c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    719c:	b590      	push	{r4, r7, lr}
    719e:	b085      	sub	sp, #20
    71a0:	af00      	add	r7, sp, #0
    71a2:	0002      	movs	r2, r0
    71a4:	1dfb      	adds	r3, r7, #7
    71a6:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    71a8:	4b1a      	ldr	r3, [pc, #104]	; (7214 <disk_initialize+0x78>)
    71aa:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    71ac:	1dfb      	adds	r3, r7, #7
    71ae:	781b      	ldrb	r3, [r3, #0]
    71b0:	2b01      	cmp	r3, #1
    71b2:	d901      	bls.n	71b8 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    71b4:	2301      	movs	r3, #1
    71b6:	e029      	b.n	720c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    71b8:	2300      	movs	r3, #0
    71ba:	60fb      	str	r3, [r7, #12]
    71bc:	e010      	b.n	71e0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    71be:	230b      	movs	r3, #11
    71c0:	18fc      	adds	r4, r7, r3
    71c2:	1dfb      	adds	r3, r7, #7
    71c4:	781b      	ldrb	r3, [r3, #0]
    71c6:	0018      	movs	r0, r3
    71c8:	4b13      	ldr	r3, [pc, #76]	; (7218 <disk_initialize+0x7c>)
    71ca:	4798      	blx	r3
    71cc:	0003      	movs	r3, r0
    71ce:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    71d0:	230b      	movs	r3, #11
    71d2:	18fb      	adds	r3, r7, r3
    71d4:	781b      	ldrb	r3, [r3, #0]
    71d6:	2b03      	cmp	r3, #3
    71d8:	d106      	bne.n	71e8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    71da:	68fb      	ldr	r3, [r7, #12]
    71dc:	3301      	adds	r3, #1
    71de:	60fb      	str	r3, [r7, #12]
    71e0:	68fb      	ldr	r3, [r7, #12]
    71e2:	2b01      	cmp	r3, #1
    71e4:	ddeb      	ble.n	71be <disk_initialize+0x22>
    71e6:	e000      	b.n	71ea <disk_initialize+0x4e>
			break;
    71e8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    71ea:	230b      	movs	r3, #11
    71ec:	18fb      	adds	r3, r7, r3
    71ee:	781b      	ldrb	r3, [r3, #0]
    71f0:	2b00      	cmp	r3, #0
    71f2:	d001      	beq.n	71f8 <disk_initialize+0x5c>
		return STA_NOINIT;
    71f4:	2301      	movs	r3, #1
    71f6:	e009      	b.n	720c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    71f8:	1dfb      	adds	r3, r7, #7
    71fa:	781b      	ldrb	r3, [r3, #0]
    71fc:	0018      	movs	r0, r3
    71fe:	4b07      	ldr	r3, [pc, #28]	; (721c <disk_initialize+0x80>)
    7200:	4798      	blx	r3
    7202:	1e03      	subs	r3, r0, #0
    7204:	d001      	beq.n	720a <disk_initialize+0x6e>
		return STA_PROTECT;
    7206:	2304      	movs	r3, #4
    7208:	e000      	b.n	720c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    720a:	2300      	movs	r3, #0
}
    720c:	0018      	movs	r0, r3
    720e:	46bd      	mov	sp, r7
    7210:	b005      	add	sp, #20
    7212:	bd90      	pop	{r4, r7, pc}
    7214:	00007109 	.word	0x00007109
    7218:	0000323d 	.word	0x0000323d
    721c:	000032f5 	.word	0x000032f5

00007220 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    7220:	b580      	push	{r7, lr}
    7222:	b082      	sub	sp, #8
    7224:	af00      	add	r7, sp, #0
    7226:	0002      	movs	r2, r0
    7228:	1dfb      	adds	r3, r7, #7
    722a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    722c:	1dfb      	adds	r3, r7, #7
    722e:	781b      	ldrb	r3, [r3, #0]
    7230:	0018      	movs	r0, r3
    7232:	4b08      	ldr	r3, [pc, #32]	; (7254 <disk_status+0x34>)
    7234:	4798      	blx	r3
    7236:	1e03      	subs	r3, r0, #0
    7238:	d002      	beq.n	7240 <disk_status+0x20>
    723a:	2b02      	cmp	r3, #2
    723c:	d002      	beq.n	7244 <disk_status+0x24>
    723e:	e003      	b.n	7248 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    7240:	2300      	movs	r3, #0
    7242:	e002      	b.n	724a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    7244:	2303      	movs	r3, #3
    7246:	e000      	b.n	724a <disk_status+0x2a>
	default:
		return STA_NOINIT;
    7248:	2301      	movs	r3, #1
	}
}
    724a:	0018      	movs	r0, r3
    724c:	46bd      	mov	sp, r7
    724e:	b002      	add	sp, #8
    7250:	bd80      	pop	{r7, pc}
    7252:	46c0      	nop			; (mov r8, r8)
    7254:	0000323d 	.word	0x0000323d

00007258 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    7258:	b590      	push	{r4, r7, lr}
    725a:	b089      	sub	sp, #36	; 0x24
    725c:	af00      	add	r7, sp, #0
    725e:	60b9      	str	r1, [r7, #8]
    7260:	607a      	str	r2, [r7, #4]
    7262:	0019      	movs	r1, r3
    7264:	230f      	movs	r3, #15
    7266:	18fb      	adds	r3, r7, r3
    7268:	1c02      	adds	r2, r0, #0
    726a:	701a      	strb	r2, [r3, #0]
    726c:	230e      	movs	r3, #14
    726e:	18fb      	adds	r3, r7, r3
    7270:	1c0a      	adds	r2, r1, #0
    7272:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    7274:	231b      	movs	r3, #27
    7276:	18fc      	adds	r4, r7, r3
    7278:	230f      	movs	r3, #15
    727a:	18fb      	adds	r3, r7, r3
    727c:	781b      	ldrb	r3, [r3, #0]
    727e:	0018      	movs	r0, r3
    7280:	4b28      	ldr	r3, [pc, #160]	; (7324 <disk_read+0xcc>)
    7282:	4798      	blx	r3
    7284:	0003      	movs	r3, r0
    7286:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    7288:	231b      	movs	r3, #27
    728a:	18fb      	adds	r3, r7, r3
    728c:	781b      	ldrb	r3, [r3, #0]
    728e:	2b00      	cmp	r3, #0
    7290:	d101      	bne.n	7296 <disk_read+0x3e>
		return RES_ERROR;
    7292:	2301      	movs	r3, #1
    7294:	e042      	b.n	731c <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    7296:	2314      	movs	r3, #20
    7298:	18fa      	adds	r2, r7, r3
    729a:	230f      	movs	r3, #15
    729c:	18fb      	adds	r3, r7, r3
    729e:	781b      	ldrb	r3, [r3, #0]
    72a0:	0011      	movs	r1, r2
    72a2:	0018      	movs	r0, r3
    72a4:	4b20      	ldr	r3, [pc, #128]	; (7328 <disk_read+0xd0>)
    72a6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    72a8:	230e      	movs	r3, #14
    72aa:	18fb      	adds	r3, r7, r3
    72ac:	781b      	ldrb	r3, [r3, #0]
    72ae:	221b      	movs	r2, #27
    72b0:	18ba      	adds	r2, r7, r2
    72b2:	7812      	ldrb	r2, [r2, #0]
    72b4:	4353      	muls	r3, r2
    72b6:	001a      	movs	r2, r3
    72b8:	687b      	ldr	r3, [r7, #4]
    72ba:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    72bc:	697b      	ldr	r3, [r7, #20]
    72be:	3301      	adds	r3, #1
    72c0:	211b      	movs	r1, #27
    72c2:	1879      	adds	r1, r7, r1
    72c4:	7809      	ldrb	r1, [r1, #0]
    72c6:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    72c8:	429a      	cmp	r2, r3
    72ca:	d901      	bls.n	72d0 <disk_read+0x78>
		return RES_PARERR;
    72cc:	2304      	movs	r3, #4
    72ce:	e025      	b.n	731c <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    72d0:	2300      	movs	r3, #0
    72d2:	61fb      	str	r3, [r7, #28]
    72d4:	e01b      	b.n	730e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    72d6:	231b      	movs	r3, #27
    72d8:	18fb      	adds	r3, r7, r3
    72da:	781b      	ldrb	r3, [r3, #0]
    72dc:	69fa      	ldr	r2, [r7, #28]
    72de:	435a      	muls	r2, r3
    72e0:	687b      	ldr	r3, [r7, #4]
    72e2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    72e4:	231b      	movs	r3, #27
    72e6:	18fb      	adds	r3, r7, r3
    72e8:	781b      	ldrb	r3, [r3, #0]
    72ea:	69fa      	ldr	r2, [r7, #28]
    72ec:	4353      	muls	r3, r2
    72ee:	025b      	lsls	r3, r3, #9
    72f0:	68ba      	ldr	r2, [r7, #8]
    72f2:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    72f4:	230f      	movs	r3, #15
    72f6:	18fb      	adds	r3, r7, r3
    72f8:	781b      	ldrb	r3, [r3, #0]
    72fa:	0018      	movs	r0, r3
    72fc:	4b0b      	ldr	r3, [pc, #44]	; (732c <disk_read+0xd4>)
    72fe:	4798      	blx	r3
    7300:	1e03      	subs	r3, r0, #0
    7302:	d001      	beq.n	7308 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    7304:	2301      	movs	r3, #1
    7306:	e009      	b.n	731c <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    7308:	69fb      	ldr	r3, [r7, #28]
    730a:	3301      	adds	r3, #1
    730c:	61fb      	str	r3, [r7, #28]
    730e:	230e      	movs	r3, #14
    7310:	18fb      	adds	r3, r7, r3
    7312:	781a      	ldrb	r2, [r3, #0]
    7314:	69fb      	ldr	r3, [r7, #28]
    7316:	429a      	cmp	r2, r3
    7318:	d8dd      	bhi.n	72d6 <disk_read+0x7e>
		}
	}

	return RES_OK;
    731a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    731c:	0018      	movs	r0, r3
    731e:	46bd      	mov	sp, r7
    7320:	b009      	add	sp, #36	; 0x24
    7322:	bd90      	pop	{r4, r7, pc}
    7324:	000032c9 	.word	0x000032c9
    7328:	0000327d 	.word	0x0000327d
    732c:	0000333d 	.word	0x0000333d

00007330 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    7330:	b590      	push	{r4, r7, lr}
    7332:	b089      	sub	sp, #36	; 0x24
    7334:	af00      	add	r7, sp, #0
    7336:	60b9      	str	r1, [r7, #8]
    7338:	607a      	str	r2, [r7, #4]
    733a:	0019      	movs	r1, r3
    733c:	230f      	movs	r3, #15
    733e:	18fb      	adds	r3, r7, r3
    7340:	1c02      	adds	r2, r0, #0
    7342:	701a      	strb	r2, [r3, #0]
    7344:	230e      	movs	r3, #14
    7346:	18fb      	adds	r3, r7, r3
    7348:	1c0a      	adds	r2, r1, #0
    734a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    734c:	231b      	movs	r3, #27
    734e:	18fc      	adds	r4, r7, r3
    7350:	230f      	movs	r3, #15
    7352:	18fb      	adds	r3, r7, r3
    7354:	781b      	ldrb	r3, [r3, #0]
    7356:	0018      	movs	r0, r3
    7358:	4b28      	ldr	r3, [pc, #160]	; (73fc <disk_write+0xcc>)
    735a:	4798      	blx	r3
    735c:	0003      	movs	r3, r0
    735e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    7360:	231b      	movs	r3, #27
    7362:	18fb      	adds	r3, r7, r3
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	2b00      	cmp	r3, #0
    7368:	d101      	bne.n	736e <disk_write+0x3e>
		return RES_ERROR;
    736a:	2301      	movs	r3, #1
    736c:	e042      	b.n	73f4 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    736e:	2314      	movs	r3, #20
    7370:	18fa      	adds	r2, r7, r3
    7372:	230f      	movs	r3, #15
    7374:	18fb      	adds	r3, r7, r3
    7376:	781b      	ldrb	r3, [r3, #0]
    7378:	0011      	movs	r1, r2
    737a:	0018      	movs	r0, r3
    737c:	4b20      	ldr	r3, [pc, #128]	; (7400 <disk_write+0xd0>)
    737e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    7380:	230e      	movs	r3, #14
    7382:	18fb      	adds	r3, r7, r3
    7384:	781b      	ldrb	r3, [r3, #0]
    7386:	221b      	movs	r2, #27
    7388:	18ba      	adds	r2, r7, r2
    738a:	7812      	ldrb	r2, [r2, #0]
    738c:	4353      	muls	r3, r2
    738e:	001a      	movs	r2, r3
    7390:	687b      	ldr	r3, [r7, #4]
    7392:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    7394:	697b      	ldr	r3, [r7, #20]
    7396:	3301      	adds	r3, #1
    7398:	211b      	movs	r1, #27
    739a:	1879      	adds	r1, r7, r1
    739c:	7809      	ldrb	r1, [r1, #0]
    739e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    73a0:	429a      	cmp	r2, r3
    73a2:	d901      	bls.n	73a8 <disk_write+0x78>
		return RES_PARERR;
    73a4:	2304      	movs	r3, #4
    73a6:	e025      	b.n	73f4 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    73a8:	2300      	movs	r3, #0
    73aa:	61fb      	str	r3, [r7, #28]
    73ac:	e01b      	b.n	73e6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    73ae:	231b      	movs	r3, #27
    73b0:	18fb      	adds	r3, r7, r3
    73b2:	781b      	ldrb	r3, [r3, #0]
    73b4:	69fa      	ldr	r2, [r7, #28]
    73b6:	435a      	muls	r2, r3
    73b8:	687b      	ldr	r3, [r7, #4]
    73ba:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    73bc:	231b      	movs	r3, #27
    73be:	18fb      	adds	r3, r7, r3
    73c0:	781b      	ldrb	r3, [r3, #0]
    73c2:	69fa      	ldr	r2, [r7, #28]
    73c4:	4353      	muls	r3, r2
    73c6:	025b      	lsls	r3, r3, #9
    73c8:	68ba      	ldr	r2, [r7, #8]
    73ca:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    73cc:	230f      	movs	r3, #15
    73ce:	18fb      	adds	r3, r7, r3
    73d0:	781b      	ldrb	r3, [r3, #0]
    73d2:	0018      	movs	r0, r3
    73d4:	4b0b      	ldr	r3, [pc, #44]	; (7404 <disk_write+0xd4>)
    73d6:	4798      	blx	r3
    73d8:	1e03      	subs	r3, r0, #0
    73da:	d001      	beq.n	73e0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    73dc:	2301      	movs	r3, #1
    73de:	e009      	b.n	73f4 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    73e0:	69fb      	ldr	r3, [r7, #28]
    73e2:	3301      	adds	r3, #1
    73e4:	61fb      	str	r3, [r7, #28]
    73e6:	230e      	movs	r3, #14
    73e8:	18fb      	adds	r3, r7, r3
    73ea:	781a      	ldrb	r2, [r3, #0]
    73ec:	69fb      	ldr	r3, [r7, #28]
    73ee:	429a      	cmp	r2, r3
    73f0:	d8dd      	bhi.n	73ae <disk_write+0x7e>
		}
	}

	return RES_OK;
    73f2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    73f4:	0018      	movs	r0, r3
    73f6:	46bd      	mov	sp, r7
    73f8:	b009      	add	sp, #36	; 0x24
    73fa:	bd90      	pop	{r4, r7, pc}
    73fc:	000032c9 	.word	0x000032c9
    7400:	0000327d 	.word	0x0000327d
    7404:	00003391 	.word	0x00003391

00007408 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    7408:	b590      	push	{r4, r7, lr}
    740a:	b085      	sub	sp, #20
    740c:	af00      	add	r7, sp, #0
    740e:	603a      	str	r2, [r7, #0]
    7410:	1dfb      	adds	r3, r7, #7
    7412:	1c02      	adds	r2, r0, #0
    7414:	701a      	strb	r2, [r3, #0]
    7416:	1dbb      	adds	r3, r7, #6
    7418:	1c0a      	adds	r2, r1, #0
    741a:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    741c:	230f      	movs	r3, #15
    741e:	18fb      	adds	r3, r7, r3
    7420:	2204      	movs	r2, #4
    7422:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    7424:	1dbb      	adds	r3, r7, #6
    7426:	781b      	ldrb	r3, [r3, #0]
    7428:	2b01      	cmp	r3, #1
    742a:	d00f      	beq.n	744c <disk_ioctl+0x44>
    742c:	dc02      	bgt.n	7434 <disk_ioctl+0x2c>
    742e:	2b00      	cmp	r3, #0
    7430:	d044      	beq.n	74bc <disk_ioctl+0xb4>
    7432:	e054      	b.n	74de <disk_ioctl+0xd6>
    7434:	2b02      	cmp	r3, #2
    7436:	d01a      	beq.n	746e <disk_ioctl+0x66>
    7438:	2b03      	cmp	r3, #3
    743a:	d150      	bne.n	74de <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    743c:	683b      	ldr	r3, [r7, #0]
    743e:	2201      	movs	r2, #1
    7440:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    7442:	230f      	movs	r3, #15
    7444:	18fb      	adds	r3, r7, r3
    7446:	2200      	movs	r2, #0
    7448:	701a      	strb	r2, [r3, #0]
		break;
    744a:	e04c      	b.n	74e6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    744c:	2308      	movs	r3, #8
    744e:	18fa      	adds	r2, r7, r3
    7450:	1dfb      	adds	r3, r7, #7
    7452:	781b      	ldrb	r3, [r3, #0]
    7454:	0011      	movs	r1, r2
    7456:	0018      	movs	r0, r3
    7458:	4b26      	ldr	r3, [pc, #152]	; (74f4 <disk_ioctl+0xec>)
    745a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    745c:	68bb      	ldr	r3, [r7, #8]
    745e:	1c5a      	adds	r2, r3, #1
    7460:	683b      	ldr	r3, [r7, #0]
    7462:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    7464:	230f      	movs	r3, #15
    7466:	18fb      	adds	r3, r7, r3
    7468:	2200      	movs	r2, #0
    746a:	701a      	strb	r2, [r3, #0]
	}
	break;
    746c:	e03b      	b.n	74e6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    746e:	230e      	movs	r3, #14
    7470:	18fc      	adds	r4, r7, r3
    7472:	1dfb      	adds	r3, r7, #7
    7474:	781b      	ldrb	r3, [r3, #0]
    7476:	0018      	movs	r0, r3
    7478:	4b1f      	ldr	r3, [pc, #124]	; (74f8 <disk_ioctl+0xf0>)
    747a:	4798      	blx	r3
    747c:	0003      	movs	r3, r0
    747e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    7480:	230e      	movs	r3, #14
    7482:	18fb      	adds	r3, r7, r3
    7484:	781b      	ldrb	r3, [r3, #0]
    7486:	2b01      	cmp	r3, #1
    7488:	d010      	beq.n	74ac <disk_ioctl+0xa4>
    748a:	230e      	movs	r3, #14
    748c:	18fb      	adds	r3, r7, r3
    748e:	781b      	ldrb	r3, [r3, #0]
    7490:	2b02      	cmp	r3, #2
    7492:	d00b      	beq.n	74ac <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    7494:	230e      	movs	r3, #14
    7496:	18fb      	adds	r3, r7, r3
    7498:	781b      	ldrb	r3, [r3, #0]
    749a:	2b04      	cmp	r3, #4
    749c:	d006      	beq.n	74ac <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    749e:	230e      	movs	r3, #14
    74a0:	18fb      	adds	r3, r7, r3
    74a2:	781b      	ldrb	r3, [r3, #0]
    74a4:	2b08      	cmp	r3, #8
    74a6:	d001      	beq.n	74ac <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    74a8:	2301      	movs	r3, #1
    74aa:	e01f      	b.n	74ec <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    74ac:	683b      	ldr	r3, [r7, #0]
    74ae:	2200      	movs	r2, #0
    74b0:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    74b2:	230f      	movs	r3, #15
    74b4:	18fb      	adds	r3, r7, r3
    74b6:	2200      	movs	r2, #0
    74b8:	701a      	strb	r2, [r3, #0]
	}
	break;
    74ba:	e014      	b.n	74e6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    74bc:	1dfb      	adds	r3, r7, #7
    74be:	781b      	ldrb	r3, [r3, #0]
    74c0:	0018      	movs	r0, r3
    74c2:	4b0e      	ldr	r3, [pc, #56]	; (74fc <disk_ioctl+0xf4>)
    74c4:	4798      	blx	r3
    74c6:	1e03      	subs	r3, r0, #0
    74c8:	d104      	bne.n	74d4 <disk_ioctl+0xcc>
			res = RES_OK;
    74ca:	230f      	movs	r3, #15
    74cc:	18fb      	adds	r3, r7, r3
    74ce:	2200      	movs	r2, #0
    74d0:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    74d2:	e008      	b.n	74e6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
    74d4:	230f      	movs	r3, #15
    74d6:	18fb      	adds	r3, r7, r3
    74d8:	2203      	movs	r2, #3
    74da:	701a      	strb	r2, [r3, #0]
		break;
    74dc:	e003      	b.n	74e6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    74de:	230f      	movs	r3, #15
    74e0:	18fb      	adds	r3, r7, r3
    74e2:	2204      	movs	r2, #4
    74e4:	701a      	strb	r2, [r3, #0]
	}

	return res;
    74e6:	230f      	movs	r3, #15
    74e8:	18fb      	adds	r3, r7, r3
    74ea:	781b      	ldrb	r3, [r3, #0]
}
    74ec:	0018      	movs	r0, r3
    74ee:	46bd      	mov	sp, r7
    74f0:	b005      	add	sp, #20
    74f2:	bd90      	pop	{r4, r7, pc}
    74f4:	0000327d 	.word	0x0000327d
    74f8:	000032c9 	.word	0x000032c9
    74fc:	0000323d 	.word	0x0000323d

00007500 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    7500:	b580      	push	{r7, lr}
    7502:	b084      	sub	sp, #16
    7504:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    7506:	1d3a      	adds	r2, r7, #4
    7508:	4b12      	ldr	r3, [pc, #72]	; (7554 <get_fattime+0x54>)
    750a:	0011      	movs	r1, r2
    750c:	0018      	movs	r0, r3
    750e:	4b12      	ldr	r3, [pc, #72]	; (7558 <get_fattime+0x58>)
    7510:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    7512:	1d3b      	adds	r3, r7, #4
    7514:	88db      	ldrh	r3, [r3, #6]
    7516:	4a11      	ldr	r2, [pc, #68]	; (755c <get_fattime+0x5c>)
    7518:	4694      	mov	ip, r2
    751a:	4463      	add	r3, ip
    751c:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    751e:	1d3b      	adds	r3, r7, #4
    7520:	795b      	ldrb	r3, [r3, #5]
    7522:	055b      	lsls	r3, r3, #21
    7524:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    7526:	1d3b      	adds	r3, r7, #4
    7528:	791b      	ldrb	r3, [r3, #4]
    752a:	041b      	lsls	r3, r3, #16
    752c:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    752e:	1d3b      	adds	r3, r7, #4
    7530:	789b      	ldrb	r3, [r3, #2]
    7532:	02db      	lsls	r3, r3, #11
    7534:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    7536:	1d3b      	adds	r3, r7, #4
    7538:	785b      	ldrb	r3, [r3, #1]
    753a:	015b      	lsls	r3, r3, #5
    753c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    753e:	1d3a      	adds	r2, r7, #4
    7540:	7812      	ldrb	r2, [r2, #0]
    7542:	0852      	lsrs	r2, r2, #1
    7544:	b2d2      	uxtb	r2, r2
    7546:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    7548:	60fb      	str	r3, [r7, #12]

	return ul_time;
    754a:	68fb      	ldr	r3, [r7, #12]
}
    754c:	0018      	movs	r0, r3
    754e:	46bd      	mov	sp, r7
    7550:	b004      	add	sp, #16
    7552:	bd80      	pop	{r7, pc}
    7554:	20000a2c 	.word	0x20000a2c
    7558:	000038e1 	.word	0x000038e1
    755c:	fffff844 	.word	0xfffff844

00007560 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    7560:	b580      	push	{r7, lr}
    7562:	b086      	sub	sp, #24
    7564:	af00      	add	r7, sp, #0
    7566:	60f8      	str	r0, [r7, #12]
    7568:	60b9      	str	r1, [r7, #8]
    756a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    756c:	68fb      	ldr	r3, [r7, #12]
    756e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    7570:	68bb      	ldr	r3, [r7, #8]
    7572:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    7574:	e007      	b.n	7586 <mem_cpy+0x26>
		*d++ = *s++;
    7576:	697b      	ldr	r3, [r7, #20]
    7578:	1c5a      	adds	r2, r3, #1
    757a:	617a      	str	r2, [r7, #20]
    757c:	693a      	ldr	r2, [r7, #16]
    757e:	1c51      	adds	r1, r2, #1
    7580:	6139      	str	r1, [r7, #16]
    7582:	7812      	ldrb	r2, [r2, #0]
    7584:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    7586:	687b      	ldr	r3, [r7, #4]
    7588:	1e5a      	subs	r2, r3, #1
    758a:	607a      	str	r2, [r7, #4]
    758c:	2b00      	cmp	r3, #0
    758e:	d1f2      	bne.n	7576 <mem_cpy+0x16>
}
    7590:	46c0      	nop			; (mov r8, r8)
    7592:	46bd      	mov	sp, r7
    7594:	b006      	add	sp, #24
    7596:	bd80      	pop	{r7, pc}

00007598 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    7598:	b580      	push	{r7, lr}
    759a:	b086      	sub	sp, #24
    759c:	af00      	add	r7, sp, #0
    759e:	60f8      	str	r0, [r7, #12]
    75a0:	60b9      	str	r1, [r7, #8]
    75a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    75a4:	68fb      	ldr	r3, [r7, #12]
    75a6:	617b      	str	r3, [r7, #20]

	while (cnt--)
    75a8:	e005      	b.n	75b6 <mem_set+0x1e>
		*d++ = (BYTE)val;
    75aa:	697b      	ldr	r3, [r7, #20]
    75ac:	1c5a      	adds	r2, r3, #1
    75ae:	617a      	str	r2, [r7, #20]
    75b0:	68ba      	ldr	r2, [r7, #8]
    75b2:	b2d2      	uxtb	r2, r2
    75b4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    75b6:	687b      	ldr	r3, [r7, #4]
    75b8:	1e5a      	subs	r2, r3, #1
    75ba:	607a      	str	r2, [r7, #4]
    75bc:	2b00      	cmp	r3, #0
    75be:	d1f4      	bne.n	75aa <mem_set+0x12>
}
    75c0:	46c0      	nop			; (mov r8, r8)
    75c2:	46bd      	mov	sp, r7
    75c4:	b006      	add	sp, #24
    75c6:	bd80      	pop	{r7, pc}

000075c8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    75c8:	b580      	push	{r7, lr}
    75ca:	b088      	sub	sp, #32
    75cc:	af00      	add	r7, sp, #0
    75ce:	60f8      	str	r0, [r7, #12]
    75d0:	60b9      	str	r1, [r7, #8]
    75d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    75d4:	68fb      	ldr	r3, [r7, #12]
    75d6:	61fb      	str	r3, [r7, #28]
    75d8:	68bb      	ldr	r3, [r7, #8]
    75da:	61bb      	str	r3, [r7, #24]
	int r = 0;
    75dc:	2300      	movs	r3, #0
    75de:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    75e0:	46c0      	nop			; (mov r8, r8)
    75e2:	687b      	ldr	r3, [r7, #4]
    75e4:	1e5a      	subs	r2, r3, #1
    75e6:	607a      	str	r2, [r7, #4]
    75e8:	2b00      	cmp	r3, #0
    75ea:	d00d      	beq.n	7608 <mem_cmp+0x40>
    75ec:	69fb      	ldr	r3, [r7, #28]
    75ee:	1c5a      	adds	r2, r3, #1
    75f0:	61fa      	str	r2, [r7, #28]
    75f2:	781b      	ldrb	r3, [r3, #0]
    75f4:	0019      	movs	r1, r3
    75f6:	69bb      	ldr	r3, [r7, #24]
    75f8:	1c5a      	adds	r2, r3, #1
    75fa:	61ba      	str	r2, [r7, #24]
    75fc:	781b      	ldrb	r3, [r3, #0]
    75fe:	1acb      	subs	r3, r1, r3
    7600:	617b      	str	r3, [r7, #20]
    7602:	697b      	ldr	r3, [r7, #20]
    7604:	2b00      	cmp	r3, #0
    7606:	d0ec      	beq.n	75e2 <mem_cmp+0x1a>
	return r;
    7608:	697b      	ldr	r3, [r7, #20]
}
    760a:	0018      	movs	r0, r3
    760c:	46bd      	mov	sp, r7
    760e:	b008      	add	sp, #32
    7610:	bd80      	pop	{r7, pc}

00007612 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    7612:	b580      	push	{r7, lr}
    7614:	b082      	sub	sp, #8
    7616:	af00      	add	r7, sp, #0
    7618:	6078      	str	r0, [r7, #4]
    761a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    761c:	e002      	b.n	7624 <chk_chr+0x12>
    761e:	687b      	ldr	r3, [r7, #4]
    7620:	3301      	adds	r3, #1
    7622:	607b      	str	r3, [r7, #4]
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	781b      	ldrb	r3, [r3, #0]
    7628:	2b00      	cmp	r3, #0
    762a:	d005      	beq.n	7638 <chk_chr+0x26>
    762c:	687b      	ldr	r3, [r7, #4]
    762e:	781b      	ldrb	r3, [r3, #0]
    7630:	001a      	movs	r2, r3
    7632:	683b      	ldr	r3, [r7, #0]
    7634:	429a      	cmp	r2, r3
    7636:	d1f2      	bne.n	761e <chk_chr+0xc>
	return *str;
    7638:	687b      	ldr	r3, [r7, #4]
    763a:	781b      	ldrb	r3, [r3, #0]
}
    763c:	0018      	movs	r0, r3
    763e:	46bd      	mov	sp, r7
    7640:	b002      	add	sp, #8
    7642:	bd80      	pop	{r7, pc}

00007644 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    7644:	b590      	push	{r4, r7, lr}
    7646:	b085      	sub	sp, #20
    7648:	af00      	add	r7, sp, #0
    764a:	6078      	str	r0, [r7, #4]
    764c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    764e:	687b      	ldr	r3, [r7, #4]
    7650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7652:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    7654:	68fa      	ldr	r2, [r7, #12]
    7656:	683b      	ldr	r3, [r7, #0]
    7658:	429a      	cmp	r2, r3
    765a:	d04e      	beq.n	76fa <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    765c:	687b      	ldr	r3, [r7, #4]
    765e:	791b      	ldrb	r3, [r3, #4]
    7660:	2b00      	cmp	r3, #0
    7662:	d037      	beq.n	76d4 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7664:	687b      	ldr	r3, [r7, #4]
    7666:	7858      	ldrb	r0, [r3, #1]
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	3330      	adds	r3, #48	; 0x30
    766c:	0019      	movs	r1, r3
    766e:	68fa      	ldr	r2, [r7, #12]
    7670:	2301      	movs	r3, #1
    7672:	4c24      	ldr	r4, [pc, #144]	; (7704 <move_window+0xc0>)
    7674:	47a0      	blx	r4
    7676:	1e03      	subs	r3, r0, #0
    7678:	d001      	beq.n	767e <move_window+0x3a>
				return FR_DISK_ERR;
    767a:	2301      	movs	r3, #1
    767c:	e03e      	b.n	76fc <move_window+0xb8>
			fs->wflag = 0;
    767e:	687b      	ldr	r3, [r7, #4]
    7680:	2200      	movs	r2, #0
    7682:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	6a1a      	ldr	r2, [r3, #32]
    7688:	687b      	ldr	r3, [r7, #4]
    768a:	69db      	ldr	r3, [r3, #28]
    768c:	18d2      	adds	r2, r2, r3
    768e:	68fb      	ldr	r3, [r7, #12]
    7690:	429a      	cmp	r2, r3
    7692:	d91f      	bls.n	76d4 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7694:	230b      	movs	r3, #11
    7696:	18fb      	adds	r3, r7, r3
    7698:	687a      	ldr	r2, [r7, #4]
    769a:	78d2      	ldrb	r2, [r2, #3]
    769c:	701a      	strb	r2, [r3, #0]
    769e:	e014      	b.n	76ca <move_window+0x86>
					wsect += fs->fsize;
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	69db      	ldr	r3, [r3, #28]
    76a4:	68fa      	ldr	r2, [r7, #12]
    76a6:	18d3      	adds	r3, r2, r3
    76a8:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    76aa:	687b      	ldr	r3, [r7, #4]
    76ac:	7858      	ldrb	r0, [r3, #1]
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	3330      	adds	r3, #48	; 0x30
    76b2:	0019      	movs	r1, r3
    76b4:	68fa      	ldr	r2, [r7, #12]
    76b6:	2301      	movs	r3, #1
    76b8:	4c12      	ldr	r4, [pc, #72]	; (7704 <move_window+0xc0>)
    76ba:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    76bc:	230b      	movs	r3, #11
    76be:	18fb      	adds	r3, r7, r3
    76c0:	781a      	ldrb	r2, [r3, #0]
    76c2:	230b      	movs	r3, #11
    76c4:	18fb      	adds	r3, r7, r3
    76c6:	3a01      	subs	r2, #1
    76c8:	701a      	strb	r2, [r3, #0]
    76ca:	230b      	movs	r3, #11
    76cc:	18fb      	adds	r3, r7, r3
    76ce:	781b      	ldrb	r3, [r3, #0]
    76d0:	2b01      	cmp	r3, #1
    76d2:	d8e5      	bhi.n	76a0 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    76d4:	683b      	ldr	r3, [r7, #0]
    76d6:	2b00      	cmp	r3, #0
    76d8:	d00f      	beq.n	76fa <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    76da:	687b      	ldr	r3, [r7, #4]
    76dc:	7858      	ldrb	r0, [r3, #1]
    76de:	687b      	ldr	r3, [r7, #4]
    76e0:	3330      	adds	r3, #48	; 0x30
    76e2:	0019      	movs	r1, r3
    76e4:	683a      	ldr	r2, [r7, #0]
    76e6:	2301      	movs	r3, #1
    76e8:	4c07      	ldr	r4, [pc, #28]	; (7708 <move_window+0xc4>)
    76ea:	47a0      	blx	r4
    76ec:	1e03      	subs	r3, r0, #0
    76ee:	d001      	beq.n	76f4 <move_window+0xb0>
				return FR_DISK_ERR;
    76f0:	2301      	movs	r3, #1
    76f2:	e003      	b.n	76fc <move_window+0xb8>
			fs->winsect = sector;
    76f4:	687b      	ldr	r3, [r7, #4]
    76f6:	683a      	ldr	r2, [r7, #0]
    76f8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    76fa:	2300      	movs	r3, #0
}
    76fc:	0018      	movs	r0, r3
    76fe:	46bd      	mov	sp, r7
    7700:	b005      	add	sp, #20
    7702:	bd90      	pop	{r4, r7, pc}
    7704:	00007331 	.word	0x00007331
    7708:	00007259 	.word	0x00007259

0000770c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    770c:	b590      	push	{r4, r7, lr}
    770e:	b085      	sub	sp, #20
    7710:	af00      	add	r7, sp, #0
    7712:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    7714:	230f      	movs	r3, #15
    7716:	18fc      	adds	r4, r7, r3
    7718:	687b      	ldr	r3, [r7, #4]
    771a:	2100      	movs	r1, #0
    771c:	0018      	movs	r0, r3
    771e:	4b52      	ldr	r3, [pc, #328]	; (7868 <sync+0x15c>)
    7720:	4798      	blx	r3
    7722:	0003      	movs	r3, r0
    7724:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    7726:	230f      	movs	r3, #15
    7728:	18fb      	adds	r3, r7, r3
    772a:	781b      	ldrb	r3, [r3, #0]
    772c:	2b00      	cmp	r3, #0
    772e:	d000      	beq.n	7732 <sync+0x26>
    7730:	e093      	b.n	785a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7732:	687b      	ldr	r3, [r7, #4]
    7734:	781b      	ldrb	r3, [r3, #0]
    7736:	2b03      	cmp	r3, #3
    7738:	d000      	beq.n	773c <sync+0x30>
    773a:	e081      	b.n	7840 <sync+0x134>
    773c:	687b      	ldr	r3, [r7, #4]
    773e:	795b      	ldrb	r3, [r3, #5]
    7740:	2b00      	cmp	r3, #0
    7742:	d07d      	beq.n	7840 <sync+0x134>
			fs->winsect = 0;
    7744:	687b      	ldr	r3, [r7, #4]
    7746:	2200      	movs	r2, #0
    7748:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    774a:	687b      	ldr	r3, [r7, #4]
    774c:	3330      	adds	r3, #48	; 0x30
    774e:	0018      	movs	r0, r3
    7750:	2380      	movs	r3, #128	; 0x80
    7752:	009b      	lsls	r3, r3, #2
    7754:	001a      	movs	r2, r3
    7756:	2100      	movs	r1, #0
    7758:	4b44      	ldr	r3, [pc, #272]	; (786c <sync+0x160>)
    775a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    775c:	687b      	ldr	r3, [r7, #4]
    775e:	4a44      	ldr	r2, [pc, #272]	; (7870 <sync+0x164>)
    7760:	2155      	movs	r1, #85	; 0x55
    7762:	5499      	strb	r1, [r3, r2]
    7764:	687b      	ldr	r3, [r7, #4]
    7766:	4a43      	ldr	r2, [pc, #268]	; (7874 <sync+0x168>)
    7768:	21aa      	movs	r1, #170	; 0xaa
    776a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    776c:	687b      	ldr	r3, [r7, #4]
    776e:	2230      	movs	r2, #48	; 0x30
    7770:	2152      	movs	r1, #82	; 0x52
    7772:	5499      	strb	r1, [r3, r2]
    7774:	687b      	ldr	r3, [r7, #4]
    7776:	2231      	movs	r2, #49	; 0x31
    7778:	2152      	movs	r1, #82	; 0x52
    777a:	5499      	strb	r1, [r3, r2]
    777c:	687b      	ldr	r3, [r7, #4]
    777e:	2232      	movs	r2, #50	; 0x32
    7780:	2161      	movs	r1, #97	; 0x61
    7782:	5499      	strb	r1, [r3, r2]
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	2233      	movs	r2, #51	; 0x33
    7788:	2141      	movs	r1, #65	; 0x41
    778a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    778c:	687a      	ldr	r2, [r7, #4]
    778e:	2385      	movs	r3, #133	; 0x85
    7790:	009b      	lsls	r3, r3, #2
    7792:	2172      	movs	r1, #114	; 0x72
    7794:	54d1      	strb	r1, [r2, r3]
    7796:	687b      	ldr	r3, [r7, #4]
    7798:	4a37      	ldr	r2, [pc, #220]	; (7878 <sync+0x16c>)
    779a:	2172      	movs	r1, #114	; 0x72
    779c:	5499      	strb	r1, [r3, r2]
    779e:	687b      	ldr	r3, [r7, #4]
    77a0:	4a36      	ldr	r2, [pc, #216]	; (787c <sync+0x170>)
    77a2:	2141      	movs	r1, #65	; 0x41
    77a4:	5499      	strb	r1, [r3, r2]
    77a6:	687b      	ldr	r3, [r7, #4]
    77a8:	4a35      	ldr	r2, [pc, #212]	; (7880 <sync+0x174>)
    77aa:	2161      	movs	r1, #97	; 0x61
    77ac:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    77ae:	687b      	ldr	r3, [r7, #4]
    77b0:	691b      	ldr	r3, [r3, #16]
    77b2:	b2d9      	uxtb	r1, r3
    77b4:	687a      	ldr	r2, [r7, #4]
    77b6:	2386      	movs	r3, #134	; 0x86
    77b8:	009b      	lsls	r3, r3, #2
    77ba:	54d1      	strb	r1, [r2, r3]
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	691b      	ldr	r3, [r3, #16]
    77c0:	b29b      	uxth	r3, r3
    77c2:	0a1b      	lsrs	r3, r3, #8
    77c4:	b29b      	uxth	r3, r3
    77c6:	b2d9      	uxtb	r1, r3
    77c8:	687b      	ldr	r3, [r7, #4]
    77ca:	4a2e      	ldr	r2, [pc, #184]	; (7884 <sync+0x178>)
    77cc:	5499      	strb	r1, [r3, r2]
    77ce:	687b      	ldr	r3, [r7, #4]
    77d0:	691b      	ldr	r3, [r3, #16]
    77d2:	0c1b      	lsrs	r3, r3, #16
    77d4:	b2d9      	uxtb	r1, r3
    77d6:	687b      	ldr	r3, [r7, #4]
    77d8:	4a2b      	ldr	r2, [pc, #172]	; (7888 <sync+0x17c>)
    77da:	5499      	strb	r1, [r3, r2]
    77dc:	687b      	ldr	r3, [r7, #4]
    77de:	691b      	ldr	r3, [r3, #16]
    77e0:	0e1b      	lsrs	r3, r3, #24
    77e2:	b2d9      	uxtb	r1, r3
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	4a29      	ldr	r2, [pc, #164]	; (788c <sync+0x180>)
    77e8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    77ea:	687b      	ldr	r3, [r7, #4]
    77ec:	68db      	ldr	r3, [r3, #12]
    77ee:	b2d9      	uxtb	r1, r3
    77f0:	687a      	ldr	r2, [r7, #4]
    77f2:	2387      	movs	r3, #135	; 0x87
    77f4:	009b      	lsls	r3, r3, #2
    77f6:	54d1      	strb	r1, [r2, r3]
    77f8:	687b      	ldr	r3, [r7, #4]
    77fa:	68db      	ldr	r3, [r3, #12]
    77fc:	b29b      	uxth	r3, r3
    77fe:	0a1b      	lsrs	r3, r3, #8
    7800:	b29b      	uxth	r3, r3
    7802:	b2d9      	uxtb	r1, r3
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	4a22      	ldr	r2, [pc, #136]	; (7890 <sync+0x184>)
    7808:	5499      	strb	r1, [r3, r2]
    780a:	687b      	ldr	r3, [r7, #4]
    780c:	68db      	ldr	r3, [r3, #12]
    780e:	0c1b      	lsrs	r3, r3, #16
    7810:	b2d9      	uxtb	r1, r3
    7812:	687b      	ldr	r3, [r7, #4]
    7814:	4a1f      	ldr	r2, [pc, #124]	; (7894 <sync+0x188>)
    7816:	5499      	strb	r1, [r3, r2]
    7818:	687b      	ldr	r3, [r7, #4]
    781a:	68db      	ldr	r3, [r3, #12]
    781c:	0e1b      	lsrs	r3, r3, #24
    781e:	b2d9      	uxtb	r1, r3
    7820:	687b      	ldr	r3, [r7, #4]
    7822:	4a1d      	ldr	r2, [pc, #116]	; (7898 <sync+0x18c>)
    7824:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    7826:	687b      	ldr	r3, [r7, #4]
    7828:	7858      	ldrb	r0, [r3, #1]
    782a:	687b      	ldr	r3, [r7, #4]
    782c:	3330      	adds	r3, #48	; 0x30
    782e:	0019      	movs	r1, r3
    7830:	687b      	ldr	r3, [r7, #4]
    7832:	695a      	ldr	r2, [r3, #20]
    7834:	2301      	movs	r3, #1
    7836:	4c19      	ldr	r4, [pc, #100]	; (789c <sync+0x190>)
    7838:	47a0      	blx	r4
			fs->fsi_flag = 0;
    783a:	687b      	ldr	r3, [r7, #4]
    783c:	2200      	movs	r2, #0
    783e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	785b      	ldrb	r3, [r3, #1]
    7844:	2200      	movs	r2, #0
    7846:	2100      	movs	r1, #0
    7848:	0018      	movs	r0, r3
    784a:	4b15      	ldr	r3, [pc, #84]	; (78a0 <sync+0x194>)
    784c:	4798      	blx	r3
    784e:	1e03      	subs	r3, r0, #0
    7850:	d003      	beq.n	785a <sync+0x14e>
			res = FR_DISK_ERR;
    7852:	230f      	movs	r3, #15
    7854:	18fb      	adds	r3, r7, r3
    7856:	2201      	movs	r2, #1
    7858:	701a      	strb	r2, [r3, #0]
	}

	return res;
    785a:	230f      	movs	r3, #15
    785c:	18fb      	adds	r3, r7, r3
    785e:	781b      	ldrb	r3, [r3, #0]
}
    7860:	0018      	movs	r0, r3
    7862:	46bd      	mov	sp, r7
    7864:	b005      	add	sp, #20
    7866:	bd90      	pop	{r4, r7, pc}
    7868:	00007645 	.word	0x00007645
    786c:	00007599 	.word	0x00007599
    7870:	0000022e 	.word	0x0000022e
    7874:	0000022f 	.word	0x0000022f
    7878:	00000215 	.word	0x00000215
    787c:	00000216 	.word	0x00000216
    7880:	00000217 	.word	0x00000217
    7884:	00000219 	.word	0x00000219
    7888:	0000021a 	.word	0x0000021a
    788c:	0000021b 	.word	0x0000021b
    7890:	0000021d 	.word	0x0000021d
    7894:	0000021e 	.word	0x0000021e
    7898:	0000021f 	.word	0x0000021f
    789c:	00007331 	.word	0x00007331
    78a0:	00007409 	.word	0x00007409

000078a4 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    78a4:	b580      	push	{r7, lr}
    78a6:	b082      	sub	sp, #8
    78a8:	af00      	add	r7, sp, #0
    78aa:	6078      	str	r0, [r7, #4]
    78ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
    78ae:	683b      	ldr	r3, [r7, #0]
    78b0:	3b02      	subs	r3, #2
    78b2:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    78b4:	687b      	ldr	r3, [r7, #4]
    78b6:	699b      	ldr	r3, [r3, #24]
    78b8:	1e9a      	subs	r2, r3, #2
    78ba:	683b      	ldr	r3, [r7, #0]
    78bc:	429a      	cmp	r2, r3
    78be:	d801      	bhi.n	78c4 <clust2sect+0x20>
    78c0:	2300      	movs	r3, #0
    78c2:	e007      	b.n	78d4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	789b      	ldrb	r3, [r3, #2]
    78c8:	001a      	movs	r2, r3
    78ca:	683b      	ldr	r3, [r7, #0]
    78cc:	435a      	muls	r2, r3
    78ce:	687b      	ldr	r3, [r7, #4]
    78d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    78d2:	18d3      	adds	r3, r2, r3
}
    78d4:	0018      	movs	r0, r3
    78d6:	46bd      	mov	sp, r7
    78d8:	b002      	add	sp, #8
    78da:	bd80      	pop	{r7, pc}

000078dc <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    78dc:	b580      	push	{r7, lr}
    78de:	b086      	sub	sp, #24
    78e0:	af00      	add	r7, sp, #0
    78e2:	6078      	str	r0, [r7, #4]
    78e4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    78e6:	683b      	ldr	r3, [r7, #0]
    78e8:	2b01      	cmp	r3, #1
    78ea:	d904      	bls.n	78f6 <get_fat+0x1a>
    78ec:	687b      	ldr	r3, [r7, #4]
    78ee:	699a      	ldr	r2, [r3, #24]
    78f0:	683b      	ldr	r3, [r7, #0]
    78f2:	429a      	cmp	r2, r3
    78f4:	d801      	bhi.n	78fa <get_fat+0x1e>
		return 1;
    78f6:	2301      	movs	r3, #1
    78f8:	e09f      	b.n	7a3a <get_fat+0x15e>

	switch (fs->fs_type) {
    78fa:	687b      	ldr	r3, [r7, #4]
    78fc:	781b      	ldrb	r3, [r3, #0]
    78fe:	2b02      	cmp	r3, #2
    7900:	d048      	beq.n	7994 <get_fat+0xb8>
    7902:	2b03      	cmp	r3, #3
    7904:	d067      	beq.n	79d6 <get_fat+0xfa>
    7906:	2b01      	cmp	r3, #1
    7908:	d000      	beq.n	790c <get_fat+0x30>
    790a:	e094      	b.n	7a36 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    790c:	683b      	ldr	r3, [r7, #0]
    790e:	617b      	str	r3, [r7, #20]
    7910:	697b      	ldr	r3, [r7, #20]
    7912:	085b      	lsrs	r3, r3, #1
    7914:	697a      	ldr	r2, [r7, #20]
    7916:	18d3      	adds	r3, r2, r3
    7918:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    791a:	687b      	ldr	r3, [r7, #4]
    791c:	6a1a      	ldr	r2, [r3, #32]
    791e:	697b      	ldr	r3, [r7, #20]
    7920:	0a5b      	lsrs	r3, r3, #9
    7922:	18d2      	adds	r2, r2, r3
    7924:	687b      	ldr	r3, [r7, #4]
    7926:	0011      	movs	r1, r2
    7928:	0018      	movs	r0, r3
    792a:	4b46      	ldr	r3, [pc, #280]	; (7a44 <get_fat+0x168>)
    792c:	4798      	blx	r3
    792e:	1e03      	subs	r3, r0, #0
    7930:	d000      	beq.n	7934 <get_fat+0x58>
    7932:	e079      	b.n	7a28 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    7934:	697b      	ldr	r3, [r7, #20]
    7936:	05db      	lsls	r3, r3, #23
    7938:	0ddb      	lsrs	r3, r3, #23
    793a:	687a      	ldr	r2, [r7, #4]
    793c:	2130      	movs	r1, #48	; 0x30
    793e:	18d3      	adds	r3, r2, r3
    7940:	185b      	adds	r3, r3, r1
    7942:	781b      	ldrb	r3, [r3, #0]
    7944:	613b      	str	r3, [r7, #16]
    7946:	697b      	ldr	r3, [r7, #20]
    7948:	3301      	adds	r3, #1
    794a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    794c:	687b      	ldr	r3, [r7, #4]
    794e:	6a1a      	ldr	r2, [r3, #32]
    7950:	697b      	ldr	r3, [r7, #20]
    7952:	0a5b      	lsrs	r3, r3, #9
    7954:	18d2      	adds	r2, r2, r3
    7956:	687b      	ldr	r3, [r7, #4]
    7958:	0011      	movs	r1, r2
    795a:	0018      	movs	r0, r3
    795c:	4b39      	ldr	r3, [pc, #228]	; (7a44 <get_fat+0x168>)
    795e:	4798      	blx	r3
    7960:	1e03      	subs	r3, r0, #0
    7962:	d163      	bne.n	7a2c <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    7964:	697b      	ldr	r3, [r7, #20]
    7966:	05db      	lsls	r3, r3, #23
    7968:	0ddb      	lsrs	r3, r3, #23
    796a:	687a      	ldr	r2, [r7, #4]
    796c:	2130      	movs	r1, #48	; 0x30
    796e:	18d3      	adds	r3, r2, r3
    7970:	185b      	adds	r3, r3, r1
    7972:	781b      	ldrb	r3, [r3, #0]
    7974:	021b      	lsls	r3, r3, #8
    7976:	001a      	movs	r2, r3
    7978:	693b      	ldr	r3, [r7, #16]
    797a:	4313      	orrs	r3, r2
    797c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    797e:	683b      	ldr	r3, [r7, #0]
    7980:	2201      	movs	r2, #1
    7982:	4013      	ands	r3, r2
    7984:	d002      	beq.n	798c <get_fat+0xb0>
    7986:	693b      	ldr	r3, [r7, #16]
    7988:	091b      	lsrs	r3, r3, #4
    798a:	e056      	b.n	7a3a <get_fat+0x15e>
    798c:	693b      	ldr	r3, [r7, #16]
    798e:	051b      	lsls	r3, r3, #20
    7990:	0d1b      	lsrs	r3, r3, #20
    7992:	e052      	b.n	7a3a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7994:	687b      	ldr	r3, [r7, #4]
    7996:	6a1a      	ldr	r2, [r3, #32]
    7998:	683b      	ldr	r3, [r7, #0]
    799a:	0a1b      	lsrs	r3, r3, #8
    799c:	18d2      	adds	r2, r2, r3
    799e:	687b      	ldr	r3, [r7, #4]
    79a0:	0011      	movs	r1, r2
    79a2:	0018      	movs	r0, r3
    79a4:	4b27      	ldr	r3, [pc, #156]	; (7a44 <get_fat+0x168>)
    79a6:	4798      	blx	r3
    79a8:	1e03      	subs	r3, r0, #0
    79aa:	d141      	bne.n	7a30 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    79ac:	683b      	ldr	r3, [r7, #0]
    79ae:	005a      	lsls	r2, r3, #1
    79b0:	23ff      	movs	r3, #255	; 0xff
    79b2:	005b      	lsls	r3, r3, #1
    79b4:	4013      	ands	r3, r2
    79b6:	3330      	adds	r3, #48	; 0x30
    79b8:	687a      	ldr	r2, [r7, #4]
    79ba:	18d3      	adds	r3, r2, r3
    79bc:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    79be:	68fb      	ldr	r3, [r7, #12]
    79c0:	3301      	adds	r3, #1
    79c2:	781b      	ldrb	r3, [r3, #0]
    79c4:	021b      	lsls	r3, r3, #8
    79c6:	b21a      	sxth	r2, r3
    79c8:	68fb      	ldr	r3, [r7, #12]
    79ca:	781b      	ldrb	r3, [r3, #0]
    79cc:	b21b      	sxth	r3, r3
    79ce:	4313      	orrs	r3, r2
    79d0:	b21b      	sxth	r3, r3
    79d2:	b29b      	uxth	r3, r3
    79d4:	e031      	b.n	7a3a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    79d6:	687b      	ldr	r3, [r7, #4]
    79d8:	6a1a      	ldr	r2, [r3, #32]
    79da:	683b      	ldr	r3, [r7, #0]
    79dc:	09db      	lsrs	r3, r3, #7
    79de:	18d2      	adds	r2, r2, r3
    79e0:	687b      	ldr	r3, [r7, #4]
    79e2:	0011      	movs	r1, r2
    79e4:	0018      	movs	r0, r3
    79e6:	4b17      	ldr	r3, [pc, #92]	; (7a44 <get_fat+0x168>)
    79e8:	4798      	blx	r3
    79ea:	1e03      	subs	r3, r0, #0
    79ec:	d122      	bne.n	7a34 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    79ee:	683b      	ldr	r3, [r7, #0]
    79f0:	009a      	lsls	r2, r3, #2
    79f2:	23fe      	movs	r3, #254	; 0xfe
    79f4:	005b      	lsls	r3, r3, #1
    79f6:	4013      	ands	r3, r2
    79f8:	3330      	adds	r3, #48	; 0x30
    79fa:	687a      	ldr	r2, [r7, #4]
    79fc:	18d3      	adds	r3, r2, r3
    79fe:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    7a00:	68fb      	ldr	r3, [r7, #12]
    7a02:	3303      	adds	r3, #3
    7a04:	781b      	ldrb	r3, [r3, #0]
    7a06:	061a      	lsls	r2, r3, #24
    7a08:	68fb      	ldr	r3, [r7, #12]
    7a0a:	3302      	adds	r3, #2
    7a0c:	781b      	ldrb	r3, [r3, #0]
    7a0e:	041b      	lsls	r3, r3, #16
    7a10:	4313      	orrs	r3, r2
    7a12:	68fa      	ldr	r2, [r7, #12]
    7a14:	3201      	adds	r2, #1
    7a16:	7812      	ldrb	r2, [r2, #0]
    7a18:	0212      	lsls	r2, r2, #8
    7a1a:	4313      	orrs	r3, r2
    7a1c:	68fa      	ldr	r2, [r7, #12]
    7a1e:	7812      	ldrb	r2, [r2, #0]
    7a20:	4313      	orrs	r3, r2
    7a22:	011b      	lsls	r3, r3, #4
    7a24:	091b      	lsrs	r3, r3, #4
    7a26:	e008      	b.n	7a3a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7a28:	46c0      	nop			; (mov r8, r8)
    7a2a:	e004      	b.n	7a36 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7a2c:	46c0      	nop			; (mov r8, r8)
    7a2e:	e002      	b.n	7a36 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7a30:	46c0      	nop			; (mov r8, r8)
    7a32:	e000      	b.n	7a36 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7a34:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7a36:	2301      	movs	r3, #1
    7a38:	425b      	negs	r3, r3
}
    7a3a:	0018      	movs	r0, r3
    7a3c:	46bd      	mov	sp, r7
    7a3e:	b006      	add	sp, #24
    7a40:	bd80      	pop	{r7, pc}
    7a42:	46c0      	nop			; (mov r8, r8)
    7a44:	00007645 	.word	0x00007645

00007a48 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7a48:	b590      	push	{r4, r7, lr}
    7a4a:	b089      	sub	sp, #36	; 0x24
    7a4c:	af00      	add	r7, sp, #0
    7a4e:	60f8      	str	r0, [r7, #12]
    7a50:	60b9      	str	r1, [r7, #8]
    7a52:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7a54:	68bb      	ldr	r3, [r7, #8]
    7a56:	2b01      	cmp	r3, #1
    7a58:	d904      	bls.n	7a64 <put_fat+0x1c>
    7a5a:	68fb      	ldr	r3, [r7, #12]
    7a5c:	699a      	ldr	r2, [r3, #24]
    7a5e:	68bb      	ldr	r3, [r7, #8]
    7a60:	429a      	cmp	r2, r3
    7a62:	d804      	bhi.n	7a6e <put_fat+0x26>
		res = FR_INT_ERR;
    7a64:	231f      	movs	r3, #31
    7a66:	18fb      	adds	r3, r7, r3
    7a68:	2202      	movs	r2, #2
    7a6a:	701a      	strb	r2, [r3, #0]
    7a6c:	e100      	b.n	7c70 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    7a6e:	68fb      	ldr	r3, [r7, #12]
    7a70:	781b      	ldrb	r3, [r3, #0]
    7a72:	2b02      	cmp	r3, #2
    7a74:	d100      	bne.n	7a78 <put_fat+0x30>
    7a76:	e078      	b.n	7b6a <put_fat+0x122>
    7a78:	2b03      	cmp	r3, #3
    7a7a:	d100      	bne.n	7a7e <put_fat+0x36>
    7a7c:	e09e      	b.n	7bbc <put_fat+0x174>
    7a7e:	2b01      	cmp	r3, #1
    7a80:	d000      	beq.n	7a84 <put_fat+0x3c>
    7a82:	e0e6      	b.n	7c52 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7a84:	68bb      	ldr	r3, [r7, #8]
    7a86:	61bb      	str	r3, [r7, #24]
    7a88:	69bb      	ldr	r3, [r7, #24]
    7a8a:	085b      	lsrs	r3, r3, #1
    7a8c:	69ba      	ldr	r2, [r7, #24]
    7a8e:	18d3      	adds	r3, r2, r3
    7a90:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7a92:	68fb      	ldr	r3, [r7, #12]
    7a94:	6a1a      	ldr	r2, [r3, #32]
    7a96:	69bb      	ldr	r3, [r7, #24]
    7a98:	0a5b      	lsrs	r3, r3, #9
    7a9a:	18d2      	adds	r2, r2, r3
    7a9c:	231f      	movs	r3, #31
    7a9e:	18fc      	adds	r4, r7, r3
    7aa0:	68fb      	ldr	r3, [r7, #12]
    7aa2:	0011      	movs	r1, r2
    7aa4:	0018      	movs	r0, r3
    7aa6:	4b76      	ldr	r3, [pc, #472]	; (7c80 <put_fat+0x238>)
    7aa8:	4798      	blx	r3
    7aaa:	0003      	movs	r3, r0
    7aac:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7aae:	231f      	movs	r3, #31
    7ab0:	18fb      	adds	r3, r7, r3
    7ab2:	781b      	ldrb	r3, [r3, #0]
    7ab4:	2b00      	cmp	r3, #0
    7ab6:	d000      	beq.n	7aba <put_fat+0x72>
    7ab8:	e0d0      	b.n	7c5c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    7aba:	69bb      	ldr	r3, [r7, #24]
    7abc:	05db      	lsls	r3, r3, #23
    7abe:	0ddb      	lsrs	r3, r3, #23
    7ac0:	3330      	adds	r3, #48	; 0x30
    7ac2:	68fa      	ldr	r2, [r7, #12]
    7ac4:	18d3      	adds	r3, r2, r3
    7ac6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7ac8:	68bb      	ldr	r3, [r7, #8]
    7aca:	2201      	movs	r2, #1
    7acc:	4013      	ands	r3, r2
    7ace:	d00d      	beq.n	7aec <put_fat+0xa4>
    7ad0:	697b      	ldr	r3, [r7, #20]
    7ad2:	781b      	ldrb	r3, [r3, #0]
    7ad4:	b25b      	sxtb	r3, r3
    7ad6:	220f      	movs	r2, #15
    7ad8:	4013      	ands	r3, r2
    7ada:	b25a      	sxtb	r2, r3
    7adc:	687b      	ldr	r3, [r7, #4]
    7ade:	b2db      	uxtb	r3, r3
    7ae0:	011b      	lsls	r3, r3, #4
    7ae2:	b25b      	sxtb	r3, r3
    7ae4:	4313      	orrs	r3, r2
    7ae6:	b25b      	sxtb	r3, r3
    7ae8:	b2db      	uxtb	r3, r3
    7aea:	e001      	b.n	7af0 <put_fat+0xa8>
    7aec:	687b      	ldr	r3, [r7, #4]
    7aee:	b2db      	uxtb	r3, r3
    7af0:	697a      	ldr	r2, [r7, #20]
    7af2:	7013      	strb	r3, [r2, #0]
			bc++;
    7af4:	69bb      	ldr	r3, [r7, #24]
    7af6:	3301      	adds	r3, #1
    7af8:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    7afa:	68fb      	ldr	r3, [r7, #12]
    7afc:	2201      	movs	r2, #1
    7afe:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7b00:	68fb      	ldr	r3, [r7, #12]
    7b02:	6a1a      	ldr	r2, [r3, #32]
    7b04:	69bb      	ldr	r3, [r7, #24]
    7b06:	0a5b      	lsrs	r3, r3, #9
    7b08:	18d2      	adds	r2, r2, r3
    7b0a:	231f      	movs	r3, #31
    7b0c:	18fc      	adds	r4, r7, r3
    7b0e:	68fb      	ldr	r3, [r7, #12]
    7b10:	0011      	movs	r1, r2
    7b12:	0018      	movs	r0, r3
    7b14:	4b5a      	ldr	r3, [pc, #360]	; (7c80 <put_fat+0x238>)
    7b16:	4798      	blx	r3
    7b18:	0003      	movs	r3, r0
    7b1a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7b1c:	231f      	movs	r3, #31
    7b1e:	18fb      	adds	r3, r7, r3
    7b20:	781b      	ldrb	r3, [r3, #0]
    7b22:	2b00      	cmp	r3, #0
    7b24:	d000      	beq.n	7b28 <put_fat+0xe0>
    7b26:	e09b      	b.n	7c60 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    7b28:	69bb      	ldr	r3, [r7, #24]
    7b2a:	05db      	lsls	r3, r3, #23
    7b2c:	0ddb      	lsrs	r3, r3, #23
    7b2e:	3330      	adds	r3, #48	; 0x30
    7b30:	68fa      	ldr	r2, [r7, #12]
    7b32:	18d3      	adds	r3, r2, r3
    7b34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7b36:	68bb      	ldr	r3, [r7, #8]
    7b38:	2201      	movs	r2, #1
    7b3a:	4013      	ands	r3, r2
    7b3c:	d003      	beq.n	7b46 <put_fat+0xfe>
    7b3e:	687b      	ldr	r3, [r7, #4]
    7b40:	091b      	lsrs	r3, r3, #4
    7b42:	b2db      	uxtb	r3, r3
    7b44:	e00e      	b.n	7b64 <put_fat+0x11c>
    7b46:	697b      	ldr	r3, [r7, #20]
    7b48:	781b      	ldrb	r3, [r3, #0]
    7b4a:	b25b      	sxtb	r3, r3
    7b4c:	220f      	movs	r2, #15
    7b4e:	4393      	bics	r3, r2
    7b50:	b25a      	sxtb	r2, r3
    7b52:	687b      	ldr	r3, [r7, #4]
    7b54:	0a1b      	lsrs	r3, r3, #8
    7b56:	b25b      	sxtb	r3, r3
    7b58:	210f      	movs	r1, #15
    7b5a:	400b      	ands	r3, r1
    7b5c:	b25b      	sxtb	r3, r3
    7b5e:	4313      	orrs	r3, r2
    7b60:	b25b      	sxtb	r3, r3
    7b62:	b2db      	uxtb	r3, r3
    7b64:	697a      	ldr	r2, [r7, #20]
    7b66:	7013      	strb	r3, [r2, #0]
			break;
    7b68:	e07f      	b.n	7c6a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    7b6a:	68fb      	ldr	r3, [r7, #12]
    7b6c:	6a1a      	ldr	r2, [r3, #32]
    7b6e:	68bb      	ldr	r3, [r7, #8]
    7b70:	0a1b      	lsrs	r3, r3, #8
    7b72:	18d2      	adds	r2, r2, r3
    7b74:	231f      	movs	r3, #31
    7b76:	18fc      	adds	r4, r7, r3
    7b78:	68fb      	ldr	r3, [r7, #12]
    7b7a:	0011      	movs	r1, r2
    7b7c:	0018      	movs	r0, r3
    7b7e:	4b40      	ldr	r3, [pc, #256]	; (7c80 <put_fat+0x238>)
    7b80:	4798      	blx	r3
    7b82:	0003      	movs	r3, r0
    7b84:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7b86:	231f      	movs	r3, #31
    7b88:	18fb      	adds	r3, r7, r3
    7b8a:	781b      	ldrb	r3, [r3, #0]
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d169      	bne.n	7c64 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7b90:	68bb      	ldr	r3, [r7, #8]
    7b92:	005a      	lsls	r2, r3, #1
    7b94:	23ff      	movs	r3, #255	; 0xff
    7b96:	005b      	lsls	r3, r3, #1
    7b98:	4013      	ands	r3, r2
    7b9a:	3330      	adds	r3, #48	; 0x30
    7b9c:	68fa      	ldr	r2, [r7, #12]
    7b9e:	18d3      	adds	r3, r2, r3
    7ba0:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    7ba2:	687b      	ldr	r3, [r7, #4]
    7ba4:	b2da      	uxtb	r2, r3
    7ba6:	697b      	ldr	r3, [r7, #20]
    7ba8:	701a      	strb	r2, [r3, #0]
    7baa:	697b      	ldr	r3, [r7, #20]
    7bac:	3301      	adds	r3, #1
    7bae:	687a      	ldr	r2, [r7, #4]
    7bb0:	b292      	uxth	r2, r2
    7bb2:	0a12      	lsrs	r2, r2, #8
    7bb4:	b292      	uxth	r2, r2
    7bb6:	b2d2      	uxtb	r2, r2
    7bb8:	701a      	strb	r2, [r3, #0]
			break;
    7bba:	e056      	b.n	7c6a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7bbc:	68fb      	ldr	r3, [r7, #12]
    7bbe:	6a1a      	ldr	r2, [r3, #32]
    7bc0:	68bb      	ldr	r3, [r7, #8]
    7bc2:	09db      	lsrs	r3, r3, #7
    7bc4:	18d2      	adds	r2, r2, r3
    7bc6:	231f      	movs	r3, #31
    7bc8:	18fc      	adds	r4, r7, r3
    7bca:	68fb      	ldr	r3, [r7, #12]
    7bcc:	0011      	movs	r1, r2
    7bce:	0018      	movs	r0, r3
    7bd0:	4b2b      	ldr	r3, [pc, #172]	; (7c80 <put_fat+0x238>)
    7bd2:	4798      	blx	r3
    7bd4:	0003      	movs	r3, r0
    7bd6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7bd8:	231f      	movs	r3, #31
    7bda:	18fb      	adds	r3, r7, r3
    7bdc:	781b      	ldrb	r3, [r3, #0]
    7bde:	2b00      	cmp	r3, #0
    7be0:	d142      	bne.n	7c68 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    7be2:	68bb      	ldr	r3, [r7, #8]
    7be4:	009a      	lsls	r2, r3, #2
    7be6:	23fe      	movs	r3, #254	; 0xfe
    7be8:	005b      	lsls	r3, r3, #1
    7bea:	4013      	ands	r3, r2
    7bec:	3330      	adds	r3, #48	; 0x30
    7bee:	68fa      	ldr	r2, [r7, #12]
    7bf0:	18d3      	adds	r3, r2, r3
    7bf2:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    7bf4:	697b      	ldr	r3, [r7, #20]
    7bf6:	3303      	adds	r3, #3
    7bf8:	781b      	ldrb	r3, [r3, #0]
    7bfa:	061a      	lsls	r2, r3, #24
    7bfc:	697b      	ldr	r3, [r7, #20]
    7bfe:	3302      	adds	r3, #2
    7c00:	781b      	ldrb	r3, [r3, #0]
    7c02:	041b      	lsls	r3, r3, #16
    7c04:	4313      	orrs	r3, r2
    7c06:	697a      	ldr	r2, [r7, #20]
    7c08:	3201      	adds	r2, #1
    7c0a:	7812      	ldrb	r2, [r2, #0]
    7c0c:	0212      	lsls	r2, r2, #8
    7c0e:	4313      	orrs	r3, r2
    7c10:	697a      	ldr	r2, [r7, #20]
    7c12:	7812      	ldrb	r2, [r2, #0]
    7c14:	4313      	orrs	r3, r2
    7c16:	0f1b      	lsrs	r3, r3, #28
    7c18:	071b      	lsls	r3, r3, #28
    7c1a:	687a      	ldr	r2, [r7, #4]
    7c1c:	4313      	orrs	r3, r2
    7c1e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    7c20:	687b      	ldr	r3, [r7, #4]
    7c22:	b2da      	uxtb	r2, r3
    7c24:	697b      	ldr	r3, [r7, #20]
    7c26:	701a      	strb	r2, [r3, #0]
    7c28:	697b      	ldr	r3, [r7, #20]
    7c2a:	3301      	adds	r3, #1
    7c2c:	687a      	ldr	r2, [r7, #4]
    7c2e:	b292      	uxth	r2, r2
    7c30:	0a12      	lsrs	r2, r2, #8
    7c32:	b292      	uxth	r2, r2
    7c34:	b2d2      	uxtb	r2, r2
    7c36:	701a      	strb	r2, [r3, #0]
    7c38:	697b      	ldr	r3, [r7, #20]
    7c3a:	3302      	adds	r3, #2
    7c3c:	687a      	ldr	r2, [r7, #4]
    7c3e:	0c12      	lsrs	r2, r2, #16
    7c40:	b2d2      	uxtb	r2, r2
    7c42:	701a      	strb	r2, [r3, #0]
    7c44:	697b      	ldr	r3, [r7, #20]
    7c46:	3303      	adds	r3, #3
    7c48:	687a      	ldr	r2, [r7, #4]
    7c4a:	0e12      	lsrs	r2, r2, #24
    7c4c:	b2d2      	uxtb	r2, r2
    7c4e:	701a      	strb	r2, [r3, #0]
			break;
    7c50:	e00b      	b.n	7c6a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    7c52:	231f      	movs	r3, #31
    7c54:	18fb      	adds	r3, r7, r3
    7c56:	2202      	movs	r2, #2
    7c58:	701a      	strb	r2, [r3, #0]
    7c5a:	e006      	b.n	7c6a <put_fat+0x222>
			if (res != FR_OK) break;
    7c5c:	46c0      	nop			; (mov r8, r8)
    7c5e:	e004      	b.n	7c6a <put_fat+0x222>
			if (res != FR_OK) break;
    7c60:	46c0      	nop			; (mov r8, r8)
    7c62:	e002      	b.n	7c6a <put_fat+0x222>
			if (res != FR_OK) break;
    7c64:	46c0      	nop			; (mov r8, r8)
    7c66:	e000      	b.n	7c6a <put_fat+0x222>
			if (res != FR_OK) break;
    7c68:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    7c6a:	68fb      	ldr	r3, [r7, #12]
    7c6c:	2201      	movs	r2, #1
    7c6e:	711a      	strb	r2, [r3, #4]
	}

	return res;
    7c70:	231f      	movs	r3, #31
    7c72:	18fb      	adds	r3, r7, r3
    7c74:	781b      	ldrb	r3, [r3, #0]
}
    7c76:	0018      	movs	r0, r3
    7c78:	46bd      	mov	sp, r7
    7c7a:	b009      	add	sp, #36	; 0x24
    7c7c:	bd90      	pop	{r4, r7, pc}
    7c7e:	46c0      	nop			; (mov r8, r8)
    7c80:	00007645 	.word	0x00007645

00007c84 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7c84:	b590      	push	{r4, r7, lr}
    7c86:	b085      	sub	sp, #20
    7c88:	af00      	add	r7, sp, #0
    7c8a:	6078      	str	r0, [r7, #4]
    7c8c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7c8e:	683b      	ldr	r3, [r7, #0]
    7c90:	2b01      	cmp	r3, #1
    7c92:	d904      	bls.n	7c9e <remove_chain+0x1a>
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	699a      	ldr	r2, [r3, #24]
    7c98:	683b      	ldr	r3, [r7, #0]
    7c9a:	429a      	cmp	r2, r3
    7c9c:	d804      	bhi.n	7ca8 <remove_chain+0x24>
		res = FR_INT_ERR;
    7c9e:	230f      	movs	r3, #15
    7ca0:	18fb      	adds	r3, r7, r3
    7ca2:	2202      	movs	r2, #2
    7ca4:	701a      	strb	r2, [r3, #0]
    7ca6:	e045      	b.n	7d34 <remove_chain+0xb0>

	} else {
		res = FR_OK;
    7ca8:	230f      	movs	r3, #15
    7caa:	18fb      	adds	r3, r7, r3
    7cac:	2200      	movs	r2, #0
    7cae:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7cb0:	e037      	b.n	7d22 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7cb2:	683a      	ldr	r2, [r7, #0]
    7cb4:	687b      	ldr	r3, [r7, #4]
    7cb6:	0011      	movs	r1, r2
    7cb8:	0018      	movs	r0, r3
    7cba:	4b22      	ldr	r3, [pc, #136]	; (7d44 <remove_chain+0xc0>)
    7cbc:	4798      	blx	r3
    7cbe:	0003      	movs	r3, r0
    7cc0:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    7cc2:	68bb      	ldr	r3, [r7, #8]
    7cc4:	2b00      	cmp	r3, #0
    7cc6:	d032      	beq.n	7d2e <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7cc8:	68bb      	ldr	r3, [r7, #8]
    7cca:	2b01      	cmp	r3, #1
    7ccc:	d104      	bne.n	7cd8 <remove_chain+0x54>
    7cce:	230f      	movs	r3, #15
    7cd0:	18fb      	adds	r3, r7, r3
    7cd2:	2202      	movs	r2, #2
    7cd4:	701a      	strb	r2, [r3, #0]
    7cd6:	e02d      	b.n	7d34 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7cd8:	68bb      	ldr	r3, [r7, #8]
    7cda:	3301      	adds	r3, #1
    7cdc:	d104      	bne.n	7ce8 <remove_chain+0x64>
    7cde:	230f      	movs	r3, #15
    7ce0:	18fb      	adds	r3, r7, r3
    7ce2:	2201      	movs	r2, #1
    7ce4:	701a      	strb	r2, [r3, #0]
    7ce6:	e025      	b.n	7d34 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7ce8:	230f      	movs	r3, #15
    7cea:	18fc      	adds	r4, r7, r3
    7cec:	6839      	ldr	r1, [r7, #0]
    7cee:	687b      	ldr	r3, [r7, #4]
    7cf0:	2200      	movs	r2, #0
    7cf2:	0018      	movs	r0, r3
    7cf4:	4b14      	ldr	r3, [pc, #80]	; (7d48 <remove_chain+0xc4>)
    7cf6:	4798      	blx	r3
    7cf8:	0003      	movs	r3, r0
    7cfa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7cfc:	230f      	movs	r3, #15
    7cfe:	18fb      	adds	r3, r7, r3
    7d00:	781b      	ldrb	r3, [r3, #0]
    7d02:	2b00      	cmp	r3, #0
    7d04:	d115      	bne.n	7d32 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7d06:	687b      	ldr	r3, [r7, #4]
    7d08:	691b      	ldr	r3, [r3, #16]
    7d0a:	3301      	adds	r3, #1
    7d0c:	d007      	beq.n	7d1e <remove_chain+0x9a>
				fs->free_clust++;
    7d0e:	687b      	ldr	r3, [r7, #4]
    7d10:	691b      	ldr	r3, [r3, #16]
    7d12:	1c5a      	adds	r2, r3, #1
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    7d18:	687b      	ldr	r3, [r7, #4]
    7d1a:	2201      	movs	r2, #1
    7d1c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    7d1e:	68bb      	ldr	r3, [r7, #8]
    7d20:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7d22:	687b      	ldr	r3, [r7, #4]
    7d24:	699a      	ldr	r2, [r3, #24]
    7d26:	683b      	ldr	r3, [r7, #0]
    7d28:	429a      	cmp	r2, r3
    7d2a:	d8c2      	bhi.n	7cb2 <remove_chain+0x2e>
    7d2c:	e002      	b.n	7d34 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    7d2e:	46c0      	nop			; (mov r8, r8)
    7d30:	e000      	b.n	7d34 <remove_chain+0xb0>
			if (res != FR_OK) break;
    7d32:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    7d34:	230f      	movs	r3, #15
    7d36:	18fb      	adds	r3, r7, r3
    7d38:	781b      	ldrb	r3, [r3, #0]
}
    7d3a:	0018      	movs	r0, r3
    7d3c:	46bd      	mov	sp, r7
    7d3e:	b005      	add	sp, #20
    7d40:	bd90      	pop	{r4, r7, pc}
    7d42:	46c0      	nop			; (mov r8, r8)
    7d44:	000078dd 	.word	0x000078dd
    7d48:	00007a49 	.word	0x00007a49

00007d4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7d4c:	b590      	push	{r4, r7, lr}
    7d4e:	b087      	sub	sp, #28
    7d50:	af00      	add	r7, sp, #0
    7d52:	6078      	str	r0, [r7, #4]
    7d54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    7d56:	683b      	ldr	r3, [r7, #0]
    7d58:	2b00      	cmp	r3, #0
    7d5a:	d10d      	bne.n	7d78 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    7d5c:	687b      	ldr	r3, [r7, #4]
    7d5e:	68db      	ldr	r3, [r3, #12]
    7d60:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7d62:	693b      	ldr	r3, [r7, #16]
    7d64:	2b00      	cmp	r3, #0
    7d66:	d004      	beq.n	7d72 <create_chain+0x26>
    7d68:	687b      	ldr	r3, [r7, #4]
    7d6a:	699a      	ldr	r2, [r3, #24]
    7d6c:	693b      	ldr	r3, [r7, #16]
    7d6e:	429a      	cmp	r2, r3
    7d70:	d818      	bhi.n	7da4 <create_chain+0x58>
    7d72:	2301      	movs	r3, #1
    7d74:	613b      	str	r3, [r7, #16]
    7d76:	e015      	b.n	7da4 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7d78:	683a      	ldr	r2, [r7, #0]
    7d7a:	687b      	ldr	r3, [r7, #4]
    7d7c:	0011      	movs	r1, r2
    7d7e:	0018      	movs	r0, r3
    7d80:	4b3e      	ldr	r3, [pc, #248]	; (7e7c <create_chain+0x130>)
    7d82:	4798      	blx	r3
    7d84:	0003      	movs	r3, r0
    7d86:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7d88:	68bb      	ldr	r3, [r7, #8]
    7d8a:	2b01      	cmp	r3, #1
    7d8c:	d801      	bhi.n	7d92 <create_chain+0x46>
    7d8e:	2301      	movs	r3, #1
    7d90:	e070      	b.n	7e74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7d92:	687b      	ldr	r3, [r7, #4]
    7d94:	699a      	ldr	r2, [r3, #24]
    7d96:	68bb      	ldr	r3, [r7, #8]
    7d98:	429a      	cmp	r2, r3
    7d9a:	d901      	bls.n	7da0 <create_chain+0x54>
    7d9c:	68bb      	ldr	r3, [r7, #8]
    7d9e:	e069      	b.n	7e74 <create_chain+0x128>
		scl = clst;
    7da0:	683b      	ldr	r3, [r7, #0]
    7da2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    7da4:	693b      	ldr	r3, [r7, #16]
    7da6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    7da8:	697b      	ldr	r3, [r7, #20]
    7daa:	3301      	adds	r3, #1
    7dac:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7dae:	687b      	ldr	r3, [r7, #4]
    7db0:	699a      	ldr	r2, [r3, #24]
    7db2:	697b      	ldr	r3, [r7, #20]
    7db4:	429a      	cmp	r2, r3
    7db6:	d807      	bhi.n	7dc8 <create_chain+0x7c>
			ncl = 2;
    7db8:	2302      	movs	r3, #2
    7dba:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7dbc:	697a      	ldr	r2, [r7, #20]
    7dbe:	693b      	ldr	r3, [r7, #16]
    7dc0:	429a      	cmp	r2, r3
    7dc2:	d901      	bls.n	7dc8 <create_chain+0x7c>
    7dc4:	2300      	movs	r3, #0
    7dc6:	e055      	b.n	7e74 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7dc8:	697a      	ldr	r2, [r7, #20]
    7dca:	687b      	ldr	r3, [r7, #4]
    7dcc:	0011      	movs	r1, r2
    7dce:	0018      	movs	r0, r3
    7dd0:	4b2a      	ldr	r3, [pc, #168]	; (7e7c <create_chain+0x130>)
    7dd2:	4798      	blx	r3
    7dd4:	0003      	movs	r3, r0
    7dd6:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    7dd8:	68bb      	ldr	r3, [r7, #8]
    7dda:	2b00      	cmp	r3, #0
    7ddc:	d00d      	beq.n	7dfa <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7dde:	68bb      	ldr	r3, [r7, #8]
    7de0:	3301      	adds	r3, #1
    7de2:	d002      	beq.n	7dea <create_chain+0x9e>
    7de4:	68bb      	ldr	r3, [r7, #8]
    7de6:	2b01      	cmp	r3, #1
    7de8:	d101      	bne.n	7dee <create_chain+0xa2>
			return cs;
    7dea:	68bb      	ldr	r3, [r7, #8]
    7dec:	e042      	b.n	7e74 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    7dee:	697a      	ldr	r2, [r7, #20]
    7df0:	693b      	ldr	r3, [r7, #16]
    7df2:	429a      	cmp	r2, r3
    7df4:	d1d8      	bne.n	7da8 <create_chain+0x5c>
    7df6:	2300      	movs	r3, #0
    7df8:	e03c      	b.n	7e74 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    7dfa:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7dfc:	230f      	movs	r3, #15
    7dfe:	18fc      	adds	r4, r7, r3
    7e00:	4a1f      	ldr	r2, [pc, #124]	; (7e80 <create_chain+0x134>)
    7e02:	6979      	ldr	r1, [r7, #20]
    7e04:	687b      	ldr	r3, [r7, #4]
    7e06:	0018      	movs	r0, r3
    7e08:	4b1e      	ldr	r3, [pc, #120]	; (7e84 <create_chain+0x138>)
    7e0a:	4798      	blx	r3
    7e0c:	0003      	movs	r3, r0
    7e0e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    7e10:	230f      	movs	r3, #15
    7e12:	18fb      	adds	r3, r7, r3
    7e14:	781b      	ldrb	r3, [r3, #0]
    7e16:	2b00      	cmp	r3, #0
    7e18:	d10c      	bne.n	7e34 <create_chain+0xe8>
    7e1a:	683b      	ldr	r3, [r7, #0]
    7e1c:	2b00      	cmp	r3, #0
    7e1e:	d009      	beq.n	7e34 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    7e20:	230f      	movs	r3, #15
    7e22:	18fc      	adds	r4, r7, r3
    7e24:	697a      	ldr	r2, [r7, #20]
    7e26:	6839      	ldr	r1, [r7, #0]
    7e28:	687b      	ldr	r3, [r7, #4]
    7e2a:	0018      	movs	r0, r3
    7e2c:	4b15      	ldr	r3, [pc, #84]	; (7e84 <create_chain+0x138>)
    7e2e:	4798      	blx	r3
    7e30:	0003      	movs	r3, r0
    7e32:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    7e34:	230f      	movs	r3, #15
    7e36:	18fb      	adds	r3, r7, r3
    7e38:	781b      	ldrb	r3, [r3, #0]
    7e3a:	2b00      	cmp	r3, #0
    7e3c:	d10f      	bne.n	7e5e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    7e3e:	687b      	ldr	r3, [r7, #4]
    7e40:	697a      	ldr	r2, [r7, #20]
    7e42:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    7e44:	687b      	ldr	r3, [r7, #4]
    7e46:	691b      	ldr	r3, [r3, #16]
    7e48:	3301      	adds	r3, #1
    7e4a:	d012      	beq.n	7e72 <create_chain+0x126>
			fs->free_clust--;
    7e4c:	687b      	ldr	r3, [r7, #4]
    7e4e:	691b      	ldr	r3, [r3, #16]
    7e50:	1e5a      	subs	r2, r3, #1
    7e52:	687b      	ldr	r3, [r7, #4]
    7e54:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    7e56:	687b      	ldr	r3, [r7, #4]
    7e58:	2201      	movs	r2, #1
    7e5a:	715a      	strb	r2, [r3, #5]
    7e5c:	e009      	b.n	7e72 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7e5e:	230f      	movs	r3, #15
    7e60:	18fb      	adds	r3, r7, r3
    7e62:	781b      	ldrb	r3, [r3, #0]
    7e64:	2b01      	cmp	r3, #1
    7e66:	d102      	bne.n	7e6e <create_chain+0x122>
    7e68:	2301      	movs	r3, #1
    7e6a:	425b      	negs	r3, r3
    7e6c:	e000      	b.n	7e70 <create_chain+0x124>
    7e6e:	2301      	movs	r3, #1
    7e70:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    7e72:	697b      	ldr	r3, [r7, #20]
}
    7e74:	0018      	movs	r0, r3
    7e76:	46bd      	mov	sp, r7
    7e78:	b007      	add	sp, #28
    7e7a:	bd90      	pop	{r4, r7, pc}
    7e7c:	000078dd 	.word	0x000078dd
    7e80:	0fffffff 	.word	0x0fffffff
    7e84:	00007a49 	.word	0x00007a49

00007e88 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7e88:	b580      	push	{r7, lr}
    7e8a:	b084      	sub	sp, #16
    7e8c:	af00      	add	r7, sp, #0
    7e8e:	6078      	str	r0, [r7, #4]
    7e90:	000a      	movs	r2, r1
    7e92:	1cbb      	adds	r3, r7, #2
    7e94:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7e96:	687b      	ldr	r3, [r7, #4]
    7e98:	1cba      	adds	r2, r7, #2
    7e9a:	8812      	ldrh	r2, [r2, #0]
    7e9c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7e9e:	687b      	ldr	r3, [r7, #4]
    7ea0:	689b      	ldr	r3, [r3, #8]
    7ea2:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7ea4:	68fb      	ldr	r3, [r7, #12]
    7ea6:	2b01      	cmp	r3, #1
    7ea8:	d005      	beq.n	7eb6 <dir_sdi+0x2e>
    7eaa:	687b      	ldr	r3, [r7, #4]
    7eac:	681b      	ldr	r3, [r3, #0]
    7eae:	699a      	ldr	r2, [r3, #24]
    7eb0:	68fb      	ldr	r3, [r7, #12]
    7eb2:	429a      	cmp	r2, r3
    7eb4:	d801      	bhi.n	7eba <dir_sdi+0x32>
		return FR_INT_ERR;
    7eb6:	2302      	movs	r3, #2
    7eb8:	e075      	b.n	7fa6 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7eba:	68fb      	ldr	r3, [r7, #12]
    7ebc:	2b00      	cmp	r3, #0
    7ebe:	d108      	bne.n	7ed2 <dir_sdi+0x4a>
    7ec0:	687b      	ldr	r3, [r7, #4]
    7ec2:	681b      	ldr	r3, [r3, #0]
    7ec4:	781b      	ldrb	r3, [r3, #0]
    7ec6:	2b03      	cmp	r3, #3
    7ec8:	d103      	bne.n	7ed2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    7eca:	687b      	ldr	r3, [r7, #4]
    7ecc:	681b      	ldr	r3, [r3, #0]
    7ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ed0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7ed2:	68fb      	ldr	r3, [r7, #12]
    7ed4:	2b00      	cmp	r3, #0
    7ed6:	d116      	bne.n	7f06 <dir_sdi+0x7e>
		dj->clust = clst;
    7ed8:	687b      	ldr	r3, [r7, #4]
    7eda:	68fa      	ldr	r2, [r7, #12]
    7edc:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7ede:	687b      	ldr	r3, [r7, #4]
    7ee0:	681b      	ldr	r3, [r3, #0]
    7ee2:	891b      	ldrh	r3, [r3, #8]
    7ee4:	1cba      	adds	r2, r7, #2
    7ee6:	8812      	ldrh	r2, [r2, #0]
    7ee8:	429a      	cmp	r2, r3
    7eea:	d301      	bcc.n	7ef0 <dir_sdi+0x68>
			return FR_INT_ERR;
    7eec:	2302      	movs	r3, #2
    7eee:	e05a      	b.n	7fa6 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7ef0:	687b      	ldr	r3, [r7, #4]
    7ef2:	681b      	ldr	r3, [r3, #0]
    7ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ef6:	1cba      	adds	r2, r7, #2
    7ef8:	8812      	ldrh	r2, [r2, #0]
    7efa:	0912      	lsrs	r2, r2, #4
    7efc:	b292      	uxth	r2, r2
    7efe:	189a      	adds	r2, r3, r2
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	611a      	str	r2, [r3, #16]
    7f04:	e042      	b.n	7f8c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7f06:	687b      	ldr	r3, [r7, #4]
    7f08:	681b      	ldr	r3, [r3, #0]
    7f0a:	789b      	ldrb	r3, [r3, #2]
    7f0c:	b29a      	uxth	r2, r3
    7f0e:	230a      	movs	r3, #10
    7f10:	18fb      	adds	r3, r7, r3
    7f12:	0112      	lsls	r2, r2, #4
    7f14:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7f16:	e020      	b.n	7f5a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	681b      	ldr	r3, [r3, #0]
    7f1c:	68fa      	ldr	r2, [r7, #12]
    7f1e:	0011      	movs	r1, r2
    7f20:	0018      	movs	r0, r3
    7f22:	4b23      	ldr	r3, [pc, #140]	; (7fb0 <dir_sdi+0x128>)
    7f24:	4798      	blx	r3
    7f26:	0003      	movs	r3, r0
    7f28:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7f2a:	68fb      	ldr	r3, [r7, #12]
    7f2c:	3301      	adds	r3, #1
    7f2e:	d101      	bne.n	7f34 <dir_sdi+0xac>
    7f30:	2301      	movs	r3, #1
    7f32:	e038      	b.n	7fa6 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7f34:	68fb      	ldr	r3, [r7, #12]
    7f36:	2b01      	cmp	r3, #1
    7f38:	d905      	bls.n	7f46 <dir_sdi+0xbe>
    7f3a:	687b      	ldr	r3, [r7, #4]
    7f3c:	681b      	ldr	r3, [r3, #0]
    7f3e:	699a      	ldr	r2, [r3, #24]
    7f40:	68fb      	ldr	r3, [r7, #12]
    7f42:	429a      	cmp	r2, r3
    7f44:	d801      	bhi.n	7f4a <dir_sdi+0xc2>
				return FR_INT_ERR;
    7f46:	2302      	movs	r3, #2
    7f48:	e02d      	b.n	7fa6 <dir_sdi+0x11e>
			idx -= ic;
    7f4a:	1cbb      	adds	r3, r7, #2
    7f4c:	1cb9      	adds	r1, r7, #2
    7f4e:	220a      	movs	r2, #10
    7f50:	18ba      	adds	r2, r7, r2
    7f52:	8809      	ldrh	r1, [r1, #0]
    7f54:	8812      	ldrh	r2, [r2, #0]
    7f56:	1a8a      	subs	r2, r1, r2
    7f58:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7f5a:	1cba      	adds	r2, r7, #2
    7f5c:	230a      	movs	r3, #10
    7f5e:	18fb      	adds	r3, r7, r3
    7f60:	8812      	ldrh	r2, [r2, #0]
    7f62:	881b      	ldrh	r3, [r3, #0]
    7f64:	429a      	cmp	r2, r3
    7f66:	d2d7      	bcs.n	7f18 <dir_sdi+0x90>
		}
		dj->clust = clst;
    7f68:	687b      	ldr	r3, [r7, #4]
    7f6a:	68fa      	ldr	r2, [r7, #12]
    7f6c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7f6e:	687b      	ldr	r3, [r7, #4]
    7f70:	681b      	ldr	r3, [r3, #0]
    7f72:	68fa      	ldr	r2, [r7, #12]
    7f74:	0011      	movs	r1, r2
    7f76:	0018      	movs	r0, r3
    7f78:	4b0e      	ldr	r3, [pc, #56]	; (7fb4 <dir_sdi+0x12c>)
    7f7a:	4798      	blx	r3
    7f7c:	0002      	movs	r2, r0
    7f7e:	1cbb      	adds	r3, r7, #2
    7f80:	881b      	ldrh	r3, [r3, #0]
    7f82:	091b      	lsrs	r3, r3, #4
    7f84:	b29b      	uxth	r3, r3
    7f86:	18d2      	adds	r2, r2, r3
    7f88:	687b      	ldr	r3, [r7, #4]
    7f8a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7f8c:	687b      	ldr	r3, [r7, #4]
    7f8e:	681b      	ldr	r3, [r3, #0]
    7f90:	3330      	adds	r3, #48	; 0x30
    7f92:	001a      	movs	r2, r3
    7f94:	1cbb      	adds	r3, r7, #2
    7f96:	881b      	ldrh	r3, [r3, #0]
    7f98:	210f      	movs	r1, #15
    7f9a:	400b      	ands	r3, r1
    7f9c:	015b      	lsls	r3, r3, #5
    7f9e:	18d2      	adds	r2, r2, r3
    7fa0:	687b      	ldr	r3, [r7, #4]
    7fa2:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    7fa4:	2300      	movs	r3, #0
}
    7fa6:	0018      	movs	r0, r3
    7fa8:	46bd      	mov	sp, r7
    7faa:	b004      	add	sp, #16
    7fac:	bd80      	pop	{r7, pc}
    7fae:	46c0      	nop			; (mov r8, r8)
    7fb0:	000078dd 	.word	0x000078dd
    7fb4:	000078a5 	.word	0x000078a5

00007fb8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    7fb8:	b590      	push	{r4, r7, lr}
    7fba:	b085      	sub	sp, #20
    7fbc:	af00      	add	r7, sp, #0
    7fbe:	6078      	str	r0, [r7, #4]
    7fc0:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    7fc2:	687b      	ldr	r3, [r7, #4]
    7fc4:	88da      	ldrh	r2, [r3, #6]
    7fc6:	2308      	movs	r3, #8
    7fc8:	18fb      	adds	r3, r7, r3
    7fca:	3201      	adds	r2, #1
    7fcc:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7fce:	2308      	movs	r3, #8
    7fd0:	18fb      	adds	r3, r7, r3
    7fd2:	881b      	ldrh	r3, [r3, #0]
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d003      	beq.n	7fe0 <dir_next+0x28>
    7fd8:	687b      	ldr	r3, [r7, #4]
    7fda:	691b      	ldr	r3, [r3, #16]
    7fdc:	2b00      	cmp	r3, #0
    7fde:	d101      	bne.n	7fe4 <dir_next+0x2c>
		return FR_NO_FILE;
    7fe0:	2304      	movs	r3, #4
    7fe2:	e0d2      	b.n	818a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7fe4:	2308      	movs	r3, #8
    7fe6:	18fb      	adds	r3, r7, r3
    7fe8:	881b      	ldrh	r3, [r3, #0]
    7fea:	220f      	movs	r2, #15
    7fec:	4013      	ands	r3, r2
    7fee:	b29b      	uxth	r3, r3
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	d000      	beq.n	7ff6 <dir_next+0x3e>
    7ff4:	e0b6      	b.n	8164 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    7ff6:	687b      	ldr	r3, [r7, #4]
    7ff8:	691b      	ldr	r3, [r3, #16]
    7ffa:	1c5a      	adds	r2, r3, #1
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	68db      	ldr	r3, [r3, #12]
    8004:	2b00      	cmp	r3, #0
    8006:	d10a      	bne.n	801e <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    8008:	687b      	ldr	r3, [r7, #4]
    800a:	681b      	ldr	r3, [r3, #0]
    800c:	891b      	ldrh	r3, [r3, #8]
    800e:	2208      	movs	r2, #8
    8010:	18ba      	adds	r2, r7, r2
    8012:	8812      	ldrh	r2, [r2, #0]
    8014:	429a      	cmp	r2, r3
    8016:	d200      	bcs.n	801a <dir_next+0x62>
    8018:	e0a4      	b.n	8164 <dir_next+0x1ac>
				return FR_NO_FILE;
    801a:	2304      	movs	r3, #4
    801c:	e0b5      	b.n	818a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    801e:	2308      	movs	r3, #8
    8020:	18fb      	adds	r3, r7, r3
    8022:	881b      	ldrh	r3, [r3, #0]
    8024:	091b      	lsrs	r3, r3, #4
    8026:	b29b      	uxth	r3, r3
    8028:	001a      	movs	r2, r3
    802a:	687b      	ldr	r3, [r7, #4]
    802c:	681b      	ldr	r3, [r3, #0]
    802e:	789b      	ldrb	r3, [r3, #2]
    8030:	3b01      	subs	r3, #1
    8032:	4013      	ands	r3, r2
    8034:	d000      	beq.n	8038 <dir_next+0x80>
    8036:	e095      	b.n	8164 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    8038:	687b      	ldr	r3, [r7, #4]
    803a:	681a      	ldr	r2, [r3, #0]
    803c:	687b      	ldr	r3, [r7, #4]
    803e:	68db      	ldr	r3, [r3, #12]
    8040:	0019      	movs	r1, r3
    8042:	0010      	movs	r0, r2
    8044:	4b53      	ldr	r3, [pc, #332]	; (8194 <dir_next+0x1dc>)
    8046:	4798      	blx	r3
    8048:	0003      	movs	r3, r0
    804a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    804c:	68fb      	ldr	r3, [r7, #12]
    804e:	2b01      	cmp	r3, #1
    8050:	d801      	bhi.n	8056 <dir_next+0x9e>
    8052:	2302      	movs	r3, #2
    8054:	e099      	b.n	818a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    8056:	68fb      	ldr	r3, [r7, #12]
    8058:	3301      	adds	r3, #1
    805a:	d101      	bne.n	8060 <dir_next+0xa8>
    805c:	2301      	movs	r3, #1
    805e:	e094      	b.n	818a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    8060:	687b      	ldr	r3, [r7, #4]
    8062:	681b      	ldr	r3, [r3, #0]
    8064:	699a      	ldr	r2, [r3, #24]
    8066:	68fb      	ldr	r3, [r7, #12]
    8068:	429a      	cmp	r2, r3
    806a:	d900      	bls.n	806e <dir_next+0xb6>
    806c:	e06d      	b.n	814a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    806e:	683b      	ldr	r3, [r7, #0]
    8070:	2b00      	cmp	r3, #0
    8072:	d101      	bne.n	8078 <dir_next+0xc0>
    8074:	2304      	movs	r3, #4
    8076:	e088      	b.n	818a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    8078:	687b      	ldr	r3, [r7, #4]
    807a:	681a      	ldr	r2, [r3, #0]
    807c:	687b      	ldr	r3, [r7, #4]
    807e:	68db      	ldr	r3, [r3, #12]
    8080:	0019      	movs	r1, r3
    8082:	0010      	movs	r0, r2
    8084:	4b44      	ldr	r3, [pc, #272]	; (8198 <dir_next+0x1e0>)
    8086:	4798      	blx	r3
    8088:	0003      	movs	r3, r0
    808a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    808c:	68fb      	ldr	r3, [r7, #12]
    808e:	2b00      	cmp	r3, #0
    8090:	d101      	bne.n	8096 <dir_next+0xde>
    8092:	2307      	movs	r3, #7
    8094:	e079      	b.n	818a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    8096:	68fb      	ldr	r3, [r7, #12]
    8098:	2b01      	cmp	r3, #1
    809a:	d101      	bne.n	80a0 <dir_next+0xe8>
    809c:	2302      	movs	r3, #2
    809e:	e074      	b.n	818a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    80a0:	68fb      	ldr	r3, [r7, #12]
    80a2:	3301      	adds	r3, #1
    80a4:	d101      	bne.n	80aa <dir_next+0xf2>
    80a6:	2301      	movs	r3, #1
    80a8:	e06f      	b.n	818a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    80aa:	687b      	ldr	r3, [r7, #4]
    80ac:	681b      	ldr	r3, [r3, #0]
    80ae:	2100      	movs	r1, #0
    80b0:	0018      	movs	r0, r3
    80b2:	4b3a      	ldr	r3, [pc, #232]	; (819c <dir_next+0x1e4>)
    80b4:	4798      	blx	r3
    80b6:	1e03      	subs	r3, r0, #0
    80b8:	d001      	beq.n	80be <dir_next+0x106>
    80ba:	2301      	movs	r3, #1
    80bc:	e065      	b.n	818a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    80be:	687b      	ldr	r3, [r7, #4]
    80c0:	681b      	ldr	r3, [r3, #0]
    80c2:	3330      	adds	r3, #48	; 0x30
    80c4:	0018      	movs	r0, r3
    80c6:	2380      	movs	r3, #128	; 0x80
    80c8:	009b      	lsls	r3, r3, #2
    80ca:	001a      	movs	r2, r3
    80cc:	2100      	movs	r1, #0
    80ce:	4b34      	ldr	r3, [pc, #208]	; (81a0 <dir_next+0x1e8>)
    80d0:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    80d2:	687b      	ldr	r3, [r7, #4]
    80d4:	681c      	ldr	r4, [r3, #0]
    80d6:	687b      	ldr	r3, [r7, #4]
    80d8:	681b      	ldr	r3, [r3, #0]
    80da:	68fa      	ldr	r2, [r7, #12]
    80dc:	0011      	movs	r1, r2
    80de:	0018      	movs	r0, r3
    80e0:	4b30      	ldr	r3, [pc, #192]	; (81a4 <dir_next+0x1ec>)
    80e2:	4798      	blx	r3
    80e4:	0003      	movs	r3, r0
    80e6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    80e8:	230b      	movs	r3, #11
    80ea:	18fb      	adds	r3, r7, r3
    80ec:	2200      	movs	r2, #0
    80ee:	701a      	strb	r2, [r3, #0]
    80f0:	e019      	b.n	8126 <dir_next+0x16e>
						dj->fs->wflag = 1;
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	681b      	ldr	r3, [r3, #0]
    80f6:	2201      	movs	r2, #1
    80f8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    80fa:	687b      	ldr	r3, [r7, #4]
    80fc:	681b      	ldr	r3, [r3, #0]
    80fe:	2100      	movs	r1, #0
    8100:	0018      	movs	r0, r3
    8102:	4b26      	ldr	r3, [pc, #152]	; (819c <dir_next+0x1e4>)
    8104:	4798      	blx	r3
    8106:	1e03      	subs	r3, r0, #0
    8108:	d001      	beq.n	810e <dir_next+0x156>
    810a:	2301      	movs	r3, #1
    810c:	e03d      	b.n	818a <dir_next+0x1d2>
						dj->fs->winsect++;
    810e:	687b      	ldr	r3, [r7, #4]
    8110:	681b      	ldr	r3, [r3, #0]
    8112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8114:	3201      	adds	r2, #1
    8116:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    8118:	230b      	movs	r3, #11
    811a:	18fb      	adds	r3, r7, r3
    811c:	781a      	ldrb	r2, [r3, #0]
    811e:	230b      	movs	r3, #11
    8120:	18fb      	adds	r3, r7, r3
    8122:	3201      	adds	r2, #1
    8124:	701a      	strb	r2, [r3, #0]
    8126:	687b      	ldr	r3, [r7, #4]
    8128:	681b      	ldr	r3, [r3, #0]
    812a:	789b      	ldrb	r3, [r3, #2]
    812c:	220b      	movs	r2, #11
    812e:	18ba      	adds	r2, r7, r2
    8130:	7812      	ldrb	r2, [r2, #0]
    8132:	429a      	cmp	r2, r3
    8134:	d3dd      	bcc.n	80f2 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    8136:	687b      	ldr	r3, [r7, #4]
    8138:	681b      	ldr	r3, [r3, #0]
    813a:	687a      	ldr	r2, [r7, #4]
    813c:	6812      	ldr	r2, [r2, #0]
    813e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    8140:	220b      	movs	r2, #11
    8142:	18ba      	adds	r2, r7, r2
    8144:	7812      	ldrb	r2, [r2, #0]
    8146:	1a8a      	subs	r2, r1, r2
    8148:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    814a:	687b      	ldr	r3, [r7, #4]
    814c:	68fa      	ldr	r2, [r7, #12]
    814e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    8150:	687b      	ldr	r3, [r7, #4]
    8152:	681b      	ldr	r3, [r3, #0]
    8154:	68fa      	ldr	r2, [r7, #12]
    8156:	0011      	movs	r1, r2
    8158:	0018      	movs	r0, r3
    815a:	4b12      	ldr	r3, [pc, #72]	; (81a4 <dir_next+0x1ec>)
    815c:	4798      	blx	r3
    815e:	0002      	movs	r2, r0
    8160:	687b      	ldr	r3, [r7, #4]
    8162:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    8164:	687b      	ldr	r3, [r7, #4]
    8166:	2208      	movs	r2, #8
    8168:	18ba      	adds	r2, r7, r2
    816a:	8812      	ldrh	r2, [r2, #0]
    816c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    816e:	687b      	ldr	r3, [r7, #4]
    8170:	681b      	ldr	r3, [r3, #0]
    8172:	3330      	adds	r3, #48	; 0x30
    8174:	001a      	movs	r2, r3
    8176:	2308      	movs	r3, #8
    8178:	18fb      	adds	r3, r7, r3
    817a:	881b      	ldrh	r3, [r3, #0]
    817c:	210f      	movs	r1, #15
    817e:	400b      	ands	r3, r1
    8180:	015b      	lsls	r3, r3, #5
    8182:	18d2      	adds	r2, r2, r3
    8184:	687b      	ldr	r3, [r7, #4]
    8186:	615a      	str	r2, [r3, #20]

	return FR_OK;
    8188:	2300      	movs	r3, #0
}
    818a:	0018      	movs	r0, r3
    818c:	46bd      	mov	sp, r7
    818e:	b005      	add	sp, #20
    8190:	bd90      	pop	{r4, r7, pc}
    8192:	46c0      	nop			; (mov r8, r8)
    8194:	000078dd 	.word	0x000078dd
    8198:	00007d4d 	.word	0x00007d4d
    819c:	00007645 	.word	0x00007645
    81a0:	00007599 	.word	0x00007599
    81a4:	000078a5 	.word	0x000078a5

000081a8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    81a8:	b590      	push	{r4, r7, lr}
    81aa:	b087      	sub	sp, #28
    81ac:	af00      	add	r7, sp, #0
    81ae:	6078      	str	r0, [r7, #4]
    81b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    81b2:	683b      	ldr	r3, [r7, #0]
    81b4:	781b      	ldrb	r3, [r3, #0]
    81b6:	001a      	movs	r2, r3
    81b8:	2340      	movs	r3, #64	; 0x40
    81ba:	439a      	bics	r2, r3
    81bc:	0013      	movs	r3, r2
    81be:	1e5a      	subs	r2, r3, #1
    81c0:	0013      	movs	r3, r2
    81c2:	005b      	lsls	r3, r3, #1
    81c4:	189b      	adds	r3, r3, r2
    81c6:	009b      	lsls	r3, r3, #2
    81c8:	189b      	adds	r3, r3, r2
    81ca:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    81cc:	2300      	movs	r3, #0
    81ce:	613b      	str	r3, [r7, #16]
    81d0:	230e      	movs	r3, #14
    81d2:	18fb      	adds	r3, r7, r3
    81d4:	2201      	movs	r2, #1
    81d6:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    81d8:	4a31      	ldr	r2, [pc, #196]	; (82a0 <cmp_lfn+0xf8>)
    81da:	693b      	ldr	r3, [r7, #16]
    81dc:	18d3      	adds	r3, r2, r3
    81de:	781b      	ldrb	r3, [r3, #0]
    81e0:	3301      	adds	r3, #1
    81e2:	683a      	ldr	r2, [r7, #0]
    81e4:	18d3      	adds	r3, r2, r3
    81e6:	781b      	ldrb	r3, [r3, #0]
    81e8:	021b      	lsls	r3, r3, #8
    81ea:	b21a      	sxth	r2, r3
    81ec:	492c      	ldr	r1, [pc, #176]	; (82a0 <cmp_lfn+0xf8>)
    81ee:	693b      	ldr	r3, [r7, #16]
    81f0:	18cb      	adds	r3, r1, r3
    81f2:	781b      	ldrb	r3, [r3, #0]
    81f4:	0019      	movs	r1, r3
    81f6:	683b      	ldr	r3, [r7, #0]
    81f8:	185b      	adds	r3, r3, r1
    81fa:	781b      	ldrb	r3, [r3, #0]
    81fc:	b21b      	sxth	r3, r3
    81fe:	4313      	orrs	r3, r2
    8200:	b21a      	sxth	r2, r3
    8202:	230c      	movs	r3, #12
    8204:	18fb      	adds	r3, r7, r3
    8206:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    8208:	230e      	movs	r3, #14
    820a:	18fb      	adds	r3, r7, r3
    820c:	881b      	ldrh	r3, [r3, #0]
    820e:	2b00      	cmp	r3, #0
    8210:	d01f      	beq.n	8252 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    8212:	230e      	movs	r3, #14
    8214:	18fc      	adds	r4, r7, r3
    8216:	230c      	movs	r3, #12
    8218:	18fb      	adds	r3, r7, r3
    821a:	881b      	ldrh	r3, [r3, #0]
    821c:	0018      	movs	r0, r3
    821e:	4b21      	ldr	r3, [pc, #132]	; (82a4 <cmp_lfn+0xfc>)
    8220:	4798      	blx	r3
    8222:	0003      	movs	r3, r0
    8224:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    8226:	697b      	ldr	r3, [r7, #20]
    8228:	2bfe      	cmp	r3, #254	; 0xfe
    822a:	d810      	bhi.n	824e <cmp_lfn+0xa6>
    822c:	697b      	ldr	r3, [r7, #20]
    822e:	1c5a      	adds	r2, r3, #1
    8230:	617a      	str	r2, [r7, #20]
    8232:	005b      	lsls	r3, r3, #1
    8234:	687a      	ldr	r2, [r7, #4]
    8236:	18d3      	adds	r3, r2, r3
    8238:	881b      	ldrh	r3, [r3, #0]
    823a:	0018      	movs	r0, r3
    823c:	4b19      	ldr	r3, [pc, #100]	; (82a4 <cmp_lfn+0xfc>)
    823e:	4798      	blx	r3
    8240:	0003      	movs	r3, r0
    8242:	001a      	movs	r2, r3
    8244:	230e      	movs	r3, #14
    8246:	18fb      	adds	r3, r7, r3
    8248:	881b      	ldrh	r3, [r3, #0]
    824a:	4293      	cmp	r3, r2
    824c:	d009      	beq.n	8262 <cmp_lfn+0xba>
				return 0;				/* Not matched */
    824e:	2300      	movs	r3, #0
    8250:	e022      	b.n	8298 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    8252:	230c      	movs	r3, #12
    8254:	18fb      	adds	r3, r7, r3
    8256:	881b      	ldrh	r3, [r3, #0]
    8258:	4a13      	ldr	r2, [pc, #76]	; (82a8 <cmp_lfn+0x100>)
    825a:	4293      	cmp	r3, r2
    825c:	d001      	beq.n	8262 <cmp_lfn+0xba>
    825e:	2300      	movs	r3, #0
    8260:	e01a      	b.n	8298 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    8262:	693b      	ldr	r3, [r7, #16]
    8264:	3301      	adds	r3, #1
    8266:	613b      	str	r3, [r7, #16]
    8268:	693b      	ldr	r3, [r7, #16]
    826a:	2b0c      	cmp	r3, #12
    826c:	d9b4      	bls.n	81d8 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    826e:	683b      	ldr	r3, [r7, #0]
    8270:	781b      	ldrb	r3, [r3, #0]
    8272:	001a      	movs	r2, r3
    8274:	2340      	movs	r3, #64	; 0x40
    8276:	4013      	ands	r3, r2
    8278:	d00d      	beq.n	8296 <cmp_lfn+0xee>
    827a:	230e      	movs	r3, #14
    827c:	18fb      	adds	r3, r7, r3
    827e:	881b      	ldrh	r3, [r3, #0]
    8280:	2b00      	cmp	r3, #0
    8282:	d008      	beq.n	8296 <cmp_lfn+0xee>
    8284:	697b      	ldr	r3, [r7, #20]
    8286:	005b      	lsls	r3, r3, #1
    8288:	687a      	ldr	r2, [r7, #4]
    828a:	18d3      	adds	r3, r2, r3
    828c:	881b      	ldrh	r3, [r3, #0]
    828e:	2b00      	cmp	r3, #0
    8290:	d001      	beq.n	8296 <cmp_lfn+0xee>
		return 0;
    8292:	2300      	movs	r3, #0
    8294:	e000      	b.n	8298 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    8296:	2301      	movs	r3, #1
}
    8298:	0018      	movs	r0, r3
    829a:	46bd      	mov	sp, r7
    829c:	b007      	add	sp, #28
    829e:	bd90      	pop	{r4, r7, pc}
    82a0:	0000c2b4 	.word	0x0000c2b4
    82a4:	0000ab65 	.word	0x0000ab65
    82a8:	0000ffff 	.word	0x0000ffff

000082ac <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE *dir			/* Pointer to the directory entry */
)
{
    82ac:	b580      	push	{r7, lr}
    82ae:	b086      	sub	sp, #24
    82b0:	af00      	add	r7, sp, #0
    82b2:	6078      	str	r0, [r7, #4]
    82b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    82b6:	683b      	ldr	r3, [r7, #0]
    82b8:	781b      	ldrb	r3, [r3, #0]
    82ba:	001a      	movs	r2, r3
    82bc:	233f      	movs	r3, #63	; 0x3f
    82be:	4013      	ands	r3, r2
    82c0:	1e5a      	subs	r2, r3, #1
    82c2:	0013      	movs	r3, r2
    82c4:	005b      	lsls	r3, r3, #1
    82c6:	189b      	adds	r3, r3, r2
    82c8:	009b      	lsls	r3, r3, #2
    82ca:	189b      	adds	r3, r3, r2
    82cc:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
    82ce:	2300      	movs	r3, #0
    82d0:	613b      	str	r3, [r7, #16]
    82d2:	230e      	movs	r3, #14
    82d4:	18fb      	adds	r3, r7, r3
    82d6:	2201      	movs	r2, #1
    82d8:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    82da:	4a2b      	ldr	r2, [pc, #172]	; (8388 <pick_lfn+0xdc>)
    82dc:	693b      	ldr	r3, [r7, #16]
    82de:	18d3      	adds	r3, r2, r3
    82e0:	781b      	ldrb	r3, [r3, #0]
    82e2:	3301      	adds	r3, #1
    82e4:	683a      	ldr	r2, [r7, #0]
    82e6:	18d3      	adds	r3, r2, r3
    82e8:	781b      	ldrb	r3, [r3, #0]
    82ea:	021b      	lsls	r3, r3, #8
    82ec:	b21a      	sxth	r2, r3
    82ee:	4926      	ldr	r1, [pc, #152]	; (8388 <pick_lfn+0xdc>)
    82f0:	693b      	ldr	r3, [r7, #16]
    82f2:	18cb      	adds	r3, r1, r3
    82f4:	781b      	ldrb	r3, [r3, #0]
    82f6:	0019      	movs	r1, r3
    82f8:	683b      	ldr	r3, [r7, #0]
    82fa:	185b      	adds	r3, r3, r1
    82fc:	781b      	ldrb	r3, [r3, #0]
    82fe:	b21b      	sxth	r3, r3
    8300:	4313      	orrs	r3, r2
    8302:	b21a      	sxth	r2, r3
    8304:	230c      	movs	r3, #12
    8306:	18fb      	adds	r3, r7, r3
    8308:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    830a:	230e      	movs	r3, #14
    830c:	18fb      	adds	r3, r7, r3
    830e:	881b      	ldrh	r3, [r3, #0]
    8310:	2b00      	cmp	r3, #0
    8312:	d015      	beq.n	8340 <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    8314:	697b      	ldr	r3, [r7, #20]
    8316:	2bfe      	cmp	r3, #254	; 0xfe
    8318:	d901      	bls.n	831e <pick_lfn+0x72>
    831a:	2300      	movs	r3, #0
    831c:	e030      	b.n	8380 <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
    831e:	697b      	ldr	r3, [r7, #20]
    8320:	1c5a      	adds	r2, r3, #1
    8322:	617a      	str	r2, [r7, #20]
    8324:	005b      	lsls	r3, r3, #1
    8326:	687a      	ldr	r2, [r7, #4]
    8328:	18d3      	adds	r3, r2, r3
    832a:	220e      	movs	r2, #14
    832c:	18ba      	adds	r2, r7, r2
    832e:	210c      	movs	r1, #12
    8330:	1879      	adds	r1, r7, r1
    8332:	8809      	ldrh	r1, [r1, #0]
    8334:	8011      	strh	r1, [r2, #0]
    8336:	220e      	movs	r2, #14
    8338:	18ba      	adds	r2, r7, r2
    833a:	8812      	ldrh	r2, [r2, #0]
    833c:	801a      	strh	r2, [r3, #0]
    833e:	e007      	b.n	8350 <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    8340:	230c      	movs	r3, #12
    8342:	18fb      	adds	r3, r7, r3
    8344:	881b      	ldrh	r3, [r3, #0]
    8346:	4a11      	ldr	r2, [pc, #68]	; (838c <pick_lfn+0xe0>)
    8348:	4293      	cmp	r3, r2
    834a:	d001      	beq.n	8350 <pick_lfn+0xa4>
    834c:	2300      	movs	r3, #0
    834e:	e017      	b.n	8380 <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
    8350:	693b      	ldr	r3, [r7, #16]
    8352:	3301      	adds	r3, #1
    8354:	613b      	str	r3, [r7, #16]
    8356:	693b      	ldr	r3, [r7, #16]
    8358:	2b0c      	cmp	r3, #12
    835a:	d9be      	bls.n	82da <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    835c:	683b      	ldr	r3, [r7, #0]
    835e:	781b      	ldrb	r3, [r3, #0]
    8360:	001a      	movs	r2, r3
    8362:	2340      	movs	r3, #64	; 0x40
    8364:	4013      	ands	r3, r2
    8366:	d00a      	beq.n	837e <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    8368:	697b      	ldr	r3, [r7, #20]
    836a:	2bfe      	cmp	r3, #254	; 0xfe
    836c:	d901      	bls.n	8372 <pick_lfn+0xc6>
    836e:	2300      	movs	r3, #0
    8370:	e006      	b.n	8380 <pick_lfn+0xd4>
		lfnbuf[i] = 0;
    8372:	697b      	ldr	r3, [r7, #20]
    8374:	005b      	lsls	r3, r3, #1
    8376:	687a      	ldr	r2, [r7, #4]
    8378:	18d3      	adds	r3, r2, r3
    837a:	2200      	movs	r2, #0
    837c:	801a      	strh	r2, [r3, #0]
	}

	return 1;
    837e:	2301      	movs	r3, #1
}
    8380:	0018      	movs	r0, r3
    8382:	46bd      	mov	sp, r7
    8384:	b006      	add	sp, #24
    8386:	bd80      	pop	{r7, pc}
    8388:	0000c2b4 	.word	0x0000c2b4
    838c:	0000ffff 	.word	0x0000ffff

00008390 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    8390:	b580      	push	{r7, lr}
    8392:	b088      	sub	sp, #32
    8394:	af00      	add	r7, sp, #0
    8396:	60f8      	str	r0, [r7, #12]
    8398:	60b9      	str	r1, [r7, #8]
    839a:	0019      	movs	r1, r3
    839c:	1dfb      	adds	r3, r7, #7
    839e:	701a      	strb	r2, [r3, #0]
    83a0:	1dbb      	adds	r3, r7, #6
    83a2:	1c0a      	adds	r2, r1, #0
    83a4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    83a6:	68bb      	ldr	r3, [r7, #8]
    83a8:	330d      	adds	r3, #13
    83aa:	1dba      	adds	r2, r7, #6
    83ac:	7812      	ldrb	r2, [r2, #0]
    83ae:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    83b0:	68bb      	ldr	r3, [r7, #8]
    83b2:	330b      	adds	r3, #11
    83b4:	220f      	movs	r2, #15
    83b6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    83b8:	68bb      	ldr	r3, [r7, #8]
    83ba:	330c      	adds	r3, #12
    83bc:	2200      	movs	r2, #0
    83be:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    83c0:	68bb      	ldr	r3, [r7, #8]
    83c2:	331a      	adds	r3, #26
    83c4:	2200      	movs	r2, #0
    83c6:	701a      	strb	r2, [r3, #0]
    83c8:	68bb      	ldr	r3, [r7, #8]
    83ca:	331b      	adds	r3, #27
    83cc:	2200      	movs	r2, #0
    83ce:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    83d0:	1dfb      	adds	r3, r7, #7
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	1e5a      	subs	r2, r3, #1
    83d6:	0013      	movs	r3, r2
    83d8:	005b      	lsls	r3, r3, #1
    83da:	189b      	adds	r3, r3, r2
    83dc:	009b      	lsls	r3, r3, #2
    83de:	189b      	adds	r3, r3, r2
    83e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    83e2:	2316      	movs	r3, #22
    83e4:	18fb      	adds	r3, r7, r3
    83e6:	2200      	movs	r2, #0
    83e8:	801a      	strh	r2, [r3, #0]
    83ea:	2300      	movs	r3, #0
    83ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    83ee:	2316      	movs	r3, #22
    83f0:	18fb      	adds	r3, r7, r3
    83f2:	881b      	ldrh	r3, [r3, #0]
    83f4:	4a28      	ldr	r2, [pc, #160]	; (8498 <fit_lfn+0x108>)
    83f6:	4293      	cmp	r3, r2
    83f8:	d009      	beq.n	840e <fit_lfn+0x7e>
    83fa:	69fb      	ldr	r3, [r7, #28]
    83fc:	1c5a      	adds	r2, r3, #1
    83fe:	61fa      	str	r2, [r7, #28]
    8400:	005b      	lsls	r3, r3, #1
    8402:	68fa      	ldr	r2, [r7, #12]
    8404:	18d2      	adds	r2, r2, r3
    8406:	2316      	movs	r3, #22
    8408:	18fb      	adds	r3, r7, r3
    840a:	8812      	ldrh	r2, [r2, #0]
    840c:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    840e:	4a23      	ldr	r2, [pc, #140]	; (849c <fit_lfn+0x10c>)
    8410:	69bb      	ldr	r3, [r7, #24]
    8412:	18d3      	adds	r3, r2, r3
    8414:	781b      	ldrb	r3, [r3, #0]
    8416:	001a      	movs	r2, r3
    8418:	68bb      	ldr	r3, [r7, #8]
    841a:	189b      	adds	r3, r3, r2
    841c:	2216      	movs	r2, #22
    841e:	18ba      	adds	r2, r7, r2
    8420:	8812      	ldrh	r2, [r2, #0]
    8422:	b2d2      	uxtb	r2, r2
    8424:	701a      	strb	r2, [r3, #0]
    8426:	4a1d      	ldr	r2, [pc, #116]	; (849c <fit_lfn+0x10c>)
    8428:	69bb      	ldr	r3, [r7, #24]
    842a:	18d3      	adds	r3, r2, r3
    842c:	781b      	ldrb	r3, [r3, #0]
    842e:	3301      	adds	r3, #1
    8430:	68ba      	ldr	r2, [r7, #8]
    8432:	18d3      	adds	r3, r2, r3
    8434:	2216      	movs	r2, #22
    8436:	18ba      	adds	r2, r7, r2
    8438:	8812      	ldrh	r2, [r2, #0]
    843a:	0a12      	lsrs	r2, r2, #8
    843c:	b292      	uxth	r2, r2
    843e:	b2d2      	uxtb	r2, r2
    8440:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    8442:	2316      	movs	r3, #22
    8444:	18fb      	adds	r3, r7, r3
    8446:	881b      	ldrh	r3, [r3, #0]
    8448:	2b00      	cmp	r3, #0
    844a:	d104      	bne.n	8456 <fit_lfn+0xc6>
    844c:	2316      	movs	r3, #22
    844e:	18fb      	adds	r3, r7, r3
    8450:	2201      	movs	r2, #1
    8452:	4252      	negs	r2, r2
    8454:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    8456:	69bb      	ldr	r3, [r7, #24]
    8458:	3301      	adds	r3, #1
    845a:	61bb      	str	r3, [r7, #24]
    845c:	69bb      	ldr	r3, [r7, #24]
    845e:	2b0c      	cmp	r3, #12
    8460:	d9c5      	bls.n	83ee <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    8462:	2316      	movs	r3, #22
    8464:	18fb      	adds	r3, r7, r3
    8466:	881b      	ldrh	r3, [r3, #0]
    8468:	4a0b      	ldr	r2, [pc, #44]	; (8498 <fit_lfn+0x108>)
    846a:	4293      	cmp	r3, r2
    846c:	d006      	beq.n	847c <fit_lfn+0xec>
    846e:	69fb      	ldr	r3, [r7, #28]
    8470:	005b      	lsls	r3, r3, #1
    8472:	68fa      	ldr	r2, [r7, #12]
    8474:	18d3      	adds	r3, r2, r3
    8476:	881b      	ldrh	r3, [r3, #0]
    8478:	2b00      	cmp	r3, #0
    847a:	d105      	bne.n	8488 <fit_lfn+0xf8>
    847c:	1dfb      	adds	r3, r7, #7
    847e:	1dfa      	adds	r2, r7, #7
    8480:	7812      	ldrb	r2, [r2, #0]
    8482:	2140      	movs	r1, #64	; 0x40
    8484:	430a      	orrs	r2, r1
    8486:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    8488:	68bb      	ldr	r3, [r7, #8]
    848a:	1dfa      	adds	r2, r7, #7
    848c:	7812      	ldrb	r2, [r2, #0]
    848e:	701a      	strb	r2, [r3, #0]
}
    8490:	46c0      	nop			; (mov r8, r8)
    8492:	46bd      	mov	sp, r7
    8494:	b008      	add	sp, #32
    8496:	bd80      	pop	{r7, pc}
    8498:	0000ffff 	.word	0x0000ffff
    849c:	0000c2b4 	.word	0x0000c2b4

000084a0 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    84a0:	b580      	push	{r7, lr}
    84a2:	b08a      	sub	sp, #40	; 0x28
    84a4:	af00      	add	r7, sp, #0
    84a6:	60f8      	str	r0, [r7, #12]
    84a8:	60b9      	str	r1, [r7, #8]
    84aa:	607a      	str	r2, [r7, #4]
    84ac:	001a      	movs	r2, r3
    84ae:	1cbb      	adds	r3, r7, #2
    84b0:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    84b2:	68b9      	ldr	r1, [r7, #8]
    84b4:	68fb      	ldr	r3, [r7, #12]
    84b6:	220b      	movs	r2, #11
    84b8:	0018      	movs	r0, r3
    84ba:	4b38      	ldr	r3, [pc, #224]	; (859c <gen_numname+0xfc>)
    84bc:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    84be:	1cbb      	adds	r3, r7, #2
    84c0:	881b      	ldrh	r3, [r3, #0]
    84c2:	2b05      	cmp	r3, #5
    84c4:	d911      	bls.n	84ea <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    84c6:	1cbb      	adds	r3, r7, #2
    84c8:	881b      	ldrh	r3, [r3, #0]
    84ca:	b29a      	uxth	r2, r3
    84cc:	0852      	lsrs	r2, r2, #1
    84ce:	03db      	lsls	r3, r3, #15
    84d0:	4313      	orrs	r3, r2
    84d2:	b299      	uxth	r1, r3
    84d4:	687b      	ldr	r3, [r7, #4]
    84d6:	1c9a      	adds	r2, r3, #2
    84d8:	607a      	str	r2, [r7, #4]
    84da:	881a      	ldrh	r2, [r3, #0]
    84dc:	1cbb      	adds	r3, r7, #2
    84de:	188a      	adds	r2, r1, r2
    84e0:	801a      	strh	r2, [r3, #0]
    84e2:	687b      	ldr	r3, [r7, #4]
    84e4:	881b      	ldrh	r3, [r3, #0]
    84e6:	2b00      	cmp	r3, #0
    84e8:	d1ed      	bne.n	84c6 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    84ea:	2307      	movs	r3, #7
    84ec:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    84ee:	1cbb      	adds	r3, r7, #2
    84f0:	881b      	ldrh	r3, [r3, #0]
    84f2:	b2db      	uxtb	r3, r3
    84f4:	220f      	movs	r2, #15
    84f6:	4013      	ands	r3, r2
    84f8:	b2da      	uxtb	r2, r3
    84fa:	2327      	movs	r3, #39	; 0x27
    84fc:	18fb      	adds	r3, r7, r3
    84fe:	3230      	adds	r2, #48	; 0x30
    8500:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    8502:	2327      	movs	r3, #39	; 0x27
    8504:	18fb      	adds	r3, r7, r3
    8506:	781b      	ldrb	r3, [r3, #0]
    8508:	2b39      	cmp	r3, #57	; 0x39
    850a:	d906      	bls.n	851a <gen_numname+0x7a>
    850c:	2327      	movs	r3, #39	; 0x27
    850e:	18fb      	adds	r3, r7, r3
    8510:	2227      	movs	r2, #39	; 0x27
    8512:	18ba      	adds	r2, r7, r2
    8514:	7812      	ldrb	r2, [r2, #0]
    8516:	3207      	adds	r2, #7
    8518:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    851a:	6a3b      	ldr	r3, [r7, #32]
    851c:	1e5a      	subs	r2, r3, #1
    851e:	623a      	str	r2, [r7, #32]
    8520:	2214      	movs	r2, #20
    8522:	18ba      	adds	r2, r7, r2
    8524:	2127      	movs	r1, #39	; 0x27
    8526:	1879      	adds	r1, r7, r1
    8528:	7809      	ldrb	r1, [r1, #0]
    852a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    852c:	1cbb      	adds	r3, r7, #2
    852e:	1cba      	adds	r2, r7, #2
    8530:	8812      	ldrh	r2, [r2, #0]
    8532:	0912      	lsrs	r2, r2, #4
    8534:	801a      	strh	r2, [r3, #0]
	} while (seq);
    8536:	1cbb      	adds	r3, r7, #2
    8538:	881b      	ldrh	r3, [r3, #0]
    853a:	2b00      	cmp	r3, #0
    853c:	d1d7      	bne.n	84ee <gen_numname+0x4e>
	ns[i] = '~';
    853e:	2314      	movs	r3, #20
    8540:	18fa      	adds	r2, r7, r3
    8542:	6a3b      	ldr	r3, [r7, #32]
    8544:	18d3      	adds	r3, r2, r3
    8546:	227e      	movs	r2, #126	; 0x7e
    8548:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    854a:	2300      	movs	r3, #0
    854c:	61fb      	str	r3, [r7, #28]
    854e:	e002      	b.n	8556 <gen_numname+0xb6>
    8550:	69fb      	ldr	r3, [r7, #28]
    8552:	3301      	adds	r3, #1
    8554:	61fb      	str	r3, [r7, #28]
    8556:	69fa      	ldr	r2, [r7, #28]
    8558:	6a3b      	ldr	r3, [r7, #32]
    855a:	429a      	cmp	r2, r3
    855c:	d205      	bcs.n	856a <gen_numname+0xca>
    855e:	68fa      	ldr	r2, [r7, #12]
    8560:	69fb      	ldr	r3, [r7, #28]
    8562:	18d3      	adds	r3, r2, r3
    8564:	781b      	ldrb	r3, [r3, #0]
    8566:	2b20      	cmp	r3, #32
    8568:	d1f2      	bne.n	8550 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    856a:	69fb      	ldr	r3, [r7, #28]
    856c:	1c5a      	adds	r2, r3, #1
    856e:	61fa      	str	r2, [r7, #28]
    8570:	68fa      	ldr	r2, [r7, #12]
    8572:	18d2      	adds	r2, r2, r3
    8574:	6a3b      	ldr	r3, [r7, #32]
    8576:	2b07      	cmp	r3, #7
    8578:	d806      	bhi.n	8588 <gen_numname+0xe8>
    857a:	6a3b      	ldr	r3, [r7, #32]
    857c:	1c59      	adds	r1, r3, #1
    857e:	6239      	str	r1, [r7, #32]
    8580:	2114      	movs	r1, #20
    8582:	1879      	adds	r1, r7, r1
    8584:	5ccb      	ldrb	r3, [r1, r3]
    8586:	e000      	b.n	858a <gen_numname+0xea>
    8588:	2320      	movs	r3, #32
    858a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    858c:	69fb      	ldr	r3, [r7, #28]
    858e:	2b07      	cmp	r3, #7
    8590:	d9eb      	bls.n	856a <gen_numname+0xca>
}
    8592:	46c0      	nop			; (mov r8, r8)
    8594:	46bd      	mov	sp, r7
    8596:	b00a      	add	sp, #40	; 0x28
    8598:	bd80      	pop	{r7, pc}
    859a:	46c0      	nop			; (mov r8, r8)
    859c:	00007561 	.word	0x00007561

000085a0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    85a0:	b580      	push	{r7, lr}
    85a2:	b084      	sub	sp, #16
    85a4:	af00      	add	r7, sp, #0
    85a6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    85a8:	230f      	movs	r3, #15
    85aa:	18fb      	adds	r3, r7, r3
    85ac:	2200      	movs	r2, #0
    85ae:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    85b0:	230b      	movs	r3, #11
    85b2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    85b4:	230f      	movs	r3, #15
    85b6:	18fb      	adds	r3, r7, r3
    85b8:	781b      	ldrb	r3, [r3, #0]
    85ba:	b2da      	uxtb	r2, r3
    85bc:	0852      	lsrs	r2, r2, #1
    85be:	01db      	lsls	r3, r3, #7
    85c0:	4313      	orrs	r3, r2
    85c2:	b2d9      	uxtb	r1, r3
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	1c5a      	adds	r2, r3, #1
    85c8:	607a      	str	r2, [r7, #4]
    85ca:	781a      	ldrb	r2, [r3, #0]
    85cc:	230f      	movs	r3, #15
    85ce:	18fb      	adds	r3, r7, r3
    85d0:	188a      	adds	r2, r1, r2
    85d2:	701a      	strb	r2, [r3, #0]
    85d4:	68bb      	ldr	r3, [r7, #8]
    85d6:	3b01      	subs	r3, #1
    85d8:	60bb      	str	r3, [r7, #8]
    85da:	68bb      	ldr	r3, [r7, #8]
    85dc:	2b00      	cmp	r3, #0
    85de:	d1e9      	bne.n	85b4 <sum_sfn+0x14>
	return sum;
    85e0:	230f      	movs	r3, #15
    85e2:	18fb      	adds	r3, r7, r3
    85e4:	781b      	ldrb	r3, [r3, #0]
}
    85e6:	0018      	movs	r0, r3
    85e8:	46bd      	mov	sp, r7
    85ea:	b004      	add	sp, #16
    85ec:	bd80      	pop	{r7, pc}
	...

000085f0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    85f0:	b590      	push	{r4, r7, lr}
    85f2:	b087      	sub	sp, #28
    85f4:	af00      	add	r7, sp, #0
    85f6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    85f8:	2317      	movs	r3, #23
    85fa:	18fc      	adds	r4, r7, r3
    85fc:	687b      	ldr	r3, [r7, #4]
    85fe:	2100      	movs	r1, #0
    8600:	0018      	movs	r0, r3
    8602:	4b74      	ldr	r3, [pc, #464]	; (87d4 <dir_find+0x1e4>)
    8604:	4798      	blx	r3
    8606:	0003      	movs	r3, r0
    8608:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    860a:	2317      	movs	r3, #23
    860c:	18fb      	adds	r3, r7, r3
    860e:	781b      	ldrb	r3, [r3, #0]
    8610:	2b00      	cmp	r3, #0
    8612:	d003      	beq.n	861c <dir_find+0x2c>
    8614:	2317      	movs	r3, #23
    8616:	18fb      	adds	r3, r7, r3
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	e0d6      	b.n	87ca <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    861c:	2314      	movs	r3, #20
    861e:	18fb      	adds	r3, r7, r3
    8620:	22ff      	movs	r2, #255	; 0xff
    8622:	701a      	strb	r2, [r3, #0]
    8624:	2315      	movs	r3, #21
    8626:	18fb      	adds	r3, r7, r3
    8628:	2214      	movs	r2, #20
    862a:	18ba      	adds	r2, r7, r2
    862c:	7812      	ldrb	r2, [r2, #0]
    862e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    8630:	687b      	ldr	r3, [r7, #4]
    8632:	681a      	ldr	r2, [r3, #0]
    8634:	687b      	ldr	r3, [r7, #4]
    8636:	691b      	ldr	r3, [r3, #16]
    8638:	2117      	movs	r1, #23
    863a:	187c      	adds	r4, r7, r1
    863c:	0019      	movs	r1, r3
    863e:	0010      	movs	r0, r2
    8640:	4b65      	ldr	r3, [pc, #404]	; (87d8 <dir_find+0x1e8>)
    8642:	4798      	blx	r3
    8644:	0003      	movs	r3, r0
    8646:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8648:	2317      	movs	r3, #23
    864a:	18fb      	adds	r3, r7, r3
    864c:	781b      	ldrb	r3, [r3, #0]
    864e:	2b00      	cmp	r3, #0
    8650:	d000      	beq.n	8654 <dir_find+0x64>
    8652:	e0b2      	b.n	87ba <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8654:	687b      	ldr	r3, [r7, #4]
    8656:	695b      	ldr	r3, [r3, #20]
    8658:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    865a:	2316      	movs	r3, #22
    865c:	18fb      	adds	r3, r7, r3
    865e:	693a      	ldr	r2, [r7, #16]
    8660:	7812      	ldrb	r2, [r2, #0]
    8662:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8664:	2316      	movs	r3, #22
    8666:	18fb      	adds	r3, r7, r3
    8668:	781b      	ldrb	r3, [r3, #0]
    866a:	2b00      	cmp	r3, #0
    866c:	d104      	bne.n	8678 <dir_find+0x88>
    866e:	2317      	movs	r3, #23
    8670:	18fb      	adds	r3, r7, r3
    8672:	2204      	movs	r2, #4
    8674:	701a      	strb	r2, [r3, #0]
    8676:	e0a5      	b.n	87c4 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    8678:	693b      	ldr	r3, [r7, #16]
    867a:	330b      	adds	r3, #11
    867c:	781a      	ldrb	r2, [r3, #0]
    867e:	230f      	movs	r3, #15
    8680:	18fb      	adds	r3, r7, r3
    8682:	213f      	movs	r1, #63	; 0x3f
    8684:	400a      	ands	r2, r1
    8686:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    8688:	2316      	movs	r3, #22
    868a:	18fb      	adds	r3, r7, r3
    868c:	781b      	ldrb	r3, [r3, #0]
    868e:	2be5      	cmp	r3, #229	; 0xe5
    8690:	d00a      	beq.n	86a8 <dir_find+0xb8>
    8692:	230f      	movs	r3, #15
    8694:	18fb      	adds	r3, r7, r3
    8696:	781b      	ldrb	r3, [r3, #0]
    8698:	2208      	movs	r2, #8
    869a:	4013      	ands	r3, r2
    869c:	d009      	beq.n	86b2 <dir_find+0xc2>
    869e:	230f      	movs	r3, #15
    86a0:	18fb      	adds	r3, r7, r3
    86a2:	781b      	ldrb	r3, [r3, #0]
    86a4:	2b0f      	cmp	r3, #15
    86a6:	d004      	beq.n	86b2 <dir_find+0xc2>
			ord = 0xFF;
    86a8:	2315      	movs	r3, #21
    86aa:	18fb      	adds	r3, r7, r3
    86ac:	22ff      	movs	r2, #255	; 0xff
    86ae:	701a      	strb	r2, [r3, #0]
    86b0:	e073      	b.n	879a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    86b2:	230f      	movs	r3, #15
    86b4:	18fb      	adds	r3, r7, r3
    86b6:	781b      	ldrb	r3, [r3, #0]
    86b8:	2b0f      	cmp	r3, #15
    86ba:	d145      	bne.n	8748 <dir_find+0x158>
				if (dj->lfn) {
    86bc:	687b      	ldr	r3, [r7, #4]
    86be:	69db      	ldr	r3, [r3, #28]
    86c0:	2b00      	cmp	r3, #0
    86c2:	d100      	bne.n	86c6 <dir_find+0xd6>
    86c4:	e069      	b.n	879a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    86c6:	2316      	movs	r3, #22
    86c8:	18fb      	adds	r3, r7, r3
    86ca:	781b      	ldrb	r3, [r3, #0]
    86cc:	2240      	movs	r2, #64	; 0x40
    86ce:	4013      	ands	r3, r2
    86d0:	d016      	beq.n	8700 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    86d2:	2314      	movs	r3, #20
    86d4:	18fb      	adds	r3, r7, r3
    86d6:	693a      	ldr	r2, [r7, #16]
    86d8:	7b52      	ldrb	r2, [r2, #13]
    86da:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    86dc:	2316      	movs	r3, #22
    86de:	18fb      	adds	r3, r7, r3
    86e0:	2216      	movs	r2, #22
    86e2:	18ba      	adds	r2, r7, r2
    86e4:	7812      	ldrb	r2, [r2, #0]
    86e6:	2140      	movs	r1, #64	; 0x40
    86e8:	438a      	bics	r2, r1
    86ea:	701a      	strb	r2, [r3, #0]
    86ec:	2315      	movs	r3, #21
    86ee:	18fb      	adds	r3, r7, r3
    86f0:	2216      	movs	r2, #22
    86f2:	18ba      	adds	r2, r7, r2
    86f4:	7812      	ldrb	r2, [r2, #0]
    86f6:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    86f8:	687b      	ldr	r3, [r7, #4]
    86fa:	88da      	ldrh	r2, [r3, #6]
    86fc:	687b      	ldr	r3, [r7, #4]
    86fe:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    8700:	2316      	movs	r3, #22
    8702:	18fa      	adds	r2, r7, r3
    8704:	2315      	movs	r3, #21
    8706:	18fb      	adds	r3, r7, r3
    8708:	7812      	ldrb	r2, [r2, #0]
    870a:	781b      	ldrb	r3, [r3, #0]
    870c:	429a      	cmp	r2, r3
    870e:	d116      	bne.n	873e <dir_find+0x14e>
    8710:	693b      	ldr	r3, [r7, #16]
    8712:	330d      	adds	r3, #13
    8714:	781b      	ldrb	r3, [r3, #0]
    8716:	2214      	movs	r2, #20
    8718:	18ba      	adds	r2, r7, r2
    871a:	7812      	ldrb	r2, [r2, #0]
    871c:	429a      	cmp	r2, r3
    871e:	d10e      	bne.n	873e <dir_find+0x14e>
    8720:	687b      	ldr	r3, [r7, #4]
    8722:	69db      	ldr	r3, [r3, #28]
    8724:	693a      	ldr	r2, [r7, #16]
    8726:	0011      	movs	r1, r2
    8728:	0018      	movs	r0, r3
    872a:	4b2c      	ldr	r3, [pc, #176]	; (87dc <dir_find+0x1ec>)
    872c:	4798      	blx	r3
    872e:	1e03      	subs	r3, r0, #0
    8730:	d005      	beq.n	873e <dir_find+0x14e>
    8732:	2315      	movs	r3, #21
    8734:	18fb      	adds	r3, r7, r3
    8736:	781b      	ldrb	r3, [r3, #0]
    8738:	3b01      	subs	r3, #1
    873a:	b2da      	uxtb	r2, r3
    873c:	e000      	b.n	8740 <dir_find+0x150>
    873e:	22ff      	movs	r2, #255	; 0xff
    8740:	2315      	movs	r3, #21
    8742:	18fb      	adds	r3, r7, r3
    8744:	701a      	strb	r2, [r3, #0]
    8746:	e028      	b.n	879a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    8748:	2315      	movs	r3, #21
    874a:	18fb      	adds	r3, r7, r3
    874c:	781b      	ldrb	r3, [r3, #0]
    874e:	2b00      	cmp	r3, #0
    8750:	d10a      	bne.n	8768 <dir_find+0x178>
    8752:	693b      	ldr	r3, [r7, #16]
    8754:	0018      	movs	r0, r3
    8756:	4b22      	ldr	r3, [pc, #136]	; (87e0 <dir_find+0x1f0>)
    8758:	4798      	blx	r3
    875a:	0003      	movs	r3, r0
    875c:	001a      	movs	r2, r3
    875e:	2314      	movs	r3, #20
    8760:	18fb      	adds	r3, r7, r3
    8762:	781b      	ldrb	r3, [r3, #0]
    8764:	4293      	cmp	r3, r2
    8766:	d02a      	beq.n	87be <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    8768:	2315      	movs	r3, #21
    876a:	18fb      	adds	r3, r7, r3
    876c:	22ff      	movs	r2, #255	; 0xff
    876e:	701a      	strb	r2, [r3, #0]
    8770:	687b      	ldr	r3, [r7, #4]
    8772:	2201      	movs	r2, #1
    8774:	4252      	negs	r2, r2
    8776:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8778:	687b      	ldr	r3, [r7, #4]
    877a:	699b      	ldr	r3, [r3, #24]
    877c:	330b      	adds	r3, #11
    877e:	781b      	ldrb	r3, [r3, #0]
    8780:	001a      	movs	r2, r3
    8782:	2301      	movs	r3, #1
    8784:	4013      	ands	r3, r2
    8786:	d108      	bne.n	879a <dir_find+0x1aa>
    8788:	687b      	ldr	r3, [r7, #4]
    878a:	6999      	ldr	r1, [r3, #24]
    878c:	693b      	ldr	r3, [r7, #16]
    878e:	220b      	movs	r2, #11
    8790:	0018      	movs	r0, r3
    8792:	4b14      	ldr	r3, [pc, #80]	; (87e4 <dir_find+0x1f4>)
    8794:	4798      	blx	r3
    8796:	1e03      	subs	r3, r0, #0
    8798:	d013      	beq.n	87c2 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    879a:	2317      	movs	r3, #23
    879c:	18fc      	adds	r4, r7, r3
    879e:	687b      	ldr	r3, [r7, #4]
    87a0:	2100      	movs	r1, #0
    87a2:	0018      	movs	r0, r3
    87a4:	4b10      	ldr	r3, [pc, #64]	; (87e8 <dir_find+0x1f8>)
    87a6:	4798      	blx	r3
    87a8:	0003      	movs	r3, r0
    87aa:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    87ac:	2317      	movs	r3, #23
    87ae:	18fb      	adds	r3, r7, r3
    87b0:	781b      	ldrb	r3, [r3, #0]
    87b2:	2b00      	cmp	r3, #0
    87b4:	d100      	bne.n	87b8 <dir_find+0x1c8>
    87b6:	e73b      	b.n	8630 <dir_find+0x40>
    87b8:	e004      	b.n	87c4 <dir_find+0x1d4>
		if (res != FR_OK) break;
    87ba:	46c0      	nop			; (mov r8, r8)
    87bc:	e002      	b.n	87c4 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    87be:	46c0      	nop			; (mov r8, r8)
    87c0:	e000      	b.n	87c4 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    87c2:	46c0      	nop			; (mov r8, r8)

	return res;
    87c4:	2317      	movs	r3, #23
    87c6:	18fb      	adds	r3, r7, r3
    87c8:	781b      	ldrb	r3, [r3, #0]
}
    87ca:	0018      	movs	r0, r3
    87cc:	46bd      	mov	sp, r7
    87ce:	b007      	add	sp, #28
    87d0:	bd90      	pop	{r4, r7, pc}
    87d2:	46c0      	nop			; (mov r8, r8)
    87d4:	00007e89 	.word	0x00007e89
    87d8:	00007645 	.word	0x00007645
    87dc:	000081a9 	.word	0x000081a9
    87e0:	000085a1 	.word	0x000085a1
    87e4:	000075c9 	.word	0x000075c9
    87e8:	00007fb9 	.word	0x00007fb9

000087ec <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    87ec:	b590      	push	{r4, r7, lr}
    87ee:	b087      	sub	sp, #28
    87f0:	af00      	add	r7, sp, #0
    87f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
    87f4:	2315      	movs	r3, #21
    87f6:	18fb      	adds	r3, r7, r3
    87f8:	22ff      	movs	r2, #255	; 0xff
    87fa:	701a      	strb	r2, [r3, #0]
    87fc:	2314      	movs	r3, #20
    87fe:	18fb      	adds	r3, r7, r3
    8800:	22ff      	movs	r2, #255	; 0xff
    8802:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
    8804:	2317      	movs	r3, #23
    8806:	18fb      	adds	r3, r7, r3
    8808:	2204      	movs	r2, #4
    880a:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    880c:	e0ae      	b.n	896c <dir_read+0x180>
		res = move_window(dj->fs, dj->sect);
    880e:	687b      	ldr	r3, [r7, #4]
    8810:	681a      	ldr	r2, [r3, #0]
    8812:	687b      	ldr	r3, [r7, #4]
    8814:	691b      	ldr	r3, [r3, #16]
    8816:	2117      	movs	r1, #23
    8818:	187c      	adds	r4, r7, r1
    881a:	0019      	movs	r1, r3
    881c:	0010      	movs	r0, r2
    881e:	4b60      	ldr	r3, [pc, #384]	; (89a0 <dir_read+0x1b4>)
    8820:	4798      	blx	r3
    8822:	0003      	movs	r3, r0
    8824:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8826:	2317      	movs	r3, #23
    8828:	18fb      	adds	r3, r7, r3
    882a:	781b      	ldrb	r3, [r3, #0]
    882c:	2b00      	cmp	r3, #0
    882e:	d000      	beq.n	8832 <dir_read+0x46>
    8830:	e0a2      	b.n	8978 <dir_read+0x18c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8832:	687b      	ldr	r3, [r7, #4]
    8834:	695b      	ldr	r3, [r3, #20]
    8836:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    8838:	2316      	movs	r3, #22
    883a:	18fb      	adds	r3, r7, r3
    883c:	693a      	ldr	r2, [r7, #16]
    883e:	7812      	ldrb	r2, [r2, #0]
    8840:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8842:	2316      	movs	r3, #22
    8844:	18fb      	adds	r3, r7, r3
    8846:	781b      	ldrb	r3, [r3, #0]
    8848:	2b00      	cmp	r3, #0
    884a:	d104      	bne.n	8856 <dir_read+0x6a>
    884c:	2317      	movs	r3, #23
    884e:	18fb      	adds	r3, r7, r3
    8850:	2204      	movs	r2, #4
    8852:	701a      	strb	r2, [r3, #0]
    8854:	e095      	b.n	8982 <dir_read+0x196>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    8856:	693b      	ldr	r3, [r7, #16]
    8858:	330b      	adds	r3, #11
    885a:	781a      	ldrb	r2, [r3, #0]
    885c:	230f      	movs	r3, #15
    885e:	18fb      	adds	r3, r7, r3
    8860:	213f      	movs	r1, #63	; 0x3f
    8862:	400a      	ands	r2, r1
    8864:	701a      	strb	r2, [r3, #0]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    8866:	2316      	movs	r3, #22
    8868:	18fb      	adds	r3, r7, r3
    886a:	781b      	ldrb	r3, [r3, #0]
    886c:	2be5      	cmp	r3, #229	; 0xe5
    886e:	d00f      	beq.n	8890 <dir_read+0xa4>
    8870:	2316      	movs	r3, #22
    8872:	18fb      	adds	r3, r7, r3
    8874:	781b      	ldrb	r3, [r3, #0]
    8876:	2b2e      	cmp	r3, #46	; 0x2e
    8878:	d00a      	beq.n	8890 <dir_read+0xa4>
    887a:	230f      	movs	r3, #15
    887c:	18fb      	adds	r3, r7, r3
    887e:	781b      	ldrb	r3, [r3, #0]
    8880:	2208      	movs	r2, #8
    8882:	4013      	ands	r3, r2
    8884:	d009      	beq.n	889a <dir_read+0xae>
    8886:	230f      	movs	r3, #15
    8888:	18fb      	adds	r3, r7, r3
    888a:	781b      	ldrb	r3, [r3, #0]
    888c:	2b0f      	cmp	r3, #15
    888e:	d004      	beq.n	889a <dir_read+0xae>
			ord = 0xFF;
    8890:	2315      	movs	r3, #21
    8892:	18fb      	adds	r3, r7, r3
    8894:	22ff      	movs	r2, #255	; 0xff
    8896:	701a      	strb	r2, [r3, #0]
    8898:	e05a      	b.n	8950 <dir_read+0x164>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    889a:	230f      	movs	r3, #15
    889c:	18fb      	adds	r3, r7, r3
    889e:	781b      	ldrb	r3, [r3, #0]
    88a0:	2b0f      	cmp	r3, #15
    88a2:	d140      	bne.n	8926 <dir_read+0x13a>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    88a4:	2316      	movs	r3, #22
    88a6:	18fb      	adds	r3, r7, r3
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	2240      	movs	r2, #64	; 0x40
    88ac:	4013      	ands	r3, r2
    88ae:	d016      	beq.n	88de <dir_read+0xf2>
					sum = dir[LDIR_Chksum];
    88b0:	2314      	movs	r3, #20
    88b2:	18fb      	adds	r3, r7, r3
    88b4:	693a      	ldr	r2, [r7, #16]
    88b6:	7b52      	ldrb	r2, [r2, #13]
    88b8:	701a      	strb	r2, [r3, #0]
					c &= ~LLE; ord = c;
    88ba:	2316      	movs	r3, #22
    88bc:	18fb      	adds	r3, r7, r3
    88be:	2216      	movs	r2, #22
    88c0:	18ba      	adds	r2, r7, r2
    88c2:	7812      	ldrb	r2, [r2, #0]
    88c4:	2140      	movs	r1, #64	; 0x40
    88c6:	438a      	bics	r2, r1
    88c8:	701a      	strb	r2, [r3, #0]
    88ca:	2315      	movs	r3, #21
    88cc:	18fb      	adds	r3, r7, r3
    88ce:	2216      	movs	r2, #22
    88d0:	18ba      	adds	r2, r7, r2
    88d2:	7812      	ldrb	r2, [r2, #0]
    88d4:	701a      	strb	r2, [r3, #0]
					dj->lfn_idx = dj->index;
    88d6:	687b      	ldr	r3, [r7, #4]
    88d8:	88da      	ldrh	r2, [r3, #6]
    88da:	687b      	ldr	r3, [r7, #4]
    88dc:	841a      	strh	r2, [r3, #32]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    88de:	2316      	movs	r3, #22
    88e0:	18fa      	adds	r2, r7, r3
    88e2:	2315      	movs	r3, #21
    88e4:	18fb      	adds	r3, r7, r3
    88e6:	7812      	ldrb	r2, [r2, #0]
    88e8:	781b      	ldrb	r3, [r3, #0]
    88ea:	429a      	cmp	r2, r3
    88ec:	d116      	bne.n	891c <dir_read+0x130>
    88ee:	693b      	ldr	r3, [r7, #16]
    88f0:	330d      	adds	r3, #13
    88f2:	781b      	ldrb	r3, [r3, #0]
    88f4:	2214      	movs	r2, #20
    88f6:	18ba      	adds	r2, r7, r2
    88f8:	7812      	ldrb	r2, [r2, #0]
    88fa:	429a      	cmp	r2, r3
    88fc:	d10e      	bne.n	891c <dir_read+0x130>
    88fe:	687b      	ldr	r3, [r7, #4]
    8900:	69db      	ldr	r3, [r3, #28]
    8902:	693a      	ldr	r2, [r7, #16]
    8904:	0011      	movs	r1, r2
    8906:	0018      	movs	r0, r3
    8908:	4b26      	ldr	r3, [pc, #152]	; (89a4 <dir_read+0x1b8>)
    890a:	4798      	blx	r3
    890c:	1e03      	subs	r3, r0, #0
    890e:	d005      	beq.n	891c <dir_read+0x130>
    8910:	2315      	movs	r3, #21
    8912:	18fb      	adds	r3, r7, r3
    8914:	781b      	ldrb	r3, [r3, #0]
    8916:	3b01      	subs	r3, #1
    8918:	b2da      	uxtb	r2, r3
    891a:	e000      	b.n	891e <dir_read+0x132>
    891c:	22ff      	movs	r2, #255	; 0xff
    891e:	2315      	movs	r3, #21
    8920:	18fb      	adds	r3, r7, r3
    8922:	701a      	strb	r2, [r3, #0]
    8924:	e014      	b.n	8950 <dir_read+0x164>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    8926:	2315      	movs	r3, #21
    8928:	18fb      	adds	r3, r7, r3
    892a:	781b      	ldrb	r3, [r3, #0]
    892c:	2b00      	cmp	r3, #0
    892e:	d10a      	bne.n	8946 <dir_read+0x15a>
    8930:	693b      	ldr	r3, [r7, #16]
    8932:	0018      	movs	r0, r3
    8934:	4b1c      	ldr	r3, [pc, #112]	; (89a8 <dir_read+0x1bc>)
    8936:	4798      	blx	r3
    8938:	0003      	movs	r3, r0
    893a:	001a      	movs	r2, r3
    893c:	2314      	movs	r3, #20
    893e:	18fb      	adds	r3, r7, r3
    8940:	781b      	ldrb	r3, [r3, #0]
    8942:	4293      	cmp	r3, r2
    8944:	d01a      	beq.n	897c <dir_read+0x190>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    8946:	687b      	ldr	r3, [r7, #4]
    8948:	2201      	movs	r2, #1
    894a:	4252      	negs	r2, r2
    894c:	841a      	strh	r2, [r3, #32]
				break;
    894e:	e015      	b.n	897c <dir_read+0x190>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    8950:	2317      	movs	r3, #23
    8952:	18fc      	adds	r4, r7, r3
    8954:	687b      	ldr	r3, [r7, #4]
    8956:	2100      	movs	r1, #0
    8958:	0018      	movs	r0, r3
    895a:	4b14      	ldr	r3, [pc, #80]	; (89ac <dir_read+0x1c0>)
    895c:	4798      	blx	r3
    895e:	0003      	movs	r3, r0
    8960:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8962:	2317      	movs	r3, #23
    8964:	18fb      	adds	r3, r7, r3
    8966:	781b      	ldrb	r3, [r3, #0]
    8968:	2b00      	cmp	r3, #0
    896a:	d109      	bne.n	8980 <dir_read+0x194>
	while (dj->sect) {
    896c:	687b      	ldr	r3, [r7, #4]
    896e:	691b      	ldr	r3, [r3, #16]
    8970:	2b00      	cmp	r3, #0
    8972:	d000      	beq.n	8976 <dir_read+0x18a>
    8974:	e74b      	b.n	880e <dir_read+0x22>
    8976:	e004      	b.n	8982 <dir_read+0x196>
		if (res != FR_OK) break;
    8978:	46c0      	nop			; (mov r8, r8)
    897a:	e002      	b.n	8982 <dir_read+0x196>
				break;
    897c:	46c0      	nop			; (mov r8, r8)
    897e:	e000      	b.n	8982 <dir_read+0x196>
		if (res != FR_OK) break;
    8980:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    8982:	2317      	movs	r3, #23
    8984:	18fb      	adds	r3, r7, r3
    8986:	781b      	ldrb	r3, [r3, #0]
    8988:	2b00      	cmp	r3, #0
    898a:	d002      	beq.n	8992 <dir_read+0x1a6>
    898c:	687b      	ldr	r3, [r7, #4]
    898e:	2200      	movs	r2, #0
    8990:	611a      	str	r2, [r3, #16]

	return res;
    8992:	2317      	movs	r3, #23
    8994:	18fb      	adds	r3, r7, r3
    8996:	781b      	ldrb	r3, [r3, #0]
}
    8998:	0018      	movs	r0, r3
    899a:	46bd      	mov	sp, r7
    899c:	b007      	add	sp, #28
    899e:	bd90      	pop	{r4, r7, pc}
    89a0:	00007645 	.word	0x00007645
    89a4:	000082ad 	.word	0x000082ad
    89a8:	000085a1 	.word	0x000085a1
    89ac:	00007fb9 	.word	0x00007fb9

000089b0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    89b0:	b590      	push	{r4, r7, lr}
    89b2:	b08d      	sub	sp, #52	; 0x34
    89b4:	af00      	add	r7, sp, #0
    89b6:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    89b8:	687b      	ldr	r3, [r7, #4]
    89ba:	699b      	ldr	r3, [r3, #24]
    89bc:	627b      	str	r3, [r7, #36]	; 0x24
    89be:	687b      	ldr	r3, [r7, #4]
    89c0:	69db      	ldr	r3, [r3, #28]
    89c2:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    89c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    89c6:	230c      	movs	r3, #12
    89c8:	18fb      	adds	r3, r7, r3
    89ca:	220c      	movs	r2, #12
    89cc:	0018      	movs	r0, r3
    89ce:	4bc8      	ldr	r3, [pc, #800]	; (8cf0 <dir_register+0x340>)
    89d0:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    89d2:	230c      	movs	r3, #12
    89d4:	18fb      	adds	r3, r7, r3
    89d6:	7adb      	ldrb	r3, [r3, #11]
    89d8:	001a      	movs	r2, r3
    89da:	2301      	movs	r3, #1
    89dc:	4013      	ands	r3, r2
    89de:	d048      	beq.n	8a72 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    89e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    89e2:	330b      	adds	r3, #11
    89e4:	2200      	movs	r2, #0
    89e6:	701a      	strb	r2, [r3, #0]
    89e8:	687b      	ldr	r3, [r7, #4]
    89ea:	2200      	movs	r2, #0
    89ec:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    89ee:	232c      	movs	r3, #44	; 0x2c
    89f0:	18fb      	adds	r3, r7, r3
    89f2:	2201      	movs	r2, #1
    89f4:	801a      	strh	r2, [r3, #0]
    89f6:	e01c      	b.n	8a32 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    89f8:	232c      	movs	r3, #44	; 0x2c
    89fa:	18fb      	adds	r3, r7, r3
    89fc:	881b      	ldrh	r3, [r3, #0]
    89fe:	6a3a      	ldr	r2, [r7, #32]
    8a00:	210c      	movs	r1, #12
    8a02:	1879      	adds	r1, r7, r1
    8a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8a06:	4cbb      	ldr	r4, [pc, #748]	; (8cf4 <dir_register+0x344>)
    8a08:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    8a0a:	232f      	movs	r3, #47	; 0x2f
    8a0c:	18fc      	adds	r4, r7, r3
    8a0e:	687b      	ldr	r3, [r7, #4]
    8a10:	0018      	movs	r0, r3
    8a12:	4bb9      	ldr	r3, [pc, #740]	; (8cf8 <dir_register+0x348>)
    8a14:	4798      	blx	r3
    8a16:	0003      	movs	r3, r0
    8a18:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8a1a:	232f      	movs	r3, #47	; 0x2f
    8a1c:	18fb      	adds	r3, r7, r3
    8a1e:	781b      	ldrb	r3, [r3, #0]
    8a20:	2b00      	cmp	r3, #0
    8a22:	d10c      	bne.n	8a3e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    8a24:	232c      	movs	r3, #44	; 0x2c
    8a26:	18fb      	adds	r3, r7, r3
    8a28:	881a      	ldrh	r2, [r3, #0]
    8a2a:	232c      	movs	r3, #44	; 0x2c
    8a2c:	18fb      	adds	r3, r7, r3
    8a2e:	3201      	adds	r2, #1
    8a30:	801a      	strh	r2, [r3, #0]
    8a32:	232c      	movs	r3, #44	; 0x2c
    8a34:	18fb      	adds	r3, r7, r3
    8a36:	881b      	ldrh	r3, [r3, #0]
    8a38:	2b63      	cmp	r3, #99	; 0x63
    8a3a:	d9dd      	bls.n	89f8 <dir_register+0x48>
    8a3c:	e000      	b.n	8a40 <dir_register+0x90>
			if (res != FR_OK) break;
    8a3e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    8a40:	232c      	movs	r3, #44	; 0x2c
    8a42:	18fb      	adds	r3, r7, r3
    8a44:	881b      	ldrh	r3, [r3, #0]
    8a46:	2b64      	cmp	r3, #100	; 0x64
    8a48:	d101      	bne.n	8a4e <dir_register+0x9e>
    8a4a:	2307      	movs	r3, #7
    8a4c:	e14c      	b.n	8ce8 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    8a4e:	232f      	movs	r3, #47	; 0x2f
    8a50:	18fb      	adds	r3, r7, r3
    8a52:	781b      	ldrb	r3, [r3, #0]
    8a54:	2b04      	cmp	r3, #4
    8a56:	d003      	beq.n	8a60 <dir_register+0xb0>
    8a58:	232f      	movs	r3, #47	; 0x2f
    8a5a:	18fb      	adds	r3, r7, r3
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	e143      	b.n	8ce8 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    8a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a62:	330b      	adds	r3, #11
    8a64:	220c      	movs	r2, #12
    8a66:	18ba      	adds	r2, r7, r2
    8a68:	7ad2      	ldrb	r2, [r2, #11]
    8a6a:	701a      	strb	r2, [r3, #0]
    8a6c:	687b      	ldr	r3, [r7, #4]
    8a6e:	6a3a      	ldr	r2, [r7, #32]
    8a70:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    8a72:	230c      	movs	r3, #12
    8a74:	18fb      	adds	r3, r7, r3
    8a76:	7adb      	ldrb	r3, [r3, #11]
    8a78:	001a      	movs	r2, r3
    8a7a:	2302      	movs	r3, #2
    8a7c:	4013      	ands	r3, r2
    8a7e:	d023      	beq.n	8ac8 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    8a80:	232a      	movs	r3, #42	; 0x2a
    8a82:	18fb      	adds	r3, r7, r3
    8a84:	2200      	movs	r2, #0
    8a86:	801a      	strh	r2, [r3, #0]
    8a88:	e006      	b.n	8a98 <dir_register+0xe8>
    8a8a:	232a      	movs	r3, #42	; 0x2a
    8a8c:	18fb      	adds	r3, r7, r3
    8a8e:	881a      	ldrh	r2, [r3, #0]
    8a90:	232a      	movs	r3, #42	; 0x2a
    8a92:	18fb      	adds	r3, r7, r3
    8a94:	3201      	adds	r2, #1
    8a96:	801a      	strh	r2, [r3, #0]
    8a98:	232a      	movs	r3, #42	; 0x2a
    8a9a:	18fb      	adds	r3, r7, r3
    8a9c:	881b      	ldrh	r3, [r3, #0]
    8a9e:	005b      	lsls	r3, r3, #1
    8aa0:	6a3a      	ldr	r2, [r7, #32]
    8aa2:	18d3      	adds	r3, r2, r3
    8aa4:	881b      	ldrh	r3, [r3, #0]
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d1ef      	bne.n	8a8a <dir_register+0xda>
		ne = (ne + 25) / 13;
    8aaa:	232a      	movs	r3, #42	; 0x2a
    8aac:	18fb      	adds	r3, r7, r3
    8aae:	881b      	ldrh	r3, [r3, #0]
    8ab0:	3319      	adds	r3, #25
    8ab2:	001a      	movs	r2, r3
    8ab4:	4b91      	ldr	r3, [pc, #580]	; (8cfc <dir_register+0x34c>)
    8ab6:	210d      	movs	r1, #13
    8ab8:	0010      	movs	r0, r2
    8aba:	4798      	blx	r3
    8abc:	0003      	movs	r3, r0
    8abe:	001a      	movs	r2, r3
    8ac0:	232a      	movs	r3, #42	; 0x2a
    8ac2:	18fb      	adds	r3, r7, r3
    8ac4:	801a      	strh	r2, [r3, #0]
    8ac6:	e003      	b.n	8ad0 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    8ac8:	232a      	movs	r3, #42	; 0x2a
    8aca:	18fb      	adds	r3, r7, r3
    8acc:	2201      	movs	r2, #1
    8ace:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    8ad0:	232f      	movs	r3, #47	; 0x2f
    8ad2:	18fc      	adds	r4, r7, r3
    8ad4:	687b      	ldr	r3, [r7, #4]
    8ad6:	2100      	movs	r1, #0
    8ad8:	0018      	movs	r0, r3
    8ada:	4b89      	ldr	r3, [pc, #548]	; (8d00 <dir_register+0x350>)
    8adc:	4798      	blx	r3
    8ade:	0003      	movs	r3, r0
    8ae0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    8ae2:	232f      	movs	r3, #47	; 0x2f
    8ae4:	18fb      	adds	r3, r7, r3
    8ae6:	781b      	ldrb	r3, [r3, #0]
    8ae8:	2b00      	cmp	r3, #0
    8aea:	d003      	beq.n	8af4 <dir_register+0x144>
    8aec:	232f      	movs	r3, #47	; 0x2f
    8aee:	18fb      	adds	r3, r7, r3
    8af0:	781b      	ldrb	r3, [r3, #0]
    8af2:	e0f9      	b.n	8ce8 <dir_register+0x338>
	n = is = 0;
    8af4:	2328      	movs	r3, #40	; 0x28
    8af6:	18fb      	adds	r3, r7, r3
    8af8:	2200      	movs	r2, #0
    8afa:	801a      	strh	r2, [r3, #0]
    8afc:	232c      	movs	r3, #44	; 0x2c
    8afe:	18fb      	adds	r3, r7, r3
    8b00:	2228      	movs	r2, #40	; 0x28
    8b02:	18ba      	adds	r2, r7, r2
    8b04:	8812      	ldrh	r2, [r2, #0]
    8b06:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    8b08:	687b      	ldr	r3, [r7, #4]
    8b0a:	681a      	ldr	r2, [r3, #0]
    8b0c:	687b      	ldr	r3, [r7, #4]
    8b0e:	691b      	ldr	r3, [r3, #16]
    8b10:	212f      	movs	r1, #47	; 0x2f
    8b12:	187c      	adds	r4, r7, r1
    8b14:	0019      	movs	r1, r3
    8b16:	0010      	movs	r0, r2
    8b18:	4b7a      	ldr	r3, [pc, #488]	; (8d04 <dir_register+0x354>)
    8b1a:	4798      	blx	r3
    8b1c:	0003      	movs	r3, r0
    8b1e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8b20:	232f      	movs	r3, #47	; 0x2f
    8b22:	18fb      	adds	r3, r7, r3
    8b24:	781b      	ldrb	r3, [r3, #0]
    8b26:	2b00      	cmp	r3, #0
    8b28:	d13c      	bne.n	8ba4 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    8b2a:	687b      	ldr	r3, [r7, #4]
    8b2c:	695a      	ldr	r2, [r3, #20]
    8b2e:	231f      	movs	r3, #31
    8b30:	18fb      	adds	r3, r7, r3
    8b32:	7812      	ldrb	r2, [r2, #0]
    8b34:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    8b36:	231f      	movs	r3, #31
    8b38:	18fb      	adds	r3, r7, r3
    8b3a:	781b      	ldrb	r3, [r3, #0]
    8b3c:	2be5      	cmp	r3, #229	; 0xe5
    8b3e:	d004      	beq.n	8b4a <dir_register+0x19a>
    8b40:	231f      	movs	r3, #31
    8b42:	18fb      	adds	r3, r7, r3
    8b44:	781b      	ldrb	r3, [r3, #0]
    8b46:	2b00      	cmp	r3, #0
    8b48:	d119      	bne.n	8b7e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    8b4a:	232c      	movs	r3, #44	; 0x2c
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	881b      	ldrh	r3, [r3, #0]
    8b50:	2b00      	cmp	r3, #0
    8b52:	d104      	bne.n	8b5e <dir_register+0x1ae>
    8b54:	2328      	movs	r3, #40	; 0x28
    8b56:	18fb      	adds	r3, r7, r3
    8b58:	687a      	ldr	r2, [r7, #4]
    8b5a:	88d2      	ldrh	r2, [r2, #6]
    8b5c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    8b5e:	232c      	movs	r3, #44	; 0x2c
    8b60:	18fb      	adds	r3, r7, r3
    8b62:	222c      	movs	r2, #44	; 0x2c
    8b64:	18ba      	adds	r2, r7, r2
    8b66:	8812      	ldrh	r2, [r2, #0]
    8b68:	3201      	adds	r2, #1
    8b6a:	801a      	strh	r2, [r3, #0]
    8b6c:	232c      	movs	r3, #44	; 0x2c
    8b6e:	18fa      	adds	r2, r7, r3
    8b70:	232a      	movs	r3, #42	; 0x2a
    8b72:	18fb      	adds	r3, r7, r3
    8b74:	8812      	ldrh	r2, [r2, #0]
    8b76:	881b      	ldrh	r3, [r3, #0]
    8b78:	429a      	cmp	r2, r3
    8b7a:	d104      	bne.n	8b86 <dir_register+0x1d6>
    8b7c:	e013      	b.n	8ba6 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    8b7e:	232c      	movs	r3, #44	; 0x2c
    8b80:	18fb      	adds	r3, r7, r3
    8b82:	2200      	movs	r2, #0
    8b84:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    8b86:	232f      	movs	r3, #47	; 0x2f
    8b88:	18fc      	adds	r4, r7, r3
    8b8a:	687b      	ldr	r3, [r7, #4]
    8b8c:	2101      	movs	r1, #1
    8b8e:	0018      	movs	r0, r3
    8b90:	4b5d      	ldr	r3, [pc, #372]	; (8d08 <dir_register+0x358>)
    8b92:	4798      	blx	r3
    8b94:	0003      	movs	r3, r0
    8b96:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8b98:	232f      	movs	r3, #47	; 0x2f
    8b9a:	18fb      	adds	r3, r7, r3
    8b9c:	781b      	ldrb	r3, [r3, #0]
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	d0b2      	beq.n	8b08 <dir_register+0x158>
    8ba2:	e000      	b.n	8ba6 <dir_register+0x1f6>
		if (res != FR_OK) break;
    8ba4:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    8ba6:	232f      	movs	r3, #47	; 0x2f
    8ba8:	18fb      	adds	r3, r7, r3
    8baa:	781b      	ldrb	r3, [r3, #0]
    8bac:	2b00      	cmp	r3, #0
    8bae:	d163      	bne.n	8c78 <dir_register+0x2c8>
    8bb0:	232a      	movs	r3, #42	; 0x2a
    8bb2:	18fb      	adds	r3, r7, r3
    8bb4:	881b      	ldrh	r3, [r3, #0]
    8bb6:	2b01      	cmp	r3, #1
    8bb8:	d95e      	bls.n	8c78 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    8bba:	232f      	movs	r3, #47	; 0x2f
    8bbc:	18fc      	adds	r4, r7, r3
    8bbe:	2328      	movs	r3, #40	; 0x28
    8bc0:	18fb      	adds	r3, r7, r3
    8bc2:	881a      	ldrh	r2, [r3, #0]
    8bc4:	687b      	ldr	r3, [r7, #4]
    8bc6:	0011      	movs	r1, r2
    8bc8:	0018      	movs	r0, r3
    8bca:	4b4d      	ldr	r3, [pc, #308]	; (8d00 <dir_register+0x350>)
    8bcc:	4798      	blx	r3
    8bce:	0003      	movs	r3, r0
    8bd0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8bd2:	232f      	movs	r3, #47	; 0x2f
    8bd4:	18fb      	adds	r3, r7, r3
    8bd6:	781b      	ldrb	r3, [r3, #0]
    8bd8:	2b00      	cmp	r3, #0
    8bda:	d14d      	bne.n	8c78 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    8bdc:	687b      	ldr	r3, [r7, #4]
    8bde:	699b      	ldr	r3, [r3, #24]
    8be0:	221e      	movs	r2, #30
    8be2:	18bc      	adds	r4, r7, r2
    8be4:	0018      	movs	r0, r3
    8be6:	4b49      	ldr	r3, [pc, #292]	; (8d0c <dir_register+0x35c>)
    8be8:	4798      	blx	r3
    8bea:	0003      	movs	r3, r0
    8bec:	7023      	strb	r3, [r4, #0]
			ne--;
    8bee:	232a      	movs	r3, #42	; 0x2a
    8bf0:	18fb      	adds	r3, r7, r3
    8bf2:	881a      	ldrh	r2, [r3, #0]
    8bf4:	232a      	movs	r3, #42	; 0x2a
    8bf6:	18fb      	adds	r3, r7, r3
    8bf8:	3a01      	subs	r2, #1
    8bfa:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    8bfc:	687b      	ldr	r3, [r7, #4]
    8bfe:	681a      	ldr	r2, [r3, #0]
    8c00:	687b      	ldr	r3, [r7, #4]
    8c02:	691b      	ldr	r3, [r3, #16]
    8c04:	212f      	movs	r1, #47	; 0x2f
    8c06:	187c      	adds	r4, r7, r1
    8c08:	0019      	movs	r1, r3
    8c0a:	0010      	movs	r0, r2
    8c0c:	4b3d      	ldr	r3, [pc, #244]	; (8d04 <dir_register+0x354>)
    8c0e:	4798      	blx	r3
    8c10:	0003      	movs	r3, r0
    8c12:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    8c14:	232f      	movs	r3, #47	; 0x2f
    8c16:	18fb      	adds	r3, r7, r3
    8c18:	781b      	ldrb	r3, [r3, #0]
    8c1a:	2b00      	cmp	r3, #0
    8c1c:	d12b      	bne.n	8c76 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    8c1e:	687b      	ldr	r3, [r7, #4]
    8c20:	69d8      	ldr	r0, [r3, #28]
    8c22:	687b      	ldr	r3, [r7, #4]
    8c24:	6959      	ldr	r1, [r3, #20]
    8c26:	232a      	movs	r3, #42	; 0x2a
    8c28:	18fb      	adds	r3, r7, r3
    8c2a:	881b      	ldrh	r3, [r3, #0]
    8c2c:	b2da      	uxtb	r2, r3
    8c2e:	231e      	movs	r3, #30
    8c30:	18fb      	adds	r3, r7, r3
    8c32:	781b      	ldrb	r3, [r3, #0]
    8c34:	4c36      	ldr	r4, [pc, #216]	; (8d10 <dir_register+0x360>)
    8c36:	47a0      	blx	r4
				dj->fs->wflag = 1;
    8c38:	687b      	ldr	r3, [r7, #4]
    8c3a:	681b      	ldr	r3, [r3, #0]
    8c3c:	2201      	movs	r2, #1
    8c3e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    8c40:	232f      	movs	r3, #47	; 0x2f
    8c42:	18fc      	adds	r4, r7, r3
    8c44:	687b      	ldr	r3, [r7, #4]
    8c46:	2100      	movs	r1, #0
    8c48:	0018      	movs	r0, r3
    8c4a:	4b2f      	ldr	r3, [pc, #188]	; (8d08 <dir_register+0x358>)
    8c4c:	4798      	blx	r3
    8c4e:	0003      	movs	r3, r0
    8c50:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    8c52:	232f      	movs	r3, #47	; 0x2f
    8c54:	18fb      	adds	r3, r7, r3
    8c56:	781b      	ldrb	r3, [r3, #0]
    8c58:	2b00      	cmp	r3, #0
    8c5a:	d10d      	bne.n	8c78 <dir_register+0x2c8>
    8c5c:	232a      	movs	r3, #42	; 0x2a
    8c5e:	18fb      	adds	r3, r7, r3
    8c60:	222a      	movs	r2, #42	; 0x2a
    8c62:	18ba      	adds	r2, r7, r2
    8c64:	8812      	ldrh	r2, [r2, #0]
    8c66:	3a01      	subs	r2, #1
    8c68:	801a      	strh	r2, [r3, #0]
    8c6a:	232a      	movs	r3, #42	; 0x2a
    8c6c:	18fb      	adds	r3, r7, r3
    8c6e:	881b      	ldrh	r3, [r3, #0]
    8c70:	2b00      	cmp	r3, #0
    8c72:	d1c3      	bne.n	8bfc <dir_register+0x24c>
    8c74:	e000      	b.n	8c78 <dir_register+0x2c8>
				if (res != FR_OK) break;
    8c76:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    8c78:	232f      	movs	r3, #47	; 0x2f
    8c7a:	18fb      	adds	r3, r7, r3
    8c7c:	781b      	ldrb	r3, [r3, #0]
    8c7e:	2b00      	cmp	r3, #0
    8c80:	d12f      	bne.n	8ce2 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    8c82:	687b      	ldr	r3, [r7, #4]
    8c84:	681a      	ldr	r2, [r3, #0]
    8c86:	687b      	ldr	r3, [r7, #4]
    8c88:	691b      	ldr	r3, [r3, #16]
    8c8a:	212f      	movs	r1, #47	; 0x2f
    8c8c:	187c      	adds	r4, r7, r1
    8c8e:	0019      	movs	r1, r3
    8c90:	0010      	movs	r0, r2
    8c92:	4b1c      	ldr	r3, [pc, #112]	; (8d04 <dir_register+0x354>)
    8c94:	4798      	blx	r3
    8c96:	0003      	movs	r3, r0
    8c98:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8c9a:	232f      	movs	r3, #47	; 0x2f
    8c9c:	18fb      	adds	r3, r7, r3
    8c9e:	781b      	ldrb	r3, [r3, #0]
    8ca0:	2b00      	cmp	r3, #0
    8ca2:	d11e      	bne.n	8ce2 <dir_register+0x332>
			dir = dj->dir;
    8ca4:	687b      	ldr	r3, [r7, #4]
    8ca6:	695b      	ldr	r3, [r3, #20]
    8ca8:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    8caa:	69bb      	ldr	r3, [r7, #24]
    8cac:	2220      	movs	r2, #32
    8cae:	2100      	movs	r1, #0
    8cb0:	0018      	movs	r0, r3
    8cb2:	4b18      	ldr	r3, [pc, #96]	; (8d14 <dir_register+0x364>)
    8cb4:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    8cb6:	687b      	ldr	r3, [r7, #4]
    8cb8:	6999      	ldr	r1, [r3, #24]
    8cba:	69bb      	ldr	r3, [r7, #24]
    8cbc:	220b      	movs	r2, #11
    8cbe:	0018      	movs	r0, r3
    8cc0:	4b0b      	ldr	r3, [pc, #44]	; (8cf0 <dir_register+0x340>)
    8cc2:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    8cc4:	69bb      	ldr	r3, [r7, #24]
    8cc6:	330c      	adds	r3, #12
    8cc8:	001a      	movs	r2, r3
    8cca:	687b      	ldr	r3, [r7, #4]
    8ccc:	699b      	ldr	r3, [r3, #24]
    8cce:	330b      	adds	r3, #11
    8cd0:	781b      	ldrb	r3, [r3, #0]
    8cd2:	2118      	movs	r1, #24
    8cd4:	400b      	ands	r3, r1
    8cd6:	b2db      	uxtb	r3, r3
    8cd8:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    8cda:	687b      	ldr	r3, [r7, #4]
    8cdc:	681b      	ldr	r3, [r3, #0]
    8cde:	2201      	movs	r2, #1
    8ce0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    8ce2:	232f      	movs	r3, #47	; 0x2f
    8ce4:	18fb      	adds	r3, r7, r3
    8ce6:	781b      	ldrb	r3, [r3, #0]
}
    8ce8:	0018      	movs	r0, r3
    8cea:	46bd      	mov	sp, r7
    8cec:	b00d      	add	sp, #52	; 0x34
    8cee:	bd90      	pop	{r4, r7, pc}
    8cf0:	00007561 	.word	0x00007561
    8cf4:	000084a1 	.word	0x000084a1
    8cf8:	000085f1 	.word	0x000085f1
    8cfc:	0000b5d9 	.word	0x0000b5d9
    8d00:	00007e89 	.word	0x00007e89
    8d04:	00007645 	.word	0x00007645
    8d08:	00007fb9 	.word	0x00007fb9
    8d0c:	000085a1 	.word	0x000085a1
    8d10:	00008391 	.word	0x00008391
    8d14:	00007599 	.word	0x00007599

00008d18 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8d18:	b590      	push	{r4, r7, lr}
    8d1a:	b085      	sub	sp, #20
    8d1c:	af00      	add	r7, sp, #0
    8d1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    8d20:	230c      	movs	r3, #12
    8d22:	18fb      	adds	r3, r7, r3
    8d24:	687a      	ldr	r2, [r7, #4]
    8d26:	88d2      	ldrh	r2, [r2, #6]
    8d28:	801a      	strh	r2, [r3, #0]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    8d2a:	687b      	ldr	r3, [r7, #4]
    8d2c:	8c1b      	ldrh	r3, [r3, #32]
    8d2e:	4a2c      	ldr	r2, [pc, #176]	; (8de0 <dir_remove+0xc8>)
    8d30:	4293      	cmp	r3, r2
    8d32:	d002      	beq.n	8d3a <dir_remove+0x22>
    8d34:	687b      	ldr	r3, [r7, #4]
    8d36:	8c1b      	ldrh	r3, [r3, #32]
    8d38:	e002      	b.n	8d40 <dir_remove+0x28>
    8d3a:	230c      	movs	r3, #12
    8d3c:	18fb      	adds	r3, r7, r3
    8d3e:	881b      	ldrh	r3, [r3, #0]
    8d40:	220f      	movs	r2, #15
    8d42:	18bc      	adds	r4, r7, r2
    8d44:	687a      	ldr	r2, [r7, #4]
    8d46:	0019      	movs	r1, r3
    8d48:	0010      	movs	r0, r2
    8d4a:	4b26      	ldr	r3, [pc, #152]	; (8de4 <dir_remove+0xcc>)
    8d4c:	4798      	blx	r3
    8d4e:	0003      	movs	r3, r0
    8d50:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    8d52:	230f      	movs	r3, #15
    8d54:	18fb      	adds	r3, r7, r3
    8d56:	781b      	ldrb	r3, [r3, #0]
    8d58:	2b00      	cmp	r3, #0
    8d5a:	d13a      	bne.n	8dd2 <dir_remove+0xba>
		do {
			res = move_window(dj->fs, dj->sect);
    8d5c:	687b      	ldr	r3, [r7, #4]
    8d5e:	681a      	ldr	r2, [r3, #0]
    8d60:	687b      	ldr	r3, [r7, #4]
    8d62:	691b      	ldr	r3, [r3, #16]
    8d64:	210f      	movs	r1, #15
    8d66:	187c      	adds	r4, r7, r1
    8d68:	0019      	movs	r1, r3
    8d6a:	0010      	movs	r0, r2
    8d6c:	4b1e      	ldr	r3, [pc, #120]	; (8de8 <dir_remove+0xd0>)
    8d6e:	4798      	blx	r3
    8d70:	0003      	movs	r3, r0
    8d72:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8d74:	230f      	movs	r3, #15
    8d76:	18fb      	adds	r3, r7, r3
    8d78:	781b      	ldrb	r3, [r3, #0]
    8d7a:	2b00      	cmp	r3, #0
    8d7c:	d11d      	bne.n	8dba <dir_remove+0xa2>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    8d7e:	687b      	ldr	r3, [r7, #4]
    8d80:	695b      	ldr	r3, [r3, #20]
    8d82:	22e5      	movs	r2, #229	; 0xe5
    8d84:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    8d86:	687b      	ldr	r3, [r7, #4]
    8d88:	681b      	ldr	r3, [r3, #0]
    8d8a:	2201      	movs	r2, #1
    8d8c:	711a      	strb	r2, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8d8e:	687b      	ldr	r3, [r7, #4]
    8d90:	88db      	ldrh	r3, [r3, #6]
    8d92:	220c      	movs	r2, #12
    8d94:	18ba      	adds	r2, r7, r2
    8d96:	8812      	ldrh	r2, [r2, #0]
    8d98:	429a      	cmp	r2, r3
    8d9a:	d910      	bls.n	8dbe <dir_remove+0xa6>
			res = dir_next(dj, 0);		/* Next entry */
    8d9c:	230f      	movs	r3, #15
    8d9e:	18fc      	adds	r4, r7, r3
    8da0:	687b      	ldr	r3, [r7, #4]
    8da2:	2100      	movs	r1, #0
    8da4:	0018      	movs	r0, r3
    8da6:	4b11      	ldr	r3, [pc, #68]	; (8dec <dir_remove+0xd4>)
    8da8:	4798      	blx	r3
    8daa:	0003      	movs	r3, r0
    8dac:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    8dae:	230f      	movs	r3, #15
    8db0:	18fb      	adds	r3, r7, r3
    8db2:	781b      	ldrb	r3, [r3, #0]
    8db4:	2b00      	cmp	r3, #0
    8db6:	d0d1      	beq.n	8d5c <dir_remove+0x44>
    8db8:	e002      	b.n	8dc0 <dir_remove+0xa8>
			if (res != FR_OK) break;
    8dba:	46c0      	nop			; (mov r8, r8)
    8dbc:	e000      	b.n	8dc0 <dir_remove+0xa8>
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8dbe:	46c0      	nop			; (mov r8, r8)
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    8dc0:	230f      	movs	r3, #15
    8dc2:	18fb      	adds	r3, r7, r3
    8dc4:	781b      	ldrb	r3, [r3, #0]
    8dc6:	2b04      	cmp	r3, #4
    8dc8:	d103      	bne.n	8dd2 <dir_remove+0xba>
    8dca:	230f      	movs	r3, #15
    8dcc:	18fb      	adds	r3, r7, r3
    8dce:	2202      	movs	r2, #2
    8dd0:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
		}
	}
#endif

	return res;
    8dd2:	230f      	movs	r3, #15
    8dd4:	18fb      	adds	r3, r7, r3
    8dd6:	781b      	ldrb	r3, [r3, #0]
}
    8dd8:	0018      	movs	r0, r3
    8dda:	46bd      	mov	sp, r7
    8ddc:	b005      	add	sp, #20
    8dde:	bd90      	pop	{r4, r7, pc}
    8de0:	0000ffff 	.word	0x0000ffff
    8de4:	00007e89 	.word	0x00007e89
    8de8:	00007645 	.word	0x00007645
    8dec:	00007fb9 	.word	0x00007fb9

00008df0 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    8df0:	b590      	push	{r4, r7, lr}
    8df2:	b08b      	sub	sp, #44	; 0x2c
    8df4:	af00      	add	r7, sp, #0
    8df6:	6078      	str	r0, [r7, #4]
    8df8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8dfa:	683b      	ldr	r3, [r7, #0]
    8dfc:	681b      	ldr	r3, [r3, #0]
    8dfe:	613b      	str	r3, [r7, #16]
    8e00:	e002      	b.n	8e08 <create_name+0x18>
    8e02:	693b      	ldr	r3, [r7, #16]
    8e04:	3301      	adds	r3, #1
    8e06:	613b      	str	r3, [r7, #16]
    8e08:	693b      	ldr	r3, [r7, #16]
    8e0a:	781b      	ldrb	r3, [r3, #0]
    8e0c:	2b2f      	cmp	r3, #47	; 0x2f
    8e0e:	d0f8      	beq.n	8e02 <create_name+0x12>
    8e10:	693b      	ldr	r3, [r7, #16]
    8e12:	781b      	ldrb	r3, [r3, #0]
    8e14:	2b5c      	cmp	r3, #92	; 0x5c
    8e16:	d0f4      	beq.n	8e02 <create_name+0x12>
	lfn = dj->lfn;
    8e18:	687b      	ldr	r3, [r7, #4]
    8e1a:	69db      	ldr	r3, [r3, #28]
    8e1c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    8e1e:	2300      	movs	r3, #0
    8e20:	617b      	str	r3, [r7, #20]
    8e22:	697b      	ldr	r3, [r7, #20]
    8e24:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    8e26:	69bb      	ldr	r3, [r7, #24]
    8e28:	1c5a      	adds	r2, r3, #1
    8e2a:	61ba      	str	r2, [r7, #24]
    8e2c:	693a      	ldr	r2, [r7, #16]
    8e2e:	18d3      	adds	r3, r2, r3
    8e30:	781a      	ldrb	r2, [r3, #0]
    8e32:	2324      	movs	r3, #36	; 0x24
    8e34:	18fb      	adds	r3, r7, r3
    8e36:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    8e38:	2324      	movs	r3, #36	; 0x24
    8e3a:	18fb      	adds	r3, r7, r3
    8e3c:	881b      	ldrh	r3, [r3, #0]
    8e3e:	2b1f      	cmp	r3, #31
    8e40:	d944      	bls.n	8ecc <create_name+0xdc>
    8e42:	2324      	movs	r3, #36	; 0x24
    8e44:	18fb      	adds	r3, r7, r3
    8e46:	881b      	ldrh	r3, [r3, #0]
    8e48:	2b2f      	cmp	r3, #47	; 0x2f
    8e4a:	d03f      	beq.n	8ecc <create_name+0xdc>
    8e4c:	2324      	movs	r3, #36	; 0x24
    8e4e:	18fb      	adds	r3, r7, r3
    8e50:	881b      	ldrh	r3, [r3, #0]
    8e52:	2b5c      	cmp	r3, #92	; 0x5c
    8e54:	d03a      	beq.n	8ecc <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    8e56:	697b      	ldr	r3, [r7, #20]
    8e58:	2bfe      	cmp	r3, #254	; 0xfe
    8e5a:	d901      	bls.n	8e60 <create_name+0x70>
			return FR_INVALID_NAME;
    8e5c:	2306      	movs	r3, #6
    8e5e:	e1e7      	b.n	9230 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    8e60:	2324      	movs	r3, #36	; 0x24
    8e62:	18fb      	adds	r3, r7, r3
    8e64:	2224      	movs	r2, #36	; 0x24
    8e66:	18ba      	adds	r2, r7, r2
    8e68:	8812      	ldrh	r2, [r2, #0]
    8e6a:	21ff      	movs	r1, #255	; 0xff
    8e6c:	400a      	ands	r2, r1
    8e6e:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    8e70:	2324      	movs	r3, #36	; 0x24
    8e72:	18fc      	adds	r4, r7, r3
    8e74:	2324      	movs	r3, #36	; 0x24
    8e76:	18fb      	adds	r3, r7, r3
    8e78:	881b      	ldrh	r3, [r3, #0]
    8e7a:	2101      	movs	r1, #1
    8e7c:	0018      	movs	r0, r3
    8e7e:	4bba      	ldr	r3, [pc, #744]	; (9168 <create_name+0x378>)
    8e80:	4798      	blx	r3
    8e82:	0003      	movs	r3, r0
    8e84:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    8e86:	2324      	movs	r3, #36	; 0x24
    8e88:	18fb      	adds	r3, r7, r3
    8e8a:	881b      	ldrh	r3, [r3, #0]
    8e8c:	2b00      	cmp	r3, #0
    8e8e:	d101      	bne.n	8e94 <create_name+0xa4>
    8e90:	2306      	movs	r3, #6
    8e92:	e1cd      	b.n	9230 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    8e94:	2324      	movs	r3, #36	; 0x24
    8e96:	18fb      	adds	r3, r7, r3
    8e98:	881b      	ldrh	r3, [r3, #0]
    8e9a:	2b7f      	cmp	r3, #127	; 0x7f
    8e9c:	d80b      	bhi.n	8eb6 <create_name+0xc6>
    8e9e:	2324      	movs	r3, #36	; 0x24
    8ea0:	18fb      	adds	r3, r7, r3
    8ea2:	881a      	ldrh	r2, [r3, #0]
    8ea4:	4bb1      	ldr	r3, [pc, #708]	; (916c <create_name+0x37c>)
    8ea6:	0011      	movs	r1, r2
    8ea8:	0018      	movs	r0, r3
    8eaa:	4bb1      	ldr	r3, [pc, #708]	; (9170 <create_name+0x380>)
    8eac:	4798      	blx	r3
    8eae:	1e03      	subs	r3, r0, #0
    8eb0:	d001      	beq.n	8eb6 <create_name+0xc6>
			return FR_INVALID_NAME;
    8eb2:	2306      	movs	r3, #6
    8eb4:	e1bc      	b.n	9230 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    8eb6:	697b      	ldr	r3, [r7, #20]
    8eb8:	1c5a      	adds	r2, r3, #1
    8eba:	617a      	str	r2, [r7, #20]
    8ebc:	005b      	lsls	r3, r3, #1
    8ebe:	68fa      	ldr	r2, [r7, #12]
    8ec0:	18d3      	adds	r3, r2, r3
    8ec2:	2224      	movs	r2, #36	; 0x24
    8ec4:	18ba      	adds	r2, r7, r2
    8ec6:	8812      	ldrh	r2, [r2, #0]
    8ec8:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    8eca:	e7ac      	b.n	8e26 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8ecc:	693a      	ldr	r2, [r7, #16]
    8ece:	69bb      	ldr	r3, [r7, #24]
    8ed0:	18d2      	adds	r2, r2, r3
    8ed2:	683b      	ldr	r3, [r7, #0]
    8ed4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8ed6:	2324      	movs	r3, #36	; 0x24
    8ed8:	18fb      	adds	r3, r7, r3
    8eda:	881b      	ldrh	r3, [r3, #0]
    8edc:	2b1f      	cmp	r3, #31
    8ede:	d801      	bhi.n	8ee4 <create_name+0xf4>
    8ee0:	2204      	movs	r2, #4
    8ee2:	e000      	b.n	8ee6 <create_name+0xf6>
    8ee4:	2200      	movs	r2, #0
    8ee6:	2326      	movs	r3, #38	; 0x26
    8ee8:	18fb      	adds	r3, r7, r3
    8eea:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    8eec:	e017      	b.n	8f1e <create_name+0x12e>
		w = lfn[di-1];
    8eee:	697b      	ldr	r3, [r7, #20]
    8ef0:	4aa0      	ldr	r2, [pc, #640]	; (9174 <create_name+0x384>)
    8ef2:	4694      	mov	ip, r2
    8ef4:	4463      	add	r3, ip
    8ef6:	005b      	lsls	r3, r3, #1
    8ef8:	68fa      	ldr	r2, [r7, #12]
    8efa:	18d2      	adds	r2, r2, r3
    8efc:	2324      	movs	r3, #36	; 0x24
    8efe:	18fb      	adds	r3, r7, r3
    8f00:	8812      	ldrh	r2, [r2, #0]
    8f02:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    8f04:	2324      	movs	r3, #36	; 0x24
    8f06:	18fb      	adds	r3, r7, r3
    8f08:	881b      	ldrh	r3, [r3, #0]
    8f0a:	2b20      	cmp	r3, #32
    8f0c:	d004      	beq.n	8f18 <create_name+0x128>
    8f0e:	2324      	movs	r3, #36	; 0x24
    8f10:	18fb      	adds	r3, r7, r3
    8f12:	881b      	ldrh	r3, [r3, #0]
    8f14:	2b2e      	cmp	r3, #46	; 0x2e
    8f16:	d106      	bne.n	8f26 <create_name+0x136>
		di--;
    8f18:	697b      	ldr	r3, [r7, #20]
    8f1a:	3b01      	subs	r3, #1
    8f1c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8f1e:	697b      	ldr	r3, [r7, #20]
    8f20:	2b00      	cmp	r3, #0
    8f22:	d1e4      	bne.n	8eee <create_name+0xfe>
    8f24:	e000      	b.n	8f28 <create_name+0x138>
		if (w != ' ' && w != '.') break;
    8f26:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8f28:	697b      	ldr	r3, [r7, #20]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d101      	bne.n	8f32 <create_name+0x142>
    8f2e:	2306      	movs	r3, #6
    8f30:	e17e      	b.n	9230 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    8f32:	697b      	ldr	r3, [r7, #20]
    8f34:	005b      	lsls	r3, r3, #1
    8f36:	68fa      	ldr	r2, [r7, #12]
    8f38:	18d3      	adds	r3, r2, r3
    8f3a:	2200      	movs	r2, #0
    8f3c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    8f3e:	687b      	ldr	r3, [r7, #4]
    8f40:	699b      	ldr	r3, [r3, #24]
    8f42:	220b      	movs	r2, #11
    8f44:	2120      	movs	r1, #32
    8f46:	0018      	movs	r0, r3
    8f48:	4b8b      	ldr	r3, [pc, #556]	; (9178 <create_name+0x388>)
    8f4a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    8f4c:	2300      	movs	r3, #0
    8f4e:	61bb      	str	r3, [r7, #24]
    8f50:	e002      	b.n	8f58 <create_name+0x168>
    8f52:	69bb      	ldr	r3, [r7, #24]
    8f54:	3301      	adds	r3, #1
    8f56:	61bb      	str	r3, [r7, #24]
    8f58:	69bb      	ldr	r3, [r7, #24]
    8f5a:	005b      	lsls	r3, r3, #1
    8f5c:	68fa      	ldr	r2, [r7, #12]
    8f5e:	18d3      	adds	r3, r2, r3
    8f60:	881b      	ldrh	r3, [r3, #0]
    8f62:	2b20      	cmp	r3, #32
    8f64:	d0f5      	beq.n	8f52 <create_name+0x162>
    8f66:	69bb      	ldr	r3, [r7, #24]
    8f68:	005b      	lsls	r3, r3, #1
    8f6a:	68fa      	ldr	r2, [r7, #12]
    8f6c:	18d3      	adds	r3, r2, r3
    8f6e:	881b      	ldrh	r3, [r3, #0]
    8f70:	2b2e      	cmp	r3, #46	; 0x2e
    8f72:	d0ee      	beq.n	8f52 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    8f74:	69bb      	ldr	r3, [r7, #24]
    8f76:	2b00      	cmp	r3, #0
    8f78:	d00b      	beq.n	8f92 <create_name+0x1a2>
    8f7a:	2326      	movs	r3, #38	; 0x26
    8f7c:	18fb      	adds	r3, r7, r3
    8f7e:	2226      	movs	r2, #38	; 0x26
    8f80:	18ba      	adds	r2, r7, r2
    8f82:	7812      	ldrb	r2, [r2, #0]
    8f84:	2103      	movs	r1, #3
    8f86:	430a      	orrs	r2, r1
    8f88:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    8f8a:	e002      	b.n	8f92 <create_name+0x1a2>
    8f8c:	697b      	ldr	r3, [r7, #20]
    8f8e:	3b01      	subs	r3, #1
    8f90:	617b      	str	r3, [r7, #20]
    8f92:	697b      	ldr	r3, [r7, #20]
    8f94:	2b00      	cmp	r3, #0
    8f96:	d009      	beq.n	8fac <create_name+0x1bc>
    8f98:	697b      	ldr	r3, [r7, #20]
    8f9a:	4a76      	ldr	r2, [pc, #472]	; (9174 <create_name+0x384>)
    8f9c:	4694      	mov	ip, r2
    8f9e:	4463      	add	r3, ip
    8fa0:	005b      	lsls	r3, r3, #1
    8fa2:	68fa      	ldr	r2, [r7, #12]
    8fa4:	18d3      	adds	r3, r2, r3
    8fa6:	881b      	ldrh	r3, [r3, #0]
    8fa8:	2b2e      	cmp	r3, #46	; 0x2e
    8faa:	d1ef      	bne.n	8f8c <create_name+0x19c>

	b = i = 0; ni = 8;
    8fac:	2300      	movs	r3, #0
    8fae:	623b      	str	r3, [r7, #32]
    8fb0:	2327      	movs	r3, #39	; 0x27
    8fb2:	18fb      	adds	r3, r7, r3
    8fb4:	2200      	movs	r2, #0
    8fb6:	701a      	strb	r2, [r3, #0]
    8fb8:	2308      	movs	r3, #8
    8fba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    8fbc:	69bb      	ldr	r3, [r7, #24]
    8fbe:	1c5a      	adds	r2, r3, #1
    8fc0:	61ba      	str	r2, [r7, #24]
    8fc2:	005b      	lsls	r3, r3, #1
    8fc4:	68fa      	ldr	r2, [r7, #12]
    8fc6:	18d2      	adds	r2, r2, r3
    8fc8:	2324      	movs	r3, #36	; 0x24
    8fca:	18fb      	adds	r3, r7, r3
    8fcc:	8812      	ldrh	r2, [r2, #0]
    8fce:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    8fd0:	2324      	movs	r3, #36	; 0x24
    8fd2:	18fb      	adds	r3, r7, r3
    8fd4:	881b      	ldrh	r3, [r3, #0]
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	d100      	bne.n	8fdc <create_name+0x1ec>
    8fda:	e0c3      	b.n	9164 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    8fdc:	2324      	movs	r3, #36	; 0x24
    8fde:	18fb      	adds	r3, r7, r3
    8fe0:	881b      	ldrh	r3, [r3, #0]
    8fe2:	2b20      	cmp	r3, #32
    8fe4:	d008      	beq.n	8ff8 <create_name+0x208>
    8fe6:	2324      	movs	r3, #36	; 0x24
    8fe8:	18fb      	adds	r3, r7, r3
    8fea:	881b      	ldrh	r3, [r3, #0]
    8fec:	2b2e      	cmp	r3, #46	; 0x2e
    8fee:	d10c      	bne.n	900a <create_name+0x21a>
    8ff0:	69ba      	ldr	r2, [r7, #24]
    8ff2:	697b      	ldr	r3, [r7, #20]
    8ff4:	429a      	cmp	r2, r3
    8ff6:	d008      	beq.n	900a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    8ff8:	2326      	movs	r3, #38	; 0x26
    8ffa:	18fb      	adds	r3, r7, r3
    8ffc:	2226      	movs	r2, #38	; 0x26
    8ffe:	18ba      	adds	r2, r7, r2
    9000:	7812      	ldrb	r2, [r2, #0]
    9002:	2103      	movs	r1, #3
    9004:	430a      	orrs	r2, r1
    9006:	701a      	strb	r2, [r3, #0]
    9008:	e0ab      	b.n	9162 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    900a:	6a3a      	ldr	r2, [r7, #32]
    900c:	69fb      	ldr	r3, [r7, #28]
    900e:	429a      	cmp	r2, r3
    9010:	d203      	bcs.n	901a <create_name+0x22a>
    9012:	69ba      	ldr	r2, [r7, #24]
    9014:	697b      	ldr	r3, [r7, #20]
    9016:	429a      	cmp	r2, r3
    9018:	d12a      	bne.n	9070 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    901a:	69fb      	ldr	r3, [r7, #28]
    901c:	2b0b      	cmp	r3, #11
    901e:	d108      	bne.n	9032 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    9020:	2326      	movs	r3, #38	; 0x26
    9022:	18fb      	adds	r3, r7, r3
    9024:	2226      	movs	r2, #38	; 0x26
    9026:	18ba      	adds	r2, r7, r2
    9028:	7812      	ldrb	r2, [r2, #0]
    902a:	2103      	movs	r1, #3
    902c:	430a      	orrs	r2, r1
    902e:	701a      	strb	r2, [r3, #0]
    9030:	e0a9      	b.n	9186 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    9032:	69ba      	ldr	r2, [r7, #24]
    9034:	697b      	ldr	r3, [r7, #20]
    9036:	429a      	cmp	r2, r3
    9038:	d007      	beq.n	904a <create_name+0x25a>
    903a:	2326      	movs	r3, #38	; 0x26
    903c:	18fb      	adds	r3, r7, r3
    903e:	2226      	movs	r2, #38	; 0x26
    9040:	18ba      	adds	r2, r7, r2
    9042:	7812      	ldrb	r2, [r2, #0]
    9044:	2103      	movs	r1, #3
    9046:	430a      	orrs	r2, r1
    9048:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    904a:	69ba      	ldr	r2, [r7, #24]
    904c:	697b      	ldr	r3, [r7, #20]
    904e:	429a      	cmp	r2, r3
    9050:	d900      	bls.n	9054 <create_name+0x264>
    9052:	e097      	b.n	9184 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    9054:	697b      	ldr	r3, [r7, #20]
    9056:	61bb      	str	r3, [r7, #24]
    9058:	2308      	movs	r3, #8
    905a:	623b      	str	r3, [r7, #32]
    905c:	230b      	movs	r3, #11
    905e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    9060:	2327      	movs	r3, #39	; 0x27
    9062:	18fb      	adds	r3, r7, r3
    9064:	2227      	movs	r2, #39	; 0x27
    9066:	18ba      	adds	r2, r7, r2
    9068:	7812      	ldrb	r2, [r2, #0]
    906a:	0092      	lsls	r2, r2, #2
    906c:	701a      	strb	r2, [r3, #0]
    906e:	e078      	b.n	9162 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    9070:	2324      	movs	r3, #36	; 0x24
    9072:	18fb      	adds	r3, r7, r3
    9074:	881b      	ldrh	r3, [r3, #0]
    9076:	2b7f      	cmp	r3, #127	; 0x7f
    9078:	d920      	bls.n	90bc <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    907a:	2324      	movs	r3, #36	; 0x24
    907c:	18fc      	adds	r4, r7, r3
    907e:	2324      	movs	r3, #36	; 0x24
    9080:	18fb      	adds	r3, r7, r3
    9082:	881b      	ldrh	r3, [r3, #0]
    9084:	2100      	movs	r1, #0
    9086:	0018      	movs	r0, r3
    9088:	4b37      	ldr	r3, [pc, #220]	; (9168 <create_name+0x378>)
    908a:	4798      	blx	r3
    908c:	0003      	movs	r3, r0
    908e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    9090:	2324      	movs	r3, #36	; 0x24
    9092:	18fb      	adds	r3, r7, r3
    9094:	881b      	ldrh	r3, [r3, #0]
    9096:	2b00      	cmp	r3, #0
    9098:	d008      	beq.n	90ac <create_name+0x2bc>
    909a:	2324      	movs	r3, #36	; 0x24
    909c:	18fb      	adds	r3, r7, r3
    909e:	881b      	ldrh	r3, [r3, #0]
    90a0:	3b80      	subs	r3, #128	; 0x80
    90a2:	4a36      	ldr	r2, [pc, #216]	; (917c <create_name+0x38c>)
    90a4:	5cd2      	ldrb	r2, [r2, r3]
    90a6:	2324      	movs	r3, #36	; 0x24
    90a8:	18fb      	adds	r3, r7, r3
    90aa:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    90ac:	2326      	movs	r3, #38	; 0x26
    90ae:	18fb      	adds	r3, r7, r3
    90b0:	2226      	movs	r2, #38	; 0x26
    90b2:	18ba      	adds	r2, r7, r2
    90b4:	7812      	ldrb	r2, [r2, #0]
    90b6:	2102      	movs	r1, #2
    90b8:	430a      	orrs	r2, r1
    90ba:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    90bc:	2324      	movs	r3, #36	; 0x24
    90be:	18fb      	adds	r3, r7, r3
    90c0:	881b      	ldrh	r3, [r3, #0]
    90c2:	2b00      	cmp	r3, #0
    90c4:	d009      	beq.n	90da <create_name+0x2ea>
    90c6:	2324      	movs	r3, #36	; 0x24
    90c8:	18fb      	adds	r3, r7, r3
    90ca:	881a      	ldrh	r2, [r3, #0]
    90cc:	4b2c      	ldr	r3, [pc, #176]	; (9180 <create_name+0x390>)
    90ce:	0011      	movs	r1, r2
    90d0:	0018      	movs	r0, r3
    90d2:	4b27      	ldr	r3, [pc, #156]	; (9170 <create_name+0x380>)
    90d4:	4798      	blx	r3
    90d6:	1e03      	subs	r3, r0, #0
    90d8:	d00c      	beq.n	90f4 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    90da:	2324      	movs	r3, #36	; 0x24
    90dc:	18fb      	adds	r3, r7, r3
    90de:	225f      	movs	r2, #95	; 0x5f
    90e0:	801a      	strh	r2, [r3, #0]
    90e2:	2326      	movs	r3, #38	; 0x26
    90e4:	18fb      	adds	r3, r7, r3
    90e6:	2226      	movs	r2, #38	; 0x26
    90e8:	18ba      	adds	r2, r7, r2
    90ea:	7812      	ldrb	r2, [r2, #0]
    90ec:	2103      	movs	r1, #3
    90ee:	430a      	orrs	r2, r1
    90f0:	701a      	strb	r2, [r3, #0]
    90f2:	e02b      	b.n	914c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    90f4:	2324      	movs	r3, #36	; 0x24
    90f6:	18fb      	adds	r3, r7, r3
    90f8:	881b      	ldrh	r3, [r3, #0]
    90fa:	2b40      	cmp	r3, #64	; 0x40
    90fc:	d90d      	bls.n	911a <create_name+0x32a>
    90fe:	2324      	movs	r3, #36	; 0x24
    9100:	18fb      	adds	r3, r7, r3
    9102:	881b      	ldrh	r3, [r3, #0]
    9104:	2b5a      	cmp	r3, #90	; 0x5a
    9106:	d808      	bhi.n	911a <create_name+0x32a>
					b |= 2;
    9108:	2327      	movs	r3, #39	; 0x27
    910a:	18fb      	adds	r3, r7, r3
    910c:	2227      	movs	r2, #39	; 0x27
    910e:	18ba      	adds	r2, r7, r2
    9110:	7812      	ldrb	r2, [r2, #0]
    9112:	2102      	movs	r1, #2
    9114:	430a      	orrs	r2, r1
    9116:	701a      	strb	r2, [r3, #0]
    9118:	e018      	b.n	914c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    911a:	2324      	movs	r3, #36	; 0x24
    911c:	18fb      	adds	r3, r7, r3
    911e:	881b      	ldrh	r3, [r3, #0]
    9120:	2b60      	cmp	r3, #96	; 0x60
    9122:	d913      	bls.n	914c <create_name+0x35c>
    9124:	2324      	movs	r3, #36	; 0x24
    9126:	18fb      	adds	r3, r7, r3
    9128:	881b      	ldrh	r3, [r3, #0]
    912a:	2b7a      	cmp	r3, #122	; 0x7a
    912c:	d80e      	bhi.n	914c <create_name+0x35c>
						b |= 1; w -= 0x20;
    912e:	2327      	movs	r3, #39	; 0x27
    9130:	18fb      	adds	r3, r7, r3
    9132:	2227      	movs	r2, #39	; 0x27
    9134:	18ba      	adds	r2, r7, r2
    9136:	7812      	ldrb	r2, [r2, #0]
    9138:	2101      	movs	r1, #1
    913a:	430a      	orrs	r2, r1
    913c:	701a      	strb	r2, [r3, #0]
    913e:	2324      	movs	r3, #36	; 0x24
    9140:	18fb      	adds	r3, r7, r3
    9142:	2224      	movs	r2, #36	; 0x24
    9144:	18ba      	adds	r2, r7, r2
    9146:	8812      	ldrh	r2, [r2, #0]
    9148:	3a20      	subs	r2, #32
    914a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    914c:	687b      	ldr	r3, [r7, #4]
    914e:	699a      	ldr	r2, [r3, #24]
    9150:	6a3b      	ldr	r3, [r7, #32]
    9152:	1c59      	adds	r1, r3, #1
    9154:	6239      	str	r1, [r7, #32]
    9156:	18d3      	adds	r3, r2, r3
    9158:	2224      	movs	r2, #36	; 0x24
    915a:	18ba      	adds	r2, r7, r2
    915c:	8812      	ldrh	r2, [r2, #0]
    915e:	b2d2      	uxtb	r2, r2
    9160:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    9162:	e72b      	b.n	8fbc <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    9164:	46c0      	nop			; (mov r8, r8)
    9166:	e00e      	b.n	9186 <create_name+0x396>
    9168:	0000aab9 	.word	0x0000aab9
    916c:	0000c2c4 	.word	0x0000c2c4
    9170:	00007613 	.word	0x00007613
    9174:	7fffffff 	.word	0x7fffffff
    9178:	00007599 	.word	0x00007599
    917c:	0000c30c 	.word	0x0000c30c
    9180:	0000c2d0 	.word	0x0000c2d0
			if (si > di) break;			/* No extension */
    9184:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    9186:	687b      	ldr	r3, [r7, #4]
    9188:	699b      	ldr	r3, [r3, #24]
    918a:	781b      	ldrb	r3, [r3, #0]
    918c:	2be5      	cmp	r3, #229	; 0xe5
    918e:	d103      	bne.n	9198 <create_name+0x3a8>
    9190:	687b      	ldr	r3, [r7, #4]
    9192:	699b      	ldr	r3, [r3, #24]
    9194:	2205      	movs	r2, #5
    9196:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    9198:	69fb      	ldr	r3, [r7, #28]
    919a:	2b08      	cmp	r3, #8
    919c:	d106      	bne.n	91ac <create_name+0x3bc>
    919e:	2327      	movs	r3, #39	; 0x27
    91a0:	18fb      	adds	r3, r7, r3
    91a2:	2227      	movs	r2, #39	; 0x27
    91a4:	18ba      	adds	r2, r7, r2
    91a6:	7812      	ldrb	r2, [r2, #0]
    91a8:	0092      	lsls	r2, r2, #2
    91aa:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    91ac:	2327      	movs	r3, #39	; 0x27
    91ae:	18fb      	adds	r3, r7, r3
    91b0:	781b      	ldrb	r3, [r3, #0]
    91b2:	220c      	movs	r2, #12
    91b4:	4013      	ands	r3, r2
    91b6:	2b0c      	cmp	r3, #12
    91b8:	d006      	beq.n	91c8 <create_name+0x3d8>
    91ba:	2327      	movs	r3, #39	; 0x27
    91bc:	18fb      	adds	r3, r7, r3
    91be:	781b      	ldrb	r3, [r3, #0]
    91c0:	2203      	movs	r2, #3
    91c2:	4013      	ands	r3, r2
    91c4:	2b03      	cmp	r3, #3
    91c6:	d107      	bne.n	91d8 <create_name+0x3e8>
		cf |= NS_LFN;
    91c8:	2326      	movs	r3, #38	; 0x26
    91ca:	18fb      	adds	r3, r7, r3
    91cc:	2226      	movs	r2, #38	; 0x26
    91ce:	18ba      	adds	r2, r7, r2
    91d0:	7812      	ldrb	r2, [r2, #0]
    91d2:	2102      	movs	r1, #2
    91d4:	430a      	orrs	r2, r1
    91d6:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    91d8:	2326      	movs	r3, #38	; 0x26
    91da:	18fb      	adds	r3, r7, r3
    91dc:	781b      	ldrb	r3, [r3, #0]
    91de:	2202      	movs	r2, #2
    91e0:	4013      	ands	r3, r2
    91e2:	d11d      	bne.n	9220 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    91e4:	2327      	movs	r3, #39	; 0x27
    91e6:	18fb      	adds	r3, r7, r3
    91e8:	781b      	ldrb	r3, [r3, #0]
    91ea:	2203      	movs	r2, #3
    91ec:	4013      	ands	r3, r2
    91ee:	2b01      	cmp	r3, #1
    91f0:	d107      	bne.n	9202 <create_name+0x412>
    91f2:	2326      	movs	r3, #38	; 0x26
    91f4:	18fb      	adds	r3, r7, r3
    91f6:	2226      	movs	r2, #38	; 0x26
    91f8:	18ba      	adds	r2, r7, r2
    91fa:	7812      	ldrb	r2, [r2, #0]
    91fc:	2110      	movs	r1, #16
    91fe:	430a      	orrs	r2, r1
    9200:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    9202:	2327      	movs	r3, #39	; 0x27
    9204:	18fb      	adds	r3, r7, r3
    9206:	781b      	ldrb	r3, [r3, #0]
    9208:	220c      	movs	r2, #12
    920a:	4013      	ands	r3, r2
    920c:	2b04      	cmp	r3, #4
    920e:	d107      	bne.n	9220 <create_name+0x430>
    9210:	2326      	movs	r3, #38	; 0x26
    9212:	18fb      	adds	r3, r7, r3
    9214:	2226      	movs	r2, #38	; 0x26
    9216:	18ba      	adds	r2, r7, r2
    9218:	7812      	ldrb	r2, [r2, #0]
    921a:	2108      	movs	r1, #8
    921c:	430a      	orrs	r2, r1
    921e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    9220:	687b      	ldr	r3, [r7, #4]
    9222:	699b      	ldr	r3, [r3, #24]
    9224:	330b      	adds	r3, #11
    9226:	2226      	movs	r2, #38	; 0x26
    9228:	18ba      	adds	r2, r7, r2
    922a:	7812      	ldrb	r2, [r2, #0]
    922c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    922e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    9230:	0018      	movs	r0, r3
    9232:	46bd      	mov	sp, r7
    9234:	b00b      	add	sp, #44	; 0x2c
    9236:	bd90      	pop	{r4, r7, pc}

00009238 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    9238:	b590      	push	{r4, r7, lr}
    923a:	b085      	sub	sp, #20
    923c:	af00      	add	r7, sp, #0
    923e:	6078      	str	r0, [r7, #4]
    9240:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    9242:	683b      	ldr	r3, [r7, #0]
    9244:	781b      	ldrb	r3, [r3, #0]
    9246:	2b2f      	cmp	r3, #47	; 0x2f
    9248:	d003      	beq.n	9252 <follow_path+0x1a>
    924a:	683b      	ldr	r3, [r7, #0]
    924c:	781b      	ldrb	r3, [r3, #0]
    924e:	2b5c      	cmp	r3, #92	; 0x5c
    9250:	d102      	bne.n	9258 <follow_path+0x20>
		path++;
    9252:	683b      	ldr	r3, [r7, #0]
    9254:	3301      	adds	r3, #1
    9256:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    9258:	687b      	ldr	r3, [r7, #4]
    925a:	2200      	movs	r2, #0
    925c:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    925e:	683b      	ldr	r3, [r7, #0]
    9260:	781b      	ldrb	r3, [r3, #0]
    9262:	2b1f      	cmp	r3, #31
    9264:	d80c      	bhi.n	9280 <follow_path+0x48>
		res = dir_sdi(dj, 0);
    9266:	230f      	movs	r3, #15
    9268:	18fc      	adds	r4, r7, r3
    926a:	687b      	ldr	r3, [r7, #4]
    926c:	2100      	movs	r1, #0
    926e:	0018      	movs	r0, r3
    9270:	4b3c      	ldr	r3, [pc, #240]	; (9364 <follow_path+0x12c>)
    9272:	4798      	blx	r3
    9274:	0003      	movs	r3, r0
    9276:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    9278:	687b      	ldr	r3, [r7, #4]
    927a:	2200      	movs	r2, #0
    927c:	615a      	str	r2, [r3, #20]
    927e:	e06a      	b.n	9356 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    9280:	230f      	movs	r3, #15
    9282:	18fc      	adds	r4, r7, r3
    9284:	003a      	movs	r2, r7
    9286:	687b      	ldr	r3, [r7, #4]
    9288:	0011      	movs	r1, r2
    928a:	0018      	movs	r0, r3
    928c:	4b36      	ldr	r3, [pc, #216]	; (9368 <follow_path+0x130>)
    928e:	4798      	blx	r3
    9290:	0003      	movs	r3, r0
    9292:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    9294:	230f      	movs	r3, #15
    9296:	18fb      	adds	r3, r7, r3
    9298:	781b      	ldrb	r3, [r3, #0]
    929a:	2b00      	cmp	r3, #0
    929c:	d154      	bne.n	9348 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    929e:	230f      	movs	r3, #15
    92a0:	18fc      	adds	r4, r7, r3
    92a2:	687b      	ldr	r3, [r7, #4]
    92a4:	0018      	movs	r0, r3
    92a6:	4b31      	ldr	r3, [pc, #196]	; (936c <follow_path+0x134>)
    92a8:	4798      	blx	r3
    92aa:	0003      	movs	r3, r0
    92ac:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    92ae:	687b      	ldr	r3, [r7, #4]
    92b0:	699a      	ldr	r2, [r3, #24]
    92b2:	230e      	movs	r3, #14
    92b4:	18fb      	adds	r3, r7, r3
    92b6:	7ad2      	ldrb	r2, [r2, #11]
    92b8:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    92ba:	230f      	movs	r3, #15
    92bc:	18fb      	adds	r3, r7, r3
    92be:	781b      	ldrb	r3, [r3, #0]
    92c0:	2b00      	cmp	r3, #0
    92c2:	d00f      	beq.n	92e4 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    92c4:	230f      	movs	r3, #15
    92c6:	18fb      	adds	r3, r7, r3
    92c8:	781b      	ldrb	r3, [r3, #0]
    92ca:	2b04      	cmp	r3, #4
    92cc:	d13e      	bne.n	934c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    92ce:	230e      	movs	r3, #14
    92d0:	18fb      	adds	r3, r7, r3
    92d2:	781b      	ldrb	r3, [r3, #0]
    92d4:	2204      	movs	r2, #4
    92d6:	4013      	ands	r3, r2
    92d8:	d13a      	bne.n	9350 <follow_path+0x118>
    92da:	230f      	movs	r3, #15
    92dc:	18fb      	adds	r3, r7, r3
    92de:	2205      	movs	r2, #5
    92e0:	701a      	strb	r2, [r3, #0]
				}
				break;
    92e2:	e035      	b.n	9350 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    92e4:	230e      	movs	r3, #14
    92e6:	18fb      	adds	r3, r7, r3
    92e8:	781b      	ldrb	r3, [r3, #0]
    92ea:	2204      	movs	r2, #4
    92ec:	4013      	ands	r3, r2
    92ee:	d131      	bne.n	9354 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    92f0:	687b      	ldr	r3, [r7, #4]
    92f2:	695b      	ldr	r3, [r3, #20]
    92f4:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    92f6:	68bb      	ldr	r3, [r7, #8]
    92f8:	330b      	adds	r3, #11
    92fa:	781b      	ldrb	r3, [r3, #0]
    92fc:	001a      	movs	r2, r3
    92fe:	2310      	movs	r3, #16
    9300:	4013      	ands	r3, r2
    9302:	d104      	bne.n	930e <follow_path+0xd6>
				res = FR_NO_PATH; break;
    9304:	230f      	movs	r3, #15
    9306:	18fb      	adds	r3, r7, r3
    9308:	2205      	movs	r2, #5
    930a:	701a      	strb	r2, [r3, #0]
    930c:	e023      	b.n	9356 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    930e:	68bb      	ldr	r3, [r7, #8]
    9310:	3315      	adds	r3, #21
    9312:	781b      	ldrb	r3, [r3, #0]
    9314:	021b      	lsls	r3, r3, #8
    9316:	b21a      	sxth	r2, r3
    9318:	68bb      	ldr	r3, [r7, #8]
    931a:	3314      	adds	r3, #20
    931c:	781b      	ldrb	r3, [r3, #0]
    931e:	b21b      	sxth	r3, r3
    9320:	4313      	orrs	r3, r2
    9322:	b21b      	sxth	r3, r3
    9324:	b29b      	uxth	r3, r3
    9326:	041b      	lsls	r3, r3, #16
    9328:	68ba      	ldr	r2, [r7, #8]
    932a:	321b      	adds	r2, #27
    932c:	7812      	ldrb	r2, [r2, #0]
    932e:	0212      	lsls	r2, r2, #8
    9330:	b211      	sxth	r1, r2
    9332:	68ba      	ldr	r2, [r7, #8]
    9334:	321a      	adds	r2, #26
    9336:	7812      	ldrb	r2, [r2, #0]
    9338:	b212      	sxth	r2, r2
    933a:	430a      	orrs	r2, r1
    933c:	b212      	sxth	r2, r2
    933e:	b292      	uxth	r2, r2
    9340:	431a      	orrs	r2, r3
    9342:	687b      	ldr	r3, [r7, #4]
    9344:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    9346:	e79b      	b.n	9280 <follow_path+0x48>
			if (res != FR_OK) break;
    9348:	46c0      	nop			; (mov r8, r8)
    934a:	e004      	b.n	9356 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    934c:	46c0      	nop			; (mov r8, r8)
    934e:	e002      	b.n	9356 <follow_path+0x11e>
				break;
    9350:	46c0      	nop			; (mov r8, r8)
    9352:	e000      	b.n	9356 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    9354:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    9356:	230f      	movs	r3, #15
    9358:	18fb      	adds	r3, r7, r3
    935a:	781b      	ldrb	r3, [r3, #0]
}
    935c:	0018      	movs	r0, r3
    935e:	46bd      	mov	sp, r7
    9360:	b005      	add	sp, #20
    9362:	bd90      	pop	{r4, r7, pc}
    9364:	00007e89 	.word	0x00007e89
    9368:	00008df1 	.word	0x00008df1
    936c:	000085f1 	.word	0x000085f1

00009370 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    9370:	b590      	push	{r4, r7, lr}
    9372:	b083      	sub	sp, #12
    9374:	af00      	add	r7, sp, #0
    9376:	6078      	str	r0, [r7, #4]
    9378:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    937a:	687b      	ldr	r3, [r7, #4]
    937c:	7858      	ldrb	r0, [r3, #1]
    937e:	687b      	ldr	r3, [r7, #4]
    9380:	3330      	adds	r3, #48	; 0x30
    9382:	0019      	movs	r1, r3
    9384:	683a      	ldr	r2, [r7, #0]
    9386:	2301      	movs	r3, #1
    9388:	4c2a      	ldr	r4, [pc, #168]	; (9434 <check_fs+0xc4>)
    938a:	47a0      	blx	r4
    938c:	1e03      	subs	r3, r0, #0
    938e:	d001      	beq.n	9394 <check_fs+0x24>
		return 3;
    9390:	2303      	movs	r3, #3
    9392:	e04b      	b.n	942c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    9394:	687b      	ldr	r3, [r7, #4]
    9396:	4a28      	ldr	r2, [pc, #160]	; (9438 <check_fs+0xc8>)
    9398:	4694      	mov	ip, r2
    939a:	4463      	add	r3, ip
    939c:	3301      	adds	r3, #1
    939e:	781b      	ldrb	r3, [r3, #0]
    93a0:	021b      	lsls	r3, r3, #8
    93a2:	b21a      	sxth	r2, r3
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	4924      	ldr	r1, [pc, #144]	; (9438 <check_fs+0xc8>)
    93a8:	5c5b      	ldrb	r3, [r3, r1]
    93aa:	b21b      	sxth	r3, r3
    93ac:	4313      	orrs	r3, r2
    93ae:	b21b      	sxth	r3, r3
    93b0:	4a22      	ldr	r2, [pc, #136]	; (943c <check_fs+0xcc>)
    93b2:	4293      	cmp	r3, r2
    93b4:	d001      	beq.n	93ba <check_fs+0x4a>
		return 2;
    93b6:	2302      	movs	r3, #2
    93b8:	e038      	b.n	942c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    93ba:	687b      	ldr	r3, [r7, #4]
    93bc:	3366      	adds	r3, #102	; 0x66
    93be:	3303      	adds	r3, #3
    93c0:	781b      	ldrb	r3, [r3, #0]
    93c2:	061a      	lsls	r2, r3, #24
    93c4:	687b      	ldr	r3, [r7, #4]
    93c6:	3366      	adds	r3, #102	; 0x66
    93c8:	3302      	adds	r3, #2
    93ca:	781b      	ldrb	r3, [r3, #0]
    93cc:	041b      	lsls	r3, r3, #16
    93ce:	4313      	orrs	r3, r2
    93d0:	687a      	ldr	r2, [r7, #4]
    93d2:	3266      	adds	r2, #102	; 0x66
    93d4:	3201      	adds	r2, #1
    93d6:	7812      	ldrb	r2, [r2, #0]
    93d8:	0212      	lsls	r2, r2, #8
    93da:	4313      	orrs	r3, r2
    93dc:	687a      	ldr	r2, [r7, #4]
    93de:	2166      	movs	r1, #102	; 0x66
    93e0:	5c52      	ldrb	r2, [r2, r1]
    93e2:	4313      	orrs	r3, r2
    93e4:	021b      	lsls	r3, r3, #8
    93e6:	0a1b      	lsrs	r3, r3, #8
    93e8:	4a15      	ldr	r2, [pc, #84]	; (9440 <check_fs+0xd0>)
    93ea:	4293      	cmp	r3, r2
    93ec:	d101      	bne.n	93f2 <check_fs+0x82>
		return 0;
    93ee:	2300      	movs	r3, #0
    93f0:	e01c      	b.n	942c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    93f2:	687b      	ldr	r3, [r7, #4]
    93f4:	3382      	adds	r3, #130	; 0x82
    93f6:	3303      	adds	r3, #3
    93f8:	781b      	ldrb	r3, [r3, #0]
    93fa:	061a      	lsls	r2, r3, #24
    93fc:	687b      	ldr	r3, [r7, #4]
    93fe:	3382      	adds	r3, #130	; 0x82
    9400:	3302      	adds	r3, #2
    9402:	781b      	ldrb	r3, [r3, #0]
    9404:	041b      	lsls	r3, r3, #16
    9406:	4313      	orrs	r3, r2
    9408:	687a      	ldr	r2, [r7, #4]
    940a:	3282      	adds	r2, #130	; 0x82
    940c:	3201      	adds	r2, #1
    940e:	7812      	ldrb	r2, [r2, #0]
    9410:	0212      	lsls	r2, r2, #8
    9412:	4313      	orrs	r3, r2
    9414:	687a      	ldr	r2, [r7, #4]
    9416:	2182      	movs	r1, #130	; 0x82
    9418:	5c52      	ldrb	r2, [r2, r1]
    941a:	4313      	orrs	r3, r2
    941c:	021b      	lsls	r3, r3, #8
    941e:	0a1b      	lsrs	r3, r3, #8
    9420:	4a07      	ldr	r2, [pc, #28]	; (9440 <check_fs+0xd0>)
    9422:	4293      	cmp	r3, r2
    9424:	d101      	bne.n	942a <check_fs+0xba>
		return 0;
    9426:	2300      	movs	r3, #0
    9428:	e000      	b.n	942c <check_fs+0xbc>

	return 1;
    942a:	2301      	movs	r3, #1
}
    942c:	0018      	movs	r0, r3
    942e:	46bd      	mov	sp, r7
    9430:	b003      	add	sp, #12
    9432:	bd90      	pop	{r4, r7, pc}
    9434:	00007259 	.word	0x00007259
    9438:	0000022e 	.word	0x0000022e
    943c:	ffffaa55 	.word	0xffffaa55
    9440:	00544146 	.word	0x00544146

00009444 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    9444:	b590      	push	{r4, r7, lr}
    9446:	b093      	sub	sp, #76	; 0x4c
    9448:	af00      	add	r7, sp, #0
    944a:	60f8      	str	r0, [r7, #12]
    944c:	60b9      	str	r1, [r7, #8]
    944e:	1dfb      	adds	r3, r7, #7
    9450:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    9452:	68fb      	ldr	r3, [r7, #12]
    9454:	681b      	ldr	r3, [r3, #0]
    9456:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    9458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    945a:	781b      	ldrb	r3, [r3, #0]
    945c:	3b30      	subs	r3, #48	; 0x30
    945e:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    9460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9462:	2b09      	cmp	r3, #9
    9464:	d80b      	bhi.n	947e <chk_mounted+0x3a>
    9466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9468:	3301      	adds	r3, #1
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	2b3a      	cmp	r3, #58	; 0x3a
    946e:	d106      	bne.n	947e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    9470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9472:	3302      	adds	r3, #2
    9474:	62fb      	str	r3, [r7, #44]	; 0x2c
    9476:	68fb      	ldr	r3, [r7, #12]
    9478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    947a:	601a      	str	r2, [r3, #0]
    947c:	e001      	b.n	9482 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    947e:	2300      	movs	r3, #0
    9480:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    9482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9484:	2b00      	cmp	r3, #0
    9486:	d001      	beq.n	948c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    9488:	230b      	movs	r3, #11
    948a:	e2af      	b.n	99ec <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    948c:	4bc5      	ldr	r3, [pc, #788]	; (97a4 <chk_mounted+0x360>)
    948e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9490:	0092      	lsls	r2, r2, #2
    9492:	58d3      	ldr	r3, [r2, r3]
    9494:	62bb      	str	r3, [r7, #40]	; 0x28
    9496:	68bb      	ldr	r3, [r7, #8]
    9498:	6aba      	ldr	r2, [r7, #40]	; 0x28
    949a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    949e:	2b00      	cmp	r3, #0
    94a0:	d101      	bne.n	94a6 <chk_mounted+0x62>
    94a2:	230c      	movs	r3, #12
    94a4:	e2a2      	b.n	99ec <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    94a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94a8:	781b      	ldrb	r3, [r3, #0]
    94aa:	2b00      	cmp	r3, #0
    94ac:	d01c      	beq.n	94e8 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    94ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94b0:	785b      	ldrb	r3, [r3, #1]
    94b2:	2227      	movs	r2, #39	; 0x27
    94b4:	18bc      	adds	r4, r7, r2
    94b6:	0018      	movs	r0, r3
    94b8:	4bbb      	ldr	r3, [pc, #748]	; (97a8 <chk_mounted+0x364>)
    94ba:	4798      	blx	r3
    94bc:	0003      	movs	r3, r0
    94be:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    94c0:	2327      	movs	r3, #39	; 0x27
    94c2:	18fb      	adds	r3, r7, r3
    94c4:	781b      	ldrb	r3, [r3, #0]
    94c6:	2201      	movs	r2, #1
    94c8:	4013      	ands	r3, r2
    94ca:	d10d      	bne.n	94e8 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    94cc:	1dfb      	adds	r3, r7, #7
    94ce:	781b      	ldrb	r3, [r3, #0]
    94d0:	2b00      	cmp	r3, #0
    94d2:	d007      	beq.n	94e4 <chk_mounted+0xa0>
    94d4:	2327      	movs	r3, #39	; 0x27
    94d6:	18fb      	adds	r3, r7, r3
    94d8:	781b      	ldrb	r3, [r3, #0]
    94da:	2204      	movs	r2, #4
    94dc:	4013      	ands	r3, r2
    94de:	d001      	beq.n	94e4 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    94e0:	230a      	movs	r3, #10
    94e2:	e283      	b.n	99ec <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    94e4:	2300      	movs	r3, #0
    94e6:	e281      	b.n	99ec <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    94e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94ea:	2200      	movs	r2, #0
    94ec:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    94ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    94f0:	b2da      	uxtb	r2, r3
    94f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94f4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    94f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94f8:	785b      	ldrb	r3, [r3, #1]
    94fa:	2227      	movs	r2, #39	; 0x27
    94fc:	18bc      	adds	r4, r7, r2
    94fe:	0018      	movs	r0, r3
    9500:	4baa      	ldr	r3, [pc, #680]	; (97ac <chk_mounted+0x368>)
    9502:	4798      	blx	r3
    9504:	0003      	movs	r3, r0
    9506:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    9508:	2327      	movs	r3, #39	; 0x27
    950a:	18fb      	adds	r3, r7, r3
    950c:	781b      	ldrb	r3, [r3, #0]
    950e:	2201      	movs	r2, #1
    9510:	4013      	ands	r3, r2
    9512:	d001      	beq.n	9518 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    9514:	2303      	movs	r3, #3
    9516:	e269      	b.n	99ec <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    9518:	1dfb      	adds	r3, r7, #7
    951a:	781b      	ldrb	r3, [r3, #0]
    951c:	2b00      	cmp	r3, #0
    951e:	d007      	beq.n	9530 <chk_mounted+0xec>
    9520:	2327      	movs	r3, #39	; 0x27
    9522:	18fb      	adds	r3, r7, r3
    9524:	781b      	ldrb	r3, [r3, #0]
    9526:	2204      	movs	r2, #4
    9528:	4013      	ands	r3, r2
    952a:	d001      	beq.n	9530 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    952c:	230a      	movs	r3, #10
    952e:	e25d      	b.n	99ec <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    9530:	2300      	movs	r3, #0
    9532:	63fb      	str	r3, [r7, #60]	; 0x3c
    9534:	2347      	movs	r3, #71	; 0x47
    9536:	18fc      	adds	r4, r7, r3
    9538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    953c:	0011      	movs	r1, r2
    953e:	0018      	movs	r0, r3
    9540:	4b9b      	ldr	r3, [pc, #620]	; (97b0 <chk_mounted+0x36c>)
    9542:	4798      	blx	r3
    9544:	0003      	movs	r3, r0
    9546:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    9548:	2347      	movs	r3, #71	; 0x47
    954a:	18fb      	adds	r3, r7, r3
    954c:	781b      	ldrb	r3, [r3, #0]
    954e:	2b01      	cmp	r3, #1
    9550:	d13b      	bne.n	95ca <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    9552:	2346      	movs	r3, #70	; 0x46
    9554:	18fb      	adds	r3, r7, r3
    9556:	2200      	movs	r2, #0
    9558:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    955a:	2346      	movs	r3, #70	; 0x46
    955c:	18fb      	adds	r3, r7, r3
    955e:	781b      	ldrb	r3, [r3, #0]
    9560:	2b00      	cmp	r3, #0
    9562:	d006      	beq.n	9572 <chk_mounted+0x12e>
    9564:	2346      	movs	r3, #70	; 0x46
    9566:	18fb      	adds	r3, r7, r3
    9568:	781a      	ldrb	r2, [r3, #0]
    956a:	2346      	movs	r3, #70	; 0x46
    956c:	18fb      	adds	r3, r7, r3
    956e:	3a01      	subs	r2, #1
    9570:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    9572:	2346      	movs	r3, #70	; 0x46
    9574:	18fb      	adds	r3, r7, r3
    9576:	781b      	ldrb	r3, [r3, #0]
    9578:	011b      	lsls	r3, r3, #4
    957a:	33bf      	adds	r3, #191	; 0xbf
    957c:	33ff      	adds	r3, #255	; 0xff
    957e:	3330      	adds	r3, #48	; 0x30
    9580:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9582:	18d3      	adds	r3, r2, r3
    9584:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    9586:	6a3b      	ldr	r3, [r7, #32]
    9588:	3304      	adds	r3, #4
    958a:	781b      	ldrb	r3, [r3, #0]
    958c:	2b00      	cmp	r3, #0
    958e:	d01c      	beq.n	95ca <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    9590:	6a3b      	ldr	r3, [r7, #32]
    9592:	330b      	adds	r3, #11
    9594:	781b      	ldrb	r3, [r3, #0]
    9596:	061a      	lsls	r2, r3, #24
    9598:	6a3b      	ldr	r3, [r7, #32]
    959a:	330a      	adds	r3, #10
    959c:	781b      	ldrb	r3, [r3, #0]
    959e:	041b      	lsls	r3, r3, #16
    95a0:	4313      	orrs	r3, r2
    95a2:	6a3a      	ldr	r2, [r7, #32]
    95a4:	3209      	adds	r2, #9
    95a6:	7812      	ldrb	r2, [r2, #0]
    95a8:	0212      	lsls	r2, r2, #8
    95aa:	4313      	orrs	r3, r2
    95ac:	6a3a      	ldr	r2, [r7, #32]
    95ae:	3208      	adds	r2, #8
    95b0:	7812      	ldrb	r2, [r2, #0]
    95b2:	4313      	orrs	r3, r2
    95b4:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    95b6:	2347      	movs	r3, #71	; 0x47
    95b8:	18fc      	adds	r4, r7, r3
    95ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    95bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95be:	0011      	movs	r1, r2
    95c0:	0018      	movs	r0, r3
    95c2:	4b7b      	ldr	r3, [pc, #492]	; (97b0 <chk_mounted+0x36c>)
    95c4:	4798      	blx	r3
    95c6:	0003      	movs	r3, r0
    95c8:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    95ca:	2347      	movs	r3, #71	; 0x47
    95cc:	18fb      	adds	r3, r7, r3
    95ce:	781b      	ldrb	r3, [r3, #0]
    95d0:	2b03      	cmp	r3, #3
    95d2:	d101      	bne.n	95d8 <chk_mounted+0x194>
    95d4:	2301      	movs	r3, #1
    95d6:	e209      	b.n	99ec <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    95d8:	2347      	movs	r3, #71	; 0x47
    95da:	18fb      	adds	r3, r7, r3
    95dc:	781b      	ldrb	r3, [r3, #0]
    95de:	2b00      	cmp	r3, #0
    95e0:	d001      	beq.n	95e6 <chk_mounted+0x1a2>
    95e2:	230d      	movs	r3, #13
    95e4:	e202      	b.n	99ec <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    95e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95e8:	223c      	movs	r2, #60	; 0x3c
    95ea:	5c9b      	ldrb	r3, [r3, r2]
    95ec:	021b      	lsls	r3, r3, #8
    95ee:	b21a      	sxth	r2, r3
    95f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95f2:	213b      	movs	r1, #59	; 0x3b
    95f4:	5c5b      	ldrb	r3, [r3, r1]
    95f6:	b21b      	sxth	r3, r3
    95f8:	4313      	orrs	r3, r2
    95fa:	b21a      	sxth	r2, r3
    95fc:	2380      	movs	r3, #128	; 0x80
    95fe:	009b      	lsls	r3, r3, #2
    9600:	429a      	cmp	r2, r3
    9602:	d001      	beq.n	9608 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    9604:	230d      	movs	r3, #13
    9606:	e1f1      	b.n	99ec <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    9608:	6abb      	ldr	r3, [r7, #40]	; 0x28
    960a:	2247      	movs	r2, #71	; 0x47
    960c:	5c9b      	ldrb	r3, [r3, r2]
    960e:	021b      	lsls	r3, r3, #8
    9610:	b21a      	sxth	r2, r3
    9612:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9614:	2146      	movs	r1, #70	; 0x46
    9616:	5c5b      	ldrb	r3, [r3, r1]
    9618:	b21b      	sxth	r3, r3
    961a:	4313      	orrs	r3, r2
    961c:	b21b      	sxth	r3, r3
    961e:	b29b      	uxth	r3, r3
    9620:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    9622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9624:	2b00      	cmp	r3, #0
    9626:	d112      	bne.n	964e <chk_mounted+0x20a>
    9628:	6abb      	ldr	r3, [r7, #40]	; 0x28
    962a:	2257      	movs	r2, #87	; 0x57
    962c:	5c9b      	ldrb	r3, [r3, r2]
    962e:	061a      	lsls	r2, r3, #24
    9630:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9632:	2156      	movs	r1, #86	; 0x56
    9634:	5c5b      	ldrb	r3, [r3, r1]
    9636:	041b      	lsls	r3, r3, #16
    9638:	4313      	orrs	r3, r2
    963a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    963c:	2155      	movs	r1, #85	; 0x55
    963e:	5c52      	ldrb	r2, [r2, r1]
    9640:	0212      	lsls	r2, r2, #8
    9642:	4313      	orrs	r3, r2
    9644:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9646:	2154      	movs	r1, #84	; 0x54
    9648:	5c52      	ldrb	r2, [r2, r1]
    964a:	4313      	orrs	r3, r2
    964c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9650:	6bba      	ldr	r2, [r7, #56]	; 0x38
    9652:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    9654:	231f      	movs	r3, #31
    9656:	18fb      	adds	r3, r7, r3
    9658:	6aba      	ldr	r2, [r7, #40]	; 0x28
    965a:	2140      	movs	r1, #64	; 0x40
    965c:	5c52      	ldrb	r2, [r2, r1]
    965e:	701a      	strb	r2, [r3, #0]
    9660:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9662:	221f      	movs	r2, #31
    9664:	18ba      	adds	r2, r7, r2
    9666:	7812      	ldrb	r2, [r2, #0]
    9668:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    966a:	231f      	movs	r3, #31
    966c:	18fb      	adds	r3, r7, r3
    966e:	781b      	ldrb	r3, [r3, #0]
    9670:	2b01      	cmp	r3, #1
    9672:	d006      	beq.n	9682 <chk_mounted+0x23e>
    9674:	231f      	movs	r3, #31
    9676:	18fb      	adds	r3, r7, r3
    9678:	781b      	ldrb	r3, [r3, #0]
    967a:	2b02      	cmp	r3, #2
    967c:	d001      	beq.n	9682 <chk_mounted+0x23e>
    967e:	230d      	movs	r3, #13
    9680:	e1b4      	b.n	99ec <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    9682:	231f      	movs	r3, #31
    9684:	18fb      	adds	r3, r7, r3
    9686:	781a      	ldrb	r2, [r3, #0]
    9688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    968a:	4353      	muls	r3, r2
    968c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    968e:	231f      	movs	r3, #31
    9690:	18fb      	adds	r3, r7, r3
    9692:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9694:	213d      	movs	r1, #61	; 0x3d
    9696:	5c52      	ldrb	r2, [r2, r1]
    9698:	701a      	strb	r2, [r3, #0]
    969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    969c:	221f      	movs	r2, #31
    969e:	18ba      	adds	r2, r7, r2
    96a0:	7812      	ldrb	r2, [r2, #0]
    96a2:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    96a4:	231f      	movs	r3, #31
    96a6:	18fb      	adds	r3, r7, r3
    96a8:	781b      	ldrb	r3, [r3, #0]
    96aa:	2b00      	cmp	r3, #0
    96ac:	d008      	beq.n	96c0 <chk_mounted+0x27c>
    96ae:	231f      	movs	r3, #31
    96b0:	18fb      	adds	r3, r7, r3
    96b2:	781b      	ldrb	r3, [r3, #0]
    96b4:	221f      	movs	r2, #31
    96b6:	18ba      	adds	r2, r7, r2
    96b8:	7812      	ldrb	r2, [r2, #0]
    96ba:	3a01      	subs	r2, #1
    96bc:	4013      	ands	r3, r2
    96be:	d001      	beq.n	96c4 <chk_mounted+0x280>
    96c0:	230d      	movs	r3, #13
    96c2:	e193      	b.n	99ec <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    96c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96c6:	2242      	movs	r2, #66	; 0x42
    96c8:	5c9b      	ldrb	r3, [r3, r2]
    96ca:	021b      	lsls	r3, r3, #8
    96cc:	b21a      	sxth	r2, r3
    96ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96d0:	2141      	movs	r1, #65	; 0x41
    96d2:	5c5b      	ldrb	r3, [r3, r1]
    96d4:	b21b      	sxth	r3, r3
    96d6:	4313      	orrs	r3, r2
    96d8:	b21b      	sxth	r3, r3
    96da:	b29a      	uxth	r2, r3
    96dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96de:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    96e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96e2:	891b      	ldrh	r3, [r3, #8]
    96e4:	220f      	movs	r2, #15
    96e6:	4013      	ands	r3, r2
    96e8:	b29b      	uxth	r3, r3
    96ea:	2b00      	cmp	r3, #0
    96ec:	d001      	beq.n	96f2 <chk_mounted+0x2ae>
    96ee:	230d      	movs	r3, #13
    96f0:	e17c      	b.n	99ec <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    96f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96f4:	2244      	movs	r2, #68	; 0x44
    96f6:	5c9b      	ldrb	r3, [r3, r2]
    96f8:	021b      	lsls	r3, r3, #8
    96fa:	b21a      	sxth	r2, r3
    96fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96fe:	2143      	movs	r1, #67	; 0x43
    9700:	5c5b      	ldrb	r3, [r3, r1]
    9702:	b21b      	sxth	r3, r3
    9704:	4313      	orrs	r3, r2
    9706:	b21b      	sxth	r3, r3
    9708:	b29b      	uxth	r3, r3
    970a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    970c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    970e:	2b00      	cmp	r3, #0
    9710:	d112      	bne.n	9738 <chk_mounted+0x2f4>
    9712:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9714:	2253      	movs	r2, #83	; 0x53
    9716:	5c9b      	ldrb	r3, [r3, r2]
    9718:	061a      	lsls	r2, r3, #24
    971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    971c:	2152      	movs	r1, #82	; 0x52
    971e:	5c5b      	ldrb	r3, [r3, r1]
    9720:	041b      	lsls	r3, r3, #16
    9722:	4313      	orrs	r3, r2
    9724:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9726:	2151      	movs	r1, #81	; 0x51
    9728:	5c52      	ldrb	r2, [r2, r1]
    972a:	0212      	lsls	r2, r2, #8
    972c:	4313      	orrs	r3, r2
    972e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9730:	2150      	movs	r1, #80	; 0x50
    9732:	5c52      	ldrb	r2, [r2, r1]
    9734:	4313      	orrs	r3, r2
    9736:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    9738:	6abb      	ldr	r3, [r7, #40]	; 0x28
    973a:	223f      	movs	r2, #63	; 0x3f
    973c:	5c9b      	ldrb	r3, [r3, r2]
    973e:	021b      	lsls	r3, r3, #8
    9740:	b21a      	sxth	r2, r3
    9742:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9744:	213e      	movs	r1, #62	; 0x3e
    9746:	5c5b      	ldrb	r3, [r3, r1]
    9748:	b21b      	sxth	r3, r3
    974a:	4313      	orrs	r3, r2
    974c:	b21a      	sxth	r2, r3
    974e:	231c      	movs	r3, #28
    9750:	18fb      	adds	r3, r7, r3
    9752:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    9754:	231c      	movs	r3, #28
    9756:	18fb      	adds	r3, r7, r3
    9758:	881b      	ldrh	r3, [r3, #0]
    975a:	2b00      	cmp	r3, #0
    975c:	d101      	bne.n	9762 <chk_mounted+0x31e>
    975e:	230d      	movs	r3, #13
    9760:	e144      	b.n	99ec <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    9762:	231c      	movs	r3, #28
    9764:	18fb      	adds	r3, r7, r3
    9766:	881a      	ldrh	r2, [r3, #0]
    9768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    976a:	18d3      	adds	r3, r2, r3
    976c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    976e:	8912      	ldrh	r2, [r2, #8]
    9770:	0912      	lsrs	r2, r2, #4
    9772:	b292      	uxth	r2, r2
    9774:	189b      	adds	r3, r3, r2
    9776:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    9778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    977a:	69bb      	ldr	r3, [r7, #24]
    977c:	429a      	cmp	r2, r3
    977e:	d201      	bcs.n	9784 <chk_mounted+0x340>
    9780:	230d      	movs	r3, #13
    9782:	e133      	b.n	99ec <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    9784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9786:	69bb      	ldr	r3, [r7, #24]
    9788:	1ad2      	subs	r2, r2, r3
    978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    978c:	789b      	ldrb	r3, [r3, #2]
    978e:	0019      	movs	r1, r3
    9790:	4b08      	ldr	r3, [pc, #32]	; (97b4 <chk_mounted+0x370>)
    9792:	0010      	movs	r0, r2
    9794:	4798      	blx	r3
    9796:	0003      	movs	r3, r0
    9798:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    979a:	697b      	ldr	r3, [r7, #20]
    979c:	2b00      	cmp	r3, #0
    979e:	d10b      	bne.n	97b8 <chk_mounted+0x374>
    97a0:	230d      	movs	r3, #13
    97a2:	e123      	b.n	99ec <chk_mounted+0x5a8>
    97a4:	200001ac 	.word	0x200001ac
    97a8:	00007221 	.word	0x00007221
    97ac:	0000719d 	.word	0x0000719d
    97b0:	00009371 	.word	0x00009371
    97b4:	0000b4c5 	.word	0x0000b4c5
	fmt = FS_FAT12;
    97b8:	2347      	movs	r3, #71	; 0x47
    97ba:	18fb      	adds	r3, r7, r3
    97bc:	2201      	movs	r2, #1
    97be:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    97c0:	697b      	ldr	r3, [r7, #20]
    97c2:	4a8c      	ldr	r2, [pc, #560]	; (99f4 <chk_mounted+0x5b0>)
    97c4:	4293      	cmp	r3, r2
    97c6:	d903      	bls.n	97d0 <chk_mounted+0x38c>
    97c8:	2347      	movs	r3, #71	; 0x47
    97ca:	18fb      	adds	r3, r7, r3
    97cc:	2202      	movs	r2, #2
    97ce:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    97d0:	697b      	ldr	r3, [r7, #20]
    97d2:	4a89      	ldr	r2, [pc, #548]	; (99f8 <chk_mounted+0x5b4>)
    97d4:	4293      	cmp	r3, r2
    97d6:	d903      	bls.n	97e0 <chk_mounted+0x39c>
    97d8:	2347      	movs	r3, #71	; 0x47
    97da:	18fb      	adds	r3, r7, r3
    97dc:	2203      	movs	r2, #3
    97de:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    97e0:	697b      	ldr	r3, [r7, #20]
    97e2:	1c9a      	adds	r2, r3, #2
    97e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97e6:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    97e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    97ea:	69bb      	ldr	r3, [r7, #24]
    97ec:	18d2      	adds	r2, r2, r3
    97ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97f0:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    97f2:	231c      	movs	r3, #28
    97f4:	18fb      	adds	r3, r7, r3
    97f6:	881a      	ldrh	r2, [r3, #0]
    97f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    97fa:	18d2      	adds	r2, r2, r3
    97fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97fe:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    9800:	2347      	movs	r3, #71	; 0x47
    9802:	18fb      	adds	r3, r7, r3
    9804:	781b      	ldrb	r3, [r3, #0]
    9806:	2b03      	cmp	r3, #3
    9808:	d11e      	bne.n	9848 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    980c:	891b      	ldrh	r3, [r3, #8]
    980e:	2b00      	cmp	r3, #0
    9810:	d001      	beq.n	9816 <chk_mounted+0x3d2>
    9812:	230d      	movs	r3, #13
    9814:	e0ea      	b.n	99ec <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    9816:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9818:	225f      	movs	r2, #95	; 0x5f
    981a:	5c9b      	ldrb	r3, [r3, r2]
    981c:	061a      	lsls	r2, r3, #24
    981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9820:	215e      	movs	r1, #94	; 0x5e
    9822:	5c5b      	ldrb	r3, [r3, r1]
    9824:	041b      	lsls	r3, r3, #16
    9826:	4313      	orrs	r3, r2
    9828:	6aba      	ldr	r2, [r7, #40]	; 0x28
    982a:	215d      	movs	r1, #93	; 0x5d
    982c:	5c52      	ldrb	r2, [r2, r1]
    982e:	0212      	lsls	r2, r2, #8
    9830:	4313      	orrs	r3, r2
    9832:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9834:	215c      	movs	r1, #92	; 0x5c
    9836:	5c52      	ldrb	r2, [r2, r1]
    9838:	431a      	orrs	r2, r3
    983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    983c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9840:	699b      	ldr	r3, [r3, #24]
    9842:	009b      	lsls	r3, r3, #2
    9844:	633b      	str	r3, [r7, #48]	; 0x30
    9846:	e020      	b.n	988a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    9848:	6abb      	ldr	r3, [r7, #40]	; 0x28
    984a:	891b      	ldrh	r3, [r3, #8]
    984c:	2b00      	cmp	r3, #0
    984e:	d101      	bne.n	9854 <chk_mounted+0x410>
    9850:	230d      	movs	r3, #13
    9852:	e0cb      	b.n	99ec <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    9854:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9856:	6a1a      	ldr	r2, [r3, #32]
    9858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    985a:	18d2      	adds	r2, r2, r3
    985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    985e:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9860:	2347      	movs	r3, #71	; 0x47
    9862:	18fb      	adds	r3, r7, r3
    9864:	781b      	ldrb	r3, [r3, #0]
    9866:	2b02      	cmp	r3, #2
    9868:	d103      	bne.n	9872 <chk_mounted+0x42e>
    986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    986c:	699b      	ldr	r3, [r3, #24]
    986e:	005b      	lsls	r3, r3, #1
    9870:	e00a      	b.n	9888 <chk_mounted+0x444>
    9872:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9874:	699a      	ldr	r2, [r3, #24]
    9876:	0013      	movs	r3, r2
    9878:	005b      	lsls	r3, r3, #1
    987a:	189b      	adds	r3, r3, r2
    987c:	085a      	lsrs	r2, r3, #1
    987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9880:	699b      	ldr	r3, [r3, #24]
    9882:	2101      	movs	r1, #1
    9884:	400b      	ands	r3, r1
    9886:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    9888:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    988c:	69da      	ldr	r2, [r3, #28]
    988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9890:	495a      	ldr	r1, [pc, #360]	; (99fc <chk_mounted+0x5b8>)
    9892:	468c      	mov	ip, r1
    9894:	4463      	add	r3, ip
    9896:	0a5b      	lsrs	r3, r3, #9
    9898:	429a      	cmp	r2, r3
    989a:	d201      	bcs.n	98a0 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    989c:	230d      	movs	r3, #13
    989e:	e0a5      	b.n	99ec <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    98a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98a2:	2201      	movs	r2, #1
    98a4:	4252      	negs	r2, r2
    98a6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    98a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98aa:	2200      	movs	r2, #0
    98ac:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    98ae:	2347      	movs	r3, #71	; 0x47
    98b0:	18fb      	adds	r3, r7, r3
    98b2:	781b      	ldrb	r3, [r3, #0]
    98b4:	2b03      	cmp	r3, #3
    98b6:	d000      	beq.n	98ba <chk_mounted+0x476>
    98b8:	e082      	b.n	99c0 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    98ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98bc:	2200      	movs	r2, #0
    98be:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    98c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98c2:	2261      	movs	r2, #97	; 0x61
    98c4:	5c9b      	ldrb	r3, [r3, r2]
    98c6:	021b      	lsls	r3, r3, #8
    98c8:	b21a      	sxth	r2, r3
    98ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98cc:	2160      	movs	r1, #96	; 0x60
    98ce:	5c5b      	ldrb	r3, [r3, r1]
    98d0:	b21b      	sxth	r3, r3
    98d2:	4313      	orrs	r3, r2
    98d4:	b21b      	sxth	r3, r3
    98d6:	b29b      	uxth	r3, r3
    98d8:	001a      	movs	r2, r3
    98da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    98dc:	18d2      	adds	r2, r2, r3
    98de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98e0:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    98e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98e4:	7858      	ldrb	r0, [r3, #1]
    98e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98e8:	3330      	adds	r3, #48	; 0x30
    98ea:	0019      	movs	r1, r3
    98ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98ee:	695a      	ldr	r2, [r3, #20]
    98f0:	2301      	movs	r3, #1
    98f2:	4c43      	ldr	r4, [pc, #268]	; (9a00 <chk_mounted+0x5bc>)
    98f4:	47a0      	blx	r4
    98f6:	1e03      	subs	r3, r0, #0
    98f8:	d162      	bne.n	99c0 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    98fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98fc:	4a41      	ldr	r2, [pc, #260]	; (9a04 <chk_mounted+0x5c0>)
    98fe:	5c9b      	ldrb	r3, [r3, r2]
    9900:	021b      	lsls	r3, r3, #8
    9902:	b21a      	sxth	r2, r3
    9904:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9906:	4940      	ldr	r1, [pc, #256]	; (9a08 <chk_mounted+0x5c4>)
    9908:	5c5b      	ldrb	r3, [r3, r1]
    990a:	b21b      	sxth	r3, r3
    990c:	4313      	orrs	r3, r2
    990e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    9910:	4a3e      	ldr	r2, [pc, #248]	; (9a0c <chk_mounted+0x5c8>)
    9912:	4293      	cmp	r3, r2
    9914:	d154      	bne.n	99c0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9916:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9918:	2233      	movs	r2, #51	; 0x33
    991a:	5c9b      	ldrb	r3, [r3, r2]
    991c:	061a      	lsls	r2, r3, #24
    991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9920:	2132      	movs	r1, #50	; 0x32
    9922:	5c5b      	ldrb	r3, [r3, r1]
    9924:	041b      	lsls	r3, r3, #16
    9926:	4313      	orrs	r3, r2
    9928:	6aba      	ldr	r2, [r7, #40]	; 0x28
    992a:	2131      	movs	r1, #49	; 0x31
    992c:	5c52      	ldrb	r2, [r2, r1]
    992e:	0212      	lsls	r2, r2, #8
    9930:	4313      	orrs	r3, r2
    9932:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9934:	2130      	movs	r1, #48	; 0x30
    9936:	5c52      	ldrb	r2, [r2, r1]
    9938:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    993a:	4a35      	ldr	r2, [pc, #212]	; (9a10 <chk_mounted+0x5cc>)
    993c:	4293      	cmp	r3, r2
    993e:	d13f      	bne.n	99c0 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    9940:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9942:	4a34      	ldr	r2, [pc, #208]	; (9a14 <chk_mounted+0x5d0>)
    9944:	5c9b      	ldrb	r3, [r3, r2]
    9946:	061a      	lsls	r2, r3, #24
    9948:	6abb      	ldr	r3, [r7, #40]	; 0x28
    994a:	4933      	ldr	r1, [pc, #204]	; (9a18 <chk_mounted+0x5d4>)
    994c:	5c5b      	ldrb	r3, [r3, r1]
    994e:	041b      	lsls	r3, r3, #16
    9950:	4313      	orrs	r3, r2
    9952:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9954:	4931      	ldr	r1, [pc, #196]	; (9a1c <chk_mounted+0x5d8>)
    9956:	5c52      	ldrb	r2, [r2, r1]
    9958:	0212      	lsls	r2, r2, #8
    995a:	4313      	orrs	r3, r2
    995c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    995e:	2285      	movs	r2, #133	; 0x85
    9960:	0092      	lsls	r2, r2, #2
    9962:	5c8a      	ldrb	r2, [r1, r2]
    9964:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9966:	4a2e      	ldr	r2, [pc, #184]	; (9a20 <chk_mounted+0x5dc>)
    9968:	4293      	cmp	r3, r2
    996a:	d129      	bne.n	99c0 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    996e:	4a2d      	ldr	r2, [pc, #180]	; (9a24 <chk_mounted+0x5e0>)
    9970:	5c9b      	ldrb	r3, [r3, r2]
    9972:	061a      	lsls	r2, r3, #24
    9974:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9976:	492c      	ldr	r1, [pc, #176]	; (9a28 <chk_mounted+0x5e4>)
    9978:	5c5b      	ldrb	r3, [r3, r1]
    997a:	041b      	lsls	r3, r3, #16
    997c:	4313      	orrs	r3, r2
    997e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9980:	492a      	ldr	r1, [pc, #168]	; (9a2c <chk_mounted+0x5e8>)
    9982:	5c52      	ldrb	r2, [r2, r1]
    9984:	0212      	lsls	r2, r2, #8
    9986:	4313      	orrs	r3, r2
    9988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    998a:	2287      	movs	r2, #135	; 0x87
    998c:	0092      	lsls	r2, r2, #2
    998e:	5c8a      	ldrb	r2, [r1, r2]
    9990:	431a      	orrs	r2, r3
    9992:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9994:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    9996:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9998:	4a25      	ldr	r2, [pc, #148]	; (9a30 <chk_mounted+0x5ec>)
    999a:	5c9b      	ldrb	r3, [r3, r2]
    999c:	061a      	lsls	r2, r3, #24
    999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99a0:	4924      	ldr	r1, [pc, #144]	; (9a34 <chk_mounted+0x5f0>)
    99a2:	5c5b      	ldrb	r3, [r3, r1]
    99a4:	041b      	lsls	r3, r3, #16
    99a6:	4313      	orrs	r3, r2
    99a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    99aa:	4923      	ldr	r1, [pc, #140]	; (9a38 <chk_mounted+0x5f4>)
    99ac:	5c52      	ldrb	r2, [r2, r1]
    99ae:	0212      	lsls	r2, r2, #8
    99b0:	4313      	orrs	r3, r2
    99b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    99b4:	2286      	movs	r2, #134	; 0x86
    99b6:	0092      	lsls	r2, r2, #2
    99b8:	5c8a      	ldrb	r2, [r1, r2]
    99ba:	431a      	orrs	r2, r3
    99bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99be:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    99c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99c2:	2247      	movs	r2, #71	; 0x47
    99c4:	18ba      	adds	r2, r7, r2
    99c6:	7812      	ldrb	r2, [r2, #0]
    99c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    99ca:	4b1c      	ldr	r3, [pc, #112]	; (9a3c <chk_mounted+0x5f8>)
    99cc:	881b      	ldrh	r3, [r3, #0]
    99ce:	3301      	adds	r3, #1
    99d0:	b29a      	uxth	r2, r3
    99d2:	4b1a      	ldr	r3, [pc, #104]	; (9a3c <chk_mounted+0x5f8>)
    99d4:	801a      	strh	r2, [r3, #0]
    99d6:	4b19      	ldr	r3, [pc, #100]	; (9a3c <chk_mounted+0x5f8>)
    99d8:	881a      	ldrh	r2, [r3, #0]
    99da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99dc:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    99de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99e0:	2200      	movs	r2, #0
    99e2:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    99e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99e6:	2200      	movs	r2, #0
    99e8:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    99ea:	2300      	movs	r3, #0
}
    99ec:	0018      	movs	r0, r3
    99ee:	46bd      	mov	sp, r7
    99f0:	b013      	add	sp, #76	; 0x4c
    99f2:	bd90      	pop	{r4, r7, pc}
    99f4:	00000ff5 	.word	0x00000ff5
    99f8:	0000fff5 	.word	0x0000fff5
    99fc:	000001ff 	.word	0x000001ff
    9a00:	00007259 	.word	0x00007259
    9a04:	0000022f 	.word	0x0000022f
    9a08:	0000022e 	.word	0x0000022e
    9a0c:	ffffaa55 	.word	0xffffaa55
    9a10:	41615252 	.word	0x41615252
    9a14:	00000217 	.word	0x00000217
    9a18:	00000216 	.word	0x00000216
    9a1c:	00000215 	.word	0x00000215
    9a20:	61417272 	.word	0x61417272
    9a24:	0000021f 	.word	0x0000021f
    9a28:	0000021e 	.word	0x0000021e
    9a2c:	0000021d 	.word	0x0000021d
    9a30:	0000021b 	.word	0x0000021b
    9a34:	0000021a 	.word	0x0000021a
    9a38:	00000219 	.word	0x00000219
    9a3c:	200001b0 	.word	0x200001b0

00009a40 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    9a40:	b580      	push	{r7, lr}
    9a42:	b082      	sub	sp, #8
    9a44:	af00      	add	r7, sp, #0
    9a46:	6078      	str	r0, [r7, #4]
    9a48:	000a      	movs	r2, r1
    9a4a:	1cbb      	adds	r3, r7, #2
    9a4c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    9a4e:	687b      	ldr	r3, [r7, #4]
    9a50:	2b00      	cmp	r3, #0
    9a52:	d009      	beq.n	9a68 <validate+0x28>
    9a54:	687b      	ldr	r3, [r7, #4]
    9a56:	781b      	ldrb	r3, [r3, #0]
    9a58:	2b00      	cmp	r3, #0
    9a5a:	d005      	beq.n	9a68 <validate+0x28>
    9a5c:	687b      	ldr	r3, [r7, #4]
    9a5e:	88db      	ldrh	r3, [r3, #6]
    9a60:	1cba      	adds	r2, r7, #2
    9a62:	8812      	ldrh	r2, [r2, #0]
    9a64:	429a      	cmp	r2, r3
    9a66:	d001      	beq.n	9a6c <validate+0x2c>
		return FR_INVALID_OBJECT;
    9a68:	2309      	movs	r3, #9
    9a6a:	e00c      	b.n	9a86 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    9a6c:	687b      	ldr	r3, [r7, #4]
    9a6e:	785b      	ldrb	r3, [r3, #1]
    9a70:	0018      	movs	r0, r3
    9a72:	4b07      	ldr	r3, [pc, #28]	; (9a90 <validate+0x50>)
    9a74:	4798      	blx	r3
    9a76:	0003      	movs	r3, r0
    9a78:	001a      	movs	r2, r3
    9a7a:	2301      	movs	r3, #1
    9a7c:	4013      	ands	r3, r2
    9a7e:	d001      	beq.n	9a84 <validate+0x44>
		return FR_NOT_READY;
    9a80:	2303      	movs	r3, #3
    9a82:	e000      	b.n	9a86 <validate+0x46>

	return FR_OK;
    9a84:	2300      	movs	r3, #0
}
    9a86:	0018      	movs	r0, r3
    9a88:	46bd      	mov	sp, r7
    9a8a:	b002      	add	sp, #8
    9a8c:	bd80      	pop	{r7, pc}
    9a8e:	46c0      	nop			; (mov r8, r8)
    9a90:	00007221 	.word	0x00007221

00009a94 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    9a94:	b580      	push	{r7, lr}
    9a96:	b084      	sub	sp, #16
    9a98:	af00      	add	r7, sp, #0
    9a9a:	0002      	movs	r2, r0
    9a9c:	6039      	str	r1, [r7, #0]
    9a9e:	1dfb      	adds	r3, r7, #7
    9aa0:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    9aa2:	1dfb      	adds	r3, r7, #7
    9aa4:	781b      	ldrb	r3, [r3, #0]
    9aa6:	2b00      	cmp	r3, #0
    9aa8:	d001      	beq.n	9aae <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    9aaa:	230b      	movs	r3, #11
    9aac:	e018      	b.n	9ae0 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    9aae:	1dfb      	adds	r3, r7, #7
    9ab0:	781a      	ldrb	r2, [r3, #0]
    9ab2:	4b0d      	ldr	r3, [pc, #52]	; (9ae8 <f_mount+0x54>)
    9ab4:	0092      	lsls	r2, r2, #2
    9ab6:	58d3      	ldr	r3, [r2, r3]
    9ab8:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    9aba:	68fb      	ldr	r3, [r7, #12]
    9abc:	2b00      	cmp	r3, #0
    9abe:	d002      	beq.n	9ac6 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    9ac0:	68fb      	ldr	r3, [r7, #12]
    9ac2:	2200      	movs	r2, #0
    9ac4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    9ac6:	683b      	ldr	r3, [r7, #0]
    9ac8:	2b00      	cmp	r3, #0
    9aca:	d002      	beq.n	9ad2 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    9acc:	683b      	ldr	r3, [r7, #0]
    9ace:	2200      	movs	r2, #0
    9ad0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    9ad2:	1dfb      	adds	r3, r7, #7
    9ad4:	781a      	ldrb	r2, [r3, #0]
    9ad6:	4b04      	ldr	r3, [pc, #16]	; (9ae8 <f_mount+0x54>)
    9ad8:	0092      	lsls	r2, r2, #2
    9ada:	6839      	ldr	r1, [r7, #0]
    9adc:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    9ade:	2300      	movs	r3, #0
}
    9ae0:	0018      	movs	r0, r3
    9ae2:	46bd      	mov	sp, r7
    9ae4:	b004      	add	sp, #16
    9ae6:	bd80      	pop	{r7, pc}
    9ae8:	200001ac 	.word	0x200001ac

00009aec <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9aec:	b590      	push	{r4, r7, lr}
    9aee:	4ce5      	ldr	r4, [pc, #916]	; (9e84 <f_open+0x398>)
    9af0:	44a5      	add	sp, r4
    9af2:	af00      	add	r7, sp, #0
    9af4:	60f8      	str	r0, [r7, #12]
    9af6:	60b9      	str	r1, [r7, #8]
    9af8:	4be3      	ldr	r3, [pc, #908]	; (9e88 <f_open+0x39c>)
    9afa:	2194      	movs	r1, #148	; 0x94
    9afc:	0089      	lsls	r1, r1, #2
    9afe:	468c      	mov	ip, r1
    9b00:	44bc      	add	ip, r7
    9b02:	4463      	add	r3, ip
    9b04:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    9b06:	68fb      	ldr	r3, [r7, #12]
    9b08:	2200      	movs	r2, #0
    9b0a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    9b0c:	4bde      	ldr	r3, [pc, #888]	; (9e88 <f_open+0x39c>)
    9b0e:	2294      	movs	r2, #148	; 0x94
    9b10:	0092      	lsls	r2, r2, #2
    9b12:	4694      	mov	ip, r2
    9b14:	44bc      	add	ip, r7
    9b16:	4463      	add	r3, ip
    9b18:	4adb      	ldr	r2, [pc, #876]	; (9e88 <f_open+0x39c>)
    9b1a:	2194      	movs	r1, #148	; 0x94
    9b1c:	0089      	lsls	r1, r1, #2
    9b1e:	468c      	mov	ip, r1
    9b20:	44bc      	add	ip, r7
    9b22:	4462      	add	r2, ip
    9b24:	7812      	ldrb	r2, [r2, #0]
    9b26:	211f      	movs	r1, #31
    9b28:	400a      	ands	r2, r1
    9b2a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    9b2c:	4bd6      	ldr	r3, [pc, #856]	; (9e88 <f_open+0x39c>)
    9b2e:	2294      	movs	r2, #148	; 0x94
    9b30:	0092      	lsls	r2, r2, #2
    9b32:	4694      	mov	ip, r2
    9b34:	44bc      	add	ip, r7
    9b36:	4463      	add	r3, ip
    9b38:	781b      	ldrb	r3, [r3, #0]
    9b3a:	2201      	movs	r2, #1
    9b3c:	4393      	bics	r3, r2
    9b3e:	b2da      	uxtb	r2, r3
    9b40:	4bd2      	ldr	r3, [pc, #840]	; (9e8c <f_open+0x3a0>)
    9b42:	18fc      	adds	r4, r7, r3
    9b44:	2387      	movs	r3, #135	; 0x87
    9b46:	009b      	lsls	r3, r3, #2
    9b48:	18f9      	adds	r1, r7, r3
    9b4a:	2308      	movs	r3, #8
    9b4c:	18fb      	adds	r3, r7, r3
    9b4e:	0018      	movs	r0, r3
    9b50:	4bcf      	ldr	r3, [pc, #828]	; (9e90 <f_open+0x3a4>)
    9b52:	4798      	blx	r3
    9b54:	0003      	movs	r3, r0
    9b56:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    9b58:	2387      	movs	r3, #135	; 0x87
    9b5a:	009b      	lsls	r3, r3, #2
    9b5c:	18fb      	adds	r3, r7, r3
    9b5e:	2284      	movs	r2, #132	; 0x84
    9b60:	0092      	lsls	r2, r2, #2
    9b62:	18ba      	adds	r2, r7, r2
    9b64:	619a      	str	r2, [r3, #24]
    9b66:	2387      	movs	r3, #135	; 0x87
    9b68:	009b      	lsls	r3, r3, #2
    9b6a:	18fb      	adds	r3, r7, r3
    9b6c:	2210      	movs	r2, #16
    9b6e:	18ba      	adds	r2, r7, r2
    9b70:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    9b72:	4bc6      	ldr	r3, [pc, #792]	; (9e8c <f_open+0x3a0>)
    9b74:	18fb      	adds	r3, r7, r3
    9b76:	781b      	ldrb	r3, [r3, #0]
    9b78:	2b00      	cmp	r3, #0
    9b7a:	d10b      	bne.n	9b94 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    9b7c:	68ba      	ldr	r2, [r7, #8]
    9b7e:	4bc3      	ldr	r3, [pc, #780]	; (9e8c <f_open+0x3a0>)
    9b80:	18fc      	adds	r4, r7, r3
    9b82:	2387      	movs	r3, #135	; 0x87
    9b84:	009b      	lsls	r3, r3, #2
    9b86:	18fb      	adds	r3, r7, r3
    9b88:	0011      	movs	r1, r2
    9b8a:	0018      	movs	r0, r3
    9b8c:	4bc1      	ldr	r3, [pc, #772]	; (9e94 <f_open+0x3a8>)
    9b8e:	4798      	blx	r3
    9b90:	0003      	movs	r3, r0
    9b92:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    9b94:	2387      	movs	r3, #135	; 0x87
    9b96:	009b      	lsls	r3, r3, #2
    9b98:	18fb      	adds	r3, r7, r3
    9b9a:	695b      	ldr	r3, [r3, #20]
    9b9c:	2292      	movs	r2, #146	; 0x92
    9b9e:	0092      	lsls	r2, r2, #2
    9ba0:	18ba      	adds	r2, r7, r2
    9ba2:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    9ba4:	4bb9      	ldr	r3, [pc, #740]	; (9e8c <f_open+0x3a0>)
    9ba6:	18fb      	adds	r3, r7, r3
    9ba8:	781b      	ldrb	r3, [r3, #0]
    9baa:	2b00      	cmp	r3, #0
    9bac:	d109      	bne.n	9bc2 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    9bae:	2392      	movs	r3, #146	; 0x92
    9bb0:	009b      	lsls	r3, r3, #2
    9bb2:	18fb      	adds	r3, r7, r3
    9bb4:	681b      	ldr	r3, [r3, #0]
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	d103      	bne.n	9bc2 <f_open+0xd6>
			res = FR_INVALID_NAME;
    9bba:	4bb4      	ldr	r3, [pc, #720]	; (9e8c <f_open+0x3a0>)
    9bbc:	18fb      	adds	r3, r7, r3
    9bbe:	2206      	movs	r2, #6
    9bc0:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9bc2:	4bb1      	ldr	r3, [pc, #708]	; (9e88 <f_open+0x39c>)
    9bc4:	2294      	movs	r2, #148	; 0x94
    9bc6:	0092      	lsls	r2, r2, #2
    9bc8:	4694      	mov	ip, r2
    9bca:	44bc      	add	ip, r7
    9bcc:	4463      	add	r3, ip
    9bce:	781b      	ldrb	r3, [r3, #0]
    9bd0:	221c      	movs	r2, #28
    9bd2:	4013      	ands	r3, r2
    9bd4:	d100      	bne.n	9bd8 <f_open+0xec>
    9bd6:	e141      	b.n	9e5c <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    9bd8:	4bac      	ldr	r3, [pc, #688]	; (9e8c <f_open+0x3a0>)
    9bda:	18fb      	adds	r3, r7, r3
    9bdc:	781b      	ldrb	r3, [r3, #0]
    9bde:	2b00      	cmp	r3, #0
    9be0:	d027      	beq.n	9c32 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    9be2:	4baa      	ldr	r3, [pc, #680]	; (9e8c <f_open+0x3a0>)
    9be4:	18fb      	adds	r3, r7, r3
    9be6:	781b      	ldrb	r3, [r3, #0]
    9be8:	2b04      	cmp	r3, #4
    9bea:	d109      	bne.n	9c00 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    9bec:	4ba7      	ldr	r3, [pc, #668]	; (9e8c <f_open+0x3a0>)
    9bee:	18fc      	adds	r4, r7, r3
    9bf0:	2387      	movs	r3, #135	; 0x87
    9bf2:	009b      	lsls	r3, r3, #2
    9bf4:	18fb      	adds	r3, r7, r3
    9bf6:	0018      	movs	r0, r3
    9bf8:	4ba7      	ldr	r3, [pc, #668]	; (9e98 <f_open+0x3ac>)
    9bfa:	4798      	blx	r3
    9bfc:	0003      	movs	r3, r0
    9bfe:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    9c00:	4ba1      	ldr	r3, [pc, #644]	; (9e88 <f_open+0x39c>)
    9c02:	2294      	movs	r2, #148	; 0x94
    9c04:	0092      	lsls	r2, r2, #2
    9c06:	4694      	mov	ip, r2
    9c08:	44bc      	add	ip, r7
    9c0a:	4463      	add	r3, ip
    9c0c:	4a9e      	ldr	r2, [pc, #632]	; (9e88 <f_open+0x39c>)
    9c0e:	2194      	movs	r1, #148	; 0x94
    9c10:	0089      	lsls	r1, r1, #2
    9c12:	468c      	mov	ip, r1
    9c14:	44bc      	add	ip, r7
    9c16:	4462      	add	r2, ip
    9c18:	7812      	ldrb	r2, [r2, #0]
    9c1a:	2108      	movs	r1, #8
    9c1c:	430a      	orrs	r2, r1
    9c1e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    9c20:	2387      	movs	r3, #135	; 0x87
    9c22:	009b      	lsls	r3, r3, #2
    9c24:	18fb      	adds	r3, r7, r3
    9c26:	695b      	ldr	r3, [r3, #20]
    9c28:	2292      	movs	r2, #146	; 0x92
    9c2a:	0092      	lsls	r2, r2, #2
    9c2c:	18ba      	adds	r2, r7, r2
    9c2e:	6013      	str	r3, [r2, #0]
    9c30:	e01c      	b.n	9c6c <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    9c32:	2392      	movs	r3, #146	; 0x92
    9c34:	009b      	lsls	r3, r3, #2
    9c36:	18fb      	adds	r3, r7, r3
    9c38:	681b      	ldr	r3, [r3, #0]
    9c3a:	330b      	adds	r3, #11
    9c3c:	781b      	ldrb	r3, [r3, #0]
    9c3e:	001a      	movs	r2, r3
    9c40:	2311      	movs	r3, #17
    9c42:	4013      	ands	r3, r2
    9c44:	d004      	beq.n	9c50 <f_open+0x164>
				res = FR_DENIED;
    9c46:	4b91      	ldr	r3, [pc, #580]	; (9e8c <f_open+0x3a0>)
    9c48:	18fb      	adds	r3, r7, r3
    9c4a:	2207      	movs	r2, #7
    9c4c:	701a      	strb	r2, [r3, #0]
    9c4e:	e00d      	b.n	9c6c <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    9c50:	4b8d      	ldr	r3, [pc, #564]	; (9e88 <f_open+0x39c>)
    9c52:	2294      	movs	r2, #148	; 0x94
    9c54:	0092      	lsls	r2, r2, #2
    9c56:	4694      	mov	ip, r2
    9c58:	44bc      	add	ip, r7
    9c5a:	4463      	add	r3, ip
    9c5c:	781b      	ldrb	r3, [r3, #0]
    9c5e:	2204      	movs	r2, #4
    9c60:	4013      	ands	r3, r2
    9c62:	d003      	beq.n	9c6c <f_open+0x180>
					res = FR_EXIST;
    9c64:	4b89      	ldr	r3, [pc, #548]	; (9e8c <f_open+0x3a0>)
    9c66:	18fb      	adds	r3, r7, r3
    9c68:	2208      	movs	r2, #8
    9c6a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9c6c:	4b87      	ldr	r3, [pc, #540]	; (9e8c <f_open+0x3a0>)
    9c6e:	18fb      	adds	r3, r7, r3
    9c70:	781b      	ldrb	r3, [r3, #0]
    9c72:	2b00      	cmp	r3, #0
    9c74:	d000      	beq.n	9c78 <f_open+0x18c>
    9c76:	e12f      	b.n	9ed8 <f_open+0x3ec>
    9c78:	4b83      	ldr	r3, [pc, #524]	; (9e88 <f_open+0x39c>)
    9c7a:	2294      	movs	r2, #148	; 0x94
    9c7c:	0092      	lsls	r2, r2, #2
    9c7e:	4694      	mov	ip, r2
    9c80:	44bc      	add	ip, r7
    9c82:	4463      	add	r3, ip
    9c84:	781b      	ldrb	r3, [r3, #0]
    9c86:	2208      	movs	r2, #8
    9c88:	4013      	ands	r3, r2
    9c8a:	d100      	bne.n	9c8e <f_open+0x1a2>
    9c8c:	e124      	b.n	9ed8 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    9c8e:	4b83      	ldr	r3, [pc, #524]	; (9e9c <f_open+0x3b0>)
    9c90:	4798      	blx	r3
    9c92:	0003      	movs	r3, r0
    9c94:	2291      	movs	r2, #145	; 0x91
    9c96:	0092      	lsls	r2, r2, #2
    9c98:	18ba      	adds	r2, r7, r2
    9c9a:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    9c9c:	2392      	movs	r3, #146	; 0x92
    9c9e:	009b      	lsls	r3, r3, #2
    9ca0:	18fb      	adds	r3, r7, r3
    9ca2:	681b      	ldr	r3, [r3, #0]
    9ca4:	330e      	adds	r3, #14
    9ca6:	2291      	movs	r2, #145	; 0x91
    9ca8:	0092      	lsls	r2, r2, #2
    9caa:	18ba      	adds	r2, r7, r2
    9cac:	6812      	ldr	r2, [r2, #0]
    9cae:	b2d2      	uxtb	r2, r2
    9cb0:	701a      	strb	r2, [r3, #0]
    9cb2:	2392      	movs	r3, #146	; 0x92
    9cb4:	009b      	lsls	r3, r3, #2
    9cb6:	18fb      	adds	r3, r7, r3
    9cb8:	681b      	ldr	r3, [r3, #0]
    9cba:	330f      	adds	r3, #15
    9cbc:	2291      	movs	r2, #145	; 0x91
    9cbe:	0092      	lsls	r2, r2, #2
    9cc0:	18ba      	adds	r2, r7, r2
    9cc2:	6812      	ldr	r2, [r2, #0]
    9cc4:	b292      	uxth	r2, r2
    9cc6:	0a12      	lsrs	r2, r2, #8
    9cc8:	b292      	uxth	r2, r2
    9cca:	b2d2      	uxtb	r2, r2
    9ccc:	701a      	strb	r2, [r3, #0]
    9cce:	2392      	movs	r3, #146	; 0x92
    9cd0:	009b      	lsls	r3, r3, #2
    9cd2:	18fb      	adds	r3, r7, r3
    9cd4:	681b      	ldr	r3, [r3, #0]
    9cd6:	3310      	adds	r3, #16
    9cd8:	2291      	movs	r2, #145	; 0x91
    9cda:	0092      	lsls	r2, r2, #2
    9cdc:	18ba      	adds	r2, r7, r2
    9cde:	6812      	ldr	r2, [r2, #0]
    9ce0:	0c12      	lsrs	r2, r2, #16
    9ce2:	b2d2      	uxtb	r2, r2
    9ce4:	701a      	strb	r2, [r3, #0]
    9ce6:	2392      	movs	r3, #146	; 0x92
    9ce8:	009b      	lsls	r3, r3, #2
    9cea:	18fb      	adds	r3, r7, r3
    9cec:	681b      	ldr	r3, [r3, #0]
    9cee:	3311      	adds	r3, #17
    9cf0:	2291      	movs	r2, #145	; 0x91
    9cf2:	0092      	lsls	r2, r2, #2
    9cf4:	18ba      	adds	r2, r7, r2
    9cf6:	6812      	ldr	r2, [r2, #0]
    9cf8:	0e12      	lsrs	r2, r2, #24
    9cfa:	b2d2      	uxtb	r2, r2
    9cfc:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9cfe:	2392      	movs	r3, #146	; 0x92
    9d00:	009b      	lsls	r3, r3, #2
    9d02:	18fb      	adds	r3, r7, r3
    9d04:	681b      	ldr	r3, [r3, #0]
    9d06:	330b      	adds	r3, #11
    9d08:	2200      	movs	r2, #0
    9d0a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9d0c:	2392      	movs	r3, #146	; 0x92
    9d0e:	009b      	lsls	r3, r3, #2
    9d10:	18fb      	adds	r3, r7, r3
    9d12:	681b      	ldr	r3, [r3, #0]
    9d14:	331c      	adds	r3, #28
    9d16:	2200      	movs	r2, #0
    9d18:	701a      	strb	r2, [r3, #0]
    9d1a:	2392      	movs	r3, #146	; 0x92
    9d1c:	009b      	lsls	r3, r3, #2
    9d1e:	18fb      	adds	r3, r7, r3
    9d20:	681b      	ldr	r3, [r3, #0]
    9d22:	331d      	adds	r3, #29
    9d24:	2200      	movs	r2, #0
    9d26:	701a      	strb	r2, [r3, #0]
    9d28:	2392      	movs	r3, #146	; 0x92
    9d2a:	009b      	lsls	r3, r3, #2
    9d2c:	18fb      	adds	r3, r7, r3
    9d2e:	681b      	ldr	r3, [r3, #0]
    9d30:	331e      	adds	r3, #30
    9d32:	2200      	movs	r2, #0
    9d34:	701a      	strb	r2, [r3, #0]
    9d36:	2392      	movs	r3, #146	; 0x92
    9d38:	009b      	lsls	r3, r3, #2
    9d3a:	18fb      	adds	r3, r7, r3
    9d3c:	681b      	ldr	r3, [r3, #0]
    9d3e:	331f      	adds	r3, #31
    9d40:	2200      	movs	r2, #0
    9d42:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    9d44:	2392      	movs	r3, #146	; 0x92
    9d46:	009b      	lsls	r3, r3, #2
    9d48:	18fb      	adds	r3, r7, r3
    9d4a:	681b      	ldr	r3, [r3, #0]
    9d4c:	3315      	adds	r3, #21
    9d4e:	781b      	ldrb	r3, [r3, #0]
    9d50:	021b      	lsls	r3, r3, #8
    9d52:	b21a      	sxth	r2, r3
    9d54:	2392      	movs	r3, #146	; 0x92
    9d56:	009b      	lsls	r3, r3, #2
    9d58:	18fb      	adds	r3, r7, r3
    9d5a:	681b      	ldr	r3, [r3, #0]
    9d5c:	3314      	adds	r3, #20
    9d5e:	781b      	ldrb	r3, [r3, #0]
    9d60:	b21b      	sxth	r3, r3
    9d62:	4313      	orrs	r3, r2
    9d64:	b21b      	sxth	r3, r3
    9d66:	b29b      	uxth	r3, r3
    9d68:	041b      	lsls	r3, r3, #16
    9d6a:	2292      	movs	r2, #146	; 0x92
    9d6c:	0092      	lsls	r2, r2, #2
    9d6e:	18ba      	adds	r2, r7, r2
    9d70:	6812      	ldr	r2, [r2, #0]
    9d72:	321b      	adds	r2, #27
    9d74:	7812      	ldrb	r2, [r2, #0]
    9d76:	0212      	lsls	r2, r2, #8
    9d78:	b211      	sxth	r1, r2
    9d7a:	2292      	movs	r2, #146	; 0x92
    9d7c:	0092      	lsls	r2, r2, #2
    9d7e:	18ba      	adds	r2, r7, r2
    9d80:	6812      	ldr	r2, [r2, #0]
    9d82:	321a      	adds	r2, #26
    9d84:	7812      	ldrb	r2, [r2, #0]
    9d86:	b212      	sxth	r2, r2
    9d88:	430a      	orrs	r2, r1
    9d8a:	b212      	sxth	r2, r2
    9d8c:	b292      	uxth	r2, r2
    9d8e:	4313      	orrs	r3, r2
    9d90:	2290      	movs	r2, #144	; 0x90
    9d92:	0092      	lsls	r2, r2, #2
    9d94:	18ba      	adds	r2, r7, r2
    9d96:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    9d98:	2392      	movs	r3, #146	; 0x92
    9d9a:	009b      	lsls	r3, r3, #2
    9d9c:	18fb      	adds	r3, r7, r3
    9d9e:	681b      	ldr	r3, [r3, #0]
    9da0:	331a      	adds	r3, #26
    9da2:	2200      	movs	r2, #0
    9da4:	701a      	strb	r2, [r3, #0]
    9da6:	2392      	movs	r3, #146	; 0x92
    9da8:	009b      	lsls	r3, r3, #2
    9daa:	18fb      	adds	r3, r7, r3
    9dac:	681b      	ldr	r3, [r3, #0]
    9dae:	331b      	adds	r3, #27
    9db0:	2200      	movs	r2, #0
    9db2:	701a      	strb	r2, [r3, #0]
    9db4:	2392      	movs	r3, #146	; 0x92
    9db6:	009b      	lsls	r3, r3, #2
    9db8:	18fb      	adds	r3, r7, r3
    9dba:	681b      	ldr	r3, [r3, #0]
    9dbc:	3314      	adds	r3, #20
    9dbe:	2200      	movs	r2, #0
    9dc0:	701a      	strb	r2, [r3, #0]
    9dc2:	2392      	movs	r3, #146	; 0x92
    9dc4:	009b      	lsls	r3, r3, #2
    9dc6:	18fb      	adds	r3, r7, r3
    9dc8:	681b      	ldr	r3, [r3, #0]
    9dca:	3315      	adds	r3, #21
    9dcc:	2200      	movs	r2, #0
    9dce:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    9dd0:	2387      	movs	r3, #135	; 0x87
    9dd2:	009b      	lsls	r3, r3, #2
    9dd4:	18fb      	adds	r3, r7, r3
    9dd6:	681b      	ldr	r3, [r3, #0]
    9dd8:	2201      	movs	r2, #1
    9dda:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    9ddc:	2390      	movs	r3, #144	; 0x90
    9dde:	009b      	lsls	r3, r3, #2
    9de0:	18fb      	adds	r3, r7, r3
    9de2:	681b      	ldr	r3, [r3, #0]
    9de4:	2b00      	cmp	r3, #0
    9de6:	d100      	bne.n	9dea <f_open+0x2fe>
    9de8:	e076      	b.n	9ed8 <f_open+0x3ec>
				dw = dj.fs->winsect;
    9dea:	2387      	movs	r3, #135	; 0x87
    9dec:	009b      	lsls	r3, r3, #2
    9dee:	18fb      	adds	r3, r7, r3
    9df0:	681b      	ldr	r3, [r3, #0]
    9df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9df4:	2291      	movs	r2, #145	; 0x91
    9df6:	0092      	lsls	r2, r2, #2
    9df8:	18ba      	adds	r2, r7, r2
    9dfa:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    9dfc:	2387      	movs	r3, #135	; 0x87
    9dfe:	009b      	lsls	r3, r3, #2
    9e00:	18fb      	adds	r3, r7, r3
    9e02:	681b      	ldr	r3, [r3, #0]
    9e04:	4a21      	ldr	r2, [pc, #132]	; (9e8c <f_open+0x3a0>)
    9e06:	18bc      	adds	r4, r7, r2
    9e08:	2290      	movs	r2, #144	; 0x90
    9e0a:	0092      	lsls	r2, r2, #2
    9e0c:	18ba      	adds	r2, r7, r2
    9e0e:	6812      	ldr	r2, [r2, #0]
    9e10:	0011      	movs	r1, r2
    9e12:	0018      	movs	r0, r3
    9e14:	4b22      	ldr	r3, [pc, #136]	; (9ea0 <f_open+0x3b4>)
    9e16:	4798      	blx	r3
    9e18:	0003      	movs	r3, r0
    9e1a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    9e1c:	4b1b      	ldr	r3, [pc, #108]	; (9e8c <f_open+0x3a0>)
    9e1e:	18fb      	adds	r3, r7, r3
    9e20:	781b      	ldrb	r3, [r3, #0]
    9e22:	2b00      	cmp	r3, #0
    9e24:	d158      	bne.n	9ed8 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9e26:	2387      	movs	r3, #135	; 0x87
    9e28:	009b      	lsls	r3, r3, #2
    9e2a:	18fb      	adds	r3, r7, r3
    9e2c:	681b      	ldr	r3, [r3, #0]
    9e2e:	2290      	movs	r2, #144	; 0x90
    9e30:	0092      	lsls	r2, r2, #2
    9e32:	18ba      	adds	r2, r7, r2
    9e34:	6812      	ldr	r2, [r2, #0]
    9e36:	3a01      	subs	r2, #1
    9e38:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    9e3a:	2387      	movs	r3, #135	; 0x87
    9e3c:	009b      	lsls	r3, r3, #2
    9e3e:	18fb      	adds	r3, r7, r3
    9e40:	681b      	ldr	r3, [r3, #0]
    9e42:	4a12      	ldr	r2, [pc, #72]	; (9e8c <f_open+0x3a0>)
    9e44:	18bc      	adds	r4, r7, r2
    9e46:	2291      	movs	r2, #145	; 0x91
    9e48:	0092      	lsls	r2, r2, #2
    9e4a:	18ba      	adds	r2, r7, r2
    9e4c:	6812      	ldr	r2, [r2, #0]
    9e4e:	0011      	movs	r1, r2
    9e50:	0018      	movs	r0, r3
    9e52:	4b14      	ldr	r3, [pc, #80]	; (9ea4 <f_open+0x3b8>)
    9e54:	4798      	blx	r3
    9e56:	0003      	movs	r3, r0
    9e58:	7023      	strb	r3, [r4, #0]
    9e5a:	e03d      	b.n	9ed8 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    9e5c:	4b0b      	ldr	r3, [pc, #44]	; (9e8c <f_open+0x3a0>)
    9e5e:	18fb      	adds	r3, r7, r3
    9e60:	781b      	ldrb	r3, [r3, #0]
    9e62:	2b00      	cmp	r3, #0
    9e64:	d138      	bne.n	9ed8 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    9e66:	2392      	movs	r3, #146	; 0x92
    9e68:	009b      	lsls	r3, r3, #2
    9e6a:	18fb      	adds	r3, r7, r3
    9e6c:	681b      	ldr	r3, [r3, #0]
    9e6e:	330b      	adds	r3, #11
    9e70:	781b      	ldrb	r3, [r3, #0]
    9e72:	001a      	movs	r2, r3
    9e74:	2310      	movs	r3, #16
    9e76:	4013      	ands	r3, r2
    9e78:	d016      	beq.n	9ea8 <f_open+0x3bc>
				res = FR_NO_FILE;
    9e7a:	4b04      	ldr	r3, [pc, #16]	; (9e8c <f_open+0x3a0>)
    9e7c:	18fb      	adds	r3, r7, r3
    9e7e:	2204      	movs	r2, #4
    9e80:	701a      	strb	r2, [r3, #0]
    9e82:	e029      	b.n	9ed8 <f_open+0x3ec>
    9e84:	fffffdac 	.word	0xfffffdac
    9e88:	fffffdb7 	.word	0xfffffdb7
    9e8c:	0000024f 	.word	0x0000024f
    9e90:	00009445 	.word	0x00009445
    9e94:	00009239 	.word	0x00009239
    9e98:	000089b1 	.word	0x000089b1
    9e9c:	00007501 	.word	0x00007501
    9ea0:	00007c85 	.word	0x00007c85
    9ea4:	00007645 	.word	0x00007645
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9ea8:	4b5a      	ldr	r3, [pc, #360]	; (a014 <f_open+0x528>)
    9eaa:	2294      	movs	r2, #148	; 0x94
    9eac:	0092      	lsls	r2, r2, #2
    9eae:	4694      	mov	ip, r2
    9eb0:	44bc      	add	ip, r7
    9eb2:	4463      	add	r3, ip
    9eb4:	781b      	ldrb	r3, [r3, #0]
    9eb6:	2202      	movs	r2, #2
    9eb8:	4013      	ands	r3, r2
    9eba:	d00d      	beq.n	9ed8 <f_open+0x3ec>
    9ebc:	2392      	movs	r3, #146	; 0x92
    9ebe:	009b      	lsls	r3, r3, #2
    9ec0:	18fb      	adds	r3, r7, r3
    9ec2:	681b      	ldr	r3, [r3, #0]
    9ec4:	330b      	adds	r3, #11
    9ec6:	781b      	ldrb	r3, [r3, #0]
    9ec8:	001a      	movs	r2, r3
    9eca:	2301      	movs	r3, #1
    9ecc:	4013      	ands	r3, r2
    9ece:	d003      	beq.n	9ed8 <f_open+0x3ec>
					res = FR_DENIED;
    9ed0:	4b51      	ldr	r3, [pc, #324]	; (a018 <f_open+0x52c>)
    9ed2:	18fb      	adds	r3, r7, r3
    9ed4:	2207      	movs	r2, #7
    9ed6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    9ed8:	4b4f      	ldr	r3, [pc, #316]	; (a018 <f_open+0x52c>)
    9eda:	18fb      	adds	r3, r7, r3
    9edc:	781b      	ldrb	r3, [r3, #0]
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d126      	bne.n	9f30 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    9ee2:	4b4c      	ldr	r3, [pc, #304]	; (a014 <f_open+0x528>)
    9ee4:	2294      	movs	r2, #148	; 0x94
    9ee6:	0092      	lsls	r2, r2, #2
    9ee8:	4694      	mov	ip, r2
    9eea:	44bc      	add	ip, r7
    9eec:	4463      	add	r3, ip
    9eee:	781b      	ldrb	r3, [r3, #0]
    9ef0:	2208      	movs	r2, #8
    9ef2:	4013      	ands	r3, r2
    9ef4:	d00f      	beq.n	9f16 <f_open+0x42a>
			mode |= FA__WRITTEN;
    9ef6:	4b47      	ldr	r3, [pc, #284]	; (a014 <f_open+0x528>)
    9ef8:	2294      	movs	r2, #148	; 0x94
    9efa:	0092      	lsls	r2, r2, #2
    9efc:	4694      	mov	ip, r2
    9efe:	44bc      	add	ip, r7
    9f00:	4463      	add	r3, ip
    9f02:	4a44      	ldr	r2, [pc, #272]	; (a014 <f_open+0x528>)
    9f04:	2194      	movs	r1, #148	; 0x94
    9f06:	0089      	lsls	r1, r1, #2
    9f08:	468c      	mov	ip, r1
    9f0a:	44bc      	add	ip, r7
    9f0c:	4462      	add	r2, ip
    9f0e:	7812      	ldrb	r2, [r2, #0]
    9f10:	2120      	movs	r1, #32
    9f12:	430a      	orrs	r2, r1
    9f14:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    9f16:	2387      	movs	r3, #135	; 0x87
    9f18:	009b      	lsls	r3, r3, #2
    9f1a:	18fb      	adds	r3, r7, r3
    9f1c:	681b      	ldr	r3, [r3, #0]
    9f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9f20:	68fb      	ldr	r3, [r7, #12]
    9f22:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    9f24:	68fb      	ldr	r3, [r7, #12]
    9f26:	2292      	movs	r2, #146	; 0x92
    9f28:	0092      	lsls	r2, r2, #2
    9f2a:	18ba      	adds	r2, r7, r2
    9f2c:	6812      	ldr	r2, [r2, #0]
    9f2e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    9f30:	4b39      	ldr	r3, [pc, #228]	; (a018 <f_open+0x52c>)
    9f32:	18fb      	adds	r3, r7, r3
    9f34:	781b      	ldrb	r3, [r3, #0]
    9f36:	2b00      	cmp	r3, #0
    9f38:	d163      	bne.n	a002 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    9f3a:	68fb      	ldr	r3, [r7, #12]
    9f3c:	4a35      	ldr	r2, [pc, #212]	; (a014 <f_open+0x528>)
    9f3e:	2194      	movs	r1, #148	; 0x94
    9f40:	0089      	lsls	r1, r1, #2
    9f42:	468c      	mov	ip, r1
    9f44:	44bc      	add	ip, r7
    9f46:	4462      	add	r2, ip
    9f48:	7812      	ldrb	r2, [r2, #0]
    9f4a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    9f4c:	2392      	movs	r3, #146	; 0x92
    9f4e:	009b      	lsls	r3, r3, #2
    9f50:	18fb      	adds	r3, r7, r3
    9f52:	681b      	ldr	r3, [r3, #0]
    9f54:	3315      	adds	r3, #21
    9f56:	781b      	ldrb	r3, [r3, #0]
    9f58:	021b      	lsls	r3, r3, #8
    9f5a:	b21a      	sxth	r2, r3
    9f5c:	2392      	movs	r3, #146	; 0x92
    9f5e:	009b      	lsls	r3, r3, #2
    9f60:	18fb      	adds	r3, r7, r3
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	3314      	adds	r3, #20
    9f66:	781b      	ldrb	r3, [r3, #0]
    9f68:	b21b      	sxth	r3, r3
    9f6a:	4313      	orrs	r3, r2
    9f6c:	b21b      	sxth	r3, r3
    9f6e:	b29b      	uxth	r3, r3
    9f70:	041b      	lsls	r3, r3, #16
    9f72:	2292      	movs	r2, #146	; 0x92
    9f74:	0092      	lsls	r2, r2, #2
    9f76:	18ba      	adds	r2, r7, r2
    9f78:	6812      	ldr	r2, [r2, #0]
    9f7a:	321b      	adds	r2, #27
    9f7c:	7812      	ldrb	r2, [r2, #0]
    9f7e:	0212      	lsls	r2, r2, #8
    9f80:	b211      	sxth	r1, r2
    9f82:	2292      	movs	r2, #146	; 0x92
    9f84:	0092      	lsls	r2, r2, #2
    9f86:	18ba      	adds	r2, r7, r2
    9f88:	6812      	ldr	r2, [r2, #0]
    9f8a:	321a      	adds	r2, #26
    9f8c:	7812      	ldrb	r2, [r2, #0]
    9f8e:	b212      	sxth	r2, r2
    9f90:	430a      	orrs	r2, r1
    9f92:	b212      	sxth	r2, r2
    9f94:	b292      	uxth	r2, r2
    9f96:	431a      	orrs	r2, r3
    9f98:	68fb      	ldr	r3, [r7, #12]
    9f9a:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9f9c:	2392      	movs	r3, #146	; 0x92
    9f9e:	009b      	lsls	r3, r3, #2
    9fa0:	18fb      	adds	r3, r7, r3
    9fa2:	681b      	ldr	r3, [r3, #0]
    9fa4:	331f      	adds	r3, #31
    9fa6:	781b      	ldrb	r3, [r3, #0]
    9fa8:	061a      	lsls	r2, r3, #24
    9faa:	2392      	movs	r3, #146	; 0x92
    9fac:	009b      	lsls	r3, r3, #2
    9fae:	18fb      	adds	r3, r7, r3
    9fb0:	681b      	ldr	r3, [r3, #0]
    9fb2:	331e      	adds	r3, #30
    9fb4:	781b      	ldrb	r3, [r3, #0]
    9fb6:	041b      	lsls	r3, r3, #16
    9fb8:	4313      	orrs	r3, r2
    9fba:	2292      	movs	r2, #146	; 0x92
    9fbc:	0092      	lsls	r2, r2, #2
    9fbe:	18ba      	adds	r2, r7, r2
    9fc0:	6812      	ldr	r2, [r2, #0]
    9fc2:	321d      	adds	r2, #29
    9fc4:	7812      	ldrb	r2, [r2, #0]
    9fc6:	0212      	lsls	r2, r2, #8
    9fc8:	4313      	orrs	r3, r2
    9fca:	2292      	movs	r2, #146	; 0x92
    9fcc:	0092      	lsls	r2, r2, #2
    9fce:	18ba      	adds	r2, r7, r2
    9fd0:	6812      	ldr	r2, [r2, #0]
    9fd2:	321c      	adds	r2, #28
    9fd4:	7812      	ldrb	r2, [r2, #0]
    9fd6:	431a      	orrs	r2, r3
    9fd8:	68fb      	ldr	r3, [r7, #12]
    9fda:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    9fdc:	68fb      	ldr	r3, [r7, #12]
    9fde:	2200      	movs	r2, #0
    9fe0:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    9fe2:	68fb      	ldr	r3, [r7, #12]
    9fe4:	2200      	movs	r2, #0
    9fe6:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    9fe8:	2387      	movs	r3, #135	; 0x87
    9fea:	009b      	lsls	r3, r3, #2
    9fec:	18fb      	adds	r3, r7, r3
    9fee:	681a      	ldr	r2, [r3, #0]
    9ff0:	68fb      	ldr	r3, [r7, #12]
    9ff2:	601a      	str	r2, [r3, #0]
    9ff4:	2387      	movs	r3, #135	; 0x87
    9ff6:	009b      	lsls	r3, r3, #2
    9ff8:	18fb      	adds	r3, r7, r3
    9ffa:	681b      	ldr	r3, [r3, #0]
    9ffc:	88da      	ldrh	r2, [r3, #6]
    9ffe:	68fb      	ldr	r3, [r7, #12]
    a000:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    a002:	4b05      	ldr	r3, [pc, #20]	; (a018 <f_open+0x52c>)
    a004:	18fb      	adds	r3, r7, r3
    a006:	781b      	ldrb	r3, [r3, #0]
}
    a008:	0018      	movs	r0, r3
    a00a:	46bd      	mov	sp, r7
    a00c:	2395      	movs	r3, #149	; 0x95
    a00e:	009b      	lsls	r3, r3, #2
    a010:	449d      	add	sp, r3
    a012:	bd90      	pop	{r4, r7, pc}
    a014:	fffffdb7 	.word	0xfffffdb7
    a018:	0000024f 	.word	0x0000024f

0000a01c <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    a01c:	b590      	push	{r4, r7, lr}
    a01e:	b08d      	sub	sp, #52	; 0x34
    a020:	af00      	add	r7, sp, #0
    a022:	60f8      	str	r0, [r7, #12]
    a024:	60b9      	str	r1, [r7, #8]
    a026:	607a      	str	r2, [r7, #4]
    a028:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    a02a:	68bb      	ldr	r3, [r7, #8]
    a02c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
    a02e:	683b      	ldr	r3, [r7, #0]
    a030:	2200      	movs	r2, #0
    a032:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    a034:	68fb      	ldr	r3, [r7, #12]
    a036:	681a      	ldr	r2, [r3, #0]
    a038:	68fb      	ldr	r3, [r7, #12]
    a03a:	889b      	ldrh	r3, [r3, #4]
    a03c:	211f      	movs	r1, #31
    a03e:	187c      	adds	r4, r7, r1
    a040:	0019      	movs	r1, r3
    a042:	0010      	movs	r0, r2
    a044:	4b96      	ldr	r3, [pc, #600]	; (a2a0 <f_read+0x284>)
    a046:	4798      	blx	r3
    a048:	0003      	movs	r3, r0
    a04a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a04c:	231f      	movs	r3, #31
    a04e:	18fb      	adds	r3, r7, r3
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	2b00      	cmp	r3, #0
    a054:	d003      	beq.n	a05e <f_read+0x42>
    a056:	231f      	movs	r3, #31
    a058:	18fb      	adds	r3, r7, r3
    a05a:	781b      	ldrb	r3, [r3, #0]
    a05c:	e11b      	b.n	a296 <f_read+0x27a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    a05e:	68fb      	ldr	r3, [r7, #12]
    a060:	799b      	ldrb	r3, [r3, #6]
    a062:	b25b      	sxtb	r3, r3
    a064:	2b00      	cmp	r3, #0
    a066:	da01      	bge.n	a06c <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a068:	2302      	movs	r3, #2
    a06a:	e114      	b.n	a296 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    a06c:	68fb      	ldr	r3, [r7, #12]
    a06e:	799b      	ldrb	r3, [r3, #6]
    a070:	001a      	movs	r2, r3
    a072:	2301      	movs	r3, #1
    a074:	4013      	ands	r3, r2
    a076:	d101      	bne.n	a07c <f_read+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a078:	2307      	movs	r3, #7
    a07a:	e10c      	b.n	a296 <f_read+0x27a>
	remain = fp->fsize - fp->fptr;
    a07c:	68fb      	ldr	r3, [r7, #12]
    a07e:	68da      	ldr	r2, [r3, #12]
    a080:	68fb      	ldr	r3, [r7, #12]
    a082:	689b      	ldr	r3, [r3, #8]
    a084:	1ad3      	subs	r3, r2, r3
    a086:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    a088:	687a      	ldr	r2, [r7, #4]
    a08a:	69bb      	ldr	r3, [r7, #24]
    a08c:	429a      	cmp	r2, r3
    a08e:	d800      	bhi.n	a092 <f_read+0x76>
    a090:	e0fc      	b.n	a28c <f_read+0x270>
    a092:	69bb      	ldr	r3, [r7, #24]
    a094:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
    a096:	e0f9      	b.n	a28c <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    a098:	68fb      	ldr	r3, [r7, #12]
    a09a:	689b      	ldr	r3, [r3, #8]
    a09c:	05db      	lsls	r3, r3, #23
    a09e:	0ddb      	lsrs	r3, r3, #23
    a0a0:	d000      	beq.n	a0a4 <f_read+0x88>
    a0a2:	e0b0      	b.n	a206 <f_read+0x1ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a0a4:	68fb      	ldr	r3, [r7, #12]
    a0a6:	689b      	ldr	r3, [r3, #8]
    a0a8:	0a5b      	lsrs	r3, r3, #9
    a0aa:	b2da      	uxtb	r2, r3
    a0ac:	68fb      	ldr	r3, [r7, #12]
    a0ae:	681b      	ldr	r3, [r3, #0]
    a0b0:	789b      	ldrb	r3, [r3, #2]
    a0b2:	3b01      	subs	r3, #1
    a0b4:	b2d9      	uxtb	r1, r3
    a0b6:	2317      	movs	r3, #23
    a0b8:	18fb      	adds	r3, r7, r3
    a0ba:	400a      	ands	r2, r1
    a0bc:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
    a0be:	2317      	movs	r3, #23
    a0c0:	18fb      	adds	r3, r7, r3
    a0c2:	781b      	ldrb	r3, [r3, #0]
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d12e      	bne.n	a126 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    a0c8:	68fb      	ldr	r3, [r7, #12]
    a0ca:	689b      	ldr	r3, [r3, #8]
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d103      	bne.n	a0d8 <f_read+0xbc>
					clst = fp->sclust;			/* Follow from the origin */
    a0d0:	68fb      	ldr	r3, [r7, #12]
    a0d2:	691b      	ldr	r3, [r3, #16]
    a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    a0d6:	e009      	b.n	a0ec <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    a0d8:	68fb      	ldr	r3, [r7, #12]
    a0da:	681a      	ldr	r2, [r3, #0]
    a0dc:	68fb      	ldr	r3, [r7, #12]
    a0de:	695b      	ldr	r3, [r3, #20]
    a0e0:	0019      	movs	r1, r3
    a0e2:	0010      	movs	r0, r2
    a0e4:	4b6f      	ldr	r3, [pc, #444]	; (a2a4 <f_read+0x288>)
    a0e6:	4798      	blx	r3
    a0e8:	0003      	movs	r3, r0
    a0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a0ee:	2b01      	cmp	r3, #1
    a0f0:	d809      	bhi.n	a106 <f_read+0xea>
    a0f2:	68fb      	ldr	r3, [r7, #12]
    a0f4:	799b      	ldrb	r3, [r3, #6]
    a0f6:	2280      	movs	r2, #128	; 0x80
    a0f8:	4252      	negs	r2, r2
    a0fa:	4313      	orrs	r3, r2
    a0fc:	b2da      	uxtb	r2, r3
    a0fe:	68fb      	ldr	r3, [r7, #12]
    a100:	719a      	strb	r2, [r3, #6]
    a102:	2302      	movs	r3, #2
    a104:	e0c7      	b.n	a296 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a108:	3301      	adds	r3, #1
    a10a:	d109      	bne.n	a120 <f_read+0x104>
    a10c:	68fb      	ldr	r3, [r7, #12]
    a10e:	799b      	ldrb	r3, [r3, #6]
    a110:	2280      	movs	r2, #128	; 0x80
    a112:	4252      	negs	r2, r2
    a114:	4313      	orrs	r3, r2
    a116:	b2da      	uxtb	r2, r3
    a118:	68fb      	ldr	r3, [r7, #12]
    a11a:	719a      	strb	r2, [r3, #6]
    a11c:	2301      	movs	r3, #1
    a11e:	e0ba      	b.n	a296 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
    a120:	68fb      	ldr	r3, [r7, #12]
    a122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a124:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a126:	68fb      	ldr	r3, [r7, #12]
    a128:	681a      	ldr	r2, [r3, #0]
    a12a:	68fb      	ldr	r3, [r7, #12]
    a12c:	695b      	ldr	r3, [r3, #20]
    a12e:	0019      	movs	r1, r3
    a130:	0010      	movs	r0, r2
    a132:	4b5d      	ldr	r3, [pc, #372]	; (a2a8 <f_read+0x28c>)
    a134:	4798      	blx	r3
    a136:	0003      	movs	r3, r0
    a138:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a13a:	693b      	ldr	r3, [r7, #16]
    a13c:	2b00      	cmp	r3, #0
    a13e:	d109      	bne.n	a154 <f_read+0x138>
    a140:	68fb      	ldr	r3, [r7, #12]
    a142:	799b      	ldrb	r3, [r3, #6]
    a144:	2280      	movs	r2, #128	; 0x80
    a146:	4252      	negs	r2, r2
    a148:	4313      	orrs	r3, r2
    a14a:	b2da      	uxtb	r2, r3
    a14c:	68fb      	ldr	r3, [r7, #12]
    a14e:	719a      	strb	r2, [r3, #6]
    a150:	2302      	movs	r3, #2
    a152:	e0a0      	b.n	a296 <f_read+0x27a>
			sect += csect;
    a154:	2317      	movs	r3, #23
    a156:	18fb      	adds	r3, r7, r3
    a158:	781b      	ldrb	r3, [r3, #0]
    a15a:	693a      	ldr	r2, [r7, #16]
    a15c:	18d3      	adds	r3, r2, r3
    a15e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    a160:	687b      	ldr	r3, [r7, #4]
    a162:	0a5b      	lsrs	r3, r3, #9
    a164:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
    a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a168:	2b00      	cmp	r3, #0
    a16a:	d049      	beq.n	a200 <f_read+0x1e4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a16c:	2317      	movs	r3, #23
    a16e:	18fb      	adds	r3, r7, r3
    a170:	781a      	ldrb	r2, [r3, #0]
    a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a174:	18d2      	adds	r2, r2, r3
    a176:	68fb      	ldr	r3, [r7, #12]
    a178:	681b      	ldr	r3, [r3, #0]
    a17a:	789b      	ldrb	r3, [r3, #2]
    a17c:	429a      	cmp	r2, r3
    a17e:	d908      	bls.n	a192 <f_read+0x176>
					cc = fp->fs->csize - csect;
    a180:	68fb      	ldr	r3, [r7, #12]
    a182:	681b      	ldr	r3, [r3, #0]
    a184:	789b      	ldrb	r3, [r3, #2]
    a186:	001a      	movs	r2, r3
    a188:	2317      	movs	r3, #23
    a18a:	18fb      	adds	r3, r7, r3
    a18c:	781b      	ldrb	r3, [r3, #0]
    a18e:	1ad3      	subs	r3, r2, r3
    a190:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    a192:	68fb      	ldr	r3, [r7, #12]
    a194:	681b      	ldr	r3, [r3, #0]
    a196:	7858      	ldrb	r0, [r3, #1]
    a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a19a:	b2db      	uxtb	r3, r3
    a19c:	693a      	ldr	r2, [r7, #16]
    a19e:	6a39      	ldr	r1, [r7, #32]
    a1a0:	4c42      	ldr	r4, [pc, #264]	; (a2ac <f_read+0x290>)
    a1a2:	47a0      	blx	r4
    a1a4:	1e03      	subs	r3, r0, #0
    a1a6:	d009      	beq.n	a1bc <f_read+0x1a0>
					ABORT(fp->fs, FR_DISK_ERR);
    a1a8:	68fb      	ldr	r3, [r7, #12]
    a1aa:	799b      	ldrb	r3, [r3, #6]
    a1ac:	2280      	movs	r2, #128	; 0x80
    a1ae:	4252      	negs	r2, r2
    a1b0:	4313      	orrs	r3, r2
    a1b2:	b2da      	uxtb	r2, r3
    a1b4:	68fb      	ldr	r3, [r7, #12]
    a1b6:	719a      	strb	r2, [r3, #6]
    a1b8:	2301      	movs	r3, #1
    a1ba:	e06c      	b.n	a296 <f_read+0x27a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    a1bc:	68fb      	ldr	r3, [r7, #12]
    a1be:	681b      	ldr	r3, [r3, #0]
    a1c0:	791b      	ldrb	r3, [r3, #4]
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	d018      	beq.n	a1f8 <f_read+0x1dc>
    a1c6:	68fb      	ldr	r3, [r7, #12]
    a1c8:	681b      	ldr	r3, [r3, #0]
    a1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1cc:	693b      	ldr	r3, [r7, #16]
    a1ce:	1ad2      	subs	r2, r2, r3
    a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1d2:	429a      	cmp	r2, r3
    a1d4:	d210      	bcs.n	a1f8 <f_read+0x1dc>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    a1d6:	68fb      	ldr	r3, [r7, #12]
    a1d8:	681b      	ldr	r3, [r3, #0]
    a1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1dc:	693b      	ldr	r3, [r7, #16]
    a1de:	1ad3      	subs	r3, r2, r3
    a1e0:	025b      	lsls	r3, r3, #9
    a1e2:	6a3a      	ldr	r2, [r7, #32]
    a1e4:	18d0      	adds	r0, r2, r3
    a1e6:	68fb      	ldr	r3, [r7, #12]
    a1e8:	681b      	ldr	r3, [r3, #0]
    a1ea:	3330      	adds	r3, #48	; 0x30
    a1ec:	0019      	movs	r1, r3
    a1ee:	2380      	movs	r3, #128	; 0x80
    a1f0:	009b      	lsls	r3, r3, #2
    a1f2:	001a      	movs	r2, r3
    a1f4:	4b2e      	ldr	r3, [pc, #184]	; (a2b0 <f_read+0x294>)
    a1f6:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1fa:	025b      	lsls	r3, r3, #9
    a1fc:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
    a1fe:	e031      	b.n	a264 <f_read+0x248>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a200:	68fb      	ldr	r3, [r7, #12]
    a202:	693a      	ldr	r2, [r7, #16]
    a204:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a206:	68fb      	ldr	r3, [r7, #12]
    a208:	689b      	ldr	r3, [r3, #8]
    a20a:	05db      	lsls	r3, r3, #23
    a20c:	0ddb      	lsrs	r3, r3, #23
    a20e:	2280      	movs	r2, #128	; 0x80
    a210:	0092      	lsls	r2, r2, #2
    a212:	1ad3      	subs	r3, r2, r3
    a214:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
    a216:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a218:	687b      	ldr	r3, [r7, #4]
    a21a:	429a      	cmp	r2, r3
    a21c:	d901      	bls.n	a222 <f_read+0x206>
    a21e:	687b      	ldr	r3, [r7, #4]
    a220:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    a222:	68fb      	ldr	r3, [r7, #12]
    a224:	681a      	ldr	r2, [r3, #0]
    a226:	68fb      	ldr	r3, [r7, #12]
    a228:	699b      	ldr	r3, [r3, #24]
    a22a:	0019      	movs	r1, r3
    a22c:	0010      	movs	r0, r2
    a22e:	4b21      	ldr	r3, [pc, #132]	; (a2b4 <f_read+0x298>)
    a230:	4798      	blx	r3
    a232:	1e03      	subs	r3, r0, #0
    a234:	d009      	beq.n	a24a <f_read+0x22e>
			ABORT(fp->fs, FR_DISK_ERR);
    a236:	68fb      	ldr	r3, [r7, #12]
    a238:	799b      	ldrb	r3, [r3, #6]
    a23a:	2280      	movs	r2, #128	; 0x80
    a23c:	4252      	negs	r2, r2
    a23e:	4313      	orrs	r3, r2
    a240:	b2da      	uxtb	r2, r3
    a242:	68fb      	ldr	r3, [r7, #12]
    a244:	719a      	strb	r2, [r3, #6]
    a246:	2301      	movs	r3, #1
    a248:	e025      	b.n	a296 <f_read+0x27a>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    a24a:	68fb      	ldr	r3, [r7, #12]
    a24c:	681a      	ldr	r2, [r3, #0]
    a24e:	68fb      	ldr	r3, [r7, #12]
    a250:	689b      	ldr	r3, [r3, #8]
    a252:	05db      	lsls	r3, r3, #23
    a254:	0ddb      	lsrs	r3, r3, #23
    a256:	3330      	adds	r3, #48	; 0x30
    a258:	18d1      	adds	r1, r2, r3
    a25a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a25c:	6a3b      	ldr	r3, [r7, #32]
    a25e:	0018      	movs	r0, r3
    a260:	4b13      	ldr	r3, [pc, #76]	; (a2b0 <f_read+0x294>)
    a262:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    a264:	6a3a      	ldr	r2, [r7, #32]
    a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a268:	18d3      	adds	r3, r2, r3
    a26a:	623b      	str	r3, [r7, #32]
    a26c:	68fb      	ldr	r3, [r7, #12]
    a26e:	689a      	ldr	r2, [r3, #8]
    a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a272:	18d2      	adds	r2, r2, r3
    a274:	68fb      	ldr	r3, [r7, #12]
    a276:	609a      	str	r2, [r3, #8]
    a278:	683b      	ldr	r3, [r7, #0]
    a27a:	681a      	ldr	r2, [r3, #0]
    a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a27e:	18d2      	adds	r2, r2, r3
    a280:	683b      	ldr	r3, [r7, #0]
    a282:	601a      	str	r2, [r3, #0]
    a284:	687a      	ldr	r2, [r7, #4]
    a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a288:	1ad3      	subs	r3, r2, r3
    a28a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
    a28c:	687b      	ldr	r3, [r7, #4]
    a28e:	2b00      	cmp	r3, #0
    a290:	d000      	beq.n	a294 <f_read+0x278>
    a292:	e701      	b.n	a098 <f_read+0x7c>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    a294:	2300      	movs	r3, #0
}
    a296:	0018      	movs	r0, r3
    a298:	46bd      	mov	sp, r7
    a29a:	b00d      	add	sp, #52	; 0x34
    a29c:	bd90      	pop	{r4, r7, pc}
    a29e:	46c0      	nop			; (mov r8, r8)
    a2a0:	00009a41 	.word	0x00009a41
    a2a4:	000078dd 	.word	0x000078dd
    a2a8:	000078a5 	.word	0x000078a5
    a2ac:	00007259 	.word	0x00007259
    a2b0:	00007561 	.word	0x00007561
    a2b4:	00007645 	.word	0x00007645

0000a2b8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    a2b8:	b590      	push	{r4, r7, lr}
    a2ba:	b08b      	sub	sp, #44	; 0x2c
    a2bc:	af00      	add	r7, sp, #0
    a2be:	60f8      	str	r0, [r7, #12]
    a2c0:	60b9      	str	r1, [r7, #8]
    a2c2:	607a      	str	r2, [r7, #4]
    a2c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    a2c6:	68bb      	ldr	r3, [r7, #8]
    a2c8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    a2ca:	683b      	ldr	r3, [r7, #0]
    a2cc:	2200      	movs	r2, #0
    a2ce:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    a2d0:	68fb      	ldr	r3, [r7, #12]
    a2d2:	681a      	ldr	r2, [r3, #0]
    a2d4:	68fb      	ldr	r3, [r7, #12]
    a2d6:	889b      	ldrh	r3, [r3, #4]
    a2d8:	2117      	movs	r1, #23
    a2da:	187c      	adds	r4, r7, r1
    a2dc:	0019      	movs	r1, r3
    a2de:	0010      	movs	r0, r2
    a2e0:	4bc3      	ldr	r3, [pc, #780]	; (a5f0 <f_write+0x338>)
    a2e2:	4798      	blx	r3
    a2e4:	0003      	movs	r3, r0
    a2e6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a2e8:	2317      	movs	r3, #23
    a2ea:	18fb      	adds	r3, r7, r3
    a2ec:	781b      	ldrb	r3, [r3, #0]
    a2ee:	2b00      	cmp	r3, #0
    a2f0:	d003      	beq.n	a2fa <f_write+0x42>
    a2f2:	2317      	movs	r3, #23
    a2f4:	18fb      	adds	r3, r7, r3
    a2f6:	781b      	ldrb	r3, [r3, #0]
    a2f8:	e176      	b.n	a5e8 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    a2fa:	68fb      	ldr	r3, [r7, #12]
    a2fc:	799b      	ldrb	r3, [r3, #6]
    a2fe:	b25b      	sxtb	r3, r3
    a300:	2b00      	cmp	r3, #0
    a302:	da01      	bge.n	a308 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a304:	2302      	movs	r3, #2
    a306:	e16f      	b.n	a5e8 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    a308:	68fb      	ldr	r3, [r7, #12]
    a30a:	799b      	ldrb	r3, [r3, #6]
    a30c:	001a      	movs	r2, r3
    a30e:	2302      	movs	r3, #2
    a310:	4013      	ands	r3, r2
    a312:	d101      	bne.n	a318 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a314:	2307      	movs	r3, #7
    a316:	e167      	b.n	a5e8 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    a318:	68fb      	ldr	r3, [r7, #12]
    a31a:	68da      	ldr	r2, [r3, #12]
    a31c:	687b      	ldr	r3, [r7, #4]
    a31e:	18d2      	adds	r2, r2, r3
    a320:	68fb      	ldr	r3, [r7, #12]
    a322:	68db      	ldr	r3, [r3, #12]
    a324:	429a      	cmp	r2, r3
    a326:	d300      	bcc.n	a32a <f_write+0x72>
    a328:	e146      	b.n	a5b8 <f_write+0x300>
    a32a:	2300      	movs	r3, #0
    a32c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    a32e:	e143      	b.n	a5b8 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    a330:	68fb      	ldr	r3, [r7, #12]
    a332:	689b      	ldr	r3, [r3, #8]
    a334:	05db      	lsls	r3, r3, #23
    a336:	0ddb      	lsrs	r3, r3, #23
    a338:	d000      	beq.n	a33c <f_write+0x84>
    a33a:	e0f6      	b.n	a52a <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a33c:	68fb      	ldr	r3, [r7, #12]
    a33e:	689b      	ldr	r3, [r3, #8]
    a340:	0a5b      	lsrs	r3, r3, #9
    a342:	b2da      	uxtb	r2, r3
    a344:	68fb      	ldr	r3, [r7, #12]
    a346:	681b      	ldr	r3, [r3, #0]
    a348:	789b      	ldrb	r3, [r3, #2]
    a34a:	3b01      	subs	r3, #1
    a34c:	b2d9      	uxtb	r1, r3
    a34e:	2316      	movs	r3, #22
    a350:	18fb      	adds	r3, r7, r3
    a352:	400a      	ands	r2, r1
    a354:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    a356:	2316      	movs	r3, #22
    a358:	18fb      	adds	r3, r7, r3
    a35a:	781b      	ldrb	r3, [r3, #0]
    a35c:	2b00      	cmp	r3, #0
    a35e:	d140      	bne.n	a3e2 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    a360:	68fb      	ldr	r3, [r7, #12]
    a362:	689b      	ldr	r3, [r3, #8]
    a364:	2b00      	cmp	r3, #0
    a366:	d111      	bne.n	a38c <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    a368:	68fb      	ldr	r3, [r7, #12]
    a36a:	691b      	ldr	r3, [r3, #16]
    a36c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a370:	2b00      	cmp	r3, #0
    a372:	d115      	bne.n	a3a0 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    a374:	68fb      	ldr	r3, [r7, #12]
    a376:	681b      	ldr	r3, [r3, #0]
    a378:	2100      	movs	r1, #0
    a37a:	0018      	movs	r0, r3
    a37c:	4b9d      	ldr	r3, [pc, #628]	; (a5f4 <f_write+0x33c>)
    a37e:	4798      	blx	r3
    a380:	0003      	movs	r3, r0
    a382:	627b      	str	r3, [r7, #36]	; 0x24
    a384:	68fb      	ldr	r3, [r7, #12]
    a386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a388:	611a      	str	r2, [r3, #16]
    a38a:	e009      	b.n	a3a0 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    a38c:	68fb      	ldr	r3, [r7, #12]
    a38e:	681a      	ldr	r2, [r3, #0]
    a390:	68fb      	ldr	r3, [r7, #12]
    a392:	695b      	ldr	r3, [r3, #20]
    a394:	0019      	movs	r1, r3
    a396:	0010      	movs	r0, r2
    a398:	4b96      	ldr	r3, [pc, #600]	; (a5f4 <f_write+0x33c>)
    a39a:	4798      	blx	r3
    a39c:	0003      	movs	r3, r0
    a39e:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a3a2:	2b00      	cmp	r3, #0
    a3a4:	d100      	bne.n	a3a8 <f_write+0xf0>
    a3a6:	e10c      	b.n	a5c2 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a3aa:	2b01      	cmp	r3, #1
    a3ac:	d109      	bne.n	a3c2 <f_write+0x10a>
    a3ae:	68fb      	ldr	r3, [r7, #12]
    a3b0:	799b      	ldrb	r3, [r3, #6]
    a3b2:	2280      	movs	r2, #128	; 0x80
    a3b4:	4252      	negs	r2, r2
    a3b6:	4313      	orrs	r3, r2
    a3b8:	b2da      	uxtb	r2, r3
    a3ba:	68fb      	ldr	r3, [r7, #12]
    a3bc:	719a      	strb	r2, [r3, #6]
    a3be:	2302      	movs	r3, #2
    a3c0:	e112      	b.n	a5e8 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a3c4:	3301      	adds	r3, #1
    a3c6:	d109      	bne.n	a3dc <f_write+0x124>
    a3c8:	68fb      	ldr	r3, [r7, #12]
    a3ca:	799b      	ldrb	r3, [r3, #6]
    a3cc:	2280      	movs	r2, #128	; 0x80
    a3ce:	4252      	negs	r2, r2
    a3d0:	4313      	orrs	r3, r2
    a3d2:	b2da      	uxtb	r2, r3
    a3d4:	68fb      	ldr	r3, [r7, #12]
    a3d6:	719a      	strb	r2, [r3, #6]
    a3d8:	2301      	movs	r3, #1
    a3da:	e105      	b.n	a5e8 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    a3dc:	68fb      	ldr	r3, [r7, #12]
    a3de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a3e0:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    a3e2:	68fb      	ldr	r3, [r7, #12]
    a3e4:	681b      	ldr	r3, [r3, #0]
    a3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a3e8:	68fb      	ldr	r3, [r7, #12]
    a3ea:	699b      	ldr	r3, [r3, #24]
    a3ec:	429a      	cmp	r2, r3
    a3ee:	d111      	bne.n	a414 <f_write+0x15c>
    a3f0:	68fb      	ldr	r3, [r7, #12]
    a3f2:	681b      	ldr	r3, [r3, #0]
    a3f4:	2100      	movs	r1, #0
    a3f6:	0018      	movs	r0, r3
    a3f8:	4b7f      	ldr	r3, [pc, #508]	; (a5f8 <f_write+0x340>)
    a3fa:	4798      	blx	r3
    a3fc:	1e03      	subs	r3, r0, #0
    a3fe:	d009      	beq.n	a414 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    a400:	68fb      	ldr	r3, [r7, #12]
    a402:	799b      	ldrb	r3, [r3, #6]
    a404:	2280      	movs	r2, #128	; 0x80
    a406:	4252      	negs	r2, r2
    a408:	4313      	orrs	r3, r2
    a40a:	b2da      	uxtb	r2, r3
    a40c:	68fb      	ldr	r3, [r7, #12]
    a40e:	719a      	strb	r2, [r3, #6]
    a410:	2301      	movs	r3, #1
    a412:	e0e9      	b.n	a5e8 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a414:	68fb      	ldr	r3, [r7, #12]
    a416:	681a      	ldr	r2, [r3, #0]
    a418:	68fb      	ldr	r3, [r7, #12]
    a41a:	695b      	ldr	r3, [r3, #20]
    a41c:	0019      	movs	r1, r3
    a41e:	0010      	movs	r0, r2
    a420:	4b76      	ldr	r3, [pc, #472]	; (a5fc <f_write+0x344>)
    a422:	4798      	blx	r3
    a424:	0003      	movs	r3, r0
    a426:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a428:	693b      	ldr	r3, [r7, #16]
    a42a:	2b00      	cmp	r3, #0
    a42c:	d109      	bne.n	a442 <f_write+0x18a>
    a42e:	68fb      	ldr	r3, [r7, #12]
    a430:	799b      	ldrb	r3, [r3, #6]
    a432:	2280      	movs	r2, #128	; 0x80
    a434:	4252      	negs	r2, r2
    a436:	4313      	orrs	r3, r2
    a438:	b2da      	uxtb	r2, r3
    a43a:	68fb      	ldr	r3, [r7, #12]
    a43c:	719a      	strb	r2, [r3, #6]
    a43e:	2302      	movs	r3, #2
    a440:	e0d2      	b.n	a5e8 <f_write+0x330>
			sect += csect;
    a442:	2316      	movs	r3, #22
    a444:	18fb      	adds	r3, r7, r3
    a446:	781b      	ldrb	r3, [r3, #0]
    a448:	693a      	ldr	r2, [r7, #16]
    a44a:	18d3      	adds	r3, r2, r3
    a44c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    a44e:	687b      	ldr	r3, [r7, #4]
    a450:	0a5b      	lsrs	r3, r3, #9
    a452:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    a454:	69fb      	ldr	r3, [r7, #28]
    a456:	2b00      	cmp	r3, #0
    a458:	d048      	beq.n	a4ec <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a45a:	2316      	movs	r3, #22
    a45c:	18fb      	adds	r3, r7, r3
    a45e:	781a      	ldrb	r2, [r3, #0]
    a460:	69fb      	ldr	r3, [r7, #28]
    a462:	18d2      	adds	r2, r2, r3
    a464:	68fb      	ldr	r3, [r7, #12]
    a466:	681b      	ldr	r3, [r3, #0]
    a468:	789b      	ldrb	r3, [r3, #2]
    a46a:	429a      	cmp	r2, r3
    a46c:	d908      	bls.n	a480 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    a46e:	68fb      	ldr	r3, [r7, #12]
    a470:	681b      	ldr	r3, [r3, #0]
    a472:	789b      	ldrb	r3, [r3, #2]
    a474:	001a      	movs	r2, r3
    a476:	2316      	movs	r3, #22
    a478:	18fb      	adds	r3, r7, r3
    a47a:	781b      	ldrb	r3, [r3, #0]
    a47c:	1ad3      	subs	r3, r2, r3
    a47e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    a480:	68fb      	ldr	r3, [r7, #12]
    a482:	681b      	ldr	r3, [r3, #0]
    a484:	7858      	ldrb	r0, [r3, #1]
    a486:	69fb      	ldr	r3, [r7, #28]
    a488:	b2db      	uxtb	r3, r3
    a48a:	693a      	ldr	r2, [r7, #16]
    a48c:	69b9      	ldr	r1, [r7, #24]
    a48e:	4c5c      	ldr	r4, [pc, #368]	; (a600 <f_write+0x348>)
    a490:	47a0      	blx	r4
    a492:	1e03      	subs	r3, r0, #0
    a494:	d009      	beq.n	a4aa <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    a496:	68fb      	ldr	r3, [r7, #12]
    a498:	799b      	ldrb	r3, [r3, #6]
    a49a:	2280      	movs	r2, #128	; 0x80
    a49c:	4252      	negs	r2, r2
    a49e:	4313      	orrs	r3, r2
    a4a0:	b2da      	uxtb	r2, r3
    a4a2:	68fb      	ldr	r3, [r7, #12]
    a4a4:	719a      	strb	r2, [r3, #6]
    a4a6:	2301      	movs	r3, #1
    a4a8:	e09e      	b.n	a5e8 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    a4aa:	68fb      	ldr	r3, [r7, #12]
    a4ac:	681b      	ldr	r3, [r3, #0]
    a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a4b0:	693b      	ldr	r3, [r7, #16]
    a4b2:	1ad2      	subs	r2, r2, r3
    a4b4:	69fb      	ldr	r3, [r7, #28]
    a4b6:	429a      	cmp	r2, r3
    a4b8:	d214      	bcs.n	a4e4 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    a4ba:	68fb      	ldr	r3, [r7, #12]
    a4bc:	681b      	ldr	r3, [r3, #0]
    a4be:	3330      	adds	r3, #48	; 0x30
    a4c0:	0018      	movs	r0, r3
    a4c2:	68fb      	ldr	r3, [r7, #12]
    a4c4:	681b      	ldr	r3, [r3, #0]
    a4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a4c8:	693b      	ldr	r3, [r7, #16]
    a4ca:	1ad3      	subs	r3, r2, r3
    a4cc:	025b      	lsls	r3, r3, #9
    a4ce:	69ba      	ldr	r2, [r7, #24]
    a4d0:	18d1      	adds	r1, r2, r3
    a4d2:	2380      	movs	r3, #128	; 0x80
    a4d4:	009b      	lsls	r3, r3, #2
    a4d6:	001a      	movs	r2, r3
    a4d8:	4b4a      	ldr	r3, [pc, #296]	; (a604 <f_write+0x34c>)
    a4da:	4798      	blx	r3
					fp->fs->wflag = 0;
    a4dc:	68fb      	ldr	r3, [r7, #12]
    a4de:	681b      	ldr	r3, [r3, #0]
    a4e0:	2200      	movs	r2, #0
    a4e2:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    a4e4:	69fb      	ldr	r3, [r7, #28]
    a4e6:	025b      	lsls	r3, r3, #9
    a4e8:	623b      	str	r3, [r7, #32]
				continue;
    a4ea:	e051      	b.n	a590 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    a4ec:	68fb      	ldr	r3, [r7, #12]
    a4ee:	689a      	ldr	r2, [r3, #8]
    a4f0:	68fb      	ldr	r3, [r7, #12]
    a4f2:	68db      	ldr	r3, [r3, #12]
    a4f4:	429a      	cmp	r2, r3
    a4f6:	d315      	bcc.n	a524 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    a4f8:	68fb      	ldr	r3, [r7, #12]
    a4fa:	681b      	ldr	r3, [r3, #0]
    a4fc:	2100      	movs	r1, #0
    a4fe:	0018      	movs	r0, r3
    a500:	4b3d      	ldr	r3, [pc, #244]	; (a5f8 <f_write+0x340>)
    a502:	4798      	blx	r3
    a504:	1e03      	subs	r3, r0, #0
    a506:	d009      	beq.n	a51c <f_write+0x264>
    a508:	68fb      	ldr	r3, [r7, #12]
    a50a:	799b      	ldrb	r3, [r3, #6]
    a50c:	2280      	movs	r2, #128	; 0x80
    a50e:	4252      	negs	r2, r2
    a510:	4313      	orrs	r3, r2
    a512:	b2da      	uxtb	r2, r3
    a514:	68fb      	ldr	r3, [r7, #12]
    a516:	719a      	strb	r2, [r3, #6]
    a518:	2301      	movs	r3, #1
    a51a:	e065      	b.n	a5e8 <f_write+0x330>
				fp->fs->winsect = sect;
    a51c:	68fb      	ldr	r3, [r7, #12]
    a51e:	681b      	ldr	r3, [r3, #0]
    a520:	693a      	ldr	r2, [r7, #16]
    a522:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a524:	68fb      	ldr	r3, [r7, #12]
    a526:	693a      	ldr	r2, [r7, #16]
    a528:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    a52a:	68fb      	ldr	r3, [r7, #12]
    a52c:	689b      	ldr	r3, [r3, #8]
    a52e:	05db      	lsls	r3, r3, #23
    a530:	0ddb      	lsrs	r3, r3, #23
    a532:	2280      	movs	r2, #128	; 0x80
    a534:	0092      	lsls	r2, r2, #2
    a536:	1ad3      	subs	r3, r2, r3
    a538:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    a53a:	6a3a      	ldr	r2, [r7, #32]
    a53c:	687b      	ldr	r3, [r7, #4]
    a53e:	429a      	cmp	r2, r3
    a540:	d901      	bls.n	a546 <f_write+0x28e>
    a542:	687b      	ldr	r3, [r7, #4]
    a544:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    a546:	68fb      	ldr	r3, [r7, #12]
    a548:	681a      	ldr	r2, [r3, #0]
    a54a:	68fb      	ldr	r3, [r7, #12]
    a54c:	699b      	ldr	r3, [r3, #24]
    a54e:	0019      	movs	r1, r3
    a550:	0010      	movs	r0, r2
    a552:	4b29      	ldr	r3, [pc, #164]	; (a5f8 <f_write+0x340>)
    a554:	4798      	blx	r3
    a556:	1e03      	subs	r3, r0, #0
    a558:	d009      	beq.n	a56e <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    a55a:	68fb      	ldr	r3, [r7, #12]
    a55c:	799b      	ldrb	r3, [r3, #6]
    a55e:	2280      	movs	r2, #128	; 0x80
    a560:	4252      	negs	r2, r2
    a562:	4313      	orrs	r3, r2
    a564:	b2da      	uxtb	r2, r3
    a566:	68fb      	ldr	r3, [r7, #12]
    a568:	719a      	strb	r2, [r3, #6]
    a56a:	2301      	movs	r3, #1
    a56c:	e03c      	b.n	a5e8 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    a56e:	68fb      	ldr	r3, [r7, #12]
    a570:	681a      	ldr	r2, [r3, #0]
    a572:	68fb      	ldr	r3, [r7, #12]
    a574:	689b      	ldr	r3, [r3, #8]
    a576:	05db      	lsls	r3, r3, #23
    a578:	0ddb      	lsrs	r3, r3, #23
    a57a:	3330      	adds	r3, #48	; 0x30
    a57c:	18d3      	adds	r3, r2, r3
    a57e:	6a3a      	ldr	r2, [r7, #32]
    a580:	69b9      	ldr	r1, [r7, #24]
    a582:	0018      	movs	r0, r3
    a584:	4b1f      	ldr	r3, [pc, #124]	; (a604 <f_write+0x34c>)
    a586:	4798      	blx	r3
		fp->fs->wflag = 1;
    a588:	68fb      	ldr	r3, [r7, #12]
    a58a:	681b      	ldr	r3, [r3, #0]
    a58c:	2201      	movs	r2, #1
    a58e:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    a590:	69ba      	ldr	r2, [r7, #24]
    a592:	6a3b      	ldr	r3, [r7, #32]
    a594:	18d3      	adds	r3, r2, r3
    a596:	61bb      	str	r3, [r7, #24]
    a598:	68fb      	ldr	r3, [r7, #12]
    a59a:	689a      	ldr	r2, [r3, #8]
    a59c:	6a3b      	ldr	r3, [r7, #32]
    a59e:	18d2      	adds	r2, r2, r3
    a5a0:	68fb      	ldr	r3, [r7, #12]
    a5a2:	609a      	str	r2, [r3, #8]
    a5a4:	683b      	ldr	r3, [r7, #0]
    a5a6:	681a      	ldr	r2, [r3, #0]
    a5a8:	6a3b      	ldr	r3, [r7, #32]
    a5aa:	18d2      	adds	r2, r2, r3
    a5ac:	683b      	ldr	r3, [r7, #0]
    a5ae:	601a      	str	r2, [r3, #0]
    a5b0:	687a      	ldr	r2, [r7, #4]
    a5b2:	6a3b      	ldr	r3, [r7, #32]
    a5b4:	1ad3      	subs	r3, r2, r3
    a5b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	2b00      	cmp	r3, #0
    a5bc:	d000      	beq.n	a5c0 <f_write+0x308>
    a5be:	e6b7      	b.n	a330 <f_write+0x78>
    a5c0:	e000      	b.n	a5c4 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a5c2:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    a5c4:	68fb      	ldr	r3, [r7, #12]
    a5c6:	689a      	ldr	r2, [r3, #8]
    a5c8:	68fb      	ldr	r3, [r7, #12]
    a5ca:	68db      	ldr	r3, [r3, #12]
    a5cc:	429a      	cmp	r2, r3
    a5ce:	d903      	bls.n	a5d8 <f_write+0x320>
    a5d0:	68fb      	ldr	r3, [r7, #12]
    a5d2:	689a      	ldr	r2, [r3, #8]
    a5d4:	68fb      	ldr	r3, [r7, #12]
    a5d6:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    a5d8:	68fb      	ldr	r3, [r7, #12]
    a5da:	799b      	ldrb	r3, [r3, #6]
    a5dc:	2220      	movs	r2, #32
    a5de:	4313      	orrs	r3, r2
    a5e0:	b2da      	uxtb	r2, r3
    a5e2:	68fb      	ldr	r3, [r7, #12]
    a5e4:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    a5e6:	2300      	movs	r3, #0
}
    a5e8:	0018      	movs	r0, r3
    a5ea:	46bd      	mov	sp, r7
    a5ec:	b00b      	add	sp, #44	; 0x2c
    a5ee:	bd90      	pop	{r4, r7, pc}
    a5f0:	00009a41 	.word	0x00009a41
    a5f4:	00007d4d 	.word	0x00007d4d
    a5f8:	00007645 	.word	0x00007645
    a5fc:	000078a5 	.word	0x000078a5
    a600:	00007331 	.word	0x00007331
    a604:	00007561 	.word	0x00007561

0000a608 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    a608:	b590      	push	{r4, r7, lr}
    a60a:	b087      	sub	sp, #28
    a60c:	af00      	add	r7, sp, #0
    a60e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a610:	687b      	ldr	r3, [r7, #4]
    a612:	681a      	ldr	r2, [r3, #0]
    a614:	687b      	ldr	r3, [r7, #4]
    a616:	889b      	ldrh	r3, [r3, #4]
    a618:	2117      	movs	r1, #23
    a61a:	187c      	adds	r4, r7, r1
    a61c:	0019      	movs	r1, r3
    a61e:	0010      	movs	r0, r2
    a620:	4b55      	ldr	r3, [pc, #340]	; (a778 <f_sync+0x170>)
    a622:	4798      	blx	r3
    a624:	0003      	movs	r3, r0
    a626:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a628:	2317      	movs	r3, #23
    a62a:	18fb      	adds	r3, r7, r3
    a62c:	781b      	ldrb	r3, [r3, #0]
    a62e:	2b00      	cmp	r3, #0
    a630:	d000      	beq.n	a634 <f_sync+0x2c>
    a632:	e09a      	b.n	a76a <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    a634:	687b      	ldr	r3, [r7, #4]
    a636:	799b      	ldrb	r3, [r3, #6]
    a638:	001a      	movs	r2, r3
    a63a:	2320      	movs	r3, #32
    a63c:	4013      	ands	r3, r2
    a63e:	d100      	bne.n	a642 <f_sync+0x3a>
    a640:	e093      	b.n	a76a <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    a642:	687b      	ldr	r3, [r7, #4]
    a644:	681a      	ldr	r2, [r3, #0]
    a646:	687b      	ldr	r3, [r7, #4]
    a648:	69db      	ldr	r3, [r3, #28]
    a64a:	2117      	movs	r1, #23
    a64c:	187c      	adds	r4, r7, r1
    a64e:	0019      	movs	r1, r3
    a650:	0010      	movs	r0, r2
    a652:	4b4a      	ldr	r3, [pc, #296]	; (a77c <f_sync+0x174>)
    a654:	4798      	blx	r3
    a656:	0003      	movs	r3, r0
    a658:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    a65a:	2317      	movs	r3, #23
    a65c:	18fb      	adds	r3, r7, r3
    a65e:	781b      	ldrb	r3, [r3, #0]
    a660:	2b00      	cmp	r3, #0
    a662:	d000      	beq.n	a666 <f_sync+0x5e>
    a664:	e081      	b.n	a76a <f_sync+0x162>
				dir = fp->dir_ptr;
    a666:	687b      	ldr	r3, [r7, #4]
    a668:	6a1b      	ldr	r3, [r3, #32]
    a66a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    a66c:	693b      	ldr	r3, [r7, #16]
    a66e:	330b      	adds	r3, #11
    a670:	693a      	ldr	r2, [r7, #16]
    a672:	320b      	adds	r2, #11
    a674:	7812      	ldrb	r2, [r2, #0]
    a676:	2120      	movs	r1, #32
    a678:	430a      	orrs	r2, r1
    a67a:	b2d2      	uxtb	r2, r2
    a67c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    a67e:	693b      	ldr	r3, [r7, #16]
    a680:	331c      	adds	r3, #28
    a682:	001a      	movs	r2, r3
    a684:	687b      	ldr	r3, [r7, #4]
    a686:	68db      	ldr	r3, [r3, #12]
    a688:	b2db      	uxtb	r3, r3
    a68a:	7013      	strb	r3, [r2, #0]
    a68c:	693b      	ldr	r3, [r7, #16]
    a68e:	331d      	adds	r3, #29
    a690:	001a      	movs	r2, r3
    a692:	687b      	ldr	r3, [r7, #4]
    a694:	68db      	ldr	r3, [r3, #12]
    a696:	b29b      	uxth	r3, r3
    a698:	0a1b      	lsrs	r3, r3, #8
    a69a:	b29b      	uxth	r3, r3
    a69c:	b2db      	uxtb	r3, r3
    a69e:	7013      	strb	r3, [r2, #0]
    a6a0:	693b      	ldr	r3, [r7, #16]
    a6a2:	331e      	adds	r3, #30
    a6a4:	001a      	movs	r2, r3
    a6a6:	687b      	ldr	r3, [r7, #4]
    a6a8:	68db      	ldr	r3, [r3, #12]
    a6aa:	0c1b      	lsrs	r3, r3, #16
    a6ac:	b2db      	uxtb	r3, r3
    a6ae:	7013      	strb	r3, [r2, #0]
    a6b0:	693b      	ldr	r3, [r7, #16]
    a6b2:	331f      	adds	r3, #31
    a6b4:	001a      	movs	r2, r3
    a6b6:	687b      	ldr	r3, [r7, #4]
    a6b8:	68db      	ldr	r3, [r3, #12]
    a6ba:	0e1b      	lsrs	r3, r3, #24
    a6bc:	b2db      	uxtb	r3, r3
    a6be:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    a6c0:	693b      	ldr	r3, [r7, #16]
    a6c2:	331a      	adds	r3, #26
    a6c4:	001a      	movs	r2, r3
    a6c6:	687b      	ldr	r3, [r7, #4]
    a6c8:	691b      	ldr	r3, [r3, #16]
    a6ca:	b2db      	uxtb	r3, r3
    a6cc:	7013      	strb	r3, [r2, #0]
    a6ce:	693b      	ldr	r3, [r7, #16]
    a6d0:	331b      	adds	r3, #27
    a6d2:	001a      	movs	r2, r3
    a6d4:	687b      	ldr	r3, [r7, #4]
    a6d6:	691b      	ldr	r3, [r3, #16]
    a6d8:	b29b      	uxth	r3, r3
    a6da:	0a1b      	lsrs	r3, r3, #8
    a6dc:	b29b      	uxth	r3, r3
    a6de:	b2db      	uxtb	r3, r3
    a6e0:	7013      	strb	r3, [r2, #0]
    a6e2:	693b      	ldr	r3, [r7, #16]
    a6e4:	3314      	adds	r3, #20
    a6e6:	001a      	movs	r2, r3
    a6e8:	687b      	ldr	r3, [r7, #4]
    a6ea:	691b      	ldr	r3, [r3, #16]
    a6ec:	0c1b      	lsrs	r3, r3, #16
    a6ee:	b2db      	uxtb	r3, r3
    a6f0:	7013      	strb	r3, [r2, #0]
    a6f2:	693b      	ldr	r3, [r7, #16]
    a6f4:	3315      	adds	r3, #21
    a6f6:	001a      	movs	r2, r3
    a6f8:	687b      	ldr	r3, [r7, #4]
    a6fa:	691b      	ldr	r3, [r3, #16]
    a6fc:	0c1b      	lsrs	r3, r3, #16
    a6fe:	b29b      	uxth	r3, r3
    a700:	0a1b      	lsrs	r3, r3, #8
    a702:	b29b      	uxth	r3, r3
    a704:	b2db      	uxtb	r3, r3
    a706:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    a708:	4b1d      	ldr	r3, [pc, #116]	; (a780 <f_sync+0x178>)
    a70a:	4798      	blx	r3
    a70c:	0003      	movs	r3, r0
    a70e:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    a710:	693b      	ldr	r3, [r7, #16]
    a712:	3316      	adds	r3, #22
    a714:	68fa      	ldr	r2, [r7, #12]
    a716:	b2d2      	uxtb	r2, r2
    a718:	701a      	strb	r2, [r3, #0]
    a71a:	693b      	ldr	r3, [r7, #16]
    a71c:	3317      	adds	r3, #23
    a71e:	68fa      	ldr	r2, [r7, #12]
    a720:	b292      	uxth	r2, r2
    a722:	0a12      	lsrs	r2, r2, #8
    a724:	b292      	uxth	r2, r2
    a726:	b2d2      	uxtb	r2, r2
    a728:	701a      	strb	r2, [r3, #0]
    a72a:	693b      	ldr	r3, [r7, #16]
    a72c:	3318      	adds	r3, #24
    a72e:	68fa      	ldr	r2, [r7, #12]
    a730:	0c12      	lsrs	r2, r2, #16
    a732:	b2d2      	uxtb	r2, r2
    a734:	701a      	strb	r2, [r3, #0]
    a736:	693b      	ldr	r3, [r7, #16]
    a738:	3319      	adds	r3, #25
    a73a:	68fa      	ldr	r2, [r7, #12]
    a73c:	0e12      	lsrs	r2, r2, #24
    a73e:	b2d2      	uxtb	r2, r2
    a740:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    a742:	687b      	ldr	r3, [r7, #4]
    a744:	799b      	ldrb	r3, [r3, #6]
    a746:	2220      	movs	r2, #32
    a748:	4393      	bics	r3, r2
    a74a:	b2da      	uxtb	r2, r3
    a74c:	687b      	ldr	r3, [r7, #4]
    a74e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    a750:	687b      	ldr	r3, [r7, #4]
    a752:	681b      	ldr	r3, [r3, #0]
    a754:	2201      	movs	r2, #1
    a756:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    a758:	687b      	ldr	r3, [r7, #4]
    a75a:	681b      	ldr	r3, [r3, #0]
    a75c:	2217      	movs	r2, #23
    a75e:	18bc      	adds	r4, r7, r2
    a760:	0018      	movs	r0, r3
    a762:	4b08      	ldr	r3, [pc, #32]	; (a784 <f_sync+0x17c>)
    a764:	4798      	blx	r3
    a766:	0003      	movs	r3, r0
    a768:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    a76a:	2317      	movs	r3, #23
    a76c:	18fb      	adds	r3, r7, r3
    a76e:	781b      	ldrb	r3, [r3, #0]
}
    a770:	0018      	movs	r0, r3
    a772:	46bd      	mov	sp, r7
    a774:	b007      	add	sp, #28
    a776:	bd90      	pop	{r4, r7, pc}
    a778:	00009a41 	.word	0x00009a41
    a77c:	00007645 	.word	0x00007645
    a780:	00007501 	.word	0x00007501
    a784:	0000770d 	.word	0x0000770d

0000a788 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    a788:	b590      	push	{r4, r7, lr}
    a78a:	b085      	sub	sp, #20
    a78c:	af00      	add	r7, sp, #0
    a78e:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    a790:	230f      	movs	r3, #15
    a792:	18fc      	adds	r4, r7, r3
    a794:	687b      	ldr	r3, [r7, #4]
    a796:	0018      	movs	r0, r3
    a798:	4b09      	ldr	r3, [pc, #36]	; (a7c0 <f_close+0x38>)
    a79a:	4798      	blx	r3
    a79c:	0003      	movs	r3, r0
    a79e:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    a7a0:	230f      	movs	r3, #15
    a7a2:	18fb      	adds	r3, r7, r3
    a7a4:	781b      	ldrb	r3, [r3, #0]
    a7a6:	2b00      	cmp	r3, #0
    a7a8:	d102      	bne.n	a7b0 <f_close+0x28>
    a7aa:	687b      	ldr	r3, [r7, #4]
    a7ac:	2200      	movs	r2, #0
    a7ae:	601a      	str	r2, [r3, #0]
	return res;
    a7b0:	230f      	movs	r3, #15
    a7b2:	18fb      	adds	r3, r7, r3
    a7b4:	781b      	ldrb	r3, [r3, #0]
#endif
}
    a7b6:	0018      	movs	r0, r3
    a7b8:	46bd      	mov	sp, r7
    a7ba:	b005      	add	sp, #20
    a7bc:	bd90      	pop	{r4, r7, pc}
    a7be:	46c0      	nop			; (mov r8, r8)
    a7c0:	0000a609 	.word	0x0000a609

0000a7c4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    a7c4:	b590      	push	{r4, r7, lr}
    a7c6:	4c8d      	ldr	r4, [pc, #564]	; (a9fc <f_unlink+0x238>)
    a7c8:	44a5      	add	sp, r4
    a7ca:	af00      	add	r7, sp, #0
    a7cc:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    a7ce:	4b8c      	ldr	r3, [pc, #560]	; (aa00 <f_unlink+0x23c>)
    a7d0:	18fc      	adds	r4, r7, r3
    a7d2:	238e      	movs	r3, #142	; 0x8e
    a7d4:	009b      	lsls	r3, r3, #2
    a7d6:	18f9      	adds	r1, r7, r3
    a7d8:	1d3b      	adds	r3, r7, #4
    a7da:	2201      	movs	r2, #1
    a7dc:	0018      	movs	r0, r3
    a7de:	4b89      	ldr	r3, [pc, #548]	; (aa04 <f_unlink+0x240>)
    a7e0:	4798      	blx	r3
    a7e2:	0003      	movs	r3, r0
    a7e4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a7e6:	4b86      	ldr	r3, [pc, #536]	; (aa00 <f_unlink+0x23c>)
    a7e8:	18fb      	adds	r3, r7, r3
    a7ea:	781b      	ldrb	r3, [r3, #0]
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d000      	beq.n	a7f2 <f_unlink+0x2e>
    a7f0:	e0fb      	b.n	a9ea <f_unlink+0x226>
		INIT_BUF(dj);
    a7f2:	238e      	movs	r3, #142	; 0x8e
    a7f4:	009b      	lsls	r3, r3, #2
    a7f6:	18fb      	adds	r3, r7, r3
    a7f8:	2282      	movs	r2, #130	; 0x82
    a7fa:	0092      	lsls	r2, r2, #2
    a7fc:	18ba      	adds	r2, r7, r2
    a7fe:	619a      	str	r2, [r3, #24]
    a800:	238e      	movs	r3, #142	; 0x8e
    a802:	009b      	lsls	r3, r3, #2
    a804:	18fb      	adds	r3, r7, r3
    a806:	2208      	movs	r2, #8
    a808:	18ba      	adds	r2, r7, r2
    a80a:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);		/* Follow the file path */
    a80c:	687a      	ldr	r2, [r7, #4]
    a80e:	4b7c      	ldr	r3, [pc, #496]	; (aa00 <f_unlink+0x23c>)
    a810:	18fc      	adds	r4, r7, r3
    a812:	238e      	movs	r3, #142	; 0x8e
    a814:	009b      	lsls	r3, r3, #2
    a816:	18fb      	adds	r3, r7, r3
    a818:	0011      	movs	r1, r2
    a81a:	0018      	movs	r0, r3
    a81c:	4b7a      	ldr	r3, [pc, #488]	; (aa08 <f_unlink+0x244>)
    a81e:	4798      	blx	r3
    a820:	0003      	movs	r3, r0
    a822:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    a824:	4b76      	ldr	r3, [pc, #472]	; (aa00 <f_unlink+0x23c>)
    a826:	18fb      	adds	r3, r7, r3
    a828:	781b      	ldrb	r3, [r3, #0]
    a82a:	2b00      	cmp	r3, #0
    a82c:	d000      	beq.n	a830 <f_unlink+0x6c>
    a82e:	e0dc      	b.n	a9ea <f_unlink+0x226>
			dir = dj.dir;
    a830:	238e      	movs	r3, #142	; 0x8e
    a832:	009b      	lsls	r3, r3, #2
    a834:	18fb      	adds	r3, r7, r3
    a836:	695b      	ldr	r3, [r3, #20]
    a838:	2298      	movs	r2, #152	; 0x98
    a83a:	0092      	lsls	r2, r2, #2
    a83c:	18ba      	adds	r2, r7, r2
    a83e:	6013      	str	r3, [r2, #0]
			if (!dir) {
    a840:	2398      	movs	r3, #152	; 0x98
    a842:	009b      	lsls	r3, r3, #2
    a844:	18fb      	adds	r3, r7, r3
    a846:	681b      	ldr	r3, [r3, #0]
    a848:	2b00      	cmp	r3, #0
    a84a:	d104      	bne.n	a856 <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    a84c:	4b6c      	ldr	r3, [pc, #432]	; (aa00 <f_unlink+0x23c>)
    a84e:	18fb      	adds	r3, r7, r3
    a850:	2206      	movs	r2, #6
    a852:	701a      	strb	r2, [r3, #0]
    a854:	e00d      	b.n	a872 <f_unlink+0xae>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    a856:	2398      	movs	r3, #152	; 0x98
    a858:	009b      	lsls	r3, r3, #2
    a85a:	18fb      	adds	r3, r7, r3
    a85c:	681b      	ldr	r3, [r3, #0]
    a85e:	330b      	adds	r3, #11
    a860:	781b      	ldrb	r3, [r3, #0]
    a862:	001a      	movs	r2, r3
    a864:	2301      	movs	r3, #1
    a866:	4013      	ands	r3, r2
    a868:	d003      	beq.n	a872 <f_unlink+0xae>
					res = FR_DENIED;		/* Cannot remove R/O object */
    a86a:	4b65      	ldr	r3, [pc, #404]	; (aa00 <f_unlink+0x23c>)
    a86c:	18fb      	adds	r3, r7, r3
    a86e:	2207      	movs	r2, #7
    a870:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
    a872:	2398      	movs	r3, #152	; 0x98
    a874:	009b      	lsls	r3, r3, #2
    a876:	18fb      	adds	r3, r7, r3
    a878:	681b      	ldr	r3, [r3, #0]
    a87a:	3315      	adds	r3, #21
    a87c:	781b      	ldrb	r3, [r3, #0]
    a87e:	021b      	lsls	r3, r3, #8
    a880:	b21a      	sxth	r2, r3
    a882:	2398      	movs	r3, #152	; 0x98
    a884:	009b      	lsls	r3, r3, #2
    a886:	18fb      	adds	r3, r7, r3
    a888:	681b      	ldr	r3, [r3, #0]
    a88a:	3314      	adds	r3, #20
    a88c:	781b      	ldrb	r3, [r3, #0]
    a88e:	b21b      	sxth	r3, r3
    a890:	4313      	orrs	r3, r2
    a892:	b21b      	sxth	r3, r3
    a894:	b29b      	uxth	r3, r3
    a896:	041b      	lsls	r3, r3, #16
    a898:	2298      	movs	r2, #152	; 0x98
    a89a:	0092      	lsls	r2, r2, #2
    a89c:	18ba      	adds	r2, r7, r2
    a89e:	6812      	ldr	r2, [r2, #0]
    a8a0:	321b      	adds	r2, #27
    a8a2:	7812      	ldrb	r2, [r2, #0]
    a8a4:	0212      	lsls	r2, r2, #8
    a8a6:	b211      	sxth	r1, r2
    a8a8:	2298      	movs	r2, #152	; 0x98
    a8aa:	0092      	lsls	r2, r2, #2
    a8ac:	18ba      	adds	r2, r7, r2
    a8ae:	6812      	ldr	r2, [r2, #0]
    a8b0:	321a      	adds	r2, #26
    a8b2:	7812      	ldrb	r2, [r2, #0]
    a8b4:	b212      	sxth	r2, r2
    a8b6:	430a      	orrs	r2, r1
    a8b8:	b212      	sxth	r2, r2
    a8ba:	b292      	uxth	r2, r2
    a8bc:	4313      	orrs	r3, r2
    a8be:	2297      	movs	r2, #151	; 0x97
    a8c0:	0092      	lsls	r2, r2, #2
    a8c2:	18ba      	adds	r2, r7, r2
    a8c4:	6013      	str	r3, [r2, #0]
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    a8c6:	4b4e      	ldr	r3, [pc, #312]	; (aa00 <f_unlink+0x23c>)
    a8c8:	18fb      	adds	r3, r7, r3
    a8ca:	781b      	ldrb	r3, [r3, #0]
    a8cc:	2b00      	cmp	r3, #0
    a8ce:	d152      	bne.n	a976 <f_unlink+0x1b2>
    a8d0:	2398      	movs	r3, #152	; 0x98
    a8d2:	009b      	lsls	r3, r3, #2
    a8d4:	18fb      	adds	r3, r7, r3
    a8d6:	681b      	ldr	r3, [r3, #0]
    a8d8:	330b      	adds	r3, #11
    a8da:	781b      	ldrb	r3, [r3, #0]
    a8dc:	001a      	movs	r2, r3
    a8de:	2310      	movs	r3, #16
    a8e0:	4013      	ands	r3, r2
    a8e2:	d048      	beq.n	a976 <f_unlink+0x1b2>
				if (dclst < 2) {
    a8e4:	2397      	movs	r3, #151	; 0x97
    a8e6:	009b      	lsls	r3, r3, #2
    a8e8:	18fb      	adds	r3, r7, r3
    a8ea:	681b      	ldr	r3, [r3, #0]
    a8ec:	2b01      	cmp	r3, #1
    a8ee:	d804      	bhi.n	a8fa <f_unlink+0x136>
					res = FR_INT_ERR;
    a8f0:	4b43      	ldr	r3, [pc, #268]	; (aa00 <f_unlink+0x23c>)
    a8f2:	18fb      	adds	r3, r7, r3
    a8f4:	2202      	movs	r2, #2
    a8f6:	701a      	strb	r2, [r3, #0]
    a8f8:	e03d      	b.n	a976 <f_unlink+0x1b2>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    a8fa:	238e      	movs	r3, #142	; 0x8e
    a8fc:	009b      	lsls	r3, r3, #2
    a8fe:	18f9      	adds	r1, r7, r3
    a900:	2385      	movs	r3, #133	; 0x85
    a902:	009b      	lsls	r3, r3, #2
    a904:	18fb      	adds	r3, r7, r3
    a906:	2224      	movs	r2, #36	; 0x24
    a908:	0018      	movs	r0, r3
    a90a:	4b40      	ldr	r3, [pc, #256]	; (aa0c <f_unlink+0x248>)
    a90c:	4798      	blx	r3
					sdj.sclust = dclst;
    a90e:	2385      	movs	r3, #133	; 0x85
    a910:	009b      	lsls	r3, r3, #2
    a912:	18fb      	adds	r3, r7, r3
    a914:	2297      	movs	r2, #151	; 0x97
    a916:	0092      	lsls	r2, r2, #2
    a918:	18ba      	adds	r2, r7, r2
    a91a:	6812      	ldr	r2, [r2, #0]
    a91c:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    a91e:	4b38      	ldr	r3, [pc, #224]	; (aa00 <f_unlink+0x23c>)
    a920:	18fc      	adds	r4, r7, r3
    a922:	2385      	movs	r3, #133	; 0x85
    a924:	009b      	lsls	r3, r3, #2
    a926:	18fb      	adds	r3, r7, r3
    a928:	2102      	movs	r1, #2
    a92a:	0018      	movs	r0, r3
    a92c:	4b38      	ldr	r3, [pc, #224]	; (aa10 <f_unlink+0x24c>)
    a92e:	4798      	blx	r3
    a930:	0003      	movs	r3, r0
    a932:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
    a934:	4b32      	ldr	r3, [pc, #200]	; (aa00 <f_unlink+0x23c>)
    a936:	18fb      	adds	r3, r7, r3
    a938:	781b      	ldrb	r3, [r3, #0]
    a93a:	2b00      	cmp	r3, #0
    a93c:	d11b      	bne.n	a976 <f_unlink+0x1b2>
						res = dir_read(&sdj);
    a93e:	4b30      	ldr	r3, [pc, #192]	; (aa00 <f_unlink+0x23c>)
    a940:	18fc      	adds	r4, r7, r3
    a942:	2385      	movs	r3, #133	; 0x85
    a944:	009b      	lsls	r3, r3, #2
    a946:	18fb      	adds	r3, r7, r3
    a948:	0018      	movs	r0, r3
    a94a:	4b32      	ldr	r3, [pc, #200]	; (aa14 <f_unlink+0x250>)
    a94c:	4798      	blx	r3
    a94e:	0003      	movs	r3, r0
    a950:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
    a952:	4b2b      	ldr	r3, [pc, #172]	; (aa00 <f_unlink+0x23c>)
    a954:	18fb      	adds	r3, r7, r3
    a956:	781b      	ldrb	r3, [r3, #0]
    a958:	2b00      	cmp	r3, #0
    a95a:	d103      	bne.n	a964 <f_unlink+0x1a0>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    a95c:	4b28      	ldr	r3, [pc, #160]	; (aa00 <f_unlink+0x23c>)
    a95e:	18fb      	adds	r3, r7, r3
    a960:	2207      	movs	r2, #7
    a962:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    a964:	4b26      	ldr	r3, [pc, #152]	; (aa00 <f_unlink+0x23c>)
    a966:	18fb      	adds	r3, r7, r3
    a968:	781b      	ldrb	r3, [r3, #0]
    a96a:	2b04      	cmp	r3, #4
    a96c:	d103      	bne.n	a976 <f_unlink+0x1b2>
    a96e:	4b24      	ldr	r3, [pc, #144]	; (aa00 <f_unlink+0x23c>)
    a970:	18fb      	adds	r3, r7, r3
    a972:	2200      	movs	r2, #0
    a974:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
    a976:	4b22      	ldr	r3, [pc, #136]	; (aa00 <f_unlink+0x23c>)
    a978:	18fb      	adds	r3, r7, r3
    a97a:	781b      	ldrb	r3, [r3, #0]
    a97c:	2b00      	cmp	r3, #0
    a97e:	d134      	bne.n	a9ea <f_unlink+0x226>
				res = dir_remove(&dj);		/* Remove the directory entry */
    a980:	4b1f      	ldr	r3, [pc, #124]	; (aa00 <f_unlink+0x23c>)
    a982:	18fc      	adds	r4, r7, r3
    a984:	238e      	movs	r3, #142	; 0x8e
    a986:	009b      	lsls	r3, r3, #2
    a988:	18fb      	adds	r3, r7, r3
    a98a:	0018      	movs	r0, r3
    a98c:	4b22      	ldr	r3, [pc, #136]	; (aa18 <f_unlink+0x254>)
    a98e:	4798      	blx	r3
    a990:	0003      	movs	r3, r0
    a992:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    a994:	4b1a      	ldr	r3, [pc, #104]	; (aa00 <f_unlink+0x23c>)
    a996:	18fb      	adds	r3, r7, r3
    a998:	781b      	ldrb	r3, [r3, #0]
    a99a:	2b00      	cmp	r3, #0
    a99c:	d125      	bne.n	a9ea <f_unlink+0x226>
					if (dclst)				/* Remove the cluster chain if exist */
    a99e:	2397      	movs	r3, #151	; 0x97
    a9a0:	009b      	lsls	r3, r3, #2
    a9a2:	18fb      	adds	r3, r7, r3
    a9a4:	681b      	ldr	r3, [r3, #0]
    a9a6:	2b00      	cmp	r3, #0
    a9a8:	d00f      	beq.n	a9ca <f_unlink+0x206>
						res = remove_chain(dj.fs, dclst);
    a9aa:	238e      	movs	r3, #142	; 0x8e
    a9ac:	009b      	lsls	r3, r3, #2
    a9ae:	18fb      	adds	r3, r7, r3
    a9b0:	681b      	ldr	r3, [r3, #0]
    a9b2:	4a13      	ldr	r2, [pc, #76]	; (aa00 <f_unlink+0x23c>)
    a9b4:	18bc      	adds	r4, r7, r2
    a9b6:	2297      	movs	r2, #151	; 0x97
    a9b8:	0092      	lsls	r2, r2, #2
    a9ba:	18ba      	adds	r2, r7, r2
    a9bc:	6812      	ldr	r2, [r2, #0]
    a9be:	0011      	movs	r1, r2
    a9c0:	0018      	movs	r0, r3
    a9c2:	4b16      	ldr	r3, [pc, #88]	; (aa1c <f_unlink+0x258>)
    a9c4:	4798      	blx	r3
    a9c6:	0003      	movs	r3, r0
    a9c8:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
    a9ca:	4b0d      	ldr	r3, [pc, #52]	; (aa00 <f_unlink+0x23c>)
    a9cc:	18fb      	adds	r3, r7, r3
    a9ce:	781b      	ldrb	r3, [r3, #0]
    a9d0:	2b00      	cmp	r3, #0
    a9d2:	d10a      	bne.n	a9ea <f_unlink+0x226>
    a9d4:	238e      	movs	r3, #142	; 0x8e
    a9d6:	009b      	lsls	r3, r3, #2
    a9d8:	18fb      	adds	r3, r7, r3
    a9da:	681b      	ldr	r3, [r3, #0]
    a9dc:	4a08      	ldr	r2, [pc, #32]	; (aa00 <f_unlink+0x23c>)
    a9de:	18bc      	adds	r4, r7, r2
    a9e0:	0018      	movs	r0, r3
    a9e2:	4b0f      	ldr	r3, [pc, #60]	; (aa20 <f_unlink+0x25c>)
    a9e4:	4798      	blx	r3
    a9e6:	0003      	movs	r3, r0
    a9e8:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    a9ea:	4b05      	ldr	r3, [pc, #20]	; (aa00 <f_unlink+0x23c>)
    a9ec:	18fb      	adds	r3, r7, r3
    a9ee:	781b      	ldrb	r3, [r3, #0]
}
    a9f0:	0018      	movs	r0, r3
    a9f2:	46bd      	mov	sp, r7
    a9f4:	239b      	movs	r3, #155	; 0x9b
    a9f6:	009b      	lsls	r3, r3, #2
    a9f8:	449d      	add	sp, r3
    a9fa:	bd90      	pop	{r4, r7, pc}
    a9fc:	fffffd94 	.word	0xfffffd94
    aa00:	00000267 	.word	0x00000267
    aa04:	00009445 	.word	0x00009445
    aa08:	00009239 	.word	0x00009239
    aa0c:	00007561 	.word	0x00007561
    aa10:	00007e89 	.word	0x00007e89
    aa14:	000087ed 	.word	0x000087ed
    aa18:	00008d19 	.word	0x00008d19
    aa1c:	00007c85 	.word	0x00007c85
    aa20:	0000770d 	.word	0x0000770d

0000aa24 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    aa24:	b590      	push	{r4, r7, lr}
    aa26:	b087      	sub	sp, #28
    aa28:	af00      	add	r7, sp, #0
    aa2a:	0002      	movs	r2, r0
    aa2c:	6039      	str	r1, [r7, #0]
    aa2e:	1dfb      	adds	r3, r7, #7
    aa30:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    aa32:	230c      	movs	r3, #12
    aa34:	18fb      	adds	r3, r7, r3
    aa36:	1dfa      	adds	r2, r7, #7
    aa38:	7812      	ldrb	r2, [r2, #0]
    aa3a:	701a      	strb	r2, [r3, #0]
	btw = 1;
    aa3c:	2301      	movs	r3, #1
    aa3e:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    aa40:	2310      	movs	r3, #16
    aa42:	18fb      	adds	r3, r7, r3
    aa44:	697a      	ldr	r2, [r7, #20]
    aa46:	210c      	movs	r1, #12
    aa48:	1879      	adds	r1, r7, r1
    aa4a:	6838      	ldr	r0, [r7, #0]
    aa4c:	4c06      	ldr	r4, [pc, #24]	; (aa68 <f_putc+0x44>)
    aa4e:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    aa50:	693a      	ldr	r2, [r7, #16]
    aa52:	697b      	ldr	r3, [r7, #20]
    aa54:	429a      	cmp	r2, r3
    aa56:	d101      	bne.n	aa5c <f_putc+0x38>
    aa58:	2301      	movs	r3, #1
    aa5a:	e001      	b.n	aa60 <f_putc+0x3c>
    aa5c:	2301      	movs	r3, #1
    aa5e:	425b      	negs	r3, r3
}
    aa60:	0018      	movs	r0, r3
    aa62:	46bd      	mov	sp, r7
    aa64:	b007      	add	sp, #28
    aa66:	bd90      	pop	{r4, r7, pc}
    aa68:	0000a2b9 	.word	0x0000a2b9

0000aa6c <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    aa6c:	b580      	push	{r7, lr}
    aa6e:	b084      	sub	sp, #16
    aa70:	af00      	add	r7, sp, #0
    aa72:	6078      	str	r0, [r7, #4]
    aa74:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    aa76:	2300      	movs	r3, #0
    aa78:	60fb      	str	r3, [r7, #12]
    aa7a:	e012      	b.n	aaa2 <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    aa7c:	687b      	ldr	r3, [r7, #4]
    aa7e:	781b      	ldrb	r3, [r3, #0]
    aa80:	683a      	ldr	r2, [r7, #0]
    aa82:	0011      	movs	r1, r2
    aa84:	0018      	movs	r0, r3
    aa86:	4b0b      	ldr	r3, [pc, #44]	; (aab4 <f_puts+0x48>)
    aa88:	4798      	blx	r3
    aa8a:	0003      	movs	r3, r0
    aa8c:	3301      	adds	r3, #1
    aa8e:	d102      	bne.n	aa96 <f_puts+0x2a>
    aa90:	2301      	movs	r3, #1
    aa92:	425b      	negs	r3, r3
    aa94:	e00a      	b.n	aaac <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    aa96:	687b      	ldr	r3, [r7, #4]
    aa98:	3301      	adds	r3, #1
    aa9a:	607b      	str	r3, [r7, #4]
    aa9c:	68fb      	ldr	r3, [r7, #12]
    aa9e:	3301      	adds	r3, #1
    aaa0:	60fb      	str	r3, [r7, #12]
    aaa2:	687b      	ldr	r3, [r7, #4]
    aaa4:	781b      	ldrb	r3, [r3, #0]
    aaa6:	2b00      	cmp	r3, #0
    aaa8:	d1e8      	bne.n	aa7c <f_puts+0x10>
	}
	return n;
    aaaa:	68fb      	ldr	r3, [r7, #12]
}
    aaac:	0018      	movs	r0, r3
    aaae:	46bd      	mov	sp, r7
    aab0:	b004      	add	sp, #16
    aab2:	bd80      	pop	{r7, pc}
    aab4:	0000aa25 	.word	0x0000aa25

0000aab8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    aab8:	b580      	push	{r7, lr}
    aaba:	b084      	sub	sp, #16
    aabc:	af00      	add	r7, sp, #0
    aabe:	0002      	movs	r2, r0
    aac0:	6039      	str	r1, [r7, #0]
    aac2:	1dbb      	adds	r3, r7, #6
    aac4:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    aac6:	1dbb      	adds	r3, r7, #6
    aac8:	881b      	ldrh	r3, [r3, #0]
    aaca:	2b7f      	cmp	r3, #127	; 0x7f
    aacc:	d805      	bhi.n	aada <ff_convert+0x22>
		c = src;
    aace:	230e      	movs	r3, #14
    aad0:	18fb      	adds	r3, r7, r3
    aad2:	1dba      	adds	r2, r7, #6
    aad4:	8812      	ldrh	r2, [r2, #0]
    aad6:	801a      	strh	r2, [r3, #0]
    aad8:	e03a      	b.n	ab50 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    aada:	683b      	ldr	r3, [r7, #0]
    aadc:	2b00      	cmp	r3, #0
    aade:	d010      	beq.n	ab02 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    aae0:	1dbb      	adds	r3, r7, #6
    aae2:	881b      	ldrh	r3, [r3, #0]
    aae4:	2bff      	cmp	r3, #255	; 0xff
    aae6:	d807      	bhi.n	aaf8 <ff_convert+0x40>
    aae8:	1dbb      	adds	r3, r7, #6
    aaea:	881b      	ldrh	r3, [r3, #0]
    aaec:	3b80      	subs	r3, #128	; 0x80
    aaee:	001a      	movs	r2, r3
    aaf0:	4b1b      	ldr	r3, [pc, #108]	; (ab60 <ff_convert+0xa8>)
    aaf2:	0052      	lsls	r2, r2, #1
    aaf4:	5ad2      	ldrh	r2, [r2, r3]
    aaf6:	e000      	b.n	aafa <ff_convert+0x42>
    aaf8:	2200      	movs	r2, #0
    aafa:	230e      	movs	r3, #14
    aafc:	18fb      	adds	r3, r7, r3
    aafe:	801a      	strh	r2, [r3, #0]
    ab00:	e026      	b.n	ab50 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    ab02:	230e      	movs	r3, #14
    ab04:	18fb      	adds	r3, r7, r3
    ab06:	2200      	movs	r2, #0
    ab08:	801a      	strh	r2, [r3, #0]
    ab0a:	e010      	b.n	ab2e <ff_convert+0x76>
				if (src == Tbl[c]) break;
    ab0c:	230e      	movs	r3, #14
    ab0e:	18fb      	adds	r3, r7, r3
    ab10:	881a      	ldrh	r2, [r3, #0]
    ab12:	4b13      	ldr	r3, [pc, #76]	; (ab60 <ff_convert+0xa8>)
    ab14:	0052      	lsls	r2, r2, #1
    ab16:	5ad3      	ldrh	r3, [r2, r3]
    ab18:	1dba      	adds	r2, r7, #6
    ab1a:	8812      	ldrh	r2, [r2, #0]
    ab1c:	429a      	cmp	r2, r3
    ab1e:	d00c      	beq.n	ab3a <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
    ab20:	230e      	movs	r3, #14
    ab22:	18fb      	adds	r3, r7, r3
    ab24:	881a      	ldrh	r2, [r3, #0]
    ab26:	230e      	movs	r3, #14
    ab28:	18fb      	adds	r3, r7, r3
    ab2a:	3201      	adds	r2, #1
    ab2c:	801a      	strh	r2, [r3, #0]
    ab2e:	230e      	movs	r3, #14
    ab30:	18fb      	adds	r3, r7, r3
    ab32:	881b      	ldrh	r3, [r3, #0]
    ab34:	2b7f      	cmp	r3, #127	; 0x7f
    ab36:	d9e9      	bls.n	ab0c <ff_convert+0x54>
    ab38:	e000      	b.n	ab3c <ff_convert+0x84>
				if (src == Tbl[c]) break;
    ab3a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
    ab3c:	230e      	movs	r3, #14
    ab3e:	18fb      	adds	r3, r7, r3
    ab40:	881b      	ldrh	r3, [r3, #0]
    ab42:	3380      	adds	r3, #128	; 0x80
    ab44:	b29a      	uxth	r2, r3
    ab46:	230e      	movs	r3, #14
    ab48:	18fb      	adds	r3, r7, r3
    ab4a:	21ff      	movs	r1, #255	; 0xff
    ab4c:	400a      	ands	r2, r1
    ab4e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
    ab50:	230e      	movs	r3, #14
    ab52:	18fb      	adds	r3, r7, r3
    ab54:	881b      	ldrh	r3, [r3, #0]
}
    ab56:	0018      	movs	r0, r3
    ab58:	46bd      	mov	sp, r7
    ab5a:	b004      	add	sp, #16
    ab5c:	bd80      	pop	{r7, pc}
    ab5e:	46c0      	nop			; (mov r8, r8)
    ab60:	0000c38c 	.word	0x0000c38c

0000ab64 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    ab64:	b580      	push	{r7, lr}
    ab66:	b084      	sub	sp, #16
    ab68:	af00      	add	r7, sp, #0
    ab6a:	0002      	movs	r2, r0
    ab6c:	1dbb      	adds	r3, r7, #6
    ab6e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    ab70:	2300      	movs	r3, #0
    ab72:	60fb      	str	r3, [r7, #12]
    ab74:	e002      	b.n	ab7c <ff_wtoupper+0x18>
    ab76:	68fb      	ldr	r3, [r7, #12]
    ab78:	3301      	adds	r3, #1
    ab7a:	60fb      	str	r3, [r7, #12]
    ab7c:	4b0f      	ldr	r3, [pc, #60]	; (abbc <ff_wtoupper+0x58>)
    ab7e:	68fa      	ldr	r2, [r7, #12]
    ab80:	0052      	lsls	r2, r2, #1
    ab82:	5ad3      	ldrh	r3, [r2, r3]
    ab84:	2b00      	cmp	r3, #0
    ab86:	d007      	beq.n	ab98 <ff_wtoupper+0x34>
    ab88:	4b0c      	ldr	r3, [pc, #48]	; (abbc <ff_wtoupper+0x58>)
    ab8a:	68fa      	ldr	r2, [r7, #12]
    ab8c:	0052      	lsls	r2, r2, #1
    ab8e:	5ad3      	ldrh	r3, [r2, r3]
    ab90:	1dba      	adds	r2, r7, #6
    ab92:	8812      	ldrh	r2, [r2, #0]
    ab94:	429a      	cmp	r2, r3
    ab96:	d1ee      	bne.n	ab76 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    ab98:	4b08      	ldr	r3, [pc, #32]	; (abbc <ff_wtoupper+0x58>)
    ab9a:	68fa      	ldr	r2, [r7, #12]
    ab9c:	0052      	lsls	r2, r2, #1
    ab9e:	5ad3      	ldrh	r3, [r2, r3]
    aba0:	2b00      	cmp	r3, #0
    aba2:	d004      	beq.n	abae <ff_wtoupper+0x4a>
    aba4:	4b06      	ldr	r3, [pc, #24]	; (abc0 <ff_wtoupper+0x5c>)
    aba6:	68fa      	ldr	r2, [r7, #12]
    aba8:	0052      	lsls	r2, r2, #1
    abaa:	5ad3      	ldrh	r3, [r2, r3]
    abac:	e001      	b.n	abb2 <ff_wtoupper+0x4e>
    abae:	1dbb      	adds	r3, r7, #6
    abb0:	881b      	ldrh	r3, [r3, #0]
}
    abb2:	0018      	movs	r0, r3
    abb4:	46bd      	mov	sp, r7
    abb6:	b004      	add	sp, #16
    abb8:	bd80      	pop	{r7, pc}
    abba:	46c0      	nop			; (mov r8, r8)
    abbc:	0000c48c 	.word	0x0000c48c
    abc0:	0000c66c 	.word	0x0000c66c

0000abc4 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    abc4:	b580      	push	{r7, lr}
    abc6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    abc8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    abcc:	4b02      	ldr	r3, [pc, #8]	; (abd8 <NVIC_SystemReset+0x14>)
    abce:	4a03      	ldr	r2, [pc, #12]	; (abdc <NVIC_SystemReset+0x18>)
    abd0:	60da      	str	r2, [r3, #12]
    abd2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    abd6:	e7fe      	b.n	abd6 <NVIC_SystemReset+0x12>
    abd8:	e000ed00 	.word	0xe000ed00
    abdc:	05fa0004 	.word	0x05fa0004

0000abe0 <system_apb_clock_set_mask>:
{
    abe0:	b580      	push	{r7, lr}
    abe2:	b082      	sub	sp, #8
    abe4:	af00      	add	r7, sp, #0
    abe6:	0002      	movs	r2, r0
    abe8:	6039      	str	r1, [r7, #0]
    abea:	1dfb      	adds	r3, r7, #7
    abec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    abee:	1dfb      	adds	r3, r7, #7
    abf0:	781b      	ldrb	r3, [r3, #0]
    abf2:	2b01      	cmp	r3, #1
    abf4:	d00a      	beq.n	ac0c <system_apb_clock_set_mask+0x2c>
    abf6:	2b02      	cmp	r3, #2
    abf8:	d00f      	beq.n	ac1a <system_apb_clock_set_mask+0x3a>
    abfa:	2b00      	cmp	r3, #0
    abfc:	d114      	bne.n	ac28 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    abfe:	4b0e      	ldr	r3, [pc, #56]	; (ac38 <system_apb_clock_set_mask+0x58>)
    ac00:	4a0d      	ldr	r2, [pc, #52]	; (ac38 <system_apb_clock_set_mask+0x58>)
    ac02:	6991      	ldr	r1, [r2, #24]
    ac04:	683a      	ldr	r2, [r7, #0]
    ac06:	430a      	orrs	r2, r1
    ac08:	619a      	str	r2, [r3, #24]
			break;
    ac0a:	e00f      	b.n	ac2c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    ac0c:	4b0a      	ldr	r3, [pc, #40]	; (ac38 <system_apb_clock_set_mask+0x58>)
    ac0e:	4a0a      	ldr	r2, [pc, #40]	; (ac38 <system_apb_clock_set_mask+0x58>)
    ac10:	69d1      	ldr	r1, [r2, #28]
    ac12:	683a      	ldr	r2, [r7, #0]
    ac14:	430a      	orrs	r2, r1
    ac16:	61da      	str	r2, [r3, #28]
			break;
    ac18:	e008      	b.n	ac2c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    ac1a:	4b07      	ldr	r3, [pc, #28]	; (ac38 <system_apb_clock_set_mask+0x58>)
    ac1c:	4a06      	ldr	r2, [pc, #24]	; (ac38 <system_apb_clock_set_mask+0x58>)
    ac1e:	6a11      	ldr	r1, [r2, #32]
    ac20:	683a      	ldr	r2, [r7, #0]
    ac22:	430a      	orrs	r2, r1
    ac24:	621a      	str	r2, [r3, #32]
			break;
    ac26:	e001      	b.n	ac2c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    ac28:	2317      	movs	r3, #23
    ac2a:	e000      	b.n	ac2e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    ac2c:	2300      	movs	r3, #0
}
    ac2e:	0018      	movs	r0, r3
    ac30:	46bd      	mov	sp, r7
    ac32:	b002      	add	sp, #8
    ac34:	bd80      	pop	{r7, pc}
    ac36:	46c0      	nop			; (mov r8, r8)
    ac38:	40000400 	.word	0x40000400

0000ac3c <nvm_get_config_defaults>:
{
    ac3c:	b580      	push	{r7, lr}
    ac3e:	b082      	sub	sp, #8
    ac40:	af00      	add	r7, sp, #0
    ac42:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    ac44:	687b      	ldr	r3, [r7, #4]
    ac46:	2200      	movs	r2, #0
    ac48:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    ac4a:	687b      	ldr	r3, [r7, #4]
    ac4c:	2201      	movs	r2, #1
    ac4e:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    ac50:	4b08      	ldr	r3, [pc, #32]	; (ac74 <nvm_get_config_defaults+0x38>)
    ac52:	685b      	ldr	r3, [r3, #4]
    ac54:	06db      	lsls	r3, r3, #27
    ac56:	0f1b      	lsrs	r3, r3, #28
    ac58:	b2db      	uxtb	r3, r3
    ac5a:	001a      	movs	r2, r3
    ac5c:	687b      	ldr	r3, [r7, #4]
    ac5e:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    ac60:	687b      	ldr	r3, [r7, #4]
    ac62:	2200      	movs	r2, #0
    ac64:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    ac66:	687b      	ldr	r3, [r7, #4]
    ac68:	2200      	movs	r2, #0
    ac6a:	711a      	strb	r2, [r3, #4]
}
    ac6c:	46c0      	nop			; (mov r8, r8)
    ac6e:	46bd      	mov	sp, r7
    ac70:	b002      	add	sp, #8
    ac72:	bd80      	pop	{r7, pc}
    ac74:	41004000 	.word	0x41004000

0000ac78 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    ac78:	b580      	push	{r7, lr}
    ac7a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    ac7c:	4b02      	ldr	r3, [pc, #8]	; (ac88 <system_reset+0x10>)
    ac7e:	4798      	blx	r3
}
    ac80:	46c0      	nop			; (mov r8, r8)
    ac82:	46bd      	mov	sp, r7
    ac84:	bd80      	pop	{r7, pc}
    ac86:	46c0      	nop			; (mov r8, r8)
    ac88:	0000abc5 	.word	0x0000abc5

0000ac8c <system_interrupt_enable_global>:
{
    ac8c:	b580      	push	{r7, lr}
    ac8e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    ac90:	4b04      	ldr	r3, [pc, #16]	; (aca4 <system_interrupt_enable_global+0x18>)
    ac92:	2201      	movs	r2, #1
    ac94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    ac96:	f3bf 8f5f 	dmb	sy
    ac9a:	b662      	cpsie	i
}
    ac9c:	46c0      	nop			; (mov r8, r8)
    ac9e:	46bd      	mov	sp, r7
    aca0:	bd80      	pop	{r7, pc}
    aca2:	46c0      	nop			; (mov r8, r8)
    aca4:	20000009 	.word	0x20000009

0000aca8 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    aca8:	b580      	push	{r7, lr}
    acaa:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    acac:	2102      	movs	r1, #2
    acae:	2001      	movs	r0, #1
    acb0:	4b02      	ldr	r3, [pc, #8]	; (acbc <dsu_crc32_init+0x14>)
    acb2:	4798      	blx	r3
#endif

}
    acb4:	46c0      	nop			; (mov r8, r8)
    acb6:	46bd      	mov	sp, r7
    acb8:	bd80      	pop	{r7, pc}
    acba:	46c0      	nop			; (mov r8, r8)
    acbc:	0000abe1 	.word	0x0000abe1

0000acc0 <main>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void) {
    acc0:	b580      	push	{r7, lr}
    acc2:	af00      	add	r7, sp, #0

    /*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
    system_init();
    acc4:	4b4e      	ldr	r3, [pc, #312]	; (ae00 <main+0x140>)
    acc6:	4798      	blx	r3
    delay_init();
    acc8:	4b4e      	ldr	r3, [pc, #312]	; (ae04 <main+0x144>)
    acca:	4798      	blx	r3
    InitializeSerialConsole();
    accc:	4b4e      	ldr	r3, [pc, #312]	; (ae08 <main+0x148>)
    acce:	4798      	blx	r3
    system_interrupt_enable_global();
    acd0:	4b4e      	ldr	r3, [pc, #312]	; (ae0c <main+0x14c>)
    acd2:	4798      	blx	r3

    /* Initialize SD MMC stack */
    sd_mmc_init();
    acd4:	4b4e      	ldr	r3, [pc, #312]	; (ae10 <main+0x150>)
    acd6:	4798      	blx	r3

    // Initialize the NVM driver
    configure_nvm();
    acd8:	4b4e      	ldr	r3, [pc, #312]	; (ae14 <main+0x154>)
    acda:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
    acdc:	4b4e      	ldr	r3, [pc, #312]	; (ae18 <main+0x158>)
    acde:	2201      	movs	r2, #1
    ace0:	701a      	strb	r2, [r3, #0]
    ace2:	f3bf 8f5f 	dmb	sy
    ace6:	b662      	cpsie	i

    // Configure CRC32
    dsu_crc32_init();
    ace8:	4b4c      	ldr	r3, [pc, #304]	; (ae1c <main+0x15c>)
    acea:	4798      	blx	r3

    SerialConsoleWriteString("ESE5160 - ENTER BOOTLOADER");   // Order to add string to TX Buffer
    acec:	4b4c      	ldr	r3, [pc, #304]	; (ae20 <main+0x160>)
    acee:	0018      	movs	r0, r3
    acf0:	4b4c      	ldr	r3, [pc, #304]	; (ae24 <main+0x164>)
    acf2:	4798      	blx	r3

    /*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

    // EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
    // See function inside to see how to open a file
    SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    acf4:	4b4c      	ldr	r3, [pc, #304]	; (ae28 <main+0x168>)
    acf6:	0018      	movs	r0, r3
    acf8:	4b4a      	ldr	r3, [pc, #296]	; (ae24 <main+0x164>)
    acfa:	4798      	blx	r3

    if (StartFilesystemAndTest() == false) {
    acfc:	4b4b      	ldr	r3, [pc, #300]	; (ae2c <main+0x16c>)
    acfe:	4798      	blx	r3
    ad00:	0003      	movs	r3, r0
    ad02:	001a      	movs	r2, r3
    ad04:	2301      	movs	r3, #1
    ad06:	4053      	eors	r3, r2
    ad08:	b2db      	uxtb	r3, r3
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	d00a      	beq.n	ad24 <main+0x64>
        SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    ad0e:	4b48      	ldr	r3, [pc, #288]	; (ae30 <main+0x170>)
    ad10:	0018      	movs	r0, r3
    ad12:	4b44      	ldr	r3, [pc, #272]	; (ae24 <main+0x164>)
    ad14:	4798      	blx	r3
        delay_cycles_ms(5000);
    ad16:	4b47      	ldr	r3, [pc, #284]	; (ae34 <main+0x174>)
    ad18:	0018      	movs	r0, r3
    ad1a:	4b47      	ldr	r3, [pc, #284]	; (ae38 <main+0x178>)
    ad1c:	4798      	blx	r3
        system_reset();
    ad1e:	4b47      	ldr	r3, [pc, #284]	; (ae3c <main+0x17c>)
    ad20:	4798      	blx	r3
    ad22:	e003      	b.n	ad2c <main+0x6c>
    } else {
        SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    ad24:	4b46      	ldr	r3, [pc, #280]	; (ae40 <main+0x180>)
    ad26:	0018      	movs	r0, r3
    ad28:	4b3e      	ldr	r3, [pc, #248]	; (ae24 <main+0x164>)
    ad2a:	4798      	blx	r3
    /*END SIMPLE SD CARD MOUNTING AND TEST!*/

    /*3.) STARTS BOOTLOADER HERE!*/
    // Open flag file and check for flags
    static bool is_flashing = false;
    test_txt_flagA[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ad2c:	4b45      	ldr	r3, [pc, #276]	; (ae44 <main+0x184>)
    ad2e:	2230      	movs	r2, #48	; 0x30
    ad30:	701a      	strb	r2, [r3, #0]
	flagA_status = f_open(&file_object, (char const *)test_txt_flagA, FA_READ|FA_OPEN_EXISTING);
    ad32:	4944      	ldr	r1, [pc, #272]	; (ae44 <main+0x184>)
    ad34:	4b44      	ldr	r3, [pc, #272]	; (ae48 <main+0x188>)
    ad36:	2201      	movs	r2, #1
    ad38:	0018      	movs	r0, r3
    ad3a:	4b44      	ldr	r3, [pc, #272]	; (ae4c <main+0x18c>)
    ad3c:	4798      	blx	r3
    ad3e:	0003      	movs	r3, r0
    ad40:	001a      	movs	r2, r3
    ad42:	4b43      	ldr	r3, [pc, #268]	; (ae50 <main+0x190>)
    ad44:	701a      	strb	r2, [r3, #0]
    // Check if FlagA is present
    if(flagA_status == FR_OK){
    ad46:	4b42      	ldr	r3, [pc, #264]	; (ae50 <main+0x190>)
    ad48:	781b      	ldrb	r3, [r3, #0]
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	d112      	bne.n	ad74 <main+0xb4>
        is_flashing = true;
    ad4e:	4b41      	ldr	r3, [pc, #260]	; (ae54 <main+0x194>)
    ad50:	2201      	movs	r2, #1
    ad52:	701a      	strb	r2, [r3, #0]
        // remove Flag file it exists to prevent update next reset
        #if(!__DEBUG__)
        f_unlink((char const *)test_txt_flagA);
    ad54:	4b3b      	ldr	r3, [pc, #236]	; (ae44 <main+0x184>)
    ad56:	0018      	movs	r0, r3
    ad58:	4b3f      	ldr	r3, [pc, #252]	; (ae58 <main+0x198>)
    ad5a:	4798      	blx	r3
        #endif
        test_bin_TestA[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ad5c:	4b3f      	ldr	r3, [pc, #252]	; (ae5c <main+0x19c>)
    ad5e:	2230      	movs	r2, #48	; 0x30
    ad60:	701a      	strb	r2, [r3, #0]
        // Flash TestA
        flash_status = flash_bin(test_bin_TestA);
    ad62:	4b3e      	ldr	r3, [pc, #248]	; (ae5c <main+0x19c>)
    ad64:	0018      	movs	r0, r3
    ad66:	4b3e      	ldr	r3, [pc, #248]	; (ae60 <main+0x1a0>)
    ad68:	4798      	blx	r3
    ad6a:	0003      	movs	r3, r0
    ad6c:	001a      	movs	r2, r3
    ad6e:	4b3d      	ldr	r3, [pc, #244]	; (ae64 <main+0x1a4>)
    ad70:	701a      	strb	r2, [r3, #0]
    ad72:	e022      	b.n	adba <main+0xfa>
    }
    else{
        test_txt_flagB[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ad74:	4b3c      	ldr	r3, [pc, #240]	; (ae68 <main+0x1a8>)
    ad76:	2230      	movs	r2, #48	; 0x30
    ad78:	701a      	strb	r2, [r3, #0]
        flagB_status = f_open(&file_object, (char const *)test_txt_flagB, FA_READ|FA_OPEN_EXISTING);
    ad7a:	493b      	ldr	r1, [pc, #236]	; (ae68 <main+0x1a8>)
    ad7c:	4b32      	ldr	r3, [pc, #200]	; (ae48 <main+0x188>)
    ad7e:	2201      	movs	r2, #1
    ad80:	0018      	movs	r0, r3
    ad82:	4b32      	ldr	r3, [pc, #200]	; (ae4c <main+0x18c>)
    ad84:	4798      	blx	r3
    ad86:	0003      	movs	r3, r0
    ad88:	001a      	movs	r2, r3
    ad8a:	4b38      	ldr	r3, [pc, #224]	; (ae6c <main+0x1ac>)
    ad8c:	701a      	strb	r2, [r3, #0]
        // Check if FlagB is present
        if(flagB_status == FR_OK){
    ad8e:	4b37      	ldr	r3, [pc, #220]	; (ae6c <main+0x1ac>)
    ad90:	781b      	ldrb	r3, [r3, #0]
    ad92:	2b00      	cmp	r3, #0
    ad94:	d111      	bne.n	adba <main+0xfa>
            is_flashing = true;
    ad96:	4b2f      	ldr	r3, [pc, #188]	; (ae54 <main+0x194>)
    ad98:	2201      	movs	r2, #1
    ad9a:	701a      	strb	r2, [r3, #0]
            // remove Flag file it exists to prevent update next reset
            #if(!__DEBUG__)
            f_unlink((char const *)test_txt_flagB);
    ad9c:	4b32      	ldr	r3, [pc, #200]	; (ae68 <main+0x1a8>)
    ad9e:	0018      	movs	r0, r3
    ada0:	4b2d      	ldr	r3, [pc, #180]	; (ae58 <main+0x198>)
    ada2:	4798      	blx	r3
            #endif
            test_bin_TestB[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ada4:	4b32      	ldr	r3, [pc, #200]	; (ae70 <main+0x1b0>)
    ada6:	2230      	movs	r2, #48	; 0x30
    ada8:	701a      	strb	r2, [r3, #0]
            // Flash TestB
            flash_status = flash_bin(test_bin_TestB);
    adaa:	4b31      	ldr	r3, [pc, #196]	; (ae70 <main+0x1b0>)
    adac:	0018      	movs	r0, r3
    adae:	4b2c      	ldr	r3, [pc, #176]	; (ae60 <main+0x1a0>)
    adb0:	4798      	blx	r3
    adb2:	0003      	movs	r3, r0
    adb4:	001a      	movs	r2, r3
    adb6:	4b2b      	ldr	r3, [pc, #172]	; (ae64 <main+0x1a4>)
    adb8:	701a      	strb	r2, [r3, #0]
        if(flagA_status != FR_OK && flagB_status != FR_OK){
            test_bin_TestA[0] = LUN_ID_SD_MMC_0_MEM + '0';
            flash_bin(test_bin_TestA);
        }
    #endif
    if(is_flashing){
    adba:	4b26      	ldr	r3, [pc, #152]	; (ae54 <main+0x194>)
    adbc:	781b      	ldrb	r3, [r3, #0]
    adbe:	2b00      	cmp	r3, #0
    adc0:	d00c      	beq.n	addc <main+0x11c>
    if(flash_status==STATUS_OK){
    adc2:	4b28      	ldr	r3, [pc, #160]	; (ae64 <main+0x1a4>)
    adc4:	781b      	ldrb	r3, [r3, #0]
    adc6:	2b00      	cmp	r3, #0
    adc8:	d104      	bne.n	add4 <main+0x114>
        SerialConsoleWriteString("Updated Firmware Successfully");
    adca:	4b2a      	ldr	r3, [pc, #168]	; (ae74 <main+0x1b4>)
    adcc:	0018      	movs	r0, r3
    adce:	4b15      	ldr	r3, [pc, #84]	; (ae24 <main+0x164>)
    add0:	4798      	blx	r3
    add2:	e003      	b.n	addc <main+0x11c>
    }
    else{
        SerialConsoleWriteString("Unsuccessful in updating Firmware");
    add4:	4b28      	ldr	r3, [pc, #160]	; (ae78 <main+0x1b8>)
    add6:	0018      	movs	r0, r3
    add8:	4b12      	ldr	r3, [pc, #72]	; (ae24 <main+0x164>)
    adda:	4798      	blx	r3
    // Students - this is your mission!

    /* END BOOTLOADER HERE!*/

    // 4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
    SerialConsoleWriteString("ESE5160 - EXIT BOOTLOADER");   // Order to add string to TX Buffer
    addc:	4b27      	ldr	r3, [pc, #156]	; (ae7c <main+0x1bc>)
    adde:	0018      	movs	r0, r3
    ade0:	4b10      	ldr	r3, [pc, #64]	; (ae24 <main+0x164>)
    ade2:	4798      	blx	r3
    delay_cycles_ms(100);                                    // Delay to allow print
    ade4:	2064      	movs	r0, #100	; 0x64
    ade6:	4b14      	ldr	r3, [pc, #80]	; (ae38 <main+0x178>)
    ade8:	4798      	blx	r3

    // Deinitialize HW - deinitialize started HW here!
    DeinitializeSerialConsole();   // Deinitializes UART
    adea:	4b25      	ldr	r3, [pc, #148]	; (ae80 <main+0x1c0>)
    adec:	4798      	blx	r3
    sd_mmc_deinit();               // Deinitialize SD CARD
    adee:	4b25      	ldr	r3, [pc, #148]	; (ae84 <main+0x1c4>)
    adf0:	4798      	blx	r3

    // Jump to application
    jumpToApplication();
    adf2:	4b25      	ldr	r3, [pc, #148]	; (ae88 <main+0x1c8>)
    adf4:	4798      	blx	r3
    adf6:	2300      	movs	r3, #0

    // Should not reach here! The device should have jumped to the main FW.
}
    adf8:	0018      	movs	r0, r3
    adfa:	46bd      	mov	sp, r7
    adfc:	bd80      	pop	{r7, pc}
    adfe:	46c0      	nop			; (mov r8, r8)
    ae00:	00006db1 	.word	0x00006db1
    ae04:	00000149 	.word	0x00000149
    ae08:	00000f4d 	.word	0x00000f4d
    ae0c:	0000ac8d 	.word	0x0000ac8d
    ae10:	00001df9 	.word	0x00001df9
    ae14:	0000b16d 	.word	0x0000b16d
    ae18:	20000009 	.word	0x20000009
    ae1c:	0000aca9 	.word	0x0000aca9
    ae20:	0000c84c 	.word	0x0000c84c
    ae24:	00000fd9 	.word	0x00000fd9
    ae28:	0000c868 	.word	0x0000c868
    ae2c:	0000ae8d 	.word	0x0000ae8d
    ae30:	0000c890 	.word	0x0000c890
    ae34:	00001388 	.word	0x00001388
    ae38:	000001a1 	.word	0x000001a1
    ae3c:	0000ac79 	.word	0x0000ac79
    ae40:	0000c8dc 	.word	0x0000c8dc
    ae44:	20000048 	.word	0x20000048
    ae48:	20000c64 	.word	0x20000c64
    ae4c:	00009aed 	.word	0x00009aed
    ae50:	20000dbf 	.word	0x20000dbf
    ae54:	200001b2 	.word	0x200001b2
    ae58:	0000a7c5 	.word	0x0000a7c5
    ae5c:	20000030 	.word	0x20000030
    ae60:	0000b3c1 	.word	0x0000b3c1
    ae64:	20000dbc 	.word	0x20000dbc
    ae68:	20000054 	.word	0x20000054
    ae6c:	20000dbd 	.word	0x20000dbd
    ae70:	2000003c 	.word	0x2000003c
    ae74:	0000c910 	.word	0x0000c910
    ae78:	0000c930 	.word	0x0000c930
    ae7c:	0000c954 	.word	0x0000c954
    ae80:	00000fbd 	.word	0x00000fbd
    ae84:	00002ba1 	.word	0x00002ba1
    ae88:	0000b135 	.word	0x0000b135

0000ae8c <StartFilesystemAndTest>:
 * @brief        Starts the filesystem and tests it. Sets the filesystem to the global variable fs
 * @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
 *				before performing the jump!
 * @return       Returns true is SD card and file system test passed. False otherwise.
 ******************************************************************************/
static bool StartFilesystemAndTest(void) {
    ae8c:	b590      	push	{r4, r7, lr}
    ae8e:	b0c5      	sub	sp, #276	; 0x114
    ae90:	af00      	add	r7, sp, #0
    bool sdCardPass = true;
    ae92:	2310      	movs	r3, #16
    ae94:	33ff      	adds	r3, #255	; 0xff
    ae96:	18fb      	adds	r3, r7, r3
    ae98:	2201      	movs	r2, #1
    ae9a:	701a      	strb	r2, [r3, #0]
    uint8_t binbuff[256];

    // Before we begin - fill buffer for binary write test
    // Fill binbuff with values 0x00 - 0xFF
    for (int i = 0; i < 256; i++) {
    ae9c:	2300      	movs	r3, #0
    ae9e:	2284      	movs	r2, #132	; 0x84
    aea0:	0052      	lsls	r2, r2, #1
    aea2:	18ba      	adds	r2, r7, r2
    aea4:	6013      	str	r3, [r2, #0]
    aea6:	e019      	b.n	aedc <StartFilesystemAndTest+0x50>
        binbuff[i] = i;
    aea8:	2384      	movs	r3, #132	; 0x84
    aeaa:	005b      	lsls	r3, r3, #1
    aeac:	18fb      	adds	r3, r7, r3
    aeae:	681b      	ldr	r3, [r3, #0]
    aeb0:	b2d9      	uxtb	r1, r3
    aeb2:	4b84      	ldr	r3, [pc, #528]	; (b0c4 <StartFilesystemAndTest+0x238>)
    aeb4:	2288      	movs	r2, #136	; 0x88
    aeb6:	0052      	lsls	r2, r2, #1
    aeb8:	18ba      	adds	r2, r7, r2
    aeba:	18d2      	adds	r2, r2, r3
    aebc:	2384      	movs	r3, #132	; 0x84
    aebe:	005b      	lsls	r3, r3, #1
    aec0:	18fb      	adds	r3, r7, r3
    aec2:	681b      	ldr	r3, [r3, #0]
    aec4:	18d3      	adds	r3, r2, r3
    aec6:	1c0a      	adds	r2, r1, #0
    aec8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 256; i++) {
    aeca:	2384      	movs	r3, #132	; 0x84
    aecc:	005b      	lsls	r3, r3, #1
    aece:	18fb      	adds	r3, r7, r3
    aed0:	681b      	ldr	r3, [r3, #0]
    aed2:	3301      	adds	r3, #1
    aed4:	2284      	movs	r2, #132	; 0x84
    aed6:	0052      	lsls	r2, r2, #1
    aed8:	18ba      	adds	r2, r7, r2
    aeda:	6013      	str	r3, [r2, #0]
    aedc:	2384      	movs	r3, #132	; 0x84
    aede:	005b      	lsls	r3, r3, #1
    aee0:	18fb      	adds	r3, r7, r3
    aee2:	681b      	ldr	r3, [r3, #0]
    aee4:	2bff      	cmp	r3, #255	; 0xff
    aee6:	dddf      	ble.n	aea8 <StartFilesystemAndTest+0x1c>
    }

    // MOUNT SD CARD
    Ctrl_status sdStatus = SdCard_Initiate();
    aee8:	2308      	movs	r3, #8
    aeea:	33ff      	adds	r3, #255	; 0xff
    aeec:	18fc      	adds	r4, r7, r3
    aeee:	4b76      	ldr	r3, [pc, #472]	; (b0c8 <StartFilesystemAndTest+0x23c>)
    aef0:	4798      	blx	r3
    aef2:	0003      	movs	r3, r0
    aef4:	7023      	strb	r3, [r4, #0]
    if (sdStatus == CTRL_GOOD)   // If the SD card is good we continue mounting the system!
    aef6:	2308      	movs	r3, #8
    aef8:	33ff      	adds	r3, #255	; 0xff
    aefa:	18fb      	adds	r3, r7, r3
    aefc:	781b      	ldrb	r3, [r3, #0]
    aefe:	2b00      	cmp	r3, #0
    af00:	d000      	beq.n	af04 <StartFilesystemAndTest+0x78>
    af02:	e0ce      	b.n	b0a2 <StartFilesystemAndTest+0x216>
    {
        SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    af04:	4b71      	ldr	r3, [pc, #452]	; (b0cc <StartFilesystemAndTest+0x240>)
    af06:	0018      	movs	r0, r3
    af08:	4b71      	ldr	r3, [pc, #452]	; (b0d0 <StartFilesystemAndTest+0x244>)
    af0a:	4798      	blx	r3

        // Attempt to mount a FAT file system on the SD Card using FATFS
        SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    af0c:	4b71      	ldr	r3, [pc, #452]	; (b0d4 <StartFilesystemAndTest+0x248>)
    af0e:	0018      	movs	r0, r3
    af10:	4b6f      	ldr	r3, [pc, #444]	; (b0d0 <StartFilesystemAndTest+0x244>)
    af12:	4798      	blx	r3
        memset(&fs, 0, sizeof(FATFS));
    af14:	238c      	movs	r3, #140	; 0x8c
    af16:	009a      	lsls	r2, r3, #2
    af18:	4b6f      	ldr	r3, [pc, #444]	; (b0d8 <StartFilesystemAndTest+0x24c>)
    af1a:	2100      	movs	r1, #0
    af1c:	0018      	movs	r0, r3
    af1e:	4b6f      	ldr	r3, [pc, #444]	; (b0dc <StartFilesystemAndTest+0x250>)
    af20:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);   // Order FATFS Mount
    af22:	4b6d      	ldr	r3, [pc, #436]	; (b0d8 <StartFilesystemAndTest+0x24c>)
    af24:	0019      	movs	r1, r3
    af26:	2000      	movs	r0, #0
    af28:	4b6d      	ldr	r3, [pc, #436]	; (b0e0 <StartFilesystemAndTest+0x254>)
    af2a:	4798      	blx	r3
    af2c:	0003      	movs	r3, r0
    af2e:	001a      	movs	r2, r3
    af30:	4b6c      	ldr	r3, [pc, #432]	; (b0e4 <StartFilesystemAndTest+0x258>)
    af32:	701a      	strb	r2, [r3, #0]
        if (FR_INVALID_DRIVE == res) {
    af34:	4b6b      	ldr	r3, [pc, #428]	; (b0e4 <StartFilesystemAndTest+0x258>)
    af36:	781b      	ldrb	r3, [r3, #0]
    af38:	2b0b      	cmp	r3, #11
    af3a:	d10d      	bne.n	af58 <StartFilesystemAndTest+0xcc>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    af3c:	4b69      	ldr	r3, [pc, #420]	; (b0e4 <StartFilesystemAndTest+0x258>)
    af3e:	781b      	ldrb	r3, [r3, #0]
    af40:	001a      	movs	r2, r3
    af42:	4b69      	ldr	r3, [pc, #420]	; (b0e8 <StartFilesystemAndTest+0x25c>)
    af44:	0019      	movs	r1, r3
    af46:	2000      	movs	r0, #0
    af48:	4b68      	ldr	r3, [pc, #416]	; (b0ec <StartFilesystemAndTest+0x260>)
    af4a:	4798      	blx	r3
            sdCardPass = false;
    af4c:	2310      	movs	r3, #16
    af4e:	33ff      	adds	r3, #255	; 0xff
    af50:	18fb      	adds	r3, r7, r3
    af52:	2200      	movs	r2, #0
    af54:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    af56:	e09f      	b.n	b098 <StartFilesystemAndTest+0x20c>
        }
        SerialConsoleWriteString("[OK]\r\n");
    af58:	4b65      	ldr	r3, [pc, #404]	; (b0f0 <StartFilesystemAndTest+0x264>)
    af5a:	0018      	movs	r0, r3
    af5c:	4b5c      	ldr	r3, [pc, #368]	; (b0d0 <StartFilesystemAndTest+0x244>)
    af5e:	4798      	blx	r3

        // Create and open a file
        SerialConsoleWriteString("Create a file (f_open)...\r\n");
    af60:	4b64      	ldr	r3, [pc, #400]	; (b0f4 <StartFilesystemAndTest+0x268>)
    af62:	0018      	movs	r0, r3
    af64:	4b5a      	ldr	r3, [pc, #360]	; (b0d0 <StartFilesystemAndTest+0x244>)
    af66:	4798      	blx	r3

        test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    af68:	4b63      	ldr	r3, [pc, #396]	; (b0f8 <StartFilesystemAndTest+0x26c>)
    af6a:	2230      	movs	r2, #48	; 0x30
    af6c:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    af6e:	4962      	ldr	r1, [pc, #392]	; (b0f8 <StartFilesystemAndTest+0x26c>)
    af70:	4b62      	ldr	r3, [pc, #392]	; (b0fc <StartFilesystemAndTest+0x270>)
    af72:	220a      	movs	r2, #10
    af74:	0018      	movs	r0, r3
    af76:	4b62      	ldr	r3, [pc, #392]	; (b100 <StartFilesystemAndTest+0x274>)
    af78:	4798      	blx	r3
    af7a:	0003      	movs	r3, r0
    af7c:	001a      	movs	r2, r3
    af7e:	4b59      	ldr	r3, [pc, #356]	; (b0e4 <StartFilesystemAndTest+0x258>)
    af80:	701a      	strb	r2, [r3, #0]

        if (res != FR_OK) {
    af82:	4b58      	ldr	r3, [pc, #352]	; (b0e4 <StartFilesystemAndTest+0x258>)
    af84:	781b      	ldrb	r3, [r3, #0]
    af86:	2b00      	cmp	r3, #0
    af88:	d00d      	beq.n	afa6 <StartFilesystemAndTest+0x11a>
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    af8a:	4b56      	ldr	r3, [pc, #344]	; (b0e4 <StartFilesystemAndTest+0x258>)
    af8c:	781b      	ldrb	r3, [r3, #0]
    af8e:	001a      	movs	r2, r3
    af90:	4b55      	ldr	r3, [pc, #340]	; (b0e8 <StartFilesystemAndTest+0x25c>)
    af92:	0019      	movs	r1, r3
    af94:	2000      	movs	r0, #0
    af96:	4b55      	ldr	r3, [pc, #340]	; (b0ec <StartFilesystemAndTest+0x260>)
    af98:	4798      	blx	r3
            sdCardPass = false;
    af9a:	2310      	movs	r3, #16
    af9c:	33ff      	adds	r3, #255	; 0xff
    af9e:	18fb      	adds	r3, r7, r3
    afa0:	2200      	movs	r2, #0
    afa2:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    afa4:	e078      	b.n	b098 <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    afa6:	4b52      	ldr	r3, [pc, #328]	; (b0f0 <StartFilesystemAndTest+0x264>)
    afa8:	0018      	movs	r0, r3
    afaa:	4b49      	ldr	r3, [pc, #292]	; (b0d0 <StartFilesystemAndTest+0x244>)
    afac:	4798      	blx	r3

        // Write to a file
        SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    afae:	4b55      	ldr	r3, [pc, #340]	; (b104 <StartFilesystemAndTest+0x278>)
    afb0:	0018      	movs	r0, r3
    afb2:	4b47      	ldr	r3, [pc, #284]	; (b0d0 <StartFilesystemAndTest+0x244>)
    afb4:	4798      	blx	r3

        if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
    afb6:	4a51      	ldr	r2, [pc, #324]	; (b0fc <StartFilesystemAndTest+0x270>)
    afb8:	4b53      	ldr	r3, [pc, #332]	; (b108 <StartFilesystemAndTest+0x27c>)
    afba:	0011      	movs	r1, r2
    afbc:	0018      	movs	r0, r3
    afbe:	4b53      	ldr	r3, [pc, #332]	; (b10c <StartFilesystemAndTest+0x280>)
    afc0:	4798      	blx	r3
    afc2:	1e03      	subs	r3, r0, #0
    afc4:	d10e      	bne.n	afe4 <StartFilesystemAndTest+0x158>
            f_close(&file_object);
    afc6:	4b4d      	ldr	r3, [pc, #308]	; (b0fc <StartFilesystemAndTest+0x270>)
    afc8:	0018      	movs	r0, r3
    afca:	4b51      	ldr	r3, [pc, #324]	; (b110 <StartFilesystemAndTest+0x284>)
    afcc:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    afce:	4b51      	ldr	r3, [pc, #324]	; (b114 <StartFilesystemAndTest+0x288>)
    afd0:	0019      	movs	r1, r3
    afd2:	2000      	movs	r0, #0
    afd4:	4b45      	ldr	r3, [pc, #276]	; (b0ec <StartFilesystemAndTest+0x260>)
    afd6:	4798      	blx	r3
            sdCardPass = false;
    afd8:	2310      	movs	r3, #16
    afda:	33ff      	adds	r3, #255	; 0xff
    afdc:	18fb      	adds	r3, r7, r3
    afde:	2200      	movs	r2, #0
    afe0:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    afe2:	e059      	b.n	b098 <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    afe4:	4b42      	ldr	r3, [pc, #264]	; (b0f0 <StartFilesystemAndTest+0x264>)
    afe6:	0018      	movs	r0, r3
    afe8:	4b39      	ldr	r3, [pc, #228]	; (b0d0 <StartFilesystemAndTest+0x244>)
    afea:	4798      	blx	r3
        f_close(&file_object);   // Close file
    afec:	4b43      	ldr	r3, [pc, #268]	; (b0fc <StartFilesystemAndTest+0x270>)
    afee:	0018      	movs	r0, r3
    aff0:	4b47      	ldr	r3, [pc, #284]	; (b110 <StartFilesystemAndTest+0x284>)
    aff2:	4798      	blx	r3
        SerialConsoleWriteString("Test is successful.\n\r");
    aff4:	4b48      	ldr	r3, [pc, #288]	; (b118 <StartFilesystemAndTest+0x28c>)
    aff6:	0018      	movs	r0, r3
    aff8:	4b35      	ldr	r3, [pc, #212]	; (b0d0 <StartFilesystemAndTest+0x244>)
    affa:	4798      	blx	r3

        // Write binary file
        // Read SD Card File
        test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    affc:	4b47      	ldr	r3, [pc, #284]	; (b11c <StartFilesystemAndTest+0x290>)
    affe:	2230      	movs	r2, #48	; 0x30
    b000:	701a      	strb	r2, [r3, #0]
        res = f_open(&file_object, (char const *) test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    b002:	4946      	ldr	r1, [pc, #280]	; (b11c <StartFilesystemAndTest+0x290>)
    b004:	4b3d      	ldr	r3, [pc, #244]	; (b0fc <StartFilesystemAndTest+0x270>)
    b006:	220a      	movs	r2, #10
    b008:	0018      	movs	r0, r3
    b00a:	4b3d      	ldr	r3, [pc, #244]	; (b100 <StartFilesystemAndTest+0x274>)
    b00c:	4798      	blx	r3
    b00e:	0003      	movs	r3, r0
    b010:	001a      	movs	r2, r3
    b012:	4b34      	ldr	r3, [pc, #208]	; (b0e4 <StartFilesystemAndTest+0x258>)
    b014:	701a      	strb	r2, [r3, #0]

        if (res != FR_OK) {
    b016:	4b33      	ldr	r3, [pc, #204]	; (b0e4 <StartFilesystemAndTest+0x258>)
    b018:	781b      	ldrb	r3, [r3, #0]
    b01a:	2b00      	cmp	r3, #0
    b01c:	d011      	beq.n	b042 <StartFilesystemAndTest+0x1b6>
            SerialConsoleWriteString("Could not open binary file!\r\n");
    b01e:	4b40      	ldr	r3, [pc, #256]	; (b120 <StartFilesystemAndTest+0x294>)
    b020:	0018      	movs	r0, r3
    b022:	4b2b      	ldr	r3, [pc, #172]	; (b0d0 <StartFilesystemAndTest+0x244>)
    b024:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    b026:	4b2f      	ldr	r3, [pc, #188]	; (b0e4 <StartFilesystemAndTest+0x258>)
    b028:	781b      	ldrb	r3, [r3, #0]
    b02a:	001a      	movs	r2, r3
    b02c:	4b2e      	ldr	r3, [pc, #184]	; (b0e8 <StartFilesystemAndTest+0x25c>)
    b02e:	0019      	movs	r1, r3
    b030:	2000      	movs	r0, #0
    b032:	4b2e      	ldr	r3, [pc, #184]	; (b0ec <StartFilesystemAndTest+0x260>)
    b034:	4798      	blx	r3
            sdCardPass = false;
    b036:	2310      	movs	r3, #16
    b038:	33ff      	adds	r3, #255	; 0xff
    b03a:	18fb      	adds	r3, r7, r3
    b03c:	2200      	movs	r2, #0
    b03e:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b040:	e02a      	b.n	b098 <StartFilesystemAndTest+0x20c>
        }

        // Write to a binaryfile
        SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    b042:	4b38      	ldr	r3, [pc, #224]	; (b124 <StartFilesystemAndTest+0x298>)
    b044:	0018      	movs	r0, r3
    b046:	4b22      	ldr	r3, [pc, #136]	; (b0d0 <StartFilesystemAndTest+0x244>)
    b048:	4798      	blx	r3
        uint32_t varWrite = 0;
    b04a:	2300      	movs	r3, #0
    b04c:	603b      	str	r3, [r7, #0]
        if (0 != f_write(&file_object, binbuff, 256, &varWrite)) {
    b04e:	003c      	movs	r4, r7
    b050:	2380      	movs	r3, #128	; 0x80
    b052:	005a      	lsls	r2, r3, #1
    b054:	1d39      	adds	r1, r7, #4
    b056:	4829      	ldr	r0, [pc, #164]	; (b0fc <StartFilesystemAndTest+0x270>)
    b058:	0023      	movs	r3, r4
    b05a:	4c33      	ldr	r4, [pc, #204]	; (b128 <StartFilesystemAndTest+0x29c>)
    b05c:	47a0      	blx	r4
    b05e:	1e03      	subs	r3, r0, #0
    b060:	d00e      	beq.n	b080 <StartFilesystemAndTest+0x1f4>
            f_close(&file_object);
    b062:	4b26      	ldr	r3, [pc, #152]	; (b0fc <StartFilesystemAndTest+0x270>)
    b064:	0018      	movs	r0, r3
    b066:	4b2a      	ldr	r3, [pc, #168]	; (b110 <StartFilesystemAndTest+0x284>)
    b068:	4798      	blx	r3
            LogMessage(LOG_INFO_LVL, "[FAIL]\r\n");
    b06a:	4b2a      	ldr	r3, [pc, #168]	; (b114 <StartFilesystemAndTest+0x288>)
    b06c:	0019      	movs	r1, r3
    b06e:	2000      	movs	r0, #0
    b070:	4b1e      	ldr	r3, [pc, #120]	; (b0ec <StartFilesystemAndTest+0x260>)
    b072:	4798      	blx	r3
            sdCardPass = false;
    b074:	2310      	movs	r3, #16
    b076:	33ff      	adds	r3, #255	; 0xff
    b078:	18fb      	adds	r3, r7, r3
    b07a:	2200      	movs	r2, #0
    b07c:	701a      	strb	r2, [r3, #0]
            goto main_end_of_test;
    b07e:	e00b      	b.n	b098 <StartFilesystemAndTest+0x20c>
        }

        SerialConsoleWriteString("[OK]\r\n");
    b080:	4b1b      	ldr	r3, [pc, #108]	; (b0f0 <StartFilesystemAndTest+0x264>)
    b082:	0018      	movs	r0, r3
    b084:	4b12      	ldr	r3, [pc, #72]	; (b0d0 <StartFilesystemAndTest+0x244>)
    b086:	4798      	blx	r3
        f_close(&file_object);   // Close file
    b088:	4b1c      	ldr	r3, [pc, #112]	; (b0fc <StartFilesystemAndTest+0x270>)
    b08a:	0018      	movs	r0, r3
    b08c:	4b20      	ldr	r3, [pc, #128]	; (b110 <StartFilesystemAndTest+0x284>)
    b08e:	4798      	blx	r3
        SerialConsoleWriteString("Test is successful.\n\r");
    b090:	4b21      	ldr	r3, [pc, #132]	; (b118 <StartFilesystemAndTest+0x28c>)
    b092:	0018      	movs	r0, r3
    b094:	4b0e      	ldr	r3, [pc, #56]	; (b0d0 <StartFilesystemAndTest+0x244>)
    b096:	4798      	blx	r3

    main_end_of_test:
        SerialConsoleWriteString("End of Test.\n\r");
    b098:	4b24      	ldr	r3, [pc, #144]	; (b12c <StartFilesystemAndTest+0x2a0>)
    b09a:	0018      	movs	r0, r3
    b09c:	4b0c      	ldr	r3, [pc, #48]	; (b0d0 <StartFilesystemAndTest+0x244>)
    b09e:	4798      	blx	r3
    b0a0:	e008      	b.n	b0b4 <StartFilesystemAndTest+0x228>

    } else {
        SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    b0a2:	4b23      	ldr	r3, [pc, #140]	; (b130 <StartFilesystemAndTest+0x2a4>)
    b0a4:	0018      	movs	r0, r3
    b0a6:	4b0a      	ldr	r3, [pc, #40]	; (b0d0 <StartFilesystemAndTest+0x244>)
    b0a8:	4798      	blx	r3
        sdCardPass = false;
    b0aa:	2310      	movs	r3, #16
    b0ac:	33ff      	adds	r3, #255	; 0xff
    b0ae:	18fb      	adds	r3, r7, r3
    b0b0:	2200      	movs	r2, #0
    b0b2:	701a      	strb	r2, [r3, #0]
    }

    return sdCardPass;
    b0b4:	2310      	movs	r3, #16
    b0b6:	33ff      	adds	r3, #255	; 0xff
    b0b8:	18fb      	adds	r3, r7, r3
    b0ba:	781b      	ldrb	r3, [r3, #0]
}
    b0bc:	0018      	movs	r0, r3
    b0be:	46bd      	mov	sp, r7
    b0c0:	b045      	add	sp, #276	; 0x114
    b0c2:	bd90      	pop	{r4, r7, pc}
    b0c4:	fffffef4 	.word	0xfffffef4
    b0c8:	00000a2d 	.word	0x00000a2d
    b0cc:	0000c970 	.word	0x0000c970
    b0d0:	00000fd9 	.word	0x00000fd9
    b0d4:	0000c990 	.word	0x0000c990
    b0d8:	20000a34 	.word	0x20000a34
    b0dc:	0000b873 	.word	0x0000b873
    b0e0:	00009a95 	.word	0x00009a95
    b0e4:	20000dbe 	.word	0x20000dbe
    b0e8:	0000c9ac 	.word	0x0000c9ac
    b0ec:	00001065 	.word	0x00001065
    b0f0:	0000c9bc 	.word	0x0000c9bc
    b0f4:	0000c9c4 	.word	0x0000c9c4
    b0f8:	2000000c 	.word	0x2000000c
    b0fc:	20000c64 	.word	0x20000c64
    b100:	00009aed 	.word	0x00009aed
    b104:	0000c9e0 	.word	0x0000c9e0
    b108:	0000ca04 	.word	0x0000ca04
    b10c:	0000aa6d 	.word	0x0000aa6d
    b110:	0000a789 	.word	0x0000a789
    b114:	0000ca18 	.word	0x0000ca18
    b118:	0000ca24 	.word	0x0000ca24
    b11c:	20000020 	.word	0x20000020
    b120:	0000ca3c 	.word	0x0000ca3c
    b124:	0000ca5c 	.word	0x0000ca5c
    b128:	0000a2b9 	.word	0x0000a2b9
    b12c:	0000ca80 	.word	0x0000ca80
    b130:	0000ca90 	.word	0x0000ca90

0000b134 <jumpToApplication>:
 * @brief        Jumps to main application
 * @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
 *				before performing the jump!
 * @return
 ******************************************************************************/
static void jumpToApplication(void) {
    b134:	b580      	push	{r7, lr}
    b136:	b082      	sub	sp, #8
    b138:	af00      	add	r7, sp, #0
    // Function pointer to application section
    void (*applicationCodeEntry)(void);

    // Rebase stack pointer
    __set_MSP(*(uint32_t *) APP_START_ADDRESS);
    b13a:	2390      	movs	r3, #144	; 0x90
    b13c:	025b      	lsls	r3, r3, #9
    b13e:	681b      	ldr	r3, [r3, #0]
    b140:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    b142:	683b      	ldr	r3, [r7, #0]
    b144:	f383 8808 	msr	MSP, r3

    // Rebase vector table
    SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    b148:	4b06      	ldr	r3, [pc, #24]	; (b164 <jumpToApplication+0x30>)
    b14a:	2290      	movs	r2, #144	; 0x90
    b14c:	0252      	lsls	r2, r2, #9
    b14e:	609a      	str	r2, [r3, #8]

    // Set pointer to application section
    applicationCodeEntry = (void (*)(void))(unsigned *) (*(unsigned *) (APP_START_RESET_VEC_ADDRESS));
    b150:	4b05      	ldr	r3, [pc, #20]	; (b168 <jumpToApplication+0x34>)
    b152:	681b      	ldr	r3, [r3, #0]
    b154:	607b      	str	r3, [r7, #4]

    // Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry,
    // which should be the start of the main FW.
    applicationCodeEntry();
    b156:	687b      	ldr	r3, [r7, #4]
    b158:	4798      	blx	r3
}
    b15a:	46c0      	nop			; (mov r8, r8)
    b15c:	46bd      	mov	sp, r7
    b15e:	b002      	add	sp, #8
    b160:	bd80      	pop	{r7, pc}
    b162:	46c0      	nop			; (mov r8, r8)
    b164:	e000ed00 	.word	0xe000ed00
    b168:	00012004 	.word	0x00012004

0000b16c <configure_nvm>:
 * function      static void configure_nvm(void)
 * @brief        Configures the NVM driver
 * @details
 * @return
 ******************************************************************************/
static void configure_nvm(void) {
    b16c:	b580      	push	{r7, lr}
    b16e:	b082      	sub	sp, #8
    b170:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    b172:	003b      	movs	r3, r7
    b174:	0018      	movs	r0, r3
    b176:	4b06      	ldr	r3, [pc, #24]	; (b190 <configure_nvm+0x24>)
    b178:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    b17a:	003b      	movs	r3, r7
    b17c:	2200      	movs	r2, #0
    b17e:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    b180:	003b      	movs	r3, r7
    b182:	0018      	movs	r0, r3
    b184:	4b03      	ldr	r3, [pc, #12]	; (b194 <configure_nvm+0x28>)
    b186:	4798      	blx	r3
}
    b188:	46c0      	nop			; (mov r8, r8)
    b18a:	46bd      	mov	sp, r7
    b18c:	b002      	add	sp, #8
    b18e:	bd80      	pop	{r7, pc}
    b190:	0000ac3d 	.word	0x0000ac3d
    b194:	000004bd 	.word	0x000004bd

0000b198 <perform_nvm_crc>:
 * @param[in] row_number row number
 * @return enum status_code 
 * \retval STATUS_OK Data is not corrupted
 * \retval STATUS_ABORTED could not calculate CRC
 */
static enum status_code perform_nvm_crc(uint8_t *dataBuffer, int row_number){
    b198:	b590      	push	{r4, r7, lr}
    b19a:	b0c7      	sub	sp, #284	; 0x11c
    b19c:	af00      	add	r7, sp, #0
    b19e:	6078      	str	r0, [r7, #4]
    b1a0:	6039      	str	r1, [r7, #0]
    enum status_code crcResult = STATUS_ABORTED;
    b1a2:	2318      	movs	r3, #24
    b1a4:	33ff      	adds	r3, #255	; 0xff
    b1a6:	18fb      	adds	r3, r7, r3
    b1a8:	2204      	movs	r2, #4
    b1aa:	701a      	strb	r2, [r3, #0]
    uint32_t firstresultCRC = 0;
    b1ac:	2300      	movs	r3, #0
    b1ae:	2288      	movs	r2, #136	; 0x88
    b1b0:	0052      	lsls	r2, r2, #1
    b1b2:	18ba      	adds	r2, r7, r2
    b1b4:	6013      	str	r3, [r2, #0]
    uint8_t nvmBuffer[NVM_BYTES_PER_ROW];
    // Calculate CRC on the data read from SDCard
    //Before using the CRC32 on RAM, execute the following code:
    *((volatile unsigned int*) 0x41007058) &= ~0x30000UL;
    b1b6:	4b30      	ldr	r3, [pc, #192]	; (b278 <perform_nvm_crc+0xe0>)
    b1b8:	4a2f      	ldr	r2, [pc, #188]	; (b278 <perform_nvm_crc+0xe0>)
    b1ba:	6812      	ldr	r2, [r2, #0]
    b1bc:	492f      	ldr	r1, [pc, #188]	; (b27c <perform_nvm_crc+0xe4>)
    b1be:	400a      	ands	r2, r1
    b1c0:	601a      	str	r2, [r3, #0]
    enum status_code rtr_code = dsu_crc32_cal(dataBuffer, NVM_BYTES_PER_ROW, &firstresultCRC);
    b1c2:	6878      	ldr	r0, [r7, #4]
    b1c4:	238b      	movs	r3, #139	; 0x8b
    b1c6:	005b      	lsls	r3, r3, #1
    b1c8:	18fc      	adds	r4, r7, r3
    b1ca:	2388      	movs	r3, #136	; 0x88
    b1cc:	005b      	lsls	r3, r3, #1
    b1ce:	18fa      	adds	r2, r7, r3
    b1d0:	2380      	movs	r3, #128	; 0x80
    b1d2:	005b      	lsls	r3, r3, #1
    b1d4:	0019      	movs	r1, r3
    b1d6:	4b2a      	ldr	r3, [pc, #168]	; (b280 <perform_nvm_crc+0xe8>)
    b1d8:	4798      	blx	r3
    b1da:	0003      	movs	r3, r0
    b1dc:	7023      	strb	r3, [r4, #0]
    //After using the CRC32, execute the following code:
    *((volatile unsigned int*) 0x41007058) |= 0x20000UL;
    b1de:	4b26      	ldr	r3, [pc, #152]	; (b278 <perform_nvm_crc+0xe0>)
    b1e0:	4a25      	ldr	r2, [pc, #148]	; (b278 <perform_nvm_crc+0xe0>)
    b1e2:	6812      	ldr	r2, [r2, #0]
    b1e4:	2180      	movs	r1, #128	; 0x80
    b1e6:	0289      	lsls	r1, r1, #10
    b1e8:	430a      	orrs	r2, r1
    b1ea:	601a      	str	r2, [r3, #0]

    if(rtr_code != STATUS_OK){
    b1ec:	238b      	movs	r3, #139	; 0x8b
    b1ee:	005b      	lsls	r3, r3, #1
    b1f0:	18fb      	adds	r3, r7, r3
    b1f2:	781b      	ldrb	r3, [r3, #0]
    b1f4:	2b00      	cmp	r3, #0
    b1f6:	d003      	beq.n	b200 <perform_nvm_crc+0x68>
        SerialConsoleWriteString("Could not calculate CRC on Buffer Data\r\n");
    b1f8:	4b22      	ldr	r3, [pc, #136]	; (b284 <perform_nvm_crc+0xec>)
    b1fa:	0018      	movs	r0, r3
    b1fc:	4b22      	ldr	r3, [pc, #136]	; (b288 <perform_nvm_crc+0xf0>)
    b1fe:	4798      	blx	r3
    }
    // Read data from the NVM and perform CRC and check against the resultCRC
    // we need to read page by page, one page is 64 bytes, to read 256 bytes we need to read 4 times
    // Reading from the NVM memory can be performed using direct addressing into the NVM memory space, or by calling the nvm_read_buffer() function
    uint32_t secondresultCRC = 0;
    b200:	2300      	movs	r3, #0
    b202:	60fb      	str	r3, [r7, #12]
    if(rtr_code == STATUS_OK){
    b204:	238b      	movs	r3, #139	; 0x8b
    b206:	005b      	lsls	r3, r3, #1
    b208:	18fb      	adds	r3, r7, r3
    b20a:	781b      	ldrb	r3, [r3, #0]
    b20c:	2b00      	cmp	r3, #0
    b20e:	d11a      	bne.n	b246 <perform_nvm_crc+0xae>
        rtr_code = dsu_crc32_cal(APP_START_ADDRESS + row_number*NVM_BYTES_PER_ROW, NVM_BYTES_PER_ROW, &secondresultCRC);
    b210:	683b      	ldr	r3, [r7, #0]
    b212:	021b      	lsls	r3, r3, #8
    b214:	2290      	movs	r2, #144	; 0x90
    b216:	0252      	lsls	r2, r2, #9
    b218:	1898      	adds	r0, r3, r2
    b21a:	238b      	movs	r3, #139	; 0x8b
    b21c:	005b      	lsls	r3, r3, #1
    b21e:	18fc      	adds	r4, r7, r3
    b220:	230c      	movs	r3, #12
    b222:	18fa      	adds	r2, r7, r3
    b224:	2380      	movs	r3, #128	; 0x80
    b226:	005b      	lsls	r3, r3, #1
    b228:	0019      	movs	r1, r3
    b22a:	4b15      	ldr	r3, [pc, #84]	; (b280 <perform_nvm_crc+0xe8>)
    b22c:	4798      	blx	r3
    b22e:	0003      	movs	r3, r0
    b230:	7023      	strb	r3, [r4, #0]
        if(rtr_code != STATUS_OK){
    b232:	238b      	movs	r3, #139	; 0x8b
    b234:	005b      	lsls	r3, r3, #1
    b236:	18fb      	adds	r3, r7, r3
    b238:	781b      	ldrb	r3, [r3, #0]
    b23a:	2b00      	cmp	r3, #0
    b23c:	d003      	beq.n	b246 <perform_nvm_crc+0xae>
            SerialConsoleWriteString("Could not calculate CRC on NVM Data\r\n");
    b23e:	4b13      	ldr	r3, [pc, #76]	; (b28c <perform_nvm_crc+0xf4>)
    b240:	0018      	movs	r0, r3
    b242:	4b11      	ldr	r3, [pc, #68]	; (b288 <perform_nvm_crc+0xf0>)
    b244:	4798      	blx	r3
        }
    }
    if(firstresultCRC == secondresultCRC){
    b246:	2388      	movs	r3, #136	; 0x88
    b248:	005b      	lsls	r3, r3, #1
    b24a:	18fb      	adds	r3, r7, r3
    b24c:	681a      	ldr	r2, [r3, #0]
    b24e:	68fb      	ldr	r3, [r7, #12]
    b250:	429a      	cmp	r2, r3
    b252:	d105      	bne.n	b260 <perform_nvm_crc+0xc8>
        crcResult = STATUS_OK;
    b254:	2318      	movs	r3, #24
    b256:	33ff      	adds	r3, #255	; 0xff
    b258:	18fb      	adds	r3, r7, r3
    b25a:	2200      	movs	r2, #0
    b25c:	701a      	strb	r2, [r3, #0]
    b25e:	e003      	b.n	b268 <perform_nvm_crc+0xd0>
    }
    else{
        SerialConsoleWriteString("CRC did not match\r\n");
    b260:	4b0b      	ldr	r3, [pc, #44]	; (b290 <perform_nvm_crc+0xf8>)
    b262:	0018      	movs	r0, r3
    b264:	4b08      	ldr	r3, [pc, #32]	; (b288 <perform_nvm_crc+0xf0>)
    b266:	4798      	blx	r3
    }
    
    return crcResult;
    b268:	2318      	movs	r3, #24
    b26a:	33ff      	adds	r3, #255	; 0xff
    b26c:	18fb      	adds	r3, r7, r3
    b26e:	781b      	ldrb	r3, [r3, #0]
}
    b270:	0018      	movs	r0, r3
    b272:	46bd      	mov	sp, r7
    b274:	b047      	add	sp, #284	; 0x11c
    b276:	bd90      	pop	{r4, r7, pc}
    b278:	41007058 	.word	0x41007058
    b27c:	fffcffff 	.word	0xfffcffff
    b280:	00000381 	.word	0x00000381
    b284:	0000cac0 	.word	0x0000cac0
    b288:	00000fd9 	.word	0x00000fd9
    b28c:	0000caec 	.word	0x0000caec
    b290:	0000cb14 	.word	0x0000cb14

0000b294 <write_nvm>:
 * @param[in] buffer data to write
 * @return enum status_code 
 * \retval STATUS_ABORTED 
 * \retval STATUS_OK
 */
static enum status_code write_nvm(int row_number, uint8_t *buffer){
    b294:	b590      	push	{r4, r7, lr}
    b296:	b085      	sub	sp, #20
    b298:	af00      	add	r7, sp, #0
    b29a:	6078      	str	r0, [r7, #4]
    b29c:	6039      	str	r1, [r7, #0]
    enum status_code rtr_code = STATUS_ABORTED;
    b29e:	230f      	movs	r3, #15
    b2a0:	18fb      	adds	r3, r7, r3
    b2a2:	2204      	movs	r2, #4
    b2a4:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<4;i++){
    b2a6:	2300      	movs	r3, #0
    b2a8:	60bb      	str	r3, [r7, #8]
    b2aa:	e022      	b.n	b2f2 <write_nvm+0x5e>
        rtr_code = nvm_write_buffer(APP_START_ADDRESS + row_number*NVM_BYTES_PER_ROW + NVMCTRL_PAGE_SIZE*i, buffer + i*NVMCTRL_PAGE_SIZE, NVMCTRL_PAGE_SIZE);
    b2ac:	687b      	ldr	r3, [r7, #4]
    b2ae:	021b      	lsls	r3, r3, #8
    b2b0:	001a      	movs	r2, r3
    b2b2:	68bb      	ldr	r3, [r7, #8]
    b2b4:	019b      	lsls	r3, r3, #6
    b2b6:	18d3      	adds	r3, r2, r3
    b2b8:	2290      	movs	r2, #144	; 0x90
    b2ba:	0252      	lsls	r2, r2, #9
    b2bc:	1898      	adds	r0, r3, r2
    b2be:	68bb      	ldr	r3, [r7, #8]
    b2c0:	019b      	lsls	r3, r3, #6
    b2c2:	001a      	movs	r2, r3
    b2c4:	683b      	ldr	r3, [r7, #0]
    b2c6:	189b      	adds	r3, r3, r2
    b2c8:	220f      	movs	r2, #15
    b2ca:	18bc      	adds	r4, r7, r2
    b2cc:	2240      	movs	r2, #64	; 0x40
    b2ce:	0019      	movs	r1, r3
    b2d0:	4b0d      	ldr	r3, [pc, #52]	; (b308 <write_nvm+0x74>)
    b2d2:	4798      	blx	r3
    b2d4:	0003      	movs	r3, r0
    b2d6:	7023      	strb	r3, [r4, #0]
        if(rtr_code != STATUS_OK){
    b2d8:	230f      	movs	r3, #15
    b2da:	18fb      	adds	r3, r7, r3
    b2dc:	781b      	ldrb	r3, [r3, #0]
    b2de:	2b00      	cmp	r3, #0
    b2e0:	d004      	beq.n	b2ec <write_nvm+0x58>
            SerialConsoleWriteString("Failed To write NVM\r\n");
    b2e2:	4b0a      	ldr	r3, [pc, #40]	; (b30c <write_nvm+0x78>)
    b2e4:	0018      	movs	r0, r3
    b2e6:	4b0a      	ldr	r3, [pc, #40]	; (b310 <write_nvm+0x7c>)
    b2e8:	4798      	blx	r3
            break;
    b2ea:	e005      	b.n	b2f8 <write_nvm+0x64>
    for(int i=0;i<4;i++){
    b2ec:	68bb      	ldr	r3, [r7, #8]
    b2ee:	3301      	adds	r3, #1
    b2f0:	60bb      	str	r3, [r7, #8]
    b2f2:	68bb      	ldr	r3, [r7, #8]
    b2f4:	2b03      	cmp	r3, #3
    b2f6:	ddd9      	ble.n	b2ac <write_nvm+0x18>
        }
    }
    return rtr_code;
    b2f8:	230f      	movs	r3, #15
    b2fa:	18fb      	adds	r3, r7, r3
    b2fc:	781b      	ldrb	r3, [r3, #0]
}
    b2fe:	0018      	movs	r0, r3
    b300:	46bd      	mov	sp, r7
    b302:	b005      	add	sp, #20
    b304:	bd90      	pop	{r4, r7, pc}
    b306:	46c0      	nop			; (mov r8, r8)
    b308:	000006ad 	.word	0x000006ad
    b30c:	0000cb28 	.word	0x0000cb28
    b310:	00000fd9 	.word	0x00000fd9

0000b314 <erase_nvm>:
 * @brief Erases NVM
 * Erases one row in NVM from nvm_addr
 * @param[in] row_number Row number to erase
 * @return enum status_code 
 */
static enum status_code erase_nvm(int row_number){
    b314:	b590      	push	{r4, r7, lr}
    b316:	b087      	sub	sp, #28
    b318:	af00      	add	r7, sp, #0
    b31a:	6078      	str	r0, [r7, #4]
    enum status_code rtr_code = nvm_erase_row(APP_START_ADDRESS + row_number*NVM_BYTES_PER_ROW);
    b31c:	687b      	ldr	r3, [r7, #4]
    b31e:	021b      	lsls	r3, r3, #8
    b320:	2290      	movs	r2, #144	; 0x90
    b322:	0252      	lsls	r2, r2, #9
    b324:	4694      	mov	ip, r2
    b326:	4463      	add	r3, ip
    b328:	2217      	movs	r2, #23
    b32a:	18bc      	adds	r4, r7, r2
    b32c:	0018      	movs	r0, r3
    b32e:	4b20      	ldr	r3, [pc, #128]	; (b3b0 <erase_nvm+0x9c>)
    b330:	4798      	blx	r3
    b332:	0003      	movs	r3, r0
    b334:	7023      	strb	r3, [r4, #0]
    char erased_byte_NVM = 0xFF;
    b336:	230f      	movs	r3, #15
    b338:	18fb      	adds	r3, r7, r3
    b33a:	22ff      	movs	r2, #255	; 0xff
    b33c:	701a      	strb	r2, [r3, #0]
    if(rtr_code!=STATUS_OK){
    b33e:	2317      	movs	r3, #23
    b340:	18fb      	adds	r3, r7, r3
    b342:	781b      	ldrb	r3, [r3, #0]
    b344:	2b00      	cmp	r3, #0
    b346:	d003      	beq.n	b350 <erase_nvm+0x3c>
            SerialConsoleWriteString("Error While erasing data\r\n");
    b348:	4b1a      	ldr	r3, [pc, #104]	; (b3b4 <erase_nvm+0xa0>)
    b34a:	0018      	movs	r0, r3
    b34c:	4b1a      	ldr	r3, [pc, #104]	; (b3b8 <erase_nvm+0xa4>)
    b34e:	4798      	blx	r3
    }
    // Reading from the NVM memory can be performed using direct addressing into the NVM memory space
    // reading each bytes in the row
    if(rtr_code!=STATUS_OK){
    b350:	2317      	movs	r3, #23
    b352:	18fb      	adds	r3, r7, r3
    b354:	781b      	ldrb	r3, [r3, #0]
    b356:	2b00      	cmp	r3, #0
    b358:	d022      	beq.n	b3a0 <erase_nvm+0x8c>
        for(int i=0;i<NVM_BYTES_PER_ROW;i++){
    b35a:	2300      	movs	r3, #0
    b35c:	613b      	str	r3, [r7, #16]
    b35e:	e01c      	b.n	b39a <erase_nvm+0x86>
            char *a = (char *)(APP_START_ADDRESS + i + (row_number*NVM_BYTES_PER_ROW));
    b360:	687b      	ldr	r3, [r7, #4]
    b362:	021b      	lsls	r3, r3, #8
    b364:	001a      	movs	r2, r3
    b366:	693b      	ldr	r3, [r7, #16]
    b368:	18d3      	adds	r3, r2, r3
    b36a:	2290      	movs	r2, #144	; 0x90
    b36c:	0252      	lsls	r2, r2, #9
    b36e:	4694      	mov	ip, r2
    b370:	4463      	add	r3, ip
    b372:	60bb      	str	r3, [r7, #8]
            if(*a != erased_byte_NVM){
    b374:	68bb      	ldr	r3, [r7, #8]
    b376:	781b      	ldrb	r3, [r3, #0]
    b378:	220f      	movs	r2, #15
    b37a:	18ba      	adds	r2, r7, r2
    b37c:	7812      	ldrb	r2, [r2, #0]
    b37e:	429a      	cmp	r2, r3
    b380:	d008      	beq.n	b394 <erase_nvm+0x80>
                SerialConsoleWriteString("Page not erased\r\n");
    b382:	4b0e      	ldr	r3, [pc, #56]	; (b3bc <erase_nvm+0xa8>)
    b384:	0018      	movs	r0, r3
    b386:	4b0c      	ldr	r3, [pc, #48]	; (b3b8 <erase_nvm+0xa4>)
    b388:	4798      	blx	r3
                rtr_code = STATUS_ABORTED;
    b38a:	2317      	movs	r3, #23
    b38c:	18fb      	adds	r3, r7, r3
    b38e:	2204      	movs	r2, #4
    b390:	701a      	strb	r2, [r3, #0]
                break;
    b392:	e005      	b.n	b3a0 <erase_nvm+0x8c>
        for(int i=0;i<NVM_BYTES_PER_ROW;i++){
    b394:	693b      	ldr	r3, [r7, #16]
    b396:	3301      	adds	r3, #1
    b398:	613b      	str	r3, [r7, #16]
    b39a:	693b      	ldr	r3, [r7, #16]
    b39c:	2bff      	cmp	r3, #255	; 0xff
    b39e:	dddf      	ble.n	b360 <erase_nvm+0x4c>
            }
        }
    }
    return rtr_code;
    b3a0:	2317      	movs	r3, #23
    b3a2:	18fb      	adds	r3, r7, r3
    b3a4:	781b      	ldrb	r3, [r3, #0]
}
    b3a6:	0018      	movs	r0, r3
    b3a8:	46bd      	mov	sp, r7
    b3aa:	b007      	add	sp, #28
    b3ac:	bd90      	pop	{r4, r7, pc}
    b3ae:	46c0      	nop			; (mov r8, r8)
    b3b0:	000007f9 	.word	0x000007f9
    b3b4:	0000cb40 	.word	0x0000cb40
    b3b8:	00000fd9 	.word	0x00000fd9
    b3bc:	0000cb5c 	.word	0x0000cb5c

0000b3c0 <flash_bin>:
 * @brief Flashes the bin file
 * 
 * @param[in] bin_to_flash Bin File name to flash
 * @return enum status_code 
 */
static enum status_code flash_bin(char *bin_to_flash){
    b3c0:	b590      	push	{r4, r7, lr}
    b3c2:	b09b      	sub	sp, #108	; 0x6c
    b3c4:	af00      	add	r7, sp, #0
    b3c6:	6078      	str	r0, [r7, #4]
    const uint32_t len = NVM_BYTES_PER_ROW;
    b3c8:	2380      	movs	r3, #128	; 0x80
    b3ca:	005b      	lsls	r3, r3, #1
    b3cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    char h[64];
    enum status_code rtr_code = STATUS_ABORTED;
    b3ce:	2367      	movs	r3, #103	; 0x67
    b3d0:	18fb      	adds	r3, r7, r3
    b3d2:	2204      	movs	r2, #4
    b3d4:	701a      	strb	r2, [r3, #0]
    res = f_open(&file_object, (char const *)bin_to_flash, FA_READ);		
    b3d6:	6879      	ldr	r1, [r7, #4]
    b3d8:	4b2e      	ldr	r3, [pc, #184]	; (b494 <flash_bin+0xd4>)
    b3da:	2201      	movs	r2, #1
    b3dc:	0018      	movs	r0, r3
    b3de:	4b2e      	ldr	r3, [pc, #184]	; (b498 <flash_bin+0xd8>)
    b3e0:	4798      	blx	r3
    b3e2:	0003      	movs	r3, r0
    b3e4:	001a      	movs	r2, r3
    b3e6:	4b2d      	ldr	r3, [pc, #180]	; (b49c <flash_bin+0xdc>)
    b3e8:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)
    b3ea:	4b2c      	ldr	r3, [pc, #176]	; (b49c <flash_bin+0xdc>)
    b3ec:	781b      	ldrb	r3, [r3, #0]
    b3ee:	2b00      	cmp	r3, #0
    b3f0:	d004      	beq.n	b3fc <flash_bin+0x3c>
	{
		SerialConsoleWriteString("Could not open bin file!\r\n");
    b3f2:	4b2b      	ldr	r3, [pc, #172]	; (b4a0 <flash_bin+0xe0>)
    b3f4:	0018      	movs	r0, r3
    b3f6:	4b2b      	ldr	r3, [pc, #172]	; (b4a4 <flash_bin+0xe4>)
    b3f8:	4798      	blx	r3
    b3fa:	e040      	b.n	b47e <flash_bin+0xbe>
	}
    else{
        uint32_t size_of_bin = (uint32_t)f_size(&file_object);
    b3fc:	4b25      	ldr	r3, [pc, #148]	; (b494 <flash_bin+0xd4>)
    b3fe:	68db      	ldr	r3, [r3, #12]
    b400:	65bb      	str	r3, [r7, #88]	; 0x58
        for(uint32_t i=0; i<128;i++){
    b402:	2300      	movs	r3, #0
    b404:	663b      	str	r3, [r7, #96]	; 0x60
    b406:	e037      	b.n	b478 <flash_bin+0xb8>

            uint32_t readBytes = 0, bytesLeft = len, BufferOffset = 0;
    b408:	2300      	movs	r3, #0
    b40a:	60fb      	str	r3, [r7, #12]
    b40c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b40e:	657b      	str	r3, [r7, #84]	; 0x54
    b410:	2300      	movs	r3, #0
    b412:	653b      	str	r3, [r7, #80]	; 0x50

            res = f_read(&file_object, readBuffer, bytesLeft, &readBytes);
    b414:	230c      	movs	r3, #12
    b416:	18fb      	adds	r3, r7, r3
    b418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    b41a:	4923      	ldr	r1, [pc, #140]	; (b4a8 <flash_bin+0xe8>)
    b41c:	481d      	ldr	r0, [pc, #116]	; (b494 <flash_bin+0xd4>)
    b41e:	4c23      	ldr	r4, [pc, #140]	; (b4ac <flash_bin+0xec>)
    b420:	47a0      	blx	r4
    b422:	0003      	movs	r3, r0
    b424:	001a      	movs	r2, r3
    b426:	4b1d      	ldr	r3, [pc, #116]	; (b49c <flash_bin+0xdc>)
    b428:	701a      	strb	r2, [r3, #0]

            if(res != FR_OK){
    b42a:	4b1c      	ldr	r3, [pc, #112]	; (b49c <flash_bin+0xdc>)
    b42c:	781b      	ldrb	r3, [r3, #0]
    b42e:	2b00      	cmp	r3, #0
    b430:	d003      	beq.n	b43a <flash_bin+0x7a>
                SerialConsoleWriteString("Bin Read Failed!\r\n");
    b432:	4b1f      	ldr	r3, [pc, #124]	; (b4b0 <flash_bin+0xf0>)
    b434:	0018      	movs	r0, r3
    b436:	4b1b      	ldr	r3, [pc, #108]	; (b4a4 <flash_bin+0xe4>)
    b438:	4798      	blx	r3
            }
            // Erase NVM
            rtr_code = erase_nvm(i);
    b43a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    b43c:	2267      	movs	r2, #103	; 0x67
    b43e:	18bc      	adds	r4, r7, r2
    b440:	0018      	movs	r0, r3
    b442:	4b1c      	ldr	r3, [pc, #112]	; (b4b4 <flash_bin+0xf4>)
    b444:	4798      	blx	r3
    b446:	0003      	movs	r3, r0
    b448:	7023      	strb	r3, [r4, #0]
            if(rtr_code==STATUS_OK){
                SerialConsoleWriteString("Memory Erased \r\n");
            }
            #endif
            // Write BIN to NVM
            rtr_code = write_nvm(i, readBuffer);
    b44a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    b44c:	2267      	movs	r2, #103	; 0x67
    b44e:	18bc      	adds	r4, r7, r2
    b450:	4a15      	ldr	r2, [pc, #84]	; (b4a8 <flash_bin+0xe8>)
    b452:	0011      	movs	r1, r2
    b454:	0018      	movs	r0, r3
    b456:	4b18      	ldr	r3, [pc, #96]	; (b4b8 <flash_bin+0xf8>)
    b458:	4798      	blx	r3
    b45a:	0003      	movs	r3, r0
    b45c:	7023      	strb	r3, [r4, #0]
                SerialConsoleWriteString("Bin Written to NVM\r\n");
                
            }
            #endif
            // Perform CRC on the NVM
            rtr_code = perform_nvm_crc(readBuffer, i);
    b45e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    b460:	2367      	movs	r3, #103	; 0x67
    b462:	18fc      	adds	r4, r7, r3
    b464:	4b10      	ldr	r3, [pc, #64]	; (b4a8 <flash_bin+0xe8>)
    b466:	0011      	movs	r1, r2
    b468:	0018      	movs	r0, r3
    b46a:	4b14      	ldr	r3, [pc, #80]	; (b4bc <flash_bin+0xfc>)
    b46c:	4798      	blx	r3
    b46e:	0003      	movs	r3, r0
    b470:	7023      	strb	r3, [r4, #0]
        for(uint32_t i=0; i<128;i++){
    b472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    b474:	3301      	adds	r3, #1
    b476:	663b      	str	r3, [r7, #96]	; 0x60
    b478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    b47a:	2b7f      	cmp	r3, #127	; 0x7f
    b47c:	d9c4      	bls.n	b408 <flash_bin+0x48>
            snprintf(h,63,"Number of Rows %d\r\n", i);
            SerialConsoleWriteString(h);
            #endif
        }
    }
    f_close(&file_object);
    b47e:	4b05      	ldr	r3, [pc, #20]	; (b494 <flash_bin+0xd4>)
    b480:	0018      	movs	r0, r3
    b482:	4b0f      	ldr	r3, [pc, #60]	; (b4c0 <flash_bin+0x100>)
    b484:	4798      	blx	r3
    return rtr_code;
    b486:	2367      	movs	r3, #103	; 0x67
    b488:	18fb      	adds	r3, r7, r3
    b48a:	781b      	ldrb	r3, [r3, #0]
}
    b48c:	0018      	movs	r0, r3
    b48e:	46bd      	mov	sp, r7
    b490:	b01b      	add	sp, #108	; 0x6c
    b492:	bd90      	pop	{r4, r7, pc}
    b494:	20000c64 	.word	0x20000c64
    b498:	00009aed 	.word	0x00009aed
    b49c:	20000dbe 	.word	0x20000dbe
    b4a0:	0000cb70 	.word	0x0000cb70
    b4a4:	00000fd9 	.word	0x00000fd9
    b4a8:	20000cbc 	.word	0x20000cbc
    b4ac:	0000a01d 	.word	0x0000a01d
    b4b0:	0000cb8c 	.word	0x0000cb8c
    b4b4:	0000b315 	.word	0x0000b315
    b4b8:	0000b295 	.word	0x0000b295
    b4bc:	0000b199 	.word	0x0000b199
    b4c0:	0000a789 	.word	0x0000a789

0000b4c4 <__udivsi3>:
    b4c4:	2200      	movs	r2, #0
    b4c6:	0843      	lsrs	r3, r0, #1
    b4c8:	428b      	cmp	r3, r1
    b4ca:	d374      	bcc.n	b5b6 <__udivsi3+0xf2>
    b4cc:	0903      	lsrs	r3, r0, #4
    b4ce:	428b      	cmp	r3, r1
    b4d0:	d35f      	bcc.n	b592 <__udivsi3+0xce>
    b4d2:	0a03      	lsrs	r3, r0, #8
    b4d4:	428b      	cmp	r3, r1
    b4d6:	d344      	bcc.n	b562 <__udivsi3+0x9e>
    b4d8:	0b03      	lsrs	r3, r0, #12
    b4da:	428b      	cmp	r3, r1
    b4dc:	d328      	bcc.n	b530 <__udivsi3+0x6c>
    b4de:	0c03      	lsrs	r3, r0, #16
    b4e0:	428b      	cmp	r3, r1
    b4e2:	d30d      	bcc.n	b500 <__udivsi3+0x3c>
    b4e4:	22ff      	movs	r2, #255	; 0xff
    b4e6:	0209      	lsls	r1, r1, #8
    b4e8:	ba12      	rev	r2, r2
    b4ea:	0c03      	lsrs	r3, r0, #16
    b4ec:	428b      	cmp	r3, r1
    b4ee:	d302      	bcc.n	b4f6 <__udivsi3+0x32>
    b4f0:	1212      	asrs	r2, r2, #8
    b4f2:	0209      	lsls	r1, r1, #8
    b4f4:	d065      	beq.n	b5c2 <__udivsi3+0xfe>
    b4f6:	0b03      	lsrs	r3, r0, #12
    b4f8:	428b      	cmp	r3, r1
    b4fa:	d319      	bcc.n	b530 <__udivsi3+0x6c>
    b4fc:	e000      	b.n	b500 <__udivsi3+0x3c>
    b4fe:	0a09      	lsrs	r1, r1, #8
    b500:	0bc3      	lsrs	r3, r0, #15
    b502:	428b      	cmp	r3, r1
    b504:	d301      	bcc.n	b50a <__udivsi3+0x46>
    b506:	03cb      	lsls	r3, r1, #15
    b508:	1ac0      	subs	r0, r0, r3
    b50a:	4152      	adcs	r2, r2
    b50c:	0b83      	lsrs	r3, r0, #14
    b50e:	428b      	cmp	r3, r1
    b510:	d301      	bcc.n	b516 <__udivsi3+0x52>
    b512:	038b      	lsls	r3, r1, #14
    b514:	1ac0      	subs	r0, r0, r3
    b516:	4152      	adcs	r2, r2
    b518:	0b43      	lsrs	r3, r0, #13
    b51a:	428b      	cmp	r3, r1
    b51c:	d301      	bcc.n	b522 <__udivsi3+0x5e>
    b51e:	034b      	lsls	r3, r1, #13
    b520:	1ac0      	subs	r0, r0, r3
    b522:	4152      	adcs	r2, r2
    b524:	0b03      	lsrs	r3, r0, #12
    b526:	428b      	cmp	r3, r1
    b528:	d301      	bcc.n	b52e <__udivsi3+0x6a>
    b52a:	030b      	lsls	r3, r1, #12
    b52c:	1ac0      	subs	r0, r0, r3
    b52e:	4152      	adcs	r2, r2
    b530:	0ac3      	lsrs	r3, r0, #11
    b532:	428b      	cmp	r3, r1
    b534:	d301      	bcc.n	b53a <__udivsi3+0x76>
    b536:	02cb      	lsls	r3, r1, #11
    b538:	1ac0      	subs	r0, r0, r3
    b53a:	4152      	adcs	r2, r2
    b53c:	0a83      	lsrs	r3, r0, #10
    b53e:	428b      	cmp	r3, r1
    b540:	d301      	bcc.n	b546 <__udivsi3+0x82>
    b542:	028b      	lsls	r3, r1, #10
    b544:	1ac0      	subs	r0, r0, r3
    b546:	4152      	adcs	r2, r2
    b548:	0a43      	lsrs	r3, r0, #9
    b54a:	428b      	cmp	r3, r1
    b54c:	d301      	bcc.n	b552 <__udivsi3+0x8e>
    b54e:	024b      	lsls	r3, r1, #9
    b550:	1ac0      	subs	r0, r0, r3
    b552:	4152      	adcs	r2, r2
    b554:	0a03      	lsrs	r3, r0, #8
    b556:	428b      	cmp	r3, r1
    b558:	d301      	bcc.n	b55e <__udivsi3+0x9a>
    b55a:	020b      	lsls	r3, r1, #8
    b55c:	1ac0      	subs	r0, r0, r3
    b55e:	4152      	adcs	r2, r2
    b560:	d2cd      	bcs.n	b4fe <__udivsi3+0x3a>
    b562:	09c3      	lsrs	r3, r0, #7
    b564:	428b      	cmp	r3, r1
    b566:	d301      	bcc.n	b56c <__udivsi3+0xa8>
    b568:	01cb      	lsls	r3, r1, #7
    b56a:	1ac0      	subs	r0, r0, r3
    b56c:	4152      	adcs	r2, r2
    b56e:	0983      	lsrs	r3, r0, #6
    b570:	428b      	cmp	r3, r1
    b572:	d301      	bcc.n	b578 <__udivsi3+0xb4>
    b574:	018b      	lsls	r3, r1, #6
    b576:	1ac0      	subs	r0, r0, r3
    b578:	4152      	adcs	r2, r2
    b57a:	0943      	lsrs	r3, r0, #5
    b57c:	428b      	cmp	r3, r1
    b57e:	d301      	bcc.n	b584 <__udivsi3+0xc0>
    b580:	014b      	lsls	r3, r1, #5
    b582:	1ac0      	subs	r0, r0, r3
    b584:	4152      	adcs	r2, r2
    b586:	0903      	lsrs	r3, r0, #4
    b588:	428b      	cmp	r3, r1
    b58a:	d301      	bcc.n	b590 <__udivsi3+0xcc>
    b58c:	010b      	lsls	r3, r1, #4
    b58e:	1ac0      	subs	r0, r0, r3
    b590:	4152      	adcs	r2, r2
    b592:	08c3      	lsrs	r3, r0, #3
    b594:	428b      	cmp	r3, r1
    b596:	d301      	bcc.n	b59c <__udivsi3+0xd8>
    b598:	00cb      	lsls	r3, r1, #3
    b59a:	1ac0      	subs	r0, r0, r3
    b59c:	4152      	adcs	r2, r2
    b59e:	0883      	lsrs	r3, r0, #2
    b5a0:	428b      	cmp	r3, r1
    b5a2:	d301      	bcc.n	b5a8 <__udivsi3+0xe4>
    b5a4:	008b      	lsls	r3, r1, #2
    b5a6:	1ac0      	subs	r0, r0, r3
    b5a8:	4152      	adcs	r2, r2
    b5aa:	0843      	lsrs	r3, r0, #1
    b5ac:	428b      	cmp	r3, r1
    b5ae:	d301      	bcc.n	b5b4 <__udivsi3+0xf0>
    b5b0:	004b      	lsls	r3, r1, #1
    b5b2:	1ac0      	subs	r0, r0, r3
    b5b4:	4152      	adcs	r2, r2
    b5b6:	1a41      	subs	r1, r0, r1
    b5b8:	d200      	bcs.n	b5bc <__udivsi3+0xf8>
    b5ba:	4601      	mov	r1, r0
    b5bc:	4152      	adcs	r2, r2
    b5be:	4610      	mov	r0, r2
    b5c0:	4770      	bx	lr
    b5c2:	e7ff      	b.n	b5c4 <__udivsi3+0x100>
    b5c4:	b501      	push	{r0, lr}
    b5c6:	2000      	movs	r0, #0
    b5c8:	f000 f8f0 	bl	b7ac <__aeabi_idiv0>
    b5cc:	bd02      	pop	{r1, pc}
    b5ce:	46c0      	nop			; (mov r8, r8)

0000b5d0 <__aeabi_uidivmod>:
    b5d0:	2900      	cmp	r1, #0
    b5d2:	d0f7      	beq.n	b5c4 <__udivsi3+0x100>
    b5d4:	e776      	b.n	b4c4 <__udivsi3>
    b5d6:	4770      	bx	lr

0000b5d8 <__divsi3>:
    b5d8:	4603      	mov	r3, r0
    b5da:	430b      	orrs	r3, r1
    b5dc:	d47f      	bmi.n	b6de <__divsi3+0x106>
    b5de:	2200      	movs	r2, #0
    b5e0:	0843      	lsrs	r3, r0, #1
    b5e2:	428b      	cmp	r3, r1
    b5e4:	d374      	bcc.n	b6d0 <__divsi3+0xf8>
    b5e6:	0903      	lsrs	r3, r0, #4
    b5e8:	428b      	cmp	r3, r1
    b5ea:	d35f      	bcc.n	b6ac <__divsi3+0xd4>
    b5ec:	0a03      	lsrs	r3, r0, #8
    b5ee:	428b      	cmp	r3, r1
    b5f0:	d344      	bcc.n	b67c <__divsi3+0xa4>
    b5f2:	0b03      	lsrs	r3, r0, #12
    b5f4:	428b      	cmp	r3, r1
    b5f6:	d328      	bcc.n	b64a <__divsi3+0x72>
    b5f8:	0c03      	lsrs	r3, r0, #16
    b5fa:	428b      	cmp	r3, r1
    b5fc:	d30d      	bcc.n	b61a <__divsi3+0x42>
    b5fe:	22ff      	movs	r2, #255	; 0xff
    b600:	0209      	lsls	r1, r1, #8
    b602:	ba12      	rev	r2, r2
    b604:	0c03      	lsrs	r3, r0, #16
    b606:	428b      	cmp	r3, r1
    b608:	d302      	bcc.n	b610 <__divsi3+0x38>
    b60a:	1212      	asrs	r2, r2, #8
    b60c:	0209      	lsls	r1, r1, #8
    b60e:	d065      	beq.n	b6dc <__divsi3+0x104>
    b610:	0b03      	lsrs	r3, r0, #12
    b612:	428b      	cmp	r3, r1
    b614:	d319      	bcc.n	b64a <__divsi3+0x72>
    b616:	e000      	b.n	b61a <__divsi3+0x42>
    b618:	0a09      	lsrs	r1, r1, #8
    b61a:	0bc3      	lsrs	r3, r0, #15
    b61c:	428b      	cmp	r3, r1
    b61e:	d301      	bcc.n	b624 <__divsi3+0x4c>
    b620:	03cb      	lsls	r3, r1, #15
    b622:	1ac0      	subs	r0, r0, r3
    b624:	4152      	adcs	r2, r2
    b626:	0b83      	lsrs	r3, r0, #14
    b628:	428b      	cmp	r3, r1
    b62a:	d301      	bcc.n	b630 <__divsi3+0x58>
    b62c:	038b      	lsls	r3, r1, #14
    b62e:	1ac0      	subs	r0, r0, r3
    b630:	4152      	adcs	r2, r2
    b632:	0b43      	lsrs	r3, r0, #13
    b634:	428b      	cmp	r3, r1
    b636:	d301      	bcc.n	b63c <__divsi3+0x64>
    b638:	034b      	lsls	r3, r1, #13
    b63a:	1ac0      	subs	r0, r0, r3
    b63c:	4152      	adcs	r2, r2
    b63e:	0b03      	lsrs	r3, r0, #12
    b640:	428b      	cmp	r3, r1
    b642:	d301      	bcc.n	b648 <__divsi3+0x70>
    b644:	030b      	lsls	r3, r1, #12
    b646:	1ac0      	subs	r0, r0, r3
    b648:	4152      	adcs	r2, r2
    b64a:	0ac3      	lsrs	r3, r0, #11
    b64c:	428b      	cmp	r3, r1
    b64e:	d301      	bcc.n	b654 <__divsi3+0x7c>
    b650:	02cb      	lsls	r3, r1, #11
    b652:	1ac0      	subs	r0, r0, r3
    b654:	4152      	adcs	r2, r2
    b656:	0a83      	lsrs	r3, r0, #10
    b658:	428b      	cmp	r3, r1
    b65a:	d301      	bcc.n	b660 <__divsi3+0x88>
    b65c:	028b      	lsls	r3, r1, #10
    b65e:	1ac0      	subs	r0, r0, r3
    b660:	4152      	adcs	r2, r2
    b662:	0a43      	lsrs	r3, r0, #9
    b664:	428b      	cmp	r3, r1
    b666:	d301      	bcc.n	b66c <__divsi3+0x94>
    b668:	024b      	lsls	r3, r1, #9
    b66a:	1ac0      	subs	r0, r0, r3
    b66c:	4152      	adcs	r2, r2
    b66e:	0a03      	lsrs	r3, r0, #8
    b670:	428b      	cmp	r3, r1
    b672:	d301      	bcc.n	b678 <__divsi3+0xa0>
    b674:	020b      	lsls	r3, r1, #8
    b676:	1ac0      	subs	r0, r0, r3
    b678:	4152      	adcs	r2, r2
    b67a:	d2cd      	bcs.n	b618 <__divsi3+0x40>
    b67c:	09c3      	lsrs	r3, r0, #7
    b67e:	428b      	cmp	r3, r1
    b680:	d301      	bcc.n	b686 <__divsi3+0xae>
    b682:	01cb      	lsls	r3, r1, #7
    b684:	1ac0      	subs	r0, r0, r3
    b686:	4152      	adcs	r2, r2
    b688:	0983      	lsrs	r3, r0, #6
    b68a:	428b      	cmp	r3, r1
    b68c:	d301      	bcc.n	b692 <__divsi3+0xba>
    b68e:	018b      	lsls	r3, r1, #6
    b690:	1ac0      	subs	r0, r0, r3
    b692:	4152      	adcs	r2, r2
    b694:	0943      	lsrs	r3, r0, #5
    b696:	428b      	cmp	r3, r1
    b698:	d301      	bcc.n	b69e <__divsi3+0xc6>
    b69a:	014b      	lsls	r3, r1, #5
    b69c:	1ac0      	subs	r0, r0, r3
    b69e:	4152      	adcs	r2, r2
    b6a0:	0903      	lsrs	r3, r0, #4
    b6a2:	428b      	cmp	r3, r1
    b6a4:	d301      	bcc.n	b6aa <__divsi3+0xd2>
    b6a6:	010b      	lsls	r3, r1, #4
    b6a8:	1ac0      	subs	r0, r0, r3
    b6aa:	4152      	adcs	r2, r2
    b6ac:	08c3      	lsrs	r3, r0, #3
    b6ae:	428b      	cmp	r3, r1
    b6b0:	d301      	bcc.n	b6b6 <__divsi3+0xde>
    b6b2:	00cb      	lsls	r3, r1, #3
    b6b4:	1ac0      	subs	r0, r0, r3
    b6b6:	4152      	adcs	r2, r2
    b6b8:	0883      	lsrs	r3, r0, #2
    b6ba:	428b      	cmp	r3, r1
    b6bc:	d301      	bcc.n	b6c2 <__divsi3+0xea>
    b6be:	008b      	lsls	r3, r1, #2
    b6c0:	1ac0      	subs	r0, r0, r3
    b6c2:	4152      	adcs	r2, r2
    b6c4:	0843      	lsrs	r3, r0, #1
    b6c6:	428b      	cmp	r3, r1
    b6c8:	d301      	bcc.n	b6ce <__divsi3+0xf6>
    b6ca:	004b      	lsls	r3, r1, #1
    b6cc:	1ac0      	subs	r0, r0, r3
    b6ce:	4152      	adcs	r2, r2
    b6d0:	1a41      	subs	r1, r0, r1
    b6d2:	d200      	bcs.n	b6d6 <__divsi3+0xfe>
    b6d4:	4601      	mov	r1, r0
    b6d6:	4152      	adcs	r2, r2
    b6d8:	4610      	mov	r0, r2
    b6da:	4770      	bx	lr
    b6dc:	e05d      	b.n	b79a <__divsi3+0x1c2>
    b6de:	0fca      	lsrs	r2, r1, #31
    b6e0:	d000      	beq.n	b6e4 <__divsi3+0x10c>
    b6e2:	4249      	negs	r1, r1
    b6e4:	1003      	asrs	r3, r0, #32
    b6e6:	d300      	bcc.n	b6ea <__divsi3+0x112>
    b6e8:	4240      	negs	r0, r0
    b6ea:	4053      	eors	r3, r2
    b6ec:	2200      	movs	r2, #0
    b6ee:	469c      	mov	ip, r3
    b6f0:	0903      	lsrs	r3, r0, #4
    b6f2:	428b      	cmp	r3, r1
    b6f4:	d32d      	bcc.n	b752 <__divsi3+0x17a>
    b6f6:	0a03      	lsrs	r3, r0, #8
    b6f8:	428b      	cmp	r3, r1
    b6fa:	d312      	bcc.n	b722 <__divsi3+0x14a>
    b6fc:	22fc      	movs	r2, #252	; 0xfc
    b6fe:	0189      	lsls	r1, r1, #6
    b700:	ba12      	rev	r2, r2
    b702:	0a03      	lsrs	r3, r0, #8
    b704:	428b      	cmp	r3, r1
    b706:	d30c      	bcc.n	b722 <__divsi3+0x14a>
    b708:	0189      	lsls	r1, r1, #6
    b70a:	1192      	asrs	r2, r2, #6
    b70c:	428b      	cmp	r3, r1
    b70e:	d308      	bcc.n	b722 <__divsi3+0x14a>
    b710:	0189      	lsls	r1, r1, #6
    b712:	1192      	asrs	r2, r2, #6
    b714:	428b      	cmp	r3, r1
    b716:	d304      	bcc.n	b722 <__divsi3+0x14a>
    b718:	0189      	lsls	r1, r1, #6
    b71a:	d03a      	beq.n	b792 <__divsi3+0x1ba>
    b71c:	1192      	asrs	r2, r2, #6
    b71e:	e000      	b.n	b722 <__divsi3+0x14a>
    b720:	0989      	lsrs	r1, r1, #6
    b722:	09c3      	lsrs	r3, r0, #7
    b724:	428b      	cmp	r3, r1
    b726:	d301      	bcc.n	b72c <__divsi3+0x154>
    b728:	01cb      	lsls	r3, r1, #7
    b72a:	1ac0      	subs	r0, r0, r3
    b72c:	4152      	adcs	r2, r2
    b72e:	0983      	lsrs	r3, r0, #6
    b730:	428b      	cmp	r3, r1
    b732:	d301      	bcc.n	b738 <__divsi3+0x160>
    b734:	018b      	lsls	r3, r1, #6
    b736:	1ac0      	subs	r0, r0, r3
    b738:	4152      	adcs	r2, r2
    b73a:	0943      	lsrs	r3, r0, #5
    b73c:	428b      	cmp	r3, r1
    b73e:	d301      	bcc.n	b744 <__divsi3+0x16c>
    b740:	014b      	lsls	r3, r1, #5
    b742:	1ac0      	subs	r0, r0, r3
    b744:	4152      	adcs	r2, r2
    b746:	0903      	lsrs	r3, r0, #4
    b748:	428b      	cmp	r3, r1
    b74a:	d301      	bcc.n	b750 <__divsi3+0x178>
    b74c:	010b      	lsls	r3, r1, #4
    b74e:	1ac0      	subs	r0, r0, r3
    b750:	4152      	adcs	r2, r2
    b752:	08c3      	lsrs	r3, r0, #3
    b754:	428b      	cmp	r3, r1
    b756:	d301      	bcc.n	b75c <__divsi3+0x184>
    b758:	00cb      	lsls	r3, r1, #3
    b75a:	1ac0      	subs	r0, r0, r3
    b75c:	4152      	adcs	r2, r2
    b75e:	0883      	lsrs	r3, r0, #2
    b760:	428b      	cmp	r3, r1
    b762:	d301      	bcc.n	b768 <__divsi3+0x190>
    b764:	008b      	lsls	r3, r1, #2
    b766:	1ac0      	subs	r0, r0, r3
    b768:	4152      	adcs	r2, r2
    b76a:	d2d9      	bcs.n	b720 <__divsi3+0x148>
    b76c:	0843      	lsrs	r3, r0, #1
    b76e:	428b      	cmp	r3, r1
    b770:	d301      	bcc.n	b776 <__divsi3+0x19e>
    b772:	004b      	lsls	r3, r1, #1
    b774:	1ac0      	subs	r0, r0, r3
    b776:	4152      	adcs	r2, r2
    b778:	1a41      	subs	r1, r0, r1
    b77a:	d200      	bcs.n	b77e <__divsi3+0x1a6>
    b77c:	4601      	mov	r1, r0
    b77e:	4663      	mov	r3, ip
    b780:	4152      	adcs	r2, r2
    b782:	105b      	asrs	r3, r3, #1
    b784:	4610      	mov	r0, r2
    b786:	d301      	bcc.n	b78c <__divsi3+0x1b4>
    b788:	4240      	negs	r0, r0
    b78a:	2b00      	cmp	r3, #0
    b78c:	d500      	bpl.n	b790 <__divsi3+0x1b8>
    b78e:	4249      	negs	r1, r1
    b790:	4770      	bx	lr
    b792:	4663      	mov	r3, ip
    b794:	105b      	asrs	r3, r3, #1
    b796:	d300      	bcc.n	b79a <__divsi3+0x1c2>
    b798:	4240      	negs	r0, r0
    b79a:	b501      	push	{r0, lr}
    b79c:	2000      	movs	r0, #0
    b79e:	f000 f805 	bl	b7ac <__aeabi_idiv0>
    b7a2:	bd02      	pop	{r1, pc}

0000b7a4 <__aeabi_idivmod>:
    b7a4:	2900      	cmp	r1, #0
    b7a6:	d0f8      	beq.n	b79a <__divsi3+0x1c2>
    b7a8:	e716      	b.n	b5d8 <__divsi3>
    b7aa:	4770      	bx	lr

0000b7ac <__aeabi_idiv0>:
    b7ac:	4770      	bx	lr
    b7ae:	46c0      	nop			; (mov r8, r8)

0000b7b0 <__aeabi_lmul>:
    b7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7b2:	46ce      	mov	lr, r9
    b7b4:	4647      	mov	r7, r8
    b7b6:	0415      	lsls	r5, r2, #16
    b7b8:	0c2d      	lsrs	r5, r5, #16
    b7ba:	002e      	movs	r6, r5
    b7bc:	b580      	push	{r7, lr}
    b7be:	0407      	lsls	r7, r0, #16
    b7c0:	0c14      	lsrs	r4, r2, #16
    b7c2:	0c3f      	lsrs	r7, r7, #16
    b7c4:	4699      	mov	r9, r3
    b7c6:	0c03      	lsrs	r3, r0, #16
    b7c8:	437e      	muls	r6, r7
    b7ca:	435d      	muls	r5, r3
    b7cc:	4367      	muls	r7, r4
    b7ce:	4363      	muls	r3, r4
    b7d0:	197f      	adds	r7, r7, r5
    b7d2:	0c34      	lsrs	r4, r6, #16
    b7d4:	19e4      	adds	r4, r4, r7
    b7d6:	469c      	mov	ip, r3
    b7d8:	42a5      	cmp	r5, r4
    b7da:	d903      	bls.n	b7e4 <__aeabi_lmul+0x34>
    b7dc:	2380      	movs	r3, #128	; 0x80
    b7de:	025b      	lsls	r3, r3, #9
    b7e0:	4698      	mov	r8, r3
    b7e2:	44c4      	add	ip, r8
    b7e4:	464b      	mov	r3, r9
    b7e6:	4351      	muls	r1, r2
    b7e8:	4343      	muls	r3, r0
    b7ea:	0436      	lsls	r6, r6, #16
    b7ec:	0c36      	lsrs	r6, r6, #16
    b7ee:	0c25      	lsrs	r5, r4, #16
    b7f0:	0424      	lsls	r4, r4, #16
    b7f2:	4465      	add	r5, ip
    b7f4:	19a4      	adds	r4, r4, r6
    b7f6:	1859      	adds	r1, r3, r1
    b7f8:	1949      	adds	r1, r1, r5
    b7fa:	0020      	movs	r0, r4
    b7fc:	bc0c      	pop	{r2, r3}
    b7fe:	4690      	mov	r8, r2
    b800:	4699      	mov	r9, r3
    b802:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b804 <__libc_init_array>:
    b804:	b570      	push	{r4, r5, r6, lr}
    b806:	2600      	movs	r6, #0
    b808:	4d0c      	ldr	r5, [pc, #48]	; (b83c <__libc_init_array+0x38>)
    b80a:	4c0d      	ldr	r4, [pc, #52]	; (b840 <__libc_init_array+0x3c>)
    b80c:	1b64      	subs	r4, r4, r5
    b80e:	10a4      	asrs	r4, r4, #2
    b810:	42a6      	cmp	r6, r4
    b812:	d109      	bne.n	b828 <__libc_init_array+0x24>
    b814:	2600      	movs	r6, #0
    b816:	f001 f9f5 	bl	cc04 <_init>
    b81a:	4d0a      	ldr	r5, [pc, #40]	; (b844 <__libc_init_array+0x40>)
    b81c:	4c0a      	ldr	r4, [pc, #40]	; (b848 <__libc_init_array+0x44>)
    b81e:	1b64      	subs	r4, r4, r5
    b820:	10a4      	asrs	r4, r4, #2
    b822:	42a6      	cmp	r6, r4
    b824:	d105      	bne.n	b832 <__libc_init_array+0x2e>
    b826:	bd70      	pop	{r4, r5, r6, pc}
    b828:	00b3      	lsls	r3, r6, #2
    b82a:	58eb      	ldr	r3, [r5, r3]
    b82c:	4798      	blx	r3
    b82e:	3601      	adds	r6, #1
    b830:	e7ee      	b.n	b810 <__libc_init_array+0xc>
    b832:	00b3      	lsls	r3, r6, #2
    b834:	58eb      	ldr	r3, [r5, r3]
    b836:	4798      	blx	r3
    b838:	3601      	adds	r6, #1
    b83a:	e7f2      	b.n	b822 <__libc_init_array+0x1e>
    b83c:	0000cc10 	.word	0x0000cc10
    b840:	0000cc10 	.word	0x0000cc10
    b844:	0000cc10 	.word	0x0000cc10
    b848:	0000cc14 	.word	0x0000cc14

0000b84c <malloc>:
    b84c:	b510      	push	{r4, lr}
    b84e:	4b03      	ldr	r3, [pc, #12]	; (b85c <malloc+0x10>)
    b850:	0001      	movs	r1, r0
    b852:	6818      	ldr	r0, [r3, #0]
    b854:	f000 f860 	bl	b918 <_malloc_r>
    b858:	bd10      	pop	{r4, pc}
    b85a:	46c0      	nop			; (mov r8, r8)
    b85c:	20000060 	.word	0x20000060

0000b860 <memcpy>:
    b860:	2300      	movs	r3, #0
    b862:	b510      	push	{r4, lr}
    b864:	429a      	cmp	r2, r3
    b866:	d100      	bne.n	b86a <memcpy+0xa>
    b868:	bd10      	pop	{r4, pc}
    b86a:	5ccc      	ldrb	r4, [r1, r3]
    b86c:	54c4      	strb	r4, [r0, r3]
    b86e:	3301      	adds	r3, #1
    b870:	e7f8      	b.n	b864 <memcpy+0x4>

0000b872 <memset>:
    b872:	0003      	movs	r3, r0
    b874:	1882      	adds	r2, r0, r2
    b876:	4293      	cmp	r3, r2
    b878:	d100      	bne.n	b87c <memset+0xa>
    b87a:	4770      	bx	lr
    b87c:	7019      	strb	r1, [r3, #0]
    b87e:	3301      	adds	r3, #1
    b880:	e7f9      	b.n	b876 <memset+0x4>
	...

0000b884 <_free_r>:
    b884:	b570      	push	{r4, r5, r6, lr}
    b886:	0005      	movs	r5, r0
    b888:	2900      	cmp	r1, #0
    b88a:	d010      	beq.n	b8ae <_free_r+0x2a>
    b88c:	1f0c      	subs	r4, r1, #4
    b88e:	6823      	ldr	r3, [r4, #0]
    b890:	2b00      	cmp	r3, #0
    b892:	da00      	bge.n	b896 <_free_r+0x12>
    b894:	18e4      	adds	r4, r4, r3
    b896:	0028      	movs	r0, r5
    b898:	f000 fb22 	bl	bee0 <__malloc_lock>
    b89c:	4a1d      	ldr	r2, [pc, #116]	; (b914 <_free_r+0x90>)
    b89e:	6813      	ldr	r3, [r2, #0]
    b8a0:	2b00      	cmp	r3, #0
    b8a2:	d105      	bne.n	b8b0 <_free_r+0x2c>
    b8a4:	6063      	str	r3, [r4, #4]
    b8a6:	6014      	str	r4, [r2, #0]
    b8a8:	0028      	movs	r0, r5
    b8aa:	f000 fb1a 	bl	bee2 <__malloc_unlock>
    b8ae:	bd70      	pop	{r4, r5, r6, pc}
    b8b0:	42a3      	cmp	r3, r4
    b8b2:	d909      	bls.n	b8c8 <_free_r+0x44>
    b8b4:	6821      	ldr	r1, [r4, #0]
    b8b6:	1860      	adds	r0, r4, r1
    b8b8:	4283      	cmp	r3, r0
    b8ba:	d1f3      	bne.n	b8a4 <_free_r+0x20>
    b8bc:	6818      	ldr	r0, [r3, #0]
    b8be:	685b      	ldr	r3, [r3, #4]
    b8c0:	1841      	adds	r1, r0, r1
    b8c2:	6021      	str	r1, [r4, #0]
    b8c4:	e7ee      	b.n	b8a4 <_free_r+0x20>
    b8c6:	0013      	movs	r3, r2
    b8c8:	685a      	ldr	r2, [r3, #4]
    b8ca:	2a00      	cmp	r2, #0
    b8cc:	d001      	beq.n	b8d2 <_free_r+0x4e>
    b8ce:	42a2      	cmp	r2, r4
    b8d0:	d9f9      	bls.n	b8c6 <_free_r+0x42>
    b8d2:	6819      	ldr	r1, [r3, #0]
    b8d4:	1858      	adds	r0, r3, r1
    b8d6:	42a0      	cmp	r0, r4
    b8d8:	d10b      	bne.n	b8f2 <_free_r+0x6e>
    b8da:	6820      	ldr	r0, [r4, #0]
    b8dc:	1809      	adds	r1, r1, r0
    b8de:	1858      	adds	r0, r3, r1
    b8e0:	6019      	str	r1, [r3, #0]
    b8e2:	4282      	cmp	r2, r0
    b8e4:	d1e0      	bne.n	b8a8 <_free_r+0x24>
    b8e6:	6810      	ldr	r0, [r2, #0]
    b8e8:	6852      	ldr	r2, [r2, #4]
    b8ea:	1841      	adds	r1, r0, r1
    b8ec:	6019      	str	r1, [r3, #0]
    b8ee:	605a      	str	r2, [r3, #4]
    b8f0:	e7da      	b.n	b8a8 <_free_r+0x24>
    b8f2:	42a0      	cmp	r0, r4
    b8f4:	d902      	bls.n	b8fc <_free_r+0x78>
    b8f6:	230c      	movs	r3, #12
    b8f8:	602b      	str	r3, [r5, #0]
    b8fa:	e7d5      	b.n	b8a8 <_free_r+0x24>
    b8fc:	6821      	ldr	r1, [r4, #0]
    b8fe:	1860      	adds	r0, r4, r1
    b900:	4282      	cmp	r2, r0
    b902:	d103      	bne.n	b90c <_free_r+0x88>
    b904:	6810      	ldr	r0, [r2, #0]
    b906:	6852      	ldr	r2, [r2, #4]
    b908:	1841      	adds	r1, r0, r1
    b90a:	6021      	str	r1, [r4, #0]
    b90c:	6062      	str	r2, [r4, #4]
    b90e:	605c      	str	r4, [r3, #4]
    b910:	e7ca      	b.n	b8a8 <_free_r+0x24>
    b912:	46c0      	nop			; (mov r8, r8)
    b914:	200001b4 	.word	0x200001b4

0000b918 <_malloc_r>:
    b918:	2303      	movs	r3, #3
    b91a:	b570      	push	{r4, r5, r6, lr}
    b91c:	1ccd      	adds	r5, r1, #3
    b91e:	439d      	bics	r5, r3
    b920:	3508      	adds	r5, #8
    b922:	0006      	movs	r6, r0
    b924:	2d0c      	cmp	r5, #12
    b926:	d21e      	bcs.n	b966 <_malloc_r+0x4e>
    b928:	250c      	movs	r5, #12
    b92a:	42a9      	cmp	r1, r5
    b92c:	d81d      	bhi.n	b96a <_malloc_r+0x52>
    b92e:	0030      	movs	r0, r6
    b930:	f000 fad6 	bl	bee0 <__malloc_lock>
    b934:	4a25      	ldr	r2, [pc, #148]	; (b9cc <_malloc_r+0xb4>)
    b936:	6814      	ldr	r4, [r2, #0]
    b938:	0021      	movs	r1, r4
    b93a:	2900      	cmp	r1, #0
    b93c:	d119      	bne.n	b972 <_malloc_r+0x5a>
    b93e:	4c24      	ldr	r4, [pc, #144]	; (b9d0 <_malloc_r+0xb8>)
    b940:	6823      	ldr	r3, [r4, #0]
    b942:	2b00      	cmp	r3, #0
    b944:	d103      	bne.n	b94e <_malloc_r+0x36>
    b946:	0030      	movs	r0, r6
    b948:	f000 f844 	bl	b9d4 <_sbrk_r>
    b94c:	6020      	str	r0, [r4, #0]
    b94e:	0029      	movs	r1, r5
    b950:	0030      	movs	r0, r6
    b952:	f000 f83f 	bl	b9d4 <_sbrk_r>
    b956:	1c43      	adds	r3, r0, #1
    b958:	d12c      	bne.n	b9b4 <_malloc_r+0x9c>
    b95a:	230c      	movs	r3, #12
    b95c:	0030      	movs	r0, r6
    b95e:	6033      	str	r3, [r6, #0]
    b960:	f000 fabf 	bl	bee2 <__malloc_unlock>
    b964:	e003      	b.n	b96e <_malloc_r+0x56>
    b966:	2d00      	cmp	r5, #0
    b968:	dadf      	bge.n	b92a <_malloc_r+0x12>
    b96a:	230c      	movs	r3, #12
    b96c:	6033      	str	r3, [r6, #0]
    b96e:	2000      	movs	r0, #0
    b970:	bd70      	pop	{r4, r5, r6, pc}
    b972:	680b      	ldr	r3, [r1, #0]
    b974:	1b5b      	subs	r3, r3, r5
    b976:	d41a      	bmi.n	b9ae <_malloc_r+0x96>
    b978:	2b0b      	cmp	r3, #11
    b97a:	d903      	bls.n	b984 <_malloc_r+0x6c>
    b97c:	600b      	str	r3, [r1, #0]
    b97e:	18cc      	adds	r4, r1, r3
    b980:	6025      	str	r5, [r4, #0]
    b982:	e003      	b.n	b98c <_malloc_r+0x74>
    b984:	428c      	cmp	r4, r1
    b986:	d10e      	bne.n	b9a6 <_malloc_r+0x8e>
    b988:	6863      	ldr	r3, [r4, #4]
    b98a:	6013      	str	r3, [r2, #0]
    b98c:	0030      	movs	r0, r6
    b98e:	f000 faa8 	bl	bee2 <__malloc_unlock>
    b992:	0020      	movs	r0, r4
    b994:	2207      	movs	r2, #7
    b996:	300b      	adds	r0, #11
    b998:	1d23      	adds	r3, r4, #4
    b99a:	4390      	bics	r0, r2
    b99c:	1ac3      	subs	r3, r0, r3
    b99e:	d0e7      	beq.n	b970 <_malloc_r+0x58>
    b9a0:	425a      	negs	r2, r3
    b9a2:	50e2      	str	r2, [r4, r3]
    b9a4:	e7e4      	b.n	b970 <_malloc_r+0x58>
    b9a6:	684b      	ldr	r3, [r1, #4]
    b9a8:	6063      	str	r3, [r4, #4]
    b9aa:	000c      	movs	r4, r1
    b9ac:	e7ee      	b.n	b98c <_malloc_r+0x74>
    b9ae:	000c      	movs	r4, r1
    b9b0:	6849      	ldr	r1, [r1, #4]
    b9b2:	e7c2      	b.n	b93a <_malloc_r+0x22>
    b9b4:	2303      	movs	r3, #3
    b9b6:	1cc4      	adds	r4, r0, #3
    b9b8:	439c      	bics	r4, r3
    b9ba:	42a0      	cmp	r0, r4
    b9bc:	d0e0      	beq.n	b980 <_malloc_r+0x68>
    b9be:	1a21      	subs	r1, r4, r0
    b9c0:	0030      	movs	r0, r6
    b9c2:	f000 f807 	bl	b9d4 <_sbrk_r>
    b9c6:	1c43      	adds	r3, r0, #1
    b9c8:	d1da      	bne.n	b980 <_malloc_r+0x68>
    b9ca:	e7c6      	b.n	b95a <_malloc_r+0x42>
    b9cc:	200001b4 	.word	0x200001b4
    b9d0:	200001b8 	.word	0x200001b8

0000b9d4 <_sbrk_r>:
    b9d4:	2300      	movs	r3, #0
    b9d6:	b570      	push	{r4, r5, r6, lr}
    b9d8:	4c06      	ldr	r4, [pc, #24]	; (b9f4 <_sbrk_r+0x20>)
    b9da:	0005      	movs	r5, r0
    b9dc:	0008      	movs	r0, r1
    b9de:	6023      	str	r3, [r4, #0]
    b9e0:	f7fb fae0 	bl	6fa4 <_sbrk>
    b9e4:	1c43      	adds	r3, r0, #1
    b9e6:	d103      	bne.n	b9f0 <_sbrk_r+0x1c>
    b9e8:	6823      	ldr	r3, [r4, #0]
    b9ea:	2b00      	cmp	r3, #0
    b9ec:	d000      	beq.n	b9f0 <_sbrk_r+0x1c>
    b9ee:	602b      	str	r3, [r5, #0]
    b9f0:	bd70      	pop	{r4, r5, r6, pc}
    b9f2:	46c0      	nop			; (mov r8, r8)
    b9f4:	20000dc4 	.word	0x20000dc4

0000b9f8 <setbuf>:
    b9f8:	424a      	negs	r2, r1
    b9fa:	414a      	adcs	r2, r1
    b9fc:	2380      	movs	r3, #128	; 0x80
    b9fe:	b510      	push	{r4, lr}
    ba00:	0052      	lsls	r2, r2, #1
    ba02:	00db      	lsls	r3, r3, #3
    ba04:	f000 f802 	bl	ba0c <setvbuf>
    ba08:	bd10      	pop	{r4, pc}
	...

0000ba0c <setvbuf>:
    ba0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba0e:	001d      	movs	r5, r3
    ba10:	4b4f      	ldr	r3, [pc, #316]	; (bb50 <setvbuf+0x144>)
    ba12:	b085      	sub	sp, #20
    ba14:	681e      	ldr	r6, [r3, #0]
    ba16:	0004      	movs	r4, r0
    ba18:	000f      	movs	r7, r1
    ba1a:	9200      	str	r2, [sp, #0]
    ba1c:	2e00      	cmp	r6, #0
    ba1e:	d005      	beq.n	ba2c <setvbuf+0x20>
    ba20:	69b3      	ldr	r3, [r6, #24]
    ba22:	2b00      	cmp	r3, #0
    ba24:	d102      	bne.n	ba2c <setvbuf+0x20>
    ba26:	0030      	movs	r0, r6
    ba28:	f000 f99c 	bl	bd64 <__sinit>
    ba2c:	4b49      	ldr	r3, [pc, #292]	; (bb54 <setvbuf+0x148>)
    ba2e:	429c      	cmp	r4, r3
    ba30:	d150      	bne.n	bad4 <setvbuf+0xc8>
    ba32:	6874      	ldr	r4, [r6, #4]
    ba34:	9b00      	ldr	r3, [sp, #0]
    ba36:	2b02      	cmp	r3, #2
    ba38:	d005      	beq.n	ba46 <setvbuf+0x3a>
    ba3a:	2b01      	cmp	r3, #1
    ba3c:	d900      	bls.n	ba40 <setvbuf+0x34>
    ba3e:	e084      	b.n	bb4a <setvbuf+0x13e>
    ba40:	2d00      	cmp	r5, #0
    ba42:	da00      	bge.n	ba46 <setvbuf+0x3a>
    ba44:	e081      	b.n	bb4a <setvbuf+0x13e>
    ba46:	0021      	movs	r1, r4
    ba48:	0030      	movs	r0, r6
    ba4a:	f000 f91d 	bl	bc88 <_fflush_r>
    ba4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ba50:	2900      	cmp	r1, #0
    ba52:	d008      	beq.n	ba66 <setvbuf+0x5a>
    ba54:	0023      	movs	r3, r4
    ba56:	3344      	adds	r3, #68	; 0x44
    ba58:	4299      	cmp	r1, r3
    ba5a:	d002      	beq.n	ba62 <setvbuf+0x56>
    ba5c:	0030      	movs	r0, r6
    ba5e:	f7ff ff11 	bl	b884 <_free_r>
    ba62:	2300      	movs	r3, #0
    ba64:	6363      	str	r3, [r4, #52]	; 0x34
    ba66:	2300      	movs	r3, #0
    ba68:	61a3      	str	r3, [r4, #24]
    ba6a:	6063      	str	r3, [r4, #4]
    ba6c:	89a3      	ldrh	r3, [r4, #12]
    ba6e:	061b      	lsls	r3, r3, #24
    ba70:	d503      	bpl.n	ba7a <setvbuf+0x6e>
    ba72:	6921      	ldr	r1, [r4, #16]
    ba74:	0030      	movs	r0, r6
    ba76:	f7ff ff05 	bl	b884 <_free_r>
    ba7a:	89a3      	ldrh	r3, [r4, #12]
    ba7c:	4a36      	ldr	r2, [pc, #216]	; (bb58 <setvbuf+0x14c>)
    ba7e:	4013      	ands	r3, r2
    ba80:	81a3      	strh	r3, [r4, #12]
    ba82:	9b00      	ldr	r3, [sp, #0]
    ba84:	2b02      	cmp	r3, #2
    ba86:	d05a      	beq.n	bb3e <setvbuf+0x132>
    ba88:	ab03      	add	r3, sp, #12
    ba8a:	aa02      	add	r2, sp, #8
    ba8c:	0021      	movs	r1, r4
    ba8e:	0030      	movs	r0, r6
    ba90:	f000 f9fe 	bl	be90 <__swhatbuf_r>
    ba94:	89a3      	ldrh	r3, [r4, #12]
    ba96:	4318      	orrs	r0, r3
    ba98:	81a0      	strh	r0, [r4, #12]
    ba9a:	2d00      	cmp	r5, #0
    ba9c:	d124      	bne.n	bae8 <setvbuf+0xdc>
    ba9e:	9d02      	ldr	r5, [sp, #8]
    baa0:	0028      	movs	r0, r5
    baa2:	f7ff fed3 	bl	b84c <malloc>
    baa6:	9501      	str	r5, [sp, #4]
    baa8:	1e07      	subs	r7, r0, #0
    baaa:	d142      	bne.n	bb32 <setvbuf+0x126>
    baac:	9b02      	ldr	r3, [sp, #8]
    baae:	9301      	str	r3, [sp, #4]
    bab0:	42ab      	cmp	r3, r5
    bab2:	d139      	bne.n	bb28 <setvbuf+0x11c>
    bab4:	2001      	movs	r0, #1
    bab6:	4240      	negs	r0, r0
    bab8:	2302      	movs	r3, #2
    baba:	89a2      	ldrh	r2, [r4, #12]
    babc:	4313      	orrs	r3, r2
    babe:	81a3      	strh	r3, [r4, #12]
    bac0:	2300      	movs	r3, #0
    bac2:	60a3      	str	r3, [r4, #8]
    bac4:	0023      	movs	r3, r4
    bac6:	3347      	adds	r3, #71	; 0x47
    bac8:	6023      	str	r3, [r4, #0]
    baca:	6123      	str	r3, [r4, #16]
    bacc:	2301      	movs	r3, #1
    bace:	6163      	str	r3, [r4, #20]
    bad0:	b005      	add	sp, #20
    bad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bad4:	4b21      	ldr	r3, [pc, #132]	; (bb5c <setvbuf+0x150>)
    bad6:	429c      	cmp	r4, r3
    bad8:	d101      	bne.n	bade <setvbuf+0xd2>
    bada:	68b4      	ldr	r4, [r6, #8]
    badc:	e7aa      	b.n	ba34 <setvbuf+0x28>
    bade:	4b20      	ldr	r3, [pc, #128]	; (bb60 <setvbuf+0x154>)
    bae0:	429c      	cmp	r4, r3
    bae2:	d1a7      	bne.n	ba34 <setvbuf+0x28>
    bae4:	68f4      	ldr	r4, [r6, #12]
    bae6:	e7a5      	b.n	ba34 <setvbuf+0x28>
    bae8:	2f00      	cmp	r7, #0
    baea:	d0d9      	beq.n	baa0 <setvbuf+0x94>
    baec:	69b3      	ldr	r3, [r6, #24]
    baee:	2b00      	cmp	r3, #0
    baf0:	d102      	bne.n	baf8 <setvbuf+0xec>
    baf2:	0030      	movs	r0, r6
    baf4:	f000 f936 	bl	bd64 <__sinit>
    baf8:	9b00      	ldr	r3, [sp, #0]
    bafa:	2b01      	cmp	r3, #1
    bafc:	d103      	bne.n	bb06 <setvbuf+0xfa>
    bafe:	89a3      	ldrh	r3, [r4, #12]
    bb00:	9a00      	ldr	r2, [sp, #0]
    bb02:	431a      	orrs	r2, r3
    bb04:	81a2      	strh	r2, [r4, #12]
    bb06:	2008      	movs	r0, #8
    bb08:	89a3      	ldrh	r3, [r4, #12]
    bb0a:	6027      	str	r7, [r4, #0]
    bb0c:	6127      	str	r7, [r4, #16]
    bb0e:	6165      	str	r5, [r4, #20]
    bb10:	4018      	ands	r0, r3
    bb12:	d018      	beq.n	bb46 <setvbuf+0x13a>
    bb14:	2001      	movs	r0, #1
    bb16:	4018      	ands	r0, r3
    bb18:	2300      	movs	r3, #0
    bb1a:	4298      	cmp	r0, r3
    bb1c:	d011      	beq.n	bb42 <setvbuf+0x136>
    bb1e:	426d      	negs	r5, r5
    bb20:	60a3      	str	r3, [r4, #8]
    bb22:	61a5      	str	r5, [r4, #24]
    bb24:	0018      	movs	r0, r3
    bb26:	e7d3      	b.n	bad0 <setvbuf+0xc4>
    bb28:	9801      	ldr	r0, [sp, #4]
    bb2a:	f7ff fe8f 	bl	b84c <malloc>
    bb2e:	1e07      	subs	r7, r0, #0
    bb30:	d0c0      	beq.n	bab4 <setvbuf+0xa8>
    bb32:	2380      	movs	r3, #128	; 0x80
    bb34:	89a2      	ldrh	r2, [r4, #12]
    bb36:	9d01      	ldr	r5, [sp, #4]
    bb38:	4313      	orrs	r3, r2
    bb3a:	81a3      	strh	r3, [r4, #12]
    bb3c:	e7d6      	b.n	baec <setvbuf+0xe0>
    bb3e:	2000      	movs	r0, #0
    bb40:	e7ba      	b.n	bab8 <setvbuf+0xac>
    bb42:	60a5      	str	r5, [r4, #8]
    bb44:	e7c4      	b.n	bad0 <setvbuf+0xc4>
    bb46:	60a0      	str	r0, [r4, #8]
    bb48:	e7c2      	b.n	bad0 <setvbuf+0xc4>
    bb4a:	2001      	movs	r0, #1
    bb4c:	4240      	negs	r0, r0
    bb4e:	e7bf      	b.n	bad0 <setvbuf+0xc4>
    bb50:	20000060 	.word	0x20000060
    bb54:	0000cbc4 	.word	0x0000cbc4
    bb58:	fffff35c 	.word	0xfffff35c
    bb5c:	0000cbe4 	.word	0x0000cbe4
    bb60:	0000cba4 	.word	0x0000cba4

0000bb64 <strlen>:
    bb64:	2300      	movs	r3, #0
    bb66:	5cc2      	ldrb	r2, [r0, r3]
    bb68:	3301      	adds	r3, #1
    bb6a:	2a00      	cmp	r2, #0
    bb6c:	d1fb      	bne.n	bb66 <strlen+0x2>
    bb6e:	1e58      	subs	r0, r3, #1
    bb70:	4770      	bx	lr
	...

0000bb74 <__sflush_r>:
    bb74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bb76:	898a      	ldrh	r2, [r1, #12]
    bb78:	0005      	movs	r5, r0
    bb7a:	000c      	movs	r4, r1
    bb7c:	0713      	lsls	r3, r2, #28
    bb7e:	d460      	bmi.n	bc42 <__sflush_r+0xce>
    bb80:	684b      	ldr	r3, [r1, #4]
    bb82:	2b00      	cmp	r3, #0
    bb84:	dc04      	bgt.n	bb90 <__sflush_r+0x1c>
    bb86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    bb88:	2b00      	cmp	r3, #0
    bb8a:	dc01      	bgt.n	bb90 <__sflush_r+0x1c>
    bb8c:	2000      	movs	r0, #0
    bb8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bb90:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    bb92:	2f00      	cmp	r7, #0
    bb94:	d0fa      	beq.n	bb8c <__sflush_r+0x18>
    bb96:	2300      	movs	r3, #0
    bb98:	682e      	ldr	r6, [r5, #0]
    bb9a:	602b      	str	r3, [r5, #0]
    bb9c:	2380      	movs	r3, #128	; 0x80
    bb9e:	015b      	lsls	r3, r3, #5
    bba0:	401a      	ands	r2, r3
    bba2:	d034      	beq.n	bc0e <__sflush_r+0x9a>
    bba4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    bba6:	89a3      	ldrh	r3, [r4, #12]
    bba8:	075b      	lsls	r3, r3, #29
    bbaa:	d506      	bpl.n	bbba <__sflush_r+0x46>
    bbac:	6863      	ldr	r3, [r4, #4]
    bbae:	1ac0      	subs	r0, r0, r3
    bbb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bbb2:	2b00      	cmp	r3, #0
    bbb4:	d001      	beq.n	bbba <__sflush_r+0x46>
    bbb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    bbb8:	1ac0      	subs	r0, r0, r3
    bbba:	0002      	movs	r2, r0
    bbbc:	6a21      	ldr	r1, [r4, #32]
    bbbe:	2300      	movs	r3, #0
    bbc0:	0028      	movs	r0, r5
    bbc2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    bbc4:	47b8      	blx	r7
    bbc6:	89a1      	ldrh	r1, [r4, #12]
    bbc8:	1c43      	adds	r3, r0, #1
    bbca:	d106      	bne.n	bbda <__sflush_r+0x66>
    bbcc:	682b      	ldr	r3, [r5, #0]
    bbce:	2b1d      	cmp	r3, #29
    bbd0:	d831      	bhi.n	bc36 <__sflush_r+0xc2>
    bbd2:	4a2c      	ldr	r2, [pc, #176]	; (bc84 <__sflush_r+0x110>)
    bbd4:	40da      	lsrs	r2, r3
    bbd6:	07d3      	lsls	r3, r2, #31
    bbd8:	d52d      	bpl.n	bc36 <__sflush_r+0xc2>
    bbda:	2300      	movs	r3, #0
    bbdc:	6063      	str	r3, [r4, #4]
    bbde:	6923      	ldr	r3, [r4, #16]
    bbe0:	6023      	str	r3, [r4, #0]
    bbe2:	04cb      	lsls	r3, r1, #19
    bbe4:	d505      	bpl.n	bbf2 <__sflush_r+0x7e>
    bbe6:	1c43      	adds	r3, r0, #1
    bbe8:	d102      	bne.n	bbf0 <__sflush_r+0x7c>
    bbea:	682b      	ldr	r3, [r5, #0]
    bbec:	2b00      	cmp	r3, #0
    bbee:	d100      	bne.n	bbf2 <__sflush_r+0x7e>
    bbf0:	6560      	str	r0, [r4, #84]	; 0x54
    bbf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bbf4:	602e      	str	r6, [r5, #0]
    bbf6:	2900      	cmp	r1, #0
    bbf8:	d0c8      	beq.n	bb8c <__sflush_r+0x18>
    bbfa:	0023      	movs	r3, r4
    bbfc:	3344      	adds	r3, #68	; 0x44
    bbfe:	4299      	cmp	r1, r3
    bc00:	d002      	beq.n	bc08 <__sflush_r+0x94>
    bc02:	0028      	movs	r0, r5
    bc04:	f7ff fe3e 	bl	b884 <_free_r>
    bc08:	2000      	movs	r0, #0
    bc0a:	6360      	str	r0, [r4, #52]	; 0x34
    bc0c:	e7bf      	b.n	bb8e <__sflush_r+0x1a>
    bc0e:	2301      	movs	r3, #1
    bc10:	6a21      	ldr	r1, [r4, #32]
    bc12:	0028      	movs	r0, r5
    bc14:	47b8      	blx	r7
    bc16:	1c43      	adds	r3, r0, #1
    bc18:	d1c5      	bne.n	bba6 <__sflush_r+0x32>
    bc1a:	682b      	ldr	r3, [r5, #0]
    bc1c:	2b00      	cmp	r3, #0
    bc1e:	d0c2      	beq.n	bba6 <__sflush_r+0x32>
    bc20:	2b1d      	cmp	r3, #29
    bc22:	d001      	beq.n	bc28 <__sflush_r+0xb4>
    bc24:	2b16      	cmp	r3, #22
    bc26:	d101      	bne.n	bc2c <__sflush_r+0xb8>
    bc28:	602e      	str	r6, [r5, #0]
    bc2a:	e7af      	b.n	bb8c <__sflush_r+0x18>
    bc2c:	2340      	movs	r3, #64	; 0x40
    bc2e:	89a2      	ldrh	r2, [r4, #12]
    bc30:	4313      	orrs	r3, r2
    bc32:	81a3      	strh	r3, [r4, #12]
    bc34:	e7ab      	b.n	bb8e <__sflush_r+0x1a>
    bc36:	2340      	movs	r3, #64	; 0x40
    bc38:	430b      	orrs	r3, r1
    bc3a:	2001      	movs	r0, #1
    bc3c:	81a3      	strh	r3, [r4, #12]
    bc3e:	4240      	negs	r0, r0
    bc40:	e7a5      	b.n	bb8e <__sflush_r+0x1a>
    bc42:	690f      	ldr	r7, [r1, #16]
    bc44:	2f00      	cmp	r7, #0
    bc46:	d0a1      	beq.n	bb8c <__sflush_r+0x18>
    bc48:	680b      	ldr	r3, [r1, #0]
    bc4a:	600f      	str	r7, [r1, #0]
    bc4c:	1bdb      	subs	r3, r3, r7
    bc4e:	9301      	str	r3, [sp, #4]
    bc50:	2300      	movs	r3, #0
    bc52:	0792      	lsls	r2, r2, #30
    bc54:	d100      	bne.n	bc58 <__sflush_r+0xe4>
    bc56:	694b      	ldr	r3, [r1, #20]
    bc58:	60a3      	str	r3, [r4, #8]
    bc5a:	9b01      	ldr	r3, [sp, #4]
    bc5c:	2b00      	cmp	r3, #0
    bc5e:	dc00      	bgt.n	bc62 <__sflush_r+0xee>
    bc60:	e794      	b.n	bb8c <__sflush_r+0x18>
    bc62:	9b01      	ldr	r3, [sp, #4]
    bc64:	003a      	movs	r2, r7
    bc66:	6a21      	ldr	r1, [r4, #32]
    bc68:	0028      	movs	r0, r5
    bc6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    bc6c:	47b0      	blx	r6
    bc6e:	2800      	cmp	r0, #0
    bc70:	dc03      	bgt.n	bc7a <__sflush_r+0x106>
    bc72:	2340      	movs	r3, #64	; 0x40
    bc74:	89a2      	ldrh	r2, [r4, #12]
    bc76:	4313      	orrs	r3, r2
    bc78:	e7df      	b.n	bc3a <__sflush_r+0xc6>
    bc7a:	9b01      	ldr	r3, [sp, #4]
    bc7c:	183f      	adds	r7, r7, r0
    bc7e:	1a1b      	subs	r3, r3, r0
    bc80:	9301      	str	r3, [sp, #4]
    bc82:	e7ea      	b.n	bc5a <__sflush_r+0xe6>
    bc84:	20400001 	.word	0x20400001

0000bc88 <_fflush_r>:
    bc88:	690b      	ldr	r3, [r1, #16]
    bc8a:	b570      	push	{r4, r5, r6, lr}
    bc8c:	0005      	movs	r5, r0
    bc8e:	000c      	movs	r4, r1
    bc90:	2b00      	cmp	r3, #0
    bc92:	d101      	bne.n	bc98 <_fflush_r+0x10>
    bc94:	2000      	movs	r0, #0
    bc96:	bd70      	pop	{r4, r5, r6, pc}
    bc98:	2800      	cmp	r0, #0
    bc9a:	d004      	beq.n	bca6 <_fflush_r+0x1e>
    bc9c:	6983      	ldr	r3, [r0, #24]
    bc9e:	2b00      	cmp	r3, #0
    bca0:	d101      	bne.n	bca6 <_fflush_r+0x1e>
    bca2:	f000 f85f 	bl	bd64 <__sinit>
    bca6:	4b0b      	ldr	r3, [pc, #44]	; (bcd4 <_fflush_r+0x4c>)
    bca8:	429c      	cmp	r4, r3
    bcaa:	d109      	bne.n	bcc0 <_fflush_r+0x38>
    bcac:	686c      	ldr	r4, [r5, #4]
    bcae:	220c      	movs	r2, #12
    bcb0:	5ea3      	ldrsh	r3, [r4, r2]
    bcb2:	2b00      	cmp	r3, #0
    bcb4:	d0ee      	beq.n	bc94 <_fflush_r+0xc>
    bcb6:	0021      	movs	r1, r4
    bcb8:	0028      	movs	r0, r5
    bcba:	f7ff ff5b 	bl	bb74 <__sflush_r>
    bcbe:	e7ea      	b.n	bc96 <_fflush_r+0xe>
    bcc0:	4b05      	ldr	r3, [pc, #20]	; (bcd8 <_fflush_r+0x50>)
    bcc2:	429c      	cmp	r4, r3
    bcc4:	d101      	bne.n	bcca <_fflush_r+0x42>
    bcc6:	68ac      	ldr	r4, [r5, #8]
    bcc8:	e7f1      	b.n	bcae <_fflush_r+0x26>
    bcca:	4b04      	ldr	r3, [pc, #16]	; (bcdc <_fflush_r+0x54>)
    bccc:	429c      	cmp	r4, r3
    bcce:	d1ee      	bne.n	bcae <_fflush_r+0x26>
    bcd0:	68ec      	ldr	r4, [r5, #12]
    bcd2:	e7ec      	b.n	bcae <_fflush_r+0x26>
    bcd4:	0000cbc4 	.word	0x0000cbc4
    bcd8:	0000cbe4 	.word	0x0000cbe4
    bcdc:	0000cba4 	.word	0x0000cba4

0000bce0 <_cleanup_r>:
    bce0:	b510      	push	{r4, lr}
    bce2:	4902      	ldr	r1, [pc, #8]	; (bcec <_cleanup_r+0xc>)
    bce4:	f000 f8b2 	bl	be4c <_fwalk_reent>
    bce8:	bd10      	pop	{r4, pc}
    bcea:	46c0      	nop			; (mov r8, r8)
    bcec:	0000bc89 	.word	0x0000bc89

0000bcf0 <std.isra.0>:
    bcf0:	2300      	movs	r3, #0
    bcf2:	b510      	push	{r4, lr}
    bcf4:	0004      	movs	r4, r0
    bcf6:	6003      	str	r3, [r0, #0]
    bcf8:	6043      	str	r3, [r0, #4]
    bcfa:	6083      	str	r3, [r0, #8]
    bcfc:	8181      	strh	r1, [r0, #12]
    bcfe:	6643      	str	r3, [r0, #100]	; 0x64
    bd00:	81c2      	strh	r2, [r0, #14]
    bd02:	6103      	str	r3, [r0, #16]
    bd04:	6143      	str	r3, [r0, #20]
    bd06:	6183      	str	r3, [r0, #24]
    bd08:	0019      	movs	r1, r3
    bd0a:	2208      	movs	r2, #8
    bd0c:	305c      	adds	r0, #92	; 0x5c
    bd0e:	f7ff fdb0 	bl	b872 <memset>
    bd12:	4b05      	ldr	r3, [pc, #20]	; (bd28 <std.isra.0+0x38>)
    bd14:	6224      	str	r4, [r4, #32]
    bd16:	6263      	str	r3, [r4, #36]	; 0x24
    bd18:	4b04      	ldr	r3, [pc, #16]	; (bd2c <std.isra.0+0x3c>)
    bd1a:	62a3      	str	r3, [r4, #40]	; 0x28
    bd1c:	4b04      	ldr	r3, [pc, #16]	; (bd30 <std.isra.0+0x40>)
    bd1e:	62e3      	str	r3, [r4, #44]	; 0x2c
    bd20:	4b04      	ldr	r3, [pc, #16]	; (bd34 <std.isra.0+0x44>)
    bd22:	6323      	str	r3, [r4, #48]	; 0x30
    bd24:	bd10      	pop	{r4, pc}
    bd26:	46c0      	nop			; (mov r8, r8)
    bd28:	0000bee5 	.word	0x0000bee5
    bd2c:	0000bf0d 	.word	0x0000bf0d
    bd30:	0000bf45 	.word	0x0000bf45
    bd34:	0000bf71 	.word	0x0000bf71

0000bd38 <__sfmoreglue>:
    bd38:	b570      	push	{r4, r5, r6, lr}
    bd3a:	2568      	movs	r5, #104	; 0x68
    bd3c:	1e4a      	subs	r2, r1, #1
    bd3e:	4355      	muls	r5, r2
    bd40:	000e      	movs	r6, r1
    bd42:	0029      	movs	r1, r5
    bd44:	3174      	adds	r1, #116	; 0x74
    bd46:	f7ff fde7 	bl	b918 <_malloc_r>
    bd4a:	1e04      	subs	r4, r0, #0
    bd4c:	d008      	beq.n	bd60 <__sfmoreglue+0x28>
    bd4e:	2100      	movs	r1, #0
    bd50:	002a      	movs	r2, r5
    bd52:	6001      	str	r1, [r0, #0]
    bd54:	6046      	str	r6, [r0, #4]
    bd56:	300c      	adds	r0, #12
    bd58:	60a0      	str	r0, [r4, #8]
    bd5a:	3268      	adds	r2, #104	; 0x68
    bd5c:	f7ff fd89 	bl	b872 <memset>
    bd60:	0020      	movs	r0, r4
    bd62:	bd70      	pop	{r4, r5, r6, pc}

0000bd64 <__sinit>:
    bd64:	6983      	ldr	r3, [r0, #24]
    bd66:	b513      	push	{r0, r1, r4, lr}
    bd68:	0004      	movs	r4, r0
    bd6a:	2b00      	cmp	r3, #0
    bd6c:	d128      	bne.n	bdc0 <__sinit+0x5c>
    bd6e:	6483      	str	r3, [r0, #72]	; 0x48
    bd70:	64c3      	str	r3, [r0, #76]	; 0x4c
    bd72:	6503      	str	r3, [r0, #80]	; 0x50
    bd74:	4b13      	ldr	r3, [pc, #76]	; (bdc4 <__sinit+0x60>)
    bd76:	4a14      	ldr	r2, [pc, #80]	; (bdc8 <__sinit+0x64>)
    bd78:	681b      	ldr	r3, [r3, #0]
    bd7a:	6282      	str	r2, [r0, #40]	; 0x28
    bd7c:	9301      	str	r3, [sp, #4]
    bd7e:	4298      	cmp	r0, r3
    bd80:	d101      	bne.n	bd86 <__sinit+0x22>
    bd82:	2301      	movs	r3, #1
    bd84:	6183      	str	r3, [r0, #24]
    bd86:	0020      	movs	r0, r4
    bd88:	f000 f820 	bl	bdcc <__sfp>
    bd8c:	6060      	str	r0, [r4, #4]
    bd8e:	0020      	movs	r0, r4
    bd90:	f000 f81c 	bl	bdcc <__sfp>
    bd94:	60a0      	str	r0, [r4, #8]
    bd96:	0020      	movs	r0, r4
    bd98:	f000 f818 	bl	bdcc <__sfp>
    bd9c:	2200      	movs	r2, #0
    bd9e:	60e0      	str	r0, [r4, #12]
    bda0:	2104      	movs	r1, #4
    bda2:	6860      	ldr	r0, [r4, #4]
    bda4:	f7ff ffa4 	bl	bcf0 <std.isra.0>
    bda8:	2201      	movs	r2, #1
    bdaa:	2109      	movs	r1, #9
    bdac:	68a0      	ldr	r0, [r4, #8]
    bdae:	f7ff ff9f 	bl	bcf0 <std.isra.0>
    bdb2:	2202      	movs	r2, #2
    bdb4:	2112      	movs	r1, #18
    bdb6:	68e0      	ldr	r0, [r4, #12]
    bdb8:	f7ff ff9a 	bl	bcf0 <std.isra.0>
    bdbc:	2301      	movs	r3, #1
    bdbe:	61a3      	str	r3, [r4, #24]
    bdc0:	bd13      	pop	{r0, r1, r4, pc}
    bdc2:	46c0      	nop			; (mov r8, r8)
    bdc4:	0000cba0 	.word	0x0000cba0
    bdc8:	0000bce1 	.word	0x0000bce1

0000bdcc <__sfp>:
    bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdce:	4b1e      	ldr	r3, [pc, #120]	; (be48 <__sfp+0x7c>)
    bdd0:	0007      	movs	r7, r0
    bdd2:	681e      	ldr	r6, [r3, #0]
    bdd4:	69b3      	ldr	r3, [r6, #24]
    bdd6:	2b00      	cmp	r3, #0
    bdd8:	d102      	bne.n	bde0 <__sfp+0x14>
    bdda:	0030      	movs	r0, r6
    bddc:	f7ff ffc2 	bl	bd64 <__sinit>
    bde0:	3648      	adds	r6, #72	; 0x48
    bde2:	68b4      	ldr	r4, [r6, #8]
    bde4:	6873      	ldr	r3, [r6, #4]
    bde6:	3b01      	subs	r3, #1
    bde8:	d504      	bpl.n	bdf4 <__sfp+0x28>
    bdea:	6833      	ldr	r3, [r6, #0]
    bdec:	2b00      	cmp	r3, #0
    bdee:	d007      	beq.n	be00 <__sfp+0x34>
    bdf0:	6836      	ldr	r6, [r6, #0]
    bdf2:	e7f6      	b.n	bde2 <__sfp+0x16>
    bdf4:	220c      	movs	r2, #12
    bdf6:	5ea5      	ldrsh	r5, [r4, r2]
    bdf8:	2d00      	cmp	r5, #0
    bdfa:	d00d      	beq.n	be18 <__sfp+0x4c>
    bdfc:	3468      	adds	r4, #104	; 0x68
    bdfe:	e7f2      	b.n	bde6 <__sfp+0x1a>
    be00:	2104      	movs	r1, #4
    be02:	0038      	movs	r0, r7
    be04:	f7ff ff98 	bl	bd38 <__sfmoreglue>
    be08:	6030      	str	r0, [r6, #0]
    be0a:	2800      	cmp	r0, #0
    be0c:	d1f0      	bne.n	bdf0 <__sfp+0x24>
    be0e:	230c      	movs	r3, #12
    be10:	0004      	movs	r4, r0
    be12:	603b      	str	r3, [r7, #0]
    be14:	0020      	movs	r0, r4
    be16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be18:	2301      	movs	r3, #1
    be1a:	0020      	movs	r0, r4
    be1c:	425b      	negs	r3, r3
    be1e:	81e3      	strh	r3, [r4, #14]
    be20:	3302      	adds	r3, #2
    be22:	81a3      	strh	r3, [r4, #12]
    be24:	6665      	str	r5, [r4, #100]	; 0x64
    be26:	6025      	str	r5, [r4, #0]
    be28:	60a5      	str	r5, [r4, #8]
    be2a:	6065      	str	r5, [r4, #4]
    be2c:	6125      	str	r5, [r4, #16]
    be2e:	6165      	str	r5, [r4, #20]
    be30:	61a5      	str	r5, [r4, #24]
    be32:	2208      	movs	r2, #8
    be34:	0029      	movs	r1, r5
    be36:	305c      	adds	r0, #92	; 0x5c
    be38:	f7ff fd1b 	bl	b872 <memset>
    be3c:	6365      	str	r5, [r4, #52]	; 0x34
    be3e:	63a5      	str	r5, [r4, #56]	; 0x38
    be40:	64a5      	str	r5, [r4, #72]	; 0x48
    be42:	64e5      	str	r5, [r4, #76]	; 0x4c
    be44:	e7e6      	b.n	be14 <__sfp+0x48>
    be46:	46c0      	nop			; (mov r8, r8)
    be48:	0000cba0 	.word	0x0000cba0

0000be4c <_fwalk_reent>:
    be4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    be4e:	0004      	movs	r4, r0
    be50:	0007      	movs	r7, r0
    be52:	2600      	movs	r6, #0
    be54:	9101      	str	r1, [sp, #4]
    be56:	3448      	adds	r4, #72	; 0x48
    be58:	2c00      	cmp	r4, #0
    be5a:	d101      	bne.n	be60 <_fwalk_reent+0x14>
    be5c:	0030      	movs	r0, r6
    be5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    be60:	6863      	ldr	r3, [r4, #4]
    be62:	68a5      	ldr	r5, [r4, #8]
    be64:	9300      	str	r3, [sp, #0]
    be66:	9b00      	ldr	r3, [sp, #0]
    be68:	3b01      	subs	r3, #1
    be6a:	9300      	str	r3, [sp, #0]
    be6c:	d501      	bpl.n	be72 <_fwalk_reent+0x26>
    be6e:	6824      	ldr	r4, [r4, #0]
    be70:	e7f2      	b.n	be58 <_fwalk_reent+0xc>
    be72:	89ab      	ldrh	r3, [r5, #12]
    be74:	2b01      	cmp	r3, #1
    be76:	d908      	bls.n	be8a <_fwalk_reent+0x3e>
    be78:	220e      	movs	r2, #14
    be7a:	5eab      	ldrsh	r3, [r5, r2]
    be7c:	3301      	adds	r3, #1
    be7e:	d004      	beq.n	be8a <_fwalk_reent+0x3e>
    be80:	0029      	movs	r1, r5
    be82:	0038      	movs	r0, r7
    be84:	9b01      	ldr	r3, [sp, #4]
    be86:	4798      	blx	r3
    be88:	4306      	orrs	r6, r0
    be8a:	3568      	adds	r5, #104	; 0x68
    be8c:	e7eb      	b.n	be66 <_fwalk_reent+0x1a>
	...

0000be90 <__swhatbuf_r>:
    be90:	b570      	push	{r4, r5, r6, lr}
    be92:	000e      	movs	r6, r1
    be94:	001d      	movs	r5, r3
    be96:	230e      	movs	r3, #14
    be98:	5ec9      	ldrsh	r1, [r1, r3]
    be9a:	b090      	sub	sp, #64	; 0x40
    be9c:	0014      	movs	r4, r2
    be9e:	2900      	cmp	r1, #0
    bea0:	da07      	bge.n	beb2 <__swhatbuf_r+0x22>
    bea2:	2300      	movs	r3, #0
    bea4:	602b      	str	r3, [r5, #0]
    bea6:	89b3      	ldrh	r3, [r6, #12]
    bea8:	061b      	lsls	r3, r3, #24
    beaa:	d411      	bmi.n	bed0 <__swhatbuf_r+0x40>
    beac:	2380      	movs	r3, #128	; 0x80
    beae:	00db      	lsls	r3, r3, #3
    beb0:	e00f      	b.n	bed2 <__swhatbuf_r+0x42>
    beb2:	aa01      	add	r2, sp, #4
    beb4:	f000 f888 	bl	bfc8 <_fstat_r>
    beb8:	2800      	cmp	r0, #0
    beba:	dbf2      	blt.n	bea2 <__swhatbuf_r+0x12>
    bebc:	22f0      	movs	r2, #240	; 0xf0
    bebe:	9b02      	ldr	r3, [sp, #8]
    bec0:	0212      	lsls	r2, r2, #8
    bec2:	4013      	ands	r3, r2
    bec4:	4a05      	ldr	r2, [pc, #20]	; (bedc <__swhatbuf_r+0x4c>)
    bec6:	189b      	adds	r3, r3, r2
    bec8:	425a      	negs	r2, r3
    beca:	4153      	adcs	r3, r2
    becc:	602b      	str	r3, [r5, #0]
    bece:	e7ed      	b.n	beac <__swhatbuf_r+0x1c>
    bed0:	2340      	movs	r3, #64	; 0x40
    bed2:	2000      	movs	r0, #0
    bed4:	6023      	str	r3, [r4, #0]
    bed6:	b010      	add	sp, #64	; 0x40
    bed8:	bd70      	pop	{r4, r5, r6, pc}
    beda:	46c0      	nop			; (mov r8, r8)
    bedc:	ffffe000 	.word	0xffffe000

0000bee0 <__malloc_lock>:
    bee0:	4770      	bx	lr

0000bee2 <__malloc_unlock>:
    bee2:	4770      	bx	lr

0000bee4 <__sread>:
    bee4:	b570      	push	{r4, r5, r6, lr}
    bee6:	000c      	movs	r4, r1
    bee8:	250e      	movs	r5, #14
    beea:	5f49      	ldrsh	r1, [r1, r5]
    beec:	f000 f892 	bl	c014 <_read_r>
    bef0:	2800      	cmp	r0, #0
    bef2:	db03      	blt.n	befc <__sread+0x18>
    bef4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bef6:	181b      	adds	r3, r3, r0
    bef8:	6563      	str	r3, [r4, #84]	; 0x54
    befa:	bd70      	pop	{r4, r5, r6, pc}
    befc:	89a3      	ldrh	r3, [r4, #12]
    befe:	4a02      	ldr	r2, [pc, #8]	; (bf08 <__sread+0x24>)
    bf00:	4013      	ands	r3, r2
    bf02:	81a3      	strh	r3, [r4, #12]
    bf04:	e7f9      	b.n	befa <__sread+0x16>
    bf06:	46c0      	nop			; (mov r8, r8)
    bf08:	ffffefff 	.word	0xffffefff

0000bf0c <__swrite>:
    bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf0e:	001f      	movs	r7, r3
    bf10:	898b      	ldrh	r3, [r1, #12]
    bf12:	0005      	movs	r5, r0
    bf14:	000c      	movs	r4, r1
    bf16:	0016      	movs	r6, r2
    bf18:	05db      	lsls	r3, r3, #23
    bf1a:	d505      	bpl.n	bf28 <__swrite+0x1c>
    bf1c:	230e      	movs	r3, #14
    bf1e:	5ec9      	ldrsh	r1, [r1, r3]
    bf20:	2200      	movs	r2, #0
    bf22:	2302      	movs	r3, #2
    bf24:	f000 f862 	bl	bfec <_lseek_r>
    bf28:	89a3      	ldrh	r3, [r4, #12]
    bf2a:	4a05      	ldr	r2, [pc, #20]	; (bf40 <__swrite+0x34>)
    bf2c:	0028      	movs	r0, r5
    bf2e:	4013      	ands	r3, r2
    bf30:	81a3      	strh	r3, [r4, #12]
    bf32:	0032      	movs	r2, r6
    bf34:	230e      	movs	r3, #14
    bf36:	5ee1      	ldrsh	r1, [r4, r3]
    bf38:	003b      	movs	r3, r7
    bf3a:	f000 f81f 	bl	bf7c <_write_r>
    bf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf40:	ffffefff 	.word	0xffffefff

0000bf44 <__sseek>:
    bf44:	b570      	push	{r4, r5, r6, lr}
    bf46:	000c      	movs	r4, r1
    bf48:	250e      	movs	r5, #14
    bf4a:	5f49      	ldrsh	r1, [r1, r5]
    bf4c:	f000 f84e 	bl	bfec <_lseek_r>
    bf50:	89a3      	ldrh	r3, [r4, #12]
    bf52:	1c42      	adds	r2, r0, #1
    bf54:	d103      	bne.n	bf5e <__sseek+0x1a>
    bf56:	4a05      	ldr	r2, [pc, #20]	; (bf6c <__sseek+0x28>)
    bf58:	4013      	ands	r3, r2
    bf5a:	81a3      	strh	r3, [r4, #12]
    bf5c:	bd70      	pop	{r4, r5, r6, pc}
    bf5e:	2280      	movs	r2, #128	; 0x80
    bf60:	0152      	lsls	r2, r2, #5
    bf62:	4313      	orrs	r3, r2
    bf64:	81a3      	strh	r3, [r4, #12]
    bf66:	6560      	str	r0, [r4, #84]	; 0x54
    bf68:	e7f8      	b.n	bf5c <__sseek+0x18>
    bf6a:	46c0      	nop			; (mov r8, r8)
    bf6c:	ffffefff 	.word	0xffffefff

0000bf70 <__sclose>:
    bf70:	b510      	push	{r4, lr}
    bf72:	230e      	movs	r3, #14
    bf74:	5ec9      	ldrsh	r1, [r1, r3]
    bf76:	f000 f815 	bl	bfa4 <_close_r>
    bf7a:	bd10      	pop	{r4, pc}

0000bf7c <_write_r>:
    bf7c:	b570      	push	{r4, r5, r6, lr}
    bf7e:	0005      	movs	r5, r0
    bf80:	0008      	movs	r0, r1
    bf82:	0011      	movs	r1, r2
    bf84:	2200      	movs	r2, #0
    bf86:	4c06      	ldr	r4, [pc, #24]	; (bfa0 <_write_r+0x24>)
    bf88:	6022      	str	r2, [r4, #0]
    bf8a:	001a      	movs	r2, r3
    bf8c:	f7fa ffd4 	bl	6f38 <_write>
    bf90:	1c43      	adds	r3, r0, #1
    bf92:	d103      	bne.n	bf9c <_write_r+0x20>
    bf94:	6823      	ldr	r3, [r4, #0]
    bf96:	2b00      	cmp	r3, #0
    bf98:	d000      	beq.n	bf9c <_write_r+0x20>
    bf9a:	602b      	str	r3, [r5, #0]
    bf9c:	bd70      	pop	{r4, r5, r6, pc}
    bf9e:	46c0      	nop			; (mov r8, r8)
    bfa0:	20000dc4 	.word	0x20000dc4

0000bfa4 <_close_r>:
    bfa4:	2300      	movs	r3, #0
    bfa6:	b570      	push	{r4, r5, r6, lr}
    bfa8:	4c06      	ldr	r4, [pc, #24]	; (bfc4 <_close_r+0x20>)
    bfaa:	0005      	movs	r5, r0
    bfac:	0008      	movs	r0, r1
    bfae:	6023      	str	r3, [r4, #0]
    bfb0:	f7fb f816 	bl	6fe0 <_close>
    bfb4:	1c43      	adds	r3, r0, #1
    bfb6:	d103      	bne.n	bfc0 <_close_r+0x1c>
    bfb8:	6823      	ldr	r3, [r4, #0]
    bfba:	2b00      	cmp	r3, #0
    bfbc:	d000      	beq.n	bfc0 <_close_r+0x1c>
    bfbe:	602b      	str	r3, [r5, #0]
    bfc0:	bd70      	pop	{r4, r5, r6, pc}
    bfc2:	46c0      	nop			; (mov r8, r8)
    bfc4:	20000dc4 	.word	0x20000dc4

0000bfc8 <_fstat_r>:
    bfc8:	2300      	movs	r3, #0
    bfca:	b570      	push	{r4, r5, r6, lr}
    bfcc:	4c06      	ldr	r4, [pc, #24]	; (bfe8 <_fstat_r+0x20>)
    bfce:	0005      	movs	r5, r0
    bfd0:	0008      	movs	r0, r1
    bfd2:	0011      	movs	r1, r2
    bfd4:	6023      	str	r3, [r4, #0]
    bfd6:	f7fb f80d 	bl	6ff4 <_fstat>
    bfda:	1c43      	adds	r3, r0, #1
    bfdc:	d103      	bne.n	bfe6 <_fstat_r+0x1e>
    bfde:	6823      	ldr	r3, [r4, #0]
    bfe0:	2b00      	cmp	r3, #0
    bfe2:	d000      	beq.n	bfe6 <_fstat_r+0x1e>
    bfe4:	602b      	str	r3, [r5, #0]
    bfe6:	bd70      	pop	{r4, r5, r6, pc}
    bfe8:	20000dc4 	.word	0x20000dc4

0000bfec <_lseek_r>:
    bfec:	b570      	push	{r4, r5, r6, lr}
    bfee:	0005      	movs	r5, r0
    bff0:	0008      	movs	r0, r1
    bff2:	0011      	movs	r1, r2
    bff4:	2200      	movs	r2, #0
    bff6:	4c06      	ldr	r4, [pc, #24]	; (c010 <_lseek_r+0x24>)
    bff8:	6022      	str	r2, [r4, #0]
    bffa:	001a      	movs	r2, r3
    bffc:	f7fb f808 	bl	7010 <_lseek>
    c000:	1c43      	adds	r3, r0, #1
    c002:	d103      	bne.n	c00c <_lseek_r+0x20>
    c004:	6823      	ldr	r3, [r4, #0]
    c006:	2b00      	cmp	r3, #0
    c008:	d000      	beq.n	c00c <_lseek_r+0x20>
    c00a:	602b      	str	r3, [r5, #0]
    c00c:	bd70      	pop	{r4, r5, r6, pc}
    c00e:	46c0      	nop			; (mov r8, r8)
    c010:	20000dc4 	.word	0x20000dc4

0000c014 <_read_r>:
    c014:	b570      	push	{r4, r5, r6, lr}
    c016:	0005      	movs	r5, r0
    c018:	0008      	movs	r0, r1
    c01a:	0011      	movs	r1, r2
    c01c:	2200      	movs	r2, #0
    c01e:	4c06      	ldr	r4, [pc, #24]	; (c038 <_read_r+0x24>)
    c020:	6022      	str	r2, [r4, #0]
    c022:	001a      	movs	r2, r3
    c024:	f7fa ff5e 	bl	6ee4 <_read>
    c028:	1c43      	adds	r3, r0, #1
    c02a:	d103      	bne.n	c034 <_read_r+0x20>
    c02c:	6823      	ldr	r3, [r4, #0]
    c02e:	2b00      	cmp	r3, #0
    c030:	d000      	beq.n	c034 <_read_r+0x20>
    c032:	602b      	str	r3, [r5, #0]
    c034:	bd70      	pop	{r4, r5, r6, pc}
    c036:	46c0      	nop			; (mov r8, r8)
    c038:	20000dc4 	.word	0x20000dc4
    c03c:	0000064c 	.word	0x0000064c
    c040:	0000064c 	.word	0x0000064c
    c044:	00000640 	.word	0x00000640
    c048:	0000064c 	.word	0x0000064c
    c04c:	00000640 	.word	0x00000640
    c050:	0000061a 	.word	0x0000061a
    c054:	0000061a 	.word	0x0000061a
    c058:	0000064c 	.word	0x0000064c
    c05c:	0000064c 	.word	0x0000064c
    c060:	0000064c 	.word	0x0000064c
    c064:	0000064c 	.word	0x0000064c
    c068:	0000064c 	.word	0x0000064c
    c06c:	0000064c 	.word	0x0000064c
    c070:	0000064c 	.word	0x0000064c
    c074:	0000064c 	.word	0x0000064c
    c078:	0000064c 	.word	0x0000064c
    c07c:	0000064c 	.word	0x0000064c
    c080:	0000064c 	.word	0x0000064c
    c084:	0000064c 	.word	0x0000064c
    c088:	0000064c 	.word	0x0000064c
    c08c:	0000064c 	.word	0x0000064c
    c090:	0000064c 	.word	0x0000064c
    c094:	0000064c 	.word	0x0000064c
    c098:	0000064c 	.word	0x0000064c
    c09c:	0000064c 	.word	0x0000064c
    c0a0:	0000064c 	.word	0x0000064c
    c0a4:	0000064c 	.word	0x0000064c
    c0a8:	0000064c 	.word	0x0000064c
    c0ac:	0000064c 	.word	0x0000064c
    c0b0:	0000064c 	.word	0x0000064c
    c0b4:	0000064c 	.word	0x0000064c
    c0b8:	0000064c 	.word	0x0000064c
    c0bc:	0000064c 	.word	0x0000064c
    c0c0:	0000064c 	.word	0x0000064c
    c0c4:	0000064c 	.word	0x0000064c
    c0c8:	0000064c 	.word	0x0000064c
    c0cc:	0000064c 	.word	0x0000064c
    c0d0:	0000064c 	.word	0x0000064c
    c0d4:	0000064c 	.word	0x0000064c
    c0d8:	0000064c 	.word	0x0000064c
    c0dc:	0000064c 	.word	0x0000064c
    c0e0:	0000064c 	.word	0x0000064c
    c0e4:	0000064c 	.word	0x0000064c
    c0e8:	0000064c 	.word	0x0000064c
    c0ec:	0000064c 	.word	0x0000064c
    c0f0:	0000064c 	.word	0x0000064c
    c0f4:	0000064c 	.word	0x0000064c
    c0f8:	0000064c 	.word	0x0000064c
    c0fc:	0000064c 	.word	0x0000064c
    c100:	0000064c 	.word	0x0000064c
    c104:	0000064c 	.word	0x0000064c
    c108:	0000064c 	.word	0x0000064c
    c10c:	0000064c 	.word	0x0000064c
    c110:	0000064c 	.word	0x0000064c
    c114:	0000064c 	.word	0x0000064c
    c118:	0000064c 	.word	0x0000064c
    c11c:	0000064c 	.word	0x0000064c
    c120:	0000064c 	.word	0x0000064c
    c124:	0000064c 	.word	0x0000064c
    c128:	0000064c 	.word	0x0000064c
    c12c:	0000064c 	.word	0x0000064c
    c130:	0000064c 	.word	0x0000064c
    c134:	0000064c 	.word	0x0000064c
    c138:	0000064c 	.word	0x0000064c
    c13c:	00000640 	.word	0x00000640
    c140:	00000640 	.word	0x00000640
    c144:	00000656 	.word	0x00000656
    c148:	00000656 	.word	0x00000656
    c14c:	00000656 	.word	0x00000656
    c150:	00000656 	.word	0x00000656

0000c154 <sd_mmc_trans_units>:
    c154:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000c170 <sd_trans_multipliers>:
    c170:	00000000 0000000a 0000000c 0000000d     ................
    c180:	0000000f 00000014 00000019 0000001e     ................
    c190:	00000023 00000028 0000002d 00000032     #...(...-...2...
    c1a0:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000c1b0 <mmc_trans_multipliers>:
    c1b0:	00000000 0000000a 0000000c 0000000d     ................
    c1c0:	0000000f 00000014 0000001a 0000001e     ................
    c1d0:	00000023 00000028 0000002d 00000034     #...(...-...4...
    c1e0:	00000037 0000003c 00000046 00000050     7...<...F...P...
    c1f0:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
    c200:	22302074 00000000                       t 0"....

0000c208 <lun_desc>:
    c208:	0000234d 000023a5 000023f1 0000243d     M#...#...#..=$..
    c218:	0000246d 000024f1 00002581 0000c1f0     m$...$...%......
    c228:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    c238:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    c248:	00006062 000060dc 000060dc 00006080     b`...`...`...`..
    c258:	0000607a 00006086 00006068 0000608c     z`...`..h`...`..
    c268:	000060c2 000063a8 000063f8 000063f8     .`...c...c...c..
    c278:	000063f4 0000639a 000063ba 0000638a     .c...c...c...c..
    c288:	000063cc 000063de 00006446 00006474     .c...c..Fd..td..
    c298:	00006474 00006470 00006440 0000644c     td..pd..@d..Ld..
    c2a8:	0000643a 00006452 00006458              :d..Rd..Xd..

0000c2b4 <LfnOfs>:
    c2b4:	07050301 12100e09 1c181614 0000001e     ................
    c2c4:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    c2d4:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
    c2e4:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
    c2f4:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
    c304:	20205441 00202020                       AT     .

0000c30c <excvt.4558>:
    c30c:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    c31c:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    c32c:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    c33c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    c34c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    c35c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    c36c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    c37c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000c38c <Tbl>:
    c38c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    c39c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    c3ac:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    c3bc:	00d600ff 00f800dc 00d800a3 019200d7     ................
    c3cc:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    c3dc:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    c3ec:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    c3fc:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    c40c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    c41c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    c42c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    c43c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    c44c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    c45c:	00da00de 00d900db 00dd00fd 00b400af     ................
    c46c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    c47c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000c48c <tbl_lower.4308>:
    c48c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    c49c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    c4ac:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    c4bc:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    c4cc:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    c4dc:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    c4ec:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    c4fc:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    c50c:	01050103 01090107 010d010b 0111010f     ................
    c51c:	01150113 01190117 011d011b 0121011f     ..............!.
    c52c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    c53c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    c54c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    c55c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    c56c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    c57c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    c58c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    c59c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    c5ac:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    c5bc:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    c5cc:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    c5dc:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    c5ec:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    c5fc:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    c60c:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    c61c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    c62c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    c63c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    c64c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    c65c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000c66c <tbl_upper.4309>:
    c66c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    c67c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    c68c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    c69c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    c6ac:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    c6bc:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    c6cc:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    c6dc:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    c6ec:	01040102 01080106 010c010a 0110010e     ................
    c6fc:	01140112 01180116 011c011a 0120011e     .............. .
    c70c:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    c71c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    c72c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    c73c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    c74c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    c75c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    c76c:	03940393 03960395 03980397 039a0399     ................
    c77c:	039c039b 039e039d 03a0039f 03a303a1     ................
    c78c:	03a503a4 03a703a6 03a903a8 041003aa     ................
    c79c:	04120411 04140413 04160415 04180417     ................
    c7ac:	041a0419 041c041b 041e041d 0420041f     .............. .
    c7bc:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    c7cc:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    c7dc:	04030402 04050404 04070406 04090408     ................
    c7ec:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    c7fc:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    c80c:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    c81c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    c82c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    c83c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    c84c:	35455345 20303631 4e45202d 20524554     ESE5160 - ENTER 
    c85c:	544f4f42 44414f4c 00005245 2d0d0a0c     BOOTLOADER.....-
    c86c:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    c87c:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    c88c:	000d0a2d 43204453 20445241 6c696166     -...SD CARD fail
    c89c:	20216465 63656843 6f79206b 63207275     ed! Check your c
    c8ac:	656e6e6f 6f697463 202e736e 74737953     onnections. Syst
    c8bc:	77206d65 206c6c69 74736572 20747261     em will restart 
    c8cc:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
    c8dc:	43204453 20445241 6e756f6d 75732074     SD CARD mount su
    c8ec:	73656363 46202173 73656c69 65747379     ccess! Filesyste
    c8fc:	6c61206d 6d206f73 746e756f 202e6465     m also mounted. 
    c90c:	00000a0d 61647055 20646574 6d726946     ....Updated Firm
    c91c:	65726177 63755320 73736563 6c6c7566     ware Successfull
    c92c:	00000079 75736e55 73656363 6c756673     y...Unsuccessful
    c93c:	206e6920 61647075 676e6974 72694620      in updating Fir
    c94c:	7261776d 00000065 35455345 20303631     mware...ESE5160 
    c95c:	5845202d 42205449 4c544f4f 4544414f     - EXIT BOOTLOADE
    c96c:	00000052 43204453 20647261 74696e69     R...SD Card init
    c97c:	65746169 6f632064 63657272 21796c74     iated correctly!
    c98c:	00000d0a 6e756f4d 69642074 28206b73     ....Mount disk (
    c99c:	6f6d5f66 29746e75 0d2e2e2e 0000000a     f_mount)........
    c9ac:	4941465b 72205d4c 25207365 000a0d64     [FAIL] res %d...
    c9bc:	5d4b4f5b 00000a0d 61657243 61206574     [OK]....Create a
    c9cc:	6c696620 66282065 65706f5f 2e2e296e      file (f_open)..
    c9dc:	000a0d2e 74697257 6f742065 73657420     ....Write to tes
    c9ec:	69662074 2820656c 75705f66 2e297374     t file (f_puts).
    c9fc:	0a0d2e2e 00000000 74736554 2f445320     ........Test SD/
    ca0c:	20434d4d 63617473 00000a6b 4941465b     MMC stack...[FAI
    ca1c:	0a0d5d4c 00000000 74736554 20736920     L]......Test is 
    ca2c:	63637573 66737365 0a2e6c75 0000000d     successful......
    ca3c:	6c756f43 6f6e2064 706f2074 62206e65     Could not open b
    ca4c:	72616e69 69662079 0d21656c 0000000a     inary file!.....
    ca5c:	74697257 6f742065 73657420 69662074     Write to test fi
    ca6c:	2820656c 72775f66 29657469 0d2e2e2e     le (f_write)....
    ca7c:	0000000a 20646e45 5420666f 2e747365     ....End of Test.
    ca8c:	00000d0a 43204453 20647261 6c696166     ....SD Card fail
    ca9c:	69206465 6974696e 6f697461 4320216e     ed initiation! C
    caac:	6b636568 6e6f6320 7463656e 736e6f69     heck connections
    cabc:	000d0a21 6c756f43 6f6e2064 61632074     !...Could not ca
    cacc:	6c75636c 20657461 20435243 42206e6f     lculate CRC on B
    cadc:	65666675 61442072 0a0d6174 00000000     uffer Data......
    caec:	6c756f43 6f6e2064 61632074 6c75636c     Could not calcul
    cafc:	20657461 20435243 4e206e6f 44204d56     ate CRC on NVM D
    cb0c:	0d617461 0000000a 20435243 20646964     ata.....CRC did 
    cb1c:	20746f6e 6374616d 000a0d68 6c696146     not match...Fail
    cb2c:	54206465 7277206f 20657469 0d4d564e     ed To write NVM.
    cb3c:	0000000a 6f727245 68572072 20656c69     ....Error While 
    cb4c:	73617265 20676e69 61746164 00000a0d     erasing data....
    cb5c:	65676150 746f6e20 61726520 0d646573     Page not erased.
    cb6c:	0000000a 6c756f43 6f6e2064 706f2074     ....Could not op
    cb7c:	62206e65 66206e69 21656c69 00000a0d     en bin file!....
    cb8c:	206e6942 64616552 69614620 2164656c     Bin Read Failed!
    cb9c:	00000a0d                                ....

0000cba0 <_global_impure_ptr>:
    cba0:	20000064                                d.. 

0000cba4 <__sf_fake_stderr>:
	...

0000cbc4 <__sf_fake_stdin>:
	...

0000cbe4 <__sf_fake_stdout>:
	...

0000cc04 <_init>:
    cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc06:	46c0      	nop			; (mov r8, r8)
    cc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cc0a:	bc08      	pop	{r3}
    cc0c:	469e      	mov	lr, r3
    cc0e:	4770      	bx	lr

0000cc10 <__init_array_start>:
    cc10:	000000dd 	.word	0x000000dd

0000cc14 <_fini>:
    cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc16:	46c0      	nop			; (mov r8, r8)
    cc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cc1a:	bc08      	pop	{r3}
    cc1c:	469e      	mov	lr, r3
    cc1e:	4770      	bx	lr

0000cc20 <__fini_array_start>:
    cc20:	000000b5 	.word	0x000000b5
